
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023228  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ed8  080232e8  080232e8  000242e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080261c0  080261c0  00028428  2**0
                  CONTENTS
  4 .ARM          00000008  080261c0  080261c0  000271c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080261c8  080261c8  00028428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080261c8  080261c8  000271c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080261cc  080261cc  000271cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  080261d0  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033a4  20000428  080265f8  00028428  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200037cc  080265f8  000287cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034096  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009373  00000000  00000000  0005c4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00065860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fc9  00000000  00000000  00068338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ba2  00000000  00000000  0006a301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041b90  00000000  00000000  0008cea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a099c  00000000  00000000  000cea33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f3cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae94  00000000  00000000  0016f480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080232d0 	.word	0x080232d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	080232d0 	.word	0x080232d0

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080253d8 	.word	0x080253d8
 8000e0c:	08025418 	.word	0x08025418
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025454 	.word	0x08025454
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fc74 	bl	800ff50 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fccb 	bl	8010020 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fc7e 	bl	800ffac <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000444 	.word	0x20000444

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fbfa 	bl	800ff50 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fc29 	bl	800ffc8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fc0d 	bl	800ffac <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000028 	.word	0x20000028

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fb94 	bl	800eee4 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a08 	.word	0x20000a08

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd8e 	bl	80062f8 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fdeb 	bl	80063bc <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000570 	.word	0x20000570
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000574 	.word	0x20000574

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a48 	.word	0x20000a48
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a54 	.word	0x20000a54
 8003884:	20000a58 	.word	0x20000a58

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a5c 	.word	0x20000a5c
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a7c 	.word	0x20000a7c
 80038f0:	20000a80 	.word	0x20000a80

080038f4 <setHIDS>:


void setHIDS(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <setHIDS+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <setHIDS+0x20>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000a14 	.word	0x20000a14

08003918 <setVOC>:

void setVOC(uint16_t voc) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	0002      	movs	r2, r0
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8003924:	4b08      	ldr	r3, [pc, #32]	@ (8003948 <setVOC+0x30>)
 8003926:	1dba      	adds	r2, r7, #6
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <setVOC+0x30>)
 800392e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003930:	1dba      	adds	r2, r7, #6
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d903      	bls.n	8003940 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <setVOC+0x30>)
 800393a:	1dba      	adds	r2, r7, #6
 800393c:	8812      	ldrh	r2, [r2, #0]
 800393e:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000a14 	.word	0x20000a14

0800394c <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <setMic+0x28>)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 800395e:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <setMic+0x28>)
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <setMic+0x28>)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	20000a14 	.word	0x20000a14

08003978 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	0002      	movs	r2, r0
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003984:	1dbb      	adds	r3, r7, #6
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	0018      	movs	r0, r3
 800398a:	f7fd fe21 	bl	80015d0 <__aeabi_i2f>
 800398e:	1c03      	adds	r3, r0, #0
 8003990:	490d      	ldr	r1, [pc, #52]	@ (80039c8 <setPM2p5+0x50>)
 8003992:	1c18      	adds	r0, r3, #0
 8003994:	f7fd f91e 	bl	8000bd4 <__aeabi_fdiv>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	1c1a      	adds	r2, r3, #0
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <setPM2p5+0x54>)
 800399e:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <setPM2p5+0x54>)
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <setPM2p5+0x54>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	1c19      	adds	r1, r3, #0
 80039aa:	1c10      	adds	r0, r2, #0
 80039ac:	f7fc fdd4 	bl	8000558 <__aeabi_fcmpgt>
 80039b0:	1e03      	subs	r3, r0, #0
 80039b2:	d100      	bne.n	80039b6 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 80039b4:	e003      	b.n	80039be <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <setPM2p5+0x54>)
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <setPM2p5+0x54>)
 80039bc:	60da      	str	r2, [r3, #12]
}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	41200000 	.word	0x41200000
 80039cc:	20000a14 	.word	0x20000a14

080039d0 <setPM10>:

void setPM10(uint16_t PM10) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	0002      	movs	r2, r0
 80039d8:	1dbb      	adds	r3, r7, #6
 80039da:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80039dc:	1dbb      	adds	r3, r7, #6
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fd fdf5 	bl	80015d0 <__aeabi_i2f>
 80039e6:	1c03      	adds	r3, r0, #0
 80039e8:	490d      	ldr	r1, [pc, #52]	@ (8003a20 <setPM10+0x50>)
 80039ea:	1c18      	adds	r0, r3, #0
 80039ec:	f7fd f8f2 	bl	8000bd4 <__aeabi_fdiv>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	1c1a      	adds	r2, r3, #0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <setPM10+0x54>)
 80039f6:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80039f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <setPM10+0x54>)
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <setPM10+0x54>)
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	1c19      	adds	r1, r3, #0
 8003a02:	1c10      	adds	r0, r2, #0
 8003a04:	f7fc fda8 	bl	8000558 <__aeabi_fcmpgt>
 8003a08:	1e03      	subs	r3, r0, #0
 8003a0a:	d100      	bne.n	8003a0e <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8003a0c:	e003      	b.n	8003a16 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8003a0e:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <setPM10+0x54>)
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <setPM10+0x54>)
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	41200000 	.word	0x41200000
 8003a24:	20000a14 	.word	0x20000a14

08003a28 <setNOx>:

void setNOx(uint16_t nox) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	0002      	movs	r2, r0
 8003a30:	1dbb      	adds	r3, r7, #6
 8003a32:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <setNOx+0x30>)
 8003a36:	1dba      	adds	r2, r7, #6
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <setNOx+0x30>)
 8003a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a40:	1dba      	adds	r2, r7, #6
 8003a42:	8812      	ldrh	r2, [r2, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d903      	bls.n	8003a50 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 8003a48:	4b03      	ldr	r3, [pc, #12]	@ (8003a58 <setNOx+0x30>)
 8003a4a:	1dba      	adds	r2, r7, #6
 8003a4c:	8812      	ldrh	r2, [r2, #0]
 8003a4e:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000a14 	.word	0x20000a14

08003a5c <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  MeasVal.PM2p5max = 0.0f;
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <resetMaxMeasurementValues+0x24>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	60da      	str	r2, [r3, #12]
  MeasVal.PM10p0max = 0.0f;
 8003a66:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <resetMaxMeasurementValues+0x24>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	615a      	str	r2, [r3, #20]
  MeasVal.VOCIndexmax = 0;
 8003a6c:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <resetMaxMeasurementValues+0x24>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	845a      	strh	r2, [r3, #34]	@ 0x22
  MeasVal.airNOxmax = 0;
 8003a72:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <resetMaxMeasurementValues+0x24>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	84da      	strh	r2, [r3, #38]	@ 0x26
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	20000a14 	.word	0x20000a14

08003a84 <SetConfigMode>:

void SetConfigMode(){
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003a88:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <SetConfigMode+0x30>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4053      	eors	r3, r2
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003a96:	4a08      	ldr	r2, [pc, #32]	@ (8003ab8 <SetConfigMode+0x34>)
 8003a98:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <SetConfigMode+0x38>)
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	f00a fddd 	bl	800e65c <CreateLine>
  }
  ReconfigSet = true;
 8003aa2:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <SetConfigMode+0x30>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <SetConfigMode+0x3c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20000553 	.word	0x20000553
 8003ab8:	080232e8 	.word	0x080232e8
 8003abc:	08023308 	.word	0x08023308
 8003ac0:	200001f7 	.word	0x200001f7

08003ac4 <GetReconfigMode>:

bool GetReconfigMode() {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003ac8:	4b02      	ldr	r3, [pc, #8]	@ (8003ad4 <GetReconfigMode+0x10>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	20000553 	.word	0x20000553

08003ad8 <ESP_GetUID>:

void ESP_GetUID(){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003adc:	f00b fa4c 	bl	800ef78 <HAL_GetUIDw0>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <ESP_GetUID+0x28>)
 8003ae4:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003ae6:	f00b fa51 	bl	800ef8c <HAL_GetUIDw1>
 8003aea:	0002      	movs	r2, r0
 8003aec:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <ESP_GetUID+0x28>)
 8003aee:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003af0:	f00b fa56 	bl	800efa0 <HAL_GetUIDw2>
 8003af4:	0002      	movs	r2, r0
 8003af6:	4b02      	ldr	r3, [pc, #8]	@ (8003b00 <ESP_GetUID+0x28>)
 8003af8:	609a      	str	r2, [r3, #8]
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000055c 	.word	0x2000055c

08003b04 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <ESP_Init+0x2c>)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003b12:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <ESP_Init+0x30>)
 8003b14:	2202      	movs	r2, #2
 8003b16:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003b18:	f7ff ffde 	bl	8003ad8 <ESP_GetUID>
  beurs = checkEEprom();
 8003b1c:	f7ff fe7e 	bl	800381c <checkEEprom>
 8003b20:	0003      	movs	r3, r0
 8003b22:	001a      	movs	r2, r3
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <ESP_Init+0x34>)
 8003b26:	701a      	strb	r2, [r3, #0]
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000448 	.word	0x20000448
 8003b34:	20000030 	.word	0x20000030
 8003b38:	20000556 	.word	0x20000556

08003b3c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	000a      	movs	r2, r1
 8003b46:	1cbb      	adds	r3, r7, #2
 8003b48:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <ESP_Send+0x54>)
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	250f      	movs	r5, #15
 8003b50:	197c      	adds	r4, r7, r5
 8003b52:	1cbb      	adds	r3, r7, #2
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0019      	movs	r1, r3
 8003b5a:	f013 fced 	bl	8017538 <HAL_UART_Transmit_DMA>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b62:	197b      	adds	r3, r7, r5
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <ESP_Send+0x58>)
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <ESP_Send+0x5c>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	2001      	movs	r0, #1
 8003b72:	f00a fd73 	bl	800e65c <CreateLine>
    return false;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e006      	b.n	8003b88 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <ESP_Send+0x60>)
 8003b7e:	4908      	ldr	r1, [pc, #32]	@ (8003ba0 <ESP_Send+0x64>)
 8003b80:	2003      	movs	r0, #3
 8003b82:	f00a fd6b 	bl	800e65c <CreateLine>
#endif
  return true;
 8003b86:	2301      	movs	r3, #1
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b90:	20000448 	.word	0x20000448
 8003b94:	0802330c 	.word	0x0802330c
 8003b98:	0802332c 	.word	0x0802332c
 8003b9c:	08023330 	.word	0x08023330
 8003ba0:	08023308 	.word	0x08023308

08003ba4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	000a      	movs	r2, r1
 8003bae:	1cbb      	adds	r3, r7, #2
 8003bb0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003bb2:	4b45      	ldr	r3, [pc, #276]	@ (8003cc8 <ESP_Receive+0x124>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003bb8:	260f      	movs	r6, #15
 8003bba:	19bb      	adds	r3, r7, r6
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003bc0:	4b42      	ldr	r3, [pc, #264]	@ (8003ccc <ESP_Receive+0x128>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	250e      	movs	r5, #14
 8003bc6:	197c      	adds	r4, r7, r5
 8003bc8:	1cbb      	adds	r3, r7, #2
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0019      	movs	r1, r3
 8003bd0:	f013 fd42 	bl	8017658 <HAL_UART_Receive_DMA>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003bd8:	002c      	movs	r4, r5
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d100      	bne.n	8003be4 <ESP_Receive+0x40>
 8003be2:	e06c      	b.n	8003cbe <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003be4:	4b39      	ldr	r3, [pc, #228]	@ (8003ccc <ESP_Receive+0x128>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2284      	movs	r2, #132	@ 0x84
 8003bea:	589b      	ldr	r3, [r3, r2]
 8003bec:	4a38      	ldr	r2, [pc, #224]	@ (8003cd0 <ESP_Receive+0x12c>)
 8003bee:	4939      	ldr	r1, [pc, #228]	@ (8003cd4 <ESP_Receive+0x130>)
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f00a fd33 	bl	800e65c <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bf6:	193b      	adds	r3, r7, r4
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d008      	beq.n	8003c12 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003c00:	4a35      	ldr	r2, [pc, #212]	@ (8003cd8 <ESP_Receive+0x134>)
 8003c02:	4b34      	ldr	r3, [pc, #208]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c04:	0019      	movs	r1, r3
 8003c06:	2001      	movs	r0, #1
 8003c08:	f00a fd28 	bl	800e65c <CreateLine>
      reset = true;
 8003c0c:	19bb      	adds	r3, r7, r6
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003c12:	230e      	movs	r3, #14
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d005      	beq.n	8003c2a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cdc <ESP_Receive+0x138>)
 8003c20:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c22:	0019      	movs	r1, r3
 8003c24:	2001      	movs	r0, #1
 8003c26:	f00a fd19 	bl	800e65c <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c2a:	230e      	movs	r3, #14
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2204      	movs	r2, #4
 8003c32:	4013      	ands	r3, r2
 8003c34:	d005      	beq.n	8003c42 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce0 <ESP_Receive+0x13c>)
 8003c38:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f00a fd0d 	bl	800e65c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c42:	230e      	movs	r3, #14
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d005      	beq.n	8003c5a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c4e:	4a25      	ldr	r2, [pc, #148]	@ (8003ce4 <ESP_Receive+0x140>)
 8003c50:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c52:	0019      	movs	r1, r3
 8003c54:	2001      	movs	r0, #1
 8003c56:	f00a fd01 	bl	800e65c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c5a:	230e      	movs	r3, #14
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	d005      	beq.n	8003c72 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c66:	4a20      	ldr	r2, [pc, #128]	@ (8003ce8 <ESP_Receive+0x144>)
 8003c68:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f00a fcf5 	bl	800e65c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c72:	230e      	movs	r3, #14
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d005      	beq.n	8003c8a <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <ESP_Receive+0x148>)
 8003c80:	4b14      	ldr	r3, [pc, #80]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c82:	0019      	movs	r1, r3
 8003c84:	2001      	movs	r0, #1
 8003c86:	f00a fce9 	bl	800e65c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c8a:	230e      	movs	r3, #14
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2240      	movs	r2, #64	@ 0x40
 8003c92:	4013      	ands	r3, r2
 8003c94:	d005      	beq.n	8003ca2 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c96:	4a16      	ldr	r2, [pc, #88]	@ (8003cf0 <ESP_Receive+0x14c>)
 8003c98:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <ESP_Receive+0x130>)
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f00a fcdd 	bl	800e65c <CreateLine>
    }
#endif
    if (reset) {
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <ESP_Receive+0x110>
      SetAllREDLED();
 8003cac:	f009 fc54 	bl	800d558 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003cb0:	f00b fde1 	bl	800f876 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <ESP_Receive+0x124>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
    return false;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <ESP_Receive+0x11c>
  }
  return true;
 8003cbe:	2301      	movs	r3, #1
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b005      	add	sp, #20
 8003cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc8:	2000044c 	.word	0x2000044c
 8003ccc:	20000448 	.word	0x20000448
 8003cd0:	08023340 	.word	0x08023340
 8003cd4:	0802332c 	.word	0x0802332c
 8003cd8:	08023370 	.word	0x08023370
 8003cdc:	08023394 	.word	0x08023394
 8003ce0:	080233b8 	.word	0x080233b8
 8003ce4:	080233dc 	.word	0x080233dc
 8003ce8:	08023400 	.word	0x08023400
 8003cec:	0802342c 	.word	0x0802342c
 8003cf0:	0802345c 	.word	0x0802345c

08003cf4 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <HAL_UART_ErrorCallback+0x34>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d10c      	bne.n	8003d20 <HAL_UART_ErrorCallback+0x2c>
    if (huart->ErrorCode != 4) {
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2284      	movs	r2, #132	@ 0x84
 8003d0a:	589b      	ldr	r3, [r3, r2]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d007      	beq.n	8003d20 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2284      	movs	r2, #132	@ 0x84
 8003d14:	589b      	ldr	r3, [r3, r2]
 8003d16:	4a05      	ldr	r2, [pc, #20]	@ (8003d2c <HAL_UART_ErrorCallback+0x38>)
 8003d18:	4905      	ldr	r1, [pc, #20]	@ (8003d30 <HAL_UART_ErrorCallback+0x3c>)
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	f00a fc9e 	bl	800e65c <CreateLine>
    }
  }
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000448 	.word	0x20000448
 8003d2c:	0802348c 	.word	0x0802348c
 8003d30:	08023308 	.word	0x08023308

08003d34 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e010      	b.n	8003d66 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	001a      	movs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	1898      	adds	r0, r3, r2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	18d3      	adds	r3, r2, r3
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	001a      	movs	r2, r3
 8003d58:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <uint8ArrayToString+0x44>)
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	f01c f9d6 	bl	802010c <siprintf>
  for (int i = 0; i < 12; i++)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b0b      	cmp	r3, #11
 8003d6a:	ddeb      	ble.n	8003d44 <uint8ArrayToString+0x10>
  }
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	080234b8 	.word	0x080234b8

08003d7c <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7e:	b089      	sub	sp, #36	@ 0x24
 8003d80:	af04      	add	r7, sp, #16
 8003d82:	0002      	movs	r2, r0
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d88:	4bd4      	ldr	r3, [pc, #848]	@ (80040dc <CreateMessage+0x360>)
 8003d8a:	48d5      	ldr	r0, [pc, #852]	@ (80040e0 <CreateMessage+0x364>)
 8003d8c:	220c      	movs	r2, #12
 8003d8e:	0019      	movs	r1, r3
 8003d90:	f7ff fcb2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d94:	4bd3      	ldr	r3, [pc, #844]	@ (80040e4 <CreateMessage+0x368>)
 8003d96:	48d4      	ldr	r0, [pc, #848]	@ (80040e8 <CreateMessage+0x36c>)
 8003d98:	220c      	movs	r2, #12
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	f7ff fcac 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003da0:	4bd2      	ldr	r3, [pc, #840]	@ (80040ec <CreateMessage+0x370>)
 8003da2:	48d3      	ldr	r0, [pc, #844]	@ (80040f0 <CreateMessage+0x374>)
 8003da4:	220c      	movs	r2, #12
 8003da6:	0019      	movs	r1, r3
 8003da8:	f7ff fca6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dac:	4bd1      	ldr	r3, [pc, #836]	@ (80040f4 <CreateMessage+0x378>)
 8003dae:	48d2      	ldr	r0, [pc, #840]	@ (80040f8 <CreateMessage+0x37c>)
 8003db0:	220c      	movs	r2, #12
 8003db2:	0019      	movs	r1, r3
 8003db4:	f7ff fca0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003db8:	4bd0      	ldr	r3, [pc, #832]	@ (80040fc <CreateMessage+0x380>)
 8003dba:	48d1      	ldr	r0, [pc, #836]	@ (8004100 <CreateMessage+0x384>)
 8003dbc:	220c      	movs	r2, #12
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	f7ff fc9a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dc4:	4bcf      	ldr	r3, [pc, #828]	@ (8004104 <CreateMessage+0x388>)
 8003dc6:	48d0      	ldr	r0, [pc, #832]	@ (8004108 <CreateMessage+0x38c>)
 8003dc8:	220c      	movs	r2, #12
 8003dca:	0019      	movs	r1, r3
 8003dcc:	f7ff fc94 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003dd0:	4bce      	ldr	r3, [pc, #824]	@ (800410c <CreateMessage+0x390>)
 8003dd2:	48cf      	ldr	r0, [pc, #828]	@ (8004110 <CreateMessage+0x394>)
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f7ff fc8e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003ddc:	4bcd      	ldr	r3, [pc, #820]	@ (8004114 <CreateMessage+0x398>)
 8003dde:	48ce      	ldr	r0, [pc, #824]	@ (8004118 <CreateMessage+0x39c>)
 8003de0:	220c      	movs	r2, #12
 8003de2:	0019      	movs	r1, r3
 8003de4:	f7ff fc88 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003de8:	4bcc      	ldr	r3, [pc, #816]	@ (800411c <CreateMessage+0x3a0>)
 8003dea:	48cd      	ldr	r0, [pc, #820]	@ (8004120 <CreateMessage+0x3a4>)
 8003dec:	220c      	movs	r2, #12
 8003dee:	0019      	movs	r1, r3
 8003df0:	f7ff fc82 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003df4:	f7ff fd48 	bl	8003888 <checkName>
 8003df8:	1e03      	subs	r3, r0, #0
 8003dfa:	d006      	beq.n	8003e0a <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003dfc:	4bc9      	ldr	r3, [pc, #804]	@ (8004124 <CreateMessage+0x3a8>)
 8003dfe:	48ca      	ldr	r0, [pc, #808]	@ (8004128 <CreateMessage+0x3ac>)
 8003e00:	221e      	movs	r2, #30
 8003e02:	0019      	movs	r1, r3
 8003e04:	f7ff fc78 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e08:	e005      	b.n	8003e16 <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e0a:	4bc6      	ldr	r3, [pc, #792]	@ (8004124 <CreateMessage+0x3a8>)
 8003e0c:	4ac7      	ldr	r2, [pc, #796]	@ (800412c <CreateMessage+0x3b0>)
 8003e0e:	6811      	ldr	r1, [r2, #0]
 8003e10:	6019      	str	r1, [r3, #0]
 8003e12:	7912      	ldrb	r2, [r2, #4]
 8003e14:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e16:	f7ff fcdd 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e1a:	2390      	movs	r3, #144	@ 0x90
 8003e1c:	00da      	lsls	r2, r3, #3
 8003e1e:	4bc4      	ldr	r3, [pc, #784]	@ (8004130 <CreateMessage+0x3b4>)
 8003e20:	2100      	movs	r1, #0
 8003e22:	0018      	movs	r0, r3
 8003e24:	f01c fab6 	bl	8020394 <memset>
  uint16_t index = 0;
 8003e28:	260e      	movs	r6, #14
 8003e2a:	19bb      	adds	r3, r7, r6
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e30:	19bb      	adds	r3, r7, r6
 8003e32:	881a      	ldrh	r2, [r3, #0]
 8003e34:	4bbe      	ldr	r3, [pc, #760]	@ (8004130 <CreateMessage+0x3b4>)
 8003e36:	18d3      	adds	r3, r2, r3
 8003e38:	4abe      	ldr	r2, [pc, #760]	@ (8004134 <CreateMessage+0x3b8>)
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f01c f965 	bl	802010c <siprintf>
  index = strlen(message);
 8003e42:	4bbb      	ldr	r3, [pc, #748]	@ (8004130 <CreateMessage+0x3b4>)
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7fc f991 	bl	800016c <strlen>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	19bb      	adds	r3, r7, r6
 8003e4e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e50:	4aa2      	ldr	r2, [pc, #648]	@ (80040dc <CreateMessage+0x360>)
 8003e52:	4bb9      	ldr	r3, [pc, #740]	@ (8004138 <CreateMessage+0x3bc>)
 8003e54:	0011      	movs	r1, r2
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7ff ff6c 	bl	8003d34 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e5c:	19bb      	adds	r3, r7, r6
 8003e5e:	881a      	ldrh	r2, [r3, #0]
 8003e60:	4bb3      	ldr	r3, [pc, #716]	@ (8004130 <CreateMessage+0x3b4>)
 8003e62:	18d4      	adds	r4, r2, r3
 8003e64:	4bb5      	ldr	r3, [pc, #724]	@ (800413c <CreateMessage+0x3c0>)
 8003e66:	689d      	ldr	r5, [r3, #8]
 8003e68:	4bb5      	ldr	r3, [pc, #724]	@ (8004140 <CreateMessage+0x3c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1c18      	adds	r0, r3, #0
 8003e6e:	f7ff faf9 	bl	8003464 <__aeabi_f2d>
 8003e72:	0002      	movs	r2, r0
 8003e74:	000b      	movs	r3, r1
 8003e76:	48ab      	ldr	r0, [pc, #684]	@ (8004124 <CreateMessage+0x3a8>)
 8003e78:	49b2      	ldr	r1, [pc, #712]	@ (8004144 <CreateMessage+0x3c8>)
 8003e7a:	9202      	str	r2, [sp, #8]
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	4bae      	ldr	r3, [pc, #696]	@ (8004138 <CreateMessage+0x3bc>)
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	0003      	movs	r3, r0
 8003e84:	002a      	movs	r2, r5
 8003e86:	0020      	movs	r0, r4
 8003e88:	f01c f940 	bl	802010c <siprintf>
  index = strlen(message);
 8003e8c:	4ba8      	ldr	r3, [pc, #672]	@ (8004130 <CreateMessage+0x3b4>)
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fc f96c 	bl	800016c <strlen>
 8003e94:	0002      	movs	r2, r0
 8003e96:	19bb      	adds	r3, r7, r6
 8003e98:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003e9a:	4a92      	ldr	r2, [pc, #584]	@ (80040e4 <CreateMessage+0x368>)
 8003e9c:	4ba6      	ldr	r3, [pc, #664]	@ (8004138 <CreateMessage+0x3bc>)
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff ff47 	bl	8003d34 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003ea6:	19bb      	adds	r3, r7, r6
 8003ea8:	881a      	ldrh	r2, [r3, #0]
 8003eaa:	4ba1      	ldr	r3, [pc, #644]	@ (8004130 <CreateMessage+0x3b4>)
 8003eac:	18d4      	adds	r4, r2, r3
 8003eae:	4ba3      	ldr	r3, [pc, #652]	@ (800413c <CreateMessage+0x3c0>)
 8003eb0:	689d      	ldr	r5, [r3, #8]
 8003eb2:	4ba3      	ldr	r3, [pc, #652]	@ (8004140 <CreateMessage+0x3c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	1c18      	adds	r0, r3, #0
 8003eb8:	f7ff fad4 	bl	8003464 <__aeabi_f2d>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	000b      	movs	r3, r1
 8003ec0:	4898      	ldr	r0, [pc, #608]	@ (8004124 <CreateMessage+0x3a8>)
 8003ec2:	49a1      	ldr	r1, [pc, #644]	@ (8004148 <CreateMessage+0x3cc>)
 8003ec4:	9202      	str	r2, [sp, #8]
 8003ec6:	9303      	str	r3, [sp, #12]
 8003ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8004138 <CreateMessage+0x3bc>)
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	0003      	movs	r3, r0
 8003ece:	002a      	movs	r2, r5
 8003ed0:	0020      	movs	r0, r4
 8003ed2:	f01c f91b 	bl	802010c <siprintf>
  index = strlen(message);
 8003ed6:	4b96      	ldr	r3, [pc, #600]	@ (8004130 <CreateMessage+0x3b4>)
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f7fc f947 	bl	800016c <strlen>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	19bb      	adds	r3, r7, r6
 8003ee2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ee4:	4a81      	ldr	r2, [pc, #516]	@ (80040ec <CreateMessage+0x370>)
 8003ee6:	4b94      	ldr	r3, [pc, #592]	@ (8004138 <CreateMessage+0x3bc>)
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7ff ff22 	bl	8003d34 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003ef0:	19bb      	adds	r3, r7, r6
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8004130 <CreateMessage+0x3b4>)
 8003ef6:	18d4      	adds	r4, r2, r3
 8003ef8:	4b90      	ldr	r3, [pc, #576]	@ (800413c <CreateMessage+0x3c0>)
 8003efa:	689d      	ldr	r5, [r3, #8]
 8003efc:	4b90      	ldr	r3, [pc, #576]	@ (8004140 <CreateMessage+0x3c4>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	1c18      	adds	r0, r3, #0
 8003f02:	f7ff faaf 	bl	8003464 <__aeabi_f2d>
 8003f06:	0002      	movs	r2, r0
 8003f08:	000b      	movs	r3, r1
 8003f0a:	4886      	ldr	r0, [pc, #536]	@ (8004124 <CreateMessage+0x3a8>)
 8003f0c:	498f      	ldr	r1, [pc, #572]	@ (800414c <CreateMessage+0x3d0>)
 8003f0e:	9202      	str	r2, [sp, #8]
 8003f10:	9303      	str	r3, [sp, #12]
 8003f12:	4b89      	ldr	r3, [pc, #548]	@ (8004138 <CreateMessage+0x3bc>)
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	0003      	movs	r3, r0
 8003f18:	002a      	movs	r2, r5
 8003f1a:	0020      	movs	r0, r4
 8003f1c:	f01c f8f6 	bl	802010c <siprintf>
  index = strlen(message);
 8003f20:	4b83      	ldr	r3, [pc, #524]	@ (8004130 <CreateMessage+0x3b4>)
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fc f922 	bl	800016c <strlen>
 8003f28:	0002      	movs	r2, r0
 8003f2a:	19bb      	adds	r3, r7, r6
 8003f2c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f2e:	4a71      	ldr	r2, [pc, #452]	@ (80040f4 <CreateMessage+0x378>)
 8003f30:	4b81      	ldr	r3, [pc, #516]	@ (8004138 <CreateMessage+0x3bc>)
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fefd 	bl	8003d34 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003f3a:	19bb      	adds	r3, r7, r6
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004130 <CreateMessage+0x3b4>)
 8003f40:	18d0      	adds	r0, r2, r3
 8003f42:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <CreateMessage+0x3c0>)
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	4b7e      	ldr	r3, [pc, #504]	@ (8004140 <CreateMessage+0x3c4>)
 8003f48:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f4a:	4c76      	ldr	r4, [pc, #472]	@ (8004124 <CreateMessage+0x3a8>)
 8003f4c:	4980      	ldr	r1, [pc, #512]	@ (8004150 <CreateMessage+0x3d4>)
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	4b79      	ldr	r3, [pc, #484]	@ (8004138 <CreateMessage+0x3bc>)
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	0023      	movs	r3, r4
 8003f56:	f01c f8d9 	bl	802010c <siprintf>
  index = strlen(message);
 8003f5a:	4b75      	ldr	r3, [pc, #468]	@ (8004130 <CreateMessage+0x3b4>)
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fc f905 	bl	800016c <strlen>
 8003f62:	0002      	movs	r2, r0
 8003f64:	19bb      	adds	r3, r7, r6
 8003f66:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4053      	eors	r3, r2
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d100      	bne.n	8003f78 <CreateMessage+0x1fc>
 8003f76:	e0fb      	b.n	8004170 <CreateMessage+0x3f4>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f78:	4a60      	ldr	r2, [pc, #384]	@ (80040fc <CreateMessage+0x380>)
 8003f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004138 <CreateMessage+0x3bc>)
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7ff fed8 	bl	8003d34 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f84:	19bb      	adds	r3, r7, r6
 8003f86:	881a      	ldrh	r2, [r3, #0]
 8003f88:	4b69      	ldr	r3, [pc, #420]	@ (8004130 <CreateMessage+0x3b4>)
 8003f8a:	18d4      	adds	r4, r2, r3
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800413c <CreateMessage+0x3c0>)
 8003f8e:	689d      	ldr	r5, [r3, #8]
 8003f90:	4b70      	ldr	r3, [pc, #448]	@ (8004154 <CreateMessage+0x3d8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c18      	adds	r0, r3, #0
 8003f96:	f7ff fa65 	bl	8003464 <__aeabi_f2d>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	000b      	movs	r3, r1
 8003f9e:	4861      	ldr	r0, [pc, #388]	@ (8004124 <CreateMessage+0x3a8>)
 8003fa0:	496d      	ldr	r1, [pc, #436]	@ (8004158 <CreateMessage+0x3dc>)
 8003fa2:	9202      	str	r2, [sp, #8]
 8003fa4:	9303      	str	r3, [sp, #12]
 8003fa6:	4b64      	ldr	r3, [pc, #400]	@ (8004138 <CreateMessage+0x3bc>)
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	0003      	movs	r3, r0
 8003fac:	002a      	movs	r2, r5
 8003fae:	0020      	movs	r0, r4
 8003fb0:	f01c f8ac 	bl	802010c <siprintf>
    index = strlen(message);
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8004130 <CreateMessage+0x3b4>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fc f8d8 	bl	800016c <strlen>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	19bb      	adds	r3, r7, r6
 8003fc0:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003fc2:	4a50      	ldr	r2, [pc, #320]	@ (8004104 <CreateMessage+0x388>)
 8003fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8004138 <CreateMessage+0x3bc>)
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff feb3 	bl	8003d34 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003fce:	19bb      	adds	r3, r7, r6
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	4b57      	ldr	r3, [pc, #348]	@ (8004130 <CreateMessage+0x3b4>)
 8003fd4:	18d4      	adds	r4, r2, r3
 8003fd6:	4b59      	ldr	r3, [pc, #356]	@ (800413c <CreateMessage+0x3c0>)
 8003fd8:	689d      	ldr	r5, [r3, #8]
 8003fda:	4b60      	ldr	r3, [pc, #384]	@ (800415c <CreateMessage+0x3e0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1c18      	adds	r0, r3, #0
 8003fe0:	f7ff fa40 	bl	8003464 <__aeabi_f2d>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	484e      	ldr	r0, [pc, #312]	@ (8004124 <CreateMessage+0x3a8>)
 8003fea:	495d      	ldr	r1, [pc, #372]	@ (8004160 <CreateMessage+0x3e4>)
 8003fec:	9202      	str	r2, [sp, #8]
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	4b51      	ldr	r3, [pc, #324]	@ (8004138 <CreateMessage+0x3bc>)
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	002a      	movs	r2, r5
 8003ff8:	0020      	movs	r0, r4
 8003ffa:	f01c f887 	bl	802010c <siprintf>
    index = strlen(message);
 8003ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8004130 <CreateMessage+0x3b4>)
 8004000:	0018      	movs	r0, r3
 8004002:	f7fc f8b3 	bl	800016c <strlen>
 8004006:	0002      	movs	r2, r0
 8004008:	19bb      	adds	r3, r7, r6
 800400a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 800400c:	4a3f      	ldr	r2, [pc, #252]	@ (800410c <CreateMessage+0x390>)
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <CreateMessage+0x3bc>)
 8004010:	0011      	movs	r1, r2
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fe8e 	bl	8003d34 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004018:	19bb      	adds	r3, r7, r6
 800401a:	881a      	ldrh	r2, [r3, #0]
 800401c:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <CreateMessage+0x3b4>)
 800401e:	18d0      	adds	r0, r2, r3
 8004020:	4b46      	ldr	r3, [pc, #280]	@ (800413c <CreateMessage+0x3c0>)
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4b46      	ldr	r3, [pc, #280]	@ (8004140 <CreateMessage+0x3c4>)
 8004026:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004028:	4c3e      	ldr	r4, [pc, #248]	@ (8004124 <CreateMessage+0x3a8>)
 800402a:	494e      	ldr	r1, [pc, #312]	@ (8004164 <CreateMessage+0x3e8>)
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	4b42      	ldr	r3, [pc, #264]	@ (8004138 <CreateMessage+0x3bc>)
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	0023      	movs	r3, r4
 8004034:	f01c f86a 	bl	802010c <siprintf>
    index = strlen(message);
 8004038:	4b3d      	ldr	r3, [pc, #244]	@ (8004130 <CreateMessage+0x3b4>)
 800403a:	0018      	movs	r0, r3
 800403c:	f7fc f896 	bl	800016c <strlen>
 8004040:	0002      	movs	r2, r0
 8004042:	19bb      	adds	r3, r7, r6
 8004044:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8004046:	4a33      	ldr	r2, [pc, #204]	@ (8004114 <CreateMessage+0x398>)
 8004048:	4b3b      	ldr	r3, [pc, #236]	@ (8004138 <CreateMessage+0x3bc>)
 800404a:	0011      	movs	r1, r2
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff fe71 	bl	8003d34 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8004052:	19bb      	adds	r3, r7, r6
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <CreateMessage+0x3b4>)
 8004058:	18d4      	adds	r4, r2, r3
 800405a:	4b38      	ldr	r3, [pc, #224]	@ (800413c <CreateMessage+0x3c0>)
 800405c:	689d      	ldr	r5, [r3, #8]
 800405e:	4b38      	ldr	r3, [pc, #224]	@ (8004140 <CreateMessage+0x3c4>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	1c18      	adds	r0, r3, #0
 8004064:	f7ff f9fe 	bl	8003464 <__aeabi_f2d>
 8004068:	0002      	movs	r2, r0
 800406a:	000b      	movs	r3, r1
 800406c:	482d      	ldr	r0, [pc, #180]	@ (8004124 <CreateMessage+0x3a8>)
 800406e:	493e      	ldr	r1, [pc, #248]	@ (8004168 <CreateMessage+0x3ec>)
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	9303      	str	r3, [sp, #12]
 8004074:	4b30      	ldr	r3, [pc, #192]	@ (8004138 <CreateMessage+0x3bc>)
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0003      	movs	r3, r0
 800407a:	002a      	movs	r2, r5
 800407c:	0020      	movs	r0, r4
 800407e:	f01c f845 	bl	802010c <siprintf>
    index = strlen(message);
 8004082:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <CreateMessage+0x3b4>)
 8004084:	0018      	movs	r0, r3
 8004086:	f7fc f871 	bl	800016c <strlen>
 800408a:	0002      	movs	r2, r0
 800408c:	19bb      	adds	r3, r7, r6
 800408e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <CreateMessage+0x3a0>)
 8004092:	4b29      	ldr	r3, [pc, #164]	@ (8004138 <CreateMessage+0x3bc>)
 8004094:	0011      	movs	r1, r2
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff fe4c 	bl	8003d34 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800409c:	19bb      	adds	r3, r7, r6
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	4b23      	ldr	r3, [pc, #140]	@ (8004130 <CreateMessage+0x3b4>)
 80040a2:	18d4      	adds	r4, r2, r3
 80040a4:	4b25      	ldr	r3, [pc, #148]	@ (800413c <CreateMessage+0x3c0>)
 80040a6:	689d      	ldr	r5, [r3, #8]
 80040a8:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <CreateMessage+0x3c4>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	1c18      	adds	r0, r3, #0
 80040ae:	f7ff f9d9 	bl	8003464 <__aeabi_f2d>
 80040b2:	0002      	movs	r2, r0
 80040b4:	000b      	movs	r3, r1
 80040b6:	481b      	ldr	r0, [pc, #108]	@ (8004124 <CreateMessage+0x3a8>)
 80040b8:	492c      	ldr	r1, [pc, #176]	@ (800416c <CreateMessage+0x3f0>)
 80040ba:	9202      	str	r2, [sp, #8]
 80040bc:	9303      	str	r3, [sp, #12]
 80040be:	4b1e      	ldr	r3, [pc, #120]	@ (8004138 <CreateMessage+0x3bc>)
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	0003      	movs	r3, r0
 80040c4:	002a      	movs	r2, r5
 80040c6:	0020      	movs	r0, r4
 80040c8:	f01c f820 	bl	802010c <siprintf>
    index = strlen(message);
 80040cc:	4b18      	ldr	r3, [pc, #96]	@ (8004130 <CreateMessage+0x3b4>)
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fc f84c 	bl	800016c <strlen>
 80040d4:	0002      	movs	r2, r0
 80040d6:	19bb      	adds	r3, r7, r6
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e06f      	b.n	80041bc <CreateMessage+0x440>
 80040dc:	20000a84 	.word	0x20000a84
 80040e0:	0808000c 	.word	0x0808000c
 80040e4:	20000a90 	.word	0x20000a90
 80040e8:	08080018 	.word	0x08080018
 80040ec:	20000a9c 	.word	0x20000a9c
 80040f0:	08080048 	.word	0x08080048
 80040f4:	20000aa8 	.word	0x20000aa8
 80040f8:	08080030 	.word	0x08080030
 80040fc:	20000ab4 	.word	0x20000ab4
 8004100:	0808006c 	.word	0x0808006c
 8004104:	20000ac0 	.word	0x20000ac0
 8004108:	08080078 	.word	0x08080078
 800410c:	20000acc 	.word	0x20000acc
 8004110:	08080024 	.word	0x08080024
 8004114:	20000ad8 	.word	0x20000ad8
 8004118:	08080054 	.word	0x08080054
 800411c:	20000ae4 	.word	0x20000ae4
 8004120:	08080060 	.word	0x08080060
 8004124:	20000af0 	.word	0x20000af0
 8004128:	08080090 	.word	0x08080090
 800412c:	080254b4 	.word	0x080254b4
 8004130:	20000578 	.word	0x20000578
 8004134:	080234c0 	.word	0x080234c0
 8004138:	20000b10 	.word	0x20000b10
 800413c:	2000055c 	.word	0x2000055c
 8004140:	20000a14 	.word	0x20000a14
 8004144:	080234c4 	.word	0x080234c4
 8004148:	08023518 	.word	0x08023518
 800414c:	08023570 	.word	0x08023570
 8004150:	080235cc 	.word	0x080235cc
 8004154:	20000570 	.word	0x20000570
 8004158:	08023620 	.word	0x08023620
 800415c:	20000574 	.word	0x20000574
 8004160:	08023680 	.word	0x08023680
 8004164:	080236e0 	.word	0x080236e0
 8004168:	08023734 	.word	0x08023734
 800416c:	08023790 	.word	0x08023790

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004170:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <CreateMessage+0x47c>)
 8004172:	4b22      	ldr	r3, [pc, #136]	@ (80041fc <CreateMessage+0x480>)
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff fddc 	bl	8003d34 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800417c:	260e      	movs	r6, #14
 800417e:	19bb      	adds	r3, r7, r6
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	4b1f      	ldr	r3, [pc, #124]	@ (8004200 <CreateMessage+0x484>)
 8004184:	18d4      	adds	r4, r2, r3
 8004186:	4b1f      	ldr	r3, [pc, #124]	@ (8004204 <CreateMessage+0x488>)
 8004188:	689d      	ldr	r5, [r3, #8]
 800418a:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <CreateMessage+0x48c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	1c18      	adds	r0, r3, #0
 8004190:	f7ff f968 	bl	8003464 <__aeabi_f2d>
 8004194:	0002      	movs	r2, r0
 8004196:	000b      	movs	r3, r1
 8004198:	481c      	ldr	r0, [pc, #112]	@ (800420c <CreateMessage+0x490>)
 800419a:	491d      	ldr	r1, [pc, #116]	@ (8004210 <CreateMessage+0x494>)
 800419c:	9202      	str	r2, [sp, #8]
 800419e:	9303      	str	r3, [sp, #12]
 80041a0:	4b16      	ldr	r3, [pc, #88]	@ (80041fc <CreateMessage+0x480>)
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	0003      	movs	r3, r0
 80041a6:	002a      	movs	r2, r5
 80041a8:	0020      	movs	r0, r4
 80041aa:	f01b ffaf 	bl	802010c <siprintf>
    index = strlen(message);
 80041ae:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <CreateMessage+0x484>)
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7fb ffdb 	bl	800016c <strlen>
 80041b6:	0002      	movs	r2, r0
 80041b8:	19bb      	adds	r3, r7, r6
 80041ba:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 80041bc:	230e      	movs	r3, #14
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <CreateMessage+0x484>)
 80041c4:	18d3      	adds	r3, r2, r3
 80041c6:	4a13      	ldr	r2, [pc, #76]	@ (8004214 <CreateMessage+0x498>)
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f01b ff9e 	bl	802010c <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <CreateMessage+0x484>)
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7fb ffca 	bl	800016c <strlen>
 80041d8:	0003      	movs	r3, r0
 80041da:	4a0f      	ldr	r2, [pc, #60]	@ (8004218 <CreateMessage+0x49c>)
 80041dc:	490f      	ldr	r1, [pc, #60]	@ (800421c <CreateMessage+0x4a0>)
 80041de:	2003      	movs	r0, #3
 80041e0:	f00a fa3c 	bl	800e65c <CreateLine>
  return strlen(message);
 80041e4:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <CreateMessage+0x484>)
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fb ffc0 	bl	800016c <strlen>
 80041ec:	0003      	movs	r3, r0
 80041ee:	b29b      	uxth	r3, r3
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b005      	add	sp, #20
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f8:	20000ab4 	.word	0x20000ab4
 80041fc:	20000b10 	.word	0x20000b10
 8004200:	20000578 	.word	0x20000578
 8004204:	2000055c 	.word	0x2000055c
 8004208:	20000570 	.word	0x20000570
 800420c:	20000af0 	.word	0x20000af0
 8004210:	080237e8 	.word	0x080237e8
 8004214:	08023840 	.word	0x08023840
 8004218:	08023844 	.word	0x08023844
 800421c:	08023308 	.word	0x08023308

08004220 <StartProg>:

void StartProg(){
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004224:	2064      	movs	r0, #100	@ 0x64
 8004226:	f00a fe67 	bl	800eef8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <StartProg+0x60>)
 800422c:	2200      	movs	r2, #0
 800422e:	2101      	movs	r1, #1
 8004230:	0018      	movs	r0, r3
 8004232:	f00c f8e8 	bl	8010406 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004236:	2064      	movs	r0, #100	@ 0x64
 8004238:	f00a fe5e 	bl	800eef8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800423c:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <StartProg+0x60>)
 800423e:	2200      	movs	r2, #0
 8004240:	2102      	movs	r1, #2
 8004242:	0018      	movs	r0, r3
 8004244:	f00c f8df 	bl	8010406 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004248:	23fa      	movs	r3, #250	@ 0xfa
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	0018      	movs	r0, r3
 800424e:	f00a fe53 	bl	800eef8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004252:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <StartProg+0x60>)
 8004254:	2201      	movs	r2, #1
 8004256:	2101      	movs	r1, #1
 8004258:	0018      	movs	r0, r3
 800425a:	f00c f8d4 	bl	8010406 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800425e:	23fa      	movs	r3, #250	@ 0xfa
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	0018      	movs	r0, r3
 8004264:	f00a fe48 	bl	800eef8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <StartProg+0x60>)
 800426a:	2201      	movs	r2, #1
 800426c:	2102      	movs	r1, #2
 800426e:	0018      	movs	r0, r3
 8004270:	f00c f8c9 	bl	8010406 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004274:	2028      	movs	r0, #40	@ 0x28
 8004276:	f00a fe3f 	bl	800eef8 <HAL_Delay>
}
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	50001c00 	.word	0x50001c00

08004284 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004286:	b0d9      	sub	sp, #356	@ 0x164
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	0008      	movs	r0, r1
 800428e:	0011      	movs	r1, r2
 8004290:	4ba4      	ldr	r3, [pc, #656]	@ (8004524 <ParseBuffer+0x2a0>)
 8004292:	24b0      	movs	r4, #176	@ 0xb0
 8004294:	0064      	lsls	r4, r4, #1
 8004296:	191b      	adds	r3, r3, r4
 8004298:	19db      	adds	r3, r3, r7
 800429a:	1c02      	adds	r2, r0, #0
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	4ba2      	ldr	r3, [pc, #648]	@ (8004528 <ParseBuffer+0x2a4>)
 80042a0:	191b      	adds	r3, r3, r4
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	1c0a      	adds	r2, r1, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	005a      	lsls	r2, r3, #1
 80042ac:	2348      	movs	r3, #72	@ 0x48
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2100      	movs	r1, #0
 80042b2:	0018      	movs	r0, r3
 80042b4:	f01c f86e 	bl	8020394 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80042b8:	2360      	movs	r3, #96	@ 0x60
 80042ba:	33ff      	adds	r3, #255	@ 0xff
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	2203      	movs	r2, #3
 80042c0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80042c2:	23ae      	movs	r3, #174	@ 0xae
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	e013      	b.n	80042f6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80042ce:	20ae      	movs	r0, #174	@ 0xae
 80042d0:	0040      	lsls	r0, r0, #1
 80042d2:	183b      	adds	r3, r7, r0
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	18d2      	adds	r2, r2, r3
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	7811      	ldrb	r1, [r2, #0]
 80042e0:	4a92      	ldr	r2, [pc, #584]	@ (800452c <ParseBuffer+0x2a8>)
 80042e2:	24b0      	movs	r4, #176	@ 0xb0
 80042e4:	0064      	lsls	r4, r4, #1
 80042e6:	1912      	adds	r2, r2, r4
 80042e8:	19d2      	adds	r2, r2, r7
 80042ea:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80042ec:	183b      	adds	r3, r7, r0
 80042ee:	881a      	ldrh	r2, [r3, #0]
 80042f0:	183b      	adds	r3, r7, r0
 80042f2:	3201      	adds	r2, #1
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	23ae      	movs	r3, #174	@ 0xae
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	18fa      	adds	r2, r7, r3
 80042fc:	4b89      	ldr	r3, [pc, #548]	@ (8004524 <ParseBuffer+0x2a0>)
 80042fe:	21b0      	movs	r1, #176	@ 0xb0
 8004300:	0049      	lsls	r1, r1, #1
 8004302:	185b      	adds	r3, r3, r1
 8004304:	19db      	adds	r3, r3, r7
 8004306:	8812      	ldrh	r2, [r2, #0]
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d3df      	bcc.n	80042ce <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800430e:	4b85      	ldr	r3, [pc, #532]	@ (8004524 <ParseBuffer+0x2a0>)
 8004310:	185b      	adds	r3, r3, r1
 8004312:	19db      	adds	r3, r3, r7
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	4a85      	ldr	r2, [pc, #532]	@ (800452c <ParseBuffer+0x2a8>)
 8004318:	1852      	adds	r2, r2, r1
 800431a:	19d2      	adds	r2, r2, r7
 800431c:	2100      	movs	r1, #0
 800431e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004320:	f00a fa16 	bl	800e750 <GetVerboseLevel>
 8004324:	0003      	movs	r3, r0
 8004326:	2b03      	cmp	r3, #3
 8004328:	d106      	bne.n	8004338 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800432a:	2348      	movs	r3, #72	@ 0x48
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	4a80      	ldr	r2, [pc, #512]	@ (8004530 <ParseBuffer+0x2ac>)
 8004330:	4980      	ldr	r1, [pc, #512]	@ (8004534 <ParseBuffer+0x2b0>)
 8004332:	2003      	movs	r0, #3
 8004334:	f00a f992 	bl	800e65c <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	26ac      	movs	r6, #172	@ 0xac
 800433c:	0076      	lsls	r6, r6, #1
 800433e:	19ba      	adds	r2, r7, r6
 8004340:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004342:	4b7d      	ldr	r3, [pc, #500]	@ (8004538 <ParseBuffer+0x2b4>)
 8004344:	25b0      	movs	r5, #176	@ 0xb0
 8004346:	006d      	lsls	r5, r5, #1
 8004348:	195b      	adds	r3, r3, r5
 800434a:	19db      	adds	r3, r3, r7
 800434c:	4a7b      	ldr	r2, [pc, #492]	@ (800453c <ParseBuffer+0x2b8>)
 800434e:	8811      	ldrh	r1, [r2, #0]
 8004350:	8019      	strh	r1, [r3, #0]
 8004352:	7892      	ldrb	r2, [r2, #2]
 8004354:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004356:	4b7a      	ldr	r3, [pc, #488]	@ (8004540 <ParseBuffer+0x2bc>)
 8004358:	195b      	adds	r3, r3, r5
 800435a:	19db      	adds	r3, r3, r7
 800435c:	4a79      	ldr	r2, [pc, #484]	@ (8004544 <ParseBuffer+0x2c0>)
 800435e:	6811      	ldr	r1, [r2, #0]
 8004360:	6019      	str	r1, [r3, #0]
 8004362:	8892      	ldrh	r2, [r2, #4]
 8004364:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004366:	4b78      	ldr	r3, [pc, #480]	@ (8004548 <ParseBuffer+0x2c4>)
 8004368:	195b      	adds	r3, r3, r5
 800436a:	19db      	adds	r3, r3, r7
 800436c:	4a77      	ldr	r2, [pc, #476]	@ (800454c <ParseBuffer+0x2c8>)
 800436e:	6811      	ldr	r1, [r2, #0]
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	7912      	ldrb	r2, [r2, #4]
 8004374:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004376:	4b76      	ldr	r3, [pc, #472]	@ (8004550 <ParseBuffer+0x2cc>)
 8004378:	195b      	adds	r3, r3, r5
 800437a:	19db      	adds	r3, r3, r7
 800437c:	4a75      	ldr	r2, [pc, #468]	@ (8004554 <ParseBuffer+0x2d0>)
 800437e:	6811      	ldr	r1, [r2, #0]
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	8892      	ldrh	r2, [r2, #4]
 8004384:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004386:	4b74      	ldr	r3, [pc, #464]	@ (8004558 <ParseBuffer+0x2d4>)
 8004388:	195b      	adds	r3, r3, r5
 800438a:	19db      	adds	r3, r3, r7
 800438c:	223e      	movs	r2, #62	@ 0x3e
 800438e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004390:	4b72      	ldr	r3, [pc, #456]	@ (800455c <ParseBuffer+0x2d8>)
 8004392:	195b      	adds	r3, r3, r5
 8004394:	19db      	adds	r3, r3, r7
 8004396:	4a72      	ldr	r2, [pc, #456]	@ (8004560 <ParseBuffer+0x2dc>)
 8004398:	ca13      	ldmia	r2!, {r0, r1, r4}
 800439a:	c313      	stmia	r3!, {r0, r1, r4}
 800439c:	8811      	ldrh	r1, [r2, #0]
 800439e:	8019      	strh	r1, [r3, #0]
 80043a0:	7892      	ldrb	r2, [r2, #2]
 80043a2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80043a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004564 <ParseBuffer+0x2e0>)
 80043a6:	195b      	adds	r3, r3, r5
 80043a8:	19db      	adds	r3, r3, r7
 80043aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004568 <ParseBuffer+0x2e4>)
 80043ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ae:	c313      	stmia	r3!, {r0, r1, r4}
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80043b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004528 <ParseBuffer+0x2a4>)
 80043b6:	195b      	adds	r3, r3, r5
 80043b8:	19db      	adds	r3, r3, r7
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80043c0:	2344      	movs	r3, #68	@ 0x44
 80043c2:	18fa      	adds	r2, r7, r3
 80043c4:	2348      	movs	r3, #72	@ 0x48
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f01c f81d 	bl	802040a <strstr>
 80043d0:	0003      	movs	r3, r0
 80043d2:	19ba      	adds	r2, r7, r6
 80043d4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80043d6:	4b54      	ldr	r3, [pc, #336]	@ (8004528 <ParseBuffer+0x2a4>)
 80043d8:	22b0      	movs	r2, #176	@ 0xb0
 80043da:	0052      	lsls	r2, r2, #1
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10c      	bne.n	8004400 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80043e6:	232c      	movs	r3, #44	@ 0x2c
 80043e8:	18fa      	adds	r2, r7, r3
 80043ea:	2348      	movs	r3, #72	@ 0x48
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f01c f80a 	bl	802040a <strstr>
 80043f6:	0003      	movs	r3, r0
 80043f8:	22ac      	movs	r2, #172	@ 0xac
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	18ba      	adds	r2, r7, r2
 80043fe:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004400:	4b49      	ldr	r3, [pc, #292]	@ (8004528 <ParseBuffer+0x2a4>)
 8004402:	22b0      	movs	r2, #176	@ 0xb0
 8004404:	0052      	lsls	r2, r2, #1
 8004406:	189b      	adds	r3, r3, r2
 8004408:	19db      	adds	r3, r3, r7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d10c      	bne.n	800442a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004410:	2328      	movs	r3, #40	@ 0x28
 8004412:	18fa      	adds	r2, r7, r3
 8004414:	2348      	movs	r3, #72	@ 0x48
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f01b fff5 	bl	802040a <strstr>
 8004420:	0003      	movs	r3, r0
 8004422:	22ac      	movs	r2, #172	@ 0xac
 8004424:	0052      	lsls	r2, r2, #1
 8004426:	18ba      	adds	r2, r7, r2
 8004428:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800442a:	4b3f      	ldr	r3, [pc, #252]	@ (8004528 <ParseBuffer+0x2a4>)
 800442c:	22b0      	movs	r2, #176	@ 0xb0
 800442e:	0052      	lsls	r2, r2, #1
 8004430:	189b      	adds	r3, r3, r2
 8004432:	19db      	adds	r3, r3, r7
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b05      	cmp	r3, #5
 8004438:	d10c      	bne.n	8004454 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800443a:	2308      	movs	r3, #8
 800443c:	18fa      	adds	r2, r7, r3
 800443e:	2348      	movs	r3, #72	@ 0x48
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f01b ffe0 	bl	802040a <strstr>
 800444a:	0003      	movs	r3, r0
 800444c:	22ac      	movs	r2, #172	@ 0xac
 800444e:	0052      	lsls	r2, r2, #1
 8004450:	18ba      	adds	r2, r7, r2
 8004452:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004454:	233c      	movs	r3, #60	@ 0x3c
 8004456:	18fa      	adds	r2, r7, r3
 8004458:	2448      	movs	r4, #72	@ 0x48
 800445a:	193b      	adds	r3, r7, r4
 800445c:	0011      	movs	r1, r2
 800445e:	0018      	movs	r0, r3
 8004460:	f01b ffd3 	bl	802040a <strstr>
 8004464:	0003      	movs	r3, r0
 8004466:	22aa      	movs	r2, #170	@ 0xaa
 8004468:	0052      	lsls	r2, r2, #1
 800446a:	18ba      	adds	r2, r7, r2
 800446c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800446e:	2318      	movs	r3, #24
 8004470:	18fa      	adds	r2, r7, r3
 8004472:	193b      	adds	r3, r7, r4
 8004474:	0011      	movs	r1, r2
 8004476:	0018      	movs	r0, r3
 8004478:	f01b ffc7 	bl	802040a <strstr>
 800447c:	0003      	movs	r3, r0
 800447e:	22a8      	movs	r2, #168	@ 0xa8
 8004480:	0052      	lsls	r2, r2, #1
 8004482:	18ba      	adds	r2, r7, r2
 8004484:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004486:	4a39      	ldr	r2, [pc, #228]	@ (800456c <ParseBuffer+0x2e8>)
 8004488:	193b      	adds	r3, r7, r4
 800448a:	0011      	movs	r1, r2
 800448c:	0018      	movs	r0, r3
 800448e:	f01b ffbc 	bl	802040a <strstr>
 8004492:	0003      	movs	r3, r0
 8004494:	22a6      	movs	r2, #166	@ 0xa6
 8004496:	0052      	lsls	r2, r2, #1
 8004498:	18ba      	adds	r2, r7, r2
 800449a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800449c:	2334      	movs	r3, #52	@ 0x34
 800449e:	18fa      	adds	r2, r7, r3
 80044a0:	193b      	adds	r3, r7, r4
 80044a2:	0011      	movs	r1, r2
 80044a4:	0018      	movs	r0, r3
 80044a6:	f01b ffb0 	bl	802040a <strstr>
 80044aa:	0003      	movs	r3, r0
 80044ac:	22a4      	movs	r2, #164	@ 0xa4
 80044ae:	0052      	lsls	r2, r2, #1
 80044b0:	18ba      	adds	r2, r7, r2
 80044b2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80044b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <ParseBuffer+0x2a0>)
 80044b6:	21b0      	movs	r1, #176	@ 0xb0
 80044b8:	0049      	lsls	r1, r1, #1
 80044ba:	185b      	adds	r3, r3, r1
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d800      	bhi.n	80044c6 <ParseBuffer+0x242>
 80044c4:	e0c1      	b.n	800464a <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80044c6:	22ac      	movs	r2, #172	@ 0xac
 80044c8:	0052      	lsls	r2, r2, #1
 80044ca:	18bb      	adds	r3, r7, r2
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d054      	beq.n	800457c <ParseBuffer+0x2f8>
 80044d2:	18bb      	adds	r3, r7, r2
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b4f      	cmp	r3, #79	@ 0x4f
 80044da:	d14f      	bne.n	800457c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80044dc:	2360      	movs	r3, #96	@ 0x60
 80044de:	33ff      	adds	r3, #255	@ 0xff
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80044e6:	4b22      	ldr	r3, [pc, #136]	@ (8004570 <ParseBuffer+0x2ec>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b12      	cmp	r3, #18
 80044ec:	d146      	bne.n	800457c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <ParseBuffer+0x2a0>)
 80044f0:	185b      	adds	r3, r3, r1
 80044f2:	19db      	adds	r3, r3, r7
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80044f8:	d10b      	bne.n	8004512 <ParseBuffer+0x28e>
 80044fa:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <ParseBuffer+0x2a8>)
 80044fc:	185b      	adds	r3, r3, r1
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	2221      	movs	r2, #33	@ 0x21
 8004502:	5c9b      	ldrb	r3, [r3, r2]
 8004504:	2b32      	cmp	r3, #50	@ 0x32
 8004506:	d104      	bne.n	8004512 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004508:	193b      	adds	r3, r7, r4
 800450a:	0018      	movs	r0, r3
 800450c:	f002 f916 	bl	800673c <ParseTime>
 8004510:	e034      	b.n	800457c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004512:	4a18      	ldr	r2, [pc, #96]	@ (8004574 <ParseBuffer+0x2f0>)
 8004514:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <ParseBuffer+0x2f4>)
 8004516:	0019      	movs	r1, r3
 8004518:	2001      	movs	r0, #1
 800451a:	f00a f89f 	bl	800e65c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800451e:	2306      	movs	r3, #6
 8004520:	e097      	b.n	8004652 <ParseBuffer+0x3ce>
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	fffffea2 	.word	0xfffffea2
 8004528:	fffffea1 	.word	0xfffffea1
 800452c:	fffffee8 	.word	0xfffffee8
 8004530:	0802385c 	.word	0x0802385c
 8004534:	08023308 	.word	0x08023308
 8004538:	fffffee4 	.word	0xfffffee4
 800453c:	08023888 	.word	0x08023888
 8004540:	fffffedc 	.word	0xfffffedc
 8004544:	0802388c 	.word	0x0802388c
 8004548:	fffffed4 	.word	0xfffffed4
 800454c:	08023894 	.word	0x08023894
 8004550:	fffffecc 	.word	0xfffffecc
 8004554:	0802389c 	.word	0x0802389c
 8004558:	fffffec8 	.word	0xfffffec8
 800455c:	fffffeb8 	.word	0xfffffeb8
 8004560:	080238a4 	.word	0x080238a4
 8004564:	fffffea8 	.word	0xfffffea8
 8004568:	080238b4 	.word	0x080238b4
 800456c:	08025494 	.word	0x08025494
 8004570:	20000a0e 	.word	0x20000a0e
 8004574:	08023874 	.word	0x08023874
 8004578:	0802332c 	.word	0x0802332c
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800457c:	22ac      	movs	r2, #172	@ 0xac
 800457e:	0052      	lsls	r2, r2, #1
 8004580:	18bb      	adds	r3, r7, r2
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <ParseBuffer+0x318>
 8004588:	18bb      	adds	r3, r7, r2
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b72      	cmp	r3, #114	@ 0x72
 8004590:	d104      	bne.n	800459c <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 8004592:	2360      	movs	r3, #96	@ 0x60
 8004594:	33ff      	adds	r3, #255	@ 0xff
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2202      	movs	r2, #2
 800459a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800459c:	22ac      	movs	r2, #172	@ 0xac
 800459e:	0052      	lsls	r2, r2, #1
 80045a0:	18bb      	adds	r3, r7, r2
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <ParseBuffer+0x338>
 80045a8:	18bb      	adds	r3, r7, r2
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80045b0:	d104      	bne.n	80045bc <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80045b2:	2360      	movs	r3, #96	@ 0x60
 80045b4:	33ff      	adds	r3, #255	@ 0xff
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2205      	movs	r2, #5
 80045ba:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80045bc:	22ac      	movs	r2, #172	@ 0xac
 80045be:	0052      	lsls	r2, r2, #1
 80045c0:	18bb      	adds	r3, r7, r2
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <ParseBuffer+0x358>
 80045c8:	18bb      	adds	r3, r7, r2
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80045d0:	d104      	bne.n	80045dc <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80045d2:	2360      	movs	r3, #96	@ 0x60
 80045d4:	33ff      	adds	r3, #255	@ 0xff
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	220b      	movs	r2, #11
 80045da:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80045dc:	22aa      	movs	r2, #170	@ 0xaa
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	18bb      	adds	r3, r7, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <ParseBuffer+0x36e>
 80045e8:	18bb      	adds	r3, r7, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b45      	cmp	r3, #69	@ 0x45
 80045f0:	d00a      	beq.n	8004608 <ParseBuffer+0x384>
 80045f2:	22a4      	movs	r2, #164	@ 0xa4
 80045f4:	0052      	lsls	r2, r2, #1
 80045f6:	18bb      	adds	r3, r7, r2
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <ParseBuffer+0x38e>
 80045fe:	18bb      	adds	r3, r7, r2
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b46      	cmp	r3, #70	@ 0x46
 8004606:	d104      	bne.n	8004612 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004608:	2360      	movs	r3, #96	@ 0x60
 800460a:	33ff      	adds	r3, #255	@ 0xff
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004612:	22a8      	movs	r2, #168	@ 0xa8
 8004614:	0052      	lsls	r2, r2, #1
 8004616:	18bb      	adds	r3, r7, r2
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <ParseBuffer+0x3aa>
 800461e:	18bb      	adds	r3, r7, r2
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b57      	cmp	r3, #87	@ 0x57
 8004626:	d102      	bne.n	800462e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004628:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <ParseBuffer+0x3d8>)
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800462e:	22a6      	movs	r2, #166	@ 0xa6
 8004630:	0052      	lsls	r2, r2, #1
 8004632:	18bb      	adds	r3, r7, r2
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <ParseBuffer+0x3c6>
 800463a:	18bb      	adds	r3, r7, r2
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b32      	cmp	r3, #50	@ 0x32
 8004642:	d102      	bne.n	800464a <ParseBuffer+0x3c6>
      beurs = true;
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <ParseBuffer+0x3dc>)
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800464a:	2360      	movs	r3, #96	@ 0x60
 800464c:	33ff      	adds	r3, #255	@ 0xff
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	781b      	ldrb	r3, [r3, #0]

}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b059      	add	sp, #356	@ 0x164
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	20000554 	.word	0x20000554
 8004660:	20000556 	.word	0x20000556

08004664 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800466a:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <PollAwake+0x34>)
 800466c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f7fb fd7b 	bl	800016c <strlen>
 8004676:	0003      	movs	r3, r0
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0011      	movs	r1, r2
 800467e:	0018      	movs	r0, r3
 8004680:	f7ff fa5c 	bl	8003b3c <ESP_Send>
 8004684:	1e03      	subs	r3, r0, #0
 8004686:	d001      	beq.n	800468c <PollAwake+0x28>
    return true;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <PollAwake+0x2a>
  }
  else{
    return false;
 800468c:	2300      	movs	r3, #0
  }
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	080238c4 	.word	0x080238c4

0800469c <RFPower>:

bool RFPower(){
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <RFPower+0x34>)
 80046a4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7fb fd5f 	bl	800016c <strlen>
 80046ae:	0003      	movs	r3, r0
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0011      	movs	r1, r2
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff fa40 	bl	8003b3c <ESP_Send>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d001      	beq.n	80046c4 <RFPower+0x28>
    return true;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <RFPower+0x2a>
  }
  else{
    return false;
 80046c4:	2300      	movs	r3, #0
  }
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b002      	add	sp, #8
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	080238cc 	.word	0x080238cc

080046d4 <CheckRFPower>:

bool CheckRFPower(){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80046da:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <CheckRFPower+0x34>)
 80046dc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fb fd43 	bl	800016c <strlen>
 80046e6:	0003      	movs	r3, r0
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7ff fa24 	bl	8003b3c <ESP_Send>
 80046f4:	1e03      	subs	r3, r0, #0
 80046f6:	d001      	beq.n	80046fc <CheckRFPower+0x28>
    return true;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <CheckRFPower+0x2a>
  }
  else{
    return false;
 80046fc:	2300      	movs	r3, #0
  }
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b002      	add	sp, #8
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	080238dc 	.word	0x080238dc

0800470c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004712:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <ATRestore+0x34>)
 8004714:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0018      	movs	r0, r3
 800471a:	f7fb fd27 	bl	800016c <strlen>
 800471e:	0003      	movs	r3, r0
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f7ff fa08 	bl	8003b3c <ESP_Send>
 800472c:	1e03      	subs	r3, r0, #0
 800472e:	d001      	beq.n	8004734 <ATRestore+0x28>
    return true;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <ATRestore+0x2a>
  }
  else{
    return false;
 8004734:	2300      	movs	r3, #0
  }
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b002      	add	sp, #8
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	080238ec 	.word	0x080238ec

08004744 <CWINIT>:

bool CWINIT(){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <CWINIT+0x34>)
 800474c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f7fb fd0b 	bl	800016c <strlen>
 8004756:	0003      	movs	r3, r0
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0011      	movs	r1, r2
 800475e:	0018      	movs	r0, r3
 8004760:	f7ff f9ec 	bl	8003b3c <ESP_Send>
 8004764:	1e03      	subs	r3, r0, #0
 8004766:	d001      	beq.n	800476c <CWINIT+0x28>
    return true;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <CWINIT+0x2a>
  }
  else{
    return false;
 800476c:	2300      	movs	r3, #0
  }
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	080238fc 	.word	0x080238fc

0800477c <CWMODE1>:

bool CWMODE1(){
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <CWMODE1+0x34>)
 8004784:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f7fb fcef 	bl	800016c <strlen>
 800478e:	0003      	movs	r3, r0
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff f9d0 	bl	8003b3c <ESP_Send>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d001      	beq.n	80047a4 <CWMODE1+0x28>
    return true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80047a4:	2300      	movs	r3, #0
  }
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	0802390c 	.word	0x0802390c

080047b4 <CWMODE2>:

bool CWMODE2(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <CWMODE2+0x34>)
 80047bc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fb fcd3 	bl	800016c <strlen>
 80047c6:	0003      	movs	r3, r0
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff f9b4 	bl	8003b3c <ESP_Send>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d001      	beq.n	80047dc <CWMODE2+0x28>
    return true;
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <CWMODE2+0x2a>
  }
  else{
    return false;
 80047dc:	2300      	movs	r3, #0
  }
}
 80047de:	0018      	movs	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b002      	add	sp, #8
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	0802391c 	.word	0x0802391c

080047ec <CWAUTOCONN>:

bool CWAUTOCONN(){
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <CWAUTOCONN+0x34>)
 80047f4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7fb fcb7 	bl	800016c <strlen>
 80047fe:	0003      	movs	r3, r0
 8004800:	b29a      	uxth	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0011      	movs	r1, r2
 8004806:	0018      	movs	r0, r3
 8004808:	f7ff f998 	bl	8003b3c <ESP_Send>
 800480c:	1e03      	subs	r3, r0, #0
 800480e:	d001      	beq.n	8004814 <CWAUTOCONN+0x28>
    return true;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004814:	2300      	movs	r3, #0
  }
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b002      	add	sp, #8
 800481c:	bd80      	pop	{r7, pc}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	0802392c 	.word	0x0802392c

08004824 <CWJAP>:

bool CWJAP(){
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	46c6      	mov	lr, r8
 8004828:	b500      	push	{lr}
 800482a:	b0a2      	sub	sp, #136	@ 0x88
 800482c:	af00      	add	r7, sp, #0
 800482e:	466b      	mov	r3, sp
 8004830:	4698      	mov	r8, r3
  beursTest = true;
 8004832:	4b39      	ldr	r3, [pc, #228]	@ (8004918 <CWJAP+0xf4>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004838:	2618      	movs	r6, #24
 800483a:	19bb      	adds	r3, r7, r6
 800483c:	2264      	movs	r2, #100	@ 0x64
 800483e:	2100      	movs	r1, #0
 8004840:	0018      	movs	r0, r3
 8004842:	f01b fda7 	bl	8020394 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004846:	4b35      	ldr	r3, [pc, #212]	@ (800491c <CWJAP+0xf8>)
 8004848:	4a35      	ldr	r2, [pc, #212]	@ (8004920 <CWJAP+0xfc>)
 800484a:	4936      	ldr	r1, [pc, #216]	@ (8004924 <CWJAP+0x100>)
 800484c:	19b8      	adds	r0, r7, r6
 800484e:	f01b fc5d 	bl	802010c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004852:	19bb      	adds	r3, r7, r6
 8004854:	0018      	movs	r0, r3
 8004856:	f7fb fc89 	bl	800016c <strlen>
 800485a:	0002      	movs	r2, r0
 800485c:	216f      	movs	r1, #111	@ 0x6f
 800485e:	0030      	movs	r0, r6
 8004860:	180b      	adds	r3, r1, r0
 8004862:	19db      	adds	r3, r3, r7
 8004864:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004866:	180b      	adds	r3, r1, r0
 8004868:	19db      	adds	r3, r3, r7
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	1e5a      	subs	r2, r3, #1
 8004870:	2180      	movs	r1, #128	@ 0x80
 8004872:	1879      	adds	r1, r7, r1
 8004874:	600a      	str	r2, [r1, #0]
 8004876:	001a      	movs	r2, r3
 8004878:	60ba      	str	r2, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	60fa      	str	r2, [r7, #12]
 800487e:	68b8      	ldr	r0, [r7, #8]
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	0002      	movs	r2, r0
 8004884:	0f52      	lsrs	r2, r2, #29
 8004886:	000e      	movs	r6, r1
 8004888:	00f6      	lsls	r6, r6, #3
 800488a:	617e      	str	r6, [r7, #20]
 800488c:	697e      	ldr	r6, [r7, #20]
 800488e:	4316      	orrs	r6, r2
 8004890:	617e      	str	r6, [r7, #20]
 8004892:	0002      	movs	r2, r0
 8004894:	00d2      	lsls	r2, r2, #3
 8004896:	613a      	str	r2, [r7, #16]
 8004898:	001a      	movs	r2, r3
 800489a:	603a      	str	r2, [r7, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	6838      	ldr	r0, [r7, #0]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	0002      	movs	r2, r0
 80048a6:	0f52      	lsrs	r2, r2, #29
 80048a8:	000e      	movs	r6, r1
 80048aa:	00f5      	lsls	r5, r6, #3
 80048ac:	4315      	orrs	r5, r2
 80048ae:	0002      	movs	r2, r0
 80048b0:	00d4      	lsls	r4, r2, #3
 80048b2:	3307      	adds	r3, #7
 80048b4:	08db      	lsrs	r3, r3, #3
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	466a      	mov	r2, sp
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	469d      	mov	sp, r3
 80048be:	466b      	mov	r3, sp
 80048c0:	3300      	adds	r3, #0
 80048c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80048c4:	246f      	movs	r4, #111	@ 0x6f
 80048c6:	2518      	movs	r5, #24
 80048c8:	1963      	adds	r3, r4, r5
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	001a      	movs	r2, r3
 80048d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048d4:	2100      	movs	r1, #0
 80048d6:	0018      	movs	r0, r3
 80048d8:	f01b fd5c 	bl	8020394 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80048dc:	1963      	adds	r3, r4, r5
 80048de:	19db      	adds	r3, r3, r7
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	1979      	adds	r1, r7, r5
 80048e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048e6:	0018      	movs	r0, r3
 80048e8:	f01b fd7b 	bl	80203e2 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80048ec:	1963      	adds	r3, r4, r5
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f6:	0011      	movs	r1, r2
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7ff f91f 	bl	8003b3c <ESP_Send>
 80048fe:	1e03      	subs	r3, r0, #0
 8004900:	d001      	beq.n	8004906 <CWJAP+0xe2>
    return true;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <CWJAP+0xe4>
  }
  else{
    return false;
 8004906:	2300      	movs	r3, #0
 8004908:	46c5      	mov	sp, r8
  }
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b022      	add	sp, #136	@ 0x88
 8004910:	bc80      	pop	{r7}
 8004912:	46b8      	mov	r8, r7
 8004914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	20000555 	.word	0x20000555
 800491c:	080254a0 	.word	0x080254a0
 8004920:	08025494 	.word	0x08025494
 8004924:	08023940 	.word	0x08023940

08004928 <CWMODE3>:

bool CWMODE3(){
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <CWMODE3+0x34>)
 8004930:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f7fb fc19 	bl	800016c <strlen>
 800493a:	0003      	movs	r3, r0
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0011      	movs	r1, r2
 8004942:	0018      	movs	r0, r3
 8004944:	f7ff f8fa 	bl	8003b3c <ESP_Send>
 8004948:	1e03      	subs	r3, r0, #0
 800494a:	d001      	beq.n	8004950 <CWMODE3+0x28>
    return true;
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004950:	2300      	movs	r3, #0
  }
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	08023958 	.word	0x08023958

08004960 <CWSTATE>:

bool CWSTATE(){
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <CWSTATE+0x34>)
 8004968:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f7fb fbfd 	bl	800016c <strlen>
 8004972:	0003      	movs	r3, r0
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0011      	movs	r1, r2
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff f8de 	bl	8003b3c <ESP_Send>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d001      	beq.n	8004988 <CWSTATE+0x28>
    return true;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004988:	2300      	movs	r3, #0
  }
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	08023968 	.word	0x08023968

08004998 <CWSAP>:

bool CWSAP(){
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800499e:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <CWSAP+0x34>)
 80049a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7fb fbe1 	bl	800016c <strlen>
 80049aa:	0003      	movs	r3, r0
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0011      	movs	r1, r2
 80049b2:	0018      	movs	r0, r3
 80049b4:	f7ff f8c2 	bl	8003b3c <ESP_Send>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d001      	beq.n	80049c0 <CWSAP+0x28>
    return true;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <CWSAP+0x2a>
  }
  else{
    return false;
 80049c0:	2300      	movs	r3, #0
  }
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	08023978 	.word	0x08023978

080049d0 <CIPMUX>:

bool CIPMUX(){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <CIPMUX+0x34>)
 80049d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fb fbc5 	bl	800016c <strlen>
 80049e2:	0003      	movs	r3, r0
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0011      	movs	r1, r2
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7ff f8a6 	bl	8003b3c <ESP_Send>
 80049f0:	1e03      	subs	r3, r0, #0
 80049f2:	d001      	beq.n	80049f8 <CIPMUX+0x28>
    return true;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <CIPMUX+0x2a>
  }
  else{
    return false;
 80049f8:	2300      	movs	r3, #0
  }
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	0802399c 	.word	0x0802399c

08004a08 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <WEBSERVER+0x34>)
 8004a10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7fb fba9 	bl	800016c <strlen>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0011      	movs	r1, r2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f7ff f88a 	bl	8003b3c <ESP_Send>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d001      	beq.n	8004a30 <WEBSERVER+0x28>
    return true;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a30:	2300      	movs	r3, #0
  }
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b002      	add	sp, #8
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	080239ac 	.word	0x080239ac

08004a40 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b0c5      	sub	sp, #276	@ 0x114
 8004a44:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a46:	2380      	movs	r3, #128	@ 0x80
 8004a48:	005a      	lsls	r2, r3, #1
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f01b fca0 	bl	8020394 <memset>
  uint16_t length = CreateMessage(beurs);
 8004a54:	4b22      	ldr	r3, [pc, #136]	@ (8004ae0 <HTTPCPOST+0xa0>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	1dfc      	adds	r4, r7, #7
 8004a5a:	34ff      	adds	r4, #255	@ 0xff
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff f98d 	bl	8003d7c <CreateMessage>
 8004a62:	0003      	movs	r3, r0
 8004a64:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae0 <HTTPCPOST+0xa0>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a6e:	1dfb      	adds	r3, r7, #7
 8004a70:	33ff      	adds	r3, #255	@ 0xff
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HTTPCPOST+0xa4>)
 8004a76:	491c      	ldr	r1, [pc, #112]	@ (8004ae8 <HTTPCPOST+0xa8>)
 8004a78:	1d38      	adds	r0, r7, #4
 8004a7a:	f01b fb47 	bl	802010c <siprintf>
 8004a7e:	e016      	b.n	8004aae <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004a80:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HTTPCPOST+0xac>)
 8004a82:	481b      	ldr	r0, [pc, #108]	@ (8004af0 <HTTPCPOST+0xb0>)
 8004a84:	220c      	movs	r2, #12
 8004a86:	0019      	movs	r1, r3
 8004a88:	f7fe fe36 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <HTTPCPOST+0xac>)
 8004a8e:	4b19      	ldr	r3, [pc, #100]	@ (8004af4 <HTTPCPOST+0xb4>)
 8004a90:	0011      	movs	r1, r2
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7ff f94e 	bl	8003d34 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	33ff      	adds	r3, #255	@ 0xff
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	4c15      	ldr	r4, [pc, #84]	@ (8004af4 <HTTPCPOST+0xb4>)
 8004aa0:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <HTTPCPOST+0xb8>)
 8004aa2:	4916      	ldr	r1, [pc, #88]	@ (8004afc <HTTPCPOST+0xbc>)
 8004aa4:	1d38      	adds	r0, r7, #4
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	0023      	movs	r3, r4
 8004aaa:	f01b fb2f 	bl	802010c <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7fb fb5b 	bl	800016c <strlen>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	1d7b      	adds	r3, r7, #5
 8004aba:	33ff      	adds	r3, #255	@ 0xff
 8004abc:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004abe:	1d7b      	adds	r3, r7, #5
 8004ac0:	33ff      	adds	r3, #255	@ 0xff
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	1d3b      	adds	r3, r7, #4
 8004ac6:	0011      	movs	r1, r2
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff f837 	bl	8003b3c <ESP_Send>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d001      	beq.n	8004ad6 <HTTPCPOST+0x96>
    return true;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004ad6:	2300      	movs	r3, #0
  }
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b043      	add	sp, #268	@ 0x10c
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	20000556 	.word	0x20000556
 8004ae4:	080254bc 	.word	0x080254bc
 8004ae8:	080239c4 	.word	0x080239c4
 8004aec:	20000b2c 	.word	0x20000b2c
 8004af0:	08080000 	.word	0x08080000
 8004af4:	20000b38 	.word	0x20000b38
 8004af8:	080254f8 	.word	0x080254f8
 8004afc:	080239fc 	.word	0x080239fc

08004b00 <SENDDATA>:

bool SENDDATA(){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b06:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <SENDDATA+0x34>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fb fb2f 	bl	800016c <strlen>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	1dbb      	adds	r3, r7, #6
 8004b12:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b14:	1dbb      	adds	r3, r7, #6
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <SENDDATA+0x34>)
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7ff f80d 	bl	8003b3c <ESP_Send>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d001      	beq.n	8004b2a <SENDDATA+0x2a>
    return true;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b2a:	2300      	movs	r3, #0
  }
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000578 	.word	0x20000578

08004b38 <SLEEP>:

bool SLEEP(){
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <SLEEP+0x34>)
 8004b40:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fb fb11 	bl	800016c <strlen>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f7fe fff2 	bl	8003b3c <ESP_Send>
 8004b58:	1e03      	subs	r3, r0, #0
 8004b5a:	d001      	beq.n	8004b60 <SLEEP+0x28>
    return true;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <SLEEP+0x2a>
  }
  else{
    return false;
 8004b60:	2300      	movs	r3, #0
  }
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	08023a3c 	.word	0x08023a3c

08004b70 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <CIPSNTPCFG+0x3c>)
 8004b78:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fb faf5 	bl	800016c <strlen>
 8004b82:	0003      	movs	r3, r0
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0011      	movs	r1, r2
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fe ffd6 	bl	8003b3c <ESP_Send>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d006      	beq.n	8004ba2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004b94:	23fa      	movs	r3, #250	@ 0xfa
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f00a f9ad 	bl	800eef8 <HAL_Delay>
    return true;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004ba2:	2300      	movs	r3, #0
  }
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08023a4c 	.word	0x08023a4c

08004bb0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <CIPSNTPTIME+0x34>)
 8004bb8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7fb fad5 	bl	800016c <strlen>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7fe ffb6 	bl	8003b3c <ESP_Send>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d001      	beq.n	8004bd8 <CIPSNTPTIME+0x28>
    return true;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004bd8:	2300      	movs	r3, #0
  }
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	08023a9c 	.word	0x08023a9c

08004be8 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <CIPSNTPINTV+0x34>)
 8004bf0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7fb fab9 	bl	800016c <strlen>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0011      	movs	r1, r2
 8004c02:	0018      	movs	r0, r3
 8004c04:	f7fe ff9a 	bl	8003b3c <ESP_Send>
 8004c08:	1e03      	subs	r3, r0, #0
 8004c0a:	d001      	beq.n	8004c10 <CIPSNTPINTV+0x28>
    return true;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c10:	2300      	movs	r3, #0
  }
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b002      	add	sp, #8
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	08023ab0 	.word	0x08023ab0

08004c20 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c20:	b5b0      	push	{r4, r5, r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	0002      	movs	r2, r0
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8004de0 <DMA_ProcessBuffer+0x1c0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	200e      	movs	r0, #14
 8004c36:	183b      	adds	r3, r7, r0
 8004c38:	2180      	movs	r1, #128	@ 0x80
 8004c3a:	0049      	lsls	r1, r1, #1
 8004c3c:	1a8a      	subs	r2, r1, r2
 8004c3e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c40:	230d      	movs	r3, #13
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	2203      	movs	r2, #3
 8004c46:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c48:	183b      	adds	r3, r7, r0
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d903      	bls.n	8004c5c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c54:	183b      	adds	r3, r7, r0
 8004c56:	2280      	movs	r2, #128	@ 0x80
 8004c58:	0052      	lsls	r2, r2, #1
 8004c5a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c5c:	4b61      	ldr	r3, [pc, #388]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	001a      	movs	r2, r3
 8004c64:	230e      	movs	r3, #14
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d131      	bne.n	8004cd2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8004de8 <DMA_ProcessBuffer+0x1c8>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b14      	cmp	r3, #20
 8004c74:	d91b      	bls.n	8004cae <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c76:	4b5c      	ldr	r3, [pc, #368]	@ (8004de8 <DMA_ProcessBuffer+0x1c8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dec <DMA_ProcessBuffer+0x1cc>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <DMA_ProcessBuffer+0x74>
 8004c84:	4b5a      	ldr	r3, [pc, #360]	@ (8004df0 <DMA_ProcessBuffer+0x1d0>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004c8c:	230d      	movs	r3, #13
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2207      	movs	r2, #7
 8004c92:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004c94:	4b55      	ldr	r3, [pc, #340]	@ (8004dec <DMA_ProcessBuffer+0x1cc>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d103      	bne.n	8004ca4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <DMA_ProcessBuffer+0x1d4>)
 8004c9e:	220b      	movs	r2, #11
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e016      	b.n	8004cd2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004ca4:	230d      	movs	r3, #13
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2206      	movs	r2, #6
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e011      	b.n	8004cd2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004cae:	4b4e      	ldr	r3, [pc, #312]	@ (8004de8 <DMA_ProcessBuffer+0x1c8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8004de8 <DMA_ProcessBuffer+0x1c8>)
 8004cb8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004cba:	f00a f913 	bl	800eee4 <HAL_GetTick>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	33f5      	adds	r3, #245	@ 0xf5
 8004cc2:	33ff      	adds	r3, #255	@ 0xff
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004df8 <DMA_ProcessBuffer+0x1d8>)
 8004cc8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004cca:	230d      	movs	r3, #13
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2204      	movs	r2, #4
 8004cd0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004cd2:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	001a      	movs	r2, r3
 8004cda:	210e      	movs	r1, #14
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <DMA_ProcessBuffer+0xc6>
 8004ce4:	e075      	b.n	8004dd2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004ce6:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <DMA_ProcessBuffer+0x1c8>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004cec:	4b43      	ldr	r3, [pc, #268]	@ (8004dfc <DMA_ProcessBuffer+0x1dc>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d109      	bne.n	8004d10 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b3e      	ldr	r3, [pc, #248]	@ (8004dfc <DMA_ProcessBuffer+0x1dc>)
 8004d04:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d06:	230d      	movs	r3, #13
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e060      	b.n	8004dd2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d10:	4b3a      	ldr	r3, [pc, #232]	@ (8004dfc <DMA_ProcessBuffer+0x1dc>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	001a      	movs	r2, r3
 8004d18:	210e      	movs	r1, #14
 8004d1a:	187b      	adds	r3, r7, r1
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	4b34      	ldr	r3, [pc, #208]	@ (8004dfc <DMA_ProcessBuffer+0x1dc>)
 8004d2a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d2c:	230d      	movs	r3, #13
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	220a      	movs	r2, #10
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e04d      	b.n	8004dd2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d36:	4b2b      	ldr	r3, [pc, #172]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	001a      	movs	r2, r3
 8004d3e:	210e      	movs	r1, #14
 8004d40:	187b      	adds	r3, r7, r1
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d917      	bls.n	8004d78 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d48:	4b26      	ldr	r3, [pc, #152]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	001a      	movs	r2, r3
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <DMA_ProcessBuffer+0x1e0>)
 8004d52:	18d0      	adds	r0, r2, r3
 8004d54:	4b23      	ldr	r3, [pc, #140]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	b299      	uxth	r1, r3
 8004d64:	230d      	movs	r3, #13
 8004d66:	18fc      	adds	r4, r7, r3
 8004d68:	1dfb      	adds	r3, r7, #7
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	f7ff fa89 	bl	8004284 <ParseBuffer>
 8004d72:	0003      	movs	r3, r0
 8004d74:	7023      	strb	r3, [r4, #0]
 8004d76:	e026      	b.n	8004dc6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d78:	4b1a      	ldr	r3, [pc, #104]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	001a      	movs	r2, r3
 8004d80:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <DMA_ProcessBuffer+0x1e0>)
 8004d82:	18d0      	adds	r0, r2, r3
 8004d84:	4b17      	ldr	r3, [pc, #92]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	b299      	uxth	r1, r3
 8004d94:	250d      	movs	r5, #13
 8004d96:	197c      	adds	r4, r7, r5
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	f7ff fa71 	bl	8004284 <ParseBuffer>
 8004da2:	0003      	movs	r3, r0
 8004da4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004da6:	210e      	movs	r1, #14
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004db0:	197c      	adds	r4, r7, r5
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	8819      	ldrh	r1, [r3, #0]
 8004dba:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <DMA_ProcessBuffer+0x1e0>)
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff fa61 	bl	8004284 <ParseBuffer>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004dc6:	230e      	movs	r3, #14
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <DMA_ProcessBuffer+0x1c4>)
 8004dd0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004dd2:	230d      	movs	r3, #13
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b004      	add	sp, #16
 8004dde:	bdb0      	pop	{r4, r5, r7, pc}
 8004de0:	20002310 	.word	0x20002310
 8004de4:	20000b51 	.word	0x20000b51
 8004de8:	20000a0c 	.word	0x20000a0c
 8004dec:	20000a0e 	.word	0x20000a0e
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000030 	.word	0x20000030
 8004df8:	20000a08 	.word	0x20000a08
 8004dfc:	20000b52 	.word	0x20000b52
 8004e00:	20000450 	.word	0x20000450

08004e04 <clearDMABuffer>:

void clearDMABuffer(){
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e08:	2380      	movs	r3, #128	@ 0x80
 8004e0a:	005a      	lsls	r2, r3, #1
 8004e0c:	4b03      	ldr	r3, [pc, #12]	@ (8004e1c <clearDMABuffer+0x18>)
 8004e0e:	2100      	movs	r1, #0
 8004e10:	0018      	movs	r0, r3
 8004e12:	f01b fabf 	bl	8020394 <memset>
}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000450 	.word	0x20000450

08004e20 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	0002      	movs	r2, r0
 8004e28:	1dfb      	adds	r3, r7, #7
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	1dbb      	adds	r3, r7, #6
 8004e2e:	1c0a      	adds	r2, r1, #0
 8004e30:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e32:	210f      	movs	r1, #15
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e3a:	1dbb      	adds	r3, r7, #6
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	1dfa      	adds	r2, r7, #7
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	4251      	negs	r1, r2
 8004e4a:	414a      	adcs	r2, r1
 8004e4c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e4e:	1dbb      	adds	r3, r7, #6
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e56:	230f      	movs	r3, #15
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	1dfa      	adds	r2, r7, #7
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	3a02      	subs	r2, #2
 8004e60:	4251      	negs	r1, r2
 8004e62:	414a      	adcs	r2, r1
 8004e64:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e66:	1dbb      	adds	r3, r7, #6
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e6e:	230f      	movs	r3, #15
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	1dfa      	adds	r2, r7, #7
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	3a05      	subs	r2, #5
 8004e78:	4251      	negs	r1, r2
 8004e7a:	414a      	adcs	r2, r1
 8004e7c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e7e:	1dbb      	adds	r3, r7, #6
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	d107      	bne.n	8004e96 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004e86:	230f      	movs	r3, #15
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	1dfa      	adds	r2, r7, #7
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	3a0b      	subs	r2, #11
 8004e90:	4251      	negs	r1, r2
 8004e92:	414a      	adcs	r2, r1
 8004e94:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004e96:	230f      	movs	r3, #15
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	781b      	ldrb	r3, [r3, #0]
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b004      	add	sp, #16
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	0002      	movs	r2, r0
 8004eac:	1dfb      	adds	r3, r7, #7
 8004eae:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b14      	cmp	r3, #20
 8004ebe:	d900      	bls.n	8004ec2 <AT_Send+0x1e>
 8004ec0:	e19e      	b.n	8005200 <AT_Send+0x35c>
 8004ec2:	009a      	lsls	r2, r3, #2
 8004ec4:	4bd2      	ldr	r3, [pc, #840]	@ (8005210 <AT_Send+0x36c>)
 8004ec6:	18d3      	adds	r3, r2, r3
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004ecc:	4bd1      	ldr	r3, [pc, #836]	@ (8005214 <AT_Send+0x370>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f009 fb6d 	bl	800e5b0 <TimestampIsReached>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d100      	bne.n	8004edc <AT_Send+0x38>
 8004eda:	e190      	b.n	80051fe <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8004edc:	4ace      	ldr	r2, [pc, #824]	@ (8005218 <AT_Send+0x374>)
 8004ede:	4bcf      	ldr	r3, [pc, #828]	@ (800521c <AT_Send+0x378>)
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	f009 fbba 	bl	800e65c <CreateLine>
    ATCommandSend = PollAwake();
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fc      	adds	r4, r7, r3
 8004eec:	f7ff fbba 	bl	8004664 <PollAwake>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ef4:	f009 fff6 	bl	800eee4 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	001a      	movs	r2, r3
 8004efe:	4bc5      	ldr	r3, [pc, #788]	@ (8005214 <AT_Send+0x370>)
 8004f00:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f02:	e17c      	b.n	80051fe <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f04:	4ac6      	ldr	r2, [pc, #792]	@ (8005220 <AT_Send+0x37c>)
 8004f06:	4bc5      	ldr	r3, [pc, #788]	@ (800521c <AT_Send+0x378>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f009 fba6 	bl	800e65c <CreateLine>
    ATCommandSend = RFPower();
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fc      	adds	r4, r7, r3
 8004f14:	f7ff fbc2 	bl	800469c <RFPower>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f1c:	f009 ffe2 	bl	800eee4 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	330a      	adds	r3, #10
 8004f24:	001a      	movs	r2, r3
 8004f26:	4bbb      	ldr	r3, [pc, #748]	@ (8005214 <AT_Send+0x370>)
 8004f28:	601a      	str	r2, [r3, #0]
    break;
 8004f2a:	e169      	b.n	8005200 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f2c:	4abd      	ldr	r2, [pc, #756]	@ (8005224 <AT_Send+0x380>)
 8004f2e:	4bbb      	ldr	r3, [pc, #748]	@ (800521c <AT_Send+0x378>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f009 fb92 	bl	800e65c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f38:	230f      	movs	r3, #15
 8004f3a:	18fc      	adds	r4, r7, r3
 8004f3c:	f7ff fbca 	bl	80046d4 <CheckRFPower>
 8004f40:	0003      	movs	r3, r0
 8004f42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f44:	f009 ffce 	bl	800eee4 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	330a      	adds	r3, #10
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	4bb1      	ldr	r3, [pc, #708]	@ (8005214 <AT_Send+0x370>)
 8004f50:	601a      	str	r2, [r3, #0]
    break;
 8004f52:	e155      	b.n	8005200 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f54:	4ab4      	ldr	r2, [pc, #720]	@ (8005228 <AT_Send+0x384>)
 8004f56:	4bb1      	ldr	r3, [pc, #708]	@ (800521c <AT_Send+0x378>)
 8004f58:	0019      	movs	r1, r3
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	f009 fb7e 	bl	800e65c <CreateLine>
    ATCommandSend = ATRestore();
 8004f60:	230f      	movs	r3, #15
 8004f62:	18fc      	adds	r4, r7, r3
 8004f64:	f7ff fbd2 	bl	800470c <ATRestore>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f6c:	f009 ffba 	bl	800eee4 <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	3332      	adds	r3, #50	@ 0x32
 8004f74:	001a      	movs	r2, r3
 8004f76:	4ba7      	ldr	r3, [pc, #668]	@ (8005214 <AT_Send+0x370>)
 8004f78:	601a      	str	r2, [r3, #0]
    break;
 8004f7a:	e141      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f7c:	4aab      	ldr	r2, [pc, #684]	@ (800522c <AT_Send+0x388>)
 8004f7e:	4ba7      	ldr	r3, [pc, #668]	@ (800521c <AT_Send+0x378>)
 8004f80:	0019      	movs	r1, r3
 8004f82:	2003      	movs	r0, #3
 8004f84:	f009 fb6a 	bl	800e65c <CreateLine>
    ATCommandSend = CWINIT();
 8004f88:	230f      	movs	r3, #15
 8004f8a:	18fc      	adds	r4, r7, r3
 8004f8c:	f7ff fbda 	bl	8004744 <CWINIT>
 8004f90:	0003      	movs	r3, r0
 8004f92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f94:	f009 ffa6 	bl	800eee4 <HAL_GetTick>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	33f5      	adds	r3, #245	@ 0xf5
 8004f9c:	33ff      	adds	r3, #255	@ 0xff
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8005214 <AT_Send+0x370>)
 8004fa2:	601a      	str	r2, [r3, #0]
    break;
 8004fa4:	e12c      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004fa6:	4aa2      	ldr	r2, [pc, #648]	@ (8005230 <AT_Send+0x38c>)
 8004fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800521c <AT_Send+0x378>)
 8004faa:	0019      	movs	r1, r3
 8004fac:	2003      	movs	r0, #3
 8004fae:	f009 fb55 	bl	800e65c <CreateLine>
    ATCommandSend = CWSTATE();
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	18fc      	adds	r4, r7, r3
 8004fb6:	f7ff fcd3 	bl	8004960 <CWSTATE>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fbe:	f009 ff91 	bl	800eee4 <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	33f5      	adds	r3, #245	@ 0xf5
 8004fc6:	33ff      	adds	r3, #255	@ 0xff
 8004fc8:	001a      	movs	r2, r3
 8004fca:	4b92      	ldr	r3, [pc, #584]	@ (8005214 <AT_Send+0x370>)
 8004fcc:	601a      	str	r2, [r3, #0]
    break;
 8004fce:	e117      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004fd0:	4a98      	ldr	r2, [pc, #608]	@ (8005234 <AT_Send+0x390>)
 8004fd2:	4b92      	ldr	r3, [pc, #584]	@ (800521c <AT_Send+0x378>)
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	f009 fb40 	bl	800e65c <CreateLine>
    ATCommandSend = CWMODE1();
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fc      	adds	r4, r7, r3
 8004fe0:	f7ff fbcc 	bl	800477c <CWMODE1>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fe8:	f009 ff7c 	bl	800eee4 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	330a      	adds	r3, #10
 8004ff0:	001a      	movs	r2, r3
 8004ff2:	4b88      	ldr	r3, [pc, #544]	@ (8005214 <AT_Send+0x370>)
 8004ff4:	601a      	str	r2, [r3, #0]
    break;
 8004ff6:	e103      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8005234 <AT_Send+0x390>)
 8004ffa:	4b88      	ldr	r3, [pc, #544]	@ (800521c <AT_Send+0x378>)
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	2003      	movs	r0, #3
 8005000:	f009 fb2c 	bl	800e65c <CreateLine>
    ATCommandSend = CWMODE2();
 8005004:	230f      	movs	r3, #15
 8005006:	18fc      	adds	r4, r7, r3
 8005008:	f7ff fbd4 	bl	80047b4 <CWMODE2>
 800500c:	0003      	movs	r3, r0
 800500e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005010:	f009 ff68 	bl	800eee4 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	330a      	adds	r3, #10
 8005018:	001a      	movs	r2, r3
 800501a:	4b7e      	ldr	r3, [pc, #504]	@ (8005214 <AT_Send+0x370>)
 800501c:	601a      	str	r2, [r3, #0]
    break;
 800501e:	e0ef      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005020:	4a85      	ldr	r2, [pc, #532]	@ (8005238 <AT_Send+0x394>)
 8005022:	4b7e      	ldr	r3, [pc, #504]	@ (800521c <AT_Send+0x378>)
 8005024:	0019      	movs	r1, r3
 8005026:	2003      	movs	r0, #3
 8005028:	f009 fb18 	bl	800e65c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800502c:	230f      	movs	r3, #15
 800502e:	18fc      	adds	r4, r7, r3
 8005030:	f7ff fbdc 	bl	80047ec <CWAUTOCONN>
 8005034:	0003      	movs	r3, r0
 8005036:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005038:	f009 ff54 	bl	800eee4 <HAL_GetTick>
 800503c:	0003      	movs	r3, r0
 800503e:	330a      	adds	r3, #10
 8005040:	001a      	movs	r2, r3
 8005042:	4b74      	ldr	r3, [pc, #464]	@ (8005214 <AT_Send+0x370>)
 8005044:	601a      	str	r2, [r3, #0]
    break;
 8005046:	e0db      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005048:	4a7c      	ldr	r2, [pc, #496]	@ (800523c <AT_Send+0x398>)
 800504a:	4b74      	ldr	r3, [pc, #464]	@ (800521c <AT_Send+0x378>)
 800504c:	0019      	movs	r1, r3
 800504e:	2003      	movs	r0, #3
 8005050:	f009 fb04 	bl	800e65c <CreateLine>
    ATCommandSend = CWJAP();
 8005054:	230f      	movs	r3, #15
 8005056:	18fc      	adds	r4, r7, r3
 8005058:	f7ff fbe4 	bl	8004824 <CWJAP>
 800505c:	0003      	movs	r3, r0
 800505e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005060:	f009 ff40 	bl	800eee4 <HAL_GetTick>
 8005064:	0003      	movs	r3, r0
 8005066:	3332      	adds	r3, #50	@ 0x32
 8005068:	001a      	movs	r2, r3
 800506a:	4b6a      	ldr	r3, [pc, #424]	@ (8005214 <AT_Send+0x370>)
 800506c:	601a      	str	r2, [r3, #0]
    break;
 800506e:	e0c7      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005070:	4a73      	ldr	r2, [pc, #460]	@ (8005240 <AT_Send+0x39c>)
 8005072:	4b6a      	ldr	r3, [pc, #424]	@ (800521c <AT_Send+0x378>)
 8005074:	0019      	movs	r1, r3
 8005076:	2003      	movs	r0, #3
 8005078:	f009 faf0 	bl	800e65c <CreateLine>
    ATCommandSend = CWMODE3();
 800507c:	230f      	movs	r3, #15
 800507e:	18fc      	adds	r4, r7, r3
 8005080:	f7ff fc52 	bl	8004928 <CWMODE3>
 8005084:	0003      	movs	r3, r0
 8005086:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005088:	f009 ff2c 	bl	800eee4 <HAL_GetTick>
 800508c:	0003      	movs	r3, r0
 800508e:	330a      	adds	r3, #10
 8005090:	001a      	movs	r2, r3
 8005092:	4b60      	ldr	r3, [pc, #384]	@ (8005214 <AT_Send+0x370>)
 8005094:	601a      	str	r2, [r3, #0]
    break;
 8005096:	e0b3      	b.n	8005200 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8005098:	4a6a      	ldr	r2, [pc, #424]	@ (8005244 <AT_Send+0x3a0>)
 800509a:	4b60      	ldr	r3, [pc, #384]	@ (800521c <AT_Send+0x378>)
 800509c:	0019      	movs	r1, r3
 800509e:	2003      	movs	r0, #3
 80050a0:	f009 fadc 	bl	800e65c <CreateLine>
    ATCommandSend = CWSAP();
 80050a4:	230f      	movs	r3, #15
 80050a6:	18fc      	adds	r4, r7, r3
 80050a8:	f7ff fc76 	bl	8004998 <CWSAP>
 80050ac:	0003      	movs	r3, r0
 80050ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050b0:	f009 ff18 	bl	800eee4 <HAL_GetTick>
 80050b4:	0003      	movs	r3, r0
 80050b6:	330a      	adds	r3, #10
 80050b8:	001a      	movs	r2, r3
 80050ba:	4b56      	ldr	r3, [pc, #344]	@ (8005214 <AT_Send+0x370>)
 80050bc:	601a      	str	r2, [r3, #0]
    break;
 80050be:	e09f      	b.n	8005200 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80050c0:	4a61      	ldr	r2, [pc, #388]	@ (8005248 <AT_Send+0x3a4>)
 80050c2:	4b56      	ldr	r3, [pc, #344]	@ (800521c <AT_Send+0x378>)
 80050c4:	0019      	movs	r1, r3
 80050c6:	2003      	movs	r0, #3
 80050c8:	f009 fac8 	bl	800e65c <CreateLine>
    ATCommandSend = CIPMUX();
 80050cc:	230f      	movs	r3, #15
 80050ce:	18fc      	adds	r4, r7, r3
 80050d0:	f7ff fc7e 	bl	80049d0 <CIPMUX>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050d8:	f009 ff04 	bl	800eee4 <HAL_GetTick>
 80050dc:	0003      	movs	r3, r0
 80050de:	330a      	adds	r3, #10
 80050e0:	001a      	movs	r2, r3
 80050e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005214 <AT_Send+0x370>)
 80050e4:	601a      	str	r2, [r3, #0]
    break;
 80050e6:	e08b      	b.n	8005200 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80050e8:	4a58      	ldr	r2, [pc, #352]	@ (800524c <AT_Send+0x3a8>)
 80050ea:	4b4c      	ldr	r3, [pc, #304]	@ (800521c <AT_Send+0x378>)
 80050ec:	0019      	movs	r1, r3
 80050ee:	2003      	movs	r0, #3
 80050f0:	f009 fab4 	bl	800e65c <CreateLine>
    ATCommandSend = WEBSERVER();
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fc      	adds	r4, r7, r3
 80050f8:	f7ff fc86 	bl	8004a08 <WEBSERVER>
 80050fc:	0003      	movs	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005100:	f009 fef0 	bl	800eee4 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	330a      	adds	r3, #10
 8005108:	001a      	movs	r2, r3
 800510a:	4b42      	ldr	r3, [pc, #264]	@ (8005214 <AT_Send+0x370>)
 800510c:	601a      	str	r2, [r3, #0]
    break;
 800510e:	e077      	b.n	8005200 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005110:	230f      	movs	r3, #15
 8005112:	18fc      	adds	r4, r7, r3
 8005114:	f7ff fc94 	bl	8004a40 <HTTPCPOST>
 8005118:	0003      	movs	r3, r0
 800511a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800511c:	f009 fee2 	bl	800eee4 <HAL_GetTick>
 8005120:	0003      	movs	r3, r0
 8005122:	33f5      	adds	r3, #245	@ 0xf5
 8005124:	33ff      	adds	r3, #255	@ 0xff
 8005126:	001a      	movs	r2, r3
 8005128:	4b3a      	ldr	r3, [pc, #232]	@ (8005214 <AT_Send+0x370>)
 800512a:	601a      	str	r2, [r3, #0]
    break;
 800512c:	e068      	b.n	8005200 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800512e:	4a48      	ldr	r2, [pc, #288]	@ (8005250 <AT_Send+0x3ac>)
 8005130:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <AT_Send+0x378>)
 8005132:	0019      	movs	r1, r3
 8005134:	2003      	movs	r0, #3
 8005136:	f009 fa91 	bl	800e65c <CreateLine>
    ATCommandSend = SENDDATA();
 800513a:	230f      	movs	r3, #15
 800513c:	18fc      	adds	r4, r7, r3
 800513e:	f7ff fcdf 	bl	8004b00 <SENDDATA>
 8005142:	0003      	movs	r3, r0
 8005144:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005146:	f009 fecd 	bl	800eee4 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	33f5      	adds	r3, #245	@ 0xf5
 800514e:	33ff      	adds	r3, #255	@ 0xff
 8005150:	001a      	movs	r2, r3
 8005152:	4b30      	ldr	r3, [pc, #192]	@ (8005214 <AT_Send+0x370>)
 8005154:	601a      	str	r2, [r3, #0]
    break;
 8005156:	e053      	b.n	8005200 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005158:	4a3e      	ldr	r2, [pc, #248]	@ (8005254 <AT_Send+0x3b0>)
 800515a:	4b30      	ldr	r3, [pc, #192]	@ (800521c <AT_Send+0x378>)
 800515c:	0019      	movs	r1, r3
 800515e:	2003      	movs	r0, #3
 8005160:	f009 fa7c 	bl	800e65c <CreateLine>
    ATCommandSend = SLEEP();
 8005164:	230f      	movs	r3, #15
 8005166:	18fc      	adds	r4, r7, r3
 8005168:	f7ff fce6 	bl	8004b38 <SLEEP>
 800516c:	0003      	movs	r3, r0
 800516e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005170:	f009 feb8 	bl	800eee4 <HAL_GetTick>
 8005174:	0003      	movs	r3, r0
 8005176:	330a      	adds	r3, #10
 8005178:	001a      	movs	r2, r3
 800517a:	4b26      	ldr	r3, [pc, #152]	@ (8005214 <AT_Send+0x370>)
 800517c:	601a      	str	r2, [r3, #0]
    break;
 800517e:	e03f      	b.n	8005200 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005180:	4a35      	ldr	r2, [pc, #212]	@ (8005258 <AT_Send+0x3b4>)
 8005182:	4b26      	ldr	r3, [pc, #152]	@ (800521c <AT_Send+0x378>)
 8005184:	0019      	movs	r1, r3
 8005186:	2003      	movs	r0, #3
 8005188:	f009 fa68 	bl	800e65c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 800518c:	230f      	movs	r3, #15
 800518e:	18fc      	adds	r4, r7, r3
 8005190:	f7ff fcee 	bl	8004b70 <CIPSNTPCFG>
 8005194:	0003      	movs	r3, r0
 8005196:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005198:	f009 fea4 	bl	800eee4 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	330a      	adds	r3, #10
 80051a0:	001a      	movs	r2, r3
 80051a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005214 <AT_Send+0x370>)
 80051a4:	601a      	str	r2, [r3, #0]
    break;
 80051a6:	e02b      	b.n	8005200 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051a8:	4a2c      	ldr	r2, [pc, #176]	@ (800525c <AT_Send+0x3b8>)
 80051aa:	4b1c      	ldr	r3, [pc, #112]	@ (800521c <AT_Send+0x378>)
 80051ac:	0019      	movs	r1, r3
 80051ae:	2003      	movs	r0, #3
 80051b0:	f009 fa54 	bl	800e65c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051b4:	230f      	movs	r3, #15
 80051b6:	18fc      	adds	r4, r7, r3
 80051b8:	f7ff fcfa 	bl	8004bb0 <CIPSNTPTIME>
 80051bc:	0003      	movs	r3, r0
 80051be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051c0:	f009 fe90 	bl	800eee4 <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	33f5      	adds	r3, #245	@ 0xf5
 80051c8:	33ff      	adds	r3, #255	@ 0xff
 80051ca:	001a      	movs	r2, r3
 80051cc:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <AT_Send+0x370>)
 80051ce:	601a      	str	r2, [r3, #0]
    break;
 80051d0:	e016      	b.n	8005200 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051d2:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <AT_Send+0x3bc>)
 80051d4:	4b11      	ldr	r3, [pc, #68]	@ (800521c <AT_Send+0x378>)
 80051d6:	0019      	movs	r1, r3
 80051d8:	2003      	movs	r0, #3
 80051da:	f009 fa3f 	bl	800e65c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80051de:	230f      	movs	r3, #15
 80051e0:	18fc      	adds	r4, r7, r3
 80051e2:	f7ff fd01 	bl	8004be8 <CIPSNTPINTV>
 80051e6:	0003      	movs	r3, r0
 80051e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051ea:	f009 fe7b 	bl	800eee4 <HAL_GetTick>
 80051ee:	0003      	movs	r3, r0
 80051f0:	330a      	adds	r3, #10
 80051f2:	001a      	movs	r2, r3
 80051f4:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <AT_Send+0x370>)
 80051f6:	601a      	str	r2, [r3, #0]
    break;
 80051f8:	e002      	b.n	8005200 <AT_Send+0x35c>

  case AT_END:
    break;
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	e000      	b.n	8005200 <AT_Send+0x35c>
  break;
 80051fe:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005200:	230f      	movs	r3, #15
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	781b      	ldrb	r3, [r3, #0]
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b005      	add	sp, #20
 800520c:	bd90      	pop	{r4, r7, pc}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	08025520 	.word	0x08025520
 8005214:	20000a08 	.word	0x20000a08
 8005218:	08023ac8 	.word	0x08023ac8
 800521c:	08023308 	.word	0x08023308
 8005220:	08023ad4 	.word	0x08023ad4
 8005224:	08023ae8 	.word	0x08023ae8
 8005228:	08023afc 	.word	0x08023afc
 800522c:	08023b0c 	.word	0x08023b0c
 8005230:	08023b20 	.word	0x08023b20
 8005234:	08023b38 	.word	0x08023b38
 8005238:	08023b50 	.word	0x08023b50
 800523c:	08023b68 	.word	0x08023b68
 8005240:	08023b7c 	.word	0x08023b7c
 8005244:	08023b98 	.word	0x08023b98
 8005248:	08023bb4 	.word	0x08023bb4
 800524c:	08023bd0 	.word	0x08023bd0
 8005250:	08023bec 	.word	0x08023bec
 8005254:	08023bfc 	.word	0x08023bfc
 8005258:	08023c20 	.word	0x08023c20
 800525c:	08023c34 	.word	0x08023c34
 8005260:	08023c4c 	.word	0x08023c4c

08005264 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800526a:	1dfb      	adds	r3, r7, #7
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005270:	4b7d      	ldr	r3, [pc, #500]	@ (8005468 <ESP_WakeTest+0x204>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b05      	cmp	r3, #5
 8005276:	d900      	bls.n	800527a <ESP_WakeTest+0x16>
 8005278:	e0d9      	b.n	800542e <ESP_WakeTest+0x1ca>
 800527a:	009a      	lsls	r2, r3, #2
 800527c:	4b7b      	ldr	r3, [pc, #492]	@ (800546c <ESP_WakeTest+0x208>)
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005284:	4b7a      	ldr	r3, [pc, #488]	@ (8005470 <ESP_WakeTest+0x20c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	4053      	eors	r3, r2
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005292:	2380      	movs	r3, #128	@ 0x80
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	4877      	ldr	r0, [pc, #476]	@ (8005474 <ESP_WakeTest+0x210>)
 8005298:	2200      	movs	r2, #0
 800529a:	0019      	movs	r1, r3
 800529c:	f00b f8b3 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052a0:	2032      	movs	r0, #50	@ 0x32
 80052a2:	f009 fe29 	bl	800eef8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4872      	ldr	r0, [pc, #456]	@ (8005474 <ESP_WakeTest+0x210>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	0019      	movs	r1, r3
 80052b0:	f00b f8a9 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052b4:	200a      	movs	r0, #10
 80052b6:	f009 fe1f 	bl	800eef8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005478 <ESP_WakeTest+0x214>)
 80052bc:	2200      	movs	r2, #0
 80052be:	2101      	movs	r1, #1
 80052c0:	0018      	movs	r0, r3
 80052c2:	f00b f8a0 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052c6:	200a      	movs	r0, #10
 80052c8:	f009 fe16 	bl	800eef8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005478 <ESP_WakeTest+0x214>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	2102      	movs	r1, #2
 80052d2:	0018      	movs	r0, r3
 80052d4:	f00b f897 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052d8:	200a      	movs	r0, #10
 80052da:	f009 fe0d 	bl	800eef8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052de:	4b66      	ldr	r3, [pc, #408]	@ (8005478 <ESP_WakeTest+0x214>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	2101      	movs	r1, #1
 80052e4:	0018      	movs	r0, r3
 80052e6:	f00b f88e 	bl	8010406 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052ea:	f009 fdfb 	bl	800eee4 <HAL_GetTick>
 80052ee:	0003      	movs	r3, r0
 80052f0:	22af      	movs	r2, #175	@ 0xaf
 80052f2:	0092      	lsls	r2, r2, #2
 80052f4:	189a      	adds	r2, r3, r2
 80052f6:	4b61      	ldr	r3, [pc, #388]	@ (800547c <ESP_WakeTest+0x218>)
 80052f8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80052fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005470 <ESP_WakeTest+0x20c>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	005a      	lsls	r2, r3, #1
 8005304:	4b5e      	ldr	r3, [pc, #376]	@ (8005480 <ESP_WakeTest+0x21c>)
 8005306:	0011      	movs	r1, r2
 8005308:	0018      	movs	r0, r3
 800530a:	f7fe fc4b 	bl	8003ba4 <ESP_Receive>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d100      	bne.n	8005314 <ESP_WakeTest+0xb0>
 8005312:	e09f      	b.n	8005454 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005314:	4b54      	ldr	r3, [pc, #336]	@ (8005468 <ESP_WakeTest+0x204>)
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
      }
      break;
 800531a:	e09b      	b.n	8005454 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800531c:	4b57      	ldr	r3, [pc, #348]	@ (800547c <ESP_WakeTest+0x218>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	0018      	movs	r0, r3
 8005322:	f009 f945 	bl	800e5b0 <TimestampIsReached>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d100      	bne.n	800532c <ESP_WakeTest+0xc8>
 800532a:	e095      	b.n	8005458 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800532c:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <ESP_WakeTest+0x220>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	1dfc      	adds	r4, r7, #7
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff fdb6 	bl	8004ea4 <AT_Send>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800533c:	1dfb      	adds	r3, r7, #7
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d100      	bne.n	8005346 <ESP_WakeTest+0xe2>
 8005344:	e088      	b.n	8005458 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005346:	4b48      	ldr	r3, [pc, #288]	@ (8005468 <ESP_WakeTest+0x204>)
 8005348:	2202      	movs	r2, #2
 800534a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800534c:	e084      	b.n	8005458 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800534e:	4b4b      	ldr	r3, [pc, #300]	@ (800547c <ESP_WakeTest+0x218>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0018      	movs	r0, r3
 8005354:	f009 f92c 	bl	800e5b0 <TimestampIsReached>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d100      	bne.n	800535e <ESP_WakeTest+0xfa>
 800535c:	e07e      	b.n	800545c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800535e:	4b4a      	ldr	r3, [pc, #296]	@ (8005488 <ESP_WakeTest+0x224>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff fc5c 	bl	8004c20 <DMA_ProcessBuffer>
 8005368:	0003      	movs	r3, r0
 800536a:	001a      	movs	r2, r3
 800536c:	4b47      	ldr	r3, [pc, #284]	@ (800548c <ESP_WakeTest+0x228>)
 800536e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005370:	4b46      	ldr	r3, [pc, #280]	@ (800548c <ESP_WakeTest+0x228>)
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	4b44      	ldr	r3, [pc, #272]	@ (8005488 <ESP_WakeTest+0x224>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	1dbc      	adds	r4, r7, #6
 800537a:	0019      	movs	r1, r3
 800537c:	0010      	movs	r0, r2
 800537e:	f7ff fd4f 	bl	8004e20 <ATCompare>
 8005382:	0003      	movs	r3, r0
 8005384:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005386:	4b41      	ldr	r3, [pc, #260]	@ (800548c <ESP_WakeTest+0x228>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d102      	bne.n	8005394 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800538e:	4b36      	ldr	r3, [pc, #216]	@ (8005468 <ESP_WakeTest+0x204>)
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005394:	4b3d      	ldr	r3, [pc, #244]	@ (800548c <ESP_WakeTest+0x228>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b07      	cmp	r3, #7
 800539a:	d104      	bne.n	80053a6 <ESP_WakeTest+0x142>
          StartProg();
 800539c:	f7fe ff40 	bl	8004220 <StartProg>
          TestState = ESP_TEST_BOOT;
 80053a0:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <ESP_WakeTest+0x204>)
 80053a2:	2205      	movs	r2, #5
 80053a4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053a6:	4b39      	ldr	r3, [pc, #228]	@ (800548c <ESP_WakeTest+0x228>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d109      	bne.n	80053c2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053ae:	f009 fd99 	bl	800eee4 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	3332      	adds	r3, #50	@ 0x32
 80053b6:	001a      	movs	r2, r3
 80053b8:	4b30      	ldr	r3, [pc, #192]	@ (800547c <ESP_WakeTest+0x218>)
 80053ba:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005468 <ESP_WakeTest+0x204>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053c2:	1dbb      	adds	r3, r7, #6
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d048      	beq.n	800545c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <ESP_WakeTest+0x204>)
 80053cc:	2203      	movs	r2, #3
 80053ce:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053d0:	e044      	b.n	800545c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005490 <ESP_WakeTest+0x22c>)
 80053d4:	22fa      	movs	r2, #250	@ 0xfa
 80053d6:	0112      	lsls	r2, r2, #4
 80053d8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80053da:	f007 fe9b 	bl	800d114 <Calculate_LED_ON>
 80053de:	0003      	movs	r3, r0
 80053e0:	001a      	movs	r2, r3
 80053e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005490 <ESP_WakeTest+0x22c>)
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80053e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005490 <ESP_WakeTest+0x22c>)
 80053e8:	22fa      	movs	r2, #250	@ 0xfa
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80053ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005468 <ESP_WakeTest+0x204>)
 80053f0:	2204      	movs	r2, #4
 80053f2:	701a      	strb	r2, [r3, #0]

      break;
 80053f4:	e033      	b.n	800545e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80053f6:	4b27      	ldr	r3, [pc, #156]	@ (8005494 <ESP_WakeTest+0x230>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80053fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005470 <ESP_WakeTest+0x20c>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <ESP_WakeTest+0x214>)
 8005404:	2200      	movs	r2, #0
 8005406:	2101      	movs	r1, #1
 8005408:	0018      	movs	r0, r3
 800540a:	f00a fffc 	bl	8010406 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	4818      	ldr	r0, [pc, #96]	@ (8005474 <ESP_WakeTest+0x210>)
 8005414:	2200      	movs	r2, #0
 8005416:	0019      	movs	r1, r3
 8005418:	f00a fff5 	bl	8010406 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800541c:	4b16      	ldr	r3, [pc, #88]	@ (8005478 <ESP_WakeTest+0x214>)
 800541e:	2200      	movs	r2, #0
 8005420:	2102      	movs	r1, #2
 8005422:	0018      	movs	r0, r3
 8005424:	f00a ffef 	bl	8010406 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005428:	f003 f838 	bl	800849c <SetESPMeasurementDone>
      break;
 800542c:	e017      	b.n	800545e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800542e:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <ESP_WakeTest+0x204>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
      break;
 8005434:	e013      	b.n	800545e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005436:	4b16      	ldr	r3, [pc, #88]	@ (8005490 <ESP_WakeTest+0x22c>)
 8005438:	22fa      	movs	r2, #250	@ 0xfa
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800543e:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <ESP_WakeTest+0x22c>)
 8005440:	22fa      	movs	r2, #250	@ 0xfa
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005446:	f007 fe65 	bl	800d114 <Calculate_LED_ON>
 800544a:	0003      	movs	r3, r0
 800544c:	001a      	movs	r2, r3
 800544e:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <ESP_WakeTest+0x22c>)
 8005450:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005452:	e004      	b.n	800545e <ESP_WakeTest+0x1fa>
      break;
 8005454:	46c0      	nop			@ (mov r8, r8)
 8005456:	e002      	b.n	800545e <ESP_WakeTest+0x1fa>
      break;
 8005458:	46c0      	nop			@ (mov r8, r8)
 800545a:	e000      	b.n	800545e <ESP_WakeTest+0x1fa>
      break;
 800545c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	46bd      	mov	sp, r7
 8005462:	b003      	add	sp, #12
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	20000a10 	.word	0x20000a10
 800546c:	08025574 	.word	0x08025574
 8005470:	20000550 	.word	0x20000550
 8005474:	50000800 	.word	0x50000800
 8005478:	50001c00 	.word	0x50001c00
 800547c:	20000a08 	.word	0x20000a08
 8005480:	20000450 	.word	0x20000450
 8005484:	20000a0e 	.word	0x20000a0e
 8005488:	20000a0d 	.word	0x20000a0d
 800548c:	20000031 	.word	0x20000031
 8005490:	40000400 	.word	0x40000400
 8005494:	20000000 	.word	0x20000000

08005498 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005498:	b5b0      	push	{r4, r5, r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800549e:	1dfb      	adds	r3, r7, #7
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054a4:	4be2      	ldr	r3, [pc, #904]	@ (8005830 <ESP_Upkeep+0x398>)
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	4be2      	ldr	r3, [pc, #904]	@ (8005834 <ESP_Upkeep+0x39c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d024      	beq.n	80054fa <ESP_Upkeep+0x62>
 80054b0:	f009 f94e 	bl	800e750 <GetVerboseLevel>
 80054b4:	0003      	movs	r3, r0
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d11f      	bne.n	80054fa <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054ba:	4bdd      	ldr	r3, [pc, #884]	@ (8005830 <ESP_Upkeep+0x398>)
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	4bdd      	ldr	r3, [pc, #884]	@ (8005834 <ESP_Upkeep+0x39c>)
 80054c0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054c2:	4bdc      	ldr	r3, [pc, #880]	@ (8005834 <ESP_Upkeep+0x39c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d103      	bne.n	80054d2 <ESP_Upkeep+0x3a>
 80054ca:	4bdb      	ldr	r3, [pc, #876]	@ (8005838 <ESP_Upkeep+0x3a0>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b0e      	cmp	r3, #14
 80054d0:	d013      	beq.n	80054fa <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80054d2:	4bd8      	ldr	r3, [pc, #864]	@ (8005834 <ESP_Upkeep+0x39c>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	001d      	movs	r5, r3
 80054d8:	4bd7      	ldr	r3, [pc, #860]	@ (8005838 <ESP_Upkeep+0x3a0>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	0018      	movs	r0, r3
 80054de:	4bd7      	ldr	r3, [pc, #860]	@ (800583c <ESP_Upkeep+0x3a4>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	001c      	movs	r4, r3
 80054e4:	4bd6      	ldr	r3, [pc, #856]	@ (8005840 <ESP_Upkeep+0x3a8>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4ad6      	ldr	r2, [pc, #856]	@ (8005844 <ESP_Upkeep+0x3ac>)
 80054ea:	49d7      	ldr	r1, [pc, #860]	@ (8005848 <ESP_Upkeep+0x3b0>)
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	9401      	str	r4, [sp, #4]
 80054f0:	9000      	str	r0, [sp, #0]
 80054f2:	002b      	movs	r3, r5
 80054f4:	2003      	movs	r0, #3
 80054f6:	f009 f8b1 	bl	800e65c <CreateLine>
    }
  }
  switch (EspState) {
 80054fa:	4bcd      	ldr	r3, [pc, #820]	@ (8005830 <ESP_Upkeep+0x398>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d901      	bls.n	8005506 <ESP_Upkeep+0x6e>
 8005502:	f000 fc32 	bl	8005d6a <ESP_Upkeep+0x8d2>
 8005506:	009a      	lsls	r2, r3, #2
 8005508:	4bd0      	ldr	r3, [pc, #832]	@ (800584c <ESP_Upkeep+0x3b4>)
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005510:	4bc7      	ldr	r3, [pc, #796]	@ (8005830 <ESP_Upkeep+0x398>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
      break;
 8005516:	f000 fc41 	bl	8005d9c <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800551a:	f003 fa1f 	bl	800895c <DisableConnectedDevices>
      SetESPIndicator();
 800551e:	f007 ff8b 	bl	800d438 <SetESPIndicator>
      if(!EspTurnedOn){
 8005522:	4bcb      	ldr	r3, [pc, #812]	@ (8005850 <ESP_Upkeep+0x3b8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	4053      	eors	r3, r2
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d036      	beq.n	800559e <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	48c7      	ldr	r0, [pc, #796]	@ (8005854 <ESP_Upkeep+0x3bc>)
 8005536:	2200      	movs	r2, #0
 8005538:	0019      	movs	r1, r3
 800553a:	f00a ff64 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800553e:	2001      	movs	r0, #1
 8005540:	f009 fcda 	bl	800eef8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005544:	2380      	movs	r3, #128	@ 0x80
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	48c2      	ldr	r0, [pc, #776]	@ (8005854 <ESP_Upkeep+0x3bc>)
 800554a:	2201      	movs	r2, #1
 800554c:	0019      	movs	r1, r3
 800554e:	f00a ff5a 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005552:	2001      	movs	r0, #1
 8005554:	f009 fcd0 	bl	800eef8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005558:	4bbf      	ldr	r3, [pc, #764]	@ (8005858 <ESP_Upkeep+0x3c0>)
 800555a:	2200      	movs	r2, #0
 800555c:	2101      	movs	r1, #1
 800555e:	0018      	movs	r0, r3
 8005560:	f00a ff51 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005564:	2001      	movs	r0, #1
 8005566:	f009 fcc7 	bl	800eef8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800556a:	4bbb      	ldr	r3, [pc, #748]	@ (8005858 <ESP_Upkeep+0x3c0>)
 800556c:	2201      	movs	r2, #1
 800556e:	2102      	movs	r1, #2
 8005570:	0018      	movs	r0, r3
 8005572:	f00a ff48 	bl	8010406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005576:	2001      	movs	r0, #1
 8005578:	f009 fcbe 	bl	800eef8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800557c:	4bb6      	ldr	r3, [pc, #728]	@ (8005858 <ESP_Upkeep+0x3c0>)
 800557e:	2201      	movs	r2, #1
 8005580:	2101      	movs	r1, #1
 8005582:	0018      	movs	r0, r3
 8005584:	f00a ff3f 	bl	8010406 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005588:	f009 fcac 	bl	800eee4 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	22af      	movs	r2, #175	@ 0xaf
 8005590:	0092      	lsls	r2, r2, #2
 8005592:	189a      	adds	r2, r3, r2
 8005594:	4bb1      	ldr	r3, [pc, #708]	@ (800585c <ESP_Upkeep+0x3c4>)
 8005596:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005598:	4bad      	ldr	r3, [pc, #692]	@ (8005850 <ESP_Upkeep+0x3b8>)
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	4baf      	ldr	r3, [pc, #700]	@ (8005860 <ESP_Upkeep+0x3c8>)
 80055a4:	0011      	movs	r1, r2
 80055a6:	0018      	movs	r0, r3
 80055a8:	f7fe fafc 	bl	8003ba4 <ESP_Receive>
 80055ac:	1e03      	subs	r3, r0, #0
 80055ae:	d101      	bne.n	80055b4 <ESP_Upkeep+0x11c>
 80055b0:	f000 fbe7 	bl	8005d82 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055b4:	4b9e      	ldr	r3, [pc, #632]	@ (8005830 <ESP_Upkeep+0x398>)
 80055b6:	220f      	movs	r2, #15
 80055b8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055ba:	f009 fc93 	bl	800eee4 <HAL_GetTick>
 80055be:	0003      	movs	r3, r0
 80055c0:	22fa      	movs	r2, #250	@ 0xfa
 80055c2:	00d2      	lsls	r2, r2, #3
 80055c4:	189a      	adds	r2, r3, r2
 80055c6:	4ba7      	ldr	r3, [pc, #668]	@ (8005864 <ESP_Upkeep+0x3cc>)
 80055c8:	601a      	str	r2, [r3, #0]
      }
      break;
 80055ca:	f000 fbda 	bl	8005d82 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7ff fb26 	bl	8004c20 <DMA_ProcessBuffer>
 80055d4:	0003      	movs	r3, r0
 80055d6:	001a      	movs	r2, r3
 80055d8:	4ba3      	ldr	r3, [pc, #652]	@ (8005868 <ESP_Upkeep+0x3d0>)
 80055da:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80055dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005868 <ESP_Upkeep+0x3d0>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	1dbc      	adds	r4, r7, #6
 80055e2:	2101      	movs	r1, #1
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7ff fc1b 	bl	8004e20 <ATCompare>
 80055ea:	0003      	movs	r3, r0
 80055ec:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80055ee:	1dbb      	adds	r3, r7, #6
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <ESP_Upkeep+0x170>
 80055f6:	4b9b      	ldr	r3, [pc, #620]	@ (8005864 <ESP_Upkeep+0x3cc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f008 ffd8 	bl	800e5b0 <TimestampIsReached>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d101      	bne.n	8005608 <ESP_Upkeep+0x170>
 8005604:	f000 fbbf 	bl	8005d86 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005608:	4b89      	ldr	r3, [pc, #548]	@ (8005830 <ESP_Upkeep+0x398>)
 800560a:	220b      	movs	r2, #11
 800560c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800560e:	f000 fbba 	bl	8005d86 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005612:	4b96      	ldr	r3, [pc, #600]	@ (800586c <ESP_Upkeep+0x3d4>)
 8005614:	2209      	movs	r2, #9
 8005616:	2114      	movs	r1, #20
 8005618:	0018      	movs	r0, r3
 800561a:	f01a febb 	bl	8020394 <memset>
      if(!InitIsDone || WifiReset){
 800561e:	4b94      	ldr	r3, [pc, #592]	@ (8005870 <ESP_Upkeep+0x3d8>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	4053      	eors	r3, r2
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <ESP_Upkeep+0x19c>
 800562c:	4b91      	ldr	r3, [pc, #580]	@ (8005874 <ESP_Upkeep+0x3dc>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005634:	4b8d      	ldr	r3, [pc, #564]	@ (800586c <ESP_Upkeep+0x3d4>)
 8005636:	4a90      	ldr	r2, [pc, #576]	@ (8005878 <ESP_Upkeep+0x3e0>)
 8005638:	6811      	ldr	r1, [r2, #0]
 800563a:	6019      	str	r1, [r3, #0]
 800563c:	8891      	ldrh	r1, [r2, #4]
 800563e:	8099      	strh	r1, [r3, #4]
 8005640:	7992      	ldrb	r2, [r2, #6]
 8005642:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005644:	4b7a      	ldr	r3, [pc, #488]	@ (8005830 <ESP_Upkeep+0x398>)
 8005646:	2204      	movs	r2, #4
 8005648:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800564a:	4b8c      	ldr	r3, [pc, #560]	@ (800587c <ESP_Upkeep+0x3e4>)
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005650:	4b7a      	ldr	r3, [pc, #488]	@ (800583c <ESP_Upkeep+0x3a4>)
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005656:	4b89      	ldr	r3, [pc, #548]	@ (800587c <ESP_Upkeep+0x3e4>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	001a      	movs	r2, r3
 800565c:	4b83      	ldr	r3, [pc, #524]	@ (800586c <ESP_Upkeep+0x3d4>)
 800565e:	5c9a      	ldrb	r2, [r3, r2]
 8005660:	4b75      	ldr	r3, [pc, #468]	@ (8005838 <ESP_Upkeep+0x3a0>)
 8005662:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005664:	4b76      	ldr	r3, [pc, #472]	@ (8005840 <ESP_Upkeep+0x3a8>)
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800566a:	4b81      	ldr	r3, [pc, #516]	@ (8005870 <ESP_Upkeep+0x3d8>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01f      	beq.n	80056b2 <ESP_Upkeep+0x21a>
 8005672:	4b83      	ldr	r3, [pc, #524]	@ (8005880 <ESP_Upkeep+0x3e8>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	4053      	eors	r3, r2
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005680:	4b7a      	ldr	r3, [pc, #488]	@ (800586c <ESP_Upkeep+0x3d4>)
 8005682:	4a80      	ldr	r2, [pc, #512]	@ (8005884 <ESP_Upkeep+0x3ec>)
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	6019      	str	r1, [r3, #0]
 8005688:	8892      	ldrh	r2, [r2, #4]
 800568a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800568c:	4b68      	ldr	r3, [pc, #416]	@ (8005830 <ESP_Upkeep+0x398>)
 800568e:	2204      	movs	r2, #4
 8005690:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005692:	4b7a      	ldr	r3, [pc, #488]	@ (800587c <ESP_Upkeep+0x3e4>)
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005698:	4b68      	ldr	r3, [pc, #416]	@ (800583c <ESP_Upkeep+0x3a4>)
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800569e:	4b77      	ldr	r3, [pc, #476]	@ (800587c <ESP_Upkeep+0x3e4>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	001a      	movs	r2, r3
 80056a4:	4b71      	ldr	r3, [pc, #452]	@ (800586c <ESP_Upkeep+0x3d4>)
 80056a6:	5c9a      	ldrb	r2, [r3, r2]
 80056a8:	4b63      	ldr	r3, [pc, #396]	@ (8005838 <ESP_Upkeep+0x3a0>)
 80056aa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056ac:	4b64      	ldr	r3, [pc, #400]	@ (8005840 <ESP_Upkeep+0x3a8>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005870 <ESP_Upkeep+0x3d8>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d021      	beq.n	80056fe <ESP_Upkeep+0x266>
 80056ba:	4b71      	ldr	r3, [pc, #452]	@ (8005880 <ESP_Upkeep+0x3e8>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01d      	beq.n	80056fe <ESP_Upkeep+0x266>
 80056c2:	4b71      	ldr	r3, [pc, #452]	@ (8005888 <ESP_Upkeep+0x3f0>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	4053      	eors	r3, r2
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056d0:	4b6e      	ldr	r3, [pc, #440]	@ (800588c <ESP_Upkeep+0x3f4>)
 80056d2:	881a      	ldrh	r2, [r3, #0]
 80056d4:	4b65      	ldr	r3, [pc, #404]	@ (800586c <ESP_Upkeep+0x3d4>)
 80056d6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056d8:	4b55      	ldr	r3, [pc, #340]	@ (8005830 <ESP_Upkeep+0x398>)
 80056da:	2204      	movs	r2, #4
 80056dc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056de:	4b67      	ldr	r3, [pc, #412]	@ (800587c <ESP_Upkeep+0x3e4>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80056e4:	4b55      	ldr	r3, [pc, #340]	@ (800583c <ESP_Upkeep+0x3a4>)
 80056e6:	2204      	movs	r2, #4
 80056e8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056ea:	4b64      	ldr	r3, [pc, #400]	@ (800587c <ESP_Upkeep+0x3e4>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	001a      	movs	r2, r3
 80056f0:	4b5e      	ldr	r3, [pc, #376]	@ (800586c <ESP_Upkeep+0x3d4>)
 80056f2:	5c9a      	ldrb	r2, [r3, r2]
 80056f4:	4b50      	ldr	r3, [pc, #320]	@ (8005838 <ESP_Upkeep+0x3a0>)
 80056f6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056f8:	4b51      	ldr	r3, [pc, #324]	@ (8005840 <ESP_Upkeep+0x3a8>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80056fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005870 <ESP_Upkeep+0x3d8>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02c      	beq.n	8005760 <ESP_Upkeep+0x2c8>
 8005706:	4b5e      	ldr	r3, [pc, #376]	@ (8005880 <ESP_Upkeep+0x3e8>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d028      	beq.n	8005760 <ESP_Upkeep+0x2c8>
 800570e:	4b5e      	ldr	r3, [pc, #376]	@ (8005888 <ESP_Upkeep+0x3f0>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d024      	beq.n	8005760 <ESP_Upkeep+0x2c8>
 8005716:	4b5e      	ldr	r3, [pc, #376]	@ (8005890 <ESP_Upkeep+0x3f8>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2201      	movs	r2, #1
 800571c:	4053      	eors	r3, r2
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01d      	beq.n	8005760 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005724:	4b51      	ldr	r3, [pc, #324]	@ (800586c <ESP_Upkeep+0x3d4>)
 8005726:	4a5b      	ldr	r2, [pc, #364]	@ (8005894 <ESP_Upkeep+0x3fc>)
 8005728:	8811      	ldrh	r1, [r2, #0]
 800572a:	8019      	strh	r1, [r3, #0]
 800572c:	7892      	ldrb	r2, [r2, #2]
 800572e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005730:	4b3f      	ldr	r3, [pc, #252]	@ (8005830 <ESP_Upkeep+0x398>)
 8005732:	2204      	movs	r2, #4
 8005734:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005736:	4b51      	ldr	r3, [pc, #324]	@ (800587c <ESP_Upkeep+0x3e4>)
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800573c:	4b3f      	ldr	r3, [pc, #252]	@ (800583c <ESP_Upkeep+0x3a4>)
 800573e:	2202      	movs	r2, #2
 8005740:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005742:	f009 fbcf 	bl	800eee4 <HAL_GetTick>
 8005746:	0002      	movs	r2, r0
 8005748:	4b53      	ldr	r3, [pc, #332]	@ (8005898 <ESP_Upkeep+0x400>)
 800574a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800574c:	4b4b      	ldr	r3, [pc, #300]	@ (800587c <ESP_Upkeep+0x3e4>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	001a      	movs	r2, r3
 8005752:	4b46      	ldr	r3, [pc, #280]	@ (800586c <ESP_Upkeep+0x3d4>)
 8005754:	5c9a      	ldrb	r2, [r3, r2]
 8005756:	4b38      	ldr	r3, [pc, #224]	@ (8005838 <ESP_Upkeep+0x3a0>)
 8005758:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800575a:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <ESP_Upkeep+0x3a8>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005760:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <ESP_Upkeep+0x3d8>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d027      	beq.n	80057b8 <ESP_Upkeep+0x320>
 8005768:	4b45      	ldr	r3, [pc, #276]	@ (8005880 <ESP_Upkeep+0x3e8>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d023      	beq.n	80057b8 <ESP_Upkeep+0x320>
 8005770:	4b45      	ldr	r3, [pc, #276]	@ (8005888 <ESP_Upkeep+0x3f0>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01f      	beq.n	80057b8 <ESP_Upkeep+0x320>
 8005778:	4b45      	ldr	r3, [pc, #276]	@ (8005890 <ESP_Upkeep+0x3f8>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005780:	4b46      	ldr	r3, [pc, #280]	@ (800589c <ESP_Upkeep+0x404>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b39      	ldr	r3, [pc, #228]	@ (800586c <ESP_Upkeep+0x3d4>)
 8005786:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005788:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <ESP_Upkeep+0x398>)
 800578a:	2204      	movs	r2, #4
 800578c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800578e:	4b3b      	ldr	r3, [pc, #236]	@ (800587c <ESP_Upkeep+0x3e4>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005794:	4b29      	ldr	r3, [pc, #164]	@ (800583c <ESP_Upkeep+0x3a4>)
 8005796:	2205      	movs	r2, #5
 8005798:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800579a:	f009 fba3 	bl	800eee4 <HAL_GetTick>
 800579e:	0002      	movs	r2, r0
 80057a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005898 <ESP_Upkeep+0x400>)
 80057a2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057a4:	4b35      	ldr	r3, [pc, #212]	@ (800587c <ESP_Upkeep+0x3e4>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	001a      	movs	r2, r3
 80057aa:	4b30      	ldr	r3, [pc, #192]	@ (800586c <ESP_Upkeep+0x3d4>)
 80057ac:	5c9a      	ldrb	r2, [r3, r2]
 80057ae:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <ESP_Upkeep+0x3a0>)
 80057b0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057b2:	4b23      	ldr	r3, [pc, #140]	@ (8005840 <ESP_Upkeep+0x3a8>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80057b8:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <ESP_Upkeep+0x408>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d100      	bne.n	80057c2 <ESP_Upkeep+0x32a>
 80057c0:	e2e3      	b.n	8005d8a <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80057c2:	4b2a      	ldr	r3, [pc, #168]	@ (800586c <ESP_Upkeep+0x3d4>)
 80057c4:	4a37      	ldr	r2, [pc, #220]	@ (80058a4 <ESP_Upkeep+0x40c>)
 80057c6:	6811      	ldr	r1, [r2, #0]
 80057c8:	6019      	str	r1, [r3, #0]
 80057ca:	7912      	ldrb	r2, [r2, #4]
 80057cc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80057ce:	4a36      	ldr	r2, [pc, #216]	@ (80058a8 <ESP_Upkeep+0x410>)
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <ESP_Upkeep+0x3b0>)
 80057d2:	0019      	movs	r1, r3
 80057d4:	2003      	movs	r0, #3
 80057d6:	f008 ff41 	bl	800e65c <CreateLine>
        DisableConnectedDevices();
 80057da:	f003 f8bf 	bl	800895c <DisableConnectedDevices>
        usblog = false;
 80057de:	4b33      	ldr	r3, [pc, #204]	@ (80058ac <ESP_Upkeep+0x414>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057e4:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <ESP_Upkeep+0x398>)
 80057e6:	2204      	movs	r2, #4
 80057e8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057ea:	4b24      	ldr	r3, [pc, #144]	@ (800587c <ESP_Upkeep+0x3e4>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80057f0:	4b12      	ldr	r3, [pc, #72]	@ (800583c <ESP_Upkeep+0x3a4>)
 80057f2:	2203      	movs	r2, #3
 80057f4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057f6:	4b21      	ldr	r3, [pc, #132]	@ (800587c <ESP_Upkeep+0x3e4>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	001a      	movs	r2, r3
 80057fc:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <ESP_Upkeep+0x3d4>)
 80057fe:	5c9a      	ldrb	r2, [r3, r2]
 8005800:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <ESP_Upkeep+0x3a0>)
 8005802:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005804:	4b0e      	ldr	r3, [pc, #56]	@ (8005840 <ESP_Upkeep+0x3a8>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
      }
    break;
 800580a:	e2be      	b.n	8005d8a <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 800580c:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <ESP_Upkeep+0x3a0>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	1dfc      	adds	r4, r7, #7
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff fb46 	bl	8004ea4 <AT_Send>
 8005818:	0003      	movs	r3, r0
 800581a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800581c:	1dfb      	adds	r3, r7, #7
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d100      	bne.n	8005826 <ESP_Upkeep+0x38e>
 8005824:	e2b3      	b.n	8005d8e <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005826:	4b02      	ldr	r3, [pc, #8]	@ (8005830 <ESP_Upkeep+0x398>)
 8005828:	2203      	movs	r2, #3
 800582a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800582c:	e2af      	b.n	8005d8e <ESP_Upkeep+0x8f6>
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	20000030 	.word	0x20000030
 8005834:	20000002 	.word	0x20000002
 8005838:	20000a0e 	.word	0x20000a0e
 800583c:	20000a0f 	.word	0x20000a0f
 8005840:	20000a0d 	.word	0x20000a0d
 8005844:	08023c6c 	.word	0x08023c6c
 8005848:	08023308 	.word	0x08023308
 800584c:	0802558c 	.word	0x0802558c
 8005850:	20000550 	.word	0x20000550
 8005854:	50000800 	.word	0x50000800
 8005858:	50001c00 	.word	0x50001c00
 800585c:	20000a08 	.word	0x20000a08
 8005860:	20000450 	.word	0x20000450
 8005864:	20000b54 	.word	0x20000b54
 8005868:	20000032 	.word	0x20000032
 800586c:	200009f8 	.word	0x200009f8
 8005870:	20000551 	.word	0x20000551
 8005874:	20000552 	.word	0x20000552
 8005878:	20000004 	.word	0x20000004
 800587c:	20000a02 	.word	0x20000a02
 8005880:	20000554 	.word	0x20000554
 8005884:	20000014 	.word	0x20000014
 8005888:	20000555 	.word	0x20000555
 800588c:	20000010 	.word	0x20000010
 8005890:	20000001 	.word	0x20000001
 8005894:	2000000c 	.word	0x2000000c
 8005898:	20000568 	.word	0x20000568
 800589c:	20000024 	.word	0x20000024
 80058a0:	20000553 	.word	0x20000553
 80058a4:	2000001c 	.word	0x2000001c
 80058a8:	08023c98 	.word	0x08023c98
 80058ac:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80058b0:	4bc9      	ldr	r3, [pc, #804]	@ (8005bd8 <ESP_Upkeep+0x740>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <ESP_Upkeep+0x430>
 80058b8:	4bc8      	ldr	r3, [pc, #800]	@ (8005bdc <ESP_Upkeep+0x744>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d003      	beq.n	80058c8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 80058c0:	4bc7      	ldr	r3, [pc, #796]	@ (8005be0 <ESP_Upkeep+0x748>)
 80058c2:	220b      	movs	r2, #11
 80058c4:	701a      	strb	r2, [r3, #0]
        break;
 80058c6:	e269      	b.n	8005d9c <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80058c8:	4bc6      	ldr	r3, [pc, #792]	@ (8005be4 <ESP_Upkeep+0x74c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f008 fe6f 	bl	800e5b0 <TimestampIsReached>
 80058d2:	1e03      	subs	r3, r0, #0
 80058d4:	d100      	bne.n	80058d8 <ESP_Upkeep+0x440>
 80058d6:	e25c      	b.n	8005d92 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058d8:	4bc3      	ldr	r3, [pc, #780]	@ (8005be8 <ESP_Upkeep+0x750>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	0018      	movs	r0, r3
 80058de:	f7ff f99f 	bl	8004c20 <DMA_ProcessBuffer>
 80058e2:	0003      	movs	r3, r0
 80058e4:	001a      	movs	r2, r3
 80058e6:	4bc1      	ldr	r3, [pc, #772]	@ (8005bec <ESP_Upkeep+0x754>)
 80058e8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058ea:	4bc0      	ldr	r3, [pc, #768]	@ (8005bec <ESP_Upkeep+0x754>)
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	4bbe      	ldr	r3, [pc, #760]	@ (8005be8 <ESP_Upkeep+0x750>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	1d7c      	adds	r4, r7, #5
 80058f4:	0019      	movs	r1, r3
 80058f6:	0010      	movs	r0, r2
 80058f8:	f7ff fa92 	bl	8004e20 <ATCompare>
 80058fc:	0003      	movs	r3, r0
 80058fe:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005900:	4bba      	ldr	r3, [pc, #744]	@ (8005bec <ESP_Upkeep+0x754>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d138      	bne.n	800597a <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005908:	4bb9      	ldr	r3, [pc, #740]	@ (8005bf0 <ESP_Upkeep+0x758>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b0f      	cmp	r3, #15
 800590e:	d108      	bne.n	8005922 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005910:	4bb7      	ldr	r3, [pc, #732]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005912:	220e      	movs	r2, #14
 8005914:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005916:	4bb4      	ldr	r3, [pc, #720]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005918:	2202      	movs	r2, #2
 800591a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800591c:	4bb5      	ldr	r3, [pc, #724]	@ (8005bf4 <ESP_Upkeep+0x75c>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005922:	4baf      	ldr	r3, [pc, #700]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005924:	2204      	movs	r2, #4
 8005926:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005928:	4bb3      	ldr	r3, [pc, #716]	@ (8005bf8 <ESP_Upkeep+0x760>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	3301      	adds	r3, #1
 800592e:	b2da      	uxtb	r2, r3
 8005930:	4bb1      	ldr	r3, [pc, #708]	@ (8005bf8 <ESP_Upkeep+0x760>)
 8005932:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005934:	4bb0      	ldr	r3, [pc, #704]	@ (8005bf8 <ESP_Upkeep+0x760>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d91e      	bls.n	800597a <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800593c:	f009 fad2 	bl	800eee4 <HAL_GetTick>
 8005940:	0003      	movs	r3, r0
 8005942:	4aae      	ldr	r2, [pc, #696]	@ (8005bfc <ESP_Upkeep+0x764>)
 8005944:	189a      	adds	r2, r3, r2
 8005946:	4ba7      	ldr	r3, [pc, #668]	@ (8005be4 <ESP_Upkeep+0x74c>)
 8005948:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800594a:	4bad      	ldr	r3, [pc, #692]	@ (8005c00 <ESP_Upkeep+0x768>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005950:	f7ff fa58 	bl	8004e04 <clearDMABuffer>
            stop = HAL_GetTick();
 8005954:	f009 fac6 	bl	800eee4 <HAL_GetTick>
 8005958:	0002      	movs	r2, r0
 800595a:	4baa      	ldr	r3, [pc, #680]	@ (8005c04 <ESP_Upkeep+0x76c>)
 800595c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800595e:	4ba9      	ldr	r3, [pc, #676]	@ (8005c04 <ESP_Upkeep+0x76c>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4ba9      	ldr	r3, [pc, #676]	@ (8005c08 <ESP_Upkeep+0x770>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	4aa8      	ldr	r2, [pc, #672]	@ (8005c0c <ESP_Upkeep+0x774>)
 800596a:	49a9      	ldr	r1, [pc, #676]	@ (8005c10 <ESP_Upkeep+0x778>)
 800596c:	2001      	movs	r0, #1
 800596e:	f008 fe75 	bl	800e65c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005972:	4b9b      	ldr	r3, [pc, #620]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005974:	220d      	movs	r2, #13
 8005976:	701a      	strb	r2, [r3, #0]
            break;
 8005978:	e210      	b.n	8005d9c <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800597a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bec <ESP_Upkeep+0x754>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d106      	bne.n	8005990 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005982:	f009 faaf 	bl	800eee4 <HAL_GetTick>
 8005986:	0003      	movs	r3, r0
 8005988:	330a      	adds	r3, #10
 800598a:	001a      	movs	r2, r3
 800598c:	4b95      	ldr	r3, [pc, #596]	@ (8005be4 <ESP_Upkeep+0x74c>)
 800598e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005990:	4b96      	ldr	r3, [pc, #600]	@ (8005bec <ESP_Upkeep+0x754>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b0a      	cmp	r3, #10
 8005996:	d106      	bne.n	80059a6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005998:	f009 faa4 	bl	800eee4 <HAL_GetTick>
 800599c:	0003      	movs	r3, r0
 800599e:	330a      	adds	r3, #10
 80059a0:	001a      	movs	r2, r3
 80059a2:	4b90      	ldr	r3, [pc, #576]	@ (8005be4 <ESP_Upkeep+0x74c>)
 80059a4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059a6:	4b91      	ldr	r3, [pc, #580]	@ (8005bec <ESP_Upkeep+0x754>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d14b      	bne.n	8005a46 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 80059ae:	4b99      	ldr	r3, [pc, #612]	@ (8005c14 <ESP_Upkeep+0x77c>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4b97      	ldr	r3, [pc, #604]	@ (8005c14 <ESP_Upkeep+0x77c>)
 80059b8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059ba:	4a97      	ldr	r2, [pc, #604]	@ (8005c18 <ESP_Upkeep+0x780>)
 80059bc:	4b94      	ldr	r3, [pc, #592]	@ (8005c10 <ESP_Upkeep+0x778>)
 80059be:	0019      	movs	r1, r3
 80059c0:	2001      	movs	r0, #1
 80059c2:	f008 fe4b 	bl	800e65c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059c6:	4b93      	ldr	r3, [pc, #588]	@ (8005c14 <ESP_Upkeep+0x77c>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d924      	bls.n	8005a18 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80059ce:	f009 fa89 	bl	800eee4 <HAL_GetTick>
 80059d2:	0003      	movs	r3, r0
 80059d4:	4a91      	ldr	r2, [pc, #580]	@ (8005c1c <ESP_Upkeep+0x784>)
 80059d6:	189a      	adds	r2, r3, r2
 80059d8:	4b82      	ldr	r3, [pc, #520]	@ (8005be4 <ESP_Upkeep+0x74c>)
 80059da:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059dc:	4b88      	ldr	r3, [pc, #544]	@ (8005c00 <ESP_Upkeep+0x768>)
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059e2:	f7ff fa0f 	bl	8004e04 <clearDMABuffer>
            stop = HAL_GetTick();
 80059e6:	f009 fa7d 	bl	800eee4 <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	4b85      	ldr	r3, [pc, #532]	@ (8005c04 <ESP_Upkeep+0x76c>)
 80059ee:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 80059f0:	4b84      	ldr	r3, [pc, #528]	@ (8005c04 <ESP_Upkeep+0x76c>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b84      	ldr	r3, [pc, #528]	@ (8005c08 <ESP_Upkeep+0x770>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	4a89      	ldr	r2, [pc, #548]	@ (8005c20 <ESP_Upkeep+0x788>)
 80059fc:	4984      	ldr	r1, [pc, #528]	@ (8005c10 <ESP_Upkeep+0x778>)
 80059fe:	2001      	movs	r0, #1
 8005a00:	f008 fe2c 	bl	800e65c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005a04:	4b76      	ldr	r3, [pc, #472]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005a06:	220d      	movs	r2, #13
 8005a08:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005a0a:	4b79      	ldr	r3, [pc, #484]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a0c:	2214      	movs	r2, #20
 8005a0e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a10:	4b75      	ldr	r3, [pc, #468]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
            break;
 8005a16:	e1c1      	b.n	8005d9c <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005a18:	4b75      	ldr	r3, [pc, #468]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d003      	beq.n	8005a28 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005a20:	4b6f      	ldr	r3, [pc, #444]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005a22:	2204      	movs	r2, #4
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e00e      	b.n	8005a46 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a28:	4b71      	ldr	r3, [pc, #452]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a2a:	220e      	movs	r2, #14
 8005a2c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a2e:	4b71      	ldr	r3, [pc, #452]	@ (8005bf4 <ESP_Upkeep+0x75c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf4 <ESP_Upkeep+0x75c>)
 8005a38:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a3a:	4b6b      	ldr	r3, [pc, #428]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a40:	4b67      	ldr	r3, [pc, #412]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005a42:	2204      	movs	r2, #4
 8005a44:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a46:	1d7b      	adds	r3, r7, #5
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d100      	bne.n	8005a50 <ESP_Upkeep+0x5b8>
 8005a4e:	e1a0      	b.n	8005d92 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005a50:	4b63      	ldr	r3, [pc, #396]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005a52:	2205      	movs	r2, #5
 8005a54:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a56:	e19c      	b.n	8005d92 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005a58:	4b66      	ldr	r3, [pc, #408]	@ (8005bf4 <ESP_Upkeep+0x75c>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	4b64      	ldr	r3, [pc, #400]	@ (8005bf4 <ESP_Upkeep+0x75c>)
 8005a62:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a64:	4b63      	ldr	r3, [pc, #396]	@ (8005bf4 <ESP_Upkeep+0x75c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	001a      	movs	r2, r3
 8005a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c24 <ESP_Upkeep+0x78c>)
 8005a6c:	5c9a      	ldrb	r2, [r3, r2]
 8005a6e:	4b60      	ldr	r3, [pc, #384]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a70:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a72:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d102      	bne.n	8005a80 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a80:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b0e      	cmp	r3, #14
 8005a86:	d102      	bne.n	8005a8e <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a88:	4b57      	ldr	r3, [pc, #348]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a8e:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b0e      	cmp	r3, #14
 8005a94:	d006      	beq.n	8005aa4 <ESP_Upkeep+0x60c>
 8005a96:	4b56      	ldr	r3, [pc, #344]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d002      	beq.n	8005aa4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a9e:	4b52      	ldr	r3, [pc, #328]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005aa4:	4b52      	ldr	r3, [pc, #328]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b11      	cmp	r3, #17
 8005aaa:	d102      	bne.n	8005ab2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005aac:	4b4e      	ldr	r3, [pc, #312]	@ (8005be8 <ESP_Upkeep+0x750>)
 8005aae:	2205      	movs	r2, #5
 8005ab0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf0 <ESP_Upkeep+0x758>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b14      	cmp	r3, #20
 8005abe:	d000      	beq.n	8005ac2 <ESP_Upkeep+0x62a>
 8005ac0:	e169      	b.n	8005d96 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ac2:	4b46      	ldr	r3, [pc, #280]	@ (8005bdc <ESP_Upkeep+0x744>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d124      	bne.n	8005b14 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005aca:	f009 fa0b 	bl	800eee4 <HAL_GetTick>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8005bfc <ESP_Upkeep+0x764>)
 8005ad2:	189a      	adds	r2, r3, r2
 8005ad4:	4b43      	ldr	r3, [pc, #268]	@ (8005be4 <ESP_Upkeep+0x74c>)
 8005ad6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ad8:	f7ff f994 	bl	8004e04 <clearDMABuffer>
          stop = HAL_GetTick();
 8005adc:	f009 fa02 	bl	800eee4 <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	4b48      	ldr	r3, [pc, #288]	@ (8005c04 <ESP_Upkeep+0x76c>)
 8005ae4:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005ae6:	4b47      	ldr	r3, [pc, #284]	@ (8005c04 <ESP_Upkeep+0x76c>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b47      	ldr	r3, [pc, #284]	@ (8005c08 <ESP_Upkeep+0x770>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	4a4d      	ldr	r2, [pc, #308]	@ (8005c28 <ESP_Upkeep+0x790>)
 8005af2:	494e      	ldr	r1, [pc, #312]	@ (8005c2c <ESP_Upkeep+0x794>)
 8005af4:	2002      	movs	r0, #2
 8005af6:	f008 fdb1 	bl	800e65c <CreateLine>
          ResetdBAmax();
 8005afa:	f002 ff4d 	bl	8008998 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005afe:	f7fd ffad 	bl	8003a5c <resetMaxMeasurementValues>
          showTime();
 8005b02:	f000 fcdf 	bl	80064c4 <showTime>
          ESPTransmitDone = true;
 8005b06:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <ESP_Upkeep+0x768>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b0c:	4b34      	ldr	r3, [pc, #208]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005b0e:	220d      	movs	r2, #13
 8005b10:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b12:	e140      	b.n	8005d96 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005b14:	4b31      	ldr	r3, [pc, #196]	@ (8005bdc <ESP_Upkeep+0x744>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d12c      	bne.n	8005b76 <ESP_Upkeep+0x6de>
            setTime = false;
 8005b1c:	4b44      	ldr	r3, [pc, #272]	@ (8005c30 <ESP_Upkeep+0x798>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b22:	f009 f9df 	bl	800eee4 <HAL_GetTick>
 8005b26:	0003      	movs	r3, r0
 8005b28:	4a42      	ldr	r2, [pc, #264]	@ (8005c34 <ESP_Upkeep+0x79c>)
 8005b2a:	189a      	adds	r2, r3, r2
 8005b2c:	4b42      	ldr	r3, [pc, #264]	@ (8005c38 <ESP_Upkeep+0x7a0>)
 8005b2e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b30:	4b41      	ldr	r3, [pc, #260]	@ (8005c38 <ESP_Upkeep+0x7a0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a41      	ldr	r2, [pc, #260]	@ (8005c3c <ESP_Upkeep+0x7a4>)
 8005b36:	493d      	ldr	r1, [pc, #244]	@ (8005c2c <ESP_Upkeep+0x794>)
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f008 fd8f 	bl	800e65c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b3e:	4b40      	ldr	r3, [pc, #256]	@ (8005c40 <ESP_Upkeep+0x7a8>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b28      	ldr	r3, [pc, #160]	@ (8005be4 <ESP_Upkeep+0x74c>)
 8005b44:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b46:	f7ff f95d 	bl	8004e04 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b4a:	f009 f9cb 	bl	800eee4 <HAL_GetTick>
 8005b4e:	0002      	movs	r2, r0
 8005b50:	4b2c      	ldr	r3, [pc, #176]	@ (8005c04 <ESP_Upkeep+0x76c>)
 8005b52:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b54:	4b2b      	ldr	r3, [pc, #172]	@ (8005c04 <ESP_Upkeep+0x76c>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b2b      	ldr	r3, [pc, #172]	@ (8005c08 <ESP_Upkeep+0x770>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	4a39      	ldr	r2, [pc, #228]	@ (8005c44 <ESP_Upkeep+0x7ac>)
 8005b60:	4932      	ldr	r1, [pc, #200]	@ (8005c2c <ESP_Upkeep+0x794>)
 8005b62:	2002      	movs	r0, #2
 8005b64:	f008 fd7a 	bl	800e65c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005b6a:	220d      	movs	r2, #13
 8005b6c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bdc <ESP_Upkeep+0x744>)
 8005b70:	2202      	movs	r2, #2
 8005b72:	701a      	strb	r2, [r3, #0]
    break;
 8005b74:	e10f      	b.n	8005d96 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005b76:	4b1a      	ldr	r3, [pc, #104]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005b78:	2209      	movs	r2, #9
 8005b7a:	701a      	strb	r2, [r3, #0]
    break;
 8005b7c:	e10b      	b.n	8005d96 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005b7e:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <ESP_Upkeep+0x7b0>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b84:	4b31      	ldr	r3, [pc, #196]	@ (8005c4c <ESP_Upkeep+0x7b4>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	2101      	movs	r1, #1
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f00a fc3b 	bl	8010406 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b90:	2001      	movs	r0, #1
 8005b92:	f009 f9b1 	bl	800eef8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005b96:	2380      	movs	r3, #128	@ 0x80
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	482d      	ldr	r0, [pc, #180]	@ (8005c50 <ESP_Upkeep+0x7b8>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	f00a fc31 	bl	8010406 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f009 f9a7 	bl	800eef8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005baa:	4b28      	ldr	r3, [pc, #160]	@ (8005c4c <ESP_Upkeep+0x7b4>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	2102      	movs	r1, #2
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f00a fc28 	bl	8010406 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <ESP_Upkeep+0x748>)
 8005bb8:	2209      	movs	r2, #9
 8005bba:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005bbc:	f002 fea4 	bl	8008908 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f009 f999 	bl	800eef8 <HAL_Delay>
      ResetESPIndicator();
 8005bc6:	f007 fc4f 	bl	800d468 <ResetESPIndicator>
      errorcntr = 0;
 8005bca:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <ESP_Upkeep+0x760>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005bd0:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <ESP_Upkeep+0x77c>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
      break;
 8005bd6:	e0e1      	b.n	8005d9c <ESP_Upkeep+0x904>
 8005bd8:	20000553 	.word	0x20000553
 8005bdc:	20000a0f 	.word	0x20000a0f
 8005be0:	20000030 	.word	0x20000030
 8005be4:	20000a08 	.word	0x20000a08
 8005be8:	20000a0d 	.word	0x20000a0d
 8005bec:	20000032 	.word	0x20000032
 8005bf0:	20000a0e 	.word	0x20000a0e
 8005bf4:	20000a02 	.word	0x20000a02
 8005bf8:	20000a03 	.word	0x20000a03
 8005bfc:	0003a980 	.word	0x0003a980
 8005c00:	20000558 	.word	0x20000558
 8005c04:	2000056c 	.word	0x2000056c
 8005c08:	20000568 	.word	0x20000568
 8005c0c:	08023cc8 	.word	0x08023cc8
 8005c10:	0802332c 	.word	0x0802332c
 8005c14:	20000a04 	.word	0x20000a04
 8005c18:	08023cfc 	.word	0x08023cfc
 8005c1c:	0000c350 	.word	0x0000c350
 8005c20:	08023d38 	.word	0x08023d38
 8005c24:	200009f8 	.word	0x200009f8
 8005c28:	08023d68 	.word	0x08023d68
 8005c2c:	08023d80 	.word	0x08023d80
 8005c30:	20000001 	.word	0x20000001
 8005c34:	047e7c4f 	.word	0x047e7c4f
 8005c38:	20000028 	.word	0x20000028
 8005c3c:	08023d84 	.word	0x08023d84
 8005c40:	2000002c 	.word	0x2000002c
 8005c44:	08023dc8 	.word	0x08023dc8
 8005c48:	20000550 	.word	0x20000550
 8005c4c:	50001c00 	.word	0x50001c00
 8005c50:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c54:	4b54      	ldr	r3, [pc, #336]	@ (8005da8 <ESP_Upkeep+0x910>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f008 fca9 	bl	800e5b0 <TimestampIsReached>
 8005c5e:	1e03      	subs	r3, r0, #0
 8005c60:	d103      	bne.n	8005c6a <ESP_Upkeep+0x7d2>
 8005c62:	4b52      	ldr	r3, [pc, #328]	@ (8005dac <ESP_Upkeep+0x914>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d043      	beq.n	8005cf2 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005c6a:	4b51      	ldr	r3, [pc, #324]	@ (8005db0 <ESP_Upkeep+0x918>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c70:	4b50      	ldr	r3, [pc, #320]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005c78:	4b4f      	ldr	r3, [pc, #316]	@ (8005db8 <ESP_Upkeep+0x920>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005c80:	220b      	movs	r2, #11
 8005c82:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c84:	4b4b      	ldr	r3, [pc, #300]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d108      	bne.n	8005c9e <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005dc0 <ESP_Upkeep+0x928>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005c92:	4b4c      	ldr	r3, [pc, #304]	@ (8005dc4 <ESP_Upkeep+0x92c>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c98:	4b48      	ldr	r3, [pc, #288]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005c9a:	220b      	movs	r2, #11
 8005c9c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005c9e:	4b45      	ldr	r3, [pc, #276]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d102      	bne.n	8005cac <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005ca6:	4b45      	ldr	r3, [pc, #276]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cac:	4b41      	ldr	r3, [pc, #260]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d108      	bne.n	8005cc6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005cb4:	4b41      	ldr	r3, [pc, #260]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005cb6:	220e      	movs	r2, #14
 8005cb8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005cba:	4a43      	ldr	r2, [pc, #268]	@ (8005dc8 <ESP_Upkeep+0x930>)
 8005cbc:	4b43      	ldr	r3, [pc, #268]	@ (8005dcc <ESP_Upkeep+0x934>)
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	2002      	movs	r0, #2
 8005cc2:	f008 fccb 	bl	800e65c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d105      	bne.n	8005cda <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005cce:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005cd0:	220b      	movs	r2, #11
 8005cd2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd0 <ESP_Upkeep+0x938>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005cda:	4b34      	ldr	r3, [pc, #208]	@ (8005dac <ESP_Upkeep+0x914>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d020      	beq.n	8005d24 <ESP_Upkeep+0x88c>
 8005ce2:	4b34      	ldr	r3, [pc, #208]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d01c      	beq.n	8005d24 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005cec:	2202      	movs	r2, #2
 8005cee:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005cf0:	e018      	b.n	8005d24 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005cf2:	4b38      	ldr	r3, [pc, #224]	@ (8005dd4 <ESP_Upkeep+0x93c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f008 fc5a 	bl	800e5b0 <TimestampIsReached>
 8005cfc:	1e03      	subs	r3, r0, #0
 8005cfe:	d04c      	beq.n	8005d9a <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005d00:	4b2c      	ldr	r3, [pc, #176]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d148      	bne.n	8005d9a <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005d08:	4b2a      	ldr	r3, [pc, #168]	@ (8005db4 <ESP_Upkeep+0x91c>)
 8005d0a:	2205      	movs	r2, #5
 8005d0c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005d10:	2202      	movs	r2, #2
 8005d12:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005d14:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <ESP_Upkeep+0x910>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <ESP_Upkeep+0x940>)
 8005d1a:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ddc <ESP_Upkeep+0x944>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d22:	e03a      	b.n	8005d9a <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005d24:	46c0      	nop			@ (mov r8, r8)
      break;
 8005d26:	e038      	b.n	8005d9a <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d28:	4b2d      	ldr	r3, [pc, #180]	@ (8005de0 <ESP_Upkeep+0x948>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4053      	eors	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005d36:	4a24      	ldr	r2, [pc, #144]	@ (8005dc8 <ESP_Upkeep+0x930>)
 8005d38:	4b24      	ldr	r3, [pc, #144]	@ (8005dcc <ESP_Upkeep+0x934>)
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	2002      	movs	r0, #2
 8005d3e:	f008 fc8d 	bl	800e65c <CreateLine>
        msgdone = true;
 8005d42:	4b27      	ldr	r3, [pc, #156]	@ (8005de0 <ESP_Upkeep+0x948>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d48:	f017 f90c 	bl	801cf64 <GetUsbRxPointer>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f000 f8c0 	bl	8005ed4 <Process_PC_Config>
      break;
 8005d54:	e022      	b.n	8005d9c <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d56:	4a23      	ldr	r2, [pc, #140]	@ (8005de4 <ESP_Upkeep+0x94c>)
 8005d58:	4b23      	ldr	r3, [pc, #140]	@ (8005de8 <ESP_Upkeep+0x950>)
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f008 fc7d 	bl	800e65c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d62:	4b16      	ldr	r3, [pc, #88]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005d64:	2202      	movs	r2, #2
 8005d66:	701a      	strb	r2, [r3, #0]
      break;
 8005d68:	e018      	b.n	8005d9c <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d6a:	4a20      	ldr	r2, [pc, #128]	@ (8005dec <ESP_Upkeep+0x954>)
 8005d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <ESP_Upkeep+0x950>)
 8005d6e:	0019      	movs	r1, r3
 8005d70:	2001      	movs	r0, #1
 8005d72:	f008 fc73 	bl	800e65c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d76:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	701a      	strb	r2, [r3, #0]
      break;
 8005d7c:	e00e      	b.n	8005d9c <ESP_Upkeep+0x904>
      break;
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	e00c      	b.n	8005d9c <ESP_Upkeep+0x904>
      break;
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	e00a      	b.n	8005d9c <ESP_Upkeep+0x904>
        break;
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	e008      	b.n	8005d9c <ESP_Upkeep+0x904>
    break;
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	e006      	b.n	8005d9c <ESP_Upkeep+0x904>
    break;
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	e004      	b.n	8005d9c <ESP_Upkeep+0x904>
      break;
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	e002      	b.n	8005d9c <ESP_Upkeep+0x904>
    break;
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	e000      	b.n	8005d9c <ESP_Upkeep+0x904>
      break;
 8005d9a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005d9c:	4b07      	ldr	r3, [pc, #28]	@ (8005dbc <ESP_Upkeep+0x924>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bdb0      	pop	{r4, r5, r7, pc}
 8005da8:	20000a08 	.word	0x20000a08
 8005dac:	20000553 	.word	0x20000553
 8005db0:	20000558 	.word	0x20000558
 8005db4:	20000a0f 	.word	0x20000a0f
 8005db8:	20000551 	.word	0x20000551
 8005dbc:	20000030 	.word	0x20000030
 8005dc0:	20000554 	.word	0x20000554
 8005dc4:	20000556 	.word	0x20000556
 8005dc8:	08023de8 	.word	0x08023de8
 8005dcc:	08023d80 	.word	0x08023d80
 8005dd0:	20000555 	.word	0x20000555
 8005dd4:	20000028 	.word	0x20000028
 8005dd8:	2000002c 	.word	0x2000002c
 8005ddc:	20000001 	.word	0x20000001
 8005de0:	20000557 	.word	0x20000557
 8005de4:	08023e00 	.word	0x08023e00
 8005de8:	0802332c 	.word	0x0802332c
 8005dec:	08023e14 	.word	0x08023e14

08005df0 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005df8:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <I2CSensors_Init+0x30>)
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005dfe:	4a09      	ldr	r2, [pc, #36]	@ (8005e24 <I2CSensors_Init+0x34>)
 8005e00:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <I2CSensors_Init+0x38>)
 8005e02:	0011      	movs	r1, r2
 8005e04:	0018      	movs	r0, r3
 8005e06:	f008 fd8d 	bl	800e924 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005e0a:	4a06      	ldr	r2, [pc, #24]	@ (8005e24 <I2CSensors_Init+0x34>)
 8005e0c:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <I2CSensors_Init+0x38>)
 8005e0e:	0011      	movs	r1, r2
 8005e10:	0018      	movs	r0, r3
 8005e12:	f005 fd17 	bl	800b844 <SGP_Init>
}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b002      	add	sp, #8
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	20000b58 	.word	0x20000b58
 8005e24:	08005e81 	.word	0x08005e81
 8005e28:	08005e2d 	.word	0x08005e2d

08005e2c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e2c:	b5b0      	push	{r4, r5, r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6039      	str	r1, [r7, #0]
 8005e34:	0011      	movs	r1, r2
 8005e36:	1dfb      	adds	r3, r7, #7
 8005e38:	1c02      	adds	r2, r0, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	1dbb      	adds	r3, r7, #6
 8005e3e:	1c0a      	adds	r2, r1, #0
 8005e40:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e42:	4b0e      	ldr	r3, [pc, #56]	@ (8005e7c <ReadI2C+0x50>)
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	1dfb      	adds	r3, r7, #7
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	18db      	adds	r3, r3, r3
 8005e4e:	b299      	uxth	r1, r3
 8005e50:	1dbb      	adds	r3, r7, #6
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	250f      	movs	r5, #15
 8005e58:	197c      	adds	r4, r7, r5
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	f00a feb8 	bl	8010bd0 <HAL_I2C_Master_Receive_DMA>
 8005e60:	0003      	movs	r3, r0
 8005e62:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e64:	197b      	adds	r3, r7, r5
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <ReadI2C+0x44>
        return false;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <ReadI2C+0x46>
    }
    return true;
 8005e70:	2301      	movs	r3, #1
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7a:	46c0      	nop			@ (mov r8, r8)
 8005e7c:	20000b58 	.word	0x20000b58

08005e80 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6039      	str	r1, [r7, #0]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	1dfb      	adds	r3, r7, #7
 8005e8c:	1c02      	adds	r2, r0, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	1dbb      	adds	r3, r7, #6
 8005e92:	1c0a      	adds	r2, r1, #0
 8005e94:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <WriteI2C+0x50>)
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	1dfb      	adds	r3, r7, #7
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	18db      	adds	r3, r3, r3
 8005ea2:	b299      	uxth	r1, r3
 8005ea4:	1dbb      	adds	r3, r7, #6
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	250f      	movs	r5, #15
 8005eac:	197c      	adds	r4, r7, r5
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	f00a fd88 	bl	80109c4 <HAL_I2C_Master_Transmit_DMA>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005eb8:	197b      	adds	r3, r7, r5
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <WriteI2C+0x44>
        return false;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e000      	b.n	8005ec6 <WriteI2C+0x46>
    }
    return true;
 8005ec4:	2301      	movs	r3, #1
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ece:	46c0      	nop			@ (mov r8, r8)
 8005ed0:	20000b58 	.word	0x20000b58

08005ed4 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b0c3      	sub	sp, #268	@ 0x10c
 8005ed8:	af3e      	add	r7, sp, #248	@ 0xf8
 8005eda:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005edc:	f017 f862 	bl	801cfa4 <GetUsbRxDataSize>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b05      	cmp	r3, #5
 8005ee8:	d971      	bls.n	8005fce <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2123      	movs	r1, #35	@ 0x23
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f01a fa58 	bl	80203a4 <strchr>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d065      	beq.n	8005fca <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	785a      	ldrb	r2, [r3, #1]
 8005f02:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f04:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	789a      	ldrb	r2, [r3, #2]
 8005f0a:	4b32      	ldr	r3, [pc, #200]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f0c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005f0e:	4b31      	ldr	r3, [pc, #196]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	3305      	adds	r3, #5
 8005f14:	001a      	movs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d351      	bcc.n	8005fc0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	1cd9      	adds	r1, r3, #3
 8005f20:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	001a      	movs	r2, r3
 8005f26:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd8 <Process_PC_Config+0x104>)
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f01a fb0f 	bl	802054c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f2e:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	3303      	adds	r3, #3
 8005f34:	001a      	movs	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	189b      	adds	r3, r3, r2
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	b21a      	sxth	r2, r3
 8005f40:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	3304      	adds	r3, #4
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	18cb      	adds	r3, r1, r3
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b21b      	sxth	r3, r3
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	b299      	uxth	r1, r3
 8005f54:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f56:	2381      	movs	r3, #129	@ 0x81
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f5e:	2381      	movs	r3, #129	@ 0x81
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	5ad4      	ldrh	r4, [r2, r3]
 8005f64:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	3303      	adds	r3, #3
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0011      	movs	r1, r2
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f975 	bl	8006260 <CRC16_ARC>
 8005f76:	0003      	movs	r3, r0
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	d007      	beq.n	8005f8c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f7c:	4b15      	ldr	r3, [pc, #84]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f7e:	785a      	ldrb	r2, [r3, #1]
 8005f80:	4b15      	ldr	r3, [pc, #84]	@ (8005fd8 <Process_PC_Config+0x104>)
 8005f82:	0019      	movs	r1, r3
 8005f84:	2001      	movs	r0, #1
 8005f86:	f000 f919 	bl	80061bc <Create_Message>
 8005f8a:	e016      	b.n	8005fba <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f8c:	4c11      	ldr	r4, [pc, #68]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005f8e:	466b      	mov	r3, sp
 8005f90:	0018      	movs	r0, r3
 8005f92:	0023      	movs	r3, r4
 8005f94:	3310      	adds	r3, #16
 8005f96:	22f4      	movs	r2, #244	@ 0xf4
 8005f98:	0019      	movs	r1, r3
 8005f9a:	f01a fad7 	bl	802054c <memcpy>
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	68a2      	ldr	r2, [r4, #8]
 8005fa4:	68e3      	ldr	r3, [r4, #12]
 8005fa6:	f000 f819 	bl	8005fdc <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005faa:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005fac:	7818      	ldrb	r0, [r3, #0]
 8005fae:	4b09      	ldr	r3, [pc, #36]	@ (8005fd4 <Process_PC_Config+0x100>)
 8005fb0:	785a      	ldrb	r2, [r3, #1]
 8005fb2:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <Process_PC_Config+0x104>)
 8005fb4:	0019      	movs	r1, r3
 8005fb6:	f000 f901 	bl	80061bc <Create_Message>
                }
                ResetUsbRxDataSize();
 8005fba:	f016 ffdb 	bl	801cf74 <ResetUsbRxDataSize>
                return;
 8005fbe:	e006      	b.n	8005fce <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f016 fff8 	bl	801cfb8 <GetUsbRxNextChunk>
 8005fc8:	e001      	b.n	8005fce <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005fca:	f016 ffd3 	bl	801cf74 <ResetUsbRxDataSize>
        }
    }
}
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b005      	add	sp, #20
 8005fd2:	bd90      	pop	{r4, r7, pc}
 8005fd4:	20000b5c 	.word	0x20000b5c
 8005fd8:	20000b5e 	.word	0x20000b5e

08005fdc <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fdc:	b084      	sub	sp, #16
 8005fde:	b5b0      	push	{r4, r5, r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	2518      	movs	r5, #24
 8005fe6:	197c      	adds	r4, r7, r5
 8005fe8:	6020      	str	r0, [r4, #0]
 8005fea:	6061      	str	r1, [r4, #4]
 8005fec:	60a2      	str	r2, [r4, #8]
 8005fee:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005ff0:	197b      	adds	r3, r7, r5
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ff6:	d100      	bne.n	8005ffa <ProcessCmd+0x1e>
 8005ff8:	e09c      	b.n	8006134 <ProcessCmd+0x158>
 8005ffa:	dd00      	ble.n	8005ffe <ProcessCmd+0x22>
 8005ffc:	e0bc      	b.n	8006178 <ProcessCmd+0x19c>
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	dc0a      	bgt.n	8006018 <ProcessCmd+0x3c>
 8006002:	2b00      	cmp	r3, #0
 8006004:	da00      	bge.n	8006008 <ProcessCmd+0x2c>
 8006006:	e0b7      	b.n	8006178 <ProcessCmd+0x19c>
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d900      	bls.n	800600e <ProcessCmd+0x32>
 800600c:	e0b4      	b.n	8006178 <ProcessCmd+0x19c>
 800600e:	009a      	lsls	r2, r3, #2
 8006010:	4b5d      	ldr	r3, [pc, #372]	@ (8006188 <ProcessCmd+0x1ac>)
 8006012:	18d3      	adds	r3, r2, r3
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	469f      	mov	pc, r3
 8006018:	2bfd      	cmp	r3, #253	@ 0xfd
 800601a:	d100      	bne.n	800601e <ProcessCmd+0x42>
 800601c:	e084      	b.n	8006128 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800601e:	e0ab      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006020:	2118      	movs	r1, #24
 8006022:	187b      	adds	r3, r7, r1
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	001a      	movs	r2, r3
 8006028:	187b      	adds	r3, r7, r1
 800602a:	1c99      	adds	r1, r3, #2
 800602c:	4857      	ldr	r0, [pc, #348]	@ (800618c <ProcessCmd+0x1b0>)
 800602e:	230c      	movs	r3, #12
 8006030:	f7fd fb46 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006034:	e0a0      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006036:	2118      	movs	r1, #24
 8006038:	187b      	adds	r3, r7, r1
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	001a      	movs	r2, r3
 800603e:	187b      	adds	r3, r7, r1
 8006040:	1c99      	adds	r1, r3, #2
 8006042:	4853      	ldr	r0, [pc, #332]	@ (8006190 <ProcessCmd+0x1b4>)
 8006044:	230c      	movs	r3, #12
 8006046:	f7fd fb3b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800604a:	e095      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800604c:	2118      	movs	r1, #24
 800604e:	187b      	adds	r3, r7, r1
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	001a      	movs	r2, r3
 8006054:	187b      	adds	r3, r7, r1
 8006056:	1c99      	adds	r1, r3, #2
 8006058:	484e      	ldr	r0, [pc, #312]	@ (8006194 <ProcessCmd+0x1b8>)
 800605a:	230c      	movs	r3, #12
 800605c:	f7fd fb30 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006060:	e08a      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006062:	2118      	movs	r1, #24
 8006064:	187b      	adds	r3, r7, r1
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	001a      	movs	r2, r3
 800606a:	187b      	adds	r3, r7, r1
 800606c:	1c99      	adds	r1, r3, #2
 800606e:	484a      	ldr	r0, [pc, #296]	@ (8006198 <ProcessCmd+0x1bc>)
 8006070:	230c      	movs	r3, #12
 8006072:	f7fd fb25 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006076:	e07f      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006078:	2118      	movs	r1, #24
 800607a:	187b      	adds	r3, r7, r1
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	001a      	movs	r2, r3
 8006080:	187b      	adds	r3, r7, r1
 8006082:	1c99      	adds	r1, r3, #2
 8006084:	4845      	ldr	r0, [pc, #276]	@ (800619c <ProcessCmd+0x1c0>)
 8006086:	230c      	movs	r3, #12
 8006088:	f7fd fb1a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800608c:	e074      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800608e:	2118      	movs	r1, #24
 8006090:	187b      	adds	r3, r7, r1
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	001a      	movs	r2, r3
 8006096:	187b      	adds	r3, r7, r1
 8006098:	1c99      	adds	r1, r3, #2
 800609a:	4841      	ldr	r0, [pc, #260]	@ (80061a0 <ProcessCmd+0x1c4>)
 800609c:	230c      	movs	r3, #12
 800609e:	f7fd fb0f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060a2:	e069      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060a4:	2118      	movs	r1, #24
 80060a6:	187b      	adds	r3, r7, r1
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	001a      	movs	r2, r3
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	1c99      	adds	r1, r3, #2
 80060b0:	483c      	ldr	r0, [pc, #240]	@ (80061a4 <ProcessCmd+0x1c8>)
 80060b2:	230c      	movs	r3, #12
 80060b4:	f7fd fb04 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b8:	e05e      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80060ba:	2118      	movs	r1, #24
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	001a      	movs	r2, r3
 80060c2:	187b      	adds	r3, r7, r1
 80060c4:	1c99      	adds	r1, r3, #2
 80060c6:	4838      	ldr	r0, [pc, #224]	@ (80061a8 <ProcessCmd+0x1cc>)
 80060c8:	231e      	movs	r3, #30
 80060ca:	f7fd faf9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060ce:	e053      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060d0:	2118      	movs	r1, #24
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	001a      	movs	r2, r3
 80060d8:	187b      	adds	r3, r7, r1
 80060da:	1c99      	adds	r1, r3, #2
 80060dc:	4833      	ldr	r0, [pc, #204]	@ (80061ac <ProcessCmd+0x1d0>)
 80060de:	230c      	movs	r3, #12
 80060e0:	f7fd faee 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060e4:	e048      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060e6:	2118      	movs	r1, #24
 80060e8:	187b      	adds	r3, r7, r1
 80060ea:	785b      	ldrb	r3, [r3, #1]
 80060ec:	001a      	movs	r2, r3
 80060ee:	187b      	adds	r3, r7, r1
 80060f0:	1c99      	adds	r1, r3, #2
 80060f2:	482f      	ldr	r0, [pc, #188]	@ (80061b0 <ProcessCmd+0x1d4>)
 80060f4:	230c      	movs	r3, #12
 80060f6:	f7fd fae3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060fa:	e03d      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060fc:	2118      	movs	r1, #24
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	001a      	movs	r2, r3
 8006104:	187b      	adds	r3, r7, r1
 8006106:	1c99      	adds	r1, r3, #2
 8006108:	482a      	ldr	r0, [pc, #168]	@ (80061b4 <ProcessCmd+0x1d8>)
 800610a:	230c      	movs	r3, #12
 800610c:	f7fd fad8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006110:	e032      	b.n	8006178 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006112:	2118      	movs	r1, #24
 8006114:	187b      	adds	r3, r7, r1
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	001a      	movs	r2, r3
 800611a:	187b      	adds	r3, r7, r1
 800611c:	1c99      	adds	r1, r3, #2
 800611e:	4826      	ldr	r0, [pc, #152]	@ (80061b8 <ProcessCmd+0x1dc>)
 8006120:	230c      	movs	r3, #12
 8006122:	f7fd facd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006126:	e027      	b.n	8006178 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006128:	4b18      	ldr	r3, [pc, #96]	@ (800618c <ProcessCmd+0x1b0>)
 800612a:	21ba      	movs	r1, #186	@ 0xba
 800612c:	0018      	movs	r0, r3
 800612e:	f7fd fb0c 	bl	800374a <ClearEEprom>
        break;
 8006132:	e021      	b.n	8006178 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006134:	2118      	movs	r1, #24
 8006136:	187b      	adds	r3, r7, r1
 8006138:	789b      	ldrb	r3, [r3, #2]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	b21a      	sxth	r2, r3
 800613e:	187b      	adds	r3, r7, r1
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	b21b      	sxth	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b21a      	sxth	r2, r3
 8006148:	1dbb      	adds	r3, r7, #6
 800614a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800614c:	1dbb      	adds	r3, r7, #6
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	23c0      	movs	r3, #192	@ 0xc0
 8006152:	015b      	lsls	r3, r3, #5
 8006154:	429a      	cmp	r2, r3
 8006156:	d207      	bcs.n	8006168 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006158:	1dbb      	adds	r3, r7, #6
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	4a0b      	ldr	r2, [pc, #44]	@ (800618c <ProcessCmd+0x1b0>)
 800615e:	0019      	movs	r1, r3
 8006160:	0010      	movs	r0, r2
 8006162:	f7fd faf2 	bl	800374a <ClearEEprom>
            break;
 8006166:	e006      	b.n	8006176 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006168:	23c0      	movs	r3, #192	@ 0xc0
 800616a:	015b      	lsls	r3, r3, #5
 800616c:	4a07      	ldr	r2, [pc, #28]	@ (800618c <ProcessCmd+0x1b0>)
 800616e:	0019      	movs	r1, r3
 8006170:	0010      	movs	r0, r2
 8006172:	f7fd faea 	bl	800374a <ClearEEprom>
            break;
 8006176:	46c0      	nop			@ (mov r8, r8)
}
 8006178:	46c0      	nop			@ (mov r8, r8)
 800617a:	46bd      	mov	sp, r7
 800617c:	b002      	add	sp, #8
 800617e:	bcb0      	pop	{r4, r5, r7}
 8006180:	bc08      	pop	{r3}
 8006182:	b004      	add	sp, #16
 8006184:	4718      	bx	r3
 8006186:	46c0      	nop			@ (mov r8, r8)
 8006188:	080255cc 	.word	0x080255cc
 800618c:	08080000 	.word	0x08080000
 8006190:	0808000c 	.word	0x0808000c
 8006194:	08080018 	.word	0x08080018
 8006198:	08080024 	.word	0x08080024
 800619c:	08080030 	.word	0x08080030
 80061a0:	0808003c 	.word	0x0808003c
 80061a4:	08080048 	.word	0x08080048
 80061a8:	08080090 	.word	0x08080090
 80061ac:	08080078 	.word	0x08080078
 80061b0:	0808006c 	.word	0x0808006c
 80061b4:	08080060 	.word	0x08080060
 80061b8:	08080054 	.word	0x08080054

080061bc <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6039      	str	r1, [r7, #0]
 80061c4:	0011      	movs	r1, r2
 80061c6:	1dfb      	adds	r3, r7, #7
 80061c8:	1c02      	adds	r2, r0, #0
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	1dbb      	adds	r3, r7, #6
 80061ce:	1c0a      	adds	r2, r1, #0
 80061d0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061d2:	2223      	movs	r2, #35	@ 0x23
 80061d4:	4b20      	ldr	r3, [pc, #128]	@ (8006258 <Create_Message+0x9c>)
 80061d6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006258 <Create_Message+0x9c>)
 80061da:	1dfa      	adds	r2, r7, #7
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <Create_Message+0x9c>)
 80061e2:	1dba      	adds	r2, r7, #6
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061e8:	1dbb      	adds	r3, r7, #6
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	4b1b      	ldr	r3, [pc, #108]	@ (800625c <Create_Message+0xa0>)
 80061f0:	0018      	movs	r0, r3
 80061f2:	f01a f9ab 	bl	802054c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80061f6:	1dbb      	adds	r3, r7, #6
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	250e      	movs	r5, #14
 80061fe:	197b      	adds	r3, r7, r5
 8006200:	3203      	adds	r2, #3
 8006202:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006204:	260c      	movs	r6, #12
 8006206:	19bc      	adds	r4, r7, r6
 8006208:	197b      	adds	r3, r7, r5
 800620a:	881a      	ldrh	r2, [r3, #0]
 800620c:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <Create_Message+0x9c>)
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f000 f825 	bl	8006260 <CRC16_ARC>
 8006216:	0003      	movs	r3, r0
 8006218:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800621a:	0030      	movs	r0, r6
 800621c:	183b      	adds	r3, r7, r0
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	b29a      	uxth	r2, r3
 8006224:	197b      	adds	r3, r7, r5
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b2d1      	uxtb	r1, r2
 800622a:	4a0b      	ldr	r2, [pc, #44]	@ (8006258 <Create_Message+0x9c>)
 800622c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800622e:	197b      	adds	r3, r7, r5
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	183a      	adds	r2, r7, r0
 8006236:	8812      	ldrh	r2, [r2, #0]
 8006238:	b2d1      	uxtb	r1, r2
 800623a:	4a07      	ldr	r2, [pc, #28]	@ (8006258 <Create_Message+0x9c>)
 800623c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800623e:	197b      	adds	r3, r7, r5
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	3302      	adds	r3, #2
 8006244:	b29a      	uxth	r2, r3
 8006246:	4b04      	ldr	r3, [pc, #16]	@ (8006258 <Create_Message+0x9c>)
 8006248:	0011      	movs	r1, r2
 800624a:	0018      	movs	r0, r3
 800624c:	f016 fe50 	bl	801cef0 <CDC_Transmit_FS>
}
 8006250:	46c0      	nop			@ (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b005      	add	sp, #20
 8006256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006258:	20000c60 	.word	0x20000c60
 800625c:	20000c63 	.word	0x20000c63

08006260 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	000a      	movs	r2, r1
 800626a:	1cbb      	adds	r3, r7, #2
 800626c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800626e:	2316      	movs	r3, #22
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	2200      	movs	r2, #0
 8006274:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	e02e      	b.n	80062da <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	18d3      	adds	r3, r2, r3
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	0019      	movs	r1, r3
 8006286:	2216      	movs	r2, #22
 8006288:	18bb      	adds	r3, r7, r2
 800628a:	18ba      	adds	r2, r7, r2
 800628c:	8812      	ldrh	r2, [r2, #0]
 800628e:	404a      	eors	r2, r1
 8006290:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e01a      	b.n	80062ce <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006298:	2116      	movs	r1, #22
 800629a:	187b      	adds	r3, r7, r1
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	2201      	movs	r2, #1
 80062a0:	4013      	ands	r3, r2
 80062a2:	d00b      	beq.n	80062bc <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80062a4:	187b      	adds	r3, r7, r1
 80062a6:	187a      	adds	r2, r7, r1
 80062a8:	8812      	ldrh	r2, [r2, #0]
 80062aa:	0852      	lsrs	r2, r2, #1
 80062ac:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80062ae:	187b      	adds	r3, r7, r1
 80062b0:	187a      	adds	r2, r7, r1
 80062b2:	8812      	ldrh	r2, [r2, #0]
 80062b4:	490f      	ldr	r1, [pc, #60]	@ (80062f4 <CRC16_ARC+0x94>)
 80062b6:	404a      	eors	r2, r1
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e005      	b.n	80062c8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80062bc:	2216      	movs	r2, #22
 80062be:	18bb      	adds	r3, r7, r2
 80062c0:	18ba      	adds	r2, r7, r2
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	0852      	lsrs	r2, r2, #1
 80062c6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b07      	cmp	r3, #7
 80062d2:	dde1      	ble.n	8006298 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	3301      	adds	r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	1cbb      	adds	r3, r7, #2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	dbcb      	blt.n	800627c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062e4:	2316      	movs	r3, #22
 80062e6:	18fb      	adds	r3, r7, r3
 80062e8:	881b      	ldrh	r3, [r3, #0]
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b006      	add	sp, #24
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	ffffa001 	.word	0xffffa001

080062f8 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80062fc:	4b26      	ldr	r3, [pc, #152]	@ (8006398 <ReadBatteryVoltage+0xa0>)
 80062fe:	4a27      	ldr	r2, [pc, #156]	@ (800639c <ReadBatteryVoltage+0xa4>)
 8006300:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006302:	4b25      	ldr	r3, [pc, #148]	@ (8006398 <ReadBatteryVoltage+0xa0>)
 8006304:	2280      	movs	r2, #128	@ 0x80
 8006306:	0152      	lsls	r2, r2, #5
 8006308:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800630a:	4a23      	ldr	r2, [pc, #140]	@ (8006398 <ReadBatteryVoltage+0xa0>)
 800630c:	4b24      	ldr	r3, [pc, #144]	@ (80063a0 <ReadBatteryVoltage+0xa8>)
 800630e:	0011      	movs	r1, r2
 8006310:	0018      	movs	r0, r3
 8006312:	f009 f8bf 	bl	800f494 <HAL_ADC_ConfigChannel>
 8006316:	1e03      	subs	r3, r0, #0
 8006318:	d001      	beq.n	800631e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800631a:	f001 fffd 	bl	8008318 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800631e:	4b20      	ldr	r3, [pc, #128]	@ (80063a0 <ReadBatteryVoltage+0xa8>)
 8006320:	0018      	movs	r0, r3
 8006322:	f008 ffbb 	bl	800f29c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006326:	4b1e      	ldr	r3, [pc, #120]	@ (80063a0 <ReadBatteryVoltage+0xa8>)
 8006328:	2101      	movs	r1, #1
 800632a:	0018      	movs	r0, r3
 800632c:	f009 f80a 	bl	800f344 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006330:	4b1b      	ldr	r3, [pc, #108]	@ (80063a0 <ReadBatteryVoltage+0xa8>)
 8006332:	0018      	movs	r0, r3
 8006334:	f009 f8a2 	bl	800f47c <HAL_ADC_GetValue>
 8006338:	0002      	movs	r2, r0
 800633a:	4b1a      	ldr	r3, [pc, #104]	@ (80063a4 <ReadBatteryVoltage+0xac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4353      	muls	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4919      	ldr	r1, [pc, #100]	@ (80063a8 <ReadBatteryVoltage+0xb0>)
 8006344:	0018      	movs	r0, r3
 8006346:	f7f9 ff2d 	bl	80001a4 <__udivsi3>
 800634a:	0003      	movs	r3, r0
 800634c:	001a      	movs	r2, r3
 800634e:	4b17      	ldr	r3, [pc, #92]	@ (80063ac <ReadBatteryVoltage+0xb4>)
 8006350:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006352:	4b16      	ldr	r3, [pc, #88]	@ (80063ac <ReadBatteryVoltage+0xb4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	0018      	movs	r0, r3
 8006358:	f7fb f986 	bl	8001668 <__aeabi_ui2f>
 800635c:	1c03      	adds	r3, r0, #0
 800635e:	4914      	ldr	r1, [pc, #80]	@ (80063b0 <ReadBatteryVoltage+0xb8>)
 8006360:	1c18      	adds	r0, r3, #0
 8006362:	f7fa fc37 	bl	8000bd4 <__aeabi_fdiv>
 8006366:	1c03      	adds	r3, r0, #0
 8006368:	1c1a      	adds	r2, r3, #0
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <ReadBatteryVoltage+0xbc>)
 800636c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800636e:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <ReadBatteryVoltage+0xa0>)
 8006370:	4a0a      	ldr	r2, [pc, #40]	@ (800639c <ReadBatteryVoltage+0xa4>)
 8006372:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006374:	4b08      	ldr	r3, [pc, #32]	@ (8006398 <ReadBatteryVoltage+0xa0>)
 8006376:	4a10      	ldr	r2, [pc, #64]	@ (80063b8 <ReadBatteryVoltage+0xc0>)
 8006378:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800637a:	4a07      	ldr	r2, [pc, #28]	@ (8006398 <ReadBatteryVoltage+0xa0>)
 800637c:	4b08      	ldr	r3, [pc, #32]	@ (80063a0 <ReadBatteryVoltage+0xa8>)
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f009 f887 	bl	800f494 <HAL_ADC_ConfigChannel>
 8006386:	1e03      	subs	r3, r0, #0
 8006388:	d001      	beq.n	800638e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800638a:	f001 ffc5 	bl	8008318 <Error_Handler>
  }
  return trueValue;
 800638e:	4b09      	ldr	r3, [pc, #36]	@ (80063b4 <ReadBatteryVoltage+0xbc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 }
 8006392:	1c18      	adds	r0, r3, #0
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000d68 	.word	0x20000d68
 800639c:	38004000 	.word	0x38004000
 80063a0:	20000da4 	.word	0x20000da4
 80063a4:	20000034 	.word	0x20000034
 80063a8:	00000fff 	.word	0x00000fff
 80063ac:	20000d70 	.word	0x20000d70
 80063b0:	447a0000 	.word	0x447a0000
 80063b4:	20000d74 	.word	0x20000d74
 80063b8:	00001001 	.word	0x00001001

080063bc <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80063c0:	4b21      	ldr	r3, [pc, #132]	@ (8006448 <ReadSolarVoltage+0x8c>)
 80063c2:	4a22      	ldr	r2, [pc, #136]	@ (800644c <ReadSolarVoltage+0x90>)
 80063c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80063c6:	4b20      	ldr	r3, [pc, #128]	@ (8006448 <ReadSolarVoltage+0x8c>)
 80063c8:	2280      	movs	r2, #128	@ 0x80
 80063ca:	0152      	lsls	r2, r2, #5
 80063cc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <ReadSolarVoltage+0x8c>)
 80063d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006450 <ReadSolarVoltage+0x94>)
 80063d2:	0011      	movs	r1, r2
 80063d4:	0018      	movs	r0, r3
 80063d6:	f009 f85d 	bl	800f494 <HAL_ADC_ConfigChannel>
 80063da:	1e03      	subs	r3, r0, #0
 80063dc:	d001      	beq.n	80063e2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80063de:	f001 ff9b 	bl	8008318 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006450 <ReadSolarVoltage+0x94>)
 80063e4:	0018      	movs	r0, r3
 80063e6:	f008 ff59 	bl	800f29c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063ea:	4b19      	ldr	r3, [pc, #100]	@ (8006450 <ReadSolarVoltage+0x94>)
 80063ec:	2101      	movs	r1, #1
 80063ee:	0018      	movs	r0, r3
 80063f0:	f008 ffa8 	bl	800f344 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80063f4:	4b16      	ldr	r3, [pc, #88]	@ (8006450 <ReadSolarVoltage+0x94>)
 80063f6:	0018      	movs	r0, r3
 80063f8:	f009 f840 	bl	800f47c <HAL_ADC_GetValue>
 80063fc:	0002      	movs	r2, r0
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <ReadSolarVoltage+0x98>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	435a      	muls	r2, r3
 8006404:	0013      	movs	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	189b      	adds	r3, r3, r2
 800640a:	4913      	ldr	r1, [pc, #76]	@ (8006458 <ReadSolarVoltage+0x9c>)
 800640c:	0018      	movs	r0, r3
 800640e:	f7f9 fec9 	bl	80001a4 <__udivsi3>
 8006412:	0003      	movs	r3, r0
 8006414:	001a      	movs	r2, r3
 8006416:	4b11      	ldr	r3, [pc, #68]	@ (800645c <ReadSolarVoltage+0xa0>)
 8006418:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800641a:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <ReadSolarVoltage+0x8c>)
 800641c:	4a0b      	ldr	r2, [pc, #44]	@ (800644c <ReadSolarVoltage+0x90>)
 800641e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006420:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <ReadSolarVoltage+0x8c>)
 8006422:	4a0f      	ldr	r2, [pc, #60]	@ (8006460 <ReadSolarVoltage+0xa4>)
 8006424:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006426:	4a08      	ldr	r2, [pc, #32]	@ (8006448 <ReadSolarVoltage+0x8c>)
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <ReadSolarVoltage+0x94>)
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f009 f831 	bl	800f494 <HAL_ADC_ConfigChannel>
 8006432:	1e03      	subs	r3, r0, #0
 8006434:	d001      	beq.n	800643a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006436:	f001 ff6f 	bl	8008318 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800643a:	4b08      	ldr	r3, [pc, #32]	@ (800645c <ReadSolarVoltage+0xa0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 }
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	20000d68 	.word	0x20000d68
 800644c:	3c008000 	.word	0x3c008000
 8006450:	20000da4 	.word	0x20000da4
 8006454:	20000034 	.word	0x20000034
 8006458:	00000fff 	.word	0x00000fff
 800645c:	20000d78 	.word	0x20000d78
 8006460:	00001001 	.word	0x00001001

08006464 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006468:	23a0      	movs	r3, #160	@ 0xa0
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	2180      	movs	r1, #128	@ 0x80
 800646e:	0018      	movs	r0, r3
 8006470:	f009 ffac 	bl	80103cc <HAL_GPIO_ReadPin>
 8006474:	0003      	movs	r3, r0
 8006476:	1e5a      	subs	r2, r3, #1
 8006478:	4193      	sbcs	r3, r2
 800647a:	b2db      	uxtb	r3, r3
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006482:	b580      	push	{r7, lr}
 8006484:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	23a0      	movs	r3, #160	@ 0xa0
 800648c:	05db      	lsls	r3, r3, #23
 800648e:	0011      	movs	r1, r2
 8006490:	0018      	movs	r0, r3
 8006492:	f009 ff9b 	bl	80103cc <HAL_GPIO_ReadPin>
 8006496:	0003      	movs	r3, r0
 8006498:	1e5a      	subs	r2, r3, #1
 800649a:	4193      	sbcs	r3, r2
 800649c:	b2db      	uxtb	r3, r3
}
 800649e:	0018      	movs	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <UserButton_Pressed+0x1c>)
 80064aa:	2104      	movs	r1, #4
 80064ac:	0018      	movs	r0, r3
 80064ae:	f009 ff8d 	bl	80103cc <HAL_GPIO_ReadPin>
 80064b2:	0003      	movs	r3, r0
 80064b4:	425a      	negs	r2, r3
 80064b6:	4153      	adcs	r3, r2
 80064b8:	b2db      	uxtb	r3, r3
}
 80064ba:	0018      	movs	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	50000c00 	.word	0x50000c00

080064c4 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c6:	46d6      	mov	lr, sl
 80064c8:	464f      	mov	r7, r9
 80064ca:	4646      	mov	r6, r8
 80064cc:	b5c0      	push	{r6, r7, lr}
 80064ce:	b08e      	sub	sp, #56	@ 0x38
 80064d0:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064d2:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <showTime+0x94>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d036      	beq.n	8006548 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064da:	003a      	movs	r2, r7
 80064dc:	1d3b      	adds	r3, r7, #4
 80064de:	0011      	movs	r1, r2
 80064e0:	0018      	movs	r0, r3
 80064e2:	f000 fa2b 	bl	800693c <RTC_GetTime>
  UpdateSystemUptime();
 80064e6:	f000 f83f 	bl	8006568 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064ea:	003b      	movs	r3, r7
 80064ec:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064ee:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064f0:	003b      	movs	r3, r7
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064f6:	4b19      	ldr	r3, [pc, #100]	@ (800655c <showTime+0x98>)
 80064f8:	0092      	lsls	r2, r2, #2
 80064fa:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064fc:	003b      	movs	r3, r7
 80064fe:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006500:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006506:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800650c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800650e:	1d3b      	adds	r3, r7, #4
 8006510:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006512:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006514:	4b12      	ldr	r3, [pc, #72]	@ (8006560 <showTime+0x9c>)
 8006516:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006518:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800651a:	4b11      	ldr	r3, [pc, #68]	@ (8006560 <showTime+0x9c>)
 800651c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800651e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006520:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <showTime+0x9c>)
 8006522:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006524:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006526:	4b0e      	ldr	r3, [pc, #56]	@ (8006560 <showTime+0x9c>)
 8006528:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800652a:	480e      	ldr	r0, [pc, #56]	@ (8006564 <showTime+0xa0>)
 800652c:	9306      	str	r3, [sp, #24]
 800652e:	4643      	mov	r3, r8
 8006530:	9305      	str	r3, [sp, #20]
 8006532:	4663      	mov	r3, ip
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	9603      	str	r6, [sp, #12]
 8006538:	9502      	str	r5, [sp, #8]
 800653a:	9401      	str	r4, [sp, #4]
 800653c:	9100      	str	r1, [sp, #0]
 800653e:	4653      	mov	r3, sl
 8006540:	4649      	mov	r1, r9
 8006542:	f019 fd73 	bl	802002c <iprintf>
 8006546:	e000      	b.n	800654a <showTime+0x86>
    return;
 8006548:	46c0      	nop			@ (mov r8, r8)
}
 800654a:	46bd      	mov	sp, r7
 800654c:	b006      	add	sp, #24
 800654e:	bce0      	pop	{r5, r6, r7}
 8006550:	46ba      	mov	sl, r7
 8006552:	46b1      	mov	r9, r6
 8006554:	46a8      	mov	r8, r5
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006558:	20000d88 	.word	0x20000d88
 800655c:	20000054 	.word	0x20000054
 8006560:	20000d7c 	.word	0x20000d7c
 8006564:	08023e90 	.word	0x08023e90

08006568 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800656e:	003a      	movs	r2, r7
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	0011      	movs	r1, r2
 8006574:	0018      	movs	r0, r3
 8006576:	f000 f9e1 	bl	800693c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800657a:	1d3a      	adds	r2, r7, #4
 800657c:	003b      	movs	r3, r7
 800657e:	0011      	movs	r1, r2
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fba7 	bl	8006cd4 <makeTime>
 8006586:	0002      	movs	r2, r0
 8006588:	4b1e      	ldr	r3, [pc, #120]	@ (8006604 <UpdateSystemUptime+0x9c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	213c      	movs	r1, #60	@ 0x3c
 8006598:	0018      	movs	r0, r3
 800659a:	f7f9 fe89 	bl	80002b0 <__aeabi_uidivmod>
 800659e:	000b      	movs	r3, r1
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	4b19      	ldr	r3, [pc, #100]	@ (8006608 <UpdateSystemUptime+0xa0>)
 80065a4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	213c      	movs	r1, #60	@ 0x3c
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7f9 fdfa 	bl	80001a4 <__udivsi3>
 80065b0:	0003      	movs	r3, r0
 80065b2:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	213c      	movs	r1, #60	@ 0x3c
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7f9 fe79 	bl	80002b0 <__aeabi_uidivmod>
 80065be:	000b      	movs	r3, r1
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b11      	ldr	r3, [pc, #68]	@ (8006608 <UpdateSystemUptime+0xa0>)
 80065c4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	213c      	movs	r1, #60	@ 0x3c
 80065ca:	0018      	movs	r0, r3
 80065cc:	f7f9 fdea 	bl	80001a4 <__udivsi3>
 80065d0:	0003      	movs	r3, r0
 80065d2:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2118      	movs	r1, #24
 80065d8:	0018      	movs	r0, r3
 80065da:	f7f9 fe69 	bl	80002b0 <__aeabi_uidivmod>
 80065de:	000b      	movs	r3, r1
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <UpdateSystemUptime+0xa0>)
 80065e4:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2118      	movs	r1, #24
 80065ea:	0018      	movs	r0, r3
 80065ec:	f7f9 fdda 	bl	80001a4 <__udivsi3>
 80065f0:	0003      	movs	r3, r0
 80065f2:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	4b03      	ldr	r3, [pc, #12]	@ (8006608 <UpdateSystemUptime+0xa0>)
 80065fa:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80065fc:	46c0      	nop			@ (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	b008      	add	sp, #32
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000d88 	.word	0x20000d88
 8006608:	20000d7c 	.word	0x20000d7c

0800660c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	0008      	movs	r0, r1
 8006616:	0011      	movs	r1, r2
 8006618:	1cfb      	adds	r3, r7, #3
 800661a:	1c02      	adds	r2, r0, #0
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	1cbb      	adds	r3, r7, #2
 8006620:	1c0a      	adds	r2, r1, #0
 8006622:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006624:	230e      	movs	r3, #14
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800662c:	230f      	movs	r3, #15
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	1cfa      	adds	r2, r7, #3
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e015      	b.n	8006664 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006638:	200f      	movs	r0, #15
 800663a:	183b      	adds	r3, r7, r0
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	18d2      	adds	r2, r2, r3
 8006642:	240e      	movs	r4, #14
 8006644:	193b      	adds	r3, r7, r4
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	7811      	ldrb	r1, [r2, #0]
 800664a:	2208      	movs	r2, #8
 800664c:	18ba      	adds	r2, r7, r2
 800664e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006650:	193b      	adds	r3, r7, r4
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	193b      	adds	r3, r7, r4
 8006656:	3201      	adds	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800665a:	183b      	adds	r3, r7, r0
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	183b      	adds	r3, r7, r0
 8006660:	3201      	adds	r2, #1
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	200f      	movs	r0, #15
 8006666:	183a      	adds	r2, r7, r0
 8006668:	1cbb      	adds	r3, r7, #2
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d9e2      	bls.n	8006638 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006672:	230e      	movs	r3, #14
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	18ba      	adds	r2, r7, r2
 800667c:	2100      	movs	r1, #0
 800667e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006680:	1cfb      	adds	r3, r7, #3
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b13      	cmp	r3, #19
 8006686:	d849      	bhi.n	800671c <aBuff2int+0x110>
    if (start == 17) { //month
 8006688:	1cfb      	adds	r3, r7, #3
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b11      	cmp	r3, #17
 800668e:	d122      	bne.n	80066d6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006690:	183b      	adds	r3, r7, r0
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e018      	b.n	80066ca <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006698:	240f      	movs	r4, #15
 800669a:	193b      	adds	r3, r7, r4
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <aBuff2int+0x128>)
 80066a0:	0092      	lsls	r2, r2, #2
 80066a2:	58d2      	ldr	r2, [r2, r3]
 80066a4:	2308      	movs	r3, #8
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	0011      	movs	r1, r2
 80066aa:	0018      	movs	r0, r3
 80066ac:	f7f9 fd54 	bl	8000158 <strcmp>
 80066b0:	1e03      	subs	r3, r0, #0
 80066b2:	d104      	bne.n	80066be <aBuff2int+0xb2>
          return i+1;
 80066b4:	193b      	adds	r3, r7, r4
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	e035      	b.n	800672a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80066be:	210f      	movs	r1, #15
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	187b      	adds	r3, r7, r1
 80066c6:	3201      	adds	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	230f      	movs	r3, #15
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b0b      	cmp	r3, #11
 80066d2:	d9e1      	bls.n	8006698 <aBuff2int+0x8c>
 80066d4:	e022      	b.n	800671c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066d6:	230f      	movs	r3, #15
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	e018      	b.n	8006712 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066e0:	240f      	movs	r4, #15
 80066e2:	193b      	adds	r3, r7, r4
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	4b14      	ldr	r3, [pc, #80]	@ (8006738 <aBuff2int+0x12c>)
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	58d2      	ldr	r2, [r2, r3]
 80066ec:	2308      	movs	r3, #8
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7f9 fd30 	bl	8000158 <strcmp>
 80066f8:	1e03      	subs	r3, r0, #0
 80066fa:	d104      	bne.n	8006706 <aBuff2int+0xfa>
          return i+1;
 80066fc:	193b      	adds	r3, r7, r4
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e011      	b.n	800672a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006706:	210f      	movs	r1, #15
 8006708:	187b      	adds	r3, r7, r1
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	187b      	adds	r3, r7, r1
 800670e:	3201      	adds	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	230f      	movs	r3, #15
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b06      	cmp	r3, #6
 800671a:	d9e1      	bls.n	80066e0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800671c:	2308      	movs	r3, #8
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	0018      	movs	r0, r3
 8006722:	f018 f8a8 	bl	801e876 <atoi>
 8006726:	0003      	movs	r3, r0
 8006728:	b2db      	uxtb	r3, r3
}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b005      	add	sp, #20
 8006730:	bd90      	pop	{r4, r7, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	20000054 	.word	0x20000054
 8006738:	20000038 	.word	0x20000038

0800673c <ParseTime>:

void ParseTime(char* buffer) {
 800673c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673e:	b08b      	sub	sp, #44	@ 0x2c
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006744:	2408      	movs	r4, #8
 8006746:	193a      	adds	r2, r7, r4
 8006748:	260c      	movs	r6, #12
 800674a:	19bb      	adds	r3, r7, r6
 800674c:	0011      	movs	r1, r2
 800674e:	0018      	movs	r0, r3
 8006750:	f000 f8f4 	bl	800693c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2219      	movs	r2, #25
 8006758:	2118      	movs	r1, #24
 800675a:	0018      	movs	r0, r3
 800675c:	f7ff ff56 	bl	800660c <aBuff2int>
 8006760:	0003      	movs	r3, r0
 8006762:	001a      	movs	r2, r3
 8006764:	19bb      	adds	r3, r7, r6
 8006766:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	221c      	movs	r2, #28
 800676c:	211b      	movs	r1, #27
 800676e:	0018      	movs	r0, r3
 8006770:	f7ff ff4c 	bl	800660c <aBuff2int>
 8006774:	0003      	movs	r3, r0
 8006776:	001a      	movs	r2, r3
 8006778:	19bb      	adds	r3, r7, r6
 800677a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	221f      	movs	r2, #31
 8006780:	211e      	movs	r1, #30
 8006782:	0018      	movs	r0, r3
 8006784:	f7ff ff42 	bl	800660c <aBuff2int>
 8006788:	0003      	movs	r3, r0
 800678a:	001a      	movs	r2, r3
 800678c:	19bb      	adds	r3, r7, r6
 800678e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	@ 0x24
 8006794:	2123      	movs	r1, #35	@ 0x23
 8006796:	0018      	movs	r0, r3
 8006798:	f7ff ff38 	bl	800660c <aBuff2int>
 800679c:	0003      	movs	r3, r0
 800679e:	001a      	movs	r2, r3
 80067a0:	0025      	movs	r5, r4
 80067a2:	197b      	adds	r3, r7, r5
 80067a4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2213      	movs	r2, #19
 80067aa:	2111      	movs	r1, #17
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7ff ff2d 	bl	800660c <aBuff2int>
 80067b2:	0003      	movs	r3, r0
 80067b4:	001a      	movs	r2, r3
 80067b6:	197b      	adds	r3, r7, r5
 80067b8:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2216      	movs	r2, #22
 80067be:	2115      	movs	r1, #21
 80067c0:	0018      	movs	r0, r3
 80067c2:	f7ff ff23 	bl	800660c <aBuff2int>
 80067c6:	0003      	movs	r3, r0
 80067c8:	001a      	movs	r2, r3
 80067ca:	197b      	adds	r3, r7, r5
 80067cc:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	220f      	movs	r2, #15
 80067d2:	210d      	movs	r1, #13
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7ff ff19 	bl	800660c <aBuff2int>
 80067da:	0003      	movs	r3, r0
 80067dc:	001a      	movs	r2, r3
 80067de:	197b      	adds	r3, r7, r5
 80067e0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067e2:	19bb      	adds	r3, r7, r6
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	001c      	movs	r4, r3
 80067e8:	19bb      	adds	r3, r7, r6
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	0018      	movs	r0, r3
 80067ee:	19bb      	adds	r3, r7, r6
 80067f0:	789b      	ldrb	r3, [r3, #2]
 80067f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <ParseTime+0x128>)
 80067f4:	491c      	ldr	r1, [pc, #112]	@ (8006868 <ParseTime+0x12c>)
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	9000      	str	r0, [sp, #0]
 80067fa:	0023      	movs	r3, r4
 80067fc:	2003      	movs	r0, #3
 80067fe:	f007 ff2d 	bl	800e65c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006802:	197b      	adds	r3, r7, r5
 8006804:	789b      	ldrb	r3, [r3, #2]
 8006806:	001c      	movs	r4, r3
 8006808:	197b      	adds	r3, r7, r5
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	0018      	movs	r0, r3
 800680e:	197b      	adds	r3, r7, r5
 8006810:	78db      	ldrb	r3, [r3, #3]
 8006812:	4a16      	ldr	r2, [pc, #88]	@ (800686c <ParseTime+0x130>)
 8006814:	4914      	ldr	r1, [pc, #80]	@ (8006868 <ParseTime+0x12c>)
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	9000      	str	r0, [sp, #0]
 800681a:	0023      	movs	r3, r4
 800681c:	2003      	movs	r0, #3
 800681e:	f007 ff1d 	bl	800e65c <CreateLine>
  RTC_SetTime(&currentTime);
 8006822:	19bb      	adds	r3, r7, r6
 8006824:	0018      	movs	r0, r3
 8006826:	f000 f825 	bl	8006874 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800682a:	197b      	adds	r3, r7, r5
 800682c:	0018      	movs	r0, r3
 800682e:	f000 f847 	bl	80068c0 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006832:	197b      	adds	r3, r7, r5
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d101      	bne.n	800683e <ParseTime+0x102>
    reset_fanCleaningDone();
 800683a:	f002 fcff 	bl	800923c <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 800683e:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <ParseTime+0x134>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10a      	bne.n	800685c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006846:	230c      	movs	r3, #12
 8006848:	18fa      	adds	r2, r7, r3
 800684a:	2308      	movs	r3, #8
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	0011      	movs	r1, r2
 8006850:	0018      	movs	r0, r3
 8006852:	f000 fa3f 	bl	8006cd4 <makeTime>
 8006856:	0002      	movs	r2, r0
 8006858:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <ParseTime+0x134>)
 800685a:	601a      	str	r2, [r3, #0]
  }
}
 800685c:	46c0      	nop			@ (mov r8, r8)
 800685e:	46bd      	mov	sp, r7
 8006860:	b009      	add	sp, #36	@ 0x24
 8006862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006864:	08023ee8 	.word	0x08023ee8
 8006868:	08023f20 	.word	0x08023f20
 800686c:	08023f24 	.word	0x08023f24
 8006870:	20000d88 	.word	0x20000d88

08006874 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800688e:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <RTC_SetTime+0x40>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	0018      	movs	r0, r3
 8006898:	f00f fc44 	bl	8016124 <HAL_RTC_SetTime>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d005      	beq.n	80068ac <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80068a0:	4a05      	ldr	r2, [pc, #20]	@ (80068b8 <RTC_SetTime+0x44>)
 80068a2:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <RTC_SetTime+0x48>)
 80068a4:	0019      	movs	r1, r3
 80068a6:	2001      	movs	r0, #1
 80068a8:	f007 fed8 	bl	800e65c <CreateLine>
    }
}
 80068ac:	46c0      	nop			@ (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b002      	add	sp, #8
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000d84 	.word	0x20000d84
 80068b8:	08023f58 	.word	0x08023f58
 80068bc:	08023f74 	.word	0x08023f74

080068c0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068c8:	4b16      	ldr	r3, [pc, #88]	@ (8006924 <RTC_SetDate+0x64>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	0018      	movs	r0, r3
 80068d2:	f00f fd2f 	bl	8016334 <HAL_RTC_SetDate>
 80068d6:	1e03      	subs	r3, r0, #0
 80068d8:	d005      	beq.n	80068e6 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80068da:	4a13      	ldr	r2, [pc, #76]	@ (8006928 <RTC_SetDate+0x68>)
 80068dc:	4b13      	ldr	r3, [pc, #76]	@ (800692c <RTC_SetDate+0x6c>)
 80068de:	0019      	movs	r1, r3
 80068e0:	2001      	movs	r0, #1
 80068e2:	f007 febb 	bl	800e65c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006924 <RTC_SetDate+0x64>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2101      	movs	r1, #1
 80068ec:	0018      	movs	r0, r3
 80068ee:	f010 f867 	bl	80169c0 <HAL_RTCEx_BKUPRead>
 80068f2:	0003      	movs	r3, r0
 80068f4:	4a0e      	ldr	r2, [pc, #56]	@ (8006930 <RTC_SetDate+0x70>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d010      	beq.n	800691c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80068fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <RTC_SetDate+0x74>)
 80068fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006938 <RTC_SetDate+0x78>)
 80068fe:	0019      	movs	r1, r3
 8006900:	2003      	movs	r0, #3
 8006902:	f007 feab 	bl	800e65c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006906:	f00e fb8d 	bl	8015024 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <RTC_SetDate+0x64>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a08      	ldr	r2, [pc, #32]	@ (8006930 <RTC_SetDate+0x70>)
 8006910:	2101      	movs	r1, #1
 8006912:	0018      	movs	r0, r3
 8006914:	f010 f83c 	bl	8016990 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006918:	f00e fb92 	bl	8015040 <HAL_PWR_DisableBkUpAccess>
    }
}
 800691c:	46c0      	nop			@ (mov r8, r8)
 800691e:	46bd      	mov	sp, r7
 8006920:	b002      	add	sp, #8
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000d84 	.word	0x20000d84
 8006928:	08023f78 	.word	0x08023f78
 800692c:	08023f74 	.word	0x08023f74
 8006930:	0000bebe 	.word	0x0000bebe
 8006934:	08023f94 	.word	0x08023f94
 8006938:	08023f20 	.word	0x08023f20

0800693c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006946:	250f      	movs	r5, #15
 8006948:	197b      	adds	r3, r7, r5
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800694e:	230e      	movs	r3, #14
 8006950:	18fb      	adds	r3, r7, r3
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006956:	260c      	movs	r6, #12
 8006958:	19bc      	adds	r4, r7, r6
 800695a:	f006 ff0d 	bl	800d778 <powerCheck>
 800695e:	0003      	movs	r3, r0
 8006960:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006962:	19bb      	adds	r3, r7, r6
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800696a:	197b      	adds	r3, r7, r5
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	197b      	adds	r3, r7, r5
 8006970:	3201      	adds	r2, #1
 8006972:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006974:	230d      	movs	r3, #13
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e039      	b.n	80069f2 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <RTC_GetTime+0xd0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	0018      	movs	r0, r3
 8006988:	f00f fc76 	bl	8016278 <HAL_RTC_GetTime>
 800698c:	1e03      	subs	r3, r0, #0
 800698e:	d005      	beq.n	800699c <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006990:	4a1f      	ldr	r2, [pc, #124]	@ (8006a10 <RTC_GetTime+0xd4>)
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <RTC_GetTime+0xd8>)
 8006994:	0019      	movs	r1, r3
 8006996:	2001      	movs	r0, #1
 8006998:	f007 fe60 	bl	800e65c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800699c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a0c <RTC_GetTime+0xd0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	0018      	movs	r0, r3
 80069a6:	f00f fd59 	bl	801645c <HAL_RTC_GetDate>
 80069aa:	1e03      	subs	r3, r0, #0
 80069ac:	d005      	beq.n	80069ba <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80069ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006a18 <RTC_GetTime+0xdc>)
 80069b0:	4b18      	ldr	r3, [pc, #96]	@ (8006a14 <RTC_GetTime+0xd8>)
 80069b2:	0019      	movs	r1, r3
 80069b4:	2001      	movs	r0, #1
 80069b6:	f007 fe51 	bl	800e65c <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80069ba:	230c      	movs	r3, #12
 80069bc:	18fb      	adds	r3, r7, r3
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d110      	bne.n	80069e6 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	210e      	movs	r1, #14
 80069ca:	187a      	adds	r2, r7, r1
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d018      	beq.n	8006a04 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
        t++;
 80069da:	210f      	movs	r1, #15
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	187b      	adds	r3, r7, r1
 80069e2:	3201      	adds	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069e6:	210d      	movs	r1, #13
 80069e8:	187b      	adds	r3, r7, r1
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	3201      	adds	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	230d      	movs	r3, #13
 80069f4:	18fa      	adds	r2, r7, r3
 80069f6:	230f      	movs	r3, #15
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d3bd      	bcc.n	800697e <RTC_GetTime+0x42>
 8006a02:	e000      	b.n	8006a06 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006a04:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b005      	add	sp, #20
 8006a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a0c:	20000d84 	.word	0x20000d84
 8006a10:	08023fac 	.word	0x08023fac
 8006a14:	08023f74 	.word	0x08023f74
 8006a18:	08023fc8 	.word	0x08023fc8

08006a1c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a22:	003a      	movs	r2, r7
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	0011      	movs	r1, r2
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7ff ff87 	bl	800693c <RTC_GetTime>
  return currentDate.WeekDay;
 8006a2e:	003b      	movs	r3, r7
 8006a30:	781b      	ldrb	r3, [r3, #0]
}
 8006a32:	0018      	movs	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b006      	add	sp, #24
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b086      	sub	sp, #24
 8006a3e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a40:	003a      	movs	r2, r7
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7ff ff78 	bl	800693c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a4c:	1d3a      	adds	r2, r7, #4
 8006a4e:	003b      	movs	r3, r7
 8006a50:	0011      	movs	r1, r2
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 f93e 	bl	8006cd4 <makeTime>
 8006a58:	0003      	movs	r3, r0
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b006      	add	sp, #24
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a66:	b08d      	sub	sp, #52	@ 0x34
 8006a68:	af04      	add	r7, sp, #16
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a6e:	240c      	movs	r4, #12
 8006a70:	193a      	adds	r2, r7, r4
 8006a72:	2508      	movs	r5, #8
 8006a74:	1979      	adds	r1, r7, r5
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f000 f9f5 	bl	8006e68 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a7e:	002a      	movs	r2, r5
 8006a80:	18bb      	adds	r3, r7, r2
 8006a82:	789b      	ldrb	r3, [r3, #2]
 8006a84:	001e      	movs	r6, r3
 8006a86:	18bb      	adds	r3, r7, r2
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	469c      	mov	ip, r3
 8006a8c:	18bb      	adds	r3, r7, r2
 8006a8e:	78db      	ldrb	r3, [r3, #3]
 8006a90:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a92:	0021      	movs	r1, r4
 8006a94:	187b      	adds	r3, r7, r1
 8006a96:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a98:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a9e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aa0:	187b      	adds	r3, r7, r1
 8006aa2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aa4:	4906      	ldr	r1, [pc, #24]	@ (8006ac0 <getUTCfromPosixTime+0x5c>)
 8006aa6:	6838      	ldr	r0, [r7, #0]
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9502      	str	r5, [sp, #8]
 8006aac:	9401      	str	r4, [sp, #4]
 8006aae:	9200      	str	r2, [sp, #0]
 8006ab0:	4663      	mov	r3, ip
 8006ab2:	0032      	movs	r2, r6
 8006ab4:	f019 fb2a 	bl	802010c <siprintf>
}
 8006ab8:	46c0      	nop			@ (mov r8, r8)
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b009      	add	sp, #36	@ 0x24
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	08023fe4 	.word	0x08023fe4

08006ac4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006acc:	4b10      	ldr	r3, [pc, #64]	@ (8006b10 <RTC_SetWakeUpTimer+0x4c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f00f fec1 	bl	8016858 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b10 <RTC_SetWakeUpTimer+0x4c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	22ff      	movs	r2, #255	@ 0xff
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <RTC_SetWakeUpTimer+0x4c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	490a      	ldr	r1, [pc, #40]	@ (8006b14 <RTC_SetWakeUpTimer+0x50>)
 8006aea:	430a      	orrs	r2, r1
 8006aec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006aee:	4b0a      	ldr	r3, [pc, #40]	@ (8006b18 <RTC_SetWakeUpTimer+0x54>)
 8006af0:	2280      	movs	r2, #128	@ 0x80
 8006af2:	0352      	lsls	r2, r2, #13
 8006af4:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <RTC_SetWakeUpTimer+0x4c>)
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	2204      	movs	r2, #4
 8006b00:	0019      	movs	r1, r3
 8006b02:	f00f fdd1 	bl	80166a8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b002      	add	sp, #8
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			@ (mov r8, r8)
 8006b10:	20000d84 	.word	0x20000d84
 8006b14:	fffffb7f 	.word	0xfffffb7f
 8006b18:	40010400 	.word	0x40010400

08006b1c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b20:	4a0b      	ldr	r2, [pc, #44]	@ (8006b50 <Enter_Standby_Mode+0x34>)
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <Enter_Standby_Mode+0x38>)
 8006b24:	0019      	movs	r1, r3
 8006b26:	2003      	movs	r0, #3
 8006b28:	f007 fd98 	bl	800e65c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b2c:	2064      	movs	r0, #100	@ 0x64
 8006b2e:	f008 f9e3 	bl	800eef8 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b32:	4b09      	ldr	r3, [pc, #36]	@ (8006b58 <Enter_Standby_Mode+0x3c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	0018      	movs	r0, r3
 8006b38:	f00f fe8e 	bl	8016858 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006b3c:	f000 fe16 	bl	800776c <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006b40:	f008 f9fe 	bl	800ef40 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006b44:	f00e fae8 	bl	8015118 <HAL_PWR_EnterSTANDBYMode>
}
 8006b48:	46c0      	nop			@ (mov r8, r8)
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	08024038 	.word	0x08024038
 8006b54:	08023f20 	.word	0x08023f20
 8006b58:	20000d84 	.word	0x20000d84

08006b5c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	0002      	movs	r2, r0
 8006b64:	1dbb      	adds	r3, r7, #6
 8006b66:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b68:	4b47      	ldr	r3, [pc, #284]	@ (8006c88 <Enter_Stop_Mode+0x12c>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b70:	f002 fb38 	bl	80091e4 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b74:	f7ff fbc0 	bl	80062f8 <ReadBatteryVoltage>
 8006b78:	1c03      	adds	r3, r0, #0
 8006b7a:	1c18      	adds	r0, r3, #0
 8006b7c:	f7fc fc72 	bl	8003464 <__aeabi_f2d>
 8006b80:	0002      	movs	r2, r0
 8006b82:	000b      	movs	r3, r1
 8006b84:	4841      	ldr	r0, [pc, #260]	@ (8006c8c <Enter_Stop_Mode+0x130>)
 8006b86:	4942      	ldr	r1, [pc, #264]	@ (8006c90 <Enter_Stop_Mode+0x134>)
 8006b88:	9200      	str	r2, [sp, #0]
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	0002      	movs	r2, r0
 8006b8e:	2002      	movs	r0, #2
 8006b90:	f007 fd64 	bl	800e65c <CreateLine>
  powerDisplay(powerCheck());
 8006b94:	f006 fdf0 	bl	800d778 <powerCheck>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f006 fe08 	bl	800d7b0 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006ba0:	1dbb      	adds	r3, r7, #6
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8006c94 <Enter_Stop_Mode+0x138>)
 8006ba6:	493c      	ldr	r1, [pc, #240]	@ (8006c98 <Enter_Stop_Mode+0x13c>)
 8006ba8:	2003      	movs	r0, #3
 8006baa:	f007 fd57 	bl	800e65c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006bae:	f7ff ff44 	bl	8006a3a <getPosixTime>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	1dbb      	adds	r3, r7, #6
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	18d3      	adds	r3, r2, r3
 8006bba:	4a38      	ldr	r2, [pc, #224]	@ (8006c9c <Enter_Stop_Mode+0x140>)
 8006bbc:	0011      	movs	r1, r2
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f7ff ff50 	bl	8006a64 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006bc4:	4b35      	ldr	r3, [pc, #212]	@ (8006c9c <Enter_Stop_Mode+0x140>)
 8006bc6:	4a36      	ldr	r2, [pc, #216]	@ (8006ca0 <Enter_Stop_Mode+0x144>)
 8006bc8:	4931      	ldr	r1, [pc, #196]	@ (8006c90 <Enter_Stop_Mode+0x134>)
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f007 fd46 	bl	800e65c <CreateLine>
  HAL_Delay(100);
 8006bd0:	2064      	movs	r0, #100	@ 0x64
 8006bd2:	f008 f991 	bl	800eef8 <HAL_Delay>
  HAL_SuspendTick();
 8006bd6:	f008 f9b3 	bl	800ef40 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006bda:	1dbb      	adds	r3, r7, #6
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7ff ff70 	bl	8006ac4 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006be4:	2101      	movs	r1, #1
 8006be6:	2001      	movs	r0, #1
 8006be8:	f00e fa3a 	bl	8015060 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bec:	f001 fa4e 	bl	800808c <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006bf0:	f008 f9b4 	bl	800ef5c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006bf4:	1dbb      	adds	r3, r7, #6
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f002 fa71 	bl	80090e0 <sen5x_enable>
 8006bfe:	1e03      	subs	r3, r0, #0
 8006c00:	d01e      	beq.n	8006c40 <Enter_Stop_Mode+0xe4>
    showTime();
 8006c02:	f7ff fc5f 	bl	80064c4 <showTime>
    set_light_on_state();
 8006c06:	f002 ffb3 	bl	8009b70 <set_light_on_state>
    if (!userToggle) {
 8006c0a:	4b26      	ldr	r3, [pc, #152]	@ (8006ca4 <Enter_Stop_Mode+0x148>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4053      	eors	r3, r2
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006c18:	201c      	movs	r0, #28
 8006c1a:	f7ff ff53 	bl	8006ac4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <Enter_Stop_Mode+0x138>)
 8006c20:	491d      	ldr	r1, [pc, #116]	@ (8006c98 <Enter_Stop_Mode+0x13c>)
 8006c22:	231c      	movs	r3, #28
 8006c24:	2003      	movs	r0, #3
 8006c26:	f007 fd19 	bl	800e65c <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f00e fa17 	bl	8015060 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c32:	f001 fa2b 	bl	800808c <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c36:	f008 f991 	bl	800ef5c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f002 fa2e 	bl	800909c <setsen5xReadTimer>
    }
  }
  showTime();
 8006c40:	f7ff fc40 	bl	80064c4 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c44:	f001 fec4 	bl	80089d0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c48:	f004 fdf2 	bl	800b830 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f002 fa37 	bl	80090c0 <setsen5xSamplecounter>
  setESPTimeStamp(4500);
 8006c52:	4b15      	ldr	r3, [pc, #84]	@ (8006ca8 <Enter_Stop_Mode+0x14c>)
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7fc fdab 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f004 fdd6 	bl	800b80c <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c60:	2000      	movs	r0, #0
 8006c62:	f007 febf 	bl	800e9e4 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c66:	2000      	movs	r0, #0
 8006c68:	f001 fea0 	bl	80089ac <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006cac <Enter_Stop_Mode+0x150>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 3000;
 8006c72:	f008 f937 	bl	800eee4 <HAL_GetTick>
 8006c76:	0003      	movs	r3, r0
 8006c78:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb0 <Enter_Stop_Mode+0x154>)
 8006c7a:	189a      	adds	r2, r3, r2
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <Enter_Stop_Mode+0x158>)
 8006c7e:	601a      	str	r2, [r3, #0]
}
 8006c80:	46c0      	nop			@ (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b002      	add	sp, #8
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20001071 	.word	0x20001071
 8006c8c:	0802405c 	.word	0x0802405c
 8006c90:	08024074 	.word	0x08024074
 8006c94:	08024078 	.word	0x08024078
 8006c98:	08023f20 	.word	0x08023f20
 8006c9c:	20000d8c 	.word	0x20000d8c
 8006ca0:	0802409c 	.word	0x0802409c
 8006ca4:	2000200a 	.word	0x2000200a
 8006ca8:	00001194 	.word	0x00001194
 8006cac:	20000558 	.word	0x20000558
 8006cb0:	00000bb8 	.word	0x00000bb8
 8006cb4:	20000fd4 	.word	0x20000fd4

08006cb8 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006cc0:	4b03      	ldr	r3, [pc, #12]	@ (8006cd0 <InitClock+0x18>)
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
}
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b002      	add	sp, #8
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	46c0      	nop			@ (mov r8, r8)
 8006cd0:	20000d84 	.word	0x20000d84

08006cd4 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	0013      	movs	r3, r2
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	189b      	adds	r3, r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	189b      	adds	r3, r3, r2
 8006cf2:	011a      	lsls	r2, r3, #4
 8006cf4:	1ad2      	subs	r2, r2, r3
 8006cf6:	01d3      	lsls	r3, r2, #7
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e028      	b.n	8006d54 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a53      	ldr	r2, [pc, #332]	@ (8006e54 <makeTime+0x180>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	db21      	blt.n	8006d4e <makeTime+0x7a>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4a52      	ldr	r2, [pc, #328]	@ (8006e58 <makeTime+0x184>)
 8006d0e:	4694      	mov	ip, r2
 8006d10:	4463      	add	r3, ip
 8006d12:	001a      	movs	r2, r3
 8006d14:	2303      	movs	r3, #3
 8006d16:	4013      	ands	r3, r2
 8006d18:	d119      	bne.n	8006d4e <makeTime+0x7a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8006e58 <makeTime+0x184>)
 8006d1e:	4694      	mov	ip, r2
 8006d20:	4463      	add	r3, ip
 8006d22:	2164      	movs	r1, #100	@ 0x64
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7f9 fbad 	bl	8000484 <__aeabi_idivmod>
 8006d2a:	1e0b      	subs	r3, r1, #0
 8006d2c:	d10a      	bne.n	8006d44 <makeTime+0x70>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a49      	ldr	r2, [pc, #292]	@ (8006e58 <makeTime+0x184>)
 8006d32:	4694      	mov	ip, r2
 8006d34:	4463      	add	r3, ip
 8006d36:	22c8      	movs	r2, #200	@ 0xc8
 8006d38:	0051      	lsls	r1, r2, #1
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f7f9 fba2 	bl	8000484 <__aeabi_idivmod>
 8006d40:	1e0b      	subs	r3, r1, #0
 8006d42:	d104      	bne.n	8006d4e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4a45      	ldr	r2, [pc, #276]	@ (8006e5c <makeTime+0x188>)
 8006d48:	4694      	mov	ip, r2
 8006d4a:	4463      	add	r3, ip
 8006d4c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	001a      	movs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	dbd0      	blt.n	8006d02 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d60:	2301      	movs	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e03c      	b.n	8006de0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d125      	bne.n	8006db8 <makeTime+0xe4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	78db      	ldrb	r3, [r3, #3]
 8006d70:	4a39      	ldr	r2, [pc, #228]	@ (8006e58 <makeTime+0x184>)
 8006d72:	4694      	mov	ip, r2
 8006d74:	4463      	add	r3, ip
 8006d76:	001a      	movs	r2, r3
 8006d78:	2303      	movs	r3, #3
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d11c      	bne.n	8006db8 <makeTime+0xe4>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	78db      	ldrb	r3, [r3, #3]
 8006d82:	4a35      	ldr	r2, [pc, #212]	@ (8006e58 <makeTime+0x184>)
 8006d84:	4694      	mov	ip, r2
 8006d86:	4463      	add	r3, ip
 8006d88:	2164      	movs	r1, #100	@ 0x64
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7f9 fb7a 	bl	8000484 <__aeabi_idivmod>
 8006d90:	1e0b      	subs	r3, r1, #0
 8006d92:	d10b      	bne.n	8006dac <makeTime+0xd8>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	78db      	ldrb	r3, [r3, #3]
 8006d98:	4a2f      	ldr	r2, [pc, #188]	@ (8006e58 <makeTime+0x184>)
 8006d9a:	4694      	mov	ip, r2
 8006d9c:	4463      	add	r3, ip
 8006d9e:	22c8      	movs	r2, #200	@ 0xc8
 8006da0:	0051      	lsls	r1, r2, #1
 8006da2:	0018      	movs	r0, r3
 8006da4:	f7f9 fb6e 	bl	8000484 <__aeabi_idivmod>
 8006da8:	1e0b      	subs	r3, r1, #0
 8006daa:	d105      	bne.n	8006db8 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a2c      	ldr	r2, [pc, #176]	@ (8006e60 <makeTime+0x18c>)
 8006db0:	4694      	mov	ip, r2
 8006db2:	4463      	add	r3, ip
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	e010      	b.n	8006dda <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4a29      	ldr	r2, [pc, #164]	@ (8006e64 <makeTime+0x190>)
 8006dbe:	5cd3      	ldrb	r3, [r2, r3]
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	0013      	movs	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	011a      	lsls	r2, r3, #4
 8006dca:	1ad2      	subs	r2, r2, r3
 8006dcc:	0113      	lsls	r3, r2, #4
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	01db      	lsls	r3, r3, #7
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	189b      	adds	r3, r3, r2
 8006dd8:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	001a      	movs	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	dbbc      	blt.n	8006d66 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	789b      	ldrb	r3, [r3, #2]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	001a      	movs	r2, r3
 8006df4:	0013      	movs	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	189b      	adds	r3, r3, r2
 8006dfa:	011a      	lsls	r2, r3, #4
 8006dfc:	1ad2      	subs	r2, r2, r3
 8006dfe:	0113      	lsls	r3, r2, #4
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	01db      	lsls	r3, r3, #7
 8006e04:	001a      	movs	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	189b      	adds	r3, r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	001a      	movs	r2, r3
 8006e12:	0013      	movs	r3, r2
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	011a      	lsls	r2, r3, #4
 8006e1a:	1ad2      	subs	r2, r2, r3
 8006e1c:	0113      	lsls	r3, r2, #4
 8006e1e:	001a      	movs	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	0013      	movs	r3, r2
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	001a      	movs	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	189b      	adds	r3, r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	789b      	ldrb	r3, [r3, #2]
 8006e40:	001a      	movs	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e48:	68bb      	ldr	r3, [r7, #8]
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b004      	add	sp, #16
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	46c0      	nop			@ (mov r8, r8)
 8006e54:	fffff84f 	.word	0xfffff84f
 8006e58:	000007b2 	.word	0x000007b2
 8006e5c:	00015180 	.word	0x00015180
 8006e60:	00263b80 	.word	0x00263b80
 8006e64:	08025600 	.word	0x08025600

08006e68 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b089      	sub	sp, #36	@ 0x24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	213c      	movs	r1, #60	@ 0x3c
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f7f9 fa17 	bl	80002b0 <__aeabi_uidivmod>
 8006e82:	000b      	movs	r3, r1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	213c      	movs	r1, #60	@ 0x3c
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7f9 f988 	bl	80001a4 <__udivsi3>
 8006e94:	0003      	movs	r3, r0
 8006e96:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	213c      	movs	r1, #60	@ 0x3c
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7f9 fa07 	bl	80002b0 <__aeabi_uidivmod>
 8006ea2:	000b      	movs	r3, r1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	213c      	movs	r1, #60	@ 0x3c
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f7f9 f978 	bl	80001a4 <__udivsi3>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2118      	movs	r1, #24
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7f9 f9f7 	bl	80002b0 <__aeabi_uidivmod>
 8006ec2:	000b      	movs	r3, r1
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2118      	movs	r1, #24
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7f9 f968 	bl	80001a4 <__udivsi3>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2107      	movs	r1, #7
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f7f9 f9e6 	bl	80002b0 <__aeabi_uidivmod>
 8006ee4:	000b      	movs	r3, r1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	3301      	adds	r3, #1
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ef0:	231f      	movs	r3, #31
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006efc:	e005      	b.n	8006f0a <breakPosixTime+0xa2>
    year++;
 8006efe:	211f      	movs	r1, #31
 8006f00:	187b      	adds	r3, r7, r1
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	3201      	adds	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f0a:	241f      	movs	r4, #31
 8006f0c:	193b      	adds	r3, r7, r4
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4a64      	ldr	r2, [pc, #400]	@ (80070a4 <breakPosixTime+0x23c>)
 8006f12:	4694      	mov	ip, r2
 8006f14:	4463      	add	r3, ip
 8006f16:	001a      	movs	r2, r3
 8006f18:	2303      	movs	r3, #3
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d119      	bne.n	8006f52 <breakPosixTime+0xea>
 8006f1e:	193b      	adds	r3, r7, r4
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4a60      	ldr	r2, [pc, #384]	@ (80070a4 <breakPosixTime+0x23c>)
 8006f24:	4694      	mov	ip, r2
 8006f26:	4463      	add	r3, ip
 8006f28:	2164      	movs	r1, #100	@ 0x64
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f7f9 faaa 	bl	8000484 <__aeabi_idivmod>
 8006f30:	1e0b      	subs	r3, r1, #0
 8006f32:	d10b      	bne.n	8006f4c <breakPosixTime+0xe4>
 8006f34:	193b      	adds	r3, r7, r4
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	4a5a      	ldr	r2, [pc, #360]	@ (80070a4 <breakPosixTime+0x23c>)
 8006f3a:	4694      	mov	ip, r2
 8006f3c:	4463      	add	r3, ip
 8006f3e:	22c8      	movs	r2, #200	@ 0xc8
 8006f40:	0051      	lsls	r1, r2, #1
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7f9 fa9e 	bl	8000484 <__aeabi_idivmod>
 8006f48:	1e0b      	subs	r3, r1, #0
 8006f4a:	d102      	bne.n	8006f52 <breakPosixTime+0xea>
 8006f4c:	23b7      	movs	r3, #183	@ 0xb7
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	e001      	b.n	8006f56 <breakPosixTime+0xee>
 8006f52:	236e      	movs	r3, #110	@ 0x6e
 8006f54:	33ff      	adds	r3, #255	@ 0xff
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	18d3      	adds	r3, r2, r3
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d9cc      	bls.n	8006efe <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	241f      	movs	r4, #31
 8006f68:	193a      	adds	r2, r7, r4
 8006f6a:	7812      	ldrb	r2, [r2, #0]
 8006f6c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4a4c      	ldr	r2, [pc, #304]	@ (80070a4 <breakPosixTime+0x23c>)
 8006f74:	4694      	mov	ip, r2
 8006f76:	4463      	add	r3, ip
 8006f78:	001a      	movs	r2, r3
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d119      	bne.n	8006fb4 <breakPosixTime+0x14c>
 8006f80:	193b      	adds	r3, r7, r4
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4a47      	ldr	r2, [pc, #284]	@ (80070a4 <breakPosixTime+0x23c>)
 8006f86:	4694      	mov	ip, r2
 8006f88:	4463      	add	r3, ip
 8006f8a:	2164      	movs	r1, #100	@ 0x64
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7f9 fa79 	bl	8000484 <__aeabi_idivmod>
 8006f92:	1e0b      	subs	r3, r1, #0
 8006f94:	d10b      	bne.n	8006fae <breakPosixTime+0x146>
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	4a42      	ldr	r2, [pc, #264]	@ (80070a4 <breakPosixTime+0x23c>)
 8006f9c:	4694      	mov	ip, r2
 8006f9e:	4463      	add	r3, ip
 8006fa0:	22c8      	movs	r2, #200	@ 0xc8
 8006fa2:	0051      	lsls	r1, r2, #1
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7f9 fa6d 	bl	8000484 <__aeabi_idivmod>
 8006faa:	1e0b      	subs	r3, r1, #0
 8006fac:	d102      	bne.n	8006fb4 <breakPosixTime+0x14c>
 8006fae:	23b7      	movs	r3, #183	@ 0xb7
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	e001      	b.n	8006fb8 <breakPosixTime+0x150>
 8006fb4:	236e      	movs	r3, #110	@ 0x6e
 8006fb6:	33ff      	adds	r3, #255	@ 0xff
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	61bb      	str	r3, [r7, #24]

  days=0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]
  month=0;
 8006fca:	211e      	movs	r1, #30
 8006fcc:	187b      	adds	r3, r7, r1
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006fd2:	231d      	movs	r3, #29
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	e048      	b.n	8007074 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fe2:	231e      	movs	r3, #30
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d12a      	bne.n	8007042 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006fec:	241f      	movs	r4, #31
 8006fee:	193b      	adds	r3, r7, r4
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80070a4 <breakPosixTime+0x23c>)
 8006ff4:	4694      	mov	ip, r2
 8006ff6:	4463      	add	r3, ip
 8006ff8:	001a      	movs	r2, r3
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	d11b      	bne.n	8007038 <breakPosixTime+0x1d0>
 8007000:	193b      	adds	r3, r7, r4
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	4a27      	ldr	r2, [pc, #156]	@ (80070a4 <breakPosixTime+0x23c>)
 8007006:	4694      	mov	ip, r2
 8007008:	4463      	add	r3, ip
 800700a:	2164      	movs	r1, #100	@ 0x64
 800700c:	0018      	movs	r0, r3
 800700e:	f7f9 fa39 	bl	8000484 <__aeabi_idivmod>
 8007012:	1e0b      	subs	r3, r1, #0
 8007014:	d10b      	bne.n	800702e <breakPosixTime+0x1c6>
 8007016:	193b      	adds	r3, r7, r4
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	4a22      	ldr	r2, [pc, #136]	@ (80070a4 <breakPosixTime+0x23c>)
 800701c:	4694      	mov	ip, r2
 800701e:	4463      	add	r3, ip
 8007020:	22c8      	movs	r2, #200	@ 0xc8
 8007022:	0051      	lsls	r1, r2, #1
 8007024:	0018      	movs	r0, r3
 8007026:	f7f9 fa2d 	bl	8000484 <__aeabi_idivmod>
 800702a:	1e0b      	subs	r3, r1, #0
 800702c:	d104      	bne.n	8007038 <breakPosixTime+0x1d0>
        monthLength=29;
 800702e:	231d      	movs	r3, #29
 8007030:	18fb      	adds	r3, r7, r3
 8007032:	221d      	movs	r2, #29
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e00c      	b.n	8007052 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007038:	231d      	movs	r3, #29
 800703a:	18fb      	adds	r3, r7, r3
 800703c:	221c      	movs	r2, #28
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e007      	b.n	8007052 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007042:	231e      	movs	r3, #30
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	231d      	movs	r3, #29
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	4916      	ldr	r1, [pc, #88]	@ (80070a8 <breakPosixTime+0x240>)
 800704e:	5c8a      	ldrb	r2, [r1, r2]
 8007050:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007052:	211d      	movs	r1, #29
 8007054:	187b      	adds	r3, r7, r1
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	429a      	cmp	r2, r3
 800705c:	d310      	bcc.n	8007080 <breakPosixTime+0x218>
      time -= monthLength;
 800705e:	187b      	adds	r3, r7, r1
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007068:	211e      	movs	r1, #30
 800706a:	187b      	adds	r3, r7, r1
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	187b      	adds	r3, r7, r1
 8007070:	3201      	adds	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	231e      	movs	r3, #30
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b0b      	cmp	r3, #11
 800707c:	d9b1      	bls.n	8006fe2 <breakPosixTime+0x17a>
 800707e:	e000      	b.n	8007082 <breakPosixTime+0x21a>
    } else {
        break;
 8007080:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007082:	231e      	movs	r3, #30
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	3301      	adds	r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	3301      	adds	r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	709a      	strb	r2, [r3, #2]
}
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	46bd      	mov	sp, r7
 80070a0:	b009      	add	sp, #36	@ 0x24
 80070a2:	bd90      	pop	{r4, r7, pc}
 80070a4:	000007b2 	.word	0x000007b2
 80070a8:	08025600 	.word	0x08025600

080070ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070b2:	003b      	movs	r3, r7
 80070b4:	0018      	movs	r0, r3
 80070b6:	2308      	movs	r3, #8
 80070b8:	001a      	movs	r2, r3
 80070ba:	2100      	movs	r1, #0
 80070bc:	f019 f96a 	bl	8020394 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80070c0:	4b30      	ldr	r3, [pc, #192]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070c2:	4a31      	ldr	r2, [pc, #196]	@ (8007188 <MX_ADC_Init+0xdc>)
 80070c4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80070c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070ce:	22c0      	movs	r2, #192	@ 0xc0
 80070d0:	0612      	lsls	r2, r2, #24
 80070d2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80070d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070da:	4b2a      	ldr	r3, [pc, #168]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070dc:	2200      	movs	r2, #0
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070e0:	4b28      	ldr	r3, [pc, #160]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070e6:	4b27      	ldr	r3, [pc, #156]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070ec:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070ee:	2220      	movs	r2, #32
 80070f0:	2100      	movs	r1, #0
 80070f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80070f4:	4b23      	ldr	r3, [pc, #140]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070f6:	2221      	movs	r2, #33	@ 0x21
 80070f8:	2101      	movs	r1, #1
 80070fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070fc:	4b21      	ldr	r3, [pc, #132]	@ (8007184 <MX_ADC_Init+0xd8>)
 80070fe:	2200      	movs	r2, #0
 8007100:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007102:	4b20      	ldr	r3, [pc, #128]	@ (8007184 <MX_ADC_Init+0xd8>)
 8007104:	22c2      	movs	r2, #194	@ 0xc2
 8007106:	32ff      	adds	r2, #255	@ 0xff
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800710a:	4b1e      	ldr	r3, [pc, #120]	@ (8007184 <MX_ADC_Init+0xd8>)
 800710c:	222c      	movs	r2, #44	@ 0x2c
 800710e:	2100      	movs	r1, #0
 8007110:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007112:	4b1c      	ldr	r3, [pc, #112]	@ (8007184 <MX_ADC_Init+0xd8>)
 8007114:	2204      	movs	r2, #4
 8007116:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007118:	4b1a      	ldr	r3, [pc, #104]	@ (8007184 <MX_ADC_Init+0xd8>)
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800711e:	4b19      	ldr	r3, [pc, #100]	@ (8007184 <MX_ADC_Init+0xd8>)
 8007120:	2200      	movs	r2, #0
 8007122:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007124:	4b17      	ldr	r3, [pc, #92]	@ (8007184 <MX_ADC_Init+0xd8>)
 8007126:	2200      	movs	r2, #0
 8007128:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800712a:	4b16      	ldr	r3, [pc, #88]	@ (8007184 <MX_ADC_Init+0xd8>)
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007130:	4b14      	ldr	r3, [pc, #80]	@ (8007184 <MX_ADC_Init+0xd8>)
 8007132:	0018      	movs	r0, r3
 8007134:	f007 ff3e 	bl	800efb4 <HAL_ADC_Init>
 8007138:	1e03      	subs	r3, r0, #0
 800713a:	d001      	beq.n	8007140 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800713c:	f001 f8ec 	bl	8008318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007140:	003b      	movs	r3, r7
 8007142:	4a12      	ldr	r2, [pc, #72]	@ (800718c <MX_ADC_Init+0xe0>)
 8007144:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007146:	003b      	movs	r3, r7
 8007148:	2280      	movs	r2, #128	@ 0x80
 800714a:	0152      	lsls	r2, r2, #5
 800714c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800714e:	003a      	movs	r2, r7
 8007150:	4b0c      	ldr	r3, [pc, #48]	@ (8007184 <MX_ADC_Init+0xd8>)
 8007152:	0011      	movs	r1, r2
 8007154:	0018      	movs	r0, r3
 8007156:	f008 f99d 	bl	800f494 <HAL_ADC_ConfigChannel>
 800715a:	1e03      	subs	r3, r0, #0
 800715c:	d001      	beq.n	8007162 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800715e:	f001 f8db 	bl	8008318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007162:	003b      	movs	r3, r7
 8007164:	4a0a      	ldr	r2, [pc, #40]	@ (8007190 <MX_ADC_Init+0xe4>)
 8007166:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007168:	003a      	movs	r2, r7
 800716a:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <MX_ADC_Init+0xd8>)
 800716c:	0011      	movs	r1, r2
 800716e:	0018      	movs	r0, r3
 8007170:	f008 f990 	bl	800f494 <HAL_ADC_ConfigChannel>
 8007174:	1e03      	subs	r3, r0, #0
 8007176:	d001      	beq.n	800717c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007178:	f001 f8ce 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800717c:	46c0      	nop			@ (mov r8, r8)
 800717e:	46bd      	mov	sp, r7
 8007180:	b002      	add	sp, #8
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000da4 	.word	0x20000da4
 8007188:	40012400 	.word	0x40012400
 800718c:	38004000 	.word	0x38004000
 8007190:	3c008000 	.word	0x3c008000

08007194 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b089      	sub	sp, #36	@ 0x24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800719c:	240c      	movs	r4, #12
 800719e:	193b      	adds	r3, r7, r4
 80071a0:	0018      	movs	r0, r3
 80071a2:	2314      	movs	r3, #20
 80071a4:	001a      	movs	r2, r3
 80071a6:	2100      	movs	r1, #0
 80071a8:	f019 f8f4 	bl	8020394 <memset>
  if(adcHandle->Instance==ADC1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a14      	ldr	r2, [pc, #80]	@ (8007204 <HAL_ADC_MspInit+0x70>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d121      	bne.n	80071fa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80071b6:	4b14      	ldr	r3, [pc, #80]	@ (8007208 <HAL_ADC_MspInit+0x74>)
 80071b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ba:	4b13      	ldr	r3, [pc, #76]	@ (8007208 <HAL_ADC_MspInit+0x74>)
 80071bc:	2180      	movs	r1, #128	@ 0x80
 80071be:	0089      	lsls	r1, r1, #2
 80071c0:	430a      	orrs	r2, r1
 80071c2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071c4:	4b10      	ldr	r3, [pc, #64]	@ (8007208 <HAL_ADC_MspInit+0x74>)
 80071c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007208 <HAL_ADC_MspInit+0x74>)
 80071ca:	2104      	movs	r1, #4
 80071cc:	430a      	orrs	r2, r1
 80071ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007208 <HAL_ADC_MspInit+0x74>)
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	2204      	movs	r2, #4
 80071d6:	4013      	ands	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071dc:	193b      	adds	r3, r7, r4
 80071de:	2230      	movs	r2, #48	@ 0x30
 80071e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071e2:	193b      	adds	r3, r7, r4
 80071e4:	2203      	movs	r2, #3
 80071e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e8:	193b      	adds	r3, r7, r4
 80071ea:	2200      	movs	r2, #0
 80071ec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	4a06      	ldr	r2, [pc, #24]	@ (800720c <HAL_ADC_MspInit+0x78>)
 80071f2:	0019      	movs	r1, r3
 80071f4:	0010      	movs	r0, r2
 80071f6:	f008 ff6b 	bl	80100d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80071fa:	46c0      	nop			@ (mov r8, r8)
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b009      	add	sp, #36	@ 0x24
 8007200:	bd90      	pop	{r4, r7, pc}
 8007202:	46c0      	nop			@ (mov r8, r8)
 8007204:	40012400 	.word	0x40012400
 8007208:	40021000 	.word	0x40021000
 800720c:	50000800 	.word	0x50000800

08007210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007216:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <MX_DMA_Init+0x48>)
 8007218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800721a:	4b0f      	ldr	r3, [pc, #60]	@ (8007258 <MX_DMA_Init+0x48>)
 800721c:	2101      	movs	r1, #1
 800721e:	430a      	orrs	r2, r1
 8007220:	631a      	str	r2, [r3, #48]	@ 0x30
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <MX_DMA_Init+0x48>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	2201      	movs	r2, #1
 8007228:	4013      	ands	r3, r2
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	200a      	movs	r0, #10
 8007234:	f008 fafa 	bl	800f82c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007238:	200a      	movs	r0, #10
 800723a:	f008 fb0c 	bl	800f856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800723e:	2200      	movs	r2, #0
 8007240:	2103      	movs	r1, #3
 8007242:	200b      	movs	r0, #11
 8007244:	f008 faf2 	bl	800f82c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007248:	200b      	movs	r0, #11
 800724a:	f008 fb04 	bl	800f856 <HAL_NVIC_EnableIRQ>

}
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	40021000 	.word	0x40021000

0800725c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b7f      	cmp	r3, #127	@ 0x7f
 800726c:	d901      	bls.n	8007272 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800726e:	237f      	movs	r3, #127	@ 0x7f
 8007270:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007272:	2017      	movs	r0, #23
 8007274:	183b      	adds	r3, r7, r0
 8007276:	490d      	ldr	r1, [pc, #52]	@ (80072ac <accessLUT10log10+0x50>)
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	188a      	adds	r2, r1, r2
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007280:	0001      	movs	r1, r0
 8007282:	187b      	adds	r3, r7, r1
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2206      	movs	r2, #6
 8007288:	4113      	asrs	r3, r2
 800728a:	001a      	movs	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007290:	187b      	adds	r3, r7, r1
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2106      	movs	r1, #6
 800729a:	408b      	lsls	r3, r1
 800729c:	1ad2      	subs	r2, r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	601a      	str	r2, [r3, #0]
}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	46bd      	mov	sp, r7
 80072a6:	b006      	add	sp, #24
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	0802560c 	.word	0x0802560c

080072b0 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80072b0:	b5b0      	push	{r4, r5, r7, lr}
 80072b2:	b090      	sub	sp, #64	@ 0x40
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6138      	str	r0, [r7, #16]
 80072b8:	6179      	str	r1, [r7, #20]
 80072ba:	60fa      	str	r2, [r7, #12]
 80072bc:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80072be:	2308      	movs	r3, #8
 80072c0:	001a      	movs	r2, r3
 80072c2:	3a20      	subs	r2, #32
 80072c4:	2a00      	cmp	r2, #0
 80072c6:	db03      	blt.n	80072d0 <efficient10log10+0x20>
 80072c8:	2101      	movs	r1, #1
 80072ca:	4091      	lsls	r1, r2
 80072cc:	000d      	movs	r5, r1
 80072ce:	e008      	b.n	80072e2 <efficient10log10+0x32>
 80072d0:	2220      	movs	r2, #32
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	2101      	movs	r1, #1
 80072d6:	40d1      	lsrs	r1, r2
 80072d8:	000a      	movs	r2, r1
 80072da:	2100      	movs	r1, #0
 80072dc:	4099      	lsls	r1, r3
 80072de:	000d      	movs	r5, r1
 80072e0:	4315      	orrs	r5, r2
 80072e2:	2201      	movs	r2, #1
 80072e4:	409a      	lsls	r2, r3
 80072e6:	0014      	movs	r4, r2
 80072e8:	2201      	movs	r2, #1
 80072ea:	4252      	negs	r2, r2
 80072ec:	17d3      	asrs	r3, r2, #31
 80072ee:	1912      	adds	r2, r2, r4
 80072f0:	416b      	adcs	r3, r5
 80072f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80072f6:	2336      	movs	r3, #54	@ 0x36
 80072f8:	2208      	movs	r2, #8
 80072fa:	189b      	adds	r3, r3, r2
 80072fc:	19db      	adds	r3, r3, r7
 80072fe:	2200      	movs	r2, #0
 8007300:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007302:	e017      	b.n	8007334 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	0852      	lsrs	r2, r2, #1
 800730c:	603a      	str	r2, [r7, #0]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	431a      	orrs	r2, r3
 8007312:	603a      	str	r2, [r7, #0]
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	687c      	ldr	r4, [r7, #4]
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	617c      	str	r4, [r7, #20]
        bShift++;
 8007322:	2136      	movs	r1, #54	@ 0x36
 8007324:	2008      	movs	r0, #8
 8007326:	180b      	adds	r3, r1, r0
 8007328:	19db      	adds	r3, r3, r7
 800732a:	881a      	ldrh	r2, [r3, #0]
 800732c:	180b      	adds	r3, r1, r0
 800732e:	19db      	adds	r3, r3, r7
 8007330:	3201      	adds	r2, #1
 8007332:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	429a      	cmp	r2, r3
 800733a:	d8e3      	bhi.n	8007304 <efficient10log10+0x54>
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	429a      	cmp	r2, r3
 8007342:	d103      	bne.n	800734c <efficient10log10+0x9c>
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	429a      	cmp	r2, r3
 800734a:	d8db      	bhi.n	8007304 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	2308      	movs	r3, #8
 8007350:	3b01      	subs	r3, #1
 8007352:	2101      	movs	r1, #1
 8007354:	4099      	lsls	r1, r3
 8007356:	000b      	movs	r3, r1
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007364:	231c      	movs	r3, #28
 8007366:	2408      	movs	r4, #8
 8007368:	191b      	adds	r3, r3, r4
 800736a:	19da      	adds	r2, r3, r7
 800736c:	2320      	movs	r3, #32
 800736e:	191b      	adds	r3, r3, r4
 8007370:	19d9      	adds	r1, r3, r7
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	0018      	movs	r0, r3
 8007376:	f7ff ff71 	bl	800725c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800737a:	2215      	movs	r2, #21
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007380:	2036      	movs	r0, #54	@ 0x36
 8007382:	1902      	adds	r2, r0, r4
 8007384:	19d2      	adds	r2, r2, r7
 8007386:	8812      	ldrh	r2, [r2, #0]
 8007388:	2103      	movs	r1, #3
 800738a:	434a      	muls	r2, r1
 800738c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800738e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007390:	0021      	movs	r1, r4
 8007392:	1843      	adds	r3, r0, r1
 8007394:	19db      	adds	r3, r3, r7
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	2201      	movs	r2, #1
 800739a:	4353      	muls	r3, r2
 800739c:	2203      	movs	r2, #3
 800739e:	4113      	asrs	r3, r2
 80073a0:	001a      	movs	r2, r3
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80073a6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80073a8:	2314      	movs	r3, #20
 80073aa:	185b      	adds	r3, r3, r1
 80073ac:	19da      	adds	r2, r3, r7
 80073ae:	2318      	movs	r3, #24
 80073b0:	185b      	adds	r3, r3, r1
 80073b2:	19db      	adds	r3, r3, r7
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 f80a 	bl	80073d0 <correctIntFracNumber>
    integerPart[0] = intPart;
 80073bc:	6a3a      	ldr	r2, [r7, #32]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	601a      	str	r2, [r3, #0]
}
 80073c8:	46c0      	nop			@ (mov r8, r8)
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b010      	add	sp, #64	@ 0x40
 80073ce:	bdb0      	pop	{r4, r5, r7, pc}

080073d0 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80073da:	e00a      	b.n	80073f2 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b0a      	subs	r3, #10
 80073ec:	001a      	movs	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	dcf0      	bgt.n	80073dc <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80073fa:	e00a      	b.n	8007412 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330a      	adds	r3, #10
 800740c:	001a      	movs	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3309      	adds	r3, #9
 8007418:	dbf0      	blt.n	80073fc <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	da0f      	bge.n	8007442 <correctIntFracNumber+0x72>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd0b      	ble.n	8007442 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3b0a      	subs	r3, #10
 800743a:	001a      	movs	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007440:	e012      	b.n	8007468 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd0e      	ble.n	8007468 <correctIntFracNumber+0x98>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	da0a      	bge.n	8007468 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	1e5a      	subs	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	330a      	adds	r3, #10
 8007462:	001a      	movs	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	601a      	str	r2, [r3, #0]
}
 8007468:	46c0      	nop			@ (mov r8, r8)
 800746a:	46bd      	mov	sp, r7
 800746c:	b002      	add	sp, #8
 800746e:	bd80      	pop	{r7, pc}

08007470 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b08b      	sub	sp, #44	@ 0x2c
 8007474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007476:	2414      	movs	r4, #20
 8007478:	193b      	adds	r3, r7, r4
 800747a:	0018      	movs	r0, r3
 800747c:	2314      	movs	r3, #20
 800747e:	001a      	movs	r2, r3
 8007480:	2100      	movs	r1, #0
 8007482:	f018 ff87 	bl	8020394 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007486:	4b8a      	ldr	r3, [pc, #552]	@ (80076b0 <MX_GPIO_Init+0x240>)
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	4b89      	ldr	r3, [pc, #548]	@ (80076b0 <MX_GPIO_Init+0x240>)
 800748c:	2104      	movs	r1, #4
 800748e:	430a      	orrs	r2, r1
 8007490:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007492:	4b87      	ldr	r3, [pc, #540]	@ (80076b0 <MX_GPIO_Init+0x240>)
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	2204      	movs	r2, #4
 8007498:	4013      	ands	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800749e:	4b84      	ldr	r3, [pc, #528]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a2:	4b83      	ldr	r3, [pc, #524]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074a4:	2180      	movs	r1, #128	@ 0x80
 80074a6:	430a      	orrs	r2, r1
 80074a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074aa:	4b81      	ldr	r3, [pc, #516]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ae:	2280      	movs	r2, #128	@ 0x80
 80074b0:	4013      	ands	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b6:	4b7e      	ldr	r3, [pc, #504]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ba:	4b7d      	ldr	r3, [pc, #500]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074bc:	2101      	movs	r1, #1
 80074be:	430a      	orrs	r2, r1
 80074c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074c2:	4b7b      	ldr	r3, [pc, #492]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	2201      	movs	r2, #1
 80074c8:	4013      	ands	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ce:	4b78      	ldr	r3, [pc, #480]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d2:	4b77      	ldr	r3, [pc, #476]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074d4:	2102      	movs	r1, #2
 80074d6:	430a      	orrs	r2, r1
 80074d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074da:	4b75      	ldr	r3, [pc, #468]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	2202      	movs	r2, #2
 80074e0:	4013      	ands	r3, r2
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074e6:	4b72      	ldr	r3, [pc, #456]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ea:	4b71      	ldr	r3, [pc, #452]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074ec:	2108      	movs	r1, #8
 80074ee:	430a      	orrs	r2, r1
 80074f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074f2:	4b6f      	ldr	r3, [pc, #444]	@ (80076b0 <MX_GPIO_Init+0x240>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	2208      	movs	r2, #8
 80074f8:	4013      	ands	r3, r2
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074fe:	4b6d      	ldr	r3, [pc, #436]	@ (80076b4 <MX_GPIO_Init+0x244>)
 8007500:	2201      	movs	r2, #1
 8007502:	2101      	movs	r1, #1
 8007504:	0018      	movs	r0, r3
 8007506:	f008 ff7e 	bl	8010406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800750a:	4b6a      	ldr	r3, [pc, #424]	@ (80076b4 <MX_GPIO_Init+0x244>)
 800750c:	2200      	movs	r2, #0
 800750e:	2102      	movs	r1, #2
 8007510:	0018      	movs	r0, r3
 8007512:	f008 ff78 	bl	8010406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007516:	4968      	ldr	r1, [pc, #416]	@ (80076b8 <MX_GPIO_Init+0x248>)
 8007518:	4b68      	ldr	r3, [pc, #416]	@ (80076bc <MX_GPIO_Init+0x24c>)
 800751a:	2201      	movs	r2, #1
 800751c:	0018      	movs	r0, r3
 800751e:	f008 ff72 	bl	8010406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007522:	2380      	movs	r3, #128	@ 0x80
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	4866      	ldr	r0, [pc, #408]	@ (80076c0 <MX_GPIO_Init+0x250>)
 8007528:	2201      	movs	r2, #1
 800752a:	0019      	movs	r1, r3
 800752c:	f008 ff6b 	bl	8010406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007530:	2380      	movs	r3, #128	@ 0x80
 8007532:	015b      	lsls	r3, r3, #5
 8007534:	4862      	ldr	r0, [pc, #392]	@ (80076c0 <MX_GPIO_Init+0x250>)
 8007536:	2200      	movs	r2, #0
 8007538:	0019      	movs	r1, r3
 800753a:	f008 ff64 	bl	8010406 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800753e:	193b      	adds	r3, r7, r4
 8007540:	4a60      	ldr	r2, [pc, #384]	@ (80076c4 <MX_GPIO_Init+0x254>)
 8007542:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007544:	193b      	adds	r3, r7, r4
 8007546:	2203      	movs	r2, #3
 8007548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754a:	193b      	adds	r3, r7, r4
 800754c:	2200      	movs	r2, #0
 800754e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007550:	193b      	adds	r3, r7, r4
 8007552:	4a5b      	ldr	r2, [pc, #364]	@ (80076c0 <MX_GPIO_Init+0x250>)
 8007554:	0019      	movs	r1, r3
 8007556:	0010      	movs	r0, r2
 8007558:	f008 fdba 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800755c:	193b      	adds	r3, r7, r4
 800755e:	2203      	movs	r2, #3
 8007560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007562:	193b      	adds	r3, r7, r4
 8007564:	2201      	movs	r2, #1
 8007566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007568:	193b      	adds	r3, r7, r4
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800756e:	193b      	adds	r3, r7, r4
 8007570:	2200      	movs	r2, #0
 8007572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007574:	193b      	adds	r3, r7, r4
 8007576:	4a4f      	ldr	r2, [pc, #316]	@ (80076b4 <MX_GPIO_Init+0x244>)
 8007578:	0019      	movs	r1, r3
 800757a:	0010      	movs	r0, r2
 800757c:	f008 fda8 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007580:	193b      	adds	r3, r7, r4
 8007582:	2270      	movs	r2, #112	@ 0x70
 8007584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007586:	193b      	adds	r3, r7, r4
 8007588:	2203      	movs	r2, #3
 800758a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007592:	193a      	adds	r2, r7, r4
 8007594:	23a0      	movs	r3, #160	@ 0xa0
 8007596:	05db      	lsls	r3, r3, #23
 8007598:	0011      	movs	r1, r2
 800759a:	0018      	movs	r0, r3
 800759c:	f008 fd98 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80075a0:	193b      	adds	r3, r7, r4
 80075a2:	22c0      	movs	r2, #192	@ 0xc0
 80075a4:	0052      	lsls	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075a8:	193b      	adds	r3, r7, r4
 80075aa:	2200      	movs	r2, #0
 80075ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	193b      	adds	r3, r7, r4
 80075b0:	2200      	movs	r2, #0
 80075b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b4:	193a      	adds	r2, r7, r4
 80075b6:	23a0      	movs	r3, #160	@ 0xa0
 80075b8:	05db      	lsls	r3, r3, #23
 80075ba:	0011      	movs	r1, r2
 80075bc:	0018      	movs	r0, r3
 80075be:	f008 fd87 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80075c2:	193b      	adds	r3, r7, r4
 80075c4:	4a3c      	ldr	r2, [pc, #240]	@ (80076b8 <MX_GPIO_Init+0x248>)
 80075c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c8:	193b      	adds	r3, r7, r4
 80075ca:	2201      	movs	r2, #1
 80075cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ce:	193b      	adds	r3, r7, r4
 80075d0:	2200      	movs	r2, #0
 80075d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d4:	193b      	adds	r3, r7, r4
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	4a37      	ldr	r2, [pc, #220]	@ (80076bc <MX_GPIO_Init+0x24c>)
 80075de:	0019      	movs	r1, r3
 80075e0:	0010      	movs	r0, r2
 80075e2:	f008 fd75 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	4a37      	ldr	r2, [pc, #220]	@ (80076c8 <MX_GPIO_Init+0x258>)
 80075ea:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	2203      	movs	r2, #3
 80075f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	2200      	movs	r2, #0
 80075f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f8:	193b      	adds	r3, r7, r4
 80075fa:	4a30      	ldr	r2, [pc, #192]	@ (80076bc <MX_GPIO_Init+0x24c>)
 80075fc:	0019      	movs	r1, r3
 80075fe:	0010      	movs	r0, r2
 8007600:	f008 fd66 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007604:	0021      	movs	r1, r4
 8007606:	187b      	adds	r3, r7, r1
 8007608:	2280      	movs	r2, #128	@ 0x80
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800760e:	000c      	movs	r4, r1
 8007610:	193b      	adds	r3, r7, r4
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007616:	193b      	adds	r3, r7, r4
 8007618:	2200      	movs	r2, #0
 800761a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800761c:	193b      	adds	r3, r7, r4
 800761e:	4a28      	ldr	r2, [pc, #160]	@ (80076c0 <MX_GPIO_Init+0x250>)
 8007620:	0019      	movs	r1, r3
 8007622:	0010      	movs	r0, r2
 8007624:	f008 fd54 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007628:	193b      	adds	r3, r7, r4
 800762a:	2280      	movs	r2, #128	@ 0x80
 800762c:	0212      	lsls	r2, r2, #8
 800762e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007630:	193b      	adds	r3, r7, r4
 8007632:	2288      	movs	r2, #136	@ 0x88
 8007634:	0352      	lsls	r2, r2, #13
 8007636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007638:	193b      	adds	r3, r7, r4
 800763a:	2200      	movs	r2, #0
 800763c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800763e:	193a      	adds	r2, r7, r4
 8007640:	23a0      	movs	r3, #160	@ 0xa0
 8007642:	05db      	lsls	r3, r3, #23
 8007644:	0011      	movs	r1, r2
 8007646:	0018      	movs	r0, r3
 8007648:	f008 fd42 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800764c:	0021      	movs	r1, r4
 800764e:	187b      	adds	r3, r7, r1
 8007650:	22c0      	movs	r2, #192	@ 0xc0
 8007652:	0152      	lsls	r2, r2, #5
 8007654:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007656:	000c      	movs	r4, r1
 8007658:	193b      	adds	r3, r7, r4
 800765a:	2201      	movs	r2, #1
 800765c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765e:	193b      	adds	r3, r7, r4
 8007660:	2200      	movs	r2, #0
 8007662:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007664:	193b      	adds	r3, r7, r4
 8007666:	2200      	movs	r2, #0
 8007668:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800766a:	193b      	adds	r3, r7, r4
 800766c:	4a14      	ldr	r2, [pc, #80]	@ (80076c0 <MX_GPIO_Init+0x250>)
 800766e:	0019      	movs	r1, r3
 8007670:	0010      	movs	r0, r2
 8007672:	f008 fd2d 	bl	80100d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007676:	0021      	movs	r1, r4
 8007678:	187b      	adds	r3, r7, r1
 800767a:	2204      	movs	r2, #4
 800767c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800767e:	187b      	adds	r3, r7, r1
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007684:	187b      	adds	r3, r7, r1
 8007686:	2201      	movs	r2, #1
 8007688:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800768a:	187b      	adds	r3, r7, r1
 800768c:	4a0f      	ldr	r2, [pc, #60]	@ (80076cc <MX_GPIO_Init+0x25c>)
 800768e:	0019      	movs	r1, r3
 8007690:	0010      	movs	r0, r2
 8007692:	f008 fd1d 	bl	80100d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	2007      	movs	r0, #7
 800769c:	f008 f8c6 	bl	800f82c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80076a0:	2007      	movs	r0, #7
 80076a2:	f008 f8d8 	bl	800f856 <HAL_NVIC_EnableIRQ>

}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b00b      	add	sp, #44	@ 0x2c
 80076ac:	bd90      	pop	{r4, r7, pc}
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	40021000 	.word	0x40021000
 80076b4:	50001c00 	.word	0x50001c00
 80076b8:	00000301 	.word	0x00000301
 80076bc:	50000400 	.word	0x50000400
 80076c0:	50000800 	.word	0x50000800
 80076c4:	0000200c 	.word	0x0000200c
 80076c8:	0000403e 	.word	0x0000403e
 80076cc:	50000c00 	.word	0x50000c00

080076d0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2100      	movs	r1, #0
 80076de:	0018      	movs	r0, r3
 80076e0:	f00f fa6c 	bl	8016bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2108      	movs	r1, #8
 80076e8:	0018      	movs	r0, r3
 80076ea:	f00f fa67 	bl	8016bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	210c      	movs	r1, #12
 80076f2:	0018      	movs	r0, r3
 80076f4:	f00f fa62 	bl	8016bbc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80076f8:	2380      	movs	r3, #128	@ 0x80
 80076fa:	05db      	lsls	r3, r3, #23
 80076fc:	22fa      	movs	r2, #250	@ 0xfa
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007702:	2380      	movs	r3, #128	@ 0x80
 8007704:	05db      	lsls	r3, r3, #23
 8007706:	22fa      	movs	r2, #250	@ 0xfa
 8007708:	0112      	lsls	r2, r2, #4
 800770a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	05db      	lsls	r3, r3, #23
 8007710:	22fa      	movs	r2, #250	@ 0xfa
 8007712:	0112      	lsls	r2, r2, #4
 8007714:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007716:	2380      	movs	r3, #128	@ 0x80
 8007718:	05db      	lsls	r3, r3, #23
 800771a:	22fa      	movs	r2, #250	@ 0xfa
 800771c:	0112      	lsls	r2, r2, #4
 800771e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2100      	movs	r1, #0
 8007724:	0018      	movs	r0, r3
 8007726:	f00f fa49 	bl	8016bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2104      	movs	r1, #4
 800772e:	0018      	movs	r0, r3
 8007730:	f00f fa44 	bl	8016bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2108      	movs	r1, #8
 8007738:	0018      	movs	r0, r3
 800773a:	f00f fa3f 	bl	8016bbc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800773e:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <GPIO_InitPWMLEDs+0x98>)
 8007740:	22fa      	movs	r2, #250	@ 0xfa
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007746:	4b08      	ldr	r3, [pc, #32]	@ (8007768 <GPIO_InitPWMLEDs+0x98>)
 8007748:	22fa      	movs	r2, #250	@ 0xfa
 800774a:	0112      	lsls	r2, r2, #4
 800774c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800774e:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <GPIO_InitPWMLEDs+0x98>)
 8007750:	22fa      	movs	r2, #250	@ 0xfa
 8007752:	0112      	lsls	r2, r2, #4
 8007754:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007756:	4b04      	ldr	r3, [pc, #16]	@ (8007768 <GPIO_InitPWMLEDs+0x98>)
 8007758:	22fa      	movs	r2, #250	@ 0xfa
 800775a:	0112      	lsls	r2, r2, #4
 800775c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800775e:	46c0      	nop			@ (mov r8, r8)
 8007760:	46bd      	mov	sp, r7
 8007762:	b002      	add	sp, #8
 8007764:	bd80      	pop	{r7, pc}
 8007766:	46c0      	nop			@ (mov r8, r8)
 8007768:	40000400 	.word	0x40000400

0800776c <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	0018      	movs	r0, r3
 8007776:	2314      	movs	r3, #20
 8007778:	001a      	movs	r2, r3
 800777a:	2100      	movs	r1, #0
 800777c:	f018 fe0a 	bl	8020394 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8007780:	1d3b      	adds	r3, r7, #4
 8007782:	2205      	movs	r2, #5
 8007784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007786:	1d3b      	adds	r3, r7, #4
 8007788:	2203      	movs	r2, #3
 800778a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	2200      	movs	r2, #0
 8007790:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007792:	1d3a      	adds	r2, r7, #4
 8007794:	23a0      	movs	r3, #160	@ 0xa0
 8007796:	05db      	lsls	r3, r3, #23
 8007798:	0011      	movs	r1, r2
 800779a:	0018      	movs	r0, r3
 800779c:	f008 fc98 	bl	80100d0 <HAL_GPIO_Init>
}
 80077a0:	46c0      	nop			@ (mov r8, r8)
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b006      	add	sp, #24
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077ac:	4b1b      	ldr	r3, [pc, #108]	@ (800781c <MX_I2C1_Init+0x74>)
 80077ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007820 <MX_I2C1_Init+0x78>)
 80077b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80077b2:	4b1a      	ldr	r3, [pc, #104]	@ (800781c <MX_I2C1_Init+0x74>)
 80077b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007824 <MX_I2C1_Init+0x7c>)
 80077b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80077b8:	4b18      	ldr	r3, [pc, #96]	@ (800781c <MX_I2C1_Init+0x74>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077be:	4b17      	ldr	r3, [pc, #92]	@ (800781c <MX_I2C1_Init+0x74>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077c4:	4b15      	ldr	r3, [pc, #84]	@ (800781c <MX_I2C1_Init+0x74>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077ca:	4b14      	ldr	r3, [pc, #80]	@ (800781c <MX_I2C1_Init+0x74>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077d0:	4b12      	ldr	r3, [pc, #72]	@ (800781c <MX_I2C1_Init+0x74>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077d6:	4b11      	ldr	r3, [pc, #68]	@ (800781c <MX_I2C1_Init+0x74>)
 80077d8:	2200      	movs	r2, #0
 80077da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077dc:	4b0f      	ldr	r3, [pc, #60]	@ (800781c <MX_I2C1_Init+0x74>)
 80077de:	2200      	movs	r2, #0
 80077e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077e2:	4b0e      	ldr	r3, [pc, #56]	@ (800781c <MX_I2C1_Init+0x74>)
 80077e4:	0018      	movs	r0, r3
 80077e6:	f008 fe47 	bl	8010478 <HAL_I2C_Init>
 80077ea:	1e03      	subs	r3, r0, #0
 80077ec:	d001      	beq.n	80077f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077ee:	f000 fd93 	bl	8008318 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077f2:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <MX_I2C1_Init+0x74>)
 80077f4:	2100      	movs	r1, #0
 80077f6:	0018      	movs	r0, r3
 80077f8:	f00b fa18 	bl	8012c2c <HAL_I2CEx_ConfigAnalogFilter>
 80077fc:	1e03      	subs	r3, r0, #0
 80077fe:	d001      	beq.n	8007804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007800:	f000 fd8a 	bl	8008318 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007804:	4b05      	ldr	r3, [pc, #20]	@ (800781c <MX_I2C1_Init+0x74>)
 8007806:	2100      	movs	r1, #0
 8007808:	0018      	movs	r0, r3
 800780a:	f00b fa5b 	bl	8012cc4 <HAL_I2CEx_ConfigDigitalFilter>
 800780e:	1e03      	subs	r3, r0, #0
 8007810:	d001      	beq.n	8007816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007812:	f000 fd81 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000e00 	.word	0x20000e00
 8007820:	40005400 	.word	0x40005400
 8007824:	00503d58 	.word	0x00503d58

08007828 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800782c:	4b1b      	ldr	r3, [pc, #108]	@ (800789c <MX_I2C2_Init+0x74>)
 800782e:	4a1c      	ldr	r2, [pc, #112]	@ (80078a0 <MX_I2C2_Init+0x78>)
 8007830:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007832:	4b1a      	ldr	r3, [pc, #104]	@ (800789c <MX_I2C2_Init+0x74>)
 8007834:	4a1b      	ldr	r2, [pc, #108]	@ (80078a4 <MX_I2C2_Init+0x7c>)
 8007836:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007838:	4b18      	ldr	r3, [pc, #96]	@ (800789c <MX_I2C2_Init+0x74>)
 800783a:	2200      	movs	r2, #0
 800783c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800783e:	4b17      	ldr	r3, [pc, #92]	@ (800789c <MX_I2C2_Init+0x74>)
 8007840:	2201      	movs	r2, #1
 8007842:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007844:	4b15      	ldr	r3, [pc, #84]	@ (800789c <MX_I2C2_Init+0x74>)
 8007846:	2200      	movs	r2, #0
 8007848:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800784a:	4b14      	ldr	r3, [pc, #80]	@ (800789c <MX_I2C2_Init+0x74>)
 800784c:	2200      	movs	r2, #0
 800784e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007850:	4b12      	ldr	r3, [pc, #72]	@ (800789c <MX_I2C2_Init+0x74>)
 8007852:	2200      	movs	r2, #0
 8007854:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007856:	4b11      	ldr	r3, [pc, #68]	@ (800789c <MX_I2C2_Init+0x74>)
 8007858:	2200      	movs	r2, #0
 800785a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800785c:	4b0f      	ldr	r3, [pc, #60]	@ (800789c <MX_I2C2_Init+0x74>)
 800785e:	2200      	movs	r2, #0
 8007860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007862:	4b0e      	ldr	r3, [pc, #56]	@ (800789c <MX_I2C2_Init+0x74>)
 8007864:	0018      	movs	r0, r3
 8007866:	f008 fe07 	bl	8010478 <HAL_I2C_Init>
 800786a:	1e03      	subs	r3, r0, #0
 800786c:	d001      	beq.n	8007872 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800786e:	f000 fd53 	bl	8008318 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007872:	4b0a      	ldr	r3, [pc, #40]	@ (800789c <MX_I2C2_Init+0x74>)
 8007874:	2100      	movs	r1, #0
 8007876:	0018      	movs	r0, r3
 8007878:	f00b f9d8 	bl	8012c2c <HAL_I2CEx_ConfigAnalogFilter>
 800787c:	1e03      	subs	r3, r0, #0
 800787e:	d001      	beq.n	8007884 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007880:	f000 fd4a 	bl	8008318 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007884:	4b05      	ldr	r3, [pc, #20]	@ (800789c <MX_I2C2_Init+0x74>)
 8007886:	2100      	movs	r1, #0
 8007888:	0018      	movs	r0, r3
 800788a:	f00b fa1b 	bl	8012cc4 <HAL_I2CEx_ConfigDigitalFilter>
 800788e:	1e03      	subs	r3, r0, #0
 8007890:	d001      	beq.n	8007896 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007892:	f000 fd41 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007896:	46c0      	nop			@ (mov r8, r8)
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000e54 	.word	0x20000e54
 80078a0:	40005800 	.word	0x40005800
 80078a4:	00503d58 	.word	0x00503d58

080078a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b08b      	sub	sp, #44	@ 0x2c
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b0:	2414      	movs	r4, #20
 80078b2:	193b      	adds	r3, r7, r4
 80078b4:	0018      	movs	r0, r3
 80078b6:	2314      	movs	r3, #20
 80078b8:	001a      	movs	r2, r3
 80078ba:	2100      	movs	r1, #0
 80078bc:	f018 fd6a 	bl	8020394 <memset>
  if(i2cHandle->Instance==I2C1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a5d      	ldr	r2, [pc, #372]	@ (8007a3c <HAL_I2C_MspInit+0x194>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d000      	beq.n	80078cc <HAL_I2C_MspInit+0x24>
 80078ca:	e083      	b.n	80079d4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 80078ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d0:	4b5b      	ldr	r3, [pc, #364]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 80078d2:	2102      	movs	r1, #2
 80078d4:	430a      	orrs	r2, r1
 80078d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078d8:	4b59      	ldr	r3, [pc, #356]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	2202      	movs	r2, #2
 80078de:	4013      	ands	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078e4:	0021      	movs	r1, r4
 80078e6:	187b      	adds	r3, r7, r1
 80078e8:	22c0      	movs	r2, #192	@ 0xc0
 80078ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078ec:	187b      	adds	r3, r7, r1
 80078ee:	2212      	movs	r2, #18
 80078f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	2200      	movs	r2, #0
 80078f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	2203      	movs	r2, #3
 80078fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	2201      	movs	r2, #1
 8007902:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007904:	187b      	adds	r3, r7, r1
 8007906:	4a4f      	ldr	r2, [pc, #316]	@ (8007a44 <HAL_I2C_MspInit+0x19c>)
 8007908:	0019      	movs	r1, r3
 800790a:	0010      	movs	r0, r2
 800790c:	f008 fbe0 	bl	80100d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007910:	4b4b      	ldr	r3, [pc, #300]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 8007912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007914:	4b4a      	ldr	r3, [pc, #296]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 8007916:	2180      	movs	r1, #128	@ 0x80
 8007918:	0389      	lsls	r1, r1, #14
 800791a:	430a      	orrs	r2, r1
 800791c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800791e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007920:	4a4a      	ldr	r2, [pc, #296]	@ (8007a4c <HAL_I2C_MspInit+0x1a4>)
 8007922:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007924:	4b48      	ldr	r3, [pc, #288]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007926:	2206      	movs	r2, #6
 8007928:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800792a:	4b47      	ldr	r3, [pc, #284]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007930:	4b45      	ldr	r3, [pc, #276]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007932:	2200      	movs	r2, #0
 8007934:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007936:	4b44      	ldr	r3, [pc, #272]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007938:	2280      	movs	r2, #128	@ 0x80
 800793a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800793c:	4b42      	ldr	r3, [pc, #264]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 800793e:	2200      	movs	r2, #0
 8007940:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007942:	4b41      	ldr	r3, [pc, #260]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007944:	2200      	movs	r2, #0
 8007946:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007948:	4b3f      	ldr	r3, [pc, #252]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 800794a:	2200      	movs	r2, #0
 800794c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800794e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007950:	2200      	movs	r2, #0
 8007952:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007954:	4b3c      	ldr	r3, [pc, #240]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007956:	0018      	movs	r0, r3
 8007958:	f007 ff9e 	bl	800f898 <HAL_DMA_Init>
 800795c:	1e03      	subs	r3, r0, #0
 800795e:	d001      	beq.n	8007964 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007960:	f000 fcda 	bl	8008318 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a38      	ldr	r2, [pc, #224]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 8007968:	63da      	str	r2, [r3, #60]	@ 0x3c
 800796a:	4b37      	ldr	r3, [pc, #220]	@ (8007a48 <HAL_I2C_MspInit+0x1a0>)
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007970:	4b37      	ldr	r3, [pc, #220]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 8007972:	4a38      	ldr	r2, [pc, #224]	@ (8007a54 <HAL_I2C_MspInit+0x1ac>)
 8007974:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007976:	4b36      	ldr	r3, [pc, #216]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 8007978:	2206      	movs	r2, #6
 800797a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800797c:	4b34      	ldr	r3, [pc, #208]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 800797e:	2210      	movs	r2, #16
 8007980:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007982:	4b33      	ldr	r3, [pc, #204]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 8007984:	2200      	movs	r2, #0
 8007986:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007988:	4b31      	ldr	r3, [pc, #196]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 800798a:	2280      	movs	r2, #128	@ 0x80
 800798c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800798e:	4b30      	ldr	r3, [pc, #192]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 8007990:	2200      	movs	r2, #0
 8007992:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007994:	4b2e      	ldr	r3, [pc, #184]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 8007996:	2200      	movs	r2, #0
 8007998:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800799a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 800799c:	2200      	movs	r2, #0
 800799e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80079a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 80079a8:	0018      	movs	r0, r3
 80079aa:	f007 ff75 	bl	800f898 <HAL_DMA_Init>
 80079ae:	1e03      	subs	r3, r0, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80079b2:	f000 fcb1 	bl	8008318 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a25      	ldr	r2, [pc, #148]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 80079ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80079bc:	4b24      	ldr	r3, [pc, #144]	@ (8007a50 <HAL_I2C_MspInit+0x1a8>)
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80079c2:	2200      	movs	r2, #0
 80079c4:	2100      	movs	r1, #0
 80079c6:	2017      	movs	r0, #23
 80079c8:	f007 ff30 	bl	800f82c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80079cc:	2017      	movs	r0, #23
 80079ce:	f007 ff42 	bl	800f856 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079d2:	e02e      	b.n	8007a32 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007a58 <HAL_I2C_MspInit+0x1b0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d129      	bne.n	8007a32 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079de:	4b18      	ldr	r3, [pc, #96]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 80079e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e2:	4b17      	ldr	r3, [pc, #92]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 80079e4:	2102      	movs	r1, #2
 80079e6:	430a      	orrs	r2, r1
 80079e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079ea:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	2202      	movs	r2, #2
 80079f0:	4013      	ands	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80079f6:	2114      	movs	r1, #20
 80079f8:	187b      	adds	r3, r7, r1
 80079fa:	22c0      	movs	r2, #192	@ 0xc0
 80079fc:	0112      	lsls	r2, r2, #4
 80079fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a00:	187b      	adds	r3, r7, r1
 8007a02:	2212      	movs	r2, #18
 8007a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a06:	187b      	adds	r3, r7, r1
 8007a08:	2200      	movs	r2, #0
 8007a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	2203      	movs	r2, #3
 8007a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	2206      	movs	r2, #6
 8007a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a44 <HAL_I2C_MspInit+0x19c>)
 8007a1c:	0019      	movs	r1, r3
 8007a1e:	0010      	movs	r0, r2
 8007a20:	f008 fb56 	bl	80100d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 8007a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <HAL_I2C_MspInit+0x198>)
 8007a2a:	2180      	movs	r1, #128	@ 0x80
 8007a2c:	03c9      	lsls	r1, r1, #15
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b00b      	add	sp, #44	@ 0x2c
 8007a38:	bd90      	pop	{r4, r7, pc}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	40005400 	.word	0x40005400
 8007a40:	40021000 	.word	0x40021000
 8007a44:	50000400 	.word	0x50000400
 8007a48:	20000ea8 	.word	0x20000ea8
 8007a4c:	40020030 	.word	0x40020030
 8007a50:	20000ef0 	.word	0x20000ef0
 8007a54:	4002001c 	.word	0x4002001c
 8007a58:	40005800 	.word	0x40005800

08007a5c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a60:	4b10      	ldr	r3, [pc, #64]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a62:	4a11      	ldr	r2, [pc, #68]	@ (8007aa8 <MX_I2S2_Init+0x4c>)
 8007a64:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a66:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a68:	22c0      	movs	r2, #192	@ 0xc0
 8007a6a:	0092      	lsls	r2, r2, #2
 8007a6c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a74:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a76:	2203      	movs	r2, #3
 8007a78:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a80:	4b08      	ldr	r3, [pc, #32]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a82:	22fa      	movs	r2, #250	@ 0xfa
 8007a84:	0192      	lsls	r2, r2, #6
 8007a86:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a8e:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <MX_I2S2_Init+0x48>)
 8007a90:	0018      	movs	r0, r3
 8007a92:	f00b f963 	bl	8012d5c <HAL_I2S_Init>
 8007a96:	1e03      	subs	r3, r0, #0
 8007a98:	d001      	beq.n	8007a9e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007a9a:	f000 fc3d 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000f38 	.word	0x20000f38
 8007aa8:	40003800 	.word	0x40003800

08007aac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007aac:	b590      	push	{r4, r7, lr}
 8007aae:	b089      	sub	sp, #36	@ 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab4:	240c      	movs	r4, #12
 8007ab6:	193b      	adds	r3, r7, r4
 8007ab8:	0018      	movs	r0, r3
 8007aba:	2314      	movs	r3, #20
 8007abc:	001a      	movs	r2, r3
 8007abe:	2100      	movs	r1, #0
 8007ac0:	f018 fc68 	bl	8020394 <memset>
  if(i2sHandle->Instance==SPI2)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8007b80 <HAL_I2S_MspInit+0xd4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d154      	bne.n	8007b78 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ace:	4b2d      	ldr	r3, [pc, #180]	@ (8007b84 <HAL_I2S_MspInit+0xd8>)
 8007ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8007b84 <HAL_I2S_MspInit+0xd8>)
 8007ad4:	2180      	movs	r1, #128	@ 0x80
 8007ad6:	01c9      	lsls	r1, r1, #7
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007adc:	4b29      	ldr	r3, [pc, #164]	@ (8007b84 <HAL_I2S_MspInit+0xd8>)
 8007ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae0:	4b28      	ldr	r3, [pc, #160]	@ (8007b84 <HAL_I2S_MspInit+0xd8>)
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ae8:	4b26      	ldr	r3, [pc, #152]	@ (8007b84 <HAL_I2S_MspInit+0xd8>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	2202      	movs	r2, #2
 8007aee:	4013      	ands	r3, r2
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007af4:	193b      	adds	r3, r7, r4
 8007af6:	22b0      	movs	r2, #176	@ 0xb0
 8007af8:	0212      	lsls	r2, r2, #8
 8007afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007afc:	0021      	movs	r1, r4
 8007afe:	187b      	adds	r3, r7, r1
 8007b00:	2202      	movs	r2, #2
 8007b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b04:	187b      	adds	r3, r7, r1
 8007b06:	2200      	movs	r2, #0
 8007b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0a:	187b      	adds	r3, r7, r1
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	2200      	movs	r2, #0
 8007b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	4a1b      	ldr	r2, [pc, #108]	@ (8007b88 <HAL_I2S_MspInit+0xdc>)
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	0010      	movs	r0, r2
 8007b1e:	f008 fad7 	bl	80100d0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007b22:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b24:	4a1a      	ldr	r2, [pc, #104]	@ (8007b90 <HAL_I2S_MspInit+0xe4>)
 8007b26:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007b28:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b2e:	4b17      	ldr	r3, [pc, #92]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b34:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b3a:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b3c:	2280      	movs	r2, #128	@ 0x80
 8007b3e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b40:	4b12      	ldr	r3, [pc, #72]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b42:	2280      	movs	r2, #128	@ 0x80
 8007b44:	0052      	lsls	r2, r2, #1
 8007b46:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b48:	4b10      	ldr	r3, [pc, #64]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b4a:	2280      	movs	r2, #128	@ 0x80
 8007b4c:	00d2      	lsls	r2, r2, #3
 8007b4e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b50:	4b0e      	ldr	r3, [pc, #56]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b52:	2220      	movs	r2, #32
 8007b54:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b56:	4b0d      	ldr	r3, [pc, #52]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b5e:	0018      	movs	r0, r3
 8007b60:	f007 fe9a 	bl	800f898 <HAL_DMA_Init>
 8007b64:	1e03      	subs	r3, r0, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b68:	f000 fbd6 	bl	8008318 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a07      	ldr	r2, [pc, #28]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b70:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b72:	4b06      	ldr	r3, [pc, #24]	@ (8007b8c <HAL_I2S_MspInit+0xe0>)
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b78:	46c0      	nop			@ (mov r8, r8)
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	b009      	add	sp, #36	@ 0x24
 8007b7e:	bd90      	pop	{r4, r7, pc}
 8007b80:	40003800 	.word	0x40003800
 8007b84:	40021000 	.word	0x40021000
 8007b88:	50000400 	.word	0x50000400
 8007b8c:	20000f74 	.word	0x20000f74
 8007b90:	40020044 	.word	0x40020044

08007b94 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  testDone = true;
 8007b98:	4b1e      	ldr	r3, [pc, #120]	@ (8007c14 <SetTestDone+0x80>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007b9e:	23fa      	movs	r3, #250	@ 0xfa
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f007 f9a8 	bl	800eef8 <HAL_Delay>
  SetDBLED(false, false, true);
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2100      	movs	r1, #0
 8007bac:	2000      	movs	r0, #0
 8007bae:	f005 fb2d 	bl	800d20c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007bb2:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <SetTestDone+0x84>)
 8007bb4:	23fa      	movs	r3, #250	@ 0xfa
 8007bb6:	0119      	lsls	r1, r3, #4
 8007bb8:	23fa      	movs	r3, #250	@ 0xfa
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f005 faf1 	bl	800d1a4 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007bc2:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <SetTestDone+0x84>)
 8007bc4:	23fa      	movs	r3, #250	@ 0xfa
 8007bc6:	0119      	lsls	r1, r3, #4
 8007bc8:	23fa      	movs	r3, #250	@ 0xfa
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f005 fb67 	bl	800d2a0 <SetVocLED>
  HAL_Delay(500);
 8007bd2:	23fa      	movs	r3, #250	@ 0xfa
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f007 f98e 	bl	800eef8 <HAL_Delay>
  SetDBLED(false, false, false);
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2100      	movs	r1, #0
 8007be0:	2000      	movs	r0, #0
 8007be2:	f005 fb13 	bl	800d20c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007be6:	23fa      	movs	r3, #250	@ 0xfa
 8007be8:	011a      	lsls	r2, r3, #4
 8007bea:	23fa      	movs	r3, #250	@ 0xfa
 8007bec:	0119      	lsls	r1, r3, #4
 8007bee:	23fa      	movs	r3, #250	@ 0xfa
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f005 fad6 	bl	800d1a4 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007bf8:	23fa      	movs	r3, #250	@ 0xfa
 8007bfa:	011a      	lsls	r2, r3, #4
 8007bfc:	23fa      	movs	r3, #250	@ 0xfa
 8007bfe:	0119      	lsls	r1, r3, #4
 8007c00:	23fa      	movs	r3, #250	@ 0xfa
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	0018      	movs	r0, r3
 8007c06:	f005 fb4b 	bl	800d2a0 <SetVocLED>
  InitDone();
 8007c0a:	f005 fa1f 	bl	800d04c <InitDone>
}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000fbc 	.word	0x20000fbc
 8007c18:	00000bb8 	.word	0x00000bb8

08007c1c <FlashLEDs>:

void FlashLEDs(){
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007c22:	1dfb      	adds	r3, r7, #7
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e021      	b.n	8007c6e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f005 faec 	bl	800d20c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007c34:	4a12      	ldr	r2, [pc, #72]	@ (8007c80 <FlashLEDs+0x64>)
 8007c36:	23fa      	movs	r3, #250	@ 0xfa
 8007c38:	0119      	lsls	r1, r3, #4
 8007c3a:	23fa      	movs	r3, #250	@ 0xfa
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f005 fab0 	bl	800d1a4 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c44:	4a0e      	ldr	r2, [pc, #56]	@ (8007c80 <FlashLEDs+0x64>)
 8007c46:	23fa      	movs	r3, #250	@ 0xfa
 8007c48:	0119      	lsls	r1, r3, #4
 8007c4a:	23fa      	movs	r3, #250	@ 0xfa
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f005 fb26 	bl	800d2a0 <SetVocLED>
    HAL_Delay(250);
 8007c54:	20fa      	movs	r0, #250	@ 0xfa
 8007c56:	f007 f94f 	bl	800eef8 <HAL_Delay>
    SetLEDsOff();
 8007c5a:	f005 fc61 	bl	800d520 <SetLEDsOff>
    HAL_Delay(250);
 8007c5e:	20fa      	movs	r0, #250	@ 0xfa
 8007c60:	f007 f94a 	bl	800eef8 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c64:	1dfb      	adds	r3, r7, #7
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	1dfb      	adds	r3, r7, #7
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	1dfb      	adds	r3, r7, #7
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d9d9      	bls.n	8007c2a <FlashLEDs+0xe>
  }
}
 8007c76:	46c0      	nop			@ (mov r8, r8)
 8007c78:	46c0      	nop			@ (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	00000bb8 	.word	0x00000bb8

08007c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c8a:	f007 f8c5 	bl	800ee18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c8e:	f000 f9fd 	bl	800808c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c92:	f7ff fbed 	bl	8007470 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c96:	f7ff fabb 	bl	8007210 <MX_DMA_Init>
  MX_I2C1_Init();
 8007c9a:	f7ff fd85 	bl	80077a8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007c9e:	f7ff fedd 	bl	8007a5c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007ca2:	f006 fae9 	bl	800e278 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007ca6:	f7ff fdbf 	bl	8007828 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007caa:	f006 f8dd 	bl	800de68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007cae:	f006 f94f 	bl	800df50 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007cb2:	f006 fb15 	bl	800e2e0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007cb6:	f7ff f9f9 	bl	80070ac <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007cba:	f015 f879 	bl	801cdb0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007cbe:	f001 f945 	bl	8008f4c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007cc2:	f006 faa3 	bl	800e20c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007cc6:	f006 f9c1 	bl	800e04c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007cca:	4aca      	ldr	r2, [pc, #808]	@ (8007ff4 <main+0x370>)
 8007ccc:	4bca      	ldr	r3, [pc, #808]	@ (8007ff8 <main+0x374>)
 8007cce:	0011      	movs	r1, r2
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f7ff fcfd 	bl	80076d0 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8007cd6:	f006 fd45 	bl	800e764 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8007cda:	f005 ff4d 	bl	800db78 <Battery_Upkeep>
 8007cde:	0003      	movs	r3, r0
 8007ce0:	001a      	movs	r2, r3
 8007ce2:	4bc6      	ldr	r3, [pc, #792]	@ (8007ffc <main+0x378>)
 8007ce4:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8007ce6:	4bc5      	ldr	r3, [pc, #788]	@ (8007ffc <main+0x378>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d113      	bne.n	8007d16 <main+0x92>
    SetAllREDLED();
 8007cee:	f005 fc33 	bl	800d558 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007cf2:	f7fe fb01 	bl	80062f8 <ReadBatteryVoltage>
 8007cf6:	1c03      	adds	r3, r0, #0
 8007cf8:	1c18      	adds	r0, r3, #0
 8007cfa:	f7fb fbb3 	bl	8003464 <__aeabi_f2d>
 8007cfe:	0002      	movs	r2, r0
 8007d00:	000b      	movs	r3, r1
 8007d02:	48bf      	ldr	r0, [pc, #764]	@ (8008000 <main+0x37c>)
 8007d04:	49bf      	ldr	r1, [pc, #764]	@ (8008004 <main+0x380>)
 8007d06:	9200      	str	r2, [sp, #0]
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	0002      	movs	r2, r0
 8007d0c:	2002      	movs	r0, #2
 8007d0e:	f006 fca5 	bl	800e65c <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8007d12:	f7fe ff03 	bl	8006b1c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8007d16:	f7fe fbc5 	bl	80064a4 <UserButton_Pressed>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d004      	beq.n	8007d28 <main+0xa4>
    EnableESPProg();
 8007d1e:	f015 f917 	bl	801cf50 <EnableESPProg>
    ESP_Programming = true;
 8007d22:	4bb9      	ldr	r3, [pc, #740]	@ (8008008 <main+0x384>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007d28:	2003      	movs	r0, #3
 8007d2a:	f006 fd01 	bl	800e730 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007d2e:	49b7      	ldr	r1, [pc, #732]	@ (800800c <main+0x388>)
 8007d30:	4bb7      	ldr	r3, [pc, #732]	@ (8008010 <main+0x38c>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	0018      	movs	r0, r3
 8007d36:	f00f fba1 	bl	801747c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007d3a:	4bb6      	ldr	r3, [pc, #728]	@ (8008014 <main+0x390>)
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7fe ffbb 	bl	8006cb8 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007d42:	4ab5      	ldr	r2, [pc, #724]	@ (8008018 <main+0x394>)
 8007d44:	49b5      	ldr	r1, [pc, #724]	@ (800801c <main+0x398>)
 8007d46:	48b6      	ldr	r0, [pc, #728]	@ (8008020 <main+0x39c>)
 8007d48:	230b      	movs	r3, #11
 8007d4a:	f004 faf5 	bl	800c338 <soundInit>
 8007d4e:	0003      	movs	r3, r0
 8007d50:	001a      	movs	r2, r3
 8007d52:	2301      	movs	r3, #1
 8007d54:	4053      	eors	r3, r2
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007d5c:	4ab1      	ldr	r2, [pc, #708]	@ (8008024 <main+0x3a0>)
 8007d5e:	4bb2      	ldr	r3, [pc, #712]	@ (8008028 <main+0x3a4>)
 8007d60:	21fb      	movs	r1, #251	@ 0xfb
 8007d62:	0018      	movs	r0, r3
 8007d64:	f006 fd32 	bl	800e7cc <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007d68:	4bb0      	ldr	r3, [pc, #704]	@ (800802c <main+0x3a8>)
 8007d6a:	4ab1      	ldr	r2, [pc, #708]	@ (8008030 <main+0x3ac>)
 8007d6c:	49ab      	ldr	r1, [pc, #684]	@ (800801c <main+0x398>)
 8007d6e:	48b1      	ldr	r0, [pc, #708]	@ (8008034 <main+0x3b0>)
 8007d70:	f000 fb9e 	bl	80084b0 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8007d74:	f007 f8b6 	bl	800eee4 <HAL_GetTick>
 8007d78:	0003      	movs	r3, r0
 8007d7a:	4aaf      	ldr	r2, [pc, #700]	@ (8008038 <main+0x3b4>)
 8007d7c:	189a      	adds	r2, r3, r2
 8007d7e:	4baf      	ldr	r3, [pc, #700]	@ (800803c <main+0x3b8>)
 8007d80:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d82:	f7fe fb6f 	bl	8006464 <Check_USB_PowerOn>
 8007d86:	0003      	movs	r3, r0
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	4193      	sbcs	r3, r2
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4053      	eors	r3, r2
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	1c1a      	adds	r2, r3, #0
 8007d96:	2301      	movs	r3, #1
 8007d98:	4013      	ands	r3, r2
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	4ba8      	ldr	r3, [pc, #672]	@ (8008040 <main+0x3bc>)
 8007d9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007da0:	4ba8      	ldr	r3, [pc, #672]	@ (8008044 <main+0x3c0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0018      	movs	r0, r3
 8007da6:	f006 fc03 	bl	800e5b0 <TimestampIsReached>
 8007daa:	1e03      	subs	r3, r0, #0
 8007dac:	d00e      	beq.n	8007dcc <main+0x148>
      charge = Battery_Upkeep();
 8007dae:	f005 fee3 	bl	800db78 <Battery_Upkeep>
 8007db2:	0003      	movs	r3, r0
 8007db4:	001a      	movs	r2, r3
 8007db6:	4b91      	ldr	r3, [pc, #580]	@ (8007ffc <main+0x378>)
 8007db8:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007dba:	f007 f893 	bl	800eee4 <HAL_GetTick>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	4aa1      	ldr	r2, [pc, #644]	@ (8008048 <main+0x3c4>)
 8007dc2:	189a      	adds	r2, r3, r2
 8007dc4:	4b9f      	ldr	r3, [pc, #636]	@ (8008044 <main+0x3c0>)
 8007dc6:	601a      	str	r2, [r3, #0]
      showTime();
 8007dc8:	f7fe fb7c 	bl	80064c4 <showTime>

    }
    configCheck();
 8007dcc:	f005 fd38 	bl	800d840 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007dd0:	4b9e      	ldr	r3, [pc, #632]	@ (800804c <main+0x3c8>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007dd6:	4b89      	ldr	r3, [pc, #548]	@ (8007ffc <main+0x378>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d003      	beq.n	8007de6 <main+0x162>
 8007dde:	4b87      	ldr	r3, [pc, #540]	@ (8007ffc <main+0x378>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <main+0x16c>
          FlashLEDs();
 8007de6:	f7ff ff19 	bl	8007c1c <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007dea:	4b99      	ldr	r3, [pc, #612]	@ (8008050 <main+0x3cc>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007df0:	4b82      	ldr	r3, [pc, #520]	@ (8007ffc <main+0x378>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <main+0x188>
 8007df8:	4b96      	ldr	r3, [pc, #600]	@ (8008054 <main+0x3d0>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b09      	cmp	r3, #9
 8007dfe:	d105      	bne.n	8007e0c <main+0x188>
          batteryEmpty = true;
 8007e00:	4b95      	ldr	r3, [pc, #596]	@ (8008058 <main+0x3d4>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007e06:	f7fe fe89 	bl	8006b1c <Enter_Standby_Mode>
 8007e0a:	e002      	b.n	8007e12 <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8007e0c:	4b92      	ldr	r3, [pc, #584]	@ (8008058 <main+0x3d4>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007e12:	4b92      	ldr	r3, [pc, #584]	@ (800805c <main+0x3d8>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d100      	bne.n	8007e1c <main+0x198>
 8007e1a:	e0aa      	b.n	8007f72 <main+0x2ee>
 8007e1c:	4b7a      	ldr	r3, [pc, #488]	@ (8008008 <main+0x384>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	4053      	eors	r3, r2
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d100      	bne.n	8007e2c <main+0x1a8>
 8007e2a:	e0a2      	b.n	8007f72 <main+0x2ee>
 8007e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8008058 <main+0x3d4>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	4053      	eors	r3, r2
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d100      	bne.n	8007e3c <main+0x1b8>
 8007e3a:	e09a      	b.n	8007f72 <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007e3c:	4b80      	ldr	r3, [pc, #512]	@ (8008040 <main+0x3bc>)
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	4b87      	ldr	r3, [pc, #540]	@ (8008060 <main+0x3dc>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d020      	beq.n	8007e8a <main+0x206>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007e48:	f000 fab8 	bl	80083bc <IsSGPPresent>
 8007e4c:	1e03      	subs	r3, r0, #0
 8007e4e:	d009      	beq.n	8007e64 <main+0x1e0>
 8007e50:	4b83      	ldr	r3, [pc, #524]	@ (8008060 <main+0x3dc>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	4053      	eors	r3, r2
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <main+0x1e0>
          SetVOCSensorDIS_ENA(true);
 8007e5e:	2001      	movs	r0, #1
 8007e60:	f000 fab6 	bl	80083d0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007e64:	4b7f      	ldr	r3, [pc, #508]	@ (8008064 <main+0x3e0>)
 8007e66:	791b      	ldrb	r3, [r3, #4]
 8007e68:	2b34      	cmp	r3, #52	@ 0x34
 8007e6a:	d003      	beq.n	8007e74 <main+0x1f0>
 8007e6c:	4b7d      	ldr	r3, [pc, #500]	@ (8008064 <main+0x3e0>)
 8007e6e:	791b      	ldrb	r3, [r3, #4]
 8007e70:	2b35      	cmp	r3, #53	@ 0x35
 8007e72:	d106      	bne.n	8007e82 <main+0x1fe>
 8007e74:	4b7a      	ldr	r3, [pc, #488]	@ (8008060 <main+0x3dc>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <main+0x1fe>
          SetVOCSensorDIS_ENA(false);
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f000 faa7 	bl	80083d0 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e82:	4b77      	ldr	r3, [pc, #476]	@ (8008060 <main+0x3dc>)
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	4b6e      	ldr	r3, [pc, #440]	@ (8008040 <main+0x3bc>)
 8007e88:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007e8a:	4b77      	ldr	r3, [pc, #476]	@ (8008068 <main+0x3e4>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d00d      	beq.n	8007eae <main+0x22a>
 8007e92:	4b75      	ldr	r3, [pc, #468]	@ (8008068 <main+0x3e4>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d009      	beq.n	8007eae <main+0x22a>
 8007e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8008050 <main+0x3cc>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <main+0x22a>
        HIDSstate = HIDS_Upkeep();
 8007ea2:	f006 feff 	bl	800eca4 <HIDS_Upkeep>
 8007ea6:	0003      	movs	r3, r0
 8007ea8:	001a      	movs	r2, r3
 8007eaa:	4b70      	ldr	r3, [pc, #448]	@ (800806c <main+0x3e8>)
 8007eac:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007eae:	4b6f      	ldr	r3, [pc, #444]	@ (800806c <main+0x3e8>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d00d      	beq.n	8007ed2 <main+0x24e>
 8007eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800806c <main+0x3e8>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d009      	beq.n	8007ed2 <main+0x24e>
 8007ebe:	4b64      	ldr	r3, [pc, #400]	@ (8008050 <main+0x3cc>)
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <main+0x24e>
        SGPstate = SGP_Upkeep();
 8007ec6:	f004 f89d 	bl	800c004 <SGP_Upkeep>
 8007eca:	0003      	movs	r3, r0
 8007ecc:	001a      	movs	r2, r3
 8007ece:	4b66      	ldr	r3, [pc, #408]	@ (8008068 <main+0x3e4>)
 8007ed0:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8008050 <main+0x3cc>)
 8007ed4:	78db      	ldrb	r3, [r3, #3]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d005      	beq.n	8007ee6 <main+0x262>
        MICstate = Mic_Upkeep();
 8007eda:	f000 ff23 	bl	8008d24 <Mic_Upkeep>
 8007ede:	0003      	movs	r3, r0
 8007ee0:	001a      	movs	r2, r3
 8007ee2:	4b63      	ldr	r3, [pc, #396]	@ (8008070 <main+0x3ec>)
 8007ee4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007ee6:	4b45      	ldr	r3, [pc, #276]	@ (8007ffc <main+0x378>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d803      	bhi.n	8007ef6 <main+0x272>
 8007eee:	4b57      	ldr	r3, [pc, #348]	@ (800804c <main+0x3c8>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <main+0x2a0>
 8007ef6:	4b56      	ldr	r3, [pc, #344]	@ (8008050 <main+0x3cc>)
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d012      	beq.n	8007f24 <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007efe:	f001 f8b3 	bl	8009068 <sen5x_Get_sen5x_enable_state>
 8007f02:	0003      	movs	r3, r0
 8007f04:	001a      	movs	r2, r3
 8007f06:	2301      	movs	r3, #1
 8007f08:	4053      	eors	r3, r2
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <main+0x29a>
 8007f10:	4b53      	ldr	r3, [pc, #332]	@ (8008060 <main+0x3dc>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <main+0x29a>
          sen5x_enable(0);
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f001 f8e1 	bl	80090e0 <sen5x_enable>
        }
        sen5x_statemachine();
 8007f1e:	f001 fe65 	bl	8009bec <sen5x_statemachine>
 8007f22:	e020      	b.n	8007f66 <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007f24:	4b35      	ldr	r3, [pc, #212]	@ (8007ffc <main+0x378>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d81c      	bhi.n	8007f66 <main+0x2e2>
 8007f2c:	4b47      	ldr	r3, [pc, #284]	@ (800804c <main+0x3c8>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	4053      	eors	r3, r2
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d015      	beq.n	8007f66 <main+0x2e2>
 8007f3a:	4b45      	ldr	r3, [pc, #276]	@ (8008050 <main+0x3cc>)
 8007f3c:	789b      	ldrb	r3, [r3, #2]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 8007f42:	4a4c      	ldr	r2, [pc, #304]	@ (8008074 <main+0x3f0>)
 8007f44:	4b2f      	ldr	r3, [pc, #188]	@ (8008004 <main+0x380>)
 8007f46:	0019      	movs	r1, r3
 8007f48:	2002      	movs	r0, #2
 8007f4a:	f006 fb87 	bl	800e65c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007f4e:	4b40      	ldr	r3, [pc, #256]	@ (8008050 <main+0x3cc>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007f54:	4b48      	ldr	r3, [pc, #288]	@ (8008078 <main+0x3f4>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007f5a:	4b48      	ldr	r3, [pc, #288]	@ (800807c <main+0x3f8>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <main+0x2e2>
          sen5x_Power_Off();
 8007f62:	f001 f93f 	bl	80091e4 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007f66:	f7fd fa97 	bl	8005498 <ESP_Upkeep>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	001a      	movs	r2, r3
 8007f6e:	4b39      	ldr	r3, [pc, #228]	@ (8008054 <main+0x3d0>)
 8007f70:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f72:	4b3a      	ldr	r3, [pc, #232]	@ (800805c <main+0x3d8>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	4053      	eors	r3, r2
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00f      	beq.n	8007fa0 <main+0x31c>
 8007f80:	4b21      	ldr	r3, [pc, #132]	@ (8008008 <main+0x384>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2201      	movs	r2, #1
 8007f86:	4053      	eors	r3, r2
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d008      	beq.n	8007fa0 <main+0x31c>
 8007f8e:	4b32      	ldr	r3, [pc, #200]	@ (8008058 <main+0x3d4>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	4053      	eors	r3, r2
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <main+0x31c>
      Device_Test();  // for device with startup time
 8007f9c:	f000 fbce 	bl	800873c <Device_Test>
    }
    if (!usbPluggedIn) {
 8007fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8008060 <main+0x3dc>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4053      	eors	r3, r2
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d100      	bne.n	8007fb0 <main+0x32c>
 8007fae:	e6f7      	b.n	8007da0 <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007fb0:	4b33      	ldr	r3, [pc, #204]	@ (8008080 <main+0x3fc>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4053      	eors	r3, r2
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d100      	bne.n	8007fc0 <main+0x33c>
 8007fbe:	e6ef      	b.n	8007da0 <main+0x11c>
 8007fc0:	f000 fc3a 	bl	8008838 <AllDevicesReady>
 8007fc4:	1e03      	subs	r3, r0, #0
 8007fc6:	d100      	bne.n	8007fca <main+0x346>
 8007fc8:	e6ea      	b.n	8007da0 <main+0x11c>
 8007fca:	4b2e      	ldr	r3, [pc, #184]	@ (8008084 <main+0x400>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d100      	bne.n	8007fd4 <main+0x350>
 8007fd2:	e6e5      	b.n	8007da0 <main+0x11c>
        EnabledConnectedDevices();
 8007fd4:	f000 fc98 	bl	8008908 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8008088 <main+0x404>)
 8007fda:	789b      	ldrb	r3, [r3, #2]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <main+0x362>
 8007fe0:	23d7      	movs	r3, #215	@ 0xd7
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	e001      	b.n	8007fea <main+0x366>
 8007fe6:	23dc      	movs	r3, #220	@ 0xdc
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	0018      	movs	r0, r3
 8007fec:	f7fe fdb6 	bl	8006b5c <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007ff0:	e6d6      	b.n	8007da0 <main+0x11c>
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	20002068 	.word	0x20002068
 8007ff8:	20002028 	.word	0x20002028
 8007ffc:	20000fd8 	.word	0x20000fd8
 8008000:	080240bc 	.word	0x080240bc
 8008004:	080240d4 	.word	0x080240d4
 8008008:	20000fbd 	.word	0x20000fbd
 800800c:	20000fc4 	.word	0x20000fc4
 8008010:	200021a0 	.word	0x200021a0
 8008014:	2000104c 	.word	0x2000104c
 8008018:	200020a8 	.word	0x200020a8
 800801c:	20000f38 	.word	0x20000f38
 8008020:	20000f74 	.word	0x20000f74
 8008024:	080240d8 	.word	0x080240d8
 8008028:	080256dc 	.word	0x080256dc
 800802c:	20002258 	.word	0x20002258
 8008030:	20000da4 	.word	0x20000da4
 8008034:	20000e00 	.word	0x20000e00
 8008038:	000061a8 	.word	0x000061a8
 800803c:	20000fd4 	.word	0x20000fd4
 8008040:	20000fbf 	.word	0x20000fbf
 8008044:	20000088 	.word	0x20000088
 8008048:	0000c350 	.word	0x0000c350
 800804c:	20000084 	.word	0x20000084
 8008050:	20000fdc 	.word	0x20000fdc
 8008054:	20000fc3 	.word	0x20000fc3
 8008058:	20000fbe 	.word	0x20000fbe
 800805c:	20000fbc 	.word	0x20000fbc
 8008060:	20002009 	.word	0x20002009
 8008064:	20001074 	.word	0x20001074
 8008068:	20000fc0 	.word	0x20000fc0
 800806c:	20000fc1 	.word	0x20000fc1
 8008070:	20000fc2 	.word	0x20000fc2
 8008074:	080240ec 	.word	0x080240ec
 8008078:	20001072 	.word	0x20001072
 800807c:	20001071 	.word	0x20001071
 8008080:	2000200a 	.word	0x2000200a
 8008084:	20000558 	.word	0x20000558
 8008088:	20000fe0 	.word	0x20000fe0

0800808c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b09d      	sub	sp, #116	@ 0x74
 8008090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008092:	2438      	movs	r4, #56	@ 0x38
 8008094:	193b      	adds	r3, r7, r4
 8008096:	0018      	movs	r0, r3
 8008098:	2338      	movs	r3, #56	@ 0x38
 800809a:	001a      	movs	r2, r3
 800809c:	2100      	movs	r1, #0
 800809e:	f018 f979 	bl	8020394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080a2:	2324      	movs	r3, #36	@ 0x24
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	0018      	movs	r0, r3
 80080a8:	2314      	movs	r3, #20
 80080aa:	001a      	movs	r2, r3
 80080ac:	2100      	movs	r1, #0
 80080ae:	f018 f971 	bl	8020394 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080b2:	003b      	movs	r3, r7
 80080b4:	0018      	movs	r0, r3
 80080b6:	2324      	movs	r3, #36	@ 0x24
 80080b8:	001a      	movs	r2, r3
 80080ba:	2100      	movs	r1, #0
 80080bc:	f018 f96a 	bl	8020394 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080c0:	4b34      	ldr	r3, [pc, #208]	@ (8008194 <SystemClock_Config+0x108>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a34      	ldr	r2, [pc, #208]	@ (8008198 <SystemClock_Config+0x10c>)
 80080c6:	401a      	ands	r2, r3
 80080c8:	4b32      	ldr	r3, [pc, #200]	@ (8008194 <SystemClock_Config+0x108>)
 80080ca:	2180      	movs	r1, #128	@ 0x80
 80080cc:	0109      	lsls	r1, r1, #4
 80080ce:	430a      	orrs	r2, r1
 80080d0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080d2:	f00c ffa7 	bl	8015024 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80080d6:	4b31      	ldr	r3, [pc, #196]	@ (800819c <SystemClock_Config+0x110>)
 80080d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080da:	4a2f      	ldr	r2, [pc, #188]	@ (8008198 <SystemClock_Config+0x10c>)
 80080dc:	401a      	ands	r2, r3
 80080de:	4b2f      	ldr	r3, [pc, #188]	@ (800819c <SystemClock_Config+0x110>)
 80080e0:	2180      	movs	r1, #128	@ 0x80
 80080e2:	0149      	lsls	r1, r1, #5
 80080e4:	430a      	orrs	r2, r1
 80080e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80080e8:	193b      	adds	r3, r7, r4
 80080ea:	2226      	movs	r2, #38	@ 0x26
 80080ec:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80080ee:	193b      	adds	r3, r7, r4
 80080f0:	2280      	movs	r2, #128	@ 0x80
 80080f2:	0052      	lsls	r2, r2, #1
 80080f4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080f6:	0021      	movs	r1, r4
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	2201      	movs	r2, #1
 80080fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080fe:	187b      	adds	r3, r7, r1
 8008100:	2210      	movs	r2, #16
 8008102:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008104:	187b      	adds	r3, r7, r1
 8008106:	2201      	movs	r2, #1
 8008108:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800810a:	187b      	adds	r3, r7, r1
 800810c:	2200      	movs	r2, #0
 800810e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008110:	187b      	adds	r3, r7, r1
 8008112:	0018      	movs	r0, r3
 8008114:	f00d f816 	bl	8015144 <HAL_RCC_OscConfig>
 8008118:	1e03      	subs	r3, r0, #0
 800811a:	d001      	beq.n	8008120 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800811c:	f000 f8fc 	bl	8008318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008120:	2124      	movs	r1, #36	@ 0x24
 8008122:	187b      	adds	r3, r7, r1
 8008124:	220f      	movs	r2, #15
 8008126:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008128:	187b      	adds	r3, r7, r1
 800812a:	2201      	movs	r2, #1
 800812c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800812e:	187b      	adds	r3, r7, r1
 8008130:	2200      	movs	r2, #0
 8008132:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008134:	187b      	adds	r3, r7, r1
 8008136:	2200      	movs	r2, #0
 8008138:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800813a:	187b      	adds	r3, r7, r1
 800813c:	2200      	movs	r2, #0
 800813e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008140:	187b      	adds	r3, r7, r1
 8008142:	2100      	movs	r1, #0
 8008144:	0018      	movs	r0, r3
 8008146:	f00d fbd1 	bl	80158ec <HAL_RCC_ClockConfig>
 800814a:	1e03      	subs	r3, r0, #0
 800814c:	d001      	beq.n	8008152 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800814e:	f000 f8e3 	bl	8008318 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8008152:	003b      	movs	r3, r7
 8008154:	226d      	movs	r2, #109	@ 0x6d
 8008156:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008158:	003b      	movs	r3, r7
 800815a:	2200      	movs	r2, #0
 800815c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800815e:	003b      	movs	r3, r7
 8008160:	2200      	movs	r2, #0
 8008162:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008164:	003b      	movs	r3, r7
 8008166:	2200      	movs	r2, #0
 8008168:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800816a:	003b      	movs	r3, r7
 800816c:	2280      	movs	r2, #128	@ 0x80
 800816e:	0252      	lsls	r2, r2, #9
 8008170:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008172:	003b      	movs	r3, r7
 8008174:	2280      	movs	r2, #128	@ 0x80
 8008176:	04d2      	lsls	r2, r2, #19
 8008178:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800817a:	003b      	movs	r3, r7
 800817c:	0018      	movs	r0, r3
 800817e:	f00d fdd9 	bl	8015d34 <HAL_RCCEx_PeriphCLKConfig>
 8008182:	1e03      	subs	r3, r0, #0
 8008184:	d001      	beq.n	800818a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008186:	f000 f8c7 	bl	8008318 <Error_Handler>
  }
}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	46bd      	mov	sp, r7
 800818e:	b01d      	add	sp, #116	@ 0x74
 8008190:	bd90      	pop	{r4, r7, pc}
 8008192:	46c0      	nop			@ (mov r8, r8)
 8008194:	40007000 	.word	0x40007000
 8008198:	ffffe7ff 	.word	0xffffe7ff
 800819c:	40021000 	.word	0x40021000

080081a0 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 80081a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008264 <check_cli_command+0xc4>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	3b61      	subs	r3, #97	@ 0x61
 80081aa:	2b13      	cmp	r3, #19
 80081ac:	d830      	bhi.n	8008210 <check_cli_command+0x70>
 80081ae:	009a      	lsls	r2, r3, #2
 80081b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008268 <check_cli_command+0xc8>)
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80081b8:	4b2c      	ldr	r3, [pc, #176]	@ (800826c <check_cli_command+0xcc>)
 80081ba:	0018      	movs	r0, r3
 80081bc:	f017 ff9c 	bl	80200f8 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80081c0:	2003      	movs	r0, #3
 80081c2:	f006 fab5 	bl	800e730 <SetVerboseLevel>
      break;
 80081c6:	e04a      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80081c8:	f7fb fae8 	bl	800379c <forceNTPupdate>
    break;
 80081cc:	e047      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80081ce:	4b28      	ldr	r3, [pc, #160]	@ (8008270 <check_cli_command+0xd0>)
 80081d0:	0018      	movs	r0, r3
 80081d2:	f017 ff91 	bl	80200f8 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80081d6:	2002      	movs	r0, #2
 80081d8:	f006 faaa 	bl	800e730 <SetVerboseLevel>
      break;
 80081dc:	e03f      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 80081de:	4b25      	ldr	r3, [pc, #148]	@ (8008274 <check_cli_command+0xd4>)
 80081e0:	0018      	movs	r0, r3
 80081e2:	f017 ff89 	bl	80200f8 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 80081e6:	2001      	movs	r0, #1
 80081e8:	f006 faa2 	bl	800e730 <SetVerboseLevel>
      break;
 80081ec:	e037      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80081ee:	4b22      	ldr	r3, [pc, #136]	@ (8008278 <check_cli_command+0xd8>)
 80081f0:	0018      	movs	r0, r3
 80081f2:	f017 ff81 	bl	80200f8 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80081f6:	2000      	movs	r0, #0
 80081f8:	f006 fa9a 	bl	800e730 <SetVerboseLevel>
      break;
 80081fc:	e02f      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80081fe:	f006 fe71 	bl	800eee4 <HAL_GetTick>
 8008202:	0002      	movs	r2, r0
 8008204:	4b1d      	ldr	r3, [pc, #116]	@ (800827c <check_cli_command+0xdc>)
 8008206:	601a      	str	r2, [r3, #0]
      break;
 8008208:	e029      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800820a:	f7fe f95b 	bl	80064c4 <showTime>
      break;
 800820e:	e026      	b.n	800825e <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008210:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <check_cli_command+0xe0>)
 8008212:	4b1c      	ldr	r3, [pc, #112]	@ (8008284 <check_cli_command+0xe4>)
 8008214:	0019      	movs	r1, r3
 8008216:	2001      	movs	r0, #1
 8008218:	f006 fa20 	bl	800e65c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800821c:	4b1a      	ldr	r3, [pc, #104]	@ (8008288 <check_cli_command+0xe8>)
 800821e:	0018      	movs	r0, r3
 8008220:	f017 ff6a 	bl	80200f8 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008224:	4b19      	ldr	r3, [pc, #100]	@ (800828c <check_cli_command+0xec>)
 8008226:	0018      	movs	r0, r3
 8008228:	f017 ff66 	bl	80200f8 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800822c:	4b18      	ldr	r3, [pc, #96]	@ (8008290 <check_cli_command+0xf0>)
 800822e:	0018      	movs	r0, r3
 8008230:	f017 ff62 	bl	80200f8 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008234:	4b17      	ldr	r3, [pc, #92]	@ (8008294 <check_cli_command+0xf4>)
 8008236:	0018      	movs	r0, r3
 8008238:	f017 ff5e 	bl	80200f8 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800823c:	4b16      	ldr	r3, [pc, #88]	@ (8008298 <check_cli_command+0xf8>)
 800823e:	0018      	movs	r0, r3
 8008240:	f017 ff5a 	bl	80200f8 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008244:	4b15      	ldr	r3, [pc, #84]	@ (800829c <check_cli_command+0xfc>)
 8008246:	0018      	movs	r0, r3
 8008248:	f017 ff56 	bl	80200f8 <puts>
      printf("s - Start particle measurement\r\n");
 800824c:	4b14      	ldr	r3, [pc, #80]	@ (80082a0 <check_cli_command+0x100>)
 800824e:	0018      	movs	r0, r3
 8008250:	f017 ff52 	bl	80200f8 <puts>
      printf("t - Show actual systemtime\r\n");
 8008254:	4b13      	ldr	r3, [pc, #76]	@ (80082a4 <check_cli_command+0x104>)
 8008256:	0018      	movs	r0, r3
 8008258:	f017 ff4e 	bl	80200f8 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800825c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800825e:	46c0      	nop			@ (mov r8, r8)
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000fc4 	.word	0x20000fc4
 8008268:	0802568c 	.word	0x0802568c
 800826c:	0802411c 	.word	0x0802411c
 8008270:	08024138 	.word	0x08024138
 8008274:	08024154 	.word	0x08024154
 8008278:	08024174 	.word	0x08024174
 800827c:	20001088 	.word	0x20001088
 8008280:	08024190 	.word	0x08024190
 8008284:	080241c0 	.word	0x080241c0
 8008288:	080241c4 	.word	0x080241c4
 800828c:	080241dc 	.word	0x080241dc
 8008290:	080241fc 	.word	0x080241fc
 8008294:	08024220 	.word	0x08024220
 8008298:	08024240 	.word	0x08024240
 800829c:	08024264 	.word	0x08024264
 80082a0:	08024284 	.word	0x08024284
 80082a4:	080242a4 	.word	0x080242a4

080082a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80082b0:	4908      	ldr	r1, [pc, #32]	@ (80082d4 <HAL_UART_RxCpltCallback+0x2c>)
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <HAL_UART_RxCpltCallback+0x30>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	0018      	movs	r0, r3
 80082b8:	f00f f8e0 	bl	801747c <HAL_UART_Receive_IT>
  check_cli_command();
 80082bc:	f7ff ff70 	bl	80081a0 <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80082c0:	4904      	ldr	r1, [pc, #16]	@ (80082d4 <HAL_UART_RxCpltCallback+0x2c>)
 80082c2:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <HAL_UART_RxCpltCallback+0x30>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	0018      	movs	r0, r3
 80082c8:	f00f f8d8 	bl	801747c <HAL_UART_Receive_IT>
}
 80082cc:	46c0      	nop			@ (mov r8, r8)
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000fc4 	.word	0x20000fc4
 80082d8:	200021a0 	.word	0x200021a0

080082dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	0002      	movs	r2, r0
 80082e4:	1dbb      	adds	r3, r7, #6
 80082e6:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 80082e8:	1dbb      	adds	r3, r7, #6
 80082ea:	881a      	ldrh	r2, [r3, #0]
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d10b      	bne.n	800830c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 80082f4:	f005 fc54 	bl	800dba0 <setuserToggle>
    if (GetPMSensorPresence()) {
 80082f8:	f000 f84c 	bl	8008394 <GetPMSensorPresence>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d005      	beq.n	800830c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008300:	4b04      	ldr	r3, [pc, #16]	@ (8008314 <HAL_GPIO_EXTI_Callback+0x38>)
 8008302:	2201      	movs	r2, #1
 8008304:	709a      	strb	r2, [r3, #2]
//      setsen5xReadTimer(100);
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 8008306:	2000      	movs	r0, #0
 8008308:	f000 feb8 	bl	800907c <sen5x_Set_sen5x_state>
    }
  }
}
 800830c:	46c0      	nop			@ (mov r8, r8)
 800830e:	46bd      	mov	sp, r7
 8008310:	b002      	add	sp, #8
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000fdc 	.word	0x20000fdc

08008318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800831c:	b672      	cpsid	i
}
 800831e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008320:	4a05      	ldr	r2, [pc, #20]	@ (8008338 <Error_Handler+0x20>)
 8008322:	4b06      	ldr	r3, [pc, #24]	@ (800833c <Error_Handler+0x24>)
 8008324:	0019      	movs	r1, r3
 8008326:	2001      	movs	r0, #1
 8008328:	f006 f998 	bl	800e65c <CreateLine>
    HAL_Delay(2500);
 800832c:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <Error_Handler+0x28>)
 800832e:	0018      	movs	r0, r3
 8008330:	f006 fde2 	bl	800eef8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008334:	46c0      	nop			@ (mov r8, r8)
 8008336:	e7f3      	b.n	8008320 <Error_Handler+0x8>
 8008338:	080242c0 	.word	0x080242c0
 800833c:	080241c0 	.word	0x080241c0
 8008340:	000009c4 	.word	0x000009c4

08008344 <testInit>:
#include "display.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008348:	4b10      	ldr	r3, [pc, #64]	@ (800838c <testInit+0x48>)
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800834e:	4b0f      	ldr	r3, [pc, #60]	@ (800838c <testInit+0x48>)
 8008350:	2200      	movs	r2, #0
 8008352:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008354:	4b0d      	ldr	r3, [pc, #52]	@ (800838c <testInit+0x48>)
 8008356:	2200      	movs	r2, #0
 8008358:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 800835a:	4b0c      	ldr	r3, [pc, #48]	@ (800838c <testInit+0x48>)
 800835c:	2200      	movs	r2, #0
 800835e:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008360:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <testInit+0x48>)
 8008362:	2200      	movs	r2, #0
 8008364:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008366:	4b09      	ldr	r3, [pc, #36]	@ (800838c <testInit+0x48>)
 8008368:	2200      	movs	r2, #0
 800836a:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 800836c:	4b08      	ldr	r3, [pc, #32]	@ (8008390 <testInit+0x4c>)
 800836e:	2201      	movs	r2, #1
 8008370:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 8008372:	4b07      	ldr	r3, [pc, #28]	@ (8008390 <testInit+0x4c>)
 8008374:	2201      	movs	r2, #1
 8008376:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008378:	4b05      	ldr	r3, [pc, #20]	@ (8008390 <testInit+0x4c>)
 800837a:	2201      	movs	r2, #1
 800837c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800837e:	4b04      	ldr	r3, [pc, #16]	@ (8008390 <testInit+0x4c>)
 8008380:	2201      	movs	r2, #1
 8008382:	70da      	strb	r2, [r3, #3]
}
 8008384:	46c0      	nop			@ (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	20000fe0 	.word	0x20000fe0
 8008390:	20000fdc 	.word	0x20000fdc

08008394 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008398:	4b02      	ldr	r3, [pc, #8]	@ (80083a4 <GetPMSensorPresence+0x10>)
 800839a:	789b      	ldrb	r3, [r3, #2]
}
 800839c:	0018      	movs	r0, r3
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	46c0      	nop			@ (mov r8, r8)
 80083a4:	20000fe0 	.word	0x20000fe0

080083a8 <DisablePMSensor>:

void DisablePMSensor() {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 80083ac:	4b02      	ldr	r3, [pc, #8]	@ (80083b8 <DisablePMSensor+0x10>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	709a      	strb	r2, [r3, #2]
}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000fe0 	.word	0x20000fe0

080083bc <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80083c0:	4b02      	ldr	r3, [pc, #8]	@ (80083cc <IsSGPPresent+0x10>)
 80083c2:	785b      	ldrb	r3, [r3, #1]
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	46c0      	nop			@ (mov r8, r8)
 80083cc:	20000fe0 	.word	0x20000fe0

080083d0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	0002      	movs	r2, r0
 80083d8:	1dfb      	adds	r3, r7, #7
 80083da:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 80083dc:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <SetVOCSensorDIS_ENA+0x3c>)
 80083de:	1dfa      	adds	r2, r7, #7
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 80083e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008410 <SetVOCSensorDIS_ENA+0x40>)
 80083e6:	1dfa      	adds	r2, r7, #7
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 80083ec:	1dfb      	adds	r3, r7, #7
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <SetVOCSensorDIS_ENA+0x28>
 80083f4:	4b07      	ldr	r3, [pc, #28]	@ (8008414 <SetVOCSensorDIS_ENA+0x44>)
 80083f6:	e000      	b.n	80083fa <SetVOCSensorDIS_ENA+0x2a>
 80083f8:	4b07      	ldr	r3, [pc, #28]	@ (8008418 <SetVOCSensorDIS_ENA+0x48>)
 80083fa:	4a08      	ldr	r2, [pc, #32]	@ (800841c <SetVOCSensorDIS_ENA+0x4c>)
 80083fc:	4908      	ldr	r1, [pc, #32]	@ (8008420 <SetVOCSensorDIS_ENA+0x50>)
 80083fe:	2003      	movs	r0, #3
 8008400:	f006 f92c 	bl	800e65c <CreateLine>
}
 8008404:	46c0      	nop			@ (mov r8, r8)
 8008406:	46bd      	mov	sp, r7
 8008408:	b002      	add	sp, #8
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000fe0 	.word	0x20000fe0
 8008410:	20000fdc 	.word	0x20000fdc
 8008414:	080242ec 	.word	0x080242ec
 8008418:	080242f4 	.word	0x080242f4
 800841c:	08024300 	.word	0x08024300
 8008420:	08024314 	.word	0x08024314

08008424 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008428:	4b02      	ldr	r3, [pc, #8]	@ (8008434 <IsPMSensorEnabled+0x10>)
 800842a:	789b      	ldrb	r3, [r3, #2]
}
 800842c:	0018      	movs	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	46c0      	nop			@ (mov r8, r8)
 8008434:	20000fdc 	.word	0x20000fdc

08008438 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	0002      	movs	r2, r0
 8008440:	1dfb      	adds	r3, r7, #7
 8008442:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 8008444:	4b09      	ldr	r3, [pc, #36]	@ (800846c <SetVOCSensorStatus+0x34>)
 8008446:	795b      	ldrb	r3, [r3, #5]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800844c:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <SetVOCSensorStatus+0x38>)
 800844e:	1dfa      	adds	r2, r7, #7
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	705a      	strb	r2, [r3, #1]
  }
  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
 8008454:	1dfb      	adds	r3, r7, #7
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	4a06      	ldr	r2, [pc, #24]	@ (8008474 <SetVOCSensorStatus+0x3c>)
 800845a:	4907      	ldr	r1, [pc, #28]	@ (8008478 <SetVOCSensorStatus+0x40>)
 800845c:	2003      	movs	r0, #3
 800845e:	f006 f8fd 	bl	800e65c <CreateLine>
}
 8008462:	46c0      	nop			@ (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b002      	add	sp, #8
 8008468:	bd80      	pop	{r7, pc}
 800846a:	46c0      	nop			@ (mov r8, r8)
 800846c:	20000fe0 	.word	0x20000fe0
 8008470:	20000fdc 	.word	0x20000fdc
 8008474:	08024318 	.word	0x08024318
 8008478:	08024314 	.word	0x08024314

0800847c <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	0002      	movs	r2, r0
 8008484:	1dfb      	adds	r3, r7, #7
 8008486:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008488:	4b03      	ldr	r3, [pc, #12]	@ (8008498 <SetPMSensorStatus+0x1c>)
 800848a:	1dfa      	adds	r2, r7, #7
 800848c:	7812      	ldrb	r2, [r2, #0]
 800848e:	709a      	strb	r2, [r3, #2]
}
 8008490:	46c0      	nop			@ (mov r8, r8)
 8008492:	46bd      	mov	sp, r7
 8008494:	b002      	add	sp, #8
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20000fdc 	.word	0x20000fdc

0800849c <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80084a0:	4b02      	ldr	r3, [pc, #8]	@ (80084ac <SetESPMeasurementDone+0x10>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	711a      	strb	r2, [r3, #4]
}
 80084a6:	46c0      	nop			@ (mov r8, r8)
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000fe0 	.word	0x20000fe0

080084b0 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
  testInit();
 80084be:	f7ff ff41 	bl	8008344 <testInit>
  I2CSensors_Init(sensorI2C);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fd fc93 	bl	8005df0 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80084ca:	f006 faf9 	bl	800eac0 <HIDS_DeviceConnected>
 80084ce:	0003      	movs	r3, r0
 80084d0:	001a      	movs	r2, r3
 80084d2:	2301      	movs	r3, #1
 80084d4:	4053      	eors	r3, r2
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80084dc:	4a7f      	ldr	r2, [pc, #508]	@ (80086dc <Device_Init+0x22c>)
 80084de:	4b80      	ldr	r3, [pc, #512]	@ (80086e0 <Device_Init+0x230>)
 80084e0:	0019      	movs	r1, r3
 80084e2:	2001      	movs	r0, #1
 80084e4:	f006 f8ba 	bl	800e65c <CreateLine>
     SensorProbe.HT_Present = false;
 80084e8:	4b7e      	ldr	r3, [pc, #504]	@ (80086e4 <Device_Init+0x234>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 80084ee:	4b7e      	ldr	r3, [pc, #504]	@ (80086e8 <Device_Init+0x238>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e008      	b.n	8008508 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80084f6:	4b7b      	ldr	r3, [pc, #492]	@ (80086e4 <Device_Init+0x234>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 80084fc:	4a7b      	ldr	r2, [pc, #492]	@ (80086ec <Device_Init+0x23c>)
 80084fe:	4b7c      	ldr	r3, [pc, #496]	@ (80086f0 <Device_Init+0x240>)
 8008500:	0019      	movs	r1, r3
 8008502:	2003      	movs	r0, #3
 8008504:	f006 f8aa 	bl	800e65c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008508:	f003 fb72 	bl	800bbf0 <SGP_DeviceConnected>
 800850c:	0003      	movs	r3, r0
 800850e:	001a      	movs	r2, r3
 8008510:	2301      	movs	r3, #1
 8008512:	4053      	eors	r3, r2
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 800851a:	4b72      	ldr	r3, [pc, #456]	@ (80086e4 <Device_Init+0x234>)
 800851c:	2200      	movs	r2, #0
 800851e:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008520:	4a74      	ldr	r2, [pc, #464]	@ (80086f4 <Device_Init+0x244>)
 8008522:	4b6f      	ldr	r3, [pc, #444]	@ (80086e0 <Device_Init+0x230>)
 8008524:	0019      	movs	r1, r3
 8008526:	2001      	movs	r0, #1
 8008528:	f006 f898 	bl	800e65c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800852c:	4b6e      	ldr	r3, [pc, #440]	@ (80086e8 <Device_Init+0x238>)
 800852e:	2200      	movs	r2, #0
 8008530:	705a      	strb	r2, [r3, #1]
 8008532:	e00b      	b.n	800854c <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008534:	4b6b      	ldr	r3, [pc, #428]	@ (80086e4 <Device_Init+0x234>)
 8008536:	2201      	movs	r2, #1
 8008538:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800853a:	4b6a      	ldr	r3, [pc, #424]	@ (80086e4 <Device_Init+0x234>)
 800853c:	2201      	movs	r2, #1
 800853e:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008540:	4a6d      	ldr	r2, [pc, #436]	@ (80086f8 <Device_Init+0x248>)
 8008542:	4b6b      	ldr	r3, [pc, #428]	@ (80086f0 <Device_Init+0x240>)
 8008544:	0019      	movs	r1, r3
 8008546:	2003      	movs	r0, #3
 8008548:	f006 f888 	bl	800e65c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800854c:	4b65      	ldr	r3, [pc, #404]	@ (80086e4 <Device_Init+0x234>)
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <Device_Init+0xb8>
 8008554:	4b63      	ldr	r3, [pc, #396]	@ (80086e4 <Device_Init+0x234>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 800855c:	2200      	movs	r2, #0
 800855e:	2101      	movs	r1, #1
 8008560:	2000      	movs	r0, #0
 8008562:	f004 fe53 	bl	800d20c <SetDBLED>
 8008566:	e018      	b.n	800859a <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008568:	2200      	movs	r2, #0
 800856a:	2100      	movs	r1, #0
 800856c:	2001      	movs	r0, #1
 800856e:	f004 fe4d 	bl	800d20c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008572:	4b62      	ldr	r3, [pc, #392]	@ (80086fc <Device_Init+0x24c>)
 8008574:	2200      	movs	r2, #0
 8008576:	2101      	movs	r1, #1
 8008578:	0018      	movs	r0, r3
 800857a:	f007 ff44 	bl	8010406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800857e:	2380      	movs	r3, #128	@ 0x80
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	485e      	ldr	r0, [pc, #376]	@ (80086fc <Device_Init+0x24c>)
 8008584:	2201      	movs	r2, #1
 8008586:	0019      	movs	r1, r3
 8008588:	f007 ff3d 	bl	8010406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800858c:	2380      	movs	r3, #128	@ 0x80
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	485a      	ldr	r0, [pc, #360]	@ (80086fc <Device_Init+0x24c>)
 8008592:	2201      	movs	r2, #1
 8008594:	0019      	movs	r1, r3
 8008596:	f007 ff36 	bl	8010406 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800859a:	4b53      	ldr	r3, [pc, #332]	@ (80086e8 <Device_Init+0x238>)
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d028      	beq.n	80085f4 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80085a2:	4a57      	ldr	r2, [pc, #348]	@ (8008700 <Device_Init+0x250>)
 80085a4:	4b57      	ldr	r3, [pc, #348]	@ (8008704 <Device_Init+0x254>)
 80085a6:	0019      	movs	r1, r3
 80085a8:	2002      	movs	r0, #2
 80085aa:	f006 f857 	bl	800e65c <CreateLine>
    if (!enableMicrophone(true)) {
 80085ae:	2001      	movs	r0, #1
 80085b0:	f003 ff2a 	bl	800c408 <enableMicrophone>
 80085b4:	0003      	movs	r3, r0
 80085b6:	001a      	movs	r2, r3
 80085b8:	2301      	movs	r3, #1
 80085ba:	4053      	eors	r3, r2
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00c      	beq.n	80085dc <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80085c2:	4a51      	ldr	r2, [pc, #324]	@ (8008708 <Device_Init+0x258>)
 80085c4:	4b46      	ldr	r3, [pc, #280]	@ (80086e0 <Device_Init+0x230>)
 80085c6:	0019      	movs	r1, r3
 80085c8:	2001      	movs	r0, #1
 80085ca:	f006 f847 	bl	800e65c <CreateLine>
      SensorProbe.MIC_Present = false;
 80085ce:	4b45      	ldr	r3, [pc, #276]	@ (80086e4 <Device_Init+0x234>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80085d4:	4b44      	ldr	r3, [pc, #272]	@ (80086e8 <Device_Init+0x238>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	70da      	strb	r2, [r3, #3]
 80085da:	e00b      	b.n	80085f4 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80085dc:	4b41      	ldr	r3, [pc, #260]	@ (80086e4 <Device_Init+0x234>)
 80085de:	2201      	movs	r2, #1
 80085e0:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80085e2:	4b41      	ldr	r3, [pc, #260]	@ (80086e8 <Device_Init+0x238>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 80085e8:	4a48      	ldr	r2, [pc, #288]	@ (800870c <Device_Init+0x25c>)
 80085ea:	4b41      	ldr	r3, [pc, #260]	@ (80086f0 <Device_Init+0x240>)
 80085ec:	0019      	movs	r1, r3
 80085ee:	2003      	movs	r0, #3
 80085f0:	f006 f834 	bl	800e65c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80085f4:	f000 fe2c 	bl	8009250 <probe_sen5x>
 80085f8:	1e03      	subs	r3, r0, #0
 80085fa:	d122      	bne.n	8008642 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 80085fc:	4a44      	ldr	r2, [pc, #272]	@ (8008710 <Device_Init+0x260>)
 80085fe:	4b3c      	ldr	r3, [pc, #240]	@ (80086f0 <Device_Init+0x240>)
 8008600:	0019      	movs	r1, r3
 8008602:	2003      	movs	r0, #3
 8008604:	f006 f82a 	bl	800e65c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008608:	4b36      	ldr	r3, [pc, #216]	@ (80086e4 <Device_Init+0x234>)
 800860a:	2201      	movs	r2, #1
 800860c:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 800860e:	4b36      	ldr	r3, [pc, #216]	@ (80086e8 <Device_Init+0x238>)
 8008610:	2201      	movs	r2, #1
 8008612:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008614:	4b3f      	ldr	r3, [pc, #252]	@ (8008714 <Device_Init+0x264>)
 8008616:	791b      	ldrb	r3, [r3, #4]
 8008618:	2b34      	cmp	r3, #52	@ 0x34
 800861a:	d003      	beq.n	8008624 <Device_Init+0x174>
 800861c:	4b3d      	ldr	r3, [pc, #244]	@ (8008714 <Device_Init+0x264>)
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b35      	cmp	r3, #53	@ 0x35
 8008622:	d11c      	bne.n	800865e <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008624:	4a3c      	ldr	r2, [pc, #240]	@ (8008718 <Device_Init+0x268>)
 8008626:	4b37      	ldr	r3, [pc, #220]	@ (8008704 <Device_Init+0x254>)
 8008628:	0019      	movs	r1, r3
 800862a:	2002      	movs	r0, #2
 800862c:	f006 f816 	bl	800e65c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008630:	4b2d      	ldr	r3, [pc, #180]	@ (80086e8 <Device_Init+0x238>)
 8008632:	2200      	movs	r2, #0
 8008634:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 8008636:	4b2b      	ldr	r3, [pc, #172]	@ (80086e4 <Device_Init+0x234>)
 8008638:	2200      	movs	r2, #0
 800863a:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 800863c:	f003 fcbc 	bl	800bfb8 <SGP_SoftReset>
 8008640:	e00d      	b.n	800865e <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008642:	f000 fdcf 	bl	80091e4 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008646:	4a35      	ldr	r2, [pc, #212]	@ (800871c <Device_Init+0x26c>)
 8008648:	4b29      	ldr	r3, [pc, #164]	@ (80086f0 <Device_Init+0x240>)
 800864a:	0019      	movs	r1, r3
 800864c:	2003      	movs	r0, #3
 800864e:	f006 f805 	bl	800e65c <CreateLine>
    SensorProbe.PM_Present = false;
 8008652:	4b24      	ldr	r3, [pc, #144]	@ (80086e4 <Device_Init+0x234>)
 8008654:	2200      	movs	r2, #0
 8008656:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008658:	4b23      	ldr	r3, [pc, #140]	@ (80086e8 <Device_Init+0x238>)
 800865a:	2200      	movs	r2, #0
 800865c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800865e:	4b21      	ldr	r3, [pc, #132]	@ (80086e4 <Device_Init+0x234>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <Device_Init+0x1ba>
 8008666:	4b2e      	ldr	r3, [pc, #184]	@ (8008720 <Device_Init+0x270>)
 8008668:	e000      	b.n	800866c <Device_Init+0x1bc>
 800866a:	4b2e      	ldr	r3, [pc, #184]	@ (8008724 <Device_Init+0x274>)
 800866c:	4a2e      	ldr	r2, [pc, #184]	@ (8008728 <Device_Init+0x278>)
 800866e:	4925      	ldr	r1, [pc, #148]	@ (8008704 <Device_Init+0x254>)
 8008670:	2002      	movs	r0, #2
 8008672:	f005 fff3 	bl	800e65c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8008676:	4b1b      	ldr	r3, [pc, #108]	@ (80086e4 <Device_Init+0x234>)
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <Device_Init+0x1d2>
 800867e:	4b28      	ldr	r3, [pc, #160]	@ (8008720 <Device_Init+0x270>)
 8008680:	e000      	b.n	8008684 <Device_Init+0x1d4>
 8008682:	4b28      	ldr	r3, [pc, #160]	@ (8008724 <Device_Init+0x274>)
 8008684:	4a29      	ldr	r2, [pc, #164]	@ (800872c <Device_Init+0x27c>)
 8008686:	491f      	ldr	r1, [pc, #124]	@ (8008704 <Device_Init+0x254>)
 8008688:	2002      	movs	r0, #2
 800868a:	f005 ffe7 	bl	800e65c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800868e:	4b15      	ldr	r3, [pc, #84]	@ (80086e4 <Device_Init+0x234>)
 8008690:	789b      	ldrb	r3, [r3, #2]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <Device_Init+0x1ea>
 8008696:	4b22      	ldr	r3, [pc, #136]	@ (8008720 <Device_Init+0x270>)
 8008698:	e000      	b.n	800869c <Device_Init+0x1ec>
 800869a:	4b22      	ldr	r3, [pc, #136]	@ (8008724 <Device_Init+0x274>)
 800869c:	4a24      	ldr	r2, [pc, #144]	@ (8008730 <Device_Init+0x280>)
 800869e:	4919      	ldr	r1, [pc, #100]	@ (8008704 <Device_Init+0x254>)
 80086a0:	2002      	movs	r0, #2
 80086a2:	f005 ffdb 	bl	800e65c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80086a6:	4b0f      	ldr	r3, [pc, #60]	@ (80086e4 <Device_Init+0x234>)
 80086a8:	78db      	ldrb	r3, [r3, #3]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <Device_Init+0x202>
 80086ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008720 <Device_Init+0x270>)
 80086b0:	e000      	b.n	80086b4 <Device_Init+0x204>
 80086b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008724 <Device_Init+0x274>)
 80086b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008734 <Device_Init+0x284>)
 80086b6:	4913      	ldr	r1, [pc, #76]	@ (8008704 <Device_Init+0x254>)
 80086b8:	2002      	movs	r0, #2
 80086ba:	f005 ffcf 	bl	800e65c <CreateLine>
  ESP_Init(espUart);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fb fa1f 	bl	8003b04 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80086c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008738 <Device_Init+0x288>)
 80086c8:	4b09      	ldr	r3, [pc, #36]	@ (80086f0 <Device_Init+0x240>)
 80086ca:	0019      	movs	r1, r3
 80086cc:	2003      	movs	r0, #3
 80086ce:	f005 ffc5 	bl	800e65c <CreateLine>
}
 80086d2:	46c0      	nop			@ (mov r8, r8)
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b004      	add	sp, #16
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	08024348 	.word	0x08024348
 80086e0:	08024378 	.word	0x08024378
 80086e4:	20000fe0 	.word	0x20000fe0
 80086e8:	20000fdc 	.word	0x20000fdc
 80086ec:	0802437c 	.word	0x0802437c
 80086f0:	08024314 	.word	0x08024314
 80086f4:	080243a8 	.word	0x080243a8
 80086f8:	080243c4 	.word	0x080243c4
 80086fc:	50000400 	.word	0x50000400
 8008700:	080243dc 	.word	0x080243dc
 8008704:	08024400 	.word	0x08024400
 8008708:	08024404 	.word	0x08024404
 800870c:	08024430 	.word	0x08024430
 8008710:	0802445c 	.word	0x0802445c
 8008714:	20001074 	.word	0x20001074
 8008718:	08024474 	.word	0x08024474
 800871c:	080244c4 	.word	0x080244c4
 8008720:	080244e8 	.word	0x080244e8
 8008724:	080244ec 	.word	0x080244ec
 8008728:	080244f0 	.word	0x080244f0
 800872c:	0802450c 	.word	0x0802450c
 8008730:	08024528 	.word	0x08024528
 8008734:	08024544 	.word	0x08024544
 8008738:	08024560 	.word	0x08024560

0800873c <Device_Test>:

void Device_Test(){
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008740:	4b34      	ldr	r3, [pc, #208]	@ (8008814 <Device_Test+0xd8>)
 8008742:	78db      	ldrb	r3, [r3, #3]
 8008744:	2201      	movs	r2, #1
 8008746:	4053      	eors	r3, r2
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d027      	beq.n	800879e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800874e:	f000 fab9 	bl	8008cc4 <MIC_TestMeasurementDone>
 8008752:	1e03      	subs	r3, r0, #0
 8008754:	d011      	beq.n	800877a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 8008756:	4b2f      	ldr	r3, [pc, #188]	@ (8008814 <Device_Test+0xd8>)
 8008758:	2201      	movs	r2, #1
 800875a:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 800875c:	4b2e      	ldr	r3, [pc, #184]	@ (8008818 <Device_Test+0xdc>)
 800875e:	2201      	movs	r2, #1
 8008760:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008762:	f004 fcd7 	bl	800d114 <Calculate_LED_ON>
 8008766:	0003      	movs	r3, r0
 8008768:	0019      	movs	r1, r3
 800876a:	23fa      	movs	r3, #250	@ 0xfa
 800876c:	011a      	lsls	r2, r3, #4
 800876e:	23fa      	movs	r3, #250	@ 0xfa
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	0018      	movs	r0, r3
 8008774:	f004 fd16 	bl	800d1a4 <SetStatusLED>
 8008778:	e011      	b.n	800879e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800877a:	f003 fe21 	bl	800c3c0 <micSettlingComplete>
 800877e:	1e03      	subs	r3, r0, #0
 8008780:	d00d      	beq.n	800879e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8008782:	4b25      	ldr	r3, [pc, #148]	@ (8008818 <Device_Test+0xdc>)
 8008784:	2201      	movs	r2, #1
 8008786:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008788:	f004 fcc4 	bl	800d114 <Calculate_LED_ON>
 800878c:	0003      	movs	r3, r0
 800878e:	0018      	movs	r0, r3
 8008790:	23fa      	movs	r3, #250	@ 0xfa
 8008792:	011a      	lsls	r2, r3, #4
 8008794:	23fa      	movs	r3, #250	@ 0xfa
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	0019      	movs	r1, r3
 800879a:	f004 fd03 	bl	800d1a4 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800879e:	4b1d      	ldr	r3, [pc, #116]	@ (8008814 <Device_Test+0xd8>)
 80087a0:	791b      	ldrb	r3, [r3, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	4053      	eors	r3, r2
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80087ac:	f7fc fd5a 	bl	8005264 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80087b0:	4b18      	ldr	r3, [pc, #96]	@ (8008814 <Device_Test+0xd8>)
 80087b2:	791b      	ldrb	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <Device_Test+0x84>
 80087b8:	4b16      	ldr	r3, [pc, #88]	@ (8008814 <Device_Test+0xd8>)
 80087ba:	78db      	ldrb	r3, [r3, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <Device_Test+0x92>
 80087c0:	4b16      	ldr	r3, [pc, #88]	@ (800881c <Device_Test+0xe0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	0018      	movs	r0, r3
 80087c6:	f005 fef3 	bl	800e5b0 <TimestampIsReached>
 80087ca:	1e03      	subs	r3, r0, #0
 80087cc:	d01f      	beq.n	800880e <Device_Test+0xd2>
    Info("Test completed");
 80087ce:	4a14      	ldr	r2, [pc, #80]	@ (8008820 <Device_Test+0xe4>)
 80087d0:	4b14      	ldr	r3, [pc, #80]	@ (8008824 <Device_Test+0xe8>)
 80087d2:	0019      	movs	r1, r3
 80087d4:	2002      	movs	r0, #2
 80087d6:	f005 ff41 	bl	800e65c <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80087da:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <Device_Test+0xd8>)
 80087dc:	791b      	ldrb	r3, [r3, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <Device_Test+0xaa>
 80087e2:	4b11      	ldr	r3, [pc, #68]	@ (8008828 <Device_Test+0xec>)
 80087e4:	e000      	b.n	80087e8 <Device_Test+0xac>
 80087e6:	4b11      	ldr	r3, [pc, #68]	@ (800882c <Device_Test+0xf0>)
 80087e8:	4a11      	ldr	r2, [pc, #68]	@ (8008830 <Device_Test+0xf4>)
 80087ea:	490e      	ldr	r1, [pc, #56]	@ (8008824 <Device_Test+0xe8>)
 80087ec:	2002      	movs	r0, #2
 80087ee:	f005 ff35 	bl	800e65c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80087f2:	4b08      	ldr	r3, [pc, #32]	@ (8008814 <Device_Test+0xd8>)
 80087f4:	78db      	ldrb	r3, [r3, #3]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <Device_Test+0xc2>
 80087fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008828 <Device_Test+0xec>)
 80087fc:	e000      	b.n	8008800 <Device_Test+0xc4>
 80087fe:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <Device_Test+0xf0>)
 8008800:	4a0c      	ldr	r2, [pc, #48]	@ (8008834 <Device_Test+0xf8>)
 8008802:	4908      	ldr	r1, [pc, #32]	@ (8008824 <Device_Test+0xe8>)
 8008804:	2002      	movs	r0, #2
 8008806:	f005 ff29 	bl	800e65c <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800880a:	f7ff f9c3 	bl	8007b94 <SetTestDone>
  }
}
 800880e:	46c0      	nop			@ (mov r8, r8)
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000fe0 	.word	0x20000fe0
 8008818:	20000fdc 	.word	0x20000fdc
 800881c:	20000fd4 	.word	0x20000fd4
 8008820:	08024584 	.word	0x08024584
 8008824:	08024400 	.word	0x08024400
 8008828:	08024594 	.word	0x08024594
 800882c:	0802459c 	.word	0x0802459c
 8008830:	080245a4 	.word	0x080245a4
 8008834:	080245b8 	.word	0x080245b8

08008838 <AllDevicesReady>:

bool AllDevicesReady() {
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800883c:	4b2a      	ldr	r3, [pc, #168]	@ (80088e8 <AllDevicesReady+0xb0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	0018      	movs	r0, r3
 8008842:	f005 feb5 	bl	800e5b0 <TimestampIsReached>
 8008846:	1e03      	subs	r3, r0, #0
 8008848:	d04a      	beq.n	80088e0 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800884a:	4b28      	ldr	r3, [pc, #160]	@ (80088ec <AllDevicesReady+0xb4>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	2b06      	cmp	r3, #6
 8008850:	d102      	bne.n	8008858 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008852:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <AllDevicesReady+0xb8>)
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008858:	4b26      	ldr	r3, [pc, #152]	@ (80088f4 <AllDevicesReady+0xbc>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b07      	cmp	r3, #7
 800885e:	d006      	beq.n	800886e <AllDevicesReady+0x36>
 8008860:	4b25      	ldr	r3, [pc, #148]	@ (80088f8 <AllDevicesReady+0xc0>)
 8008862:	795b      	ldrb	r3, [r3, #5]
 8008864:	2201      	movs	r2, #1
 8008866:	4053      	eors	r3, r2
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 800886e:	4b20      	ldr	r3, [pc, #128]	@ (80088f0 <AllDevicesReady+0xb8>)
 8008870:	2200      	movs	r2, #0
 8008872:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008874:	4b21      	ldr	r3, [pc, #132]	@ (80088fc <AllDevicesReady+0xc4>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d102      	bne.n	8008882 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 800887c:	4b1c      	ldr	r3, [pc, #112]	@ (80088f0 <AllDevicesReady+0xb8>)
 800887e:	2200      	movs	r2, #0
 8008880:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008882:	4b1f      	ldr	r3, [pc, #124]	@ (8008900 <AllDevicesReady+0xc8>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b03      	cmp	r3, #3
 8008888:	d102      	bne.n	8008890 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 800888a:	4b19      	ldr	r3, [pc, #100]	@ (80088f0 <AllDevicesReady+0xb8>)
 800888c:	2200      	movs	r2, #0
 800888e:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008890:	4b1c      	ldr	r3, [pc, #112]	@ (8008904 <AllDevicesReady+0xcc>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b09      	cmp	r3, #9
 8008896:	d123      	bne.n	80088e0 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008898:	4b15      	ldr	r3, [pc, #84]	@ (80088f0 <AllDevicesReady+0xb8>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2201      	movs	r2, #1
 800889e:	4053      	eors	r3, r2
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <AllDevicesReady+0x9c>
 80088a6:	4b12      	ldr	r3, [pc, #72]	@ (80088f0 <AllDevicesReady+0xb8>)
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2201      	movs	r2, #1
 80088ac:	4053      	eors	r3, r2
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00f      	beq.n	80088d4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088b4:	4b0e      	ldr	r3, [pc, #56]	@ (80088f0 <AllDevicesReady+0xb8>)
 80088b6:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088b8:	2201      	movs	r2, #1
 80088ba:	4053      	eors	r3, r2
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d008      	beq.n	80088d4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088c2:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <AllDevicesReady+0xb8>)
 80088c4:	78db      	ldrb	r3, [r3, #3]
 80088c6:	2201      	movs	r2, #1
 80088c8:	4053      	eors	r3, r2
 80088ca:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <AllDevicesReady+0x9c>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <AllDevicesReady+0x9e>
 80088d4:	2300      	movs	r3, #0
 80088d6:	1c1a      	adds	r2, r3, #0
 80088d8:	2301      	movs	r3, #1
 80088da:	4013      	ands	r3, r2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	e000      	b.n	80088e2 <AllDevicesReady+0xaa>
    }
  }
  return false;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	0018      	movs	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000fd4 	.word	0x20000fd4
 80088ec:	20000fc1 	.word	0x20000fc1
 80088f0:	20000fdc 	.word	0x20000fdc
 80088f4:	20000fc0 	.word	0x20000fc0
 80088f8:	20000fe0 	.word	0x20000fe0
 80088fc:	2000008d 	.word	0x2000008d
 8008900:	20000fc2 	.word	0x20000fc2
 8008904:	20000fc3 	.word	0x20000fc3

08008908 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800890c:	4b11      	ldr	r3, [pc, #68]	@ (8008954 <EnabledConnectedDevices+0x4c>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008914:	4b10      	ldr	r3, [pc, #64]	@ (8008958 <EnabledConnectedDevices+0x50>)
 8008916:	2201      	movs	r2, #1
 8008918:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800891a:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <EnabledConnectedDevices+0x4c>)
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d006      	beq.n	8008930 <EnabledConnectedDevices+0x28>
 8008922:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <EnabledConnectedDevices+0x4c>)
 8008924:	795b      	ldrb	r3, [r3, #5]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800892a:	4b0b      	ldr	r3, [pc, #44]	@ (8008958 <EnabledConnectedDevices+0x50>)
 800892c:	2201      	movs	r2, #1
 800892e:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008930:	4b08      	ldr	r3, [pc, #32]	@ (8008954 <EnabledConnectedDevices+0x4c>)
 8008932:	789b      	ldrb	r3, [r3, #2]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008938:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <EnabledConnectedDevices+0x50>)
 800893a:	2201      	movs	r2, #1
 800893c:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800893e:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <EnabledConnectedDevices+0x4c>)
 8008940:	78db      	ldrb	r3, [r3, #3]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 8008946:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <EnabledConnectedDevices+0x50>)
 8008948:	2201      	movs	r2, #1
 800894a:	70da      	strb	r2, [r3, #3]
  }
}
 800894c:	46c0      	nop			@ (mov r8, r8)
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	46c0      	nop			@ (mov r8, r8)
 8008954:	20000fe0 	.word	0x20000fe0
 8008958:	20000fdc 	.word	0x20000fdc

0800895c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008960:	4a0a      	ldr	r2, [pc, #40]	@ (800898c <DisableConnectedDevices+0x30>)
 8008962:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <DisableConnectedDevices+0x34>)
 8008964:	0019      	movs	r1, r3
 8008966:	2003      	movs	r0, #3
 8008968:	f005 fe78 	bl	800e65c <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800896c:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <DisableConnectedDevices+0x38>)
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008972:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <DisableConnectedDevices+0x38>)
 8008974:	2200      	movs	r2, #0
 8008976:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008978:	4b06      	ldr	r3, [pc, #24]	@ (8008994 <DisableConnectedDevices+0x38>)
 800897a:	2200      	movs	r2, #0
 800897c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800897e:	4b05      	ldr	r3, [pc, #20]	@ (8008994 <DisableConnectedDevices+0x38>)
 8008980:	2200      	movs	r2, #0
 8008982:	70da      	strb	r2, [r3, #3]
}
 8008984:	46c0      	nop			@ (mov r8, r8)
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	080245cc 	.word	0x080245cc
 8008990:	08024314 	.word	0x08024314
 8008994:	20000fdc 	.word	0x20000fdc

08008998 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800899c:	4b02      	ldr	r3, [pc, #8]	@ (80089a8 <ResetdBAmax+0x10>)
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	2000102c 	.word	0x2000102c

080089ac <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80089b4:	f006 fa96 	bl	800eee4 <HAL_GetTick>
 80089b8:	0002      	movs	r2, r0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	18d2      	adds	r2, r2, r3
 80089be:	4b03      	ldr	r3, [pc, #12]	@ (80089cc <setMICTimeStamp+0x20>)
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	46c0      	nop			@ (mov r8, r8)
 80089c4:	46bd      	mov	sp, r7
 80089c6:	b002      	add	sp, #8
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	46c0      	nop			@ (mov r8, r8)
 80089cc:	20001034 	.word	0x20001034

080089d0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  counter = 0;
 80089d4:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <ResetDBACalculator+0x1c>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80089da:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <ResetDBACalculator+0x20>)
 80089dc:	2201      	movs	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80089e0:	4b04      	ldr	r3, [pc, #16]	@ (80089f4 <ResetDBACalculator+0x24>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
}
 80089e6:	46c0      	nop			@ (mov r8, r8)
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20001030 	.word	0x20001030
 80089f0:	2000008c 	.word	0x2000008c
 80089f4:	20001031 	.word	0x20001031

080089f8 <MIC_Print>:

void MIC_Print(void) {
 80089f8:	b5b0      	push	{r4, r5, r7, lr}
 80089fa:	b08a      	sub	sp, #40	@ 0x28
 80089fc:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 80089fe:	4b9f      	ldr	r3, [pc, #636]	@ (8008c7c <MIC_Print+0x284>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b9f      	ldr	r3, [pc, #636]	@ (8008c80 <MIC_Print+0x288>)
 8008a04:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008a06:	4b9f      	ldr	r3, [pc, #636]	@ (8008c84 <MIC_Print+0x28c>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	001a      	movs	r2, r3
 8008a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8008c80 <MIC_Print+0x288>)
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	4b9d      	ldr	r3, [pc, #628]	@ (8008c88 <MIC_Print+0x290>)
 8008a12:	0092      	lsls	r2, r2, #2
 8008a14:	50d1      	str	r1, [r2, r3]
  counter++;
 8008a16:	4b9b      	ldr	r3, [pc, #620]	@ (8008c84 <MIC_Print+0x28c>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	4b99      	ldr	r3, [pc, #612]	@ (8008c84 <MIC_Print+0x28c>)
 8008a20:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008a22:	4b98      	ldr	r3, [pc, #608]	@ (8008c84 <MIC_Print+0x28c>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d80b      	bhi.n	8008a42 <MIC_Print+0x4a>
 8008a2a:	4b98      	ldr	r3, [pc, #608]	@ (8008c8c <MIC_Print+0x294>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4053      	eors	r3, r2
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d004      	beq.n	8008a42 <MIC_Print+0x4a>
    denominator = counter;
 8008a38:	4b92      	ldr	r3, [pc, #584]	@ (8008c84 <MIC_Print+0x28c>)
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	4b94      	ldr	r3, [pc, #592]	@ (8008c90 <MIC_Print+0x298>)
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	e005      	b.n	8008a4e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008a42:	4b93      	ldr	r3, [pc, #588]	@ (8008c90 <MIC_Print+0x298>)
 8008a44:	220a      	movs	r2, #10
 8008a46:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008a48:	4b90      	ldr	r3, [pc, #576]	@ (8008c8c <MIC_Print+0x294>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008a4e:	4b91      	ldr	r3, [pc, #580]	@ (8008c94 <MIC_Print+0x29c>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008a54:	230f      	movs	r3, #15
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e042      	b.n	8008ae4 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8008a5e:	240f      	movs	r4, #15
 8008a60:	193b      	adds	r3, r7, r4
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	4b88      	ldr	r3, [pc, #544]	@ (8008c88 <MIC_Print+0x290>)
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	58d2      	ldr	r2, [r2, r3]
 8008a6a:	4b8a      	ldr	r3, [pc, #552]	@ (8008c94 <MIC_Print+0x29c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	1c19      	adds	r1, r3, #0
 8008a70:	1c10      	adds	r0, r2, #0
 8008a72:	f7f7 ff25 	bl	80008c0 <__aeabi_fadd>
 8008a76:	1c03      	adds	r3, r0, #0
 8008a78:	1c1a      	adds	r2, r3, #0
 8008a7a:	4b86      	ldr	r3, [pc, #536]	@ (8008c94 <MIC_Print+0x29c>)
 8008a7c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008a7e:	193b      	adds	r3, r7, r4
 8008a80:	781a      	ldrb	r2, [r3, #0]
 8008a82:	4b81      	ldr	r3, [pc, #516]	@ (8008c88 <MIC_Print+0x290>)
 8008a84:	0092      	lsls	r2, r2, #2
 8008a86:	58d2      	ldr	r2, [r2, r3]
 8008a88:	4b83      	ldr	r3, [pc, #524]	@ (8008c98 <MIC_Print+0x2a0>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	1c19      	adds	r1, r3, #0
 8008a8e:	1c10      	adds	r0, r2, #0
 8008a90:	f7f7 fd62 	bl	8000558 <__aeabi_fcmpgt>
 8008a94:	1e03      	subs	r3, r0, #0
 8008a96:	d006      	beq.n	8008aa6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008a98:	193b      	adds	r3, r7, r4
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	4b7a      	ldr	r3, [pc, #488]	@ (8008c88 <MIC_Print+0x290>)
 8008a9e:	0092      	lsls	r2, r2, #2
 8008aa0:	58d2      	ldr	r2, [r2, r3]
 8008aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8008c98 <MIC_Print+0x2a0>)
 8008aa4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8008c94 <MIC_Print+0x29c>)
 8008aa8:	681c      	ldr	r4, [r3, #0]
 8008aaa:	4b79      	ldr	r3, [pc, #484]	@ (8008c90 <MIC_Print+0x298>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7f8 fdda 	bl	8001668 <__aeabi_ui2f>
 8008ab4:	1c03      	adds	r3, r0, #0
 8008ab6:	1c19      	adds	r1, r3, #0
 8008ab8:	1c20      	adds	r0, r4, #0
 8008aba:	f7f8 f88b 	bl	8000bd4 <__aeabi_fdiv>
 8008abe:	1c03      	adds	r3, r0, #0
 8008ac0:	1c1a      	adds	r2, r3, #0
 8008ac2:	4b76      	ldr	r3, [pc, #472]	@ (8008c9c <MIC_Print+0x2a4>)
 8008ac4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 8008ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8008c80 <MIC_Print+0x288>)
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	4b73      	ldr	r3, [pc, #460]	@ (8008c98 <MIC_Print+0x2a0>)
 8008acc:	6819      	ldr	r1, [r3, #0]
 8008ace:	4b73      	ldr	r3, [pc, #460]	@ (8008c9c <MIC_Print+0x2a4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	1c1a      	adds	r2, r3, #0
 8008ad4:	f7fa ff3a 	bl	800394c <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008ad8:	210f      	movs	r1, #15
 8008ada:	187b      	adds	r3, r7, r1
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	187b      	adds	r3, r7, r1
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8008c90 <MIC_Print+0x298>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	220f      	movs	r2, #15
 8008aea:	18ba      	adds	r2, r7, r2
 8008aec:	7812      	ldrb	r2, [r2, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d3b5      	bcc.n	8008a5e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008af2:	4b63      	ldr	r3, [pc, #396]	@ (8008c80 <MIC_Print+0x288>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	1c18      	adds	r0, r3, #0
 8008af8:	f7fa fcb4 	bl	8003464 <__aeabi_f2d>
 8008afc:	6038      	str	r0, [r7, #0]
 8008afe:	6079      	str	r1, [r7, #4]
 8008b00:	4b65      	ldr	r3, [pc, #404]	@ (8008c98 <MIC_Print+0x2a0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	1c18      	adds	r0, r3, #0
 8008b06:	f7fa fcad 	bl	8003464 <__aeabi_f2d>
 8008b0a:	0004      	movs	r4, r0
 8008b0c:	000d      	movs	r5, r1
 8008b0e:	4b63      	ldr	r3, [pc, #396]	@ (8008c9c <MIC_Print+0x2a4>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	1c18      	adds	r0, r3, #0
 8008b14:	f7fa fca6 	bl	8003464 <__aeabi_f2d>
 8008b18:	0002      	movs	r2, r0
 8008b1a:	000b      	movs	r3, r1
 8008b1c:	4960      	ldr	r1, [pc, #384]	@ (8008ca0 <MIC_Print+0x2a8>)
 8008b1e:	9204      	str	r2, [sp, #16]
 8008b20:	9305      	str	r3, [sp, #20]
 8008b22:	9402      	str	r4, [sp, #8]
 8008b24:	9503      	str	r5, [sp, #12]
 8008b26:	4b5f      	ldr	r3, [pc, #380]	@ (8008ca4 <MIC_Print+0x2ac>)
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	0008      	movs	r0, r1
 8008b30:	f017 fa7c 	bl	802002c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008b34:	4b53      	ldr	r3, [pc, #332]	@ (8008c84 <MIC_Print+0x28c>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b0a      	cmp	r3, #10
 8008b3a:	d902      	bls.n	8008b42 <MIC_Print+0x14a>
    counter = 0;
 8008b3c:	4b51      	ldr	r3, [pc, #324]	@ (8008c84 <MIC_Print+0x28c>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008b42:	4b4f      	ldr	r3, [pc, #316]	@ (8008c80 <MIC_Print+0x288>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4958      	ldr	r1, [pc, #352]	@ (8008ca8 <MIC_Print+0x2b0>)
 8008b48:	1c18      	adds	r0, r3, #0
 8008b4a:	f7f7 fd0f 	bl	800056c <__aeabi_fcmpge>
 8008b4e:	1e03      	subs	r3, r0, #0
 8008b50:	d004      	beq.n	8008b5c <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8008b52:	2201      	movs	r2, #1
 8008b54:	2101      	movs	r1, #1
 8008b56:	2001      	movs	r0, #1
 8008b58:	f004 fb58 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008b5c:	4b48      	ldr	r3, [pc, #288]	@ (8008c80 <MIC_Print+0x288>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4952      	ldr	r1, [pc, #328]	@ (8008cac <MIC_Print+0x2b4>)
 8008b62:	1c18      	adds	r0, r3, #0
 8008b64:	f7f7 fd02 	bl	800056c <__aeabi_fcmpge>
 8008b68:	1e03      	subs	r3, r0, #0
 8008b6a:	d00c      	beq.n	8008b86 <MIC_Print+0x18e>
 8008b6c:	4b44      	ldr	r3, [pc, #272]	@ (8008c80 <MIC_Print+0x288>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	494d      	ldr	r1, [pc, #308]	@ (8008ca8 <MIC_Print+0x2b0>)
 8008b72:	1c18      	adds	r0, r3, #0
 8008b74:	f7f7 fcdc 	bl	8000530 <__aeabi_fcmplt>
 8008b78:	1e03      	subs	r3, r0, #0
 8008b7a:	d004      	beq.n	8008b86 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2100      	movs	r1, #0
 8008b80:	2001      	movs	r0, #1
 8008b82:	f004 fb43 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008b86:	4b3e      	ldr	r3, [pc, #248]	@ (8008c80 <MIC_Print+0x288>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4949      	ldr	r1, [pc, #292]	@ (8008cb0 <MIC_Print+0x2b8>)
 8008b8c:	1c18      	adds	r0, r3, #0
 8008b8e:	f7f7 fced 	bl	800056c <__aeabi_fcmpge>
 8008b92:	1e03      	subs	r3, r0, #0
 8008b94:	d00c      	beq.n	8008bb0 <MIC_Print+0x1b8>
 8008b96:	4b3a      	ldr	r3, [pc, #232]	@ (8008c80 <MIC_Print+0x288>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4944      	ldr	r1, [pc, #272]	@ (8008cac <MIC_Print+0x2b4>)
 8008b9c:	1c18      	adds	r0, r3, #0
 8008b9e:	f7f7 fcc7 	bl	8000530 <__aeabi_fcmplt>
 8008ba2:	1e03      	subs	r3, r0, #0
 8008ba4:	d004      	beq.n	8008bb0 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2101      	movs	r1, #1
 8008baa:	2001      	movs	r0, #1
 8008bac:	f004 fb2e 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008bb0:	4b33      	ldr	r3, [pc, #204]	@ (8008c80 <MIC_Print+0x288>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	493f      	ldr	r1, [pc, #252]	@ (8008cb4 <MIC_Print+0x2bc>)
 8008bb6:	1c18      	adds	r0, r3, #0
 8008bb8:	f7f7 fcd8 	bl	800056c <__aeabi_fcmpge>
 8008bbc:	1e03      	subs	r3, r0, #0
 8008bbe:	d00c      	beq.n	8008bda <MIC_Print+0x1e2>
 8008bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8008c80 <MIC_Print+0x288>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	493a      	ldr	r1, [pc, #232]	@ (8008cb0 <MIC_Print+0x2b8>)
 8008bc6:	1c18      	adds	r0, r3, #0
 8008bc8:	f7f7 fcb2 	bl	8000530 <__aeabi_fcmplt>
 8008bcc:	1e03      	subs	r3, r0, #0
 8008bce:	d004      	beq.n	8008bda <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f004 fb19 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008bda:	4b29      	ldr	r3, [pc, #164]	@ (8008c80 <MIC_Print+0x288>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4936      	ldr	r1, [pc, #216]	@ (8008cb8 <MIC_Print+0x2c0>)
 8008be0:	1c18      	adds	r0, r3, #0
 8008be2:	f7f7 fcc3 	bl	800056c <__aeabi_fcmpge>
 8008be6:	1e03      	subs	r3, r0, #0
 8008be8:	d00c      	beq.n	8008c04 <MIC_Print+0x20c>
 8008bea:	4b25      	ldr	r3, [pc, #148]	@ (8008c80 <MIC_Print+0x288>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4931      	ldr	r1, [pc, #196]	@ (8008cb4 <MIC_Print+0x2bc>)
 8008bf0:	1c18      	adds	r0, r3, #0
 8008bf2:	f7f7 fc9d 	bl	8000530 <__aeabi_fcmplt>
 8008bf6:	1e03      	subs	r3, r0, #0
 8008bf8:	d004      	beq.n	8008c04 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f004 fb04 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008c04:	4b1e      	ldr	r3, [pc, #120]	@ (8008c80 <MIC_Print+0x288>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	492c      	ldr	r1, [pc, #176]	@ (8008cbc <MIC_Print+0x2c4>)
 8008c0a:	1c18      	adds	r0, r3, #0
 8008c0c:	f7f7 fcae 	bl	800056c <__aeabi_fcmpge>
 8008c10:	1e03      	subs	r3, r0, #0
 8008c12:	d00c      	beq.n	8008c2e <MIC_Print+0x236>
 8008c14:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <MIC_Print+0x288>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4927      	ldr	r1, [pc, #156]	@ (8008cb8 <MIC_Print+0x2c0>)
 8008c1a:	1c18      	adds	r0, r3, #0
 8008c1c:	f7f7 fc88 	bl	8000530 <__aeabi_fcmplt>
 8008c20:	1e03      	subs	r3, r0, #0
 8008c22:	d004      	beq.n	8008c2e <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8008c24:	2201      	movs	r2, #1
 8008c26:	2100      	movs	r1, #0
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f004 faef 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008c2e:	4b14      	ldr	r3, [pc, #80]	@ (8008c80 <MIC_Print+0x288>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4923      	ldr	r1, [pc, #140]	@ (8008cc0 <MIC_Print+0x2c8>)
 8008c34:	1c18      	adds	r0, r3, #0
 8008c36:	f7f7 fc99 	bl	800056c <__aeabi_fcmpge>
 8008c3a:	1e03      	subs	r3, r0, #0
 8008c3c:	d00c      	beq.n	8008c58 <MIC_Print+0x260>
 8008c3e:	4b10      	ldr	r3, [pc, #64]	@ (8008c80 <MIC_Print+0x288>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	491e      	ldr	r1, [pc, #120]	@ (8008cbc <MIC_Print+0x2c4>)
 8008c44:	1c18      	adds	r0, r3, #0
 8008c46:	f7f7 fc73 	bl	8000530 <__aeabi_fcmplt>
 8008c4a:	1e03      	subs	r3, r0, #0
 8008c4c:	d004      	beq.n	8008c58 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8008c4e:	2201      	movs	r2, #1
 8008c50:	2100      	movs	r1, #0
 8008c52:	2001      	movs	r0, #1
 8008c54:	f004 fada 	bl	800d20c <SetDBLED>
  }
  if(dBA < 35){//off
 8008c58:	4b09      	ldr	r3, [pc, #36]	@ (8008c80 <MIC_Print+0x288>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4918      	ldr	r1, [pc, #96]	@ (8008cc0 <MIC_Print+0x2c8>)
 8008c5e:	1c18      	adds	r0, r3, #0
 8008c60:	f7f7 fc66 	bl	8000530 <__aeabi_fcmplt>
 8008c64:	1e03      	subs	r3, r0, #0
 8008c66:	d100      	bne.n	8008c6a <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8008c68:	e004      	b.n	8008c74 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f004 facc 	bl	800d20c <SetDBLED>
}
 8008c74:	46c0      	nop			@ (mov r8, r8)
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b004      	add	sp, #16
 8008c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c7c:	20001028 	.word	0x20001028
 8008c80:	20000ff4 	.word	0x20000ff4
 8008c84:	20001030 	.word	0x20001030
 8008c88:	20000ff8 	.word	0x20000ff8
 8008c8c:	20001031 	.word	0x20001031
 8008c90:	2000008c 	.word	0x2000008c
 8008c94:	20001024 	.word	0x20001024
 8008c98:	2000102c 	.word	0x2000102c
 8008c9c:	20001020 	.word	0x20001020
 8008ca0:	080245e0 	.word	0x080245e0
 8008ca4:	20000fe8 	.word	0x20000fe8
 8008ca8:	42b40000 	.word	0x42b40000
 8008cac:	42a00000 	.word	0x42a00000
 8008cb0:	428c0000 	.word	0x428c0000
 8008cb4:	42700000 	.word	0x42700000
 8008cb8:	42480000 	.word	0x42480000
 8008cbc:	42200000 	.word	0x42200000
 8008cc0:	420c0000 	.word	0x420c0000

08008cc4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008cca:	4b11      	ldr	r3, [pc, #68]	@ (8008d10 <MIC_TestMeasurementDone+0x4c>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	4a10      	ldr	r2, [pc, #64]	@ (8008d14 <MIC_TestMeasurementDone+0x50>)
 8008cd2:	4911      	ldr	r1, [pc, #68]	@ (8008d18 <MIC_TestMeasurementDone+0x54>)
 8008cd4:	2002      	movs	r0, #2
 8008cd6:	f005 fcc1 	bl	800e65c <CreateLine>
  if(DataReady) {
 8008cda:	4b0d      	ldr	r3, [pc, #52]	@ (8008d10 <MIC_TestMeasurementDone+0x4c>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d010      	beq.n	8008d06 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008ce4:	1dfb      	adds	r3, r7, #7
 8008ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d1c <MIC_TestMeasurementDone+0x58>)
 8008ce8:	7812      	ldrb	r2, [r2, #0]
 8008cea:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008cec:	4b0b      	ldr	r3, [pc, #44]	@ (8008d1c <MIC_TestMeasurementDone+0x58>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8008d20 <MIC_TestMeasurementDone+0x5c>)
 8008cf4:	4908      	ldr	r1, [pc, #32]	@ (8008d18 <MIC_TestMeasurementDone+0x54>)
 8008cf6:	2002      	movs	r0, #2
 8008cf8:	f005 fcb0 	bl	800e65c <CreateLine>
    ResetMICIndicator();
 8008cfc:	f004 fb74 	bl	800d3e8 <ResetMICIndicator>
    return Check;
 8008d00:	1dfb      	adds	r3, r7, #7
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	e000      	b.n	8008d08 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	0018      	movs	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	b002      	add	sp, #8
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	2000116d 	.word	0x2000116d
 8008d14:	08024628 	.word	0x08024628
 8008d18:	08024654 	.word	0x08024654
 8008d1c:	2000116e 	.word	0x2000116e
 8008d20:	08024658 	.word	0x08024658

08008d24 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008d2a:	4b78      	ldr	r3, [pc, #480]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d100      	bne.n	8008d34 <Mic_Upkeep+0x10>
 8008d32:	e0b8      	b.n	8008ea6 <Mic_Upkeep+0x182>
 8008d34:	dd00      	ble.n	8008d38 <Mic_Upkeep+0x14>
 8008d36:	e0d3      	b.n	8008ee0 <Mic_Upkeep+0x1bc>
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d037      	beq.n	8008dac <Mic_Upkeep+0x88>
 8008d3c:	dd00      	ble.n	8008d40 <Mic_Upkeep+0x1c>
 8008d3e:	e0cf      	b.n	8008ee0 <Mic_Upkeep+0x1bc>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <Mic_Upkeep+0x26>
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d014      	beq.n	8008d72 <Mic_Upkeep+0x4e>
 8008d48:	e0ca      	b.n	8008ee0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	f003 fb5c 	bl	800c408 <enableMicrophone>
 8008d50:	0003      	movs	r3, r0
 8008d52:	001a      	movs	r2, r3
 8008d54:	2301      	movs	r3, #1
 8008d56:	4053      	eors	r3, r2
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8008f10 <Mic_Upkeep+0x1ec>)
 8008d60:	4b6c      	ldr	r3, [pc, #432]	@ (8008f14 <Mic_Upkeep+0x1f0>)
 8008d62:	217f      	movs	r1, #127	@ 0x7f
 8008d64:	0018      	movs	r0, r3
 8008d66:	f005 fd31 	bl	800e7cc <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008d6a:	4b68      	ldr	r3, [pc, #416]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
    break;
 8008d70:	e0c5      	b.n	8008efe <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008d72:	f003 fb25 	bl	800c3c0 <micSettlingComplete>
 8008d76:	1e03      	subs	r3, r0, #0
 8008d78:	d105      	bne.n	8008d86 <Mic_Upkeep+0x62>
 8008d7a:	4b67      	ldr	r3, [pc, #412]	@ (8008f18 <Mic_Upkeep+0x1f4>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d100      	bne.n	8008d86 <Mic_Upkeep+0x62>
 8008d84:	e0b6      	b.n	8008ef4 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008d86:	f003 fba9 	bl	800c4dc <startSPLcalculation>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4053      	eors	r3, r2
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008d98:	4a5d      	ldr	r2, [pc, #372]	@ (8008f10 <Mic_Upkeep+0x1ec>)
 8008d9a:	4b5e      	ldr	r3, [pc, #376]	@ (8008f14 <Mic_Upkeep+0x1f0>)
 8008d9c:	2188      	movs	r1, #136	@ 0x88
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f005 fd14 	bl	800e7cc <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008da4:	4b59      	ldr	r3, [pc, #356]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008da6:	2202      	movs	r2, #2
 8008da8:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008daa:	e0a3      	b.n	8008ef4 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008dac:	4b5b      	ldr	r3, [pc, #364]	@ (8008f1c <Mic_Upkeep+0x1f8>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	2101      	movs	r1, #1
 8008db2:	0018      	movs	r0, r3
 8008db4:	f003 f9e6 	bl	800c184 <getSoundData>
 8008db8:	1e03      	subs	r3, r0, #0
 8008dba:	d100      	bne.n	8008dbe <Mic_Upkeep+0x9a>
 8008dbc:	e09c      	b.n	8008ef8 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008dbe:	f003 fadf 	bl	800c380 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008dc2:	4b56      	ldr	r3, [pc, #344]	@ (8008f1c <Mic_Upkeep+0x1f8>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	001a      	movs	r2, r3
 8008dc8:	4b54      	ldr	r3, [pc, #336]	@ (8008f1c <Mic_Upkeep+0x1f8>)
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	4954      	ldr	r1, [pc, #336]	@ (8008f20 <Mic_Upkeep+0x1fc>)
 8008dce:	0038      	movs	r0, r7
 8008dd0:	f017 f99c 	bl	802010c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008dd4:	4b51      	ldr	r3, [pc, #324]	@ (8008f1c <Mic_Upkeep+0x1f8>)
 8008dd6:	89db      	ldrh	r3, [r3, #14]
 8008dd8:	001a      	movs	r2, r3
 8008dda:	4b50      	ldr	r3, [pc, #320]	@ (8008f1c <Mic_Upkeep+0x1f8>)
 8008ddc:	7c1b      	ldrb	r3, [r3, #16]
 8008dde:	4951      	ldr	r1, [pc, #324]	@ (8008f24 <Mic_Upkeep+0x200>)
 8008de0:	4851      	ldr	r0, [pc, #324]	@ (8008f28 <Mic_Upkeep+0x204>)
 8008de2:	f017 f993 	bl	802010c <siprintf>
      dBValue = atof(dBbuffer);
 8008de6:	003b      	movs	r3, r7
 8008de8:	0018      	movs	r0, r3
 8008dea:	f015 fd3f 	bl	801e86c <atof>
 8008dee:	0002      	movs	r2, r0
 8008df0:	000b      	movs	r3, r1
 8008df2:	0010      	movs	r0, r2
 8008df4:	0019      	movs	r1, r3
 8008df6:	f7fa fb7d 	bl	80034f4 <__aeabi_d2f>
 8008dfa:	1c02      	adds	r2, r0, #0
 8008dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8008f2c <Mic_Upkeep+0x208>)
 8008dfe:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008e00:	4b4a      	ldr	r3, [pc, #296]	@ (8008f2c <Mic_Upkeep+0x208>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	494a      	ldr	r1, [pc, #296]	@ (8008f30 <Mic_Upkeep+0x20c>)
 8008e06:	1c18      	adds	r0, r3, #0
 8008e08:	f7f8 f8ca 	bl	8000fa0 <__aeabi_fmul>
 8008e0c:	1c03      	adds	r3, r0, #0
 8008e0e:	1c18      	adds	r0, r3, #0
 8008e10:	f7fa fb28 	bl	8003464 <__aeabi_f2d>
 8008e14:	2200      	movs	r2, #0
 8008e16:	4b47      	ldr	r3, [pc, #284]	@ (8008f34 <Mic_Upkeep+0x210>)
 8008e18:	f7f8 fc68 	bl	80016ec <__aeabi_dadd>
 8008e1c:	0002      	movs	r2, r0
 8008e1e:	000b      	movs	r3, r1
 8008e20:	0010      	movs	r0, r2
 8008e22:	0019      	movs	r1, r3
 8008e24:	f7fa fa90 	bl	8003348 <__aeabi_d2iz>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7fa fac8 	bl	80033c0 <__aeabi_i2d>
 8008e30:	2200      	movs	r2, #0
 8008e32:	4b41      	ldr	r3, [pc, #260]	@ (8008f38 <Mic_Upkeep+0x214>)
 8008e34:	f7f8 ffbe 	bl	8001db4 <__aeabi_ddiv>
 8008e38:	0002      	movs	r2, r0
 8008e3a:	000b      	movs	r3, r1
 8008e3c:	0010      	movs	r0, r2
 8008e3e:	0019      	movs	r1, r3
 8008e40:	f7fa fb58 	bl	80034f4 <__aeabi_d2f>
 8008e44:	1c02      	adds	r2, r0, #0
 8008e46:	4b39      	ldr	r3, [pc, #228]	@ (8008f2c <Mic_Upkeep+0x208>)
 8008e48:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008e4a:	f7ff fdd5 	bl	80089f8 <MIC_Print>
      if (!startSPLcalculation()) {
 8008e4e:	f003 fb45 	bl	800c4dc <startSPLcalculation>
 8008e52:	0003      	movs	r3, r0
 8008e54:	001a      	movs	r2, r3
 8008e56:	2301      	movs	r3, #1
 8008e58:	4053      	eors	r3, r2
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e60:	4a2b      	ldr	r2, [pc, #172]	@ (8008f10 <Mic_Upkeep+0x1ec>)
 8008e62:	4b2c      	ldr	r3, [pc, #176]	@ (8008f14 <Mic_Upkeep+0x1f0>)
 8008e64:	2198      	movs	r1, #152	@ 0x98
 8008e66:	0018      	movs	r0, r3
 8008e68:	f005 fcb0 	bl	800e7cc <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	f003 facb 	bl	800c408 <enableMicrophone>
 8008e72:	0003      	movs	r3, r0
 8008e74:	001a      	movs	r2, r3
 8008e76:	2301      	movs	r3, #1
 8008e78:	4053      	eors	r3, r2
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e80:	4a23      	ldr	r2, [pc, #140]	@ (8008f10 <Mic_Upkeep+0x1ec>)
 8008e82:	4b24      	ldr	r3, [pc, #144]	@ (8008f14 <Mic_Upkeep+0x1f0>)
 8008e84:	219b      	movs	r1, #155	@ 0x9b
 8008e86:	0018      	movs	r0, r3
 8008e88:	f005 fca0 	bl	800e7cc <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008e8c:	f006 f82a 	bl	800eee4 <HAL_GetTick>
 8008e90:	0003      	movs	r3, r0
 8008e92:	4a2a      	ldr	r2, [pc, #168]	@ (8008f3c <Mic_Upkeep+0x218>)
 8008e94:	189a      	adds	r2, r3, r2
 8008e96:	4b2a      	ldr	r3, [pc, #168]	@ (8008f40 <Mic_Upkeep+0x21c>)
 8008e98:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008ea0:	f004 faa2 	bl	800d3e8 <ResetMICIndicator>
    }
    break;
 8008ea4:	e028      	b.n	8008ef8 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008ea6:	4b26      	ldr	r3, [pc, #152]	@ (8008f40 <Mic_Upkeep+0x21c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f005 fb80 	bl	800e5b0 <TimestampIsReached>
 8008eb0:	1e03      	subs	r3, r0, #0
 8008eb2:	d023      	beq.n	8008efc <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	f003 faa7 	bl	800c408 <enableMicrophone>
 8008eba:	0003      	movs	r3, r0
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4053      	eors	r3, r2
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008ec8:	4a11      	ldr	r2, [pc, #68]	@ (8008f10 <Mic_Upkeep+0x1ec>)
 8008eca:	4b12      	ldr	r3, [pc, #72]	@ (8008f14 <Mic_Upkeep+0x1f0>)
 8008ecc:	21a6      	movs	r1, #166	@ 0xa6
 8008ece:	0018      	movs	r0, r3
 8008ed0:	f005 fc7c 	bl	800e7cc <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008eda:	f004 fa43 	bl	800d364 <SetMICIndicator>
    }
    break;
 8008ede:	e00d      	b.n	8008efc <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008ee0:	4a18      	ldr	r2, [pc, #96]	@ (8008f44 <Mic_Upkeep+0x220>)
 8008ee2:	4b19      	ldr	r3, [pc, #100]	@ (8008f48 <Mic_Upkeep+0x224>)
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	2003      	movs	r0, #3
 8008ee8:	f005 fbb8 	bl	800e65c <CreateLine>
    MicState = MIC_STATE_INIT;
 8008eec:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
    break;
 8008ef2:	e004      	b.n	8008efe <Mic_Upkeep+0x1da>
    break;
 8008ef4:	46c0      	nop			@ (mov r8, r8)
 8008ef6:	e002      	b.n	8008efe <Mic_Upkeep+0x1da>
    break;
 8008ef8:	46c0      	nop			@ (mov r8, r8)
 8008efa:	e000      	b.n	8008efe <Mic_Upkeep+0x1da>
    break;
 8008efc:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008efe:	4b03      	ldr	r3, [pc, #12]	@ (8008f0c <Mic_Upkeep+0x1e8>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
}
 8008f02:	0018      	movs	r0, r3
 8008f04:	46bd      	mov	sp, r7
 8008f06:	b002      	add	sp, #8
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	46c0      	nop			@ (mov r8, r8)
 8008f0c:	2000104a 	.word	0x2000104a
 8008f10:	08024670 	.word	0x08024670
 8008f14:	080256e4 	.word	0x080256e4
 8008f18:	2000116d 	.word	0x2000116d
 8008f1c:	20001038 	.word	0x20001038
 8008f20:	0802468c 	.word	0x0802468c
 8008f24:	08024694 	.word	0x08024694
 8008f28:	20000fe8 	.word	0x20000fe8
 8008f2c:	20001028 	.word	0x20001028
 8008f30:	42c80000 	.word	0x42c80000
 8008f34:	3fe00000 	.word	0x3fe00000
 8008f38:	40590000 	.word	0x40590000
 8008f3c:	000002f3 	.word	0x000002f3
 8008f40:	20001034 	.word	0x20001034
 8008f44:	0802469c 	.word	0x0802469c
 8008f48:	080246bc 	.word	0x080246bc

08008f4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008f52:	1d3b      	adds	r3, r7, #4
 8008f54:	0018      	movs	r0, r3
 8008f56:	2314      	movs	r3, #20
 8008f58:	001a      	movs	r2, r3
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	f017 fa1a 	bl	8020394 <memset>
  RTC_DateTypeDef sDate = {0};
 8008f60:	003b      	movs	r3, r7
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008f66:	4b2e      	ldr	r3, [pc, #184]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f68:	4a2e      	ldr	r2, [pc, #184]	@ (8009024 <MX_RTC_Init+0xd8>)
 8008f6a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008f72:	4b2b      	ldr	r3, [pc, #172]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f74:	227f      	movs	r2, #127	@ 0x7f
 8008f76:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008f78:	4b29      	ldr	r3, [pc, #164]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f7a:	22ff      	movs	r2, #255	@ 0xff
 8008f7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f7e:	4b28      	ldr	r3, [pc, #160]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008f84:	4b26      	ldr	r3, [pc, #152]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f8a:	4b25      	ldr	r3, [pc, #148]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f90:	4b23      	ldr	r3, [pc, #140]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f96:	4b22      	ldr	r3, [pc, #136]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f00d f827 	bl	8015fec <HAL_RTC_Init>
 8008f9e:	1e03      	subs	r3, r0, #0
 8008fa0:	d001      	beq.n	8008fa6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008fa2:	f7ff f9b9 	bl	8008318 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	220d      	movs	r2, #13
 8008faa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008fac:	1d3b      	adds	r3, r7, #4
 8008fae:	2200      	movs	r2, #0
 8008fb0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008fb2:	1d3b      	adds	r3, r7, #4
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008fb8:	1d3b      	adds	r3, r7, #4
 8008fba:	2200      	movs	r2, #0
 8008fbc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008fc4:	1d39      	adds	r1, r7, #4
 8008fc6:	4b16      	ldr	r3, [pc, #88]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f00d f8aa 	bl	8016124 <HAL_RTC_SetTime>
 8008fd0:	1e03      	subs	r3, r0, #0
 8008fd2:	d001      	beq.n	8008fd8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008fd4:	f7ff f9a0 	bl	8008318 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008fd8:	003b      	movs	r3, r7
 8008fda:	2206      	movs	r2, #6
 8008fdc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008fde:	003b      	movs	r3, r7
 8008fe0:	2211      	movs	r2, #17
 8008fe2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008fe4:	003b      	movs	r3, r7
 8008fe6:	2217      	movs	r2, #23
 8008fe8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008fea:	003b      	movs	r3, r7
 8008fec:	2218      	movs	r2, #24
 8008fee:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008ff0:	0039      	movs	r1, r7
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <MX_RTC_Init+0xd4>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f00d f99c 	bl	8016334 <HAL_RTC_SetDate>
 8008ffc:	1e03      	subs	r3, r0, #0
 8008ffe:	d001      	beq.n	8009004 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009000:	f7ff f98a 	bl	8008318 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8009004:	4b06      	ldr	r3, [pc, #24]	@ (8009020 <MX_RTC_Init+0xd4>)
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	0018      	movs	r0, r3
 800900c:	f00d fb4c 	bl	80166a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009010:	1e03      	subs	r3, r0, #0
 8009012:	d001      	beq.n	8009018 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8009014:	f7ff f980 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009018:	46c0      	nop			@ (mov r8, r8)
 800901a:	46bd      	mov	sp, r7
 800901c:	b006      	add	sp, #24
 800901e:	bd80      	pop	{r7, pc}
 8009020:	2000104c 	.word	0x2000104c
 8009024:	40002800 	.word	0x40002800

08009028 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a0a      	ldr	r2, [pc, #40]	@ (8009060 <HAL_RTC_MspInit+0x38>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d10e      	bne.n	8009058 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800903a:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <HAL_RTC_MspInit+0x3c>)
 800903c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800903e:	4b09      	ldr	r3, [pc, #36]	@ (8009064 <HAL_RTC_MspInit+0x3c>)
 8009040:	2180      	movs	r1, #128	@ 0x80
 8009042:	02c9      	lsls	r1, r1, #11
 8009044:	430a      	orrs	r2, r1
 8009046:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009048:	2200      	movs	r2, #0
 800904a:	2100      	movs	r1, #0
 800904c:	2002      	movs	r0, #2
 800904e:	f006 fbed 	bl	800f82c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8009052:	2002      	movs	r0, #2
 8009054:	f006 fbff 	bl	800f856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009058:	46c0      	nop			@ (mov r8, r8)
 800905a:	46bd      	mov	sp, r7
 800905c:	b002      	add	sp, #8
 800905e:	bd80      	pop	{r7, pc}
 8009060:	40002800 	.word	0x40002800
 8009064:	40021000 	.word	0x40021000

08009068 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoxi;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800906c:	4b02      	ldr	r3, [pc, #8]	@ (8009078 <sen5x_Get_sen5x_enable_state+0x10>)
 800906e:	781b      	ldrb	r3, [r3, #0]
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			@ (mov r8, r8)
 8009078:	20001073 	.word	0x20001073

0800907c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	0002      	movs	r2, r0
 8009084:	1dfb      	adds	r3, r7, #7
 8009086:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 8009088:	4b03      	ldr	r3, [pc, #12]	@ (8009098 <sen5x_Set_sen5x_state+0x1c>)
 800908a:	1dfa      	adds	r2, r7, #7
 800908c:	7812      	ldrb	r2, [r2, #0]
 800908e:	701a      	strb	r2, [r3, #0]
}
 8009090:	46c0      	nop			@ (mov r8, r8)
 8009092:	46bd      	mov	sp, r7
 8009094:	b002      	add	sp, #8
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20001073 	.word	0x20001073

0800909c <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 80090a4:	f005 ff1e 	bl	800eee4 <HAL_GetTick>
 80090a8:	0002      	movs	r2, r0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	18d2      	adds	r2, r2, r3
 80090ae:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <setsen5xReadTimer+0x20>)
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b002      	add	sp, #8
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	20001088 	.word	0x20001088

080090c0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	0002      	movs	r2, r0
 80090c8:	1dfb      	adds	r3, r7, #7
 80090ca:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 80090cc:	4b03      	ldr	r3, [pc, #12]	@ (80090dc <setsen5xSamplecounter+0x1c>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	701a      	strb	r2, [r3, #0]
}
 80090d2:	46c0      	nop			@ (mov r8, r8)
 80090d4:	46bd      	mov	sp, r7
 80090d6:	b002      	add	sp, #8
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	46c0      	nop			@ (mov r8, r8)
 80090dc:	2000107c 	.word	0x2000107c

080090e0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 80090e8:	f7ff f99c 	bl	8008424 <IsPMSensorEnabled>
 80090ec:	1e03      	subs	r3, r0, #0
 80090ee:	d02c      	beq.n	800914a <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 80090f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009168 <sen5x_enable+0x88>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	1e5a      	subs	r2, r3, #1
 80090f6:	4193      	sbcs	r3, r2
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2201      	movs	r2, #1
 80090fc:	4053      	eors	r3, r2
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	1c1a      	adds	r2, r3, #0
 8009102:	2301      	movs	r3, #1
 8009104:	4013      	ands	r3, r2
 8009106:	b2da      	uxtb	r2, r3
 8009108:	4b17      	ldr	r3, [pc, #92]	@ (8009168 <sen5x_enable+0x88>)
 800910a:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 800910c:	4b16      	ldr	r3, [pc, #88]	@ (8009168 <sen5x_enable+0x88>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 8009114:	2000      	movs	r0, #0
 8009116:	f7ff ffc1 	bl	800909c <setsen5xReadTimer>
 800911a:	e009      	b.n	8009130 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800911c:	f005 fee2 	bl	800eee4 <HAL_GetTick>
 8009120:	0002      	movs	r2, r0
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2164      	movs	r1, #100	@ 0x64
 8009126:	434b      	muls	r3, r1
 8009128:	18d3      	adds	r3, r2, r3
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff ffb6 	bl	800909c <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 8009130:	4b0d      	ldr	r3, [pc, #52]	@ (8009168 <sen5x_enable+0x88>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <sen5x_enable+0x5c>
 8009138:	4b0c      	ldr	r3, [pc, #48]	@ (800916c <sen5x_enable+0x8c>)
 800913a:	e000      	b.n	800913e <sen5x_enable+0x5e>
 800913c:	4b0c      	ldr	r3, [pc, #48]	@ (8009170 <sen5x_enable+0x90>)
 800913e:	4a0d      	ldr	r2, [pc, #52]	@ (8009174 <sen5x_enable+0x94>)
 8009140:	490d      	ldr	r1, [pc, #52]	@ (8009178 <sen5x_enable+0x98>)
 8009142:	2002      	movs	r0, #2
 8009144:	f005 fa8a 	bl	800e65c <CreateLine>
 8009148:	e005      	b.n	8009156 <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 800914a:	4a0c      	ldr	r2, [pc, #48]	@ (800917c <sen5x_enable+0x9c>)
 800914c:	4b0a      	ldr	r3, [pc, #40]	@ (8009178 <sen5x_enable+0x98>)
 800914e:	0019      	movs	r1, r3
 8009150:	2002      	movs	r0, #2
 8009152:	f005 fa83 	bl	800e65c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <sen5x_enable+0xa0>)
 8009158:	2201      	movs	r2, #1
 800915a:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800915c:	4b02      	ldr	r3, [pc, #8]	@ (8009168 <sen5x_enable+0x88>)
 800915e:	781b      	ldrb	r3, [r3, #0]
}
 8009160:	0018      	movs	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	b002      	add	sp, #8
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20001073 	.word	0x20001073
 800916c:	080246c0 	.word	0x080246c0
 8009170:	080246c8 	.word	0x080246c8
 8009174:	080246d4 	.word	0x080246d4
 8009178:	080246f0 	.word	0x080246f0
 800917c:	080246f4 	.word	0x080246f4
 8009180:	2000008d 	.word	0x2000008d

08009184 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8009188:	2380      	movs	r3, #128	@ 0x80
 800918a:	015b      	lsls	r3, r3, #5
 800918c:	480f      	ldr	r0, [pc, #60]	@ (80091cc <sen5x_Power_On+0x48>)
 800918e:	2201      	movs	r2, #1
 8009190:	0019      	movs	r1, r3
 8009192:	f007 f938 	bl	8010406 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 8009196:	4a0e      	ldr	r2, [pc, #56]	@ (80091d0 <sen5x_Power_On+0x4c>)
 8009198:	4b0e      	ldr	r3, [pc, #56]	@ (80091d4 <sen5x_Power_On+0x50>)
 800919a:	0019      	movs	r1, r3
 800919c:	2003      	movs	r0, #3
 800919e:	f005 fa5d 	bl	800e65c <CreateLine>
  HAL_Delay(150);
 80091a2:	2096      	movs	r0, #150	@ 0x96
 80091a4:	f005 fea8 	bl	800eef8 <HAL_Delay>
  if (sen5x_device_reset()) {
 80091a8:	f001 f9d4 	bl	800a554 <sen5x_device_reset>
 80091ac:	1e03      	subs	r3, r0, #0
 80091ae:	d006      	beq.n	80091be <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 80091b0:	4a09      	ldr	r2, [pc, #36]	@ (80091d8 <sen5x_Power_On+0x54>)
 80091b2:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <sen5x_Power_On+0x58>)
 80091b4:	0019      	movs	r1, r3
 80091b6:	2001      	movs	r0, #1
 80091b8:	f005 fa50 	bl	800e65c <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 80091bc:	e002      	b.n	80091c4 <sen5x_Power_On+0x40>
    sen5x_On = true;
 80091be:	4b08      	ldr	r3, [pc, #32]	@ (80091e0 <sen5x_Power_On+0x5c>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	701a      	strb	r2, [r3, #0]
}
 80091c4:	46c0      	nop			@ (mov r8, r8)
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	46c0      	nop			@ (mov r8, r8)
 80091cc:	50000800 	.word	0x50000800
 80091d0:	08024714 	.word	0x08024714
 80091d4:	08024730 	.word	0x08024730
 80091d8:	08024734 	.word	0x08024734
 80091dc:	0802475c 	.word	0x0802475c
 80091e0:	20001071 	.word	0x20001071

080091e4 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 80091e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009224 <sen5x_Power_Off+0x40>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d006      	beq.n	80091fe <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 80091f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009228 <sen5x_Power_Off+0x44>)
 80091f2:	4b0e      	ldr	r3, [pc, #56]	@ (800922c <sen5x_Power_Off+0x48>)
 80091f4:	0019      	movs	r1, r3
 80091f6:	2003      	movs	r0, #3
 80091f8:	f005 fa30 	bl	800e65c <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 80091fc:	e00f      	b.n	800921e <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 80091fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <sen5x_Power_Off+0x4c>)
 8009200:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <sen5x_Power_Off+0x48>)
 8009202:	0019      	movs	r1, r3
 8009204:	2003      	movs	r0, #3
 8009206:	f005 fa29 	bl	800e65c <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800920a:	2380      	movs	r3, #128	@ 0x80
 800920c:	015b      	lsls	r3, r3, #5
 800920e:	4809      	ldr	r0, [pc, #36]	@ (8009234 <sen5x_Power_Off+0x50>)
 8009210:	2200      	movs	r2, #0
 8009212:	0019      	movs	r1, r3
 8009214:	f007 f8f7 	bl	8010406 <HAL_GPIO_WritePin>
      sen5x_On = false;
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <sen5x_Power_Off+0x54>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
}
 800921e:	46c0      	nop			@ (mov r8, r8)
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20001072 	.word	0x20001072
 8009228:	08024760 	.word	0x08024760
 800922c:	08024730 	.word	0x08024730
 8009230:	08024790 	.word	0x08024790
 8009234:	50000800 	.word	0x50000800
 8009238:	20001071 	.word	0x20001071

0800923c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009240:	4b02      	ldr	r3, [pc, #8]	@ (800924c <reset_fanCleaningDone+0x10>)
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
}
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20001070 	.word	0x20001070

08009250 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009252:	b093      	sub	sp, #76	@ 0x4c
 8009254:	af04      	add	r7, sp, #16
  int16_t error = 0;
 8009256:	2436      	movs	r4, #54	@ 0x36
 8009258:	193b      	adds	r3, r7, r4
 800925a:	2200      	movs	r2, #0
 800925c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800925e:	2335      	movs	r3, #53	@ 0x35
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	2220      	movs	r2, #32
 8009264:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009266:	2334      	movs	r3, #52	@ 0x34
 8009268:	18fb      	adds	r3, r7, r3
 800926a:	2220      	movs	r2, #32
 800926c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800926e:	f7ff ff89 	bl	8009184 <sen5x_Power_On>
  error = sen5x_device_reset();
 8009272:	0025      	movs	r5, r4
 8009274:	193c      	adds	r4, r7, r4
 8009276:	f001 f96d 	bl	800a554 <sen5x_device_reset>
 800927a:	0003      	movs	r3, r0
 800927c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800927e:	002c      	movs	r4, r5
 8009280:	193b      	adds	r3, r7, r4
 8009282:	2200      	movs	r2, #0
 8009284:	5e9b      	ldrsh	r3, [r3, r2]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800928a:	193b      	adds	r3, r7, r4
 800928c:	2200      	movs	r2, #0
 800928e:	5e9b      	ldrsh	r3, [r3, r2]
 8009290:	4a75      	ldr	r2, [pc, #468]	@ (8009468 <probe_sen5x+0x218>)
 8009292:	4976      	ldr	r1, [pc, #472]	@ (800946c <probe_sen5x+0x21c>)
 8009294:	2001      	movs	r0, #1
 8009296:	f005 f9e1 	bl	800e65c <CreateLine>
      return error;
 800929a:	193b      	adds	r3, r7, r4
 800929c:	2200      	movs	r2, #0
 800929e:	5e9b      	ldrsh	r3, [r3, r2]
 80092a0:	e0de      	b.n	8009460 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80092a2:	2536      	movs	r5, #54	@ 0x36
 80092a4:	197c      	adds	r4, r7, r5
 80092a6:	2335      	movs	r3, #53	@ 0x35
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	230c      	movs	r3, #12
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f001 f83a 	bl	800a32c <sen5x_get_serial_number>
 80092b8:	0003      	movs	r3, r0
 80092ba:	8023      	strh	r3, [r4, #0]
  if (error) {
 80092bc:	197b      	adds	r3, r7, r5
 80092be:	2200      	movs	r2, #0
 80092c0:	5e9b      	ldrsh	r3, [r3, r2]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00b      	beq.n	80092de <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80092c6:	197b      	adds	r3, r7, r5
 80092c8:	2200      	movs	r2, #0
 80092ca:	5e9a      	ldrsh	r2, [r3, r2]
 80092cc:	4b68      	ldr	r3, [pc, #416]	@ (8009470 <probe_sen5x+0x220>)
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f016 feab 	bl	802002c <iprintf>
      return error;
 80092d6:	197b      	adds	r3, r7, r5
 80092d8:	2200      	movs	r2, #0
 80092da:	5e9b      	ldrsh	r3, [r3, r2]
 80092dc:	e0c0      	b.n	8009460 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80092de:	230c      	movs	r3, #12
 80092e0:	18fa      	adds	r2, r7, r3
 80092e2:	4b64      	ldr	r3, [pc, #400]	@ (8009474 <probe_sen5x+0x224>)
 80092e4:	0011      	movs	r1, r2
 80092e6:	0018      	movs	r0, r3
 80092e8:	f016 fea0 	bl	802002c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 80092ec:	2536      	movs	r5, #54	@ 0x36
 80092ee:	197c      	adds	r4, r7, r5
 80092f0:	2334      	movs	r3, #52	@ 0x34
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	4b60      	ldr	r3, [pc, #384]	@ (8009478 <probe_sen5x+0x228>)
 80092f8:	0011      	movs	r1, r2
 80092fa:	0018      	movs	r0, r3
 80092fc:	f000 ffc0 	bl	800a280 <sen5x_get_product_name>
 8009300:	0003      	movs	r3, r0
 8009302:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009304:	197b      	adds	r3, r7, r5
 8009306:	2200      	movs	r2, #0
 8009308:	5e9b      	ldrsh	r3, [r3, r2]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800930e:	197b      	adds	r3, r7, r5
 8009310:	2200      	movs	r2, #0
 8009312:	5e9a      	ldrsh	r2, [r3, r2]
 8009314:	4b59      	ldr	r3, [pc, #356]	@ (800947c <probe_sen5x+0x22c>)
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f016 fe87 	bl	802002c <iprintf>
      return error;
 800931e:	197b      	adds	r3, r7, r5
 8009320:	2200      	movs	r2, #0
 8009322:	5e9b      	ldrsh	r3, [r3, r2]
 8009324:	e09c      	b.n	8009460 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009326:	4a54      	ldr	r2, [pc, #336]	@ (8009478 <probe_sen5x+0x228>)
 8009328:	4b55      	ldr	r3, [pc, #340]	@ (8009480 <probe_sen5x+0x230>)
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f016 fe7d 	bl	802002c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009332:	2636      	movs	r6, #54	@ 0x36
 8009334:	19bc      	adds	r4, r7, r6
 8009336:	2308      	movs	r3, #8
 8009338:	18fd      	adds	r5, r7, r3
 800933a:	2309      	movs	r3, #9
 800933c:	18fa      	adds	r2, r7, r3
 800933e:	230a      	movs	r3, #10
 8009340:	18f9      	adds	r1, r7, r3
 8009342:	230b      	movs	r3, #11
 8009344:	18f8      	adds	r0, r7, r3
 8009346:	1d7b      	adds	r3, r7, #5
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	1dbb      	adds	r3, r7, #6
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	1dfb      	adds	r3, r7, #7
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	002b      	movs	r3, r5
 8009354:	f001 f840 	bl	800a3d8 <sen5x_get_version>
 8009358:	0003      	movs	r3, r0
 800935a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800935c:	19bb      	adds	r3, r7, r6
 800935e:	2200      	movs	r2, #0
 8009360:	5e9b      	ldrsh	r3, [r3, r2]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009366:	19bb      	adds	r3, r7, r6
 8009368:	2200      	movs	r2, #0
 800936a:	5e9a      	ldrsh	r2, [r3, r2]
 800936c:	4b45      	ldr	r3, [pc, #276]	@ (8009484 <probe_sen5x+0x234>)
 800936e:	0011      	movs	r1, r2
 8009370:	0018      	movs	r0, r3
 8009372:	f016 fe5b 	bl	802002c <iprintf>
      return error;
 8009376:	19bb      	adds	r3, r7, r6
 8009378:	2200      	movs	r2, #0
 800937a:	5e9b      	ldrsh	r3, [r3, r2]
 800937c:	e070      	b.n	8009460 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800937e:	230b      	movs	r3, #11
 8009380:	18fb      	adds	r3, r7, r3
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	0019      	movs	r1, r3
 8009386:	230a      	movs	r3, #10
 8009388:	18fb      	adds	r3, r7, r3
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	001a      	movs	r2, r3
 800938e:	2308      	movs	r3, #8
 8009390:	18fb      	adds	r3, r7, r3
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	001c      	movs	r4, r3
 8009396:	1dfb      	adds	r3, r7, #7
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	483b      	ldr	r0, [pc, #236]	@ (8009488 <probe_sen5x+0x238>)
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	0023      	movs	r3, r4
 80093a0:	f016 fe44 	bl	802002c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80093a4:	2300      	movs	r3, #0
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80093a8:	262e      	movs	r6, #46	@ 0x2e
 80093aa:	19bb      	adds	r3, r7, r6
 80093ac:	2200      	movs	r2, #0
 80093ae:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80093b0:	232c      	movs	r3, #44	@ 0x2c
 80093b2:	18fb      	adds	r3, r7, r3
 80093b4:	2200      	movs	r2, #0
 80093b6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80093b8:	4934      	ldr	r1, [pc, #208]	@ (800948c <probe_sen5x+0x23c>)
 80093ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093bc:	f7f7 fdf0 	bl	8000fa0 <__aeabi_fmul>
 80093c0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80093c2:	1c18      	adds	r0, r3, #0
 80093c4:	f7f8 f8e4 	bl	8001590 <__aeabi_f2iz>
 80093c8:	0003      	movs	r3, r0
 80093ca:	b218      	sxth	r0, r3
 80093cc:	2536      	movs	r5, #54	@ 0x36
 80093ce:	197c      	adds	r4, r7, r5
 80093d0:	232c      	movs	r3, #44	@ 0x2c
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	881a      	ldrh	r2, [r3, #0]
 80093d6:	19bb      	adds	r3, r7, r6
 80093d8:	2100      	movs	r1, #0
 80093da:	5e5b      	ldrsh	r3, [r3, r1]
 80093dc:	0019      	movs	r1, r3
 80093de:	f000 feeb 	bl	800a1b8 <sen5x_set_temperature_offset_parameters>
 80093e2:	0003      	movs	r3, r0
 80093e4:	8023      	strh	r3, [r4, #0]
  if (error) {
 80093e6:	197b      	adds	r3, r7, r5
 80093e8:	2200      	movs	r2, #0
 80093ea:	5e9b      	ldrsh	r3, [r3, r2]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 80093f0:	197b      	adds	r3, r7, r5
 80093f2:	2200      	movs	r2, #0
 80093f4:	5e9b      	ldrsh	r3, [r3, r2]
 80093f6:	4a26      	ldr	r2, [pc, #152]	@ (8009490 <probe_sen5x+0x240>)
 80093f8:	491c      	ldr	r1, [pc, #112]	@ (800946c <probe_sen5x+0x21c>)
 80093fa:	2001      	movs	r0, #1
 80093fc:	f005 f92e 	bl	800e65c <CreateLine>
      return error;
 8009400:	197b      	adds	r3, r7, r5
 8009402:	2200      	movs	r2, #0
 8009404:	5e9b      	ldrsh	r3, [r3, r2]
 8009406:	e02b      	b.n	8009460 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800940a:	f7fa f82b 	bl	8003464 <__aeabi_f2d>
 800940e:	0002      	movs	r2, r0
 8009410:	000b      	movs	r3, r1
 8009412:	4820      	ldr	r0, [pc, #128]	@ (8009494 <probe_sen5x+0x244>)
 8009414:	4920      	ldr	r1, [pc, #128]	@ (8009498 <probe_sen5x+0x248>)
 8009416:	9200      	str	r2, [sp, #0]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	0002      	movs	r2, r0
 800941c:	2002      	movs	r0, #2
 800941e:	f005 f91d 	bl	800e65c <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 8009422:	f7fd f81f 	bl	8006464 <Check_USB_PowerOn>
 8009426:	0003      	movs	r3, r0
 8009428:	001a      	movs	r2, r3
 800942a:	2301      	movs	r3, #1
 800942c:	4053      	eors	r3, r2
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 8009434:	f7ff fed6 	bl	80091e4 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 8009438:	f005 fd54 	bl	800eee4 <HAL_GetTick>
 800943c:	0003      	movs	r3, r0
 800943e:	22fa      	movs	r2, #250	@ 0xfa
 8009440:	00d2      	lsls	r2, r2, #3
 8009442:	189a      	adds	r2, r3, r2
 8009444:	4b15      	ldr	r3, [pc, #84]	@ (800949c <probe_sen5x+0x24c>)
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	e006      	b.n	8009458 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800944a:	f005 fd4b 	bl	800eee4 <HAL_GetTick>
 800944e:	0003      	movs	r3, r0
 8009450:	4a13      	ldr	r2, [pc, #76]	@ (80094a0 <probe_sen5x+0x250>)
 8009452:	189a      	adds	r2, r3, r2
 8009454:	4b11      	ldr	r3, [pc, #68]	@ (800949c <probe_sen5x+0x24c>)
 8009456:	601a      	str	r2, [r3, #0]
  }
  return error;
 8009458:	2336      	movs	r3, #54	@ 0x36
 800945a:	18fb      	adds	r3, r7, r3
 800945c:	2200      	movs	r2, #0
 800945e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b00f      	add	sp, #60	@ 0x3c
 8009466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009468:	080247ac 	.word	0x080247ac
 800946c:	0802475c 	.word	0x0802475c
 8009470:	080247d8 	.word	0x080247d8
 8009474:	08024808 	.word	0x08024808
 8009478:	20001074 	.word	0x20001074
 800947c:	0802481c 	.word	0x0802481c
 8009480:	0802484c 	.word	0x0802484c
 8009484:	08024860 	.word	0x08024860
 8009488:	0802488c 	.word	0x0802488c
 800948c:	43480000 	.word	0x43480000
 8009490:	080248b0 	.word	0x080248b0
 8009494:	080248f0 	.word	0x080248f0
 8009498:	080246f0 	.word	0x080246f0
 800949c:	20001088 	.word	0x20001088
 80094a0:	00006d60 	.word	0x00006d60

080094a4 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 80094a4:	b590      	push	{r4, r7, lr}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80094aa:	1dbb      	adds	r3, r7, #6
 80094ac:	2200      	movs	r2, #0
 80094ae:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80094b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009520 <sen5x_lightup_measurement+0x7c>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80094b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009524 <sen5x_lightup_measurement+0x80>)
 80094ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009528 <sen5x_lightup_measurement+0x84>)
 80094bc:	0019      	movs	r1, r3
 80094be:	2002      	movs	r0, #2
 80094c0:	f005 f8cc 	bl	800e65c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80094c4:	1dbc      	adds	r4, r7, #6
 80094c6:	f000 fd03 	bl	8009ed0 <sen5x_start_measurement_without_pm>
 80094ca:	0003      	movs	r3, r0
 80094cc:	8023      	strh	r3, [r4, #0]
 80094ce:	e00a      	b.n	80094e6 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80094d0:	4a16      	ldr	r2, [pc, #88]	@ (800952c <sen5x_lightup_measurement+0x88>)
 80094d2:	4b15      	ldr	r3, [pc, #84]	@ (8009528 <sen5x_lightup_measurement+0x84>)
 80094d4:	0019      	movs	r1, r3
 80094d6:	2002      	movs	r0, #2
 80094d8:	f005 f8c0 	bl	800e65c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80094dc:	1dbc      	adds	r4, r7, #6
 80094de:	f000 fcc9 	bl	8009e74 <sen5x_start_measurement>
 80094e2:	0003      	movs	r3, r0
 80094e4:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80094e6:	1dbb      	adds	r3, r7, #6
 80094e8:	2200      	movs	r2, #0
 80094ea:	5e9b      	ldrsh	r3, [r3, r2]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 80094f0:	1dbb      	adds	r3, r7, #6
 80094f2:	2200      	movs	r2, #0
 80094f4:	5e9b      	ldrsh	r3, [r3, r2]
 80094f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009530 <sen5x_lightup_measurement+0x8c>)
 80094f8:	490e      	ldr	r1, [pc, #56]	@ (8009534 <sen5x_lightup_measurement+0x90>)
 80094fa:	2001      	movs	r0, #1
 80094fc:	f005 f8ae 	bl	800e65c <CreateLine>
 8009500:	e007      	b.n	8009512 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009502:	f7fc ffdf 	bl	80064c4 <showTime>
    Info("sen5x_start_measurement executed");
 8009506:	4a0c      	ldr	r2, [pc, #48]	@ (8009538 <sen5x_lightup_measurement+0x94>)
 8009508:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <sen5x_lightup_measurement+0x84>)
 800950a:	0019      	movs	r1, r3
 800950c:	2002      	movs	r0, #2
 800950e:	f005 f8a5 	bl	800e65c <CreateLine>
  }
  return error;
 8009512:	1dbb      	adds	r3, r7, #6
 8009514:	2200      	movs	r2, #0
 8009516:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b003      	add	sp, #12
 800951e:	bd90      	pop	{r4, r7, pc}
 8009520:	20001072 	.word	0x20001072
 8009524:	08024928 	.word	0x08024928
 8009528:	080246f0 	.word	0x080246f0
 800952c:	08024954 	.word	0x08024954
 8009530:	08024974 	.word	0x08024974
 8009534:	0802475c 	.word	0x0802475c
 8009538:	080249a4 	.word	0x080249a4

0800953c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
  int16_t error = 0;
 8009542:	1dbb      	adds	r3, r7, #6
 8009544:	2200      	movs	r2, #0
 8009546:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009548:	4b21      	ldr	r3, [pc, #132]	@ (80095d0 <sen5x_extinguish_measurement+0x94>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01e      	beq.n	800958e <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 8009550:	4a20      	ldr	r2, [pc, #128]	@ (80095d4 <sen5x_extinguish_measurement+0x98>)
 8009552:	4b21      	ldr	r3, [pc, #132]	@ (80095d8 <sen5x_extinguish_measurement+0x9c>)
 8009554:	0019      	movs	r1, r3
 8009556:	2002      	movs	r0, #2
 8009558:	f005 f880 	bl	800e65c <CreateLine>
    Info("PM measurement is disabled");
 800955c:	4a1f      	ldr	r2, [pc, #124]	@ (80095dc <sen5x_extinguish_measurement+0xa0>)
 800955e:	4b1e      	ldr	r3, [pc, #120]	@ (80095d8 <sen5x_extinguish_measurement+0x9c>)
 8009560:	0019      	movs	r1, r3
 8009562:	2002      	movs	r0, #2
 8009564:	f005 f87a 	bl	800e65c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009568:	1dbc      	adds	r4, r7, #6
 800956a:	f000 fcb1 	bl	8009ed0 <sen5x_start_measurement_without_pm>
 800956e:	0003      	movs	r3, r0
 8009570:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009572:	1dbb      	adds	r3, r7, #6
 8009574:	2200      	movs	r2, #0
 8009576:	5e9b      	ldrsh	r3, [r3, r2]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d022      	beq.n	80095c2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800957c:	1dbb      	adds	r3, r7, #6
 800957e:	2200      	movs	r2, #0
 8009580:	5e9b      	ldrsh	r3, [r3, r2]
 8009582:	4a17      	ldr	r2, [pc, #92]	@ (80095e0 <sen5x_extinguish_measurement+0xa4>)
 8009584:	4917      	ldr	r1, [pc, #92]	@ (80095e4 <sen5x_extinguish_measurement+0xa8>)
 8009586:	2001      	movs	r0, #1
 8009588:	f005 f868 	bl	800e65c <CreateLine>
 800958c:	e019      	b.n	80095c2 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800958e:	1dbc      	adds	r4, r7, #6
 8009590:	f000 fccc 	bl	8009f2c <sen5x_stop_measurement>
 8009594:	0003      	movs	r3, r0
 8009596:	8023      	strh	r3, [r4, #0]
    showTime();
 8009598:	f7fc ff94 	bl	80064c4 <showTime>
    Info("sen5x_stop_measurement executed");
 800959c:	4a12      	ldr	r2, [pc, #72]	@ (80095e8 <sen5x_extinguish_measurement+0xac>)
 800959e:	4b0e      	ldr	r3, [pc, #56]	@ (80095d8 <sen5x_extinguish_measurement+0x9c>)
 80095a0:	0019      	movs	r1, r3
 80095a2:	2002      	movs	r0, #2
 80095a4:	f005 f85a 	bl	800e65c <CreateLine>
    if (error) {
 80095a8:	1dbb      	adds	r3, r7, #6
 80095aa:	2200      	movs	r2, #0
 80095ac:	5e9b      	ldrsh	r3, [r3, r2]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80095b2:	1dbb      	adds	r3, r7, #6
 80095b4:	2200      	movs	r2, #0
 80095b6:	5e9b      	ldrsh	r3, [r3, r2]
 80095b8:	4a0c      	ldr	r2, [pc, #48]	@ (80095ec <sen5x_extinguish_measurement+0xb0>)
 80095ba:	490a      	ldr	r1, [pc, #40]	@ (80095e4 <sen5x_extinguish_measurement+0xa8>)
 80095bc:	2001      	movs	r0, #1
 80095be:	f005 f84d 	bl	800e65c <CreateLine>
    }
  }
  return error;
 80095c2:	1dbb      	adds	r3, r7, #6
 80095c4:	2200      	movs	r2, #0
 80095c6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80095c8:	0018      	movs	r0, r3
 80095ca:	46bd      	mov	sp, r7
 80095cc:	b003      	add	sp, #12
 80095ce:	bd90      	pop	{r4, r7, pc}
 80095d0:	20001072 	.word	0x20001072
 80095d4:	080249c8 	.word	0x080249c8
 80095d8:	080246f0 	.word	0x080246f0
 80095dc:	08024a00 	.word	0x08024a00
 80095e0:	08024a1c 	.word	0x08024a1c
 80095e4:	0802475c 	.word	0x0802475c
 80095e8:	08024a5c 	.word	0x08024a5c
 80095ec:	08024a7c 	.word	0x08024a7c

080095f0 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80095f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f2:	b08d      	sub	sp, #52	@ 0x34
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80095f8:	261e      	movs	r6, #30
 80095fa:	19bb      	adds	r3, r7, r6
 80095fc:	2200      	movs	r2, #0
 80095fe:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009600:	19bc      	adds	r4, r7, r6
 8009602:	2316      	movs	r3, #22
 8009604:	18fd      	adds	r5, r7, r3
 8009606:	2318      	movs	r3, #24
 8009608:	18fa      	adds	r2, r7, r3
 800960a:	231a      	movs	r3, #26
 800960c:	18f9      	adds	r1, r7, r3
 800960e:	231c      	movs	r3, #28
 8009610:	18f8      	adds	r0, r7, r3
 8009612:	230e      	movs	r3, #14
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	9303      	str	r3, [sp, #12]
 8009618:	2310      	movs	r3, #16
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	9302      	str	r3, [sp, #8]
 800961e:	2312      	movs	r3, #18
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	2314      	movs	r3, #20
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	002b      	movs	r3, r5
 800962c:	f000 fd00 	bl	800a030 <sen5x_read_measured_values>
 8009630:	0003      	movs	r3, r0
 8009632:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009634:	19bb      	adds	r3, r7, r6
 8009636:	2200      	movs	r2, #0
 8009638:	5e9b      	ldrsh	r3, [r3, r2]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <sen5x_read_measurement+0x56>
    return error;
 800963e:	19bb      	adds	r3, r7, r6
 8009640:	2200      	movs	r2, #0
 8009642:	5e9b      	ldrsh	r3, [r3, r2]
 8009644:	e02c      	b.n	80096a0 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009646:	231c      	movs	r3, #28
 8009648:	18fb      	adds	r3, r7, r3
 800964a:	881a      	ldrh	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009650:	231a      	movs	r3, #26
 8009652:	18fb      	adds	r3, r7, r3
 8009654:	881a      	ldrh	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800965a:	2318      	movs	r3, #24
 800965c:	18fb      	adds	r3, r7, r3
 800965e:	881a      	ldrh	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009664:	2316      	movs	r3, #22
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	881a      	ldrh	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800966e:	2314      	movs	r3, #20
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	2200      	movs	r2, #0
 8009674:	5e9a      	ldrsh	r2, [r3, r2]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800967a:	2312      	movs	r3, #18
 800967c:	18fb      	adds	r3, r7, r3
 800967e:	2200      	movs	r2, #0
 8009680:	5e9a      	ldrsh	r2, [r3, r2]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009686:	2310      	movs	r3, #16
 8009688:	18fb      	adds	r3, r7, r3
 800968a:	2200      	movs	r2, #0
 800968c:	5e9a      	ldrsh	r2, [r3, r2]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8009692:	230e      	movs	r3, #14
 8009694:	18fb      	adds	r3, r7, r3
 8009696:	2200      	movs	r2, #0
 8009698:	5e9a      	ldrsh	r2, [r3, r2]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	81da      	strh	r2, [r3, #14]
  return 0;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	0018      	movs	r0, r3
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b009      	add	sp, #36	@ 0x24
 80096a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096a8 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80096ac:	4b69      	ldr	r3, [pc, #420]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	4a69      	ldr	r2, [pc, #420]	@ (8009858 <sen5x_printvalues+0x1b0>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80096b6:	4b67      	ldr	r3, [pc, #412]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	0018      	movs	r0, r3
 80096bc:	f7f7 ff88 	bl	80015d0 <__aeabi_i2f>
 80096c0:	1c03      	adds	r3, r0, #0
 80096c2:	4966      	ldr	r1, [pc, #408]	@ (800985c <sen5x_printvalues+0x1b4>)
 80096c4:	1c18      	adds	r0, r3, #0
 80096c6:	f7f7 fa85 	bl	8000bd4 <__aeabi_fdiv>
 80096ca:	1c03      	adds	r3, r0, #0
 80096cc:	1c18      	adds	r0, r3, #0
 80096ce:	f7f9 fec9 	bl	8003464 <__aeabi_f2d>
 80096d2:	0002      	movs	r2, r0
 80096d4:	000b      	movs	r3, r1
 80096d6:	4962      	ldr	r1, [pc, #392]	@ (8009860 <sen5x_printvalues+0x1b8>)
 80096d8:	0008      	movs	r0, r1
 80096da:	f016 fca7 	bl	802002c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80096de:	4b5d      	ldr	r3, [pc, #372]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	4a5d      	ldr	r2, [pc, #372]	@ (8009858 <sen5x_printvalues+0x1b0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80096e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80096ea:	885b      	ldrh	r3, [r3, #2]
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7f7 ff6f 	bl	80015d0 <__aeabi_i2f>
 80096f2:	1c03      	adds	r3, r0, #0
 80096f4:	4959      	ldr	r1, [pc, #356]	@ (800985c <sen5x_printvalues+0x1b4>)
 80096f6:	1c18      	adds	r0, r3, #0
 80096f8:	f7f7 fa6c 	bl	8000bd4 <__aeabi_fdiv>
 80096fc:	1c03      	adds	r3, r0, #0
 80096fe:	1c18      	adds	r0, r3, #0
 8009700:	f7f9 feb0 	bl	8003464 <__aeabi_f2d>
 8009704:	0002      	movs	r2, r0
 8009706:	000b      	movs	r3, r1
 8009708:	4956      	ldr	r1, [pc, #344]	@ (8009864 <sen5x_printvalues+0x1bc>)
 800970a:	0008      	movs	r0, r1
 800970c:	f016 fc8e 	bl	802002c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009710:	4b50      	ldr	r3, [pc, #320]	@ (8009854 <sen5x_printvalues+0x1ac>)
 8009712:	889b      	ldrh	r3, [r3, #4]
 8009714:	4a50      	ldr	r2, [pc, #320]	@ (8009858 <sen5x_printvalues+0x1b0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800971a:	4b4e      	ldr	r3, [pc, #312]	@ (8009854 <sen5x_printvalues+0x1ac>)
 800971c:	889b      	ldrh	r3, [r3, #4]
 800971e:	0018      	movs	r0, r3
 8009720:	f7f7 ff56 	bl	80015d0 <__aeabi_i2f>
 8009724:	1c03      	adds	r3, r0, #0
 8009726:	494d      	ldr	r1, [pc, #308]	@ (800985c <sen5x_printvalues+0x1b4>)
 8009728:	1c18      	adds	r0, r3, #0
 800972a:	f7f7 fa53 	bl	8000bd4 <__aeabi_fdiv>
 800972e:	1c03      	adds	r3, r0, #0
 8009730:	1c18      	adds	r0, r3, #0
 8009732:	f7f9 fe97 	bl	8003464 <__aeabi_f2d>
 8009736:	0002      	movs	r2, r0
 8009738:	000b      	movs	r3, r1
 800973a:	494b      	ldr	r1, [pc, #300]	@ (8009868 <sen5x_printvalues+0x1c0>)
 800973c:	0008      	movs	r0, r1
 800973e:	f016 fc75 	bl	802002c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009742:	4b44      	ldr	r3, [pc, #272]	@ (8009854 <sen5x_printvalues+0x1ac>)
 8009744:	88db      	ldrh	r3, [r3, #6]
 8009746:	4a44      	ldr	r2, [pc, #272]	@ (8009858 <sen5x_printvalues+0x1b0>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d013      	beq.n	8009774 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800974c:	4b41      	ldr	r3, [pc, #260]	@ (8009854 <sen5x_printvalues+0x1ac>)
 800974e:	88db      	ldrh	r3, [r3, #6]
 8009750:	0018      	movs	r0, r3
 8009752:	f7f7 ff3d 	bl	80015d0 <__aeabi_i2f>
 8009756:	1c03      	adds	r3, r0, #0
 8009758:	4940      	ldr	r1, [pc, #256]	@ (800985c <sen5x_printvalues+0x1b4>)
 800975a:	1c18      	adds	r0, r3, #0
 800975c:	f7f7 fa3a 	bl	8000bd4 <__aeabi_fdiv>
 8009760:	1c03      	adds	r3, r0, #0
 8009762:	1c18      	adds	r0, r3, #0
 8009764:	f7f9 fe7e 	bl	8003464 <__aeabi_f2d>
 8009768:	0002      	movs	r2, r0
 800976a:	000b      	movs	r3, r1
 800976c:	493f      	ldr	r1, [pc, #252]	@ (800986c <sen5x_printvalues+0x1c4>)
 800976e:	0008      	movs	r0, r1
 8009770:	f016 fc5c 	bl	802002c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009774:	4b37      	ldr	r3, [pc, #220]	@ (8009854 <sen5x_printvalues+0x1ac>)
 8009776:	2208      	movs	r2, #8
 8009778:	5e9b      	ldrsh	r3, [r3, r2]
 800977a:	4a3d      	ldr	r2, [pc, #244]	@ (8009870 <sen5x_printvalues+0x1c8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d014      	beq.n	80097aa <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009780:	4b34      	ldr	r3, [pc, #208]	@ (8009854 <sen5x_printvalues+0x1ac>)
 8009782:	2208      	movs	r2, #8
 8009784:	5e9b      	ldrsh	r3, [r3, r2]
 8009786:	0018      	movs	r0, r3
 8009788:	f7f7 ff22 	bl	80015d0 <__aeabi_i2f>
 800978c:	1c03      	adds	r3, r0, #0
 800978e:	4939      	ldr	r1, [pc, #228]	@ (8009874 <sen5x_printvalues+0x1cc>)
 8009790:	1c18      	adds	r0, r3, #0
 8009792:	f7f7 fa1f 	bl	8000bd4 <__aeabi_fdiv>
 8009796:	1c03      	adds	r3, r0, #0
 8009798:	1c18      	adds	r0, r3, #0
 800979a:	f7f9 fe63 	bl	8003464 <__aeabi_f2d>
 800979e:	0002      	movs	r2, r0
 80097a0:	000b      	movs	r3, r1
 80097a2:	4935      	ldr	r1, [pc, #212]	@ (8009878 <sen5x_printvalues+0x1d0>)
 80097a4:	0008      	movs	r0, r1
 80097a6:	f016 fc41 	bl	802002c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80097aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80097ac:	220a      	movs	r2, #10
 80097ae:	5e9b      	ldrsh	r3, [r3, r2]
 80097b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009870 <sen5x_printvalues+0x1c8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d014      	beq.n	80097e0 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80097b6:	4b27      	ldr	r3, [pc, #156]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80097b8:	220a      	movs	r2, #10
 80097ba:	5e9b      	ldrsh	r3, [r3, r2]
 80097bc:	0018      	movs	r0, r3
 80097be:	f7f7 ff07 	bl	80015d0 <__aeabi_i2f>
 80097c2:	1c03      	adds	r3, r0, #0
 80097c4:	492d      	ldr	r1, [pc, #180]	@ (800987c <sen5x_printvalues+0x1d4>)
 80097c6:	1c18      	adds	r0, r3, #0
 80097c8:	f7f7 fa04 	bl	8000bd4 <__aeabi_fdiv>
 80097cc:	1c03      	adds	r3, r0, #0
 80097ce:	1c18      	adds	r0, r3, #0
 80097d0:	f7f9 fe48 	bl	8003464 <__aeabi_f2d>
 80097d4:	0002      	movs	r2, r0
 80097d6:	000b      	movs	r3, r1
 80097d8:	4929      	ldr	r1, [pc, #164]	@ (8009880 <sen5x_printvalues+0x1d8>)
 80097da:	0008      	movs	r0, r1
 80097dc:	f016 fc26 	bl	802002c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 80097e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80097e2:	220c      	movs	r2, #12
 80097e4:	5e9b      	ldrsh	r3, [r3, r2]
 80097e6:	4a22      	ldr	r2, [pc, #136]	@ (8009870 <sen5x_printvalues+0x1c8>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d014      	beq.n	8009816 <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80097ec:	4b19      	ldr	r3, [pc, #100]	@ (8009854 <sen5x_printvalues+0x1ac>)
 80097ee:	220c      	movs	r2, #12
 80097f0:	5e9b      	ldrsh	r3, [r3, r2]
 80097f2:	0018      	movs	r0, r3
 80097f4:	f7f7 feec 	bl	80015d0 <__aeabi_i2f>
 80097f8:	1c03      	adds	r3, r0, #0
 80097fa:	4918      	ldr	r1, [pc, #96]	@ (800985c <sen5x_printvalues+0x1b4>)
 80097fc:	1c18      	adds	r0, r3, #0
 80097fe:	f7f7 f9e9 	bl	8000bd4 <__aeabi_fdiv>
 8009802:	1c03      	adds	r3, r0, #0
 8009804:	1c18      	adds	r0, r3, #0
 8009806:	f7f9 fe2d 	bl	8003464 <__aeabi_f2d>
 800980a:	0002      	movs	r2, r0
 800980c:	000b      	movs	r3, r1
 800980e:	491d      	ldr	r1, [pc, #116]	@ (8009884 <sen5x_printvalues+0x1dc>)
 8009810:	0008      	movs	r0, r1
 8009812:	f016 fc0b 	bl	802002c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009816:	4b0f      	ldr	r3, [pc, #60]	@ (8009854 <sen5x_printvalues+0x1ac>)
 8009818:	220e      	movs	r2, #14
 800981a:	5e9b      	ldrsh	r3, [r3, r2]
 800981c:	4a14      	ldr	r2, [pc, #80]	@ (8009870 <sen5x_printvalues+0x1c8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d014      	beq.n	800984c <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <sen5x_printvalues+0x1ac>)
 8009824:	220e      	movs	r2, #14
 8009826:	5e9b      	ldrsh	r3, [r3, r2]
 8009828:	0018      	movs	r0, r3
 800982a:	f7f7 fed1 	bl	80015d0 <__aeabi_i2f>
 800982e:	1c03      	adds	r3, r0, #0
 8009830:	490a      	ldr	r1, [pc, #40]	@ (800985c <sen5x_printvalues+0x1b4>)
 8009832:	1c18      	adds	r0, r3, #0
 8009834:	f7f7 f9ce 	bl	8000bd4 <__aeabi_fdiv>
 8009838:	1c03      	adds	r3, r0, #0
 800983a:	1c18      	adds	r0, r3, #0
 800983c:	f7f9 fe12 	bl	8003464 <__aeabi_f2d>
 8009840:	0002      	movs	r2, r0
 8009842:	000b      	movs	r3, r1
 8009844:	4910      	ldr	r1, [pc, #64]	@ (8009888 <sen5x_printvalues+0x1e0>)
 8009846:	0008      	movs	r0, r1
 8009848:	f016 fbf0 	bl	802002c <iprintf>
  }
}
 800984c:	46c0      	nop			@ (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	46c0      	nop			@ (mov r8, r8)
 8009854:	2000108c 	.word	0x2000108c
 8009858:	0000ffff 	.word	0x0000ffff
 800985c:	41200000 	.word	0x41200000
 8009860:	08024aac 	.word	0x08024aac
 8009864:	08024ad8 	.word	0x08024ad8
 8009868:	08024b04 	.word	0x08024b04
 800986c:	08024b30 	.word	0x08024b30
 8009870:	00007fff 	.word	0x00007fff
 8009874:	42c80000 	.word	0x42c80000
 8009878:	08024b5c 	.word	0x08024b5c
 800987c:	43480000 	.word	0x43480000
 8009880:	08024b80 	.word	0x08024b80
 8009884:	08024ba8 	.word	0x08024ba8
 8009888:	08024bc0 	.word	0x08024bc0

0800988c <sen5xStore>:


void sen5xStore() {
 800988c:	b5b0      	push	{r4, r5, r7, lr}
 800988e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009890:	4b46      	ldr	r3, [pc, #280]	@ (80099ac <sen5xStore+0x120>)
 8009892:	885b      	ldrh	r3, [r3, #2]
 8009894:	4a46      	ldr	r2, [pc, #280]	@ (80099b0 <sen5xStore+0x124>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00e      	beq.n	80098b8 <sen5xStore+0x2c>
    if (pm2p5 != sen5x_data.mass_concentration_pm2p5) {
 800989a:	4b44      	ldr	r3, [pc, #272]	@ (80099ac <sen5xStore+0x120>)
 800989c:	885a      	ldrh	r2, [r3, #2]
 800989e:	4b45      	ldr	r3, [pc, #276]	@ (80099b4 <sen5xStore+0x128>)
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d008      	beq.n	80098b8 <sen5xStore+0x2c>
      pm2p5 = sen5x_data.mass_concentration_pm2p5;
 80098a6:	4b41      	ldr	r3, [pc, #260]	@ (80099ac <sen5xStore+0x120>)
 80098a8:	885a      	ldrh	r2, [r3, #2]
 80098aa:	4b42      	ldr	r3, [pc, #264]	@ (80099b4 <sen5xStore+0x128>)
 80098ac:	801a      	strh	r2, [r3, #0]
      setPM2p5(pm2p5);
 80098ae:	4b41      	ldr	r3, [pc, #260]	@ (80099b4 <sen5xStore+0x128>)
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	0018      	movs	r0, r3
 80098b4:	f7fa f860 	bl	8003978 <setPM2p5>
    }
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 80098b8:	4b3c      	ldr	r3, [pc, #240]	@ (80099ac <sen5xStore+0x120>)
 80098ba:	88db      	ldrh	r3, [r3, #6]
 80098bc:	4a3c      	ldr	r2, [pc, #240]	@ (80099b0 <sen5xStore+0x124>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00e      	beq.n	80098e0 <sen5xStore+0x54>
    if (pm10p0 != sen5x_data.mass_concentration_pm10p0) {
 80098c2:	4b3a      	ldr	r3, [pc, #232]	@ (80099ac <sen5xStore+0x120>)
 80098c4:	88da      	ldrh	r2, [r3, #6]
 80098c6:	4b3c      	ldr	r3, [pc, #240]	@ (80099b8 <sen5xStore+0x12c>)
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d008      	beq.n	80098e0 <sen5xStore+0x54>
      pm10p0 = sen5x_data.mass_concentration_pm10p0;
 80098ce:	4b37      	ldr	r3, [pc, #220]	@ (80099ac <sen5xStore+0x120>)
 80098d0:	88da      	ldrh	r2, [r3, #6]
 80098d2:	4b39      	ldr	r3, [pc, #228]	@ (80099b8 <sen5xStore+0x12c>)
 80098d4:	801a      	strh	r2, [r3, #0]
      setPM10(pm10p0);
 80098d6:	4b38      	ldr	r3, [pc, #224]	@ (80099b8 <sen5xStore+0x12c>)
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	0018      	movs	r0, r3
 80098dc:	f7fa f878 	bl	80039d0 <setPM10>
    }
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 80098e0:	4b36      	ldr	r3, [pc, #216]	@ (80099bc <sen5xStore+0x130>)
 80098e2:	791b      	ldrb	r3, [r3, #4]
 80098e4:	2b34      	cmp	r3, #52	@ 0x34
 80098e6:	d003      	beq.n	80098f0 <sen5xStore+0x64>
 80098e8:	4b34      	ldr	r3, [pc, #208]	@ (80099bc <sen5xStore+0x130>)
 80098ea:	791b      	ldrb	r3, [r3, #4]
 80098ec:	2b35      	cmp	r3, #53	@ 0x35
 80098ee:	d159      	bne.n	80099a4 <sen5xStore+0x118>
    if (!VOCNOx || usbPluggedIn) {
 80098f0:	4b33      	ldr	r3, [pc, #204]	@ (80099c0 <sen5xStore+0x134>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2201      	movs	r2, #1
 80098f6:	4053      	eors	r3, r2
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d103      	bne.n	8009906 <sen5xStore+0x7a>
 80098fe:	4b31      	ldr	r3, [pc, #196]	@ (80099c4 <sen5xStore+0x138>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d029      	beq.n	800995a <sen5xStore+0xce>
      if (sen5x_data.voc_index != 0x7fff) {
 8009906:	4b29      	ldr	r3, [pc, #164]	@ (80099ac <sen5xStore+0x120>)
 8009908:	220c      	movs	r2, #12
 800990a:	5e9b      	ldrsh	r3, [r3, r2]
 800990c:	4a2e      	ldr	r2, [pc, #184]	@ (80099c8 <sen5xStore+0x13c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d023      	beq.n	800995a <sen5xStore+0xce>
        if (s5xvoci != (sen5x_data.voc_index / 10)) {
 8009912:	4b2e      	ldr	r3, [pc, #184]	@ (80099cc <sen5xStore+0x140>)
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	001c      	movs	r4, r3
 8009918:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <sen5xStore+0x120>)
 800991a:	220c      	movs	r2, #12
 800991c:	5e9b      	ldrsh	r3, [r3, r2]
 800991e:	210a      	movs	r1, #10
 8009920:	0018      	movs	r0, r3
 8009922:	f7f6 fcc9 	bl	80002b8 <__divsi3>
 8009926:	0003      	movs	r3, r0
 8009928:	b21b      	sxth	r3, r3
 800992a:	429c      	cmp	r4, r3
 800992c:	d015      	beq.n	800995a <sen5xStore+0xce>
          s5xvoci = sen5x_data.voc_index / 10;
 800992e:	4b1f      	ldr	r3, [pc, #124]	@ (80099ac <sen5xStore+0x120>)
 8009930:	220c      	movs	r2, #12
 8009932:	5e9b      	ldrsh	r3, [r3, r2]
 8009934:	210a      	movs	r1, #10
 8009936:	0018      	movs	r0, r3
 8009938:	f7f6 fcbe 	bl	80002b8 <__divsi3>
 800993c:	0003      	movs	r3, r0
 800993e:	b21b      	sxth	r3, r3
 8009940:	b29a      	uxth	r2, r3
 8009942:	4b22      	ldr	r3, [pc, #136]	@ (80099cc <sen5xStore+0x140>)
 8009944:	801a      	strh	r2, [r3, #0]
          SetVOCindicator(s5xvoci);
 8009946:	4b21      	ldr	r3, [pc, #132]	@ (80099cc <sen5xStore+0x140>)
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	0018      	movs	r0, r3
 800994c:	f003 fe32 	bl	800d5b4 <SetVOCindicator>
          setVOC(s5xvoci);
 8009950:	4b1e      	ldr	r3, [pc, #120]	@ (80099cc <sen5xStore+0x140>)
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	0018      	movs	r0, r3
 8009956:	f7f9 ffdf 	bl	8003918 <setVOC>
        }
      }
    }
    if (sen5x_data.nox_index != 0x7fff) {
 800995a:	4b14      	ldr	r3, [pc, #80]	@ (80099ac <sen5xStore+0x120>)
 800995c:	220e      	movs	r2, #14
 800995e:	5e9b      	ldrsh	r3, [r3, r2]
 8009960:	4a19      	ldr	r2, [pc, #100]	@ (80099c8 <sen5xStore+0x13c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d01e      	beq.n	80099a4 <sen5xStore+0x118>
      if(s5xnoxi != sen5x_data.nox_index / 10) {
 8009966:	4b1a      	ldr	r3, [pc, #104]	@ (80099d0 <sen5xStore+0x144>)
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	001c      	movs	r4, r3
 800996c:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <sen5xStore+0x120>)
 800996e:	220e      	movs	r2, #14
 8009970:	5e9b      	ldrsh	r3, [r3, r2]
 8009972:	210a      	movs	r1, #10
 8009974:	0018      	movs	r0, r3
 8009976:	f7f6 fc9f 	bl	80002b8 <__divsi3>
 800997a:	0003      	movs	r3, r0
 800997c:	b21b      	sxth	r3, r3
 800997e:	429c      	cmp	r4, r3
 8009980:	d010      	beq.n	80099a4 <sen5xStore+0x118>
        s5xnoxi = sen5x_data.nox_index / 10;
 8009982:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <sen5xStore+0x120>)
 8009984:	220e      	movs	r2, #14
 8009986:	5e9b      	ldrsh	r3, [r3, r2]
 8009988:	210a      	movs	r1, #10
 800998a:	0018      	movs	r0, r3
 800998c:	f7f6 fc94 	bl	80002b8 <__divsi3>
 8009990:	0003      	movs	r3, r0
 8009992:	b21b      	sxth	r3, r3
 8009994:	b29a      	uxth	r2, r3
 8009996:	4b0e      	ldr	r3, [pc, #56]	@ (80099d0 <sen5xStore+0x144>)
 8009998:	801a      	strh	r2, [r3, #0]
        setNOx(s5xnoxi);
 800999a:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <sen5xStore+0x144>)
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	0018      	movs	r0, r3
 80099a0:	f7fa f842 	bl	8003a28 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 80099a4:	46c0      	nop			@ (mov r8, r8)
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdb0      	pop	{r4, r5, r7, pc}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	2000108c 	.word	0x2000108c
 80099b0:	0000ffff 	.word	0x0000ffff
 80099b4:	2000107e 	.word	0x2000107e
 80099b8:	20001080 	.word	0x20001080
 80099bc:	20001074 	.word	0x20001074
 80099c0:	20001072 	.word	0x20001072
 80099c4:	20002009 	.word	0x20002009
 80099c8:	00007fff 	.word	0x00007fff
 80099cc:	20001082 	.word	0x20001082
 80099d0:	20001084 	.word	0x20001084

080099d4 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80099d4:	b590      	push	{r4, r7, lr}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af02      	add	r7, sp, #8
 80099da:	6039      	str	r1, [r7, #0]
 80099dc:	0011      	movs	r1, r2
 80099de:	1dfb      	adds	r3, r7, #7
 80099e0:	1c02      	adds	r2, r0, #0
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	1c0a      	adds	r2, r1, #0
 80099e8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80099ea:	1dfb      	adds	r3, r7, #7
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	18db      	adds	r3, r3, r3
 80099f2:	b299      	uxth	r1, r3
 80099f4:	1d3b      	adds	r3, r7, #4
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	4805      	ldr	r0, [pc, #20]	@ (8009a10 <sensirion_i2c_hal_read+0x3c>)
 80099fc:	2464      	movs	r4, #100	@ 0x64
 80099fe:	9400      	str	r4, [sp, #0]
 8009a00:	f006 fed8 	bl	80107b4 <HAL_I2C_Master_Receive>
 8009a04:	0003      	movs	r3, r0
 8009a06:	b25b      	sxtb	r3, r3
}
 8009a08:	0018      	movs	r0, r3
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	b003      	add	sp, #12
 8009a0e:	bd90      	pop	{r4, r7, pc}
 8009a10:	20000e54 	.word	0x20000e54

08009a14 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009a14:	b590      	push	{r4, r7, lr}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	6039      	str	r1, [r7, #0]
 8009a1c:	0011      	movs	r1, r2
 8009a1e:	1dfb      	adds	r3, r7, #7
 8009a20:	1c02      	adds	r2, r0, #0
 8009a22:	701a      	strb	r2, [r3, #0]
 8009a24:	1d3b      	adds	r3, r7, #4
 8009a26:	1c0a      	adds	r2, r1, #0
 8009a28:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009a2a:	1dfb      	adds	r3, r7, #7
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	18db      	adds	r3, r3, r3
 8009a32:	b299      	uxth	r1, r3
 8009a34:	1d3b      	adds	r3, r7, #4
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	4805      	ldr	r0, [pc, #20]	@ (8009a50 <sensirion_i2c_hal_write+0x3c>)
 8009a3c:	2464      	movs	r4, #100	@ 0x64
 8009a3e:	9400      	str	r4, [sp, #0]
 8009a40:	f006 fdb0 	bl	80105a4 <HAL_I2C_Master_Transmit>
 8009a44:	0003      	movs	r3, r0
 8009a46:	b25b      	sxtb	r3, r3
}
 8009a48:	0018      	movs	r0, r3
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	b003      	add	sp, #12
 8009a4e:	bd90      	pop	{r4, r7, pc}
 8009a50:	20000e54 	.word	0x20000e54

08009a54 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	22fa      	movs	r2, #250	@ 0xfa
 8009a60:	0091      	lsls	r1, r2, #2
 8009a62:	0018      	movs	r0, r3
 8009a64:	f7f6 fb9e 	bl	80001a4 <__udivsi3>
 8009a68:	0003      	movs	r3, r0
 8009a6a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	22fa      	movs	r2, #250	@ 0xfa
 8009a70:	0091      	lsls	r1, r2, #2
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7f6 fc1c 	bl	80002b0 <__aeabi_uidivmod>
 8009a78:	1e0b      	subs	r3, r1, #0
 8009a7a:	d002      	beq.n	8009a82 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	0018      	movs	r0, r3
 8009a86:	f005 fa37 	bl	800eef8 <HAL_Delay>
}
 8009a8a:	46c0      	nop			@ (mov r8, r8)
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	b004      	add	sp, #16
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009a9e:	1d3b      	adds	r3, r7, #4
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f000 fd05 	bl	800a4b0 <sen5x_read_device_status>
 8009aa6:	1e03      	subs	r3, r0, #0
 8009aa8:	d007      	beq.n	8009aba <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009aaa:	4a28      	ldr	r2, [pc, #160]	@ (8009b4c <sen5x_check_for_errors+0xb8>)
 8009aac:	4b28      	ldr	r3, [pc, #160]	@ (8009b50 <sen5x_check_for_errors+0xbc>)
 8009aae:	0019      	movs	r1, r3
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f004 fdd3 	bl	800e65c <CreateLine>
    return true;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e043      	b.n	8009b42 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <sen5x_check_for_errors+0x30>
    return false;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e03e      	b.n	8009b42 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	2380      	movs	r3, #128	@ 0x80
 8009ac8:	039b      	lsls	r3, r3, #14
 8009aca:	4013      	ands	r3, r2
 8009acc:	d005      	beq.n	8009ada <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 8009ace:	4a21      	ldr	r2, [pc, #132]	@ (8009b54 <sen5x_check_for_errors+0xc0>)
 8009ad0:	4b21      	ldr	r3, [pc, #132]	@ (8009b58 <sen5x_check_for_errors+0xc4>)
 8009ad2:	0019      	movs	r1, r3
 8009ad4:	2003      	movs	r0, #3
 8009ad6:	f004 fdc1 	bl	800e65c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	2380      	movs	r3, #128	@ 0x80
 8009ade:	031b      	lsls	r3, r3, #12
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	d005      	beq.n	8009af0 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8009b5c <sen5x_check_for_errors+0xc8>)
 8009ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8009b58 <sen5x_check_for_errors+0xc4>)
 8009ae8:	0019      	movs	r1, r3
 8009aea:	2003      	movs	r0, #3
 8009aec:	f004 fdb6 	bl	800e65c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2280      	movs	r2, #128	@ 0x80
 8009af4:	4013      	ands	r3, r2
 8009af6:	d005      	beq.n	8009b04 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009af8:	4a19      	ldr	r2, [pc, #100]	@ (8009b60 <sen5x_check_for_errors+0xcc>)
 8009afa:	4b17      	ldr	r3, [pc, #92]	@ (8009b58 <sen5x_check_for_errors+0xc4>)
 8009afc:	0019      	movs	r1, r3
 8009afe:	2003      	movs	r0, #3
 8009b00:	f004 fdac 	bl	800e65c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2240      	movs	r2, #64	@ 0x40
 8009b08:	4013      	ands	r3, r2
 8009b0a:	d005      	beq.n	8009b18 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009b0c:	4a15      	ldr	r2, [pc, #84]	@ (8009b64 <sen5x_check_for_errors+0xd0>)
 8009b0e:	4b12      	ldr	r3, [pc, #72]	@ (8009b58 <sen5x_check_for_errors+0xc4>)
 8009b10:	0019      	movs	r1, r3
 8009b12:	2003      	movs	r0, #3
 8009b14:	f004 fda2 	bl	800e65c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	d005      	beq.n	8009b2c <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009b20:	4a11      	ldr	r2, [pc, #68]	@ (8009b68 <sen5x_check_for_errors+0xd4>)
 8009b22:	4b0d      	ldr	r3, [pc, #52]	@ (8009b58 <sen5x_check_for_errors+0xc4>)
 8009b24:	0019      	movs	r1, r3
 8009b26:	2003      	movs	r0, #3
 8009b28:	f004 fd98 	bl	800e65c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	4013      	ands	r3, r2
 8009b32:	d005      	beq.n	8009b40 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009b34:	4a0d      	ldr	r2, [pc, #52]	@ (8009b6c <sen5x_check_for_errors+0xd8>)
 8009b36:	4b08      	ldr	r3, [pc, #32]	@ (8009b58 <sen5x_check_for_errors+0xc4>)
 8009b38:	0019      	movs	r1, r3
 8009b3a:	2003      	movs	r0, #3
 8009b3c:	f004 fd8e 	bl	800e65c <CreateLine>
  }
  return 1;
 8009b40:	2301      	movs	r3, #1
}
 8009b42:	0018      	movs	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b002      	add	sp, #8
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	46c0      	nop			@ (mov r8, r8)
 8009b4c:	08024bd8 	.word	0x08024bd8
 8009b50:	0802475c 	.word	0x0802475c
 8009b54:	08024c04 	.word	0x08024c04
 8009b58:	08024730 	.word	0x08024730
 8009b5c:	08024c24 	.word	0x08024c24
 8009b60:	08024c40 	.word	0x08024c40
 8009b64:	08024c64 	.word	0x08024c64
 8009b68:	08024c84 	.word	0x08024c84
 8009b6c:	08024c98 	.word	0x08024c98

08009b70 <set_light_on_state>:

void set_light_on_state(void) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009b74:	4b15      	ldr	r3, [pc, #84]	@ (8009bcc <set_light_on_state+0x5c>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	4053      	eors	r3, r2
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009b82:	f7ff faff 	bl	8009184 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009b86:	4a12      	ldr	r2, [pc, #72]	@ (8009bd0 <set_light_on_state+0x60>)
 8009b88:	4b12      	ldr	r3, [pc, #72]	@ (8009bd4 <set_light_on_state+0x64>)
 8009b8a:	0019      	movs	r1, r3
 8009b8c:	2003      	movs	r0, #3
 8009b8e:	f004 fd65 	bl	800e65c <CreateLine>
 8009b92:	e00a      	b.n	8009baa <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009b94:	f005 f9a6 	bl	800eee4 <HAL_GetTick>
 8009b98:	0002      	movs	r2, r0
 8009b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd8 <set_light_on_state+0x68>)
 8009b9c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009bdc <set_light_on_state+0x6c>)
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <set_light_on_state+0x64>)
 8009ba2:	0019      	movs	r1, r3
 8009ba4:	2003      	movs	r0, #3
 8009ba6:	f004 fd59 	bl	800e65c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009baa:	f7ff fc7b 	bl	80094a4 <sen5x_lightup_measurement>
 8009bae:	1e03      	subs	r3, r0, #0
 8009bb0:	d005      	beq.n	8009bbe <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8009be0 <set_light_on_state+0x70>)
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8009be4 <set_light_on_state+0x74>)
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	2001      	movs	r0, #1
 8009bba:	f004 fd4f 	bl	800e65c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009be8 <set_light_on_state+0x78>)
 8009bc0:	2203      	movs	r2, #3
 8009bc2:	701a      	strb	r2, [r3, #0]
}
 8009bc4:	46c0      	nop			@ (mov r8, r8)
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	46c0      	nop			@ (mov r8, r8)
 8009bcc:	20001071 	.word	0x20001071
 8009bd0:	08024cd4 	.word	0x08024cd4
 8009bd4:	08024730 	.word	0x08024730
 8009bd8:	20001088 	.word	0x20001088
 8009bdc:	08024d00 	.word	0x08024d00
 8009be0:	08024d18 	.word	0x08024d18
 8009be4:	0802475c 	.word	0x0802475c
 8009be8:	2000008d 	.word	0x2000008d

08009bec <sen5x_statemachine>:

void sen5x_statemachine() {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009bf2:	1dfb      	adds	r3, r7, #7
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009bf8:	4b88      	ldr	r3, [pc, #544]	@ (8009e1c <sen5x_statemachine+0x230>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f004 fcd7 	bl	800e5b0 <TimestampIsReached>
 8009c02:	1e03      	subs	r3, r0, #0
 8009c04:	d100      	bne.n	8009c08 <sen5x_statemachine+0x1c>
 8009c06:	e105      	b.n	8009e14 <sen5x_statemachine+0x228>
    switch (PMsamplesState) {
 8009c08:	4b85      	ldr	r3, [pc, #532]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b05      	cmp	r3, #5
 8009c0e:	d900      	bls.n	8009c12 <sen5x_statemachine+0x26>
 8009c10:	e100      	b.n	8009e14 <sen5x_statemachine+0x228>
 8009c12:	009a      	lsls	r2, r3, #2
 8009c14:	4b83      	ldr	r3, [pc, #524]	@ (8009e24 <sen5x_statemachine+0x238>)
 8009c16:	18d3      	adds	r3, r2, r3
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009c1c:	4a82      	ldr	r2, [pc, #520]	@ (8009e28 <sen5x_statemachine+0x23c>)
 8009c1e:	4b83      	ldr	r3, [pc, #524]	@ (8009e2c <sen5x_statemachine+0x240>)
 8009c20:	0019      	movs	r1, r3
 8009c22:	2001      	movs	r0, #1
 8009c24:	f004 fd1a 	bl	800e65c <CreateLine>
      SetPMSensorStatus(false);
 8009c28:	2000      	movs	r0, #0
 8009c2a:	f7fe fc27 	bl	800847c <SetPMSensorStatus>
      DisablePMSensor();
 8009c2e:	f7fe fbbb 	bl	80083a8 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009c32:	f005 f957 	bl	800eee4 <HAL_GetTick>
 8009c36:	0003      	movs	r3, r0
 8009c38:	4a7d      	ldr	r2, [pc, #500]	@ (8009e30 <sen5x_statemachine+0x244>)
 8009c3a:	189a      	adds	r2, r3, r2
 8009c3c:	4b77      	ldr	r3, [pc, #476]	@ (8009e1c <sen5x_statemachine+0x230>)
 8009c3e:	601a      	str	r2, [r3, #0]
      break;
 8009c40:	e0e8      	b.n	8009e14 <sen5x_statemachine+0x228>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009c42:	f005 f94f 	bl	800eee4 <HAL_GetTick>
 8009c46:	0003      	movs	r3, r0
 8009c48:	4a7a      	ldr	r2, [pc, #488]	@ (8009e34 <sen5x_statemachine+0x248>)
 8009c4a:	189a      	adds	r2, r3, r2
 8009c4c:	4b73      	ldr	r3, [pc, #460]	@ (8009e1c <sen5x_statemachine+0x230>)
 8009c4e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009c50:	f7ff ff8e 	bl	8009b70 <set_light_on_state>
      break;
 8009c54:	e0de      	b.n	8009e14 <sen5x_statemachine+0x228>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009c56:	4b72      	ldr	r3, [pc, #456]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009c58:	2202      	movs	r2, #2
 8009c5a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009c5c:	4b76      	ldr	r3, [pc, #472]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b05      	cmp	r3, #5
 8009c62:	d905      	bls.n	8009c70 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 8009c64:	4b6e      	ldr	r3, [pc, #440]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009c6a:	f7ff fabb 	bl	80091e4 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 8009c6e:	e0ce      	b.n	8009e0e <sen5x_statemachine+0x222>
        if (sen5x_check_for_errors()) {
 8009c70:	f7ff ff10 	bl	8009a94 <sen5x_check_for_errors>
 8009c74:	1e03      	subs	r3, r0, #0
 8009c76:	d021      	beq.n	8009cbc <sen5x_statemachine+0xd0>
          if (sen5x_device_reset()) {
 8009c78:	f000 fc6c 	bl	800a554 <sen5x_device_reset>
 8009c7c:	1e03      	subs	r3, r0, #0
 8009c7e:	d00f      	beq.n	8009ca0 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 8009c80:	4a6e      	ldr	r2, [pc, #440]	@ (8009e3c <sen5x_statemachine+0x250>)
 8009c82:	4b6a      	ldr	r3, [pc, #424]	@ (8009e2c <sen5x_statemachine+0x240>)
 8009c84:	0019      	movs	r1, r3
 8009c86:	2001      	movs	r0, #1
 8009c88:	f004 fce8 	bl	800e65c <CreateLine>
            sen5xErrors++;
 8009c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	3301      	adds	r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	4b68      	ldr	r3, [pc, #416]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009c96:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 8009c98:	4b61      	ldr	r3, [pc, #388]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009c9a:	2203      	movs	r2, #3
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	e005      	b.n	8009cac <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 8009ca0:	4a67      	ldr	r2, [pc, #412]	@ (8009e40 <sen5x_statemachine+0x254>)
 8009ca2:	4b68      	ldr	r3, [pc, #416]	@ (8009e44 <sen5x_statemachine+0x258>)
 8009ca4:	0019      	movs	r1, r3
 8009ca6:	2002      	movs	r0, #2
 8009ca8:	f004 fcd8 	bl	800e65c <CreateLine>
          sen5xReadTimer = HAL_GetTick() + 200;
 8009cac:	f005 f91a 	bl	800eee4 <HAL_GetTick>
 8009cb0:	0003      	movs	r3, r0
 8009cb2:	33c8      	adds	r3, #200	@ 0xc8
 8009cb4:	001a      	movs	r2, r3
 8009cb6:	4b59      	ldr	r3, [pc, #356]	@ (8009e1c <sen5x_statemachine+0x230>)
 8009cb8:	601a      	str	r2, [r3, #0]
      break;
 8009cba:	e0a8      	b.n	8009e0e <sen5x_statemachine+0x222>
          if (sen5xErrors != 0) {
 8009cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d100      	bne.n	8009cc6 <sen5x_statemachine+0xda>
 8009cc4:	e0a3      	b.n	8009e0e <sen5x_statemachine+0x222>
            sen5xErrors = 0;
 8009cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 8009ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8009e48 <sen5x_statemachine+0x25c>)
 8009cce:	4b5f      	ldr	r3, [pc, #380]	@ (8009e4c <sen5x_statemachine+0x260>)
 8009cd0:	0019      	movs	r1, r3
 8009cd2:	2003      	movs	r0, #3
 8009cd4:	f004 fcc2 	bl	800e65c <CreateLine>
      break;
 8009cd8:	e099      	b.n	8009e0e <sen5x_statemachine+0x222>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009cda:	1dfb      	adds	r3, r7, #7
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f000 f955 	bl	8009f8c <sen5x_read_data_ready>
      if (data_ready) {
 8009ce2:	1dfb      	adds	r3, r7, #7
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d031      	beq.n	8009d4e <sen5x_statemachine+0x162>
        SetPMIndicator();
 8009cea:	f003 fbd3 	bl	800d494 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009cee:	4b58      	ldr	r3, [pc, #352]	@ (8009e50 <sen5x_statemachine+0x264>)
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	f7ff fc7d 	bl	80095f0 <sen5x_read_measurement>
 8009cf6:	1e03      	subs	r3, r0, #0
 8009cf8:	d00b      	beq.n	8009d12 <sen5x_statemachine+0x126>
          Error("Error executing sen5x_read_measured_values()");
 8009cfa:	4a56      	ldr	r2, [pc, #344]	@ (8009e54 <sen5x_statemachine+0x268>)
 8009cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8009e2c <sen5x_statemachine+0x240>)
 8009cfe:	0019      	movs	r1, r3
 8009d00:	2001      	movs	r0, #1
 8009d02:	f004 fcab 	bl	800e65c <CreateLine>
          sen5xErrors++;
 8009d06:	4b4c      	ldr	r3, [pc, #304]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009e38 <sen5x_statemachine+0x24c>)
 8009d10:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 8009d12:	4b51      	ldr	r3, [pc, #324]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d1c:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 8009d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b1f      	cmp	r3, #31
 8009d24:	d102      	bne.n	8009d2c <sen5x_statemachine+0x140>
          sen5xSamples = 0;  // enable display on serial
 8009d26:	4b4c      	ldr	r3, [pc, #304]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d901      	bls.n	8009d38 <sen5x_statemachine+0x14c>
          sen5xStore();
 8009d34:	f7ff fdaa 	bl	800988c <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009d38:	4b47      	ldr	r3, [pc, #284]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d106      	bne.n	8009d4e <sen5x_statemachine+0x162>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009d40:	f7ff fcb2 	bl	80096a8 <sen5x_printvalues>
#else
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
          HAL_Delay(1000);
 8009d44:	23fa      	movs	r3, #250	@ 0xfa
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	0018      	movs	r0, r3
 8009d4a:	f005 f8d5 	bl	800eef8 <HAL_Delay>
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009d4e:	4b43      	ldr	r3, [pc, #268]	@ (8009e5c <sen5x_statemachine+0x270>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d103      	bne.n	8009d5e <sen5x_statemachine+0x172>
 8009d56:	4b40      	ldr	r3, [pc, #256]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d959      	bls.n	8009e12 <sen5x_statemachine+0x226>
        PMsamplesState = CLEAN_FAN;
 8009d5e:	4b30      	ldr	r3, [pc, #192]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009d60:	2204      	movs	r2, #4
 8009d62:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d64:	e055      	b.n	8009e12 <sen5x_statemachine+0x226>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009d66:	f7fc fe59 	bl	8006a1c <RTC_GetWeekday>
 8009d6a:	0003      	movs	r3, r0
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d118      	bne.n	8009da2 <sen5x_statemachine+0x1b6>
 8009d70:	4b3b      	ldr	r3, [pc, #236]	@ (8009e60 <sen5x_statemachine+0x274>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2201      	movs	r2, #1
 8009d76:	4053      	eors	r3, r2
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <sen5x_statemachine+0x1b6>
        sen5x_start_fan_cleaning();
 8009d7e:	f000 f9eb 	bl	800a158 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009d82:	4a38      	ldr	r2, [pc, #224]	@ (8009e64 <sen5x_statemachine+0x278>)
 8009d84:	4b2f      	ldr	r3, [pc, #188]	@ (8009e44 <sen5x_statemachine+0x258>)
 8009d86:	0019      	movs	r1, r3
 8009d88:	2002      	movs	r0, #2
 8009d8a:	f004 fc67 	bl	800e65c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009d8e:	f005 f8a9 	bl	800eee4 <HAL_GetTick>
 8009d92:	0003      	movs	r3, r0
 8009d94:	4a34      	ldr	r2, [pc, #208]	@ (8009e68 <sen5x_statemachine+0x27c>)
 8009d96:	189a      	adds	r2, r3, r2
 8009d98:	4b20      	ldr	r3, [pc, #128]	@ (8009e1c <sen5x_statemachine+0x230>)
 8009d9a:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009d9c:	4b30      	ldr	r3, [pc, #192]	@ (8009e60 <sen5x_statemachine+0x274>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009da2:	4b1f      	ldr	r3, [pc, #124]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009da4:	2205      	movs	r2, #5
 8009da6:	701a      	strb	r2, [r3, #0]
      break;
 8009da8:	e034      	b.n	8009e14 <sen5x_statemachine+0x228>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 8009daa:	4b2c      	ldr	r3, [pc, #176]	@ (8009e5c <sen5x_statemachine+0x270>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2201      	movs	r2, #1
 8009db0:	4053      	eors	r3, r2
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01c      	beq.n	8009df2 <sen5x_statemachine+0x206>
 8009db8:	4b2c      	ldr	r3, [pc, #176]	@ (8009e6c <sen5x_statemachine+0x280>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4053      	eors	r3, r2
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d015      	beq.n	8009df2 <sen5x_statemachine+0x206>
        if (sen5x_extinguish_measurement()) {
 8009dc6:	f7ff fbb9 	bl	800953c <sen5x_extinguish_measurement>
 8009dca:	1e03      	subs	r3, r0, #0
 8009dcc:	d005      	beq.n	8009dda <sen5x_statemachine+0x1ee>
          Error("Error executing sen5x_extinguish_measurement()");
 8009dce:	4a28      	ldr	r2, [pc, #160]	@ (8009e70 <sen5x_statemachine+0x284>)
 8009dd0:	4b16      	ldr	r3, [pc, #88]	@ (8009e2c <sen5x_statemachine+0x240>)
 8009dd2:	0019      	movs	r1, r3
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	f004 fc41 	bl	800e65c <CreateLine>
        }
        sen5xSamples = 0;
 8009dda:	4b1f      	ldr	r3, [pc, #124]	@ (8009e58 <sen5x_statemachine+0x26c>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009de0:	f7ff fa00 	bl	80091e4 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7fe fb49 	bl	800847c <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 8009dea:	4b0d      	ldr	r3, [pc, #52]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	701a      	strb	r2, [r3, #0]
 8009df0:	e002      	b.n	8009df8 <sen5x_statemachine+0x20c>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009df2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <sen5x_statemachine+0x234>)
 8009df4:	2203      	movs	r2, #3
 8009df6:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009df8:	f003 fb72 	bl	800d4e0 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009dfc:	f005 f872 	bl	800eee4 <HAL_GetTick>
 8009e00:	0003      	movs	r3, r0
 8009e02:	22fa      	movs	r2, #250	@ 0xfa
 8009e04:	0092      	lsls	r2, r2, #2
 8009e06:	189a      	adds	r2, r3, r2
 8009e08:	4b04      	ldr	r3, [pc, #16]	@ (8009e1c <sen5x_statemachine+0x230>)
 8009e0a:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009e0c:	e002      	b.n	8009e14 <sen5x_statemachine+0x228>
      break;
 8009e0e:	46c0      	nop			@ (mov r8, r8)
 8009e10:	e000      	b.n	8009e14 <sen5x_statemachine+0x228>
      break;
 8009e12:	46c0      	nop			@ (mov r8, r8)
}
 8009e14:	46c0      	nop			@ (mov r8, r8)
 8009e16:	46bd      	mov	sp, r7
 8009e18:	b002      	add	sp, #8
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20001088 	.word	0x20001088
 8009e20:	2000008d 	.word	0x2000008d
 8009e24:	080256f0 	.word	0x080256f0
 8009e28:	08024d44 	.word	0x08024d44
 8009e2c:	0802475c 	.word	0x0802475c
 8009e30:	002fefd8 	.word	0x002fefd8
 8009e34:	00005910 	.word	0x00005910
 8009e38:	2000107d 	.word	0x2000107d
 8009e3c:	08024d74 	.word	0x08024d74
 8009e40:	08024d8c 	.word	0x08024d8c
 8009e44:	080246f0 	.word	0x080246f0
 8009e48:	08024da4 	.word	0x08024da4
 8009e4c:	08024730 	.word	0x08024730
 8009e50:	2000108c 	.word	0x2000108c
 8009e54:	08024db8 	.word	0x08024db8
 8009e58:	2000107c 	.word	0x2000107c
 8009e5c:	20002009 	.word	0x20002009
 8009e60:	20001070 	.word	0x20001070
 8009e64:	08024de8 	.word	0x08024de8
 8009e68:	00002710 	.word	0x00002710
 8009e6c:	2000200a 	.word	0x2000200a
 8009e70:	08024e00 	.word	0x08024e00

08009e74 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009e7a:	1dbb      	adds	r3, r7, #6
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009e80:	1dbc      	adds	r4, r7, #6
 8009e82:	1dbb      	adds	r3, r7, #6
 8009e84:	8819      	ldrh	r1, [r3, #0]
 8009e86:	003b      	movs	r3, r7
 8009e88:	2221      	movs	r2, #33	@ 0x21
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	f001 fb56 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 8009e90:	0003      	movs	r3, r0
 8009e92:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e94:	1d3c      	adds	r4, r7, #4
 8009e96:	1dbb      	adds	r3, r7, #6
 8009e98:	881a      	ldrh	r2, [r3, #0]
 8009e9a:	003b      	movs	r3, r7
 8009e9c:	0019      	movs	r1, r3
 8009e9e:	2069      	movs	r0, #105	@ 0x69
 8009ea0:	f001 fbd0 	bl	800b644 <sensirion_i2c_write_data>
 8009ea4:	0003      	movs	r3, r0
 8009ea6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ea8:	1d3b      	adds	r3, r7, #4
 8009eaa:	2200      	movs	r2, #0
 8009eac:	5e9b      	ldrsh	r3, [r3, r2]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <sen5x_start_measurement+0x46>
        return error;
 8009eb2:	1d3b      	adds	r3, r7, #4
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	5e9b      	ldrsh	r3, [r3, r2]
 8009eb8:	e004      	b.n	8009ec4 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009eba:	4b04      	ldr	r3, [pc, #16]	@ (8009ecc <sen5x_start_measurement+0x58>)
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f7ff fdc9 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b003      	add	sp, #12
 8009eca:	bd90      	pop	{r4, r7, pc}
 8009ecc:	0000c350 	.word	0x0000c350

08009ed0 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009ed0:	b590      	push	{r4, r7, lr}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009ed6:	1dbb      	adds	r3, r7, #6
 8009ed8:	2200      	movs	r2, #0
 8009eda:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009edc:	1dbc      	adds	r4, r7, #6
 8009ede:	1dbb      	adds	r3, r7, #6
 8009ee0:	8819      	ldrh	r1, [r3, #0]
 8009ee2:	003b      	movs	r3, r7
 8009ee4:	2237      	movs	r2, #55	@ 0x37
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	f001 fb28 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 8009eec:	0003      	movs	r3, r0
 8009eee:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ef0:	1d3c      	adds	r4, r7, #4
 8009ef2:	1dbb      	adds	r3, r7, #6
 8009ef4:	881a      	ldrh	r2, [r3, #0]
 8009ef6:	003b      	movs	r3, r7
 8009ef8:	0019      	movs	r1, r3
 8009efa:	2069      	movs	r0, #105	@ 0x69
 8009efc:	f001 fba2 	bl	800b644 <sensirion_i2c_write_data>
 8009f00:	0003      	movs	r3, r0
 8009f02:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f04:	1d3b      	adds	r3, r7, #4
 8009f06:	2200      	movs	r2, #0
 8009f08:	5e9b      	ldrsh	r3, [r3, r2]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009f0e:	1d3b      	adds	r3, r7, #4
 8009f10:	2200      	movs	r2, #0
 8009f12:	5e9b      	ldrsh	r3, [r3, r2]
 8009f14:	e004      	b.n	8009f20 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009f16:	4b04      	ldr	r3, [pc, #16]	@ (8009f28 <sen5x_start_measurement_without_pm+0x58>)
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f7ff fd9b 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	0018      	movs	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b003      	add	sp, #12
 8009f26:	bd90      	pop	{r4, r7, pc}
 8009f28:	0000c350 	.word	0x0000c350

08009f2c <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009f32:	1dbb      	adds	r3, r7, #6
 8009f34:	2200      	movs	r2, #0
 8009f36:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009f38:	1dbc      	adds	r4, r7, #6
 8009f3a:	2382      	movs	r3, #130	@ 0x82
 8009f3c:	005a      	lsls	r2, r3, #1
 8009f3e:	1dbb      	adds	r3, r7, #6
 8009f40:	8819      	ldrh	r1, [r3, #0]
 8009f42:	003b      	movs	r3, r7
 8009f44:	0018      	movs	r0, r3
 8009f46:	f001 faf9 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 8009f4a:	0003      	movs	r3, r0
 8009f4c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f4e:	1d3c      	adds	r4, r7, #4
 8009f50:	1dbb      	adds	r3, r7, #6
 8009f52:	881a      	ldrh	r2, [r3, #0]
 8009f54:	003b      	movs	r3, r7
 8009f56:	0019      	movs	r1, r3
 8009f58:	2069      	movs	r0, #105	@ 0x69
 8009f5a:	f001 fb73 	bl	800b644 <sensirion_i2c_write_data>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f62:	1d3b      	adds	r3, r7, #4
 8009f64:	2200      	movs	r2, #0
 8009f66:	5e9b      	ldrsh	r3, [r3, r2]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <sen5x_stop_measurement+0x48>
        return error;
 8009f6c:	1d3b      	adds	r3, r7, #4
 8009f6e:	2200      	movs	r2, #0
 8009f70:	5e9b      	ldrsh	r3, [r3, r2]
 8009f72:	e004      	b.n	8009f7e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009f74:	4b04      	ldr	r3, [pc, #16]	@ (8009f88 <sen5x_stop_measurement+0x5c>)
 8009f76:	0018      	movs	r0, r3
 8009f78:	f7ff fd6c 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	0018      	movs	r0, r3
 8009f80:	46bd      	mov	sp, r7
 8009f82:	b003      	add	sp, #12
 8009f84:	bd90      	pop	{r4, r7, pc}
 8009f86:	46c0      	nop			@ (mov r8, r8)
 8009f88:	00030d40 	.word	0x00030d40

08009f8c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009f94:	250e      	movs	r5, #14
 8009f96:	197b      	adds	r3, r7, r5
 8009f98:	2200      	movs	r2, #0
 8009f9a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009f9c:	197c      	adds	r4, r7, r5
 8009f9e:	4a22      	ldr	r2, [pc, #136]	@ (800a028 <sen5x_read_data_ready+0x9c>)
 8009fa0:	197b      	adds	r3, r7, r5
 8009fa2:	8819      	ldrh	r1, [r3, #0]
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	18fb      	adds	r3, r7, r3
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f001 fac7 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 8009fae:	0003      	movs	r3, r0
 8009fb0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009fb2:	260c      	movs	r6, #12
 8009fb4:	19bc      	adds	r4, r7, r6
 8009fb6:	197b      	adds	r3, r7, r5
 8009fb8:	881a      	ldrh	r2, [r3, #0]
 8009fba:	2308      	movs	r3, #8
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	0019      	movs	r1, r3
 8009fc0:	2069      	movs	r0, #105	@ 0x69
 8009fc2:	f001 fb3f 	bl	800b644 <sensirion_i2c_write_data>
 8009fc6:	0003      	movs	r3, r0
 8009fc8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fca:	19bb      	adds	r3, r7, r6
 8009fcc:	2200      	movs	r2, #0
 8009fce:	5e9b      	ldrsh	r3, [r3, r2]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <sen5x_read_data_ready+0x50>
        return error;
 8009fd4:	19bb      	adds	r3, r7, r6
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fda:	e020      	b.n	800a01e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009fdc:	4b13      	ldr	r3, [pc, #76]	@ (800a02c <sen5x_read_data_ready+0xa0>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f7ff fd38 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009fe4:	250c      	movs	r5, #12
 8009fe6:	197c      	adds	r4, r7, r5
 8009fe8:	2308      	movs	r3, #8
 8009fea:	18fb      	adds	r3, r7, r3
 8009fec:	2202      	movs	r2, #2
 8009fee:	0019      	movs	r1, r3
 8009ff0:	2069      	movs	r0, #105	@ 0x69
 8009ff2:	f001 fb3f 	bl	800b674 <sensirion_i2c_read_data_inplace>
 8009ff6:	0003      	movs	r3, r0
 8009ff8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ffa:	197b      	adds	r3, r7, r5
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	5e9b      	ldrsh	r3, [r3, r2]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <sen5x_read_data_ready+0x80>
        return error;
 800a004:	197b      	adds	r3, r7, r5
 800a006:	2200      	movs	r2, #0
 800a008:	5e9b      	ldrsh	r3, [r3, r2]
 800a00a:	e008      	b.n	800a01e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a00c:	2308      	movs	r3, #8
 800a00e:	18fb      	adds	r3, r7, r3
 800a010:	785b      	ldrb	r3, [r3, #1]
 800a012:	1e5a      	subs	r2, r3, #1
 800a014:	4193      	sbcs	r3, r2
 800a016:	b2da      	uxtb	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	0018      	movs	r0, r3
 800a020:	46bd      	mov	sp, r7
 800a022:	b005      	add	sp, #20
 800a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a026:	46c0      	nop			@ (mov r8, r8)
 800a028:	00000202 	.word	0x00000202
 800a02c:	00004e20 	.word	0x00004e20

0800a030 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a032:	b08d      	sub	sp, #52	@ 0x34
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a03e:	252e      	movs	r5, #46	@ 0x2e
 800a040:	197b      	adds	r3, r7, r5
 800a042:	2200      	movs	r2, #0
 800a044:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a046:	197c      	adds	r4, r7, r5
 800a048:	23f1      	movs	r3, #241	@ 0xf1
 800a04a:	009a      	lsls	r2, r3, #2
 800a04c:	197b      	adds	r3, r7, r5
 800a04e:	8819      	ldrh	r1, [r3, #0]
 800a050:	2314      	movs	r3, #20
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	0018      	movs	r0, r3
 800a056:	f001 fa71 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a05a:	0003      	movs	r3, r0
 800a05c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a05e:	262c      	movs	r6, #44	@ 0x2c
 800a060:	19bc      	adds	r4, r7, r6
 800a062:	197b      	adds	r3, r7, r5
 800a064:	881a      	ldrh	r2, [r3, #0]
 800a066:	2314      	movs	r3, #20
 800a068:	18fb      	adds	r3, r7, r3
 800a06a:	0019      	movs	r1, r3
 800a06c:	2069      	movs	r0, #105	@ 0x69
 800a06e:	f001 fae9 	bl	800b644 <sensirion_i2c_write_data>
 800a072:	0003      	movs	r3, r0
 800a074:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a076:	19bb      	adds	r3, r7, r6
 800a078:	2200      	movs	r2, #0
 800a07a:	5e9b      	ldrsh	r3, [r3, r2]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <sen5x_read_measured_values+0x58>
        return error;
 800a080:	19bb      	adds	r3, r7, r6
 800a082:	2200      	movs	r2, #0
 800a084:	5e9b      	ldrsh	r3, [r3, r2]
 800a086:	e060      	b.n	800a14a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a088:	4b32      	ldr	r3, [pc, #200]	@ (800a154 <sen5x_read_measured_values+0x124>)
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7ff fce2 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a090:	252c      	movs	r5, #44	@ 0x2c
 800a092:	197c      	adds	r4, r7, r5
 800a094:	2314      	movs	r3, #20
 800a096:	18fb      	adds	r3, r7, r3
 800a098:	2210      	movs	r2, #16
 800a09a:	0019      	movs	r1, r3
 800a09c:	2069      	movs	r0, #105	@ 0x69
 800a09e:	f001 fae9 	bl	800b674 <sensirion_i2c_read_data_inplace>
 800a0a2:	0003      	movs	r3, r0
 800a0a4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a0a6:	197b      	adds	r3, r7, r5
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d003      	beq.n	800a0b8 <sen5x_read_measured_values+0x88>
        return error;
 800a0b0:	197b      	adds	r3, r7, r5
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	5e9b      	ldrsh	r3, [r3, r2]
 800a0b6:	e048      	b.n	800a14a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a0b8:	2414      	movs	r4, #20
 800a0ba:	193b      	adds	r3, r7, r4
 800a0bc:	0018      	movs	r0, r3
 800a0be:	f000 fa79 	bl	800a5b4 <sensirion_common_bytes_to_uint16_t>
 800a0c2:	0003      	movs	r3, r0
 800a0c4:	001a      	movs	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a0ca:	193b      	adds	r3, r7, r4
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f000 fa70 	bl	800a5b4 <sensirion_common_bytes_to_uint16_t>
 800a0d4:	0003      	movs	r3, r0
 800a0d6:	001a      	movs	r2, r3
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a0dc:	193b      	adds	r3, r7, r4
 800a0de:	3304      	adds	r3, #4
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f000 fa67 	bl	800a5b4 <sensirion_common_bytes_to_uint16_t>
 800a0e6:	0003      	movs	r3, r0
 800a0e8:	001a      	movs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a0ee:	193b      	adds	r3, r7, r4
 800a0f0:	3306      	adds	r3, #6
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f000 fa5e 	bl	800a5b4 <sensirion_common_bytes_to_uint16_t>
 800a0f8:	0003      	movs	r3, r0
 800a0fa:	001a      	movs	r2, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a100:	193b      	adds	r3, r7, r4
 800a102:	3308      	adds	r3, #8
 800a104:	0018      	movs	r0, r3
 800a106:	f000 fa81 	bl	800a60c <sensirion_common_bytes_to_int16_t>
 800a10a:	0003      	movs	r3, r0
 800a10c:	001a      	movs	r2, r3
 800a10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a110:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a112:	193b      	adds	r3, r7, r4
 800a114:	330a      	adds	r3, #10
 800a116:	0018      	movs	r0, r3
 800a118:	f000 fa78 	bl	800a60c <sensirion_common_bytes_to_int16_t>
 800a11c:	0003      	movs	r3, r0
 800a11e:	001a      	movs	r2, r3
 800a120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a122:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a124:	193b      	adds	r3, r7, r4
 800a126:	330c      	adds	r3, #12
 800a128:	0018      	movs	r0, r3
 800a12a:	f000 fa6f 	bl	800a60c <sensirion_common_bytes_to_int16_t>
 800a12e:	0003      	movs	r3, r0
 800a130:	001a      	movs	r2, r3
 800a132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a134:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a136:	193b      	adds	r3, r7, r4
 800a138:	330e      	adds	r3, #14
 800a13a:	0018      	movs	r0, r3
 800a13c:	f000 fa66 	bl	800a60c <sensirion_common_bytes_to_int16_t>
 800a140:	0003      	movs	r3, r0
 800a142:	001a      	movs	r2, r3
 800a144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a146:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	0018      	movs	r0, r3
 800a14c:	46bd      	mov	sp, r7
 800a14e:	b00d      	add	sp, #52	@ 0x34
 800a150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a152:	46c0      	nop			@ (mov r8, r8)
 800a154:	00004e20 	.word	0x00004e20

0800a158 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a158:	b590      	push	{r4, r7, lr}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a15e:	1dbb      	adds	r3, r7, #6
 800a160:	2200      	movs	r2, #0
 800a162:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a164:	1dbc      	adds	r4, r7, #6
 800a166:	4a12      	ldr	r2, [pc, #72]	@ (800a1b0 <sen5x_start_fan_cleaning+0x58>)
 800a168:	1dbb      	adds	r3, r7, #6
 800a16a:	8819      	ldrh	r1, [r3, #0]
 800a16c:	003b      	movs	r3, r7
 800a16e:	0018      	movs	r0, r3
 800a170:	f001 f9e4 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a174:	0003      	movs	r3, r0
 800a176:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a178:	1d3c      	adds	r4, r7, #4
 800a17a:	1dbb      	adds	r3, r7, #6
 800a17c:	881a      	ldrh	r2, [r3, #0]
 800a17e:	003b      	movs	r3, r7
 800a180:	0019      	movs	r1, r3
 800a182:	2069      	movs	r0, #105	@ 0x69
 800a184:	f001 fa5e 	bl	800b644 <sensirion_i2c_write_data>
 800a188:	0003      	movs	r3, r0
 800a18a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a18c:	1d3b      	adds	r3, r7, #4
 800a18e:	2200      	movs	r2, #0
 800a190:	5e9b      	ldrsh	r3, [r3, r2]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <sen5x_start_fan_cleaning+0x46>
        return error;
 800a196:	1d3b      	adds	r3, r7, #4
 800a198:	2200      	movs	r2, #0
 800a19a:	5e9b      	ldrsh	r3, [r3, r2]
 800a19c:	e004      	b.n	800a1a8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a19e:	4b05      	ldr	r3, [pc, #20]	@ (800a1b4 <sen5x_start_fan_cleaning+0x5c>)
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f7ff fc57 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	b003      	add	sp, #12
 800a1ae:	bd90      	pop	{r4, r7, pc}
 800a1b0:	00005607 	.word	0x00005607
 800a1b4:	00004e20 	.word	0x00004e20

0800a1b8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	0004      	movs	r4, r0
 800a1c0:	0008      	movs	r0, r1
 800a1c2:	0011      	movs	r1, r2
 800a1c4:	1dbb      	adds	r3, r7, #6
 800a1c6:	1c22      	adds	r2, r4, #0
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	1d3b      	adds	r3, r7, #4
 800a1cc:	1c02      	adds	r2, r0, #0
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	1cbb      	adds	r3, r7, #2
 800a1d2:	1c0a      	adds	r2, r1, #0
 800a1d4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a1d6:	2516      	movs	r5, #22
 800a1d8:	197b      	adds	r3, r7, r5
 800a1da:	2200      	movs	r2, #0
 800a1dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a1de:	197c      	adds	r4, r7, r5
 800a1e0:	4a25      	ldr	r2, [pc, #148]	@ (800a278 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a1e2:	197b      	adds	r3, r7, r5
 800a1e4:	8819      	ldrh	r1, [r3, #0]
 800a1e6:	2608      	movs	r6, #8
 800a1e8:	19bb      	adds	r3, r7, r6
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f001 f9a6 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a1f4:	197c      	adds	r4, r7, r5
 800a1f6:	1dbb      	adds	r3, r7, #6
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	5e9a      	ldrsh	r2, [r3, r2]
 800a1fc:	197b      	adds	r3, r7, r5
 800a1fe:	8819      	ldrh	r1, [r3, #0]
 800a200:	19bb      	adds	r3, r7, r6
 800a202:	0018      	movs	r0, r3
 800a204:	f001 fa05 	bl	800b612 <sensirion_i2c_add_int16_t_to_buffer>
 800a208:	0003      	movs	r3, r0
 800a20a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a20c:	197c      	adds	r4, r7, r5
 800a20e:	1d3b      	adds	r3, r7, #4
 800a210:	2200      	movs	r2, #0
 800a212:	5e9a      	ldrsh	r2, [r3, r2]
 800a214:	197b      	adds	r3, r7, r5
 800a216:	8819      	ldrh	r1, [r3, #0]
 800a218:	19bb      	adds	r3, r7, r6
 800a21a:	0018      	movs	r0, r3
 800a21c:	f001 f9f9 	bl	800b612 <sensirion_i2c_add_int16_t_to_buffer>
 800a220:	0003      	movs	r3, r0
 800a222:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a224:	197c      	adds	r4, r7, r5
 800a226:	1cbb      	adds	r3, r7, #2
 800a228:	881a      	ldrh	r2, [r3, #0]
 800a22a:	197b      	adds	r3, r7, r5
 800a22c:	8819      	ldrh	r1, [r3, #0]
 800a22e:	19bb      	adds	r3, r7, r6
 800a230:	0018      	movs	r0, r3
 800a232:	f001 f9af 	bl	800b594 <sensirion_i2c_add_uint16_t_to_buffer>
 800a236:	0003      	movs	r3, r0
 800a238:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a23a:	2214      	movs	r2, #20
 800a23c:	18bc      	adds	r4, r7, r2
 800a23e:	197b      	adds	r3, r7, r5
 800a240:	881a      	ldrh	r2, [r3, #0]
 800a242:	19bb      	adds	r3, r7, r6
 800a244:	0019      	movs	r1, r3
 800a246:	2069      	movs	r0, #105	@ 0x69
 800a248:	f001 f9fc 	bl	800b644 <sensirion_i2c_write_data>
 800a24c:	0003      	movs	r3, r0
 800a24e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a250:	2214      	movs	r2, #20
 800a252:	18bb      	adds	r3, r7, r2
 800a254:	2100      	movs	r1, #0
 800a256:	5e5b      	ldrsh	r3, [r3, r1]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a25c:	18bb      	adds	r3, r7, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	5e9b      	ldrsh	r3, [r3, r2]
 800a262:	e004      	b.n	800a26e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a264:	4b05      	ldr	r3, [pc, #20]	@ (800a27c <sen5x_set_temperature_offset_parameters+0xc4>)
 800a266:	0018      	movs	r0, r3
 800a268:	f7ff fbf4 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	0018      	movs	r0, r3
 800a270:	46bd      	mov	sp, r7
 800a272:	b007      	add	sp, #28
 800a274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a276:	46c0      	nop			@ (mov r8, r8)
 800a278:	000060b2 	.word	0x000060b2
 800a27c:	00004e20 	.word	0x00004e20

0800a280 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a282:	b091      	sub	sp, #68	@ 0x44
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	000a      	movs	r2, r1
 800a28a:	1cfb      	adds	r3, r7, #3
 800a28c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a28e:	253e      	movs	r5, #62	@ 0x3e
 800a290:	197b      	adds	r3, r7, r5
 800a292:	2200      	movs	r2, #0
 800a294:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a296:	197c      	adds	r4, r7, r5
 800a298:	4a22      	ldr	r2, [pc, #136]	@ (800a324 <sen5x_get_product_name+0xa4>)
 800a29a:	197b      	adds	r3, r7, r5
 800a29c:	8819      	ldrh	r1, [r3, #0]
 800a29e:	230c      	movs	r3, #12
 800a2a0:	18fb      	adds	r3, r7, r3
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	f001 f94a 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2ac:	263c      	movs	r6, #60	@ 0x3c
 800a2ae:	19bc      	adds	r4, r7, r6
 800a2b0:	197b      	adds	r3, r7, r5
 800a2b2:	881a      	ldrh	r2, [r3, #0]
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	18fb      	adds	r3, r7, r3
 800a2b8:	0019      	movs	r1, r3
 800a2ba:	2069      	movs	r0, #105	@ 0x69
 800a2bc:	f001 f9c2 	bl	800b644 <sensirion_i2c_write_data>
 800a2c0:	0003      	movs	r3, r0
 800a2c2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2c4:	19bb      	adds	r3, r7, r6
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	5e9b      	ldrsh	r3, [r3, r2]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <sen5x_get_product_name+0x56>
        return error;
 800a2ce:	19bb      	adds	r3, r7, r6
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	5e9b      	ldrsh	r3, [r3, r2]
 800a2d4:	e021      	b.n	800a31a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a2d6:	4b14      	ldr	r3, [pc, #80]	@ (800a328 <sen5x_get_product_name+0xa8>)
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f7ff fbbb 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a2de:	253c      	movs	r5, #60	@ 0x3c
 800a2e0:	197c      	adds	r4, r7, r5
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	18fb      	adds	r3, r7, r3
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	0019      	movs	r1, r3
 800a2ea:	2069      	movs	r0, #105	@ 0x69
 800a2ec:	f001 f9c2 	bl	800b674 <sensirion_i2c_read_data_inplace>
 800a2f0:	0003      	movs	r3, r0
 800a2f2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2f4:	197b      	adds	r3, r7, r5
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	5e9b      	ldrsh	r3, [r3, r2]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <sen5x_get_product_name+0x86>
        return error;
 800a2fe:	197b      	adds	r3, r7, r5
 800a300:	2200      	movs	r2, #0
 800a302:	5e9b      	ldrsh	r3, [r3, r2]
 800a304:	e009      	b.n	800a31a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a306:	1cfb      	adds	r3, r7, #3
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	230c      	movs	r3, #12
 800a310:	18fb      	adds	r3, r7, r3
 800a312:	0018      	movs	r0, r3
 800a314:	f000 f988 	bl	800a628 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	0018      	movs	r0, r3
 800a31c:	46bd      	mov	sp, r7
 800a31e:	b011      	add	sp, #68	@ 0x44
 800a320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a322:	46c0      	nop			@ (mov r8, r8)
 800a324:	0000d014 	.word	0x0000d014
 800a328:	0000c350 	.word	0x0000c350

0800a32c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32e:	b091      	sub	sp, #68	@ 0x44
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	000a      	movs	r2, r1
 800a336:	1cfb      	adds	r3, r7, #3
 800a338:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a33a:	253e      	movs	r5, #62	@ 0x3e
 800a33c:	197b      	adds	r3, r7, r5
 800a33e:	2200      	movs	r2, #0
 800a340:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a342:	197c      	adds	r4, r7, r5
 800a344:	4a22      	ldr	r2, [pc, #136]	@ (800a3d0 <sen5x_get_serial_number+0xa4>)
 800a346:	197b      	adds	r3, r7, r5
 800a348:	8819      	ldrh	r1, [r3, #0]
 800a34a:	230c      	movs	r3, #12
 800a34c:	18fb      	adds	r3, r7, r3
 800a34e:	0018      	movs	r0, r3
 800a350:	f001 f8f4 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a354:	0003      	movs	r3, r0
 800a356:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a358:	263c      	movs	r6, #60	@ 0x3c
 800a35a:	19bc      	adds	r4, r7, r6
 800a35c:	197b      	adds	r3, r7, r5
 800a35e:	881a      	ldrh	r2, [r3, #0]
 800a360:	230c      	movs	r3, #12
 800a362:	18fb      	adds	r3, r7, r3
 800a364:	0019      	movs	r1, r3
 800a366:	2069      	movs	r0, #105	@ 0x69
 800a368:	f001 f96c 	bl	800b644 <sensirion_i2c_write_data>
 800a36c:	0003      	movs	r3, r0
 800a36e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a370:	19bb      	adds	r3, r7, r6
 800a372:	2200      	movs	r2, #0
 800a374:	5e9b      	ldrsh	r3, [r3, r2]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <sen5x_get_serial_number+0x56>
        return error;
 800a37a:	19bb      	adds	r3, r7, r6
 800a37c:	2200      	movs	r2, #0
 800a37e:	5e9b      	ldrsh	r3, [r3, r2]
 800a380:	e021      	b.n	800a3c6 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a382:	4b14      	ldr	r3, [pc, #80]	@ (800a3d4 <sen5x_get_serial_number+0xa8>)
 800a384:	0018      	movs	r0, r3
 800a386:	f7ff fb65 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a38a:	253c      	movs	r5, #60	@ 0x3c
 800a38c:	197c      	adds	r4, r7, r5
 800a38e:	230c      	movs	r3, #12
 800a390:	18fb      	adds	r3, r7, r3
 800a392:	2220      	movs	r2, #32
 800a394:	0019      	movs	r1, r3
 800a396:	2069      	movs	r0, #105	@ 0x69
 800a398:	f001 f96c 	bl	800b674 <sensirion_i2c_read_data_inplace>
 800a39c:	0003      	movs	r3, r0
 800a39e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3a0:	197b      	adds	r3, r7, r5
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <sen5x_get_serial_number+0x86>
        return error;
 800a3aa:	197b      	adds	r3, r7, r5
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	5e9b      	ldrsh	r3, [r3, r2]
 800a3b0:	e009      	b.n	800a3c6 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a3b2:	1cfb      	adds	r3, r7, #3
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	230c      	movs	r3, #12
 800a3bc:	18fb      	adds	r3, r7, r3
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f000 f932 	bl	800a628 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b011      	add	sp, #68	@ 0x44
 800a3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ce:	46c0      	nop			@ (mov r8, r8)
 800a3d0:	0000d033 	.word	0x0000d033
 800a3d4:	0000c350 	.word	0x0000c350

0800a3d8 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3da:	b089      	sub	sp, #36	@ 0x24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a3e6:	251e      	movs	r5, #30
 800a3e8:	197b      	adds	r3, r7, r5
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a3ee:	197c      	adds	r4, r7, r5
 800a3f0:	23d1      	movs	r3, #209	@ 0xd1
 800a3f2:	021a      	lsls	r2, r3, #8
 800a3f4:	197b      	adds	r3, r7, r5
 800a3f6:	8819      	ldrh	r1, [r3, #0]
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	18fb      	adds	r3, r7, r3
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	f001 f89d 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a402:	0003      	movs	r3, r0
 800a404:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a406:	261c      	movs	r6, #28
 800a408:	19bc      	adds	r4, r7, r6
 800a40a:	197b      	adds	r3, r7, r5
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	2310      	movs	r3, #16
 800a410:	18fb      	adds	r3, r7, r3
 800a412:	0019      	movs	r1, r3
 800a414:	2069      	movs	r0, #105	@ 0x69
 800a416:	f001 f915 	bl	800b644 <sensirion_i2c_write_data>
 800a41a:	0003      	movs	r3, r0
 800a41c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a41e:	19bb      	adds	r3, r7, r6
 800a420:	2200      	movs	r2, #0
 800a422:	5e9b      	ldrsh	r3, [r3, r2]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <sen5x_get_version+0x58>
        return error;
 800a428:	19bb      	adds	r3, r7, r6
 800a42a:	2200      	movs	r2, #0
 800a42c:	5e9b      	ldrsh	r3, [r3, r2]
 800a42e:	e038      	b.n	800a4a2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a430:	4b1e      	ldr	r3, [pc, #120]	@ (800a4ac <sen5x_get_version+0xd4>)
 800a432:	0018      	movs	r0, r3
 800a434:	f7ff fb0e 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a438:	251c      	movs	r5, #28
 800a43a:	197c      	adds	r4, r7, r5
 800a43c:	2310      	movs	r3, #16
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	2208      	movs	r2, #8
 800a442:	0019      	movs	r1, r3
 800a444:	2069      	movs	r0, #105	@ 0x69
 800a446:	f001 f915 	bl	800b674 <sensirion_i2c_read_data_inplace>
 800a44a:	0003      	movs	r3, r0
 800a44c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a44e:	197b      	adds	r3, r7, r5
 800a450:	2200      	movs	r2, #0
 800a452:	5e9b      	ldrsh	r3, [r3, r2]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <sen5x_get_version+0x88>
        return error;
 800a458:	197b      	adds	r3, r7, r5
 800a45a:	2200      	movs	r2, #0
 800a45c:	5e9b      	ldrsh	r3, [r3, r2]
 800a45e:	e020      	b.n	800a4a2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a460:	2110      	movs	r1, #16
 800a462:	187b      	adds	r3, r7, r1
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a46a:	187b      	adds	r3, r7, r1
 800a46c:	785a      	ldrb	r2, [r3, #1]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a472:	187b      	adds	r3, r7, r1
 800a474:	789b      	ldrb	r3, [r3, #2]
 800a476:	1e5a      	subs	r2, r3, #1
 800a478:	4193      	sbcs	r3, r2
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a480:	187b      	adds	r3, r7, r1
 800a482:	78da      	ldrb	r2, [r3, #3]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a488:	187b      	adds	r3, r7, r1
 800a48a:	791a      	ldrb	r2, [r3, #4]
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a490:	187b      	adds	r3, r7, r1
 800a492:	795a      	ldrb	r2, [r3, #5]
 800a494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a496:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a498:	187b      	adds	r3, r7, r1
 800a49a:	799a      	ldrb	r2, [r3, #6]
 800a49c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a49e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	b009      	add	sp, #36	@ 0x24
 800a4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4aa:	46c0      	nop			@ (mov r8, r8)
 800a4ac:	00004e20 	.word	0x00004e20

0800a4b0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a4b8:	2516      	movs	r5, #22
 800a4ba:	197b      	adds	r3, r7, r5
 800a4bc:	2200      	movs	r2, #0
 800a4be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a4c0:	197c      	adds	r4, r7, r5
 800a4c2:	4a22      	ldr	r2, [pc, #136]	@ (800a54c <sen5x_read_device_status+0x9c>)
 800a4c4:	197b      	adds	r3, r7, r5
 800a4c6:	8819      	ldrh	r1, [r3, #0]
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	18fb      	adds	r3, r7, r3
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f001 f835 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a4d2:	0003      	movs	r3, r0
 800a4d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a4d6:	2614      	movs	r6, #20
 800a4d8:	19bc      	adds	r4, r7, r6
 800a4da:	197b      	adds	r3, r7, r5
 800a4dc:	881a      	ldrh	r2, [r3, #0]
 800a4de:	230c      	movs	r3, #12
 800a4e0:	18fb      	adds	r3, r7, r3
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	2069      	movs	r0, #105	@ 0x69
 800a4e6:	f001 f8ad 	bl	800b644 <sensirion_i2c_write_data>
 800a4ea:	0003      	movs	r3, r0
 800a4ec:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a4ee:	19bb      	adds	r3, r7, r6
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	5e9b      	ldrsh	r3, [r3, r2]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <sen5x_read_device_status+0x50>
        return error;
 800a4f8:	19bb      	adds	r3, r7, r6
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	5e9b      	ldrsh	r3, [r3, r2]
 800a4fe:	e020      	b.n	800a542 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a500:	4b13      	ldr	r3, [pc, #76]	@ (800a550 <sen5x_read_device_status+0xa0>)
 800a502:	0018      	movs	r0, r3
 800a504:	f7ff faa6 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a508:	2514      	movs	r5, #20
 800a50a:	197c      	adds	r4, r7, r5
 800a50c:	230c      	movs	r3, #12
 800a50e:	18fb      	adds	r3, r7, r3
 800a510:	2204      	movs	r2, #4
 800a512:	0019      	movs	r1, r3
 800a514:	2069      	movs	r0, #105	@ 0x69
 800a516:	f001 f8ad 	bl	800b674 <sensirion_i2c_read_data_inplace>
 800a51a:	0003      	movs	r3, r0
 800a51c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a51e:	197b      	adds	r3, r7, r5
 800a520:	2200      	movs	r2, #0
 800a522:	5e9b      	ldrsh	r3, [r3, r2]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <sen5x_read_device_status+0x80>
        return error;
 800a528:	197b      	adds	r3, r7, r5
 800a52a:	2200      	movs	r2, #0
 800a52c:	5e9b      	ldrsh	r3, [r3, r2]
 800a52e:	e008      	b.n	800a542 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a530:	230c      	movs	r3, #12
 800a532:	18fb      	adds	r3, r7, r3
 800a534:	0018      	movs	r0, r3
 800a536:	f000 f850 	bl	800a5da <sensirion_common_bytes_to_uint32_t>
 800a53a:	0002      	movs	r2, r0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a540:	2300      	movs	r3, #0
}
 800a542:	0018      	movs	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	b007      	add	sp, #28
 800a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	0000d206 	.word	0x0000d206
 800a550:	00004e20 	.word	0x00004e20

0800a554 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a55a:	1dbb      	adds	r3, r7, #6
 800a55c:	2200      	movs	r2, #0
 800a55e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a560:	1dbc      	adds	r4, r7, #6
 800a562:	4a12      	ldr	r2, [pc, #72]	@ (800a5ac <sen5x_device_reset+0x58>)
 800a564:	1dbb      	adds	r3, r7, #6
 800a566:	8819      	ldrh	r1, [r3, #0]
 800a568:	003b      	movs	r3, r7
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 ffe6 	bl	800b53c <sensirion_i2c_add_command_to_buffer>
 800a570:	0003      	movs	r3, r0
 800a572:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a574:	1d3c      	adds	r4, r7, #4
 800a576:	1dbb      	adds	r3, r7, #6
 800a578:	881a      	ldrh	r2, [r3, #0]
 800a57a:	003b      	movs	r3, r7
 800a57c:	0019      	movs	r1, r3
 800a57e:	2069      	movs	r0, #105	@ 0x69
 800a580:	f001 f860 	bl	800b644 <sensirion_i2c_write_data>
 800a584:	0003      	movs	r3, r0
 800a586:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a588:	1d3b      	adds	r3, r7, #4
 800a58a:	2200      	movs	r2, #0
 800a58c:	5e9b      	ldrsh	r3, [r3, r2]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <sen5x_device_reset+0x46>
        return error;
 800a592:	1d3b      	adds	r3, r7, #4
 800a594:	2200      	movs	r2, #0
 800a596:	5e9b      	ldrsh	r3, [r3, r2]
 800a598:	e004      	b.n	800a5a4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a59a:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <sen5x_device_reset+0x5c>)
 800a59c:	0018      	movs	r0, r3
 800a59e:	f7ff fa59 	bl	8009a54 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	b003      	add	sp, #12
 800a5aa:	bd90      	pop	{r4, r7, pc}
 800a5ac:	0000d304 	.word	0x0000d304
 800a5b0:	00030d40 	.word	0x00030d40

0800a5b4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	b21a      	sxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	b21b      	sxth	r3, r3
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	b21b      	sxth	r3, r3
 800a5d0:	b29b      	uxth	r3, r3
}
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b082      	sub	sp, #8
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	061a      	lsls	r2, r3, #24
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	041b      	lsls	r3, r3, #16
 800a5f0:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a5fa:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	3203      	adds	r2, #3
 800a600:	7812      	ldrb	r2, [r2, #0]
 800a602:	4313      	orrs	r3, r2
}
 800a604:	0018      	movs	r0, r3
 800a606:	46bd      	mov	sp, r7
 800a608:	b002      	add	sp, #8
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	0018      	movs	r0, r3
 800a618:	f7ff ffcc 	bl	800a5b4 <sensirion_common_bytes_to_uint16_t>
 800a61c:	0003      	movs	r3, r0
 800a61e:	b21b      	sxth	r3, r3
}
 800a620:	0018      	movs	r0, r3
 800a622:	46bd      	mov	sp, r7
 800a624:	b002      	add	sp, #8
 800a626:	bd80      	pop	{r7, pc}

0800a628 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	1dbb      	adds	r3, r7, #6
 800a634:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a636:	2316      	movs	r3, #22
 800a638:	18fb      	adds	r3, r7, r3
 800a63a:	2200      	movs	r2, #0
 800a63c:	801a      	strh	r2, [r3, #0]
 800a63e:	e00f      	b.n	800a660 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a640:	2016      	movs	r0, #22
 800a642:	183b      	adds	r3, r7, r0
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	18d2      	adds	r2, r2, r3
 800a64a:	183b      	adds	r3, r7, r0
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	18cb      	adds	r3, r1, r3
 800a652:	7812      	ldrb	r2, [r2, #0]
 800a654:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a656:	183b      	adds	r3, r7, r0
 800a658:	881a      	ldrh	r2, [r3, #0]
 800a65a:	183b      	adds	r3, r7, r0
 800a65c:	3201      	adds	r2, #1
 800a65e:	801a      	strh	r2, [r3, #0]
 800a660:	2316      	movs	r3, #22
 800a662:	18fa      	adds	r2, r7, r3
 800a664:	1dbb      	adds	r3, r7, #6
 800a666:	8812      	ldrh	r2, [r2, #0]
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d3e8      	bcc.n	800a640 <sensirion_common_copy_bytes+0x18>
    }
}
 800a66e:	46c0      	nop			@ (mov r8, r8)
 800a670:	46c0      	nop			@ (mov r8, r8)
 800a672:	46bd      	mov	sp, r7
 800a674:	b006      	add	sp, #24
 800a676:	bd80      	pop	{r7, pc}

0800a678 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d113      	bne.n	800a6be <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	22fe      	movs	r2, #254	@ 0xfe
 800a69a:	0592      	lsls	r2, r2, #22
 800a69c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a70c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a6a2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4a1a      	ldr	r2, [pc, #104]	@ (800a710 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a6a8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a19      	ldr	r2, [pc, #100]	@ (800a714 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a6ae:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4a19      	ldr	r2, [pc, #100]	@ (800a718 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a6b4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	4a18      	ldr	r2, [pc, #96]	@ (800a71c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a6ba:	61da      	str	r2, [r3, #28]
 800a6bc:	e011      	b.n	800a6e2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4a17      	ldr	r2, [pc, #92]	@ (800a720 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a6c2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4a17      	ldr	r2, [pc, #92]	@ (800a724 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a6c8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a16      	ldr	r2, [pc, #88]	@ (800a728 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a6ce:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4a16      	ldr	r2, [pc, #88]	@ (800a72c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a6d4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4a15      	ldr	r2, [pc, #84]	@ (800a730 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a6da:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4a15      	ldr	r2, [pc, #84]	@ (800a734 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a6e0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4a14      	ldr	r2, [pc, #80]	@ (800a738 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a6e6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4a14      	ldr	r2, [pc, #80]	@ (800a73c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a6ec:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4a12      	ldr	r2, [pc, #72]	@ (800a73c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a6f2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4a12      	ldr	r2, [pc, #72]	@ (800a740 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a6f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	f000 f833 	bl	800a768 <GasIndexAlgorithm_reset>
}
 800a702:	46c0      	nop			@ (mov r8, r8)
 800a704:	46bd      	mov	sp, r7
 800a706:	b004      	add	sp, #16
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	46c0      	nop			@ (mov r8, r8)
 800a70c:	00002710 	.word	0x00002710
 800a710:	44340000 	.word	0x44340000
 800a714:	46859800 	.word	0x46859800
 800a718:	46a05000 	.word	0x46a05000
 800a71c:	41f00000 	.word	0x41f00000
 800a720:	42c80000 	.word	0x42c80000
 800a724:	00004e20 	.word	0x00004e20
 800a728:	43340000 	.word	0x43340000
 800a72c:	4528c000 	.word	0x4528c000
 800a730:	45a32000 	.word	0x45a32000
 800a734:	43aa0000 	.word	0x43aa0000
 800a738:	43660000 	.word	0x43660000
 800a73c:	41400000 	.word	0x41400000
 800a740:	42480000 	.word	0x42480000

0800a744 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a74e:	4a05      	ldr	r2, [pc, #20]	@ (800a764 <GasIndexAlgorithm_init+0x20>)
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	0018      	movs	r0, r3
 800a756:	f7ff ff8f 	bl	800a678 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a75a:	46c0      	nop			@ (mov r8, r8)
 800a75c:	46bd      	mov	sp, r7
 800a75e:	b002      	add	sp, #8
 800a760:	bd80      	pop	{r7, pc}
 800a762:	46c0      	nop			@ (mov r8, r8)
 800a764:	44610000 	.word	0x44610000

0800a768 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	0018      	movs	r0, r3
 800a786:	f000 f805 	bl	800a794 <GasIndexAlgorithm__init_instances>
}
 800a78a:	46c0      	nop			@ (mov r8, r8)
 800a78c:	46bd      	mov	sp, r7
 800a78e:	b002      	add	sp, #8
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f000 f8e8 	bl	800a974 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f000 f9a6 	bl	800aaf8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a7ac:	1c04      	adds	r4, r0, #0
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f000 f9ab 	bl	800ab0c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a7b6:	1c02      	adds	r2, r0, #0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	1c21      	adds	r1, r4, #0
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f000 fc3b 	bl	800b038 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d107      	bne.n	800a7da <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a7ca:	23fe      	movs	r3, #254	@ 0xfe
 800a7cc:	059b      	lsls	r3, r3, #22
 800a7ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a7f8 <GasIndexAlgorithm__init_instances+0x64>)
 800a7d0:	490a      	ldr	r1, [pc, #40]	@ (800a7fc <GasIndexAlgorithm__init_instances+0x68>)
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fc86 	bl	800b0e4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a7d8:	e005      	b.n	800a7e6 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a7da:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <GasIndexAlgorithm__init_instances+0x6c>)
 800a7dc:	4a09      	ldr	r2, [pc, #36]	@ (800a804 <GasIndexAlgorithm__init_instances+0x70>)
 800a7de:	490a      	ldr	r1, [pc, #40]	@ (800a808 <GasIndexAlgorithm__init_instances+0x74>)
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc7f 	bl	800b0e4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	f000 fd35 	bl	800b258 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b003      	add	sp, #12
 800a7f4:	bd90      	pop	{r4, r7, pc}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	bc257a78 	.word	0xbc257a78
 800a7fc:	44198000 	.word	0x44198000
 800a800:	42c80000 	.word	0x42c80000
 800a804:	bbd4fdf4 	.word	0xbbd4fdf4
 800a808:	43550000 	.word	0x43550000

0800a80c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a80c:	b590      	push	{r4, r7, lr}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a81c:	4952      	ldr	r1, [pc, #328]	@ (800a968 <GasIndexAlgorithm_process+0x15c>)
 800a81e:	1c18      	adds	r0, r3, #0
 800a820:	f7f5 fe90 	bl	8000544 <__aeabi_fcmple>
 800a824:	1e03      	subs	r3, r0, #0
 800a826:	d00c      	beq.n	800a842 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	1c19      	adds	r1, r3, #0
 800a832:	1c10      	adds	r0, r2, #0
 800a834:	f7f6 f844 	bl	80008c0 <__aeabi_fadd>
 800a838:	1c03      	adds	r3, r0, #0
 800a83a:	1c1a      	adds	r2, r3, #0
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a840:	e080      	b.n	800a944 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd25      	ble.n	800a894 <GasIndexAlgorithm_process+0x88>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	4a48      	ldr	r2, [pc, #288]	@ (800a96c <GasIndexAlgorithm_process+0x160>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	dc21      	bgt.n	800a894 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	429a      	cmp	r2, r3
 800a858:	dc04      	bgt.n	800a864 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60bb      	str	r3, [r7, #8]
 800a862:	e00d      	b.n	800a880 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	4a41      	ldr	r2, [pc, #260]	@ (800a970 <GasIndexAlgorithm_process+0x164>)
 800a86a:	4694      	mov	ip, r2
 800a86c:	4463      	add	r3, ip
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	dd05      	ble.n	800a880 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	4a3d      	ldr	r2, [pc, #244]	@ (800a970 <GasIndexAlgorithm_process+0x164>)
 800a87a:	4694      	mov	ip, r2
 800a87c:	4463      	add	r3, ip
 800a87e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	0018      	movs	r0, r3
 800a88a:	f7f6 fea1 	bl	80015d0 <__aeabi_i2f>
 800a88e:	1c02      	adds	r2, r0, #0
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f000 f945 	bl	800ab2e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a8a4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a8a6:	d014      	beq.n	800a8d2 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	1c11      	adds	r1, r2, #0
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	f000 fbd1 	bl	800b058 <GasIndexAlgorithm__mox_model__process>
 800a8b6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	1c11      	adds	r1, r2, #0
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f000 fc25 	bl	800b114 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a8ca:	1c02      	adds	r2, r0, #0
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800a8d0:	e003      	b.n	800a8da <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	689a      	ldr	r2, [r3, #8]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	1c11      	adds	r1, r2, #0
 800a8e2:	0018      	movs	r0, r3
 800a8e4:	f000 fcec 	bl	800b2c0 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a8e8:	1c02      	adds	r2, r0, #0
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f2:	21fc      	movs	r1, #252	@ 0xfc
 800a8f4:	0589      	lsls	r1, r1, #22
 800a8f6:	1c18      	adds	r0, r3, #0
 800a8f8:	f7f5 fe1a 	bl	8000530 <__aeabi_fcmplt>
 800a8fc:	1e03      	subs	r3, r0, #0
 800a8fe:	d003      	beq.n	800a908 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	22fc      	movs	r2, #252	@ 0xfc
 800a904:	0592      	lsls	r2, r2, #22
 800a906:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90c:	2100      	movs	r1, #0
 800a90e:	1c18      	adds	r0, r3, #0
 800a910:	f7f5 fe22 	bl	8000558 <__aeabi_fcmpgt>
 800a914:	1e03      	subs	r3, r0, #0
 800a916:	d015      	beq.n	800a944 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	1c11      	adds	r1, r2, #0
 800a920:	0018      	movs	r0, r3
 800a922:	f000 fa4f 	bl	800adc4 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	0018      	movs	r0, r3
 800a92a:	f000 f8e5 	bl	800aaf8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a92e:	1c04      	adds	r4, r0, #0
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	0018      	movs	r0, r3
 800a934:	f000 f8ea 	bl	800ab0c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a938:	1c02      	adds	r2, r0, #0
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	1c21      	adds	r1, r4, #0
 800a93e:	0018      	movs	r0, r3
 800a940:	f000 fb7a 	bl	800b038 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a948:	21fc      	movs	r1, #252	@ 0xfc
 800a94a:	0589      	lsls	r1, r1, #22
 800a94c:	1c18      	adds	r0, r3, #0
 800a94e:	f7f5 ffb7 	bl	80008c0 <__aeabi_fadd>
 800a952:	1c03      	adds	r3, r0, #0
 800a954:	1c18      	adds	r0, r3, #0
 800a956:	f7f6 fe1b 	bl	8001590 <__aeabi_f2iz>
 800a95a:	0002      	movs	r2, r0
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	601a      	str	r2, [r3, #0]
    return;
 800a960:	46c0      	nop			@ (mov r8, r8)
}
 800a962:	46bd      	mov	sp, r7
 800a964:	b005      	add	sp, #20
 800a966:	bd90      	pop	{r4, r7, pc}
 800a968:	42340000 	.word	0x42340000
 800a96c:	0000fde7 	.word	0x0000fde7
 800a970:	00007fff 	.word	0x00007fff

0800a974 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a974:	b5b0      	push	{r4, r5, r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	223c      	movs	r2, #60	@ 0x3c
 800a980:	2100      	movs	r1, #0
 800a982:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	4952      	ldr	r1, [pc, #328]	@ (800aae8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a99e:	1c18      	adds	r0, r3, #0
 800a9a0:	f7f6 f918 	bl	8000bd4 <__aeabi_fdiv>
 800a9a4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a9a6:	2188      	movs	r1, #136	@ 0x88
 800a9a8:	05c9      	lsls	r1, r1, #23
 800a9aa:	1c18      	adds	r0, r3, #0
 800a9ac:	f7f6 faf8 	bl	8000fa0 <__aeabi_fmul>
 800a9b0:	1c03      	adds	r3, r0, #0
 800a9b2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	494a      	ldr	r1, [pc, #296]	@ (800aae8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9be:	1c18      	adds	r0, r3, #0
 800a9c0:	f7f6 f908 	bl	8000bd4 <__aeabi_fdiv>
 800a9c4:	1c03      	adds	r3, r0, #0
 800a9c6:	1c19      	adds	r1, r3, #0
 800a9c8:	1c20      	adds	r0, r4, #0
 800a9ca:	f7f5 ff79 	bl	80008c0 <__aeabi_fadd>
 800a9ce:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a9d0:	1c19      	adds	r1, r3, #0
 800a9d2:	1c28      	adds	r0, r5, #0
 800a9d4:	f7f6 f8fe 	bl	8000bd4 <__aeabi_fdiv>
 800a9d8:	1c03      	adds	r3, r0, #0
 800a9da:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	4940      	ldr	r1, [pc, #256]	@ (800aae8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9e6:	1c18      	adds	r0, r3, #0
 800a9e8:	f7f6 f8f4 	bl	8000bd4 <__aeabi_fdiv>
 800a9ec:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a9ee:	2185      	movs	r1, #133	@ 0x85
 800a9f0:	05c9      	lsls	r1, r1, #23
 800a9f2:	1c18      	adds	r0, r3, #0
 800a9f4:	f7f6 fad4 	bl	8000fa0 <__aeabi_fmul>
 800a9f8:	1c03      	adds	r3, r0, #0
 800a9fa:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	4938      	ldr	r1, [pc, #224]	@ (800aae8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800aa06:	1c18      	adds	r0, r3, #0
 800aa08:	f7f6 f8e4 	bl	8000bd4 <__aeabi_fdiv>
 800aa0c:	1c03      	adds	r3, r0, #0
 800aa0e:	1c19      	adds	r1, r3, #0
 800aa10:	1c20      	adds	r0, r4, #0
 800aa12:	f7f5 ff55 	bl	80008c0 <__aeabi_fadd>
 800aa16:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800aa18:	1c19      	adds	r1, r3, #0
 800aa1a:	1c28      	adds	r0, r5, #0
 800aa1c:	f7f6 f8da 	bl	8000bd4 <__aeabi_fdiv>
 800aa20:	1c03      	adds	r3, r0, #0
 800aa22:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d118      	bne.n	800aa62 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800aa34:	2188      	movs	r1, #136	@ 0x88
 800aa36:	05c9      	lsls	r1, r1, #23
 800aa38:	1c18      	adds	r0, r3, #0
 800aa3a:	f7f6 fab1 	bl	8000fa0 <__aeabi_fmul>
 800aa3e:	1c03      	adds	r3, r0, #0
 800aa40:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800aa46:	4929      	ldr	r1, [pc, #164]	@ (800aaec <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800aa48:	1c18      	adds	r0, r3, #0
 800aa4a:	f7f5 ff39 	bl	80008c0 <__aeabi_fadd>
 800aa4e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800aa50:	1c19      	adds	r1, r3, #0
 800aa52:	1c20      	adds	r0, r4, #0
 800aa54:	f7f6 f8be 	bl	8000bd4 <__aeabi_fdiv>
 800aa58:	1c03      	adds	r3, r0, #0
 800aa5a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa60:	e017      	b.n	800aa92 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800aa66:	2188      	movs	r1, #136	@ 0x88
 800aa68:	05c9      	lsls	r1, r1, #23
 800aa6a:	1c18      	adds	r0, r3, #0
 800aa6c:	f7f6 fa98 	bl	8000fa0 <__aeabi_fmul>
 800aa70:	1c03      	adds	r3, r0, #0
 800aa72:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800aa78:	491d      	ldr	r1, [pc, #116]	@ (800aaf0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800aa7a:	1c18      	adds	r0, r3, #0
 800aa7c:	f7f5 ff20 	bl	80008c0 <__aeabi_fadd>
 800aa80:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800aa82:	1c19      	adds	r1, r3, #0
 800aa84:	1c20      	adds	r0, r4, #0
 800aa86:	f7f6 f8a5 	bl	8000bd4 <__aeabi_fdiv>
 800aa8a:	1c03      	adds	r3, r0, #0
 800aa8c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800aa96:	2185      	movs	r1, #133	@ 0x85
 800aa98:	05c9      	lsls	r1, r1, #23
 800aa9a:	1c18      	adds	r0, r3, #0
 800aa9c:	f7f6 fa80 	bl	8000fa0 <__aeabi_fmul>
 800aaa0:	1c03      	adds	r3, r0, #0
 800aaa2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	4912      	ldr	r1, [pc, #72]	@ (800aaf4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800aaaa:	1c18      	adds	r0, r3, #0
 800aaac:	f7f5 ff08 	bl	80008c0 <__aeabi_fadd>
 800aab0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800aab2:	1c19      	adds	r1, r3, #0
 800aab4:	1c20      	adds	r0, r4, #0
 800aab6:	f7f6 f88d 	bl	8000bd4 <__aeabi_fdiv>
 800aaba:	1c03      	adds	r3, r0, #0
 800aabc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800aae0:	46c0      	nop			@ (mov r8, r8)
 800aae2:	46bd      	mov	sp, r7
 800aae4:	b002      	add	sp, #8
 800aae6:	bdb0      	pop	{r4, r5, r7, pc}
 800aae8:	45610000 	.word	0x45610000
 800aaec:	44960000 	.word	0x44960000
 800aaf0:	41a00000 	.word	0x41a00000
 800aaf4:	451c4000 	.word	0x451c4000

0800aaf8 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ab04:	1c18      	adds	r0, r3, #0
 800ab06:	46bd      	mov	sp, r7
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ab1c:	1c19      	adds	r1, r3, #0
 800ab1e:	1c10      	adds	r0, r2, #0
 800ab20:	f7f5 fece 	bl	80008c0 <__aeabi_fadd>
 800ab24:	1c03      	adds	r3, r0, #0
}
 800ab26:	1c18      	adds	r0, r3, #0
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	b002      	add	sp, #8
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	223c      	movs	r2, #60	@ 0x3c
 800ab3a:	5c9b      	ldrb	r3, [r3, r2]
}
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	b002      	add	sp, #8
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ab44:	b5b0      	push	{r4, r5, r7, lr}
 800ab46:	b08c      	sub	sp, #48	@ 0x30
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ab50:	1c19      	adds	r1, r3, #0
 800ab52:	4895      	ldr	r0, [pc, #596]	@ (800ada8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800ab54:	f7f6 fb62 	bl	800121c <__aeabi_fsub>
 800ab58:	1c03      	adds	r3, r0, #0
 800ab5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab60:	1c19      	adds	r1, r3, #0
 800ab62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab64:	f7f5 fcf8 	bl	8000558 <__aeabi_fcmpgt>
 800ab68:	1e03      	subs	r3, r0, #0
 800ab6a:	d00b      	beq.n	800ab84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ab74:	1c19      	adds	r1, r3, #0
 800ab76:	1c10      	adds	r0, r2, #0
 800ab78:	f7f5 fea2 	bl	80008c0 <__aeabi_fadd>
 800ab7c:	1c03      	adds	r3, r0, #0
 800ab7e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab88:	1c19      	adds	r1, r3, #0
 800ab8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab8c:	f7f5 fce4 	bl	8000558 <__aeabi_fcmpgt>
 800ab90:	1e03      	subs	r3, r0, #0
 800ab92:	d00b      	beq.n	800abac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ab9c:	1c19      	adds	r1, r3, #0
 800ab9e:	1c10      	adds	r0, r2, #0
 800aba0:	f7f5 fe8e 	bl	80008c0 <__aeabi_fadd>
 800aba4:	1c03      	adds	r3, r0, #0
 800aba6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6959      	ldr	r1, [r3, #20]
 800abb0:	4a7e      	ldr	r2, [pc, #504]	@ (800adac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	0018      	movs	r0, r3
 800abb6:	f000 f9f1 	bl	800af9c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	1c11      	adds	r1, r2, #0
 800abc2:	0018      	movs	r0, r3
 800abc4:	f000 f9fa 	bl	800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800abc8:	1c03      	adds	r3, r0, #0
 800abca:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800abd8:	1c19      	adds	r1, r3, #0
 800abda:	1c10      	adds	r0, r2, #0
 800abdc:	f7f6 fb1e 	bl	800121c <__aeabi_fsub>
 800abe0:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800abe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abe4:	1c18      	adds	r0, r3, #0
 800abe6:	f7f6 f9db 	bl	8000fa0 <__aeabi_fmul>
 800abea:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800abec:	1c19      	adds	r1, r3, #0
 800abee:	1c20      	adds	r0, r4, #0
 800abf0:	f7f5 fe66 	bl	80008c0 <__aeabi_fadd>
 800abf4:	1c03      	adds	r3, r0, #0
 800abf6:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ac00:	1c19      	adds	r1, r3, #0
 800ac02:	486b      	ldr	r0, [pc, #428]	@ (800adb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ac04:	f7f6 fb0a 	bl	800121c <__aeabi_fsub>
 800ac08:	1c03      	adds	r3, r0, #0
 800ac0a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	1c11      	adds	r1, r2, #0
 800ac14:	0018      	movs	r0, r3
 800ac16:	f000 f9d1 	bl	800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac1a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ac1c:	1c19      	adds	r1, r3, #0
 800ac1e:	1c28      	adds	r0, r5, #0
 800ac20:	f7f6 f9be 	bl	8000fa0 <__aeabi_fmul>
 800ac24:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800ac26:	1c19      	adds	r1, r3, #0
 800ac28:	1c20      	adds	r0, r4, #0
 800ac2a:	f7f5 fe49 	bl	80008c0 <__aeabi_fadd>
 800ac2e:	1c03      	adds	r3, r0, #0
 800ac30:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ac32:	4a60      	ldr	r2, [pc, #384]	@ (800adb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ac34:	6a39      	ldr	r1, [r7, #32]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	0018      	movs	r0, r3
 800ac3a:	f000 f9af 	bl	800af9c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	1c11      	adds	r1, r2, #0
 800ac46:	0018      	movs	r0, r3
 800ac48:	f000 f9b8 	bl	800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac4c:	1c03      	adds	r3, r0, #0
 800ac4e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800ac50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac52:	69f8      	ldr	r0, [r7, #28]
 800ac54:	f7f6 f9a4 	bl	8000fa0 <__aeabi_fmul>
 800ac58:	1c03      	adds	r3, r0, #0
 800ac5a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6999      	ldr	r1, [r3, #24]
 800ac64:	4a51      	ldr	r2, [pc, #324]	@ (800adac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f000 f997 	bl	800af9c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	1c11      	adds	r1, r2, #0
 800ac76:	0018      	movs	r0, r3
 800ac78:	f000 f9a0 	bl	800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac7c:	1c03      	adds	r3, r0, #0
 800ac7e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ac8c:	1c19      	adds	r1, r3, #0
 800ac8e:	1c10      	adds	r0, r2, #0
 800ac90:	f7f6 fac4 	bl	800121c <__aeabi_fsub>
 800ac94:	1c03      	adds	r3, r0, #0
 800ac96:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ac98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac9a:	69b8      	ldr	r0, [r7, #24]
 800ac9c:	f7f6 fabe 	bl	800121c <__aeabi_fsub>
 800aca0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aca2:	1c19      	adds	r1, r3, #0
 800aca4:	1c28      	adds	r0, r5, #0
 800aca6:	f7f6 f97b 	bl	8000fa0 <__aeabi_fmul>
 800acaa:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800acac:	1c19      	adds	r1, r3, #0
 800acae:	1c20      	adds	r0, r4, #0
 800acb0:	f7f5 fe06 	bl	80008c0 <__aeabi_fadd>
 800acb4:	1c03      	adds	r3, r0, #0
 800acb6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800acc0:	1c19      	adds	r1, r3, #0
 800acc2:	483b      	ldr	r0, [pc, #236]	@ (800adb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800acc4:	f7f6 faaa 	bl	800121c <__aeabi_fsub>
 800acc8:	1c03      	adds	r3, r0, #0
 800acca:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	1c11      	adds	r1, r2, #0
 800acd4:	0018      	movs	r0, r3
 800acd6:	f000 f971 	bl	800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800acda:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800acdc:	1c19      	adds	r1, r3, #0
 800acde:	1c28      	adds	r0, r5, #0
 800ace0:	f7f6 f95e 	bl	8000fa0 <__aeabi_fmul>
 800ace4:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ace6:	1c19      	adds	r1, r3, #0
 800ace8:	1c20      	adds	r0, r4, #0
 800acea:	f7f5 fde9 	bl	80008c0 <__aeabi_fadd>
 800acee:	1c03      	adds	r3, r0, #0
 800acf0:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800acf2:	4a30      	ldr	r2, [pc, #192]	@ (800adb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800acf4:	6939      	ldr	r1, [r7, #16]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	0018      	movs	r0, r3
 800acfa:	f000 f94f 	bl	800af9c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	1c11      	adds	r1, r2, #0
 800ad06:	0018      	movs	r0, r3
 800ad08:	f000 f958 	bl	800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ad0c:	1c03      	adds	r3, r0, #0
 800ad0e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ad10:	6979      	ldr	r1, [r7, #20]
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7f6 f944 	bl	8000fa0 <__aeabi_fmul>
 800ad18:	1c03      	adds	r3, r0, #0
 800ad1a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	4923      	ldr	r1, [pc, #140]	@ (800adb8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ad2a:	1c18      	adds	r0, r3, #0
 800ad2c:	f7f5 ff52 	bl	8000bd4 <__aeabi_fdiv>
 800ad30:	1c03      	adds	r3, r0, #0
 800ad32:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ad34:	69f9      	ldr	r1, [r7, #28]
 800ad36:	20fe      	movs	r0, #254	@ 0xfe
 800ad38:	0580      	lsls	r0, r0, #22
 800ad3a:	f7f6 fa6f 	bl	800121c <__aeabi_fsub>
 800ad3e:	1c03      	adds	r3, r0, #0
 800ad40:	491e      	ldr	r1, [pc, #120]	@ (800adbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ad42:	1c18      	adds	r0, r3, #0
 800ad44:	f7f6 f92c 	bl	8000fa0 <__aeabi_fmul>
 800ad48:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ad4a:	491d      	ldr	r1, [pc, #116]	@ (800adc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ad4c:	1c18      	adds	r0, r3, #0
 800ad4e:	f7f6 fa65 	bl	800121c <__aeabi_fsub>
 800ad52:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ad54:	1c19      	adds	r1, r3, #0
 800ad56:	1c28      	adds	r0, r5, #0
 800ad58:	f7f6 f922 	bl	8000fa0 <__aeabi_fmul>
 800ad5c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ad5e:	1c19      	adds	r1, r3, #0
 800ad60:	1c20      	adds	r0, r4, #0
 800ad62:	f7f5 fdad 	bl	80008c0 <__aeabi_fadd>
 800ad66:	1c03      	adds	r3, r0, #0
 800ad68:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad72:	2100      	movs	r1, #0
 800ad74:	1c18      	adds	r0, r3, #0
 800ad76:	f7f5 fbdb 	bl	8000530 <__aeabi_fcmplt>
 800ad7a:	1e03      	subs	r3, r0, #0
 800ad7c:	d002      	beq.n	800ad84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ad8c:	1c19      	adds	r1, r3, #0
 800ad8e:	1c10      	adds	r0, r2, #0
 800ad90:	f7f5 fbe2 	bl	8000558 <__aeabi_fcmpgt>
 800ad94:	1e03      	subs	r3, r0, #0
 800ad96:	d100      	bne.n	800ad9a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ad98:	e002      	b.n	800ada0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ada0:	46c0      	nop			@ (mov r8, r8)
 800ada2:	46bd      	mov	sp, r7
 800ada4:	b00c      	add	sp, #48	@ 0x30
 800ada6:	bdb0      	pop	{r4, r5, r7, pc}
 800ada8:	46fffe00 	.word	0x46fffe00
 800adac:	3c23d70a 	.word	0x3c23d70a
 800adb0:	43ff0000 	.word	0x43ff0000
 800adb4:	3db851ec 	.word	0x3db851ec
 800adb8:	42700000 	.word	0x42700000
 800adbc:	3fa66666 	.word	0x3fa66666
 800adc0:	3e99999a 	.word	0x3e99999a

0800adc4 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	223c      	movs	r2, #60	@ 0x3c
 800add2:	5c9b      	ldrb	r3, [r3, r2]
 800add4:	2201      	movs	r2, #1
 800add6:	4053      	eors	r3, r2
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	223c      	movs	r2, #60	@ 0x3c
 800ade2:	2101      	movs	r1, #1
 800ade4:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800adf2:	e0c8      	b.n	800af86 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf8:	4965      	ldr	r1, [pc, #404]	@ (800af90 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800adfa:	1c18      	adds	r0, r3, #0
 800adfc:	f7f5 fbb6 	bl	800056c <__aeabi_fcmpge>
 800ae00:	1e03      	subs	r3, r0, #0
 800ae02:	d107      	bne.n	800ae14 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ae08:	4962      	ldr	r1, [pc, #392]	@ (800af94 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ae0a:	1c18      	adds	r0, r3, #0
 800ae0c:	f7f5 fb9a 	bl	8000544 <__aeabi_fcmple>
 800ae10:	1e03      	subs	r3, r0, #0
 800ae12:	d00e      	beq.n	800ae32 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ae1c:	1c19      	adds	r1, r3, #0
 800ae1e:	1c10      	adds	r0, r2, #0
 800ae20:	f7f5 fd4e 	bl	80008c0 <__aeabi_fadd>
 800ae24:	1c03      	adds	r3, r0, #0
 800ae26:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae36:	1c19      	adds	r1, r3, #0
 800ae38:	6838      	ldr	r0, [r7, #0]
 800ae3a:	f7f6 f9ef 	bl	800121c <__aeabi_fsub>
 800ae3e:	1c03      	adds	r3, r0, #0
 800ae40:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	0018      	movs	r0, r3
 800ae46:	f7ff fe7d 	bl	800ab44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4e:	1c19      	adds	r1, r3, #0
 800ae50:	6838      	ldr	r0, [r7, #0]
 800ae52:	f7f6 f9e3 	bl	800121c <__aeabi_fsub>
 800ae56:	1c03      	adds	r3, r0, #0
 800ae58:	2185      	movs	r1, #133	@ 0x85
 800ae5a:	05c9      	lsls	r1, r1, #23
 800ae5c:	1c18      	adds	r0, r3, #0
 800ae5e:	f7f5 feb9 	bl	8000bd4 <__aeabi_fdiv>
 800ae62:	1c03      	adds	r3, r0, #0
 800ae64:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800ae66:	2100      	movs	r1, #0
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7f5 fb61 	bl	8000530 <__aeabi_fcmplt>
 800ae6e:	1e03      	subs	r3, r0, #0
 800ae70:	d008      	beq.n	800ae84 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae76:	68f9      	ldr	r1, [r7, #12]
 800ae78:	1c18      	adds	r0, r3, #0
 800ae7a:	f7f6 f9cf 	bl	800121c <__aeabi_fsub>
 800ae7e:	1c03      	adds	r3, r0, #0
 800ae80:	617b      	str	r3, [r7, #20]
 800ae82:	e007      	b.n	800ae94 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae88:	1c19      	adds	r1, r3, #0
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7f5 fd18 	bl	80008c0 <__aeabi_fadd>
 800ae90:	1c03      	adds	r3, r0, #0
 800ae92:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800ae94:	23fe      	movs	r3, #254	@ 0xfe
 800ae96:	059b      	lsls	r3, r3, #22
 800ae98:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800ae9a:	493f      	ldr	r1, [pc, #252]	@ (800af98 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ae9c:	6978      	ldr	r0, [r7, #20]
 800ae9e:	f7f5 fb5b 	bl	8000558 <__aeabi_fcmpgt>
 800aea2:	1e03      	subs	r3, r0, #0
 800aea4:	d010      	beq.n	800aec8 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800aea6:	493c      	ldr	r1, [pc, #240]	@ (800af98 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aea8:	6978      	ldr	r0, [r7, #20]
 800aeaa:	f7f5 fe93 	bl	8000bd4 <__aeabi_fdiv>
 800aeae:	1c03      	adds	r3, r0, #0
 800aeb0:	1c1c      	adds	r4, r3, #0
 800aeb2:	4939      	ldr	r1, [pc, #228]	@ (800af98 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aeb4:	6978      	ldr	r0, [r7, #20]
 800aeb6:	f7f5 fe8d 	bl	8000bd4 <__aeabi_fdiv>
 800aeba:	1c03      	adds	r3, r0, #0
 800aebc:	1c19      	adds	r1, r3, #0
 800aebe:	1c20      	adds	r0, r4, #0
 800aec0:	f7f6 f86e 	bl	8000fa0 <__aeabi_fmul>
 800aec4:	1c03      	adds	r3, r0, #0
 800aec6:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800aecc:	1c19      	adds	r1, r3, #0
 800aece:	2085      	movs	r0, #133	@ 0x85
 800aed0:	05c0      	lsls	r0, r0, #23
 800aed2:	f7f6 f9a3 	bl	800121c <__aeabi_fsub>
 800aed6:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800aed8:	6939      	ldr	r1, [r7, #16]
 800aeda:	1c18      	adds	r0, r3, #0
 800aedc:	f7f6 f860 	bl	8000fa0 <__aeabi_fmul>
 800aee0:	1c03      	adds	r3, r0, #0
 800aee2:	1c18      	adds	r0, r3, #0
 800aee4:	f018 f820 	bl	8022f28 <sqrtf>
 800aee8:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800aef2:	2185      	movs	r1, #133	@ 0x85
 800aef4:	05c9      	lsls	r1, r1, #23
 800aef6:	6938      	ldr	r0, [r7, #16]
 800aef8:	f7f6 f852 	bl	8000fa0 <__aeabi_fmul>
 800aefc:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800aefe:	1c19      	adds	r1, r3, #0
 800af00:	1c28      	adds	r0, r5, #0
 800af02:	f7f5 fe67 	bl	8000bd4 <__aeabi_fdiv>
 800af06:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800af08:	1c19      	adds	r1, r3, #0
 800af0a:	1c20      	adds	r0, r4, #0
 800af0c:	f7f6 f848 	bl	8000fa0 <__aeabi_fmul>
 800af10:	1c03      	adds	r3, r0, #0
 800af12:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af18:	68f9      	ldr	r1, [r7, #12]
 800af1a:	1c18      	adds	r0, r3, #0
 800af1c:	f7f6 f840 	bl	8000fa0 <__aeabi_fmul>
 800af20:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800af22:	6939      	ldr	r1, [r7, #16]
 800af24:	1c18      	adds	r0, r3, #0
 800af26:	f7f5 fe55 	bl	8000bd4 <__aeabi_fdiv>
 800af2a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	1c18      	adds	r0, r3, #0
 800af30:	f7f6 f836 	bl	8000fa0 <__aeabi_fmul>
 800af34:	1c03      	adds	r3, r0, #0
             sqrtf(
 800af36:	1c19      	adds	r1, r3, #0
 800af38:	1c20      	adds	r0, r4, #0
 800af3a:	f7f5 fcc1 	bl	80008c0 <__aeabi_fadd>
 800af3e:	1c03      	adds	r3, r0, #0
 800af40:	1c18      	adds	r0, r3, #0
 800af42:	f017 fff1 	bl	8022f28 <sqrtf>
 800af46:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800af48:	1c19      	adds	r1, r3, #0
 800af4a:	1c30      	adds	r0, r6, #0
 800af4c:	f7f6 f828 	bl	8000fa0 <__aeabi_fmul>
 800af50:	1c03      	adds	r3, r0, #0
 800af52:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af60:	68f9      	ldr	r1, [r7, #12]
 800af62:	1c18      	adds	r0, r3, #0
 800af64:	f7f6 f81c 	bl	8000fa0 <__aeabi_fmul>
 800af68:	1c03      	adds	r3, r0, #0
 800af6a:	2182      	movs	r1, #130	@ 0x82
 800af6c:	05c9      	lsls	r1, r1, #23
 800af6e:	1c18      	adds	r0, r3, #0
 800af70:	f7f5 fe30 	bl	8000bd4 <__aeabi_fdiv>
 800af74:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800af76:	1c19      	adds	r1, r3, #0
 800af78:	1c20      	adds	r0, r4, #0
 800af7a:	f7f5 fca1 	bl	80008c0 <__aeabi_fadd>
 800af7e:	1c03      	adds	r3, r0, #0
 800af80:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800af86:	46c0      	nop			@ (mov r8, r8)
 800af88:	46bd      	mov	sp, r7
 800af8a:	b007      	add	sp, #28
 800af8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8e:	46c0      	nop			@ (mov r8, r8)
 800af90:	42c80000 	.word	0x42c80000
 800af94:	c2c80000 	.word	0xc2c80000
 800af98:	44b40000 	.word	0x44b40000

0800af9c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afb4:	46c0      	nop			@ (mov r8, r8)
 800afb6:	46bd      	mov	sp, r7
 800afb8:	b004      	add	sp, #16
 800afba:	bd80      	pop	{r7, pc}

0800afbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afce:	1c19      	adds	r1, r3, #0
 800afd0:	6838      	ldr	r0, [r7, #0]
 800afd2:	f7f6 f923 	bl	800121c <__aeabi_fsub>
 800afd6:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800afd8:	1c19      	adds	r1, r3, #0
 800afda:	1c20      	adds	r0, r4, #0
 800afdc:	f7f5 ffe0 	bl	8000fa0 <__aeabi_fmul>
 800afe0:	1c03      	adds	r3, r0, #0
 800afe2:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800afe4:	4912      	ldr	r1, [pc, #72]	@ (800b030 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7f5 faa2 	bl	8000530 <__aeabi_fcmplt>
 800afec:	1e03      	subs	r3, r0, #0
 800afee:	d002      	beq.n	800aff6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800aff0:	23fe      	movs	r3, #254	@ 0xfe
 800aff2:	059b      	lsls	r3, r3, #22
 800aff4:	e018      	b.n	800b028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800aff6:	490f      	ldr	r1, [pc, #60]	@ (800b034 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7f5 faad 	bl	8000558 <__aeabi_fcmpgt>
 800affe:	1e03      	subs	r3, r0, #0
 800b000:	d001      	beq.n	800b006 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b002:	2300      	movs	r3, #0
 800b004:	e010      	b.n	800b028 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	1c18      	adds	r0, r3, #0
 800b00a:	f017 ff65 	bl	8022ed8 <expf>
 800b00e:	1c03      	adds	r3, r0, #0
 800b010:	21fe      	movs	r1, #254	@ 0xfe
 800b012:	0589      	lsls	r1, r1, #22
 800b014:	1c18      	adds	r0, r3, #0
 800b016:	f7f5 fc53 	bl	80008c0 <__aeabi_fadd>
 800b01a:	1c03      	adds	r3, r0, #0
 800b01c:	1c19      	adds	r1, r3, #0
 800b01e:	20fe      	movs	r0, #254	@ 0xfe
 800b020:	0580      	lsls	r0, r0, #22
 800b022:	f7f5 fdd7 	bl	8000bd4 <__aeabi_fdiv>
 800b026:	1c03      	adds	r3, r0, #0
    }
}
 800b028:	1c18      	adds	r0, r3, #0
 800b02a:	46bd      	mov	sp, r7
 800b02c:	b005      	add	sp, #20
 800b02e:	bd90      	pop	{r4, r7, pc}
 800b030:	c2480000 	.word	0xc2480000
 800b034:	42480000 	.word	0x42480000

0800b038 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b050:	46c0      	nop			@ (mov r8, r8)
 800b052:	46bd      	mov	sp, r7
 800b054:	b004      	add	sp, #16
 800b056:	bd80      	pop	{r7, pc}

0800b058 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d114      	bne.n	800b094 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b06e:	1c19      	adds	r1, r3, #0
 800b070:	6838      	ldr	r0, [r7, #0]
 800b072:	f7f6 f8d3 	bl	800121c <__aeabi_fsub>
 800b076:	1c03      	adds	r3, r0, #0
 800b078:	4918      	ldr	r1, [pc, #96]	@ (800b0dc <GasIndexAlgorithm__mox_model__process+0x84>)
 800b07a:	1c18      	adds	r0, r3, #0
 800b07c:	f7f5 fdaa 	bl	8000bd4 <__aeabi_fdiv>
 800b080:	1c03      	adds	r3, r0, #0
 800b082:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b088:	1c19      	adds	r1, r3, #0
 800b08a:	1c10      	adds	r0, r2, #0
 800b08c:	f7f5 ff88 	bl	8000fa0 <__aeabi_fmul>
 800b090:	1c03      	adds	r3, r0, #0
 800b092:	e01f      	b.n	800b0d4 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b098:	1c19      	adds	r1, r3, #0
 800b09a:	6838      	ldr	r0, [r7, #0]
 800b09c:	f7f6 f8be 	bl	800121c <__aeabi_fsub>
 800b0a0:	1c03      	adds	r3, r0, #0
 800b0a2:	1c1a      	adds	r2, r3, #0
 800b0a4:	2380      	movs	r3, #128	@ 0x80
 800b0a6:	061b      	lsls	r3, r3, #24
 800b0a8:	4053      	eors	r3, r2
 800b0aa:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0b0:	490b      	ldr	r1, [pc, #44]	@ (800b0e0 <GasIndexAlgorithm__mox_model__process+0x88>)
 800b0b2:	1c18      	adds	r0, r3, #0
 800b0b4:	f7f5 fc04 	bl	80008c0 <__aeabi_fadd>
 800b0b8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b0ba:	1c19      	adds	r1, r3, #0
 800b0bc:	1c20      	adds	r0, r4, #0
 800b0be:	f7f5 fd89 	bl	8000bd4 <__aeabi_fdiv>
 800b0c2:	1c03      	adds	r3, r0, #0
 800b0c4:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b0ca:	1c19      	adds	r1, r3, #0
 800b0cc:	1c10      	adds	r0, r2, #0
 800b0ce:	f7f5 ff67 	bl	8000fa0 <__aeabi_fmul>
 800b0d2:	1c03      	adds	r3, r0, #0
    }
}
 800b0d4:	1c18      	adds	r0, r3, #0
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	b003      	add	sp, #12
 800b0da:	bd90      	pop	{r4, r7, pc}
 800b0dc:	44fa0000 	.word	0x44fa0000
 800b0e0:	435c0000 	.word	0x435c0000

0800b0e4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2180      	movs	r1, #128	@ 0x80
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2184      	movs	r1, #132	@ 0x84
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2188      	movs	r1, #136	@ 0x88
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	505a      	str	r2, [r3, r1]
}
 800b10a:	46c0      	nop			@ (mov r8, r8)
 800b10c:	46bd      	mov	sp, r7
 800b10e:	b004      	add	sp, #16
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2280      	movs	r2, #128	@ 0x80
 800b122:	589c      	ldr	r4, [r3, r2]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2284      	movs	r2, #132	@ 0x84
 800b128:	589b      	ldr	r3, [r3, r2]
 800b12a:	1c19      	adds	r1, r3, #0
 800b12c:	6838      	ldr	r0, [r7, #0]
 800b12e:	f7f6 f875 	bl	800121c <__aeabi_fsub>
 800b132:	1c03      	adds	r3, r0, #0
 800b134:	1c19      	adds	r1, r3, #0
 800b136:	1c20      	adds	r0, r4, #0
 800b138:	f7f5 ff32 	bl	8000fa0 <__aeabi_fmul>
 800b13c:	1c03      	adds	r3, r0, #0
 800b13e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b140:	4940      	ldr	r1, [pc, #256]	@ (800b244 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f7f5 f9f4 	bl	8000530 <__aeabi_fcmplt>
 800b148:	1e03      	subs	r3, r0, #0
 800b14a:	d001      	beq.n	800b150 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b14c:	4b3e      	ldr	r3, [pc, #248]	@ (800b248 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b14e:	e075      	b.n	800b23c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b150:	493e      	ldr	r1, [pc, #248]	@ (800b24c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b152:	68b8      	ldr	r0, [r7, #8]
 800b154:	f7f5 fa00 	bl	8000558 <__aeabi_fcmpgt>
 800b158:	1e03      	subs	r3, r0, #0
 800b15a:	d001      	beq.n	800b160 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e06d      	b.n	800b23c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b160:	2100      	movs	r1, #0
 800b162:	6838      	ldr	r0, [r7, #0]
 800b164:	f7f5 fa02 	bl	800056c <__aeabi_fcmpge>
 800b168:	1e03      	subs	r3, r0, #0
 800b16a:	d047      	beq.n	800b1fc <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2288      	movs	r2, #136	@ 0x88
 800b170:	589b      	ldr	r3, [r3, r2]
 800b172:	21fe      	movs	r1, #254	@ 0xfe
 800b174:	0589      	lsls	r1, r1, #22
 800b176:	1c18      	adds	r0, r3, #0
 800b178:	f7f5 f9d4 	bl	8000524 <__aeabi_fcmpeq>
 800b17c:	1e03      	subs	r3, r0, #0
 800b17e:	d00e      	beq.n	800b19e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	1c19      	adds	r1, r3, #0
 800b186:	20fe      	movs	r0, #254	@ 0xfe
 800b188:	0580      	lsls	r0, r0, #22
 800b18a:	f7f6 f847 	bl	800121c <__aeabi_fsub>
 800b18e:	1c03      	adds	r3, r0, #0
 800b190:	492f      	ldr	r1, [pc, #188]	@ (800b250 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b192:	1c18      	adds	r0, r3, #0
 800b194:	f7f5 ff04 	bl	8000fa0 <__aeabi_fmul>
 800b198:	1c03      	adds	r3, r0, #0
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	e012      	b.n	800b1c4 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	492c      	ldr	r1, [pc, #176]	@ (800b254 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b1a4:	1c18      	adds	r0, r3, #0
 800b1a6:	f7f5 fefb 	bl	8000fa0 <__aeabi_fmul>
 800b1aa:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b1ac:	1c19      	adds	r1, r3, #0
 800b1ae:	4826      	ldr	r0, [pc, #152]	@ (800b248 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b1b0:	f7f6 f834 	bl	800121c <__aeabi_fsub>
 800b1b4:	1c03      	adds	r3, r0, #0
 800b1b6:	2181      	movs	r1, #129	@ 0x81
 800b1b8:	05c9      	lsls	r1, r1, #23
 800b1ba:	1c18      	adds	r0, r3, #0
 800b1bc:	f7f5 fd0a 	bl	8000bd4 <__aeabi_fdiv>
 800b1c0:	1c03      	adds	r3, r0, #0
 800b1c2:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b1c4:	4920      	ldr	r1, [pc, #128]	@ (800b248 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7f5 fb7a 	bl	80008c0 <__aeabi_fadd>
 800b1cc:	1c03      	adds	r3, r0, #0
 800b1ce:	1c1c      	adds	r4, r3, #0
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	1c18      	adds	r0, r3, #0
 800b1d4:	f017 fe80 	bl	8022ed8 <expf>
 800b1d8:	1c03      	adds	r3, r0, #0
 800b1da:	21fe      	movs	r1, #254	@ 0xfe
 800b1dc:	0589      	lsls	r1, r1, #22
 800b1de:	1c18      	adds	r0, r3, #0
 800b1e0:	f7f5 fb6e 	bl	80008c0 <__aeabi_fadd>
 800b1e4:	1c03      	adds	r3, r0, #0
 800b1e6:	1c19      	adds	r1, r3, #0
 800b1e8:	1c20      	adds	r0, r4, #0
 800b1ea:	f7f5 fcf3 	bl	8000bd4 <__aeabi_fdiv>
 800b1ee:	1c03      	adds	r3, r0, #0
 800b1f0:	68f9      	ldr	r1, [r7, #12]
 800b1f2:	1c18      	adds	r0, r3, #0
 800b1f4:	f7f6 f812 	bl	800121c <__aeabi_fsub>
 800b1f8:	1c03      	adds	r3, r0, #0
 800b1fa:	e01f      	b.n	800b23c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2188      	movs	r1, #136	@ 0x88
 800b204:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b206:	1c19      	adds	r1, r3, #0
 800b208:	1c10      	adds	r0, r2, #0
 800b20a:	f7f5 fce3 	bl	8000bd4 <__aeabi_fdiv>
 800b20e:	1c03      	adds	r3, r0, #0
 800b210:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	1c18      	adds	r0, r3, #0
 800b216:	f017 fe5f 	bl	8022ed8 <expf>
 800b21a:	1c03      	adds	r3, r0, #0
 800b21c:	21fe      	movs	r1, #254	@ 0xfe
 800b21e:	0589      	lsls	r1, r1, #22
 800b220:	1c18      	adds	r0, r3, #0
 800b222:	f7f5 fb4d 	bl	80008c0 <__aeabi_fadd>
 800b226:	1c03      	adds	r3, r0, #0
 800b228:	1c19      	adds	r1, r3, #0
 800b22a:	4807      	ldr	r0, [pc, #28]	@ (800b248 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b22c:	f7f5 fcd2 	bl	8000bd4 <__aeabi_fdiv>
 800b230:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b232:	1c19      	adds	r1, r3, #0
 800b234:	1c20      	adds	r0, r4, #0
 800b236:	f7f5 feb3 	bl	8000fa0 <__aeabi_fmul>
 800b23a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b23c:	1c18      	adds	r0, r3, #0
 800b23e:	46bd      	mov	sp, r7
 800b240:	b005      	add	sp, #20
 800b242:	bd90      	pop	{r4, r7, pc}
 800b244:	c2480000 	.word	0xc2480000
 800b248:	43fa0000 	.word	0x43fa0000
 800b24c:	42480000 	.word	0x42480000
 800b250:	3f8041ab 	.word	0x3f8041ab
 800b254:	40a00000 	.word	0x40a00000

0800b258 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b258:	b590      	push	{r4, r7, lr}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	4913      	ldr	r1, [pc, #76]	@ (800b2b8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b26a:	1c18      	adds	r0, r3, #0
 800b26c:	f7f5 fb28 	bl	80008c0 <__aeabi_fadd>
 800b270:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b272:	1c19      	adds	r1, r3, #0
 800b274:	1c20      	adds	r0, r4, #0
 800b276:	f7f5 fcad 	bl	8000bd4 <__aeabi_fdiv>
 800b27a:	1c03      	adds	r3, r0, #0
 800b27c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	228c      	movs	r2, #140	@ 0x8c
 800b282:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	490b      	ldr	r1, [pc, #44]	@ (800b2bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b28e:	1c18      	adds	r0, r3, #0
 800b290:	f7f5 fb16 	bl	80008c0 <__aeabi_fadd>
 800b294:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b296:	1c19      	adds	r1, r3, #0
 800b298:	1c20      	adds	r0, r4, #0
 800b29a:	f7f5 fc9b 	bl	8000bd4 <__aeabi_fdiv>
 800b29e:	1c03      	adds	r3, r0, #0
 800b2a0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2290      	movs	r2, #144	@ 0x90
 800b2a6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2294      	movs	r2, #148	@ 0x94
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	5499      	strb	r1, [r3, r2]
}
 800b2b0:	46c0      	nop			@ (mov r8, r8)
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	b003      	add	sp, #12
 800b2b6:	bd90      	pop	{r4, r7, pc}
 800b2b8:	41a00000 	.word	0x41a00000
 800b2bc:	43fa0000 	.word	0x43fa0000

0800b2c0 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b2c0:	b590      	push	{r4, r7, lr}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2294      	movs	r2, #148	@ 0x94
 800b2ce:	5c9b      	ldrb	r3, [r3, r2]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	4053      	eors	r3, r2
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00f      	beq.n	800b2fa <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2198      	movs	r1, #152	@ 0x98
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	219c      	movs	r1, #156	@ 0x9c
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	21a0      	movs	r1, #160	@ 0xa0
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2294      	movs	r2, #148	@ 0x94
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	228c      	movs	r2, #140	@ 0x8c
 800b2fe:	589b      	ldr	r3, [r3, r2]
 800b300:	1c19      	adds	r1, r3, #0
 800b302:	20fe      	movs	r0, #254	@ 0xfe
 800b304:	0580      	lsls	r0, r0, #22
 800b306:	f7f5 ff89 	bl	800121c <__aeabi_fsub>
 800b30a:	1c03      	adds	r3, r0, #0
 800b30c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2298      	movs	r2, #152	@ 0x98
 800b312:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b314:	1c19      	adds	r1, r3, #0
 800b316:	f7f5 fe43 	bl	8000fa0 <__aeabi_fmul>
 800b31a:	1c03      	adds	r3, r0, #0
 800b31c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	228c      	movs	r2, #140	@ 0x8c
 800b322:	589b      	ldr	r3, [r3, r2]
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	1c18      	adds	r0, r3, #0
 800b328:	f7f5 fe3a 	bl	8000fa0 <__aeabi_fmul>
 800b32c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b32e:	1c19      	adds	r1, r3, #0
 800b330:	1c20      	adds	r0, r4, #0
 800b332:	f7f5 fac5 	bl	80008c0 <__aeabi_fadd>
 800b336:	1c03      	adds	r3, r0, #0
 800b338:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2298      	movs	r2, #152	@ 0x98
 800b33e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2290      	movs	r2, #144	@ 0x90
 800b344:	589b      	ldr	r3, [r3, r2]
 800b346:	1c19      	adds	r1, r3, #0
 800b348:	20fe      	movs	r0, #254	@ 0xfe
 800b34a:	0580      	lsls	r0, r0, #22
 800b34c:	f7f5 ff66 	bl	800121c <__aeabi_fsub>
 800b350:	1c03      	adds	r3, r0, #0
 800b352:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	229c      	movs	r2, #156	@ 0x9c
 800b358:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b35a:	1c19      	adds	r1, r3, #0
 800b35c:	f7f5 fe20 	bl	8000fa0 <__aeabi_fmul>
 800b360:	1c03      	adds	r3, r0, #0
 800b362:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2290      	movs	r2, #144	@ 0x90
 800b368:	589b      	ldr	r3, [r3, r2]
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	1c18      	adds	r0, r3, #0
 800b36e:	f7f5 fe17 	bl	8000fa0 <__aeabi_fmul>
 800b372:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b374:	1c19      	adds	r1, r3, #0
 800b376:	1c20      	adds	r0, r4, #0
 800b378:	f7f5 faa2 	bl	80008c0 <__aeabi_fadd>
 800b37c:	1c03      	adds	r3, r0, #0
 800b37e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	229c      	movs	r2, #156	@ 0x9c
 800b384:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2298      	movs	r2, #152	@ 0x98
 800b38a:	589a      	ldr	r2, [r3, r2]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	219c      	movs	r1, #156	@ 0x9c
 800b390:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b392:	1c19      	adds	r1, r3, #0
 800b394:	1c10      	adds	r0, r2, #0
 800b396:	f7f5 ff41 	bl	800121c <__aeabi_fsub>
 800b39a:	1c03      	adds	r3, r0, #0
 800b39c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b39e:	2100      	movs	r1, #0
 800b3a0:	6978      	ldr	r0, [r7, #20]
 800b3a2:	f7f5 f8c5 	bl	8000530 <__aeabi_fcmplt>
 800b3a6:	1e03      	subs	r3, r0, #0
 800b3a8:	d004      	beq.n	800b3b4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2280      	movs	r2, #128	@ 0x80
 800b3ae:	0612      	lsls	r2, r2, #24
 800b3b0:	4053      	eors	r3, r2
 800b3b2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b3b4:	4923      	ldr	r1, [pc, #140]	@ (800b444 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b3b6:	6978      	ldr	r0, [r7, #20]
 800b3b8:	f7f5 fdf2 	bl	8000fa0 <__aeabi_fmul>
 800b3bc:	1c03      	adds	r3, r0, #0
 800b3be:	1c18      	adds	r0, r3, #0
 800b3c0:	f017 fd8a 	bl	8022ed8 <expf>
 800b3c4:	1c03      	adds	r3, r0, #0
 800b3c6:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b3c8:	491f      	ldr	r1, [pc, #124]	@ (800b448 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b3ca:	6938      	ldr	r0, [r7, #16]
 800b3cc:	f7f5 fde8 	bl	8000fa0 <__aeabi_fmul>
 800b3d0:	1c03      	adds	r3, r0, #0
 800b3d2:	491e      	ldr	r1, [pc, #120]	@ (800b44c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b3d4:	1c18      	adds	r0, r3, #0
 800b3d6:	f7f5 fa73 	bl	80008c0 <__aeabi_fadd>
 800b3da:	1c03      	adds	r3, r0, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685c      	ldr	r4, [r3, #4]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	68f9      	ldr	r1, [r7, #12]
 800b3e8:	1c18      	adds	r0, r3, #0
 800b3ea:	f7f5 fa69 	bl	80008c0 <__aeabi_fadd>
 800b3ee:	1c03      	adds	r3, r0, #0
 800b3f0:	1c19      	adds	r1, r3, #0
 800b3f2:	1c20      	adds	r0, r4, #0
 800b3f4:	f7f5 fbee 	bl	8000bd4 <__aeabi_fdiv>
 800b3f8:	1c03      	adds	r3, r0, #0
 800b3fa:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	20fe      	movs	r0, #254	@ 0xfe
 800b400:	0580      	lsls	r0, r0, #22
 800b402:	f7f5 ff0b 	bl	800121c <__aeabi_fsub>
 800b406:	1c03      	adds	r3, r0, #0
 800b408:	1c18      	adds	r0, r3, #0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	22a0      	movs	r2, #160	@ 0xa0
 800b40e:	589b      	ldr	r3, [r3, r2]
 800b410:	1c19      	adds	r1, r3, #0
 800b412:	f7f5 fdc5 	bl	8000fa0 <__aeabi_fmul>
 800b416:	1c03      	adds	r3, r0, #0
 800b418:	1c1c      	adds	r4, r3, #0
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	68b8      	ldr	r0, [r7, #8]
 800b41e:	f7f5 fdbf 	bl	8000fa0 <__aeabi_fmul>
 800b422:	1c03      	adds	r3, r0, #0
 800b424:	1c19      	adds	r1, r3, #0
 800b426:	1c20      	adds	r0, r4, #0
 800b428:	f7f5 fa4a 	bl	80008c0 <__aeabi_fadd>
 800b42c:	1c03      	adds	r3, r0, #0
 800b42e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	22a0      	movs	r2, #160	@ 0xa0
 800b434:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	22a0      	movs	r2, #160	@ 0xa0
 800b43a:	589b      	ldr	r3, [r3, r2]
}
 800b43c:	1c18      	adds	r0, r3, #0
 800b43e:	46bd      	mov	sp, r7
 800b440:	b007      	add	sp, #28
 800b442:	bd90      	pop	{r4, r7, pc}
 800b444:	be4ccccd 	.word	0xbe4ccccd
 800b448:	43f00000 	.word	0x43f00000
 800b44c:	41a00000 	.word	0x41a00000

0800b450 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	000a      	movs	r2, r1
 800b45a:	1cbb      	adds	r3, r7, #2
 800b45c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b45e:	230d      	movs	r3, #13
 800b460:	18fb      	adds	r3, r7, r3
 800b462:	22ff      	movs	r2, #255	@ 0xff
 800b464:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b466:	230e      	movs	r3, #14
 800b468:	18fb      	adds	r3, r7, r3
 800b46a:	2200      	movs	r2, #0
 800b46c:	801a      	strh	r2, [r3, #0]
 800b46e:	e037      	b.n	800b4e0 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b470:	230e      	movs	r3, #14
 800b472:	18fb      	adds	r3, r7, r3
 800b474:	881b      	ldrh	r3, [r3, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	18d3      	adds	r3, r2, r3
 800b47a:	7819      	ldrb	r1, [r3, #0]
 800b47c:	220d      	movs	r2, #13
 800b47e:	18bb      	adds	r3, r7, r2
 800b480:	18ba      	adds	r2, r7, r2
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	404a      	eors	r2, r1
 800b486:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b488:	230c      	movs	r3, #12
 800b48a:	18fb      	adds	r3, r7, r3
 800b48c:	2208      	movs	r2, #8
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	e01b      	b.n	800b4ca <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b492:	210d      	movs	r1, #13
 800b494:	187b      	adds	r3, r7, r1
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	b25b      	sxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	da09      	bge.n	800b4b2 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b49e:	187b      	adds	r3, r7, r1
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	b25b      	sxtb	r3, r3
 800b4a6:	2231      	movs	r2, #49	@ 0x31
 800b4a8:	4053      	eors	r3, r2
 800b4aa:	b25a      	sxtb	r2, r3
 800b4ac:	187b      	adds	r3, r7, r1
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	e005      	b.n	800b4be <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b4b2:	230d      	movs	r3, #13
 800b4b4:	18fa      	adds	r2, r7, r3
 800b4b6:	18fb      	adds	r3, r7, r3
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	18db      	adds	r3, r3, r3
 800b4bc:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b4be:	220c      	movs	r2, #12
 800b4c0:	18bb      	adds	r3, r7, r2
 800b4c2:	18ba      	adds	r2, r7, r2
 800b4c4:	7812      	ldrb	r2, [r2, #0]
 800b4c6:	3a01      	subs	r2, #1
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	230c      	movs	r3, #12
 800b4cc:	18fb      	adds	r3, r7, r3
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1de      	bne.n	800b492 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b4d4:	220e      	movs	r2, #14
 800b4d6:	18bb      	adds	r3, r7, r2
 800b4d8:	18ba      	adds	r2, r7, r2
 800b4da:	8812      	ldrh	r2, [r2, #0]
 800b4dc:	3201      	adds	r2, #1
 800b4de:	801a      	strh	r2, [r3, #0]
 800b4e0:	230e      	movs	r3, #14
 800b4e2:	18fa      	adds	r2, r7, r3
 800b4e4:	1cbb      	adds	r3, r7, #2
 800b4e6:	8812      	ldrh	r2, [r2, #0]
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d3c0      	bcc.n	800b470 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b4ee:	230d      	movs	r3, #13
 800b4f0:	18fb      	adds	r3, r7, r3
 800b4f2:	781b      	ldrb	r3, [r3, #0]
}
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	b004      	add	sp, #16
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	0008      	movs	r0, r1
 800b506:	0011      	movs	r1, r2
 800b508:	1cbb      	adds	r3, r7, #2
 800b50a:	1c02      	adds	r2, r0, #0
 800b50c:	801a      	strh	r2, [r3, #0]
 800b50e:	1c7b      	adds	r3, r7, #1
 800b510:	1c0a      	adds	r2, r1, #0
 800b512:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b514:	1cbb      	adds	r3, r7, #2
 800b516:	881a      	ldrh	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	0011      	movs	r1, r2
 800b51c:	0018      	movs	r0, r3
 800b51e:	f7ff ff97 	bl	800b450 <sensirion_i2c_generate_crc>
 800b522:	0003      	movs	r3, r0
 800b524:	001a      	movs	r2, r3
 800b526:	1c7b      	adds	r3, r7, #1
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d001      	beq.n	800b532 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e000      	b.n	800b534 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b532:	2300      	movs	r3, #0
}
 800b534:	0018      	movs	r0, r3
 800b536:	46bd      	mov	sp, r7
 800b538:	b002      	add	sp, #8
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	0008      	movs	r0, r1
 800b546:	0011      	movs	r1, r2
 800b548:	1cbb      	adds	r3, r7, #2
 800b54a:	1c02      	adds	r2, r0, #0
 800b54c:	801a      	strh	r2, [r3, #0]
 800b54e:	003b      	movs	r3, r7
 800b550:	1c0a      	adds	r2, r1, #0
 800b552:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b554:	003b      	movs	r3, r7
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	0a1b      	lsrs	r3, r3, #8
 800b55a:	b299      	uxth	r1, r3
 800b55c:	1cbb      	adds	r3, r7, #2
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	1cba      	adds	r2, r7, #2
 800b562:	1c58      	adds	r0, r3, #1
 800b564:	8010      	strh	r0, [r2, #0]
 800b566:	001a      	movs	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	189b      	adds	r3, r3, r2
 800b56c:	b2ca      	uxtb	r2, r1
 800b56e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b570:	1cbb      	adds	r3, r7, #2
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	1cba      	adds	r2, r7, #2
 800b576:	1c59      	adds	r1, r3, #1
 800b578:	8011      	strh	r1, [r2, #0]
 800b57a:	001a      	movs	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	189b      	adds	r3, r3, r2
 800b580:	003a      	movs	r2, r7
 800b582:	8812      	ldrh	r2, [r2, #0]
 800b584:	b2d2      	uxtb	r2, r2
 800b586:	701a      	strb	r2, [r3, #0]
    return offset;
 800b588:	1cbb      	adds	r3, r7, #2
 800b58a:	881b      	ldrh	r3, [r3, #0]
}
 800b58c:	0018      	movs	r0, r3
 800b58e:	46bd      	mov	sp, r7
 800b590:	b002      	add	sp, #8
 800b592:	bd80      	pop	{r7, pc}

0800b594 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	0008      	movs	r0, r1
 800b59e:	0011      	movs	r1, r2
 800b5a0:	1cbb      	adds	r3, r7, #2
 800b5a2:	1c02      	adds	r2, r0, #0
 800b5a4:	801a      	strh	r2, [r3, #0]
 800b5a6:	003b      	movs	r3, r7
 800b5a8:	1c0a      	adds	r2, r1, #0
 800b5aa:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b5ac:	003b      	movs	r3, r7
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	0a1b      	lsrs	r3, r3, #8
 800b5b2:	b299      	uxth	r1, r3
 800b5b4:	1cbb      	adds	r3, r7, #2
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	1cba      	adds	r2, r7, #2
 800b5ba:	1c58      	adds	r0, r3, #1
 800b5bc:	8010      	strh	r0, [r2, #0]
 800b5be:	001a      	movs	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	189b      	adds	r3, r3, r2
 800b5c4:	b2ca      	uxtb	r2, r1
 800b5c6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b5c8:	1cbb      	adds	r3, r7, #2
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	1cba      	adds	r2, r7, #2
 800b5ce:	1c59      	adds	r1, r3, #1
 800b5d0:	8011      	strh	r1, [r2, #0]
 800b5d2:	001a      	movs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	189b      	adds	r3, r3, r2
 800b5d8:	003a      	movs	r2, r7
 800b5da:	8812      	ldrh	r2, [r2, #0]
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b5e0:	1cbb      	adds	r3, r7, #2
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	3b02      	subs	r3, #2
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b5ea:	1cbb      	adds	r3, r7, #2
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	18d4      	adds	r4, r2, r3
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	f7ff ff2c 	bl	800b450 <sensirion_i2c_generate_crc>
 800b5f8:	0003      	movs	r3, r0
 800b5fa:	7023      	strb	r3, [r4, #0]
    offset++;
 800b5fc:	1cbb      	adds	r3, r7, #2
 800b5fe:	881a      	ldrh	r2, [r3, #0]
 800b600:	1cbb      	adds	r3, r7, #2
 800b602:	3201      	adds	r2, #1
 800b604:	801a      	strh	r2, [r3, #0]

    return offset;
 800b606:	1cbb      	adds	r3, r7, #2
 800b608:	881b      	ldrh	r3, [r3, #0]
}
 800b60a:	0018      	movs	r0, r3
 800b60c:	46bd      	mov	sp, r7
 800b60e:	b003      	add	sp, #12
 800b610:	bd90      	pop	{r4, r7, pc}

0800b612 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b612:	b580      	push	{r7, lr}
 800b614:	b082      	sub	sp, #8
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	0008      	movs	r0, r1
 800b61c:	0011      	movs	r1, r2
 800b61e:	1cbb      	adds	r3, r7, #2
 800b620:	1c02      	adds	r2, r0, #0
 800b622:	801a      	strh	r2, [r3, #0]
 800b624:	003b      	movs	r3, r7
 800b626:	1c0a      	adds	r2, r1, #0
 800b628:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b62a:	003b      	movs	r3, r7
 800b62c:	881a      	ldrh	r2, [r3, #0]
 800b62e:	1cbb      	adds	r3, r7, #2
 800b630:	8819      	ldrh	r1, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	0018      	movs	r0, r3
 800b636:	f7ff ffad 	bl	800b594 <sensirion_i2c_add_uint16_t_to_buffer>
 800b63a:	0003      	movs	r3, r0
}
 800b63c:	0018      	movs	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	b002      	add	sp, #8
 800b642:	bd80      	pop	{r7, pc}

0800b644 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6039      	str	r1, [r7, #0]
 800b64c:	0011      	movs	r1, r2
 800b64e:	1dfb      	adds	r3, r7, #7
 800b650:	1c02      	adds	r2, r0, #0
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	1d3b      	adds	r3, r7, #4
 800b656:	1c0a      	adds	r2, r1, #0
 800b658:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b65a:	1d3b      	adds	r3, r7, #4
 800b65c:	881a      	ldrh	r2, [r3, #0]
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	1dfb      	adds	r3, r7, #7
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	0018      	movs	r0, r3
 800b666:	f7fe f9d5 	bl	8009a14 <sensirion_i2c_hal_write>
 800b66a:	0003      	movs	r3, r0
}
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	b002      	add	sp, #8
 800b672:	bd80      	pop	{r7, pc}

0800b674 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b674:	b5b0      	push	{r4, r5, r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6039      	str	r1, [r7, #0]
 800b67c:	0011      	movs	r1, r2
 800b67e:	1dfb      	adds	r3, r7, #7
 800b680:	1c02      	adds	r2, r0, #0
 800b682:	701a      	strb	r2, [r3, #0]
 800b684:	1d3b      	adds	r3, r7, #4
 800b686:	1c0a      	adds	r2, r1, #0
 800b688:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b68a:	1d3b      	adds	r3, r7, #4
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	085b      	lsrs	r3, r3, #1
 800b690:	b29b      	uxth	r3, r3
 800b692:	220a      	movs	r2, #10
 800b694:	18ba      	adds	r2, r7, r2
 800b696:	1c19      	adds	r1, r3, #0
 800b698:	1c0b      	adds	r3, r1, #0
 800b69a:	18db      	adds	r3, r3, r3
 800b69c:	185b      	adds	r3, r3, r1
 800b69e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b6a0:	1d3b      	adds	r3, r7, #4
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b6ae:	2304      	movs	r3, #4
 800b6b0:	e06b      	b.n	800b78a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b6b2:	230a      	movs	r3, #10
 800b6b4:	18fb      	adds	r3, r7, r3
 800b6b6:	881a      	ldrh	r2, [r3, #0]
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	1dfb      	adds	r3, r7, #7
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	0018      	movs	r0, r3
 800b6c0:	f7fe f988 	bl	80099d4 <sensirion_i2c_hal_read>
 800b6c4:	0003      	movs	r3, r0
 800b6c6:	001a      	movs	r2, r3
 800b6c8:	2108      	movs	r1, #8
 800b6ca:	187b      	adds	r3, r7, r1
 800b6cc:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b6ce:	000a      	movs	r2, r1
 800b6d0:	18bb      	adds	r3, r7, r2
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	5e5b      	ldrsh	r3, [r3, r1]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b6da:	18bb      	adds	r3, r7, r2
 800b6dc:	2200      	movs	r2, #0
 800b6de:	5e9b      	ldrsh	r3, [r3, r2]
 800b6e0:	e053      	b.n	800b78a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b6e2:	230e      	movs	r3, #14
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	801a      	strh	r2, [r3, #0]
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	18fb      	adds	r3, r7, r3
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	801a      	strh	r2, [r3, #0]
 800b6f2:	e041      	b.n	800b778 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b6f4:	210e      	movs	r1, #14
 800b6f6:	187b      	adds	r3, r7, r1
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b6fe:	187b      	adds	r3, r7, r1
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	3302      	adds	r3, #2
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	001a      	movs	r2, r3
 800b70c:	2102      	movs	r1, #2
 800b70e:	f7ff fef5 	bl	800b4fc <sensirion_i2c_check_crc>
 800b712:	0003      	movs	r3, r0
 800b714:	001a      	movs	r2, r3
 800b716:	2108      	movs	r1, #8
 800b718:	187b      	adds	r3, r7, r1
 800b71a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b71c:	000a      	movs	r2, r1
 800b71e:	18bb      	adds	r3, r7, r2
 800b720:	2100      	movs	r1, #0
 800b722:	5e5b      	ldrsh	r3, [r3, r1]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d003      	beq.n	800b730 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b728:	18bb      	adds	r3, r7, r2
 800b72a:	2200      	movs	r2, #0
 800b72c:	5e9b      	ldrsh	r3, [r3, r2]
 800b72e:	e02c      	b.n	800b78a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b730:	240e      	movs	r4, #14
 800b732:	193b      	adds	r3, r7, r4
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	18d2      	adds	r2, r2, r3
 800b73a:	250c      	movs	r5, #12
 800b73c:	197b      	adds	r3, r7, r5
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	1979      	adds	r1, r7, r5
 800b742:	1c58      	adds	r0, r3, #1
 800b744:	8008      	strh	r0, [r1, #0]
 800b746:	0019      	movs	r1, r3
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	185b      	adds	r3, r3, r1
 800b74c:	7812      	ldrb	r2, [r2, #0]
 800b74e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b750:	193b      	adds	r3, r7, r4
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	3301      	adds	r3, #1
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	18d2      	adds	r2, r2, r3
 800b75a:	197b      	adds	r3, r7, r5
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	1979      	adds	r1, r7, r5
 800b760:	1c58      	adds	r0, r3, #1
 800b762:	8008      	strh	r0, [r1, #0]
 800b764:	0019      	movs	r1, r3
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	185b      	adds	r3, r3, r1
 800b76a:	7812      	ldrb	r2, [r2, #0]
 800b76c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b76e:	193b      	adds	r3, r7, r4
 800b770:	193a      	adds	r2, r7, r4
 800b772:	8812      	ldrh	r2, [r2, #0]
 800b774:	3203      	adds	r2, #3
 800b776:	801a      	strh	r2, [r3, #0]
 800b778:	230e      	movs	r3, #14
 800b77a:	18fa      	adds	r2, r7, r3
 800b77c:	230a      	movs	r3, #10
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	8812      	ldrh	r2, [r2, #0]
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d3b5      	bcc.n	800b6f4 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	0018      	movs	r0, r3
 800b78c:	46bd      	mov	sp, r7
 800b78e:	b004      	add	sp, #16
 800b790:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b794 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b794:	b590      	push	{r4, r7, lr}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6039      	str	r1, [r7, #0]
 800b79c:	0011      	movs	r1, r2
 800b79e:	1dfb      	adds	r3, r7, #7
 800b7a0:	1c02      	adds	r2, r0, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
 800b7a4:	1dbb      	adds	r3, r7, #6
 800b7a6:	1c0a      	adds	r2, r1, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b7aa:	4b08      	ldr	r3, [pc, #32]	@ (800b7cc <ReadRegister+0x38>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d008      	beq.n	800b7c4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b7b2:	4b06      	ldr	r3, [pc, #24]	@ (800b7cc <ReadRegister+0x38>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	1dba      	adds	r2, r7, #6
 800b7b8:	7814      	ldrb	r4, [r2, #0]
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	1dfa      	adds	r2, r7, #7
 800b7be:	7810      	ldrb	r0, [r2, #0]
 800b7c0:	0022      	movs	r2, r4
 800b7c2:	4798      	blx	r3
  }
}
 800b7c4:	46c0      	nop			@ (mov r8, r8)
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	b003      	add	sp, #12
 800b7ca:	bd90      	pop	{r4, r7, pc}
 800b7cc:	200010a0 	.word	0x200010a0

0800b7d0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6039      	str	r1, [r7, #0]
 800b7d8:	0011      	movs	r1, r2
 800b7da:	1dfb      	adds	r3, r7, #7
 800b7dc:	1c02      	adds	r2, r0, #0
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	1dbb      	adds	r3, r7, #6
 800b7e2:	1c0a      	adds	r2, r1, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b7e6:	4b08      	ldr	r3, [pc, #32]	@ (800b808 <WriteRegister+0x38>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d008      	beq.n	800b800 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b7ee:	4b06      	ldr	r3, [pc, #24]	@ (800b808 <WriteRegister+0x38>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	1dba      	adds	r2, r7, #6
 800b7f4:	7814      	ldrb	r4, [r2, #0]
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	1dfa      	adds	r2, r7, #7
 800b7fa:	7810      	ldrb	r0, [r2, #0]
 800b7fc:	0022      	movs	r2, r4
 800b7fe:	4798      	blx	r3
  }
}
 800b800:	46c0      	nop			@ (mov r8, r8)
 800b802:	46bd      	mov	sp, r7
 800b804:	b003      	add	sp, #12
 800b806:	bd90      	pop	{r4, r7, pc}
 800b808:	200010a4 	.word	0x200010a4

0800b80c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b814:	f003 fb66 	bl	800eee4 <HAL_GetTick>
 800b818:	0002      	movs	r2, r0
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	18d2      	adds	r2, r2, r3
 800b81e:	4b03      	ldr	r3, [pc, #12]	@ (800b82c <setSGP40TimeStamp+0x20>)
 800b820:	601a      	str	r2, [r3, #0]
}
 800b822:	46c0      	nop			@ (mov r8, r8)
 800b824:	46bd      	mov	sp, r7
 800b826:	b002      	add	sp, #8
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	46c0      	nop			@ (mov r8, r8)
 800b82c:	200010b4 	.word	0x200010b4

0800b830 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b834:	4b02      	ldr	r3, [pc, #8]	@ (800b840 <ResetSGP40samplecounter+0x10>)
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]
}
 800b83a:	46c0      	nop			@ (mov r8, r8)
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	200010b2 	.word	0x200010b2

0800b844 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b84e:	4b07      	ldr	r3, [pc, #28]	@ (800b86c <SGP_Init+0x28>)
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b854:	4b06      	ldr	r3, [pc, #24]	@ (800b870 <SGP_Init+0x2c>)
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b85a:	4b06      	ldr	r3, [pc, #24]	@ (800b874 <SGP_Init+0x30>)
 800b85c:	2100      	movs	r1, #0
 800b85e:	0018      	movs	r0, r3
 800b860:	f7fe ff70 	bl	800a744 <GasIndexAlgorithm_init>
}
 800b864:	46c0      	nop			@ (mov r8, r8)
 800b866:	46bd      	mov	sp, r7
 800b868:	b002      	add	sp, #8
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	200010a0 	.word	0x200010a0
 800b870:	200010a4 	.word	0x200010a4
 800b874:	200010bc 	.word	0x200010bc

0800b878 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b87c:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b884:	4b06      	ldr	r3, [pc, #24]	@ (800b8a0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b886:	22fe      	movs	r2, #254	@ 0xfe
 800b888:	0592      	lsls	r2, r2, #22
 800b88a:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b88c:	e002      	b.n	800b894 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b88e:	4b04      	ldr	r3, [pc, #16]	@ (800b8a0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b890:	4a04      	ldr	r2, [pc, #16]	@ (800b8a4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b892:	605a      	str	r2, [r3, #4]
}
 800b894:	46c0      	nop			@ (mov r8, r8)
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	46c0      	nop			@ (mov r8, r8)
 800b89c:	20002009 	.word	0x20002009
 800b8a0:	200010bc 	.word	0x200010bc
 800b8a4:	44610000 	.word	0x44610000

0800b8a8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b8ac:	4b13      	ldr	r3, [pc, #76]	@ (800b8fc <SGP_StartMeasurement+0x54>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00d      	beq.n	800b8d0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8b4:	4b12      	ldr	r3, [pc, #72]	@ (800b900 <SGP_StartMeasurement+0x58>)
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	0019      	movs	r1, r3
 800b8ba:	2059      	movs	r0, #89	@ 0x59
 800b8bc:	f7ff ff88 	bl	800b7d0 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b8c0:	f003 fb10 	bl	800eee4 <HAL_GetTick>
 800b8c4:	0003      	movs	r3, r0
 800b8c6:	331e      	adds	r3, #30
 800b8c8:	001a      	movs	r2, r3
 800b8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b904 <SGP_StartMeasurement+0x5c>)
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	e00c      	b.n	800b8ea <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b908 <SGP_StartMeasurement+0x60>)
 800b8d2:	2208      	movs	r2, #8
 800b8d4:	0019      	movs	r1, r3
 800b8d6:	2059      	movs	r0, #89	@ 0x59
 800b8d8:	f7ff ff7a 	bl	800b7d0 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b8dc:	f003 fb02 	bl	800eee4 <HAL_GetTick>
 800b8e0:	0003      	movs	r3, r0
 800b8e2:	33aa      	adds	r3, #170	@ 0xaa
 800b8e4:	001a      	movs	r2, r3
 800b8e6:	4b09      	ldr	r3, [pc, #36]	@ (800b90c <SGP_StartMeasurement+0x64>)
 800b8e8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b8ea:	4b09      	ldr	r3, [pc, #36]	@ (800b910 <SGP_StartMeasurement+0x68>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b8f0:	4b08      	ldr	r3, [pc, #32]	@ (800b914 <SGP_StartMeasurement+0x6c>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	701a      	strb	r2, [r3, #0]
}
 800b8f6:	46c0      	nop			@ (mov r8, r8)
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20001164 	.word	0x20001164
 800b900:	200000a0 	.word	0x200000a0
 800b904:	200000b4 	.word	0x200000b4
 800b908:	20000098 	.word	0x20000098
 800b90c:	200000ac 	.word	0x200000ac
 800b910:	200010b8 	.word	0x200010b8
 800b914:	200010b9 	.word	0x200010b9

0800b918 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b91c:	4b04      	ldr	r3, [pc, #16]	@ (800b930 <SGP_HeatedUp+0x18>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	0018      	movs	r0, r3
 800b922:	f002 fe45 	bl	800e5b0 <TimestampIsReached>
 800b926:	0003      	movs	r3, r0
}
 800b928:	0018      	movs	r0, r3
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	46c0      	nop			@ (mov r8, r8)
 800b930:	200000ac 	.word	0x200000ac

0800b934 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b938:	4b04      	ldr	r3, [pc, #16]	@ (800b94c <SGP_MeasurementReady+0x18>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	0018      	movs	r0, r3
 800b93e:	f002 fe37 	bl	800e5b0 <TimestampIsReached>
 800b942:	0003      	movs	r3, r0
}
 800b944:	0018      	movs	r0, r3
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	200000b4 	.word	0x200000b4

0800b950 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b950:	b580      	push	{r7, lr}
 800b952:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b954:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <SGP_MeasurementDone+0x18>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	0018      	movs	r0, r3
 800b95a:	f002 fe29 	bl	800e5b0 <TimestampIsReached>
 800b95e:	0003      	movs	r3, r0
}
 800b960:	0018      	movs	r0, r3
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	200000b0 	.word	0x200000b0

0800b96c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b970:	4b04      	ldr	r3, [pc, #16]	@ (800b984 <SGP_TurnHeaterOff+0x18>)
 800b972:	2202      	movs	r2, #2
 800b974:	0019      	movs	r1, r3
 800b976:	2059      	movs	r0, #89	@ 0x59
 800b978:	f7ff ff2a 	bl	800b7d0 <WriteRegister>
}
 800b97c:	46c0      	nop			@ (mov r8, r8)
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	46c0      	nop			@ (mov r8, r8)
 800b984:	20000090 	.word	0x20000090

0800b988 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b988:	b590      	push	{r4, r7, lr}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af02      	add	r7, sp, #8
 800b98e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b990:	f7ff ffc2 	bl	800b918 <SGP_HeatedUp>
 800b994:	1e03      	subs	r3, r0, #0
 800b996:	d032      	beq.n	800b9fe <SGP_GetMeasurementValues+0x76>
 800b998:	4b7f      	ldr	r3, [pc, #508]	@ (800bb98 <SGP_GetMeasurementValues+0x210>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2201      	movs	r2, #1
 800b99e:	4053      	eors	r3, r2
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d02b      	beq.n	800b9fe <SGP_GetMeasurementValues+0x76>
 800b9a6:	4b7d      	ldr	r3, [pc, #500]	@ (800bb9c <SGP_GetMeasurementValues+0x214>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	4053      	eors	r3, r2
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d024      	beq.n	800b9fe <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800b9b4:	4b78      	ldr	r3, [pc, #480]	@ (800bb98 <SGP_GetMeasurementValues+0x210>)
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b9ba:	4b79      	ldr	r3, [pc, #484]	@ (800bba0 <SGP_GetMeasurementValues+0x218>)
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00d      	beq.n	800b9de <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b9c2:	4b78      	ldr	r3, [pc, #480]	@ (800bba4 <SGP_GetMeasurementValues+0x21c>)
 800b9c4:	2208      	movs	r2, #8
 800b9c6:	0019      	movs	r1, r3
 800b9c8:	2059      	movs	r0, #89	@ 0x59
 800b9ca:	f7ff ff01 	bl	800b7d0 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b9ce:	f003 fa89 	bl	800eee4 <HAL_GetTick>
 800b9d2:	0003      	movs	r3, r0
 800b9d4:	331e      	adds	r3, #30
 800b9d6:	001a      	movs	r2, r3
 800b9d8:	4b73      	ldr	r3, [pc, #460]	@ (800bba8 <SGP_GetMeasurementValues+0x220>)
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	e00c      	b.n	800b9f8 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b9de:	4b73      	ldr	r3, [pc, #460]	@ (800bbac <SGP_GetMeasurementValues+0x224>)
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	0019      	movs	r1, r3
 800b9e4:	2059      	movs	r0, #89	@ 0x59
 800b9e6:	f7ff fef3 	bl	800b7d0 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b9ea:	f003 fa7b 	bl	800eee4 <HAL_GetTick>
 800b9ee:	0003      	movs	r3, r0
 800b9f0:	331e      	adds	r3, #30
 800b9f2:	001a      	movs	r2, r3
 800b9f4:	4b6c      	ldr	r3, [pc, #432]	@ (800bba8 <SGP_GetMeasurementValues+0x220>)
 800b9f6:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b9f8:	4b68      	ldr	r3, [pc, #416]	@ (800bb9c <SGP_GetMeasurementValues+0x214>)
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b9fe:	4b66      	ldr	r3, [pc, #408]	@ (800bb98 <SGP_GetMeasurementValues+0x210>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d100      	bne.n	800ba08 <SGP_GetMeasurementValues+0x80>
 800ba06:	e0ab      	b.n	800bb60 <SGP_GetMeasurementValues+0x1d8>
 800ba08:	f7ff ff94 	bl	800b934 <SGP_MeasurementReady>
 800ba0c:	1e03      	subs	r3, r0, #0
 800ba0e:	d100      	bne.n	800ba12 <SGP_GetMeasurementValues+0x8a>
 800ba10:	e0a6      	b.n	800bb60 <SGP_GetMeasurementValues+0x1d8>
 800ba12:	4b67      	ldr	r3, [pc, #412]	@ (800bbb0 <SGP_GetMeasurementValues+0x228>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2201      	movs	r2, #1
 800ba18:	4053      	eors	r3, r2
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d100      	bne.n	800ba22 <SGP_GetMeasurementValues+0x9a>
 800ba20:	e09e      	b.n	800bb60 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800ba22:	4b63      	ldr	r3, [pc, #396]	@ (800bbb0 <SGP_GetMeasurementValues+0x228>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800ba28:	4b62      	ldr	r3, [pc, #392]	@ (800bbb4 <SGP_GetMeasurementValues+0x22c>)
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	0019      	movs	r1, r3
 800ba2e:	2059      	movs	r0, #89	@ 0x59
 800ba30:	f7ff feb0 	bl	800b794 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800ba34:	4b5f      	ldr	r3, [pc, #380]	@ (800bbb4 <SGP_GetMeasurementValues+0x22c>)
 800ba36:	2203      	movs	r2, #3
 800ba38:	2103      	movs	r1, #3
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f000 f918 	bl	800bc70 <CheckCRC>
 800ba40:	0003      	movs	r3, r0
 800ba42:	001a      	movs	r2, r3
 800ba44:	2301      	movs	r3, #1
 800ba46:	4053      	eors	r3, r2
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d02a      	beq.n	800baa4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800ba4e:	4a5a      	ldr	r2, [pc, #360]	@ (800bbb8 <SGP_GetMeasurementValues+0x230>)
 800ba50:	4b5a      	ldr	r3, [pc, #360]	@ (800bbbc <SGP_GetMeasurementValues+0x234>)
 800ba52:	0019      	movs	r1, r3
 800ba54:	2001      	movs	r0, #1
 800ba56:	f002 fe01 	bl	800e65c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ba5a:	4a59      	ldr	r2, [pc, #356]	@ (800bbc0 <SGP_GetMeasurementValues+0x238>)
 800ba5c:	4b59      	ldr	r3, [pc, #356]	@ (800bbc4 <SGP_GetMeasurementValues+0x23c>)
 800ba5e:	0019      	movs	r1, r3
 800ba60:	2002      	movs	r0, #2
 800ba62:	f002 fdfb 	bl	800e65c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ba66:	230f      	movs	r3, #15
 800ba68:	18fb      	adds	r3, r7, r3
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	e012      	b.n	800ba96 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ba70:	240f      	movs	r4, #15
 800ba72:	193b      	adds	r3, r7, r4
 800ba74:	7818      	ldrb	r0, [r3, #0]
 800ba76:	193b      	adds	r3, r7, r4
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	4a4e      	ldr	r2, [pc, #312]	@ (800bbb4 <SGP_GetMeasurementValues+0x22c>)
 800ba7c:	5cd3      	ldrb	r3, [r2, r3]
 800ba7e:	4a52      	ldr	r2, [pc, #328]	@ (800bbc8 <SGP_GetMeasurementValues+0x240>)
 800ba80:	4952      	ldr	r1, [pc, #328]	@ (800bbcc <SGP_GetMeasurementValues+0x244>)
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	0003      	movs	r3, r0
 800ba86:	2003      	movs	r0, #3
 800ba88:	f002 fde8 	bl	800e65c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ba8c:	193b      	adds	r3, r7, r4
 800ba8e:	781a      	ldrb	r2, [r3, #0]
 800ba90:	193b      	adds	r3, r7, r4
 800ba92:	3201      	adds	r2, #1
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	230f      	movs	r3, #15
 800ba98:	18fb      	adds	r3, r7, r3
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d9e7      	bls.n	800ba70 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800baa0:	2300      	movs	r3, #0
 800baa2:	e075      	b.n	800bb90 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800baa4:	f003 fa1e 	bl	800eee4 <HAL_GetTick>
 800baa8:	0003      	movs	r3, r0
 800baaa:	22fa      	movs	r2, #250	@ 0xfa
 800baac:	0092      	lsls	r2, r2, #2
 800baae:	189a      	adds	r2, r3, r2
 800bab0:	4b47      	ldr	r3, [pc, #284]	@ (800bbd0 <SGP_GetMeasurementValues+0x248>)
 800bab2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800bab4:	f7ff ff5a 	bl	800b96c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800bab8:	4b46      	ldr	r3, [pc, #280]	@ (800bbd4 <SGP_GetMeasurementValues+0x24c>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	4b44      	ldr	r3, [pc, #272]	@ (800bbd4 <SGP_GetMeasurementValues+0x24c>)
 800bac2:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800bac4:	4b43      	ldr	r3, [pc, #268]	@ (800bbd4 <SGP_GetMeasurementValues+0x24c>)
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	4b43      	ldr	r3, [pc, #268]	@ (800bbd8 <SGP_GetMeasurementValues+0x250>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d347      	bcc.n	800bb60 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800bad0:	4b38      	ldr	r3, [pc, #224]	@ (800bbb4 <SGP_GetMeasurementValues+0x22c>)
 800bad2:	785b      	ldrb	r3, [r3, #1]
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	b21a      	sxth	r2, r3
 800bad8:	4b36      	ldr	r3, [pc, #216]	@ (800bbb4 <SGP_GetMeasurementValues+0x22c>)
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	b21b      	sxth	r3, r3
 800bade:	4313      	orrs	r3, r2
 800bae0:	b21a      	sxth	r2, r3
 800bae2:	240c      	movs	r4, #12
 800bae4:	193b      	adds	r3, r7, r4
 800bae6:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800baec:	193b      	adds	r3, r7, r4
 800baee:	8819      	ldrh	r1, [r3, #0]
 800baf0:	2308      	movs	r3, #8
 800baf2:	18fa      	adds	r2, r7, r3
 800baf4:	4b39      	ldr	r3, [pc, #228]	@ (800bbdc <SGP_GetMeasurementValues+0x254>)
 800baf6:	0018      	movs	r0, r3
 800baf8:	f7fe fe88 	bl	800a80c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800bb02:	4b37      	ldr	r3, [pc, #220]	@ (800bbe0 <SGP_GetMeasurementValues+0x258>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	3301      	adds	r3, #1
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	4b35      	ldr	r3, [pc, #212]	@ (800bbe0 <SGP_GetMeasurementValues+0x258>)
 800bb0c:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800bb0e:	4b34      	ldr	r3, [pc, #208]	@ (800bbe0 <SGP_GetMeasurementValues+0x258>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d10d      	bne.n	800bb32 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800bb16:	193b      	adds	r3, r7, r4
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	4a32      	ldr	r2, [pc, #200]	@ (800bbe4 <SGP_GetMeasurementValues+0x25c>)
 800bb1c:	492b      	ldr	r1, [pc, #172]	@ (800bbcc <SGP_GetMeasurementValues+0x244>)
 800bb1e:	2003      	movs	r0, #3
 800bb20:	f002 fd9c 	bl	800e65c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	4a30      	ldr	r2, [pc, #192]	@ (800bbe8 <SGP_GetMeasurementValues+0x260>)
 800bb28:	4928      	ldr	r1, [pc, #160]	@ (800bbcc <SGP_GetMeasurementValues+0x244>)
 800bb2a:	2003      	movs	r0, #3
 800bb2c:	f002 fd96 	bl	800e65c <CreateLine>
 800bb30:	e006      	b.n	800bb40 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800bb32:	4b2b      	ldr	r3, [pc, #172]	@ (800bbe0 <SGP_GetMeasurementValues+0x258>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b0b      	cmp	r3, #11
 800bb38:	d102      	bne.n	800bb40 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800bb3a:	4b29      	ldr	r3, [pc, #164]	@ (800bbe0 <SGP_GetMeasurementValues+0x258>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	0018      	movs	r0, r3
 800bb46:	f001 fd35 	bl	800d5b4 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800bb4a:	4b22      	ldr	r3, [pc, #136]	@ (800bbd4 <SGP_GetMeasurementValues+0x24c>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bb50:	4b13      	ldr	r3, [pc, #76]	@ (800bba0 <SGP_GetMeasurementValues+0x218>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb56:	4b11      	ldr	r3, [pc, #68]	@ (800bb9c <SGP_GetMeasurementValues+0x214>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
      return true;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e017      	b.n	800bb90 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bb60:	f7ff fef6 	bl	800b950 <SGP_MeasurementDone>
 800bb64:	1e03      	subs	r3, r0, #0
 800bb66:	d012      	beq.n	800bb8e <SGP_GetMeasurementValues+0x206>
 800bb68:	4b0b      	ldr	r3, [pc, #44]	@ (800bb98 <SGP_GetMeasurementValues+0x210>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00e      	beq.n	800bb8e <SGP_GetMeasurementValues+0x206>
 800bb70:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb0 <SGP_GetMeasurementValues+0x228>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00a      	beq.n	800bb8e <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bb78:	4a1c      	ldr	r2, [pc, #112]	@ (800bbec <SGP_GetMeasurementValues+0x264>)
 800bb7a:	4b14      	ldr	r3, [pc, #80]	@ (800bbcc <SGP_GetMeasurementValues+0x244>)
 800bb7c:	0019      	movs	r1, r3
 800bb7e:	2003      	movs	r0, #3
 800bb80:	f002 fd6c 	bl	800e65c <CreateLine>
    SGP_StartMeasurement();
 800bb84:	f7ff fe90 	bl	800b8a8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bb88:	4b04      	ldr	r3, [pc, #16]	@ (800bb9c <SGP_GetMeasurementValues+0x214>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	0018      	movs	r0, r3
 800bb92:	46bd      	mov	sp, r7
 800bb94:	b005      	add	sp, #20
 800bb96:	bd90      	pop	{r4, r7, pc}
 800bb98:	200010b8 	.word	0x200010b8
 800bb9c:	20001165 	.word	0x20001165
 800bba0:	20001164 	.word	0x20001164
 800bba4:	200000a0 	.word	0x200000a0
 800bba8:	200000b4 	.word	0x200000b4
 800bbac:	20000098 	.word	0x20000098
 800bbb0:	200010b9 	.word	0x200010b9
 800bbb4:	200010a8 	.word	0x200010a8
 800bbb8:	08024e30 	.word	0x08024e30
 800bbbc:	08024e58 	.word	0x08024e58
 800bbc0:	08024e5c 	.word	0x08024e5c
 800bbc4:	08024e7c 	.word	0x08024e7c
 800bbc8:	08024e80 	.word	0x08024e80
 800bbcc:	08024ea0 	.word	0x08024ea0
 800bbd0:	200000b0 	.word	0x200000b0
 800bbd4:	200010b1 	.word	0x200010b1
 800bbd8:	200000aa 	.word	0x200000aa
 800bbdc:	200010bc 	.word	0x200010bc
 800bbe0:	200010b2 	.word	0x200010b2
 800bbe4:	08024ea4 	.word	0x08024ea4
 800bbe8:	08024ec0 	.word	0x08024ec0
 800bbec:	08024edc 	.word	0x08024edc

0800bbf0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bbf6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc60 <SGP_DeviceConnected+0x70>)
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	0019      	movs	r1, r3
 800bbfc:	2059      	movs	r0, #89	@ 0x59
 800bbfe:	f7ff fde7 	bl	800b7d0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc02:	2001      	movs	r0, #1
 800bc04:	f003 f978 	bl	800eef8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc08:	4b16      	ldr	r3, [pc, #88]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc0a:	2209      	movs	r2, #9
 800bc0c:	0019      	movs	r1, r3
 800bc0e:	2059      	movs	r0, #89	@ 0x59
 800bc10:	f7ff fdc0 	bl	800b794 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc14:	1dfb      	adds	r3, r7, #7
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	e011      	b.n	800bc40 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc1c:	1dfb      	adds	r3, r7, #7
 800bc1e:	7818      	ldrb	r0, [r3, #0]
 800bc20:	1dfb      	adds	r3, r7, #7
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4a0f      	ldr	r2, [pc, #60]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc26:	5cd3      	ldrb	r3, [r2, r3]
 800bc28:	4a0f      	ldr	r2, [pc, #60]	@ (800bc68 <SGP_DeviceConnected+0x78>)
 800bc2a:	4910      	ldr	r1, [pc, #64]	@ (800bc6c <SGP_DeviceConnected+0x7c>)
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	0003      	movs	r3, r0
 800bc30:	2002      	movs	r0, #2
 800bc32:	f002 fd13 	bl	800e65c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc36:	1dfb      	adds	r3, r7, #7
 800bc38:	781a      	ldrb	r2, [r3, #0]
 800bc3a:	1dfb      	adds	r3, r7, #7
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	1dfb      	adds	r3, r7, #7
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d9e9      	bls.n	800bc1c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc48:	4b06      	ldr	r3, [pc, #24]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	2109      	movs	r1, #9
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f000 f80e 	bl	800bc70 <CheckCRC>
 800bc54:	0003      	movs	r3, r0
}
 800bc56:	0018      	movs	r0, r3
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	b002      	add	sp, #8
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	46c0      	nop			@ (mov r8, r8)
 800bc60:	20000094 	.word	0x20000094
 800bc64:	200010a8 	.word	0x200010a8
 800bc68:	08024efc 	.word	0x08024efc
 800bc6c:	08024e7c 	.word	0x08024e7c

0800bc70 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc72:	b08f      	sub	sp, #60	@ 0x3c
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc78:	0008      	movs	r0, r1
 800bc7a:	0011      	movs	r1, r2
 800bc7c:	2323      	movs	r3, #35	@ 0x23
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	1c02      	adds	r2, r0, #0
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	2322      	movs	r3, #34	@ 0x22
 800bc86:	18fb      	adds	r3, r7, r3
 800bc88:	1c0a      	adds	r2, r1, #0
 800bc8a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bc8c:	2317      	movs	r3, #23
 800bc8e:	2220      	movs	r2, #32
 800bc90:	189b      	adds	r3, r3, r2
 800bc92:	19db      	adds	r3, r3, r7
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e09f      	b.n	800bdda <CheckCRC+0x16a>
 800bc9a:	466b      	mov	r3, sp
 800bc9c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bc9e:	2322      	movs	r3, #34	@ 0x22
 800bca0:	18fb      	adds	r3, r7, r3
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	001a      	movs	r2, r3
 800bca6:	3a01      	subs	r2, #1
 800bca8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	2200      	movs	r2, #0
 800bcae:	60fa      	str	r2, [r7, #12]
 800bcb0:	68b8      	ldr	r0, [r7, #8]
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	0002      	movs	r2, r0
 800bcb6:	0f52      	lsrs	r2, r2, #29
 800bcb8:	000c      	movs	r4, r1
 800bcba:	00e4      	lsls	r4, r4, #3
 800bcbc:	61fc      	str	r4, [r7, #28]
 800bcbe:	69fc      	ldr	r4, [r7, #28]
 800bcc0:	4314      	orrs	r4, r2
 800bcc2:	61fc      	str	r4, [r7, #28]
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	00d2      	lsls	r2, r2, #3
 800bcc8:	61ba      	str	r2, [r7, #24]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	2200      	movs	r2, #0
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	6838      	ldr	r0, [r7, #0]
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	0f52      	lsrs	r2, r2, #29
 800bcd8:	000c      	movs	r4, r1
 800bcda:	00e4      	lsls	r4, r4, #3
 800bcdc:	617c      	str	r4, [r7, #20]
 800bcde:	697c      	ldr	r4, [r7, #20]
 800bce0:	4314      	orrs	r4, r2
 800bce2:	617c      	str	r4, [r7, #20]
 800bce4:	0002      	movs	r2, r0
 800bce6:	00d2      	lsls	r2, r2, #3
 800bce8:	613a      	str	r2, [r7, #16]
 800bcea:	3307      	adds	r3, #7
 800bcec:	08db      	lsrs	r3, r3, #3
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	466a      	mov	r2, sp
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	469d      	mov	sp, r3
 800bcf6:	466b      	mov	r3, sp
 800bcf8:	3300      	adds	r3, #0
 800bcfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bcfc:	2316      	movs	r3, #22
 800bcfe:	2220      	movs	r2, #32
 800bd00:	189b      	adds	r3, r3, r2
 800bd02:	19db      	adds	r3, r3, r7
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	e01e      	b.n	800bd48 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd0a:	2317      	movs	r3, #23
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	189b      	adds	r3, r3, r2
 800bd10:	19db      	adds	r3, r3, r7
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	2116      	movs	r1, #22
 800bd16:	2320      	movs	r3, #32
 800bd18:	18cb      	adds	r3, r1, r3
 800bd1a:	19db      	adds	r3, r3, r7
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	18d3      	adds	r3, r2, r3
 800bd20:	001a      	movs	r2, r3
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd24:	189a      	adds	r2, r3, r2
 800bd26:	0008      	movs	r0, r1
 800bd28:	2320      	movs	r3, #32
 800bd2a:	18cb      	adds	r3, r1, r3
 800bd2c:	19db      	adds	r3, r3, r7
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	7811      	ldrb	r1, [r2, #0]
 800bd32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd34:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd36:	2320      	movs	r3, #32
 800bd38:	18c3      	adds	r3, r0, r3
 800bd3a:	19db      	adds	r3, r3, r7
 800bd3c:	781a      	ldrb	r2, [r3, #0]
 800bd3e:	2320      	movs	r3, #32
 800bd40:	18c3      	adds	r3, r0, r3
 800bd42:	19db      	adds	r3, r3, r7
 800bd44:	3201      	adds	r2, #1
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	2316      	movs	r3, #22
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	189b      	adds	r3, r3, r2
 800bd4e:	19da      	adds	r2, r3, r7
 800bd50:	2322      	movs	r3, #34	@ 0x22
 800bd52:	18fb      	adds	r3, r7, r3
 800bd54:	7812      	ldrb	r2, [r2, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d3d6      	bcc.n	800bd0a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bd5c:	2417      	movs	r4, #23
 800bd5e:	2320      	movs	r3, #32
 800bd60:	18e3      	adds	r3, r4, r3
 800bd62:	19db      	adds	r3, r3, r7
 800bd64:	781a      	ldrb	r2, [r3, #0]
 800bd66:	2322      	movs	r3, #34	@ 0x22
 800bd68:	18fb      	adds	r3, r7, r3
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	18d3      	adds	r3, r2, r3
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd72:	18d2      	adds	r2, r2, r3
 800bd74:	250b      	movs	r5, #11
 800bd76:	2320      	movs	r3, #32
 800bd78:	18eb      	adds	r3, r5, r3
 800bd7a:	19db      	adds	r3, r3, r7
 800bd7c:	7812      	ldrb	r2, [r2, #0]
 800bd7e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bd80:	2322      	movs	r3, #34	@ 0x22
 800bd82:	18fb      	adds	r3, r7, r3
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	0011      	movs	r1, r2
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f000 f838 	bl	800be04 <CalculateCRC>
 800bd94:	0003      	movs	r3, r0
 800bd96:	001a      	movs	r2, r3
 800bd98:	2320      	movs	r3, #32
 800bd9a:	18eb      	adds	r3, r5, r3
 800bd9c:	19db      	adds	r3, r3, r7
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00c      	beq.n	800bdbe <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bda4:	2320      	movs	r3, #32
 800bda6:	18e3      	adds	r3, r4, r3
 800bda8:	19db      	adds	r3, r3, r7
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	3301      	adds	r3, #1
 800bdae:	4a13      	ldr	r2, [pc, #76]	@ (800bdfc <CheckCRC+0x18c>)
 800bdb0:	4913      	ldr	r1, [pc, #76]	@ (800be00 <CheckCRC+0x190>)
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	f002 fc52 	bl	800e65c <CreateLine>
      return false;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	46b5      	mov	sp, r6
 800bdbc:	e019      	b.n	800bdf2 <CheckCRC+0x182>
 800bdbe:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bdc0:	2217      	movs	r2, #23
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	18d3      	adds	r3, r2, r3
 800bdc6:	19db      	adds	r3, r3, r7
 800bdc8:	2120      	movs	r1, #32
 800bdca:	1852      	adds	r2, r2, r1
 800bdcc:	19d1      	adds	r1, r2, r7
 800bdce:	2222      	movs	r2, #34	@ 0x22
 800bdd0:	18ba      	adds	r2, r7, r2
 800bdd2:	7809      	ldrb	r1, [r1, #0]
 800bdd4:	7812      	ldrb	r2, [r2, #0]
 800bdd6:	188a      	adds	r2, r1, r2
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	2317      	movs	r3, #23
 800bddc:	2220      	movs	r2, #32
 800bdde:	189b      	adds	r3, r3, r2
 800bde0:	19da      	adds	r2, r3, r7
 800bde2:	2323      	movs	r3, #35	@ 0x23
 800bde4:	18fb      	adds	r3, r7, r3
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d200      	bcs.n	800bdf0 <CheckCRC+0x180>
 800bdee:	e754      	b.n	800bc9a <CheckCRC+0x2a>
    }
  }
  return true;
 800bdf0:	2301      	movs	r3, #1
}
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	b00f      	add	sp, #60	@ 0x3c
 800bdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdfa:	46c0      	nop			@ (mov r8, r8)
 800bdfc:	08024f1c 	.word	0x08024f1c
 800be00:	08024e58 	.word	0x08024e58

0800be04 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	000a      	movs	r2, r1
 800be0e:	1cfb      	adds	r3, r7, #3
 800be10:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be12:	230f      	movs	r3, #15
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	22ff      	movs	r2, #255	@ 0xff
 800be18:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be1a:	230e      	movs	r3, #14
 800be1c:	18fb      	adds	r3, r7, r3
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	e037      	b.n	800be94 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be24:	230e      	movs	r3, #14
 800be26:	18fb      	adds	r3, r7, r3
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	18d3      	adds	r3, r2, r3
 800be2e:	7819      	ldrb	r1, [r3, #0]
 800be30:	220f      	movs	r2, #15
 800be32:	18bb      	adds	r3, r7, r2
 800be34:	18ba      	adds	r2, r7, r2
 800be36:	7812      	ldrb	r2, [r2, #0]
 800be38:	404a      	eors	r2, r1
 800be3a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be3c:	230d      	movs	r3, #13
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	2200      	movs	r2, #0
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e01b      	b.n	800be7e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be46:	210f      	movs	r1, #15
 800be48:	187b      	adds	r3, r7, r1
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da09      	bge.n	800be66 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be52:	187b      	adds	r3, r7, r1
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	2231      	movs	r2, #49	@ 0x31
 800be5c:	4053      	eors	r3, r2
 800be5e:	b25a      	sxtb	r2, r3
 800be60:	187b      	adds	r3, r7, r1
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	e005      	b.n	800be72 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800be66:	230f      	movs	r3, #15
 800be68:	18fa      	adds	r2, r7, r3
 800be6a:	18fb      	adds	r3, r7, r3
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	18db      	adds	r3, r3, r3
 800be70:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800be72:	210d      	movs	r1, #13
 800be74:	187b      	adds	r3, r7, r1
 800be76:	781a      	ldrb	r2, [r3, #0]
 800be78:	187b      	adds	r3, r7, r1
 800be7a:	3201      	adds	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	230d      	movs	r3, #13
 800be80:	18fb      	adds	r3, r7, r3
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b07      	cmp	r3, #7
 800be86:	d9de      	bls.n	800be46 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800be88:	210e      	movs	r1, #14
 800be8a:	187b      	adds	r3, r7, r1
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	187b      	adds	r3, r7, r1
 800be90:	3201      	adds	r2, #1
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	230e      	movs	r3, #14
 800be96:	18fa      	adds	r2, r7, r3
 800be98:	1cfb      	adds	r3, r7, #3
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d3c0      	bcc.n	800be24 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800bea2:	230f      	movs	r3, #15
 800bea4:	18fb      	adds	r3, r7, r3
 800bea6:	781b      	ldrb	r3, [r3, #0]
}
 800bea8:	0018      	movs	r0, r3
 800beaa:	46bd      	mov	sp, r7
 800beac:	b004      	add	sp, #16
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4936      	ldr	r1, [pc, #216]	@ (800bf98 <SGP_SetHT+0xe8>)
 800bec0:	1c18      	adds	r0, r3, #0
 800bec2:	f7f4 fcfd 	bl	80008c0 <__aeabi_fadd>
 800bec6:	1c03      	adds	r3, r0, #0
 800bec8:	4934      	ldr	r1, [pc, #208]	@ (800bf9c <SGP_SetHT+0xec>)
 800beca:	1c18      	adds	r0, r3, #0
 800becc:	f7f4 fe82 	bl	8000bd4 <__aeabi_fdiv>
 800bed0:	1c03      	adds	r3, r0, #0
 800bed2:	4933      	ldr	r1, [pc, #204]	@ (800bfa0 <SGP_SetHT+0xf0>)
 800bed4:	1c18      	adds	r0, r3, #0
 800bed6:	f7f5 f863 	bl	8000fa0 <__aeabi_fmul>
 800beda:	1c03      	adds	r3, r0, #0
 800bedc:	1c18      	adds	r0, r3, #0
 800bede:	f7f4 fb9d 	bl	800061c <__aeabi_f2uiz>
 800bee2:	0003      	movs	r3, r0
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa4 <SGP_SetHT+0xf4>)
 800bee8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	492e      	ldr	r1, [pc, #184]	@ (800bfa8 <SGP_SetHT+0xf8>)
 800bef0:	1c18      	adds	r0, r3, #0
 800bef2:	f7f4 fe6f 	bl	8000bd4 <__aeabi_fdiv>
 800bef6:	1c03      	adds	r3, r0, #0
 800bef8:	4929      	ldr	r1, [pc, #164]	@ (800bfa0 <SGP_SetHT+0xf0>)
 800befa:	1c18      	adds	r0, r3, #0
 800befc:	f7f5 f850 	bl	8000fa0 <__aeabi_fmul>
 800bf00:	1c03      	adds	r3, r0, #0
 800bf02:	1c18      	adds	r0, r3, #0
 800bf04:	f7f4 fb8a 	bl	800061c <__aeabi_f2uiz>
 800bf08:	0003      	movs	r3, r0
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	4b27      	ldr	r3, [pc, #156]	@ (800bfac <SGP_SetHT+0xfc>)
 800bf0e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf10:	4b26      	ldr	r3, [pc, #152]	@ (800bfac <SGP_SetHT+0xfc>)
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	0a1b      	lsrs	r3, r3, #8
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	4b25      	ldr	r3, [pc, #148]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf1c:	709a      	strb	r2, [r3, #2]
 800bf1e:	4b24      	ldr	r3, [pc, #144]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf20:	789a      	ldrb	r2, [r3, #2]
 800bf22:	210c      	movs	r1, #12
 800bf24:	187b      	adds	r3, r7, r1
 800bf26:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf28:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <SGP_SetHT+0xfc>)
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b20      	ldr	r3, [pc, #128]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf30:	70da      	strb	r2, [r3, #3]
 800bf32:	4b1f      	ldr	r3, [pc, #124]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf34:	78da      	ldrb	r2, [r3, #3]
 800bf36:	187b      	adds	r3, r7, r1
 800bf38:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf3a:	187b      	adds	r3, r7, r1
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f7ff ff60 	bl	800be04 <CalculateCRC>
 800bf44:	0003      	movs	r3, r0
 800bf46:	001a      	movs	r2, r3
 800bf48:	4b19      	ldr	r3, [pc, #100]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf4a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf4c:	4b15      	ldr	r3, [pc, #84]	@ (800bfa4 <SGP_SetHT+0xf4>)
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	4b16      	ldr	r3, [pc, #88]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf58:	715a      	strb	r2, [r3, #5]
 800bf5a:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf5c:	795a      	ldrb	r2, [r3, #5]
 800bf5e:	2108      	movs	r1, #8
 800bf60:	187b      	adds	r3, r7, r1
 800bf62:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bf64:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa4 <SGP_SetHT+0xf4>)
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	4b11      	ldr	r3, [pc, #68]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf6c:	719a      	strb	r2, [r3, #6]
 800bf6e:	4b10      	ldr	r3, [pc, #64]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf70:	799a      	ldrb	r2, [r3, #6]
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bf76:	187b      	adds	r3, r7, r1
 800bf78:	2102      	movs	r1, #2
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	f7ff ff42 	bl	800be04 <CalculateCRC>
 800bf80:	0003      	movs	r3, r0
 800bf82:	001a      	movs	r2, r3
 800bf84:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb0 <SGP_SetHT+0x100>)
 800bf86:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <SGP_SetHT+0x104>)
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	701a      	strb	r2, [r3, #0]
}
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	46bd      	mov	sp, r7
 800bf92:	b004      	add	sp, #16
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	46c0      	nop			@ (mov r8, r8)
 800bf98:	42340000 	.word	0x42340000
 800bf9c:	432f0000 	.word	0x432f0000
 800bfa0:	477fff00 	.word	0x477fff00
 800bfa4:	20001162 	.word	0x20001162
 800bfa8:	42c80000 	.word	0x42c80000
 800bfac:	20001160 	.word	0x20001160
 800bfb0:	200000a0 	.word	0x200000a0
 800bfb4:	20001164 	.word	0x20001164

0800bfb8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bfbc:	4a09      	ldr	r2, [pc, #36]	@ (800bfe4 <SGP_SoftReset+0x2c>)
 800bfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe8 <SGP_SoftReset+0x30>)
 800bfc0:	0019      	movs	r1, r3
 800bfc2:	2003      	movs	r0, #3
 800bfc4:	f002 fb4a 	bl	800e65c <CreateLine>
  SGP_TurnHeaterOff();
 800bfc8:	f7ff fcd0 	bl	800b96c <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bfcc:	200a      	movs	r0, #10
 800bfce:	f002 ff93 	bl	800eef8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bfd2:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <SGP_SoftReset+0x34>)
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	0019      	movs	r1, r3
 800bfd8:	2059      	movs	r0, #89	@ 0x59
 800bfda:	f7ff fbf9 	bl	800b7d0 <WriteRegister>
}
 800bfde:	46c0      	nop			@ (mov r8, r8)
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	08024fc4 	.word	0x08024fc4
 800bfe8:	08024ea0 	.word	0x08024ea0
 800bfec:	200000a8 	.word	0x200000a8

0800bff0 <ResetVOCresult>:

void ResetVOCresult(void) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800bff4:	4b02      	ldr	r3, [pc, #8]	@ (800c000 <ResetVOCresult+0x10>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	601a      	str	r2, [r3, #0]
}
 800bffa:	46c0      	nop			@ (mov r8, r8)
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20001168 	.word	0x20001168

0800c004 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c008:	4b37      	ldr	r3, [pc, #220]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b07      	cmp	r3, #7
 800c00e:	d85f      	bhi.n	800c0d0 <SGP_Upkeep+0xcc>
 800c010:	009a      	lsls	r2, r3, #2
 800c012:	4b36      	ldr	r3, [pc, #216]	@ (800c0ec <SGP_Upkeep+0xe8>)
 800c014:	18d3      	adds	r3, r2, r3
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c01a:	4a35      	ldr	r2, [pc, #212]	@ (800c0f0 <SGP_Upkeep+0xec>)
 800c01c:	4b35      	ldr	r3, [pc, #212]	@ (800c0f4 <SGP_Upkeep+0xf0>)
 800c01e:	0019      	movs	r1, r3
 800c020:	2003      	movs	r0, #3
 800c022:	f002 fb1b 	bl	800e65c <CreateLine>
    break;
 800c026:	e05a      	b.n	800c0de <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c028:	f7ff ffe2 	bl	800bff0 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c02c:	4b2e      	ldr	r3, [pc, #184]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
    break;
 800c032:	e054      	b.n	800c0de <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c034:	f7ff fc38 	bl	800b8a8 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c038:	f001 f966 	bl	800d308 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c03c:	4b2a      	ldr	r3, [pc, #168]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c03e:	2202      	movs	r2, #2
 800c040:	701a      	strb	r2, [r3, #0]
    break;
 800c042:	e04c      	b.n	800c0de <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c044:	4b2c      	ldr	r3, [pc, #176]	@ (800c0f8 <SGP_Upkeep+0xf4>)
 800c046:	0018      	movs	r0, r3
 800c048:	f7ff fc9e 	bl	800b988 <SGP_GetMeasurementValues>
 800c04c:	1e03      	subs	r3, r0, #0
 800c04e:	d043      	beq.n	800c0d8 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c050:	4b25      	ldr	r3, [pc, #148]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c052:	2203      	movs	r2, #3
 800c054:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c056:	e03f      	b.n	800c0d8 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c058:	4b27      	ldr	r3, [pc, #156]	@ (800c0f8 <SGP_Upkeep+0xf4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	0018      	movs	r0, r3
 800c060:	f7f7 fc5a 	bl	8003918 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c064:	4b20      	ldr	r3, [pc, #128]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c066:	2206      	movs	r2, #6
 800c068:	701a      	strb	r2, [r3, #0]
    break;
 800c06a:	e038      	b.n	800c0de <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c06c:	4b1e      	ldr	r3, [pc, #120]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c06e:	2207      	movs	r2, #7
 800c070:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c072:	4b22      	ldr	r3, [pc, #136]	@ (800c0fc <SGP_Upkeep+0xf8>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d112      	bne.n	800c0a0 <SGP_Upkeep+0x9c>
 800c07a:	4b21      	ldr	r3, [pc, #132]	@ (800c100 <SGP_Upkeep+0xfc>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2201      	movs	r2, #1
 800c080:	4053      	eors	r3, r2
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00b      	beq.n	800c0a0 <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c088:	4b1e      	ldr	r3, [pc, #120]	@ (800c104 <SGP_Upkeep+0x100>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d004      	beq.n	800c09a <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c090:	f7ff ff92 	bl	800bfb8 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c094:	2000      	movs	r0, #0
 800c096:	f7fc f9cf 	bl	8008438 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c09a:	4b1a      	ldr	r3, [pc, #104]	@ (800c104 <SGP_Upkeep+0x100>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c0a0:	f002 ff20 	bl	800eee4 <HAL_GetTick>
 800c0a4:	0003      	movs	r3, r0
 800c0a6:	22c8      	movs	r2, #200	@ 0xc8
 800c0a8:	0092      	lsls	r2, r2, #2
 800c0aa:	189a      	adds	r2, r3, r2
 800c0ac:	4b16      	ldr	r3, [pc, #88]	@ (800c108 <SGP_Upkeep+0x104>)
 800c0ae:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0b0:	f001 f942 	bl	800d338 <ResetMeasurementIndicator>
  break;
 800c0b4:	e013      	b.n	800c0de <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c0b6:	4b14      	ldr	r3, [pc, #80]	@ (800c108 <SGP_Upkeep+0x104>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f002 fa78 	bl	800e5b0 <TimestampIsReached>
 800c0c0:	1e03      	subs	r3, r0, #0
 800c0c2:	d00b      	beq.n	800c0dc <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c0c4:	f7ff fbd8 	bl	800b878 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c0c8:	4b07      	ldr	r3, [pc, #28]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0ce:	e005      	b.n	800c0dc <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c0d0:	4b05      	ldr	r3, [pc, #20]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	701a      	strb	r2, [r3, #0]
    break;
 800c0d6:	e002      	b.n	800c0de <SGP_Upkeep+0xda>
    break;
 800c0d8:	46c0      	nop			@ (mov r8, r8)
 800c0da:	e000      	b.n	800c0de <SGP_Upkeep+0xda>
    break;
 800c0dc:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c0de:	4b02      	ldr	r3, [pc, #8]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c0e0:	781b      	ldrb	r3, [r3, #0]
}
 800c0e2:	0018      	movs	r0, r3
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	2000116c 	.word	0x2000116c
 800c0ec:	08025708 	.word	0x08025708
 800c0f0:	08024fdc 	.word	0x08024fdc
 800c0f4:	08024ea0 	.word	0x08024ea0
 800c0f8:	20001168 	.word	0x20001168
 800c0fc:	200010b2 	.word	0x200010b2
 800c100:	20002009 	.word	0x20002009
 800c104:	2000109c 	.word	0x2000109c
 800c108:	200010b4 	.word	0x200010b4

0800c10c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	0002      	movs	r2, r0
 800c114:	1dfb      	adds	r3, r7, #7
 800c116:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c118:	1dfb      	adds	r3, r7, #7
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c11e:	d809      	bhi.n	800c134 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c120:	1dfb      	adds	r3, r7, #7
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	001a      	movs	r2, r3
 800c126:	231f      	movs	r3, #31
 800c128:	401a      	ands	r2, r3
 800c12a:	4b04      	ldr	r3, [pc, #16]	@ (800c13c <__NVIC_EnableIRQ+0x30>)
 800c12c:	2101      	movs	r1, #1
 800c12e:	4091      	lsls	r1, r2
 800c130:	000a      	movs	r2, r1
 800c132:	601a      	str	r2, [r3, #0]
  }
}
 800c134:	46c0      	nop			@ (mov r8, r8)
 800c136:	46bd      	mov	sp, r7
 800c138:	b002      	add	sp, #8
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	e000e100 	.word	0xe000e100

0800c140 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	0002      	movs	r2, r0
 800c148:	1dfb      	adds	r3, r7, #7
 800c14a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c14c:	1dfb      	adds	r3, r7, #7
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b7f      	cmp	r3, #127	@ 0x7f
 800c152:	d810      	bhi.n	800c176 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c154:	1dfb      	adds	r3, r7, #7
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	001a      	movs	r2, r3
 800c15a:	231f      	movs	r3, #31
 800c15c:	4013      	ands	r3, r2
 800c15e:	4908      	ldr	r1, [pc, #32]	@ (800c180 <__NVIC_DisableIRQ+0x40>)
 800c160:	2201      	movs	r2, #1
 800c162:	409a      	lsls	r2, r3
 800c164:	0013      	movs	r3, r2
 800c166:	2280      	movs	r2, #128	@ 0x80
 800c168:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c16a:	f3bf 8f4f 	dsb	sy
}
 800c16e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c170:	f3bf 8f6f 	isb	sy
}
 800c174:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	46bd      	mov	sp, r7
 800c17a:	b002      	add	sp, #8
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	e000e100 	.word	0xe000e100

0800c184 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c184:	b5b0      	push	{r4, r5, r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af02      	add	r7, sp, #8
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	0008      	movs	r0, r1
 800c18e:	0011      	movs	r1, r2
 800c190:	1cfb      	adds	r3, r7, #3
 800c192:	1c02      	adds	r2, r0, #0
 800c194:	701a      	strb	r2, [r3, #0]
 800c196:	1cbb      	adds	r3, r7, #2
 800c198:	1c0a      	adds	r2, r1, #0
 800c19a:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c19c:	4b5b      	ldr	r3, [pc, #364]	@ (800c30c <getSoundData+0x188>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	4053      	eors	r3, r2
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d107      	bne.n	800c1bc <getSoundData+0x38>
 800c1ac:	4b58      	ldr	r3, [pc, #352]	@ (800c310 <getSoundData+0x18c>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4053      	eors	r3, r2
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <getSoundData+0x3c>
    {
        return false;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e0a0      	b.n	800c302 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c1c0:	4b54      	ldr	r3, [pc, #336]	@ (800c314 <getSoundData+0x190>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c1ca:	4b53      	ldr	r3, [pc, #332]	@ (800c318 <getSoundData+0x194>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b25b      	sxtb	r3, r3
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f7ff ffb5 	bl	800c140 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1d6:	f3bf 8f4f 	dsb	sy
}
 800c1da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1dc:	f3bf 8f6f 	isb	sy
}
 800c1e0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c1e2:	1cfb      	adds	r3, r7, #3
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d04c      	beq.n	800c284 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c1ea:	4b4c      	ldr	r3, [pc, #304]	@ (800c31c <getSoundData+0x198>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d11b      	bne.n	800c22a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	e00e      	b.n	800c222 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	18d3      	adds	r3, r2, r3
 800c20a:	3302      	adds	r3, #2
 800c20c:	2200      	movs	r2, #0
 800c20e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	18d3      	adds	r3, r2, r3
 800c216:	3308      	adds	r3, #8
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	3301      	adds	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b05      	cmp	r3, #5
 800c226:	d9ed      	bls.n	800c204 <getSoundData+0x80>
 800c228:	e02c      	b.n	800c284 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	1c59      	adds	r1, r3, #1
 800c230:	4b3b      	ldr	r3, [pc, #236]	@ (800c320 <getSoundData+0x19c>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	4b3b      	ldr	r3, [pc, #236]	@ (800c324 <getSoundData+0x1a0>)
 800c236:	681c      	ldr	r4, [r3, #0]
 800c238:	4b38      	ldr	r3, [pc, #224]	@ (800c31c <getSoundData+0x198>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	0023      	movs	r3, r4
 800c240:	f000 fde8 	bl	800ce14 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c244:	2300      	movs	r3, #0
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	e019      	b.n	800c27e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	18d3      	adds	r3, r2, r3
 800c250:	1c98      	adds	r0, r3, #2
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	3308      	adds	r3, #8
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c25a:	4b33      	ldr	r3, [pc, #204]	@ (800c328 <getSoundData+0x1a4>)
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	0092      	lsls	r2, r2, #2
 800c260:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c262:	4b32      	ldr	r3, [pc, #200]	@ (800c32c <getSoundData+0x1a8>)
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	0092      	lsls	r2, r2, #2
 800c268:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c26a:	4b2c      	ldr	r3, [pc, #176]	@ (800c31c <getSoundData+0x198>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	0013      	movs	r3, r2
 800c272:	0022      	movs	r2, r4
 800c274:	f000 fdce 	bl	800ce14 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	3301      	adds	r3, #1
 800c27c:	613b      	str	r3, [r7, #16]
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b05      	cmp	r3, #5
 800c282:	d9e2      	bls.n	800c24a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c284:	1cbb      	adds	r3, r7, #2
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d028      	beq.n	800c2de <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c28c:	240e      	movs	r4, #14
 800c28e:	193b      	adds	r3, r7, r4
 800c290:	2200      	movs	r2, #0
 800c292:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c294:	250d      	movs	r5, #13
 800c296:	197b      	adds	r3, r7, r5
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c29c:	4b24      	ldr	r3, [pc, #144]	@ (800c330 <getSoundData+0x1ac>)
 800c29e:	6818      	ldr	r0, [r3, #0]
 800c2a0:	4924      	ldr	r1, [pc, #144]	@ (800c334 <getSoundData+0x1b0>)
 800c2a2:	197b      	adds	r3, r7, r5
 800c2a4:	193a      	adds	r2, r7, r4
 800c2a6:	f000 fe59 	bl	800cf5c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c2aa:	193b      	adds	r3, r7, r4
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	21ff      	movs	r1, #255	@ 0xff
 800c2b2:	4011      	ands	r1, r2
 800c2b4:	000c      	movs	r4, r1
 800c2b6:	7b99      	ldrb	r1, [r3, #14]
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	4001      	ands	r1, r0
 800c2bc:	1c08      	adds	r0, r1, #0
 800c2be:	1c21      	adds	r1, r4, #0
 800c2c0:	4301      	orrs	r1, r0
 800c2c2:	7399      	strb	r1, [r3, #14]
 800c2c4:	0a12      	lsrs	r2, r2, #8
 800c2c6:	b290      	uxth	r0, r2
 800c2c8:	7bda      	ldrb	r2, [r3, #15]
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	400a      	ands	r2, r1
 800c2ce:	1c11      	adds	r1, r2, #0
 800c2d0:	1c02      	adds	r2, r0, #0
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c2d6:	197b      	adds	r3, r7, r5
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c2de:	f000 f86f 	bl	800c3c0 <micSettlingComplete>
 800c2e2:	0003      	movs	r3, r0
 800c2e4:	001a      	movs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c2ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c314 <getSoundData+0x190>)
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c2f4:	4b08      	ldr	r3, [pc, #32]	@ (800c318 <getSoundData+0x194>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f7ff ff06 	bl	800c10c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c300:	2301      	movs	r3, #1
}
 800c302:	0018      	movs	r0, r3
 800c304:	46bd      	mov	sp, r7
 800c306:	b006      	add	sp, #24
 800c308:	bdb0      	pop	{r4, r5, r7, pc}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	2000116e 	.word	0x2000116e
 800c310:	20001171 	.word	0x20001171
 800c314:	20001170 	.word	0x20001170
 800c318:	20001bc0 	.word	0x20001bc0
 800c31c:	20001bfc 	.word	0x20001bfc
 800c320:	20001bc4 	.word	0x20001bc4
 800c324:	20001bc8 	.word	0x20001bc8
 800c328:	20001bcc 	.word	0x20001bcc
 800c32c:	20001be4 	.word	0x20001be4
 800c330:	20001178 	.word	0x20001178
 800c334:	3b5c7333 	.word	0x3b5c7333

0800c338 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	001a      	movs	r2, r3
 800c346:	1cfb      	adds	r3, r7, #3
 800c348:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c34a:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <soundInit+0x38>)
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c350:	4b08      	ldr	r3, [pc, #32]	@ (800c374 <soundInit+0x3c>)
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c356:	4b08      	ldr	r3, [pc, #32]	@ (800c378 <soundInit+0x40>)
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c35c:	4b07      	ldr	r3, [pc, #28]	@ (800c37c <soundInit+0x44>)
 800c35e:	2200      	movs	r2, #0
 800c360:	569a      	ldrsb	r2, [r3, r2]
 800c362:	4b06      	ldr	r3, [pc, #24]	@ (800c37c <soundInit+0x44>)
 800c364:	701a      	strb	r2, [r3, #0]

    return true;
 800c366:	2301      	movs	r3, #1
}
 800c368:	0018      	movs	r0, r3
 800c36a:	46bd      	mov	sp, r7
 800c36c:	b004      	add	sp, #16
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20001bb8 	.word	0x20001bb8
 800c374:	20001bb4 	.word	0x20001bb4
 800c378:	20001bbc 	.word	0x20001bbc
 800c37c:	20001bc0 	.word	0x20001bc0

0800c380 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c384:	4b02      	ldr	r3, [pc, #8]	@ (800c390 <clearMaximumAmplitude+0x10>)
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]
}
 800c38a:	46c0      	nop			@ (mov r8, r8)
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20001178 	.word	0x20001178

0800c394 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c398:	4b08      	ldr	r3, [pc, #32]	@ (800c3bc <startMicSettlingPeriod+0x28>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c3a2:	4b06      	ldr	r3, [pc, #24]	@ (800c3bc <startMicSettlingPeriod+0x28>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	f00a fb60 	bl	8016a6c <HAL_TIM_Base_Start>
 800c3ac:	1e03      	subs	r3, r0, #0
 800c3ae:	d001      	beq.n	800c3b4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e000      	b.n	800c3b6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c3b4:	2301      	movs	r3, #1
}
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20001bb4 	.word	0x20001bb4

0800c3c0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c400 <micSettlingComplete+0x40>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	401a      	ands	r2, r3
 800c3d2:	1dfb      	adds	r3, r7, #7
 800c3d4:	3a01      	subs	r2, #1
 800c3d6:	4251      	negs	r1, r2
 800c3d8:	414a      	adcs	r2, r1
 800c3da:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c3dc:	1dfb      	adds	r3, r7, #7
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d007      	beq.n	800c3f4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c3e4:	4b06      	ldr	r3, [pc, #24]	@ (800c400 <micSettlingComplete+0x40>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	f00a fb89 	bl	8016b00 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c3ee:	4b05      	ldr	r3, [pc, #20]	@ (800c404 <micSettlingComplete+0x44>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c3f4:	1dfb      	adds	r3, r7, #7
 800c3f6:	781b      	ldrb	r3, [r3, #0]
}
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	b002      	add	sp, #8
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20001bb4 	.word	0x20001bb4
 800c404:	2000116d 	.word	0x2000116d

0800c408 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	0002      	movs	r2, r0
 800c410:	1dfb      	adds	r3, r7, #7
 800c412:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c414:	4b29      	ldr	r3, [pc, #164]	@ (800c4bc <enableMicrophone+0xb4>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	1dfa      	adds	r2, r7, #7
 800c41c:	7812      	ldrb	r2, [r2, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d101      	bne.n	800c426 <enableMicrophone+0x1e>
    {
        return true;
 800c422:	2301      	movs	r3, #1
 800c424:	e045      	b.n	800c4b2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c426:	1dfb      	adds	r3, r7, #7
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d025      	beq.n	800c47a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c42e:	f7ff ffb1 	bl	800c394 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c432:	4b23      	ldr	r3, [pc, #140]	@ (800c4c0 <enableMicrophone+0xb8>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2280      	movs	r2, #128	@ 0x80
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	4922      	ldr	r1, [pc, #136]	@ (800c4c4 <enableMicrophone+0xbc>)
 800c43c:	0018      	movs	r0, r3
 800c43e:	f006 fd7f 	bl	8012f40 <HAL_I2S_Receive_DMA>
 800c442:	1e03      	subs	r3, r0, #0
 800c444:	d001      	beq.n	800c44a <enableMicrophone+0x42>
        {
            return false;
 800c446:	2300      	movs	r3, #0
 800c448:	e033      	b.n	800c4b2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c44a:	f7ff ff99 	bl	800c380 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c44e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c8 <enableMicrophone+0xc0>)
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c454:	4b1d      	ldr	r3, [pc, #116]	@ (800c4cc <enableMicrophone+0xc4>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	0018      	movs	r0, r3
 800c45c:	f7ff fe56 	bl	800c10c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c460:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d0 <enableMicrophone+0xc8>)
 800c462:	2201      	movs	r2, #1
 800c464:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c466:	4b15      	ldr	r3, [pc, #84]	@ (800c4bc <enableMicrophone+0xb4>)
 800c468:	2201      	movs	r2, #1
 800c46a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c46c:	4b19      	ldr	r3, [pc, #100]	@ (800c4d4 <enableMicrophone+0xcc>)
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c472:	4b19      	ldr	r3, [pc, #100]	@ (800c4d8 <enableMicrophone+0xd0>)
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e01a      	b.n	800c4b0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c47a:	4b14      	ldr	r3, [pc, #80]	@ (800c4cc <enableMicrophone+0xc4>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	0018      	movs	r0, r3
 800c482:	f7ff fe5d 	bl	800c140 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c486:	4b12      	ldr	r3, [pc, #72]	@ (800c4d0 <enableMicrophone+0xc8>)
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c48c:	4b11      	ldr	r3, [pc, #68]	@ (800c4d4 <enableMicrophone+0xcc>)
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c492:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <enableMicrophone+0xd0>)
 800c494:	2200      	movs	r2, #0
 800c496:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c498:	4b09      	ldr	r3, [pc, #36]	@ (800c4c0 <enableMicrophone+0xb8>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	0018      	movs	r0, r3
 800c49e:	f006 fe11 	bl	80130c4 <HAL_I2S_DMAStop>
 800c4a2:	1e03      	subs	r3, r0, #0
 800c4a4:	d001      	beq.n	800c4aa <enableMicrophone+0xa2>
        {
            return false;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e003      	b.n	800c4b2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c4aa:	4b04      	ldr	r3, [pc, #16]	@ (800c4bc <enableMicrophone+0xb4>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4b0:	2301      	movs	r3, #1
}
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	b002      	add	sp, #8
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	46c0      	nop			@ (mov r8, r8)
 800c4bc:	2000116e 	.word	0x2000116e
 800c4c0:	20001bb8 	.word	0x20001bb8
 800c4c4:	200011b4 	.word	0x200011b4
 800c4c8:	20001174 	.word	0x20001174
 800c4cc:	20001bc0 	.word	0x20001bc0
 800c4d0:	20001170 	.word	0x20001170
 800c4d4:	2000116f 	.word	0x2000116f
 800c4d8:	20001171 	.word	0x20001171

0800c4dc <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c514 <startSPLcalculation+0x38>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4053      	eors	r3, r2
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <startSPLcalculation+0x18>
    {
        return false;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e00c      	b.n	800c50e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c4f4:	4b08      	ldr	r3, [pc, #32]	@ (800c518 <startSPLcalculation+0x3c>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <startSPLcalculation+0x26>
    {
        return true;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e005      	b.n	800c50e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c502:	f000 fb63 	bl	800cbcc <resetSPLstate>
    SPLcalcEnabled = true;
 800c506:	4b04      	ldr	r3, [pc, #16]	@ (800c518 <startSPLcalculation+0x3c>)
 800c508:	2201      	movs	r2, #1
 800c50a:	701a      	strb	r2, [r3, #0]
    return true;
 800c50c:	2301      	movs	r3, #1
}
 800c50e:	0018      	movs	r0, r3
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	2000116e 	.word	0x2000116e
 800c518:	2000116f 	.word	0x2000116f

0800c51c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d102      	bne.n	800c534 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c52e:	2000      	movs	r0, #0
 800c530:	f000 f81a 	bl	800c568 <processHalfDMAbuffer>
  }
}
 800c534:	46c0      	nop			@ (mov r8, r8)
 800c536:	46bd      	mov	sp, r7
 800c538:	b002      	add	sp, #8
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20001bb8 	.word	0x20001bb8

0800c540 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c548:	4b06      	ldr	r3, [pc, #24]	@ (800c564 <HAL_I2S_RxCpltCallback+0x24>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d104      	bne.n	800c55c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c552:	2380      	movs	r3, #128	@ 0x80
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	0018      	movs	r0, r3
 800c558:	f000 f806 	bl	800c568 <processHalfDMAbuffer>
  }
}
 800c55c:	46c0      	nop			@ (mov r8, r8)
 800c55e:	46bd      	mov	sp, r7
 800c560:	b002      	add	sp, #8
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20001bb8 	.word	0x20001bb8

0800c568 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	005a      	lsls	r2, r3, #1
 800c574:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <processHalfDMAbuffer+0x64>)
 800c576:	18d3      	adds	r3, r2, r3
 800c578:	4a15      	ldr	r2, [pc, #84]	@ (800c5d0 <processHalfDMAbuffer+0x68>)
 800c57a:	2180      	movs	r1, #128	@ 0x80
 800c57c:	0089      	lsls	r1, r1, #2
 800c57e:	0018      	movs	r0, r3
 800c580:	f000 fd35 	bl	800cfee <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c584:	4b13      	ldr	r3, [pc, #76]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	425a      	negs	r2, r3
 800c58a:	4153      	adcs	r3, r2
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b11      	ldr	r3, [pc, #68]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2109      	movs	r1, #9
 800c594:	4299      	cmp	r1, r3
 800c596:	419b      	sbcs	r3, r3
 800c598:	425b      	negs	r3, r3
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	480c      	ldr	r0, [pc, #48]	@ (800c5d0 <processHalfDMAbuffer+0x68>)
 800c59e:	2180      	movs	r1, #128	@ 0x80
 800c5a0:	f000 fb46 	bl	800cc30 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b09      	cmp	r3, #9
 800c5aa:	d804      	bhi.n	800c5b6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c5ac:	4b09      	ldr	r3, [pc, #36]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	4b08      	ldr	r3, [pc, #32]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c5b4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c5b6:	4b08      	ldr	r3, [pc, #32]	@ (800c5d8 <processHalfDMAbuffer+0x70>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c5c0:	f000 f826 	bl	800c610 <calculateSPLQ31>
    }
}
 800c5c4:	46c0      	nop			@ (mov r8, r8)
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	b002      	add	sp, #8
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200011b4 	.word	0x200011b4
 800c5d0:	200019b4 	.word	0x200019b4
 800c5d4:	20001174 	.word	0x20001174
 800c5d8:	2000116f 	.word	0x2000116f

0800c5dc <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5e4:	4b07      	ldr	r3, [pc, #28]	@ (800c604 <HAL_I2S_ErrorCallback+0x28>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d106      	bne.n	800c5fc <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c5ee:	4a06      	ldr	r2, [pc, #24]	@ (800c608 <HAL_I2S_ErrorCallback+0x2c>)
 800c5f0:	239e      	movs	r3, #158	@ 0x9e
 800c5f2:	0059      	lsls	r1, r3, #1
 800c5f4:	4b05      	ldr	r3, [pc, #20]	@ (800c60c <HAL_I2S_ErrorCallback+0x30>)
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	f002 f8e8 	bl	800e7cc <errorHandler>
  }
}
 800c5fc:	46c0      	nop			@ (mov r8, r8)
 800c5fe:	46bd      	mov	sp, r7
 800c600:	b002      	add	sp, #8
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20001bb8 	.word	0x20001bb8
 800c608:	08025004 	.word	0x08025004
 800c60c:	080257f8 	.word	0x080257f8

0800c610 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c612:	b0b3      	sub	sp, #204	@ 0xcc
 800c614:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c616:	4ae2      	ldr	r2, [pc, #904]	@ (800c9a0 <calculateSPLQ31+0x390>)
 800c618:	2338      	movs	r3, #56	@ 0x38
 800c61a:	2030      	movs	r0, #48	@ 0x30
 800c61c:	181b      	adds	r3, r3, r0
 800c61e:	19d9      	adds	r1, r3, r7
 800c620:	2334      	movs	r3, #52	@ 0x34
 800c622:	181b      	adds	r3, r3, r0
 800c624:	19d8      	adds	r0, r3, r7
 800c626:	2380      	movs	r3, #128	@ 0x80
 800c628:	f000 fc36 	bl	800ce98 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c62c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da00      	bge.n	800c634 <calculateSPLQ31+0x24>
 800c632:	3301      	adds	r3, #1
 800c634:	105b      	asrs	r3, r3, #1
 800c636:	001a      	movs	r2, r3
 800c638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	da00      	bge.n	800c640 <calculateSPLQ31+0x30>
 800c63e:	3301      	adds	r3, #1
 800c640:	105b      	asrs	r3, r3, #1
 800c642:	18d3      	adds	r3, r2, r3
 800c644:	2188      	movs	r1, #136	@ 0x88
 800c646:	187a      	adds	r2, r7, r1
 800c648:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c64a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c64c:	187b      	adds	r3, r7, r1
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	3304      	adds	r3, #4
 800c654:	2284      	movs	r2, #132	@ 0x84
 800c656:	18b9      	adds	r1, r7, r2
 800c658:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c65a:	18bb      	adds	r3, r7, r2
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4ad1      	ldr	r2, [pc, #836]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c660:	0019      	movs	r1, r3
 800c662:	0010      	movs	r0, r2
 800c664:	f000 fc58 	bl	800cf18 <getPo2factor>
 800c668:	0003      	movs	r3, r0
 800c66a:	2280      	movs	r2, #128	@ 0x80
 800c66c:	18ba      	adds	r2, r7, r2
 800c66e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	2284      	movs	r2, #132	@ 0x84
 800c674:	2130      	movs	r1, #48	@ 0x30
 800c676:	1852      	adds	r2, r2, r1
 800c678:	19d2      	adds	r2, r2, r7
 800c67a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c67c:	2300      	movs	r3, #0
 800c67e:	2280      	movs	r2, #128	@ 0x80
 800c680:	1852      	adds	r2, r2, r1
 800c682:	19d2      	adds	r2, r2, r7
 800c684:	6013      	str	r3, [r2, #0]
 800c686:	e032      	b.n	800c6ee <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c688:	4ac5      	ldr	r2, [pc, #788]	@ (800c9a0 <calculateSPLQ31+0x390>)
 800c68a:	2680      	movs	r6, #128	@ 0x80
 800c68c:	2330      	movs	r3, #48	@ 0x30
 800c68e:	18f1      	adds	r1, r6, r3
 800c690:	19cb      	adds	r3, r1, r7
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	589a      	ldr	r2, [r3, r2]
 800c698:	2188      	movs	r1, #136	@ 0x88
 800c69a:	1879      	adds	r1, r7, r1
 800c69c:	680b      	ldr	r3, [r1, #0]
 800c69e:	1ad2      	subs	r2, r2, r3
 800c6a0:	2180      	movs	r1, #128	@ 0x80
 800c6a2:	1879      	adds	r1, r7, r1
 800c6a4:	680b      	ldr	r3, [r1, #0]
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	0011      	movs	r1, r2
 800c6aa:	4abf      	ldr	r2, [pc, #764]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c6ac:	2084      	movs	r0, #132	@ 0x84
 800c6ae:	2330      	movs	r3, #48	@ 0x30
 800c6b0:	18c3      	adds	r3, r0, r3
 800c6b2:	19db      	adds	r3, r3, r7
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c6ba:	2230      	movs	r2, #48	@ 0x30
 800c6bc:	1883      	adds	r3, r0, r2
 800c6be:	19db      	adds	r3, r3, r7
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	49b8      	ldr	r1, [pc, #736]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c6c6:	009a      	lsls	r2, r3, #2
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	5053      	str	r3, [r2, r1]
        count += 2;
 800c6cc:	2230      	movs	r2, #48	@ 0x30
 800c6ce:	1883      	adds	r3, r0, r2
 800c6d0:	19db      	adds	r3, r3, r7
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3302      	adds	r3, #2
 800c6d6:	0011      	movs	r1, r2
 800c6d8:	1882      	adds	r2, r0, r2
 800c6da:	19d2      	adds	r2, r2, r7
 800c6dc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6de:	000a      	movs	r2, r1
 800c6e0:	18b3      	adds	r3, r6, r2
 800c6e2:	19db      	adds	r3, r3, r7
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	18b2      	adds	r2, r6, r2
 800c6ea:	19d2      	adds	r2, r2, r7
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	2380      	movs	r3, #128	@ 0x80
 800c6f0:	2630      	movs	r6, #48	@ 0x30
 800c6f2:	199b      	adds	r3, r3, r6
 800c6f4:	19db      	adds	r3, r3, r7
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6fa:	d9c5      	bls.n	800c688 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c6fc:	4bab      	ldr	r3, [pc, #684]	@ (800c9ac <calculateSPLQ31+0x39c>)
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	49a9      	ldr	r1, [pc, #676]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c702:	2301      	movs	r3, #1
 800c704:	2200      	movs	r2, #0
 800c706:	f011 fa77 	bl	801dbf8 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c70a:	4aa9      	ldr	r2, [pc, #676]	@ (800c9b0 <calculateSPLQ31+0x3a0>)
 800c70c:	2338      	movs	r3, #56	@ 0x38
 800c70e:	199b      	adds	r3, r3, r6
 800c710:	19d9      	adds	r1, r3, r7
 800c712:	2334      	movs	r3, #52	@ 0x34
 800c714:	199b      	adds	r3, r3, r6
 800c716:	19d8      	adds	r0, r3, r7
 800c718:	237e      	movs	r3, #126	@ 0x7e
 800c71a:	f000 fbbd 	bl	800ce98 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c71e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c720:	2380      	movs	r3, #128	@ 0x80
 800c722:	061b      	lsls	r3, r3, #24
 800c724:	429a      	cmp	r2, r3
 800c726:	d101      	bne.n	800c72c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c728:	4b9e      	ldr	r3, [pc, #632]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c72a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c72c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c72e:	2380      	movs	r3, #128	@ 0x80
 800c730:	061b      	lsls	r3, r3, #24
 800c732:	429a      	cmp	r2, r3
 800c734:	d101      	bne.n	800c73a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c736:	4b9b      	ldr	r3, [pc, #620]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c738:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c73a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c73c:	17da      	asrs	r2, r3, #31
 800c73e:	189b      	adds	r3, r3, r2
 800c740:	4053      	eors	r3, r2
 800c742:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c746:	17da      	asrs	r2, r3, #31
 800c748:	189b      	adds	r3, r3, r2
 800c74a:	4053      	eors	r3, r2
 800c74c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c74e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c752:	429a      	cmp	r2, r3
 800c754:	dd01      	ble.n	800c75a <calculateSPLQ31+0x14a>
    {
        max = min;
 800c756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c758:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c75a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c75c:	3304      	adds	r3, #4
 800c75e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c762:	4a90      	ldr	r2, [pc, #576]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c764:	0019      	movs	r1, r3
 800c766:	0010      	movs	r0, r2
 800c768:	f000 fbd6 	bl	800cf18 <getPo2factor>
 800c76c:	0003      	movs	r3, r0
 800c76e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c770:	2302      	movs	r3, #2
 800c772:	22ac      	movs	r2, #172	@ 0xac
 800c774:	18ba      	adds	r2, r7, r2
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	e012      	b.n	800c7a0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c77a:	4a8b      	ldr	r2, [pc, #556]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c77c:	20ac      	movs	r0, #172	@ 0xac
 800c77e:	183b      	adds	r3, r7, r0
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	589a      	ldr	r2, [r3, r2]
 800c786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c788:	409a      	lsls	r2, r3
 800c78a:	0011      	movs	r1, r2
 800c78c:	4a86      	ldr	r2, [pc, #536]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c78e:	183b      	adds	r3, r7, r0
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c796:	183b      	adds	r3, r7, r0
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	183a      	adds	r2, r7, r0
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	23ac      	movs	r3, #172	@ 0xac
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7a8:	d9e7      	bls.n	800c77a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c7aa:	4b7d      	ldr	r3, [pc, #500]	@ (800c9a0 <calculateSPLQ31+0x390>)
 800c7ac:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c7ae:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7b0:	4b7d      	ldr	r3, [pc, #500]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c7b2:	2240      	movs	r2, #64	@ 0x40
 800c7b4:	0018      	movs	r0, r3
 800c7b6:	f011 ffc9 	bl	801e74c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c7ba:	2330      	movs	r3, #48	@ 0x30
 800c7bc:	18fb      	adds	r3, r7, r3
 800c7be:	0018      	movs	r0, r3
 800c7c0:	2330      	movs	r3, #48	@ 0x30
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	f013 fde5 	bl	8020394 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	21a0      	movs	r1, #160	@ 0xa0
 800c7d0:	1879      	adds	r1, r7, r1
 800c7d2:	600a      	str	r2, [r1, #0]
 800c7d4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	229c      	movs	r2, #156	@ 0x9c
 800c7da:	18ba      	adds	r2, r7, r2
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	e05b      	b.n	800c898 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c7e0:	269c      	movs	r6, #156	@ 0x9c
 800c7e2:	19bb      	adds	r3, r7, r6
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	009a      	lsls	r2, r3, #2
 800c7e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7ea:	189b      	adds	r3, r3, r2
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	613b      	str	r3, [r7, #16]
 800c7f0:	17db      	asrs	r3, r3, #31
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	4b6f      	ldr	r3, [pc, #444]	@ (800c9b4 <calculateSPLQ31+0x3a4>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	19bb      	adds	r3, r7, r6
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	18d3      	adds	r3, r2, r3
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	60bb      	str	r3, [r7, #8]
 800c804:	2300      	movs	r3, #0
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6938      	ldr	r0, [r7, #16]
 800c80e:	6979      	ldr	r1, [r7, #20]
 800c810:	f7f3 fed6 	bl	80005c0 <__aeabi_lmul>
 800c814:	0002      	movs	r2, r0
 800c816:	000b      	movs	r3, r1
 800c818:	0010      	movs	r0, r2
 800c81a:	0019      	movs	r1, r3
 800c81c:	23a0      	movs	r3, #160	@ 0xa0
 800c81e:	18fa      	adds	r2, r7, r3
 800c820:	6853      	ldr	r3, [r2, #4]
 800c822:	6812      	ldr	r2, [r2, #0]
 800c824:	1812      	adds	r2, r2, r0
 800c826:	414b      	adcs	r3, r1
 800c828:	21a0      	movs	r1, #160	@ 0xa0
 800c82a:	1879      	adds	r1, r7, r1
 800c82c:	600a      	str	r2, [r1, #0]
 800c82e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c830:	4b61      	ldr	r3, [pc, #388]	@ (800c9b8 <calculateSPLQ31+0x3a8>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	19bb      	adds	r3, r7, r6
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	18d3      	adds	r3, r2, r3
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b06      	cmp	r3, #6
 800c83e:	d025      	beq.n	800c88c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c840:	4b5d      	ldr	r3, [pc, #372]	@ (800c9b8 <calculateSPLQ31+0x3a8>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	19bb      	adds	r3, r7, r6
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	18d3      	adds	r3, r2, r3
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2230      	movs	r2, #48	@ 0x30
 800c84e:	18ba      	adds	r2, r7, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	18d3      	adds	r3, r2, r3
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	6859      	ldr	r1, [r3, #4]
 800c858:	19bb      	adds	r3, r7, r6
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	009a      	lsls	r2, r3, #2
 800c85e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c860:	189b      	adds	r3, r3, r2
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	603b      	str	r3, [r7, #0]
 800c866:	17db      	asrs	r3, r3, #31
 800c868:	607b      	str	r3, [r7, #4]
 800c86a:	4b53      	ldr	r3, [pc, #332]	@ (800c9b8 <calculateSPLQ31+0x3a8>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	19be      	adds	r6, r7, r6
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	18d3      	adds	r3, r2, r3
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	001e      	movs	r6, r3
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	1880      	adds	r0, r0, r2
 800c87e:	4159      	adcs	r1, r3
 800c880:	2330      	movs	r3, #48	@ 0x30
 800c882:	18fa      	adds	r2, r7, r3
 800c884:	00f3      	lsls	r3, r6, #3
 800c886:	18d3      	adds	r3, r2, r3
 800c888:	6018      	str	r0, [r3, #0]
 800c88a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c88c:	229c      	movs	r2, #156	@ 0x9c
 800c88e:	18bb      	adds	r3, r7, r2
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	18ba      	adds	r2, r7, r2
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	239c      	movs	r3, #156	@ 0x9c
 800c89a:	18fb      	adds	r3, r7, r3
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c8a0:	d99e      	bls.n	800c7e0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c8a2:	2380      	movs	r3, #128	@ 0x80
 800c8a4:	18fb      	adds	r3, r7, r3
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	001a      	movs	r2, r3
 800c8ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	18d3      	adds	r3, r2, r3
 800c8b2:	3b22      	subs	r3, #34	@ 0x22
 800c8b4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c8b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b8:	17da      	asrs	r2, r3, #31
 800c8ba:	189b      	adds	r3, r3, r2
 800c8bc:	4053      	eors	r3, r2
 800c8be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c8c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da62      	bge.n	800c98c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c8c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8c8:	3b20      	subs	r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	db05      	blt.n	800c8da <calculateSPLQ31+0x2ca>
 800c8ce:	22a0      	movs	r2, #160	@ 0xa0
 800c8d0:	18ba      	adds	r2, r7, r2
 800c8d2:	6812      	ldr	r2, [r2, #0]
 800c8d4:	409a      	lsls	r2, r3
 800c8d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8d8:	e010      	b.n	800c8fc <calculateSPLQ31+0x2ec>
 800c8da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8dc:	2220      	movs	r2, #32
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	22a0      	movs	r2, #160	@ 0xa0
 800c8e2:	18ba      	adds	r2, r7, r2
 800c8e4:	6812      	ldr	r2, [r2, #0]
 800c8e6:	40da      	lsrs	r2, r3
 800c8e8:	0013      	movs	r3, r2
 800c8ea:	22a4      	movs	r2, #164	@ 0xa4
 800c8ec:	18ba      	adds	r2, r7, r2
 800c8ee:	6811      	ldr	r1, [r2, #0]
 800c8f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8f2:	4091      	lsls	r1, r2
 800c8f4:	6279      	str	r1, [r7, #36]	@ 0x24
 800c8f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8fc:	21a0      	movs	r1, #160	@ 0xa0
 800c8fe:	187b      	adds	r3, r7, r1
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c904:	409a      	lsls	r2, r3
 800c906:	623a      	str	r2, [r7, #32]
 800c908:	6a3b      	ldr	r3, [r7, #32]
 800c90a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c90c:	187a      	adds	r2, r7, r1
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c912:	2300      	movs	r3, #0
 800c914:	2298      	movs	r2, #152	@ 0x98
 800c916:	18ba      	adds	r2, r7, r2
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	e031      	b.n	800c980 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c91c:	2330      	movs	r3, #48	@ 0x30
 800c91e:	18fa      	adds	r2, r7, r3
 800c920:	2398      	movs	r3, #152	@ 0x98
 800c922:	18fb      	adds	r3, r7, r3
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	18d3      	adds	r3, r2, r3
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c930:	3920      	subs	r1, #32
 800c932:	2900      	cmp	r1, #0
 800c934:	db03      	blt.n	800c93e <calculateSPLQ31+0x32e>
 800c936:	0010      	movs	r0, r2
 800c938:	4088      	lsls	r0, r1
 800c93a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c93c:	e00c      	b.n	800c958 <calculateSPLQ31+0x348>
 800c93e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c940:	2020      	movs	r0, #32
 800c942:	1a41      	subs	r1, r0, r1
 800c944:	0010      	movs	r0, r2
 800c946:	40c8      	lsrs	r0, r1
 800c948:	0001      	movs	r1, r0
 800c94a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c94c:	001c      	movs	r4, r3
 800c94e:	4084      	lsls	r4, r0
 800c950:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c954:	4308      	orrs	r0, r1
 800c956:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c958:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c95a:	0013      	movs	r3, r2
 800c95c:	408b      	lsls	r3, r1
 800c95e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c960:	2330      	movs	r3, #48	@ 0x30
 800c962:	18fa      	adds	r2, r7, r3
 800c964:	2098      	movs	r0, #152	@ 0x98
 800c966:	183b      	adds	r3, r7, r0
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	18d3      	adds	r3, r2, r3
 800c96e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c972:	6019      	str	r1, [r3, #0]
 800c974:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c976:	183b      	adds	r3, r7, r0
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3301      	adds	r3, #1
 800c97c:	183a      	adds	r2, r7, r0
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	2398      	movs	r3, #152	@ 0x98
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b05      	cmp	r3, #5
 800c988:	d9c8      	bls.n	800c91c <calculateSPLQ31+0x30c>
 800c98a:	e06b      	b.n	800ca64 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c98c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c98e:	3b20      	subs	r3, #32
 800c990:	2b00      	cmp	r3, #0
 800c992:	db13      	blt.n	800c9bc <calculateSPLQ31+0x3ac>
 800c994:	22a4      	movs	r2, #164	@ 0xa4
 800c996:	18ba      	adds	r2, r7, r2
 800c998:	6812      	ldr	r2, [r2, #0]
 800c99a:	40da      	lsrs	r2, r3
 800c99c:	61ba      	str	r2, [r7, #24]
 800c99e:	e01e      	b.n	800c9de <calculateSPLQ31+0x3ce>
 800c9a0:	200019b4 	.word	0x200019b4
 800c9a4:	7fffffff 	.word	0x7fffffff
 800c9a8:	20001c00 	.word	0x20001c00
 800c9ac:	200000b8 	.word	0x200000b8
 800c9b0:	20001c08 	.word	0x20001c08
 800c9b4:	200000bc 	.word	0x200000bc
 800c9b8:	200000c8 	.word	0x200000c8
 800c9bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9be:	2220      	movs	r2, #32
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	22a4      	movs	r2, #164	@ 0xa4
 800c9c4:	18ba      	adds	r2, r7, r2
 800c9c6:	6812      	ldr	r2, [r2, #0]
 800c9c8:	409a      	lsls	r2, r3
 800c9ca:	0013      	movs	r3, r2
 800c9cc:	22a0      	movs	r2, #160	@ 0xa0
 800c9ce:	18ba      	adds	r2, r7, r2
 800c9d0:	6811      	ldr	r1, [r2, #0]
 800c9d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9d4:	40d1      	lsrs	r1, r2
 800c9d6:	61b9      	str	r1, [r7, #24]
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	61ba      	str	r2, [r7, #24]
 800c9de:	23a4      	movs	r3, #164	@ 0xa4
 800c9e0:	18fb      	adds	r3, r7, r3
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9e6:	40da      	lsrs	r2, r3
 800c9e8:	61fa      	str	r2, [r7, #28]
 800c9ea:	69ba      	ldr	r2, [r7, #24]
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	21a0      	movs	r1, #160	@ 0xa0
 800c9f0:	1879      	adds	r1, r7, r1
 800c9f2:	600a      	str	r2, [r1, #0]
 800c9f4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	2294      	movs	r2, #148	@ 0x94
 800c9fa:	18ba      	adds	r2, r7, r2
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	e02c      	b.n	800ca5a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca00:	2330      	movs	r3, #48	@ 0x30
 800ca02:	18fa      	adds	r2, r7, r3
 800ca04:	2394      	movs	r3, #148	@ 0x94
 800ca06:	18fb      	adds	r3, r7, r3
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	18d3      	adds	r3, r2, r3
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca14:	3920      	subs	r1, #32
 800ca16:	2900      	cmp	r1, #0
 800ca18:	db03      	blt.n	800ca22 <calculateSPLQ31+0x412>
 800ca1a:	0018      	movs	r0, r3
 800ca1c:	40c8      	lsrs	r0, r1
 800ca1e:	0004      	movs	r4, r0
 800ca20:	e00a      	b.n	800ca38 <calculateSPLQ31+0x428>
 800ca22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca24:	2020      	movs	r0, #32
 800ca26:	1a41      	subs	r1, r0, r1
 800ca28:	0018      	movs	r0, r3
 800ca2a:	4088      	lsls	r0, r1
 800ca2c:	0001      	movs	r1, r0
 800ca2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca30:	0016      	movs	r6, r2
 800ca32:	40c6      	lsrs	r6, r0
 800ca34:	0034      	movs	r4, r6
 800ca36:	430c      	orrs	r4, r1
 800ca38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca3a:	40cb      	lsrs	r3, r1
 800ca3c:	001d      	movs	r5, r3
 800ca3e:	2330      	movs	r3, #48	@ 0x30
 800ca40:	18fa      	adds	r2, r7, r3
 800ca42:	2194      	movs	r1, #148	@ 0x94
 800ca44:	187b      	adds	r3, r7, r1
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	18d3      	adds	r3, r2, r3
 800ca4c:	601c      	str	r4, [r3, #0]
 800ca4e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca50:	187b      	adds	r3, r7, r1
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	187a      	adds	r2, r7, r1
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	2394      	movs	r3, #148	@ 0x94
 800ca5c:	18fb      	adds	r3, r7, r3
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b05      	cmp	r3, #5
 800ca62:	d9cd      	bls.n	800ca00 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ca64:	230f      	movs	r3, #15
 800ca66:	425d      	negs	r5, r3
 800ca68:	2305      	movs	r3, #5
 800ca6a:	425e      	negs	r6, r3
 800ca6c:	4b4a      	ldr	r3, [pc, #296]	@ (800cb98 <calculateSPLQ31+0x588>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	4b4a      	ldr	r3, [pc, #296]	@ (800cb9c <calculateSPLQ31+0x58c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	21a0      	movs	r1, #160	@ 0xa0
 800ca7a:	1879      	adds	r1, r7, r1
 800ca7c:	6808      	ldr	r0, [r1, #0]
 800ca7e:	6849      	ldr	r1, [r1, #4]
 800ca80:	4c47      	ldr	r4, [pc, #284]	@ (800cba0 <calculateSPLQ31+0x590>)
 800ca82:	9403      	str	r4, [sp, #12]
 800ca84:	4c47      	ldr	r4, [pc, #284]	@ (800cba4 <calculateSPLQ31+0x594>)
 800ca86:	9402      	str	r4, [sp, #8]
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	9200      	str	r2, [sp, #0]
 800ca8c:	0033      	movs	r3, r6
 800ca8e:	002a      	movs	r2, r5
 800ca90:	f000 fa86 	bl	800cfa0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ca94:	2300      	movs	r3, #0
 800ca96:	2290      	movs	r2, #144	@ 0x90
 800ca98:	18ba      	adds	r2, r7, r2
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	e026      	b.n	800caec <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ca9e:	2330      	movs	r3, #48	@ 0x30
 800caa0:	18fa      	adds	r2, r7, r3
 800caa2:	2490      	movs	r4, #144	@ 0x90
 800caa4:	193b      	adds	r3, r7, r4
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	18d3      	adds	r3, r2, r3
 800caac:	6818      	ldr	r0, [r3, #0]
 800caae:	6859      	ldr	r1, [r3, #4]
 800cab0:	230f      	movs	r3, #15
 800cab2:	425d      	negs	r5, r3
 800cab4:	2305      	movs	r3, #5
 800cab6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cab8:	193b      	adds	r3, r7, r4
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	009a      	lsls	r2, r3, #2
 800cabe:	4b3a      	ldr	r3, [pc, #232]	@ (800cba8 <calculateSPLQ31+0x598>)
 800cac0:	18d3      	adds	r3, r2, r3
 800cac2:	193a      	adds	r2, r7, r4
 800cac4:	6812      	ldr	r2, [r2, #0]
 800cac6:	0094      	lsls	r4, r2, #2
 800cac8:	4a38      	ldr	r2, [pc, #224]	@ (800cbac <calculateSPLQ31+0x59c>)
 800caca:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cacc:	9203      	str	r2, [sp, #12]
 800cace:	9302      	str	r3, [sp, #8]
 800cad0:	2300      	movs	r3, #0
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	2300      	movs	r3, #0
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	0033      	movs	r3, r6
 800cada:	002a      	movs	r2, r5
 800cadc:	f000 fa60 	bl	800cfa0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cae0:	2490      	movs	r4, #144	@ 0x90
 800cae2:	193b      	adds	r3, r7, r4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3301      	adds	r3, #1
 800cae8:	193a      	adds	r2, r7, r4
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	2390      	movs	r3, #144	@ 0x90
 800caee:	18fb      	adds	r3, r7, r3
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b05      	cmp	r3, #5
 800caf4:	d9d3      	bls.n	800ca9e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800caf6:	4b2b      	ldr	r3, [pc, #172]	@ (800cba4 <calculateSPLQ31+0x594>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	4b2d      	ldr	r3, [pc, #180]	@ (800cbb0 <calculateSPLQ31+0x5a0>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	18d2      	adds	r2, r2, r3
 800cb00:	4b2b      	ldr	r3, [pc, #172]	@ (800cbb0 <calculateSPLQ31+0x5a0>)
 800cb02:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb04:	4b26      	ldr	r3, [pc, #152]	@ (800cba0 <calculateSPLQ31+0x590>)
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	4b2a      	ldr	r3, [pc, #168]	@ (800cbb4 <calculateSPLQ31+0x5a4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	18d2      	adds	r2, r2, r3
 800cb0e:	4b29      	ldr	r3, [pc, #164]	@ (800cbb4 <calculateSPLQ31+0x5a4>)
 800cb10:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb12:	2300      	movs	r3, #0
 800cb14:	228c      	movs	r2, #140	@ 0x8c
 800cb16:	18ba      	adds	r2, r7, r2
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	e025      	b.n	800cb68 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb1c:	4b22      	ldr	r3, [pc, #136]	@ (800cba8 <calculateSPLQ31+0x598>)
 800cb1e:	208c      	movs	r0, #140	@ 0x8c
 800cb20:	183a      	adds	r2, r7, r0
 800cb22:	6812      	ldr	r2, [r2, #0]
 800cb24:	0092      	lsls	r2, r2, #2
 800cb26:	58d2      	ldr	r2, [r2, r3]
 800cb28:	4b23      	ldr	r3, [pc, #140]	@ (800cbb8 <calculateSPLQ31+0x5a8>)
 800cb2a:	1839      	adds	r1, r7, r0
 800cb2c:	6809      	ldr	r1, [r1, #0]
 800cb2e:	0089      	lsls	r1, r1, #2
 800cb30:	58cb      	ldr	r3, [r1, r3]
 800cb32:	18d1      	adds	r1, r2, r3
 800cb34:	4b20      	ldr	r3, [pc, #128]	@ (800cbb8 <calculateSPLQ31+0x5a8>)
 800cb36:	183a      	adds	r2, r7, r0
 800cb38:	6812      	ldr	r2, [r2, #0]
 800cb3a:	0092      	lsls	r2, r2, #2
 800cb3c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb3e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbac <calculateSPLQ31+0x59c>)
 800cb40:	183a      	adds	r2, r7, r0
 800cb42:	6812      	ldr	r2, [r2, #0]
 800cb44:	0092      	lsls	r2, r2, #2
 800cb46:	58d2      	ldr	r2, [r2, r3]
 800cb48:	4b1c      	ldr	r3, [pc, #112]	@ (800cbbc <calculateSPLQ31+0x5ac>)
 800cb4a:	1839      	adds	r1, r7, r0
 800cb4c:	6809      	ldr	r1, [r1, #0]
 800cb4e:	0089      	lsls	r1, r1, #2
 800cb50:	58cb      	ldr	r3, [r1, r3]
 800cb52:	18d1      	adds	r1, r2, r3
 800cb54:	4b19      	ldr	r3, [pc, #100]	@ (800cbbc <calculateSPLQ31+0x5ac>)
 800cb56:	183a      	adds	r2, r7, r0
 800cb58:	6812      	ldr	r2, [r2, #0]
 800cb5a:	0092      	lsls	r2, r2, #2
 800cb5c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb5e:	183b      	adds	r3, r7, r0
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	183a      	adds	r2, r7, r0
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	238c      	movs	r3, #140	@ 0x8c
 800cb6a:	18fb      	adds	r3, r7, r3
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b05      	cmp	r3, #5
 800cb70:	d9d4      	bls.n	800cb1c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cb72:	4b13      	ldr	r3, [pc, #76]	@ (800cbc0 <calculateSPLQ31+0x5b0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	4b11      	ldr	r3, [pc, #68]	@ (800cbc0 <calculateSPLQ31+0x5b0>)
 800cb7a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cb7c:	4b10      	ldr	r3, [pc, #64]	@ (800cbc0 <calculateSPLQ31+0x5b0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b0f      	cmp	r3, #15
 800cb82:	d905      	bls.n	800cb90 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cb84:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc4 <calculateSPLQ31+0x5b4>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cb8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc8 <calculateSPLQ31+0x5b8>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	701a      	strb	r2, [r3, #0]
    }
}
 800cb90:	46c0      	nop			@ (mov r8, r8)
 800cb92:	46bd      	mov	sp, r7
 800cb94:	b02f      	add	sp, #188	@ 0xbc
 800cb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb98:	200000c0 	.word	0x200000c0
 800cb9c:	200000c4 	.word	0x200000c4
 800cba0:	20001180 	.word	0x20001180
 800cba4:	2000117c 	.word	0x2000117c
 800cba8:	20001184 	.word	0x20001184
 800cbac:	2000119c 	.word	0x2000119c
 800cbb0:	20001bc4 	.word	0x20001bc4
 800cbb4:	20001bc8 	.word	0x20001bc8
 800cbb8:	20001bcc 	.word	0x20001bcc
 800cbbc:	20001be4 	.word	0x20001be4
 800cbc0:	20001bfc 	.word	0x20001bfc
 800cbc4:	20001171 	.word	0x20001171
 800cbc8:	2000116f 	.word	0x2000116f

0800cbcc <resetSPLstate>:

static void resetSPLstate(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cbd2:	4b11      	ldr	r3, [pc, #68]	@ (800cc18 <resetSPLstate+0x4c>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cbd8:	4b10      	ldr	r3, [pc, #64]	@ (800cc1c <resetSPLstate+0x50>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cbde:	4b10      	ldr	r3, [pc, #64]	@ (800cc20 <resetSPLstate+0x54>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	607b      	str	r3, [r7, #4]
 800cbe8:	e00c      	b.n	800cc04 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cbea:	4b0e      	ldr	r3, [pc, #56]	@ (800cc24 <resetSPLstate+0x58>)
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	0092      	lsls	r2, r2, #2
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800cc28 <resetSPLstate+0x5c>)
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	0092      	lsls	r2, r2, #2
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3301      	adds	r3, #1
 800cc02:	607b      	str	r3, [r7, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d9ef      	bls.n	800cbea <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc0a:	4b08      	ldr	r3, [pc, #32]	@ (800cc2c <resetSPLstate+0x60>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	701a      	strb	r2, [r3, #0]
}
 800cc10:	46c0      	nop			@ (mov r8, r8)
 800cc12:	46bd      	mov	sp, r7
 800cc14:	b002      	add	sp, #8
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	20001bc4 	.word	0x20001bc4
 800cc1c:	20001bc8 	.word	0x20001bc8
 800cc20:	20001bfc 	.word	0x20001bfc
 800cc24:	20001bcc 	.word	0x20001bcc
 800cc28:	20001be4 	.word	0x20001be4
 800cc2c:	20001171 	.word	0x20001171

0800cc30 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc30:	b5b0      	push	{r4, r5, r7, lr}
 800cc32:	b090      	sub	sp, #64	@ 0x40
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	0019      	movs	r1, r3
 800cc3c:	1dfb      	adds	r3, r7, #7
 800cc3e:	701a      	strb	r2, [r3, #0]
 800cc40:	1dbb      	adds	r3, r7, #6
 800cc42:	1c0a      	adds	r2, r1, #0
 800cc44:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc46:	1dfb      	adds	r3, r7, #7
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d005      	beq.n	800cc5a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc4e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cc54:	4b3a      	ldr	r3, [pc, #232]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cc62:	2305      	movs	r3, #5
 800cc64:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cc66:	2300      	movs	r3, #0
 800cc68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc6a:	e040      	b.n	800ccee <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cc6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	18d3      	adds	r3, r2, r3
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc78:	409a      	lsls	r2, r3
 800cc7a:	0013      	movs	r3, r2
 800cc7c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cc7e:	4b30      	ldr	r3, [pc, #192]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	425a      	negs	r2, r3
 800cc84:	4b2e      	ldr	r3, [pc, #184]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc86:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cc88:	2418      	movs	r4, #24
 800cc8a:	193a      	adds	r2, r7, r4
 800cc8c:	492c      	ldr	r1, [pc, #176]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc8e:	231c      	movs	r3, #28
 800cc90:	18f8      	adds	r0, r7, r3
 800cc92:	2301      	movs	r3, #1
 800cc94:	f011 fdb2 	bl	801e7fc <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cc98:	2514      	movs	r5, #20
 800cc9a:	197a      	adds	r2, r7, r5
 800cc9c:	1939      	adds	r1, r7, r4
 800cc9e:	4829      	ldr	r0, [pc, #164]	@ (800cd44 <getFilteredMaxAmplitudeQ31+0x114>)
 800cca0:	2301      	movs	r3, #1
 800cca2:	f011 fd79 	bl	801e798 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cca6:	2410      	movs	r4, #16
 800cca8:	193a      	adds	r2, r7, r4
 800ccaa:	4924      	ldr	r1, [pc, #144]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccac:	4826      	ldr	r0, [pc, #152]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x118>)
 800ccae:	2301      	movs	r3, #1
 800ccb0:	f011 fd72 	bl	801e798 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800ccb4:	4a21      	ldr	r2, [pc, #132]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccb6:	1939      	adds	r1, r7, r4
 800ccb8:	1978      	adds	r0, r7, r5
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f011 fd9e 	bl	801e7fc <arm_add_q31>

        lastData = fx;
 800ccc0:	69fa      	ldr	r2, [r7, #28]
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccc4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ccc6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cccc:	429a      	cmp	r2, r3
 800ccce:	da03      	bge.n	800ccd8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ccd0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccd6:	e007      	b.n	800cce8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800ccd8:	4b18      	ldr	r3, [pc, #96]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccde:	429a      	cmp	r2, r3
 800cce0:	dd02      	ble.n	800cce8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cce2:	4b16      	ldr	r3, [pc, #88]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccea:	3301      	adds	r3, #1
 800ccec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d3ba      	bcc.n	800cc6c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	17da      	asrs	r2, r3, #31
 800ccfa:	189b      	adds	r3, r3, r2
 800ccfc:	4053      	eors	r3, r2
 800ccfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd02:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d200      	bcs.n	800cd0e <getFilteredMaxAmplitudeQ31+0xde>
 800cd0c:	0013      	movs	r3, r2
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd14:	40da      	lsrs	r2, r3
 800cd16:	0013      	movs	r3, r2
 800cd18:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd1a:	1dbb      	adds	r3, r7, #6
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <getFilteredMaxAmplitudeQ31+0x102>
 800cd22:	4b0a      	ldr	r3, [pc, #40]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6a3a      	ldr	r2, [r7, #32]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d902      	bls.n	800cd32 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd2c:	4b07      	ldr	r3, [pc, #28]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd2e:	6a3a      	ldr	r2, [r7, #32]
 800cd30:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd32:	6a3b      	ldr	r3, [r7, #32]
}
 800cd34:	0018      	movs	r0, r3
 800cd36:	46bd      	mov	sp, r7
 800cd38:	b010      	add	sp, #64	@ 0x40
 800cd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd3c:	20002000 	.word	0x20002000
 800cd40:	20002004 	.word	0x20002004
 800cd44:	080257f0 	.word	0x080257f0
 800cd48:	080257f4 	.word	0x080257f4
 800cd4c:	20001178 	.word	0x20001178

0800cd50 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cd5c:	4913      	ldr	r1, [pc, #76]	@ (800cdac <floatToIntAndFrac2dp+0x5c>)
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f7f4 f91e 	bl	8000fa0 <__aeabi_fmul>
 800cd64:	1c03      	adds	r3, r0, #0
 800cd66:	1c18      	adds	r0, r3, #0
 800cd68:	f016 f97c 	bl	8023064 <roundf>
 800cd6c:	1c03      	adds	r3, r0, #0
 800cd6e:	1c18      	adds	r0, r3, #0
 800cd70:	f7f3 fc54 	bl	800061c <__aeabi_f2uiz>
 800cd74:	0003      	movs	r3, r0
 800cd76:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2164      	movs	r1, #100	@ 0x64
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	f7f3 fa11 	bl	80001a4 <__udivsi3>
 800cd82:	0003      	movs	r3, r0
 800cd84:	001a      	movs	r2, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2164      	movs	r1, #100	@ 0x64
 800cd96:	434b      	muls	r3, r1
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	701a      	strb	r2, [r3, #0]
}
 800cda2:	46c0      	nop			@ (mov r8, r8)
 800cda4:	46bd      	mov	sp, r7
 800cda6:	b006      	add	sp, #24
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	42c80000 	.word	0x42c80000

0800cdb0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800cdbc:	4914      	ldr	r1, [pc, #80]	@ (800ce10 <floatToIntAndFrac1dp+0x60>)
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7f4 f8ee 	bl	8000fa0 <__aeabi_fmul>
 800cdc4:	1c03      	adds	r3, r0, #0
 800cdc6:	1c18      	adds	r0, r3, #0
 800cdc8:	f016 f94c 	bl	8023064 <roundf>
 800cdcc:	1c03      	adds	r3, r0, #0
 800cdce:	1c18      	adds	r0, r3, #0
 800cdd0:	f7f3 fc24 	bl	800061c <__aeabi_f2uiz>
 800cdd4:	0003      	movs	r3, r0
 800cdd6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	210a      	movs	r1, #10
 800cddc:	0018      	movs	r0, r3
 800cdde:	f7f3 f9e1 	bl	80001a4 <__udivsi3>
 800cde2:	0003      	movs	r3, r0
 800cde4:	001a      	movs	r2, r3
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	1c19      	adds	r1, r3, #0
 800cdf6:	0089      	lsls	r1, r1, #2
 800cdf8:	18cb      	adds	r3, r1, r3
 800cdfa:	18db      	adds	r3, r3, r3
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	701a      	strb	r2, [r3, #0]
}
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b006      	add	sp, #24
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	41200000 	.word	0x41200000

0800ce14 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce14:	b590      	push	{r4, r7, lr}
 800ce16:	b087      	sub	sp, #28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7f4 fbd4 	bl	80015d0 <__aeabi_i2f>
 800ce28:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce2a:	6838      	ldr	r0, [r7, #0]
 800ce2c:	f7f4 fbd0 	bl	80015d0 <__aeabi_i2f>
 800ce30:	1c03      	adds	r3, r0, #0
 800ce32:	4918      	ldr	r1, [pc, #96]	@ (800ce94 <sumToIntAverage+0x80>)
 800ce34:	1c18      	adds	r0, r3, #0
 800ce36:	f7f3 fecd 	bl	8000bd4 <__aeabi_fdiv>
 800ce3a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce3c:	1c19      	adds	r1, r3, #0
 800ce3e:	1c20      	adds	r0, r4, #0
 800ce40:	f7f3 fd3e 	bl	80008c0 <__aeabi_fadd>
 800ce44:	1c03      	adds	r3, r0, #0
 800ce46:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce4a:	f7f4 fc0d 	bl	8001668 <__aeabi_ui2f>
 800ce4e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce50:	1c19      	adds	r1, r3, #0
 800ce52:	1c20      	adds	r0, r4, #0
 800ce54:	f7f3 febe 	bl	8000bd4 <__aeabi_fdiv>
 800ce58:	1c03      	adds	r3, r0, #0
 800ce5a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	2310      	movs	r3, #16
 800ce64:	18f9      	adds	r1, r7, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	1c18      	adds	r0, r3, #0
 800ce6a:	f7ff ffa1 	bl	800cdb0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2bff      	cmp	r3, #255	@ 0xff
 800ce72:	d906      	bls.n	800ce82 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	22ff      	movs	r2, #255	@ 0xff
 800ce78:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2209      	movs	r2, #9
 800ce7e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ce80:	e003      	b.n	800ce8a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	701a      	strb	r2, [r3, #0]
}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	b007      	add	sp, #28
 800ce90:	bd90      	pop	{r4, r7, pc}
 800ce92:	46c0      	nop			@ (mov r8, r8)
 800ce94:	41200000 	.word	0x41200000

0800ce98 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2280      	movs	r2, #128	@ 0x80
 800ceaa:	0612      	lsls	r2, r2, #24
 800ceac:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4a18      	ldr	r2, [pc, #96]	@ (800cf14 <findMinMax+0x7c>)
 800ceb2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	e022      	b.n	800cf00 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	18d3      	adds	r3, r2, r3
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	da06      	bge.n	800ceda <findMinMax+0x42>
        {
            min[0] = array[i];
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	18d3      	adds	r3, r2, r3
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	18d3      	adds	r3, r2, r3
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	dd06      	ble.n	800cefa <findMinMax+0x62>
        {
            max[0] = array[i];
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	18d3      	adds	r3, r2, r3
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	3301      	adds	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d3d8      	bcc.n	800ceba <findMinMax+0x22>
        }
    }
}
 800cf08:	46c0      	nop			@ (mov r8, r8)
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	b006      	add	sp, #24
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	46c0      	nop			@ (mov r8, r8)
 800cf14:	7fffffff 	.word	0x7fffffff

0800cf18 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d302      	bcc.n	800cf34 <getPo2factor+0x1c>
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d107      	bne.n	800cf44 <getPo2factor+0x2c>
    {
        return 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	e00d      	b.n	800cf54 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d2f5      	bcs.n	800cf38 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf52:	68fb      	ldr	r3, [r7, #12]
}
 800cf54:	0018      	movs	r0, r3
 800cf56:	46bd      	mov	sp, r7
 800cf58:	b004      	add	sp, #16
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7f4 fb7c 	bl	8001668 <__aeabi_ui2f>
 800cf70:	1c03      	adds	r3, r0, #0
 800cf72:	1c19      	adds	r1, r3, #0
 800cf74:	68b8      	ldr	r0, [r7, #8]
 800cf76:	f7f4 f813 	bl	8000fa0 <__aeabi_fmul>
 800cf7a:	1c03      	adds	r3, r0, #0
 800cf7c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	2310      	movs	r3, #16
 800cf86:	18f9      	adds	r1, r7, r3
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	1c18      	adds	r0, r3, #0
 800cf8c:	f7ff fee0 	bl	800cd50 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	801a      	strh	r2, [r3, #0]
}
 800cf98:	46c0      	nop			@ (mov r8, r8)
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	b006      	add	sp, #24
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60b8      	str	r0, [r7, #8]
 800cfa8:	60f9      	str	r1, [r7, #12]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb0:	6a3a      	ldr	r2, [r7, #32]
 800cfb2:	68b8      	ldr	r0, [r7, #8]
 800cfb4:	68f9      	ldr	r1, [r7, #12]
 800cfb6:	f7fa f97b 	bl	80072b0 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	18d2      	adds	r2, r2, r3
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	18d2      	adds	r2, r2, r3
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	18d2      	adds	r2, r2, r3
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	18d2      	adds	r2, r2, r3
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cfda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	0011      	movs	r1, r2
 800cfe0:	0018      	movs	r0, r3
 800cfe2:	f7fa f9f5 	bl	80073d0 <correctIntFracNumber>
}
 800cfe6:	46c0      	nop			@ (mov r8, r8)
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	b004      	add	sp, #16
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b086      	sub	sp, #24
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	e019      	b.n	800d038 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	18d3      	adds	r3, r2, r3
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	3201      	adds	r2, #1
 800d014:	0052      	lsls	r2, r2, #1
 800d016:	68f9      	ldr	r1, [r7, #12]
 800d018:	188a      	adds	r2, r1, r2
 800d01a:	8812      	ldrh	r2, [r2, #0]
 800d01c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d01e:	0019      	movs	r1, r3
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d028:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d02a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	3301      	adds	r3, #1
 800d030:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	3304      	adds	r3, #4
 800d036:	613b      	str	r3, [r7, #16]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d3e1      	bcc.n	800d004 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d040:	46c0      	nop			@ (mov r8, r8)
 800d042:	46c0      	nop			@ (mov r8, r8)
 800d044:	46bd      	mov	sp, r7
 800d046:	b006      	add	sp, #24
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
  init = false;
 800d050:	4b02      	ldr	r3, [pc, #8]	@ (800d05c <InitDone+0x10>)
 800d052:	2200      	movs	r2, #0
 800d054:	701a      	strb	r2, [r3, #0]
}
 800d056:	46c0      	nop			@ (mov r8, r8)
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	200000cc 	.word	0x200000cc

0800d060 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d066:	f7f9 f947 	bl	80062f8 <ReadBatteryVoltage>
 800d06a:	1c02      	adds	r2, r0, #0
 800d06c:	4b25      	ldr	r3, [pc, #148]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d06e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d070:	4b24      	ldr	r3, [pc, #144]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4924      	ldr	r1, [pc, #144]	@ (800d108 <batteryChargeCheck+0xa8>)
 800d076:	1c18      	adds	r0, r3, #0
 800d078:	f7f3 fa5a 	bl	8000530 <__aeabi_fcmplt>
 800d07c:	1e03      	subs	r3, r0, #0
 800d07e:	d002      	beq.n	800d086 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d080:	1dfb      	adds	r3, r7, #7
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d086:	4b1f      	ldr	r3, [pc, #124]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	491f      	ldr	r1, [pc, #124]	@ (800d108 <batteryChargeCheck+0xa8>)
 800d08c:	1c18      	adds	r0, r3, #0
 800d08e:	f7f3 fa6d 	bl	800056c <__aeabi_fcmpge>
 800d092:	1e03      	subs	r3, r0, #0
 800d094:	d00d      	beq.n	800d0b2 <batteryChargeCheck+0x52>
 800d096:	4b1b      	ldr	r3, [pc, #108]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	1c18      	adds	r0, r3, #0
 800d09c:	f7f6 f9e2 	bl	8003464 <__aeabi_f2d>
 800d0a0:	4a1a      	ldr	r2, [pc, #104]	@ (800d10c <batteryChargeCheck+0xac>)
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d110 <batteryChargeCheck+0xb0>)
 800d0a4:	f7f3 fa0a 	bl	80004bc <__aeabi_dcmplt>
 800d0a8:	1e03      	subs	r3, r0, #0
 800d0aa:	d002      	beq.n	800d0b2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d0ac:	1dfb      	adds	r3, r7, #7
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d0b2:	4b14      	ldr	r3, [pc, #80]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	1c18      	adds	r0, r3, #0
 800d0b8:	f7f6 f9d4 	bl	8003464 <__aeabi_f2d>
 800d0bc:	4a13      	ldr	r2, [pc, #76]	@ (800d10c <batteryChargeCheck+0xac>)
 800d0be:	4b14      	ldr	r3, [pc, #80]	@ (800d110 <batteryChargeCheck+0xb0>)
 800d0c0:	f7f3 fa1a 	bl	80004f8 <__aeabi_dcmpge>
 800d0c4:	1e03      	subs	r3, r0, #0
 800d0c6:	d00b      	beq.n	800d0e0 <batteryChargeCheck+0x80>
 800d0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2181      	movs	r1, #129	@ 0x81
 800d0ce:	05c9      	lsls	r1, r1, #23
 800d0d0:	1c18      	adds	r0, r3, #0
 800d0d2:	f7f3 fa2d 	bl	8000530 <__aeabi_fcmplt>
 800d0d6:	1e03      	subs	r3, r0, #0
 800d0d8:	d002      	beq.n	800d0e0 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d0da:	1dfb      	adds	r3, r7, #7
 800d0dc:	2202      	movs	r2, #2
 800d0de:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d0e0:	4b08      	ldr	r3, [pc, #32]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2181      	movs	r1, #129	@ 0x81
 800d0e6:	05c9      	lsls	r1, r1, #23
 800d0e8:	1c18      	adds	r0, r3, #0
 800d0ea:	f7f3 fa3f 	bl	800056c <__aeabi_fcmpge>
 800d0ee:	1e03      	subs	r3, r0, #0
 800d0f0:	d002      	beq.n	800d0f8 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d0f2:	1dfb      	adds	r3, r7, #7
 800d0f4:	2203      	movs	r2, #3
 800d0f6:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d0f8:	1dfb      	adds	r3, r7, #7
 800d0fa:	781b      	ldrb	r3, [r3, #0]
}
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	46bd      	mov	sp, r7
 800d100:	b002      	add	sp, #8
 800d102:	bd80      	pop	{r7, pc}
 800d104:	20002018 	.word	0x20002018
 800d108:	40600000 	.word	0x40600000
 800d10c:	9999999a 	.word	0x9999999a
 800d110:	400d9999 	.word	0x400d9999

0800d114 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d114:	b5b0      	push	{r4, r5, r7, lr}
 800d116:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d118:	f7f9 f950 	bl	80063bc <ReadSolarVoltage>
 800d11c:	0003      	movs	r3, r0
 800d11e:	001a      	movs	r2, r3
 800d120:	4b1a      	ldr	r3, [pc, #104]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d122:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d124:	4b19      	ldr	r3, [pc, #100]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	4a19      	ldr	r2, [pc, #100]	@ (800d190 <Calculate_LED_ON+0x7c>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d802      	bhi.n	800d134 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d12e:	4b17      	ldr	r3, [pc, #92]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d130:	4a18      	ldr	r2, [pc, #96]	@ (800d194 <Calculate_LED_ON+0x80>)
 800d132:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d134:	4b15      	ldr	r3, [pc, #84]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	4a17      	ldr	r2, [pc, #92]	@ (800d198 <Calculate_LED_ON+0x84>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d902      	bls.n	800d144 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d13e:	4b13      	ldr	r3, [pc, #76]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d140:	4a15      	ldr	r2, [pc, #84]	@ (800d198 <Calculate_LED_ON+0x84>)
 800d142:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d144:	4b11      	ldr	r3, [pc, #68]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	0018      	movs	r0, r3
 800d14a:	f7f6 f939 	bl	80033c0 <__aeabi_i2d>
 800d14e:	0004      	movs	r4, r0
 800d150:	000d      	movs	r5, r1
 800d152:	4b0e      	ldr	r3, [pc, #56]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	001a      	movs	r2, r3
 800d158:	4b10      	ldr	r3, [pc, #64]	@ (800d19c <Calculate_LED_ON+0x88>)
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	0018      	movs	r0, r3
 800d15e:	f7f6 f92f 	bl	80033c0 <__aeabi_i2d>
 800d162:	2200      	movs	r2, #0
 800d164:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a0 <Calculate_LED_ON+0x8c>)
 800d166:	f7f5 fa69 	bl	800263c <__aeabi_dmul>
 800d16a:	0002      	movs	r2, r0
 800d16c:	000b      	movs	r3, r1
 800d16e:	0020      	movs	r0, r4
 800d170:	0029      	movs	r1, r5
 800d172:	f7f4 fabb 	bl	80016ec <__aeabi_dadd>
 800d176:	0002      	movs	r2, r0
 800d178:	000b      	movs	r3, r1
 800d17a:	0010      	movs	r0, r2
 800d17c:	0019      	movs	r1, r3
 800d17e:	f7f3 fa65 	bl	800064c <__aeabi_d2uiz>
 800d182:	0003      	movs	r3, r0
 800d184:	b29b      	uxth	r3, r3
}
 800d186:	0018      	movs	r0, r3
 800d188:	46bd      	mov	sp, r7
 800d18a:	bdb0      	pop	{r4, r5, r7, pc}
 800d18c:	2000201c 	.word	0x2000201c
 800d190:	00000b53 	.word	0x00000b53
 800d194:	00000b54 	.word	0x00000b54
 800d198:	0000125c 	.word	0x0000125c
 800d19c:	00000dee 	.word	0x00000dee
 800d1a0:	3ff80000 	.word	0x3ff80000

0800d1a4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	0004      	movs	r4, r0
 800d1ac:	0008      	movs	r0, r1
 800d1ae:	0011      	movs	r1, r2
 800d1b0:	1dbb      	adds	r3, r7, #6
 800d1b2:	1c22      	adds	r2, r4, #0
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	1d3b      	adds	r3, r7, #4
 800d1b8:	1c02      	adds	r2, r0, #0
 800d1ba:	801a      	strh	r2, [r3, #0]
 800d1bc:	1cbb      	adds	r3, r7, #2
 800d1be:	1c0a      	adds	r2, r1, #0
 800d1c0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d200 <SetStatusLED+0x5c>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d107      	bne.n	800d1da <SetStatusLED+0x36>
 800d1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d204 <SetStatusLED+0x60>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d103      	bne.n	800d1da <SetStatusLED+0x36>
 800d1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d208 <SetStatusLED+0x64>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00e      	beq.n	800d1f8 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d1da:	2380      	movs	r3, #128	@ 0x80
 800d1dc:	05db      	lsls	r3, r3, #23
 800d1de:	1dba      	adds	r2, r7, #6
 800d1e0:	8812      	ldrh	r2, [r2, #0]
 800d1e2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	05db      	lsls	r3, r3, #23
 800d1e8:	1d3a      	adds	r2, r7, #4
 800d1ea:	8812      	ldrh	r2, [r2, #0]
 800d1ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d1ee:	2380      	movs	r3, #128	@ 0x80
 800d1f0:	05db      	lsls	r3, r3, #23
 800d1f2:	1cba      	adds	r2, r7, #2
 800d1f4:	8812      	ldrh	r2, [r2, #0]
 800d1f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d1f8:	46c0      	nop			@ (mov r8, r8)
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	b003      	add	sp, #12
 800d1fe:	bd90      	pop	{r4, r7, pc}
 800d200:	20002009 	.word	0x20002009
 800d204:	200000cc 	.word	0x200000cc
 800d208:	2000200a 	.word	0x2000200a

0800d20c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	0004      	movs	r4, r0
 800d214:	0008      	movs	r0, r1
 800d216:	0011      	movs	r1, r2
 800d218:	1dfb      	adds	r3, r7, #7
 800d21a:	1c22      	adds	r2, r4, #0
 800d21c:	701a      	strb	r2, [r3, #0]
 800d21e:	1dbb      	adds	r3, r7, #6
 800d220:	1c02      	adds	r2, r0, #0
 800d222:	701a      	strb	r2, [r3, #0]
 800d224:	1d7b      	adds	r3, r7, #5
 800d226:	1c0a      	adds	r2, r1, #0
 800d228:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d22a:	4b19      	ldr	r3, [pc, #100]	@ (800d290 <SetDBLED+0x84>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d107      	bne.n	800d242 <SetDBLED+0x36>
 800d232:	4b18      	ldr	r3, [pc, #96]	@ (800d294 <SetDBLED+0x88>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d103      	bne.n	800d242 <SetDBLED+0x36>
 800d23a:	4b17      	ldr	r3, [pc, #92]	@ (800d298 <SetDBLED+0x8c>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d022      	beq.n	800d288 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d242:	1dfb      	adds	r3, r7, #7
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2201      	movs	r2, #1
 800d248:	4053      	eors	r3, r2
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	001a      	movs	r2, r3
 800d24e:	4b13      	ldr	r3, [pc, #76]	@ (800d29c <SetDBLED+0x90>)
 800d250:	2101      	movs	r1, #1
 800d252:	0018      	movs	r0, r3
 800d254:	f003 f8d7 	bl	8010406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d258:	1dbb      	adds	r3, r7, #6
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2201      	movs	r2, #1
 800d25e:	4053      	eors	r3, r2
 800d260:	b2db      	uxtb	r3, r3
 800d262:	001a      	movs	r2, r3
 800d264:	2380      	movs	r3, #128	@ 0x80
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	480c      	ldr	r0, [pc, #48]	@ (800d29c <SetDBLED+0x90>)
 800d26a:	0019      	movs	r1, r3
 800d26c:	f003 f8cb 	bl	8010406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d270:	1d7b      	adds	r3, r7, #5
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2201      	movs	r2, #1
 800d276:	4053      	eors	r3, r2
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	001a      	movs	r2, r3
 800d27c:	2380      	movs	r3, #128	@ 0x80
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4806      	ldr	r0, [pc, #24]	@ (800d29c <SetDBLED+0x90>)
 800d282:	0019      	movs	r1, r3
 800d284:	f003 f8bf 	bl	8010406 <HAL_GPIO_WritePin>
  }
}
 800d288:	46c0      	nop			@ (mov r8, r8)
 800d28a:	46bd      	mov	sp, r7
 800d28c:	b003      	add	sp, #12
 800d28e:	bd90      	pop	{r4, r7, pc}
 800d290:	20002009 	.word	0x20002009
 800d294:	200000cc 	.word	0x200000cc
 800d298:	2000200a 	.word	0x2000200a
 800d29c:	50000400 	.word	0x50000400

0800d2a0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	0004      	movs	r4, r0
 800d2a8:	0008      	movs	r0, r1
 800d2aa:	0011      	movs	r1, r2
 800d2ac:	1dbb      	adds	r3, r7, #6
 800d2ae:	1c22      	adds	r2, r4, #0
 800d2b0:	801a      	strh	r2, [r3, #0]
 800d2b2:	1d3b      	adds	r3, r7, #4
 800d2b4:	1c02      	adds	r2, r0, #0
 800d2b6:	801a      	strh	r2, [r3, #0]
 800d2b8:	1cbb      	adds	r3, r7, #2
 800d2ba:	1c0a      	adds	r2, r1, #0
 800d2bc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d2be:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f8 <SetVocLED+0x58>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d107      	bne.n	800d2d6 <SetVocLED+0x36>
 800d2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d2fc <SetVocLED+0x5c>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d103      	bne.n	800d2d6 <SetVocLED+0x36>
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d300 <SetVocLED+0x60>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00b      	beq.n	800d2ee <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d304 <SetVocLED+0x64>)
 800d2d8:	1dba      	adds	r2, r7, #6
 800d2da:	8812      	ldrh	r2, [r2, #0]
 800d2dc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d2de:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <SetVocLED+0x64>)
 800d2e0:	1d3a      	adds	r2, r7, #4
 800d2e2:	8812      	ldrh	r2, [r2, #0]
 800d2e4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d2e6:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <SetVocLED+0x64>)
 800d2e8:	1cba      	adds	r2, r7, #2
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d2ee:	46c0      	nop			@ (mov r8, r8)
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	b003      	add	sp, #12
 800d2f4:	bd90      	pop	{r4, r7, pc}
 800d2f6:	46c0      	nop			@ (mov r8, r8)
 800d2f8:	20002009 	.word	0x20002009
 800d2fc:	200000cc 	.word	0x200000cc
 800d300:	2000200a 	.word	0x2000200a
 800d304:	40000400 	.word	0x40000400

0800d308 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d30c:	4b08      	ldr	r3, [pc, #32]	@ (800d330 <SetMeasurementIndicator+0x28>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d103      	bne.n	800d31c <SetMeasurementIndicator+0x14>
 800d314:	4b07      	ldr	r3, [pc, #28]	@ (800d334 <SetMeasurementIndicator+0x2c>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d006      	beq.n	800d32a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d31c:	f7ff fefa 	bl	800d114 <Calculate_LED_ON>
 800d320:	0003      	movs	r3, r0
 800d322:	001a      	movs	r2, r3
 800d324:	2380      	movs	r3, #128	@ 0x80
 800d326:	05db      	lsls	r3, r3, #23
 800d328:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d32a:	46c0      	nop			@ (mov r8, r8)
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	20002009 	.word	0x20002009
 800d334:	2000200a 	.word	0x2000200a

0800d338 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d33c:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <ResetMeasurementIndicator+0x24>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <ResetMeasurementIndicator+0x14>
 800d344:	4b06      	ldr	r3, [pc, #24]	@ (800d360 <ResetMeasurementIndicator+0x28>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d004      	beq.n	800d356 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d34c:	2380      	movs	r3, #128	@ 0x80
 800d34e:	05db      	lsls	r3, r3, #23
 800d350:	22fa      	movs	r2, #250	@ 0xfa
 800d352:	0112      	lsls	r2, r2, #4
 800d354:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d356:	46c0      	nop			@ (mov r8, r8)
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	20002009 	.word	0x20002009
 800d360:	2000200a 	.word	0x2000200a

0800d364 <SetMICIndicator>:
void SetMICIndicator(){
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d368:	4b19      	ldr	r3, [pc, #100]	@ (800d3d0 <SetMICIndicator+0x6c>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d103      	bne.n	800d378 <SetMICIndicator+0x14>
 800d370:	4b18      	ldr	r3, [pc, #96]	@ (800d3d4 <SetMICIndicator+0x70>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d378:	f7ff fecc 	bl	800d114 <Calculate_LED_ON>
 800d37c:	0003      	movs	r3, r0
 800d37e:	001a      	movs	r2, r3
 800d380:	2380      	movs	r3, #128	@ 0x80
 800d382:	05db      	lsls	r3, r3, #23
 800d384:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d386:	e01f      	b.n	800d3c8 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d388:	4b13      	ldr	r3, [pc, #76]	@ (800d3d8 <SetMICIndicator+0x74>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	1c18      	adds	r0, r3, #0
 800d38e:	f7f6 f869 	bl	8003464 <__aeabi_f2d>
 800d392:	4a12      	ldr	r2, [pc, #72]	@ (800d3dc <SetMICIndicator+0x78>)
 800d394:	4b12      	ldr	r3, [pc, #72]	@ (800d3e0 <SetMICIndicator+0x7c>)
 800d396:	f7f3 f8a5 	bl	80004e4 <__aeabi_dcmpgt>
 800d39a:	1e03      	subs	r3, r0, #0
 800d39c:	d00a      	beq.n	800d3b4 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d39e:	f7ff feb9 	bl	800d114 <Calculate_LED_ON>
 800d3a2:	0003      	movs	r3, r0
 800d3a4:	001a      	movs	r2, r3
 800d3a6:	2380      	movs	r3, #128	@ 0x80
 800d3a8:	05db      	lsls	r3, r3, #23
 800d3aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e4 <SetMICIndicator+0x80>)
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	701a      	strb	r2, [r3, #0]
}
 800d3b2:	e009      	b.n	800d3c8 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d3b4:	f7ff feae 	bl	800d114 <Calculate_LED_ON>
 800d3b8:	0003      	movs	r3, r0
 800d3ba:	001a      	movs	r2, r3
 800d3bc:	2380      	movs	r3, #128	@ 0x80
 800d3be:	05db      	lsls	r3, r3, #23
 800d3c0:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d3c2:	4b08      	ldr	r3, [pc, #32]	@ (800d3e4 <SetMICIndicator+0x80>)
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	701a      	strb	r2, [r3, #0]
}
 800d3c8:	46c0      	nop			@ (mov r8, r8)
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	46c0      	nop			@ (mov r8, r8)
 800d3d0:	20002009 	.word	0x20002009
 800d3d4:	2000200a 	.word	0x2000200a
 800d3d8:	20002018 	.word	0x20002018
 800d3dc:	9999999a 	.word	0x9999999a
 800d3e0:	400d9999 	.word	0x400d9999
 800d3e4:	2000200c 	.word	0x2000200c

0800d3e8 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d42c <ResetMICIndicator+0x44>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d103      	bne.n	800d3fc <ResetMICIndicator+0x14>
 800d3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d430 <ResetMICIndicator+0x48>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d005      	beq.n	800d408 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d3fc:	2380      	movs	r3, #128	@ 0x80
 800d3fe:	05db      	lsls	r3, r3, #23
 800d400:	22fa      	movs	r2, #250	@ 0xfa
 800d402:	0112      	lsls	r2, r2, #4
 800d404:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d406:	e00e      	b.n	800d426 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d408:	4b0a      	ldr	r3, [pc, #40]	@ (800d434 <ResetMICIndicator+0x4c>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d105      	bne.n	800d41c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d410:	2380      	movs	r3, #128	@ 0x80
 800d412:	05db      	lsls	r3, r3, #23
 800d414:	22fa      	movs	r2, #250	@ 0xfa
 800d416:	0112      	lsls	r2, r2, #4
 800d418:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d41a:	e004      	b.n	800d426 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d41c:	2380      	movs	r3, #128	@ 0x80
 800d41e:	05db      	lsls	r3, r3, #23
 800d420:	22fa      	movs	r2, #250	@ 0xfa
 800d422:	0112      	lsls	r2, r2, #4
 800d424:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d426:	46c0      	nop			@ (mov r8, r8)
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20002009 	.word	0x20002009
 800d430:	2000200a 	.word	0x2000200a
 800d434:	2000200c 	.word	0x2000200c

0800d438 <SetESPIndicator>:
void SetESPIndicator(){
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d43c:	4b08      	ldr	r3, [pc, #32]	@ (800d460 <SetESPIndicator+0x28>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d103      	bne.n	800d44c <SetESPIndicator+0x14>
 800d444:	4b07      	ldr	r3, [pc, #28]	@ (800d464 <SetESPIndicator+0x2c>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d006      	beq.n	800d45a <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d44c:	f7ff fe62 	bl	800d114 <Calculate_LED_ON>
 800d450:	0003      	movs	r3, r0
 800d452:	001a      	movs	r2, r3
 800d454:	2380      	movs	r3, #128	@ 0x80
 800d456:	05db      	lsls	r3, r3, #23
 800d458:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d45a:	46c0      	nop			@ (mov r8, r8)
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20002009 	.word	0x20002009
 800d464:	2000200a 	.word	0x2000200a

0800d468 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d468:	b580      	push	{r7, lr}
 800d46a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d46c:	4b07      	ldr	r3, [pc, #28]	@ (800d48c <ResetESPIndicator+0x24>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d103      	bne.n	800d47c <ResetESPIndicator+0x14>
 800d474:	4b06      	ldr	r3, [pc, #24]	@ (800d490 <ResetESPIndicator+0x28>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d47c:	2380      	movs	r3, #128	@ 0x80
 800d47e:	05db      	lsls	r3, r3, #23
 800d480:	22fa      	movs	r2, #250	@ 0xfa
 800d482:	0112      	lsls	r2, r2, #4
 800d484:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d486:	46c0      	nop			@ (mov r8, r8)
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20002009 	.word	0x20002009
 800d490:	2000200a 	.word	0x2000200a

0800d494 <SetPMIndicator>:

void SetPMIndicator() {
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d498:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d8 <SetPMIndicator+0x44>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d103      	bne.n	800d4a8 <SetPMIndicator+0x14>
 800d4a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d4dc <SetPMIndicator+0x48>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d014      	beq.n	800d4d2 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4a8:	f7ff fe34 	bl	800d114 <Calculate_LED_ON>
 800d4ac:	0003      	movs	r3, r0
 800d4ae:	001a      	movs	r2, r3
 800d4b0:	2380      	movs	r3, #128	@ 0x80
 800d4b2:	05db      	lsls	r3, r3, #23
 800d4b4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d4b6:	f7ff fe2d 	bl	800d114 <Calculate_LED_ON>
 800d4ba:	0003      	movs	r3, r0
 800d4bc:	001a      	movs	r2, r3
 800d4be:	2380      	movs	r3, #128	@ 0x80
 800d4c0:	05db      	lsls	r3, r3, #23
 800d4c2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d4c4:	f7ff fe26 	bl	800d114 <Calculate_LED_ON>
 800d4c8:	0003      	movs	r3, r0
 800d4ca:	001a      	movs	r2, r3
 800d4cc:	2380      	movs	r3, #128	@ 0x80
 800d4ce:	05db      	lsls	r3, r3, #23
 800d4d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d4d2:	46c0      	nop			@ (mov r8, r8)
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20002009 	.word	0x20002009
 800d4dc:	2000200a 	.word	0x2000200a

0800d4e0 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d518 <ResetPMIndicator+0x38>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d103      	bne.n	800d4f4 <ResetPMIndicator+0x14>
 800d4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800d51c <ResetPMIndicator+0x3c>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00e      	beq.n	800d512 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d4f4:	2380      	movs	r3, #128	@ 0x80
 800d4f6:	05db      	lsls	r3, r3, #23
 800d4f8:	22fa      	movs	r2, #250	@ 0xfa
 800d4fa:	0112      	lsls	r2, r2, #4
 800d4fc:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d4fe:	2380      	movs	r3, #128	@ 0x80
 800d500:	05db      	lsls	r3, r3, #23
 800d502:	22fa      	movs	r2, #250	@ 0xfa
 800d504:	0112      	lsls	r2, r2, #4
 800d506:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d508:	2380      	movs	r3, #128	@ 0x80
 800d50a:	05db      	lsls	r3, r3, #23
 800d50c:	22fa      	movs	r2, #250	@ 0xfa
 800d50e:	0112      	lsls	r2, r2, #4
 800d510:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d512:	46c0      	nop			@ (mov r8, r8)
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	20002009 	.word	0x20002009
 800d51c:	2000200a 	.word	0x2000200a

0800d520 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d524:	23fa      	movs	r3, #250	@ 0xfa
 800d526:	011a      	lsls	r2, r3, #4
 800d528:	23fa      	movs	r3, #250	@ 0xfa
 800d52a:	0119      	lsls	r1, r3, #4
 800d52c:	23fa      	movs	r3, #250	@ 0xfa
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	0018      	movs	r0, r3
 800d532:	f7ff fe37 	bl	800d1a4 <SetStatusLED>
  SetDBLED(false,false,false);
 800d536:	2200      	movs	r2, #0
 800d538:	2100      	movs	r1, #0
 800d53a:	2000      	movs	r0, #0
 800d53c:	f7ff fe66 	bl	800d20c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d540:	23fa      	movs	r3, #250	@ 0xfa
 800d542:	011a      	lsls	r2, r3, #4
 800d544:	23fa      	movs	r3, #250	@ 0xfa
 800d546:	0119      	lsls	r1, r3, #4
 800d548:	23fa      	movs	r3, #250	@ 0xfa
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	0018      	movs	r0, r3
 800d54e:	f7ff fea7 	bl	800d2a0 <SetVocLED>
return;
 800d552:	46c0      	nop			@ (mov r8, r8)
}
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <SetAllREDLED>:

void SetAllREDLED() {
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d55c:	2380      	movs	r3, #128	@ 0x80
 800d55e:	05db      	lsls	r3, r3, #23
 800d560:	2200      	movs	r2, #0
 800d562:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d564:	2380      	movs	r3, #128	@ 0x80
 800d566:	05db      	lsls	r3, r3, #23
 800d568:	22fa      	movs	r2, #250	@ 0xfa
 800d56a:	0112      	lsls	r2, r2, #4
 800d56c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d56e:	2380      	movs	r3, #128	@ 0x80
 800d570:	05db      	lsls	r3, r3, #23
 800d572:	22fa      	movs	r2, #250	@ 0xfa
 800d574:	0112      	lsls	r2, r2, #4
 800d576:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d578:	4b0c      	ldr	r3, [pc, #48]	@ (800d5ac <SetAllREDLED+0x54>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d57e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5ac <SetAllREDLED+0x54>)
 800d580:	22fa      	movs	r2, #250	@ 0xfa
 800d582:	0112      	lsls	r2, r2, #4
 800d584:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d586:	4b09      	ldr	r3, [pc, #36]	@ (800d5ac <SetAllREDLED+0x54>)
 800d588:	22fa      	movs	r2, #250	@ 0xfa
 800d58a:	0112      	lsls	r2, r2, #4
 800d58c:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d58e:	4b08      	ldr	r3, [pc, #32]	@ (800d5b0 <SetAllREDLED+0x58>)
 800d590:	2200      	movs	r2, #0
 800d592:	2101      	movs	r1, #1
 800d594:	0018      	movs	r0, r3
 800d596:	f002 ff36 	bl	8010406 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d59a:	23fa      	movs	r3, #250	@ 0xfa
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	0018      	movs	r0, r3
 800d5a0:	f001 fcaa 	bl	800eef8 <HAL_Delay>
}
 800d5a4:	46c0      	nop			@ (mov r8, r8)
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	46c0      	nop			@ (mov r8, r8)
 800d5ac:	40000400 	.word	0x40000400
 800d5b0:	50000400 	.word	0x50000400

0800d5b4 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800d5b4:	b5b0      	push	{r4, r5, r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	0002      	movs	r2, r0
 800d5bc:	1dbb      	adds	r3, r7, #6
 800d5be:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800d5c0:	1dbb      	adds	r3, r7, #6
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d05a      	beq.n	800d67e <SetVOCindicator+0xca>
 800d5c8:	1dbb      	adds	r3, r7, #6
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	2b64      	cmp	r3, #100	@ 0x64
 800d5ce:	d856      	bhi.n	800d67e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800d5d0:	1dbb      	adds	r3, r7, #6
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	f7f5 fef3 	bl	80033c0 <__aeabi_i2d>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4b5f      	ldr	r3, [pc, #380]	@ (800d75c <SetVOCindicator+0x1a8>)
 800d5de:	f7f4 fbe9 	bl	8001db4 <__aeabi_ddiv>
 800d5e2:	0002      	movs	r2, r0
 800d5e4:	000b      	movs	r3, r1
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	495d      	ldr	r1, [pc, #372]	@ (800d760 <SetVOCindicator+0x1ac>)
 800d5ea:	f7f5 faef 	bl	8002bcc <__aeabi_dsub>
 800d5ee:	0002      	movs	r2, r0
 800d5f0:	000b      	movs	r3, r1
 800d5f2:	0014      	movs	r4, r2
 800d5f4:	001d      	movs	r5, r3
 800d5f6:	4b5b      	ldr	r3, [pc, #364]	@ (800d764 <SetVOCindicator+0x1b0>)
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	f7f5 fee0 	bl	80033c0 <__aeabi_i2d>
 800d600:	0002      	movs	r2, r0
 800d602:	000b      	movs	r3, r1
 800d604:	0020      	movs	r0, r4
 800d606:	0029      	movs	r1, r5
 800d608:	f7f5 f818 	bl	800263c <__aeabi_dmul>
 800d60c:	0002      	movs	r2, r0
 800d60e:	000b      	movs	r3, r1
 800d610:	0010      	movs	r0, r2
 800d612:	0019      	movs	r1, r3
 800d614:	f7f3 f81a 	bl	800064c <__aeabi_d2uiz>
 800d618:	0003      	movs	r3, r0
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	4b52      	ldr	r3, [pc, #328]	@ (800d768 <SetVOCindicator+0x1b4>)
 800d61e:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800d620:	1dbb      	adds	r3, r7, #6
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	0018      	movs	r0, r3
 800d626:	f7f5 fecb 	bl	80033c0 <__aeabi_i2d>
 800d62a:	2200      	movs	r2, #0
 800d62c:	4b4b      	ldr	r3, [pc, #300]	@ (800d75c <SetVOCindicator+0x1a8>)
 800d62e:	f7f4 fbc1 	bl	8001db4 <__aeabi_ddiv>
 800d632:	0002      	movs	r2, r0
 800d634:	000b      	movs	r3, r1
 800d636:	0014      	movs	r4, r2
 800d638:	001d      	movs	r5, r3
 800d63a:	4b4a      	ldr	r3, [pc, #296]	@ (800d764 <SetVOCindicator+0x1b0>)
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	0018      	movs	r0, r3
 800d640:	f7f5 febe 	bl	80033c0 <__aeabi_i2d>
 800d644:	0002      	movs	r2, r0
 800d646:	000b      	movs	r3, r1
 800d648:	0020      	movs	r0, r4
 800d64a:	0029      	movs	r1, r5
 800d64c:	f7f4 fff6 	bl	800263c <__aeabi_dmul>
 800d650:	0002      	movs	r2, r0
 800d652:	000b      	movs	r3, r1
 800d654:	0010      	movs	r0, r2
 800d656:	0019      	movs	r1, r3
 800d658:	f7f2 fff8 	bl	800064c <__aeabi_d2uiz>
 800d65c:	0003      	movs	r3, r0
 800d65e:	b29a      	uxth	r2, r3
 800d660:	4b42      	ldr	r3, [pc, #264]	@ (800d76c <SetVOCindicator+0x1b8>)
 800d662:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800d664:	4b3f      	ldr	r3, [pc, #252]	@ (800d764 <SetVOCindicator+0x1b0>)
 800d666:	881a      	ldrh	r2, [r3, #0]
 800d668:	4b41      	ldr	r3, [pc, #260]	@ (800d770 <SetVOCindicator+0x1bc>)
 800d66a:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d66c:	4b40      	ldr	r3, [pc, #256]	@ (800d770 <SetVOCindicator+0x1bc>)
 800d66e:	8818      	ldrh	r0, [r3, #0]
 800d670:	4b3d      	ldr	r3, [pc, #244]	@ (800d768 <SetVOCindicator+0x1b4>)
 800d672:	8819      	ldrh	r1, [r3, #0]
 800d674:	4b3d      	ldr	r3, [pc, #244]	@ (800d76c <SetVOCindicator+0x1b8>)
 800d676:	881b      	ldrh	r3, [r3, #0]
 800d678:	001a      	movs	r2, r3
 800d67a:	f7ff fe11 	bl	800d2a0 <SetVocLED>
  }
  if(VOCi > 100){
 800d67e:	1dbb      	adds	r3, r7, #6
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	2b64      	cmp	r3, #100	@ 0x64
 800d684:	d966      	bls.n	800d754 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800d686:	1dbb      	adds	r3, r7, #6
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	0018      	movs	r0, r3
 800d68c:	f7f5 fe98 	bl	80033c0 <__aeabi_i2d>
 800d690:	2200      	movs	r2, #0
 800d692:	4b32      	ldr	r3, [pc, #200]	@ (800d75c <SetVOCindicator+0x1a8>)
 800d694:	f7f5 fa9a 	bl	8002bcc <__aeabi_dsub>
 800d698:	0002      	movs	r2, r0
 800d69a:	000b      	movs	r3, r1
 800d69c:	0010      	movs	r0, r2
 800d69e:	0019      	movs	r1, r3
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	4b34      	ldr	r3, [pc, #208]	@ (800d774 <SetVOCindicator+0x1c0>)
 800d6a4:	f7f4 fb86 	bl	8001db4 <__aeabi_ddiv>
 800d6a8:	0002      	movs	r2, r0
 800d6aa:	000b      	movs	r3, r1
 800d6ac:	0014      	movs	r4, r2
 800d6ae:	001d      	movs	r5, r3
 800d6b0:	4b2c      	ldr	r3, [pc, #176]	@ (800d764 <SetVOCindicator+0x1b0>)
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	f7f5 fe83 	bl	80033c0 <__aeabi_i2d>
 800d6ba:	0002      	movs	r2, r0
 800d6bc:	000b      	movs	r3, r1
 800d6be:	0020      	movs	r0, r4
 800d6c0:	0029      	movs	r1, r5
 800d6c2:	f7f4 ffbb 	bl	800263c <__aeabi_dmul>
 800d6c6:	0002      	movs	r2, r0
 800d6c8:	000b      	movs	r3, r1
 800d6ca:	0010      	movs	r0, r2
 800d6cc:	0019      	movs	r1, r3
 800d6ce:	f7f2 ffbd 	bl	800064c <__aeabi_d2uiz>
 800d6d2:	0003      	movs	r3, r0
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	4b24      	ldr	r3, [pc, #144]	@ (800d768 <SetVOCindicator+0x1b4>)
 800d6d8:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800d6da:	1dbb      	adds	r3, r7, #6
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	0018      	movs	r0, r3
 800d6e0:	f7f5 fe6e 	bl	80033c0 <__aeabi_i2d>
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d75c <SetVOCindicator+0x1a8>)
 800d6e8:	f7f5 fa70 	bl	8002bcc <__aeabi_dsub>
 800d6ec:	0002      	movs	r2, r0
 800d6ee:	000b      	movs	r3, r1
 800d6f0:	0010      	movs	r0, r2
 800d6f2:	0019      	movs	r1, r3
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	4b1f      	ldr	r3, [pc, #124]	@ (800d774 <SetVOCindicator+0x1c0>)
 800d6f8:	f7f4 fb5c 	bl	8001db4 <__aeabi_ddiv>
 800d6fc:	0002      	movs	r2, r0
 800d6fe:	000b      	movs	r3, r1
 800d700:	2000      	movs	r0, #0
 800d702:	4917      	ldr	r1, [pc, #92]	@ (800d760 <SetVOCindicator+0x1ac>)
 800d704:	f7f5 fa62 	bl	8002bcc <__aeabi_dsub>
 800d708:	0002      	movs	r2, r0
 800d70a:	000b      	movs	r3, r1
 800d70c:	0014      	movs	r4, r2
 800d70e:	001d      	movs	r5, r3
 800d710:	4b14      	ldr	r3, [pc, #80]	@ (800d764 <SetVOCindicator+0x1b0>)
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	0018      	movs	r0, r3
 800d716:	f7f5 fe53 	bl	80033c0 <__aeabi_i2d>
 800d71a:	0002      	movs	r2, r0
 800d71c:	000b      	movs	r3, r1
 800d71e:	0020      	movs	r0, r4
 800d720:	0029      	movs	r1, r5
 800d722:	f7f4 ff8b 	bl	800263c <__aeabi_dmul>
 800d726:	0002      	movs	r2, r0
 800d728:	000b      	movs	r3, r1
 800d72a:	0010      	movs	r0, r2
 800d72c:	0019      	movs	r1, r3
 800d72e:	f7f2 ff8d 	bl	800064c <__aeabi_d2uiz>
 800d732:	0003      	movs	r3, r0
 800d734:	b29a      	uxth	r2, r3
 800d736:	4b0e      	ldr	r3, [pc, #56]	@ (800d770 <SetVOCindicator+0x1bc>)
 800d738:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800d73a:	4b0a      	ldr	r3, [pc, #40]	@ (800d764 <SetVOCindicator+0x1b0>)
 800d73c:	881a      	ldrh	r2, [r3, #0]
 800d73e:	4b0b      	ldr	r3, [pc, #44]	@ (800d76c <SetVOCindicator+0x1b8>)
 800d740:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d742:	4b0b      	ldr	r3, [pc, #44]	@ (800d770 <SetVOCindicator+0x1bc>)
 800d744:	8818      	ldrh	r0, [r3, #0]
 800d746:	4b08      	ldr	r3, [pc, #32]	@ (800d768 <SetVOCindicator+0x1b4>)
 800d748:	8819      	ldrh	r1, [r3, #0]
 800d74a:	4b08      	ldr	r3, [pc, #32]	@ (800d76c <SetVOCindicator+0x1b8>)
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	001a      	movs	r2, r3
 800d750:	f7ff fda6 	bl	800d2a0 <SetVocLED>
  }

}
 800d754:	46c0      	nop			@ (mov r8, r8)
 800d756:	46bd      	mov	sp, r7
 800d758:	b002      	add	sp, #8
 800d75a:	bdb0      	pop	{r4, r5, r7, pc}
 800d75c:	40590000 	.word	0x40590000
 800d760:	3ff00000 	.word	0x3ff00000
 800d764:	200000ce 	.word	0x200000ce
 800d768:	2000201e 	.word	0x2000201e
 800d76c:	20002020 	.word	0x20002020
 800d770:	20002022 	.word	0x20002022
 800d774:	40790000 	.word	0x40790000

0800d778 <powerCheck>:

Battery_Status powerCheck(){
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d77e:	f7f8 fe71 	bl	8006464 <Check_USB_PowerOn>
 800d782:	0003      	movs	r3, r0
 800d784:	001a      	movs	r2, r3
 800d786:	2301      	movs	r3, #1
 800d788:	4053      	eors	r3, r2
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d005      	beq.n	800d79c <powerCheck+0x24>
    status = batteryChargeCheck();
 800d790:	1dfc      	adds	r4, r7, #7
 800d792:	f7ff fc65 	bl	800d060 <batteryChargeCheck>
 800d796:	0003      	movs	r3, r0
 800d798:	7023      	strb	r3, [r4, #0]
 800d79a:	e002      	b.n	800d7a2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d79c:	1dfb      	adds	r3, r7, #7
 800d79e:	2204      	movs	r2, #4
 800d7a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d7a2:	1dfb      	adds	r3, r7, #7
 800d7a4:	781b      	ldrb	r3, [r3, #0]
}
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	b003      	add	sp, #12
 800d7ac:	bd90      	pop	{r4, r7, pc}
	...

0800d7b0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	0002      	movs	r2, r0
 800d7b8:	1dfb      	adds	r3, r7, #7
 800d7ba:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d7bc:	1dfb      	adds	r3, r7, #7
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b04      	cmp	r3, #4
 800d7c2:	d105      	bne.n	800d7d0 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800d7c4:	4a18      	ldr	r2, [pc, #96]	@ (800d828 <powerDisplay+0x78>)
 800d7c6:	4b19      	ldr	r3, [pc, #100]	@ (800d82c <powerDisplay+0x7c>)
 800d7c8:	0019      	movs	r1, r3
 800d7ca:	2003      	movs	r0, #3
 800d7cc:	f000 ff46 	bl	800e65c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d7d0:	1dfb      	adds	r3, r7, #7
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b03      	cmp	r3, #3
 800d7d6:	d105      	bne.n	800d7e4 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d7d8:	4a15      	ldr	r2, [pc, #84]	@ (800d830 <powerDisplay+0x80>)
 800d7da:	4b14      	ldr	r3, [pc, #80]	@ (800d82c <powerDisplay+0x7c>)
 800d7dc:	0019      	movs	r1, r3
 800d7de:	2003      	movs	r0, #3
 800d7e0:	f000 ff3c 	bl	800e65c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d7e4:	1dfb      	adds	r3, r7, #7
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d105      	bne.n	800d7f8 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d7ec:	4a11      	ldr	r2, [pc, #68]	@ (800d834 <powerDisplay+0x84>)
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d82c <powerDisplay+0x7c>)
 800d7f0:	0019      	movs	r1, r3
 800d7f2:	2003      	movs	r0, #3
 800d7f4:	f000 ff32 	bl	800e65c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d7f8:	1dfb      	adds	r3, r7, #7
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d105      	bne.n	800d80c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d800:	4a0d      	ldr	r2, [pc, #52]	@ (800d838 <powerDisplay+0x88>)
 800d802:	4b0a      	ldr	r3, [pc, #40]	@ (800d82c <powerDisplay+0x7c>)
 800d804:	0019      	movs	r1, r3
 800d806:	2003      	movs	r0, #3
 800d808:	f000 ff28 	bl	800e65c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d80c:	1dfb      	adds	r3, r7, #7
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d105      	bne.n	800d820 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d814:	4a09      	ldr	r2, [pc, #36]	@ (800d83c <powerDisplay+0x8c>)
 800d816:	4b05      	ldr	r3, [pc, #20]	@ (800d82c <powerDisplay+0x7c>)
 800d818:	0019      	movs	r1, r3
 800d81a:	2003      	movs	r0, #3
 800d81c:	f000 ff1e 	bl	800e65c <CreateLine>
  }
}
 800d820:	46c0      	nop			@ (mov r8, r8)
 800d822:	46bd      	mov	sp, r7
 800d824:	b002      	add	sp, #8
 800d826:	bd80      	pop	{r7, pc}
 800d828:	08025024 	.word	0x08025024
 800d82c:	08025048 	.word	0x08025048
 800d830:	0802504c 	.word	0x0802504c
 800d834:	08025064 	.word	0x08025064
 800d838:	08025084 	.word	0x08025084
 800d83c:	0802509c 	.word	0x0802509c

0800d840 <configCheck>:

void configCheck(){
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d846:	f7f8 fe1c 	bl	8006482 <BootButton_Pressed>
 800d84a:	1e03      	subs	r3, r0, #0
 800d84c:	d007      	beq.n	800d85e <configCheck+0x1e>
 800d84e:	f7f8 fe29 	bl	80064a4 <UserButton_Pressed>
 800d852:	1e03      	subs	r3, r0, #0
 800d854:	d003      	beq.n	800d85e <configCheck+0x1e>
    configSet = true;
 800d856:	4bb2      	ldr	r3, [pc, #712]	@ (800db20 <configCheck+0x2e0>)
 800d858:	2201      	movs	r2, #1
 800d85a:	701a      	strb	r2, [r3, #0]
 800d85c:	e00a      	b.n	800d874 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d85e:	4bb0      	ldr	r3, [pc, #704]	@ (800db20 <configCheck+0x2e0>)
 800d860:	2200      	movs	r2, #0
 800d862:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d864:	f001 fb3e 	bl	800eee4 <HAL_GetTick>
 800d868:	0003      	movs	r3, r0
 800d86a:	22fa      	movs	r2, #250	@ 0xfa
 800d86c:	00d2      	lsls	r2, r2, #3
 800d86e:	189a      	adds	r2, r3, r2
 800d870:	4bac      	ldr	r3, [pc, #688]	@ (800db24 <configCheck+0x2e4>)
 800d872:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d874:	4baa      	ldr	r3, [pc, #680]	@ (800db20 <configCheck+0x2e0>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00d      	beq.n	800d898 <configCheck+0x58>
 800d87c:	4ba9      	ldr	r3, [pc, #676]	@ (800db24 <configCheck+0x2e4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	0018      	movs	r0, r3
 800d882:	f000 fe95 	bl	800e5b0 <TimestampIsReached>
 800d886:	1e03      	subs	r3, r0, #0
 800d888:	d006      	beq.n	800d898 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d88a:	f7f6 f8fb 	bl	8003a84 <SetConfigMode>
    SetDBLED(true, true, true);
 800d88e:	2201      	movs	r2, #1
 800d890:	2101      	movs	r1, #1
 800d892:	2001      	movs	r0, #1
 800d894:	f7ff fcba 	bl	800d20c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800d898:	f7f8 fdf3 	bl	8006482 <BootButton_Pressed>
 800d89c:	0003      	movs	r3, r0
 800d89e:	001a      	movs	r2, r3
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	4053      	eors	r3, r2
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d054      	beq.n	800d954 <configCheck+0x114>
 800d8aa:	f7f8 fdfb 	bl	80064a4 <UserButton_Pressed>
 800d8ae:	1e03      	subs	r3, r0, #0
 800d8b0:	d050      	beq.n	800d954 <configCheck+0x114>
 800d8b2:	4b9d      	ldr	r3, [pc, #628]	@ (800db28 <configCheck+0x2e8>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	4053      	eors	r3, r2
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d049      	beq.n	800d954 <configCheck+0x114>
 800d8c0:	f7f6 f900 	bl	8003ac4 <GetReconfigMode>
 800d8c4:	0003      	movs	r3, r0
 800d8c6:	001a      	movs	r2, r3
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	4053      	eors	r3, r2
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d040      	beq.n	800d954 <configCheck+0x114>
    SetLEDsOff();
 800d8d2:	f7ff fe25 	bl	800d520 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800d8d6:	4a95      	ldr	r2, [pc, #596]	@ (800db2c <configCheck+0x2ec>)
 800d8d8:	4994      	ldr	r1, [pc, #592]	@ (800db2c <configCheck+0x2ec>)
 800d8da:	4b94      	ldr	r3, [pc, #592]	@ (800db2c <configCheck+0x2ec>)
 800d8dc:	0018      	movs	r0, r3
 800d8de:	f7ff fcdf 	bl	800d2a0 <SetVocLED>
    HAL_Delay(1500);
 800d8e2:	4b93      	ldr	r3, [pc, #588]	@ (800db30 <configCheck+0x2f0>)
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f001 fb07 	bl	800eef8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800d8ea:	23fa      	movs	r3, #250	@ 0xfa
 800d8ec:	011a      	lsls	r2, r3, #4
 800d8ee:	23fa      	movs	r3, #250	@ 0xfa
 800d8f0:	0119      	lsls	r1, r3, #4
 800d8f2:	23fa      	movs	r3, #250	@ 0xfa
 800d8f4:	011b      	lsls	r3, r3, #4
 800d8f6:	0018      	movs	r0, r3
 800d8f8:	f7ff fcd2 	bl	800d2a0 <SetVocLED>
    userToggle = !userToggle;
 800d8fc:	4b8d      	ldr	r3, [pc, #564]	@ (800db34 <configCheck+0x2f4>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	1e5a      	subs	r2, r3, #1
 800d902:	4193      	sbcs	r3, r2
 800d904:	b2db      	uxtb	r3, r3
 800d906:	2201      	movs	r2, #1
 800d908:	4053      	eors	r3, r2
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	1c1a      	adds	r2, r3, #0
 800d90e:	2301      	movs	r3, #1
 800d910:	4013      	ands	r3, r2
 800d912:	b2da      	uxtb	r2, r3
 800d914:	4b87      	ldr	r3, [pc, #540]	@ (800db34 <configCheck+0x2f4>)
 800d916:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d918:	4b86      	ldr	r3, [pc, #536]	@ (800db34 <configCheck+0x2f4>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <configCheck+0xe4>
      EnabledConnectedDevices();
 800d920:	f7fa fff2 	bl	8008908 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800d924:	4b83      	ldr	r3, [pc, #524]	@ (800db34 <configCheck+0x2f4>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <configCheck+0xf0>
 800d92c:	4b82      	ldr	r3, [pc, #520]	@ (800db38 <configCheck+0x2f8>)
 800d92e:	e000      	b.n	800d932 <configCheck+0xf2>
 800d930:	4b82      	ldr	r3, [pc, #520]	@ (800db3c <configCheck+0x2fc>)
 800d932:	4a83      	ldr	r2, [pc, #524]	@ (800db40 <configCheck+0x300>)
 800d934:	4983      	ldr	r1, [pc, #524]	@ (800db44 <configCheck+0x304>)
 800d936:	2003      	movs	r0, #3
 800d938:	f000 fe90 	bl	800e65c <CreateLine>
    userbuttonHeld = true;
 800d93c:	4b7a      	ldr	r3, [pc, #488]	@ (800db28 <configCheck+0x2e8>)
 800d93e:	2201      	movs	r2, #1
 800d940:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d942:	f001 facf 	bl	800eee4 <HAL_GetTick>
 800d946:	0003      	movs	r3, r0
 800d948:	22fa      	movs	r2, #250	@ 0xfa
 800d94a:	00d2      	lsls	r2, r2, #3
 800d94c:	189a      	adds	r2, r3, r2
 800d94e:	4b7e      	ldr	r3, [pc, #504]	@ (800db48 <configCheck+0x308>)
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	e002      	b.n	800d95a <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800d954:	4b74      	ldr	r3, [pc, #464]	@ (800db28 <configCheck+0x2e8>)
 800d956:	2200      	movs	r2, #0
 800d958:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800d95a:	f7f8 fd92 	bl	8006482 <BootButton_Pressed>
 800d95e:	0003      	movs	r3, r0
 800d960:	001a      	movs	r2, r3
 800d962:	2301      	movs	r3, #1
 800d964:	4053      	eors	r3, r2
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d100      	bne.n	800d96e <configCheck+0x12e>
 800d96c:	e0a4      	b.n	800dab8 <configCheck+0x278>
 800d96e:	4b6e      	ldr	r3, [pc, #440]	@ (800db28 <configCheck+0x2e8>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d100      	bne.n	800d978 <configCheck+0x138>
 800d976:	e09f      	b.n	800dab8 <configCheck+0x278>
 800d978:	4b73      	ldr	r3, [pc, #460]	@ (800db48 <configCheck+0x308>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	0018      	movs	r0, r3
 800d97e:	f000 fe17 	bl	800e5b0 <TimestampIsReached>
 800d982:	1e03      	subs	r3, r0, #0
 800d984:	d100      	bne.n	800d988 <configCheck+0x148>
 800d986:	e097      	b.n	800dab8 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d988:	f7fa fd04 	bl	8008394 <GetPMSensorPresence>
 800d98c:	1e03      	subs	r3, r0, #0
 800d98e:	d100      	bne.n	800d992 <configCheck+0x152>
 800d990:	e082      	b.n	800da98 <configCheck+0x258>
 800d992:	4b6e      	ldr	r3, [pc, #440]	@ (800db4c <configCheck+0x30c>)
 800d994:	791b      	ldrb	r3, [r3, #4]
 800d996:	2b34      	cmp	r3, #52	@ 0x34
 800d998:	d004      	beq.n	800d9a4 <configCheck+0x164>
 800d99a:	4b6c      	ldr	r3, [pc, #432]	@ (800db4c <configCheck+0x30c>)
 800d99c:	791b      	ldrb	r3, [r3, #4]
 800d99e:	2b35      	cmp	r3, #53	@ 0x35
 800d9a0:	d000      	beq.n	800d9a4 <configCheck+0x164>
 800d9a2:	e079      	b.n	800da98 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d9a4:	4b6a      	ldr	r3, [pc, #424]	@ (800db50 <configCheck+0x310>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	1e5a      	subs	r2, r3, #1
 800d9aa:	4193      	sbcs	r3, r2
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	4053      	eors	r3, r2
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	1c1a      	adds	r2, r3, #0
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	4b64      	ldr	r3, [pc, #400]	@ (800db50 <configCheck+0x310>)
 800d9be:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d9c0:	4b63      	ldr	r3, [pc, #396]	@ (800db50 <configCheck+0x310>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d005      	beq.n	800d9d4 <configCheck+0x194>
 800d9c8:	1dbc      	adds	r4, r7, #6
 800d9ca:	f7ff fba3 	bl	800d114 <Calculate_LED_ON>
 800d9ce:	0003      	movs	r3, r0
 800d9d0:	8023      	strh	r3, [r4, #0]
 800d9d2:	e003      	b.n	800d9dc <configCheck+0x19c>
        else color = 4000;
 800d9d4:	1dbb      	adds	r3, r7, #6
 800d9d6:	22fa      	movs	r2, #250	@ 0xfa
 800d9d8:	0112      	lsls	r2, r2, #4
 800d9da:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d9dc:	4b5c      	ldr	r3, [pc, #368]	@ (800db50 <configCheck+0x310>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <configCheck+0x1a8>
 800d9e4:	4b5b      	ldr	r3, [pc, #364]	@ (800db54 <configCheck+0x314>)
 800d9e6:	e000      	b.n	800d9ea <configCheck+0x1aa>
 800d9e8:	4b5b      	ldr	r3, [pc, #364]	@ (800db58 <configCheck+0x318>)
 800d9ea:	4a5c      	ldr	r2, [pc, #368]	@ (800db5c <configCheck+0x31c>)
 800d9ec:	495c      	ldr	r1, [pc, #368]	@ (800db60 <configCheck+0x320>)
 800d9ee:	2002      	movs	r0, #2
 800d9f0:	f000 fe34 	bl	800e65c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d9f4:	1d7b      	adds	r3, r7, #5
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
 800d9fa:	e028      	b.n	800da4e <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d9fc:	f7ff fb8a 	bl	800d114 <Calculate_LED_ON>
 800da00:	0003      	movs	r3, r0
 800da02:	001a      	movs	r2, r3
 800da04:	4b57      	ldr	r3, [pc, #348]	@ (800db64 <configCheck+0x324>)
 800da06:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800da08:	4b56      	ldr	r3, [pc, #344]	@ (800db64 <configCheck+0x324>)
 800da0a:	1dba      	adds	r2, r7, #6
 800da0c:	8812      	ldrh	r2, [r2, #0]
 800da0e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800da10:	4b54      	ldr	r3, [pc, #336]	@ (800db64 <configCheck+0x324>)
 800da12:	1dba      	adds	r2, r7, #6
 800da14:	8812      	ldrh	r2, [r2, #0]
 800da16:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800da18:	23c8      	movs	r3, #200	@ 0xc8
 800da1a:	005b      	lsls	r3, r3, #1
 800da1c:	0018      	movs	r0, r3
 800da1e:	f001 fa6b 	bl	800eef8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800da22:	4b50      	ldr	r3, [pc, #320]	@ (800db64 <configCheck+0x324>)
 800da24:	22fa      	movs	r2, #250	@ 0xfa
 800da26:	0112      	lsls	r2, r2, #4
 800da28:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800da2a:	4b4e      	ldr	r3, [pc, #312]	@ (800db64 <configCheck+0x324>)
 800da2c:	22fa      	movs	r2, #250	@ 0xfa
 800da2e:	0112      	lsls	r2, r2, #4
 800da30:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800da32:	4b4c      	ldr	r3, [pc, #304]	@ (800db64 <configCheck+0x324>)
 800da34:	22fa      	movs	r2, #250	@ 0xfa
 800da36:	0112      	lsls	r2, r2, #4
 800da38:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800da3a:	23c8      	movs	r3, #200	@ 0xc8
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	0018      	movs	r0, r3
 800da40:	f001 fa5a 	bl	800eef8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800da44:	1d7b      	adds	r3, r7, #5
 800da46:	781a      	ldrb	r2, [r3, #0]
 800da48:	1d7b      	adds	r3, r7, #5
 800da4a:	3201      	adds	r2, #1
 800da4c:	701a      	strb	r2, [r3, #0]
 800da4e:	1d7b      	adds	r3, r7, #5
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d9d2      	bls.n	800d9fc <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800da56:	4b37      	ldr	r3, [pc, #220]	@ (800db34 <configCheck+0x2f4>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	1e5a      	subs	r2, r3, #1
 800da5c:	4193      	sbcs	r3, r2
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2201      	movs	r2, #1
 800da62:	4053      	eors	r3, r2
 800da64:	b2db      	uxtb	r3, r3
 800da66:	1c1a      	adds	r2, r3, #0
 800da68:	2301      	movs	r3, #1
 800da6a:	4013      	ands	r3, r2
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	4b31      	ldr	r3, [pc, #196]	@ (800db34 <configCheck+0x2f4>)
 800da70:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800da72:	4b30      	ldr	r3, [pc, #192]	@ (800db34 <configCheck+0x2f4>)
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <configCheck+0x23e>
 800da7a:	4b36      	ldr	r3, [pc, #216]	@ (800db54 <configCheck+0x314>)
 800da7c:	e000      	b.n	800da80 <configCheck+0x240>
 800da7e:	4b36      	ldr	r3, [pc, #216]	@ (800db58 <configCheck+0x318>)
 800da80:	4a39      	ldr	r2, [pc, #228]	@ (800db68 <configCheck+0x328>)
 800da82:	4937      	ldr	r1, [pc, #220]	@ (800db60 <configCheck+0x320>)
 800da84:	2002      	movs	r0, #2
 800da86:	f000 fde9 	bl	800e65c <CreateLine>
      if (usbPluggedIn) {
 800da8a:	4b38      	ldr	r3, [pc, #224]	@ (800db6c <configCheck+0x32c>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d009      	beq.n	800daa6 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800da92:	f7fc f86d 	bl	8009b70 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800da96:	e006      	b.n	800daa6 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800da98:	4a35      	ldr	r2, [pc, #212]	@ (800db70 <configCheck+0x330>)
 800da9a:	4b31      	ldr	r3, [pc, #196]	@ (800db60 <configCheck+0x320>)
 800da9c:	0019      	movs	r1, r3
 800da9e:	2002      	movs	r0, #2
 800daa0:	f000 fddc 	bl	800e65c <CreateLine>
 800daa4:	e000      	b.n	800daa8 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800daa6:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800daa8:	46c0      	nop			@ (mov r8, r8)
 800daaa:	f7f8 fcfb 	bl	80064a4 <UserButton_Pressed>
 800daae:	1e03      	subs	r3, r0, #0
 800dab0:	d1fb      	bne.n	800daaa <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800dab2:	4b1d      	ldr	r3, [pc, #116]	@ (800db28 <configCheck+0x2e8>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800dab8:	f7f8 fce3 	bl	8006482 <BootButton_Pressed>
 800dabc:	0003      	movs	r3, r0
 800dabe:	001a      	movs	r2, r3
 800dac0:	2301      	movs	r3, #1
 800dac2:	4053      	eors	r3, r2
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00b      	beq.n	800dae2 <configCheck+0x2a2>
 800daca:	f7f8 fceb 	bl	80064a4 <UserButton_Pressed>
 800dace:	0003      	movs	r3, r0
 800dad0:	001a      	movs	r2, r3
 800dad2:	2301      	movs	r3, #1
 800dad4:	4053      	eors	r3, r2
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <configCheck+0x2a2>
    userbuttonHeld = false;
 800dadc:	4b12      	ldr	r3, [pc, #72]	@ (800db28 <configCheck+0x2e8>)
 800dade:	2200      	movs	r2, #0
 800dae0:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800dae2:	f7f8 fcbf 	bl	8006464 <Check_USB_PowerOn>
 800dae6:	1e03      	subs	r3, r0, #0
 800dae8:	d003      	beq.n	800daf2 <configCheck+0x2b2>
    usbPluggedIn = true;
 800daea:	4b20      	ldr	r3, [pc, #128]	@ (800db6c <configCheck+0x32c>)
 800daec:	2201      	movs	r2, #1
 800daee:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800daf0:	e012      	b.n	800db18 <configCheck+0x2d8>
    if(!userToggle && !init){
 800daf2:	4b10      	ldr	r3, [pc, #64]	@ (800db34 <configCheck+0x2f4>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	2201      	movs	r2, #1
 800daf8:	4053      	eors	r3, r2
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d008      	beq.n	800db12 <configCheck+0x2d2>
 800db00:	4b1c      	ldr	r3, [pc, #112]	@ (800db74 <configCheck+0x334>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2201      	movs	r2, #1
 800db06:	4053      	eors	r3, r2
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <configCheck+0x2d2>
      SetLEDsOff();
 800db0e:	f7ff fd07 	bl	800d520 <SetLEDsOff>
    usbPluggedIn = false;
 800db12:	4b16      	ldr	r3, [pc, #88]	@ (800db6c <configCheck+0x32c>)
 800db14:	2200      	movs	r2, #0
 800db16:	701a      	strb	r2, [r3, #0]
}
 800db18:	46c0      	nop			@ (mov r8, r8)
 800db1a:	46bd      	mov	sp, r7
 800db1c:	b003      	add	sp, #12
 800db1e:	bd90      	pop	{r4, r7, pc}
 800db20:	20002008 	.word	0x20002008
 800db24:	20002010 	.word	0x20002010
 800db28:	2000200b 	.word	0x2000200b
 800db2c:	00000bb8 	.word	0x00000bb8
 800db30:	000005dc 	.word	0x000005dc
 800db34:	2000200a 	.word	0x2000200a
 800db38:	080250c0 	.word	0x080250c0
 800db3c:	080250c4 	.word	0x080250c4
 800db40:	080250c8 	.word	0x080250c8
 800db44:	08025048 	.word	0x08025048
 800db48:	20002014 	.word	0x20002014
 800db4c:	20001074 	.word	0x20001074
 800db50:	20001072 	.word	0x20001072
 800db54:	080250e8 	.word	0x080250e8
 800db58:	080250f0 	.word	0x080250f0
 800db5c:	080250fc 	.word	0x080250fc
 800db60:	0802511c 	.word	0x0802511c
 800db64:	40000400 	.word	0x40000400
 800db68:	08025120 	.word	0x08025120
 800db6c:	20002009 	.word	0x20002009
 800db70:	08025138 	.word	0x08025138
 800db74:	200000cc 	.word	0x200000cc

0800db78 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800db78:	b590      	push	{r4, r7, lr}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800db7e:	1dfc      	adds	r4, r7, #7
 800db80:	f7ff fdfa 	bl	800d778 <powerCheck>
 800db84:	0003      	movs	r3, r0
 800db86:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800db88:	1dfb      	adds	r3, r7, #7
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	0018      	movs	r0, r3
 800db8e:	f7ff fe0f 	bl	800d7b0 <powerDisplay>
  return status;
 800db92:	1dfb      	adds	r3, r7, #7
 800db94:	781b      	ldrb	r3, [r3, #0]
}
 800db96:	0018      	movs	r0, r3
 800db98:	46bd      	mov	sp, r7
 800db9a:	b003      	add	sp, #12
 800db9c:	bd90      	pop	{r4, r7, pc}
	...

0800dba0 <setuserToggle>:

void setuserToggle(void) {
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800dba4:	f7ff fde8 	bl	800d778 <powerCheck>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	2b04      	cmp	r3, #4
 800dbac:	d004      	beq.n	800dbb8 <setuserToggle+0x18>
    userToggle = true;
 800dbae:	4b04      	ldr	r3, [pc, #16]	@ (800dbc0 <setuserToggle+0x20>)
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800dbb4:	f7fa fea8 	bl	8008908 <EnabledConnectedDevices>
  }
}
 800dbb8:	46c0      	nop			@ (mov r8, r8)
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	46c0      	nop			@ (mov r8, r8)
 800dbc0:	2000200a 	.word	0x2000200a

0800dbc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dbc8:	4b07      	ldr	r3, [pc, #28]	@ (800dbe8 <HAL_MspInit+0x24>)
 800dbca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbcc:	4b06      	ldr	r3, [pc, #24]	@ (800dbe8 <HAL_MspInit+0x24>)
 800dbce:	2101      	movs	r1, #1
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800dbd4:	4b04      	ldr	r3, [pc, #16]	@ (800dbe8 <HAL_MspInit+0x24>)
 800dbd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbd8:	4b03      	ldr	r3, [pc, #12]	@ (800dbe8 <HAL_MspInit+0x24>)
 800dbda:	2180      	movs	r1, #128	@ 0x80
 800dbdc:	0549      	lsls	r1, r1, #21
 800dbde:	430a      	orrs	r2, r1
 800dbe0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dbe2:	46c0      	nop			@ (mov r8, r8)
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	40021000 	.word	0x40021000

0800dbec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800dbf0:	46c0      	nop			@ (mov r8, r8)
 800dbf2:	e7fd      	b.n	800dbf0 <NMI_Handler+0x4>

0800dbf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dbf8:	46c0      	nop			@ (mov r8, r8)
 800dbfa:	e7fd      	b.n	800dbf8 <HardFault_Handler+0x4>

0800dbfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800dc00:	46c0      	nop			@ (mov r8, r8)
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dc0a:	46c0      	nop			@ (mov r8, r8)
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dc14:	f001 f954 	bl	800eec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800dc18:	46c0      	nop			@ (mov r8, r8)
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800dc24:	4b03      	ldr	r3, [pc, #12]	@ (800dc34 <RTC_IRQHandler+0x14>)
 800dc26:	0018      	movs	r0, r3
 800dc28:	f008 fe7a 	bl	8016920 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800dc2c:	46c0      	nop			@ (mov r8, r8)
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	46c0      	nop			@ (mov r8, r8)
 800dc34:	2000104c 	.word	0x2000104c

0800dc38 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800dc3c:	2380      	movs	r3, #128	@ 0x80
 800dc3e:	021b      	lsls	r3, r3, #8
 800dc40:	0018      	movs	r0, r3
 800dc42:	f002 fbfd 	bl	8010440 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800dc46:	46c0      	nop			@ (mov r8, r8)
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dc50:	4b05      	ldr	r3, [pc, #20]	@ (800dc68 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800dc52:	0018      	movs	r0, r3
 800dc54:	f001 ff85 	bl	800fb62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dc58:	4b04      	ldr	r3, [pc, #16]	@ (800dc6c <DMA1_Channel2_3_IRQHandler+0x20>)
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f001 ff81 	bl	800fb62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800dc60:	46c0      	nop			@ (mov r8, r8)
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	46c0      	nop			@ (mov r8, r8)
 800dc68:	20000ef0 	.word	0x20000ef0
 800dc6c:	20000ea8 	.word	0x20000ea8

0800dc70 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dc74:	4b07      	ldr	r3, [pc, #28]	@ (800dc94 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800dc76:	0018      	movs	r0, r3
 800dc78:	f001 ff73 	bl	800fb62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800dc7c:	4b06      	ldr	r3, [pc, #24]	@ (800dc98 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800dc7e:	0018      	movs	r0, r3
 800dc80:	f001 ff6f 	bl	800fb62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800dc84:	4b05      	ldr	r3, [pc, #20]	@ (800dc9c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800dc86:	0018      	movs	r0, r3
 800dc88:	f001 ff6b 	bl	800fb62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800dc8c:	46c0      	nop			@ (mov r8, r8)
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	46c0      	nop			@ (mov r8, r8)
 800dc94:	20000f74 	.word	0x20000f74
 800dc98:	20002310 	.word	0x20002310
 800dc9c:	20002358 	.word	0x20002358

0800dca0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800dca4:	4b03      	ldr	r3, [pc, #12]	@ (800dcb4 <USART4_5_IRQHandler+0x14>)
 800dca6:	0018      	movs	r0, r3
 800dca8:	f009 fd34 	bl	8017714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800dcac:	46c0      	nop			@ (mov r8, r8)
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	46c0      	nop			@ (mov r8, r8)
 800dcb4:	20002258 	.word	0x20002258

0800dcb8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800dcbc:	4b09      	ldr	r3, [pc, #36]	@ (800dce4 <I2C1_IRQHandler+0x2c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	699a      	ldr	r2, [r3, #24]
 800dcc2:	23e0      	movs	r3, #224	@ 0xe0
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	d004      	beq.n	800dcd4 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800dcca:	4b06      	ldr	r3, [pc, #24]	@ (800dce4 <I2C1_IRQHandler+0x2c>)
 800dccc:	0018      	movs	r0, r3
 800dcce:	f003 f89f 	bl	8010e10 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800dcd2:	e003      	b.n	800dcdc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800dcd4:	4b03      	ldr	r3, [pc, #12]	@ (800dce4 <I2C1_IRQHandler+0x2c>)
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f003 f880 	bl	8010ddc <HAL_I2C_EV_IRQHandler>
}
 800dcdc:	46c0      	nop			@ (mov r8, r8)
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	46c0      	nop			@ (mov r8, r8)
 800dce4:	20000e00 	.word	0x20000e00

0800dce8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800dcec:	4b03      	ldr	r3, [pc, #12]	@ (800dcfc <USART1_IRQHandler+0x14>)
 800dcee:	0018      	movs	r0, r3
 800dcf0:	f009 fd10 	bl	8017714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800dcf4:	46c0      	nop			@ (mov r8, r8)
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	46c0      	nop			@ (mov r8, r8)
 800dcfc:	200021a0 	.word	0x200021a0

0800dd00 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800dd04:	4b03      	ldr	r3, [pc, #12]	@ (800dd14 <USB_IRQHandler+0x14>)
 800dd06:	0018      	movs	r0, r3
 800dd08:	f005 fc60 	bl	80135cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800dd0c:	46c0      	nop			@ (mov r8, r8)
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	46c0      	nop			@ (mov r8, r8)
 800dd14:	2000316c 	.word	0x2000316c

0800dd18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0
  return 1;
 800dd1c:	2301      	movs	r3, #1
}
 800dd1e:	0018      	movs	r0, r3
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <_kill>:

int _kill(int pid, int sig)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dd2e:	f012 fbd5 	bl	80204dc <__errno>
 800dd32:	0003      	movs	r3, r0
 800dd34:	2216      	movs	r2, #22
 800dd36:	601a      	str	r2, [r3, #0]
  return -1;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	425b      	negs	r3, r3
}
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	b002      	add	sp, #8
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <_exit>:

void _exit (int status)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	425a      	negs	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	0011      	movs	r1, r2
 800dd54:	0018      	movs	r0, r3
 800dd56:	f7ff ffe5 	bl	800dd24 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dd5a:	46c0      	nop			@ (mov r8, r8)
 800dd5c:	e7fd      	b.n	800dd5a <_exit+0x16>

0800dd5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b086      	sub	sp, #24
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	60f8      	str	r0, [r7, #12]
 800dd66:	60b9      	str	r1, [r7, #8]
 800dd68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]
 800dd6e:	e00a      	b.n	800dd86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dd70:	e000      	b.n	800dd74 <_read+0x16>
 800dd72:	bf00      	nop
 800dd74:	0001      	movs	r1, r0
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	1c5a      	adds	r2, r3, #1
 800dd7a:	60ba      	str	r2, [r7, #8]
 800dd7c:	b2ca      	uxtb	r2, r1
 800dd7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	3301      	adds	r3, #1
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	dbf0      	blt.n	800dd70 <_read+0x12>
  }

  return len;
 800dd8e:	687b      	ldr	r3, [r7, #4]
}
 800dd90:	0018      	movs	r0, r3
 800dd92:	46bd      	mov	sp, r7
 800dd94:	b006      	add	sp, #24
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <_close>:
  }
  return len;
}

int _close(int file)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dda0:	2301      	movs	r3, #1
 800dda2:	425b      	negs	r3, r3
}
 800dda4:	0018      	movs	r0, r3
 800dda6:	46bd      	mov	sp, r7
 800dda8:	b002      	add	sp, #8
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	2280      	movs	r2, #128	@ 0x80
 800ddba:	0192      	lsls	r2, r2, #6
 800ddbc:	605a      	str	r2, [r3, #4]
  return 0;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	b002      	add	sp, #8
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <_isatty>:

int _isatty(int file)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ddd0:	2301      	movs	r3, #1
}
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	b002      	add	sp, #8
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	0018      	movs	r0, r3
 800ddea:	46bd      	mov	sp, r7
 800ddec:	b004      	add	sp, #16
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ddf8:	4a14      	ldr	r2, [pc, #80]	@ (800de4c <_sbrk+0x5c>)
 800ddfa:	4b15      	ldr	r3, [pc, #84]	@ (800de50 <_sbrk+0x60>)
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800de04:	4b13      	ldr	r3, [pc, #76]	@ (800de54 <_sbrk+0x64>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d102      	bne.n	800de12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800de0c:	4b11      	ldr	r3, [pc, #68]	@ (800de54 <_sbrk+0x64>)
 800de0e:	4a12      	ldr	r2, [pc, #72]	@ (800de58 <_sbrk+0x68>)
 800de10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800de12:	4b10      	ldr	r3, [pc, #64]	@ (800de54 <_sbrk+0x64>)
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	18d3      	adds	r3, r2, r3
 800de1a:	693a      	ldr	r2, [r7, #16]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d207      	bcs.n	800de30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800de20:	f012 fb5c 	bl	80204dc <__errno>
 800de24:	0003      	movs	r3, r0
 800de26:	220c      	movs	r2, #12
 800de28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800de2a:	2301      	movs	r3, #1
 800de2c:	425b      	negs	r3, r3
 800de2e:	e009      	b.n	800de44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800de30:	4b08      	ldr	r3, [pc, #32]	@ (800de54 <_sbrk+0x64>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800de36:	4b07      	ldr	r3, [pc, #28]	@ (800de54 <_sbrk+0x64>)
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	18d2      	adds	r2, r2, r3
 800de3e:	4b05      	ldr	r3, [pc, #20]	@ (800de54 <_sbrk+0x64>)
 800de40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800de42:	68fb      	ldr	r3, [r7, #12]
}
 800de44:	0018      	movs	r0, r3
 800de46:	46bd      	mov	sp, r7
 800de48:	b006      	add	sp, #24
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20005000 	.word	0x20005000
 800de50:	00000400 	.word	0x00000400
 800de54:	20002024 	.word	0x20002024
 800de58:	200037d0 	.word	0x200037d0

0800de5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800de60:	46c0      	nop			@ (mov r8, r8)
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
	...

0800de68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de6e:	2310      	movs	r3, #16
 800de70:	18fb      	adds	r3, r7, r3
 800de72:	0018      	movs	r0, r3
 800de74:	2308      	movs	r3, #8
 800de76:	001a      	movs	r2, r3
 800de78:	2100      	movs	r1, #0
 800de7a:	f012 fa8b 	bl	8020394 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de7e:	003b      	movs	r3, r7
 800de80:	0018      	movs	r0, r3
 800de82:	2310      	movs	r3, #16
 800de84:	001a      	movs	r2, r3
 800de86:	2100      	movs	r1, #0
 800de88:	f012 fa84 	bl	8020394 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800de8c:	4b2e      	ldr	r3, [pc, #184]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800de8e:	2280      	movs	r2, #128	@ 0x80
 800de90:	05d2      	lsls	r2, r2, #23
 800de92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800de94:	4b2c      	ldr	r3, [pc, #176]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800de96:	2200      	movs	r2, #0
 800de98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de9a:	4b2b      	ldr	r3, [pc, #172]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800dea0:	4b29      	ldr	r3, [pc, #164]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800dea2:	4a2a      	ldr	r2, [pc, #168]	@ (800df4c <MX_TIM2_Init+0xe4>)
 800dea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dea6:	4b28      	ldr	r3, [pc, #160]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800deac:	4b26      	ldr	r3, [pc, #152]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800deae:	2200      	movs	r2, #0
 800deb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800deb2:	4b25      	ldr	r3, [pc, #148]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800deb4:	0018      	movs	r0, r3
 800deb6:	f008 fe41 	bl	8016b3c <HAL_TIM_PWM_Init>
 800deba:	1e03      	subs	r3, r0, #0
 800debc:	d001      	beq.n	800dec2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800debe:	f7fa fa2b 	bl	8008318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dec2:	2110      	movs	r1, #16
 800dec4:	187b      	adds	r3, r7, r1
 800dec6:	2200      	movs	r2, #0
 800dec8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800deca:	187b      	adds	r3, r7, r1
 800decc:	2200      	movs	r2, #0
 800dece:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ded0:	187a      	adds	r2, r7, r1
 800ded2:	4b1d      	ldr	r3, [pc, #116]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800ded4:	0011      	movs	r1, r2
 800ded6:	0018      	movs	r0, r3
 800ded8:	f009 f94e 	bl	8017178 <HAL_TIMEx_MasterConfigSynchronization>
 800dedc:	1e03      	subs	r3, r0, #0
 800dede:	d001      	beq.n	800dee4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dee0:	f7fa fa1a 	bl	8008318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dee4:	003b      	movs	r3, r7
 800dee6:	2260      	movs	r2, #96	@ 0x60
 800dee8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800deea:	003b      	movs	r3, r7
 800deec:	2200      	movs	r2, #0
 800deee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800def0:	003b      	movs	r3, r7
 800def2:	2200      	movs	r2, #0
 800def4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800def6:	003b      	movs	r3, r7
 800def8:	2200      	movs	r2, #0
 800defa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800defc:	0039      	movs	r1, r7
 800defe:	4b12      	ldr	r3, [pc, #72]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800df00:	2200      	movs	r2, #0
 800df02:	0018      	movs	r0, r3
 800df04:	f008 feec 	bl	8016ce0 <HAL_TIM_PWM_ConfigChannel>
 800df08:	1e03      	subs	r3, r0, #0
 800df0a:	d001      	beq.n	800df10 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800df0c:	f7fa fa04 	bl	8008318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800df10:	0039      	movs	r1, r7
 800df12:	4b0d      	ldr	r3, [pc, #52]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800df14:	2208      	movs	r2, #8
 800df16:	0018      	movs	r0, r3
 800df18:	f008 fee2 	bl	8016ce0 <HAL_TIM_PWM_ConfigChannel>
 800df1c:	1e03      	subs	r3, r0, #0
 800df1e:	d001      	beq.n	800df24 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800df20:	f7fa f9fa 	bl	8008318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800df24:	0039      	movs	r1, r7
 800df26:	4b08      	ldr	r3, [pc, #32]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800df28:	220c      	movs	r2, #12
 800df2a:	0018      	movs	r0, r3
 800df2c:	f008 fed8 	bl	8016ce0 <HAL_TIM_PWM_ConfigChannel>
 800df30:	1e03      	subs	r3, r0, #0
 800df32:	d001      	beq.n	800df38 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800df34:	f7fa f9f0 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800df38:	4b03      	ldr	r3, [pc, #12]	@ (800df48 <MX_TIM2_Init+0xe0>)
 800df3a:	0018      	movs	r0, r3
 800df3c:	f000 f8fe 	bl	800e13c <HAL_TIM_MspPostInit>

}
 800df40:	46c0      	nop			@ (mov r8, r8)
 800df42:	46bd      	mov	sp, r7
 800df44:	b006      	add	sp, #24
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20002028 	.word	0x20002028
 800df4c:	0000ffff 	.word	0x0000ffff

0800df50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df56:	2310      	movs	r3, #16
 800df58:	18fb      	adds	r3, r7, r3
 800df5a:	0018      	movs	r0, r3
 800df5c:	2308      	movs	r3, #8
 800df5e:	001a      	movs	r2, r3
 800df60:	2100      	movs	r1, #0
 800df62:	f012 fa17 	bl	8020394 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df66:	003b      	movs	r3, r7
 800df68:	0018      	movs	r0, r3
 800df6a:	2310      	movs	r3, #16
 800df6c:	001a      	movs	r2, r3
 800df6e:	2100      	movs	r1, #0
 800df70:	f012 fa10 	bl	8020394 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800df74:	4b32      	ldr	r3, [pc, #200]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df76:	4a33      	ldr	r2, [pc, #204]	@ (800e044 <MX_TIM3_Init+0xf4>)
 800df78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800df7a:	4b31      	ldr	r3, [pc, #196]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df80:	4b2f      	ldr	r3, [pc, #188]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df82:	2200      	movs	r2, #0
 800df84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800df86:	4b2e      	ldr	r3, [pc, #184]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df88:	4a2f      	ldr	r2, [pc, #188]	@ (800e048 <MX_TIM3_Init+0xf8>)
 800df8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df8c:	4b2c      	ldr	r3, [pc, #176]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df8e:	2200      	movs	r2, #0
 800df90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df92:	4b2b      	ldr	r3, [pc, #172]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df94:	2200      	movs	r2, #0
 800df96:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800df98:	4b29      	ldr	r3, [pc, #164]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800df9a:	0018      	movs	r0, r3
 800df9c:	f008 fdce 	bl	8016b3c <HAL_TIM_PWM_Init>
 800dfa0:	1e03      	subs	r3, r0, #0
 800dfa2:	d001      	beq.n	800dfa8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800dfa4:	f7fa f9b8 	bl	8008318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfa8:	2110      	movs	r1, #16
 800dfaa:	187b      	adds	r3, r7, r1
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfb0:	187b      	adds	r3, r7, r1
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dfb6:	187a      	adds	r2, r7, r1
 800dfb8:	4b21      	ldr	r3, [pc, #132]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800dfba:	0011      	movs	r1, r2
 800dfbc:	0018      	movs	r0, r3
 800dfbe:	f009 f8db 	bl	8017178 <HAL_TIMEx_MasterConfigSynchronization>
 800dfc2:	1e03      	subs	r3, r0, #0
 800dfc4:	d001      	beq.n	800dfca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800dfc6:	f7fa f9a7 	bl	8008318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dfca:	003b      	movs	r3, r7
 800dfcc:	2260      	movs	r2, #96	@ 0x60
 800dfce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dfd0:	003b      	movs	r3, r7
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dfd6:	003b      	movs	r3, r7
 800dfd8:	2200      	movs	r2, #0
 800dfda:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dfdc:	003b      	movs	r3, r7
 800dfde:	2200      	movs	r2, #0
 800dfe0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dfe2:	0039      	movs	r1, r7
 800dfe4:	4b16      	ldr	r3, [pc, #88]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	0018      	movs	r0, r3
 800dfea:	f008 fe79 	bl	8016ce0 <HAL_TIM_PWM_ConfigChannel>
 800dfee:	1e03      	subs	r3, r0, #0
 800dff0:	d001      	beq.n	800dff6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800dff2:	f7fa f991 	bl	8008318 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800dff6:	4b12      	ldr	r3, [pc, #72]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800dff8:	2104      	movs	r1, #4
 800dffa:	0018      	movs	r0, r3
 800dffc:	f009 f91a 	bl	8017234 <HAL_TIMEx_RemapConfig>
 800e000:	1e03      	subs	r3, r0, #0
 800e002:	d001      	beq.n	800e008 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800e004:	f7fa f988 	bl	8008318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e008:	0039      	movs	r1, r7
 800e00a:	4b0d      	ldr	r3, [pc, #52]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800e00c:	2204      	movs	r2, #4
 800e00e:	0018      	movs	r0, r3
 800e010:	f008 fe66 	bl	8016ce0 <HAL_TIM_PWM_ConfigChannel>
 800e014:	1e03      	subs	r3, r0, #0
 800e016:	d001      	beq.n	800e01c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800e018:	f7fa f97e 	bl	8008318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e01c:	0039      	movs	r1, r7
 800e01e:	4b08      	ldr	r3, [pc, #32]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800e020:	2208      	movs	r2, #8
 800e022:	0018      	movs	r0, r3
 800e024:	f008 fe5c 	bl	8016ce0 <HAL_TIM_PWM_ConfigChannel>
 800e028:	1e03      	subs	r3, r0, #0
 800e02a:	d001      	beq.n	800e030 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800e02c:	f7fa f974 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e030:	4b03      	ldr	r3, [pc, #12]	@ (800e040 <MX_TIM3_Init+0xf0>)
 800e032:	0018      	movs	r0, r3
 800e034:	f000 f882 	bl	800e13c <HAL_TIM_MspPostInit>

}
 800e038:	46c0      	nop			@ (mov r8, r8)
 800e03a:	46bd      	mov	sp, r7
 800e03c:	b006      	add	sp, #24
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	20002068 	.word	0x20002068
 800e044:	40000400 	.word	0x40000400
 800e048:	0000ffff 	.word	0x0000ffff

0800e04c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e052:	003b      	movs	r3, r7
 800e054:	0018      	movs	r0, r3
 800e056:	2308      	movs	r3, #8
 800e058:	001a      	movs	r2, r3
 800e05a:	2100      	movs	r1, #0
 800e05c:	f012 f99a 	bl	8020394 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e060:	4b15      	ldr	r3, [pc, #84]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e062:	4a16      	ldr	r2, [pc, #88]	@ (800e0bc <MX_TIM6_Init+0x70>)
 800e064:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e066:	4b14      	ldr	r3, [pc, #80]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e068:	220a      	movs	r2, #10
 800e06a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e06c:	4b12      	ldr	r3, [pc, #72]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e06e:	2200      	movs	r2, #0
 800e070:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e072:	4b11      	ldr	r3, [pc, #68]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e074:	4a12      	ldr	r2, [pc, #72]	@ (800e0c0 <MX_TIM6_Init+0x74>)
 800e076:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e078:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e07e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e080:	0018      	movs	r0, r3
 800e082:	f008 fcb3 	bl	80169ec <HAL_TIM_Base_Init>
 800e086:	1e03      	subs	r3, r0, #0
 800e088:	d001      	beq.n	800e08e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e08a:	f7fa f945 	bl	8008318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e08e:	003b      	movs	r3, r7
 800e090:	2200      	movs	r2, #0
 800e092:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e094:	003b      	movs	r3, r7
 800e096:	2200      	movs	r2, #0
 800e098:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e09a:	003a      	movs	r2, r7
 800e09c:	4b06      	ldr	r3, [pc, #24]	@ (800e0b8 <MX_TIM6_Init+0x6c>)
 800e09e:	0011      	movs	r1, r2
 800e0a0:	0018      	movs	r0, r3
 800e0a2:	f009 f869 	bl	8017178 <HAL_TIMEx_MasterConfigSynchronization>
 800e0a6:	1e03      	subs	r3, r0, #0
 800e0a8:	d001      	beq.n	800e0ae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e0aa:	f7fa f935 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e0ae:	46c0      	nop			@ (mov r8, r8)
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	b002      	add	sp, #8
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	46c0      	nop			@ (mov r8, r8)
 800e0b8:	200020a8 	.word	0x200020a8
 800e0bc:	40001000 	.word	0x40001000
 800e0c0:	0000ffff 	.word	0x0000ffff

0800e0c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	2380      	movs	r3, #128	@ 0x80
 800e0d2:	05db      	lsls	r3, r3, #23
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d106      	bne.n	800e0e6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <HAL_TIM_PWM_MspInit+0x40>)
 800e0da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0dc:	4b09      	ldr	r3, [pc, #36]	@ (800e104 <HAL_TIM_PWM_MspInit+0x40>)
 800e0de:	2101      	movs	r1, #1
 800e0e0:	430a      	orrs	r2, r1
 800e0e2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e0e4:	e00a      	b.n	800e0fc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a07      	ldr	r2, [pc, #28]	@ (800e108 <HAL_TIM_PWM_MspInit+0x44>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d105      	bne.n	800e0fc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e0f0:	4b04      	ldr	r3, [pc, #16]	@ (800e104 <HAL_TIM_PWM_MspInit+0x40>)
 800e0f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0f4:	4b03      	ldr	r3, [pc, #12]	@ (800e104 <HAL_TIM_PWM_MspInit+0x40>)
 800e0f6:	2102      	movs	r1, #2
 800e0f8:	430a      	orrs	r2, r1
 800e0fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	46bd      	mov	sp, r7
 800e100:	b002      	add	sp, #8
 800e102:	bd80      	pop	{r7, pc}
 800e104:	40021000 	.word	0x40021000
 800e108:	40000400 	.word	0x40000400

0800e10c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a06      	ldr	r2, [pc, #24]	@ (800e134 <HAL_TIM_Base_MspInit+0x28>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d105      	bne.n	800e12a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e11e:	4b06      	ldr	r3, [pc, #24]	@ (800e138 <HAL_TIM_Base_MspInit+0x2c>)
 800e120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e122:	4b05      	ldr	r3, [pc, #20]	@ (800e138 <HAL_TIM_Base_MspInit+0x2c>)
 800e124:	2110      	movs	r1, #16
 800e126:	430a      	orrs	r2, r1
 800e128:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e12a:	46c0      	nop			@ (mov r8, r8)
 800e12c:	46bd      	mov	sp, r7
 800e12e:	b002      	add	sp, #8
 800e130:	bd80      	pop	{r7, pc}
 800e132:	46c0      	nop			@ (mov r8, r8)
 800e134:	40001000 	.word	0x40001000
 800e138:	40021000 	.word	0x40021000

0800e13c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e13c:	b590      	push	{r4, r7, lr}
 800e13e:	b08b      	sub	sp, #44	@ 0x2c
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e144:	2414      	movs	r4, #20
 800e146:	193b      	adds	r3, r7, r4
 800e148:	0018      	movs	r0, r3
 800e14a:	2314      	movs	r3, #20
 800e14c:	001a      	movs	r2, r3
 800e14e:	2100      	movs	r1, #0
 800e150:	f012 f920 	bl	8020394 <memset>
  if(timHandle->Instance==TIM2)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	2380      	movs	r3, #128	@ 0x80
 800e15a:	05db      	lsls	r3, r3, #23
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d123      	bne.n	800e1a8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e160:	4b27      	ldr	r3, [pc, #156]	@ (800e200 <HAL_TIM_MspPostInit+0xc4>)
 800e162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e164:	4b26      	ldr	r3, [pc, #152]	@ (800e200 <HAL_TIM_MspPostInit+0xc4>)
 800e166:	2101      	movs	r1, #1
 800e168:	430a      	orrs	r2, r1
 800e16a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e16c:	4b24      	ldr	r3, [pc, #144]	@ (800e200 <HAL_TIM_MspPostInit+0xc4>)
 800e16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e170:	2201      	movs	r2, #1
 800e172:	4013      	ands	r3, r2
 800e174:	613b      	str	r3, [r7, #16]
 800e176:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e178:	0021      	movs	r1, r4
 800e17a:	187b      	adds	r3, r7, r1
 800e17c:	220d      	movs	r2, #13
 800e17e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e180:	187b      	adds	r3, r7, r1
 800e182:	2202      	movs	r2, #2
 800e184:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e186:	187b      	adds	r3, r7, r1
 800e188:	2200      	movs	r2, #0
 800e18a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e18c:	187b      	adds	r3, r7, r1
 800e18e:	2200      	movs	r2, #0
 800e190:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e192:	187b      	adds	r3, r7, r1
 800e194:	2202      	movs	r2, #2
 800e196:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e198:	187a      	adds	r2, r7, r1
 800e19a:	23a0      	movs	r3, #160	@ 0xa0
 800e19c:	05db      	lsls	r3, r3, #23
 800e19e:	0011      	movs	r1, r2
 800e1a0:	0018      	movs	r0, r3
 800e1a2:	f001 ff95 	bl	80100d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e1a6:	e027      	b.n	800e1f8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a15      	ldr	r2, [pc, #84]	@ (800e204 <HAL_TIM_MspPostInit+0xc8>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d122      	bne.n	800e1f8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1b2:	4b13      	ldr	r3, [pc, #76]	@ (800e200 <HAL_TIM_MspPostInit+0xc4>)
 800e1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b6:	4b12      	ldr	r3, [pc, #72]	@ (800e200 <HAL_TIM_MspPostInit+0xc4>)
 800e1b8:	2104      	movs	r1, #4
 800e1ba:	430a      	orrs	r2, r1
 800e1bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1be:	4b10      	ldr	r3, [pc, #64]	@ (800e200 <HAL_TIM_MspPostInit+0xc4>)
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	2204      	movs	r2, #4
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e1ca:	2114      	movs	r1, #20
 800e1cc:	187b      	adds	r3, r7, r1
 800e1ce:	22e0      	movs	r2, #224	@ 0xe0
 800e1d0:	0052      	lsls	r2, r2, #1
 800e1d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1d4:	187b      	adds	r3, r7, r1
 800e1d6:	2202      	movs	r2, #2
 800e1d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1da:	187b      	adds	r3, r7, r1
 800e1dc:	2200      	movs	r2, #0
 800e1de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1e0:	187b      	adds	r3, r7, r1
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e1e6:	187b      	adds	r3, r7, r1
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1ec:	187b      	adds	r3, r7, r1
 800e1ee:	4a06      	ldr	r2, [pc, #24]	@ (800e208 <HAL_TIM_MspPostInit+0xcc>)
 800e1f0:	0019      	movs	r1, r3
 800e1f2:	0010      	movs	r0, r2
 800e1f4:	f001 ff6c 	bl	80100d0 <HAL_GPIO_Init>
}
 800e1f8:	46c0      	nop			@ (mov r8, r8)
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	b00b      	add	sp, #44	@ 0x2c
 800e1fe:	bd90      	pop	{r4, r7, pc}
 800e200:	40021000 	.word	0x40021000
 800e204:	40000400 	.word	0x40000400
 800e208:	50000800 	.word	0x50000800

0800e20c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e210:	4b17      	ldr	r3, [pc, #92]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e212:	4a18      	ldr	r2, [pc, #96]	@ (800e274 <MX_LPUART1_UART_Init+0x68>)
 800e214:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e216:	4b16      	ldr	r3, [pc, #88]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e218:	22e1      	movs	r2, #225	@ 0xe1
 800e21a:	0252      	lsls	r2, r2, #9
 800e21c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e21e:	4b14      	ldr	r3, [pc, #80]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e220:	2200      	movs	r2, #0
 800e222:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e224:	4b12      	ldr	r3, [pc, #72]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e226:	2200      	movs	r2, #0
 800e228:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e22a:	4b11      	ldr	r3, [pc, #68]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e230:	4b0f      	ldr	r3, [pc, #60]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e232:	220c      	movs	r2, #12
 800e234:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e236:	4b0e      	ldr	r3, [pc, #56]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e238:	2200      	movs	r2, #0
 800e23a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e23c:	4b0c      	ldr	r3, [pc, #48]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e23e:	2200      	movs	r2, #0
 800e240:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e242:	4b0b      	ldr	r3, [pc, #44]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e244:	2218      	movs	r2, #24
 800e246:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e248:	4b09      	ldr	r3, [pc, #36]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e24a:	2280      	movs	r2, #128	@ 0x80
 800e24c:	0212      	lsls	r2, r2, #8
 800e24e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e250:	4b07      	ldr	r3, [pc, #28]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e252:	2280      	movs	r2, #128	@ 0x80
 800e254:	0152      	lsls	r2, r2, #5
 800e256:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e258:	4b05      	ldr	r3, [pc, #20]	@ (800e270 <MX_LPUART1_UART_Init+0x64>)
 800e25a:	0018      	movs	r0, r3
 800e25c:	f009 f808 	bl	8017270 <HAL_UART_Init>
 800e260:	1e03      	subs	r3, r0, #0
 800e262:	d001      	beq.n	800e268 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e264:	f7fa f858 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e268:	46c0      	nop			@ (mov r8, r8)
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	46c0      	nop			@ (mov r8, r8)
 800e270:	200020e8 	.word	0x200020e8
 800e274:	40004800 	.word	0x40004800

0800e278 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e27c:	4b16      	ldr	r3, [pc, #88]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e27e:	4a17      	ldr	r2, [pc, #92]	@ (800e2dc <MX_USART1_UART_Init+0x64>)
 800e280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e282:	4b15      	ldr	r3, [pc, #84]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e284:	22e1      	movs	r2, #225	@ 0xe1
 800e286:	0252      	lsls	r2, r2, #9
 800e288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e28a:	4b13      	ldr	r3, [pc, #76]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e290:	4b11      	ldr	r3, [pc, #68]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e292:	2200      	movs	r2, #0
 800e294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e296:	4b10      	ldr	r3, [pc, #64]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e298:	2200      	movs	r2, #0
 800e29a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e29c:	4b0e      	ldr	r3, [pc, #56]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e29e:	220c      	movs	r2, #12
 800e2a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e2b4:	4b08      	ldr	r3, [pc, #32]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e2b6:	2208      	movs	r2, #8
 800e2b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e2ba:	4b07      	ldr	r3, [pc, #28]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e2bc:	2280      	movs	r2, #128	@ 0x80
 800e2be:	0212      	lsls	r2, r2, #8
 800e2c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e2c2:	4b05      	ldr	r3, [pc, #20]	@ (800e2d8 <MX_USART1_UART_Init+0x60>)
 800e2c4:	0018      	movs	r0, r3
 800e2c6:	f008 ffd3 	bl	8017270 <HAL_UART_Init>
 800e2ca:	1e03      	subs	r3, r0, #0
 800e2cc:	d001      	beq.n	800e2d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e2ce:	f7fa f823 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e2d2:	46c0      	nop			@ (mov r8, r8)
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	200021a0 	.word	0x200021a0
 800e2dc:	40013800 	.word	0x40013800

0800e2e0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e2e4:	4b14      	ldr	r3, [pc, #80]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e2e6:	4a15      	ldr	r2, [pc, #84]	@ (800e33c <MX_USART4_UART_Init+0x5c>)
 800e2e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e2ea:	4b13      	ldr	r3, [pc, #76]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e2ec:	22e1      	movs	r2, #225	@ 0xe1
 800e2ee:	0252      	lsls	r2, r2, #9
 800e2f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e2f2:	4b11      	ldr	r3, [pc, #68]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e300:	2200      	movs	r2, #0
 800e302:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e304:	4b0c      	ldr	r3, [pc, #48]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e306:	220c      	movs	r2, #12
 800e308:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e30a:	4b0b      	ldr	r3, [pc, #44]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e310:	4b09      	ldr	r3, [pc, #36]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e312:	2200      	movs	r2, #0
 800e314:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e316:	4b08      	ldr	r3, [pc, #32]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e318:	2200      	movs	r2, #0
 800e31a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e31c:	4b06      	ldr	r3, [pc, #24]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e31e:	2200      	movs	r2, #0
 800e320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e322:	4b05      	ldr	r3, [pc, #20]	@ (800e338 <MX_USART4_UART_Init+0x58>)
 800e324:	0018      	movs	r0, r3
 800e326:	f008 ffa3 	bl	8017270 <HAL_UART_Init>
 800e32a:	1e03      	subs	r3, r0, #0
 800e32c:	d001      	beq.n	800e332 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e32e:	f7f9 fff3 	bl	8008318 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e332:	46c0      	nop			@ (mov r8, r8)
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20002258 	.word	0x20002258
 800e33c:	40004c00 	.word	0x40004c00

0800e340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e340:	b590      	push	{r4, r7, lr}
 800e342:	b08d      	sub	sp, #52	@ 0x34
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e348:	241c      	movs	r4, #28
 800e34a:	193b      	adds	r3, r7, r4
 800e34c:	0018      	movs	r0, r3
 800e34e:	2314      	movs	r3, #20
 800e350:	001a      	movs	r2, r3
 800e352:	2100      	movs	r1, #0
 800e354:	f012 f81e 	bl	8020394 <memset>
  if(uartHandle->Instance==LPUART1)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a8b      	ldr	r2, [pc, #556]	@ (800e58c <HAL_UART_MspInit+0x24c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d129      	bne.n	800e3b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e362:	4b8b      	ldr	r3, [pc, #556]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e366:	4b8a      	ldr	r3, [pc, #552]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e368:	2180      	movs	r1, #128	@ 0x80
 800e36a:	02c9      	lsls	r1, r1, #11
 800e36c:	430a      	orrs	r2, r1
 800e36e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e370:	4b87      	ldr	r3, [pc, #540]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e374:	4b86      	ldr	r3, [pc, #536]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e376:	2104      	movs	r1, #4
 800e378:	430a      	orrs	r2, r1
 800e37a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e37c:	4b84      	ldr	r3, [pc, #528]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e380:	2204      	movs	r2, #4
 800e382:	4013      	ands	r3, r2
 800e384:	61bb      	str	r3, [r7, #24]
 800e386:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e388:	0021      	movs	r1, r4
 800e38a:	187b      	adds	r3, r7, r1
 800e38c:	2203      	movs	r2, #3
 800e38e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e390:	187b      	adds	r3, r7, r1
 800e392:	2202      	movs	r2, #2
 800e394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e396:	187b      	adds	r3, r7, r1
 800e398:	2200      	movs	r2, #0
 800e39a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e39c:	187b      	adds	r3, r7, r1
 800e39e:	2203      	movs	r2, #3
 800e3a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e3a2:	187b      	adds	r3, r7, r1
 800e3a4:	2206      	movs	r2, #6
 800e3a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e3a8:	187b      	adds	r3, r7, r1
 800e3aa:	4a7a      	ldr	r2, [pc, #488]	@ (800e594 <HAL_UART_MspInit+0x254>)
 800e3ac:	0019      	movs	r1, r3
 800e3ae:	0010      	movs	r0, r2
 800e3b0:	f001 fe8e 	bl	80100d0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e3b4:	e0e5      	b.n	800e582 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a77      	ldr	r2, [pc, #476]	@ (800e598 <HAL_UART_MspInit+0x258>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d133      	bne.n	800e428 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e3c0:	4b73      	ldr	r3, [pc, #460]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e3c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3c4:	4b72      	ldr	r3, [pc, #456]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e3c6:	2180      	movs	r1, #128	@ 0x80
 800e3c8:	01c9      	lsls	r1, r1, #7
 800e3ca:	430a      	orrs	r2, r1
 800e3cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3ce:	4b70      	ldr	r3, [pc, #448]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e3d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3d2:	4b6f      	ldr	r3, [pc, #444]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e3da:	4b6d      	ldr	r3, [pc, #436]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3de:	2201      	movs	r2, #1
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]
 800e3e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e3e6:	211c      	movs	r1, #28
 800e3e8:	187b      	adds	r3, r7, r1
 800e3ea:	22c0      	movs	r2, #192	@ 0xc0
 800e3ec:	00d2      	lsls	r2, r2, #3
 800e3ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3f0:	187b      	adds	r3, r7, r1
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3f6:	187b      	adds	r3, r7, r1
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3fc:	187b      	adds	r3, r7, r1
 800e3fe:	2203      	movs	r2, #3
 800e400:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e402:	187b      	adds	r3, r7, r1
 800e404:	2204      	movs	r2, #4
 800e406:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e408:	187a      	adds	r2, r7, r1
 800e40a:	23a0      	movs	r3, #160	@ 0xa0
 800e40c:	05db      	lsls	r3, r3, #23
 800e40e:	0011      	movs	r1, r2
 800e410:	0018      	movs	r0, r3
 800e412:	f001 fe5d 	bl	80100d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e416:	2200      	movs	r2, #0
 800e418:	2100      	movs	r1, #0
 800e41a:	201b      	movs	r0, #27
 800e41c:	f001 fa06 	bl	800f82c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e420:	201b      	movs	r0, #27
 800e422:	f001 fa18 	bl	800f856 <HAL_NVIC_EnableIRQ>
}
 800e426:	e0ac      	b.n	800e582 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a5b      	ldr	r2, [pc, #364]	@ (800e59c <HAL_UART_MspInit+0x25c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d000      	beq.n	800e434 <HAL_UART_MspInit+0xf4>
 800e432:	e0a6      	b.n	800e582 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e434:	4b56      	ldr	r3, [pc, #344]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e438:	4b55      	ldr	r3, [pc, #340]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e43a:	2180      	movs	r1, #128	@ 0x80
 800e43c:	0309      	lsls	r1, r1, #12
 800e43e:	430a      	orrs	r2, r1
 800e440:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e442:	4b53      	ldr	r3, [pc, #332]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e446:	4b52      	ldr	r3, [pc, #328]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e448:	2101      	movs	r1, #1
 800e44a:	430a      	orrs	r2, r1
 800e44c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e44e:	4b50      	ldr	r3, [pc, #320]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e452:	2201      	movs	r2, #1
 800e454:	4013      	ands	r3, r2
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e45a:	4b4d      	ldr	r3, [pc, #308]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e45e:	4b4c      	ldr	r3, [pc, #304]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e460:	2104      	movs	r1, #4
 800e462:	430a      	orrs	r2, r1
 800e464:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e466:	4b4a      	ldr	r3, [pc, #296]	@ (800e590 <HAL_UART_MspInit+0x250>)
 800e468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e46a:	2204      	movs	r2, #4
 800e46c:	4013      	ands	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e472:	241c      	movs	r4, #28
 800e474:	193b      	adds	r3, r7, r4
 800e476:	2202      	movs	r2, #2
 800e478:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e47a:	193b      	adds	r3, r7, r4
 800e47c:	2202      	movs	r2, #2
 800e47e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e480:	193b      	adds	r3, r7, r4
 800e482:	2200      	movs	r2, #0
 800e484:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e486:	193b      	adds	r3, r7, r4
 800e488:	2203      	movs	r2, #3
 800e48a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e48c:	193b      	adds	r3, r7, r4
 800e48e:	2206      	movs	r2, #6
 800e490:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e492:	193a      	adds	r2, r7, r4
 800e494:	23a0      	movs	r3, #160	@ 0xa0
 800e496:	05db      	lsls	r3, r3, #23
 800e498:	0011      	movs	r1, r2
 800e49a:	0018      	movs	r0, r3
 800e49c:	f001 fe18 	bl	80100d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e4a0:	0021      	movs	r1, r4
 800e4a2:	187b      	adds	r3, r7, r1
 800e4a4:	2280      	movs	r2, #128	@ 0x80
 800e4a6:	00d2      	lsls	r2, r2, #3
 800e4a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4aa:	187b      	adds	r3, r7, r1
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4b0:	187b      	adds	r3, r7, r1
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4b6:	187b      	adds	r3, r7, r1
 800e4b8:	2203      	movs	r2, #3
 800e4ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e4bc:	187b      	adds	r3, r7, r1
 800e4be:	2206      	movs	r2, #6
 800e4c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e4c2:	187b      	adds	r3, r7, r1
 800e4c4:	4a33      	ldr	r2, [pc, #204]	@ (800e594 <HAL_UART_MspInit+0x254>)
 800e4c6:	0019      	movs	r1, r3
 800e4c8:	0010      	movs	r0, r2
 800e4ca:	f001 fe01 	bl	80100d0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e4ce:	4b34      	ldr	r3, [pc, #208]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4d0:	4a34      	ldr	r2, [pc, #208]	@ (800e5a4 <HAL_UART_MspInit+0x264>)
 800e4d2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e4d4:	4b32      	ldr	r3, [pc, #200]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4d6:	220c      	movs	r2, #12
 800e4d8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e4da:	4b31      	ldr	r3, [pc, #196]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4e0:	4b2f      	ldr	r3, [pc, #188]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e4e6:	4b2e      	ldr	r3, [pc, #184]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4e8:	2280      	movs	r2, #128	@ 0x80
 800e4ea:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e4ec:	4b2c      	ldr	r3, [pc, #176]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e4f2:	4b2b      	ldr	r3, [pc, #172]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e4f8:	4b29      	ldr	r3, [pc, #164]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e4fe:	4b28      	ldr	r3, [pc, #160]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e500:	2200      	movs	r2, #0
 800e502:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e504:	4b26      	ldr	r3, [pc, #152]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e506:	0018      	movs	r0, r3
 800e508:	f001 f9c6 	bl	800f898 <HAL_DMA_Init>
 800e50c:	1e03      	subs	r3, r0, #0
 800e50e:	d001      	beq.n	800e514 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e510:	f7f9 ff02 	bl	8008318 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a22      	ldr	r2, [pc, #136]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e518:	675a      	str	r2, [r3, #116]	@ 0x74
 800e51a:	4b21      	ldr	r3, [pc, #132]	@ (800e5a0 <HAL_UART_MspInit+0x260>)
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e520:	4b21      	ldr	r3, [pc, #132]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e522:	4a22      	ldr	r2, [pc, #136]	@ (800e5ac <HAL_UART_MspInit+0x26c>)
 800e524:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e526:	4b20      	ldr	r3, [pc, #128]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e528:	220c      	movs	r2, #12
 800e52a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e52c:	4b1e      	ldr	r3, [pc, #120]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e52e:	2210      	movs	r2, #16
 800e530:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e532:	4b1d      	ldr	r3, [pc, #116]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e534:	2200      	movs	r2, #0
 800e536:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e538:	4b1b      	ldr	r3, [pc, #108]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e53a:	2280      	movs	r2, #128	@ 0x80
 800e53c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e53e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e540:	2200      	movs	r2, #0
 800e542:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e544:	4b18      	ldr	r3, [pc, #96]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e546:	2200      	movs	r2, #0
 800e548:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e54a:	4b17      	ldr	r3, [pc, #92]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e550:	4b15      	ldr	r3, [pc, #84]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e552:	2200      	movs	r2, #0
 800e554:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e556:	4b14      	ldr	r3, [pc, #80]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e558:	0018      	movs	r0, r3
 800e55a:	f001 f99d 	bl	800f898 <HAL_DMA_Init>
 800e55e:	1e03      	subs	r3, r0, #0
 800e560:	d001      	beq.n	800e566 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e562:	f7f9 fed9 	bl	8008318 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a0f      	ldr	r2, [pc, #60]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e56a:	671a      	str	r2, [r3, #112]	@ 0x70
 800e56c:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a8 <HAL_UART_MspInit+0x268>)
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e572:	2200      	movs	r2, #0
 800e574:	2100      	movs	r1, #0
 800e576:	200e      	movs	r0, #14
 800e578:	f001 f958 	bl	800f82c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e57c:	200e      	movs	r0, #14
 800e57e:	f001 f96a 	bl	800f856 <HAL_NVIC_EnableIRQ>
}
 800e582:	46c0      	nop			@ (mov r8, r8)
 800e584:	46bd      	mov	sp, r7
 800e586:	b00d      	add	sp, #52	@ 0x34
 800e588:	bd90      	pop	{r4, r7, pc}
 800e58a:	46c0      	nop			@ (mov r8, r8)
 800e58c:	40004800 	.word	0x40004800
 800e590:	40021000 	.word	0x40021000
 800e594:	50000800 	.word	0x50000800
 800e598:	40013800 	.word	0x40013800
 800e59c:	40004c00 	.word	0x40004c00
 800e5a0:	20002310 	.word	0x20002310
 800e5a4:	4002006c 	.word	0x4002006c
 800e5a8:	20002358 	.word	0x20002358
 800e5ac:	40020080 	.word	0x40020080

0800e5b0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e5b8:	f000 fc94 	bl	800eee4 <HAL_GetTick>
 800e5bc:	0003      	movs	r3, r0
 800e5be:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e5c0:	4b1c      	ldr	r3, [pc, #112]	@ (800e634 <TimestampIsReached+0x84>)
 800e5c2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e5c4:	697a      	ldr	r2, [r7, #20]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d307      	bcc.n	800e5dc <TimestampIsReached+0x2c>
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d901      	bls.n	800e5dc <TimestampIsReached+0x2c>
 800e5d8:	2201      	movs	r2, #1
 800e5da:	e000      	b.n	800e5de <TimestampIsReached+0x2e>
 800e5dc:	2200      	movs	r2, #0
 800e5de:	230f      	movs	r3, #15
 800e5e0:	18fb      	adds	r3, r7, r3
 800e5e2:	701a      	strb	r2, [r3, #0]
 800e5e4:	781a      	ldrb	r2, [r3, #0]
 800e5e6:	2101      	movs	r1, #1
 800e5e8:	400a      	ands	r2, r1
 800e5ea:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d207      	bcs.n	800e604 <TimestampIsReached+0x54>
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d201      	bcs.n	800e604 <TimestampIsReached+0x54>
 800e600:	2201      	movs	r2, #1
 800e602:	e000      	b.n	800e606 <TimestampIsReached+0x56>
 800e604:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e606:	200e      	movs	r0, #14
 800e608:	183b      	adds	r3, r7, r0
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	781a      	ldrb	r2, [r3, #0]
 800e60e:	2101      	movs	r1, #1
 800e610:	400a      	ands	r2, r1
 800e612:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e614:	230f      	movs	r3, #15
 800e616:	18fb      	adds	r3, r7, r3
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d103      	bne.n	800e626 <TimestampIsReached+0x76>
 800e61e:	183b      	adds	r3, r7, r0
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e626:	2301      	movs	r3, #1
 800e628:	e000      	b.n	800e62c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	0018      	movs	r0, r3
 800e62e:	46bd      	mov	sp, r7
 800e630:	b006      	add	sp, #24
 800e632:	bd80      	pop	{r7, pc}
 800e634:	7fffffff 	.word	0x7fffffff

0800e638 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e640:	f000 fc50 	bl	800eee4 <HAL_GetTick>
 800e644:	0002      	movs	r2, r0
 800e646:	4904      	ldr	r1, [pc, #16]	@ (800e658 <AddTimestamp+0x20>)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	0018      	movs	r0, r3
 800e64c:	f011 fd5e 	bl	802010c <siprintf>
}
 800e650:	46c0      	nop			@ (mov r8, r8)
 800e652:	46bd      	mov	sp, r7
 800e654:	b002      	add	sp, #8
 800e656:	bd80      	pop	{r7, pc}
 800e658:	0802516c 	.word	0x0802516c

0800e65c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e65c:	b40c      	push	{r2, r3}
 800e65e:	b5b0      	push	{r4, r5, r7, lr}
 800e660:	b0a4      	sub	sp, #144	@ 0x90
 800e662:	af00      	add	r7, sp, #0
 800e664:	0002      	movs	r2, r0
 800e666:	6039      	str	r1, [r7, #0]
 800e668:	1dfb      	adds	r3, r7, #7
 800e66a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e66c:	4b23      	ldr	r3, [pc, #140]	@ (800e6fc <CreateLine+0xa0>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	1dfa      	adds	r2, r7, #7
 800e672:	7812      	ldrb	r2, [r2, #0]
 800e674:	429a      	cmp	r2, r3
 800e676:	d839      	bhi.n	800e6ec <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	4921      	ldr	r1, [pc, #132]	@ (800e700 <CreateLine+0xa4>)
 800e67c:	240c      	movs	r4, #12
 800e67e:	193b      	adds	r3, r7, r4
 800e680:	0018      	movs	r0, r3
 800e682:	f011 fd43 	bl	802010c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e686:	4b1d      	ldr	r3, [pc, #116]	@ (800e6fc <CreateLine+0xa0>)
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d909      	bls.n	800e6a2 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e68e:	193b      	adds	r3, r7, r4
 800e690:	0018      	movs	r0, r3
 800e692:	f7f1 fd6b 	bl	800016c <strlen>
 800e696:	0002      	movs	r2, r0
 800e698:	193b      	adds	r3, r7, r4
 800e69a:	189b      	adds	r3, r3, r2
 800e69c:	0018      	movs	r0, r3
 800e69e:	f7ff ffcb 	bl	800e638 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e6a2:	240c      	movs	r4, #12
 800e6a4:	193b      	adds	r3, r7, r4
 800e6a6:	0018      	movs	r0, r3
 800e6a8:	f7f1 fd60 	bl	800016c <strlen>
 800e6ac:	0003      	movs	r3, r0
 800e6ae:	218c      	movs	r1, #140	@ 0x8c
 800e6b0:	187a      	adds	r2, r7, r1
 800e6b2:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e6b4:	239c      	movs	r3, #156	@ 0x9c
 800e6b6:	2508      	movs	r5, #8
 800e6b8:	195b      	adds	r3, r3, r5
 800e6ba:	19db      	adds	r3, r3, r7
 800e6bc:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e6be:	193a      	adds	r2, r7, r4
 800e6c0:	187b      	adds	r3, r7, r1
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	18d0      	adds	r0, r2, r3
 800e6c6:	187b      	adds	r3, r7, r1
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2280      	movs	r2, #128	@ 0x80
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	0019      	movs	r1, r3
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	2298      	movs	r2, #152	@ 0x98
 800e6d4:	1952      	adds	r2, r2, r5
 800e6d6:	19d2      	adds	r2, r2, r7
 800e6d8:	6812      	ldr	r2, [r2, #0]
 800e6da:	f011 fdaf 	bl	802023c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e6de:	193a      	adds	r2, r7, r4
 800e6e0:	4b08      	ldr	r3, [pc, #32]	@ (800e704 <CreateLine+0xa8>)
 800e6e2:	0011      	movs	r1, r2
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f011 fca1 	bl	802002c <iprintf>
 800e6ea:	e000      	b.n	800e6ee <CreateLine+0x92>
    return;
 800e6ec:	46c0      	nop			@ (mov r8, r8)
}
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	b024      	add	sp, #144	@ 0x90
 800e6f2:	bcb0      	pop	{r4, r5, r7}
 800e6f4:	bc08      	pop	{r3}
 800e6f6:	b002      	add	sp, #8
 800e6f8:	4718      	bx	r3
 800e6fa:	46c0      	nop			@ (mov r8, r8)
 800e6fc:	200000d4 	.word	0x200000d4
 800e700:	08025178 	.word	0x08025178
 800e704:	0802517c 	.word	0x0802517c

0800e708 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	b29a      	uxth	r2, r3
 800e718:	68b9      	ldr	r1, [r7, #8]
 800e71a:	4804      	ldr	r0, [pc, #16]	@ (800e72c <_write+0x24>)
 800e71c:	2364      	movs	r3, #100	@ 0x64
 800e71e:	f008 fe0d 	bl	801733c <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e722:	687b      	ldr	r3, [r7, #4]
}
 800e724:	0018      	movs	r0, r3
 800e726:	46bd      	mov	sp, r7
 800e728:	b004      	add	sp, #16
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	200021a0 	.word	0x200021a0

0800e730 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	0002      	movs	r2, r0
 800e738:	1dfb      	adds	r3, r7, #7
 800e73a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e73c:	4b03      	ldr	r3, [pc, #12]	@ (800e74c <SetVerboseLevel+0x1c>)
 800e73e:	1dfa      	adds	r2, r7, #7
 800e740:	7812      	ldrb	r2, [r2, #0]
 800e742:	701a      	strb	r2, [r3, #0]
}
 800e744:	46c0      	nop			@ (mov r8, r8)
 800e746:	46bd      	mov	sp, r7
 800e748:	b002      	add	sp, #8
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	200000d4 	.word	0x200000d4

0800e750 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e754:	4b02      	ldr	r3, [pc, #8]	@ (800e760 <GetVerboseLevel+0x10>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	0018      	movs	r0, r3
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	46c0      	nop			@ (mov r8, r8)
 800e760:	200000d4 	.word	0x200000d4

0800e764 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e76a:	4a0f      	ldr	r2, [pc, #60]	@ (800e7a8 <BinaryReleaseInfo+0x44>)
 800e76c:	4b0f      	ldr	r3, [pc, #60]	@ (800e7ac <BinaryReleaseInfo+0x48>)
 800e76e:	0019      	movs	r1, r3
 800e770:	2002      	movs	r0, #2
 800e772:	f7ff ff73 	bl	800e65c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e776:	480e      	ldr	r0, [pc, #56]	@ (800e7b0 <BinaryReleaseInfo+0x4c>)
 800e778:	4a0e      	ldr	r2, [pc, #56]	@ (800e7b4 <BinaryReleaseInfo+0x50>)
 800e77a:	490c      	ldr	r1, [pc, #48]	@ (800e7ac <BinaryReleaseInfo+0x48>)
 800e77c:	4b0e      	ldr	r3, [pc, #56]	@ (800e7b8 <BinaryReleaseInfo+0x54>)
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	0003      	movs	r3, r0
 800e782:	2002      	movs	r0, #2
 800e784:	f7ff ff6a 	bl	800e65c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e788:	4b0c      	ldr	r3, [pc, #48]	@ (800e7bc <BinaryReleaseInfo+0x58>)
 800e78a:	4a0d      	ldr	r2, [pc, #52]	@ (800e7c0 <BinaryReleaseInfo+0x5c>)
 800e78c:	4907      	ldr	r1, [pc, #28]	@ (800e7ac <BinaryReleaseInfo+0x48>)
 800e78e:	2002      	movs	r0, #2
 800e790:	f7ff ff64 	bl	800e65c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e794:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c4 <BinaryReleaseInfo+0x60>)
 800e796:	4a0c      	ldr	r2, [pc, #48]	@ (800e7c8 <BinaryReleaseInfo+0x64>)
 800e798:	4904      	ldr	r1, [pc, #16]	@ (800e7ac <BinaryReleaseInfo+0x48>)
 800e79a:	2002      	movs	r0, #2
 800e79c:	f7ff ff5e 	bl	800e65c <CreateLine>
}
 800e7a0:	46c0      	nop			@ (mov r8, r8)
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	46c0      	nop			@ (mov r8, r8)
 800e7a8:	08025184 	.word	0x08025184
 800e7ac:	080251b0 	.word	0x080251b0
 800e7b0:	080251b4 	.word	0x080251b4
 800e7b4:	080251c0 	.word	0x080251c0
 800e7b8:	080251d4 	.word	0x080251d4
 800e7bc:	080251e0 	.word	0x080251e0
 800e7c0:	080251ec 	.word	0x080251ec
 800e7c4:	080251f4 	.word	0x080251f4
 800e7c8:	080251fc 	.word	0x080251fc

0800e7cc <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	68f9      	ldr	r1, [r7, #12]
 800e7de:	4803      	ldr	r0, [pc, #12]	@ (800e7ec <errorHandler+0x20>)
 800e7e0:	f011 fc24 	bl	802002c <iprintf>
//    while (true)
//    {
//    }
}
 800e7e4:	46c0      	nop			@ (mov r8, r8)
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	b004      	add	sp, #16
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	08025214 	.word	0x08025214

0800e7f0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e7f0:	b590      	push	{r4, r7, lr}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6039      	str	r1, [r7, #0]
 800e7f8:	0011      	movs	r1, r2
 800e7fa:	1dfb      	adds	r3, r7, #7
 800e7fc:	1c02      	adds	r2, r0, #0
 800e7fe:	701a      	strb	r2, [r3, #0]
 800e800:	1dbb      	adds	r3, r7, #6
 800e802:	1c0a      	adds	r2, r1, #0
 800e804:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e806:	4b0a      	ldr	r3, [pc, #40]	@ (800e830 <ReadRegister+0x40>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00a      	beq.n	800e824 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e80e:	4b08      	ldr	r3, [pc, #32]	@ (800e830 <ReadRegister+0x40>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	1dba      	adds	r2, r7, #6
 800e814:	7814      	ldrb	r4, [r2, #0]
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	1dfa      	adds	r2, r7, #7
 800e81a:	7810      	ldrb	r0, [r2, #0]
 800e81c:	0022      	movs	r2, r4
 800e81e:	4798      	blx	r3
 800e820:	0003      	movs	r3, r0
 800e822:	e000      	b.n	800e826 <ReadRegister+0x36>
	}
	return false;
 800e824:	2300      	movs	r3, #0
}
 800e826:	0018      	movs	r0, r3
 800e828:	46bd      	mov	sp, r7
 800e82a:	b003      	add	sp, #12
 800e82c:	bd90      	pop	{r4, r7, pc}
 800e82e:	46c0      	nop			@ (mov r8, r8)
 800e830:	200023a8 	.word	0x200023a8

0800e834 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e834:	b590      	push	{r4, r7, lr}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6039      	str	r1, [r7, #0]
 800e83c:	0011      	movs	r1, r2
 800e83e:	1dfb      	adds	r3, r7, #7
 800e840:	1c02      	adds	r2, r0, #0
 800e842:	701a      	strb	r2, [r3, #0]
 800e844:	1dbb      	adds	r3, r7, #6
 800e846:	1c0a      	adds	r2, r1, #0
 800e848:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e84a:	4b0a      	ldr	r3, [pc, #40]	@ (800e874 <WriteRegister+0x40>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00a      	beq.n	800e868 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e852:	4b08      	ldr	r3, [pc, #32]	@ (800e874 <WriteRegister+0x40>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	1dba      	adds	r2, r7, #6
 800e858:	7814      	ldrb	r4, [r2, #0]
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	1dfa      	adds	r2, r7, #7
 800e85e:	7810      	ldrb	r0, [r2, #0]
 800e860:	0022      	movs	r2, r4
 800e862:	4798      	blx	r3
 800e864:	0003      	movs	r3, r0
 800e866:	e000      	b.n	800e86a <WriteRegister+0x36>
  }
  return false;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	0018      	movs	r0, r3
 800e86c:	46bd      	mov	sp, r7
 800e86e:	b003      	add	sp, #12
 800e870:	bd90      	pop	{r4, r7, pc}
 800e872:	46c0      	nop			@ (mov r8, r8)
 800e874:	200023ac 	.word	0x200023ac

0800e878 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	000a      	movs	r2, r1
 800e882:	1cfb      	adds	r3, r7, #3
 800e884:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e886:	230f      	movs	r3, #15
 800e888:	18fb      	adds	r3, r7, r3
 800e88a:	22ff      	movs	r2, #255	@ 0xff
 800e88c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e88e:	230e      	movs	r3, #14
 800e890:	18fb      	adds	r3, r7, r3
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
 800e896:	e037      	b.n	800e908 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e898:	230e      	movs	r3, #14
 800e89a:	18fb      	adds	r3, r7, r3
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	18d3      	adds	r3, r2, r3
 800e8a2:	7819      	ldrb	r1, [r3, #0]
 800e8a4:	220f      	movs	r2, #15
 800e8a6:	18bb      	adds	r3, r7, r2
 800e8a8:	18ba      	adds	r2, r7, r2
 800e8aa:	7812      	ldrb	r2, [r2, #0]
 800e8ac:	404a      	eors	r2, r1
 800e8ae:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e8b0:	230d      	movs	r3, #13
 800e8b2:	18fb      	adds	r3, r7, r3
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	701a      	strb	r2, [r3, #0]
 800e8b8:	e01b      	b.n	800e8f2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e8ba:	210f      	movs	r1, #15
 800e8bc:	187b      	adds	r3, r7, r1
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	b25b      	sxtb	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	da09      	bge.n	800e8da <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e8c6:	187b      	adds	r3, r7, r1
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	b25b      	sxtb	r3, r3
 800e8ce:	2231      	movs	r2, #49	@ 0x31
 800e8d0:	4053      	eors	r3, r2
 800e8d2:	b25a      	sxtb	r2, r3
 800e8d4:	187b      	adds	r3, r7, r1
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	e005      	b.n	800e8e6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e8da:	230f      	movs	r3, #15
 800e8dc:	18fa      	adds	r2, r7, r3
 800e8de:	18fb      	adds	r3, r7, r3
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	18db      	adds	r3, r3, r3
 800e8e4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e8e6:	210d      	movs	r1, #13
 800e8e8:	187b      	adds	r3, r7, r1
 800e8ea:	781a      	ldrb	r2, [r3, #0]
 800e8ec:	187b      	adds	r3, r7, r1
 800e8ee:	3201      	adds	r2, #1
 800e8f0:	701a      	strb	r2, [r3, #0]
 800e8f2:	230d      	movs	r3, #13
 800e8f4:	18fb      	adds	r3, r7, r3
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	2b07      	cmp	r3, #7
 800e8fa:	d9de      	bls.n	800e8ba <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e8fc:	210e      	movs	r1, #14
 800e8fe:	187b      	adds	r3, r7, r1
 800e900:	781a      	ldrb	r2, [r3, #0]
 800e902:	187b      	adds	r3, r7, r1
 800e904:	3201      	adds	r2, #1
 800e906:	701a      	strb	r2, [r3, #0]
 800e908:	230e      	movs	r3, #14
 800e90a:	18fa      	adds	r2, r7, r3
 800e90c:	1cfb      	adds	r3, r7, #3
 800e90e:	7812      	ldrb	r2, [r2, #0]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	429a      	cmp	r2, r3
 800e914:	d3c0      	bcc.n	800e898 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e916:	230f      	movs	r3, #15
 800e918:	18fb      	adds	r3, r7, r3
 800e91a:	781b      	ldrb	r3, [r3, #0]
}
 800e91c:	0018      	movs	r0, r3
 800e91e:	46bd      	mov	sp, r7
 800e920:	b004      	add	sp, #16
 800e922:	bd80      	pop	{r7, pc}

0800e924 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e92e:	4b0a      	ldr	r3, [pc, #40]	@ (800e958 <HIDS_Init+0x34>)
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e934:	4b09      	ldr	r3, [pc, #36]	@ (800e95c <HIDS_Init+0x38>)
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e93a:	4b09      	ldr	r3, [pc, #36]	@ (800e960 <HIDS_Init+0x3c>)
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	0018      	movs	r0, r3
 800e940:	f000 f840 	bl	800e9c4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e944:	4b07      	ldr	r3, [pc, #28]	@ (800e964 <HIDS_Init+0x40>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	0018      	movs	r0, r3
 800e94a:	f000 f82b 	bl	800e9a4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e94e:	46c0      	nop			@ (mov r8, r8)
 800e950:	46bd      	mov	sp, r7
 800e952:	b002      	add	sp, #8
 800e954:	bd80      	pop	{r7, pc}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	200023a8 	.word	0x200023a8
 800e95c:	200023ac 	.word	0x200023ac
 800e960:	200000d6 	.word	0x200000d6
 800e964:	200000d5 	.word	0x200000d5

0800e968 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e968:	b580      	push	{r7, lr}
 800e96a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e96c:	f000 faba 	bl	800eee4 <HAL_GetTick>
 800e970:	0002      	movs	r2, r0
 800e972:	4b08      	ldr	r3, [pc, #32]	@ (800e994 <HIDS_StartMeasurement+0x2c>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	18d2      	adds	r2, r2, r3
 800e978:	4b07      	ldr	r3, [pc, #28]	@ (800e998 <HIDS_StartMeasurement+0x30>)
 800e97a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e97c:	4b07      	ldr	r3, [pc, #28]	@ (800e99c <HIDS_StartMeasurement+0x34>)
 800e97e:	2201      	movs	r2, #1
 800e980:	0019      	movs	r1, r3
 800e982:	2044      	movs	r0, #68	@ 0x44
 800e984:	f7ff ff56 	bl	800e834 <WriteRegister>
  MeasurementDone = false;
 800e988:	4b05      	ldr	r3, [pc, #20]	@ (800e9a0 <HIDS_StartMeasurement+0x38>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	701a      	strb	r2, [r3, #0]
}
 800e98e:	46c0      	nop			@ (mov r8, r8)
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	200000dc 	.word	0x200000dc
 800e998:	200000d8 	.word	0x200000d8
 800e99c:	200000d6 	.word	0x200000d6
 800e9a0:	200023be 	.word	0x200023be

0800e9a4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	0002      	movs	r2, r0
 800e9ac:	1dfb      	adds	r3, r7, #7
 800e9ae:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e9b0:	4b03      	ldr	r3, [pc, #12]	@ (800e9c0 <HIDS_SetHeaterMode+0x1c>)
 800e9b2:	1dfa      	adds	r2, r7, #7
 800e9b4:	7812      	ldrb	r2, [r2, #0]
 800e9b6:	701a      	strb	r2, [r3, #0]
}
 800e9b8:	46c0      	nop			@ (mov r8, r8)
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	b002      	add	sp, #8
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	200000d5 	.word	0x200000d5

0800e9c4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	0002      	movs	r2, r0
 800e9cc:	1dfb      	adds	r3, r7, #7
 800e9ce:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e9d0:	4b03      	ldr	r3, [pc, #12]	@ (800e9e0 <HIDS_SetMeasurementMode+0x1c>)
 800e9d2:	1dfa      	adds	r2, r7, #7
 800e9d4:	7812      	ldrb	r2, [r2, #0]
 800e9d6:	701a      	strb	r2, [r3, #0]
}
 800e9d8:	46c0      	nop			@ (mov r8, r8)
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	b002      	add	sp, #8
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	200000d6 	.word	0x200000d6

0800e9e4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e9ec:	f000 fa7a 	bl	800eee4 <HAL_GetTick>
 800e9f0:	0002      	movs	r2, r0
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	18d2      	adds	r2, r2, r3
 800e9f6:	4b03      	ldr	r3, [pc, #12]	@ (800ea04 <setHIDSTimeStamp+0x20>)
 800e9f8:	601a      	str	r2, [r3, #0]
}
 800e9fa:	46c0      	nop			@ (mov r8, r8)
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	b002      	add	sp, #8
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	46c0      	nop			@ (mov r8, r8)
 800ea04:	200023c0 	.word	0x200023c0

0800ea08 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800ea08:	b590      	push	{r4, r7, lr}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	781a      	ldrb	r2, [r3, #0]
 800ea14:	210c      	movs	r1, #12
 800ea16:	187b      	adds	r3, r7, r1
 800ea18:	701a      	strb	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	785a      	ldrb	r2, [r3, #1]
 800ea1e:	187b      	adds	r3, r7, r1
 800ea20:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800ea22:	240f      	movs	r4, #15
 800ea24:	193b      	adds	r3, r7, r4
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	7892      	ldrb	r2, [r2, #2]
 800ea2a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800ea2c:	187b      	adds	r3, r7, r1
 800ea2e:	2102      	movs	r1, #2
 800ea30:	0018      	movs	r0, r3
 800ea32:	f7ff ff21 	bl	800e878 <CalculateCRC>
 800ea36:	0003      	movs	r3, r0
 800ea38:	001a      	movs	r2, r3
 800ea3a:	193b      	adds	r3, r7, r4
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d007      	beq.n	800ea52 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800ea42:	4a1a      	ldr	r2, [pc, #104]	@ (800eaac <CheckCRC+0xa4>)
 800ea44:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <CheckCRC+0xa8>)
 800ea46:	0019      	movs	r1, r3
 800ea48:	2001      	movs	r0, #1
 800ea4a:	f7ff fe07 	bl	800e65c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e027      	b.n	800eaa2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	78da      	ldrb	r2, [r3, #3]
 800ea56:	2108      	movs	r1, #8
 800ea58:	187b      	adds	r3, r7, r1
 800ea5a:	701a      	strb	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	791a      	ldrb	r2, [r3, #4]
 800ea60:	187b      	adds	r3, r7, r1
 800ea62:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800ea64:	240e      	movs	r4, #14
 800ea66:	193b      	adds	r3, r7, r4
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	7952      	ldrb	r2, [r2, #5]
 800ea6c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800ea6e:	187b      	adds	r3, r7, r1
 800ea70:	2102      	movs	r1, #2
 800ea72:	0018      	movs	r0, r3
 800ea74:	f7ff ff00 	bl	800e878 <CalculateCRC>
 800ea78:	0003      	movs	r3, r0
 800ea7a:	001a      	movs	r2, r3
 800ea7c:	193b      	adds	r3, r7, r4
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d00d      	beq.n	800eaa0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ea84:	4a0b      	ldr	r2, [pc, #44]	@ (800eab4 <CheckCRC+0xac>)
 800ea86:	4b0a      	ldr	r3, [pc, #40]	@ (800eab0 <CheckCRC+0xa8>)
 800ea88:	0019      	movs	r1, r3
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	f7ff fde6 	bl	800e65c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800ea90:	4a09      	ldr	r2, [pc, #36]	@ (800eab8 <CheckCRC+0xb0>)
 800ea92:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <CheckCRC+0xb4>)
 800ea94:	217c      	movs	r1, #124	@ 0x7c
 800ea96:	0018      	movs	r0, r3
 800ea98:	f7ff fe98 	bl	800e7cc <errorHandler>
		return false;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	e000      	b.n	800eaa2 <CheckCRC+0x9a>
	}
	return true;
 800eaa0:	2301      	movs	r3, #1
}
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	b005      	add	sp, #20
 800eaa8:	bd90      	pop	{r4, r7, pc}
 800eaaa:	46c0      	nop			@ (mov r8, r8)
 800eaac:	08025260 	.word	0x08025260
 800eab0:	08025288 	.word	0x08025288
 800eab4:	0802528c 	.word	0x0802528c
 800eab8:	080252b8 	.word	0x080252b8
 800eabc:	08025850 	.word	0x08025850

0800eac0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800eac6:	1dbb      	adds	r3, r7, #6
 800eac8:	2289      	movs	r2, #137	@ 0x89
 800eaca:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800eacc:	1dbb      	adds	r3, r7, #6
 800eace:	2201      	movs	r2, #1
 800ead0:	0019      	movs	r1, r3
 800ead2:	2044      	movs	r0, #68	@ 0x44
 800ead4:	f7ff feae 	bl	800e834 <WriteRegister>
	HAL_Delay(30);
 800ead8:	201e      	movs	r0, #30
 800eada:	f000 fa0d 	bl	800eef8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800eade:	4b14      	ldr	r3, [pc, #80]	@ (800eb30 <HIDS_DeviceConnected+0x70>)
 800eae0:	2206      	movs	r2, #6
 800eae2:	0019      	movs	r1, r3
 800eae4:	2044      	movs	r0, #68	@ 0x44
 800eae6:	f7ff fe83 	bl	800e7f0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800eaea:	1dfb      	adds	r3, r7, #7
 800eaec:	2200      	movs	r2, #0
 800eaee:	701a      	strb	r2, [r3, #0]
 800eaf0:	e011      	b.n	800eb16 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800eaf2:	1dfb      	adds	r3, r7, #7
 800eaf4:	7818      	ldrb	r0, [r3, #0]
 800eaf6:	1dfb      	adds	r3, r7, #7
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	4a0d      	ldr	r2, [pc, #52]	@ (800eb30 <HIDS_DeviceConnected+0x70>)
 800eafc:	5cd3      	ldrb	r3, [r2, r3]
 800eafe:	4a0d      	ldr	r2, [pc, #52]	@ (800eb34 <HIDS_DeviceConnected+0x74>)
 800eb00:	490d      	ldr	r1, [pc, #52]	@ (800eb38 <HIDS_DeviceConnected+0x78>)
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	0003      	movs	r3, r0
 800eb06:	2002      	movs	r0, #2
 800eb08:	f7ff fda8 	bl	800e65c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800eb0c:	1dfb      	adds	r3, r7, #7
 800eb0e:	781a      	ldrb	r2, [r3, #0]
 800eb10:	1dfb      	adds	r3, r7, #7
 800eb12:	3201      	adds	r2, #1
 800eb14:	701a      	strb	r2, [r3, #0]
 800eb16:	1dfb      	adds	r3, r7, #7
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d9e9      	bls.n	800eaf2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800eb1e:	4b04      	ldr	r3, [pc, #16]	@ (800eb30 <HIDS_DeviceConnected+0x70>)
 800eb20:	0018      	movs	r0, r3
 800eb22:	f7ff ff71 	bl	800ea08 <CheckCRC>
 800eb26:	0003      	movs	r3, r0
}
 800eb28:	0018      	movs	r0, r3
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	b002      	add	sp, #8
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	200023b0 	.word	0x200023b0
 800eb34:	080252d0 	.word	0x080252d0
 800eb38:	0802525c 	.word	0x0802525c

0800eb3c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800eb40:	4b04      	ldr	r3, [pc, #16]	@ (800eb54 <HIDS_MeasurementReady+0x18>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	0018      	movs	r0, r3
 800eb46:	f7ff fd33 	bl	800e5b0 <TimestampIsReached>
 800eb4a:	0003      	movs	r3, r0
}
 800eb4c:	0018      	movs	r0, r3
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	46c0      	nop			@ (mov r8, r8)
 800eb54:	200000d8 	.word	0x200000d8

0800eb58 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800eb62:	4b41      	ldr	r3, [pc, #260]	@ (800ec68 <HIDS_GetMeasurementValues+0x110>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d001      	beq.n	800eb6e <HIDS_GetMeasurementValues+0x16>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e077      	b.n	800ec5e <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800eb6e:	f7ff ffe5 	bl	800eb3c <HIDS_MeasurementReady>
 800eb72:	0003      	movs	r3, r0
 800eb74:	001a      	movs	r2, r3
 800eb76:	2301      	movs	r3, #1
 800eb78:	4053      	eors	r3, r2
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <HIDS_GetMeasurementValues+0x2c>
 800eb80:	2300      	movs	r3, #0
 800eb82:	e06c      	b.n	800ec5e <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800eb84:	4b39      	ldr	r3, [pc, #228]	@ (800ec6c <HIDS_GetMeasurementValues+0x114>)
 800eb86:	2206      	movs	r2, #6
 800eb88:	0019      	movs	r1, r3
 800eb8a:	2044      	movs	r0, #68	@ 0x44
 800eb8c:	f7ff fe30 	bl	800e7f0 <ReadRegister>
 800eb90:	0003      	movs	r3, r0
 800eb92:	001a      	movs	r2, r3
 800eb94:	2301      	movs	r3, #1
 800eb96:	4053      	eors	r3, r2
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d005      	beq.n	800ebaa <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800eb9e:	4a34      	ldr	r2, [pc, #208]	@ (800ec70 <HIDS_GetMeasurementValues+0x118>)
 800eba0:	4b34      	ldr	r3, [pc, #208]	@ (800ec74 <HIDS_GetMeasurementValues+0x11c>)
 800eba2:	0019      	movs	r1, r3
 800eba4:	2001      	movs	r0, #1
 800eba6:	f7ff fd59 	bl	800e65c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800ebaa:	4b30      	ldr	r3, [pc, #192]	@ (800ec6c <HIDS_GetMeasurementValues+0x114>)
 800ebac:	0018      	movs	r0, r3
 800ebae:	f7ff ff2b 	bl	800ea08 <CheckCRC>
 800ebb2:	0003      	movs	r3, r0
 800ebb4:	001a      	movs	r2, r3
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	4053      	eors	r3, r2
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e04c      	b.n	800ec5e <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ebc4:	4b29      	ldr	r3, [pc, #164]	@ (800ec6c <HIDS_GetMeasurementValues+0x114>)
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	021b      	lsls	r3, r3, #8
 800ebca:	4a28      	ldr	r2, [pc, #160]	@ (800ec6c <HIDS_GetMeasurementValues+0x114>)
 800ebcc:	7852      	ldrb	r2, [r2, #1]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	22af      	movs	r2, #175	@ 0xaf
 800ebd2:	4353      	muls	r3, r2
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	f7f4 fbf3 	bl	80033c0 <__aeabi_i2d>
 800ebda:	2200      	movs	r2, #0
 800ebdc:	4b26      	ldr	r3, [pc, #152]	@ (800ec78 <HIDS_GetMeasurementValues+0x120>)
 800ebde:	f7f3 f8e9 	bl	8001db4 <__aeabi_ddiv>
 800ebe2:	0002      	movs	r2, r0
 800ebe4:	000b      	movs	r3, r1
 800ebe6:	0010      	movs	r0, r2
 800ebe8:	0019      	movs	r1, r3
 800ebea:	f7f4 fc83 	bl	80034f4 <__aeabi_d2f>
 800ebee:	1c03      	adds	r3, r0, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ebf2:	4922      	ldr	r1, [pc, #136]	@ (800ec7c <HIDS_GetMeasurementValues+0x124>)
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f7f2 fb11 	bl	800121c <__aeabi_fsub>
 800ebfa:	1c03      	adds	r3, r0, #0
 800ebfc:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ebfe:	4b1b      	ldr	r3, [pc, #108]	@ (800ec6c <HIDS_GetMeasurementValues+0x114>)
 800ec00:	78db      	ldrb	r3, [r3, #3]
 800ec02:	021b      	lsls	r3, r3, #8
 800ec04:	4a19      	ldr	r2, [pc, #100]	@ (800ec6c <HIDS_GetMeasurementValues+0x114>)
 800ec06:	7912      	ldrb	r2, [r2, #4]
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	0013      	movs	r3, r2
 800ec0c:	015b      	lsls	r3, r3, #5
 800ec0e:	1a9b      	subs	r3, r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	189b      	adds	r3, r3, r2
 800ec14:	0018      	movs	r0, r3
 800ec16:	f7f4 fbd3 	bl	80033c0 <__aeabi_i2d>
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	4b16      	ldr	r3, [pc, #88]	@ (800ec78 <HIDS_GetMeasurementValues+0x120>)
 800ec1e:	f7f3 f8c9 	bl	8001db4 <__aeabi_ddiv>
 800ec22:	0002      	movs	r2, r0
 800ec24:	000b      	movs	r3, r1
 800ec26:	0010      	movs	r0, r2
 800ec28:	0019      	movs	r1, r3
 800ec2a:	f7f4 fc63 	bl	80034f4 <__aeabi_d2f>
 800ec2e:	1c03      	adds	r3, r0, #0
 800ec30:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ec32:	4913      	ldr	r1, [pc, #76]	@ (800ec80 <HIDS_GetMeasurementValues+0x128>)
 800ec34:	68b8      	ldr	r0, [r7, #8]
 800ec36:	f7f2 faf1 	bl	800121c <__aeabi_fsub>
 800ec3a:	1c03      	adds	r3, r0, #0
 800ec3c:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	0011      	movs	r1, r2
 800ec50:	0018      	movs	r0, r3
 800ec52:	f7fd f92d 	bl	800beb0 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800ec56:	4b04      	ldr	r3, [pc, #16]	@ (800ec68 <HIDS_GetMeasurementValues+0x110>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ec5c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ec5e:	0018      	movs	r0, r3
 800ec60:	46bd      	mov	sp, r7
 800ec62:	b004      	add	sp, #16
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	46c0      	nop			@ (mov r8, r8)
 800ec68:	200023be 	.word	0x200023be
 800ec6c:	200023b8 	.word	0x200023b8
 800ec70:	080252f0 	.word	0x080252f0
 800ec74:	08025288 	.word	0x08025288
 800ec78:	40efffe0 	.word	0x40efffe0
 800ec7c:	42340000 	.word	0x42340000
 800ec80:	40c00000 	.word	0x40c00000

0800ec84 <ResetHIDSresults>:

void ResetHIDSresults() {
 800ec84:	b580      	push	{r7, lr}
 800ec86:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ec88:	4b04      	ldr	r3, [pc, #16]	@ (800ec9c <ResetHIDSresults+0x18>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ec8e:	4b04      	ldr	r3, [pc, #16]	@ (800eca0 <ResetHIDSresults+0x1c>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	601a      	str	r2, [r3, #0]
}
 800ec94:	46c0      	nop			@ (mov r8, r8)
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	46c0      	nop			@ (mov r8, r8)
 800ec9c:	200023a0 	.word	0x200023a0
 800eca0:	200023a4 	.word	0x200023a4

0800eca4 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800eca4:	b5b0      	push	{r4, r5, r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ecaa:	4b3c      	ldr	r3, [pc, #240]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b06      	cmp	r3, #6
 800ecb0:	d868      	bhi.n	800ed84 <HIDS_Upkeep+0xe0>
 800ecb2:	009a      	lsls	r2, r3, #2
 800ecb4:	4b3a      	ldr	r3, [pc, #232]	@ (800eda0 <HIDS_Upkeep+0xfc>)
 800ecb6:	18d3      	adds	r3, r2, r3
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ecbc:	4a39      	ldr	r2, [pc, #228]	@ (800eda4 <HIDS_Upkeep+0x100>)
 800ecbe:	4b3a      	ldr	r3, [pc, #232]	@ (800eda8 <HIDS_Upkeep+0x104>)
 800ecc0:	0019      	movs	r1, r3
 800ecc2:	2003      	movs	r0, #3
 800ecc4:	f7ff fcca 	bl	800e65c <CreateLine>
      break;
 800ecc8:	e063      	b.n	800ed92 <HIDS_Upkeep+0xee>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800ecca:	f7ff ffdb 	bl	800ec84 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ecce:	4b33      	ldr	r3, [pc, #204]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	701a      	strb	r2, [r3, #0]
      break;
 800ecd4:	e05d      	b.n	800ed92 <HIDS_Upkeep+0xee>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800ecd6:	f7fe fb17 	bl	800d308 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800ecda:	f7ff fe45 	bl	800e968 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800ecde:	4b2f      	ldr	r3, [pc, #188]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ece0:	2202      	movs	r2, #2
 800ece2:	701a      	strb	r2, [r3, #0]
      break;
 800ece4:	e055      	b.n	800ed92 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800ece6:	4a31      	ldr	r2, [pc, #196]	@ (800edac <HIDS_Upkeep+0x108>)
 800ece8:	4b31      	ldr	r3, [pc, #196]	@ (800edb0 <HIDS_Upkeep+0x10c>)
 800ecea:	0011      	movs	r1, r2
 800ecec:	0018      	movs	r0, r3
 800ecee:	f7ff ff33 	bl	800eb58 <HIDS_GetMeasurementValues>
 800ecf2:	1e03      	subs	r3, r0, #0
 800ecf4:	d04a      	beq.n	800ed8c <HIDS_Upkeep+0xe8>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800ecf6:	4b29      	ldr	r3, [pc, #164]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ecf8:	2203      	movs	r2, #3
 800ecfa:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ecfc:	e046      	b.n	800ed8c <HIDS_Upkeep+0xe8>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ecfe:	4b2c      	ldr	r3, [pc, #176]	@ (800edb0 <HIDS_Upkeep+0x10c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	1c18      	adds	r0, r3, #0
 800ed04:	f7f4 fbae 	bl	8003464 <__aeabi_f2d>
 800ed08:	0004      	movs	r4, r0
 800ed0a:	000d      	movs	r5, r1
 800ed0c:	4b27      	ldr	r3, [pc, #156]	@ (800edac <HIDS_Upkeep+0x108>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	1c18      	adds	r0, r3, #0
 800ed12:	f7f4 fba7 	bl	8003464 <__aeabi_f2d>
 800ed16:	0002      	movs	r2, r0
 800ed18:	000b      	movs	r3, r1
 800ed1a:	4826      	ldr	r0, [pc, #152]	@ (800edb4 <HIDS_Upkeep+0x110>)
 800ed1c:	4922      	ldr	r1, [pc, #136]	@ (800eda8 <HIDS_Upkeep+0x104>)
 800ed1e:	9202      	str	r2, [sp, #8]
 800ed20:	9303      	str	r3, [sp, #12]
 800ed22:	9400      	str	r4, [sp, #0]
 800ed24:	9501      	str	r5, [sp, #4]
 800ed26:	0002      	movs	r2, r0
 800ed28:	2003      	movs	r0, #3
 800ed2a:	f7ff fc97 	bl	800e65c <CreateLine>
      setHIDS(temp, humid);
 800ed2e:	4b1f      	ldr	r3, [pc, #124]	@ (800edac <HIDS_Upkeep+0x108>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	4b1f      	ldr	r3, [pc, #124]	@ (800edb0 <HIDS_Upkeep+0x10c>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	1c19      	adds	r1, r3, #0
 800ed38:	1c10      	adds	r0, r2, #0
 800ed3a:	f7f4 fddb 	bl	80038f4 <setHIDS>
      ResetMeasurementIndicator();
 800ed3e:	f7fe fafb 	bl	800d338 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 800ed42:	f000 f8cf 	bl	800eee4 <HAL_GetTick>
 800ed46:	0004      	movs	r4, r0
 800ed48:	f7f7 fb8c 	bl	8006464 <Check_USB_PowerOn>
 800ed4c:	1e03      	subs	r3, r0, #0
 800ed4e:	d103      	bne.n	800ed58 <HIDS_Upkeep+0xb4>
 800ed50:	4b19      	ldr	r3, [pc, #100]	@ (800edb8 <HIDS_Upkeep+0x114>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <HIDS_Upkeep+0xb8>
 800ed58:	4b18      	ldr	r3, [pc, #96]	@ (800edbc <HIDS_Upkeep+0x118>)
 800ed5a:	e001      	b.n	800ed60 <HIDS_Upkeep+0xbc>
 800ed5c:	23fa      	movs	r3, #250	@ 0xfa
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	191a      	adds	r2, r3, r4
 800ed62:	4b17      	ldr	r3, [pc, #92]	@ (800edc0 <HIDS_Upkeep+0x11c>)
 800ed64:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800ed66:	4b0d      	ldr	r3, [pc, #52]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ed68:	2206      	movs	r2, #6
 800ed6a:	701a      	strb	r2, [r3, #0]
      break;
 800ed6c:	e011      	b.n	800ed92 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800ed6e:	4b14      	ldr	r3, [pc, #80]	@ (800edc0 <HIDS_Upkeep+0x11c>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	0018      	movs	r0, r3
 800ed74:	f7ff fc1c 	bl	800e5b0 <TimestampIsReached>
 800ed78:	1e03      	subs	r3, r0, #0
 800ed7a:	d009      	beq.n	800ed90 <HIDS_Upkeep+0xec>
        HIDSState = HIDS_STATE_INIT;
 800ed7c:	4b07      	ldr	r3, [pc, #28]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed82:	e005      	b.n	800ed90 <HIDS_Upkeep+0xec>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800ed84:	4b05      	ldr	r3, [pc, #20]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ed86:	2200      	movs	r2, #0
 800ed88:	701a      	strb	r2, [r3, #0]
      break;
 800ed8a:	e002      	b.n	800ed92 <HIDS_Upkeep+0xee>
      break;
 800ed8c:	46c0      	nop			@ (mov r8, r8)
 800ed8e:	e000      	b.n	800ed92 <HIDS_Upkeep+0xee>
      break;
 800ed90:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800ed92:	4b02      	ldr	r3, [pc, #8]	@ (800ed9c <HIDS_Upkeep+0xf8>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
}
 800ed96:	0018      	movs	r0, r3
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bdb0      	pop	{r4, r5, r7, pc}
 800ed9c:	200023c4 	.word	0x200023c4
 800eda0:	08025834 	.word	0x08025834
 800eda4:	08025324 	.word	0x08025324
 800eda8:	08025358 	.word	0x08025358
 800edac:	200023a4 	.word	0x200023a4
 800edb0:	200023a0 	.word	0x200023a0
 800edb4:	0802535c 	.word	0x0802535c
 800edb8:	2000200a 	.word	0x2000200a
 800edbc:	00002710 	.word	0x00002710
 800edc0:	200023c0 	.word	0x200023c0

0800edc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800edc4:	480d      	ldr	r0, [pc, #52]	@ (800edfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800edc6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800edc8:	f7ff f848 	bl	800de5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800edcc:	480c      	ldr	r0, [pc, #48]	@ (800ee00 <LoopForever+0x6>)
  ldr r1, =_edata
 800edce:	490d      	ldr	r1, [pc, #52]	@ (800ee04 <LoopForever+0xa>)
  ldr r2, =_sidata
 800edd0:	4a0d      	ldr	r2, [pc, #52]	@ (800ee08 <LoopForever+0xe>)
  movs r3, #0
 800edd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800edd4:	e002      	b.n	800eddc <LoopCopyDataInit>

0800edd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800edd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800edd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800edda:	3304      	adds	r3, #4

0800eddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800edde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ede0:	d3f9      	bcc.n	800edd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ede2:	4a0a      	ldr	r2, [pc, #40]	@ (800ee0c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ede4:	4c0a      	ldr	r4, [pc, #40]	@ (800ee10 <LoopForever+0x16>)
  movs r3, #0
 800ede6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ede8:	e001      	b.n	800edee <LoopFillZerobss>

0800edea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800edea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800edec:	3204      	adds	r2, #4

0800edee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800edee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800edf0:	d3fb      	bcc.n	800edea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800edf2:	f011 fb79 	bl	80204e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800edf6:	f7f8 ff45 	bl	8007c84 <main>

0800edfa <LoopForever>:

LoopForever:
    b LoopForever
 800edfa:	e7fe      	b.n	800edfa <LoopForever>
   ldr   r0, =_estack
 800edfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800ee00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ee04:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800ee08:	080261d0 	.word	0x080261d0
  ldr r2, =_sbss
 800ee0c:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800ee10:	200037cc 	.word	0x200037cc

0800ee14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ee14:	e7fe      	b.n	800ee14 <ADC1_COMP_IRQHandler>
	...

0800ee18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ee1e:	1dfb      	adds	r3, r7, #7
 800ee20:	2200      	movs	r2, #0
 800ee22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ee24:	4b0b      	ldr	r3, [pc, #44]	@ (800ee54 <HAL_Init+0x3c>)
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	4b0a      	ldr	r3, [pc, #40]	@ (800ee54 <HAL_Init+0x3c>)
 800ee2a:	2140      	movs	r1, #64	@ 0x40
 800ee2c:	430a      	orrs	r2, r1
 800ee2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ee30:	2003      	movs	r0, #3
 800ee32:	f000 f811 	bl	800ee58 <HAL_InitTick>
 800ee36:	1e03      	subs	r3, r0, #0
 800ee38:	d003      	beq.n	800ee42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800ee3a:	1dfb      	adds	r3, r7, #7
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	701a      	strb	r2, [r3, #0]
 800ee40:	e001      	b.n	800ee46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ee42:	f7fe febf 	bl	800dbc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ee46:	1dfb      	adds	r3, r7, #7
 800ee48:	781b      	ldrb	r3, [r3, #0]
}
 800ee4a:	0018      	movs	r0, r3
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	b002      	add	sp, #8
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	46c0      	nop			@ (mov r8, r8)
 800ee54:	40022000 	.word	0x40022000

0800ee58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ee58:	b590      	push	{r4, r7, lr}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ee60:	4b14      	ldr	r3, [pc, #80]	@ (800eeb4 <HAL_InitTick+0x5c>)
 800ee62:	681c      	ldr	r4, [r3, #0]
 800ee64:	4b14      	ldr	r3, [pc, #80]	@ (800eeb8 <HAL_InitTick+0x60>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	0019      	movs	r1, r3
 800ee6a:	23fa      	movs	r3, #250	@ 0xfa
 800ee6c:	0098      	lsls	r0, r3, #2
 800ee6e:	f7f1 f999 	bl	80001a4 <__udivsi3>
 800ee72:	0003      	movs	r3, r0
 800ee74:	0019      	movs	r1, r3
 800ee76:	0020      	movs	r0, r4
 800ee78:	f7f1 f994 	bl	80001a4 <__udivsi3>
 800ee7c:	0003      	movs	r3, r0
 800ee7e:	0018      	movs	r0, r3
 800ee80:	f000 fcfd 	bl	800f87e <HAL_SYSTICK_Config>
 800ee84:	1e03      	subs	r3, r0, #0
 800ee86:	d001      	beq.n	800ee8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e00f      	b.n	800eeac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d80b      	bhi.n	800eeaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	2301      	movs	r3, #1
 800ee96:	425b      	negs	r3, r3
 800ee98:	2200      	movs	r2, #0
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	f000 fcc6 	bl	800f82c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800eea0:	4b06      	ldr	r3, [pc, #24]	@ (800eebc <HAL_InitTick+0x64>)
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	e000      	b.n	800eeac <HAL_InitTick+0x54>
    return HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
}
 800eeac:	0018      	movs	r0, r3
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	b003      	add	sp, #12
 800eeb2:	bd90      	pop	{r4, r7, pc}
 800eeb4:	200000d0 	.word	0x200000d0
 800eeb8:	200000e4 	.word	0x200000e4
 800eebc:	200000e0 	.word	0x200000e0

0800eec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800eec4:	4b05      	ldr	r3, [pc, #20]	@ (800eedc <HAL_IncTick+0x1c>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	001a      	movs	r2, r3
 800eeca:	4b05      	ldr	r3, [pc, #20]	@ (800eee0 <HAL_IncTick+0x20>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	18d2      	adds	r2, r2, r3
 800eed0:	4b03      	ldr	r3, [pc, #12]	@ (800eee0 <HAL_IncTick+0x20>)
 800eed2:	601a      	str	r2, [r3, #0]
}
 800eed4:	46c0      	nop			@ (mov r8, r8)
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	46c0      	nop			@ (mov r8, r8)
 800eedc:	200000e4 	.word	0x200000e4
 800eee0:	200023c8 	.word	0x200023c8

0800eee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	af00      	add	r7, sp, #0
  return uwTick;
 800eee8:	4b02      	ldr	r3, [pc, #8]	@ (800eef4 <HAL_GetTick+0x10>)
 800eeea:	681b      	ldr	r3, [r3, #0]
}
 800eeec:	0018      	movs	r0, r3
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	46c0      	nop			@ (mov r8, r8)
 800eef4:	200023c8 	.word	0x200023c8

0800eef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ef00:	f7ff fff0 	bl	800eee4 <HAL_GetTick>
 800ef04:	0003      	movs	r3, r0
 800ef06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	d005      	beq.n	800ef1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ef12:	4b0a      	ldr	r3, [pc, #40]	@ (800ef3c <HAL_Delay+0x44>)
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	001a      	movs	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	189b      	adds	r3, r3, r2
 800ef1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ef1e:	46c0      	nop			@ (mov r8, r8)
 800ef20:	f7ff ffe0 	bl	800eee4 <HAL_GetTick>
 800ef24:	0002      	movs	r2, r0
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d8f7      	bhi.n	800ef20 <HAL_Delay+0x28>
  {
  }
}
 800ef30:	46c0      	nop			@ (mov r8, r8)
 800ef32:	46c0      	nop			@ (mov r8, r8)
 800ef34:	46bd      	mov	sp, r7
 800ef36:	b004      	add	sp, #16
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	46c0      	nop			@ (mov r8, r8)
 800ef3c:	200000e4 	.word	0x200000e4

0800ef40 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ef44:	4b04      	ldr	r3, [pc, #16]	@ (800ef58 <HAL_SuspendTick+0x18>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	4b03      	ldr	r3, [pc, #12]	@ (800ef58 <HAL_SuspendTick+0x18>)
 800ef4a:	2102      	movs	r1, #2
 800ef4c:	438a      	bics	r2, r1
 800ef4e:	601a      	str	r2, [r3, #0]
}
 800ef50:	46c0      	nop			@ (mov r8, r8)
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	46c0      	nop			@ (mov r8, r8)
 800ef58:	e000e010 	.word	0xe000e010

0800ef5c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ef60:	4b04      	ldr	r3, [pc, #16]	@ (800ef74 <HAL_ResumeTick+0x18>)
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	4b03      	ldr	r3, [pc, #12]	@ (800ef74 <HAL_ResumeTick+0x18>)
 800ef66:	2102      	movs	r1, #2
 800ef68:	430a      	orrs	r2, r1
 800ef6a:	601a      	str	r2, [r3, #0]
}
 800ef6c:	46c0      	nop			@ (mov r8, r8)
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	46c0      	nop			@ (mov r8, r8)
 800ef74:	e000e010 	.word	0xe000e010

0800ef78 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ef7c:	4b02      	ldr	r3, [pc, #8]	@ (800ef88 <HAL_GetUIDw0+0x10>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
}
 800ef80:	0018      	movs	r0, r3
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	46c0      	nop			@ (mov r8, r8)
 800ef88:	1ff80050 	.word	0x1ff80050

0800ef8c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ef90:	4b02      	ldr	r3, [pc, #8]	@ (800ef9c <HAL_GetUIDw1+0x10>)
 800ef92:	681b      	ldr	r3, [r3, #0]
}
 800ef94:	0018      	movs	r0, r3
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	46c0      	nop			@ (mov r8, r8)
 800ef9c:	1ff80054 	.word	0x1ff80054

0800efa0 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800efa4:	4b02      	ldr	r3, [pc, #8]	@ (800efb0 <HAL_GetUIDw2+0x10>)
 800efa6:	681b      	ldr	r3, [r3, #0]
}
 800efa8:	0018      	movs	r0, r3
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	46c0      	nop			@ (mov r8, r8)
 800efb0:	1ff80064 	.word	0x1ff80064

0800efb4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d101      	bne.n	800efc6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	e159      	b.n	800f27a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10a      	bne.n	800efe4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2250      	movs	r2, #80	@ 0x50
 800efd8:	2100      	movs	r1, #0
 800efda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	0018      	movs	r0, r3
 800efe0:	f7f8 f8d8 	bl	8007194 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efe8:	2210      	movs	r2, #16
 800efea:	4013      	ands	r3, r2
 800efec:	2b10      	cmp	r3, #16
 800efee:	d005      	beq.n	800effc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	2204      	movs	r2, #4
 800eff8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800effa:	d00b      	beq.n	800f014 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f000:	2210      	movs	r2, #16
 800f002:	431a      	orrs	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2250      	movs	r2, #80	@ 0x50
 800f00c:	2100      	movs	r1, #0
 800f00e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f010:	2301      	movs	r3, #1
 800f012:	e132      	b.n	800f27a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f018:	4a9a      	ldr	r2, [pc, #616]	@ (800f284 <HAL_ADC_Init+0x2d0>)
 800f01a:	4013      	ands	r3, r2
 800f01c:	2202      	movs	r2, #2
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	2203      	movs	r2, #3
 800f02c:	4013      	ands	r3, r2
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d108      	bne.n	800f044 <HAL_ADC_Init+0x90>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2201      	movs	r2, #1
 800f03a:	4013      	ands	r3, r2
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d101      	bne.n	800f044 <HAL_ADC_Init+0x90>
 800f040:	2301      	movs	r3, #1
 800f042:	e000      	b.n	800f046 <HAL_ADC_Init+0x92>
 800f044:	2300      	movs	r3, #0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d149      	bne.n	800f0de <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685a      	ldr	r2, [r3, #4]
 800f04e:	23c0      	movs	r3, #192	@ 0xc0
 800f050:	061b      	lsls	r3, r3, #24
 800f052:	429a      	cmp	r2, r3
 800f054:	d00b      	beq.n	800f06e <HAL_ADC_Init+0xba>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	2380      	movs	r3, #128	@ 0x80
 800f05c:	05db      	lsls	r3, r3, #23
 800f05e:	429a      	cmp	r2, r3
 800f060:	d005      	beq.n	800f06e <HAL_ADC_Init+0xba>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	2380      	movs	r3, #128	@ 0x80
 800f068:	061b      	lsls	r3, r3, #24
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d111      	bne.n	800f092 <HAL_ADC_Init+0xde>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	0092      	lsls	r2, r2, #2
 800f07a:	0892      	lsrs	r2, r2, #2
 800f07c:	611a      	str	r2, [r3, #16]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	6919      	ldr	r1, [r3, #16]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	430a      	orrs	r2, r1
 800f08e:	611a      	str	r2, [r3, #16]
 800f090:	e014      	b.n	800f0bc <HAL_ADC_Init+0x108>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	691a      	ldr	r2, [r3, #16]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	0092      	lsls	r2, r2, #2
 800f09e:	0892      	lsrs	r2, r2, #2
 800f0a0:	611a      	str	r2, [r3, #16]
 800f0a2:	4b79      	ldr	r3, [pc, #484]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	4b78      	ldr	r3, [pc, #480]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0a8:	4978      	ldr	r1, [pc, #480]	@ (800f28c <HAL_ADC_Init+0x2d8>)
 800f0aa:	400a      	ands	r2, r1
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	4b76      	ldr	r3, [pc, #472]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0b0:	6819      	ldr	r1, [r3, #0]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	4b74      	ldr	r3, [pc, #464]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0b8:	430a      	orrs	r2, r1
 800f0ba:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	68da      	ldr	r2, [r3, #12]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2118      	movs	r1, #24
 800f0c8:	438a      	bics	r2, r1
 800f0ca:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68d9      	ldr	r1, [r3, #12]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	689a      	ldr	r2, [r3, #8]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f0de:	4b6a      	ldr	r3, [pc, #424]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	4b69      	ldr	r3, [pc, #420]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0e4:	496a      	ldr	r1, [pc, #424]	@ (800f290 <HAL_ADC_Init+0x2dc>)
 800f0e6:	400a      	ands	r2, r1
 800f0e8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f0ea:	4b67      	ldr	r3, [pc, #412]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0ec:	6819      	ldr	r1, [r3, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0f2:	065a      	lsls	r2, r3, #25
 800f0f4:	4b64      	ldr	r3, [pc, #400]	@ (800f288 <HAL_ADC_Init+0x2d4>)
 800f0f6:	430a      	orrs	r2, r1
 800f0f8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	689a      	ldr	r2, [r3, #8]
 800f100:	2380      	movs	r3, #128	@ 0x80
 800f102:	055b      	lsls	r3, r3, #21
 800f104:	4013      	ands	r3, r2
 800f106:	d108      	bne.n	800f11a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	689a      	ldr	r2, [r3, #8]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2180      	movs	r1, #128	@ 0x80
 800f114:	0549      	lsls	r1, r1, #21
 800f116:	430a      	orrs	r2, r1
 800f118:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68da      	ldr	r2, [r3, #12]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	495b      	ldr	r1, [pc, #364]	@ (800f294 <HAL_ADC_Init+0x2e0>)
 800f126:	400a      	ands	r2, r1
 800f128:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68d9      	ldr	r1, [r3, #12]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d101      	bne.n	800f140 <HAL_ADC_Init+0x18c>
 800f13c:	2304      	movs	r3, #4
 800f13e:	e000      	b.n	800f142 <HAL_ADC_Init+0x18e>
 800f140:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f142:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2020      	movs	r0, #32
 800f148:	5c1b      	ldrb	r3, [r3, r0]
 800f14a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f14c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	202c      	movs	r0, #44	@ 0x2c
 800f152:	5c1b      	ldrb	r3, [r3, r0]
 800f154:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f156:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f15c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f164:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	69db      	ldr	r3, [r3, #28]
 800f16a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f16c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	430a      	orrs	r2, r1
 800f174:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f17a:	23c2      	movs	r3, #194	@ 0xc2
 800f17c:	33ff      	adds	r3, #255	@ 0xff
 800f17e:	429a      	cmp	r2, r3
 800f180:	d00b      	beq.n	800f19a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	68d9      	ldr	r1, [r3, #12]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f190:	431a      	orrs	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	430a      	orrs	r2, r1
 800f198:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2221      	movs	r2, #33	@ 0x21
 800f19e:	5c9b      	ldrb	r3, [r3, r2]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d11a      	bne.n	800f1da <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2220      	movs	r2, #32
 800f1a8:	5c9b      	ldrb	r3, [r3, r2]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d109      	bne.n	800f1c2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68da      	ldr	r2, [r3, #12]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2180      	movs	r1, #128	@ 0x80
 800f1ba:	0249      	lsls	r1, r1, #9
 800f1bc:	430a      	orrs	r2, r1
 800f1be:	60da      	str	r2, [r3, #12]
 800f1c0:	e00b      	b.n	800f1da <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1c6:	2220      	movs	r2, #32
 800f1c8:	431a      	orrs	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	431a      	orrs	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d11f      	bne.n	800f222 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	691a      	ldr	r2, [r3, #16]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	492a      	ldr	r1, [pc, #168]	@ (800f298 <HAL_ADC_Init+0x2e4>)
 800f1ee:	400a      	ands	r2, r1
 800f1f0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6919      	ldr	r1, [r3, #16]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f200:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f206:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	430a      	orrs	r2, r1
 800f20e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	691a      	ldr	r2, [r3, #16]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2101      	movs	r1, #1
 800f21c:	430a      	orrs	r2, r1
 800f21e:	611a      	str	r2, [r3, #16]
 800f220:	e00e      	b.n	800f240 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	2201      	movs	r2, #1
 800f22a:	4013      	ands	r3, r2
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d107      	bne.n	800f240 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	691a      	ldr	r2, [r3, #16]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2101      	movs	r1, #1
 800f23c:	438a      	bics	r2, r1
 800f23e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	695a      	ldr	r2, [r3, #20]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2107      	movs	r1, #7
 800f24c:	438a      	bics	r2, r1
 800f24e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6959      	ldr	r1, [r3, #20]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	430a      	orrs	r2, r1
 800f260:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f26c:	2203      	movs	r2, #3
 800f26e:	4393      	bics	r3, r2
 800f270:	2201      	movs	r2, #1
 800f272:	431a      	orrs	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	0018      	movs	r0, r3
 800f27c:	46bd      	mov	sp, r7
 800f27e:	b002      	add	sp, #8
 800f280:	bd80      	pop	{r7, pc}
 800f282:	46c0      	nop			@ (mov r8, r8)
 800f284:	fffffefd 	.word	0xfffffefd
 800f288:	40012708 	.word	0x40012708
 800f28c:	ffc3ffff 	.word	0xffc3ffff
 800f290:	fdffffff 	.word	0xfdffffff
 800f294:	fffe0219 	.word	0xfffe0219
 800f298:	fffffc03 	.word	0xfffffc03

0800f29c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f29c:	b590      	push	{r4, r7, lr}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f2a4:	230f      	movs	r3, #15
 800f2a6:	18fb      	adds	r3, r7, r3
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	2204      	movs	r2, #4
 800f2b4:	4013      	ands	r3, r2
 800f2b6:	d138      	bne.n	800f32a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2250      	movs	r2, #80	@ 0x50
 800f2bc:	5c9b      	ldrb	r3, [r3, r2]
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d101      	bne.n	800f2c6 <HAL_ADC_Start+0x2a>
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	e038      	b.n	800f338 <HAL_ADC_Start+0x9c>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2250      	movs	r2, #80	@ 0x50
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	69db      	ldr	r3, [r3, #28]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d007      	beq.n	800f2e6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f2d6:	230f      	movs	r3, #15
 800f2d8:	18fc      	adds	r4, r7, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	0018      	movs	r0, r3
 800f2de:	f000 f95f 	bl	800f5a0 <ADC_Enable>
 800f2e2:	0003      	movs	r3, r0
 800f2e4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f2e6:	230f      	movs	r3, #15
 800f2e8:	18fb      	adds	r3, r7, r3
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d120      	bne.n	800f332 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2f4:	4a12      	ldr	r2, [pc, #72]	@ (800f340 <HAL_ADC_Start+0xa4>)
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	2280      	movs	r2, #128	@ 0x80
 800f2fa:	0052      	lsls	r2, r2, #1
 800f2fc:	431a      	orrs	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2250      	movs	r2, #80	@ 0x50
 800f30c:	2100      	movs	r1, #0
 800f30e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	221c      	movs	r2, #28
 800f316:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	689a      	ldr	r2, [r3, #8]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2104      	movs	r1, #4
 800f324:	430a      	orrs	r2, r1
 800f326:	609a      	str	r2, [r3, #8]
 800f328:	e003      	b.n	800f332 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f32a:	230f      	movs	r3, #15
 800f32c:	18fb      	adds	r3, r7, r3
 800f32e:	2202      	movs	r2, #2
 800f330:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f332:	230f      	movs	r3, #15
 800f334:	18fb      	adds	r3, r7, r3
 800f336:	781b      	ldrb	r3, [r3, #0]
}
 800f338:	0018      	movs	r0, r3
 800f33a:	46bd      	mov	sp, r7
 800f33c:	b005      	add	sp, #20
 800f33e:	bd90      	pop	{r4, r7, pc}
 800f340:	fffff0fe 	.word	0xfffff0fe

0800f344 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f352:	2300      	movs	r3, #0
 800f354:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	2b08      	cmp	r3, #8
 800f35c:	d102      	bne.n	800f364 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f35e:	2308      	movs	r3, #8
 800f360:	60fb      	str	r3, [r7, #12]
 800f362:	e014      	b.n	800f38e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	2201      	movs	r2, #1
 800f36c:	4013      	ands	r3, r2
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d10b      	bne.n	800f38a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f376:	2220      	movs	r2, #32
 800f378:	431a      	orrs	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2250      	movs	r2, #80	@ 0x50
 800f382:	2100      	movs	r1, #0
 800f384:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f386:	2301      	movs	r3, #1
 800f388:	e072      	b.n	800f470 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f38a:	230c      	movs	r3, #12
 800f38c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f38e:	f7ff fda9 	bl	800eee4 <HAL_GetTick>
 800f392:	0003      	movs	r3, r0
 800f394:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f396:	e01f      	b.n	800f3d8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	3301      	adds	r3, #1
 800f39c:	d01c      	beq.n	800f3d8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d007      	beq.n	800f3b4 <HAL_ADC_PollForConversion+0x70>
 800f3a4:	f7ff fd9e 	bl	800eee4 <HAL_GetTick>
 800f3a8:	0002      	movs	r2, r0
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	1ad3      	subs	r3, r2, r3
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d211      	bcs.n	800f3d8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	4013      	ands	r3, r2
 800f3be:	d10b      	bne.n	800f3d8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3c4:	2204      	movs	r2, #4
 800f3c6:	431a      	orrs	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2250      	movs	r2, #80	@ 0x50
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f3d4:	2303      	movs	r3, #3
 800f3d6:	e04b      	b.n	800f470 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	d0d9      	beq.n	800f398 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3e8:	2280      	movs	r2, #128	@ 0x80
 800f3ea:	0092      	lsls	r2, r2, #2
 800f3ec:	431a      	orrs	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	23c0      	movs	r3, #192	@ 0xc0
 800f3fa:	011b      	lsls	r3, r3, #4
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	d12e      	bne.n	800f45e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2220      	movs	r2, #32
 800f404:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f406:	2b00      	cmp	r3, #0
 800f408:	d129      	bne.n	800f45e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2208      	movs	r2, #8
 800f412:	4013      	ands	r3, r2
 800f414:	2b08      	cmp	r3, #8
 800f416:	d122      	bne.n	800f45e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	2204      	movs	r2, #4
 800f420:	4013      	ands	r3, r2
 800f422:	d110      	bne.n	800f446 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	685a      	ldr	r2, [r3, #4]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	210c      	movs	r1, #12
 800f430:	438a      	bics	r2, r1
 800f432:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f438:	4a0f      	ldr	r2, [pc, #60]	@ (800f478 <HAL_ADC_PollForConversion+0x134>)
 800f43a:	4013      	ands	r3, r2
 800f43c:	2201      	movs	r2, #1
 800f43e:	431a      	orrs	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	655a      	str	r2, [r3, #84]	@ 0x54
 800f444:	e00b      	b.n	800f45e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f44a:	2220      	movs	r2, #32
 800f44c:	431a      	orrs	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f456:	2201      	movs	r2, #1
 800f458:	431a      	orrs	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	699b      	ldr	r3, [r3, #24]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d103      	bne.n	800f46e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	220c      	movs	r2, #12
 800f46c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	0018      	movs	r0, r3
 800f472:	46bd      	mov	sp, r7
 800f474:	b004      	add	sp, #16
 800f476:	bd80      	pop	{r7, pc}
 800f478:	fffffefe 	.word	0xfffffefe

0800f47c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f48a:	0018      	movs	r0, r3
 800f48c:	46bd      	mov	sp, r7
 800f48e:	b002      	add	sp, #8
 800f490:	bd80      	pop	{r7, pc}
	...

0800f494 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2250      	movs	r2, #80	@ 0x50
 800f4a2:	5c9b      	ldrb	r3, [r3, r2]
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d101      	bne.n	800f4ac <HAL_ADC_ConfigChannel+0x18>
 800f4a8:	2302      	movs	r3, #2
 800f4aa:	e06c      	b.n	800f586 <HAL_ADC_ConfigChannel+0xf2>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2250      	movs	r2, #80	@ 0x50
 800f4b0:	2101      	movs	r1, #1
 800f4b2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	2204      	movs	r2, #4
 800f4bc:	4013      	ands	r3, r2
 800f4be:	d00b      	beq.n	800f4d8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4c4:	2220      	movs	r2, #32
 800f4c6:	431a      	orrs	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2250      	movs	r2, #80	@ 0x50
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e056      	b.n	800f586 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	4a2c      	ldr	r2, [pc, #176]	@ (800f590 <HAL_ADC_ConfigChannel+0xfc>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d028      	beq.n	800f534 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	035b      	lsls	r3, r3, #13
 800f4ee:	0b5a      	lsrs	r2, r3, #13
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	430a      	orrs	r2, r1
 800f4f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	2380      	movs	r3, #128	@ 0x80
 800f4fe:	02db      	lsls	r3, r3, #11
 800f500:	4013      	ands	r3, r2
 800f502:	d009      	beq.n	800f518 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f504:	4b23      	ldr	r3, [pc, #140]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	4b22      	ldr	r3, [pc, #136]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f50a:	2180      	movs	r1, #128	@ 0x80
 800f50c:	0409      	lsls	r1, r1, #16
 800f50e:	430a      	orrs	r2, r1
 800f510:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f512:	200a      	movs	r0, #10
 800f514:	f000 f8ac 	bl	800f670 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	2380      	movs	r3, #128	@ 0x80
 800f51e:	029b      	lsls	r3, r3, #10
 800f520:	4013      	ands	r3, r2
 800f522:	d02b      	beq.n	800f57c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f524:	4b1b      	ldr	r3, [pc, #108]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	4b1a      	ldr	r3, [pc, #104]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f52a:	2180      	movs	r1, #128	@ 0x80
 800f52c:	03c9      	lsls	r1, r1, #15
 800f52e:	430a      	orrs	r2, r1
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	e023      	b.n	800f57c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	035b      	lsls	r3, r3, #13
 800f540:	0b5b      	lsrs	r3, r3, #13
 800f542:	43d9      	mvns	r1, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	400a      	ands	r2, r1
 800f54a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	2380      	movs	r3, #128	@ 0x80
 800f552:	02db      	lsls	r3, r3, #11
 800f554:	4013      	ands	r3, r2
 800f556:	d005      	beq.n	800f564 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f558:	4b0e      	ldr	r3, [pc, #56]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	4b0d      	ldr	r3, [pc, #52]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f55e:	490e      	ldr	r1, [pc, #56]	@ (800f598 <HAL_ADC_ConfigChannel+0x104>)
 800f560:	400a      	ands	r2, r1
 800f562:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	2380      	movs	r3, #128	@ 0x80
 800f56a:	029b      	lsls	r3, r3, #10
 800f56c:	4013      	ands	r3, r2
 800f56e:	d005      	beq.n	800f57c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f570:	4b08      	ldr	r3, [pc, #32]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	4b07      	ldr	r3, [pc, #28]	@ (800f594 <HAL_ADC_ConfigChannel+0x100>)
 800f576:	4909      	ldr	r1, [pc, #36]	@ (800f59c <HAL_ADC_ConfigChannel+0x108>)
 800f578:	400a      	ands	r2, r1
 800f57a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2250      	movs	r2, #80	@ 0x50
 800f580:	2100      	movs	r1, #0
 800f582:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	0018      	movs	r0, r3
 800f588:	46bd      	mov	sp, r7
 800f58a:	b002      	add	sp, #8
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	46c0      	nop			@ (mov r8, r8)
 800f590:	00001001 	.word	0x00001001
 800f594:	40012708 	.word	0x40012708
 800f598:	ff7fffff 	.word	0xff7fffff
 800f59c:	ffbfffff 	.word	0xffbfffff

0800f5a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	4013      	ands	r3, r2
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d108      	bne.n	800f5cc <ADC_Enable+0x2c>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d101      	bne.n	800f5cc <ADC_Enable+0x2c>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e000      	b.n	800f5ce <ADC_Enable+0x2e>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d146      	bne.n	800f660 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	4a24      	ldr	r2, [pc, #144]	@ (800f66c <ADC_Enable+0xcc>)
 800f5da:	4013      	ands	r3, r2
 800f5dc:	d00d      	beq.n	800f5fa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5e2:	2210      	movs	r2, #16
 800f5e4:	431a      	orrs	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	431a      	orrs	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e033      	b.n	800f662 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	689a      	ldr	r2, [r3, #8]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2101      	movs	r1, #1
 800f606:	430a      	orrs	r2, r1
 800f608:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f60a:	2001      	movs	r0, #1
 800f60c:	f000 f830 	bl	800f670 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f610:	f7ff fc68 	bl	800eee4 <HAL_GetTick>
 800f614:	0003      	movs	r3, r0
 800f616:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f618:	e01b      	b.n	800f652 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f61a:	f7ff fc63 	bl	800eee4 <HAL_GetTick>
 800f61e:	0002      	movs	r2, r0
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	2b0a      	cmp	r3, #10
 800f626:	d914      	bls.n	800f652 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2201      	movs	r2, #1
 800f630:	4013      	ands	r3, r2
 800f632:	2b01      	cmp	r3, #1
 800f634:	d00d      	beq.n	800f652 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f63a:	2210      	movs	r2, #16
 800f63c:	431a      	orrs	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f646:	2201      	movs	r2, #1
 800f648:	431a      	orrs	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e007      	b.n	800f662 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2201      	movs	r2, #1
 800f65a:	4013      	ands	r3, r2
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d1dc      	bne.n	800f61a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	0018      	movs	r0, r3
 800f664:	46bd      	mov	sp, r7
 800f666:	b004      	add	sp, #16
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	46c0      	nop			@ (mov r8, r8)
 800f66c:	80000017 	.word	0x80000017

0800f670 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f678:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a8 <ADC_DelayMicroSecond+0x38>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	490b      	ldr	r1, [pc, #44]	@ (800f6ac <ADC_DelayMicroSecond+0x3c>)
 800f67e:	0018      	movs	r0, r3
 800f680:	f7f0 fd90 	bl	80001a4 <__udivsi3>
 800f684:	0003      	movs	r3, r0
 800f686:	001a      	movs	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4353      	muls	r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f68e:	e002      	b.n	800f696 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	3b01      	subs	r3, #1
 800f694:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1f9      	bne.n	800f690 <ADC_DelayMicroSecond+0x20>
  }
}
 800f69c:	46c0      	nop			@ (mov r8, r8)
 800f69e:	46c0      	nop			@ (mov r8, r8)
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	b004      	add	sp, #16
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	46c0      	nop			@ (mov r8, r8)
 800f6a8:	200000d0 	.word	0x200000d0
 800f6ac:	000f4240 	.word	0x000f4240

0800f6b0 <__NVIC_EnableIRQ>:
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	0002      	movs	r2, r0
 800f6b8:	1dfb      	adds	r3, r7, #7
 800f6ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f6bc:	1dfb      	adds	r3, r7, #7
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6c2:	d809      	bhi.n	800f6d8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f6c4:	1dfb      	adds	r3, r7, #7
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	001a      	movs	r2, r3
 800f6ca:	231f      	movs	r3, #31
 800f6cc:	401a      	ands	r2, r3
 800f6ce:	4b04      	ldr	r3, [pc, #16]	@ (800f6e0 <__NVIC_EnableIRQ+0x30>)
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	4091      	lsls	r1, r2
 800f6d4:	000a      	movs	r2, r1
 800f6d6:	601a      	str	r2, [r3, #0]
}
 800f6d8:	46c0      	nop			@ (mov r8, r8)
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	b002      	add	sp, #8
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	e000e100 	.word	0xe000e100

0800f6e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f6e4:	b590      	push	{r4, r7, lr}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	0002      	movs	r2, r0
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	1dfb      	adds	r3, r7, #7
 800f6f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f6f2:	1dfb      	adds	r3, r7, #7
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6f8:	d828      	bhi.n	800f74c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6fa:	4a2f      	ldr	r2, [pc, #188]	@ (800f7b8 <__NVIC_SetPriority+0xd4>)
 800f6fc:	1dfb      	adds	r3, r7, #7
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	b25b      	sxtb	r3, r3
 800f702:	089b      	lsrs	r3, r3, #2
 800f704:	33c0      	adds	r3, #192	@ 0xc0
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	589b      	ldr	r3, [r3, r2]
 800f70a:	1dfa      	adds	r2, r7, #7
 800f70c:	7812      	ldrb	r2, [r2, #0]
 800f70e:	0011      	movs	r1, r2
 800f710:	2203      	movs	r2, #3
 800f712:	400a      	ands	r2, r1
 800f714:	00d2      	lsls	r2, r2, #3
 800f716:	21ff      	movs	r1, #255	@ 0xff
 800f718:	4091      	lsls	r1, r2
 800f71a:	000a      	movs	r2, r1
 800f71c:	43d2      	mvns	r2, r2
 800f71e:	401a      	ands	r2, r3
 800f720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	019b      	lsls	r3, r3, #6
 800f726:	22ff      	movs	r2, #255	@ 0xff
 800f728:	401a      	ands	r2, r3
 800f72a:	1dfb      	adds	r3, r7, #7
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	0018      	movs	r0, r3
 800f730:	2303      	movs	r3, #3
 800f732:	4003      	ands	r3, r0
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f738:	481f      	ldr	r0, [pc, #124]	@ (800f7b8 <__NVIC_SetPriority+0xd4>)
 800f73a:	1dfb      	adds	r3, r7, #7
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	b25b      	sxtb	r3, r3
 800f740:	089b      	lsrs	r3, r3, #2
 800f742:	430a      	orrs	r2, r1
 800f744:	33c0      	adds	r3, #192	@ 0xc0
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f74a:	e031      	b.n	800f7b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f74c:	4a1b      	ldr	r2, [pc, #108]	@ (800f7bc <__NVIC_SetPriority+0xd8>)
 800f74e:	1dfb      	adds	r3, r7, #7
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	0019      	movs	r1, r3
 800f754:	230f      	movs	r3, #15
 800f756:	400b      	ands	r3, r1
 800f758:	3b08      	subs	r3, #8
 800f75a:	089b      	lsrs	r3, r3, #2
 800f75c:	3306      	adds	r3, #6
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	18d3      	adds	r3, r2, r3
 800f762:	3304      	adds	r3, #4
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	1dfa      	adds	r2, r7, #7
 800f768:	7812      	ldrb	r2, [r2, #0]
 800f76a:	0011      	movs	r1, r2
 800f76c:	2203      	movs	r2, #3
 800f76e:	400a      	ands	r2, r1
 800f770:	00d2      	lsls	r2, r2, #3
 800f772:	21ff      	movs	r1, #255	@ 0xff
 800f774:	4091      	lsls	r1, r2
 800f776:	000a      	movs	r2, r1
 800f778:	43d2      	mvns	r2, r2
 800f77a:	401a      	ands	r2, r3
 800f77c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	019b      	lsls	r3, r3, #6
 800f782:	22ff      	movs	r2, #255	@ 0xff
 800f784:	401a      	ands	r2, r3
 800f786:	1dfb      	adds	r3, r7, #7
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	0018      	movs	r0, r3
 800f78c:	2303      	movs	r3, #3
 800f78e:	4003      	ands	r3, r0
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f794:	4809      	ldr	r0, [pc, #36]	@ (800f7bc <__NVIC_SetPriority+0xd8>)
 800f796:	1dfb      	adds	r3, r7, #7
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	001c      	movs	r4, r3
 800f79c:	230f      	movs	r3, #15
 800f79e:	4023      	ands	r3, r4
 800f7a0:	3b08      	subs	r3, #8
 800f7a2:	089b      	lsrs	r3, r3, #2
 800f7a4:	430a      	orrs	r2, r1
 800f7a6:	3306      	adds	r3, #6
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	18c3      	adds	r3, r0, r3
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	601a      	str	r2, [r3, #0]
}
 800f7b0:	46c0      	nop			@ (mov r8, r8)
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	b003      	add	sp, #12
 800f7b6:	bd90      	pop	{r4, r7, pc}
 800f7b8:	e000e100 	.word	0xe000e100
 800f7bc:	e000ed00 	.word	0xe000ed00

0800f7c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f7c4:	f3bf 8f4f 	dsb	sy
}
 800f7c8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f7ca:	4b04      	ldr	r3, [pc, #16]	@ (800f7dc <__NVIC_SystemReset+0x1c>)
 800f7cc:	4a04      	ldr	r2, [pc, #16]	@ (800f7e0 <__NVIC_SystemReset+0x20>)
 800f7ce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f7d0:	f3bf 8f4f 	dsb	sy
}
 800f7d4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f7d6:	46c0      	nop			@ (mov r8, r8)
 800f7d8:	e7fd      	b.n	800f7d6 <__NVIC_SystemReset+0x16>
 800f7da:	46c0      	nop			@ (mov r8, r8)
 800f7dc:	e000ed00 	.word	0xe000ed00
 800f7e0:	05fa0004 	.word	0x05fa0004

0800f7e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	1e5a      	subs	r2, r3, #1
 800f7f0:	2380      	movs	r3, #128	@ 0x80
 800f7f2:	045b      	lsls	r3, r3, #17
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d301      	bcc.n	800f7fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e010      	b.n	800f81e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f828 <SysTick_Config+0x44>)
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	3a01      	subs	r2, #1
 800f802:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f804:	2301      	movs	r3, #1
 800f806:	425b      	negs	r3, r3
 800f808:	2103      	movs	r1, #3
 800f80a:	0018      	movs	r0, r3
 800f80c:	f7ff ff6a 	bl	800f6e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f810:	4b05      	ldr	r3, [pc, #20]	@ (800f828 <SysTick_Config+0x44>)
 800f812:	2200      	movs	r2, #0
 800f814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f816:	4b04      	ldr	r3, [pc, #16]	@ (800f828 <SysTick_Config+0x44>)
 800f818:	2207      	movs	r2, #7
 800f81a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	0018      	movs	r0, r3
 800f820:	46bd      	mov	sp, r7
 800f822:	b002      	add	sp, #8
 800f824:	bd80      	pop	{r7, pc}
 800f826:	46c0      	nop			@ (mov r8, r8)
 800f828:	e000e010 	.word	0xe000e010

0800f82c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	60b9      	str	r1, [r7, #8]
 800f834:	607a      	str	r2, [r7, #4]
 800f836:	210f      	movs	r1, #15
 800f838:	187b      	adds	r3, r7, r1
 800f83a:	1c02      	adds	r2, r0, #0
 800f83c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f83e:	68ba      	ldr	r2, [r7, #8]
 800f840:	187b      	adds	r3, r7, r1
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	b25b      	sxtb	r3, r3
 800f846:	0011      	movs	r1, r2
 800f848:	0018      	movs	r0, r3
 800f84a:	f7ff ff4b 	bl	800f6e4 <__NVIC_SetPriority>
}
 800f84e:	46c0      	nop			@ (mov r8, r8)
 800f850:	46bd      	mov	sp, r7
 800f852:	b004      	add	sp, #16
 800f854:	bd80      	pop	{r7, pc}

0800f856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	0002      	movs	r2, r0
 800f85e:	1dfb      	adds	r3, r7, #7
 800f860:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f862:	1dfb      	adds	r3, r7, #7
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	b25b      	sxtb	r3, r3
 800f868:	0018      	movs	r0, r3
 800f86a:	f7ff ff21 	bl	800f6b0 <__NVIC_EnableIRQ>
}
 800f86e:	46c0      	nop			@ (mov r8, r8)
 800f870:	46bd      	mov	sp, r7
 800f872:	b002      	add	sp, #8
 800f874:	bd80      	pop	{r7, pc}

0800f876 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f87a:	f7ff ffa1 	bl	800f7c0 <__NVIC_SystemReset>

0800f87e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	0018      	movs	r0, r3
 800f88a:	f7ff ffab 	bl	800f7e4 <SysTick_Config>
 800f88e:	0003      	movs	r3, r0
}
 800f890:	0018      	movs	r0, r3
 800f892:	46bd      	mov	sp, r7
 800f894:	b002      	add	sp, #8
 800f896:	bd80      	pop	{r7, pc}

0800f898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e061      	b.n	800f96e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4a32      	ldr	r2, [pc, #200]	@ (800f978 <HAL_DMA_Init+0xe0>)
 800f8b0:	4694      	mov	ip, r2
 800f8b2:	4463      	add	r3, ip
 800f8b4:	2114      	movs	r1, #20
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	f7f0 fc74 	bl	80001a4 <__udivsi3>
 800f8bc:	0003      	movs	r3, r0
 800f8be:	009a      	lsls	r2, r3, #2
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a2d      	ldr	r2, [pc, #180]	@ (800f97c <HAL_DMA_Init+0xe4>)
 800f8c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2225      	movs	r2, #37	@ 0x25
 800f8ce:	2102      	movs	r1, #2
 800f8d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	4a28      	ldr	r2, [pc, #160]	@ (800f980 <HAL_DMA_Init+0xe8>)
 800f8de:	4013      	ands	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f8ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	699b      	ldr	r3, [r3, #24]
 800f8fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a1b      	ldr	r3, [r3, #32]
 800f908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	689a      	ldr	r2, [r3, #8]
 800f91c:	2380      	movs	r3, #128	@ 0x80
 800f91e:	01db      	lsls	r3, r3, #7
 800f920:	429a      	cmp	r2, r3
 800f922:	d018      	beq.n	800f956 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f924:	4b17      	ldr	r3, [pc, #92]	@ (800f984 <HAL_DMA_Init+0xec>)
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f92c:	211c      	movs	r1, #28
 800f92e:	400b      	ands	r3, r1
 800f930:	210f      	movs	r1, #15
 800f932:	4099      	lsls	r1, r3
 800f934:	000b      	movs	r3, r1
 800f936:	43d9      	mvns	r1, r3
 800f938:	4b12      	ldr	r3, [pc, #72]	@ (800f984 <HAL_DMA_Init+0xec>)
 800f93a:	400a      	ands	r2, r1
 800f93c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f93e:	4b11      	ldr	r3, [pc, #68]	@ (800f984 <HAL_DMA_Init+0xec>)
 800f940:	6819      	ldr	r1, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	685a      	ldr	r2, [r3, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f94a:	201c      	movs	r0, #28
 800f94c:	4003      	ands	r3, r0
 800f94e:	409a      	lsls	r2, r3
 800f950:	4b0c      	ldr	r3, [pc, #48]	@ (800f984 <HAL_DMA_Init+0xec>)
 800f952:	430a      	orrs	r2, r1
 800f954:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2225      	movs	r2, #37	@ 0x25
 800f960:	2101      	movs	r1, #1
 800f962:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2224      	movs	r2, #36	@ 0x24
 800f968:	2100      	movs	r1, #0
 800f96a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	0018      	movs	r0, r3
 800f970:	46bd      	mov	sp, r7
 800f972:	b004      	add	sp, #16
 800f974:	bd80      	pop	{r7, pc}
 800f976:	46c0      	nop			@ (mov r8, r8)
 800f978:	bffdfff8 	.word	0xbffdfff8
 800f97c:	40020000 	.word	0x40020000
 800f980:	ffff800f 	.word	0xffff800f
 800f984:	400200a8 	.word	0x400200a8

0800f988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f996:	2317      	movs	r3, #23
 800f998:	18fb      	adds	r3, r7, r3
 800f99a:	2200      	movs	r2, #0
 800f99c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2224      	movs	r2, #36	@ 0x24
 800f9a2:	5c9b      	ldrb	r3, [r3, r2]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d101      	bne.n	800f9ac <HAL_DMA_Start_IT+0x24>
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	e04f      	b.n	800fa4c <HAL_DMA_Start_IT+0xc4>
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2224      	movs	r2, #36	@ 0x24
 800f9b0:	2101      	movs	r1, #1
 800f9b2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2225      	movs	r2, #37	@ 0x25
 800f9b8:	5c9b      	ldrb	r3, [r3, r2]
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d13a      	bne.n	800fa36 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2225      	movs	r2, #37	@ 0x25
 800f9c4:	2102      	movs	r1, #2
 800f9c6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2101      	movs	r1, #1
 800f9da:	438a      	bics	r2, r1
 800f9dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	68b9      	ldr	r1, [r7, #8]
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f000 f976 	bl	800fcd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d008      	beq.n	800fa04 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	210e      	movs	r1, #14
 800f9fe:	430a      	orrs	r2, r1
 800fa00:	601a      	str	r2, [r3, #0]
 800fa02:	e00f      	b.n	800fa24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2104      	movs	r1, #4
 800fa10:	438a      	bics	r2, r1
 800fa12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	210a      	movs	r1, #10
 800fa20:	430a      	orrs	r2, r1
 800fa22:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2101      	movs	r1, #1
 800fa30:	430a      	orrs	r2, r1
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	e007      	b.n	800fa46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2224      	movs	r2, #36	@ 0x24
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800fa3e:	2317      	movs	r3, #23
 800fa40:	18fb      	adds	r3, r7, r3
 800fa42:	2202      	movs	r2, #2
 800fa44:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800fa46:	2317      	movs	r3, #23
 800fa48:	18fb      	adds	r3, r7, r3
 800fa4a:	781b      	ldrb	r3, [r3, #0]
}
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	b006      	add	sp, #24
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa5c:	230f      	movs	r3, #15
 800fa5e:	18fb      	adds	r3, r7, r3
 800fa60:	2200      	movs	r2, #0
 800fa62:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2225      	movs	r2, #37	@ 0x25
 800fa68:	5c9b      	ldrb	r3, [r3, r2]
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d008      	beq.n	800fa82 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2204      	movs	r2, #4
 800fa74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2224      	movs	r2, #36	@ 0x24
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e024      	b.n	800facc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	210e      	movs	r1, #14
 800fa8e:	438a      	bics	r2, r1
 800fa90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2101      	movs	r1, #1
 800fa9e:	438a      	bics	r2, r1
 800faa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faa6:	221c      	movs	r2, #28
 800faa8:	401a      	ands	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faae:	2101      	movs	r1, #1
 800fab0:	4091      	lsls	r1, r2
 800fab2:	000a      	movs	r2, r1
 800fab4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2225      	movs	r2, #37	@ 0x25
 800faba:	2101      	movs	r1, #1
 800fabc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2224      	movs	r2, #36	@ 0x24
 800fac2:	2100      	movs	r1, #0
 800fac4:	5499      	strb	r1, [r3, r2]

    return status;
 800fac6:	230f      	movs	r3, #15
 800fac8:	18fb      	adds	r3, r7, r3
 800faca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800facc:	0018      	movs	r0, r3
 800face:	46bd      	mov	sp, r7
 800fad0:	b004      	add	sp, #16
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fadc:	210f      	movs	r1, #15
 800fade:	187b      	adds	r3, r7, r1
 800fae0:	2200      	movs	r2, #0
 800fae2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2225      	movs	r2, #37	@ 0x25
 800fae8:	5c9b      	ldrb	r3, [r3, r2]
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b02      	cmp	r3, #2
 800faee:	d006      	beq.n	800fafe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2204      	movs	r2, #4
 800faf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800faf6:	187b      	adds	r3, r7, r1
 800faf8:	2201      	movs	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	e02a      	b.n	800fb54 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	210e      	movs	r1, #14
 800fb0a:	438a      	bics	r2, r1
 800fb0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2101      	movs	r1, #1
 800fb1a:	438a      	bics	r2, r1
 800fb1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb22:	221c      	movs	r2, #28
 800fb24:	401a      	ands	r2, r3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2a:	2101      	movs	r1, #1
 800fb2c:	4091      	lsls	r1, r2
 800fb2e:	000a      	movs	r2, r1
 800fb30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2225      	movs	r2, #37	@ 0x25
 800fb36:	2101      	movs	r1, #1
 800fb38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2224      	movs	r2, #36	@ 0x24
 800fb3e:	2100      	movs	r1, #0
 800fb40:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d004      	beq.n	800fb54 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	0010      	movs	r0, r2
 800fb52:	4798      	blx	r3
    }
  }
  return status;
 800fb54:	230f      	movs	r3, #15
 800fb56:	18fb      	adds	r3, r7, r3
 800fb58:	781b      	ldrb	r3, [r3, #0]
}
 800fb5a:	0018      	movs	r0, r3
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	b004      	add	sp, #16
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b084      	sub	sp, #16
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb7e:	221c      	movs	r2, #28
 800fb80:	4013      	ands	r3, r2
 800fb82:	2204      	movs	r2, #4
 800fb84:	409a      	lsls	r2, r3
 800fb86:	0013      	movs	r3, r2
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	4013      	ands	r3, r2
 800fb8c:	d026      	beq.n	800fbdc <HAL_DMA_IRQHandler+0x7a>
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	2204      	movs	r2, #4
 800fb92:	4013      	ands	r3, r2
 800fb94:	d022      	beq.n	800fbdc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2220      	movs	r2, #32
 800fb9e:	4013      	ands	r3, r2
 800fba0:	d107      	bne.n	800fbb2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2104      	movs	r1, #4
 800fbae:	438a      	bics	r2, r1
 800fbb0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbb6:	221c      	movs	r2, #28
 800fbb8:	401a      	ands	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbbe:	2104      	movs	r1, #4
 800fbc0:	4091      	lsls	r1, r2
 800fbc2:	000a      	movs	r2, r1
 800fbc4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d100      	bne.n	800fbd0 <HAL_DMA_IRQHandler+0x6e>
 800fbce:	e071      	b.n	800fcb4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	0010      	movs	r0, r2
 800fbd8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fbda:	e06b      	b.n	800fcb4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe0:	221c      	movs	r2, #28
 800fbe2:	4013      	ands	r3, r2
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	409a      	lsls	r2, r3
 800fbe8:	0013      	movs	r3, r2
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	4013      	ands	r3, r2
 800fbee:	d02d      	beq.n	800fc4c <HAL_DMA_IRQHandler+0xea>
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	2202      	movs	r2, #2
 800fbf4:	4013      	ands	r3, r2
 800fbf6:	d029      	beq.n	800fc4c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	4013      	ands	r3, r2
 800fc02:	d10b      	bne.n	800fc1c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	210a      	movs	r1, #10
 800fc10:	438a      	bics	r2, r1
 800fc12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2225      	movs	r2, #37	@ 0x25
 800fc18:	2101      	movs	r1, #1
 800fc1a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc20:	221c      	movs	r2, #28
 800fc22:	401a      	ands	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc28:	2102      	movs	r1, #2
 800fc2a:	4091      	lsls	r1, r2
 800fc2c:	000a      	movs	r2, r1
 800fc2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2224      	movs	r2, #36	@ 0x24
 800fc34:	2100      	movs	r1, #0
 800fc36:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d039      	beq.n	800fcb4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	0010      	movs	r0, r2
 800fc48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800fc4a:	e033      	b.n	800fcb4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc50:	221c      	movs	r2, #28
 800fc52:	4013      	ands	r3, r2
 800fc54:	2208      	movs	r2, #8
 800fc56:	409a      	lsls	r2, r3
 800fc58:	0013      	movs	r3, r2
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	4013      	ands	r3, r2
 800fc5e:	d02a      	beq.n	800fcb6 <HAL_DMA_IRQHandler+0x154>
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2208      	movs	r2, #8
 800fc64:	4013      	ands	r3, r2
 800fc66:	d026      	beq.n	800fcb6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	210e      	movs	r1, #14
 800fc74:	438a      	bics	r2, r1
 800fc76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc7c:	221c      	movs	r2, #28
 800fc7e:	401a      	ands	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc84:	2101      	movs	r1, #1
 800fc86:	4091      	lsls	r1, r2
 800fc88:	000a      	movs	r2, r1
 800fc8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2225      	movs	r2, #37	@ 0x25
 800fc96:	2101      	movs	r1, #1
 800fc98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2224      	movs	r2, #36	@ 0x24
 800fc9e:	2100      	movs	r1, #0
 800fca0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d005      	beq.n	800fcb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	0010      	movs	r0, r2
 800fcb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fcb4:	46c0      	nop			@ (mov r8, r8)
 800fcb6:	46c0      	nop			@ (mov r8, r8)
}
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	b004      	add	sp, #16
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b082      	sub	sp, #8
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2225      	movs	r2, #37	@ 0x25
 800fcca:	5c9b      	ldrb	r3, [r3, r2]
 800fccc:	b2db      	uxtb	r3, r3
}
 800fcce:	0018      	movs	r0, r3
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	b002      	add	sp, #8
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b084      	sub	sp, #16
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	60f8      	str	r0, [r7, #12]
 800fcde:	60b9      	str	r1, [r7, #8]
 800fce0:	607a      	str	r2, [r7, #4]
 800fce2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce8:	221c      	movs	r2, #28
 800fcea:	401a      	ands	r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcf0:	2101      	movs	r1, #1
 800fcf2:	4091      	lsls	r1, r2
 800fcf4:	000a      	movs	r2, r1
 800fcf6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	683a      	ldr	r2, [r7, #0]
 800fcfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	2b10      	cmp	r3, #16
 800fd06:	d108      	bne.n	800fd1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fd18:	e007      	b.n	800fd2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	60da      	str	r2, [r3, #12]
}
 800fd2a:	46c0      	nop			@ (mov r8, r8)
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	b004      	add	sp, #16
 800fd30:	bd80      	pop	{r7, pc}
	...

0800fd34 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fd3c:	f7ff f8d2 	bl	800eee4 <HAL_GetTick>
 800fd40:	0003      	movs	r3, r0
 800fd42:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fd44:	e00f      	b.n	800fd66 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	d00c      	beq.n	800fd66 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d007      	beq.n	800fd62 <FLASH_WaitForLastOperation+0x2e>
 800fd52:	f7ff f8c7 	bl	800eee4 <HAL_GetTick>
 800fd56:	0002      	movs	r2, r0
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d201      	bcs.n	800fd66 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e052      	b.n	800fe0c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fd66:	4b2b      	ldr	r3, [pc, #172]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fd68:	699b      	ldr	r3, [r3, #24]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d0e9      	beq.n	800fd46 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fd72:	4b28      	ldr	r3, [pc, #160]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fd74:	699b      	ldr	r3, [r3, #24]
 800fd76:	2202      	movs	r2, #2
 800fd78:	4013      	ands	r3, r2
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d102      	bne.n	800fd84 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fd7e:	4b25      	ldr	r3, [pc, #148]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fd80:	2202      	movs	r2, #2
 800fd82:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fd84:	4b23      	ldr	r3, [pc, #140]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fd86:	699a      	ldr	r2, [r3, #24]
 800fd88:	2380      	movs	r3, #128	@ 0x80
 800fd8a:	005b      	lsls	r3, r3, #1
 800fd8c:	401a      	ands	r2, r3
 800fd8e:	2380      	movs	r3, #128	@ 0x80
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d035      	beq.n	800fe02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fd96:	4b1f      	ldr	r3, [pc, #124]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fd98:	699a      	ldr	r2, [r3, #24]
 800fd9a:	2380      	movs	r3, #128	@ 0x80
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fda0:	2380      	movs	r3, #128	@ 0x80
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d02c      	beq.n	800fe02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fda8:	4b1a      	ldr	r3, [pc, #104]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fdaa:	699a      	ldr	r2, [r3, #24]
 800fdac:	2380      	movs	r3, #128	@ 0x80
 800fdae:	00db      	lsls	r3, r3, #3
 800fdb0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fdb2:	2380      	movs	r3, #128	@ 0x80
 800fdb4:	00db      	lsls	r3, r3, #3
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d023      	beq.n	800fe02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fdba:	4b16      	ldr	r3, [pc, #88]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fdbc:	699a      	ldr	r2, [r3, #24]
 800fdbe:	2380      	movs	r3, #128	@ 0x80
 800fdc0:	011b      	lsls	r3, r3, #4
 800fdc2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fdc4:	2380      	movs	r3, #128	@ 0x80
 800fdc6:	011b      	lsls	r3, r3, #4
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d01a      	beq.n	800fe02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fdcc:	4b11      	ldr	r3, [pc, #68]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fdce:	699a      	ldr	r2, [r3, #24]
 800fdd0:	2380      	movs	r3, #128	@ 0x80
 800fdd2:	019b      	lsls	r3, r3, #6
 800fdd4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fdd6:	2380      	movs	r3, #128	@ 0x80
 800fdd8:	019b      	lsls	r3, r3, #6
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d011      	beq.n	800fe02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fdde:	4b0d      	ldr	r3, [pc, #52]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fde0:	699a      	ldr	r2, [r3, #24]
 800fde2:	2380      	movs	r3, #128	@ 0x80
 800fde4:	029b      	lsls	r3, r3, #10
 800fde6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fde8:	2380      	movs	r3, #128	@ 0x80
 800fdea:	029b      	lsls	r3, r3, #10
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d008      	beq.n	800fe02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fdf0:	4b08      	ldr	r3, [pc, #32]	@ (800fe14 <FLASH_WaitForLastOperation+0xe0>)
 800fdf2:	699a      	ldr	r2, [r3, #24]
 800fdf4:	2380      	movs	r3, #128	@ 0x80
 800fdf6:	025b      	lsls	r3, r3, #9
 800fdf8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fdfa:	2380      	movs	r3, #128	@ 0x80
 800fdfc:	025b      	lsls	r3, r3, #9
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d103      	bne.n	800fe0a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fe02:	f000 f809 	bl	800fe18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
 800fe08:	e000      	b.n	800fe0c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fe0a:	2300      	movs	r3, #0
}
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	b004      	add	sp, #16
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	40022000 	.word	0x40022000

0800fe18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fe22:	4b49      	ldr	r3, [pc, #292]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800fe24:	699a      	ldr	r2, [r3, #24]
 800fe26:	2380      	movs	r3, #128	@ 0x80
 800fe28:	005b      	lsls	r3, r3, #1
 800fe2a:	401a      	ands	r2, r3
 800fe2c:	2380      	movs	r3, #128	@ 0x80
 800fe2e:	005b      	lsls	r3, r3, #1
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d10a      	bne.n	800fe4a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fe34:	4b45      	ldr	r3, [pc, #276]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	2202      	movs	r2, #2
 800fe3a:	431a      	orrs	r2, r3
 800fe3c:	4b43      	ldr	r3, [pc, #268]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fe3e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2280      	movs	r2, #128	@ 0x80
 800fe44:	0052      	lsls	r2, r2, #1
 800fe46:	4313      	orrs	r3, r2
 800fe48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fe4a:	4b3f      	ldr	r3, [pc, #252]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800fe4c:	699a      	ldr	r2, [r3, #24]
 800fe4e:	2380      	movs	r3, #128	@ 0x80
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	401a      	ands	r2, r3
 800fe54:	2380      	movs	r3, #128	@ 0x80
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d10a      	bne.n	800fe72 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fe5c:	4b3b      	ldr	r3, [pc, #236]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fe5e:	695b      	ldr	r3, [r3, #20]
 800fe60:	2201      	movs	r2, #1
 800fe62:	431a      	orrs	r2, r3
 800fe64:	4b39      	ldr	r3, [pc, #228]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fe66:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2280      	movs	r2, #128	@ 0x80
 800fe6c:	0092      	lsls	r2, r2, #2
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fe72:	4b35      	ldr	r3, [pc, #212]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800fe74:	699a      	ldr	r2, [r3, #24]
 800fe76:	2380      	movs	r3, #128	@ 0x80
 800fe78:	00db      	lsls	r3, r3, #3
 800fe7a:	401a      	ands	r2, r3
 800fe7c:	2380      	movs	r3, #128	@ 0x80
 800fe7e:	00db      	lsls	r3, r3, #3
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d10a      	bne.n	800fe9a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fe84:	4b31      	ldr	r3, [pc, #196]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fe86:	695b      	ldr	r3, [r3, #20]
 800fe88:	2208      	movs	r2, #8
 800fe8a:	431a      	orrs	r2, r3
 800fe8c:	4b2f      	ldr	r3, [pc, #188]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fe8e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2280      	movs	r2, #128	@ 0x80
 800fe94:	00d2      	lsls	r2, r2, #3
 800fe96:	4313      	orrs	r3, r2
 800fe98:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fe9a:	4b2b      	ldr	r3, [pc, #172]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800fe9c:	699a      	ldr	r2, [r3, #24]
 800fe9e:	2380      	movs	r3, #128	@ 0x80
 800fea0:	011b      	lsls	r3, r3, #4
 800fea2:	401a      	ands	r2, r3
 800fea4:	2380      	movs	r3, #128	@ 0x80
 800fea6:	011b      	lsls	r3, r3, #4
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d10a      	bne.n	800fec2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800feac:	4b27      	ldr	r3, [pc, #156]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800feae:	695b      	ldr	r3, [r3, #20]
 800feb0:	2204      	movs	r2, #4
 800feb2:	431a      	orrs	r2, r3
 800feb4:	4b25      	ldr	r3, [pc, #148]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800feb6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2280      	movs	r2, #128	@ 0x80
 800febc:	0112      	lsls	r2, r2, #4
 800febe:	4313      	orrs	r3, r2
 800fec0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fec2:	4b21      	ldr	r3, [pc, #132]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800fec4:	699a      	ldr	r2, [r3, #24]
 800fec6:	2380      	movs	r3, #128	@ 0x80
 800fec8:	019b      	lsls	r3, r3, #6
 800feca:	401a      	ands	r2, r3
 800fecc:	2380      	movs	r3, #128	@ 0x80
 800fece:	019b      	lsls	r3, r3, #6
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d10a      	bne.n	800feea <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fed4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	2210      	movs	r2, #16
 800feda:	431a      	orrs	r2, r3
 800fedc:	4b1b      	ldr	r3, [pc, #108]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fede:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2280      	movs	r2, #128	@ 0x80
 800fee4:	0192      	lsls	r2, r2, #6
 800fee6:	4313      	orrs	r3, r2
 800fee8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800feea:	4b17      	ldr	r3, [pc, #92]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800feec:	699a      	ldr	r2, [r3, #24]
 800feee:	2380      	movs	r3, #128	@ 0x80
 800fef0:	029b      	lsls	r3, r3, #10
 800fef2:	401a      	ands	r2, r3
 800fef4:	2380      	movs	r3, #128	@ 0x80
 800fef6:	029b      	lsls	r3, r3, #10
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d109      	bne.n	800ff10 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fefc:	4b13      	ldr	r3, [pc, #76]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	2220      	movs	r2, #32
 800ff02:	431a      	orrs	r2, r3
 800ff04:	4b11      	ldr	r3, [pc, #68]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800ff06:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800ff10:	4b0d      	ldr	r3, [pc, #52]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800ff12:	699a      	ldr	r2, [r3, #24]
 800ff14:	2380      	movs	r3, #128	@ 0x80
 800ff16:	025b      	lsls	r3, r3, #9
 800ff18:	401a      	ands	r2, r3
 800ff1a:	2380      	movs	r3, #128	@ 0x80
 800ff1c:	025b      	lsls	r3, r3, #9
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d10a      	bne.n	800ff38 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800ff22:	4b0a      	ldr	r3, [pc, #40]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800ff24:	695b      	ldr	r3, [r3, #20]
 800ff26:	2240      	movs	r2, #64	@ 0x40
 800ff28:	431a      	orrs	r2, r3
 800ff2a:	4b08      	ldr	r3, [pc, #32]	@ (800ff4c <FLASH_SetErrorCode+0x134>)
 800ff2c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2280      	movs	r2, #128	@ 0x80
 800ff32:	0252      	lsls	r2, r2, #9
 800ff34:	4313      	orrs	r3, r2
 800ff36:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ff38:	4b03      	ldr	r3, [pc, #12]	@ (800ff48 <FLASH_SetErrorCode+0x130>)
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	619a      	str	r2, [r3, #24]
}  
 800ff3e:	46c0      	nop			@ (mov r8, r8)
 800ff40:	46bd      	mov	sp, r7
 800ff42:	b002      	add	sp, #8
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	46c0      	nop			@ (mov r8, r8)
 800ff48:	40022000 	.word	0x40022000
 800ff4c:	200023cc 	.word	0x200023cc

0800ff50 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ff56:	4b12      	ldr	r3, [pc, #72]	@ (800ffa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	4013      	ands	r3, r2
 800ff5e:	d019      	beq.n	800ff94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff60:	f3ef 8310 	mrs	r3, PRIMASK
 800ff64:	607b      	str	r3, [r7, #4]
  return(result);
 800ff66:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ff68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff6a:	b672      	cpsid	i
}
 800ff6c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ff6e:	4b0c      	ldr	r3, [pc, #48]	@ (800ffa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff70:	4a0c      	ldr	r2, [pc, #48]	@ (800ffa4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ff72:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ff74:	4b0a      	ldr	r3, [pc, #40]	@ (800ffa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff76:	4a0c      	ldr	r2, [pc, #48]	@ (800ffa8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ff78:	60da      	str	r2, [r3, #12]
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	f383 8810 	msr	PRIMASK, r3
}
 800ff84:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ff86:	4b06      	ldr	r3, [pc, #24]	@ (800ffa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	d001      	beq.n	800ff94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ff90:	2301      	movs	r3, #1
 800ff92:	e000      	b.n	800ff96 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	0018      	movs	r0, r3
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	b004      	add	sp, #16
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	46c0      	nop			@ (mov r8, r8)
 800ffa0:	40022000 	.word	0x40022000
 800ffa4:	89abcdef 	.word	0x89abcdef
 800ffa8:	02030405 	.word	0x02030405

0800ffac <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ffb0:	4b04      	ldr	r3, [pc, #16]	@ (800ffc4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ffb2:	685a      	ldr	r2, [r3, #4]
 800ffb4:	4b03      	ldr	r3, [pc, #12]	@ (800ffc4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ffb6:	2101      	movs	r1, #1
 800ffb8:	430a      	orrs	r2, r1
 800ffba:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	0018      	movs	r0, r3
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	40022000 	.word	0x40022000

0800ffc8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ffc8:	b5b0      	push	{r4, r5, r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffd0:	250f      	movs	r5, #15
 800ffd2:	197b      	adds	r3, r7, r5
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ffd8:	197c      	adds	r4, r7, r5
 800ffda:	4b0f      	ldr	r3, [pc, #60]	@ (8010018 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ffdc:	0018      	movs	r0, r3
 800ffde:	f7ff fea9 	bl	800fd34 <FLASH_WaitForLastOperation>
 800ffe2:	0003      	movs	r3, r0
 800ffe4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ffe6:	0029      	movs	r1, r5
 800ffe8:	187b      	adds	r3, r7, r1
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10c      	bne.n	801000a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fff0:	4b0a      	ldr	r3, [pc, #40]	@ (801001c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fffc:	187c      	adds	r4, r7, r1
 800fffe:	4b06      	ldr	r3, [pc, #24]	@ (8010018 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010000:	0018      	movs	r0, r3
 8010002:	f7ff fe97 	bl	800fd34 <FLASH_WaitForLastOperation>
 8010006:	0003      	movs	r3, r0
 8010008:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801000a:	230f      	movs	r3, #15
 801000c:	18fb      	adds	r3, r7, r3
 801000e:	781b      	ldrb	r3, [r3, #0]
}  
 8010010:	0018      	movs	r0, r3
 8010012:	46bd      	mov	sp, r7
 8010014:	b004      	add	sp, #16
 8010016:	bdb0      	pop	{r4, r5, r7, pc}
 8010018:	0000c350 	.word	0x0000c350
 801001c:	200023cc 	.word	0x200023cc

08010020 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8010020:	b5b0      	push	{r4, r5, r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801002c:	2317      	movs	r3, #23
 801002e:	18fb      	adds	r3, r7, r3
 8010030:	2201      	movs	r2, #1
 8010032:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010034:	4b24      	ldr	r3, [pc, #144]	@ (80100c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010036:	7c1b      	ldrb	r3, [r3, #16]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d101      	bne.n	8010040 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 801003c:	2302      	movs	r3, #2
 801003e:	e03e      	b.n	80100be <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8010040:	4b21      	ldr	r3, [pc, #132]	@ (80100c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010042:	2201      	movs	r2, #1
 8010044:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010046:	2517      	movs	r5, #23
 8010048:	197c      	adds	r4, r7, r5
 801004a:	4b20      	ldr	r3, [pc, #128]	@ (80100cc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801004c:	0018      	movs	r0, r3
 801004e:	f7ff fe71 	bl	800fd34 <FLASH_WaitForLastOperation>
 8010052:	0003      	movs	r3, r0
 8010054:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8010056:	197b      	adds	r3, r7, r5
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d129      	bne.n	80100b2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801005e:	4b1a      	ldr	r3, [pc, #104]	@ (80100c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010060:	2200      	movs	r2, #0
 8010062:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b02      	cmp	r3, #2
 8010068:	d103      	bne.n	8010072 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	e013      	b.n	801009a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d104      	bne.n	8010082 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	b292      	uxth	r2, r2
 801007e:	801a      	strh	r2, [r3, #0]
 8010080:	e00b      	b.n	801009a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d104      	bne.n	8010092 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	b2d2      	uxtb	r2, r2
 801008e:	701a      	strb	r2, [r3, #0]
 8010090:	e003      	b.n	801009a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8010092:	2317      	movs	r3, #23
 8010094:	18fb      	adds	r3, r7, r3
 8010096:	2201      	movs	r2, #1
 8010098:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801009a:	2217      	movs	r2, #23
 801009c:	18bb      	adds	r3, r7, r2
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d106      	bne.n	80100b2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80100a4:	18bc      	adds	r4, r7, r2
 80100a6:	4b09      	ldr	r3, [pc, #36]	@ (80100cc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80100a8:	0018      	movs	r0, r3
 80100aa:	f7ff fe43 	bl	800fd34 <FLASH_WaitForLastOperation>
 80100ae:	0003      	movs	r3, r0
 80100b0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80100b2:	4b05      	ldr	r3, [pc, #20]	@ (80100c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80100b4:	2200      	movs	r2, #0
 80100b6:	741a      	strb	r2, [r3, #16]

  return status;
 80100b8:	2317      	movs	r3, #23
 80100ba:	18fb      	adds	r3, r7, r3
 80100bc:	781b      	ldrb	r3, [r3, #0]
}
 80100be:	0018      	movs	r0, r3
 80100c0:	46bd      	mov	sp, r7
 80100c2:	b006      	add	sp, #24
 80100c4:	bdb0      	pop	{r4, r5, r7, pc}
 80100c6:	46c0      	nop			@ (mov r8, r8)
 80100c8:	200023cc 	.word	0x200023cc
 80100cc:	0000c350 	.word	0x0000c350

080100d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80100da:	2300      	movs	r3, #0
 80100dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80100de:	2300      	movs	r3, #0
 80100e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80100e2:	2300      	movs	r3, #0
 80100e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80100e6:	e155      	b.n	8010394 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2101      	movs	r1, #1
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	4091      	lsls	r1, r2
 80100f2:	000a      	movs	r2, r1
 80100f4:	4013      	ands	r3, r2
 80100f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d100      	bne.n	8010100 <HAL_GPIO_Init+0x30>
 80100fe:	e146      	b.n	801038e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	2203      	movs	r2, #3
 8010106:	4013      	ands	r3, r2
 8010108:	2b01      	cmp	r3, #1
 801010a:	d005      	beq.n	8010118 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	2203      	movs	r2, #3
 8010112:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010114:	2b02      	cmp	r3, #2
 8010116:	d130      	bne.n	801017a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	689b      	ldr	r3, [r3, #8]
 801011c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	2203      	movs	r2, #3
 8010124:	409a      	lsls	r2, r3
 8010126:	0013      	movs	r3, r2
 8010128:	43da      	mvns	r2, r3
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	4013      	ands	r3, r2
 801012e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	68da      	ldr	r2, [r3, #12]
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	409a      	lsls	r2, r3
 801013a:	0013      	movs	r3, r2
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	4313      	orrs	r3, r2
 8010140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801014e:	2201      	movs	r2, #1
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	409a      	lsls	r2, r3
 8010154:	0013      	movs	r3, r2
 8010156:	43da      	mvns	r2, r3
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	4013      	ands	r3, r2
 801015c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	091b      	lsrs	r3, r3, #4
 8010164:	2201      	movs	r2, #1
 8010166:	401a      	ands	r2, r3
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	409a      	lsls	r2, r3
 801016c:	0013      	movs	r3, r2
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	4313      	orrs	r3, r2
 8010172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	693a      	ldr	r2, [r7, #16]
 8010178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	2203      	movs	r2, #3
 8010180:	4013      	ands	r3, r2
 8010182:	2b03      	cmp	r3, #3
 8010184:	d017      	beq.n	80101b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	2203      	movs	r2, #3
 8010192:	409a      	lsls	r2, r3
 8010194:	0013      	movs	r3, r2
 8010196:	43da      	mvns	r2, r3
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	4013      	ands	r3, r2
 801019c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	689a      	ldr	r2, [r3, #8]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	409a      	lsls	r2, r3
 80101a8:	0013      	movs	r3, r2
 80101aa:	693a      	ldr	r2, [r7, #16]
 80101ac:	4313      	orrs	r3, r2
 80101ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	693a      	ldr	r2, [r7, #16]
 80101b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	2203      	movs	r2, #3
 80101bc:	4013      	ands	r3, r2
 80101be:	2b02      	cmp	r3, #2
 80101c0:	d123      	bne.n	801020a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	08da      	lsrs	r2, r3, #3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	3208      	adds	r2, #8
 80101ca:	0092      	lsls	r2, r2, #2
 80101cc:	58d3      	ldr	r3, [r2, r3]
 80101ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2207      	movs	r2, #7
 80101d4:	4013      	ands	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	220f      	movs	r2, #15
 80101da:	409a      	lsls	r2, r3
 80101dc:	0013      	movs	r3, r2
 80101de:	43da      	mvns	r2, r3
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	4013      	ands	r3, r2
 80101e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	691a      	ldr	r2, [r3, #16]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	2107      	movs	r1, #7
 80101ee:	400b      	ands	r3, r1
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	409a      	lsls	r2, r3
 80101f4:	0013      	movs	r3, r2
 80101f6:	693a      	ldr	r2, [r7, #16]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	08da      	lsrs	r2, r3, #3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3208      	adds	r2, #8
 8010204:	0092      	lsls	r2, r2, #2
 8010206:	6939      	ldr	r1, [r7, #16]
 8010208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	005b      	lsls	r3, r3, #1
 8010214:	2203      	movs	r2, #3
 8010216:	409a      	lsls	r2, r3
 8010218:	0013      	movs	r3, r2
 801021a:	43da      	mvns	r2, r3
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	4013      	ands	r3, r2
 8010220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	2203      	movs	r2, #3
 8010228:	401a      	ands	r2, r3
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	005b      	lsls	r3, r3, #1
 801022e:	409a      	lsls	r2, r3
 8010230:	0013      	movs	r3, r2
 8010232:	693a      	ldr	r2, [r7, #16]
 8010234:	4313      	orrs	r3, r2
 8010236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	693a      	ldr	r2, [r7, #16]
 801023c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	23c0      	movs	r3, #192	@ 0xc0
 8010244:	029b      	lsls	r3, r3, #10
 8010246:	4013      	ands	r3, r2
 8010248:	d100      	bne.n	801024c <HAL_GPIO_Init+0x17c>
 801024a:	e0a0      	b.n	801038e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801024c:	4b57      	ldr	r3, [pc, #348]	@ (80103ac <HAL_GPIO_Init+0x2dc>)
 801024e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010250:	4b56      	ldr	r3, [pc, #344]	@ (80103ac <HAL_GPIO_Init+0x2dc>)
 8010252:	2101      	movs	r1, #1
 8010254:	430a      	orrs	r2, r1
 8010256:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010258:	4a55      	ldr	r2, [pc, #340]	@ (80103b0 <HAL_GPIO_Init+0x2e0>)
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	089b      	lsrs	r3, r3, #2
 801025e:	3302      	adds	r3, #2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	589b      	ldr	r3, [r3, r2]
 8010264:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	2203      	movs	r2, #3
 801026a:	4013      	ands	r3, r2
 801026c:	009b      	lsls	r3, r3, #2
 801026e:	220f      	movs	r2, #15
 8010270:	409a      	lsls	r2, r3
 8010272:	0013      	movs	r3, r2
 8010274:	43da      	mvns	r2, r3
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	4013      	ands	r3, r2
 801027a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	23a0      	movs	r3, #160	@ 0xa0
 8010280:	05db      	lsls	r3, r3, #23
 8010282:	429a      	cmp	r2, r3
 8010284:	d01f      	beq.n	80102c6 <HAL_GPIO_Init+0x1f6>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a4a      	ldr	r2, [pc, #296]	@ (80103b4 <HAL_GPIO_Init+0x2e4>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d019      	beq.n	80102c2 <HAL_GPIO_Init+0x1f2>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a49      	ldr	r2, [pc, #292]	@ (80103b8 <HAL_GPIO_Init+0x2e8>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d013      	beq.n	80102be <HAL_GPIO_Init+0x1ee>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a48      	ldr	r2, [pc, #288]	@ (80103bc <HAL_GPIO_Init+0x2ec>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d00d      	beq.n	80102ba <HAL_GPIO_Init+0x1ea>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a47      	ldr	r2, [pc, #284]	@ (80103c0 <HAL_GPIO_Init+0x2f0>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d007      	beq.n	80102b6 <HAL_GPIO_Init+0x1e6>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a46      	ldr	r2, [pc, #280]	@ (80103c4 <HAL_GPIO_Init+0x2f4>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d101      	bne.n	80102b2 <HAL_GPIO_Init+0x1e2>
 80102ae:	2305      	movs	r3, #5
 80102b0:	e00a      	b.n	80102c8 <HAL_GPIO_Init+0x1f8>
 80102b2:	2306      	movs	r3, #6
 80102b4:	e008      	b.n	80102c8 <HAL_GPIO_Init+0x1f8>
 80102b6:	2304      	movs	r3, #4
 80102b8:	e006      	b.n	80102c8 <HAL_GPIO_Init+0x1f8>
 80102ba:	2303      	movs	r3, #3
 80102bc:	e004      	b.n	80102c8 <HAL_GPIO_Init+0x1f8>
 80102be:	2302      	movs	r3, #2
 80102c0:	e002      	b.n	80102c8 <HAL_GPIO_Init+0x1f8>
 80102c2:	2301      	movs	r3, #1
 80102c4:	e000      	b.n	80102c8 <HAL_GPIO_Init+0x1f8>
 80102c6:	2300      	movs	r3, #0
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	2103      	movs	r1, #3
 80102cc:	400a      	ands	r2, r1
 80102ce:	0092      	lsls	r2, r2, #2
 80102d0:	4093      	lsls	r3, r2
 80102d2:	693a      	ldr	r2, [r7, #16]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80102d8:	4935      	ldr	r1, [pc, #212]	@ (80103b0 <HAL_GPIO_Init+0x2e0>)
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	089b      	lsrs	r3, r3, #2
 80102de:	3302      	adds	r3, #2
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	693a      	ldr	r2, [r7, #16]
 80102e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80102e6:	4b38      	ldr	r3, [pc, #224]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	43da      	mvns	r2, r3
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	4013      	ands	r3, r2
 80102f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	2380      	movs	r3, #128	@ 0x80
 80102fc:	035b      	lsls	r3, r3, #13
 80102fe:	4013      	ands	r3, r2
 8010300:	d003      	beq.n	801030a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	4313      	orrs	r3, r2
 8010308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801030a:	4b2f      	ldr	r3, [pc, #188]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010310:	4b2d      	ldr	r3, [pc, #180]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	43da      	mvns	r2, r3
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	4013      	ands	r3, r2
 801031e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	685a      	ldr	r2, [r3, #4]
 8010324:	2380      	movs	r3, #128	@ 0x80
 8010326:	039b      	lsls	r3, r3, #14
 8010328:	4013      	ands	r3, r2
 801032a:	d003      	beq.n	8010334 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801032c:	693a      	ldr	r2, [r7, #16]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	4313      	orrs	r3, r2
 8010332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010334:	4b24      	ldr	r3, [pc, #144]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801033a:	4b23      	ldr	r3, [pc, #140]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	43da      	mvns	r2, r3
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	4013      	ands	r3, r2
 8010348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	685a      	ldr	r2, [r3, #4]
 801034e:	2380      	movs	r3, #128	@ 0x80
 8010350:	029b      	lsls	r3, r3, #10
 8010352:	4013      	ands	r3, r2
 8010354:	d003      	beq.n	801035e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010356:	693a      	ldr	r2, [r7, #16]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4313      	orrs	r3, r2
 801035c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801035e:	4b1a      	ldr	r3, [pc, #104]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010364:	4b18      	ldr	r3, [pc, #96]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	43da      	mvns	r2, r3
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	4013      	ands	r3, r2
 8010372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	2380      	movs	r3, #128	@ 0x80
 801037a:	025b      	lsls	r3, r3, #9
 801037c:	4013      	ands	r3, r2
 801037e:	d003      	beq.n	8010388 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	4313      	orrs	r3, r2
 8010386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010388:	4b0f      	ldr	r3, [pc, #60]	@ (80103c8 <HAL_GPIO_Init+0x2f8>)
 801038a:	693a      	ldr	r2, [r7, #16]
 801038c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	3301      	adds	r3, #1
 8010392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	40da      	lsrs	r2, r3
 801039c:	1e13      	subs	r3, r2, #0
 801039e:	d000      	beq.n	80103a2 <HAL_GPIO_Init+0x2d2>
 80103a0:	e6a2      	b.n	80100e8 <HAL_GPIO_Init+0x18>
  }
}
 80103a2:	46c0      	nop			@ (mov r8, r8)
 80103a4:	46c0      	nop			@ (mov r8, r8)
 80103a6:	46bd      	mov	sp, r7
 80103a8:	b006      	add	sp, #24
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	40021000 	.word	0x40021000
 80103b0:	40010000 	.word	0x40010000
 80103b4:	50000400 	.word	0x50000400
 80103b8:	50000800 	.word	0x50000800
 80103bc:	50000c00 	.word	0x50000c00
 80103c0:	50001000 	.word	0x50001000
 80103c4:	50001c00 	.word	0x50001c00
 80103c8:	40010400 	.word	0x40010400

080103cc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	000a      	movs	r2, r1
 80103d6:	1cbb      	adds	r3, r7, #2
 80103d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	1cba      	adds	r2, r7, #2
 80103e0:	8812      	ldrh	r2, [r2, #0]
 80103e2:	4013      	ands	r3, r2
 80103e4:	d004      	beq.n	80103f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80103e6:	230f      	movs	r3, #15
 80103e8:	18fb      	adds	r3, r7, r3
 80103ea:	2201      	movs	r2, #1
 80103ec:	701a      	strb	r2, [r3, #0]
 80103ee:	e003      	b.n	80103f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80103f0:	230f      	movs	r3, #15
 80103f2:	18fb      	adds	r3, r7, r3
 80103f4:	2200      	movs	r2, #0
 80103f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80103f8:	230f      	movs	r3, #15
 80103fa:	18fb      	adds	r3, r7, r3
 80103fc:	781b      	ldrb	r3, [r3, #0]
}
 80103fe:	0018      	movs	r0, r3
 8010400:	46bd      	mov	sp, r7
 8010402:	b004      	add	sp, #16
 8010404:	bd80      	pop	{r7, pc}

08010406 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b082      	sub	sp, #8
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	0008      	movs	r0, r1
 8010410:	0011      	movs	r1, r2
 8010412:	1cbb      	adds	r3, r7, #2
 8010414:	1c02      	adds	r2, r0, #0
 8010416:	801a      	strh	r2, [r3, #0]
 8010418:	1c7b      	adds	r3, r7, #1
 801041a:	1c0a      	adds	r2, r1, #0
 801041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801041e:	1c7b      	adds	r3, r7, #1
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d004      	beq.n	8010430 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010426:	1cbb      	adds	r3, r7, #2
 8010428:	881a      	ldrh	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801042e:	e003      	b.n	8010438 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8010430:	1cbb      	adds	r3, r7, #2
 8010432:	881a      	ldrh	r2, [r3, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010438:	46c0      	nop			@ (mov r8, r8)
 801043a:	46bd      	mov	sp, r7
 801043c:	b002      	add	sp, #8
 801043e:	bd80      	pop	{r7, pc}

08010440 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	0002      	movs	r2, r0
 8010448:	1dbb      	adds	r3, r7, #6
 801044a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801044c:	4b09      	ldr	r3, [pc, #36]	@ (8010474 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801044e:	695b      	ldr	r3, [r3, #20]
 8010450:	1dba      	adds	r2, r7, #6
 8010452:	8812      	ldrh	r2, [r2, #0]
 8010454:	4013      	ands	r3, r2
 8010456:	d008      	beq.n	801046a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010458:	4b06      	ldr	r3, [pc, #24]	@ (8010474 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801045a:	1dba      	adds	r2, r7, #6
 801045c:	8812      	ldrh	r2, [r2, #0]
 801045e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010460:	1dbb      	adds	r3, r7, #6
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	0018      	movs	r0, r3
 8010466:	f7f7 ff39 	bl	80082dc <HAL_GPIO_EXTI_Callback>
  }
}
 801046a:	46c0      	nop			@ (mov r8, r8)
 801046c:	46bd      	mov	sp, r7
 801046e:	b002      	add	sp, #8
 8010470:	bd80      	pop	{r7, pc}
 8010472:	46c0      	nop			@ (mov r8, r8)
 8010474:	40010400 	.word	0x40010400

08010478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d101      	bne.n	801048a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010486:	2301      	movs	r3, #1
 8010488:	e082      	b.n	8010590 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2241      	movs	r2, #65	@ 0x41
 801048e:	5c9b      	ldrb	r3, [r3, r2]
 8010490:	b2db      	uxtb	r3, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	d107      	bne.n	80104a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2240      	movs	r2, #64	@ 0x40
 801049a:	2100      	movs	r1, #0
 801049c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	0018      	movs	r0, r3
 80104a2:	f7f7 fa01 	bl	80078a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2241      	movs	r2, #65	@ 0x41
 80104aa:	2124      	movs	r1, #36	@ 0x24
 80104ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2101      	movs	r1, #1
 80104ba:	438a      	bics	r2, r1
 80104bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	685a      	ldr	r2, [r3, #4]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4934      	ldr	r1, [pc, #208]	@ (8010598 <HAL_I2C_Init+0x120>)
 80104c8:	400a      	ands	r2, r1
 80104ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	689a      	ldr	r2, [r3, #8]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4931      	ldr	r1, [pc, #196]	@ (801059c <HAL_I2C_Init+0x124>)
 80104d8:	400a      	ands	r2, r1
 80104da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d108      	bne.n	80104f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689a      	ldr	r2, [r3, #8]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2180      	movs	r1, #128	@ 0x80
 80104ee:	0209      	lsls	r1, r1, #8
 80104f0:	430a      	orrs	r2, r1
 80104f2:	609a      	str	r2, [r3, #8]
 80104f4:	e007      	b.n	8010506 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	689a      	ldr	r2, [r3, #8]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2184      	movs	r1, #132	@ 0x84
 8010500:	0209      	lsls	r1, r1, #8
 8010502:	430a      	orrs	r2, r1
 8010504:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	2b02      	cmp	r3, #2
 801050c:	d104      	bne.n	8010518 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2280      	movs	r2, #128	@ 0x80
 8010514:	0112      	lsls	r2, r2, #4
 8010516:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	685a      	ldr	r2, [r3, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	491f      	ldr	r1, [pc, #124]	@ (80105a0 <HAL_I2C_Init+0x128>)
 8010524:	430a      	orrs	r2, r1
 8010526:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68da      	ldr	r2, [r3, #12]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	491a      	ldr	r1, [pc, #104]	@ (801059c <HAL_I2C_Init+0x124>)
 8010534:	400a      	ands	r2, r1
 8010536:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	691a      	ldr	r2, [r3, #16]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	695b      	ldr	r3, [r3, #20]
 8010540:	431a      	orrs	r2, r3
 8010542:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	430a      	orrs	r2, r1
 8010550:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	69d9      	ldr	r1, [r3, #28]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a1a      	ldr	r2, [r3, #32]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	430a      	orrs	r2, r1
 8010560:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2101      	movs	r1, #1
 801056e:	430a      	orrs	r2, r1
 8010570:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2241      	movs	r2, #65	@ 0x41
 801057c:	2120      	movs	r1, #32
 801057e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2242      	movs	r2, #66	@ 0x42
 801058a:	2100      	movs	r1, #0
 801058c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	0018      	movs	r0, r3
 8010592:	46bd      	mov	sp, r7
 8010594:	b002      	add	sp, #8
 8010596:	bd80      	pop	{r7, pc}
 8010598:	f0ffffff 	.word	0xf0ffffff
 801059c:	ffff7fff 	.word	0xffff7fff
 80105a0:	02008000 	.word	0x02008000

080105a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b089      	sub	sp, #36	@ 0x24
 80105a8:	af02      	add	r7, sp, #8
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	0008      	movs	r0, r1
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	0019      	movs	r1, r3
 80105b2:	230a      	movs	r3, #10
 80105b4:	18fb      	adds	r3, r7, r3
 80105b6:	1c02      	adds	r2, r0, #0
 80105b8:	801a      	strh	r2, [r3, #0]
 80105ba:	2308      	movs	r3, #8
 80105bc:	18fb      	adds	r3, r7, r3
 80105be:	1c0a      	adds	r2, r1, #0
 80105c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2241      	movs	r2, #65	@ 0x41
 80105c6:	5c9b      	ldrb	r3, [r3, r2]
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b20      	cmp	r3, #32
 80105cc:	d000      	beq.n	80105d0 <HAL_I2C_Master_Transmit+0x2c>
 80105ce:	e0e7      	b.n	80107a0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2240      	movs	r2, #64	@ 0x40
 80105d4:	5c9b      	ldrb	r3, [r3, r2]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d101      	bne.n	80105de <HAL_I2C_Master_Transmit+0x3a>
 80105da:	2302      	movs	r3, #2
 80105dc:	e0e1      	b.n	80107a2 <HAL_I2C_Master_Transmit+0x1fe>
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2240      	movs	r2, #64	@ 0x40
 80105e2:	2101      	movs	r1, #1
 80105e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80105e6:	f7fe fc7d 	bl	800eee4 <HAL_GetTick>
 80105ea:	0003      	movs	r3, r0
 80105ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80105ee:	2380      	movs	r3, #128	@ 0x80
 80105f0:	0219      	lsls	r1, r3, #8
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	2319      	movs	r3, #25
 80105fa:	2201      	movs	r2, #1
 80105fc:	f001 ff98 	bl	8012530 <I2C_WaitOnFlagUntilTimeout>
 8010600:	1e03      	subs	r3, r0, #0
 8010602:	d001      	beq.n	8010608 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010604:	2301      	movs	r3, #1
 8010606:	e0cc      	b.n	80107a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2241      	movs	r2, #65	@ 0x41
 801060c:	2121      	movs	r1, #33	@ 0x21
 801060e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2242      	movs	r2, #66	@ 0x42
 8010614:	2110      	movs	r1, #16
 8010616:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2200      	movs	r2, #0
 801061c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2208      	movs	r2, #8
 8010628:	18ba      	adds	r2, r7, r2
 801062a:	8812      	ldrh	r2, [r2, #0]
 801062c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2200      	movs	r2, #0
 8010632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010638:	b29b      	uxth	r3, r3
 801063a:	2bff      	cmp	r3, #255	@ 0xff
 801063c:	d911      	bls.n	8010662 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	22ff      	movs	r2, #255	@ 0xff
 8010642:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010648:	b2da      	uxtb	r2, r3
 801064a:	2380      	movs	r3, #128	@ 0x80
 801064c:	045c      	lsls	r4, r3, #17
 801064e:	230a      	movs	r3, #10
 8010650:	18fb      	adds	r3, r7, r3
 8010652:	8819      	ldrh	r1, [r3, #0]
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	4b55      	ldr	r3, [pc, #340]	@ (80107ac <HAL_I2C_Master_Transmit+0x208>)
 8010658:	9300      	str	r3, [sp, #0]
 801065a:	0023      	movs	r3, r4
 801065c:	f002 f9ba 	bl	80129d4 <I2C_TransferConfig>
 8010660:	e075      	b.n	801074e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010666:	b29a      	uxth	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010670:	b2da      	uxtb	r2, r3
 8010672:	2380      	movs	r3, #128	@ 0x80
 8010674:	049c      	lsls	r4, r3, #18
 8010676:	230a      	movs	r3, #10
 8010678:	18fb      	adds	r3, r7, r3
 801067a:	8819      	ldrh	r1, [r3, #0]
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	4b4b      	ldr	r3, [pc, #300]	@ (80107ac <HAL_I2C_Master_Transmit+0x208>)
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	0023      	movs	r3, r4
 8010684:	f002 f9a6 	bl	80129d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010688:	e061      	b.n	801074e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801068a:	697a      	ldr	r2, [r7, #20]
 801068c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	0018      	movs	r0, r3
 8010692:	f001 ff9b 	bl	80125cc <I2C_WaitOnTXISFlagUntilTimeout>
 8010696:	1e03      	subs	r3, r0, #0
 8010698:	d001      	beq.n	801069e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	e081      	b.n	80107a2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106a2:	781a      	ldrb	r2, [r3, #0]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	3b01      	subs	r3, #1
 80106bc:	b29a      	uxth	r2, r3
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c6:	3b01      	subs	r3, #1
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d03a      	beq.n	801074e <HAL_I2C_Master_Transmit+0x1aa>
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d136      	bne.n	801074e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80106e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	0013      	movs	r3, r2
 80106ea:	2200      	movs	r2, #0
 80106ec:	2180      	movs	r1, #128	@ 0x80
 80106ee:	f001 ff1f 	bl	8012530 <I2C_WaitOnFlagUntilTimeout>
 80106f2:	1e03      	subs	r3, r0, #0
 80106f4:	d001      	beq.n	80106fa <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80106f6:	2301      	movs	r3, #1
 80106f8:	e053      	b.n	80107a2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106fe:	b29b      	uxth	r3, r3
 8010700:	2bff      	cmp	r3, #255	@ 0xff
 8010702:	d911      	bls.n	8010728 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	22ff      	movs	r2, #255	@ 0xff
 8010708:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801070e:	b2da      	uxtb	r2, r3
 8010710:	2380      	movs	r3, #128	@ 0x80
 8010712:	045c      	lsls	r4, r3, #17
 8010714:	230a      	movs	r3, #10
 8010716:	18fb      	adds	r3, r7, r3
 8010718:	8819      	ldrh	r1, [r3, #0]
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	2300      	movs	r3, #0
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	0023      	movs	r3, r4
 8010722:	f002 f957 	bl	80129d4 <I2C_TransferConfig>
 8010726:	e012      	b.n	801074e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801072c:	b29a      	uxth	r2, r3
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010736:	b2da      	uxtb	r2, r3
 8010738:	2380      	movs	r3, #128	@ 0x80
 801073a:	049c      	lsls	r4, r3, #18
 801073c:	230a      	movs	r3, #10
 801073e:	18fb      	adds	r3, r7, r3
 8010740:	8819      	ldrh	r1, [r3, #0]
 8010742:	68f8      	ldr	r0, [r7, #12]
 8010744:	2300      	movs	r3, #0
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	0023      	movs	r3, r4
 801074a:	f002 f943 	bl	80129d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010752:	b29b      	uxth	r3, r3
 8010754:	2b00      	cmp	r3, #0
 8010756:	d198      	bne.n	801068a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010758:	697a      	ldr	r2, [r7, #20]
 801075a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	0018      	movs	r0, r3
 8010760:	f001 ff7a 	bl	8012658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010764:	1e03      	subs	r3, r0, #0
 8010766:	d001      	beq.n	801076c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010768:	2301      	movs	r3, #1
 801076a:	e01a      	b.n	80107a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2220      	movs	r2, #32
 8010772:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	490c      	ldr	r1, [pc, #48]	@ (80107b0 <HAL_I2C_Master_Transmit+0x20c>)
 8010780:	400a      	ands	r2, r1
 8010782:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2241      	movs	r2, #65	@ 0x41
 8010788:	2120      	movs	r1, #32
 801078a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2242      	movs	r2, #66	@ 0x42
 8010790:	2100      	movs	r1, #0
 8010792:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2240      	movs	r2, #64	@ 0x40
 8010798:	2100      	movs	r1, #0
 801079a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	e000      	b.n	80107a2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80107a0:	2302      	movs	r3, #2
  }
}
 80107a2:	0018      	movs	r0, r3
 80107a4:	46bd      	mov	sp, r7
 80107a6:	b007      	add	sp, #28
 80107a8:	bd90      	pop	{r4, r7, pc}
 80107aa:	46c0      	nop			@ (mov r8, r8)
 80107ac:	80002000 	.word	0x80002000
 80107b0:	fe00e800 	.word	0xfe00e800

080107b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b089      	sub	sp, #36	@ 0x24
 80107b8:	af02      	add	r7, sp, #8
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	0008      	movs	r0, r1
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	0019      	movs	r1, r3
 80107c2:	230a      	movs	r3, #10
 80107c4:	18fb      	adds	r3, r7, r3
 80107c6:	1c02      	adds	r2, r0, #0
 80107c8:	801a      	strh	r2, [r3, #0]
 80107ca:	2308      	movs	r3, #8
 80107cc:	18fb      	adds	r3, r7, r3
 80107ce:	1c0a      	adds	r2, r1, #0
 80107d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2241      	movs	r2, #65	@ 0x41
 80107d6:	5c9b      	ldrb	r3, [r3, r2]
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b20      	cmp	r3, #32
 80107dc:	d000      	beq.n	80107e0 <HAL_I2C_Master_Receive+0x2c>
 80107de:	e0e8      	b.n	80109b2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2240      	movs	r2, #64	@ 0x40
 80107e4:	5c9b      	ldrb	r3, [r3, r2]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d101      	bne.n	80107ee <HAL_I2C_Master_Receive+0x3a>
 80107ea:	2302      	movs	r3, #2
 80107ec:	e0e2      	b.n	80109b4 <HAL_I2C_Master_Receive+0x200>
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2240      	movs	r2, #64	@ 0x40
 80107f2:	2101      	movs	r1, #1
 80107f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80107f6:	f7fe fb75 	bl	800eee4 <HAL_GetTick>
 80107fa:	0003      	movs	r3, r0
 80107fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80107fe:	2380      	movs	r3, #128	@ 0x80
 8010800:	0219      	lsls	r1, r3, #8
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	2319      	movs	r3, #25
 801080a:	2201      	movs	r2, #1
 801080c:	f001 fe90 	bl	8012530 <I2C_WaitOnFlagUntilTimeout>
 8010810:	1e03      	subs	r3, r0, #0
 8010812:	d001      	beq.n	8010818 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010814:	2301      	movs	r3, #1
 8010816:	e0cd      	b.n	80109b4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2241      	movs	r2, #65	@ 0x41
 801081c:	2122      	movs	r1, #34	@ 0x22
 801081e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2242      	movs	r2, #66	@ 0x42
 8010824:	2110      	movs	r1, #16
 8010826:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2200      	movs	r2, #0
 801082c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2208      	movs	r2, #8
 8010838:	18ba      	adds	r2, r7, r2
 801083a:	8812      	ldrh	r2, [r2, #0]
 801083c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2200      	movs	r2, #0
 8010842:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010848:	b29b      	uxth	r3, r3
 801084a:	2bff      	cmp	r3, #255	@ 0xff
 801084c:	d911      	bls.n	8010872 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	22ff      	movs	r2, #255	@ 0xff
 8010852:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010858:	b2da      	uxtb	r2, r3
 801085a:	2380      	movs	r3, #128	@ 0x80
 801085c:	045c      	lsls	r4, r3, #17
 801085e:	230a      	movs	r3, #10
 8010860:	18fb      	adds	r3, r7, r3
 8010862:	8819      	ldrh	r1, [r3, #0]
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	4b55      	ldr	r3, [pc, #340]	@ (80109bc <HAL_I2C_Master_Receive+0x208>)
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	0023      	movs	r3, r4
 801086c:	f002 f8b2 	bl	80129d4 <I2C_TransferConfig>
 8010870:	e076      	b.n	8010960 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010876:	b29a      	uxth	r2, r3
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010880:	b2da      	uxtb	r2, r3
 8010882:	2380      	movs	r3, #128	@ 0x80
 8010884:	049c      	lsls	r4, r3, #18
 8010886:	230a      	movs	r3, #10
 8010888:	18fb      	adds	r3, r7, r3
 801088a:	8819      	ldrh	r1, [r3, #0]
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	4b4b      	ldr	r3, [pc, #300]	@ (80109bc <HAL_I2C_Master_Receive+0x208>)
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	0023      	movs	r3, r4
 8010894:	f002 f89e 	bl	80129d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010898:	e062      	b.n	8010960 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	0018      	movs	r0, r3
 80108a2:	f001 ff1d 	bl	80126e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80108a6:	1e03      	subs	r3, r0, #0
 80108a8:	d001      	beq.n	80108ae <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80108aa:	2301      	movs	r3, #1
 80108ac:	e082      	b.n	80109b4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108b8:	b2d2      	uxtb	r2, r2
 80108ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108ca:	3b01      	subs	r3, #1
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	3b01      	subs	r3, #1
 80108da:	b29a      	uxth	r2, r3
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d03a      	beq.n	8010960 <HAL_I2C_Master_Receive+0x1ac>
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d136      	bne.n	8010960 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80108f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	9300      	str	r3, [sp, #0]
 80108fa:	0013      	movs	r3, r2
 80108fc:	2200      	movs	r2, #0
 80108fe:	2180      	movs	r1, #128	@ 0x80
 8010900:	f001 fe16 	bl	8012530 <I2C_WaitOnFlagUntilTimeout>
 8010904:	1e03      	subs	r3, r0, #0
 8010906:	d001      	beq.n	801090c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010908:	2301      	movs	r3, #1
 801090a:	e053      	b.n	80109b4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010910:	b29b      	uxth	r3, r3
 8010912:	2bff      	cmp	r3, #255	@ 0xff
 8010914:	d911      	bls.n	801093a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	22ff      	movs	r2, #255	@ 0xff
 801091a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010920:	b2da      	uxtb	r2, r3
 8010922:	2380      	movs	r3, #128	@ 0x80
 8010924:	045c      	lsls	r4, r3, #17
 8010926:	230a      	movs	r3, #10
 8010928:	18fb      	adds	r3, r7, r3
 801092a:	8819      	ldrh	r1, [r3, #0]
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	2300      	movs	r3, #0
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	0023      	movs	r3, r4
 8010934:	f002 f84e 	bl	80129d4 <I2C_TransferConfig>
 8010938:	e012      	b.n	8010960 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801093e:	b29a      	uxth	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010948:	b2da      	uxtb	r2, r3
 801094a:	2380      	movs	r3, #128	@ 0x80
 801094c:	049c      	lsls	r4, r3, #18
 801094e:	230a      	movs	r3, #10
 8010950:	18fb      	adds	r3, r7, r3
 8010952:	8819      	ldrh	r1, [r3, #0]
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	2300      	movs	r3, #0
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	0023      	movs	r3, r4
 801095c:	f002 f83a 	bl	80129d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010964:	b29b      	uxth	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d197      	bne.n	801089a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801096a:	697a      	ldr	r2, [r7, #20]
 801096c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	0018      	movs	r0, r3
 8010972:	f001 fe71 	bl	8012658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010976:	1e03      	subs	r3, r0, #0
 8010978:	d001      	beq.n	801097e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	e01a      	b.n	80109b4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2220      	movs	r2, #32
 8010984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	685a      	ldr	r2, [r3, #4]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	490b      	ldr	r1, [pc, #44]	@ (80109c0 <HAL_I2C_Master_Receive+0x20c>)
 8010992:	400a      	ands	r2, r1
 8010994:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2241      	movs	r2, #65	@ 0x41
 801099a:	2120      	movs	r1, #32
 801099c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2242      	movs	r2, #66	@ 0x42
 80109a2:	2100      	movs	r1, #0
 80109a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2240      	movs	r2, #64	@ 0x40
 80109aa:	2100      	movs	r1, #0
 80109ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80109ae:	2300      	movs	r3, #0
 80109b0:	e000      	b.n	80109b4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80109b2:	2302      	movs	r3, #2
  }
}
 80109b4:	0018      	movs	r0, r3
 80109b6:	46bd      	mov	sp, r7
 80109b8:	b007      	add	sp, #28
 80109ba:	bd90      	pop	{r4, r7, pc}
 80109bc:	80002400 	.word	0x80002400
 80109c0:	fe00e800 	.word	0xfe00e800

080109c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80109c4:	b5b0      	push	{r4, r5, r7, lr}
 80109c6:	b088      	sub	sp, #32
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	0008      	movs	r0, r1
 80109ce:	607a      	str	r2, [r7, #4]
 80109d0:	0019      	movs	r1, r3
 80109d2:	230a      	movs	r3, #10
 80109d4:	18fb      	adds	r3, r7, r3
 80109d6:	1c02      	adds	r2, r0, #0
 80109d8:	801a      	strh	r2, [r3, #0]
 80109da:	2308      	movs	r3, #8
 80109dc:	18fb      	adds	r3, r7, r3
 80109de:	1c0a      	adds	r2, r1, #0
 80109e0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2241      	movs	r2, #65	@ 0x41
 80109e6:	5c9b      	ldrb	r3, [r3, r2]
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b20      	cmp	r3, #32
 80109ec:	d000      	beq.n	80109f0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80109ee:	e0dd      	b.n	8010bac <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	699a      	ldr	r2, [r3, #24]
 80109f6:	2380      	movs	r3, #128	@ 0x80
 80109f8:	021b      	lsls	r3, r3, #8
 80109fa:	401a      	ands	r2, r3
 80109fc:	2380      	movs	r3, #128	@ 0x80
 80109fe:	021b      	lsls	r3, r3, #8
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d101      	bne.n	8010a08 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010a04:	2302      	movs	r3, #2
 8010a06:	e0d2      	b.n	8010bae <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2240      	movs	r2, #64	@ 0x40
 8010a0c:	5c9b      	ldrb	r3, [r3, r2]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d101      	bne.n	8010a16 <HAL_I2C_Master_Transmit_DMA+0x52>
 8010a12:	2302      	movs	r3, #2
 8010a14:	e0cb      	b.n	8010bae <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2240      	movs	r2, #64	@ 0x40
 8010a1a:	2101      	movs	r1, #1
 8010a1c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2241      	movs	r2, #65	@ 0x41
 8010a22:	2121      	movs	r1, #33	@ 0x21
 8010a24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2242      	movs	r2, #66	@ 0x42
 8010a2a:	2110      	movs	r1, #16
 8010a2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2200      	movs	r2, #0
 8010a32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2208      	movs	r2, #8
 8010a3e:	18ba      	adds	r2, r7, r2
 8010a40:	8812      	ldrh	r2, [r2, #0]
 8010a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	4a5c      	ldr	r2, [pc, #368]	@ (8010bb8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010a48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8010bbc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8010a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	2bff      	cmp	r3, #255	@ 0xff
 8010a58:	d906      	bls.n	8010a68 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	22ff      	movs	r2, #255	@ 0xff
 8010a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010a60:	2380      	movs	r3, #128	@ 0x80
 8010a62:	045b      	lsls	r3, r3, #17
 8010a64:	617b      	str	r3, [r7, #20]
 8010a66:	e007      	b.n	8010a78 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010a72:	2380      	movs	r3, #128	@ 0x80
 8010a74:	049b      	lsls	r3, r3, #18
 8010a76:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d100      	bne.n	8010a82 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010a80:	e078      	b.n	8010b74 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d023      	beq.n	8010ad2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a8e:	4a4c      	ldr	r2, [pc, #304]	@ (8010bc0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010a90:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a96:	4a4b      	ldr	r2, [pc, #300]	@ (8010bc4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010a98:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010aae:	6879      	ldr	r1, [r7, #4]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	3328      	adds	r3, #40	@ 0x28
 8010ab6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010abc:	2513      	movs	r5, #19
 8010abe:	197c      	adds	r4, r7, r5
 8010ac0:	f7fe ff62 	bl	800f988 <HAL_DMA_Start_IT>
 8010ac4:	0003      	movs	r3, r0
 8010ac6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010ac8:	197b      	adds	r3, r7, r5
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d13d      	bne.n	8010b4c <HAL_I2C_Master_Transmit_DMA+0x188>
 8010ad0:	e013      	b.n	8010afa <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2241      	movs	r2, #65	@ 0x41
 8010ad6:	2120      	movs	r1, #32
 8010ad8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2242      	movs	r2, #66	@ 0x42
 8010ade:	2100      	movs	r1, #0
 8010ae0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ae6:	2280      	movs	r2, #128	@ 0x80
 8010ae8:	431a      	orrs	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2240      	movs	r2, #64	@ 0x40
 8010af2:	2100      	movs	r1, #0
 8010af4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	e059      	b.n	8010bae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010afe:	b2da      	uxtb	r2, r3
 8010b00:	697c      	ldr	r4, [r7, #20]
 8010b02:	230a      	movs	r3, #10
 8010b04:	18fb      	adds	r3, r7, r3
 8010b06:	8819      	ldrh	r1, [r3, #0]
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8010bc8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	0023      	movs	r3, r4
 8010b10:	f001 ff60 	bl	80129d4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b1e:	1ad3      	subs	r3, r2, r3
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2240      	movs	r2, #64	@ 0x40
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2110      	movs	r1, #16
 8010b32:	0018      	movs	r0, r3
 8010b34:	f001 ff88 	bl	8012a48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2180      	movs	r1, #128	@ 0x80
 8010b44:	01c9      	lsls	r1, r1, #7
 8010b46:	430a      	orrs	r2, r1
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	e02d      	b.n	8010ba8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2241      	movs	r2, #65	@ 0x41
 8010b50:	2120      	movs	r1, #32
 8010b52:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2242      	movs	r2, #66	@ 0x42
 8010b58:	2100      	movs	r1, #0
 8010b5a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b60:	2210      	movs	r2, #16
 8010b62:	431a      	orrs	r2, r3
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2240      	movs	r2, #64	@ 0x40
 8010b6c:	2100      	movs	r1, #0
 8010b6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e01c      	b.n	8010bae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	4a15      	ldr	r2, [pc, #84]	@ (8010bcc <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010b78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	2380      	movs	r3, #128	@ 0x80
 8010b82:	049c      	lsls	r4, r3, #18
 8010b84:	230a      	movs	r3, #10
 8010b86:	18fb      	adds	r3, r7, r3
 8010b88:	8819      	ldrh	r1, [r3, #0]
 8010b8a:	68f8      	ldr	r0, [r7, #12]
 8010b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8010bc8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	0023      	movs	r3, r4
 8010b92:	f001 ff1f 	bl	80129d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2240      	movs	r2, #64	@ 0x40
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	0018      	movs	r0, r3
 8010ba4:	f001 ff50 	bl	8012a48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	e000      	b.n	8010bae <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010bac:	2302      	movs	r3, #2
  }
}
 8010bae:	0018      	movs	r0, r3
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	b006      	add	sp, #24
 8010bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010bb6:	46c0      	nop			@ (mov r8, r8)
 8010bb8:	ffff0000 	.word	0xffff0000
 8010bbc:	080113c9 	.word	0x080113c9
 8010bc0:	08012381 	.word	0x08012381
 8010bc4:	080124c1 	.word	0x080124c1
 8010bc8:	80002000 	.word	0x80002000
 8010bcc:	08010f75 	.word	0x08010f75

08010bd0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010bd0:	b5b0      	push	{r4, r5, r7, lr}
 8010bd2:	b088      	sub	sp, #32
 8010bd4:	af02      	add	r7, sp, #8
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	0008      	movs	r0, r1
 8010bda:	607a      	str	r2, [r7, #4]
 8010bdc:	0019      	movs	r1, r3
 8010bde:	230a      	movs	r3, #10
 8010be0:	18fb      	adds	r3, r7, r3
 8010be2:	1c02      	adds	r2, r0, #0
 8010be4:	801a      	strh	r2, [r3, #0]
 8010be6:	2308      	movs	r3, #8
 8010be8:	18fb      	adds	r3, r7, r3
 8010bea:	1c0a      	adds	r2, r1, #0
 8010bec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2241      	movs	r2, #65	@ 0x41
 8010bf2:	5c9b      	ldrb	r3, [r3, r2]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b20      	cmp	r3, #32
 8010bf8:	d000      	beq.n	8010bfc <HAL_I2C_Master_Receive_DMA+0x2c>
 8010bfa:	e0dd      	b.n	8010db8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	699a      	ldr	r2, [r3, #24]
 8010c02:	2380      	movs	r3, #128	@ 0x80
 8010c04:	021b      	lsls	r3, r3, #8
 8010c06:	401a      	ands	r2, r3
 8010c08:	2380      	movs	r3, #128	@ 0x80
 8010c0a:	021b      	lsls	r3, r3, #8
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d101      	bne.n	8010c14 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010c10:	2302      	movs	r3, #2
 8010c12:	e0d2      	b.n	8010dba <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2240      	movs	r2, #64	@ 0x40
 8010c18:	5c9b      	ldrb	r3, [r3, r2]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d101      	bne.n	8010c22 <HAL_I2C_Master_Receive_DMA+0x52>
 8010c1e:	2302      	movs	r3, #2
 8010c20:	e0cb      	b.n	8010dba <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2240      	movs	r2, #64	@ 0x40
 8010c26:	2101      	movs	r1, #1
 8010c28:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2241      	movs	r2, #65	@ 0x41
 8010c2e:	2122      	movs	r1, #34	@ 0x22
 8010c30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2242      	movs	r2, #66	@ 0x42
 8010c36:	2110      	movs	r1, #16
 8010c38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2208      	movs	r2, #8
 8010c4a:	18ba      	adds	r2, r7, r2
 8010c4c:	8812      	ldrh	r2, [r2, #0]
 8010c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	4a5c      	ldr	r2, [pc, #368]	@ (8010dc4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010c54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	4a5b      	ldr	r2, [pc, #364]	@ (8010dc8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	2bff      	cmp	r3, #255	@ 0xff
 8010c64:	d906      	bls.n	8010c74 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	22ff      	movs	r2, #255	@ 0xff
 8010c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010c6c:	2380      	movs	r3, #128	@ 0x80
 8010c6e:	045b      	lsls	r3, r3, #17
 8010c70:	617b      	str	r3, [r7, #20]
 8010c72:	e007      	b.n	8010c84 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010c7e:	2380      	movs	r3, #128	@ 0x80
 8010c80:	049b      	lsls	r3, r3, #18
 8010c82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d100      	bne.n	8010c8e <HAL_I2C_Master_Receive_DMA+0xbe>
 8010c8c:	e078      	b.n	8010d80 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d023      	beq.n	8010cde <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8010dcc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ca2:	4a4b      	ldr	r2, [pc, #300]	@ (8010dd0 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010ca4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010caa:	2200      	movs	r2, #0
 8010cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	3324      	adds	r3, #36	@ 0x24
 8010cc0:	0019      	movs	r1, r3
 8010cc2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010cc8:	2513      	movs	r5, #19
 8010cca:	197c      	adds	r4, r7, r5
 8010ccc:	f7fe fe5c 	bl	800f988 <HAL_DMA_Start_IT>
 8010cd0:	0003      	movs	r3, r0
 8010cd2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010cd4:	197b      	adds	r3, r7, r5
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d13d      	bne.n	8010d58 <HAL_I2C_Master_Receive_DMA+0x188>
 8010cdc:	e013      	b.n	8010d06 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2241      	movs	r2, #65	@ 0x41
 8010ce2:	2120      	movs	r1, #32
 8010ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2242      	movs	r2, #66	@ 0x42
 8010cea:	2100      	movs	r1, #0
 8010cec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cf2:	2280      	movs	r2, #128	@ 0x80
 8010cf4:	431a      	orrs	r2, r3
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2240      	movs	r2, #64	@ 0x40
 8010cfe:	2100      	movs	r1, #0
 8010d00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e059      	b.n	8010dba <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	697c      	ldr	r4, [r7, #20]
 8010d0e:	230a      	movs	r3, #10
 8010d10:	18fb      	adds	r3, r7, r3
 8010d12:	8819      	ldrh	r1, [r3, #0]
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	4b2f      	ldr	r3, [pc, #188]	@ (8010dd4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	0023      	movs	r3, r4
 8010d1c:	f001 fe5a 	bl	80129d4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2240      	movs	r2, #64	@ 0x40
 8010d36:	2100      	movs	r1, #0
 8010d38:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2110      	movs	r1, #16
 8010d3e:	0018      	movs	r0, r3
 8010d40:	f001 fe82 	bl	8012a48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2180      	movs	r1, #128	@ 0x80
 8010d50:	0209      	lsls	r1, r1, #8
 8010d52:	430a      	orrs	r2, r1
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	e02d      	b.n	8010db4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2241      	movs	r2, #65	@ 0x41
 8010d5c:	2120      	movs	r1, #32
 8010d5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2242      	movs	r2, #66	@ 0x42
 8010d64:	2100      	movs	r1, #0
 8010d66:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d6c:	2210      	movs	r2, #16
 8010d6e:	431a      	orrs	r2, r3
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2240      	movs	r2, #64	@ 0x40
 8010d78:	2100      	movs	r1, #0
 8010d7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e01c      	b.n	8010dba <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	4a15      	ldr	r2, [pc, #84]	@ (8010dd8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010d84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	2380      	movs	r3, #128	@ 0x80
 8010d8e:	049c      	lsls	r4, r3, #18
 8010d90:	230a      	movs	r3, #10
 8010d92:	18fb      	adds	r3, r7, r3
 8010d94:	8819      	ldrh	r1, [r3, #0]
 8010d96:	68f8      	ldr	r0, [r7, #12]
 8010d98:	4b0e      	ldr	r3, [pc, #56]	@ (8010dd4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010d9a:	9300      	str	r3, [sp, #0]
 8010d9c:	0023      	movs	r3, r4
 8010d9e:	f001 fe19 	bl	80129d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2240      	movs	r2, #64	@ 0x40
 8010da6:	2100      	movs	r1, #0
 8010da8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2101      	movs	r1, #1
 8010dae:	0018      	movs	r0, r3
 8010db0:	f001 fe4a 	bl	8012a48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	e000      	b.n	8010dba <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010db8:	2302      	movs	r3, #2
  }
}
 8010dba:	0018      	movs	r0, r3
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	b006      	add	sp, #24
 8010dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8010dc2:	46c0      	nop			@ (mov r8, r8)
 8010dc4:	ffff0000 	.word	0xffff0000
 8010dc8:	080113c9 	.word	0x080113c9
 8010dcc:	08012421 	.word	0x08012421
 8010dd0:	080124c1 	.word	0x080124c1
 8010dd4:	80002400 	.word	0x80002400
 8010dd8:	08010f75 	.word	0x08010f75

08010ddc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	699b      	ldr	r3, [r3, #24]
 8010dea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d005      	beq.n	8010e08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	68f9      	ldr	r1, [r7, #12]
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	4798      	blx	r3
  }
}
 8010e08:	46c0      	nop			@ (mov r8, r8)
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	b004      	add	sp, #16
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b086      	sub	sp, #24
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010e28:	697a      	ldr	r2, [r7, #20]
 8010e2a:	2380      	movs	r3, #128	@ 0x80
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	4013      	ands	r3, r2
 8010e30:	d00e      	beq.n	8010e50 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	2280      	movs	r2, #128	@ 0x80
 8010e36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010e38:	d00a      	beq.n	8010e50 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e3e:	2201      	movs	r2, #1
 8010e40:	431a      	orrs	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2280      	movs	r2, #128	@ 0x80
 8010e4c:	0052      	lsls	r2, r2, #1
 8010e4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010e50:	697a      	ldr	r2, [r7, #20]
 8010e52:	2380      	movs	r3, #128	@ 0x80
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	4013      	ands	r3, r2
 8010e58:	d00e      	beq.n	8010e78 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	2280      	movs	r2, #128	@ 0x80
 8010e5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010e60:	d00a      	beq.n	8010e78 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e66:	2208      	movs	r2, #8
 8010e68:	431a      	orrs	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	2280      	movs	r2, #128	@ 0x80
 8010e74:	00d2      	lsls	r2, r2, #3
 8010e76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010e78:	697a      	ldr	r2, [r7, #20]
 8010e7a:	2380      	movs	r3, #128	@ 0x80
 8010e7c:	009b      	lsls	r3, r3, #2
 8010e7e:	4013      	ands	r3, r2
 8010e80:	d00e      	beq.n	8010ea0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2280      	movs	r2, #128	@ 0x80
 8010e86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010e88:	d00a      	beq.n	8010ea0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e8e:	2202      	movs	r2, #2
 8010e90:	431a      	orrs	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2280      	movs	r2, #128	@ 0x80
 8010e9c:	0092      	lsls	r2, r2, #2
 8010e9e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ea4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	220b      	movs	r2, #11
 8010eaa:	4013      	ands	r3, r2
 8010eac:	d005      	beq.n	8010eba <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010eae:	68fa      	ldr	r2, [r7, #12]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	0011      	movs	r1, r2
 8010eb4:	0018      	movs	r0, r3
 8010eb6:	f001 f915 	bl	80120e4 <I2C_ITError>
  }
}
 8010eba:	46c0      	nop			@ (mov r8, r8)
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	b006      	add	sp, #24
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b082      	sub	sp, #8
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010eca:	46c0      	nop			@ (mov r8, r8)
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	b002      	add	sp, #8
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010eda:	46c0      	nop			@ (mov r8, r8)
 8010edc:	46bd      	mov	sp, r7
 8010ede:	b002      	add	sp, #8
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b082      	sub	sp, #8
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010eea:	46c0      	nop			@ (mov r8, r8)
 8010eec:	46bd      	mov	sp, r7
 8010eee:	b002      	add	sp, #8
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010efa:	46c0      	nop			@ (mov r8, r8)
 8010efc:	46bd      	mov	sp, r7
 8010efe:	b002      	add	sp, #8
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b082      	sub	sp, #8
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	0008      	movs	r0, r1
 8010f0c:	0011      	movs	r1, r2
 8010f0e:	1cfb      	adds	r3, r7, #3
 8010f10:	1c02      	adds	r2, r0, #0
 8010f12:	701a      	strb	r2, [r3, #0]
 8010f14:	003b      	movs	r3, r7
 8010f16:	1c0a      	adds	r2, r1, #0
 8010f18:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010f1a:	46c0      	nop			@ (mov r8, r8)
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	b002      	add	sp, #8
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010f22:	b580      	push	{r7, lr}
 8010f24:	b082      	sub	sp, #8
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010f2a:	46c0      	nop			@ (mov r8, r8)
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	b002      	add	sp, #8
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b082      	sub	sp, #8
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010f3a:	46c0      	nop			@ (mov r8, r8)
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	b002      	add	sp, #8
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b082      	sub	sp, #8
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010f4a:	46c0      	nop			@ (mov r8, r8)
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	b002      	add	sp, #8
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b082      	sub	sp, #8
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010f5a:	46c0      	nop			@ (mov r8, r8)
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	b002      	add	sp, #8
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b082      	sub	sp, #8
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010f6a:	46c0      	nop			@ (mov r8, r8)
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	b002      	add	sp, #8
 8010f70:	bd80      	pop	{r7, pc}
	...

08010f74 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010f74:	b590      	push	{r4, r7, lr}
 8010f76:	b089      	sub	sp, #36	@ 0x24
 8010f78:	af02      	add	r7, sp, #8
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2240      	movs	r2, #64	@ 0x40
 8010f88:	5c9b      	ldrb	r3, [r3, r2]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d101      	bne.n	8010f92 <I2C_Master_ISR_IT+0x1e>
 8010f8e:	2302      	movs	r3, #2
 8010f90:	e113      	b.n	80111ba <I2C_Master_ISR_IT+0x246>
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2240      	movs	r2, #64	@ 0x40
 8010f96:	2101      	movs	r1, #1
 8010f98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	2210      	movs	r2, #16
 8010f9e:	4013      	ands	r3, r2
 8010fa0:	d012      	beq.n	8010fc8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2210      	movs	r2, #16
 8010fa6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010fa8:	d00e      	beq.n	8010fc8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2210      	movs	r2, #16
 8010fb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fb6:	2204      	movs	r2, #4
 8010fb8:	431a      	orrs	r2, r3
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	0018      	movs	r0, r3
 8010fc2:	f001 f9ba 	bl	801233a <I2C_Flush_TXDR>
 8010fc6:	e0e5      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2204      	movs	r2, #4
 8010fcc:	4013      	ands	r3, r2
 8010fce:	d021      	beq.n	8011014 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2204      	movs	r2, #4
 8010fd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010fd6:	d01d      	beq.n	8011014 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	2204      	movs	r2, #4
 8010fdc:	4393      	bics	r3, r2
 8010fde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fea:	b2d2      	uxtb	r2, r2
 8010fec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff2:	1c5a      	adds	r2, r3, #1
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011008:	b29b      	uxth	r3, r3
 801100a:	3b01      	subs	r3, #1
 801100c:	b29a      	uxth	r2, r3
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011012:	e0bf      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	2202      	movs	r2, #2
 8011018:	4013      	ands	r3, r2
 801101a:	d01c      	beq.n	8011056 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2202      	movs	r2, #2
 8011020:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011022:	d018      	beq.n	8011056 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011028:	781a      	ldrb	r2, [r3, #0]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011034:	1c5a      	adds	r2, r3, #1
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801103e:	3b01      	subs	r3, #1
 8011040:	b29a      	uxth	r2, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801104a:	b29b      	uxth	r3, r3
 801104c:	3b01      	subs	r3, #1
 801104e:	b29a      	uxth	r2, r3
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011054:	e09e      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	2280      	movs	r2, #128	@ 0x80
 801105a:	4013      	ands	r3, r2
 801105c:	d100      	bne.n	8011060 <I2C_Master_ISR_IT+0xec>
 801105e:	e069      	b.n	8011134 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2240      	movs	r2, #64	@ 0x40
 8011064:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8011066:	d065      	beq.n	8011134 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801106c:	b29b      	uxth	r3, r3
 801106e:	2b00      	cmp	r3, #0
 8011070:	d04a      	beq.n	8011108 <I2C_Master_ISR_IT+0x194>
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011076:	2b00      	cmp	r3, #0
 8011078:	d146      	bne.n	8011108 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	b29a      	uxth	r2, r3
 8011082:	2112      	movs	r1, #18
 8011084:	187b      	adds	r3, r7, r1
 8011086:	0592      	lsls	r2, r2, #22
 8011088:	0d92      	lsrs	r2, r2, #22
 801108a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011090:	b29b      	uxth	r3, r3
 8011092:	2bff      	cmp	r3, #255	@ 0xff
 8011094:	d910      	bls.n	80110b8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	22ff      	movs	r2, #255	@ 0xff
 801109a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	2380      	movs	r3, #128	@ 0x80
 80110a4:	045c      	lsls	r4, r3, #17
 80110a6:	187b      	adds	r3, r7, r1
 80110a8:	8819      	ldrh	r1, [r3, #0]
 80110aa:	68f8      	ldr	r0, [r7, #12]
 80110ac:	2300      	movs	r3, #0
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	0023      	movs	r3, r4
 80110b2:	f001 fc8f 	bl	80129d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110b6:	e03c      	b.n	8011132 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110bc:	b29a      	uxth	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c6:	4a3f      	ldr	r2, [pc, #252]	@ (80111c4 <I2C_Master_ISR_IT+0x250>)
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d00e      	beq.n	80110ea <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110d0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80110d6:	2312      	movs	r3, #18
 80110d8:	18fb      	adds	r3, r7, r3
 80110da:	8819      	ldrh	r1, [r3, #0]
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	2300      	movs	r3, #0
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	0023      	movs	r3, r4
 80110e4:	f001 fc76 	bl	80129d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110e8:	e023      	b.n	8011132 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110ee:	b2da      	uxtb	r2, r3
 80110f0:	2380      	movs	r3, #128	@ 0x80
 80110f2:	049c      	lsls	r4, r3, #18
 80110f4:	2312      	movs	r3, #18
 80110f6:	18fb      	adds	r3, r7, r3
 80110f8:	8819      	ldrh	r1, [r3, #0]
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	2300      	movs	r3, #0
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	0023      	movs	r3, r4
 8011102:	f001 fc67 	bl	80129d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011106:	e014      	b.n	8011132 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	685a      	ldr	r2, [r3, #4]
 801110e:	2380      	movs	r3, #128	@ 0x80
 8011110:	049b      	lsls	r3, r3, #18
 8011112:	401a      	ands	r2, r3
 8011114:	2380      	movs	r3, #128	@ 0x80
 8011116:	049b      	lsls	r3, r3, #18
 8011118:	429a      	cmp	r2, r3
 801111a:	d004      	beq.n	8011126 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	0018      	movs	r0, r3
 8011120:	f000 fcf4 	bl	8011b0c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011124:	e036      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2140      	movs	r1, #64	@ 0x40
 801112a:	0018      	movs	r0, r3
 801112c:	f000 ffda 	bl	80120e4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011130:	e030      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
 8011132:	e02f      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	2240      	movs	r2, #64	@ 0x40
 8011138:	4013      	ands	r3, r2
 801113a:	d02b      	beq.n	8011194 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2240      	movs	r2, #64	@ 0x40
 8011140:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011142:	d027      	beq.n	8011194 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011148:	b29b      	uxth	r3, r3
 801114a:	2b00      	cmp	r3, #0
 801114c:	d11d      	bne.n	801118a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	685a      	ldr	r2, [r3, #4]
 8011154:	2380      	movs	r3, #128	@ 0x80
 8011156:	049b      	lsls	r3, r3, #18
 8011158:	401a      	ands	r2, r3
 801115a:	2380      	movs	r3, #128	@ 0x80
 801115c:	049b      	lsls	r3, r3, #18
 801115e:	429a      	cmp	r2, r3
 8011160:	d018      	beq.n	8011194 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011166:	4a17      	ldr	r2, [pc, #92]	@ (80111c4 <I2C_Master_ISR_IT+0x250>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d109      	bne.n	8011180 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	685a      	ldr	r2, [r3, #4]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2180      	movs	r1, #128	@ 0x80
 8011178:	01c9      	lsls	r1, r1, #7
 801117a:	430a      	orrs	r2, r1
 801117c:	605a      	str	r2, [r3, #4]
 801117e:	e009      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	0018      	movs	r0, r3
 8011184:	f000 fcc2 	bl	8011b0c <I2C_ITMasterSeqCplt>
 8011188:	e004      	b.n	8011194 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2140      	movs	r1, #64	@ 0x40
 801118e:	0018      	movs	r0, r3
 8011190:	f000 ffa8 	bl	80120e4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	2220      	movs	r2, #32
 8011198:	4013      	ands	r3, r2
 801119a:	d009      	beq.n	80111b0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2220      	movs	r2, #32
 80111a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80111a2:	d005      	beq.n	80111b0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80111a4:	697a      	ldr	r2, [r7, #20]
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	0011      	movs	r1, r2
 80111aa:	0018      	movs	r0, r3
 80111ac:	f000 fd54 	bl	8011c58 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2240      	movs	r2, #64	@ 0x40
 80111b4:	2100      	movs	r1, #0
 80111b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111b8:	2300      	movs	r3, #0
}
 80111ba:	0018      	movs	r0, r3
 80111bc:	46bd      	mov	sp, r7
 80111be:	b007      	add	sp, #28
 80111c0:	bd90      	pop	{r4, r7, pc}
 80111c2:	46c0      	nop			@ (mov r8, r8)
 80111c4:	ffff0000 	.word	0xffff0000

080111c8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b086      	sub	sp, #24
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2240      	movs	r2, #64	@ 0x40
 80111e2:	5c9b      	ldrb	r3, [r3, r2]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d101      	bne.n	80111ec <I2C_Slave_ISR_IT+0x24>
 80111e8:	2302      	movs	r3, #2
 80111ea:	e0e6      	b.n	80113ba <I2C_Slave_ISR_IT+0x1f2>
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2240      	movs	r2, #64	@ 0x40
 80111f0:	2101      	movs	r1, #1
 80111f2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	2220      	movs	r2, #32
 80111f8:	4013      	ands	r3, r2
 80111fa:	d009      	beq.n	8011210 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2220      	movs	r2, #32
 8011200:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011202:	d005      	beq.n	8011210 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	0011      	movs	r1, r2
 801120a:	0018      	movs	r0, r3
 801120c:	f000 fdf2 	bl	8011df4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	2210      	movs	r2, #16
 8011214:	4013      	ands	r3, r2
 8011216:	d052      	beq.n	80112be <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2210      	movs	r2, #16
 801121c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801121e:	d04e      	beq.n	80112be <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011224:	b29b      	uxth	r3, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	d12d      	bne.n	8011286 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2241      	movs	r2, #65	@ 0x41
 801122e:	5c9b      	ldrb	r3, [r3, r2]
 8011230:	b2db      	uxtb	r3, r3
 8011232:	2b28      	cmp	r3, #40	@ 0x28
 8011234:	d10b      	bne.n	801124e <I2C_Slave_ISR_IT+0x86>
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	2380      	movs	r3, #128	@ 0x80
 801123a:	049b      	lsls	r3, r3, #18
 801123c:	429a      	cmp	r2, r3
 801123e:	d106      	bne.n	801124e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	0011      	movs	r1, r2
 8011246:	0018      	movs	r0, r3
 8011248:	f000 fef4 	bl	8012034 <I2C_ITListenCplt>
 801124c:	e036      	b.n	80112bc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2241      	movs	r2, #65	@ 0x41
 8011252:	5c9b      	ldrb	r3, [r3, r2]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	2b29      	cmp	r3, #41	@ 0x29
 8011258:	d110      	bne.n	801127c <I2C_Slave_ISR_IT+0xb4>
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	4a59      	ldr	r2, [pc, #356]	@ (80113c4 <I2C_Slave_ISR_IT+0x1fc>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d00c      	beq.n	801127c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2210      	movs	r2, #16
 8011268:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	0018      	movs	r0, r3
 801126e:	f001 f864 	bl	801233a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	0018      	movs	r0, r3
 8011276:	f000 fc8b 	bl	8011b90 <I2C_ITSlaveSeqCplt>
 801127a:	e01f      	b.n	80112bc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2210      	movs	r2, #16
 8011282:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011284:	e091      	b.n	80113aa <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2210      	movs	r2, #16
 801128c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011292:	2204      	movs	r2, #4
 8011294:	431a      	orrs	r2, r3
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d005      	beq.n	80112ac <I2C_Slave_ISR_IT+0xe4>
 80112a0:	697a      	ldr	r2, [r7, #20]
 80112a2:	2380      	movs	r3, #128	@ 0x80
 80112a4:	045b      	lsls	r3, r3, #17
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d000      	beq.n	80112ac <I2C_Slave_ISR_IT+0xe4>
 80112aa:	e07e      	b.n	80113aa <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	0011      	movs	r1, r2
 80112b4:	0018      	movs	r0, r3
 80112b6:	f000 ff15 	bl	80120e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80112ba:	e076      	b.n	80113aa <I2C_Slave_ISR_IT+0x1e2>
 80112bc:	e075      	b.n	80113aa <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	2204      	movs	r2, #4
 80112c2:	4013      	ands	r3, r2
 80112c4:	d02f      	beq.n	8011326 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2204      	movs	r2, #4
 80112ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80112cc:	d02b      	beq.n	8011326 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d018      	beq.n	801130a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e2:	b2d2      	uxtb	r2, r2
 80112e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ea:	1c5a      	adds	r2, r3, #1
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112f4:	3b01      	subs	r3, #1
 80112f6:	b29a      	uxth	r2, r3
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011300:	b29b      	uxth	r3, r3
 8011302:	3b01      	subs	r3, #1
 8011304:	b29a      	uxth	r2, r3
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801130e:	b29b      	uxth	r3, r3
 8011310:	2b00      	cmp	r3, #0
 8011312:	d14c      	bne.n	80113ae <I2C_Slave_ISR_IT+0x1e6>
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	4a2b      	ldr	r2, [pc, #172]	@ (80113c4 <I2C_Slave_ISR_IT+0x1fc>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d048      	beq.n	80113ae <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	0018      	movs	r0, r3
 8011320:	f000 fc36 	bl	8011b90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011324:	e043      	b.n	80113ae <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	2208      	movs	r2, #8
 801132a:	4013      	ands	r3, r2
 801132c:	d00a      	beq.n	8011344 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2208      	movs	r2, #8
 8011332:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011334:	d006      	beq.n	8011344 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011336:	693a      	ldr	r2, [r7, #16]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	0011      	movs	r1, r2
 801133c:	0018      	movs	r0, r3
 801133e:	f000 fb41 	bl	80119c4 <I2C_ITAddrCplt>
 8011342:	e035      	b.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	2202      	movs	r2, #2
 8011348:	4013      	ands	r3, r2
 801134a:	d031      	beq.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2202      	movs	r2, #2
 8011350:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011352:	d02d      	beq.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011358:	b29b      	uxth	r3, r3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d018      	beq.n	8011390 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011362:	781a      	ldrb	r2, [r3, #0]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011378:	b29b      	uxth	r3, r3
 801137a:	3b01      	subs	r3, #1
 801137c:	b29a      	uxth	r2, r3
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011386:	3b01      	subs	r3, #1
 8011388:	b29a      	uxth	r2, r3
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801138e:	e00f      	b.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011390:	697a      	ldr	r2, [r7, #20]
 8011392:	2380      	movs	r3, #128	@ 0x80
 8011394:	045b      	lsls	r3, r3, #17
 8011396:	429a      	cmp	r2, r3
 8011398:	d002      	beq.n	80113a0 <I2C_Slave_ISR_IT+0x1d8>
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d107      	bne.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	0018      	movs	r0, r3
 80113a4:	f000 fbf4 	bl	8011b90 <I2C_ITSlaveSeqCplt>
 80113a8:	e002      	b.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80113aa:	46c0      	nop			@ (mov r8, r8)
 80113ac:	e000      	b.n	80113b0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80113ae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2240      	movs	r2, #64	@ 0x40
 80113b4:	2100      	movs	r1, #0
 80113b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	0018      	movs	r0, r3
 80113bc:	46bd      	mov	sp, r7
 80113be:	b006      	add	sp, #24
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	46c0      	nop			@ (mov r8, r8)
 80113c4:	ffff0000 	.word	0xffff0000

080113c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80113c8:	b590      	push	{r4, r7, lr}
 80113ca:	b089      	sub	sp, #36	@ 0x24
 80113cc:	af02      	add	r7, sp, #8
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2240      	movs	r2, #64	@ 0x40
 80113d8:	5c9b      	ldrb	r3, [r3, r2]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d101      	bne.n	80113e2 <I2C_Master_ISR_DMA+0x1a>
 80113de:	2302      	movs	r3, #2
 80113e0:	e0e7      	b.n	80115b2 <I2C_Master_ISR_DMA+0x1ea>
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	2240      	movs	r2, #64	@ 0x40
 80113e6:	2101      	movs	r1, #1
 80113e8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2210      	movs	r2, #16
 80113ee:	4013      	ands	r3, r2
 80113f0:	d017      	beq.n	8011422 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2210      	movs	r2, #16
 80113f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113f8:	d013      	beq.n	8011422 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	2210      	movs	r2, #16
 8011400:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011406:	2204      	movs	r2, #4
 8011408:	431a      	orrs	r2, r3
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	2120      	movs	r1, #32
 8011412:	0018      	movs	r0, r3
 8011414:	f001 fb18 	bl	8012a48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	0018      	movs	r0, r3
 801141c:	f000 ff8d 	bl	801233a <I2C_Flush_TXDR>
 8011420:	e0c2      	b.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	2280      	movs	r2, #128	@ 0x80
 8011426:	4013      	ands	r3, r2
 8011428:	d100      	bne.n	801142c <I2C_Master_ISR_DMA+0x64>
 801142a:	e07c      	b.n	8011526 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2240      	movs	r2, #64	@ 0x40
 8011430:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011432:	d100      	bne.n	8011436 <I2C_Master_ISR_DMA+0x6e>
 8011434:	e077      	b.n	8011526 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2140      	movs	r1, #64	@ 0x40
 8011442:	438a      	bics	r2, r1
 8011444:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801144a:	b29b      	uxth	r3, r3
 801144c:	2b00      	cmp	r3, #0
 801144e:	d055      	beq.n	80114fc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	b29a      	uxth	r2, r3
 8011458:	2312      	movs	r3, #18
 801145a:	18fb      	adds	r3, r7, r3
 801145c:	0592      	lsls	r2, r2, #22
 801145e:	0d92      	lsrs	r2, r2, #22
 8011460:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011466:	b29b      	uxth	r3, r3
 8011468:	2bff      	cmp	r3, #255	@ 0xff
 801146a:	d906      	bls.n	801147a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	22ff      	movs	r2, #255	@ 0xff
 8011470:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8011472:	2380      	movs	r3, #128	@ 0x80
 8011474:	045b      	lsls	r3, r3, #17
 8011476:	617b      	str	r3, [r7, #20]
 8011478:	e010      	b.n	801149c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801147e:	b29a      	uxth	r2, r3
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011488:	4a4c      	ldr	r2, [pc, #304]	@ (80115bc <I2C_Master_ISR_DMA+0x1f4>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d003      	beq.n	8011496 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011492:	617b      	str	r3, [r7, #20]
 8011494:	e002      	b.n	801149c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011496:	2380      	movs	r3, #128	@ 0x80
 8011498:	049b      	lsls	r3, r3, #18
 801149a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	697c      	ldr	r4, [r7, #20]
 80114a4:	2312      	movs	r3, #18
 80114a6:	18fb      	adds	r3, r7, r3
 80114a8:	8819      	ldrh	r1, [r3, #0]
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	2300      	movs	r3, #0
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	0023      	movs	r3, r4
 80114b2:	f001 fa8f 	bl	80129d4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2241      	movs	r2, #65	@ 0x41
 80114cc:	5c9b      	ldrb	r3, [r3, r2]
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	2b22      	cmp	r3, #34	@ 0x22
 80114d2:	d109      	bne.n	80114e8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2180      	movs	r1, #128	@ 0x80
 80114e0:	0209      	lsls	r1, r1, #8
 80114e2:	430a      	orrs	r2, r1
 80114e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114e6:	e05f      	b.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2180      	movs	r1, #128	@ 0x80
 80114f4:	01c9      	lsls	r1, r1, #7
 80114f6:	430a      	orrs	r2, r1
 80114f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114fa:	e055      	b.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	2380      	movs	r3, #128	@ 0x80
 8011504:	049b      	lsls	r3, r3, #18
 8011506:	401a      	ands	r2, r3
 8011508:	2380      	movs	r3, #128	@ 0x80
 801150a:	049b      	lsls	r3, r3, #18
 801150c:	429a      	cmp	r2, r3
 801150e:	d004      	beq.n	801151a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	0018      	movs	r0, r3
 8011514:	f000 fafa 	bl	8011b0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011518:	e046      	b.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2140      	movs	r1, #64	@ 0x40
 801151e:	0018      	movs	r0, r3
 8011520:	f000 fde0 	bl	80120e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011524:	e040      	b.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	2240      	movs	r2, #64	@ 0x40
 801152a:	4013      	ands	r3, r2
 801152c:	d02c      	beq.n	8011588 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2240      	movs	r2, #64	@ 0x40
 8011532:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011534:	d028      	beq.n	8011588 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801153a:	b29b      	uxth	r3, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d11d      	bne.n	801157c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	2380      	movs	r3, #128	@ 0x80
 8011548:	049b      	lsls	r3, r3, #18
 801154a:	401a      	ands	r2, r3
 801154c:	2380      	movs	r3, #128	@ 0x80
 801154e:	049b      	lsls	r3, r3, #18
 8011550:	429a      	cmp	r2, r3
 8011552:	d028      	beq.n	80115a6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011558:	4a18      	ldr	r2, [pc, #96]	@ (80115bc <I2C_Master_ISR_DMA+0x1f4>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d109      	bne.n	8011572 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	685a      	ldr	r2, [r3, #4]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2180      	movs	r1, #128	@ 0x80
 801156a:	01c9      	lsls	r1, r1, #7
 801156c:	430a      	orrs	r2, r1
 801156e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011570:	e019      	b.n	80115a6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	0018      	movs	r0, r3
 8011576:	f000 fac9 	bl	8011b0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801157a:	e014      	b.n	80115a6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2140      	movs	r1, #64	@ 0x40
 8011580:	0018      	movs	r0, r3
 8011582:	f000 fdaf 	bl	80120e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011586:	e00e      	b.n	80115a6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	2220      	movs	r2, #32
 801158c:	4013      	ands	r3, r2
 801158e:	d00b      	beq.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2220      	movs	r2, #32
 8011594:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011596:	d007      	beq.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	0011      	movs	r1, r2
 801159e:	0018      	movs	r0, r3
 80115a0:	f000 fb5a 	bl	8011c58 <I2C_ITMasterCplt>
 80115a4:	e000      	b.n	80115a8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80115a6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2240      	movs	r2, #64	@ 0x40
 80115ac:	2100      	movs	r1, #0
 80115ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80115b0:	2300      	movs	r3, #0
}
 80115b2:	0018      	movs	r0, r3
 80115b4:	46bd      	mov	sp, r7
 80115b6:	b007      	add	sp, #28
 80115b8:	bd90      	pop	{r4, r7, pc}
 80115ba:	46c0      	nop			@ (mov r8, r8)
 80115bc:	ffff0000 	.word	0xffff0000

080115c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80115c0:	b590      	push	{r4, r7, lr}
 80115c2:	b089      	sub	sp, #36	@ 0x24
 80115c4:	af02      	add	r7, sp, #8
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80115cc:	4b88      	ldr	r3, [pc, #544]	@ (80117f0 <I2C_Mem_ISR_DMA+0x230>)
 80115ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2240      	movs	r2, #64	@ 0x40
 80115d4:	5c9b      	ldrb	r3, [r3, r2]
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	d101      	bne.n	80115de <I2C_Mem_ISR_DMA+0x1e>
 80115da:	2302      	movs	r3, #2
 80115dc:	e104      	b.n	80117e8 <I2C_Mem_ISR_DMA+0x228>
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2240      	movs	r2, #64	@ 0x40
 80115e2:	2101      	movs	r1, #1
 80115e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2210      	movs	r2, #16
 80115ea:	4013      	ands	r3, r2
 80115ec:	d017      	beq.n	801161e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2210      	movs	r2, #16
 80115f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115f4:	d013      	beq.n	801161e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2210      	movs	r2, #16
 80115fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011602:	2204      	movs	r2, #4
 8011604:	431a      	orrs	r2, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2120      	movs	r1, #32
 801160e:	0018      	movs	r0, r3
 8011610:	f001 fa1a 	bl	8012a48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	0018      	movs	r0, r3
 8011618:	f000 fe8f 	bl	801233a <I2C_Flush_TXDR>
 801161c:	e0df      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	2202      	movs	r2, #2
 8011622:	4013      	ands	r3, r2
 8011624:	d00d      	beq.n	8011642 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2202      	movs	r2, #2
 801162a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801162c:	d009      	beq.n	8011642 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	68fa      	ldr	r2, [r7, #12]
 8011634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011636:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2201      	movs	r2, #1
 801163c:	4252      	negs	r2, r2
 801163e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011640:	e0cd      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	2280      	movs	r2, #128	@ 0x80
 8011646:	4013      	ands	r3, r2
 8011648:	d05e      	beq.n	8011708 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2240      	movs	r2, #64	@ 0x40
 801164e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011650:	d05a      	beq.n	8011708 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2110      	movs	r1, #16
 8011656:	0018      	movs	r0, r3
 8011658:	f001 f9f6 	bl	8012a48 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011660:	b29b      	uxth	r3, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	d04a      	beq.n	80116fc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801166a:	b29b      	uxth	r3, r3
 801166c:	2bff      	cmp	r3, #255	@ 0xff
 801166e:	d910      	bls.n	8011692 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	22ff      	movs	r2, #255	@ 0xff
 8011674:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801167a:	b299      	uxth	r1, r3
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011680:	b2da      	uxtb	r2, r3
 8011682:	2380      	movs	r3, #128	@ 0x80
 8011684:	045b      	lsls	r3, r3, #17
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	2400      	movs	r4, #0
 801168a:	9400      	str	r4, [sp, #0]
 801168c:	f001 f9a2 	bl	80129d4 <I2C_TransferConfig>
 8011690:	e011      	b.n	80116b6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011696:	b29a      	uxth	r2, r3
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116a0:	b299      	uxth	r1, r3
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116a6:	b2da      	uxtb	r2, r3
 80116a8:	2380      	movs	r3, #128	@ 0x80
 80116aa:	049b      	lsls	r3, r3, #18
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	2400      	movs	r4, #0
 80116b0:	9400      	str	r4, [sp, #0]
 80116b2:	f001 f98f 	bl	80129d4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2241      	movs	r2, #65	@ 0x41
 80116cc:	5c9b      	ldrb	r3, [r3, r2]
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	2b22      	cmp	r3, #34	@ 0x22
 80116d2:	d109      	bne.n	80116e8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2180      	movs	r1, #128	@ 0x80
 80116e0:	0209      	lsls	r1, r1, #8
 80116e2:	430a      	orrs	r2, r1
 80116e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80116e6:	e07a      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2180      	movs	r1, #128	@ 0x80
 80116f4:	01c9      	lsls	r1, r1, #7
 80116f6:	430a      	orrs	r2, r1
 80116f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80116fa:	e070      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2140      	movs	r1, #64	@ 0x40
 8011700:	0018      	movs	r0, r3
 8011702:	f000 fcef 	bl	80120e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011706:	e06a      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	2240      	movs	r2, #64	@ 0x40
 801170c:	4013      	ands	r3, r2
 801170e:	d058      	beq.n	80117c2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2240      	movs	r2, #64	@ 0x40
 8011714:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011716:	d054      	beq.n	80117c2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2241      	movs	r2, #65	@ 0x41
 801171c:	5c9b      	ldrb	r3, [r3, r2]
 801171e:	b2db      	uxtb	r3, r3
 8011720:	2b22      	cmp	r3, #34	@ 0x22
 8011722:	d101      	bne.n	8011728 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011724:	4b33      	ldr	r3, [pc, #204]	@ (80117f4 <I2C_Mem_ISR_DMA+0x234>)
 8011726:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801172c:	b29b      	uxth	r3, r3
 801172e:	2bff      	cmp	r3, #255	@ 0xff
 8011730:	d911      	bls.n	8011756 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	22ff      	movs	r2, #255	@ 0xff
 8011736:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801173c:	b299      	uxth	r1, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011742:	b2da      	uxtb	r2, r3
 8011744:	2380      	movs	r3, #128	@ 0x80
 8011746:	045c      	lsls	r4, r3, #17
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	0023      	movs	r3, r4
 8011750:	f001 f940 	bl	80129d4 <I2C_TransferConfig>
 8011754:	e012      	b.n	801177c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801175a:	b29a      	uxth	r2, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011764:	b299      	uxth	r1, r3
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801176a:	b2da      	uxtb	r2, r3
 801176c:	2380      	movs	r3, #128	@ 0x80
 801176e:	049c      	lsls	r4, r3, #18
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	0023      	movs	r3, r4
 8011778:	f001 f92c 	bl	80129d4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011780:	b29a      	uxth	r2, r3
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	b29a      	uxth	r2, r3
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2241      	movs	r2, #65	@ 0x41
 8011792:	5c9b      	ldrb	r3, [r3, r2]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b22      	cmp	r3, #34	@ 0x22
 8011798:	d109      	bne.n	80117ae <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2180      	movs	r1, #128	@ 0x80
 80117a6:	0209      	lsls	r1, r1, #8
 80117a8:	430a      	orrs	r2, r1
 80117aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80117ac:	e017      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2180      	movs	r1, #128	@ 0x80
 80117ba:	01c9      	lsls	r1, r1, #7
 80117bc:	430a      	orrs	r2, r1
 80117be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80117c0:	e00d      	b.n	80117de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	2220      	movs	r2, #32
 80117c6:	4013      	ands	r3, r2
 80117c8:	d009      	beq.n	80117de <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2220      	movs	r2, #32
 80117ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117d0:	d005      	beq.n	80117de <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	0011      	movs	r1, r2
 80117d8:	0018      	movs	r0, r3
 80117da:	f000 fa3d 	bl	8011c58 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2240      	movs	r2, #64	@ 0x40
 80117e2:	2100      	movs	r1, #0
 80117e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	0018      	movs	r0, r3
 80117ea:	46bd      	mov	sp, r7
 80117ec:	b007      	add	sp, #28
 80117ee:	bd90      	pop	{r4, r7, pc}
 80117f0:	80002000 	.word	0x80002000
 80117f4:	80002400 	.word	0x80002400

080117f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b088      	sub	sp, #32
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011808:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801180a:	2300      	movs	r3, #0
 801180c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2240      	movs	r2, #64	@ 0x40
 8011812:	5c9b      	ldrb	r3, [r3, r2]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d101      	bne.n	801181c <I2C_Slave_ISR_DMA+0x24>
 8011818:	2302      	movs	r3, #2
 801181a:	e0cd      	b.n	80119b8 <I2C_Slave_ISR_DMA+0x1c0>
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2240      	movs	r2, #64	@ 0x40
 8011820:	2101      	movs	r1, #1
 8011822:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2220      	movs	r2, #32
 8011828:	4013      	ands	r3, r2
 801182a:	d009      	beq.n	8011840 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2220      	movs	r2, #32
 8011830:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011832:	d005      	beq.n	8011840 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011834:	68ba      	ldr	r2, [r7, #8]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	0011      	movs	r1, r2
 801183a:	0018      	movs	r0, r3
 801183c:	f000 fada 	bl	8011df4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	2210      	movs	r2, #16
 8011844:	4013      	ands	r3, r2
 8011846:	d100      	bne.n	801184a <I2C_Slave_ISR_DMA+0x52>
 8011848:	e0a3      	b.n	8011992 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2210      	movs	r2, #16
 801184e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011850:	d100      	bne.n	8011854 <I2C_Slave_ISR_DMA+0x5c>
 8011852:	e09e      	b.n	8011992 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	2380      	movs	r3, #128	@ 0x80
 8011858:	01db      	lsls	r3, r3, #7
 801185a:	4013      	ands	r3, r2
 801185c:	d105      	bne.n	801186a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	2380      	movs	r3, #128	@ 0x80
 8011862:	021b      	lsls	r3, r3, #8
 8011864:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011866:	d100      	bne.n	801186a <I2C_Slave_ISR_DMA+0x72>
 8011868:	e08c      	b.n	8011984 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d00c      	beq.n	801188c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	2380      	movs	r3, #128	@ 0x80
 8011876:	021b      	lsls	r3, r3, #8
 8011878:	4013      	ands	r3, r2
 801187a:	d007      	beq.n	801188c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d101      	bne.n	801188c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011888:	2301      	movs	r3, #1
 801188a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00c      	beq.n	80118ae <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	2380      	movs	r3, #128	@ 0x80
 8011898:	01db      	lsls	r3, r3, #7
 801189a:	4013      	ands	r3, r2
 801189c:	d007      	beq.n	80118ae <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d101      	bne.n	80118ae <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80118aa:	2301      	movs	r3, #1
 80118ac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d12d      	bne.n	8011910 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2241      	movs	r2, #65	@ 0x41
 80118b8:	5c9b      	ldrb	r3, [r3, r2]
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	2b28      	cmp	r3, #40	@ 0x28
 80118be:	d10b      	bne.n	80118d8 <I2C_Slave_ISR_DMA+0xe0>
 80118c0:	69ba      	ldr	r2, [r7, #24]
 80118c2:	2380      	movs	r3, #128	@ 0x80
 80118c4:	049b      	lsls	r3, r3, #18
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d106      	bne.n	80118d8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	0011      	movs	r1, r2
 80118d0:	0018      	movs	r0, r3
 80118d2:	f000 fbaf 	bl	8012034 <I2C_ITListenCplt>
 80118d6:	e054      	b.n	8011982 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2241      	movs	r2, #65	@ 0x41
 80118dc:	5c9b      	ldrb	r3, [r3, r2]
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b29      	cmp	r3, #41	@ 0x29
 80118e2:	d110      	bne.n	8011906 <I2C_Slave_ISR_DMA+0x10e>
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	4a36      	ldr	r2, [pc, #216]	@ (80119c0 <I2C_Slave_ISR_DMA+0x1c8>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d00c      	beq.n	8011906 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2210      	movs	r2, #16
 80118f2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	0018      	movs	r0, r3
 80118f8:	f000 fd1f 	bl	801233a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	0018      	movs	r0, r3
 8011900:	f000 f946 	bl	8011b90 <I2C_ITSlaveSeqCplt>
 8011904:	e03d      	b.n	8011982 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2210      	movs	r2, #16
 801190c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801190e:	e03e      	b.n	801198e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2210      	movs	r2, #16
 8011916:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801191c:	2204      	movs	r2, #4
 801191e:	431a      	orrs	r2, r3
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011924:	2317      	movs	r3, #23
 8011926:	18fb      	adds	r3, r7, r3
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	2141      	movs	r1, #65	@ 0x41
 801192c:	5c52      	ldrb	r2, [r2, r1]
 801192e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d004      	beq.n	8011940 <I2C_Slave_ISR_DMA+0x148>
 8011936:	69ba      	ldr	r2, [r7, #24]
 8011938:	2380      	movs	r3, #128	@ 0x80
 801193a:	045b      	lsls	r3, r3, #17
 801193c:	429a      	cmp	r2, r3
 801193e:	d126      	bne.n	801198e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011940:	2217      	movs	r2, #23
 8011942:	18bb      	adds	r3, r7, r2
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	2b21      	cmp	r3, #33	@ 0x21
 8011948:	d003      	beq.n	8011952 <I2C_Slave_ISR_DMA+0x15a>
 801194a:	18bb      	adds	r3, r7, r2
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b29      	cmp	r3, #41	@ 0x29
 8011950:	d103      	bne.n	801195a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2221      	movs	r2, #33	@ 0x21
 8011956:	631a      	str	r2, [r3, #48]	@ 0x30
 8011958:	e00b      	b.n	8011972 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801195a:	2217      	movs	r2, #23
 801195c:	18bb      	adds	r3, r7, r2
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	2b22      	cmp	r3, #34	@ 0x22
 8011962:	d003      	beq.n	801196c <I2C_Slave_ISR_DMA+0x174>
 8011964:	18bb      	adds	r3, r7, r2
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b2a      	cmp	r3, #42	@ 0x2a
 801196a:	d102      	bne.n	8011972 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2222      	movs	r2, #34	@ 0x22
 8011970:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	0011      	movs	r1, r2
 801197a:	0018      	movs	r0, r3
 801197c:	f000 fbb2 	bl	80120e4 <I2C_ITError>
      if (treatdmanack == 1U)
 8011980:	e005      	b.n	801198e <I2C_Slave_ISR_DMA+0x196>
 8011982:	e004      	b.n	801198e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2210      	movs	r2, #16
 801198a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801198c:	e00f      	b.n	80119ae <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801198e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011990:	e00d      	b.n	80119ae <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	2208      	movs	r2, #8
 8011996:	4013      	ands	r3, r2
 8011998:	d009      	beq.n	80119ae <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2208      	movs	r2, #8
 801199e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80119a0:	d005      	beq.n	80119ae <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	0011      	movs	r1, r2
 80119a8:	0018      	movs	r0, r3
 80119aa:	f000 f80b 	bl	80119c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2240      	movs	r2, #64	@ 0x40
 80119b2:	2100      	movs	r1, #0
 80119b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80119b6:	2300      	movs	r3, #0
}
 80119b8:	0018      	movs	r0, r3
 80119ba:	46bd      	mov	sp, r7
 80119bc:	b008      	add	sp, #32
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	ffff0000 	.word	0xffff0000

080119c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80119c4:	b5b0      	push	{r4, r5, r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2241      	movs	r2, #65	@ 0x41
 80119d2:	5c9b      	ldrb	r3, [r3, r2]
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	001a      	movs	r2, r3
 80119d8:	2328      	movs	r3, #40	@ 0x28
 80119da:	4013      	ands	r3, r2
 80119dc:	2b28      	cmp	r3, #40	@ 0x28
 80119de:	d000      	beq.n	80119e2 <I2C_ITAddrCplt+0x1e>
 80119e0:	e088      	b.n	8011af4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	699b      	ldr	r3, [r3, #24]
 80119e8:	0c1b      	lsrs	r3, r3, #16
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	250f      	movs	r5, #15
 80119ee:	197b      	adds	r3, r7, r5
 80119f0:	2101      	movs	r1, #1
 80119f2:	400a      	ands	r2, r1
 80119f4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	699b      	ldr	r3, [r3, #24]
 80119fc:	0c1b      	lsrs	r3, r3, #16
 80119fe:	b29a      	uxth	r2, r3
 8011a00:	200c      	movs	r0, #12
 8011a02:	183b      	adds	r3, r7, r0
 8011a04:	21fe      	movs	r1, #254	@ 0xfe
 8011a06:	400a      	ands	r2, r1
 8011a08:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	240a      	movs	r4, #10
 8011a14:	193b      	adds	r3, r7, r4
 8011a16:	0592      	lsls	r2, r2, #22
 8011a18:	0d92      	lsrs	r2, r2, #22
 8011a1a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	68db      	ldr	r3, [r3, #12]
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	2308      	movs	r3, #8
 8011a26:	18fb      	adds	r3, r7, r3
 8011a28:	21fe      	movs	r1, #254	@ 0xfe
 8011a2a:	400a      	ands	r2, r1
 8011a2c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d148      	bne.n	8011ac8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011a36:	0021      	movs	r1, r4
 8011a38:	187b      	adds	r3, r7, r1
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	09db      	lsrs	r3, r3, #7
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	183b      	adds	r3, r7, r0
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	4053      	eors	r3, r2
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	001a      	movs	r2, r3
 8011a4a:	2306      	movs	r3, #6
 8011a4c:	4013      	ands	r3, r2
 8011a4e:	d120      	bne.n	8011a92 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011a50:	183b      	adds	r3, r7, r0
 8011a52:	187a      	adds	r2, r7, r1
 8011a54:	8812      	ldrh	r2, [r2, #0]
 8011a56:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a5c:	1c5a      	adds	r2, r3, #1
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d14c      	bne.n	8011b04 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2208      	movs	r2, #8
 8011a76:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2240      	movs	r2, #64	@ 0x40
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a80:	183b      	adds	r3, r7, r0
 8011a82:	881a      	ldrh	r2, [r3, #0]
 8011a84:	197b      	adds	r3, r7, r5
 8011a86:	7819      	ldrb	r1, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	0018      	movs	r0, r3
 8011a8c:	f7ff fa39 	bl	8010f02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011a90:	e038      	b.n	8011b04 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011a92:	240c      	movs	r4, #12
 8011a94:	193b      	adds	r3, r7, r4
 8011a96:	2208      	movs	r2, #8
 8011a98:	18ba      	adds	r2, r7, r2
 8011a9a:	8812      	ldrh	r2, [r2, #0]
 8011a9c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a9e:	2380      	movs	r3, #128	@ 0x80
 8011aa0:	021a      	lsls	r2, r3, #8
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	0011      	movs	r1, r2
 8011aa6:	0018      	movs	r0, r3
 8011aa8:	f001 f85c 	bl	8012b64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2240      	movs	r2, #64	@ 0x40
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011ab4:	193b      	adds	r3, r7, r4
 8011ab6:	881a      	ldrh	r2, [r3, #0]
 8011ab8:	230f      	movs	r3, #15
 8011aba:	18fb      	adds	r3, r7, r3
 8011abc:	7819      	ldrb	r1, [r3, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	0018      	movs	r0, r3
 8011ac2:	f7ff fa1e 	bl	8010f02 <HAL_I2C_AddrCallback>
}
 8011ac6:	e01d      	b.n	8011b04 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011ac8:	2380      	movs	r3, #128	@ 0x80
 8011aca:	021a      	lsls	r2, r3, #8
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	0011      	movs	r1, r2
 8011ad0:	0018      	movs	r0, r3
 8011ad2:	f001 f847 	bl	8012b64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2240      	movs	r2, #64	@ 0x40
 8011ada:	2100      	movs	r1, #0
 8011adc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011ade:	230c      	movs	r3, #12
 8011ae0:	18fb      	adds	r3, r7, r3
 8011ae2:	881a      	ldrh	r2, [r3, #0]
 8011ae4:	230f      	movs	r3, #15
 8011ae6:	18fb      	adds	r3, r7, r3
 8011ae8:	7819      	ldrb	r1, [r3, #0]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	0018      	movs	r0, r3
 8011aee:	f7ff fa08 	bl	8010f02 <HAL_I2C_AddrCallback>
}
 8011af2:	e007      	b.n	8011b04 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2208      	movs	r2, #8
 8011afa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2240      	movs	r2, #64	@ 0x40
 8011b00:	2100      	movs	r1, #0
 8011b02:	5499      	strb	r1, [r3, r2]
}
 8011b04:	46c0      	nop			@ (mov r8, r8)
 8011b06:	46bd      	mov	sp, r7
 8011b08:	b004      	add	sp, #16
 8011b0a:	bdb0      	pop	{r4, r5, r7, pc}

08011b0c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2242      	movs	r2, #66	@ 0x42
 8011b18:	2100      	movs	r1, #0
 8011b1a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2241      	movs	r2, #65	@ 0x41
 8011b20:	5c9b      	ldrb	r3, [r3, r2]
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	2b21      	cmp	r3, #33	@ 0x21
 8011b26:	d117      	bne.n	8011b58 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2241      	movs	r2, #65	@ 0x41
 8011b2c:	2120      	movs	r1, #32
 8011b2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2211      	movs	r2, #17
 8011b34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2101      	movs	r1, #1
 8011b40:	0018      	movs	r0, r3
 8011b42:	f001 f80f 	bl	8012b64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2240      	movs	r2, #64	@ 0x40
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	0018      	movs	r0, r3
 8011b52:	f7ff f9b6 	bl	8010ec2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011b56:	e016      	b.n	8011b86 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2241      	movs	r2, #65	@ 0x41
 8011b5c:	2120      	movs	r1, #32
 8011b5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2212      	movs	r2, #18
 8011b64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2102      	movs	r1, #2
 8011b70:	0018      	movs	r0, r3
 8011b72:	f000 fff7 	bl	8012b64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2240      	movs	r2, #64	@ 0x40
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	0018      	movs	r0, r3
 8011b82:	f7ff f9a6 	bl	8010ed2 <HAL_I2C_MasterRxCpltCallback>
}
 8011b86:	46c0      	nop			@ (mov r8, r8)
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	b002      	add	sp, #8
 8011b8c:	bd80      	pop	{r7, pc}
	...

08011b90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2242      	movs	r2, #66	@ 0x42
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	2380      	movs	r3, #128	@ 0x80
 8011bac:	01db      	lsls	r3, r3, #7
 8011bae:	4013      	ands	r3, r2
 8011bb0:	d008      	beq.n	8011bc4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4924      	ldr	r1, [pc, #144]	@ (8011c50 <I2C_ITSlaveSeqCplt+0xc0>)
 8011bbe:	400a      	ands	r2, r1
 8011bc0:	601a      	str	r2, [r3, #0]
 8011bc2:	e00c      	b.n	8011bde <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	2380      	movs	r3, #128	@ 0x80
 8011bc8:	021b      	lsls	r3, r3, #8
 8011bca:	4013      	ands	r3, r2
 8011bcc:	d007      	beq.n	8011bde <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	491e      	ldr	r1, [pc, #120]	@ (8011c54 <I2C_ITSlaveSeqCplt+0xc4>)
 8011bda:	400a      	ands	r2, r1
 8011bdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2241      	movs	r2, #65	@ 0x41
 8011be2:	5c9b      	ldrb	r3, [r3, r2]
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b29      	cmp	r3, #41	@ 0x29
 8011be8:	d114      	bne.n	8011c14 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2241      	movs	r2, #65	@ 0x41
 8011bee:	2128      	movs	r1, #40	@ 0x28
 8011bf0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2221      	movs	r2, #33	@ 0x21
 8011bf6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2101      	movs	r1, #1
 8011bfc:	0018      	movs	r0, r3
 8011bfe:	f000 ffb1 	bl	8012b64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2240      	movs	r2, #64	@ 0x40
 8011c06:	2100      	movs	r1, #0
 8011c08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	0018      	movs	r0, r3
 8011c0e:	f7ff f968 	bl	8010ee2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011c12:	e019      	b.n	8011c48 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2241      	movs	r2, #65	@ 0x41
 8011c18:	5c9b      	ldrb	r3, [r3, r2]
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c1e:	d113      	bne.n	8011c48 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2241      	movs	r2, #65	@ 0x41
 8011c24:	2128      	movs	r1, #40	@ 0x28
 8011c26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2222      	movs	r2, #34	@ 0x22
 8011c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2102      	movs	r1, #2
 8011c32:	0018      	movs	r0, r3
 8011c34:	f000 ff96 	bl	8012b64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2240      	movs	r2, #64	@ 0x40
 8011c3c:	2100      	movs	r1, #0
 8011c3e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	0018      	movs	r0, r3
 8011c44:	f7ff f955 	bl	8010ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8011c48:	46c0      	nop			@ (mov r8, r8)
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	b004      	add	sp, #16
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	ffffbfff 	.word	0xffffbfff
 8011c54:	ffff7fff 	.word	0xffff7fff

08011c58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b086      	sub	sp, #24
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	2220      	movs	r2, #32
 8011c6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2241      	movs	r2, #65	@ 0x41
 8011c72:	5c9b      	ldrb	r3, [r3, r2]
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2b21      	cmp	r3, #33	@ 0x21
 8011c78:	d108      	bne.n	8011c8c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	0018      	movs	r0, r3
 8011c80:	f000 ff70 	bl	8012b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2211      	movs	r2, #17
 8011c88:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c8a:	e00d      	b.n	8011ca8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2241      	movs	r2, #65	@ 0x41
 8011c90:	5c9b      	ldrb	r3, [r3, r2]
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	2b22      	cmp	r3, #34	@ 0x22
 8011c96:	d107      	bne.n	8011ca8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2102      	movs	r1, #2
 8011c9c:	0018      	movs	r0, r3
 8011c9e:	f000 ff61 	bl	8012b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2212      	movs	r2, #18
 8011ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	685a      	ldr	r2, [r3, #4]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	494e      	ldr	r1, [pc, #312]	@ (8011dec <I2C_ITMasterCplt+0x194>)
 8011cb4:	400a      	ands	r2, r1
 8011cb6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8011df0 <I2C_ITMasterCplt+0x198>)
 8011cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	2210      	movs	r2, #16
 8011cc8:	4013      	ands	r3, r2
 8011cca:	d009      	beq.n	8011ce0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2210      	movs	r2, #16
 8011cd2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cd8:	2204      	movs	r2, #4
 8011cda:	431a      	orrs	r2, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2241      	movs	r2, #65	@ 0x41
 8011ce4:	5c9b      	ldrb	r3, [r3, r2]
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2b60      	cmp	r3, #96	@ 0x60
 8011cea:	d109      	bne.n	8011d00 <I2C_ITMasterCplt+0xa8>
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	2204      	movs	r2, #4
 8011cf0:	4013      	ands	r3, r2
 8011cf2:	d005      	beq.n	8011d00 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	0018      	movs	r0, r3
 8011d04:	f000 fb19 	bl	801233a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d0c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2241      	movs	r2, #65	@ 0x41
 8011d12:	5c9b      	ldrb	r3, [r3, r2]
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b60      	cmp	r3, #96	@ 0x60
 8011d18:	d002      	beq.n	8011d20 <I2C_ITMasterCplt+0xc8>
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d007      	beq.n	8011d30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	0011      	movs	r1, r2
 8011d28:	0018      	movs	r0, r3
 8011d2a:	f000 f9db 	bl	80120e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011d2e:	e058      	b.n	8011de2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2241      	movs	r2, #65	@ 0x41
 8011d34:	5c9b      	ldrb	r3, [r3, r2]
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	2b21      	cmp	r3, #33	@ 0x21
 8011d3a:	d126      	bne.n	8011d8a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2241      	movs	r2, #65	@ 0x41
 8011d40:	2120      	movs	r1, #32
 8011d42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2242      	movs	r2, #66	@ 0x42
 8011d4e:	5c9b      	ldrb	r3, [r3, r2]
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	2b40      	cmp	r3, #64	@ 0x40
 8011d54:	d10c      	bne.n	8011d70 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2242      	movs	r2, #66	@ 0x42
 8011d5a:	2100      	movs	r1, #0
 8011d5c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2240      	movs	r2, #64	@ 0x40
 8011d62:	2100      	movs	r1, #0
 8011d64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	0018      	movs	r0, r3
 8011d6a:	f7ff f8e2 	bl	8010f32 <HAL_I2C_MemTxCpltCallback>
}
 8011d6e:	e038      	b.n	8011de2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2242      	movs	r2, #66	@ 0x42
 8011d74:	2100      	movs	r1, #0
 8011d76:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2240      	movs	r2, #64	@ 0x40
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	0018      	movs	r0, r3
 8011d84:	f7ff f89d 	bl	8010ec2 <HAL_I2C_MasterTxCpltCallback>
}
 8011d88:	e02b      	b.n	8011de2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2241      	movs	r2, #65	@ 0x41
 8011d8e:	5c9b      	ldrb	r3, [r3, r2]
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b22      	cmp	r3, #34	@ 0x22
 8011d94:	d125      	bne.n	8011de2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2241      	movs	r2, #65	@ 0x41
 8011d9a:	2120      	movs	r1, #32
 8011d9c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2242      	movs	r2, #66	@ 0x42
 8011da8:	5c9b      	ldrb	r3, [r3, r2]
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	2b40      	cmp	r3, #64	@ 0x40
 8011dae:	d10c      	bne.n	8011dca <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2242      	movs	r2, #66	@ 0x42
 8011db4:	2100      	movs	r1, #0
 8011db6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2240      	movs	r2, #64	@ 0x40
 8011dbc:	2100      	movs	r1, #0
 8011dbe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	0018      	movs	r0, r3
 8011dc4:	f7ff f8bd 	bl	8010f42 <HAL_I2C_MemRxCpltCallback>
}
 8011dc8:	e00b      	b.n	8011de2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2242      	movs	r2, #66	@ 0x42
 8011dce:	2100      	movs	r1, #0
 8011dd0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2240      	movs	r2, #64	@ 0x40
 8011dd6:	2100      	movs	r1, #0
 8011dd8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	0018      	movs	r0, r3
 8011dde:	f7ff f878 	bl	8010ed2 <HAL_I2C_MasterRxCpltCallback>
}
 8011de2:	46c0      	nop			@ (mov r8, r8)
 8011de4:	46bd      	mov	sp, r7
 8011de6:	b006      	add	sp, #24
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	46c0      	nop			@ (mov r8, r8)
 8011dec:	fe00e800 	.word	0xfe00e800
 8011df0:	ffff0000 	.word	0xffff0000

08011df4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b086      	sub	sp, #24
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011e0a:	200f      	movs	r0, #15
 8011e0c:	183b      	adds	r3, r7, r0
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	2141      	movs	r1, #65	@ 0x41
 8011e12:	5c52      	ldrb	r2, [r2, r1]
 8011e14:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2220      	movs	r2, #32
 8011e1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011e1e:	183b      	adds	r3, r7, r0
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	2b21      	cmp	r3, #33	@ 0x21
 8011e24:	d003      	beq.n	8011e2e <I2C_ITSlaveCplt+0x3a>
 8011e26:	183b      	adds	r3, r7, r0
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b29      	cmp	r3, #41	@ 0x29
 8011e2c:	d109      	bne.n	8011e42 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011e2e:	4a7b      	ldr	r2, [pc, #492]	@ (801201c <I2C_ITSlaveCplt+0x228>)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	0011      	movs	r1, r2
 8011e34:	0018      	movs	r0, r3
 8011e36:	f000 fe95 	bl	8012b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2221      	movs	r2, #33	@ 0x21
 8011e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8011e40:	e011      	b.n	8011e66 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011e42:	220f      	movs	r2, #15
 8011e44:	18bb      	adds	r3, r7, r2
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b22      	cmp	r3, #34	@ 0x22
 8011e4a:	d003      	beq.n	8011e54 <I2C_ITSlaveCplt+0x60>
 8011e4c:	18bb      	adds	r3, r7, r2
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e52:	d108      	bne.n	8011e66 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011e54:	4a72      	ldr	r2, [pc, #456]	@ (8012020 <I2C_ITSlaveCplt+0x22c>)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	0011      	movs	r1, r2
 8011e5a:	0018      	movs	r0, r3
 8011e5c:	f000 fe82 	bl	8012b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2222      	movs	r2, #34	@ 0x22
 8011e64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	685a      	ldr	r2, [r3, #4]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2180      	movs	r1, #128	@ 0x80
 8011e72:	0209      	lsls	r1, r1, #8
 8011e74:	430a      	orrs	r2, r1
 8011e76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	685a      	ldr	r2, [r3, #4]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	4968      	ldr	r1, [pc, #416]	@ (8012024 <I2C_ITSlaveCplt+0x230>)
 8011e84:	400a      	ands	r2, r1
 8011e86:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	0018      	movs	r0, r3
 8011e8c:	f000 fa55 	bl	801233a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011e90:	693a      	ldr	r2, [r7, #16]
 8011e92:	2380      	movs	r3, #128	@ 0x80
 8011e94:	01db      	lsls	r3, r3, #7
 8011e96:	4013      	ands	r3, r2
 8011e98:	d013      	beq.n	8011ec2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	4960      	ldr	r1, [pc, #384]	@ (8012028 <I2C_ITSlaveCplt+0x234>)
 8011ea6:	400a      	ands	r2, r1
 8011ea8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d01f      	beq.n	8011ef2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011ec0:	e017      	b.n	8011ef2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011ec2:	693a      	ldr	r2, [r7, #16]
 8011ec4:	2380      	movs	r3, #128	@ 0x80
 8011ec6:	021b      	lsls	r3, r3, #8
 8011ec8:	4013      	ands	r3, r2
 8011eca:	d012      	beq.n	8011ef2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4955      	ldr	r1, [pc, #340]	@ (801202c <I2C_ITSlaveCplt+0x238>)
 8011ed8:	400a      	ands	r2, r1
 8011eda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d006      	beq.n	8011ef2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	2204      	movs	r2, #4
 8011ef6:	4013      	ands	r3, r2
 8011ef8:	d020      	beq.n	8011f3c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	2204      	movs	r2, #4
 8011efe:	4393      	bics	r3, r2
 8011f00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0c:	b2d2      	uxtb	r2, r2
 8011f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f14:	1c5a      	adds	r2, r3, #1
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00c      	beq.n	8011f3c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f26:	3b01      	subs	r3, #1
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	3b01      	subs	r3, #1
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d005      	beq.n	8011f52 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f4a:	2204      	movs	r2, #4
 8011f4c:	431a      	orrs	r2, r3
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2242      	movs	r2, #66	@ 0x42
 8011f56:	2100      	movs	r1, #0
 8011f58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d013      	beq.n	8011f90 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	0011      	movs	r1, r2
 8011f70:	0018      	movs	r0, r3
 8011f72:	f000 f8b7 	bl	80120e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2241      	movs	r2, #65	@ 0x41
 8011f7a:	5c9b      	ldrb	r3, [r3, r2]
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	2b28      	cmp	r3, #40	@ 0x28
 8011f80:	d147      	bne.n	8012012 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011f82:	697a      	ldr	r2, [r7, #20]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	0011      	movs	r1, r2
 8011f88:	0018      	movs	r0, r3
 8011f8a:	f000 f853 	bl	8012034 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011f8e:	e040      	b.n	8012012 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f94:	4a26      	ldr	r2, [pc, #152]	@ (8012030 <I2C_ITSlaveCplt+0x23c>)
 8011f96:	4293      	cmp	r3, r2
 8011f98:	d016      	beq.n	8011fc8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	0018      	movs	r0, r3
 8011f9e:	f7ff fdf7 	bl	8011b90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4a22      	ldr	r2, [pc, #136]	@ (8012030 <I2C_ITSlaveCplt+0x23c>)
 8011fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2241      	movs	r2, #65	@ 0x41
 8011fac:	2120      	movs	r1, #32
 8011fae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2240      	movs	r2, #64	@ 0x40
 8011fba:	2100      	movs	r1, #0
 8011fbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	0018      	movs	r0, r3
 8011fc2:	f7fe ffae 	bl	8010f22 <HAL_I2C_ListenCpltCallback>
}
 8011fc6:	e024      	b.n	8012012 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2241      	movs	r2, #65	@ 0x41
 8011fcc:	5c9b      	ldrb	r3, [r3, r2]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	2b22      	cmp	r3, #34	@ 0x22
 8011fd2:	d10f      	bne.n	8011ff4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2241      	movs	r2, #65	@ 0x41
 8011fd8:	2120      	movs	r1, #32
 8011fda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2240      	movs	r2, #64	@ 0x40
 8011fe6:	2100      	movs	r1, #0
 8011fe8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	0018      	movs	r0, r3
 8011fee:	f7fe ff80 	bl	8010ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8011ff2:	e00e      	b.n	8012012 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2241      	movs	r2, #65	@ 0x41
 8011ff8:	2120      	movs	r1, #32
 8011ffa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2200      	movs	r2, #0
 8012000:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2240      	movs	r2, #64	@ 0x40
 8012006:	2100      	movs	r1, #0
 8012008:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	0018      	movs	r0, r3
 801200e:	f7fe ff68 	bl	8010ee2 <HAL_I2C_SlaveTxCpltCallback>
}
 8012012:	46c0      	nop			@ (mov r8, r8)
 8012014:	46bd      	mov	sp, r7
 8012016:	b006      	add	sp, #24
 8012018:	bd80      	pop	{r7, pc}
 801201a:	46c0      	nop			@ (mov r8, r8)
 801201c:	00008001 	.word	0x00008001
 8012020:	00008002 	.word	0x00008002
 8012024:	fe00e800 	.word	0xfe00e800
 8012028:	ffffbfff 	.word	0xffffbfff
 801202c:	ffff7fff 	.word	0xffff7fff
 8012030:	ffff0000 	.word	0xffff0000

08012034 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4a26      	ldr	r2, [pc, #152]	@ (80120dc <I2C_ITListenCplt+0xa8>)
 8012042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2241      	movs	r2, #65	@ 0x41
 801204e:	2120      	movs	r1, #32
 8012050:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2242      	movs	r2, #66	@ 0x42
 8012056:	2100      	movs	r1, #0
 8012058:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	2204      	movs	r2, #4
 8012064:	4013      	ands	r3, r2
 8012066:	d022      	beq.n	80120ae <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012084:	2b00      	cmp	r3, #0
 8012086:	d012      	beq.n	80120ae <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801208c:	3b01      	subs	r3, #1
 801208e:	b29a      	uxth	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012098:	b29b      	uxth	r3, r3
 801209a:	3b01      	subs	r3, #1
 801209c:	b29a      	uxth	r2, r3
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120a6:	2204      	movs	r2, #4
 80120a8:	431a      	orrs	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80120ae:	4a0c      	ldr	r2, [pc, #48]	@ (80120e0 <I2C_ITListenCplt+0xac>)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	0011      	movs	r1, r2
 80120b4:	0018      	movs	r0, r3
 80120b6:	f000 fd55 	bl	8012b64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2210      	movs	r2, #16
 80120c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2240      	movs	r2, #64	@ 0x40
 80120c6:	2100      	movs	r1, #0
 80120c8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	0018      	movs	r0, r3
 80120ce:	f7fe ff28 	bl	8010f22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80120d2:	46c0      	nop			@ (mov r8, r8)
 80120d4:	46bd      	mov	sp, r7
 80120d6:	b002      	add	sp, #8
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	46c0      	nop			@ (mov r8, r8)
 80120dc:	ffff0000 	.word	0xffff0000
 80120e0:	00008003 	.word	0x00008003

080120e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80120ee:	200f      	movs	r0, #15
 80120f0:	183b      	adds	r3, r7, r0
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	2141      	movs	r1, #65	@ 0x41
 80120f6:	5c52      	ldrb	r2, [r2, r1]
 80120f8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2242      	movs	r2, #66	@ 0x42
 80120fe:	2100      	movs	r1, #0
 8012100:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4a72      	ldr	r2, [pc, #456]	@ (80122d0 <I2C_ITError+0x1ec>)
 8012106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2200      	movs	r2, #0
 801210c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	431a      	orrs	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801211a:	183b      	adds	r3, r7, r0
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	2b28      	cmp	r3, #40	@ 0x28
 8012120:	d007      	beq.n	8012132 <I2C_ITError+0x4e>
 8012122:	183b      	adds	r3, r7, r0
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	2b29      	cmp	r3, #41	@ 0x29
 8012128:	d003      	beq.n	8012132 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801212a:	183b      	adds	r3, r7, r0
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012130:	d10c      	bne.n	801214c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2103      	movs	r1, #3
 8012136:	0018      	movs	r0, r3
 8012138:	f000 fd14 	bl	8012b64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2241      	movs	r2, #65	@ 0x41
 8012140:	2128      	movs	r1, #40	@ 0x28
 8012142:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4a63      	ldr	r2, [pc, #396]	@ (80122d4 <I2C_ITError+0x1f0>)
 8012148:	635a      	str	r2, [r3, #52]	@ 0x34
 801214a:	e032      	b.n	80121b2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801214c:	4a62      	ldr	r2, [pc, #392]	@ (80122d8 <I2C_ITError+0x1f4>)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	0011      	movs	r1, r2
 8012152:	0018      	movs	r0, r3
 8012154:	f000 fd06 	bl	8012b64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	0018      	movs	r0, r3
 801215c:	f000 f8ed 	bl	801233a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2241      	movs	r2, #65	@ 0x41
 8012164:	5c9b      	ldrb	r3, [r3, r2]
 8012166:	b2db      	uxtb	r3, r3
 8012168:	2b60      	cmp	r3, #96	@ 0x60
 801216a:	d01f      	beq.n	80121ac <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2241      	movs	r2, #65	@ 0x41
 8012170:	2120      	movs	r1, #32
 8012172:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	699b      	ldr	r3, [r3, #24]
 801217a:	2220      	movs	r2, #32
 801217c:	4013      	ands	r3, r2
 801217e:	2b20      	cmp	r3, #32
 8012180:	d114      	bne.n	80121ac <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	699b      	ldr	r3, [r3, #24]
 8012188:	2210      	movs	r2, #16
 801218a:	4013      	ands	r3, r2
 801218c:	2b10      	cmp	r3, #16
 801218e:	d109      	bne.n	80121a4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2210      	movs	r2, #16
 8012196:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801219c:	2204      	movs	r2, #4
 801219e:	431a      	orrs	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2220      	movs	r2, #32
 80121aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d03b      	beq.n	8012238 <I2C_ITError+0x154>
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	2b11      	cmp	r3, #17
 80121c4:	d002      	beq.n	80121cc <I2C_ITError+0xe8>
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b21      	cmp	r3, #33	@ 0x21
 80121ca:	d135      	bne.n	8012238 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	2380      	movs	r3, #128	@ 0x80
 80121d4:	01db      	lsls	r3, r3, #7
 80121d6:	401a      	ands	r2, r3
 80121d8:	2380      	movs	r3, #128	@ 0x80
 80121da:	01db      	lsls	r3, r3, #7
 80121dc:	429a      	cmp	r2, r3
 80121de:	d107      	bne.n	80121f0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	493c      	ldr	r1, [pc, #240]	@ (80122dc <I2C_ITError+0x1f8>)
 80121ec:	400a      	ands	r2, r1
 80121ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121f4:	0018      	movs	r0, r3
 80121f6:	f7fd fd62 	bl	800fcbe <HAL_DMA_GetState>
 80121fa:	0003      	movs	r3, r0
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d016      	beq.n	801222e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012204:	4a36      	ldr	r2, [pc, #216]	@ (80122e0 <I2C_ITError+0x1fc>)
 8012206:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2240      	movs	r2, #64	@ 0x40
 801220c:	2100      	movs	r1, #0
 801220e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012214:	0018      	movs	r0, r3
 8012216:	f7fd fc5d 	bl	800fad4 <HAL_DMA_Abort_IT>
 801221a:	1e03      	subs	r3, r0, #0
 801221c:	d051      	beq.n	80122c2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012228:	0018      	movs	r0, r3
 801222a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801222c:	e049      	b.n	80122c2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	0018      	movs	r0, r3
 8012232:	f000 f859 	bl	80122e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012236:	e044      	b.n	80122c2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801223c:	2b00      	cmp	r3, #0
 801223e:	d03b      	beq.n	80122b8 <I2C_ITError+0x1d4>
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2b12      	cmp	r3, #18
 8012244:	d002      	beq.n	801224c <I2C_ITError+0x168>
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	2b22      	cmp	r3, #34	@ 0x22
 801224a:	d135      	bne.n	80122b8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	2380      	movs	r3, #128	@ 0x80
 8012254:	021b      	lsls	r3, r3, #8
 8012256:	401a      	ands	r2, r3
 8012258:	2380      	movs	r3, #128	@ 0x80
 801225a:	021b      	lsls	r3, r3, #8
 801225c:	429a      	cmp	r2, r3
 801225e:	d107      	bne.n	8012270 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	491e      	ldr	r1, [pc, #120]	@ (80122e4 <I2C_ITError+0x200>)
 801226c:	400a      	ands	r2, r1
 801226e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012274:	0018      	movs	r0, r3
 8012276:	f7fd fd22 	bl	800fcbe <HAL_DMA_GetState>
 801227a:	0003      	movs	r3, r0
 801227c:	2b01      	cmp	r3, #1
 801227e:	d016      	beq.n	80122ae <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012284:	4a16      	ldr	r2, [pc, #88]	@ (80122e0 <I2C_ITError+0x1fc>)
 8012286:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2240      	movs	r2, #64	@ 0x40
 801228c:	2100      	movs	r1, #0
 801228e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012294:	0018      	movs	r0, r3
 8012296:	f7fd fc1d 	bl	800fad4 <HAL_DMA_Abort_IT>
 801229a:	1e03      	subs	r3, r0, #0
 801229c:	d013      	beq.n	80122c6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122a8:	0018      	movs	r0, r3
 80122aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80122ac:	e00b      	b.n	80122c6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	0018      	movs	r0, r3
 80122b2:	f000 f819 	bl	80122e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80122b6:	e006      	b.n	80122c6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	0018      	movs	r0, r3
 80122bc:	f000 f814 	bl	80122e8 <I2C_TreatErrorCallback>
  }
}
 80122c0:	e002      	b.n	80122c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80122c2:	46c0      	nop			@ (mov r8, r8)
 80122c4:	e000      	b.n	80122c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80122c6:	46c0      	nop			@ (mov r8, r8)
}
 80122c8:	46c0      	nop			@ (mov r8, r8)
 80122ca:	46bd      	mov	sp, r7
 80122cc:	b004      	add	sp, #16
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	ffff0000 	.word	0xffff0000
 80122d4:	080111c9 	.word	0x080111c9
 80122d8:	00008003 	.word	0x00008003
 80122dc:	ffffbfff 	.word	0xffffbfff
 80122e0:	080124f3 	.word	0x080124f3
 80122e4:	ffff7fff 	.word	0xffff7fff

080122e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2241      	movs	r2, #65	@ 0x41
 80122f4:	5c9b      	ldrb	r3, [r3, r2]
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	2b60      	cmp	r3, #96	@ 0x60
 80122fa:	d10f      	bne.n	801231c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2241      	movs	r2, #65	@ 0x41
 8012300:	2120      	movs	r1, #32
 8012302:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2240      	movs	r2, #64	@ 0x40
 801230e:	2100      	movs	r1, #0
 8012310:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	0018      	movs	r0, r3
 8012316:	f7fe fe24 	bl	8010f62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801231a:	e00a      	b.n	8012332 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2240      	movs	r2, #64	@ 0x40
 8012326:	2100      	movs	r1, #0
 8012328:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	0018      	movs	r0, r3
 801232e:	f7fe fe10 	bl	8010f52 <HAL_I2C_ErrorCallback>
}
 8012332:	46c0      	nop			@ (mov r8, r8)
 8012334:	46bd      	mov	sp, r7
 8012336:	b002      	add	sp, #8
 8012338:	bd80      	pop	{r7, pc}

0801233a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b082      	sub	sp, #8
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	699b      	ldr	r3, [r3, #24]
 8012348:	2202      	movs	r2, #2
 801234a:	4013      	ands	r3, r2
 801234c:	2b02      	cmp	r3, #2
 801234e:	d103      	bne.n	8012358 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2200      	movs	r2, #0
 8012356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	2201      	movs	r2, #1
 8012360:	4013      	ands	r3, r2
 8012362:	2b01      	cmp	r3, #1
 8012364:	d007      	beq.n	8012376 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	699a      	ldr	r2, [r3, #24]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2101      	movs	r1, #1
 8012372:	430a      	orrs	r2, r1
 8012374:	619a      	str	r2, [r3, #24]
  }
}
 8012376:	46c0      	nop			@ (mov r8, r8)
 8012378:	46bd      	mov	sp, r7
 801237a:	b002      	add	sp, #8
 801237c:	bd80      	pop	{r7, pc}
	...

08012380 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801238c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4920      	ldr	r1, [pc, #128]	@ (801241c <I2C_DMAMasterTransmitCplt+0x9c>)
 801239a:	400a      	ands	r2, r1
 801239c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d105      	bne.n	80123b4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2120      	movs	r1, #32
 80123ac:	0018      	movs	r0, r3
 80123ae:	f000 fb4b 	bl	8012a48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80123b2:	e02e      	b.n	8012412 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80123bc:	189a      	adds	r2, r3, r2
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	2bff      	cmp	r3, #255	@ 0xff
 80123ca:	d903      	bls.n	80123d4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	22ff      	movs	r2, #255	@ 0xff
 80123d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80123d2:	e004      	b.n	80123de <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123d8:	b29a      	uxth	r2, r3
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123e6:	0019      	movs	r1, r3
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	3328      	adds	r3, #40	@ 0x28
 80123ee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80123f4:	f7fd fac8 	bl	800f988 <HAL_DMA_Start_IT>
 80123f8:	1e03      	subs	r3, r0, #0
 80123fa:	d005      	beq.n	8012408 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2110      	movs	r1, #16
 8012400:	0018      	movs	r0, r3
 8012402:	f7ff fe6f 	bl	80120e4 <I2C_ITError>
}
 8012406:	e004      	b.n	8012412 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2140      	movs	r1, #64	@ 0x40
 801240c:	0018      	movs	r0, r3
 801240e:	f000 fb1b 	bl	8012a48 <I2C_Enable_IRQ>
}
 8012412:	46c0      	nop			@ (mov r8, r8)
 8012414:	46bd      	mov	sp, r7
 8012416:	b004      	add	sp, #16
 8012418:	bd80      	pop	{r7, pc}
 801241a:	46c0      	nop			@ (mov r8, r8)
 801241c:	ffffbfff 	.word	0xffffbfff

08012420 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801242c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	4920      	ldr	r1, [pc, #128]	@ (80124bc <I2C_DMAMasterReceiveCplt+0x9c>)
 801243a:	400a      	ands	r2, r1
 801243c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012442:	b29b      	uxth	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d105      	bne.n	8012454 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2120      	movs	r1, #32
 801244c:	0018      	movs	r0, r3
 801244e:	f000 fafb 	bl	8012a48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012452:	e02e      	b.n	80124b2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012458:	68fa      	ldr	r2, [r7, #12]
 801245a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801245c:	189a      	adds	r2, r3, r2
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012466:	b29b      	uxth	r3, r3
 8012468:	2bff      	cmp	r3, #255	@ 0xff
 801246a:	d903      	bls.n	8012474 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	22ff      	movs	r2, #255	@ 0xff
 8012470:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012472:	e004      	b.n	801247e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012478:	b29a      	uxth	r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	3324      	adds	r3, #36	@ 0x24
 8012488:	0019      	movs	r1, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801248e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012494:	f7fd fa78 	bl	800f988 <HAL_DMA_Start_IT>
 8012498:	1e03      	subs	r3, r0, #0
 801249a:	d005      	beq.n	80124a8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2110      	movs	r1, #16
 80124a0:	0018      	movs	r0, r3
 80124a2:	f7ff fe1f 	bl	80120e4 <I2C_ITError>
}
 80124a6:	e004      	b.n	80124b2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2140      	movs	r1, #64	@ 0x40
 80124ac:	0018      	movs	r0, r3
 80124ae:	f000 facb 	bl	8012a48 <I2C_Enable_IRQ>
}
 80124b2:	46c0      	nop			@ (mov r8, r8)
 80124b4:	46bd      	mov	sp, r7
 80124b6:	b004      	add	sp, #16
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	46c0      	nop			@ (mov r8, r8)
 80124bc:	ffff7fff 	.word	0xffff7fff

080124c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124cc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	685a      	ldr	r2, [r3, #4]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2180      	movs	r1, #128	@ 0x80
 80124da:	0209      	lsls	r1, r1, #8
 80124dc:	430a      	orrs	r2, r1
 80124de:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2110      	movs	r1, #16
 80124e4:	0018      	movs	r0, r3
 80124e6:	f7ff fdfd 	bl	80120e4 <I2C_ITError>
}
 80124ea:	46c0      	nop			@ (mov r8, r8)
 80124ec:	46bd      	mov	sp, r7
 80124ee:	b004      	add	sp, #16
 80124f0:	bd80      	pop	{r7, pc}

080124f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80124f2:	b580      	push	{r7, lr}
 80124f4:	b084      	sub	sp, #16
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012504:	2b00      	cmp	r3, #0
 8012506:	d003      	beq.n	8012510 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801250c:	2200      	movs	r2, #0
 801250e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012514:	2b00      	cmp	r3, #0
 8012516:	d003      	beq.n	8012520 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801251c:	2200      	movs	r2, #0
 801251e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	0018      	movs	r0, r3
 8012524:	f7ff fee0 	bl	80122e8 <I2C_TreatErrorCallback>
}
 8012528:	46c0      	nop			@ (mov r8, r8)
 801252a:	46bd      	mov	sp, r7
 801252c:	b004      	add	sp, #16
 801252e:	bd80      	pop	{r7, pc}

08012530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	603b      	str	r3, [r7, #0]
 801253c:	1dfb      	adds	r3, r7, #7
 801253e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012540:	e030      	b.n	80125a4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	3301      	adds	r3, #1
 8012546:	d02d      	beq.n	80125a4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012548:	f7fc fccc 	bl	800eee4 <HAL_GetTick>
 801254c:	0002      	movs	r2, r0
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	1ad3      	subs	r3, r2, r3
 8012552:	683a      	ldr	r2, [r7, #0]
 8012554:	429a      	cmp	r2, r3
 8012556:	d302      	bcc.n	801255e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d122      	bne.n	80125a4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	699b      	ldr	r3, [r3, #24]
 8012564:	68ba      	ldr	r2, [r7, #8]
 8012566:	4013      	ands	r3, r2
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	1ad3      	subs	r3, r2, r3
 801256c:	425a      	negs	r2, r3
 801256e:	4153      	adcs	r3, r2
 8012570:	b2db      	uxtb	r3, r3
 8012572:	001a      	movs	r2, r3
 8012574:	1dfb      	adds	r3, r7, #7
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	429a      	cmp	r2, r3
 801257a:	d113      	bne.n	80125a4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012580:	2220      	movs	r2, #32
 8012582:	431a      	orrs	r2, r3
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2241      	movs	r2, #65	@ 0x41
 801258c:	2120      	movs	r1, #32
 801258e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2242      	movs	r2, #66	@ 0x42
 8012594:	2100      	movs	r1, #0
 8012596:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2240      	movs	r2, #64	@ 0x40
 801259c:	2100      	movs	r1, #0
 801259e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80125a0:	2301      	movs	r3, #1
 80125a2:	e00f      	b.n	80125c4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	699b      	ldr	r3, [r3, #24]
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	4013      	ands	r3, r2
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	1ad3      	subs	r3, r2, r3
 80125b2:	425a      	negs	r2, r3
 80125b4:	4153      	adcs	r3, r2
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	001a      	movs	r2, r3
 80125ba:	1dfb      	adds	r3, r7, #7
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d0bf      	beq.n	8012542 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80125c2:	2300      	movs	r3, #0
}
 80125c4:	0018      	movs	r0, r3
 80125c6:	46bd      	mov	sp, r7
 80125c8:	b004      	add	sp, #16
 80125ca:	bd80      	pop	{r7, pc}

080125cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80125d8:	e032      	b.n	8012640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	68b9      	ldr	r1, [r7, #8]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	0018      	movs	r0, r3
 80125e2:	f000 f8ff 	bl	80127e4 <I2C_IsErrorOccurred>
 80125e6:	1e03      	subs	r3, r0, #0
 80125e8:	d001      	beq.n	80125ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80125ea:	2301      	movs	r3, #1
 80125ec:	e030      	b.n	8012650 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	3301      	adds	r3, #1
 80125f2:	d025      	beq.n	8012640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125f4:	f7fc fc76 	bl	800eee4 <HAL_GetTick>
 80125f8:	0002      	movs	r2, r0
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	68ba      	ldr	r2, [r7, #8]
 8012600:	429a      	cmp	r2, r3
 8012602:	d302      	bcc.n	801260a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d11a      	bne.n	8012640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	2202      	movs	r2, #2
 8012612:	4013      	ands	r3, r2
 8012614:	2b02      	cmp	r3, #2
 8012616:	d013      	beq.n	8012640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801261c:	2220      	movs	r2, #32
 801261e:	431a      	orrs	r2, r3
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2241      	movs	r2, #65	@ 0x41
 8012628:	2120      	movs	r1, #32
 801262a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	2242      	movs	r2, #66	@ 0x42
 8012630:	2100      	movs	r1, #0
 8012632:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2240      	movs	r2, #64	@ 0x40
 8012638:	2100      	movs	r1, #0
 801263a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801263c:	2301      	movs	r3, #1
 801263e:	e007      	b.n	8012650 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	699b      	ldr	r3, [r3, #24]
 8012646:	2202      	movs	r2, #2
 8012648:	4013      	ands	r3, r2
 801264a:	2b02      	cmp	r3, #2
 801264c:	d1c5      	bne.n	80125da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801264e:	2300      	movs	r3, #0
}
 8012650:	0018      	movs	r0, r3
 8012652:	46bd      	mov	sp, r7
 8012654:	b004      	add	sp, #16
 8012656:	bd80      	pop	{r7, pc}

08012658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012664:	e02f      	b.n	80126c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	68b9      	ldr	r1, [r7, #8]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	0018      	movs	r0, r3
 801266e:	f000 f8b9 	bl	80127e4 <I2C_IsErrorOccurred>
 8012672:	1e03      	subs	r3, r0, #0
 8012674:	d001      	beq.n	801267a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012676:	2301      	movs	r3, #1
 8012678:	e02d      	b.n	80126d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801267a:	f7fc fc33 	bl	800eee4 <HAL_GetTick>
 801267e:	0002      	movs	r2, r0
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	68ba      	ldr	r2, [r7, #8]
 8012686:	429a      	cmp	r2, r3
 8012688:	d302      	bcc.n	8012690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d11a      	bne.n	80126c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	699b      	ldr	r3, [r3, #24]
 8012696:	2220      	movs	r2, #32
 8012698:	4013      	ands	r3, r2
 801269a:	2b20      	cmp	r3, #32
 801269c:	d013      	beq.n	80126c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126a2:	2220      	movs	r2, #32
 80126a4:	431a      	orrs	r2, r3
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2241      	movs	r2, #65	@ 0x41
 80126ae:	2120      	movs	r1, #32
 80126b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2242      	movs	r2, #66	@ 0x42
 80126b6:	2100      	movs	r1, #0
 80126b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	2240      	movs	r2, #64	@ 0x40
 80126be:	2100      	movs	r1, #0
 80126c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80126c2:	2301      	movs	r3, #1
 80126c4:	e007      	b.n	80126d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	699b      	ldr	r3, [r3, #24]
 80126cc:	2220      	movs	r2, #32
 80126ce:	4013      	ands	r3, r2
 80126d0:	2b20      	cmp	r3, #32
 80126d2:	d1c8      	bne.n	8012666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	0018      	movs	r0, r3
 80126d8:	46bd      	mov	sp, r7
 80126da:	b004      	add	sp, #16
 80126dc:	bd80      	pop	{r7, pc}
	...

080126e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80126ec:	e06b      	b.n	80127c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	68b9      	ldr	r1, [r7, #8]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	0018      	movs	r0, r3
 80126f6:	f000 f875 	bl	80127e4 <I2C_IsErrorOccurred>
 80126fa:	1e03      	subs	r3, r0, #0
 80126fc:	d001      	beq.n	8012702 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80126fe:	2301      	movs	r3, #1
 8012700:	e069      	b.n	80127d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	699b      	ldr	r3, [r3, #24]
 8012708:	2220      	movs	r2, #32
 801270a:	4013      	ands	r3, r2
 801270c:	2b20      	cmp	r3, #32
 801270e:	d138      	bne.n	8012782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	699b      	ldr	r3, [r3, #24]
 8012716:	2204      	movs	r2, #4
 8012718:	4013      	ands	r3, r2
 801271a:	2b04      	cmp	r3, #4
 801271c:	d105      	bne.n	801272a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012722:	2b00      	cmp	r3, #0
 8012724:	d001      	beq.n	801272a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012726:	2300      	movs	r3, #0
 8012728:	e055      	b.n	80127d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	699b      	ldr	r3, [r3, #24]
 8012730:	2210      	movs	r2, #16
 8012732:	4013      	ands	r3, r2
 8012734:	2b10      	cmp	r3, #16
 8012736:	d107      	bne.n	8012748 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2210      	movs	r2, #16
 801273e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2204      	movs	r2, #4
 8012744:	645a      	str	r2, [r3, #68]	@ 0x44
 8012746:	e002      	b.n	801274e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2200      	movs	r2, #0
 801274c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	2220      	movs	r2, #32
 8012754:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	685a      	ldr	r2, [r3, #4]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	491f      	ldr	r1, [pc, #124]	@ (80127e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8012762:	400a      	ands	r2, r1
 8012764:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2241      	movs	r2, #65	@ 0x41
 801276a:	2120      	movs	r1, #32
 801276c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2242      	movs	r2, #66	@ 0x42
 8012772:	2100      	movs	r1, #0
 8012774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2240      	movs	r2, #64	@ 0x40
 801277a:	2100      	movs	r1, #0
 801277c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801277e:	2301      	movs	r3, #1
 8012780:	e029      	b.n	80127d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012782:	f7fc fbaf 	bl	800eee4 <HAL_GetTick>
 8012786:	0002      	movs	r2, r0
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	1ad3      	subs	r3, r2, r3
 801278c:	68ba      	ldr	r2, [r7, #8]
 801278e:	429a      	cmp	r2, r3
 8012790:	d302      	bcc.n	8012798 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d116      	bne.n	80127c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	699b      	ldr	r3, [r3, #24]
 801279e:	2204      	movs	r2, #4
 80127a0:	4013      	ands	r3, r2
 80127a2:	2b04      	cmp	r3, #4
 80127a4:	d00f      	beq.n	80127c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127aa:	2220      	movs	r2, #32
 80127ac:	431a      	orrs	r2, r3
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2241      	movs	r2, #65	@ 0x41
 80127b6:	2120      	movs	r1, #32
 80127b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2240      	movs	r2, #64	@ 0x40
 80127be:	2100      	movs	r1, #0
 80127c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80127c2:	2301      	movs	r3, #1
 80127c4:	e007      	b.n	80127d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	699b      	ldr	r3, [r3, #24]
 80127cc:	2204      	movs	r2, #4
 80127ce:	4013      	ands	r3, r2
 80127d0:	2b04      	cmp	r3, #4
 80127d2:	d18c      	bne.n	80126ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80127d4:	2300      	movs	r3, #0
}
 80127d6:	0018      	movs	r0, r3
 80127d8:	46bd      	mov	sp, r7
 80127da:	b004      	add	sp, #16
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	46c0      	nop			@ (mov r8, r8)
 80127e0:	fe00e800 	.word	0xfe00e800

080127e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b08a      	sub	sp, #40	@ 0x28
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80127f0:	2327      	movs	r3, #39	@ 0x27
 80127f2:	18fb      	adds	r3, r7, r3
 80127f4:	2200      	movs	r2, #0
 80127f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	699b      	ldr	r3, [r3, #24]
 80127fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012800:	2300      	movs	r3, #0
 8012802:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	2210      	movs	r2, #16
 801280c:	4013      	ands	r3, r2
 801280e:	d100      	bne.n	8012812 <I2C_IsErrorOccurred+0x2e>
 8012810:	e079      	b.n	8012906 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2210      	movs	r2, #16
 8012818:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801281a:	e057      	b.n	80128cc <I2C_IsErrorOccurred+0xe8>
 801281c:	2227      	movs	r2, #39	@ 0x27
 801281e:	18bb      	adds	r3, r7, r2
 8012820:	18ba      	adds	r2, r7, r2
 8012822:	7812      	ldrb	r2, [r2, #0]
 8012824:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	3301      	adds	r3, #1
 801282a:	d04f      	beq.n	80128cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801282c:	f7fc fb5a 	bl	800eee4 <HAL_GetTick>
 8012830:	0002      	movs	r2, r0
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	68ba      	ldr	r2, [r7, #8]
 8012838:	429a      	cmp	r2, r3
 801283a:	d302      	bcc.n	8012842 <I2C_IsErrorOccurred+0x5e>
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d144      	bne.n	80128cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	685a      	ldr	r2, [r3, #4]
 8012848:	2380      	movs	r3, #128	@ 0x80
 801284a:	01db      	lsls	r3, r3, #7
 801284c:	4013      	ands	r3, r2
 801284e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012850:	2013      	movs	r0, #19
 8012852:	183b      	adds	r3, r7, r0
 8012854:	68fa      	ldr	r2, [r7, #12]
 8012856:	2142      	movs	r1, #66	@ 0x42
 8012858:	5c52      	ldrb	r2, [r2, r1]
 801285a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	699a      	ldr	r2, [r3, #24]
 8012862:	2380      	movs	r3, #128	@ 0x80
 8012864:	021b      	lsls	r3, r3, #8
 8012866:	401a      	ands	r2, r3
 8012868:	2380      	movs	r3, #128	@ 0x80
 801286a:	021b      	lsls	r3, r3, #8
 801286c:	429a      	cmp	r2, r3
 801286e:	d126      	bne.n	80128be <I2C_IsErrorOccurred+0xda>
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	2380      	movs	r3, #128	@ 0x80
 8012874:	01db      	lsls	r3, r3, #7
 8012876:	429a      	cmp	r2, r3
 8012878:	d021      	beq.n	80128be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 801287a:	183b      	adds	r3, r7, r0
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	2b20      	cmp	r3, #32
 8012880:	d01d      	beq.n	80128be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	685a      	ldr	r2, [r3, #4]
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2180      	movs	r1, #128	@ 0x80
 801288e:	01c9      	lsls	r1, r1, #7
 8012890:	430a      	orrs	r2, r1
 8012892:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012894:	f7fc fb26 	bl	800eee4 <HAL_GetTick>
 8012898:	0003      	movs	r3, r0
 801289a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801289c:	e00f      	b.n	80128be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801289e:	f7fc fb21 	bl	800eee4 <HAL_GetTick>
 80128a2:	0002      	movs	r2, r0
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	1ad3      	subs	r3, r2, r3
 80128a8:	2b19      	cmp	r3, #25
 80128aa:	d908      	bls.n	80128be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80128ac:	6a3b      	ldr	r3, [r7, #32]
 80128ae:	2220      	movs	r2, #32
 80128b0:	4313      	orrs	r3, r2
 80128b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80128b4:	2327      	movs	r3, #39	@ 0x27
 80128b6:	18fb      	adds	r3, r7, r3
 80128b8:	2201      	movs	r2, #1
 80128ba:	701a      	strb	r2, [r3, #0]

              break;
 80128bc:	e006      	b.n	80128cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	699b      	ldr	r3, [r3, #24]
 80128c4:	2220      	movs	r2, #32
 80128c6:	4013      	ands	r3, r2
 80128c8:	2b20      	cmp	r3, #32
 80128ca:	d1e8      	bne.n	801289e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	699b      	ldr	r3, [r3, #24]
 80128d2:	2220      	movs	r2, #32
 80128d4:	4013      	ands	r3, r2
 80128d6:	2b20      	cmp	r3, #32
 80128d8:	d004      	beq.n	80128e4 <I2C_IsErrorOccurred+0x100>
 80128da:	2327      	movs	r3, #39	@ 0x27
 80128dc:	18fb      	adds	r3, r7, r3
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d09b      	beq.n	801281c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80128e4:	2327      	movs	r3, #39	@ 0x27
 80128e6:	18fb      	adds	r3, r7, r3
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d103      	bne.n	80128f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2220      	movs	r2, #32
 80128f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80128f6:	6a3b      	ldr	r3, [r7, #32]
 80128f8:	2204      	movs	r2, #4
 80128fa:	4313      	orrs	r3, r2
 80128fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80128fe:	2327      	movs	r3, #39	@ 0x27
 8012900:	18fb      	adds	r3, r7, r3
 8012902:	2201      	movs	r2, #1
 8012904:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	699b      	ldr	r3, [r3, #24]
 801290c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801290e:	69ba      	ldr	r2, [r7, #24]
 8012910:	2380      	movs	r3, #128	@ 0x80
 8012912:	005b      	lsls	r3, r3, #1
 8012914:	4013      	ands	r3, r2
 8012916:	d00c      	beq.n	8012932 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012918:	6a3b      	ldr	r3, [r7, #32]
 801291a:	2201      	movs	r2, #1
 801291c:	4313      	orrs	r3, r2
 801291e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2280      	movs	r2, #128	@ 0x80
 8012926:	0052      	lsls	r2, r2, #1
 8012928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801292a:	2327      	movs	r3, #39	@ 0x27
 801292c:	18fb      	adds	r3, r7, r3
 801292e:	2201      	movs	r2, #1
 8012930:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012932:	69ba      	ldr	r2, [r7, #24]
 8012934:	2380      	movs	r3, #128	@ 0x80
 8012936:	00db      	lsls	r3, r3, #3
 8012938:	4013      	ands	r3, r2
 801293a:	d00c      	beq.n	8012956 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801293c:	6a3b      	ldr	r3, [r7, #32]
 801293e:	2208      	movs	r2, #8
 8012940:	4313      	orrs	r3, r2
 8012942:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2280      	movs	r2, #128	@ 0x80
 801294a:	00d2      	lsls	r2, r2, #3
 801294c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801294e:	2327      	movs	r3, #39	@ 0x27
 8012950:	18fb      	adds	r3, r7, r3
 8012952:	2201      	movs	r2, #1
 8012954:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012956:	69ba      	ldr	r2, [r7, #24]
 8012958:	2380      	movs	r3, #128	@ 0x80
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4013      	ands	r3, r2
 801295e:	d00c      	beq.n	801297a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012960:	6a3b      	ldr	r3, [r7, #32]
 8012962:	2202      	movs	r2, #2
 8012964:	4313      	orrs	r3, r2
 8012966:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2280      	movs	r2, #128	@ 0x80
 801296e:	0092      	lsls	r2, r2, #2
 8012970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012972:	2327      	movs	r3, #39	@ 0x27
 8012974:	18fb      	adds	r3, r7, r3
 8012976:	2201      	movs	r2, #1
 8012978:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 801297a:	2327      	movs	r3, #39	@ 0x27
 801297c:	18fb      	adds	r3, r7, r3
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d01d      	beq.n	80129c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	0018      	movs	r0, r3
 8012988:	f7ff fcd7 	bl	801233a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	685a      	ldr	r2, [r3, #4]
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	490e      	ldr	r1, [pc, #56]	@ (80129d0 <I2C_IsErrorOccurred+0x1ec>)
 8012998:	400a      	ands	r2, r1
 801299a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80129a0:	6a3b      	ldr	r3, [r7, #32]
 80129a2:	431a      	orrs	r2, r3
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2241      	movs	r2, #65	@ 0x41
 80129ac:	2120      	movs	r1, #32
 80129ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2242      	movs	r2, #66	@ 0x42
 80129b4:	2100      	movs	r1, #0
 80129b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2240      	movs	r2, #64	@ 0x40
 80129bc:	2100      	movs	r1, #0
 80129be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80129c0:	2327      	movs	r3, #39	@ 0x27
 80129c2:	18fb      	adds	r3, r7, r3
 80129c4:	781b      	ldrb	r3, [r3, #0]
}
 80129c6:	0018      	movs	r0, r3
 80129c8:	46bd      	mov	sp, r7
 80129ca:	b00a      	add	sp, #40	@ 0x28
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	46c0      	nop			@ (mov r8, r8)
 80129d0:	fe00e800 	.word	0xfe00e800

080129d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80129d4:	b590      	push	{r4, r7, lr}
 80129d6:	b087      	sub	sp, #28
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	0008      	movs	r0, r1
 80129de:	0011      	movs	r1, r2
 80129e0:	607b      	str	r3, [r7, #4]
 80129e2:	240a      	movs	r4, #10
 80129e4:	193b      	adds	r3, r7, r4
 80129e6:	1c02      	adds	r2, r0, #0
 80129e8:	801a      	strh	r2, [r3, #0]
 80129ea:	2009      	movs	r0, #9
 80129ec:	183b      	adds	r3, r7, r0
 80129ee:	1c0a      	adds	r2, r1, #0
 80129f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129f2:	193b      	adds	r3, r7, r4
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	059b      	lsls	r3, r3, #22
 80129f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129fa:	183b      	adds	r3, r7, r0
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	0419      	lsls	r1, r3, #16
 8012a00:	23ff      	movs	r3, #255	@ 0xff
 8012a02:	041b      	lsls	r3, r3, #16
 8012a04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012a06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	085b      	lsrs	r3, r3, #1
 8012a14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a1e:	0d51      	lsrs	r1, r2, #21
 8012a20:	2280      	movs	r2, #128	@ 0x80
 8012a22:	00d2      	lsls	r2, r2, #3
 8012a24:	400a      	ands	r2, r1
 8012a26:	4907      	ldr	r1, [pc, #28]	@ (8012a44 <I2C_TransferConfig+0x70>)
 8012a28:	430a      	orrs	r2, r1
 8012a2a:	43d2      	mvns	r2, r2
 8012a2c:	401a      	ands	r2, r3
 8012a2e:	0011      	movs	r1, r2
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	697a      	ldr	r2, [r7, #20]
 8012a36:	430a      	orrs	r2, r1
 8012a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012a3a:	46c0      	nop			@ (mov r8, r8)
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	b007      	add	sp, #28
 8012a40:	bd90      	pop	{r4, r7, pc}
 8012a42:	46c0      	nop			@ (mov r8, r8)
 8012a44:	03ff63ff 	.word	0x03ff63ff

08012a48 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	000a      	movs	r2, r1
 8012a52:	1cbb      	adds	r3, r7, #2
 8012a54:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012a56:	2300      	movs	r3, #0
 8012a58:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8012b58 <I2C_Enable_IRQ+0x110>)
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d035      	beq.n	8012ad0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012a68:	4b3c      	ldr	r3, [pc, #240]	@ (8012b5c <I2C_Enable_IRQ+0x114>)
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d030      	beq.n	8012ad0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012a72:	4b3b      	ldr	r3, [pc, #236]	@ (8012b60 <I2C_Enable_IRQ+0x118>)
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d02b      	beq.n	8012ad0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a78:	1cbb      	adds	r3, r7, #2
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	5e9b      	ldrsh	r3, [r3, r2]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	da03      	bge.n	8012a8a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	22b8      	movs	r2, #184	@ 0xb8
 8012a86:	4313      	orrs	r3, r2
 8012a88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012a8a:	1cbb      	adds	r3, r7, #2
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	2201      	movs	r2, #1
 8012a90:	4013      	ands	r3, r2
 8012a92:	d003      	beq.n	8012a9c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	22f2      	movs	r2, #242	@ 0xf2
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012a9c:	1cbb      	adds	r3, r7, #2
 8012a9e:	881b      	ldrh	r3, [r3, #0]
 8012aa0:	2202      	movs	r2, #2
 8012aa2:	4013      	ands	r3, r2
 8012aa4:	d003      	beq.n	8012aae <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	22f4      	movs	r2, #244	@ 0xf4
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012aae:	1cbb      	adds	r3, r7, #2
 8012ab0:	881b      	ldrh	r3, [r3, #0]
 8012ab2:	2b10      	cmp	r3, #16
 8012ab4:	d103      	bne.n	8012abe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2290      	movs	r2, #144	@ 0x90
 8012aba:	4313      	orrs	r3, r2
 8012abc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012abe:	1cbb      	adds	r3, r7, #2
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	2b20      	cmp	r3, #32
 8012ac4:	d13c      	bne.n	8012b40 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2220      	movs	r2, #32
 8012aca:	4313      	orrs	r3, r2
 8012acc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012ace:	e037      	b.n	8012b40 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012ad0:	1cbb      	adds	r3, r7, #2
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	5e9b      	ldrsh	r3, [r3, r2]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	da03      	bge.n	8012ae2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	22b8      	movs	r2, #184	@ 0xb8
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012ae2:	1cbb      	adds	r3, r7, #2
 8012ae4:	881b      	ldrh	r3, [r3, #0]
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	4013      	ands	r3, r2
 8012aea:	d003      	beq.n	8012af4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	22f2      	movs	r2, #242	@ 0xf2
 8012af0:	4313      	orrs	r3, r2
 8012af2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012af4:	1cbb      	adds	r3, r7, #2
 8012af6:	881b      	ldrh	r3, [r3, #0]
 8012af8:	2202      	movs	r2, #2
 8012afa:	4013      	ands	r3, r2
 8012afc:	d003      	beq.n	8012b06 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	22f4      	movs	r2, #244	@ 0xf4
 8012b02:	4313      	orrs	r3, r2
 8012b04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012b06:	1cbb      	adds	r3, r7, #2
 8012b08:	881b      	ldrh	r3, [r3, #0]
 8012b0a:	2b10      	cmp	r3, #16
 8012b0c:	d103      	bne.n	8012b16 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2290      	movs	r2, #144	@ 0x90
 8012b12:	4313      	orrs	r3, r2
 8012b14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012b16:	1cbb      	adds	r3, r7, #2
 8012b18:	881b      	ldrh	r3, [r3, #0]
 8012b1a:	2b20      	cmp	r3, #32
 8012b1c:	d103      	bne.n	8012b26 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2260      	movs	r2, #96	@ 0x60
 8012b22:	4313      	orrs	r3, r2
 8012b24:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b60 <I2C_Enable_IRQ+0x118>)
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d007      	beq.n	8012b40 <I2C_Enable_IRQ+0xf8>
 8012b30:	1cbb      	adds	r3, r7, #2
 8012b32:	881b      	ldrh	r3, [r3, #0]
 8012b34:	2b40      	cmp	r3, #64	@ 0x40
 8012b36:	d103      	bne.n	8012b40 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2240      	movs	r2, #64	@ 0x40
 8012b3c:	4313      	orrs	r3, r2
 8012b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	6819      	ldr	r1, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	68fa      	ldr	r2, [r7, #12]
 8012b4c:	430a      	orrs	r2, r1
 8012b4e:	601a      	str	r2, [r3, #0]
}
 8012b50:	46c0      	nop			@ (mov r8, r8)
 8012b52:	46bd      	mov	sp, r7
 8012b54:	b004      	add	sp, #16
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	080113c9 	.word	0x080113c9
 8012b5c:	080117f9 	.word	0x080117f9
 8012b60:	080115c1 	.word	0x080115c1

08012b64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	000a      	movs	r2, r1
 8012b6e:	1cbb      	adds	r3, r7, #2
 8012b70:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012b72:	2300      	movs	r3, #0
 8012b74:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012b76:	1cbb      	adds	r3, r7, #2
 8012b78:	881b      	ldrh	r3, [r3, #0]
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	d010      	beq.n	8012ba2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2242      	movs	r2, #66	@ 0x42
 8012b84:	4313      	orrs	r3, r2
 8012b86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2241      	movs	r2, #65	@ 0x41
 8012b8c:	5c9b      	ldrb	r3, [r3, r2]
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	001a      	movs	r2, r3
 8012b92:	2328      	movs	r3, #40	@ 0x28
 8012b94:	4013      	ands	r3, r2
 8012b96:	2b28      	cmp	r3, #40	@ 0x28
 8012b98:	d003      	beq.n	8012ba2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	22b0      	movs	r2, #176	@ 0xb0
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012ba2:	1cbb      	adds	r3, r7, #2
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	2202      	movs	r2, #2
 8012ba8:	4013      	ands	r3, r2
 8012baa:	d010      	beq.n	8012bce <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2244      	movs	r2, #68	@ 0x44
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2241      	movs	r2, #65	@ 0x41
 8012bb8:	5c9b      	ldrb	r3, [r3, r2]
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	001a      	movs	r2, r3
 8012bbe:	2328      	movs	r3, #40	@ 0x28
 8012bc0:	4013      	ands	r3, r2
 8012bc2:	2b28      	cmp	r3, #40	@ 0x28
 8012bc4:	d003      	beq.n	8012bce <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	22b0      	movs	r2, #176	@ 0xb0
 8012bca:	4313      	orrs	r3, r2
 8012bcc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012bce:	1cbb      	adds	r3, r7, #2
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	da03      	bge.n	8012be0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	22b8      	movs	r2, #184	@ 0xb8
 8012bdc:	4313      	orrs	r3, r2
 8012bde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012be0:	1cbb      	adds	r3, r7, #2
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	2b10      	cmp	r3, #16
 8012be6:	d103      	bne.n	8012bf0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2290      	movs	r2, #144	@ 0x90
 8012bec:	4313      	orrs	r3, r2
 8012bee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012bf0:	1cbb      	adds	r3, r7, #2
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	2b20      	cmp	r3, #32
 8012bf6:	d103      	bne.n	8012c00 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2220      	movs	r2, #32
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012c00:	1cbb      	adds	r3, r7, #2
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	2b40      	cmp	r3, #64	@ 0x40
 8012c06:	d103      	bne.n	8012c10 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2240      	movs	r2, #64	@ 0x40
 8012c0c:	4313      	orrs	r3, r2
 8012c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	43d9      	mvns	r1, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	400a      	ands	r2, r1
 8012c20:	601a      	str	r2, [r3, #0]
}
 8012c22:	46c0      	nop			@ (mov r8, r8)
 8012c24:	46bd      	mov	sp, r7
 8012c26:	b004      	add	sp, #16
 8012c28:	bd80      	pop	{r7, pc}
	...

08012c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2241      	movs	r2, #65	@ 0x41
 8012c3a:	5c9b      	ldrb	r3, [r3, r2]
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b20      	cmp	r3, #32
 8012c40:	d138      	bne.n	8012cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2240      	movs	r2, #64	@ 0x40
 8012c46:	5c9b      	ldrb	r3, [r3, r2]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d101      	bne.n	8012c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012c4c:	2302      	movs	r3, #2
 8012c4e:	e032      	b.n	8012cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2240      	movs	r2, #64	@ 0x40
 8012c54:	2101      	movs	r1, #1
 8012c56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2241      	movs	r2, #65	@ 0x41
 8012c5c:	2124      	movs	r1, #36	@ 0x24
 8012c5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2101      	movs	r1, #1
 8012c6c:	438a      	bics	r2, r1
 8012c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	4911      	ldr	r1, [pc, #68]	@ (8012cc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012c7c:	400a      	ands	r2, r1
 8012c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	6819      	ldr	r1, [r3, #0]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	683a      	ldr	r2, [r7, #0]
 8012c8c:	430a      	orrs	r2, r1
 8012c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2101      	movs	r1, #1
 8012c9c:	430a      	orrs	r2, r1
 8012c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2241      	movs	r2, #65	@ 0x41
 8012ca4:	2120      	movs	r1, #32
 8012ca6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2240      	movs	r2, #64	@ 0x40
 8012cac:	2100      	movs	r1, #0
 8012cae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	e000      	b.n	8012cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012cb4:	2302      	movs	r3, #2
  }
}
 8012cb6:	0018      	movs	r0, r3
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	b002      	add	sp, #8
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	46c0      	nop			@ (mov r8, r8)
 8012cc0:	ffffefff 	.word	0xffffefff

08012cc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2241      	movs	r2, #65	@ 0x41
 8012cd2:	5c9b      	ldrb	r3, [r3, r2]
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	2b20      	cmp	r3, #32
 8012cd8:	d139      	bne.n	8012d4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2240      	movs	r2, #64	@ 0x40
 8012cde:	5c9b      	ldrb	r3, [r3, r2]
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d101      	bne.n	8012ce8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012ce4:	2302      	movs	r3, #2
 8012ce6:	e033      	b.n	8012d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2240      	movs	r2, #64	@ 0x40
 8012cec:	2101      	movs	r1, #1
 8012cee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2241      	movs	r2, #65	@ 0x41
 8012cf4:	2124      	movs	r1, #36	@ 0x24
 8012cf6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	2101      	movs	r1, #1
 8012d04:	438a      	bics	r2, r1
 8012d06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	4a11      	ldr	r2, [pc, #68]	@ (8012d58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012d14:	4013      	ands	r3, r2
 8012d16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	021b      	lsls	r3, r3, #8
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	68fa      	ldr	r2, [r7, #12]
 8012d28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	2101      	movs	r1, #1
 8012d36:	430a      	orrs	r2, r1
 8012d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2241      	movs	r2, #65	@ 0x41
 8012d3e:	2120      	movs	r1, #32
 8012d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2240      	movs	r2, #64	@ 0x40
 8012d46:	2100      	movs	r1, #0
 8012d48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	e000      	b.n	8012d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012d4e:	2302      	movs	r3, #2
  }
}
 8012d50:	0018      	movs	r0, r3
 8012d52:	46bd      	mov	sp, r7
 8012d54:	b004      	add	sp, #16
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	fffff0ff 	.word	0xfffff0ff

08012d5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b088      	sub	sp, #32
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d101      	bne.n	8012d6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e0e1      	b.n	8012f32 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2235      	movs	r2, #53	@ 0x35
 8012d72:	5c9b      	ldrb	r3, [r3, r2]
 8012d74:	b2db      	uxtb	r3, r3
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d107      	bne.n	8012d8a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2234      	movs	r2, #52	@ 0x34
 8012d7e:	2100      	movs	r1, #0
 8012d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	0018      	movs	r0, r3
 8012d86:	f7f4 fe91 	bl	8007aac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2235      	movs	r2, #53	@ 0x35
 8012d8e:	2102      	movs	r1, #2
 8012d90:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	69da      	ldr	r2, [r3, #28]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4967      	ldr	r1, [pc, #412]	@ (8012f3c <HAL_I2S_Init+0x1e0>)
 8012d9e:	400a      	ands	r2, r1
 8012da0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	2202      	movs	r2, #2
 8012da8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	695b      	ldr	r3, [r3, #20]
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	d073      	beq.n	8012e9a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d102      	bne.n	8012dc0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012dba:	2310      	movs	r3, #16
 8012dbc:	617b      	str	r3, [r7, #20]
 8012dbe:	e001      	b.n	8012dc4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012dc0:	2320      	movs	r3, #32
 8012dc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	2b20      	cmp	r3, #32
 8012dca:	d802      	bhi.n	8012dd2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012dd2:	f002 fed3 	bl	8015b7c <HAL_RCC_GetSysClockFreq>
 8012dd6:	0003      	movs	r3, r0
 8012dd8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	691a      	ldr	r2, [r3, #16]
 8012dde:	2380      	movs	r3, #128	@ 0x80
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d131      	bne.n	8012e4a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d016      	beq.n	8012e1c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	009b      	lsls	r3, r3, #2
 8012df2:	0019      	movs	r1, r3
 8012df4:	68f8      	ldr	r0, [r7, #12]
 8012df6:	f7ed f9d5 	bl	80001a4 <__udivsi3>
 8012dfa:	0003      	movs	r3, r0
 8012dfc:	001a      	movs	r2, r3
 8012dfe:	0013      	movs	r3, r2
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	189b      	adds	r3, r3, r2
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	001a      	movs	r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	695b      	ldr	r3, [r3, #20]
 8012e0c:	0019      	movs	r1, r3
 8012e0e:	0010      	movs	r0, r2
 8012e10:	f7ed f9c8 	bl	80001a4 <__udivsi3>
 8012e14:	0003      	movs	r3, r0
 8012e16:	3305      	adds	r3, #5
 8012e18:	613b      	str	r3, [r7, #16]
 8012e1a:	e02a      	b.n	8012e72 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	00db      	lsls	r3, r3, #3
 8012e20:	0019      	movs	r1, r3
 8012e22:	68f8      	ldr	r0, [r7, #12]
 8012e24:	f7ed f9be 	bl	80001a4 <__udivsi3>
 8012e28:	0003      	movs	r3, r0
 8012e2a:	001a      	movs	r2, r3
 8012e2c:	0013      	movs	r3, r2
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	189b      	adds	r3, r3, r2
 8012e32:	005b      	lsls	r3, r3, #1
 8012e34:	001a      	movs	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	695b      	ldr	r3, [r3, #20]
 8012e3a:	0019      	movs	r1, r3
 8012e3c:	0010      	movs	r0, r2
 8012e3e:	f7ed f9b1 	bl	80001a4 <__udivsi3>
 8012e42:	0003      	movs	r3, r0
 8012e44:	3305      	adds	r3, #5
 8012e46:	613b      	str	r3, [r7, #16]
 8012e48:	e013      	b.n	8012e72 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012e4a:	6979      	ldr	r1, [r7, #20]
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f7ed f9a9 	bl	80001a4 <__udivsi3>
 8012e52:	0003      	movs	r3, r0
 8012e54:	001a      	movs	r2, r3
 8012e56:	0013      	movs	r3, r2
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	189b      	adds	r3, r3, r2
 8012e5c:	005b      	lsls	r3, r3, #1
 8012e5e:	001a      	movs	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	695b      	ldr	r3, [r3, #20]
 8012e64:	0019      	movs	r1, r3
 8012e66:	0010      	movs	r0, r2
 8012e68:	f7ed f99c 	bl	80001a4 <__udivsi3>
 8012e6c:	0003      	movs	r3, r0
 8012e6e:	3305      	adds	r3, #5
 8012e70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	210a      	movs	r1, #10
 8012e76:	0018      	movs	r0, r3
 8012e78:	f7ed f994 	bl	80001a4 <__udivsi3>
 8012e7c:	0003      	movs	r3, r0
 8012e7e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	2201      	movs	r2, #1
 8012e84:	4013      	ands	r3, r2
 8012e86:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012e88:	693a      	ldr	r2, [r7, #16]
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	1ad3      	subs	r3, r2, r3
 8012e8e:	085b      	lsrs	r3, r3, #1
 8012e90:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	021b      	lsls	r3, r3, #8
 8012e96:	61bb      	str	r3, [r7, #24]
 8012e98:	e003      	b.n	8012ea2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012e9a:	2302      	movs	r3, #2
 8012e9c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d902      	bls.n	8012eae <HAL_I2S_Init+0x152>
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	2bff      	cmp	r3, #255	@ 0xff
 8012eac:	d907      	bls.n	8012ebe <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eb2:	2210      	movs	r2, #16
 8012eb4:	431a      	orrs	r2, r3
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012eba:	2301      	movs	r3, #1
 8012ebc:	e039      	b.n	8012f32 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	691a      	ldr	r2, [r3, #16]
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	431a      	orrs	r2, r3
 8012ec6:	0011      	movs	r1, r2
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	69fa      	ldr	r2, [r7, #28]
 8012ece:	430a      	orrs	r2, r1
 8012ed0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	69db      	ldr	r3, [r3, #28]
 8012ed8:	4a18      	ldr	r2, [pc, #96]	@ (8012f3c <HAL_I2S_Init+0x1e0>)
 8012eda:	401a      	ands	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6859      	ldr	r1, [r3, #4]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	4319      	orrs	r1, r3
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	4319      	orrs	r1, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	699b      	ldr	r3, [r3, #24]
 8012ef0:	430b      	orrs	r3, r1
 8012ef2:	431a      	orrs	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2180      	movs	r1, #128	@ 0x80
 8012efa:	0109      	lsls	r1, r1, #4
 8012efc:	430a      	orrs	r2, r1
 8012efe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	2b30      	cmp	r3, #48	@ 0x30
 8012f06:	d003      	beq.n	8012f10 <HAL_I2S_Init+0x1b4>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	2bb0      	cmp	r3, #176	@ 0xb0
 8012f0e:	d108      	bne.n	8012f22 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	69da      	ldr	r2, [r3, #28]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	2180      	movs	r1, #128	@ 0x80
 8012f1c:	0149      	lsls	r1, r1, #5
 8012f1e:	430a      	orrs	r2, r1
 8012f20:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2200      	movs	r2, #0
 8012f26:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2235      	movs	r2, #53	@ 0x35
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	0018      	movs	r0, r3
 8012f34:	46bd      	mov	sp, r7
 8012f36:	b008      	add	sp, #32
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	46c0      	nop			@ (mov r8, r8)
 8012f3c:	fffff040 	.word	0xfffff040

08012f40 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b086      	sub	sp, #24
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	1dbb      	adds	r3, r7, #6
 8012f4c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d003      	beq.n	8012f5c <HAL_I2S_Receive_DMA+0x1c>
 8012f54:	1dbb      	adds	r3, r7, #6
 8012f56:	881b      	ldrh	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	e0a6      	b.n	80130ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2234      	movs	r2, #52	@ 0x34
 8012f64:	5c9b      	ldrb	r3, [r3, r2]
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d101      	bne.n	8012f70 <HAL_I2S_Receive_DMA+0x30>
 8012f6c:	2302      	movs	r3, #2
 8012f6e:	e09e      	b.n	80130ae <HAL_I2S_Receive_DMA+0x16e>
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2234      	movs	r2, #52	@ 0x34
 8012f74:	2101      	movs	r1, #1
 8012f76:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2235      	movs	r2, #53	@ 0x35
 8012f7c:	5c9b      	ldrb	r3, [r3, r2]
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d005      	beq.n	8012f90 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2234      	movs	r2, #52	@ 0x34
 8012f88:	2100      	movs	r1, #0
 8012f8a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012f8c:	2302      	movs	r3, #2
 8012f8e:	e08e      	b.n	80130ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2235      	movs	r2, #53	@ 0x35
 8012f94:	2104      	movs	r1, #4
 8012f96:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	68ba      	ldr	r2, [r7, #8]
 8012fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	69db      	ldr	r3, [r3, #28]
 8012faa:	2207      	movs	r2, #7
 8012fac:	4013      	ands	r3, r2
 8012fae:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	2b03      	cmp	r3, #3
 8012fb4:	d002      	beq.n	8012fbc <HAL_I2S_Receive_DMA+0x7c>
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	2b05      	cmp	r3, #5
 8012fba:	d10c      	bne.n	8012fd6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012fbc:	1dbb      	adds	r3, r7, #6
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	18db      	adds	r3, r3, r3
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012fc8:	1dbb      	adds	r3, r7, #6
 8012fca:	881b      	ldrh	r3, [r3, #0]
 8012fcc:	18db      	adds	r3, r3, r3
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012fd4:	e007      	b.n	8012fe6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	1dba      	adds	r2, r7, #6
 8012fda:	8812      	ldrh	r2, [r2, #0]
 8012fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	1dba      	adds	r2, r7, #6
 8012fe2:	8812      	ldrh	r2, [r2, #0]
 8012fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fea:	4a33      	ldr	r2, [pc, #204]	@ (80130b8 <HAL_I2S_Receive_DMA+0x178>)
 8012fec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ff2:	4a32      	ldr	r2, [pc, #200]	@ (80130bc <HAL_I2S_Receive_DMA+0x17c>)
 8012ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ffa:	4a31      	ldr	r2, [pc, #196]	@ (80130c0 <HAL_I2S_Receive_DMA+0x180>)
 8012ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	69da      	ldr	r2, [r3, #28]
 8013004:	23c0      	movs	r3, #192	@ 0xc0
 8013006:	009b      	lsls	r3, r3, #2
 8013008:	401a      	ands	r2, r3
 801300a:	23c0      	movs	r3, #192	@ 0xc0
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	429a      	cmp	r2, r3
 8013010:	d10a      	bne.n	8013028 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013012:	2300      	movs	r3, #0
 8013014:	613b      	str	r3, [r7, #16]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	613b      	str	r3, [r7, #16]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	613b      	str	r3, [r7, #16]
 8013026:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	330c      	adds	r3, #12
 8013032:	0019      	movs	r1, r3
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013038:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801303e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8013040:	f7fc fca2 	bl	800f988 <HAL_DMA_Start_IT>
 8013044:	1e03      	subs	r3, r0, #0
 8013046:	d00f      	beq.n	8013068 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801304c:	2208      	movs	r2, #8
 801304e:	431a      	orrs	r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2235      	movs	r2, #53	@ 0x35
 8013058:	2101      	movs	r1, #1
 801305a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2234      	movs	r2, #52	@ 0x34
 8013060:	2100      	movs	r1, #0
 8013062:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013064:	2301      	movs	r3, #1
 8013066:	e022      	b.n	80130ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	69da      	ldr	r2, [r3, #28]
 801306e:	2380      	movs	r3, #128	@ 0x80
 8013070:	00db      	lsls	r3, r3, #3
 8013072:	4013      	ands	r3, r2
 8013074:	d108      	bne.n	8013088 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	69da      	ldr	r2, [r3, #28]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2180      	movs	r1, #128	@ 0x80
 8013082:	00c9      	lsls	r1, r1, #3
 8013084:	430a      	orrs	r2, r1
 8013086:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	2201      	movs	r2, #1
 8013090:	4013      	ands	r3, r2
 8013092:	d107      	bne.n	80130a4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	685a      	ldr	r2, [r3, #4]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	2101      	movs	r1, #1
 80130a0:	430a      	orrs	r2, r1
 80130a2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2234      	movs	r2, #52	@ 0x34
 80130a8:	2100      	movs	r1, #0
 80130aa:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80130ac:	2300      	movs	r3, #0
}
 80130ae:	0018      	movs	r0, r3
 80130b0:	46bd      	mov	sp, r7
 80130b2:	b006      	add	sp, #24
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	46c0      	nop			@ (mov r8, r8)
 80130b8:	080132a1 	.word	0x080132a1
 80130bc:	0801325d 	.word	0x0801325d
 80130c0:	080132bf 	.word	0x080132bf

080130c4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b086      	sub	sp, #24
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80130cc:	2317      	movs	r3, #23
 80130ce:	18fb      	adds	r3, r7, r3
 80130d0:	2200      	movs	r2, #0
 80130d2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	685a      	ldr	r2, [r3, #4]
 80130d8:	2380      	movs	r3, #128	@ 0x80
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	429a      	cmp	r2, r3
 80130de:	d003      	beq.n	80130e8 <HAL_I2S_DMAStop+0x24>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d158      	bne.n	801319a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d010      	beq.n	8013112 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130f4:	0018      	movs	r0, r3
 80130f6:	f7fc fcad 	bl	800fa54 <HAL_DMA_Abort>
 80130fa:	1e03      	subs	r3, r0, #0
 80130fc:	d009      	beq.n	8013112 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013102:	2208      	movs	r2, #8
 8013104:	431a      	orrs	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801310a:	2317      	movs	r3, #23
 801310c:	18fb      	adds	r3, r7, r3
 801310e:	2201      	movs	r2, #1
 8013110:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	2364      	movs	r3, #100	@ 0x64
 8013116:	2201      	movs	r2, #1
 8013118:	2102      	movs	r1, #2
 801311a:	f000 f8f7 	bl	801330c <I2S_WaitFlagStateUntilTimeout>
 801311e:	1e03      	subs	r3, r0, #0
 8013120:	d00d      	beq.n	801313e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013126:	2201      	movs	r2, #1
 8013128:	431a      	orrs	r2, r3
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2235      	movs	r2, #53	@ 0x35
 8013132:	2101      	movs	r1, #1
 8013134:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8013136:	2317      	movs	r3, #23
 8013138:	18fb      	adds	r3, r7, r3
 801313a:	2201      	movs	r2, #1
 801313c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	2364      	movs	r3, #100	@ 0x64
 8013142:	2200      	movs	r2, #0
 8013144:	2180      	movs	r1, #128	@ 0x80
 8013146:	f000 f8e1 	bl	801330c <I2S_WaitFlagStateUntilTimeout>
 801314a:	1e03      	subs	r3, r0, #0
 801314c:	d00d      	beq.n	801316a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013152:	2201      	movs	r2, #1
 8013154:	431a      	orrs	r2, r3
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2235      	movs	r2, #53	@ 0x35
 801315e:	2101      	movs	r1, #1
 8013160:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8013162:	2317      	movs	r3, #23
 8013164:	18fb      	adds	r3, r7, r3
 8013166:	2201      	movs	r2, #1
 8013168:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	69da      	ldr	r2, [r3, #28]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4938      	ldr	r1, [pc, #224]	@ (8013258 <HAL_I2S_DMAStop+0x194>)
 8013176:	400a      	ands	r2, r1
 8013178:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801317a:	2300      	movs	r3, #0
 801317c:	613b      	str	r3, [r7, #16]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	613b      	str	r3, [r7, #16]
 8013186:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	685a      	ldr	r2, [r3, #4]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2102      	movs	r1, #2
 8013194:	438a      	bics	r2, r1
 8013196:	605a      	str	r2, [r3, #4]
 8013198:	e053      	b.n	8013242 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	23c0      	movs	r3, #192	@ 0xc0
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d005      	beq.n	80131b2 <HAL_I2S_DMAStop+0xee>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	685a      	ldr	r2, [r3, #4]
 80131aa:	2380      	movs	r3, #128	@ 0x80
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d147      	bne.n	8013242 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d010      	beq.n	80131dc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131be:	0018      	movs	r0, r3
 80131c0:	f7fc fc48 	bl	800fa54 <HAL_DMA_Abort>
 80131c4:	1e03      	subs	r3, r0, #0
 80131c6:	d009      	beq.n	80131dc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131cc:	2208      	movs	r2, #8
 80131ce:	431a      	orrs	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80131d4:	2317      	movs	r3, #23
 80131d6:	18fb      	adds	r3, r7, r3
 80131d8:	2201      	movs	r2, #1
 80131da:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	69da      	ldr	r2, [r3, #28]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	491c      	ldr	r1, [pc, #112]	@ (8013258 <HAL_I2S_DMAStop+0x194>)
 80131e8:	400a      	ands	r2, r1
 80131ea:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80131ec:	2300      	movs	r3, #0
 80131ee:	60fb      	str	r3, [r7, #12]
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68db      	ldr	r3, [r3, #12]
 80131f6:	60fb      	str	r3, [r7, #12]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	689b      	ldr	r3, [r3, #8]
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	685a      	ldr	r2, [r3, #4]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2101      	movs	r1, #1
 801320e:	438a      	bics	r2, r1
 8013210:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	685a      	ldr	r2, [r3, #4]
 8013216:	2380      	movs	r3, #128	@ 0x80
 8013218:	005b      	lsls	r3, r3, #1
 801321a:	429a      	cmp	r2, r3
 801321c:	d10e      	bne.n	801323c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013222:	2240      	movs	r2, #64	@ 0x40
 8013224:	431a      	orrs	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2235      	movs	r2, #53	@ 0x35
 801322e:	2101      	movs	r1, #1
 8013230:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8013232:	2317      	movs	r3, #23
 8013234:	18fb      	adds	r3, r7, r3
 8013236:	2201      	movs	r2, #1
 8013238:	701a      	strb	r2, [r3, #0]
 801323a:	e002      	b.n	8013242 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2235      	movs	r2, #53	@ 0x35
 8013246:	2101      	movs	r1, #1
 8013248:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801324a:	2317      	movs	r3, #23
 801324c:	18fb      	adds	r3, r7, r3
 801324e:	781b      	ldrb	r3, [r3, #0]
}
 8013250:	0018      	movs	r0, r3
 8013252:	46bd      	mov	sp, r7
 8013254:	b006      	add	sp, #24
 8013256:	bd80      	pop	{r7, pc}
 8013258:	fffffbff 	.word	0xfffffbff

0801325c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013268:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	69db      	ldr	r3, [r3, #28]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d10e      	bne.n	8013290 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	685a      	ldr	r2, [r3, #4]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2101      	movs	r1, #1
 801327e:	438a      	bics	r2, r1
 8013280:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2200      	movs	r2, #0
 8013286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	2235      	movs	r2, #53	@ 0x35
 801328c:	2101      	movs	r1, #1
 801328e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	0018      	movs	r0, r3
 8013294:	f7f9 f954 	bl	800c540 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013298:	46c0      	nop			@ (mov r8, r8)
 801329a:	46bd      	mov	sp, r7
 801329c:	b004      	add	sp, #16
 801329e:	bd80      	pop	{r7, pc}

080132a0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132ac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	0018      	movs	r0, r3
 80132b2:	f7f9 f933 	bl	800c51c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80132b6:	46c0      	nop			@ (mov r8, r8)
 80132b8:	46bd      	mov	sp, r7
 80132ba:	b004      	add	sp, #16
 80132bc:	bd80      	pop	{r7, pc}

080132be <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80132be:	b580      	push	{r7, lr}
 80132c0:	b084      	sub	sp, #16
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132ca:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	685a      	ldr	r2, [r3, #4]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2103      	movs	r1, #3
 80132d8:	438a      	bics	r2, r1
 80132da:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2200      	movs	r2, #0
 80132e0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2200      	movs	r2, #0
 80132e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2235      	movs	r2, #53	@ 0x35
 80132ec:	2101      	movs	r1, #1
 80132ee:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132f4:	2208      	movs	r2, #8
 80132f6:	431a      	orrs	r2, r3
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	0018      	movs	r0, r3
 8013300:	f7f9 f96c 	bl	800c5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013304:	46c0      	nop			@ (mov r8, r8)
 8013306:	46bd      	mov	sp, r7
 8013308:	b004      	add	sp, #16
 801330a:	bd80      	pop	{r7, pc}

0801330c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b086      	sub	sp, #24
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	603b      	str	r3, [r7, #0]
 8013318:	1dfb      	adds	r3, r7, #7
 801331a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801331c:	f7fb fde2 	bl	800eee4 <HAL_GetTick>
 8013320:	0003      	movs	r3, r0
 8013322:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013324:	e017      	b.n	8013356 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	3301      	adds	r3, #1
 801332a:	d014      	beq.n	8013356 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801332c:	f7fb fdda 	bl	800eee4 <HAL_GetTick>
 8013330:	0002      	movs	r2, r0
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	1ad3      	subs	r3, r2, r3
 8013336:	683a      	ldr	r2, [r7, #0]
 8013338:	429a      	cmp	r2, r3
 801333a:	d902      	bls.n	8013342 <I2S_WaitFlagStateUntilTimeout+0x36>
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d109      	bne.n	8013356 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2235      	movs	r2, #53	@ 0x35
 8013346:	2101      	movs	r1, #1
 8013348:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2234      	movs	r2, #52	@ 0x34
 801334e:	2100      	movs	r1, #0
 8013350:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013352:	2303      	movs	r3, #3
 8013354:	e00f      	b.n	8013376 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	689b      	ldr	r3, [r3, #8]
 801335c:	68ba      	ldr	r2, [r7, #8]
 801335e:	4013      	ands	r3, r2
 8013360:	68ba      	ldr	r2, [r7, #8]
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	425a      	negs	r2, r3
 8013366:	4153      	adcs	r3, r2
 8013368:	b2db      	uxtb	r3, r3
 801336a:	001a      	movs	r2, r3
 801336c:	1dfb      	adds	r3, r7, #7
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d1d8      	bne.n	8013326 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013374:	2300      	movs	r3, #0
}
 8013376:	0018      	movs	r0, r3
 8013378:	46bd      	mov	sp, r7
 801337a:	b006      	add	sp, #24
 801337c:	bd80      	pop	{r7, pc}
	...

08013380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013382:	b08b      	sub	sp, #44	@ 0x2c
 8013384:	af06      	add	r7, sp, #24
 8013386:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d101      	bne.n	8013392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801338e:	2301      	movs	r3, #1
 8013390:	e0f0      	b.n	8013574 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	4a79      	ldr	r2, [pc, #484]	@ (801357c <HAL_PCD_Init+0x1fc>)
 8013396:	5c9b      	ldrb	r3, [r3, r2]
 8013398:	b2db      	uxtb	r3, r3
 801339a:	2b00      	cmp	r3, #0
 801339c:	d108      	bne.n	80133b0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	23aa      	movs	r3, #170	@ 0xaa
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	2100      	movs	r1, #0
 80133a6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	0018      	movs	r0, r3
 80133ac:	f009 ff4a 	bl	801d244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4a72      	ldr	r2, [pc, #456]	@ (801357c <HAL_PCD_Init+0x1fc>)
 80133b4:	2103      	movs	r1, #3
 80133b6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	0018      	movs	r0, r3
 80133be:	f005 fefd 	bl	80191bc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80133c2:	230f      	movs	r3, #15
 80133c4:	18fb      	adds	r3, r7, r3
 80133c6:	2200      	movs	r2, #0
 80133c8:	701a      	strb	r2, [r3, #0]
 80133ca:	e049      	b.n	8013460 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80133cc:	200f      	movs	r0, #15
 80133ce:	183b      	adds	r3, r7, r0
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	6879      	ldr	r1, [r7, #4]
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	0013      	movs	r3, r2
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	189b      	adds	r3, r3, r2
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	18cb      	adds	r3, r1, r3
 80133e0:	3301      	adds	r3, #1
 80133e2:	2201      	movs	r2, #1
 80133e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80133e6:	183b      	adds	r3, r7, r0
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	1c5a      	adds	r2, r3, #1
 80133ee:	0013      	movs	r3, r2
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	189b      	adds	r3, r3, r2
 80133f4:	00db      	lsls	r3, r3, #3
 80133f6:	183a      	adds	r2, r7, r0
 80133f8:	7812      	ldrb	r2, [r2, #0]
 80133fa:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80133fc:	183b      	adds	r3, r7, r0
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	6879      	ldr	r1, [r7, #4]
 8013402:	1c5a      	adds	r2, r3, #1
 8013404:	0013      	movs	r3, r2
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	189b      	adds	r3, r3, r2
 801340a:	00db      	lsls	r3, r3, #3
 801340c:	18cb      	adds	r3, r1, r3
 801340e:	3303      	adds	r3, #3
 8013410:	2200      	movs	r2, #0
 8013412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013414:	183b      	adds	r3, r7, r0
 8013416:	781a      	ldrb	r2, [r3, #0]
 8013418:	6879      	ldr	r1, [r7, #4]
 801341a:	0013      	movs	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	189b      	adds	r3, r3, r2
 8013420:	00db      	lsls	r3, r3, #3
 8013422:	18cb      	adds	r3, r1, r3
 8013424:	3338      	adds	r3, #56	@ 0x38
 8013426:	2200      	movs	r2, #0
 8013428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801342a:	183b      	adds	r3, r7, r0
 801342c:	781a      	ldrb	r2, [r3, #0]
 801342e:	6879      	ldr	r1, [r7, #4]
 8013430:	0013      	movs	r3, r2
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	189b      	adds	r3, r3, r2
 8013436:	00db      	lsls	r3, r3, #3
 8013438:	18cb      	adds	r3, r1, r3
 801343a:	333c      	adds	r3, #60	@ 0x3c
 801343c:	2200      	movs	r2, #0
 801343e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013440:	183b      	adds	r3, r7, r0
 8013442:	781a      	ldrb	r2, [r3, #0]
 8013444:	6879      	ldr	r1, [r7, #4]
 8013446:	0013      	movs	r3, r2
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	189b      	adds	r3, r3, r2
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	18cb      	adds	r3, r1, r3
 8013450:	3340      	adds	r3, #64	@ 0x40
 8013452:	2200      	movs	r2, #0
 8013454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013456:	183b      	adds	r3, r7, r0
 8013458:	781a      	ldrb	r2, [r3, #0]
 801345a:	183b      	adds	r3, r7, r0
 801345c:	3201      	adds	r2, #1
 801345e:	701a      	strb	r2, [r3, #0]
 8013460:	210f      	movs	r1, #15
 8013462:	187b      	adds	r3, r7, r1
 8013464:	781a      	ldrb	r2, [r3, #0]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	429a      	cmp	r2, r3
 801346c:	d3ae      	bcc.n	80133cc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801346e:	187b      	adds	r3, r7, r1
 8013470:	2200      	movs	r2, #0
 8013472:	701a      	strb	r2, [r3, #0]
 8013474:	e056      	b.n	8013524 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013476:	240f      	movs	r4, #15
 8013478:	193b      	adds	r3, r7, r4
 801347a:	781a      	ldrb	r2, [r3, #0]
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	236a      	movs	r3, #106	@ 0x6a
 8013480:	33ff      	adds	r3, #255	@ 0xff
 8013482:	0019      	movs	r1, r3
 8013484:	0013      	movs	r3, r2
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	189b      	adds	r3, r3, r2
 801348a:	00db      	lsls	r3, r3, #3
 801348c:	18c3      	adds	r3, r0, r3
 801348e:	185b      	adds	r3, r3, r1
 8013490:	2200      	movs	r2, #0
 8013492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013494:	193b      	adds	r3, r7, r4
 8013496:	781a      	ldrb	r2, [r3, #0]
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	23b4      	movs	r3, #180	@ 0xb4
 801349c:	0059      	lsls	r1, r3, #1
 801349e:	0013      	movs	r3, r2
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	189b      	adds	r3, r3, r2
 80134a4:	00db      	lsls	r3, r3, #3
 80134a6:	18c3      	adds	r3, r0, r3
 80134a8:	185b      	adds	r3, r3, r1
 80134aa:	193a      	adds	r2, r7, r4
 80134ac:	7812      	ldrb	r2, [r2, #0]
 80134ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80134b0:	193b      	adds	r3, r7, r4
 80134b2:	781a      	ldrb	r2, [r3, #0]
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	236c      	movs	r3, #108	@ 0x6c
 80134b8:	33ff      	adds	r3, #255	@ 0xff
 80134ba:	0019      	movs	r1, r3
 80134bc:	0013      	movs	r3, r2
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	189b      	adds	r3, r3, r2
 80134c2:	00db      	lsls	r3, r3, #3
 80134c4:	18c3      	adds	r3, r0, r3
 80134c6:	185b      	adds	r3, r3, r1
 80134c8:	2200      	movs	r2, #0
 80134ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80134cc:	193b      	adds	r3, r7, r4
 80134ce:	781a      	ldrb	r2, [r3, #0]
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	23bc      	movs	r3, #188	@ 0xbc
 80134d4:	0059      	lsls	r1, r3, #1
 80134d6:	0013      	movs	r3, r2
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	189b      	adds	r3, r3, r2
 80134dc:	00db      	lsls	r3, r3, #3
 80134de:	18c3      	adds	r3, r0, r3
 80134e0:	185b      	adds	r3, r3, r1
 80134e2:	2200      	movs	r2, #0
 80134e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80134e6:	193b      	adds	r3, r7, r4
 80134e8:	781a      	ldrb	r2, [r3, #0]
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	23be      	movs	r3, #190	@ 0xbe
 80134ee:	0059      	lsls	r1, r3, #1
 80134f0:	0013      	movs	r3, r2
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	189b      	adds	r3, r3, r2
 80134f6:	00db      	lsls	r3, r3, #3
 80134f8:	18c3      	adds	r3, r0, r3
 80134fa:	185b      	adds	r3, r3, r1
 80134fc:	2200      	movs	r2, #0
 80134fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013500:	193b      	adds	r3, r7, r4
 8013502:	781a      	ldrb	r2, [r3, #0]
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	23c0      	movs	r3, #192	@ 0xc0
 8013508:	0059      	lsls	r1, r3, #1
 801350a:	0013      	movs	r3, r2
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	189b      	adds	r3, r3, r2
 8013510:	00db      	lsls	r3, r3, #3
 8013512:	18c3      	adds	r3, r0, r3
 8013514:	185b      	adds	r3, r3, r1
 8013516:	2200      	movs	r2, #0
 8013518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801351a:	193b      	adds	r3, r7, r4
 801351c:	781a      	ldrb	r2, [r3, #0]
 801351e:	193b      	adds	r3, r7, r4
 8013520:	3201      	adds	r2, #1
 8013522:	701a      	strb	r2, [r3, #0]
 8013524:	230f      	movs	r3, #15
 8013526:	18fb      	adds	r3, r7, r3
 8013528:	781a      	ldrb	r2, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	429a      	cmp	r2, r3
 8013530:	d3a1      	bcc.n	8013476 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6818      	ldr	r0, [r3, #0]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	466a      	mov	r2, sp
 801353a:	0011      	movs	r1, r2
 801353c:	001a      	movs	r2, r3
 801353e:	3210      	adds	r2, #16
 8013540:	ca70      	ldmia	r2!, {r4, r5, r6}
 8013542:	c170      	stmia	r1!, {r4, r5, r6}
 8013544:	ca30      	ldmia	r2!, {r4, r5}
 8013546:	c130      	stmia	r1!, {r4, r5}
 8013548:	6859      	ldr	r1, [r3, #4]
 801354a:	689a      	ldr	r2, [r3, #8]
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	f005 fe4f 	bl	80191f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2224      	movs	r2, #36	@ 0x24
 8013556:	2100      	movs	r1, #0
 8013558:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4a07      	ldr	r2, [pc, #28]	@ (801357c <HAL_PCD_Init+0x1fc>)
 801355e:	2101      	movs	r1, #1
 8013560:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	69db      	ldr	r3, [r3, #28]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d103      	bne.n	8013572 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	0018      	movs	r0, r3
 801356e:	f001 fd23 	bl	8014fb8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013572:	2300      	movs	r3, #0
}
 8013574:	0018      	movs	r0, r3
 8013576:	46bd      	mov	sp, r7
 8013578:	b005      	add	sp, #20
 801357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801357c:	000002a9 	.word	0x000002a9

08013580 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	23aa      	movs	r3, #170	@ 0xaa
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	5cd3      	ldrb	r3, [r2, r3]
 8013590:	2b01      	cmp	r3, #1
 8013592:	d101      	bne.n	8013598 <HAL_PCD_Start+0x18>
 8013594:	2302      	movs	r3, #2
 8013596:	e014      	b.n	80135c2 <HAL_PCD_Start+0x42>
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	23aa      	movs	r3, #170	@ 0xaa
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	2101      	movs	r1, #1
 80135a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	0018      	movs	r0, r3
 80135a8:	f005 fdf2 	bl	8019190 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	0018      	movs	r0, r3
 80135b2:	f007 fdf5 	bl	801b1a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	23aa      	movs	r3, #170	@ 0xaa
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	2100      	movs	r1, #0
 80135be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80135c0:	2300      	movs	r3, #0
}
 80135c2:	0018      	movs	r0, r3
 80135c4:	46bd      	mov	sp, r7
 80135c6:	b002      	add	sp, #8
 80135c8:	bd80      	pop	{r7, pc}
	...

080135cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	0018      	movs	r0, r3
 80135da:	f007 fdf7 	bl	801b1cc <USB_ReadInterrupts>
 80135de:	0003      	movs	r3, r0
 80135e0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80135e2:	68fa      	ldr	r2, [r7, #12]
 80135e4:	2380      	movs	r3, #128	@ 0x80
 80135e6:	021b      	lsls	r3, r3, #8
 80135e8:	4013      	ands	r3, r2
 80135ea:	d004      	beq.n	80135f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	0018      	movs	r0, r3
 80135f0:	f000 fb62 	bl	8013cb8 <PCD_EP_ISR_Handler>

    return;
 80135f4:	e11d      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	2380      	movs	r3, #128	@ 0x80
 80135fa:	00db      	lsls	r3, r3, #3
 80135fc:	4013      	ands	r3, r2
 80135fe:	d015      	beq.n	801362c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2244      	movs	r2, #68	@ 0x44
 8013606:	5a9b      	ldrh	r3, [r3, r2]
 8013608:	b29a      	uxth	r2, r3
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	498a      	ldr	r1, [pc, #552]	@ (8013838 <HAL_PCD_IRQHandler+0x26c>)
 8013610:	400a      	ands	r2, r1
 8013612:	b291      	uxth	r1, r2
 8013614:	2244      	movs	r2, #68	@ 0x44
 8013616:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	0018      	movs	r0, r3
 801361c:	f009 fe95 	bl	801d34a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2100      	movs	r1, #0
 8013624:	0018      	movs	r0, r3
 8013626:	f000 f915 	bl	8013854 <HAL_PCD_SetAddress>

    return;
 801362a:	e102      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	2380      	movs	r3, #128	@ 0x80
 8013630:	01db      	lsls	r3, r3, #7
 8013632:	4013      	ands	r3, r2
 8013634:	d00c      	beq.n	8013650 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2244      	movs	r2, #68	@ 0x44
 801363c:	5a9b      	ldrh	r3, [r3, r2]
 801363e:	b29a      	uxth	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	497d      	ldr	r1, [pc, #500]	@ (801383c <HAL_PCD_IRQHandler+0x270>)
 8013646:	400a      	ands	r2, r1
 8013648:	b291      	uxth	r1, r2
 801364a:	2244      	movs	r2, #68	@ 0x44
 801364c:	5299      	strh	r1, [r3, r2]

    return;
 801364e:	e0f0      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8013650:	68fa      	ldr	r2, [r7, #12]
 8013652:	2380      	movs	r3, #128	@ 0x80
 8013654:	019b      	lsls	r3, r3, #6
 8013656:	4013      	ands	r3, r2
 8013658:	d00c      	beq.n	8013674 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2244      	movs	r2, #68	@ 0x44
 8013660:	5a9b      	ldrh	r3, [r3, r2]
 8013662:	b29a      	uxth	r2, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	4975      	ldr	r1, [pc, #468]	@ (8013840 <HAL_PCD_IRQHandler+0x274>)
 801366a:	400a      	ands	r2, r1
 801366c:	b291      	uxth	r1, r2
 801366e:	2244      	movs	r2, #68	@ 0x44
 8013670:	5299      	strh	r1, [r3, r2]

    return;
 8013672:	e0de      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	2380      	movs	r3, #128	@ 0x80
 8013678:	015b      	lsls	r3, r3, #5
 801367a:	4013      	ands	r3, r2
 801367c:	d038      	beq.n	80136f0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2240      	movs	r2, #64	@ 0x40
 8013684:	5a9b      	ldrh	r3, [r3, r2]
 8013686:	b29a      	uxth	r2, r3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2104      	movs	r1, #4
 801368e:	438a      	bics	r2, r1
 8013690:	b291      	uxth	r1, r2
 8013692:	2240      	movs	r2, #64	@ 0x40
 8013694:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2240      	movs	r2, #64	@ 0x40
 801369c:	5a9b      	ldrh	r3, [r3, r2]
 801369e:	b29a      	uxth	r2, r3
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	2108      	movs	r1, #8
 80136a6:	438a      	bics	r2, r1
 80136a8:	b291      	uxth	r1, r2
 80136aa:	2240      	movs	r2, #64	@ 0x40
 80136ac:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	23b8      	movs	r3, #184	@ 0xb8
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	5cd3      	ldrb	r3, [r2, r3]
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	d109      	bne.n	80136ce <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	23b8      	movs	r3, #184	@ 0xb8
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	2100      	movs	r1, #0
 80136c2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2100      	movs	r1, #0
 80136c8:	0018      	movs	r0, r3
 80136ca:	f001 fc9f 	bl	801500c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	0018      	movs	r0, r3
 80136d2:	f009 fe7b 	bl	801d3cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2244      	movs	r2, #68	@ 0x44
 80136dc:	5a9b      	ldrh	r3, [r3, r2]
 80136de:	b29a      	uxth	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	4957      	ldr	r1, [pc, #348]	@ (8013844 <HAL_PCD_IRQHandler+0x278>)
 80136e6:	400a      	ands	r2, r1
 80136e8:	b291      	uxth	r1, r2
 80136ea:	2244      	movs	r2, #68	@ 0x44
 80136ec:	5299      	strh	r1, [r3, r2]

    return;
 80136ee:	e0a0      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80136f0:	68fa      	ldr	r2, [r7, #12]
 80136f2:	2380      	movs	r3, #128	@ 0x80
 80136f4:	011b      	lsls	r3, r3, #4
 80136f6:	4013      	ands	r3, r2
 80136f8:	d028      	beq.n	801374c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2240      	movs	r2, #64	@ 0x40
 8013700:	5a9b      	ldrh	r3, [r3, r2]
 8013702:	b29a      	uxth	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2108      	movs	r1, #8
 801370a:	430a      	orrs	r2, r1
 801370c:	b291      	uxth	r1, r2
 801370e:	2240      	movs	r2, #64	@ 0x40
 8013710:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	2244      	movs	r2, #68	@ 0x44
 8013718:	5a9b      	ldrh	r3, [r3, r2]
 801371a:	b29a      	uxth	r2, r3
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4949      	ldr	r1, [pc, #292]	@ (8013848 <HAL_PCD_IRQHandler+0x27c>)
 8013722:	400a      	ands	r2, r1
 8013724:	b291      	uxth	r1, r2
 8013726:	2244      	movs	r2, #68	@ 0x44
 8013728:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2240      	movs	r2, #64	@ 0x40
 8013730:	5a9b      	ldrh	r3, [r3, r2]
 8013732:	b29a      	uxth	r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2104      	movs	r1, #4
 801373a:	430a      	orrs	r2, r1
 801373c:	b291      	uxth	r1, r2
 801373e:	2240      	movs	r2, #64	@ 0x40
 8013740:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	0018      	movs	r0, r3
 8013746:	f009 fe25 	bl	801d394 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801374a:	e072      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2280      	movs	r2, #128	@ 0x80
 8013750:	4013      	ands	r3, r2
 8013752:	d046      	beq.n	80137e2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2244      	movs	r2, #68	@ 0x44
 801375a:	5a9b      	ldrh	r3, [r3, r2]
 801375c:	b29a      	uxth	r2, r3
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	2180      	movs	r1, #128	@ 0x80
 8013764:	438a      	bics	r2, r1
 8013766:	b291      	uxth	r1, r2
 8013768:	2244      	movs	r2, #68	@ 0x44
 801376a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801376c:	687a      	ldr	r2, [r7, #4]
 801376e:	23b8      	movs	r3, #184	@ 0xb8
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	5cd3      	ldrb	r3, [r2, r3]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d12f      	bne.n	80137d8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2240      	movs	r2, #64	@ 0x40
 801377e:	5a9b      	ldrh	r3, [r3, r2]
 8013780:	b29a      	uxth	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2104      	movs	r1, #4
 8013788:	430a      	orrs	r2, r1
 801378a:	b291      	uxth	r1, r2
 801378c:	2240      	movs	r2, #64	@ 0x40
 801378e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	2240      	movs	r2, #64	@ 0x40
 8013796:	5a9b      	ldrh	r3, [r3, r2]
 8013798:	b29a      	uxth	r2, r3
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	2108      	movs	r1, #8
 80137a0:	430a      	orrs	r2, r1
 80137a2:	b291      	uxth	r1, r2
 80137a4:	2240      	movs	r2, #64	@ 0x40
 80137a6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	23b8      	movs	r3, #184	@ 0xb8
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	2101      	movs	r1, #1
 80137b0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	2254      	movs	r2, #84	@ 0x54
 80137b8:	5a9b      	ldrh	r3, [r3, r2]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	089b      	lsrs	r3, r3, #2
 80137be:	223c      	movs	r2, #60	@ 0x3c
 80137c0:	4013      	ands	r3, r2
 80137c2:	0019      	movs	r1, r3
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	23b9      	movs	r3, #185	@ 0xb9
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2101      	movs	r1, #1
 80137d0:	0018      	movs	r0, r3
 80137d2:	f001 fc1b 	bl	801500c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80137d6:	e02c      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	0018      	movs	r0, r3
 80137dc:	f009 fdda 	bl	801d394 <HAL_PCD_SuspendCallback>
    return;
 80137e0:	e027      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	2380      	movs	r3, #128	@ 0x80
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	4013      	ands	r3, r2
 80137ea:	d010      	beq.n	801380e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2244      	movs	r2, #68	@ 0x44
 80137f2:	5a9b      	ldrh	r3, [r3, r2]
 80137f4:	b29a      	uxth	r2, r3
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4914      	ldr	r1, [pc, #80]	@ (801384c <HAL_PCD_IRQHandler+0x280>)
 80137fc:	400a      	ands	r2, r1
 80137fe:	b291      	uxth	r1, r2
 8013800:	2244      	movs	r2, #68	@ 0x44
 8013802:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	0018      	movs	r0, r3
 8013808:	f009 fd90 	bl	801d32c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801380c:	e011      	b.n	8013832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801380e:	68fa      	ldr	r2, [r7, #12]
 8013810:	2380      	movs	r3, #128	@ 0x80
 8013812:	005b      	lsls	r3, r3, #1
 8013814:	4013      	ands	r3, r2
 8013816:	d00c      	beq.n	8013832 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	2244      	movs	r2, #68	@ 0x44
 801381e:	5a9b      	ldrh	r3, [r3, r2]
 8013820:	b29a      	uxth	r2, r3
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	490a      	ldr	r1, [pc, #40]	@ (8013850 <HAL_PCD_IRQHandler+0x284>)
 8013828:	400a      	ands	r2, r1
 801382a:	b291      	uxth	r1, r2
 801382c:	2244      	movs	r2, #68	@ 0x44
 801382e:	5299      	strh	r1, [r3, r2]

    return;
 8013830:	46c0      	nop			@ (mov r8, r8)
  }
}
 8013832:	46bd      	mov	sp, r7
 8013834:	b004      	add	sp, #16
 8013836:	bd80      	pop	{r7, pc}
 8013838:	fffffbff 	.word	0xfffffbff
 801383c:	ffffbfff 	.word	0xffffbfff
 8013840:	ffffdfff 	.word	0xffffdfff
 8013844:	ffffefff 	.word	0xffffefff
 8013848:	fffff7ff 	.word	0xfffff7ff
 801384c:	fffffdff 	.word	0xfffffdff
 8013850:	fffffeff 	.word	0xfffffeff

08013854 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	000a      	movs	r2, r1
 801385e:	1cfb      	adds	r3, r7, #3
 8013860:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	23aa      	movs	r3, #170	@ 0xaa
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	5cd3      	ldrb	r3, [r2, r3]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d101      	bne.n	8013872 <HAL_PCD_SetAddress+0x1e>
 801386e:	2302      	movs	r3, #2
 8013870:	e017      	b.n	80138a2 <HAL_PCD_SetAddress+0x4e>
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	23aa      	movs	r3, #170	@ 0xaa
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	2101      	movs	r1, #1
 801387a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	1cfa      	adds	r2, r7, #3
 8013880:	2124      	movs	r1, #36	@ 0x24
 8013882:	7812      	ldrb	r2, [r2, #0]
 8013884:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	1cfb      	adds	r3, r7, #3
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	0019      	movs	r1, r3
 8013890:	0010      	movs	r0, r2
 8013892:	f007 fc71 	bl	801b178 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	23aa      	movs	r3, #170	@ 0xaa
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	2100      	movs	r1, #0
 801389e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80138a0:	2300      	movs	r3, #0
}
 80138a2:	0018      	movs	r0, r3
 80138a4:	46bd      	mov	sp, r7
 80138a6:	b002      	add	sp, #8
 80138a8:	bd80      	pop	{r7, pc}

080138aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80138aa:	b590      	push	{r4, r7, lr}
 80138ac:	b085      	sub	sp, #20
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
 80138b2:	000c      	movs	r4, r1
 80138b4:	0010      	movs	r0, r2
 80138b6:	0019      	movs	r1, r3
 80138b8:	1cfb      	adds	r3, r7, #3
 80138ba:	1c22      	adds	r2, r4, #0
 80138bc:	701a      	strb	r2, [r3, #0]
 80138be:	003b      	movs	r3, r7
 80138c0:	1c02      	adds	r2, r0, #0
 80138c2:	801a      	strh	r2, [r3, #0]
 80138c4:	1cbb      	adds	r3, r7, #2
 80138c6:	1c0a      	adds	r2, r1, #0
 80138c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80138ca:	230b      	movs	r3, #11
 80138cc:	18fb      	adds	r3, r7, r3
 80138ce:	2200      	movs	r2, #0
 80138d0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80138d2:	1cfb      	adds	r3, r7, #3
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	b25b      	sxtb	r3, r3
 80138d8:	2b00      	cmp	r3, #0
 80138da:	da0f      	bge.n	80138fc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80138dc:	1cfb      	adds	r3, r7, #3
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	2207      	movs	r2, #7
 80138e2:	4013      	ands	r3, r2
 80138e4:	1c5a      	adds	r2, r3, #1
 80138e6:	0013      	movs	r3, r2
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	189b      	adds	r3, r3, r2
 80138ec:	00db      	lsls	r3, r3, #3
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	18d3      	adds	r3, r2, r3
 80138f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2201      	movs	r2, #1
 80138f8:	705a      	strb	r2, [r3, #1]
 80138fa:	e00f      	b.n	801391c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80138fc:	1cfb      	adds	r3, r7, #3
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2207      	movs	r2, #7
 8013902:	401a      	ands	r2, r3
 8013904:	0013      	movs	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	189b      	adds	r3, r3, r2
 801390a:	00db      	lsls	r3, r3, #3
 801390c:	3369      	adds	r3, #105	@ 0x69
 801390e:	33ff      	adds	r3, #255	@ 0xff
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	18d3      	adds	r3, r2, r3
 8013914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	2200      	movs	r2, #0
 801391a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801391c:	1cfb      	adds	r3, r7, #3
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2207      	movs	r2, #7
 8013922:	4013      	ands	r3, r2
 8013924:	b2da      	uxtb	r2, r3
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801392a:	003b      	movs	r3, r7
 801392c:	881a      	ldrh	r2, [r3, #0]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	1cba      	adds	r2, r7, #2
 8013936:	7812      	ldrb	r2, [r2, #0]
 8013938:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801393a:	1cbb      	adds	r3, r7, #2
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	2b02      	cmp	r3, #2
 8013940:	d102      	bne.n	8013948 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2200      	movs	r2, #0
 8013946:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013948:	687a      	ldr	r2, [r7, #4]
 801394a:	23aa      	movs	r3, #170	@ 0xaa
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	5cd3      	ldrb	r3, [r2, r3]
 8013950:	2b01      	cmp	r3, #1
 8013952:	d101      	bne.n	8013958 <HAL_PCD_EP_Open+0xae>
 8013954:	2302      	movs	r3, #2
 8013956:	e013      	b.n	8013980 <HAL_PCD_EP_Open+0xd6>
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	23aa      	movs	r3, #170	@ 0xaa
 801395c:	009b      	lsls	r3, r3, #2
 801395e:	2101      	movs	r1, #1
 8013960:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	68fa      	ldr	r2, [r7, #12]
 8013968:	0011      	movs	r1, r2
 801396a:	0018      	movs	r0, r3
 801396c:	f005 fc68 	bl	8019240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	23aa      	movs	r3, #170	@ 0xaa
 8013974:	009b      	lsls	r3, r3, #2
 8013976:	2100      	movs	r1, #0
 8013978:	54d1      	strb	r1, [r2, r3]

  return ret;
 801397a:	230b      	movs	r3, #11
 801397c:	18fb      	adds	r3, r7, r3
 801397e:	781b      	ldrb	r3, [r3, #0]
}
 8013980:	0018      	movs	r0, r3
 8013982:	46bd      	mov	sp, r7
 8013984:	b005      	add	sp, #20
 8013986:	bd90      	pop	{r4, r7, pc}

08013988 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	000a      	movs	r2, r1
 8013992:	1cfb      	adds	r3, r7, #3
 8013994:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013996:	1cfb      	adds	r3, r7, #3
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	b25b      	sxtb	r3, r3
 801399c:	2b00      	cmp	r3, #0
 801399e:	da0f      	bge.n	80139c0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80139a0:	1cfb      	adds	r3, r7, #3
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	2207      	movs	r2, #7
 80139a6:	4013      	ands	r3, r2
 80139a8:	1c5a      	adds	r2, r3, #1
 80139aa:	0013      	movs	r3, r2
 80139ac:	009b      	lsls	r3, r3, #2
 80139ae:	189b      	adds	r3, r3, r2
 80139b0:	00db      	lsls	r3, r3, #3
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	18d3      	adds	r3, r2, r3
 80139b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2201      	movs	r2, #1
 80139bc:	705a      	strb	r2, [r3, #1]
 80139be:	e00f      	b.n	80139e0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80139c0:	1cfb      	adds	r3, r7, #3
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	2207      	movs	r2, #7
 80139c6:	401a      	ands	r2, r3
 80139c8:	0013      	movs	r3, r2
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	189b      	adds	r3, r3, r2
 80139ce:	00db      	lsls	r3, r3, #3
 80139d0:	3369      	adds	r3, #105	@ 0x69
 80139d2:	33ff      	adds	r3, #255	@ 0xff
 80139d4:	687a      	ldr	r2, [r7, #4]
 80139d6:	18d3      	adds	r3, r2, r3
 80139d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2200      	movs	r2, #0
 80139de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80139e0:	1cfb      	adds	r3, r7, #3
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	2207      	movs	r2, #7
 80139e6:	4013      	ands	r3, r2
 80139e8:	b2da      	uxtb	r2, r3
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	23aa      	movs	r3, #170	@ 0xaa
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	5cd3      	ldrb	r3, [r2, r3]
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d101      	bne.n	80139fe <HAL_PCD_EP_Close+0x76>
 80139fa:	2302      	movs	r3, #2
 80139fc:	e011      	b.n	8013a22 <HAL_PCD_EP_Close+0x9a>
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	23aa      	movs	r3, #170	@ 0xaa
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	2101      	movs	r1, #1
 8013a06:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	68fa      	ldr	r2, [r7, #12]
 8013a0e:	0011      	movs	r1, r2
 8013a10:	0018      	movs	r0, r3
 8013a12:	f005 ffb7 	bl	8019984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	23aa      	movs	r3, #170	@ 0xaa
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	2100      	movs	r1, #0
 8013a1e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8013a20:	2300      	movs	r3, #0
}
 8013a22:	0018      	movs	r0, r3
 8013a24:	46bd      	mov	sp, r7
 8013a26:	b004      	add	sp, #16
 8013a28:	bd80      	pop	{r7, pc}

08013a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b086      	sub	sp, #24
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	60f8      	str	r0, [r7, #12]
 8013a32:	607a      	str	r2, [r7, #4]
 8013a34:	603b      	str	r3, [r7, #0]
 8013a36:	200b      	movs	r0, #11
 8013a38:	183b      	adds	r3, r7, r0
 8013a3a:	1c0a      	adds	r2, r1, #0
 8013a3c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013a3e:	0001      	movs	r1, r0
 8013a40:	187b      	adds	r3, r7, r1
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2207      	movs	r2, #7
 8013a46:	401a      	ands	r2, r3
 8013a48:	0013      	movs	r3, r2
 8013a4a:	009b      	lsls	r3, r3, #2
 8013a4c:	189b      	adds	r3, r3, r2
 8013a4e:	00db      	lsls	r3, r3, #3
 8013a50:	3369      	adds	r3, #105	@ 0x69
 8013a52:	33ff      	adds	r3, #255	@ 0xff
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	18d3      	adds	r3, r2, r3
 8013a58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	683a      	ldr	r2, [r7, #0]
 8013a64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a72:	187b      	adds	r3, r7, r1
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	2207      	movs	r2, #7
 8013a78:	4013      	ands	r3, r2
 8013a7a:	b2da      	uxtb	r2, r3
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	697a      	ldr	r2, [r7, #20]
 8013a86:	0011      	movs	r1, r2
 8013a88:	0018      	movs	r0, r3
 8013a8a:	f006 f93b 	bl	8019d04 <USB_EPStartXfer>

  return HAL_OK;
 8013a8e:	2300      	movs	r3, #0
}
 8013a90:	0018      	movs	r0, r3
 8013a92:	46bd      	mov	sp, r7
 8013a94:	b006      	add	sp, #24
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	000a      	movs	r2, r1
 8013aa2:	1cfb      	adds	r3, r7, #3
 8013aa4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013aa6:	1cfb      	adds	r3, r7, #3
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	2207      	movs	r2, #7
 8013aac:	401a      	ands	r2, r3
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	23c2      	movs	r3, #194	@ 0xc2
 8013ab2:	0059      	lsls	r1, r3, #1
 8013ab4:	0013      	movs	r3, r2
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	189b      	adds	r3, r3, r2
 8013aba:	00db      	lsls	r3, r3, #3
 8013abc:	18c3      	adds	r3, r0, r3
 8013abe:	185b      	adds	r3, r3, r1
 8013ac0:	681b      	ldr	r3, [r3, #0]
}
 8013ac2:	0018      	movs	r0, r3
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	b002      	add	sp, #8
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b086      	sub	sp, #24
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	607a      	str	r2, [r7, #4]
 8013ad4:	603b      	str	r3, [r7, #0]
 8013ad6:	200b      	movs	r0, #11
 8013ad8:	183b      	adds	r3, r7, r0
 8013ada:	1c0a      	adds	r2, r1, #0
 8013adc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013ade:	183b      	adds	r3, r7, r0
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	2207      	movs	r2, #7
 8013ae4:	4013      	ands	r3, r2
 8013ae6:	1c5a      	adds	r2, r3, #1
 8013ae8:	0013      	movs	r3, r2
 8013aea:	009b      	lsls	r3, r3, #2
 8013aec:	189b      	adds	r3, r3, r2
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	68fa      	ldr	r2, [r7, #12]
 8013af2:	18d3      	adds	r3, r2, r3
 8013af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	683a      	ldr	r2, [r7, #0]
 8013b00:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	2224      	movs	r2, #36	@ 0x24
 8013b06:	2101      	movs	r1, #1
 8013b08:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	683a      	ldr	r2, [r7, #0]
 8013b0e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	2200      	movs	r2, #0
 8013b14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	2201      	movs	r2, #1
 8013b1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013b1c:	183b      	adds	r3, r7, r0
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	2207      	movs	r2, #7
 8013b22:	4013      	ands	r3, r2
 8013b24:	b2da      	uxtb	r2, r3
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	697a      	ldr	r2, [r7, #20]
 8013b30:	0011      	movs	r1, r2
 8013b32:	0018      	movs	r0, r3
 8013b34:	f006 f8e6 	bl	8019d04 <USB_EPStartXfer>

  return HAL_OK;
 8013b38:	2300      	movs	r3, #0
}
 8013b3a:	0018      	movs	r0, r3
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	b006      	add	sp, #24
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013b42:	b580      	push	{r7, lr}
 8013b44:	b084      	sub	sp, #16
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
 8013b4a:	000a      	movs	r2, r1
 8013b4c:	1cfb      	adds	r3, r7, #3
 8013b4e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013b50:	1cfb      	adds	r3, r7, #3
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	2207      	movs	r2, #7
 8013b56:	401a      	ands	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d901      	bls.n	8013b64 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013b60:	2301      	movs	r3, #1
 8013b62:	e046      	b.n	8013bf2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013b64:	1cfb      	adds	r3, r7, #3
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	b25b      	sxtb	r3, r3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	da0f      	bge.n	8013b8e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013b6e:	1cfb      	adds	r3, r7, #3
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	2207      	movs	r2, #7
 8013b74:	4013      	ands	r3, r2
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	0013      	movs	r3, r2
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	189b      	adds	r3, r3, r2
 8013b7e:	00db      	lsls	r3, r3, #3
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	18d3      	adds	r3, r2, r3
 8013b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2201      	movs	r2, #1
 8013b8a:	705a      	strb	r2, [r3, #1]
 8013b8c:	e00d      	b.n	8013baa <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013b8e:	1cfb      	adds	r3, r7, #3
 8013b90:	781a      	ldrb	r2, [r3, #0]
 8013b92:	0013      	movs	r3, r2
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	189b      	adds	r3, r3, r2
 8013b98:	00db      	lsls	r3, r3, #3
 8013b9a:	3369      	adds	r3, #105	@ 0x69
 8013b9c:	33ff      	adds	r3, #255	@ 0xff
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	18d3      	adds	r3, r2, r3
 8013ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	2201      	movs	r2, #1
 8013bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013bb0:	1cfb      	adds	r3, r7, #3
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	2207      	movs	r2, #7
 8013bb6:	4013      	ands	r3, r2
 8013bb8:	b2da      	uxtb	r2, r3
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013bbe:	687a      	ldr	r2, [r7, #4]
 8013bc0:	23aa      	movs	r3, #170	@ 0xaa
 8013bc2:	009b      	lsls	r3, r3, #2
 8013bc4:	5cd3      	ldrb	r3, [r2, r3]
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	d101      	bne.n	8013bce <HAL_PCD_EP_SetStall+0x8c>
 8013bca:	2302      	movs	r3, #2
 8013bcc:	e011      	b.n	8013bf2 <HAL_PCD_EP_SetStall+0xb0>
 8013bce:	687a      	ldr	r2, [r7, #4]
 8013bd0:	23aa      	movs	r3, #170	@ 0xaa
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	2101      	movs	r1, #1
 8013bd6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	0011      	movs	r1, r2
 8013be0:	0018      	movs	r0, r3
 8013be2:	f007 f9c7 	bl	801af74 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	23aa      	movs	r3, #170	@ 0xaa
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	2100      	movs	r1, #0
 8013bee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	0018      	movs	r0, r3
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	b004      	add	sp, #16
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b084      	sub	sp, #16
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	000a      	movs	r2, r1
 8013c04:	1cfb      	adds	r3, r7, #3
 8013c06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013c08:	1cfb      	adds	r3, r7, #3
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	220f      	movs	r2, #15
 8013c0e:	401a      	ands	r2, r3
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d901      	bls.n	8013c1c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e048      	b.n	8013cae <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013c1c:	1cfb      	adds	r3, r7, #3
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	b25b      	sxtb	r3, r3
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	da0f      	bge.n	8013c46 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013c26:	1cfb      	adds	r3, r7, #3
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	2207      	movs	r2, #7
 8013c2c:	4013      	ands	r3, r2
 8013c2e:	1c5a      	adds	r2, r3, #1
 8013c30:	0013      	movs	r3, r2
 8013c32:	009b      	lsls	r3, r3, #2
 8013c34:	189b      	adds	r3, r3, r2
 8013c36:	00db      	lsls	r3, r3, #3
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	18d3      	adds	r3, r2, r3
 8013c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2201      	movs	r2, #1
 8013c42:	705a      	strb	r2, [r3, #1]
 8013c44:	e00f      	b.n	8013c66 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013c46:	1cfb      	adds	r3, r7, #3
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	2207      	movs	r2, #7
 8013c4c:	401a      	ands	r2, r3
 8013c4e:	0013      	movs	r3, r2
 8013c50:	009b      	lsls	r3, r3, #2
 8013c52:	189b      	adds	r3, r3, r2
 8013c54:	00db      	lsls	r3, r3, #3
 8013c56:	3369      	adds	r3, #105	@ 0x69
 8013c58:	33ff      	adds	r3, #255	@ 0xff
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	18d3      	adds	r3, r2, r3
 8013c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2200      	movs	r2, #0
 8013c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013c6c:	1cfb      	adds	r3, r7, #3
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	2207      	movs	r2, #7
 8013c72:	4013      	ands	r3, r2
 8013c74:	b2da      	uxtb	r2, r3
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	23aa      	movs	r3, #170	@ 0xaa
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	5cd3      	ldrb	r3, [r2, r3]
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d101      	bne.n	8013c8a <HAL_PCD_EP_ClrStall+0x90>
 8013c86:	2302      	movs	r3, #2
 8013c88:	e011      	b.n	8013cae <HAL_PCD_EP_ClrStall+0xb4>
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	23aa      	movs	r3, #170	@ 0xaa
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	2101      	movs	r1, #1
 8013c92:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	68fa      	ldr	r2, [r7, #12]
 8013c9a:	0011      	movs	r1, r2
 8013c9c:	0018      	movs	r0, r3
 8013c9e:	f007 f9b9 	bl	801b014 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	23aa      	movs	r3, #170	@ 0xaa
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	2100      	movs	r1, #0
 8013caa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013cac:	2300      	movs	r3, #0
}
 8013cae:	0018      	movs	r0, r3
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	b004      	add	sp, #16
 8013cb4:	bd80      	pop	{r7, pc}
	...

08013cb8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013cb8:	b5b0      	push	{r4, r5, r7, lr}
 8013cba:	b096      	sub	sp, #88	@ 0x58
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013cc0:	f000 fbec 	bl	801449c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	204e      	movs	r0, #78	@ 0x4e
 8013cca:	183b      	adds	r3, r7, r0
 8013ccc:	2144      	movs	r1, #68	@ 0x44
 8013cce:	5a52      	ldrh	r2, [r2, r1]
 8013cd0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013cd2:	183b      	adds	r3, r7, r0
 8013cd4:	881b      	ldrh	r3, [r3, #0]
 8013cd6:	b2da      	uxtb	r2, r3
 8013cd8:	244d      	movs	r4, #77	@ 0x4d
 8013cda:	193b      	adds	r3, r7, r4
 8013cdc:	210f      	movs	r1, #15
 8013cde:	400a      	ands	r2, r1
 8013ce0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013ce2:	193b      	adds	r3, r7, r4
 8013ce4:	781b      	ldrb	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d000      	beq.n	8013cec <PCD_EP_ISR_Handler+0x34>
 8013cea:	e18f      	b.n	801400c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013cec:	183b      	adds	r3, r7, r0
 8013cee:	881b      	ldrh	r3, [r3, #0]
 8013cf0:	2210      	movs	r2, #16
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	d155      	bne.n	8013da2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	881b      	ldrh	r3, [r3, #0]
 8013cfc:	b29a      	uxth	r2, r3
 8013cfe:	200e      	movs	r0, #14
 8013d00:	183b      	adds	r3, r7, r0
 8013d02:	49bb      	ldr	r1, [pc, #748]	@ (8013ff0 <PCD_EP_ISR_Handler+0x338>)
 8013d04:	400a      	ands	r2, r1
 8013d06:	801a      	strh	r2, [r3, #0]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	183a      	adds	r2, r7, r0
 8013d0e:	8812      	ldrh	r2, [r2, #0]
 8013d10:	49b8      	ldr	r1, [pc, #736]	@ (8013ff4 <PCD_EP_ISR_Handler+0x33c>)
 8013d12:	430a      	orrs	r2, r1
 8013d14:	b292      	uxth	r2, r2
 8013d16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	3328      	adds	r3, #40	@ 0x28
 8013d1c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2250      	movs	r2, #80	@ 0x50
 8013d24:	5a9b      	ldrh	r3, [r3, r2]
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	001a      	movs	r2, r3
 8013d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	00db      	lsls	r3, r3, #3
 8013d30:	18d2      	adds	r2, r2, r3
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	18d3      	adds	r3, r2, r3
 8013d38:	4aaf      	ldr	r2, [pc, #700]	@ (8013ff8 <PCD_EP_ISR_Handler+0x340>)
 8013d3a:	4694      	mov	ip, r2
 8013d3c:	4463      	add	r3, ip
 8013d3e:	881b      	ldrh	r3, [r3, #0]
 8013d40:	059b      	lsls	r3, r3, #22
 8013d42:	0d9a      	lsrs	r2, r3, #22
 8013d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d4a:	695a      	ldr	r2, [r3, #20]
 8013d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d4e:	69db      	ldr	r3, [r3, #28]
 8013d50:	18d2      	adds	r2, r2, r3
 8013d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2100      	movs	r1, #0
 8013d5a:	0018      	movs	r0, r3
 8013d5c:	f009 fac8 	bl	801d2f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2224      	movs	r2, #36	@ 0x24
 8013d64:	5c9b      	ldrb	r3, [r3, r2]
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d101      	bne.n	8013d70 <PCD_EP_ISR_Handler+0xb8>
 8013d6c:	f000 fb96 	bl	801449c <PCD_EP_ISR_Handler+0x7e4>
 8013d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d72:	699b      	ldr	r3, [r3, #24]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d001      	beq.n	8013d7c <PCD_EP_ISR_Handler+0xc4>
 8013d78:	f000 fb90 	bl	801449c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2224      	movs	r2, #36	@ 0x24
 8013d80:	5c9b      	ldrb	r3, [r3, r2]
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	2280      	movs	r2, #128	@ 0x80
 8013d86:	4252      	negs	r2, r2
 8013d88:	4313      	orrs	r3, r2
 8013d8a:	b2da      	uxtb	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	0011      	movs	r1, r2
 8013d92:	224c      	movs	r2, #76	@ 0x4c
 8013d94:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2224      	movs	r2, #36	@ 0x24
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	5499      	strb	r1, [r3, r2]
 8013d9e:	f000 fb7d 	bl	801449c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	3369      	adds	r3, #105	@ 0x69
 8013da6:	33ff      	adds	r3, #255	@ 0xff
 8013da8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	214a      	movs	r1, #74	@ 0x4a
 8013db0:	187b      	adds	r3, r7, r1
 8013db2:	8812      	ldrh	r2, [r2, #0]
 8013db4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013db6:	187b      	adds	r3, r7, r1
 8013db8:	881a      	ldrh	r2, [r3, #0]
 8013dba:	2380      	movs	r3, #128	@ 0x80
 8013dbc:	011b      	lsls	r3, r3, #4
 8013dbe:	4013      	ands	r3, r2
 8013dc0:	d037      	beq.n	8013e32 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2250      	movs	r2, #80	@ 0x50
 8013dc8:	5a9b      	ldrh	r3, [r3, r2]
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	001a      	movs	r2, r3
 8013dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	00db      	lsls	r3, r3, #3
 8013dd4:	18d2      	adds	r2, r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	18d3      	adds	r3, r2, r3
 8013ddc:	4a87      	ldr	r2, [pc, #540]	@ (8013ffc <PCD_EP_ISR_Handler+0x344>)
 8013dde:	4694      	mov	ip, r2
 8013de0:	4463      	add	r3, ip
 8013de2:	881b      	ldrh	r3, [r3, #0]
 8013de4:	059b      	lsls	r3, r3, #22
 8013de6:	0d9a      	lsrs	r2, r3, #22
 8013de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6818      	ldr	r0, [r3, #0]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	22ac      	movs	r2, #172	@ 0xac
 8013df4:	0092      	lsls	r2, r2, #2
 8013df6:	1899      	adds	r1, r3, r2
 8013df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dfa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dfe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	f007 fa3a 	bl	801b27a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	881b      	ldrh	r3, [r3, #0]
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	2010      	movs	r0, #16
 8013e10:	183b      	adds	r3, r7, r0
 8013e12:	497b      	ldr	r1, [pc, #492]	@ (8014000 <PCD_EP_ISR_Handler+0x348>)
 8013e14:	400a      	ands	r2, r1
 8013e16:	801a      	strh	r2, [r3, #0]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	183a      	adds	r2, r7, r0
 8013e1e:	8812      	ldrh	r2, [r2, #0]
 8013e20:	2180      	movs	r1, #128	@ 0x80
 8013e22:	430a      	orrs	r2, r1
 8013e24:	b292      	uxth	r2, r2
 8013e26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	0018      	movs	r0, r3
 8013e2c:	f009 fa2a 	bl	801d284 <HAL_PCD_SetupStageCallback>
 8013e30:	e334      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013e32:	234a      	movs	r3, #74	@ 0x4a
 8013e34:	18fb      	adds	r3, r7, r3
 8013e36:	2200      	movs	r2, #0
 8013e38:	5e9b      	ldrsh	r3, [r3, r2]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	db00      	blt.n	8013e40 <PCD_EP_ISR_Handler+0x188>
 8013e3e:	e32d      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	881b      	ldrh	r3, [r3, #0]
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	201e      	movs	r0, #30
 8013e4a:	183b      	adds	r3, r7, r0
 8013e4c:	496c      	ldr	r1, [pc, #432]	@ (8014000 <PCD_EP_ISR_Handler+0x348>)
 8013e4e:	400a      	ands	r2, r1
 8013e50:	801a      	strh	r2, [r3, #0]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	183a      	adds	r2, r7, r0
 8013e58:	8812      	ldrh	r2, [r2, #0]
 8013e5a:	2180      	movs	r1, #128	@ 0x80
 8013e5c:	430a      	orrs	r2, r1
 8013e5e:	b292      	uxth	r2, r2
 8013e60:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2250      	movs	r2, #80	@ 0x50
 8013e68:	5a9b      	ldrh	r3, [r3, r2]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	001a      	movs	r2, r3
 8013e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	00db      	lsls	r3, r3, #3
 8013e74:	18d2      	adds	r2, r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	18d3      	adds	r3, r2, r3
 8013e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8013ffc <PCD_EP_ISR_Handler+0x344>)
 8013e7e:	4694      	mov	ip, r2
 8013e80:	4463      	add	r3, ip
 8013e82:	881b      	ldrh	r3, [r3, #0]
 8013e84:	059b      	lsls	r3, r3, #22
 8013e86:	0d9a      	lsrs	r2, r3, #22
 8013e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e8e:	69db      	ldr	r3, [r3, #28]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d01a      	beq.n	8013eca <PCD_EP_ISR_Handler+0x212>
 8013e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e96:	695b      	ldr	r3, [r3, #20]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d016      	beq.n	8013eca <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6818      	ldr	r0, [r3, #0]
 8013ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ea2:	6959      	ldr	r1, [r3, #20]
 8013ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ea6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eaa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	f007 f9e4 	bl	801b27a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eb4:	695a      	ldr	r2, [r3, #20]
 8013eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eb8:	69db      	ldr	r3, [r3, #28]
 8013eba:	18d2      	adds	r2, r2, r3
 8013ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ebe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2100      	movs	r1, #0
 8013ec4:	0018      	movs	r0, r3
 8013ec6:	f009 f9f2 	bl	801d2ae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	214a      	movs	r1, #74	@ 0x4a
 8013ed0:	187b      	adds	r3, r7, r1
 8013ed2:	8812      	ldrh	r2, [r2, #0]
 8013ed4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013ed6:	187b      	adds	r3, r7, r1
 8013ed8:	881a      	ldrh	r2, [r3, #0]
 8013eda:	2380      	movs	r3, #128	@ 0x80
 8013edc:	011b      	lsls	r3, r3, #4
 8013ede:	4013      	ands	r3, r2
 8013ee0:	d000      	beq.n	8013ee4 <PCD_EP_ISR_Handler+0x22c>
 8013ee2:	e2db      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
 8013ee4:	187b      	adds	r3, r7, r1
 8013ee6:	881a      	ldrh	r2, [r3, #0]
 8013ee8:	23c0      	movs	r3, #192	@ 0xc0
 8013eea:	019b      	lsls	r3, r3, #6
 8013eec:	401a      	ands	r2, r3
 8013eee:	23c0      	movs	r3, #192	@ 0xc0
 8013ef0:	019b      	lsls	r3, r3, #6
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d100      	bne.n	8013ef8 <PCD_EP_ISR_Handler+0x240>
 8013ef6:	e2d1      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	61bb      	str	r3, [r7, #24]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2250      	movs	r2, #80	@ 0x50
 8013f04:	5a9b      	ldrh	r3, [r3, r2]
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	001a      	movs	r2, r3
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	189b      	adds	r3, r3, r2
 8013f0e:	61bb      	str	r3, [r7, #24]
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	4a3a      	ldr	r2, [pc, #232]	@ (8013ffc <PCD_EP_ISR_Handler+0x344>)
 8013f14:	4694      	mov	ip, r2
 8013f16:	4463      	add	r3, ip
 8013f18:	617b      	str	r3, [r7, #20]
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	881b      	ldrh	r3, [r3, #0]
 8013f1e:	b29b      	uxth	r3, r3
 8013f20:	059b      	lsls	r3, r3, #22
 8013f22:	0d9b      	lsrs	r3, r3, #22
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	801a      	strh	r2, [r3, #0]
 8013f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f2c:	691b      	ldr	r3, [r3, #16]
 8013f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f30:	d91a      	bls.n	8013f68 <PCD_EP_ISR_Handler+0x2b0>
 8013f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f34:	691b      	ldr	r3, [r3, #16]
 8013f36:	095b      	lsrs	r3, r3, #5
 8013f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f3c:	691b      	ldr	r3, [r3, #16]
 8013f3e:	221f      	movs	r2, #31
 8013f40:	4013      	ands	r3, r2
 8013f42:	d102      	bne.n	8013f4a <PCD_EP_ISR_Handler+0x292>
 8013f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f46:	3b01      	subs	r3, #1
 8013f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	029b      	lsls	r3, r3, #10
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	4313      	orrs	r3, r2
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	4a25      	ldr	r2, [pc, #148]	@ (8013ff4 <PCD_EP_ISR_Handler+0x33c>)
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	b29a      	uxth	r2, r3
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	801a      	strh	r2, [r3, #0]
 8013f66:	e023      	b.n	8013fb0 <PCD_EP_ISR_Handler+0x2f8>
 8013f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f6a:	691b      	ldr	r3, [r3, #16]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d108      	bne.n	8013f82 <PCD_EP_ISR_Handler+0x2ca>
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	881b      	ldrh	r3, [r3, #0]
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	4a1f      	ldr	r2, [pc, #124]	@ (8013ff4 <PCD_EP_ISR_Handler+0x33c>)
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	801a      	strh	r2, [r3, #0]
 8013f80:	e016      	b.n	8013fb0 <PCD_EP_ISR_Handler+0x2f8>
 8013f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f84:	691b      	ldr	r3, [r3, #16]
 8013f86:	085b      	lsrs	r3, r3, #1
 8013f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f8c:	691b      	ldr	r3, [r3, #16]
 8013f8e:	2201      	movs	r2, #1
 8013f90:	4013      	ands	r3, r2
 8013f92:	d002      	beq.n	8013f9a <PCD_EP_ISR_Handler+0x2e2>
 8013f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f96:	3301      	adds	r3, #1
 8013f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	881b      	ldrh	r3, [r3, #0]
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	029b      	lsls	r3, r3, #10
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	b29a      	uxth	r2, r3
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	881b      	ldrh	r3, [r3, #0]
 8013fb6:	b29a      	uxth	r2, r3
 8013fb8:	2012      	movs	r0, #18
 8013fba:	183b      	adds	r3, r7, r0
 8013fbc:	4911      	ldr	r1, [pc, #68]	@ (8014004 <PCD_EP_ISR_Handler+0x34c>)
 8013fbe:	400a      	ands	r2, r1
 8013fc0:	801a      	strh	r2, [r3, #0]
 8013fc2:	183b      	adds	r3, r7, r0
 8013fc4:	183a      	adds	r2, r7, r0
 8013fc6:	8812      	ldrh	r2, [r2, #0]
 8013fc8:	2180      	movs	r1, #128	@ 0x80
 8013fca:	0149      	lsls	r1, r1, #5
 8013fcc:	404a      	eors	r2, r1
 8013fce:	801a      	strh	r2, [r3, #0]
 8013fd0:	183b      	adds	r3, r7, r0
 8013fd2:	183a      	adds	r2, r7, r0
 8013fd4:	8812      	ldrh	r2, [r2, #0]
 8013fd6:	2180      	movs	r1, #128	@ 0x80
 8013fd8:	0189      	lsls	r1, r1, #6
 8013fda:	404a      	eors	r2, r1
 8013fdc:	801a      	strh	r2, [r3, #0]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	183a      	adds	r2, r7, r0
 8013fe4:	8812      	ldrh	r2, [r2, #0]
 8013fe6:	4908      	ldr	r1, [pc, #32]	@ (8014008 <PCD_EP_ISR_Handler+0x350>)
 8013fe8:	430a      	orrs	r2, r1
 8013fea:	b292      	uxth	r2, r2
 8013fec:	801a      	strh	r2, [r3, #0]
 8013fee:	e255      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
 8013ff0:	ffff8f0f 	.word	0xffff8f0f
 8013ff4:	ffff8000 	.word	0xffff8000
 8013ff8:	00000402 	.word	0x00000402
 8013ffc:	00000406 	.word	0x00000406
 8014000:	00000f8f 	.word	0x00000f8f
 8014004:	ffffbf8f 	.word	0xffffbf8f
 8014008:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	001a      	movs	r2, r3
 8014012:	204d      	movs	r0, #77	@ 0x4d
 8014014:	183b      	adds	r3, r7, r0
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	18d2      	adds	r2, r2, r3
 801401c:	214a      	movs	r1, #74	@ 0x4a
 801401e:	187b      	adds	r3, r7, r1
 8014020:	8812      	ldrh	r2, [r2, #0]
 8014022:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8014024:	187b      	adds	r3, r7, r1
 8014026:	2200      	movs	r2, #0
 8014028:	5e9b      	ldrsh	r3, [r3, r2]
 801402a:	2b00      	cmp	r3, #0
 801402c:	db00      	blt.n	8014030 <PCD_EP_ISR_Handler+0x378>
 801402e:	e0fa      	b.n	8014226 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	001a      	movs	r2, r3
 8014036:	183b      	adds	r3, r7, r0
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	18d3      	adds	r3, r2, r3
 801403e:	881b      	ldrh	r3, [r3, #0]
 8014040:	b29a      	uxth	r2, r3
 8014042:	2448      	movs	r4, #72	@ 0x48
 8014044:	193b      	adds	r3, r7, r4
 8014046:	49d1      	ldr	r1, [pc, #836]	@ (801438c <PCD_EP_ISR_Handler+0x6d4>)
 8014048:	400a      	ands	r2, r1
 801404a:	801a      	strh	r2, [r3, #0]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	001a      	movs	r2, r3
 8014052:	183b      	adds	r3, r7, r0
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	18d3      	adds	r3, r2, r3
 801405a:	193a      	adds	r2, r7, r4
 801405c:	8812      	ldrh	r2, [r2, #0]
 801405e:	2180      	movs	r1, #128	@ 0x80
 8014060:	430a      	orrs	r2, r1
 8014062:	b292      	uxth	r2, r2
 8014064:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8014066:	183b      	adds	r3, r7, r0
 8014068:	781a      	ldrb	r2, [r3, #0]
 801406a:	0013      	movs	r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	189b      	adds	r3, r3, r2
 8014070:	00db      	lsls	r3, r3, #3
 8014072:	3369      	adds	r3, #105	@ 0x69
 8014074:	33ff      	adds	r3, #255	@ 0xff
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	18d3      	adds	r3, r2, r3
 801407a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801407e:	7b1b      	ldrb	r3, [r3, #12]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d125      	bne.n	80140d0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2250      	movs	r2, #80	@ 0x50
 801408a:	5a9b      	ldrh	r3, [r3, r2]
 801408c:	b29b      	uxth	r3, r3
 801408e:	001a      	movs	r2, r3
 8014090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	00db      	lsls	r3, r3, #3
 8014096:	18d2      	adds	r2, r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	18d3      	adds	r3, r2, r3
 801409e:	4abc      	ldr	r2, [pc, #752]	@ (8014390 <PCD_EP_ISR_Handler+0x6d8>)
 80140a0:	4694      	mov	ip, r2
 80140a2:	4463      	add	r3, ip
 80140a4:	881a      	ldrh	r2, [r3, #0]
 80140a6:	2450      	movs	r4, #80	@ 0x50
 80140a8:	193b      	adds	r3, r7, r4
 80140aa:	0592      	lsls	r2, r2, #22
 80140ac:	0d92      	lsrs	r2, r2, #22
 80140ae:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80140b0:	193b      	adds	r3, r7, r4
 80140b2:	881b      	ldrh	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d100      	bne.n	80140ba <PCD_EP_ISR_Handler+0x402>
 80140b8:	e08d      	b.n	80141d6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6818      	ldr	r0, [r3, #0]
 80140be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140c0:	6959      	ldr	r1, [r3, #20]
 80140c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140c4:	88da      	ldrh	r2, [r3, #6]
 80140c6:	193b      	adds	r3, r7, r4
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	f007 f8d6 	bl	801b27a <USB_ReadPMA>
 80140ce:	e082      	b.n	80141d6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80140d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140d2:	78db      	ldrb	r3, [r3, #3]
 80140d4:	2b02      	cmp	r3, #2
 80140d6:	d10c      	bne.n	80140f2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80140d8:	2350      	movs	r3, #80	@ 0x50
 80140da:	18fc      	adds	r4, r7, r3
 80140dc:	234a      	movs	r3, #74	@ 0x4a
 80140de:	18fb      	adds	r3, r7, r3
 80140e0:	881a      	ldrh	r2, [r3, #0]
 80140e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	0018      	movs	r0, r3
 80140e8:	f000 f9ec 	bl	80144c4 <HAL_PCD_EP_DB_Receive>
 80140ec:	0003      	movs	r3, r0
 80140ee:	8023      	strh	r3, [r4, #0]
 80140f0:	e071      	b.n	80141d6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	001a      	movs	r2, r3
 80140f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	18d3      	adds	r3, r2, r3
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	b29a      	uxth	r2, r3
 8014104:	2052      	movs	r0, #82	@ 0x52
 8014106:	183b      	adds	r3, r7, r0
 8014108:	49a2      	ldr	r1, [pc, #648]	@ (8014394 <PCD_EP_ISR_Handler+0x6dc>)
 801410a:	400a      	ands	r2, r1
 801410c:	801a      	strh	r2, [r3, #0]
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	001a      	movs	r2, r3
 8014114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	009b      	lsls	r3, r3, #2
 801411a:	18d3      	adds	r3, r2, r3
 801411c:	183a      	adds	r2, r7, r0
 801411e:	8812      	ldrh	r2, [r2, #0]
 8014120:	499d      	ldr	r1, [pc, #628]	@ (8014398 <PCD_EP_ISR_Handler+0x6e0>)
 8014122:	430a      	orrs	r2, r1
 8014124:	b292      	uxth	r2, r2
 8014126:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	001a      	movs	r2, r3
 801412e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	18d3      	adds	r3, r2, r3
 8014136:	881b      	ldrh	r3, [r3, #0]
 8014138:	b29b      	uxth	r3, r3
 801413a:	001a      	movs	r2, r3
 801413c:	2380      	movs	r3, #128	@ 0x80
 801413e:	01db      	lsls	r3, r3, #7
 8014140:	4013      	ands	r3, r2
 8014142:	d024      	beq.n	801418e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2250      	movs	r2, #80	@ 0x50
 801414a:	5a9b      	ldrh	r3, [r3, r2]
 801414c:	b29b      	uxth	r3, r3
 801414e:	001a      	movs	r2, r3
 8014150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	18d2      	adds	r2, r2, r3
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	18d3      	adds	r3, r2, r3
 801415e:	4a8f      	ldr	r2, [pc, #572]	@ (801439c <PCD_EP_ISR_Handler+0x6e4>)
 8014160:	4694      	mov	ip, r2
 8014162:	4463      	add	r3, ip
 8014164:	881a      	ldrh	r2, [r3, #0]
 8014166:	2450      	movs	r4, #80	@ 0x50
 8014168:	193b      	adds	r3, r7, r4
 801416a:	0592      	lsls	r2, r2, #22
 801416c:	0d92      	lsrs	r2, r2, #22
 801416e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014170:	193b      	adds	r3, r7, r4
 8014172:	881b      	ldrh	r3, [r3, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d02e      	beq.n	80141d6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6818      	ldr	r0, [r3, #0]
 801417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801417e:	6959      	ldr	r1, [r3, #20]
 8014180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014182:	891a      	ldrh	r2, [r3, #8]
 8014184:	193b      	adds	r3, r7, r4
 8014186:	881b      	ldrh	r3, [r3, #0]
 8014188:	f007 f877 	bl	801b27a <USB_ReadPMA>
 801418c:	e023      	b.n	80141d6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2250      	movs	r2, #80	@ 0x50
 8014194:	5a9b      	ldrh	r3, [r3, r2]
 8014196:	b29b      	uxth	r3, r3
 8014198:	001a      	movs	r2, r3
 801419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	00db      	lsls	r3, r3, #3
 80141a0:	18d2      	adds	r2, r2, r3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	18d3      	adds	r3, r2, r3
 80141a8:	4a79      	ldr	r2, [pc, #484]	@ (8014390 <PCD_EP_ISR_Handler+0x6d8>)
 80141aa:	4694      	mov	ip, r2
 80141ac:	4463      	add	r3, ip
 80141ae:	881a      	ldrh	r2, [r3, #0]
 80141b0:	2450      	movs	r4, #80	@ 0x50
 80141b2:	193b      	adds	r3, r7, r4
 80141b4:	0592      	lsls	r2, r2, #22
 80141b6:	0d92      	lsrs	r2, r2, #22
 80141b8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80141ba:	193b      	adds	r3, r7, r4
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d009      	beq.n	80141d6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6818      	ldr	r0, [r3, #0]
 80141c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c8:	6959      	ldr	r1, [r3, #20]
 80141ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141cc:	895a      	ldrh	r2, [r3, #10]
 80141ce:	193b      	adds	r3, r7, r4
 80141d0:	881b      	ldrh	r3, [r3, #0]
 80141d2:	f007 f852 	bl	801b27a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80141d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141d8:	69da      	ldr	r2, [r3, #28]
 80141da:	2150      	movs	r1, #80	@ 0x50
 80141dc:	187b      	adds	r3, r7, r1
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	18d2      	adds	r2, r2, r3
 80141e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80141e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141e8:	695a      	ldr	r2, [r3, #20]
 80141ea:	187b      	adds	r3, r7, r1
 80141ec:	881b      	ldrh	r3, [r3, #0]
 80141ee:	18d2      	adds	r2, r2, r3
 80141f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80141f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141f6:	699b      	ldr	r3, [r3, #24]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d005      	beq.n	8014208 <PCD_EP_ISR_Handler+0x550>
 80141fc:	187b      	adds	r3, r7, r1
 80141fe:	881a      	ldrh	r2, [r3, #0]
 8014200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	429a      	cmp	r2, r3
 8014206:	d207      	bcs.n	8014218 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801420a:	781a      	ldrb	r2, [r3, #0]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	0011      	movs	r1, r2
 8014210:	0018      	movs	r0, r3
 8014212:	f009 f84c 	bl	801d2ae <HAL_PCD_DataOutStageCallback>
 8014216:	e006      	b.n	8014226 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801421e:	0011      	movs	r1, r2
 8014220:	0018      	movs	r0, r3
 8014222:	f005 fd6f 	bl	8019d04 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014226:	244a      	movs	r4, #74	@ 0x4a
 8014228:	193b      	adds	r3, r7, r4
 801422a:	881b      	ldrh	r3, [r3, #0]
 801422c:	2280      	movs	r2, #128	@ 0x80
 801422e:	4013      	ands	r3, r2
 8014230:	d100      	bne.n	8014234 <PCD_EP_ISR_Handler+0x57c>
 8014232:	e133      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8014234:	204d      	movs	r0, #77	@ 0x4d
 8014236:	183b      	adds	r3, r7, r0
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	1c5a      	adds	r2, r3, #1
 801423c:	0013      	movs	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	189b      	adds	r3, r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	18d3      	adds	r3, r2, r3
 8014248:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	001a      	movs	r2, r3
 8014250:	183b      	adds	r3, r7, r0
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	009b      	lsls	r3, r3, #2
 8014256:	18d3      	adds	r3, r2, r3
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	b29a      	uxth	r2, r3
 801425c:	2542      	movs	r5, #66	@ 0x42
 801425e:	197b      	adds	r3, r7, r5
 8014260:	494f      	ldr	r1, [pc, #316]	@ (80143a0 <PCD_EP_ISR_Handler+0x6e8>)
 8014262:	400a      	ands	r2, r1
 8014264:	801a      	strh	r2, [r3, #0]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	001a      	movs	r2, r3
 801426c:	183b      	adds	r3, r7, r0
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	18d3      	adds	r3, r2, r3
 8014274:	197a      	adds	r2, r7, r5
 8014276:	8812      	ldrh	r2, [r2, #0]
 8014278:	494a      	ldr	r1, [pc, #296]	@ (80143a4 <PCD_EP_ISR_Handler+0x6ec>)
 801427a:	430a      	orrs	r2, r1
 801427c:	b292      	uxth	r2, r2
 801427e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014282:	78db      	ldrb	r3, [r3, #3]
 8014284:	2b01      	cmp	r3, #1
 8014286:	d000      	beq.n	801428a <PCD_EP_ISR_Handler+0x5d2>
 8014288:	e0af      	b.n	80143ea <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801428c:	2200      	movs	r2, #0
 801428e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014292:	7b1b      	ldrb	r3, [r3, #12]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d100      	bne.n	801429a <PCD_EP_ISR_Handler+0x5e2>
 8014298:	e09f      	b.n	80143da <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801429a:	193b      	adds	r3, r7, r4
 801429c:	881b      	ldrh	r3, [r3, #0]
 801429e:	2240      	movs	r2, #64	@ 0x40
 80142a0:	4013      	ands	r3, r2
 80142a2:	d046      	beq.n	8014332 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80142a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142a6:	785b      	ldrb	r3, [r3, #1]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d125      	bne.n	80142f8 <PCD_EP_ISR_Handler+0x640>
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2250      	movs	r2, #80	@ 0x50
 80142b8:	5a9b      	ldrh	r3, [r3, r2]
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	001a      	movs	r2, r3
 80142be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c0:	189b      	adds	r3, r3, r2
 80142c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80142c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	00da      	lsls	r2, r3, #3
 80142ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142cc:	18d3      	adds	r3, r2, r3
 80142ce:	4a33      	ldr	r2, [pc, #204]	@ (801439c <PCD_EP_ISR_Handler+0x6e4>)
 80142d0:	4694      	mov	ip, r2
 80142d2:	4463      	add	r3, ip
 80142d4:	623b      	str	r3, [r7, #32]
 80142d6:	6a3b      	ldr	r3, [r7, #32]
 80142d8:	881b      	ldrh	r3, [r3, #0]
 80142da:	b29b      	uxth	r3, r3
 80142dc:	059b      	lsls	r3, r3, #22
 80142de:	0d9b      	lsrs	r3, r3, #22
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	6a3b      	ldr	r3, [r7, #32]
 80142e4:	801a      	strh	r2, [r3, #0]
 80142e6:	6a3b      	ldr	r3, [r7, #32]
 80142e8:	881b      	ldrh	r3, [r3, #0]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	4a2d      	ldr	r2, [pc, #180]	@ (80143a4 <PCD_EP_ISR_Handler+0x6ec>)
 80142ee:	4313      	orrs	r3, r2
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	6a3b      	ldr	r3, [r7, #32]
 80142f4:	801a      	strh	r2, [r3, #0]
 80142f6:	e070      	b.n	80143da <PCD_EP_ISR_Handler+0x722>
 80142f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142fa:	785b      	ldrb	r3, [r3, #1]
 80142fc:	2b01      	cmp	r3, #1
 80142fe:	d16c      	bne.n	80143da <PCD_EP_ISR_Handler+0x722>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	2250      	movs	r2, #80	@ 0x50
 801430c:	5a9b      	ldrh	r3, [r3, r2]
 801430e:	b29b      	uxth	r3, r3
 8014310:	001a      	movs	r2, r3
 8014312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014314:	189b      	adds	r3, r3, r2
 8014316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	00da      	lsls	r2, r3, #3
 801431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014320:	18d3      	adds	r3, r2, r3
 8014322:	4a1e      	ldr	r2, [pc, #120]	@ (801439c <PCD_EP_ISR_Handler+0x6e4>)
 8014324:	4694      	mov	ip, r2
 8014326:	4463      	add	r3, ip
 8014328:	62bb      	str	r3, [r7, #40]	@ 0x28
 801432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801432c:	2200      	movs	r2, #0
 801432e:	801a      	strh	r2, [r3, #0]
 8014330:	e053      	b.n	80143da <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801433a:	785b      	ldrb	r3, [r3, #1]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d133      	bne.n	80143a8 <PCD_EP_ISR_Handler+0x6f0>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	637b      	str	r3, [r7, #52]	@ 0x34
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2250      	movs	r2, #80	@ 0x50
 801434c:	5a9b      	ldrh	r3, [r3, r2]
 801434e:	b29b      	uxth	r3, r3
 8014350:	001a      	movs	r2, r3
 8014352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014354:	189b      	adds	r3, r3, r2
 8014356:	637b      	str	r3, [r7, #52]	@ 0x34
 8014358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	00da      	lsls	r2, r3, #3
 801435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014360:	18d3      	adds	r3, r2, r3
 8014362:	4a0b      	ldr	r2, [pc, #44]	@ (8014390 <PCD_EP_ISR_Handler+0x6d8>)
 8014364:	4694      	mov	ip, r2
 8014366:	4463      	add	r3, ip
 8014368:	633b      	str	r3, [r7, #48]	@ 0x30
 801436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	b29b      	uxth	r3, r3
 8014370:	059b      	lsls	r3, r3, #22
 8014372:	0d9b      	lsrs	r3, r3, #22
 8014374:	b29a      	uxth	r2, r3
 8014376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014378:	801a      	strh	r2, [r3, #0]
 801437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801437c:	881b      	ldrh	r3, [r3, #0]
 801437e:	b29b      	uxth	r3, r3
 8014380:	4a08      	ldr	r2, [pc, #32]	@ (80143a4 <PCD_EP_ISR_Handler+0x6ec>)
 8014382:	4313      	orrs	r3, r2
 8014384:	b29a      	uxth	r2, r3
 8014386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014388:	801a      	strh	r2, [r3, #0]
 801438a:	e026      	b.n	80143da <PCD_EP_ISR_Handler+0x722>
 801438c:	00000f8f 	.word	0x00000f8f
 8014390:	00000406 	.word	0x00000406
 8014394:	ffff8f8f 	.word	0xffff8f8f
 8014398:	ffff80c0 	.word	0xffff80c0
 801439c:	00000402 	.word	0x00000402
 80143a0:	ffff8f0f 	.word	0xffff8f0f
 80143a4:	ffff8000 	.word	0xffff8000
 80143a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143aa:	785b      	ldrb	r3, [r3, #1]
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d114      	bne.n	80143da <PCD_EP_ISR_Handler+0x722>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2250      	movs	r2, #80	@ 0x50
 80143b6:	5a9b      	ldrh	r3, [r3, r2]
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	001a      	movs	r2, r3
 80143bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143be:	189b      	adds	r3, r3, r2
 80143c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80143c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	00da      	lsls	r2, r3, #3
 80143c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143ca:	18d3      	adds	r3, r2, r3
 80143cc:	4a3b      	ldr	r2, [pc, #236]	@ (80144bc <PCD_EP_ISR_Handler+0x804>)
 80143ce:	4694      	mov	ip, r2
 80143d0:	4463      	add	r3, ip
 80143d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80143d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d6:	2200      	movs	r2, #0
 80143d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80143da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143dc:	781a      	ldrb	r2, [r3, #0]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	0011      	movs	r1, r2
 80143e2:	0018      	movs	r0, r3
 80143e4:	f008 ff84 	bl	801d2f0 <HAL_PCD_DataInStageCallback>
 80143e8:	e058      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80143ea:	234a      	movs	r3, #74	@ 0x4a
 80143ec:	18fb      	adds	r3, r7, r3
 80143ee:	881a      	ldrh	r2, [r3, #0]
 80143f0:	2380      	movs	r3, #128	@ 0x80
 80143f2:	005b      	lsls	r3, r3, #1
 80143f4:	4013      	ands	r3, r2
 80143f6:	d149      	bne.n	801448c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2250      	movs	r2, #80	@ 0x50
 80143fe:	5a9b      	ldrh	r3, [r3, r2]
 8014400:	b29b      	uxth	r3, r3
 8014402:	001a      	movs	r2, r3
 8014404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	00db      	lsls	r3, r3, #3
 801440a:	18d2      	adds	r2, r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	18d3      	adds	r3, r2, r3
 8014412:	4a2b      	ldr	r2, [pc, #172]	@ (80144c0 <PCD_EP_ISR_Handler+0x808>)
 8014414:	4694      	mov	ip, r2
 8014416:	4463      	add	r3, ip
 8014418:	881a      	ldrh	r2, [r3, #0]
 801441a:	2140      	movs	r1, #64	@ 0x40
 801441c:	187b      	adds	r3, r7, r1
 801441e:	0592      	lsls	r2, r2, #22
 8014420:	0d92      	lsrs	r2, r2, #22
 8014422:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014426:	699a      	ldr	r2, [r3, #24]
 8014428:	187b      	adds	r3, r7, r1
 801442a:	881b      	ldrh	r3, [r3, #0]
 801442c:	429a      	cmp	r2, r3
 801442e:	d907      	bls.n	8014440 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8014430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014432:	699a      	ldr	r2, [r3, #24]
 8014434:	187b      	adds	r3, r7, r1
 8014436:	881b      	ldrh	r3, [r3, #0]
 8014438:	1ad2      	subs	r2, r2, r3
 801443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801443c:	619a      	str	r2, [r3, #24]
 801443e:	e002      	b.n	8014446 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8014440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014442:	2200      	movs	r2, #0
 8014444:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d107      	bne.n	801445e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014450:	781a      	ldrb	r2, [r3, #0]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	0011      	movs	r1, r2
 8014456:	0018      	movs	r0, r3
 8014458:	f008 ff4a 	bl	801d2f0 <HAL_PCD_DataInStageCallback>
 801445c:	e01e      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801445e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014460:	695a      	ldr	r2, [r3, #20]
 8014462:	2140      	movs	r1, #64	@ 0x40
 8014464:	187b      	adds	r3, r7, r1
 8014466:	881b      	ldrh	r3, [r3, #0]
 8014468:	18d2      	adds	r2, r2, r3
 801446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801446c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801446e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014470:	69da      	ldr	r2, [r3, #28]
 8014472:	187b      	adds	r3, r7, r1
 8014474:	881b      	ldrh	r3, [r3, #0]
 8014476:	18d2      	adds	r2, r2, r3
 8014478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801447a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014482:	0011      	movs	r1, r2
 8014484:	0018      	movs	r0, r3
 8014486:	f005 fc3d 	bl	8019d04 <USB_EPStartXfer>
 801448a:	e007      	b.n	801449c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801448c:	234a      	movs	r3, #74	@ 0x4a
 801448e:	18fb      	adds	r3, r7, r3
 8014490:	881a      	ldrh	r2, [r3, #0]
 8014492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	0018      	movs	r0, r3
 8014498:	f000 f930 	bl	80146fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	2244      	movs	r2, #68	@ 0x44
 80144a2:	5a9b      	ldrh	r3, [r3, r2]
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	b21b      	sxth	r3, r3
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	da01      	bge.n	80144b0 <PCD_EP_ISR_Handler+0x7f8>
 80144ac:	f7ff fc0a 	bl	8013cc4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	0018      	movs	r0, r3
 80144b4:	46bd      	mov	sp, r7
 80144b6:	b016      	add	sp, #88	@ 0x58
 80144b8:	bdb0      	pop	{r4, r5, r7, pc}
 80144ba:	46c0      	nop			@ (mov r8, r8)
 80144bc:	00000406 	.word	0x00000406
 80144c0:	00000402 	.word	0x00000402

080144c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80144c4:	b590      	push	{r4, r7, lr}
 80144c6:	b089      	sub	sp, #36	@ 0x24
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	1dbb      	adds	r3, r7, #6
 80144d0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80144d2:	1dbb      	adds	r3, r7, #6
 80144d4:	881a      	ldrh	r2, [r3, #0]
 80144d6:	2380      	movs	r3, #128	@ 0x80
 80144d8:	01db      	lsls	r3, r3, #7
 80144da:	4013      	ands	r3, r2
 80144dc:	d100      	bne.n	80144e0 <HAL_PCD_EP_DB_Receive+0x1c>
 80144de:	e07d      	b.n	80145dc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2250      	movs	r2, #80	@ 0x50
 80144e6:	5a9b      	ldrh	r3, [r3, r2]
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	001a      	movs	r2, r3
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	00db      	lsls	r3, r3, #3
 80144f2:	18d2      	adds	r2, r2, r3
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	18d3      	adds	r3, r2, r3
 80144fa:	4a7a      	ldr	r2, [pc, #488]	@ (80146e4 <HAL_PCD_EP_DB_Receive+0x220>)
 80144fc:	4694      	mov	ip, r2
 80144fe:	4463      	add	r3, ip
 8014500:	881a      	ldrh	r2, [r3, #0]
 8014502:	211a      	movs	r1, #26
 8014504:	187b      	adds	r3, r7, r1
 8014506:	0592      	lsls	r2, r2, #22
 8014508:	0d92      	lsrs	r2, r2, #22
 801450a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	699a      	ldr	r2, [r3, #24]
 8014510:	187b      	adds	r3, r7, r1
 8014512:	881b      	ldrh	r3, [r3, #0]
 8014514:	429a      	cmp	r2, r3
 8014516:	d307      	bcc.n	8014528 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	699a      	ldr	r2, [r3, #24]
 801451c:	187b      	adds	r3, r7, r1
 801451e:	881b      	ldrh	r3, [r3, #0]
 8014520:	1ad2      	subs	r2, r2, r3
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	619a      	str	r2, [r3, #24]
 8014526:	e002      	b.n	801452e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	2200      	movs	r2, #0
 801452c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	699b      	ldr	r3, [r3, #24]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d121      	bne.n	801457a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	001a      	movs	r2, r3
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	009b      	lsls	r3, r3, #2
 8014542:	18d3      	adds	r3, r2, r3
 8014544:	881b      	ldrh	r3, [r3, #0]
 8014546:	b29a      	uxth	r2, r3
 8014548:	2018      	movs	r0, #24
 801454a:	183b      	adds	r3, r7, r0
 801454c:	4966      	ldr	r1, [pc, #408]	@ (80146e8 <HAL_PCD_EP_DB_Receive+0x224>)
 801454e:	400a      	ands	r2, r1
 8014550:	801a      	strh	r2, [r3, #0]
 8014552:	183b      	adds	r3, r7, r0
 8014554:	183a      	adds	r2, r7, r0
 8014556:	8812      	ldrh	r2, [r2, #0]
 8014558:	2180      	movs	r1, #128	@ 0x80
 801455a:	0189      	lsls	r1, r1, #6
 801455c:	404a      	eors	r2, r1
 801455e:	801a      	strh	r2, [r3, #0]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	001a      	movs	r2, r3
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	18d3      	adds	r3, r2, r3
 801456e:	183a      	adds	r2, r7, r0
 8014570:	8812      	ldrh	r2, [r2, #0]
 8014572:	495e      	ldr	r1, [pc, #376]	@ (80146ec <HAL_PCD_EP_DB_Receive+0x228>)
 8014574:	430a      	orrs	r2, r1
 8014576:	b292      	uxth	r2, r2
 8014578:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801457a:	1dbb      	adds	r3, r7, #6
 801457c:	881b      	ldrh	r3, [r3, #0]
 801457e:	2240      	movs	r2, #64	@ 0x40
 8014580:	4013      	ands	r3, r2
 8014582:	d01a      	beq.n	80145ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	001a      	movs	r2, r3
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	009b      	lsls	r3, r3, #2
 8014590:	18d3      	adds	r3, r2, r3
 8014592:	881b      	ldrh	r3, [r3, #0]
 8014594:	b29a      	uxth	r2, r3
 8014596:	2016      	movs	r0, #22
 8014598:	183b      	adds	r3, r7, r0
 801459a:	4955      	ldr	r1, [pc, #340]	@ (80146f0 <HAL_PCD_EP_DB_Receive+0x22c>)
 801459c:	400a      	ands	r2, r1
 801459e:	801a      	strh	r2, [r3, #0]
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	001a      	movs	r2, r3
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	009b      	lsls	r3, r3, #2
 80145ac:	18d3      	adds	r3, r2, r3
 80145ae:	183a      	adds	r2, r7, r0
 80145b0:	8812      	ldrh	r2, [r2, #0]
 80145b2:	4950      	ldr	r1, [pc, #320]	@ (80146f4 <HAL_PCD_EP_DB_Receive+0x230>)
 80145b4:	430a      	orrs	r2, r1
 80145b6:	b292      	uxth	r2, r2
 80145b8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80145ba:	241a      	movs	r4, #26
 80145bc:	193b      	adds	r3, r7, r4
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d100      	bne.n	80145c6 <HAL_PCD_EP_DB_Receive+0x102>
 80145c4:	e086      	b.n	80146d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	6818      	ldr	r0, [r3, #0]
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	6959      	ldr	r1, [r3, #20]
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	891a      	ldrh	r2, [r3, #8]
 80145d2:	193b      	adds	r3, r7, r4
 80145d4:	881b      	ldrh	r3, [r3, #0]
 80145d6:	f006 fe50 	bl	801b27a <USB_ReadPMA>
 80145da:	e07b      	b.n	80146d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	2250      	movs	r2, #80	@ 0x50
 80145e2:	5a9b      	ldrh	r3, [r3, r2]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	001a      	movs	r2, r3
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	18d2      	adds	r2, r2, r3
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	18d3      	adds	r3, r2, r3
 80145f6:	4a40      	ldr	r2, [pc, #256]	@ (80146f8 <HAL_PCD_EP_DB_Receive+0x234>)
 80145f8:	4694      	mov	ip, r2
 80145fa:	4463      	add	r3, ip
 80145fc:	881a      	ldrh	r2, [r3, #0]
 80145fe:	211a      	movs	r1, #26
 8014600:	187b      	adds	r3, r7, r1
 8014602:	0592      	lsls	r2, r2, #22
 8014604:	0d92      	lsrs	r2, r2, #22
 8014606:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	699a      	ldr	r2, [r3, #24]
 801460c:	187b      	adds	r3, r7, r1
 801460e:	881b      	ldrh	r3, [r3, #0]
 8014610:	429a      	cmp	r2, r3
 8014612:	d307      	bcc.n	8014624 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	699a      	ldr	r2, [r3, #24]
 8014618:	187b      	adds	r3, r7, r1
 801461a:	881b      	ldrh	r3, [r3, #0]
 801461c:	1ad2      	subs	r2, r2, r3
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	619a      	str	r2, [r3, #24]
 8014622:	e002      	b.n	801462a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	2200      	movs	r2, #0
 8014628:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	699b      	ldr	r3, [r3, #24]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d121      	bne.n	8014676 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	001a      	movs	r2, r3
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	18d3      	adds	r3, r2, r3
 8014640:	881b      	ldrh	r3, [r3, #0]
 8014642:	b29a      	uxth	r2, r3
 8014644:	201e      	movs	r0, #30
 8014646:	183b      	adds	r3, r7, r0
 8014648:	4927      	ldr	r1, [pc, #156]	@ (80146e8 <HAL_PCD_EP_DB_Receive+0x224>)
 801464a:	400a      	ands	r2, r1
 801464c:	801a      	strh	r2, [r3, #0]
 801464e:	183b      	adds	r3, r7, r0
 8014650:	183a      	adds	r2, r7, r0
 8014652:	8812      	ldrh	r2, [r2, #0]
 8014654:	2180      	movs	r1, #128	@ 0x80
 8014656:	0189      	lsls	r1, r1, #6
 8014658:	404a      	eors	r2, r1
 801465a:	801a      	strh	r2, [r3, #0]
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	001a      	movs	r2, r3
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	009b      	lsls	r3, r3, #2
 8014668:	18d3      	adds	r3, r2, r3
 801466a:	183a      	adds	r2, r7, r0
 801466c:	8812      	ldrh	r2, [r2, #0]
 801466e:	491f      	ldr	r1, [pc, #124]	@ (80146ec <HAL_PCD_EP_DB_Receive+0x228>)
 8014670:	430a      	orrs	r2, r1
 8014672:	b292      	uxth	r2, r2
 8014674:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014676:	1dbb      	adds	r3, r7, #6
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	2240      	movs	r2, #64	@ 0x40
 801467c:	4013      	ands	r3, r2
 801467e:	d11a      	bne.n	80146b6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	001a      	movs	r2, r3
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	18d3      	adds	r3, r2, r3
 801468e:	881b      	ldrh	r3, [r3, #0]
 8014690:	b29a      	uxth	r2, r3
 8014692:	201c      	movs	r0, #28
 8014694:	183b      	adds	r3, r7, r0
 8014696:	4916      	ldr	r1, [pc, #88]	@ (80146f0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014698:	400a      	ands	r2, r1
 801469a:	801a      	strh	r2, [r3, #0]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	001a      	movs	r2, r3
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	18d3      	adds	r3, r2, r3
 80146aa:	183a      	adds	r2, r7, r0
 80146ac:	8812      	ldrh	r2, [r2, #0]
 80146ae:	4911      	ldr	r1, [pc, #68]	@ (80146f4 <HAL_PCD_EP_DB_Receive+0x230>)
 80146b0:	430a      	orrs	r2, r1
 80146b2:	b292      	uxth	r2, r2
 80146b4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80146b6:	241a      	movs	r4, #26
 80146b8:	193b      	adds	r3, r7, r4
 80146ba:	881b      	ldrh	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d009      	beq.n	80146d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6818      	ldr	r0, [r3, #0]
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	6959      	ldr	r1, [r3, #20]
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	895a      	ldrh	r2, [r3, #10]
 80146cc:	193b      	adds	r3, r7, r4
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	f006 fdd3 	bl	801b27a <USB_ReadPMA>
    }
  }

  return count;
 80146d4:	231a      	movs	r3, #26
 80146d6:	18fb      	adds	r3, r7, r3
 80146d8:	881b      	ldrh	r3, [r3, #0]
}
 80146da:	0018      	movs	r0, r3
 80146dc:	46bd      	mov	sp, r7
 80146de:	b009      	add	sp, #36	@ 0x24
 80146e0:	bd90      	pop	{r4, r7, pc}
 80146e2:	46c0      	nop			@ (mov r8, r8)
 80146e4:	00000402 	.word	0x00000402
 80146e8:	ffffbf8f 	.word	0xffffbf8f
 80146ec:	ffff8080 	.word	0xffff8080
 80146f0:	ffff8f8f 	.word	0xffff8f8f
 80146f4:	ffff80c0 	.word	0xffff80c0
 80146f8:	00000406 	.word	0x00000406

080146fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b0a4      	sub	sp, #144	@ 0x90
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	1dbb      	adds	r3, r7, #6
 8014708:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801470a:	1dbb      	adds	r3, r7, #6
 801470c:	881b      	ldrh	r3, [r3, #0]
 801470e:	2240      	movs	r2, #64	@ 0x40
 8014710:	4013      	ands	r3, r2
 8014712:	d100      	bne.n	8014716 <HAL_PCD_EP_DB_Transmit+0x1a>
 8014714:	e1e4      	b.n	8014ae0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	2250      	movs	r2, #80	@ 0x50
 801471c:	5a9b      	ldrh	r3, [r3, r2]
 801471e:	b29b      	uxth	r3, r3
 8014720:	001a      	movs	r2, r3
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	00db      	lsls	r3, r3, #3
 8014728:	18d2      	adds	r2, r2, r3
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	18d3      	adds	r3, r2, r3
 8014730:	4ad0      	ldr	r2, [pc, #832]	@ (8014a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014732:	4694      	mov	ip, r2
 8014734:	4463      	add	r3, ip
 8014736:	881a      	ldrh	r2, [r3, #0]
 8014738:	2186      	movs	r1, #134	@ 0x86
 801473a:	187b      	adds	r3, r7, r1
 801473c:	0592      	lsls	r2, r2, #22
 801473e:	0d92      	lsrs	r2, r2, #22
 8014740:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	699a      	ldr	r2, [r3, #24]
 8014746:	187b      	adds	r3, r7, r1
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	429a      	cmp	r2, r3
 801474c:	d907      	bls.n	801475e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	699a      	ldr	r2, [r3, #24]
 8014752:	187b      	adds	r3, r7, r1
 8014754:	881b      	ldrh	r3, [r3, #0]
 8014756:	1ad2      	subs	r2, r2, r3
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	619a      	str	r2, [r3, #24]
 801475c:	e002      	b.n	8014764 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	2200      	movs	r2, #0
 8014762:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	699b      	ldr	r3, [r3, #24]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d000      	beq.n	801476e <HAL_PCD_EP_DB_Transmit+0x72>
 801476c:	e0b5      	b.n	80148da <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	785b      	ldrb	r3, [r3, #1]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d125      	bne.n	80147c2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2250      	movs	r2, #80	@ 0x50
 8014782:	5a9b      	ldrh	r3, [r3, r2]
 8014784:	b29b      	uxth	r3, r3
 8014786:	001a      	movs	r2, r3
 8014788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801478a:	189b      	adds	r3, r3, r2
 801478c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	00da      	lsls	r2, r3, #3
 8014794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014796:	18d3      	adds	r3, r2, r3
 8014798:	4ab6      	ldr	r2, [pc, #728]	@ (8014a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 801479a:	4694      	mov	ip, r2
 801479c:	4463      	add	r3, ip
 801479e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80147a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147a2:	881b      	ldrh	r3, [r3, #0]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	059b      	lsls	r3, r3, #22
 80147a8:	0d9b      	lsrs	r3, r3, #22
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147ae:	801a      	strh	r2, [r3, #0]
 80147b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147b2:	881b      	ldrh	r3, [r3, #0]
 80147b4:	b29b      	uxth	r3, r3
 80147b6:	4ab0      	ldr	r2, [pc, #704]	@ (8014a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80147b8:	4313      	orrs	r3, r2
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147be:	801a      	strh	r2, [r3, #0]
 80147c0:	e01b      	b.n	80147fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	785b      	ldrb	r3, [r3, #1]
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d117      	bne.n	80147fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2250      	movs	r2, #80	@ 0x50
 80147d6:	5a9b      	ldrh	r3, [r3, r2]
 80147d8:	b29b      	uxth	r3, r3
 80147da:	001a      	movs	r2, r3
 80147dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147de:	189b      	adds	r3, r3, r2
 80147e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	00da      	lsls	r2, r3, #3
 80147e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147ea:	18d3      	adds	r3, r2, r3
 80147ec:	4aa1      	ldr	r2, [pc, #644]	@ (8014a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 80147ee:	4694      	mov	ip, r2
 80147f0:	4463      	add	r3, ip
 80147f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80147f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147f6:	2200      	movs	r2, #0
 80147f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	785b      	ldrb	r3, [r3, #1]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d125      	bne.n	8014854 <HAL_PCD_EP_DB_Transmit+0x158>
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	61fb      	str	r3, [r7, #28]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2250      	movs	r2, #80	@ 0x50
 8014814:	5a9b      	ldrh	r3, [r3, r2]
 8014816:	b29b      	uxth	r3, r3
 8014818:	001a      	movs	r2, r3
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	189b      	adds	r3, r3, r2
 801481e:	61fb      	str	r3, [r7, #28]
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	00da      	lsls	r2, r3, #3
 8014826:	69fb      	ldr	r3, [r7, #28]
 8014828:	18d3      	adds	r3, r2, r3
 801482a:	4a94      	ldr	r2, [pc, #592]	@ (8014a7c <HAL_PCD_EP_DB_Transmit+0x380>)
 801482c:	4694      	mov	ip, r2
 801482e:	4463      	add	r3, ip
 8014830:	61bb      	str	r3, [r7, #24]
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	881b      	ldrh	r3, [r3, #0]
 8014836:	b29b      	uxth	r3, r3
 8014838:	059b      	lsls	r3, r3, #22
 801483a:	0d9b      	lsrs	r3, r3, #22
 801483c:	b29a      	uxth	r2, r3
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	801a      	strh	r2, [r3, #0]
 8014842:	69bb      	ldr	r3, [r7, #24]
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	b29b      	uxth	r3, r3
 8014848:	4a8b      	ldr	r2, [pc, #556]	@ (8014a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801484a:	4313      	orrs	r3, r2
 801484c:	b29a      	uxth	r2, r3
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	801a      	strh	r2, [r3, #0]
 8014852:	e018      	b.n	8014886 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	785b      	ldrb	r3, [r3, #1]
 8014858:	2b01      	cmp	r3, #1
 801485a:	d114      	bne.n	8014886 <HAL_PCD_EP_DB_Transmit+0x18a>
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2250      	movs	r2, #80	@ 0x50
 8014862:	5a9b      	ldrh	r3, [r3, r2]
 8014864:	b29b      	uxth	r3, r3
 8014866:	001a      	movs	r2, r3
 8014868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801486a:	189b      	adds	r3, r3, r2
 801486c:	627b      	str	r3, [r7, #36]	@ 0x24
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	781b      	ldrb	r3, [r3, #0]
 8014872:	00da      	lsls	r2, r3, #3
 8014874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014876:	18d3      	adds	r3, r2, r3
 8014878:	4a80      	ldr	r2, [pc, #512]	@ (8014a7c <HAL_PCD_EP_DB_Transmit+0x380>)
 801487a:	4694      	mov	ip, r2
 801487c:	4463      	add	r3, ip
 801487e:	623b      	str	r3, [r7, #32]
 8014880:	6a3b      	ldr	r3, [r7, #32]
 8014882:	2200      	movs	r2, #0
 8014884:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	781a      	ldrb	r2, [r3, #0]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	0011      	movs	r1, r2
 801488e:	0018      	movs	r0, r3
 8014890:	f008 fd2e 	bl	801d2f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014894:	1dbb      	adds	r3, r7, #6
 8014896:	881a      	ldrh	r2, [r3, #0]
 8014898:	2380      	movs	r3, #128	@ 0x80
 801489a:	01db      	lsls	r3, r3, #7
 801489c:	4013      	ands	r3, r2
 801489e:	d100      	bne.n	80148a2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80148a0:	e309      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	001a      	movs	r2, r3
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	18d3      	adds	r3, r2, r3
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	b29a      	uxth	r2, r3
 80148b4:	2016      	movs	r0, #22
 80148b6:	183b      	adds	r3, r7, r0
 80148b8:	4971      	ldr	r1, [pc, #452]	@ (8014a80 <HAL_PCD_EP_DB_Transmit+0x384>)
 80148ba:	400a      	ands	r2, r1
 80148bc:	801a      	strh	r2, [r3, #0]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	001a      	movs	r2, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	18d3      	adds	r3, r2, r3
 80148cc:	183a      	adds	r2, r7, r0
 80148ce:	8812      	ldrh	r2, [r2, #0]
 80148d0:	496c      	ldr	r1, [pc, #432]	@ (8014a84 <HAL_PCD_EP_DB_Transmit+0x388>)
 80148d2:	430a      	orrs	r2, r1
 80148d4:	b292      	uxth	r2, r2
 80148d6:	801a      	strh	r2, [r3, #0]
 80148d8:	e2ed      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80148da:	1dbb      	adds	r3, r7, #6
 80148dc:	881a      	ldrh	r2, [r3, #0]
 80148de:	2380      	movs	r3, #128	@ 0x80
 80148e0:	01db      	lsls	r3, r3, #7
 80148e2:	4013      	ands	r3, r2
 80148e4:	d01a      	beq.n	801491c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	001a      	movs	r2, r3
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	18d3      	adds	r3, r2, r3
 80148f4:	881b      	ldrh	r3, [r3, #0]
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	208a      	movs	r0, #138	@ 0x8a
 80148fa:	183b      	adds	r3, r7, r0
 80148fc:	4960      	ldr	r1, [pc, #384]	@ (8014a80 <HAL_PCD_EP_DB_Transmit+0x384>)
 80148fe:	400a      	ands	r2, r1
 8014900:	801a      	strh	r2, [r3, #0]
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	001a      	movs	r2, r3
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	18d3      	adds	r3, r2, r3
 8014910:	183a      	adds	r2, r7, r0
 8014912:	8812      	ldrh	r2, [r2, #0]
 8014914:	495b      	ldr	r1, [pc, #364]	@ (8014a84 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014916:	430a      	orrs	r2, r1
 8014918:	b292      	uxth	r2, r2
 801491a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	2224      	movs	r2, #36	@ 0x24
 8014920:	5c9b      	ldrb	r3, [r3, r2]
 8014922:	2b01      	cmp	r3, #1
 8014924:	d000      	beq.n	8014928 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014926:	e2c6      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	695a      	ldr	r2, [r3, #20]
 801492c:	2186      	movs	r1, #134	@ 0x86
 801492e:	187b      	adds	r3, r7, r1
 8014930:	881b      	ldrh	r3, [r3, #0]
 8014932:	18d2      	adds	r2, r2, r3
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	69da      	ldr	r2, [r3, #28]
 801493c:	187b      	adds	r3, r7, r1
 801493e:	881b      	ldrh	r3, [r3, #0]
 8014940:	18d2      	adds	r2, r2, r3
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	6a1a      	ldr	r2, [r3, #32]
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	691b      	ldr	r3, [r3, #16]
 801494e:	429a      	cmp	r2, r3
 8014950:	d30c      	bcc.n	801496c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	691b      	ldr	r3, [r3, #16]
 8014956:	218c      	movs	r1, #140	@ 0x8c
 8014958:	187a      	adds	r2, r7, r1
 801495a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	6a1a      	ldr	r2, [r3, #32]
 8014960:	187b      	adds	r3, r7, r1
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	1ad2      	subs	r2, r2, r3
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	621a      	str	r2, [r3, #32]
 801496a:	e01a      	b.n	80149a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	6a1b      	ldr	r3, [r3, #32]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d10a      	bne.n	801498a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014974:	2386      	movs	r3, #134	@ 0x86
 8014976:	18fb      	adds	r3, r7, r3
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	228c      	movs	r2, #140	@ 0x8c
 801497c:	18ba      	adds	r2, r7, r2
 801497e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	2224      	movs	r2, #36	@ 0x24
 8014984:	2100      	movs	r1, #0
 8014986:	5499      	strb	r1, [r3, r2]
 8014988:	e00b      	b.n	80149a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	2224      	movs	r2, #36	@ 0x24
 801498e:	2100      	movs	r1, #0
 8014990:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	6a1b      	ldr	r3, [r3, #32]
 8014996:	228c      	movs	r2, #140	@ 0x8c
 8014998:	18ba      	adds	r2, r7, r2
 801499a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	2200      	movs	r2, #0
 80149a0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	785b      	ldrb	r3, [r3, #1]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d000      	beq.n	80149ac <HAL_PCD_EP_DB_Transmit+0x2b0>
 80149aa:	e06d      	b.n	8014a88 <HAL_PCD_EP_DB_Transmit+0x38c>
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2250      	movs	r2, #80	@ 0x50
 80149b8:	5a9b      	ldrh	r3, [r3, r2]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	001a      	movs	r2, r3
 80149be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149c0:	189b      	adds	r3, r3, r2
 80149c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	00da      	lsls	r2, r3, #3
 80149ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149cc:	18d3      	adds	r3, r2, r3
 80149ce:	4a29      	ldr	r2, [pc, #164]	@ (8014a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 80149d0:	4694      	mov	ip, r2
 80149d2:	4463      	add	r3, ip
 80149d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80149d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	059b      	lsls	r3, r3, #22
 80149de:	0d9b      	lsrs	r3, r3, #22
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149e4:	801a      	strh	r2, [r3, #0]
 80149e6:	228c      	movs	r2, #140	@ 0x8c
 80149e8:	18bb      	adds	r3, r7, r2
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80149ee:	d91a      	bls.n	8014a26 <HAL_PCD_EP_DB_Transmit+0x32a>
 80149f0:	18bb      	adds	r3, r7, r2
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	095b      	lsrs	r3, r3, #5
 80149f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80149f8:	18bb      	adds	r3, r7, r2
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	221f      	movs	r2, #31
 80149fe:	4013      	ands	r3, r2
 8014a00:	d102      	bne.n	8014a08 <HAL_PCD_EP_DB_Transmit+0x30c>
 8014a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a04:	3b01      	subs	r3, #1
 8014a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a0a:	881b      	ldrh	r3, [r3, #0]
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	029b      	lsls	r3, r3, #10
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	4313      	orrs	r3, r2
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	4a17      	ldr	r2, [pc, #92]	@ (8014a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014a1c:	4313      	orrs	r3, r2
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a22:	801a      	strh	r2, [r3, #0]
 8014a24:	e04f      	b.n	8014ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a26:	238c      	movs	r3, #140	@ 0x8c
 8014a28:	18fb      	adds	r3, r7, r3
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d108      	bne.n	8014a42 <HAL_PCD_EP_DB_Transmit+0x346>
 8014a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a32:	881b      	ldrh	r3, [r3, #0]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	4a10      	ldr	r2, [pc, #64]	@ (8014a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014a38:	4313      	orrs	r3, r2
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a3e:	801a      	strh	r2, [r3, #0]
 8014a40:	e041      	b.n	8014ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a42:	228c      	movs	r2, #140	@ 0x8c
 8014a44:	18bb      	adds	r3, r7, r2
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	085b      	lsrs	r3, r3, #1
 8014a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a4c:	18bb      	adds	r3, r7, r2
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2201      	movs	r2, #1
 8014a52:	4013      	ands	r3, r2
 8014a54:	d002      	beq.n	8014a5c <HAL_PCD_EP_DB_Transmit+0x360>
 8014a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a58:	3301      	adds	r3, #1
 8014a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a5e:	881b      	ldrh	r3, [r3, #0]
 8014a60:	b29a      	uxth	r2, r3
 8014a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a64:	b29b      	uxth	r3, r3
 8014a66:	029b      	lsls	r3, r3, #10
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	4313      	orrs	r3, r2
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a70:	801a      	strh	r2, [r3, #0]
 8014a72:	e028      	b.n	8014ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a74:	00000402 	.word	0x00000402
 8014a78:	ffff8000 	.word	0xffff8000
 8014a7c:	00000406 	.word	0x00000406
 8014a80:	ffff8f8f 	.word	0xffff8f8f
 8014a84:	ffffc080 	.word	0xffffc080
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	785b      	ldrb	r3, [r3, #1]
 8014a8c:	2b01      	cmp	r3, #1
 8014a8e:	d11a      	bne.n	8014ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	2250      	movs	r2, #80	@ 0x50
 8014a9c:	5a9b      	ldrh	r3, [r3, r2]
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	001a      	movs	r2, r3
 8014aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014aa4:	189b      	adds	r3, r3, r2
 8014aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	00da      	lsls	r2, r3, #3
 8014aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ab0:	18d3      	adds	r3, r2, r3
 8014ab2:	4adb      	ldr	r2, [pc, #876]	@ (8014e20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014ab4:	4694      	mov	ip, r2
 8014ab6:	4463      	add	r3, ip
 8014ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8014aba:	238c      	movs	r3, #140	@ 0x8c
 8014abc:	18fb      	adds	r3, r7, r3
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ac4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	6818      	ldr	r0, [r3, #0]
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	6959      	ldr	r1, [r3, #20]
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	891a      	ldrh	r2, [r3, #8]
 8014ad2:	238c      	movs	r3, #140	@ 0x8c
 8014ad4:	18fb      	adds	r3, r7, r3
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	f006 fb85 	bl	801b1e8 <USB_WritePMA>
 8014ade:	e1ea      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2250      	movs	r2, #80	@ 0x50
 8014ae6:	5a9b      	ldrh	r3, [r3, r2]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	001a      	movs	r2, r3
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	18d2      	adds	r2, r2, r3
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	18d3      	adds	r3, r2, r3
 8014afa:	4aca      	ldr	r2, [pc, #808]	@ (8014e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014afc:	4694      	mov	ip, r2
 8014afe:	4463      	add	r3, ip
 8014b00:	881a      	ldrh	r2, [r3, #0]
 8014b02:	2186      	movs	r1, #134	@ 0x86
 8014b04:	187b      	adds	r3, r7, r1
 8014b06:	0592      	lsls	r2, r2, #22
 8014b08:	0d92      	lsrs	r2, r2, #22
 8014b0a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	699a      	ldr	r2, [r3, #24]
 8014b10:	187b      	adds	r3, r7, r1
 8014b12:	881b      	ldrh	r3, [r3, #0]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d307      	bcc.n	8014b28 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	699a      	ldr	r2, [r3, #24]
 8014b1c:	187b      	adds	r3, r7, r1
 8014b1e:	881b      	ldrh	r3, [r3, #0]
 8014b20:	1ad2      	subs	r2, r2, r3
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	619a      	str	r2, [r3, #24]
 8014b26:	e002      	b.n	8014b2e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	699b      	ldr	r3, [r3, #24]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d000      	beq.n	8014b38 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014b36:	e0bb      	b.n	8014cb0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	785b      	ldrb	r3, [r3, #1]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d125      	bne.n	8014b8c <HAL_PCD_EP_DB_Transmit+0x490>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	2250      	movs	r2, #80	@ 0x50
 8014b4c:	5a9b      	ldrh	r3, [r3, r2]
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	001a      	movs	r2, r3
 8014b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b54:	189b      	adds	r3, r3, r2
 8014b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	00da      	lsls	r2, r3, #3
 8014b5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b60:	18d3      	adds	r3, r2, r3
 8014b62:	4aaf      	ldr	r2, [pc, #700]	@ (8014e20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014b64:	4694      	mov	ip, r2
 8014b66:	4463      	add	r3, ip
 8014b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014b6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	059b      	lsls	r3, r3, #22
 8014b72:	0d9b      	lsrs	r3, r3, #22
 8014b74:	b29a      	uxth	r2, r3
 8014b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b78:	801a      	strh	r2, [r3, #0]
 8014b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b7c:	881b      	ldrh	r3, [r3, #0]
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	4aa9      	ldr	r2, [pc, #676]	@ (8014e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014b82:	4313      	orrs	r3, r2
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b88:	801a      	strh	r2, [r3, #0]
 8014b8a:	e01b      	b.n	8014bc4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	785b      	ldrb	r3, [r3, #1]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d117      	bne.n	8014bc4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	2250      	movs	r2, #80	@ 0x50
 8014ba0:	5a9b      	ldrh	r3, [r3, r2]
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	001a      	movs	r2, r3
 8014ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014ba8:	189b      	adds	r3, r3, r2
 8014baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	00da      	lsls	r2, r3, #3
 8014bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014bb4:	18d3      	adds	r3, r2, r3
 8014bb6:	4a9a      	ldr	r2, [pc, #616]	@ (8014e20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014bb8:	4694      	mov	ip, r2
 8014bba:	4463      	add	r3, ip
 8014bbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8014bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	785b      	ldrb	r3, [r3, #1]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d12b      	bne.n	8014c2a <HAL_PCD_EP_DB_Transmit+0x52e>
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2250      	movs	r2, #80	@ 0x50
 8014bde:	5a9b      	ldrh	r3, [r3, r2]
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	001a      	movs	r2, r3
 8014be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014be6:	189b      	adds	r3, r3, r2
 8014be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	00da      	lsls	r2, r3, #3
 8014bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014bf2:	18d3      	adds	r3, r2, r3
 8014bf4:	4a8b      	ldr	r2, [pc, #556]	@ (8014e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014bf6:	4694      	mov	ip, r2
 8014bf8:	4463      	add	r3, ip
 8014bfa:	2180      	movs	r1, #128	@ 0x80
 8014bfc:	187a      	adds	r2, r7, r1
 8014bfe:	6013      	str	r3, [r2, #0]
 8014c00:	187b      	adds	r3, r7, r1
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	059b      	lsls	r3, r3, #22
 8014c0a:	0d9b      	lsrs	r3, r3, #22
 8014c0c:	b29a      	uxth	r2, r3
 8014c0e:	187b      	adds	r3, r7, r1
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	801a      	strh	r2, [r3, #0]
 8014c14:	187b      	adds	r3, r7, r1
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	4a82      	ldr	r2, [pc, #520]	@ (8014e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014c1e:	4313      	orrs	r3, r2
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	187b      	adds	r3, r7, r1
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	801a      	strh	r2, [r3, #0]
 8014c28:	e018      	b.n	8014c5c <HAL_PCD_EP_DB_Transmit+0x560>
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	785b      	ldrb	r3, [r3, #1]
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d114      	bne.n	8014c5c <HAL_PCD_EP_DB_Transmit+0x560>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2250      	movs	r2, #80	@ 0x50
 8014c38:	5a9b      	ldrh	r3, [r3, r2]
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	001a      	movs	r2, r3
 8014c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014c40:	189b      	adds	r3, r3, r2
 8014c42:	677b      	str	r3, [r7, #116]	@ 0x74
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	00da      	lsls	r2, r3, #3
 8014c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014c4c:	18d3      	adds	r3, r2, r3
 8014c4e:	4a75      	ldr	r2, [pc, #468]	@ (8014e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014c50:	4694      	mov	ip, r2
 8014c52:	4463      	add	r3, ip
 8014c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8014c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014c58:	2200      	movs	r2, #0
 8014c5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	781a      	ldrb	r2, [r3, #0]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	0011      	movs	r1, r2
 8014c64:	0018      	movs	r0, r3
 8014c66:	f008 fb43 	bl	801d2f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014c6a:	1dbb      	adds	r3, r7, #6
 8014c6c:	881a      	ldrh	r2, [r3, #0]
 8014c6e:	2380      	movs	r3, #128	@ 0x80
 8014c70:	01db      	lsls	r3, r3, #7
 8014c72:	4013      	ands	r3, r2
 8014c74:	d000      	beq.n	8014c78 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014c76:	e11e      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	001a      	movs	r2, r3
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	18d3      	adds	r3, r2, r3
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	2088      	movs	r0, #136	@ 0x88
 8014c8c:	183b      	adds	r3, r7, r0
 8014c8e:	4967      	ldr	r1, [pc, #412]	@ (8014e2c <HAL_PCD_EP_DB_Transmit+0x730>)
 8014c90:	400a      	ands	r2, r1
 8014c92:	801a      	strh	r2, [r3, #0]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	001a      	movs	r2, r3
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	18d3      	adds	r3, r2, r3
 8014ca2:	183a      	adds	r2, r7, r0
 8014ca4:	8812      	ldrh	r2, [r2, #0]
 8014ca6:	4962      	ldr	r1, [pc, #392]	@ (8014e30 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014ca8:	430a      	orrs	r2, r1
 8014caa:	b292      	uxth	r2, r2
 8014cac:	801a      	strh	r2, [r3, #0]
 8014cae:	e102      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014cb0:	1dbb      	adds	r3, r7, #6
 8014cb2:	881a      	ldrh	r2, [r3, #0]
 8014cb4:	2380      	movs	r3, #128	@ 0x80
 8014cb6:	01db      	lsls	r3, r3, #7
 8014cb8:	4013      	ands	r3, r2
 8014cba:	d11a      	bne.n	8014cf2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	001a      	movs	r2, r3
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	18d3      	adds	r3, r2, r3
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	204e      	movs	r0, #78	@ 0x4e
 8014cd0:	183b      	adds	r3, r7, r0
 8014cd2:	4956      	ldr	r1, [pc, #344]	@ (8014e2c <HAL_PCD_EP_DB_Transmit+0x730>)
 8014cd4:	400a      	ands	r2, r1
 8014cd6:	801a      	strh	r2, [r3, #0]
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	001a      	movs	r2, r3
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	009b      	lsls	r3, r3, #2
 8014ce4:	18d3      	adds	r3, r2, r3
 8014ce6:	183a      	adds	r2, r7, r0
 8014ce8:	8812      	ldrh	r2, [r2, #0]
 8014cea:	4951      	ldr	r1, [pc, #324]	@ (8014e30 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014cec:	430a      	orrs	r2, r1
 8014cee:	b292      	uxth	r2, r2
 8014cf0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	2224      	movs	r2, #36	@ 0x24
 8014cf6:	5c9b      	ldrb	r3, [r3, r2]
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d000      	beq.n	8014cfe <HAL_PCD_EP_DB_Transmit+0x602>
 8014cfc:	e0db      	b.n	8014eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	695a      	ldr	r2, [r3, #20]
 8014d02:	2186      	movs	r1, #134	@ 0x86
 8014d04:	187b      	adds	r3, r7, r1
 8014d06:	881b      	ldrh	r3, [r3, #0]
 8014d08:	18d2      	adds	r2, r2, r3
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	69da      	ldr	r2, [r3, #28]
 8014d12:	187b      	adds	r3, r7, r1
 8014d14:	881b      	ldrh	r3, [r3, #0]
 8014d16:	18d2      	adds	r2, r2, r3
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	6a1a      	ldr	r2, [r3, #32]
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	691b      	ldr	r3, [r3, #16]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d30c      	bcc.n	8014d42 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	691b      	ldr	r3, [r3, #16]
 8014d2c:	218c      	movs	r1, #140	@ 0x8c
 8014d2e:	187a      	adds	r2, r7, r1
 8014d30:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	6a1a      	ldr	r2, [r3, #32]
 8014d36:	187b      	adds	r3, r7, r1
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	1ad2      	subs	r2, r2, r3
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	621a      	str	r2, [r3, #32]
 8014d40:	e01a      	b.n	8014d78 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	6a1b      	ldr	r3, [r3, #32]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d10a      	bne.n	8014d60 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014d4a:	2386      	movs	r3, #134	@ 0x86
 8014d4c:	18fb      	adds	r3, r7, r3
 8014d4e:	881b      	ldrh	r3, [r3, #0]
 8014d50:	228c      	movs	r2, #140	@ 0x8c
 8014d52:	18ba      	adds	r2, r7, r2
 8014d54:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2224      	movs	r2, #36	@ 0x24
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	5499      	strb	r1, [r3, r2]
 8014d5e:	e00b      	b.n	8014d78 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	6a1b      	ldr	r3, [r3, #32]
 8014d64:	228c      	movs	r2, #140	@ 0x8c
 8014d66:	18ba      	adds	r2, r7, r2
 8014d68:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	2224      	movs	r2, #36	@ 0x24
 8014d74:	2100      	movs	r1, #0
 8014d76:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	785b      	ldrb	r3, [r3, #1]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d000      	beq.n	8014d88 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014d86:	e06e      	b.n	8014e66 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2250      	movs	r2, #80	@ 0x50
 8014d94:	5a9b      	ldrh	r3, [r3, r2]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	001a      	movs	r2, r3
 8014d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d9c:	189b      	adds	r3, r3, r2
 8014d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	781b      	ldrb	r3, [r3, #0]
 8014da4:	00da      	lsls	r2, r3, #3
 8014da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014da8:	18d3      	adds	r3, r2, r3
 8014daa:	4a1e      	ldr	r2, [pc, #120]	@ (8014e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014dac:	4694      	mov	ip, r2
 8014dae:	4463      	add	r3, ip
 8014db0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014db4:	881b      	ldrh	r3, [r3, #0]
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	059b      	lsls	r3, r3, #22
 8014dba:	0d9b      	lsrs	r3, r3, #22
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dc0:	801a      	strh	r2, [r3, #0]
 8014dc2:	228c      	movs	r2, #140	@ 0x8c
 8014dc4:	18bb      	adds	r3, r7, r2
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8014dca:	d91a      	bls.n	8014e02 <HAL_PCD_EP_DB_Transmit+0x706>
 8014dcc:	18bb      	adds	r3, r7, r2
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	095b      	lsrs	r3, r3, #5
 8014dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014dd4:	18bb      	adds	r3, r7, r2
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	221f      	movs	r2, #31
 8014dda:	4013      	ands	r3, r2
 8014ddc:	d102      	bne.n	8014de4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014de0:	3b01      	subs	r3, #1
 8014de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014de6:	881b      	ldrh	r3, [r3, #0]
 8014de8:	b29a      	uxth	r2, r3
 8014dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	029b      	lsls	r3, r3, #10
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	4313      	orrs	r3, r2
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	4a0c      	ldr	r2, [pc, #48]	@ (8014e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014df8:	4313      	orrs	r3, r2
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dfe:	801a      	strh	r2, [r3, #0]
 8014e00:	e04d      	b.n	8014e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e02:	238c      	movs	r3, #140	@ 0x8c
 8014e04:	18fb      	adds	r3, r7, r3
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d113      	bne.n	8014e34 <HAL_PCD_EP_DB_Transmit+0x738>
 8014e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	4a05      	ldr	r2, [pc, #20]	@ (8014e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014e14:	4313      	orrs	r3, r2
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e1a:	801a      	strh	r2, [r3, #0]
 8014e1c:	e03f      	b.n	8014e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e1e:	46c0      	nop			@ (mov r8, r8)
 8014e20:	00000402 	.word	0x00000402
 8014e24:	00000406 	.word	0x00000406
 8014e28:	ffff8000 	.word	0xffff8000
 8014e2c:	ffff8f8f 	.word	0xffff8f8f
 8014e30:	ffffc080 	.word	0xffffc080
 8014e34:	228c      	movs	r2, #140	@ 0x8c
 8014e36:	18bb      	adds	r3, r7, r2
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	085b      	lsrs	r3, r3, #1
 8014e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014e3e:	18bb      	adds	r3, r7, r2
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	2201      	movs	r2, #1
 8014e44:	4013      	ands	r3, r2
 8014e46:	d002      	beq.n	8014e4e <HAL_PCD_EP_DB_Transmit+0x752>
 8014e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014e4a:	3301      	adds	r3, #1
 8014e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014e4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e50:	881b      	ldrh	r3, [r3, #0]
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	029b      	lsls	r3, r3, #10
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	4313      	orrs	r3, r2
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e62:	801a      	strh	r2, [r3, #0]
 8014e64:	e01b      	b.n	8014e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	785b      	ldrb	r3, [r3, #1]
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d117      	bne.n	8014e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	2250      	movs	r2, #80	@ 0x50
 8014e74:	5a9b      	ldrh	r3, [r3, r2]
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	001a      	movs	r2, r3
 8014e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e7c:	189b      	adds	r3, r3, r2
 8014e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	781b      	ldrb	r3, [r3, #0]
 8014e84:	00da      	lsls	r2, r3, #3
 8014e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e88:	18d3      	adds	r3, r2, r3
 8014e8a:	4a21      	ldr	r2, [pc, #132]	@ (8014f10 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014e8c:	4694      	mov	ip, r2
 8014e8e:	4463      	add	r3, ip
 8014e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8014e92:	238c      	movs	r3, #140	@ 0x8c
 8014e94:	18fb      	adds	r3, r7, r3
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	6818      	ldr	r0, [r3, #0]
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	6959      	ldr	r1, [r3, #20]
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	895a      	ldrh	r2, [r3, #10]
 8014eaa:	238c      	movs	r3, #140	@ 0x8c
 8014eac:	18fb      	adds	r3, r7, r3
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	f006 f999 	bl	801b1e8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	001a      	movs	r2, r3
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	18d3      	adds	r3, r2, r3
 8014ec4:	881b      	ldrh	r3, [r3, #0]
 8014ec6:	b29a      	uxth	r2, r3
 8014ec8:	2014      	movs	r0, #20
 8014eca:	183b      	adds	r3, r7, r0
 8014ecc:	4911      	ldr	r1, [pc, #68]	@ (8014f14 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014ece:	400a      	ands	r2, r1
 8014ed0:	801a      	strh	r2, [r3, #0]
 8014ed2:	183b      	adds	r3, r7, r0
 8014ed4:	183a      	adds	r2, r7, r0
 8014ed6:	8812      	ldrh	r2, [r2, #0]
 8014ed8:	2110      	movs	r1, #16
 8014eda:	404a      	eors	r2, r1
 8014edc:	801a      	strh	r2, [r3, #0]
 8014ede:	183b      	adds	r3, r7, r0
 8014ee0:	183a      	adds	r2, r7, r0
 8014ee2:	8812      	ldrh	r2, [r2, #0]
 8014ee4:	2120      	movs	r1, #32
 8014ee6:	404a      	eors	r2, r1
 8014ee8:	801a      	strh	r2, [r3, #0]
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	001a      	movs	r2, r3
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	009b      	lsls	r3, r3, #2
 8014ef6:	18d3      	adds	r3, r2, r3
 8014ef8:	183a      	adds	r2, r7, r0
 8014efa:	8812      	ldrh	r2, [r2, #0]
 8014efc:	4906      	ldr	r1, [pc, #24]	@ (8014f18 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014efe:	430a      	orrs	r2, r1
 8014f00:	b292      	uxth	r2, r2
 8014f02:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014f04:	2300      	movs	r3, #0
}
 8014f06:	0018      	movs	r0, r3
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	b024      	add	sp, #144	@ 0x90
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	46c0      	nop			@ (mov r8, r8)
 8014f10:	00000406 	.word	0x00000406
 8014f14:	ffff8fbf 	.word	0xffff8fbf
 8014f18:	ffff8080 	.word	0xffff8080

08014f1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014f1c:	b590      	push	{r4, r7, lr}
 8014f1e:	b087      	sub	sp, #28
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	0008      	movs	r0, r1
 8014f26:	0011      	movs	r1, r2
 8014f28:	607b      	str	r3, [r7, #4]
 8014f2a:	240a      	movs	r4, #10
 8014f2c:	193b      	adds	r3, r7, r4
 8014f2e:	1c02      	adds	r2, r0, #0
 8014f30:	801a      	strh	r2, [r3, #0]
 8014f32:	2308      	movs	r3, #8
 8014f34:	18fb      	adds	r3, r7, r3
 8014f36:	1c0a      	adds	r2, r1, #0
 8014f38:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014f3a:	0021      	movs	r1, r4
 8014f3c:	187b      	adds	r3, r7, r1
 8014f3e:	881b      	ldrh	r3, [r3, #0]
 8014f40:	2280      	movs	r2, #128	@ 0x80
 8014f42:	4013      	ands	r3, r2
 8014f44:	b29b      	uxth	r3, r3
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d00c      	beq.n	8014f64 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014f4a:	187b      	adds	r3, r7, r1
 8014f4c:	881b      	ldrh	r3, [r3, #0]
 8014f4e:	2207      	movs	r2, #7
 8014f50:	4013      	ands	r3, r2
 8014f52:	1c5a      	adds	r2, r3, #1
 8014f54:	0013      	movs	r3, r2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	189b      	adds	r3, r3, r2
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	18d3      	adds	r3, r2, r3
 8014f60:	617b      	str	r3, [r7, #20]
 8014f62:	e00b      	b.n	8014f7c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014f64:	230a      	movs	r3, #10
 8014f66:	18fb      	adds	r3, r7, r3
 8014f68:	881a      	ldrh	r2, [r3, #0]
 8014f6a:	0013      	movs	r3, r2
 8014f6c:	009b      	lsls	r3, r3, #2
 8014f6e:	189b      	adds	r3, r3, r2
 8014f70:	00db      	lsls	r3, r3, #3
 8014f72:	3369      	adds	r3, #105	@ 0x69
 8014f74:	33ff      	adds	r3, #255	@ 0xff
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	18d3      	adds	r3, r2, r3
 8014f7a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014f7c:	2308      	movs	r3, #8
 8014f7e:	18fb      	adds	r3, r7, r3
 8014f80:	881b      	ldrh	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d107      	bne.n	8014f96 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	80da      	strh	r2, [r3, #6]
 8014f94:	e00b      	b.n	8014fae <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	2201      	movs	r2, #1
 8014f9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	b29a      	uxth	r2, r3
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	0c1b      	lsrs	r3, r3, #16
 8014fa8:	b29a      	uxth	r2, r3
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014fae:	2300      	movs	r3, #0
}
 8014fb0:	0018      	movs	r0, r3
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	b007      	add	sp, #28
 8014fb6:	bd90      	pop	{r4, r7, pc}

08014fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	23ba      	movs	r3, #186	@ 0xba
 8014fca:	009b      	lsls	r3, r3, #2
 8014fcc:	2101      	movs	r1, #1
 8014fce:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	23b8      	movs	r3, #184	@ 0xb8
 8014fd4:	009b      	lsls	r3, r3, #2
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2254      	movs	r2, #84	@ 0x54
 8014fde:	5a9b      	ldrh	r3, [r3, r2]
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	4313      	orrs	r3, r2
 8014fe6:	b299      	uxth	r1, r3
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2254      	movs	r2, #84	@ 0x54
 8014fec:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	2254      	movs	r2, #84	@ 0x54
 8014ff2:	5a9b      	ldrh	r3, [r3, r2]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	2202      	movs	r2, #2
 8014ff8:	4313      	orrs	r3, r2
 8014ffa:	b299      	uxth	r1, r3
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2254      	movs	r2, #84	@ 0x54
 8015000:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015002:	2300      	movs	r3, #0
}
 8015004:	0018      	movs	r0, r3
 8015006:	46bd      	mov	sp, r7
 8015008:	b004      	add	sp, #16
 801500a:	bd80      	pop	{r7, pc}

0801500c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	000a      	movs	r2, r1
 8015016:	1cfb      	adds	r3, r7, #3
 8015018:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801501a:	46c0      	nop			@ (mov r8, r8)
 801501c:	46bd      	mov	sp, r7
 801501e:	b002      	add	sp, #8
 8015020:	bd80      	pop	{r7, pc}
	...

08015024 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8015028:	4b04      	ldr	r3, [pc, #16]	@ (801503c <HAL_PWR_EnableBkUpAccess+0x18>)
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	4b03      	ldr	r3, [pc, #12]	@ (801503c <HAL_PWR_EnableBkUpAccess+0x18>)
 801502e:	2180      	movs	r1, #128	@ 0x80
 8015030:	0049      	lsls	r1, r1, #1
 8015032:	430a      	orrs	r2, r1
 8015034:	601a      	str	r2, [r3, #0]
}
 8015036:	46c0      	nop			@ (mov r8, r8)
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}
 801503c:	40007000 	.word	0x40007000

08015040 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8015044:	4b04      	ldr	r3, [pc, #16]	@ (8015058 <HAL_PWR_DisableBkUpAccess+0x18>)
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	4b03      	ldr	r3, [pc, #12]	@ (8015058 <HAL_PWR_DisableBkUpAccess+0x18>)
 801504a:	4904      	ldr	r1, [pc, #16]	@ (801505c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801504c:	400a      	ands	r2, r1
 801504e:	601a      	str	r2, [r3, #0]
}
 8015050:	46c0      	nop			@ (mov r8, r8)
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	46c0      	nop			@ (mov r8, r8)
 8015058:	40007000 	.word	0x40007000
 801505c:	fffffeff 	.word	0xfffffeff

08015060 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b086      	sub	sp, #24
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	000a      	movs	r2, r1
 801506a:	1cfb      	adds	r3, r7, #3
 801506c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801506e:	2300      	movs	r3, #0
 8015070:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8015072:	4b25      	ldr	r3, [pc, #148]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015074:	681a      	ldr	r2, [r3, #0]
 8015076:	2380      	movs	r3, #128	@ 0x80
 8015078:	009b      	lsls	r3, r3, #2
 801507a:	4013      	ands	r3, r2
 801507c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801507e:	4b23      	ldr	r3, [pc, #140]	@ (801510c <HAL_PWR_EnterSTOPMode+0xac>)
 8015080:	6a1b      	ldr	r3, [r3, #32]
 8015082:	2201      	movs	r2, #1
 8015084:	4013      	ands	r3, r2
 8015086:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d008      	beq.n	80150a0 <HAL_PWR_EnterSTOPMode+0x40>
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d005      	beq.n	80150a0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8015094:	4b1c      	ldr	r3, [pc, #112]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	4b1b      	ldr	r3, [pc, #108]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 801509a:	491d      	ldr	r1, [pc, #116]	@ (8015110 <HAL_PWR_EnterSTOPMode+0xb0>)
 801509c:	400a      	ands	r2, r1
 801509e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80150a0:	4b19      	ldr	r3, [pc, #100]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	2203      	movs	r2, #3
 80150aa:	4393      	bics	r3, r2
 80150ac:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80150ae:	697a      	ldr	r2, [r7, #20]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	4313      	orrs	r3, r2
 80150b4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80150b6:	4b14      	ldr	r3, [pc, #80]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150b8:	697a      	ldr	r2, [r7, #20]
 80150ba:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80150bc:	4b15      	ldr	r3, [pc, #84]	@ (8015114 <HAL_PWR_EnterSTOPMode+0xb4>)
 80150be:	691a      	ldr	r2, [r3, #16]
 80150c0:	4b14      	ldr	r3, [pc, #80]	@ (8015114 <HAL_PWR_EnterSTOPMode+0xb4>)
 80150c2:	2104      	movs	r1, #4
 80150c4:	430a      	orrs	r2, r1
 80150c6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80150c8:	1cfb      	adds	r3, r7, #3
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d101      	bne.n	80150d4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80150d0:	bf30      	wfi
 80150d2:	e002      	b.n	80150da <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80150d4:	bf40      	sev
    __WFE();
 80150d6:	bf20      	wfe
    __WFE();
 80150d8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80150da:	4b0e      	ldr	r3, [pc, #56]	@ (8015114 <HAL_PWR_EnterSTOPMode+0xb4>)
 80150dc:	691a      	ldr	r2, [r3, #16]
 80150de:	4b0d      	ldr	r3, [pc, #52]	@ (8015114 <HAL_PWR_EnterSTOPMode+0xb4>)
 80150e0:	2104      	movs	r1, #4
 80150e2:	438a      	bics	r2, r1
 80150e4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d009      	beq.n	8015100 <HAL_PWR_EnterSTOPMode+0xa0>
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d006      	beq.n	8015100 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80150f2:	4b05      	ldr	r3, [pc, #20]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	4b04      	ldr	r3, [pc, #16]	@ (8015108 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150f8:	2180      	movs	r1, #128	@ 0x80
 80150fa:	0089      	lsls	r1, r1, #2
 80150fc:	430a      	orrs	r2, r1
 80150fe:	601a      	str	r2, [r3, #0]
  }
}
 8015100:	46c0      	nop			@ (mov r8, r8)
 8015102:	46bd      	mov	sp, r7
 8015104:	b006      	add	sp, #24
 8015106:	bd80      	pop	{r7, pc}
 8015108:	40007000 	.word	0x40007000
 801510c:	40010000 	.word	0x40010000
 8015110:	fffffdff 	.word	0xfffffdff
 8015114:	e000ed00 	.word	0xe000ed00

08015118 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801511c:	4b07      	ldr	r3, [pc, #28]	@ (801513c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	4b06      	ldr	r3, [pc, #24]	@ (801513c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015122:	2102      	movs	r1, #2
 8015124:	430a      	orrs	r2, r1
 8015126:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015128:	4b05      	ldr	r3, [pc, #20]	@ (8015140 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801512a:	691a      	ldr	r2, [r3, #16]
 801512c:	4b04      	ldr	r3, [pc, #16]	@ (8015140 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801512e:	2104      	movs	r1, #4
 8015130:	430a      	orrs	r2, r1
 8015132:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8015134:	bf30      	wfi
}
 8015136:	46c0      	nop			@ (mov r8, r8)
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	40007000 	.word	0x40007000
 8015140:	e000ed00 	.word	0xe000ed00

08015144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015144:	b5b0      	push	{r4, r5, r7, lr}
 8015146:	b08a      	sub	sp, #40	@ 0x28
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d102      	bne.n	8015158 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8015152:	2301      	movs	r3, #1
 8015154:	f000 fbbf 	bl	80158d6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015158:	4bc9      	ldr	r3, [pc, #804]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 801515a:	68db      	ldr	r3, [r3, #12]
 801515c:	220c      	movs	r2, #12
 801515e:	4013      	ands	r3, r2
 8015160:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015162:	4bc7      	ldr	r3, [pc, #796]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015164:	68da      	ldr	r2, [r3, #12]
 8015166:	2380      	movs	r3, #128	@ 0x80
 8015168:	025b      	lsls	r3, r3, #9
 801516a:	4013      	ands	r3, r2
 801516c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2201      	movs	r2, #1
 8015174:	4013      	ands	r3, r2
 8015176:	d100      	bne.n	801517a <HAL_RCC_OscConfig+0x36>
 8015178:	e07e      	b.n	8015278 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801517a:	69fb      	ldr	r3, [r7, #28]
 801517c:	2b08      	cmp	r3, #8
 801517e:	d007      	beq.n	8015190 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015180:	69fb      	ldr	r3, [r7, #28]
 8015182:	2b0c      	cmp	r3, #12
 8015184:	d112      	bne.n	80151ac <HAL_RCC_OscConfig+0x68>
 8015186:	69ba      	ldr	r2, [r7, #24]
 8015188:	2380      	movs	r3, #128	@ 0x80
 801518a:	025b      	lsls	r3, r3, #9
 801518c:	429a      	cmp	r2, r3
 801518e:	d10d      	bne.n	80151ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015190:	4bbb      	ldr	r3, [pc, #748]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	2380      	movs	r3, #128	@ 0x80
 8015196:	029b      	lsls	r3, r3, #10
 8015198:	4013      	ands	r3, r2
 801519a:	d100      	bne.n	801519e <HAL_RCC_OscConfig+0x5a>
 801519c:	e06b      	b.n	8015276 <HAL_RCC_OscConfig+0x132>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	685b      	ldr	r3, [r3, #4]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d167      	bne.n	8015276 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80151a6:	2301      	movs	r3, #1
 80151a8:	f000 fb95 	bl	80158d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	685a      	ldr	r2, [r3, #4]
 80151b0:	2380      	movs	r3, #128	@ 0x80
 80151b2:	025b      	lsls	r3, r3, #9
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d107      	bne.n	80151c8 <HAL_RCC_OscConfig+0x84>
 80151b8:	4bb1      	ldr	r3, [pc, #708]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	4bb0      	ldr	r3, [pc, #704]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151be:	2180      	movs	r1, #128	@ 0x80
 80151c0:	0249      	lsls	r1, r1, #9
 80151c2:	430a      	orrs	r2, r1
 80151c4:	601a      	str	r2, [r3, #0]
 80151c6:	e027      	b.n	8015218 <HAL_RCC_OscConfig+0xd4>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	685a      	ldr	r2, [r3, #4]
 80151cc:	23a0      	movs	r3, #160	@ 0xa0
 80151ce:	02db      	lsls	r3, r3, #11
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d10e      	bne.n	80151f2 <HAL_RCC_OscConfig+0xae>
 80151d4:	4baa      	ldr	r3, [pc, #680]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151d6:	681a      	ldr	r2, [r3, #0]
 80151d8:	4ba9      	ldr	r3, [pc, #676]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151da:	2180      	movs	r1, #128	@ 0x80
 80151dc:	02c9      	lsls	r1, r1, #11
 80151de:	430a      	orrs	r2, r1
 80151e0:	601a      	str	r2, [r3, #0]
 80151e2:	4ba7      	ldr	r3, [pc, #668]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	4ba6      	ldr	r3, [pc, #664]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151e8:	2180      	movs	r1, #128	@ 0x80
 80151ea:	0249      	lsls	r1, r1, #9
 80151ec:	430a      	orrs	r2, r1
 80151ee:	601a      	str	r2, [r3, #0]
 80151f0:	e012      	b.n	8015218 <HAL_RCC_OscConfig+0xd4>
 80151f2:	4ba3      	ldr	r3, [pc, #652]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	4ba2      	ldr	r3, [pc, #648]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80151f8:	49a2      	ldr	r1, [pc, #648]	@ (8015484 <HAL_RCC_OscConfig+0x340>)
 80151fa:	400a      	ands	r2, r1
 80151fc:	601a      	str	r2, [r3, #0]
 80151fe:	4ba0      	ldr	r3, [pc, #640]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015200:	681a      	ldr	r2, [r3, #0]
 8015202:	2380      	movs	r3, #128	@ 0x80
 8015204:	025b      	lsls	r3, r3, #9
 8015206:	4013      	ands	r3, r2
 8015208:	60fb      	str	r3, [r7, #12]
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	4b9c      	ldr	r3, [pc, #624]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	4b9b      	ldr	r3, [pc, #620]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015212:	499d      	ldr	r1, [pc, #628]	@ (8015488 <HAL_RCC_OscConfig+0x344>)
 8015214:	400a      	ands	r2, r1
 8015216:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d015      	beq.n	801524c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015220:	f7f9 fe60 	bl	800eee4 <HAL_GetTick>
 8015224:	0003      	movs	r3, r0
 8015226:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015228:	e009      	b.n	801523e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801522a:	f7f9 fe5b 	bl	800eee4 <HAL_GetTick>
 801522e:	0002      	movs	r2, r0
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	2b64      	cmp	r3, #100	@ 0x64
 8015236:	d902      	bls.n	801523e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015238:	2303      	movs	r3, #3
 801523a:	f000 fb4c 	bl	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801523e:	4b90      	ldr	r3, [pc, #576]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	2380      	movs	r3, #128	@ 0x80
 8015244:	029b      	lsls	r3, r3, #10
 8015246:	4013      	ands	r3, r2
 8015248:	d0ef      	beq.n	801522a <HAL_RCC_OscConfig+0xe6>
 801524a:	e015      	b.n	8015278 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801524c:	f7f9 fe4a 	bl	800eee4 <HAL_GetTick>
 8015250:	0003      	movs	r3, r0
 8015252:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015254:	e008      	b.n	8015268 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015256:	f7f9 fe45 	bl	800eee4 <HAL_GetTick>
 801525a:	0002      	movs	r2, r0
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	1ad3      	subs	r3, r2, r3
 8015260:	2b64      	cmp	r3, #100	@ 0x64
 8015262:	d901      	bls.n	8015268 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8015264:	2303      	movs	r3, #3
 8015266:	e336      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015268:	4b85      	ldr	r3, [pc, #532]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	2380      	movs	r3, #128	@ 0x80
 801526e:	029b      	lsls	r3, r3, #10
 8015270:	4013      	ands	r3, r2
 8015272:	d1f0      	bne.n	8015256 <HAL_RCC_OscConfig+0x112>
 8015274:	e000      	b.n	8015278 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015276:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	2202      	movs	r2, #2
 801527e:	4013      	ands	r3, r2
 8015280:	d100      	bne.n	8015284 <HAL_RCC_OscConfig+0x140>
 8015282:	e099      	b.n	80153b8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528c:	2220      	movs	r2, #32
 801528e:	4013      	ands	r3, r2
 8015290:	d009      	beq.n	80152a6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8015292:	4b7b      	ldr	r3, [pc, #492]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	4b7a      	ldr	r3, [pc, #488]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015298:	2120      	movs	r1, #32
 801529a:	430a      	orrs	r2, r1
 801529c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a0:	2220      	movs	r2, #32
 80152a2:	4393      	bics	r3, r2
 80152a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	2b04      	cmp	r3, #4
 80152aa:	d005      	beq.n	80152b8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80152ac:	69fb      	ldr	r3, [r7, #28]
 80152ae:	2b0c      	cmp	r3, #12
 80152b0:	d13e      	bne.n	8015330 <HAL_RCC_OscConfig+0x1ec>
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d13b      	bne.n	8015330 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80152b8:	4b71      	ldr	r3, [pc, #452]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	2204      	movs	r2, #4
 80152be:	4013      	ands	r3, r2
 80152c0:	d004      	beq.n	80152cc <HAL_RCC_OscConfig+0x188>
 80152c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d101      	bne.n	80152cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80152c8:	2301      	movs	r3, #1
 80152ca:	e304      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80152cc:	4b6c      	ldr	r3, [pc, #432]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	4a6e      	ldr	r2, [pc, #440]	@ (801548c <HAL_RCC_OscConfig+0x348>)
 80152d2:	4013      	ands	r3, r2
 80152d4:	0019      	movs	r1, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	691b      	ldr	r3, [r3, #16]
 80152da:	021a      	lsls	r2, r3, #8
 80152dc:	4b68      	ldr	r3, [pc, #416]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80152de:	430a      	orrs	r2, r1
 80152e0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80152e2:	4b67      	ldr	r3, [pc, #412]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2209      	movs	r2, #9
 80152e8:	4393      	bics	r3, r2
 80152ea:	0019      	movs	r1, r3
 80152ec:	4b64      	ldr	r3, [pc, #400]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80152ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152f0:	430a      	orrs	r2, r1
 80152f2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80152f4:	f000 fc42 	bl	8015b7c <HAL_RCC_GetSysClockFreq>
 80152f8:	0001      	movs	r1, r0
 80152fa:	4b61      	ldr	r3, [pc, #388]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80152fc:	68db      	ldr	r3, [r3, #12]
 80152fe:	091b      	lsrs	r3, r3, #4
 8015300:	220f      	movs	r2, #15
 8015302:	4013      	ands	r3, r2
 8015304:	4a62      	ldr	r2, [pc, #392]	@ (8015490 <HAL_RCC_OscConfig+0x34c>)
 8015306:	5cd3      	ldrb	r3, [r2, r3]
 8015308:	000a      	movs	r2, r1
 801530a:	40da      	lsrs	r2, r3
 801530c:	4b61      	ldr	r3, [pc, #388]	@ (8015494 <HAL_RCC_OscConfig+0x350>)
 801530e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8015310:	4b61      	ldr	r3, [pc, #388]	@ (8015498 <HAL_RCC_OscConfig+0x354>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	2513      	movs	r5, #19
 8015316:	197c      	adds	r4, r7, r5
 8015318:	0018      	movs	r0, r3
 801531a:	f7f9 fd9d 	bl	800ee58 <HAL_InitTick>
 801531e:	0003      	movs	r3, r0
 8015320:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8015322:	197b      	adds	r3, r7, r5
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d046      	beq.n	80153b8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801532a:	197b      	adds	r3, r7, r5
 801532c:	781b      	ldrb	r3, [r3, #0]
 801532e:	e2d2      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8015330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015332:	2b00      	cmp	r3, #0
 8015334:	d027      	beq.n	8015386 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015336:	4b52      	ldr	r3, [pc, #328]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2209      	movs	r2, #9
 801533c:	4393      	bics	r3, r2
 801533e:	0019      	movs	r1, r3
 8015340:	4b4f      	ldr	r3, [pc, #316]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015344:	430a      	orrs	r2, r1
 8015346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015348:	f7f9 fdcc 	bl	800eee4 <HAL_GetTick>
 801534c:	0003      	movs	r3, r0
 801534e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015350:	e008      	b.n	8015364 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015352:	f7f9 fdc7 	bl	800eee4 <HAL_GetTick>
 8015356:	0002      	movs	r2, r0
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	1ad3      	subs	r3, r2, r3
 801535c:	2b02      	cmp	r3, #2
 801535e:	d901      	bls.n	8015364 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8015360:	2303      	movs	r3, #3
 8015362:	e2b8      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015364:	4b46      	ldr	r3, [pc, #280]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	2204      	movs	r2, #4
 801536a:	4013      	ands	r3, r2
 801536c:	d0f1      	beq.n	8015352 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801536e:	4b44      	ldr	r3, [pc, #272]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	4a46      	ldr	r2, [pc, #280]	@ (801548c <HAL_RCC_OscConfig+0x348>)
 8015374:	4013      	ands	r3, r2
 8015376:	0019      	movs	r1, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	691b      	ldr	r3, [r3, #16]
 801537c:	021a      	lsls	r2, r3, #8
 801537e:	4b40      	ldr	r3, [pc, #256]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015380:	430a      	orrs	r2, r1
 8015382:	605a      	str	r2, [r3, #4]
 8015384:	e018      	b.n	80153b8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015386:	4b3e      	ldr	r3, [pc, #248]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015388:	681a      	ldr	r2, [r3, #0]
 801538a:	4b3d      	ldr	r3, [pc, #244]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 801538c:	2101      	movs	r1, #1
 801538e:	438a      	bics	r2, r1
 8015390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015392:	f7f9 fda7 	bl	800eee4 <HAL_GetTick>
 8015396:	0003      	movs	r3, r0
 8015398:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801539a:	e008      	b.n	80153ae <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801539c:	f7f9 fda2 	bl	800eee4 <HAL_GetTick>
 80153a0:	0002      	movs	r2, r0
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	1ad3      	subs	r3, r2, r3
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d901      	bls.n	80153ae <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80153aa:	2303      	movs	r3, #3
 80153ac:	e293      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80153ae:	4b34      	ldr	r3, [pc, #208]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	2204      	movs	r2, #4
 80153b4:	4013      	ands	r3, r2
 80153b6:	d1f1      	bne.n	801539c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2210      	movs	r2, #16
 80153be:	4013      	ands	r3, r2
 80153c0:	d100      	bne.n	80153c4 <HAL_RCC_OscConfig+0x280>
 80153c2:	e0a2      	b.n	801550a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d140      	bne.n	801544c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80153ca:	4b2d      	ldr	r3, [pc, #180]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80153cc:	681a      	ldr	r2, [r3, #0]
 80153ce:	2380      	movs	r3, #128	@ 0x80
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	4013      	ands	r3, r2
 80153d4:	d005      	beq.n	80153e2 <HAL_RCC_OscConfig+0x29e>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	69db      	ldr	r3, [r3, #28]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d101      	bne.n	80153e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80153de:	2301      	movs	r3, #1
 80153e0:	e279      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80153e2:	4b27      	ldr	r3, [pc, #156]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	4a2d      	ldr	r2, [pc, #180]	@ (801549c <HAL_RCC_OscConfig+0x358>)
 80153e8:	4013      	ands	r3, r2
 80153ea:	0019      	movs	r1, r3
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153f0:	4b23      	ldr	r3, [pc, #140]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80153f2:	430a      	orrs	r2, r1
 80153f4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80153f6:	4b22      	ldr	r3, [pc, #136]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	021b      	lsls	r3, r3, #8
 80153fc:	0a19      	lsrs	r1, r3, #8
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6a1b      	ldr	r3, [r3, #32]
 8015402:	061a      	lsls	r2, r3, #24
 8015404:	4b1e      	ldr	r3, [pc, #120]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015406:	430a      	orrs	r2, r1
 8015408:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801540e:	0b5b      	lsrs	r3, r3, #13
 8015410:	3301      	adds	r3, #1
 8015412:	2280      	movs	r2, #128	@ 0x80
 8015414:	0212      	lsls	r2, r2, #8
 8015416:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015418:	4b19      	ldr	r3, [pc, #100]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	091b      	lsrs	r3, r3, #4
 801541e:	210f      	movs	r1, #15
 8015420:	400b      	ands	r3, r1
 8015422:	491b      	ldr	r1, [pc, #108]	@ (8015490 <HAL_RCC_OscConfig+0x34c>)
 8015424:	5ccb      	ldrb	r3, [r1, r3]
 8015426:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015428:	4b1a      	ldr	r3, [pc, #104]	@ (8015494 <HAL_RCC_OscConfig+0x350>)
 801542a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801542c:	4b1a      	ldr	r3, [pc, #104]	@ (8015498 <HAL_RCC_OscConfig+0x354>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2513      	movs	r5, #19
 8015432:	197c      	adds	r4, r7, r5
 8015434:	0018      	movs	r0, r3
 8015436:	f7f9 fd0f 	bl	800ee58 <HAL_InitTick>
 801543a:	0003      	movs	r3, r0
 801543c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801543e:	197b      	adds	r3, r7, r5
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d061      	beq.n	801550a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015446:	197b      	adds	r3, r7, r5
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	e244      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	69db      	ldr	r3, [r3, #28]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d040      	beq.n	80154d6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015454:	4b0a      	ldr	r3, [pc, #40]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 8015456:	681a      	ldr	r2, [r3, #0]
 8015458:	4b09      	ldr	r3, [pc, #36]	@ (8015480 <HAL_RCC_OscConfig+0x33c>)
 801545a:	2180      	movs	r1, #128	@ 0x80
 801545c:	0049      	lsls	r1, r1, #1
 801545e:	430a      	orrs	r2, r1
 8015460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015462:	f7f9 fd3f 	bl	800eee4 <HAL_GetTick>
 8015466:	0003      	movs	r3, r0
 8015468:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801546a:	e019      	b.n	80154a0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801546c:	f7f9 fd3a 	bl	800eee4 <HAL_GetTick>
 8015470:	0002      	movs	r2, r0
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	1ad3      	subs	r3, r2, r3
 8015476:	2b02      	cmp	r3, #2
 8015478:	d912      	bls.n	80154a0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801547a:	2303      	movs	r3, #3
 801547c:	e22b      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
 801547e:	46c0      	nop			@ (mov r8, r8)
 8015480:	40021000 	.word	0x40021000
 8015484:	fffeffff 	.word	0xfffeffff
 8015488:	fffbffff 	.word	0xfffbffff
 801548c:	ffffe0ff 	.word	0xffffe0ff
 8015490:	08025810 	.word	0x08025810
 8015494:	200000d0 	.word	0x200000d0
 8015498:	200000e0 	.word	0x200000e0
 801549c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80154a0:	4bca      	ldr	r3, [pc, #808]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	2380      	movs	r3, #128	@ 0x80
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	4013      	ands	r3, r2
 80154aa:	d0df      	beq.n	801546c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80154ac:	4bc7      	ldr	r3, [pc, #796]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	4ac7      	ldr	r2, [pc, #796]	@ (80157d0 <HAL_RCC_OscConfig+0x68c>)
 80154b2:	4013      	ands	r3, r2
 80154b4:	0019      	movs	r1, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154ba:	4bc4      	ldr	r3, [pc, #784]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154bc:	430a      	orrs	r2, r1
 80154be:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80154c0:	4bc2      	ldr	r3, [pc, #776]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	021b      	lsls	r3, r3, #8
 80154c6:	0a19      	lsrs	r1, r3, #8
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6a1b      	ldr	r3, [r3, #32]
 80154cc:	061a      	lsls	r2, r3, #24
 80154ce:	4bbf      	ldr	r3, [pc, #764]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154d0:	430a      	orrs	r2, r1
 80154d2:	605a      	str	r2, [r3, #4]
 80154d4:	e019      	b.n	801550a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80154d6:	4bbd      	ldr	r3, [pc, #756]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	4bbc      	ldr	r3, [pc, #752]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80154dc:	49bd      	ldr	r1, [pc, #756]	@ (80157d4 <HAL_RCC_OscConfig+0x690>)
 80154de:	400a      	ands	r2, r1
 80154e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154e2:	f7f9 fcff 	bl	800eee4 <HAL_GetTick>
 80154e6:	0003      	movs	r3, r0
 80154e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80154ea:	e008      	b.n	80154fe <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80154ec:	f7f9 fcfa 	bl	800eee4 <HAL_GetTick>
 80154f0:	0002      	movs	r2, r0
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	1ad3      	subs	r3, r2, r3
 80154f6:	2b02      	cmp	r3, #2
 80154f8:	d901      	bls.n	80154fe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80154fa:	2303      	movs	r3, #3
 80154fc:	e1eb      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80154fe:	4bb3      	ldr	r3, [pc, #716]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	2380      	movs	r3, #128	@ 0x80
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	4013      	ands	r3, r2
 8015508:	d1f0      	bne.n	80154ec <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	2208      	movs	r2, #8
 8015510:	4013      	ands	r3, r2
 8015512:	d036      	beq.n	8015582 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	695b      	ldr	r3, [r3, #20]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d019      	beq.n	8015550 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801551c:	4bab      	ldr	r3, [pc, #684]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801551e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015520:	4baa      	ldr	r3, [pc, #680]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015522:	2101      	movs	r1, #1
 8015524:	430a      	orrs	r2, r1
 8015526:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015528:	f7f9 fcdc 	bl	800eee4 <HAL_GetTick>
 801552c:	0003      	movs	r3, r0
 801552e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015530:	e008      	b.n	8015544 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015532:	f7f9 fcd7 	bl	800eee4 <HAL_GetTick>
 8015536:	0002      	movs	r2, r0
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	1ad3      	subs	r3, r2, r3
 801553c:	2b02      	cmp	r3, #2
 801553e:	d901      	bls.n	8015544 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8015540:	2303      	movs	r3, #3
 8015542:	e1c8      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015544:	4ba1      	ldr	r3, [pc, #644]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015548:	2202      	movs	r2, #2
 801554a:	4013      	ands	r3, r2
 801554c:	d0f1      	beq.n	8015532 <HAL_RCC_OscConfig+0x3ee>
 801554e:	e018      	b.n	8015582 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015550:	4b9e      	ldr	r3, [pc, #632]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015554:	4b9d      	ldr	r3, [pc, #628]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015556:	2101      	movs	r1, #1
 8015558:	438a      	bics	r2, r1
 801555a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801555c:	f7f9 fcc2 	bl	800eee4 <HAL_GetTick>
 8015560:	0003      	movs	r3, r0
 8015562:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015564:	e008      	b.n	8015578 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015566:	f7f9 fcbd 	bl	800eee4 <HAL_GetTick>
 801556a:	0002      	movs	r2, r0
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	2b02      	cmp	r3, #2
 8015572:	d901      	bls.n	8015578 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015574:	2303      	movs	r3, #3
 8015576:	e1ae      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015578:	4b94      	ldr	r3, [pc, #592]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801557c:	2202      	movs	r2, #2
 801557e:	4013      	ands	r3, r2
 8015580:	d1f1      	bne.n	8015566 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2204      	movs	r2, #4
 8015588:	4013      	ands	r3, r2
 801558a:	d100      	bne.n	801558e <HAL_RCC_OscConfig+0x44a>
 801558c:	e0ae      	b.n	80156ec <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801558e:	2023      	movs	r0, #35	@ 0x23
 8015590:	183b      	adds	r3, r7, r0
 8015592:	2200      	movs	r2, #0
 8015594:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015596:	4b8d      	ldr	r3, [pc, #564]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801559a:	2380      	movs	r3, #128	@ 0x80
 801559c:	055b      	lsls	r3, r3, #21
 801559e:	4013      	ands	r3, r2
 80155a0:	d109      	bne.n	80155b6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80155a2:	4b8a      	ldr	r3, [pc, #552]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80155a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80155a6:	4b89      	ldr	r3, [pc, #548]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80155a8:	2180      	movs	r1, #128	@ 0x80
 80155aa:	0549      	lsls	r1, r1, #21
 80155ac:	430a      	orrs	r2, r1
 80155ae:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80155b0:	183b      	adds	r3, r7, r0
 80155b2:	2201      	movs	r2, #1
 80155b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80155b6:	4b88      	ldr	r3, [pc, #544]	@ (80157d8 <HAL_RCC_OscConfig+0x694>)
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	2380      	movs	r3, #128	@ 0x80
 80155bc:	005b      	lsls	r3, r3, #1
 80155be:	4013      	ands	r3, r2
 80155c0:	d11a      	bne.n	80155f8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80155c2:	4b85      	ldr	r3, [pc, #532]	@ (80157d8 <HAL_RCC_OscConfig+0x694>)
 80155c4:	681a      	ldr	r2, [r3, #0]
 80155c6:	4b84      	ldr	r3, [pc, #528]	@ (80157d8 <HAL_RCC_OscConfig+0x694>)
 80155c8:	2180      	movs	r1, #128	@ 0x80
 80155ca:	0049      	lsls	r1, r1, #1
 80155cc:	430a      	orrs	r2, r1
 80155ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80155d0:	f7f9 fc88 	bl	800eee4 <HAL_GetTick>
 80155d4:	0003      	movs	r3, r0
 80155d6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80155d8:	e008      	b.n	80155ec <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80155da:	f7f9 fc83 	bl	800eee4 <HAL_GetTick>
 80155de:	0002      	movs	r2, r0
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	1ad3      	subs	r3, r2, r3
 80155e4:	2b64      	cmp	r3, #100	@ 0x64
 80155e6:	d901      	bls.n	80155ec <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80155e8:	2303      	movs	r3, #3
 80155ea:	e174      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80155ec:	4b7a      	ldr	r3, [pc, #488]	@ (80157d8 <HAL_RCC_OscConfig+0x694>)
 80155ee:	681a      	ldr	r2, [r3, #0]
 80155f0:	2380      	movs	r3, #128	@ 0x80
 80155f2:	005b      	lsls	r3, r3, #1
 80155f4:	4013      	ands	r3, r2
 80155f6:	d0f0      	beq.n	80155da <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	689a      	ldr	r2, [r3, #8]
 80155fc:	2380      	movs	r3, #128	@ 0x80
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	429a      	cmp	r2, r3
 8015602:	d107      	bne.n	8015614 <HAL_RCC_OscConfig+0x4d0>
 8015604:	4b71      	ldr	r3, [pc, #452]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015608:	4b70      	ldr	r3, [pc, #448]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801560a:	2180      	movs	r1, #128	@ 0x80
 801560c:	0049      	lsls	r1, r1, #1
 801560e:	430a      	orrs	r2, r1
 8015610:	651a      	str	r2, [r3, #80]	@ 0x50
 8015612:	e031      	b.n	8015678 <HAL_RCC_OscConfig+0x534>
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	689b      	ldr	r3, [r3, #8]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d10c      	bne.n	8015636 <HAL_RCC_OscConfig+0x4f2>
 801561c:	4b6b      	ldr	r3, [pc, #428]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801561e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015620:	4b6a      	ldr	r3, [pc, #424]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015622:	496c      	ldr	r1, [pc, #432]	@ (80157d4 <HAL_RCC_OscConfig+0x690>)
 8015624:	400a      	ands	r2, r1
 8015626:	651a      	str	r2, [r3, #80]	@ 0x50
 8015628:	4b68      	ldr	r3, [pc, #416]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801562a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801562c:	4b67      	ldr	r3, [pc, #412]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801562e:	496b      	ldr	r1, [pc, #428]	@ (80157dc <HAL_RCC_OscConfig+0x698>)
 8015630:	400a      	ands	r2, r1
 8015632:	651a      	str	r2, [r3, #80]	@ 0x50
 8015634:	e020      	b.n	8015678 <HAL_RCC_OscConfig+0x534>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	689a      	ldr	r2, [r3, #8]
 801563a:	23a0      	movs	r3, #160	@ 0xa0
 801563c:	00db      	lsls	r3, r3, #3
 801563e:	429a      	cmp	r2, r3
 8015640:	d10e      	bne.n	8015660 <HAL_RCC_OscConfig+0x51c>
 8015642:	4b62      	ldr	r3, [pc, #392]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015646:	4b61      	ldr	r3, [pc, #388]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015648:	2180      	movs	r1, #128	@ 0x80
 801564a:	00c9      	lsls	r1, r1, #3
 801564c:	430a      	orrs	r2, r1
 801564e:	651a      	str	r2, [r3, #80]	@ 0x50
 8015650:	4b5e      	ldr	r3, [pc, #376]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015652:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015654:	4b5d      	ldr	r3, [pc, #372]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015656:	2180      	movs	r1, #128	@ 0x80
 8015658:	0049      	lsls	r1, r1, #1
 801565a:	430a      	orrs	r2, r1
 801565c:	651a      	str	r2, [r3, #80]	@ 0x50
 801565e:	e00b      	b.n	8015678 <HAL_RCC_OscConfig+0x534>
 8015660:	4b5a      	ldr	r3, [pc, #360]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015662:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015664:	4b59      	ldr	r3, [pc, #356]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015666:	495b      	ldr	r1, [pc, #364]	@ (80157d4 <HAL_RCC_OscConfig+0x690>)
 8015668:	400a      	ands	r2, r1
 801566a:	651a      	str	r2, [r3, #80]	@ 0x50
 801566c:	4b57      	ldr	r3, [pc, #348]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801566e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015670:	4b56      	ldr	r3, [pc, #344]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015672:	495a      	ldr	r1, [pc, #360]	@ (80157dc <HAL_RCC_OscConfig+0x698>)
 8015674:	400a      	ands	r2, r1
 8015676:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	689b      	ldr	r3, [r3, #8]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d015      	beq.n	80156ac <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015680:	f7f9 fc30 	bl	800eee4 <HAL_GetTick>
 8015684:	0003      	movs	r3, r0
 8015686:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015688:	e009      	b.n	801569e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801568a:	f7f9 fc2b 	bl	800eee4 <HAL_GetTick>
 801568e:	0002      	movs	r2, r0
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	4a52      	ldr	r2, [pc, #328]	@ (80157e0 <HAL_RCC_OscConfig+0x69c>)
 8015696:	4293      	cmp	r3, r2
 8015698:	d901      	bls.n	801569e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801569a:	2303      	movs	r3, #3
 801569c:	e11b      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801569e:	4b4b      	ldr	r3, [pc, #300]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80156a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80156a2:	2380      	movs	r3, #128	@ 0x80
 80156a4:	009b      	lsls	r3, r3, #2
 80156a6:	4013      	ands	r3, r2
 80156a8:	d0ef      	beq.n	801568a <HAL_RCC_OscConfig+0x546>
 80156aa:	e014      	b.n	80156d6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80156ac:	f7f9 fc1a 	bl	800eee4 <HAL_GetTick>
 80156b0:	0003      	movs	r3, r0
 80156b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80156b4:	e009      	b.n	80156ca <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80156b6:	f7f9 fc15 	bl	800eee4 <HAL_GetTick>
 80156ba:	0002      	movs	r2, r0
 80156bc:	697b      	ldr	r3, [r7, #20]
 80156be:	1ad3      	subs	r3, r2, r3
 80156c0:	4a47      	ldr	r2, [pc, #284]	@ (80157e0 <HAL_RCC_OscConfig+0x69c>)
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d901      	bls.n	80156ca <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80156c6:	2303      	movs	r3, #3
 80156c8:	e105      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80156ca:	4b40      	ldr	r3, [pc, #256]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80156cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80156ce:	2380      	movs	r3, #128	@ 0x80
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	4013      	ands	r3, r2
 80156d4:	d1ef      	bne.n	80156b6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80156d6:	2323      	movs	r3, #35	@ 0x23
 80156d8:	18fb      	adds	r3, r7, r3
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d105      	bne.n	80156ec <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80156e0:	4b3a      	ldr	r3, [pc, #232]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80156e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80156e4:	4b39      	ldr	r3, [pc, #228]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80156e6:	493f      	ldr	r1, [pc, #252]	@ (80157e4 <HAL_RCC_OscConfig+0x6a0>)
 80156e8:	400a      	ands	r2, r1
 80156ea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	2220      	movs	r2, #32
 80156f2:	4013      	ands	r3, r2
 80156f4:	d049      	beq.n	801578a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	699b      	ldr	r3, [r3, #24]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d026      	beq.n	801574c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80156fe:	4b33      	ldr	r3, [pc, #204]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015700:	689a      	ldr	r2, [r3, #8]
 8015702:	4b32      	ldr	r3, [pc, #200]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015704:	2101      	movs	r1, #1
 8015706:	430a      	orrs	r2, r1
 8015708:	609a      	str	r2, [r3, #8]
 801570a:	4b30      	ldr	r3, [pc, #192]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801570c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801570e:	4b2f      	ldr	r3, [pc, #188]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015710:	2101      	movs	r1, #1
 8015712:	430a      	orrs	r2, r1
 8015714:	635a      	str	r2, [r3, #52]	@ 0x34
 8015716:	4b34      	ldr	r3, [pc, #208]	@ (80157e8 <HAL_RCC_OscConfig+0x6a4>)
 8015718:	6a1a      	ldr	r2, [r3, #32]
 801571a:	4b33      	ldr	r3, [pc, #204]	@ (80157e8 <HAL_RCC_OscConfig+0x6a4>)
 801571c:	2180      	movs	r1, #128	@ 0x80
 801571e:	0189      	lsls	r1, r1, #6
 8015720:	430a      	orrs	r2, r1
 8015722:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015724:	f7f9 fbde 	bl	800eee4 <HAL_GetTick>
 8015728:	0003      	movs	r3, r0
 801572a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801572c:	e008      	b.n	8015740 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801572e:	f7f9 fbd9 	bl	800eee4 <HAL_GetTick>
 8015732:	0002      	movs	r2, r0
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	2b02      	cmp	r3, #2
 801573a:	d901      	bls.n	8015740 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801573c:	2303      	movs	r3, #3
 801573e:	e0ca      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015740:	4b22      	ldr	r3, [pc, #136]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015742:	689b      	ldr	r3, [r3, #8]
 8015744:	2202      	movs	r2, #2
 8015746:	4013      	ands	r3, r2
 8015748:	d0f1      	beq.n	801572e <HAL_RCC_OscConfig+0x5ea>
 801574a:	e01e      	b.n	801578a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801574c:	4b1f      	ldr	r3, [pc, #124]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 801574e:	689a      	ldr	r2, [r3, #8]
 8015750:	4b1e      	ldr	r3, [pc, #120]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015752:	2101      	movs	r1, #1
 8015754:	438a      	bics	r2, r1
 8015756:	609a      	str	r2, [r3, #8]
 8015758:	4b23      	ldr	r3, [pc, #140]	@ (80157e8 <HAL_RCC_OscConfig+0x6a4>)
 801575a:	6a1a      	ldr	r2, [r3, #32]
 801575c:	4b22      	ldr	r3, [pc, #136]	@ (80157e8 <HAL_RCC_OscConfig+0x6a4>)
 801575e:	4923      	ldr	r1, [pc, #140]	@ (80157ec <HAL_RCC_OscConfig+0x6a8>)
 8015760:	400a      	ands	r2, r1
 8015762:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015764:	f7f9 fbbe 	bl	800eee4 <HAL_GetTick>
 8015768:	0003      	movs	r3, r0
 801576a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801576c:	e008      	b.n	8015780 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801576e:	f7f9 fbb9 	bl	800eee4 <HAL_GetTick>
 8015772:	0002      	movs	r2, r0
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	1ad3      	subs	r3, r2, r3
 8015778:	2b02      	cmp	r3, #2
 801577a:	d901      	bls.n	8015780 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801577c:	2303      	movs	r3, #3
 801577e:	e0aa      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015780:	4b12      	ldr	r3, [pc, #72]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	2202      	movs	r2, #2
 8015786:	4013      	ands	r3, r2
 8015788:	d1f1      	bne.n	801576e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801578e:	2b00      	cmp	r3, #0
 8015790:	d100      	bne.n	8015794 <HAL_RCC_OscConfig+0x650>
 8015792:	e09f      	b.n	80158d4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	2b0c      	cmp	r3, #12
 8015798:	d100      	bne.n	801579c <HAL_RCC_OscConfig+0x658>
 801579a:	e078      	b.n	801588e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157a0:	2b02      	cmp	r3, #2
 80157a2:	d159      	bne.n	8015858 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80157a4:	4b09      	ldr	r3, [pc, #36]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	4b08      	ldr	r3, [pc, #32]	@ (80157cc <HAL_RCC_OscConfig+0x688>)
 80157aa:	4911      	ldr	r1, [pc, #68]	@ (80157f0 <HAL_RCC_OscConfig+0x6ac>)
 80157ac:	400a      	ands	r2, r1
 80157ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80157b0:	f7f9 fb98 	bl	800eee4 <HAL_GetTick>
 80157b4:	0003      	movs	r3, r0
 80157b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80157b8:	e01c      	b.n	80157f4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80157ba:	f7f9 fb93 	bl	800eee4 <HAL_GetTick>
 80157be:	0002      	movs	r2, r0
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	2b02      	cmp	r3, #2
 80157c6:	d915      	bls.n	80157f4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80157c8:	2303      	movs	r3, #3
 80157ca:	e084      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
 80157cc:	40021000 	.word	0x40021000
 80157d0:	ffff1fff 	.word	0xffff1fff
 80157d4:	fffffeff 	.word	0xfffffeff
 80157d8:	40007000 	.word	0x40007000
 80157dc:	fffffbff 	.word	0xfffffbff
 80157e0:	00001388 	.word	0x00001388
 80157e4:	efffffff 	.word	0xefffffff
 80157e8:	40010000 	.word	0x40010000
 80157ec:	ffffdfff 	.word	0xffffdfff
 80157f0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80157f4:	4b3a      	ldr	r3, [pc, #232]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 80157f6:	681a      	ldr	r2, [r3, #0]
 80157f8:	2380      	movs	r3, #128	@ 0x80
 80157fa:	049b      	lsls	r3, r3, #18
 80157fc:	4013      	ands	r3, r2
 80157fe:	d1dc      	bne.n	80157ba <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015800:	4b37      	ldr	r3, [pc, #220]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	4a37      	ldr	r2, [pc, #220]	@ (80158e4 <HAL_RCC_OscConfig+0x7a0>)
 8015806:	4013      	ands	r3, r2
 8015808:	0019      	movs	r1, r3
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015812:	431a      	orrs	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015818:	431a      	orrs	r2, r3
 801581a:	4b31      	ldr	r3, [pc, #196]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 801581c:	430a      	orrs	r2, r1
 801581e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015820:	4b2f      	ldr	r3, [pc, #188]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	4b2e      	ldr	r3, [pc, #184]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 8015826:	2180      	movs	r1, #128	@ 0x80
 8015828:	0449      	lsls	r1, r1, #17
 801582a:	430a      	orrs	r2, r1
 801582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801582e:	f7f9 fb59 	bl	800eee4 <HAL_GetTick>
 8015832:	0003      	movs	r3, r0
 8015834:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015836:	e008      	b.n	801584a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015838:	f7f9 fb54 	bl	800eee4 <HAL_GetTick>
 801583c:	0002      	movs	r2, r0
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	1ad3      	subs	r3, r2, r3
 8015842:	2b02      	cmp	r3, #2
 8015844:	d901      	bls.n	801584a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015846:	2303      	movs	r3, #3
 8015848:	e045      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801584a:	4b25      	ldr	r3, [pc, #148]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	2380      	movs	r3, #128	@ 0x80
 8015850:	049b      	lsls	r3, r3, #18
 8015852:	4013      	ands	r3, r2
 8015854:	d0f0      	beq.n	8015838 <HAL_RCC_OscConfig+0x6f4>
 8015856:	e03d      	b.n	80158d4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015858:	4b21      	ldr	r3, [pc, #132]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	4b20      	ldr	r3, [pc, #128]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 801585e:	4922      	ldr	r1, [pc, #136]	@ (80158e8 <HAL_RCC_OscConfig+0x7a4>)
 8015860:	400a      	ands	r2, r1
 8015862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015864:	f7f9 fb3e 	bl	800eee4 <HAL_GetTick>
 8015868:	0003      	movs	r3, r0
 801586a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801586c:	e008      	b.n	8015880 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801586e:	f7f9 fb39 	bl	800eee4 <HAL_GetTick>
 8015872:	0002      	movs	r2, r0
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	1ad3      	subs	r3, r2, r3
 8015878:	2b02      	cmp	r3, #2
 801587a:	d901      	bls.n	8015880 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801587c:	2303      	movs	r3, #3
 801587e:	e02a      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015880:	4b17      	ldr	r3, [pc, #92]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	2380      	movs	r3, #128	@ 0x80
 8015886:	049b      	lsls	r3, r3, #18
 8015888:	4013      	ands	r3, r2
 801588a:	d1f0      	bne.n	801586e <HAL_RCC_OscConfig+0x72a>
 801588c:	e022      	b.n	80158d4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015892:	2b01      	cmp	r3, #1
 8015894:	d101      	bne.n	801589a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015896:	2301      	movs	r3, #1
 8015898:	e01d      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801589a:	4b11      	ldr	r3, [pc, #68]	@ (80158e0 <HAL_RCC_OscConfig+0x79c>)
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80158a0:	69ba      	ldr	r2, [r7, #24]
 80158a2:	2380      	movs	r3, #128	@ 0x80
 80158a4:	025b      	lsls	r3, r3, #9
 80158a6:	401a      	ands	r2, r3
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d10f      	bne.n	80158d0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80158b0:	69ba      	ldr	r2, [r7, #24]
 80158b2:	23f0      	movs	r3, #240	@ 0xf0
 80158b4:	039b      	lsls	r3, r3, #14
 80158b6:	401a      	ands	r2, r3
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80158bc:	429a      	cmp	r2, r3
 80158be:	d107      	bne.n	80158d0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80158c0:	69ba      	ldr	r2, [r7, #24]
 80158c2:	23c0      	movs	r3, #192	@ 0xc0
 80158c4:	041b      	lsls	r3, r3, #16
 80158c6:	401a      	ands	r2, r3
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d001      	beq.n	80158d4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80158d0:	2301      	movs	r3, #1
 80158d2:	e000      	b.n	80158d6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80158d4:	2300      	movs	r3, #0
}
 80158d6:	0018      	movs	r0, r3
 80158d8:	46bd      	mov	sp, r7
 80158da:	b00a      	add	sp, #40	@ 0x28
 80158dc:	bdb0      	pop	{r4, r5, r7, pc}
 80158de:	46c0      	nop			@ (mov r8, r8)
 80158e0:	40021000 	.word	0x40021000
 80158e4:	ff02ffff 	.word	0xff02ffff
 80158e8:	feffffff 	.word	0xfeffffff

080158ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80158ec:	b5b0      	push	{r4, r5, r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d101      	bne.n	8015900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80158fc:	2301      	movs	r3, #1
 80158fe:	e128      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015900:	4b96      	ldr	r3, [pc, #600]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2201      	movs	r2, #1
 8015906:	4013      	ands	r3, r2
 8015908:	683a      	ldr	r2, [r7, #0]
 801590a:	429a      	cmp	r2, r3
 801590c:	d91e      	bls.n	801594c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801590e:	4b93      	ldr	r3, [pc, #588]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	2201      	movs	r2, #1
 8015914:	4393      	bics	r3, r2
 8015916:	0019      	movs	r1, r3
 8015918:	4b90      	ldr	r3, [pc, #576]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 801591a:	683a      	ldr	r2, [r7, #0]
 801591c:	430a      	orrs	r2, r1
 801591e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015920:	f7f9 fae0 	bl	800eee4 <HAL_GetTick>
 8015924:	0003      	movs	r3, r0
 8015926:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015928:	e009      	b.n	801593e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801592a:	f7f9 fadb 	bl	800eee4 <HAL_GetTick>
 801592e:	0002      	movs	r2, r0
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	1ad3      	subs	r3, r2, r3
 8015934:	4a8a      	ldr	r2, [pc, #552]	@ (8015b60 <HAL_RCC_ClockConfig+0x274>)
 8015936:	4293      	cmp	r3, r2
 8015938:	d901      	bls.n	801593e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801593a:	2303      	movs	r3, #3
 801593c:	e109      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801593e:	4b87      	ldr	r3, [pc, #540]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	2201      	movs	r2, #1
 8015944:	4013      	ands	r3, r2
 8015946:	683a      	ldr	r2, [r7, #0]
 8015948:	429a      	cmp	r2, r3
 801594a:	d1ee      	bne.n	801592a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	2202      	movs	r2, #2
 8015952:	4013      	ands	r3, r2
 8015954:	d009      	beq.n	801596a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015956:	4b83      	ldr	r3, [pc, #524]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	22f0      	movs	r2, #240	@ 0xf0
 801595c:	4393      	bics	r3, r2
 801595e:	0019      	movs	r1, r3
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	689a      	ldr	r2, [r3, #8]
 8015964:	4b7f      	ldr	r3, [pc, #508]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015966:	430a      	orrs	r2, r1
 8015968:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2201      	movs	r2, #1
 8015970:	4013      	ands	r3, r2
 8015972:	d100      	bne.n	8015976 <HAL_RCC_ClockConfig+0x8a>
 8015974:	e089      	b.n	8015a8a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	2b02      	cmp	r3, #2
 801597c:	d107      	bne.n	801598e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801597e:	4b79      	ldr	r3, [pc, #484]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015980:	681a      	ldr	r2, [r3, #0]
 8015982:	2380      	movs	r3, #128	@ 0x80
 8015984:	029b      	lsls	r3, r3, #10
 8015986:	4013      	ands	r3, r2
 8015988:	d120      	bne.n	80159cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801598a:	2301      	movs	r3, #1
 801598c:	e0e1      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	685b      	ldr	r3, [r3, #4]
 8015992:	2b03      	cmp	r3, #3
 8015994:	d107      	bne.n	80159a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015996:	4b73      	ldr	r3, [pc, #460]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015998:	681a      	ldr	r2, [r3, #0]
 801599a:	2380      	movs	r3, #128	@ 0x80
 801599c:	049b      	lsls	r3, r3, #18
 801599e:	4013      	ands	r3, r2
 80159a0:	d114      	bne.n	80159cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80159a2:	2301      	movs	r3, #1
 80159a4:	e0d5      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d106      	bne.n	80159bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80159ae:	4b6d      	ldr	r3, [pc, #436]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2204      	movs	r2, #4
 80159b4:	4013      	ands	r3, r2
 80159b6:	d109      	bne.n	80159cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80159b8:	2301      	movs	r3, #1
 80159ba:	e0ca      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80159bc:	4b69      	ldr	r3, [pc, #420]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	2380      	movs	r3, #128	@ 0x80
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	4013      	ands	r3, r2
 80159c6:	d101      	bne.n	80159cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80159c8:	2301      	movs	r3, #1
 80159ca:	e0c2      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80159cc:	4b65      	ldr	r3, [pc, #404]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	2203      	movs	r2, #3
 80159d2:	4393      	bics	r3, r2
 80159d4:	0019      	movs	r1, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	685a      	ldr	r2, [r3, #4]
 80159da:	4b62      	ldr	r3, [pc, #392]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 80159dc:	430a      	orrs	r2, r1
 80159de:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80159e0:	f7f9 fa80 	bl	800eee4 <HAL_GetTick>
 80159e4:	0003      	movs	r3, r0
 80159e6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	2b02      	cmp	r3, #2
 80159ee:	d111      	bne.n	8015a14 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159f0:	e009      	b.n	8015a06 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159f2:	f7f9 fa77 	bl	800eee4 <HAL_GetTick>
 80159f6:	0002      	movs	r2, r0
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	1ad3      	subs	r3, r2, r3
 80159fc:	4a58      	ldr	r2, [pc, #352]	@ (8015b60 <HAL_RCC_ClockConfig+0x274>)
 80159fe:	4293      	cmp	r3, r2
 8015a00:	d901      	bls.n	8015a06 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8015a02:	2303      	movs	r3, #3
 8015a04:	e0a5      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015a06:	4b57      	ldr	r3, [pc, #348]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	220c      	movs	r2, #12
 8015a0c:	4013      	ands	r3, r2
 8015a0e:	2b08      	cmp	r3, #8
 8015a10:	d1ef      	bne.n	80159f2 <HAL_RCC_ClockConfig+0x106>
 8015a12:	e03a      	b.n	8015a8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	2b03      	cmp	r3, #3
 8015a1a:	d111      	bne.n	8015a40 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015a1c:	e009      	b.n	8015a32 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a1e:	f7f9 fa61 	bl	800eee4 <HAL_GetTick>
 8015a22:	0002      	movs	r2, r0
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	1ad3      	subs	r3, r2, r3
 8015a28:	4a4d      	ldr	r2, [pc, #308]	@ (8015b60 <HAL_RCC_ClockConfig+0x274>)
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	d901      	bls.n	8015a32 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8015a2e:	2303      	movs	r3, #3
 8015a30:	e08f      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015a32:	4b4c      	ldr	r3, [pc, #304]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	220c      	movs	r2, #12
 8015a38:	4013      	ands	r3, r2
 8015a3a:	2b0c      	cmp	r3, #12
 8015a3c:	d1ef      	bne.n	8015a1e <HAL_RCC_ClockConfig+0x132>
 8015a3e:	e024      	b.n	8015a8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	685b      	ldr	r3, [r3, #4]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d11b      	bne.n	8015a80 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a48:	e009      	b.n	8015a5e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a4a:	f7f9 fa4b 	bl	800eee4 <HAL_GetTick>
 8015a4e:	0002      	movs	r2, r0
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	4a42      	ldr	r2, [pc, #264]	@ (8015b60 <HAL_RCC_ClockConfig+0x274>)
 8015a56:	4293      	cmp	r3, r2
 8015a58:	d901      	bls.n	8015a5e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015a5a:	2303      	movs	r3, #3
 8015a5c:	e079      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a5e:	4b41      	ldr	r3, [pc, #260]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	220c      	movs	r2, #12
 8015a64:	4013      	ands	r3, r2
 8015a66:	2b04      	cmp	r3, #4
 8015a68:	d1ef      	bne.n	8015a4a <HAL_RCC_ClockConfig+0x15e>
 8015a6a:	e00e      	b.n	8015a8a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a6c:	f7f9 fa3a 	bl	800eee4 <HAL_GetTick>
 8015a70:	0002      	movs	r2, r0
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	1ad3      	subs	r3, r2, r3
 8015a76:	4a3a      	ldr	r2, [pc, #232]	@ (8015b60 <HAL_RCC_ClockConfig+0x274>)
 8015a78:	4293      	cmp	r3, r2
 8015a7a:	d901      	bls.n	8015a80 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015a7c:	2303      	movs	r3, #3
 8015a7e:	e068      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015a80:	4b38      	ldr	r3, [pc, #224]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015a82:	68db      	ldr	r3, [r3, #12]
 8015a84:	220c      	movs	r2, #12
 8015a86:	4013      	ands	r3, r2
 8015a88:	d1f0      	bne.n	8015a6c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015a8a:	4b34      	ldr	r3, [pc, #208]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2201      	movs	r2, #1
 8015a90:	4013      	ands	r3, r2
 8015a92:	683a      	ldr	r2, [r7, #0]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d21e      	bcs.n	8015ad6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015a98:	4b30      	ldr	r3, [pc, #192]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2201      	movs	r2, #1
 8015a9e:	4393      	bics	r3, r2
 8015aa0:	0019      	movs	r1, r3
 8015aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015aa4:	683a      	ldr	r2, [r7, #0]
 8015aa6:	430a      	orrs	r2, r1
 8015aa8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015aaa:	f7f9 fa1b 	bl	800eee4 <HAL_GetTick>
 8015aae:	0003      	movs	r3, r0
 8015ab0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015ab2:	e009      	b.n	8015ac8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015ab4:	f7f9 fa16 	bl	800eee4 <HAL_GetTick>
 8015ab8:	0002      	movs	r2, r0
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	1ad3      	subs	r3, r2, r3
 8015abe:	4a28      	ldr	r2, [pc, #160]	@ (8015b60 <HAL_RCC_ClockConfig+0x274>)
 8015ac0:	4293      	cmp	r3, r2
 8015ac2:	d901      	bls.n	8015ac8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015ac4:	2303      	movs	r3, #3
 8015ac6:	e044      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015ac8:	4b24      	ldr	r3, [pc, #144]	@ (8015b5c <HAL_RCC_ClockConfig+0x270>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	2201      	movs	r2, #1
 8015ace:	4013      	ands	r3, r2
 8015ad0:	683a      	ldr	r2, [r7, #0]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d1ee      	bne.n	8015ab4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2204      	movs	r2, #4
 8015adc:	4013      	ands	r3, r2
 8015ade:	d009      	beq.n	8015af4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015ae0:	4b20      	ldr	r3, [pc, #128]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	4a20      	ldr	r2, [pc, #128]	@ (8015b68 <HAL_RCC_ClockConfig+0x27c>)
 8015ae6:	4013      	ands	r3, r2
 8015ae8:	0019      	movs	r1, r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	68da      	ldr	r2, [r3, #12]
 8015aee:	4b1d      	ldr	r3, [pc, #116]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015af0:	430a      	orrs	r2, r1
 8015af2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2208      	movs	r2, #8
 8015afa:	4013      	ands	r3, r2
 8015afc:	d00a      	beq.n	8015b14 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015afe:	4b19      	ldr	r3, [pc, #100]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015b00:	68db      	ldr	r3, [r3, #12]
 8015b02:	4a1a      	ldr	r2, [pc, #104]	@ (8015b6c <HAL_RCC_ClockConfig+0x280>)
 8015b04:	4013      	ands	r3, r2
 8015b06:	0019      	movs	r1, r3
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	691b      	ldr	r3, [r3, #16]
 8015b0c:	00da      	lsls	r2, r3, #3
 8015b0e:	4b15      	ldr	r3, [pc, #84]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015b10:	430a      	orrs	r2, r1
 8015b12:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015b14:	f000 f832 	bl	8015b7c <HAL_RCC_GetSysClockFreq>
 8015b18:	0001      	movs	r1, r0
 8015b1a:	4b12      	ldr	r3, [pc, #72]	@ (8015b64 <HAL_RCC_ClockConfig+0x278>)
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	091b      	lsrs	r3, r3, #4
 8015b20:	220f      	movs	r2, #15
 8015b22:	4013      	ands	r3, r2
 8015b24:	4a12      	ldr	r2, [pc, #72]	@ (8015b70 <HAL_RCC_ClockConfig+0x284>)
 8015b26:	5cd3      	ldrb	r3, [r2, r3]
 8015b28:	000a      	movs	r2, r1
 8015b2a:	40da      	lsrs	r2, r3
 8015b2c:	4b11      	ldr	r3, [pc, #68]	@ (8015b74 <HAL_RCC_ClockConfig+0x288>)
 8015b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015b30:	4b11      	ldr	r3, [pc, #68]	@ (8015b78 <HAL_RCC_ClockConfig+0x28c>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	250b      	movs	r5, #11
 8015b36:	197c      	adds	r4, r7, r5
 8015b38:	0018      	movs	r0, r3
 8015b3a:	f7f9 f98d 	bl	800ee58 <HAL_InitTick>
 8015b3e:	0003      	movs	r3, r0
 8015b40:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015b42:	197b      	adds	r3, r7, r5
 8015b44:	781b      	ldrb	r3, [r3, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d002      	beq.n	8015b50 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015b4a:	197b      	adds	r3, r7, r5
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	e000      	b.n	8015b52 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015b50:	2300      	movs	r3, #0
}
 8015b52:	0018      	movs	r0, r3
 8015b54:	46bd      	mov	sp, r7
 8015b56:	b004      	add	sp, #16
 8015b58:	bdb0      	pop	{r4, r5, r7, pc}
 8015b5a:	46c0      	nop			@ (mov r8, r8)
 8015b5c:	40022000 	.word	0x40022000
 8015b60:	00001388 	.word	0x00001388
 8015b64:	40021000 	.word	0x40021000
 8015b68:	fffff8ff 	.word	0xfffff8ff
 8015b6c:	ffffc7ff 	.word	0xffffc7ff
 8015b70:	08025810 	.word	0x08025810
 8015b74:	200000d0 	.word	0x200000d0
 8015b78:	200000e0 	.word	0x200000e0

08015b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015b7c:	b5b0      	push	{r4, r5, r7, lr}
 8015b7e:	b08e      	sub	sp, #56	@ 0x38
 8015b80:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015b82:	4b4c      	ldr	r3, [pc, #304]	@ (8015cb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b8a:	230c      	movs	r3, #12
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	2b0c      	cmp	r3, #12
 8015b90:	d014      	beq.n	8015bbc <HAL_RCC_GetSysClockFreq+0x40>
 8015b92:	d900      	bls.n	8015b96 <HAL_RCC_GetSysClockFreq+0x1a>
 8015b94:	e07b      	b.n	8015c8e <HAL_RCC_GetSysClockFreq+0x112>
 8015b96:	2b04      	cmp	r3, #4
 8015b98:	d002      	beq.n	8015ba0 <HAL_RCC_GetSysClockFreq+0x24>
 8015b9a:	2b08      	cmp	r3, #8
 8015b9c:	d00b      	beq.n	8015bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8015b9e:	e076      	b.n	8015c8e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015ba0:	4b44      	ldr	r3, [pc, #272]	@ (8015cb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	2210      	movs	r2, #16
 8015ba6:	4013      	ands	r3, r2
 8015ba8:	d002      	beq.n	8015bb0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015baa:	4b43      	ldr	r3, [pc, #268]	@ (8015cb8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015bac:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015bae:	e07c      	b.n	8015caa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015bb0:	4b42      	ldr	r3, [pc, #264]	@ (8015cbc <HAL_RCC_GetSysClockFreq+0x140>)
 8015bb2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015bb4:	e079      	b.n	8015caa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015bb6:	4b42      	ldr	r3, [pc, #264]	@ (8015cc0 <HAL_RCC_GetSysClockFreq+0x144>)
 8015bb8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015bba:	e076      	b.n	8015caa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bbe:	0c9a      	lsrs	r2, r3, #18
 8015bc0:	230f      	movs	r3, #15
 8015bc2:	401a      	ands	r2, r3
 8015bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8015cc4 <HAL_RCC_GetSysClockFreq+0x148>)
 8015bc6:	5c9b      	ldrb	r3, [r3, r2]
 8015bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bcc:	0d9a      	lsrs	r2, r3, #22
 8015bce:	2303      	movs	r3, #3
 8015bd0:	4013      	ands	r3, r2
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015bd6:	4b37      	ldr	r3, [pc, #220]	@ (8015cb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8015bd8:	68da      	ldr	r2, [r3, #12]
 8015bda:	2380      	movs	r3, #128	@ 0x80
 8015bdc:	025b      	lsls	r3, r3, #9
 8015bde:	4013      	ands	r3, r2
 8015be0:	d01a      	beq.n	8015c18 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015be4:	61bb      	str	r3, [r7, #24]
 8015be6:	2300      	movs	r3, #0
 8015be8:	61fb      	str	r3, [r7, #28]
 8015bea:	4a35      	ldr	r2, [pc, #212]	@ (8015cc0 <HAL_RCC_GetSysClockFreq+0x144>)
 8015bec:	2300      	movs	r3, #0
 8015bee:	69b8      	ldr	r0, [r7, #24]
 8015bf0:	69f9      	ldr	r1, [r7, #28]
 8015bf2:	f7ea fce5 	bl	80005c0 <__aeabi_lmul>
 8015bf6:	0002      	movs	r2, r0
 8015bf8:	000b      	movs	r3, r1
 8015bfa:	0010      	movs	r0, r2
 8015bfc:	0019      	movs	r1, r3
 8015bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c00:	613b      	str	r3, [r7, #16]
 8015c02:	2300      	movs	r3, #0
 8015c04:	617b      	str	r3, [r7, #20]
 8015c06:	693a      	ldr	r2, [r7, #16]
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	f7ea fcb9 	bl	8000580 <__aeabi_uldivmod>
 8015c0e:	0002      	movs	r2, r0
 8015c10:	000b      	movs	r3, r1
 8015c12:	0013      	movs	r3, r2
 8015c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c16:	e037      	b.n	8015c88 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015c18:	4b26      	ldr	r3, [pc, #152]	@ (8015cb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	2210      	movs	r2, #16
 8015c1e:	4013      	ands	r3, r2
 8015c20:	d01a      	beq.n	8015c58 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c24:	60bb      	str	r3, [r7, #8]
 8015c26:	2300      	movs	r3, #0
 8015c28:	60fb      	str	r3, [r7, #12]
 8015c2a:	4a23      	ldr	r2, [pc, #140]	@ (8015cb8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	68b8      	ldr	r0, [r7, #8]
 8015c30:	68f9      	ldr	r1, [r7, #12]
 8015c32:	f7ea fcc5 	bl	80005c0 <__aeabi_lmul>
 8015c36:	0002      	movs	r2, r0
 8015c38:	000b      	movs	r3, r1
 8015c3a:	0010      	movs	r0, r2
 8015c3c:	0019      	movs	r1, r3
 8015c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c40:	603b      	str	r3, [r7, #0]
 8015c42:	2300      	movs	r3, #0
 8015c44:	607b      	str	r3, [r7, #4]
 8015c46:	683a      	ldr	r2, [r7, #0]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f7ea fc99 	bl	8000580 <__aeabi_uldivmod>
 8015c4e:	0002      	movs	r2, r0
 8015c50:	000b      	movs	r3, r1
 8015c52:	0013      	movs	r3, r2
 8015c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c56:	e017      	b.n	8015c88 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c5a:	0018      	movs	r0, r3
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	0019      	movs	r1, r3
 8015c60:	4a16      	ldr	r2, [pc, #88]	@ (8015cbc <HAL_RCC_GetSysClockFreq+0x140>)
 8015c62:	2300      	movs	r3, #0
 8015c64:	f7ea fcac 	bl	80005c0 <__aeabi_lmul>
 8015c68:	0002      	movs	r2, r0
 8015c6a:	000b      	movs	r3, r1
 8015c6c:	0010      	movs	r0, r2
 8015c6e:	0019      	movs	r1, r3
 8015c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c72:	001c      	movs	r4, r3
 8015c74:	2300      	movs	r3, #0
 8015c76:	001d      	movs	r5, r3
 8015c78:	0022      	movs	r2, r4
 8015c7a:	002b      	movs	r3, r5
 8015c7c:	f7ea fc80 	bl	8000580 <__aeabi_uldivmod>
 8015c80:	0002      	movs	r2, r0
 8015c82:	000b      	movs	r3, r1
 8015c84:	0013      	movs	r3, r2
 8015c86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c8a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015c8c:	e00d      	b.n	8015caa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015c8e:	4b09      	ldr	r3, [pc, #36]	@ (8015cb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	0b5b      	lsrs	r3, r3, #13
 8015c94:	2207      	movs	r2, #7
 8015c96:	4013      	ands	r3, r2
 8015c98:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015c9a:	6a3b      	ldr	r3, [r7, #32]
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	2280      	movs	r2, #128	@ 0x80
 8015ca0:	0212      	lsls	r2, r2, #8
 8015ca2:	409a      	lsls	r2, r3
 8015ca4:	0013      	movs	r3, r2
 8015ca6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015ca8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015cac:	0018      	movs	r0, r3
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	b00e      	add	sp, #56	@ 0x38
 8015cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8015cb4:	40021000 	.word	0x40021000
 8015cb8:	003d0900 	.word	0x003d0900
 8015cbc:	00f42400 	.word	0x00f42400
 8015cc0:	007a1200 	.word	0x007a1200
 8015cc4:	08025828 	.word	0x08025828

08015cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015ccc:	4b02      	ldr	r3, [pc, #8]	@ (8015cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8015cce:	681b      	ldr	r3, [r3, #0]
}
 8015cd0:	0018      	movs	r0, r3
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}
 8015cd6:	46c0      	nop			@ (mov r8, r8)
 8015cd8:	200000d0 	.word	0x200000d0

08015cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015ce0:	f7ff fff2 	bl	8015cc8 <HAL_RCC_GetHCLKFreq>
 8015ce4:	0001      	movs	r1, r0
 8015ce6:	4b06      	ldr	r3, [pc, #24]	@ (8015d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015ce8:	68db      	ldr	r3, [r3, #12]
 8015cea:	0a1b      	lsrs	r3, r3, #8
 8015cec:	2207      	movs	r2, #7
 8015cee:	4013      	ands	r3, r2
 8015cf0:	4a04      	ldr	r2, [pc, #16]	@ (8015d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015cf2:	5cd3      	ldrb	r3, [r2, r3]
 8015cf4:	40d9      	lsrs	r1, r3
 8015cf6:	000b      	movs	r3, r1
}
 8015cf8:	0018      	movs	r0, r3
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	46c0      	nop			@ (mov r8, r8)
 8015d00:	40021000 	.word	0x40021000
 8015d04:	08025820 	.word	0x08025820

08015d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015d0c:	f7ff ffdc 	bl	8015cc8 <HAL_RCC_GetHCLKFreq>
 8015d10:	0001      	movs	r1, r0
 8015d12:	4b06      	ldr	r3, [pc, #24]	@ (8015d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	0adb      	lsrs	r3, r3, #11
 8015d18:	2207      	movs	r2, #7
 8015d1a:	4013      	ands	r3, r2
 8015d1c:	4a04      	ldr	r2, [pc, #16]	@ (8015d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015d1e:	5cd3      	ldrb	r3, [r2, r3]
 8015d20:	40d9      	lsrs	r1, r3
 8015d22:	000b      	movs	r3, r1
}
 8015d24:	0018      	movs	r0, r3
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	46c0      	nop			@ (mov r8, r8)
 8015d2c:	40021000 	.word	0x40021000
 8015d30:	08025820 	.word	0x08025820

08015d34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b086      	sub	sp, #24
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015d3c:	2017      	movs	r0, #23
 8015d3e:	183b      	adds	r3, r7, r0
 8015d40:	2200      	movs	r2, #0
 8015d42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	2220      	movs	r2, #32
 8015d4a:	4013      	ands	r3, r2
 8015d4c:	d100      	bne.n	8015d50 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015d4e:	e0c7      	b.n	8015ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015d50:	4b9b      	ldr	r3, [pc, #620]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d54:	2380      	movs	r3, #128	@ 0x80
 8015d56:	055b      	lsls	r3, r3, #21
 8015d58:	4013      	ands	r3, r2
 8015d5a:	d109      	bne.n	8015d70 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015d5c:	4b98      	ldr	r3, [pc, #608]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d60:	4b97      	ldr	r3, [pc, #604]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d62:	2180      	movs	r1, #128	@ 0x80
 8015d64:	0549      	lsls	r1, r1, #21
 8015d66:	430a      	orrs	r2, r1
 8015d68:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015d6a:	183b      	adds	r3, r7, r0
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d70:	4b94      	ldr	r3, [pc, #592]	@ (8015fc4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	2380      	movs	r3, #128	@ 0x80
 8015d76:	005b      	lsls	r3, r3, #1
 8015d78:	4013      	ands	r3, r2
 8015d7a:	d11a      	bne.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015d7c:	4b91      	ldr	r3, [pc, #580]	@ (8015fc4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d7e:	681a      	ldr	r2, [r3, #0]
 8015d80:	4b90      	ldr	r3, [pc, #576]	@ (8015fc4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d82:	2180      	movs	r1, #128	@ 0x80
 8015d84:	0049      	lsls	r1, r1, #1
 8015d86:	430a      	orrs	r2, r1
 8015d88:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015d8a:	f7f9 f8ab 	bl	800eee4 <HAL_GetTick>
 8015d8e:	0003      	movs	r3, r0
 8015d90:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d92:	e008      	b.n	8015da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015d94:	f7f9 f8a6 	bl	800eee4 <HAL_GetTick>
 8015d98:	0002      	movs	r2, r0
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	1ad3      	subs	r3, r2, r3
 8015d9e:	2b64      	cmp	r3, #100	@ 0x64
 8015da0:	d901      	bls.n	8015da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015da2:	2303      	movs	r3, #3
 8015da4:	e107      	b.n	8015fb6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015da6:	4b87      	ldr	r3, [pc, #540]	@ (8015fc4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	2380      	movs	r3, #128	@ 0x80
 8015dac:	005b      	lsls	r3, r3, #1
 8015dae:	4013      	ands	r3, r2
 8015db0:	d0f0      	beq.n	8015d94 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015db2:	4b83      	ldr	r3, [pc, #524]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015db4:	681a      	ldr	r2, [r3, #0]
 8015db6:	23c0      	movs	r3, #192	@ 0xc0
 8015db8:	039b      	lsls	r3, r3, #14
 8015dba:	4013      	ands	r3, r2
 8015dbc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	685a      	ldr	r2, [r3, #4]
 8015dc2:	23c0      	movs	r3, #192	@ 0xc0
 8015dc4:	039b      	lsls	r3, r3, #14
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d013      	beq.n	8015df6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	685a      	ldr	r2, [r3, #4]
 8015dd2:	23c0      	movs	r3, #192	@ 0xc0
 8015dd4:	029b      	lsls	r3, r3, #10
 8015dd6:	401a      	ands	r2, r3
 8015dd8:	23c0      	movs	r3, #192	@ 0xc0
 8015dda:	029b      	lsls	r3, r3, #10
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d10a      	bne.n	8015df6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015de0:	4b77      	ldr	r3, [pc, #476]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015de2:	681a      	ldr	r2, [r3, #0]
 8015de4:	2380      	movs	r3, #128	@ 0x80
 8015de6:	029b      	lsls	r3, r3, #10
 8015de8:	401a      	ands	r2, r3
 8015dea:	2380      	movs	r3, #128	@ 0x80
 8015dec:	029b      	lsls	r3, r3, #10
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d101      	bne.n	8015df6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015df2:	2301      	movs	r3, #1
 8015df4:	e0df      	b.n	8015fb6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015df6:	4b72      	ldr	r3, [pc, #456]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015dfa:	23c0      	movs	r3, #192	@ 0xc0
 8015dfc:	029b      	lsls	r3, r3, #10
 8015dfe:	4013      	ands	r3, r2
 8015e00:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d03b      	beq.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	685a      	ldr	r2, [r3, #4]
 8015e0c:	23c0      	movs	r3, #192	@ 0xc0
 8015e0e:	029b      	lsls	r3, r3, #10
 8015e10:	4013      	ands	r3, r2
 8015e12:	68fa      	ldr	r2, [r7, #12]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d033      	beq.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2220      	movs	r2, #32
 8015e1e:	4013      	ands	r3, r2
 8015e20:	d02e      	beq.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015e22:	4b67      	ldr	r3, [pc, #412]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015e26:	4a68      	ldr	r2, [pc, #416]	@ (8015fc8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015e28:	4013      	ands	r3, r2
 8015e2a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015e2c:	4b64      	ldr	r3, [pc, #400]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e30:	4b63      	ldr	r3, [pc, #396]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e32:	2180      	movs	r1, #128	@ 0x80
 8015e34:	0309      	lsls	r1, r1, #12
 8015e36:	430a      	orrs	r2, r1
 8015e38:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015e3a:	4b61      	ldr	r3, [pc, #388]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e3e:	4b60      	ldr	r3, [pc, #384]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e40:	4962      	ldr	r1, [pc, #392]	@ (8015fcc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015e42:	400a      	ands	r2, r1
 8015e44:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015e46:	4b5e      	ldr	r3, [pc, #376]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e48:	68fa      	ldr	r2, [r7, #12]
 8015e4a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015e4c:	68fa      	ldr	r2, [r7, #12]
 8015e4e:	2380      	movs	r3, #128	@ 0x80
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	4013      	ands	r3, r2
 8015e54:	d014      	beq.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015e56:	f7f9 f845 	bl	800eee4 <HAL_GetTick>
 8015e5a:	0003      	movs	r3, r0
 8015e5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e5e:	e009      	b.n	8015e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015e60:	f7f9 f840 	bl	800eee4 <HAL_GetTick>
 8015e64:	0002      	movs	r2, r0
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	1ad3      	subs	r3, r2, r3
 8015e6a:	4a59      	ldr	r2, [pc, #356]	@ (8015fd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	d901      	bls.n	8015e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015e70:	2303      	movs	r3, #3
 8015e72:	e0a0      	b.n	8015fb6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e74:	4b52      	ldr	r3, [pc, #328]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e78:	2380      	movs	r3, #128	@ 0x80
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	4013      	ands	r3, r2
 8015e7e:	d0ef      	beq.n	8015e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	2220      	movs	r2, #32
 8015e86:	4013      	ands	r3, r2
 8015e88:	d01f      	beq.n	8015eca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	685a      	ldr	r2, [r3, #4]
 8015e8e:	23c0      	movs	r3, #192	@ 0xc0
 8015e90:	029b      	lsls	r3, r3, #10
 8015e92:	401a      	ands	r2, r3
 8015e94:	23c0      	movs	r3, #192	@ 0xc0
 8015e96:	029b      	lsls	r3, r3, #10
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d10c      	bne.n	8015eb6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015e9c:	4b48      	ldr	r3, [pc, #288]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8015fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015ea2:	4013      	ands	r3, r2
 8015ea4:	0019      	movs	r1, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	685a      	ldr	r2, [r3, #4]
 8015eaa:	23c0      	movs	r3, #192	@ 0xc0
 8015eac:	039b      	lsls	r3, r3, #14
 8015eae:	401a      	ands	r2, r3
 8015eb0:	4b43      	ldr	r3, [pc, #268]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eb2:	430a      	orrs	r2, r1
 8015eb4:	601a      	str	r2, [r3, #0]
 8015eb6:	4b42      	ldr	r3, [pc, #264]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	685a      	ldr	r2, [r3, #4]
 8015ebe:	23c0      	movs	r3, #192	@ 0xc0
 8015ec0:	029b      	lsls	r3, r3, #10
 8015ec2:	401a      	ands	r2, r3
 8015ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ec6:	430a      	orrs	r2, r1
 8015ec8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015eca:	2317      	movs	r3, #23
 8015ecc:	18fb      	adds	r3, r7, r3
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d105      	bne.n	8015ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ed8:	4b39      	ldr	r3, [pc, #228]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eda:	493f      	ldr	r1, [pc, #252]	@ (8015fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015edc:	400a      	ands	r2, r1
 8015ede:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	4013      	ands	r3, r2
 8015ee8:	d009      	beq.n	8015efe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015eea:	4b35      	ldr	r3, [pc, #212]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015eee:	2203      	movs	r2, #3
 8015ef0:	4393      	bics	r3, r2
 8015ef2:	0019      	movs	r1, r3
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	689a      	ldr	r2, [r3, #8]
 8015ef8:	4b31      	ldr	r3, [pc, #196]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015efa:	430a      	orrs	r2, r1
 8015efc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2202      	movs	r2, #2
 8015f04:	4013      	ands	r3, r2
 8015f06:	d009      	beq.n	8015f1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015f08:	4b2d      	ldr	r3, [pc, #180]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f0c:	220c      	movs	r2, #12
 8015f0e:	4393      	bics	r3, r2
 8015f10:	0019      	movs	r1, r3
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	68da      	ldr	r2, [r3, #12]
 8015f16:	4b2a      	ldr	r3, [pc, #168]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f18:	430a      	orrs	r2, r1
 8015f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2204      	movs	r2, #4
 8015f22:	4013      	ands	r3, r2
 8015f24:	d009      	beq.n	8015f3a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015f26:	4b26      	ldr	r3, [pc, #152]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8015fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015f2c:	4013      	ands	r3, r2
 8015f2e:	0019      	movs	r1, r3
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	691a      	ldr	r2, [r3, #16]
 8015f34:	4b22      	ldr	r3, [pc, #136]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f36:	430a      	orrs	r2, r1
 8015f38:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2208      	movs	r2, #8
 8015f40:	4013      	ands	r3, r2
 8015f42:	d009      	beq.n	8015f58 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015f44:	4b1e      	ldr	r3, [pc, #120]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f48:	4a25      	ldr	r2, [pc, #148]	@ (8015fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	0019      	movs	r1, r3
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	695a      	ldr	r2, [r3, #20]
 8015f52:	4b1b      	ldr	r3, [pc, #108]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f54:	430a      	orrs	r2, r1
 8015f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681a      	ldr	r2, [r3, #0]
 8015f5c:	2380      	movs	r3, #128	@ 0x80
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	4013      	ands	r3, r2
 8015f62:	d009      	beq.n	8015f78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015f64:	4b16      	ldr	r3, [pc, #88]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f68:	4a17      	ldr	r2, [pc, #92]	@ (8015fc8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	0019      	movs	r1, r3
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	699a      	ldr	r2, [r3, #24]
 8015f72:	4b13      	ldr	r3, [pc, #76]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f74:	430a      	orrs	r2, r1
 8015f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	2240      	movs	r2, #64	@ 0x40
 8015f7e:	4013      	ands	r3, r2
 8015f80:	d009      	beq.n	8015f96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015f82:	4b0f      	ldr	r3, [pc, #60]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f86:	4a17      	ldr	r2, [pc, #92]	@ (8015fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015f88:	4013      	ands	r3, r2
 8015f8a:	0019      	movs	r1, r3
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6a1a      	ldr	r2, [r3, #32]
 8015f90:	4b0b      	ldr	r3, [pc, #44]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f92:	430a      	orrs	r2, r1
 8015f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2280      	movs	r2, #128	@ 0x80
 8015f9c:	4013      	ands	r3, r2
 8015f9e:	d009      	beq.n	8015fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015fa0:	4b07      	ldr	r3, [pc, #28]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015fa4:	4a10      	ldr	r2, [pc, #64]	@ (8015fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	0019      	movs	r1, r3
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	69da      	ldr	r2, [r3, #28]
 8015fae:	4b04      	ldr	r3, [pc, #16]	@ (8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015fb0:	430a      	orrs	r2, r1
 8015fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015fb4:	2300      	movs	r3, #0
}
 8015fb6:	0018      	movs	r0, r3
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	b006      	add	sp, #24
 8015fbc:	bd80      	pop	{r7, pc}
 8015fbe:	46c0      	nop			@ (mov r8, r8)
 8015fc0:	40021000 	.word	0x40021000
 8015fc4:	40007000 	.word	0x40007000
 8015fc8:	fffcffff 	.word	0xfffcffff
 8015fcc:	fff7ffff 	.word	0xfff7ffff
 8015fd0:	00001388 	.word	0x00001388
 8015fd4:	ffcfffff 	.word	0xffcfffff
 8015fd8:	efffffff 	.word	0xefffffff
 8015fdc:	fffff3ff 	.word	0xfffff3ff
 8015fe0:	ffffcfff 	.word	0xffffcfff
 8015fe4:	fbffffff 	.word	0xfbffffff
 8015fe8:	fff3ffff 	.word	0xfff3ffff

08015fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015fec:	b5b0      	push	{r4, r5, r7, lr}
 8015fee:	b084      	sub	sp, #16
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015ff4:	230f      	movs	r3, #15
 8015ff6:	18fb      	adds	r3, r7, r3
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d101      	bne.n	8016006 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8016002:	2301      	movs	r3, #1
 8016004:	e088      	b.n	8016118 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2221      	movs	r2, #33	@ 0x21
 801600a:	5c9b      	ldrb	r3, [r3, r2]
 801600c:	b2db      	uxtb	r3, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	d107      	bne.n	8016022 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2220      	movs	r2, #32
 8016016:	2100      	movs	r1, #0
 8016018:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	0018      	movs	r0, r3
 801601e:	f7f3 f803 	bl	8009028 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2221      	movs	r2, #33	@ 0x21
 8016026:	2102      	movs	r1, #2
 8016028:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	68db      	ldr	r3, [r3, #12]
 8016030:	2210      	movs	r2, #16
 8016032:	4013      	ands	r3, r2
 8016034:	2b10      	cmp	r3, #16
 8016036:	d05f      	beq.n	80160f8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	22ca      	movs	r2, #202	@ 0xca
 801603e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	2253      	movs	r2, #83	@ 0x53
 8016046:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8016048:	250f      	movs	r5, #15
 801604a:	197c      	adds	r4, r7, r5
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	0018      	movs	r0, r3
 8016050:	f000 fa7c 	bl	801654c <RTC_EnterInitMode>
 8016054:	0003      	movs	r3, r0
 8016056:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8016058:	0028      	movs	r0, r5
 801605a:	183b      	adds	r3, r7, r0
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d12c      	bne.n	80160bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	689a      	ldr	r2, [r3, #8]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	492c      	ldr	r1, [pc, #176]	@ (8016120 <HAL_RTC_Init+0x134>)
 801606e:	400a      	ands	r2, r1
 8016070:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	6899      	ldr	r1, [r3, #8]
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	685a      	ldr	r2, [r3, #4]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	691b      	ldr	r3, [r3, #16]
 8016080:	431a      	orrs	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	699b      	ldr	r3, [r3, #24]
 8016086:	431a      	orrs	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	430a      	orrs	r2, r1
 801608e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	68d2      	ldr	r2, [r2, #12]
 8016098:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	6919      	ldr	r1, [r3, #16]
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	041a      	lsls	r2, r3, #16
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	430a      	orrs	r2, r1
 80160ac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80160ae:	183c      	adds	r4, r7, r0
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	0018      	movs	r0, r3
 80160b4:	f000 fa8e 	bl	80165d4 <RTC_ExitInitMode>
 80160b8:	0003      	movs	r3, r0
 80160ba:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80160bc:	230f      	movs	r3, #15
 80160be:	18fb      	adds	r3, r7, r3
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d113      	bne.n	80160ee <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2103      	movs	r1, #3
 80160d2:	438a      	bics	r2, r1
 80160d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	69da      	ldr	r2, [r3, #28]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	695b      	ldr	r3, [r3, #20]
 80160e4:	431a      	orrs	r2, r3
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	430a      	orrs	r2, r1
 80160ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	22ff      	movs	r2, #255	@ 0xff
 80160f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80160f6:	e003      	b.n	8016100 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80160f8:	230f      	movs	r3, #15
 80160fa:	18fb      	adds	r3, r7, r3
 80160fc:	2200      	movs	r2, #0
 80160fe:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8016100:	230f      	movs	r3, #15
 8016102:	18fb      	adds	r3, r7, r3
 8016104:	781b      	ldrb	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d103      	bne.n	8016112 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2221      	movs	r2, #33	@ 0x21
 801610e:	2101      	movs	r1, #1
 8016110:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8016112:	230f      	movs	r3, #15
 8016114:	18fb      	adds	r3, r7, r3
 8016116:	781b      	ldrb	r3, [r3, #0]
}
 8016118:	0018      	movs	r0, r3
 801611a:	46bd      	mov	sp, r7
 801611c:	b004      	add	sp, #16
 801611e:	bdb0      	pop	{r4, r5, r7, pc}
 8016120:	ff8fffbf 	.word	0xff8fffbf

08016124 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016124:	b5b0      	push	{r4, r5, r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af00      	add	r7, sp, #0
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016130:	2300      	movs	r3, #0
 8016132:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2220      	movs	r2, #32
 8016138:	5c9b      	ldrb	r3, [r3, r2]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d101      	bne.n	8016142 <HAL_RTC_SetTime+0x1e>
 801613e:	2302      	movs	r3, #2
 8016140:	e092      	b.n	8016268 <HAL_RTC_SetTime+0x144>
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	2220      	movs	r2, #32
 8016146:	2101      	movs	r1, #1
 8016148:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2221      	movs	r2, #33	@ 0x21
 801614e:	2102      	movs	r1, #2
 8016150:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d125      	bne.n	80161a4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	689b      	ldr	r3, [r3, #8]
 801615e:	2240      	movs	r2, #64	@ 0x40
 8016160:	4013      	ands	r3, r2
 8016162:	d102      	bne.n	801616a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	2200      	movs	r2, #0
 8016168:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	0018      	movs	r0, r3
 8016170:	f000 fa5a 	bl	8016628 <RTC_ByteToBcd2>
 8016174:	0003      	movs	r3, r0
 8016176:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	785b      	ldrb	r3, [r3, #1]
 801617c:	0018      	movs	r0, r3
 801617e:	f000 fa53 	bl	8016628 <RTC_ByteToBcd2>
 8016182:	0003      	movs	r3, r0
 8016184:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016186:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	789b      	ldrb	r3, [r3, #2]
 801618c:	0018      	movs	r0, r3
 801618e:	f000 fa4b 	bl	8016628 <RTC_ByteToBcd2>
 8016192:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016194:	0022      	movs	r2, r4
 8016196:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	78db      	ldrb	r3, [r3, #3]
 801619c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801619e:	4313      	orrs	r3, r2
 80161a0:	617b      	str	r3, [r7, #20]
 80161a2:	e017      	b.n	80161d4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	689b      	ldr	r3, [r3, #8]
 80161aa:	2240      	movs	r2, #64	@ 0x40
 80161ac:	4013      	ands	r3, r2
 80161ae:	d102      	bne.n	80161b6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	2200      	movs	r2, #0
 80161b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	785b      	ldrb	r3, [r3, #1]
 80161c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80161c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80161c4:	68ba      	ldr	r2, [r7, #8]
 80161c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80161c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	78db      	ldrb	r3, [r3, #3]
 80161ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80161d0:	4313      	orrs	r3, r2
 80161d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	22ca      	movs	r2, #202	@ 0xca
 80161da:	625a      	str	r2, [r3, #36]	@ 0x24
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2253      	movs	r2, #83	@ 0x53
 80161e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80161e4:	2513      	movs	r5, #19
 80161e6:	197c      	adds	r4, r7, r5
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	0018      	movs	r0, r3
 80161ec:	f000 f9ae 	bl	801654c <RTC_EnterInitMode>
 80161f0:	0003      	movs	r3, r0
 80161f2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80161f4:	0028      	movs	r0, r5
 80161f6:	183b      	adds	r3, r7, r0
 80161f8:	781b      	ldrb	r3, [r3, #0]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d120      	bne.n	8016240 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	697a      	ldr	r2, [r7, #20]
 8016204:	491a      	ldr	r1, [pc, #104]	@ (8016270 <HAL_RTC_SetTime+0x14c>)
 8016206:	400a      	ands	r2, r1
 8016208:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	689a      	ldr	r2, [r3, #8]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4917      	ldr	r1, [pc, #92]	@ (8016274 <HAL_RTC_SetTime+0x150>)
 8016216:	400a      	ands	r2, r1
 8016218:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	6899      	ldr	r1, [r3, #8]
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	68da      	ldr	r2, [r3, #12]
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	691b      	ldr	r3, [r3, #16]
 8016228:	431a      	orrs	r2, r3
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	430a      	orrs	r2, r1
 8016230:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016232:	183c      	adds	r4, r7, r0
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	0018      	movs	r0, r3
 8016238:	f000 f9cc 	bl	80165d4 <RTC_ExitInitMode>
 801623c:	0003      	movs	r3, r0
 801623e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016240:	2313      	movs	r3, #19
 8016242:	18fb      	adds	r3, r7, r3
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d103      	bne.n	8016252 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2221      	movs	r2, #33	@ 0x21
 801624e:	2101      	movs	r1, #1
 8016250:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	22ff      	movs	r2, #255	@ 0xff
 8016258:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2220      	movs	r2, #32
 801625e:	2100      	movs	r1, #0
 8016260:	5499      	strb	r1, [r3, r2]

  return status;
 8016262:	2313      	movs	r3, #19
 8016264:	18fb      	adds	r3, r7, r3
 8016266:	781b      	ldrb	r3, [r3, #0]
}
 8016268:	0018      	movs	r0, r3
 801626a:	46bd      	mov	sp, r7
 801626c:	b006      	add	sp, #24
 801626e:	bdb0      	pop	{r4, r5, r7, pc}
 8016270:	007f7f7f 	.word	0x007f7f7f
 8016274:	fffbffff 	.word	0xfffbffff

08016278 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b086      	sub	sp, #24
 801627c:	af00      	add	r7, sp, #0
 801627e:	60f8      	str	r0, [r7, #12]
 8016280:	60b9      	str	r1, [r7, #8]
 8016282:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016284:	2300      	movs	r3, #0
 8016286:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	691b      	ldr	r3, [r3, #16]
 8016298:	045b      	lsls	r3, r3, #17
 801629a:	0c5a      	lsrs	r2, r3, #17
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	4a22      	ldr	r2, [pc, #136]	@ (8016330 <HAL_RTC_GetTime+0xb8>)
 80162a8:	4013      	ands	r3, r2
 80162aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	0c1b      	lsrs	r3, r3, #16
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	223f      	movs	r2, #63	@ 0x3f
 80162b4:	4013      	ands	r3, r2
 80162b6:	b2da      	uxtb	r2, r3
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	0a1b      	lsrs	r3, r3, #8
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	227f      	movs	r2, #127	@ 0x7f
 80162c4:	4013      	ands	r3, r2
 80162c6:	b2da      	uxtb	r2, r3
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	227f      	movs	r2, #127	@ 0x7f
 80162d2:	4013      	ands	r3, r2
 80162d4:	b2da      	uxtb	r2, r3
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	0d9b      	lsrs	r3, r3, #22
 80162de:	b2db      	uxtb	r3, r3
 80162e0:	2201      	movs	r2, #1
 80162e2:	4013      	ands	r3, r2
 80162e4:	b2da      	uxtb	r2, r3
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d11a      	bne.n	8016326 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	0018      	movs	r0, r3
 80162f6:	f000 f9b8 	bl	801666a <RTC_Bcd2ToByte>
 80162fa:	0003      	movs	r3, r0
 80162fc:	001a      	movs	r2, r3
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	785b      	ldrb	r3, [r3, #1]
 8016306:	0018      	movs	r0, r3
 8016308:	f000 f9af 	bl	801666a <RTC_Bcd2ToByte>
 801630c:	0003      	movs	r3, r0
 801630e:	001a      	movs	r2, r3
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	789b      	ldrb	r3, [r3, #2]
 8016318:	0018      	movs	r0, r3
 801631a:	f000 f9a6 	bl	801666a <RTC_Bcd2ToByte>
 801631e:	0003      	movs	r3, r0
 8016320:	001a      	movs	r2, r3
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016326:	2300      	movs	r3, #0
}
 8016328:	0018      	movs	r0, r3
 801632a:	46bd      	mov	sp, r7
 801632c:	b006      	add	sp, #24
 801632e:	bd80      	pop	{r7, pc}
 8016330:	007f7f7f 	.word	0x007f7f7f

08016334 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016334:	b5b0      	push	{r4, r5, r7, lr}
 8016336:	b086      	sub	sp, #24
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016340:	2300      	movs	r3, #0
 8016342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	2220      	movs	r2, #32
 8016348:	5c9b      	ldrb	r3, [r3, r2]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d101      	bne.n	8016352 <HAL_RTC_SetDate+0x1e>
 801634e:	2302      	movs	r3, #2
 8016350:	e07e      	b.n	8016450 <HAL_RTC_SetDate+0x11c>
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	2220      	movs	r2, #32
 8016356:	2101      	movs	r1, #1
 8016358:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	2221      	movs	r2, #33	@ 0x21
 801635e:	2102      	movs	r1, #2
 8016360:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d10e      	bne.n	8016386 <HAL_RTC_SetDate+0x52>
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	785b      	ldrb	r3, [r3, #1]
 801636c:	001a      	movs	r2, r3
 801636e:	2310      	movs	r3, #16
 8016370:	4013      	ands	r3, r2
 8016372:	d008      	beq.n	8016386 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	785b      	ldrb	r3, [r3, #1]
 8016378:	2210      	movs	r2, #16
 801637a:	4393      	bics	r3, r2
 801637c:	b2db      	uxtb	r3, r3
 801637e:	330a      	adds	r3, #10
 8016380:	b2da      	uxtb	r2, r3
 8016382:	68bb      	ldr	r3, [r7, #8]
 8016384:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d11c      	bne.n	80163c6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	78db      	ldrb	r3, [r3, #3]
 8016390:	0018      	movs	r0, r3
 8016392:	f000 f949 	bl	8016628 <RTC_ByteToBcd2>
 8016396:	0003      	movs	r3, r0
 8016398:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	785b      	ldrb	r3, [r3, #1]
 801639e:	0018      	movs	r0, r3
 80163a0:	f000 f942 	bl	8016628 <RTC_ByteToBcd2>
 80163a4:	0003      	movs	r3, r0
 80163a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80163a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	789b      	ldrb	r3, [r3, #2]
 80163ae:	0018      	movs	r0, r3
 80163b0:	f000 f93a 	bl	8016628 <RTC_ByteToBcd2>
 80163b4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80163b6:	0022      	movs	r2, r4
 80163b8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80163c0:	4313      	orrs	r3, r2
 80163c2:	617b      	str	r3, [r7, #20]
 80163c4:	e00e      	b.n	80163e4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	78db      	ldrb	r3, [r3, #3]
 80163ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	785b      	ldrb	r3, [r3, #1]
 80163d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80163d2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80163d4:	68ba      	ldr	r2, [r7, #8]
 80163d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80163d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80163e0:	4313      	orrs	r3, r2
 80163e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	22ca      	movs	r2, #202	@ 0xca
 80163ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2253      	movs	r2, #83	@ 0x53
 80163f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80163f4:	2513      	movs	r5, #19
 80163f6:	197c      	adds	r4, r7, r5
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	0018      	movs	r0, r3
 80163fc:	f000 f8a6 	bl	801654c <RTC_EnterInitMode>
 8016400:	0003      	movs	r3, r0
 8016402:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016404:	0028      	movs	r0, r5
 8016406:	183b      	adds	r3, r7, r0
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d10c      	bne.n	8016428 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	697a      	ldr	r2, [r7, #20]
 8016414:	4910      	ldr	r1, [pc, #64]	@ (8016458 <HAL_RTC_SetDate+0x124>)
 8016416:	400a      	ands	r2, r1
 8016418:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801641a:	183c      	adds	r4, r7, r0
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	0018      	movs	r0, r3
 8016420:	f000 f8d8 	bl	80165d4 <RTC_ExitInitMode>
 8016424:	0003      	movs	r3, r0
 8016426:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016428:	2313      	movs	r3, #19
 801642a:	18fb      	adds	r3, r7, r3
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d103      	bne.n	801643a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2221      	movs	r2, #33	@ 0x21
 8016436:	2101      	movs	r1, #1
 8016438:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	22ff      	movs	r2, #255	@ 0xff
 8016440:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2220      	movs	r2, #32
 8016446:	2100      	movs	r1, #0
 8016448:	5499      	strb	r1, [r3, r2]

  return status;
 801644a:	2313      	movs	r3, #19
 801644c:	18fb      	adds	r3, r7, r3
 801644e:	781b      	ldrb	r3, [r3, #0]
}
 8016450:	0018      	movs	r0, r3
 8016452:	46bd      	mov	sp, r7
 8016454:	b006      	add	sp, #24
 8016456:	bdb0      	pop	{r4, r5, r7, pc}
 8016458:	00ffff3f 	.word	0x00ffff3f

0801645c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b086      	sub	sp, #24
 8016460:	af00      	add	r7, sp, #0
 8016462:	60f8      	str	r0, [r7, #12]
 8016464:	60b9      	str	r1, [r7, #8]
 8016466:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016468:	2300      	movs	r3, #0
 801646a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	4a21      	ldr	r2, [pc, #132]	@ (80164f8 <HAL_RTC_GetDate+0x9c>)
 8016474:	4013      	ands	r3, r2
 8016476:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	0c1b      	lsrs	r3, r3, #16
 801647c:	b2da      	uxtb	r2, r3
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8016482:	697b      	ldr	r3, [r7, #20]
 8016484:	0a1b      	lsrs	r3, r3, #8
 8016486:	b2db      	uxtb	r3, r3
 8016488:	221f      	movs	r2, #31
 801648a:	4013      	ands	r3, r2
 801648c:	b2da      	uxtb	r2, r3
 801648e:	68bb      	ldr	r3, [r7, #8]
 8016490:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	b2db      	uxtb	r3, r3
 8016496:	223f      	movs	r2, #63	@ 0x3f
 8016498:	4013      	ands	r3, r2
 801649a:	b2da      	uxtb	r2, r3
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	0b5b      	lsrs	r3, r3, #13
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	2207      	movs	r2, #7
 80164a8:	4013      	ands	r3, r2
 80164aa:	b2da      	uxtb	r2, r3
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d11a      	bne.n	80164ec <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	78db      	ldrb	r3, [r3, #3]
 80164ba:	0018      	movs	r0, r3
 80164bc:	f000 f8d5 	bl	801666a <RTC_Bcd2ToByte>
 80164c0:	0003      	movs	r3, r0
 80164c2:	001a      	movs	r2, r3
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	785b      	ldrb	r3, [r3, #1]
 80164cc:	0018      	movs	r0, r3
 80164ce:	f000 f8cc 	bl	801666a <RTC_Bcd2ToByte>
 80164d2:	0003      	movs	r3, r0
 80164d4:	001a      	movs	r2, r3
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	789b      	ldrb	r3, [r3, #2]
 80164de:	0018      	movs	r0, r3
 80164e0:	f000 f8c3 	bl	801666a <RTC_Bcd2ToByte>
 80164e4:	0003      	movs	r3, r0
 80164e6:	001a      	movs	r2, r3
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80164ec:	2300      	movs	r3, #0
}
 80164ee:	0018      	movs	r0, r3
 80164f0:	46bd      	mov	sp, r7
 80164f2:	b006      	add	sp, #24
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	46c0      	nop			@ (mov r8, r8)
 80164f8:	00ffff3f 	.word	0x00ffff3f

080164fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b084      	sub	sp, #16
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016504:	2300      	movs	r3, #0
 8016506:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	4a0e      	ldr	r2, [pc, #56]	@ (8016548 <HAL_RTC_WaitForSynchro+0x4c>)
 801650e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016510:	f7f8 fce8 	bl	800eee4 <HAL_GetTick>
 8016514:	0003      	movs	r3, r0
 8016516:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016518:	e00a      	b.n	8016530 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801651a:	f7f8 fce3 	bl	800eee4 <HAL_GetTick>
 801651e:	0002      	movs	r2, r0
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	1ad2      	subs	r2, r2, r3
 8016524:	23fa      	movs	r3, #250	@ 0xfa
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	429a      	cmp	r2, r3
 801652a:	d901      	bls.n	8016530 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801652c:	2303      	movs	r3, #3
 801652e:	e006      	b.n	801653e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	68db      	ldr	r3, [r3, #12]
 8016536:	2220      	movs	r2, #32
 8016538:	4013      	ands	r3, r2
 801653a:	d0ee      	beq.n	801651a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801653c:	2300      	movs	r3, #0
}
 801653e:	0018      	movs	r0, r3
 8016540:	46bd      	mov	sp, r7
 8016542:	b004      	add	sp, #16
 8016544:	bd80      	pop	{r7, pc}
 8016546:	46c0      	nop			@ (mov r8, r8)
 8016548:	0001ff5f 	.word	0x0001ff5f

0801654c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016554:	2300      	movs	r3, #0
 8016556:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016558:	230f      	movs	r3, #15
 801655a:	18fb      	adds	r3, r7, r3
 801655c:	2200      	movs	r2, #0
 801655e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	68db      	ldr	r3, [r3, #12]
 8016566:	2240      	movs	r2, #64	@ 0x40
 8016568:	4013      	ands	r3, r2
 801656a:	d12c      	bne.n	80165c6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	68da      	ldr	r2, [r3, #12]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2180      	movs	r1, #128	@ 0x80
 8016578:	430a      	orrs	r2, r1
 801657a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801657c:	f7f8 fcb2 	bl	800eee4 <HAL_GetTick>
 8016580:	0003      	movs	r3, r0
 8016582:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016584:	e014      	b.n	80165b0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016586:	f7f8 fcad 	bl	800eee4 <HAL_GetTick>
 801658a:	0002      	movs	r2, r0
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	1ad2      	subs	r2, r2, r3
 8016590:	200f      	movs	r0, #15
 8016592:	183b      	adds	r3, r7, r0
 8016594:	1839      	adds	r1, r7, r0
 8016596:	7809      	ldrb	r1, [r1, #0]
 8016598:	7019      	strb	r1, [r3, #0]
 801659a:	23fa      	movs	r3, #250	@ 0xfa
 801659c:	009b      	lsls	r3, r3, #2
 801659e:	429a      	cmp	r2, r3
 80165a0:	d906      	bls.n	80165b0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2221      	movs	r2, #33	@ 0x21
 80165a6:	2104      	movs	r1, #4
 80165a8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80165aa:	183b      	adds	r3, r7, r0
 80165ac:	2201      	movs	r2, #1
 80165ae:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	68db      	ldr	r3, [r3, #12]
 80165b6:	2240      	movs	r2, #64	@ 0x40
 80165b8:	4013      	ands	r3, r2
 80165ba:	d104      	bne.n	80165c6 <RTC_EnterInitMode+0x7a>
 80165bc:	230f      	movs	r3, #15
 80165be:	18fb      	adds	r3, r7, r3
 80165c0:	781b      	ldrb	r3, [r3, #0]
 80165c2:	2b01      	cmp	r3, #1
 80165c4:	d1df      	bne.n	8016586 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80165c6:	230f      	movs	r3, #15
 80165c8:	18fb      	adds	r3, r7, r3
 80165ca:	781b      	ldrb	r3, [r3, #0]
}
 80165cc:	0018      	movs	r0, r3
 80165ce:	46bd      	mov	sp, r7
 80165d0:	b004      	add	sp, #16
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80165d4:	b590      	push	{r4, r7, lr}
 80165d6:	b085      	sub	sp, #20
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80165dc:	240f      	movs	r4, #15
 80165de:	193b      	adds	r3, r7, r4
 80165e0:	2200      	movs	r2, #0
 80165e2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	68da      	ldr	r2, [r3, #12]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2180      	movs	r1, #128	@ 0x80
 80165f0:	438a      	bics	r2, r1
 80165f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	2220      	movs	r2, #32
 80165fc:	4013      	ands	r3, r2
 80165fe:	d10c      	bne.n	801661a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	0018      	movs	r0, r3
 8016604:	f7ff ff7a 	bl	80164fc <HAL_RTC_WaitForSynchro>
 8016608:	1e03      	subs	r3, r0, #0
 801660a:	d006      	beq.n	801661a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2221      	movs	r2, #33	@ 0x21
 8016610:	2104      	movs	r1, #4
 8016612:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016614:	193b      	adds	r3, r7, r4
 8016616:	2201      	movs	r2, #1
 8016618:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801661a:	230f      	movs	r3, #15
 801661c:	18fb      	adds	r3, r7, r3
 801661e:	781b      	ldrb	r3, [r3, #0]
}
 8016620:	0018      	movs	r0, r3
 8016622:	46bd      	mov	sp, r7
 8016624:	b005      	add	sp, #20
 8016626:	bd90      	pop	{r4, r7, pc}

08016628 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	0002      	movs	r2, r0
 8016630:	1dfb      	adds	r3, r7, #7
 8016632:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016634:	2300      	movs	r3, #0
 8016636:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8016638:	e007      	b.n	801664a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	3301      	adds	r3, #1
 801663e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8016640:	1dfb      	adds	r3, r7, #7
 8016642:	1dfa      	adds	r2, r7, #7
 8016644:	7812      	ldrb	r2, [r2, #0]
 8016646:	3a0a      	subs	r2, #10
 8016648:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801664a:	1dfb      	adds	r3, r7, #7
 801664c:	781b      	ldrb	r3, [r3, #0]
 801664e:	2b09      	cmp	r3, #9
 8016650:	d8f3      	bhi.n	801663a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	b2db      	uxtb	r3, r3
 8016656:	011b      	lsls	r3, r3, #4
 8016658:	b2da      	uxtb	r2, r3
 801665a:	1dfb      	adds	r3, r7, #7
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	4313      	orrs	r3, r2
 8016660:	b2db      	uxtb	r3, r3
}
 8016662:	0018      	movs	r0, r3
 8016664:	46bd      	mov	sp, r7
 8016666:	b004      	add	sp, #16
 8016668:	bd80      	pop	{r7, pc}

0801666a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801666a:	b580      	push	{r7, lr}
 801666c:	b084      	sub	sp, #16
 801666e:	af00      	add	r7, sp, #0
 8016670:	0002      	movs	r2, r0
 8016672:	1dfb      	adds	r3, r7, #7
 8016674:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016676:	2300      	movs	r3, #0
 8016678:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801667a:	1dfb      	adds	r3, r7, #7
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	091b      	lsrs	r3, r3, #4
 8016680:	b2db      	uxtb	r3, r3
 8016682:	001a      	movs	r2, r3
 8016684:	0013      	movs	r3, r2
 8016686:	009b      	lsls	r3, r3, #2
 8016688:	189b      	adds	r3, r3, r2
 801668a:	005b      	lsls	r3, r3, #1
 801668c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	b2da      	uxtb	r2, r3
 8016692:	1dfb      	adds	r3, r7, #7
 8016694:	781b      	ldrb	r3, [r3, #0]
 8016696:	210f      	movs	r1, #15
 8016698:	400b      	ands	r3, r1
 801669a:	b2db      	uxtb	r3, r3
 801669c:	18d3      	adds	r3, r2, r3
 801669e:	b2db      	uxtb	r3, r3
}
 80166a0:	0018      	movs	r0, r3
 80166a2:	46bd      	mov	sp, r7
 80166a4:	b004      	add	sp, #16
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b086      	sub	sp, #24
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	60f8      	str	r0, [r7, #12]
 80166b0:	60b9      	str	r1, [r7, #8]
 80166b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80166b4:	4b64      	ldr	r3, [pc, #400]	@ (8016848 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	22fa      	movs	r2, #250	@ 0xfa
 80166ba:	01d1      	lsls	r1, r2, #7
 80166bc:	0018      	movs	r0, r3
 80166be:	f7e9 fd71 	bl	80001a4 <__udivsi3>
 80166c2:	0003      	movs	r3, r0
 80166c4:	001a      	movs	r2, r3
 80166c6:	0013      	movs	r3, r2
 80166c8:	015b      	lsls	r3, r3, #5
 80166ca:	1a9b      	subs	r3, r3, r2
 80166cc:	009b      	lsls	r3, r3, #2
 80166ce:	189b      	adds	r3, r3, r2
 80166d0:	00db      	lsls	r3, r3, #3
 80166d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	2220      	movs	r2, #32
 80166d8:	5c9b      	ldrb	r3, [r3, r2]
 80166da:	2b01      	cmp	r3, #1
 80166dc:	d101      	bne.n	80166e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80166de:	2302      	movs	r3, #2
 80166e0:	e0ad      	b.n	801683e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	2220      	movs	r2, #32
 80166e6:	2101      	movs	r1, #1
 80166e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	2221      	movs	r2, #33	@ 0x21
 80166ee:	2102      	movs	r1, #2
 80166f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	22ca      	movs	r2, #202	@ 0xca
 80166f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	2253      	movs	r2, #83	@ 0x53
 8016700:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	689a      	ldr	r2, [r3, #8]
 8016708:	2380      	movs	r3, #128	@ 0x80
 801670a:	00db      	lsls	r3, r3, #3
 801670c:	4013      	ands	r3, r2
 801670e:	d019      	beq.n	8016744 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	3b01      	subs	r3, #1
 8016714:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016716:	697b      	ldr	r3, [r7, #20]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d10d      	bne.n	8016738 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	22ff      	movs	r2, #255	@ 0xff
 8016722:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	2221      	movs	r2, #33	@ 0x21
 8016728:	2103      	movs	r1, #3
 801672a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2220      	movs	r2, #32
 8016730:	2100      	movs	r1, #0
 8016732:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016734:	2303      	movs	r3, #3
 8016736:	e082      	b.n	801683e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	2204      	movs	r2, #4
 8016740:	4013      	ands	r3, r2
 8016742:	d1e5      	bne.n	8016710 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	689a      	ldr	r2, [r3, #8]
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	493f      	ldr	r1, [pc, #252]	@ (801684c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8016750:	400a      	ands	r2, r1
 8016752:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	68db      	ldr	r3, [r3, #12]
 801675a:	22ff      	movs	r2, #255	@ 0xff
 801675c:	401a      	ands	r2, r3
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	493b      	ldr	r1, [pc, #236]	@ (8016850 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016764:	430a      	orrs	r2, r1
 8016766:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016768:	4b37      	ldr	r3, [pc, #220]	@ (8016848 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	22fa      	movs	r2, #250	@ 0xfa
 801676e:	01d1      	lsls	r1, r2, #7
 8016770:	0018      	movs	r0, r3
 8016772:	f7e9 fd17 	bl	80001a4 <__udivsi3>
 8016776:	0003      	movs	r3, r0
 8016778:	001a      	movs	r2, r3
 801677a:	0013      	movs	r3, r2
 801677c:	015b      	lsls	r3, r3, #5
 801677e:	1a9b      	subs	r3, r3, r2
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	189b      	adds	r3, r3, r2
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	3b01      	subs	r3, #1
 801678c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d10d      	bne.n	80167b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	22ff      	movs	r2, #255	@ 0xff
 801679a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	2221      	movs	r2, #33	@ 0x21
 80167a0:	2103      	movs	r1, #3
 80167a2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2220      	movs	r2, #32
 80167a8:	2100      	movs	r1, #0
 80167aa:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80167ac:	2303      	movs	r3, #3
 80167ae:	e046      	b.n	801683e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	2204      	movs	r2, #4
 80167b8:	4013      	ands	r3, r2
 80167ba:	d0e5      	beq.n	8016788 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	689a      	ldr	r2, [r3, #8]
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	2107      	movs	r1, #7
 80167c8:	438a      	bics	r2, r1
 80167ca:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	6899      	ldr	r1, [r3, #8]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	687a      	ldr	r2, [r7, #4]
 80167d8:	430a      	orrs	r2, r1
 80167da:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	68ba      	ldr	r2, [r7, #8]
 80167e2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80167e4:	4b1b      	ldr	r3, [pc, #108]	@ (8016854 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	4b1a      	ldr	r3, [pc, #104]	@ (8016854 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167ea:	2180      	movs	r1, #128	@ 0x80
 80167ec:	0349      	lsls	r1, r1, #13
 80167ee:	430a      	orrs	r2, r1
 80167f0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80167f2:	4b18      	ldr	r3, [pc, #96]	@ (8016854 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167f4:	689a      	ldr	r2, [r3, #8]
 80167f6:	4b17      	ldr	r3, [pc, #92]	@ (8016854 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167f8:	2180      	movs	r1, #128	@ 0x80
 80167fa:	0349      	lsls	r1, r1, #13
 80167fc:	430a      	orrs	r2, r1
 80167fe:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	689a      	ldr	r2, [r3, #8]
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	2180      	movs	r1, #128	@ 0x80
 801680c:	01c9      	lsls	r1, r1, #7
 801680e:	430a      	orrs	r2, r1
 8016810:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	689a      	ldr	r2, [r3, #8]
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	2180      	movs	r1, #128	@ 0x80
 801681e:	00c9      	lsls	r1, r1, #3
 8016820:	430a      	orrs	r2, r1
 8016822:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	22ff      	movs	r2, #255	@ 0xff
 801682a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	2221      	movs	r2, #33	@ 0x21
 8016830:	2101      	movs	r1, #1
 8016832:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2220      	movs	r2, #32
 8016838:	2100      	movs	r1, #0
 801683a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801683c:	2300      	movs	r3, #0
}
 801683e:	0018      	movs	r0, r3
 8016840:	46bd      	mov	sp, r7
 8016842:	b006      	add	sp, #24
 8016844:	bd80      	pop	{r7, pc}
 8016846:	46c0      	nop			@ (mov r8, r8)
 8016848:	200000d0 	.word	0x200000d0
 801684c:	fffffbff 	.word	0xfffffbff
 8016850:	fffffb7f 	.word	0xfffffb7f
 8016854:	40010400 	.word	0x40010400

08016858 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b084      	sub	sp, #16
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016860:	2300      	movs	r3, #0
 8016862:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2220      	movs	r2, #32
 8016868:	5c9b      	ldrb	r3, [r3, r2]
 801686a:	2b01      	cmp	r3, #1
 801686c:	d101      	bne.n	8016872 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801686e:	2302      	movs	r3, #2
 8016870:	e04e      	b.n	8016910 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2220      	movs	r2, #32
 8016876:	2101      	movs	r1, #1
 8016878:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2221      	movs	r2, #33	@ 0x21
 801687e:	2102      	movs	r1, #2
 8016880:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	22ca      	movs	r2, #202	@ 0xca
 8016888:	625a      	str	r2, [r3, #36]	@ 0x24
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	2253      	movs	r2, #83	@ 0x53
 8016890:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	689a      	ldr	r2, [r3, #8]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	491e      	ldr	r1, [pc, #120]	@ (8016918 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801689e:	400a      	ands	r2, r1
 80168a0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	689a      	ldr	r2, [r3, #8]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	491b      	ldr	r1, [pc, #108]	@ (801691c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80168ae:	400a      	ands	r2, r1
 80168b0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80168b2:	f7f8 fb17 	bl	800eee4 <HAL_GetTick>
 80168b6:	0003      	movs	r3, r0
 80168b8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80168ba:	e016      	b.n	80168ea <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80168bc:	f7f8 fb12 	bl	800eee4 <HAL_GetTick>
 80168c0:	0002      	movs	r2, r0
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	1ad2      	subs	r2, r2, r3
 80168c6:	23fa      	movs	r3, #250	@ 0xfa
 80168c8:	009b      	lsls	r3, r3, #2
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d90d      	bls.n	80168ea <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	22ff      	movs	r2, #255	@ 0xff
 80168d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	2221      	movs	r2, #33	@ 0x21
 80168da:	2103      	movs	r1, #3
 80168dc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2220      	movs	r2, #32
 80168e2:	2100      	movs	r1, #0
 80168e4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80168e6:	2303      	movs	r3, #3
 80168e8:	e012      	b.n	8016910 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	68db      	ldr	r3, [r3, #12]
 80168f0:	2204      	movs	r2, #4
 80168f2:	4013      	ands	r3, r2
 80168f4:	d0e2      	beq.n	80168bc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	22ff      	movs	r2, #255	@ 0xff
 80168fc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2221      	movs	r2, #33	@ 0x21
 8016902:	2101      	movs	r1, #1
 8016904:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2220      	movs	r2, #32
 801690a:	2100      	movs	r1, #0
 801690c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801690e:	2300      	movs	r3, #0
}
 8016910:	0018      	movs	r0, r3
 8016912:	46bd      	mov	sp, r7
 8016914:	b004      	add	sp, #16
 8016916:	bd80      	pop	{r7, pc}
 8016918:	fffffbff 	.word	0xfffffbff
 801691c:	ffffbfff 	.word	0xffffbfff

08016920 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016928:	4b13      	ldr	r3, [pc, #76]	@ (8016978 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801692a:	2280      	movs	r2, #128	@ 0x80
 801692c:	0352      	lsls	r2, r2, #13
 801692e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	689a      	ldr	r2, [r3, #8]
 8016936:	2380      	movs	r3, #128	@ 0x80
 8016938:	01db      	lsls	r3, r3, #7
 801693a:	4013      	ands	r3, r2
 801693c:	d014      	beq.n	8016968 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	68da      	ldr	r2, [r3, #12]
 8016944:	2380      	movs	r3, #128	@ 0x80
 8016946:	00db      	lsls	r3, r3, #3
 8016948:	4013      	ands	r3, r2
 801694a:	d00d      	beq.n	8016968 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	68db      	ldr	r3, [r3, #12]
 8016952:	22ff      	movs	r2, #255	@ 0xff
 8016954:	401a      	ands	r2, r3
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	4908      	ldr	r1, [pc, #32]	@ (801697c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801695c:	430a      	orrs	r2, r1
 801695e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	0018      	movs	r0, r3
 8016964:	f000 f80c 	bl	8016980 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2221      	movs	r2, #33	@ 0x21
 801696c:	2101      	movs	r1, #1
 801696e:	5499      	strb	r1, [r3, r2]
}
 8016970:	46c0      	nop			@ (mov r8, r8)
 8016972:	46bd      	mov	sp, r7
 8016974:	b002      	add	sp, #8
 8016976:	bd80      	pop	{r7, pc}
 8016978:	40010400 	.word	0x40010400
 801697c:	fffffb7f 	.word	0xfffffb7f

08016980 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016988:	46c0      	nop			@ (mov r8, r8)
 801698a:	46bd      	mov	sp, r7
 801698c:	b002      	add	sp, #8
 801698e:	bd80      	pop	{r7, pc}

08016990 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b086      	sub	sp, #24
 8016994:	af00      	add	r7, sp, #0
 8016996:	60f8      	str	r0, [r7, #12]
 8016998:	60b9      	str	r1, [r7, #8]
 801699a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801699c:	2300      	movs	r3, #0
 801699e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	3350      	adds	r3, #80	@ 0x50
 80169a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	009b      	lsls	r3, r3, #2
 80169ac:	697a      	ldr	r2, [r7, #20]
 80169ae:	18d3      	adds	r3, r2, r3
 80169b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	687a      	ldr	r2, [r7, #4]
 80169b6:	601a      	str	r2, [r3, #0]
}
 80169b8:	46c0      	nop			@ (mov r8, r8)
 80169ba:	46bd      	mov	sp, r7
 80169bc:	b006      	add	sp, #24
 80169be:	bd80      	pop	{r7, pc}

080169c0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b084      	sub	sp, #16
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80169ca:	2300      	movs	r3, #0
 80169cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	3350      	adds	r3, #80	@ 0x50
 80169d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	68fa      	ldr	r2, [r7, #12]
 80169dc:	18d3      	adds	r3, r2, r3
 80169de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	681b      	ldr	r3, [r3, #0]
}
 80169e4:	0018      	movs	r0, r3
 80169e6:	46bd      	mov	sp, r7
 80169e8:	b004      	add	sp, #16
 80169ea:	bd80      	pop	{r7, pc}

080169ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d101      	bne.n	80169fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80169fa:	2301      	movs	r3, #1
 80169fc:	e032      	b.n	8016a64 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2239      	movs	r2, #57	@ 0x39
 8016a02:	5c9b      	ldrb	r3, [r3, r2]
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d107      	bne.n	8016a1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2238      	movs	r2, #56	@ 0x38
 8016a0e:	2100      	movs	r1, #0
 8016a10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	0018      	movs	r0, r3
 8016a16:	f7f7 fb79 	bl	800e10c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2239      	movs	r2, #57	@ 0x39
 8016a1e:	2102      	movs	r1, #2
 8016a20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	681a      	ldr	r2, [r3, #0]
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	3304      	adds	r3, #4
 8016a2a:	0019      	movs	r1, r3
 8016a2c:	0010      	movs	r0, r2
 8016a2e:	f000 fa1d 	bl	8016e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	223e      	movs	r2, #62	@ 0x3e
 8016a36:	2101      	movs	r1, #1
 8016a38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	223a      	movs	r2, #58	@ 0x3a
 8016a3e:	2101      	movs	r1, #1
 8016a40:	5499      	strb	r1, [r3, r2]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	223b      	movs	r2, #59	@ 0x3b
 8016a46:	2101      	movs	r1, #1
 8016a48:	5499      	strb	r1, [r3, r2]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	223c      	movs	r2, #60	@ 0x3c
 8016a4e:	2101      	movs	r1, #1
 8016a50:	5499      	strb	r1, [r3, r2]
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	223d      	movs	r2, #61	@ 0x3d
 8016a56:	2101      	movs	r1, #1
 8016a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2239      	movs	r2, #57	@ 0x39
 8016a5e:	2101      	movs	r1, #1
 8016a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a62:	2300      	movs	r3, #0
}
 8016a64:	0018      	movs	r0, r3
 8016a66:	46bd      	mov	sp, r7
 8016a68:	b002      	add	sp, #8
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b084      	sub	sp, #16
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2239      	movs	r2, #57	@ 0x39
 8016a78:	5c9b      	ldrb	r3, [r3, r2]
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d001      	beq.n	8016a84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016a80:	2301      	movs	r3, #1
 8016a82:	e033      	b.n	8016aec <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2239      	movs	r2, #57	@ 0x39
 8016a88:	2102      	movs	r1, #2
 8016a8a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	2380      	movs	r3, #128	@ 0x80
 8016a92:	05db      	lsls	r3, r3, #23
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d00e      	beq.n	8016ab6 <HAL_TIM_Base_Start+0x4a>
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4a15      	ldr	r2, [pc, #84]	@ (8016af4 <HAL_TIM_Base_Start+0x88>)
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d009      	beq.n	8016ab6 <HAL_TIM_Base_Start+0x4a>
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	4a14      	ldr	r2, [pc, #80]	@ (8016af8 <HAL_TIM_Base_Start+0x8c>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d004      	beq.n	8016ab6 <HAL_TIM_Base_Start+0x4a>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4a12      	ldr	r2, [pc, #72]	@ (8016afc <HAL_TIM_Base_Start+0x90>)
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d111      	bne.n	8016ada <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	689b      	ldr	r3, [r3, #8]
 8016abc:	2207      	movs	r2, #7
 8016abe:	4013      	ands	r3, r2
 8016ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2b06      	cmp	r3, #6
 8016ac6:	d010      	beq.n	8016aea <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	2101      	movs	r1, #1
 8016ad4:	430a      	orrs	r2, r1
 8016ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016ad8:	e007      	b.n	8016aea <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	681a      	ldr	r2, [r3, #0]
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2101      	movs	r1, #1
 8016ae6:	430a      	orrs	r2, r1
 8016ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016aea:	2300      	movs	r3, #0
}
 8016aec:	0018      	movs	r0, r3
 8016aee:	46bd      	mov	sp, r7
 8016af0:	b004      	add	sp, #16
 8016af2:	bd80      	pop	{r7, pc}
 8016af4:	40000400 	.word	0x40000400
 8016af8:	40010800 	.word	0x40010800
 8016afc:	40011400 	.word	0x40011400

08016b00 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b082      	sub	sp, #8
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	6a1b      	ldr	r3, [r3, #32]
 8016b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8016b38 <HAL_TIM_Base_Stop+0x38>)
 8016b10:	4013      	ands	r3, r2
 8016b12:	d107      	bne.n	8016b24 <HAL_TIM_Base_Stop+0x24>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2101      	movs	r1, #1
 8016b20:	438a      	bics	r2, r1
 8016b22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2239      	movs	r2, #57	@ 0x39
 8016b28:	2101      	movs	r1, #1
 8016b2a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016b2c:	2300      	movs	r3, #0
}
 8016b2e:	0018      	movs	r0, r3
 8016b30:	46bd      	mov	sp, r7
 8016b32:	b002      	add	sp, #8
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	46c0      	nop			@ (mov r8, r8)
 8016b38:	00001111 	.word	0x00001111

08016b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d101      	bne.n	8016b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	e032      	b.n	8016bb4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2239      	movs	r2, #57	@ 0x39
 8016b52:	5c9b      	ldrb	r3, [r3, r2]
 8016b54:	b2db      	uxtb	r3, r3
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d107      	bne.n	8016b6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2238      	movs	r2, #56	@ 0x38
 8016b5e:	2100      	movs	r1, #0
 8016b60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	0018      	movs	r0, r3
 8016b66:	f7f7 faad 	bl	800e0c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2239      	movs	r2, #57	@ 0x39
 8016b6e:	2102      	movs	r1, #2
 8016b70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	3304      	adds	r3, #4
 8016b7a:	0019      	movs	r1, r3
 8016b7c:	0010      	movs	r0, r2
 8016b7e:	f000 f975 	bl	8016e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	223e      	movs	r2, #62	@ 0x3e
 8016b86:	2101      	movs	r1, #1
 8016b88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	223a      	movs	r2, #58	@ 0x3a
 8016b8e:	2101      	movs	r1, #1
 8016b90:	5499      	strb	r1, [r3, r2]
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	223b      	movs	r2, #59	@ 0x3b
 8016b96:	2101      	movs	r1, #1
 8016b98:	5499      	strb	r1, [r3, r2]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	223c      	movs	r2, #60	@ 0x3c
 8016b9e:	2101      	movs	r1, #1
 8016ba0:	5499      	strb	r1, [r3, r2]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	223d      	movs	r2, #61	@ 0x3d
 8016ba6:	2101      	movs	r1, #1
 8016ba8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2239      	movs	r2, #57	@ 0x39
 8016bae:	2101      	movs	r1, #1
 8016bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016bb2:	2300      	movs	r3, #0
}
 8016bb4:	0018      	movs	r0, r3
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	b002      	add	sp, #8
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b084      	sub	sp, #16
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d108      	bne.n	8016bde <HAL_TIM_PWM_Start+0x22>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	223a      	movs	r2, #58	@ 0x3a
 8016bd0:	5c9b      	ldrb	r3, [r3, r2]
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	3b01      	subs	r3, #1
 8016bd6:	1e5a      	subs	r2, r3, #1
 8016bd8:	4193      	sbcs	r3, r2
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	e01f      	b.n	8016c1e <HAL_TIM_PWM_Start+0x62>
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	2b04      	cmp	r3, #4
 8016be2:	d108      	bne.n	8016bf6 <HAL_TIM_PWM_Start+0x3a>
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	223b      	movs	r2, #59	@ 0x3b
 8016be8:	5c9b      	ldrb	r3, [r3, r2]
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	3b01      	subs	r3, #1
 8016bee:	1e5a      	subs	r2, r3, #1
 8016bf0:	4193      	sbcs	r3, r2
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	e013      	b.n	8016c1e <HAL_TIM_PWM_Start+0x62>
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	2b08      	cmp	r3, #8
 8016bfa:	d108      	bne.n	8016c0e <HAL_TIM_PWM_Start+0x52>
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	223c      	movs	r2, #60	@ 0x3c
 8016c00:	5c9b      	ldrb	r3, [r3, r2]
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	3b01      	subs	r3, #1
 8016c06:	1e5a      	subs	r2, r3, #1
 8016c08:	4193      	sbcs	r3, r2
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	e007      	b.n	8016c1e <HAL_TIM_PWM_Start+0x62>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	223d      	movs	r2, #61	@ 0x3d
 8016c12:	5c9b      	ldrb	r3, [r3, r2]
 8016c14:	b2db      	uxtb	r3, r3
 8016c16:	3b01      	subs	r3, #1
 8016c18:	1e5a      	subs	r2, r3, #1
 8016c1a:	4193      	sbcs	r3, r2
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d001      	beq.n	8016c26 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016c22:	2301      	movs	r3, #1
 8016c24:	e052      	b.n	8016ccc <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016c26:	683b      	ldr	r3, [r7, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d104      	bne.n	8016c36 <HAL_TIM_PWM_Start+0x7a>
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	223a      	movs	r2, #58	@ 0x3a
 8016c30:	2102      	movs	r1, #2
 8016c32:	5499      	strb	r1, [r3, r2]
 8016c34:	e013      	b.n	8016c5e <HAL_TIM_PWM_Start+0xa2>
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	2b04      	cmp	r3, #4
 8016c3a:	d104      	bne.n	8016c46 <HAL_TIM_PWM_Start+0x8a>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	223b      	movs	r2, #59	@ 0x3b
 8016c40:	2102      	movs	r1, #2
 8016c42:	5499      	strb	r1, [r3, r2]
 8016c44:	e00b      	b.n	8016c5e <HAL_TIM_PWM_Start+0xa2>
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	2b08      	cmp	r3, #8
 8016c4a:	d104      	bne.n	8016c56 <HAL_TIM_PWM_Start+0x9a>
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	223c      	movs	r2, #60	@ 0x3c
 8016c50:	2102      	movs	r1, #2
 8016c52:	5499      	strb	r1, [r3, r2]
 8016c54:	e003      	b.n	8016c5e <HAL_TIM_PWM_Start+0xa2>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	223d      	movs	r2, #61	@ 0x3d
 8016c5a:	2102      	movs	r1, #2
 8016c5c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	6839      	ldr	r1, [r7, #0]
 8016c64:	2201      	movs	r2, #1
 8016c66:	0018      	movs	r0, r3
 8016c68:	f000 fa62 	bl	8017130 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681a      	ldr	r2, [r3, #0]
 8016c70:	2380      	movs	r3, #128	@ 0x80
 8016c72:	05db      	lsls	r3, r3, #23
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d00e      	beq.n	8016c96 <HAL_TIM_PWM_Start+0xda>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4a15      	ldr	r2, [pc, #84]	@ (8016cd4 <HAL_TIM_PWM_Start+0x118>)
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	d009      	beq.n	8016c96 <HAL_TIM_PWM_Start+0xda>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	4a14      	ldr	r2, [pc, #80]	@ (8016cd8 <HAL_TIM_PWM_Start+0x11c>)
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d004      	beq.n	8016c96 <HAL_TIM_PWM_Start+0xda>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4a12      	ldr	r2, [pc, #72]	@ (8016cdc <HAL_TIM_PWM_Start+0x120>)
 8016c92:	4293      	cmp	r3, r2
 8016c94:	d111      	bne.n	8016cba <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	2207      	movs	r2, #7
 8016c9e:	4013      	ands	r3, r2
 8016ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	2b06      	cmp	r3, #6
 8016ca6:	d010      	beq.n	8016cca <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	2101      	movs	r1, #1
 8016cb4:	430a      	orrs	r2, r1
 8016cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016cb8:	e007      	b.n	8016cca <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2101      	movs	r1, #1
 8016cc6:	430a      	orrs	r2, r1
 8016cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016cca:	2300      	movs	r3, #0
}
 8016ccc:	0018      	movs	r0, r3
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	b004      	add	sp, #16
 8016cd2:	bd80      	pop	{r7, pc}
 8016cd4:	40000400 	.word	0x40000400
 8016cd8:	40010800 	.word	0x40010800
 8016cdc:	40011400 	.word	0x40011400

08016ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b086      	sub	sp, #24
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	60f8      	str	r0, [r7, #12]
 8016ce8:	60b9      	str	r1, [r7, #8]
 8016cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cec:	2317      	movs	r3, #23
 8016cee:	18fb      	adds	r3, r7, r3
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2238      	movs	r2, #56	@ 0x38
 8016cf8:	5c9b      	ldrb	r3, [r3, r2]
 8016cfa:	2b01      	cmp	r3, #1
 8016cfc:	d101      	bne.n	8016d02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8016cfe:	2302      	movs	r3, #2
 8016d00:	e0ad      	b.n	8016e5e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2238      	movs	r2, #56	@ 0x38
 8016d06:	2101      	movs	r1, #1
 8016d08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2b0c      	cmp	r3, #12
 8016d0e:	d100      	bne.n	8016d12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8016d10:	e076      	b.n	8016e00 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	2b0c      	cmp	r3, #12
 8016d16:	d900      	bls.n	8016d1a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016d18:	e095      	b.n	8016e46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2b08      	cmp	r3, #8
 8016d1e:	d04e      	beq.n	8016dbe <HAL_TIM_PWM_ConfigChannel+0xde>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2b08      	cmp	r3, #8
 8016d24:	d900      	bls.n	8016d28 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016d26:	e08e      	b.n	8016e46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d003      	beq.n	8016d36 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	2b04      	cmp	r3, #4
 8016d32:	d021      	beq.n	8016d78 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016d34:	e087      	b.n	8016e46 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	68ba      	ldr	r2, [r7, #8]
 8016d3c:	0011      	movs	r1, r2
 8016d3e:	0018      	movs	r0, r3
 8016d40:	f000 f8f2 	bl	8016f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	699a      	ldr	r2, [r3, #24]
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2108      	movs	r1, #8
 8016d50:	430a      	orrs	r2, r1
 8016d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	699a      	ldr	r2, [r3, #24]
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2104      	movs	r1, #4
 8016d60:	438a      	bics	r2, r1
 8016d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	6999      	ldr	r1, [r3, #24]
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	68da      	ldr	r2, [r3, #12]
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	430a      	orrs	r2, r1
 8016d74:	619a      	str	r2, [r3, #24]
      break;
 8016d76:	e06b      	b.n	8016e50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	68ba      	ldr	r2, [r7, #8]
 8016d7e:	0011      	movs	r1, r2
 8016d80:	0018      	movs	r0, r3
 8016d82:	f000 f90d 	bl	8016fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	699a      	ldr	r2, [r3, #24]
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2180      	movs	r1, #128	@ 0x80
 8016d92:	0109      	lsls	r1, r1, #4
 8016d94:	430a      	orrs	r2, r1
 8016d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	699a      	ldr	r2, [r3, #24]
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	4931      	ldr	r1, [pc, #196]	@ (8016e68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016da4:	400a      	ands	r2, r1
 8016da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	6999      	ldr	r1, [r3, #24]
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	68db      	ldr	r3, [r3, #12]
 8016db2:	021a      	lsls	r2, r3, #8
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	430a      	orrs	r2, r1
 8016dba:	619a      	str	r2, [r3, #24]
      break;
 8016dbc:	e048      	b.n	8016e50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	68ba      	ldr	r2, [r7, #8]
 8016dc4:	0011      	movs	r1, r2
 8016dc6:	0018      	movs	r0, r3
 8016dc8:	f000 f92c 	bl	8017024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	69da      	ldr	r2, [r3, #28]
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2108      	movs	r1, #8
 8016dd8:	430a      	orrs	r2, r1
 8016dda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	69da      	ldr	r2, [r3, #28]
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	2104      	movs	r1, #4
 8016de8:	438a      	bics	r2, r1
 8016dea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	69d9      	ldr	r1, [r3, #28]
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	68da      	ldr	r2, [r3, #12]
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	430a      	orrs	r2, r1
 8016dfc:	61da      	str	r2, [r3, #28]
      break;
 8016dfe:	e027      	b.n	8016e50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	68ba      	ldr	r2, [r7, #8]
 8016e06:	0011      	movs	r1, r2
 8016e08:	0018      	movs	r0, r3
 8016e0a:	f000 f94b 	bl	80170a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	69da      	ldr	r2, [r3, #28]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2180      	movs	r1, #128	@ 0x80
 8016e1a:	0109      	lsls	r1, r1, #4
 8016e1c:	430a      	orrs	r2, r1
 8016e1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	69da      	ldr	r2, [r3, #28]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	490f      	ldr	r1, [pc, #60]	@ (8016e68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016e2c:	400a      	ands	r2, r1
 8016e2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	69d9      	ldr	r1, [r3, #28]
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	021a      	lsls	r2, r3, #8
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	430a      	orrs	r2, r1
 8016e42:	61da      	str	r2, [r3, #28]
      break;
 8016e44:	e004      	b.n	8016e50 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016e46:	2317      	movs	r3, #23
 8016e48:	18fb      	adds	r3, r7, r3
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	701a      	strb	r2, [r3, #0]
      break;
 8016e4e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	2238      	movs	r2, #56	@ 0x38
 8016e54:	2100      	movs	r1, #0
 8016e56:	5499      	strb	r1, [r3, r2]

  return status;
 8016e58:	2317      	movs	r3, #23
 8016e5a:	18fb      	adds	r3, r7, r3
 8016e5c:	781b      	ldrb	r3, [r3, #0]
}
 8016e5e:	0018      	movs	r0, r3
 8016e60:	46bd      	mov	sp, r7
 8016e62:	b006      	add	sp, #24
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	46c0      	nop			@ (mov r8, r8)
 8016e68:	fffffbff 	.word	0xfffffbff

08016e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	2380      	movs	r3, #128	@ 0x80
 8016e80:	05db      	lsls	r3, r3, #23
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d00b      	beq.n	8016e9e <TIM_Base_SetConfig+0x32>
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	4a23      	ldr	r2, [pc, #140]	@ (8016f18 <TIM_Base_SetConfig+0xac>)
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	d007      	beq.n	8016e9e <TIM_Base_SetConfig+0x32>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	4a22      	ldr	r2, [pc, #136]	@ (8016f1c <TIM_Base_SetConfig+0xb0>)
 8016e92:	4293      	cmp	r3, r2
 8016e94:	d003      	beq.n	8016e9e <TIM_Base_SetConfig+0x32>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	4a21      	ldr	r2, [pc, #132]	@ (8016f20 <TIM_Base_SetConfig+0xb4>)
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d108      	bne.n	8016eb0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	2270      	movs	r2, #112	@ 0x70
 8016ea2:	4393      	bics	r3, r2
 8016ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	68fa      	ldr	r2, [r7, #12]
 8016eac:	4313      	orrs	r3, r2
 8016eae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016eb0:	687a      	ldr	r2, [r7, #4]
 8016eb2:	2380      	movs	r3, #128	@ 0x80
 8016eb4:	05db      	lsls	r3, r3, #23
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d00b      	beq.n	8016ed2 <TIM_Base_SetConfig+0x66>
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	4a16      	ldr	r2, [pc, #88]	@ (8016f18 <TIM_Base_SetConfig+0xac>)
 8016ebe:	4293      	cmp	r3, r2
 8016ec0:	d007      	beq.n	8016ed2 <TIM_Base_SetConfig+0x66>
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	4a15      	ldr	r2, [pc, #84]	@ (8016f1c <TIM_Base_SetConfig+0xb0>)
 8016ec6:	4293      	cmp	r3, r2
 8016ec8:	d003      	beq.n	8016ed2 <TIM_Base_SetConfig+0x66>
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	4a14      	ldr	r2, [pc, #80]	@ (8016f20 <TIM_Base_SetConfig+0xb4>)
 8016ece:	4293      	cmp	r3, r2
 8016ed0:	d108      	bne.n	8016ee4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	4a13      	ldr	r2, [pc, #76]	@ (8016f24 <TIM_Base_SetConfig+0xb8>)
 8016ed6:	4013      	ands	r3, r2
 8016ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	68db      	ldr	r3, [r3, #12]
 8016ede:	68fa      	ldr	r2, [r7, #12]
 8016ee0:	4313      	orrs	r3, r2
 8016ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	2280      	movs	r2, #128	@ 0x80
 8016ee8:	4393      	bics	r3, r2
 8016eea:	001a      	movs	r2, r3
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	691b      	ldr	r3, [r3, #16]
 8016ef0:	4313      	orrs	r3, r2
 8016ef2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	68fa      	ldr	r2, [r7, #12]
 8016ef8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	689a      	ldr	r2, [r3, #8]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	681a      	ldr	r2, [r3, #0]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	615a      	str	r2, [r3, #20]
}
 8016f10:	46c0      	nop			@ (mov r8, r8)
 8016f12:	46bd      	mov	sp, r7
 8016f14:	b004      	add	sp, #16
 8016f16:	bd80      	pop	{r7, pc}
 8016f18:	40000400 	.word	0x40000400
 8016f1c:	40010800 	.word	0x40010800
 8016f20:	40011400 	.word	0x40011400
 8016f24:	fffffcff 	.word	0xfffffcff

08016f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b086      	sub	sp, #24
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	6a1b      	ldr	r3, [r3, #32]
 8016f36:	2201      	movs	r2, #1
 8016f38:	4393      	bics	r3, r2
 8016f3a:	001a      	movs	r2, r3
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6a1b      	ldr	r3, [r3, #32]
 8016f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	685b      	ldr	r3, [r3, #4]
 8016f4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	699b      	ldr	r3, [r3, #24]
 8016f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	2270      	movs	r2, #112	@ 0x70
 8016f56:	4393      	bics	r3, r2
 8016f58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	2203      	movs	r2, #3
 8016f5e:	4393      	bics	r3, r2
 8016f60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	68fa      	ldr	r2, [r7, #12]
 8016f68:	4313      	orrs	r3, r2
 8016f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016f6c:	697b      	ldr	r3, [r7, #20]
 8016f6e:	2202      	movs	r2, #2
 8016f70:	4393      	bics	r3, r2
 8016f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	689b      	ldr	r3, [r3, #8]
 8016f78:	697a      	ldr	r2, [r7, #20]
 8016f7a:	4313      	orrs	r3, r2
 8016f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	693a      	ldr	r2, [r7, #16]
 8016f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	68fa      	ldr	r2, [r7, #12]
 8016f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	685a      	ldr	r2, [r3, #4]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	697a      	ldr	r2, [r7, #20]
 8016f96:	621a      	str	r2, [r3, #32]
}
 8016f98:	46c0      	nop			@ (mov r8, r8)
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	b006      	add	sp, #24
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b086      	sub	sp, #24
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6a1b      	ldr	r3, [r3, #32]
 8016fae:	2210      	movs	r2, #16
 8016fb0:	4393      	bics	r3, r2
 8016fb2:	001a      	movs	r2, r3
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6a1b      	ldr	r3, [r3, #32]
 8016fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	699b      	ldr	r3, [r3, #24]
 8016fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	4a13      	ldr	r2, [pc, #76]	@ (801701c <TIM_OC2_SetConfig+0x7c>)
 8016fce:	4013      	ands	r3, r2
 8016fd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	4a12      	ldr	r2, [pc, #72]	@ (8017020 <TIM_OC2_SetConfig+0x80>)
 8016fd6:	4013      	ands	r3, r2
 8016fd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	021b      	lsls	r3, r3, #8
 8016fe0:	68fa      	ldr	r2, [r7, #12]
 8016fe2:	4313      	orrs	r3, r2
 8016fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016fe6:	697b      	ldr	r3, [r7, #20]
 8016fe8:	2220      	movs	r2, #32
 8016fea:	4393      	bics	r3, r2
 8016fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	689b      	ldr	r3, [r3, #8]
 8016ff2:	011b      	lsls	r3, r3, #4
 8016ff4:	697a      	ldr	r2, [r7, #20]
 8016ff6:	4313      	orrs	r3, r2
 8016ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	693a      	ldr	r2, [r7, #16]
 8016ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	68fa      	ldr	r2, [r7, #12]
 8017004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	685a      	ldr	r2, [r3, #4]
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	697a      	ldr	r2, [r7, #20]
 8017012:	621a      	str	r2, [r3, #32]
}
 8017014:	46c0      	nop			@ (mov r8, r8)
 8017016:	46bd      	mov	sp, r7
 8017018:	b006      	add	sp, #24
 801701a:	bd80      	pop	{r7, pc}
 801701c:	ffff8fff 	.word	0xffff8fff
 8017020:	fffffcff 	.word	0xfffffcff

08017024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b086      	sub	sp, #24
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]
 801702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	6a1b      	ldr	r3, [r3, #32]
 8017032:	4a1a      	ldr	r2, [pc, #104]	@ (801709c <TIM_OC3_SetConfig+0x78>)
 8017034:	401a      	ands	r2, r3
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6a1b      	ldr	r3, [r3, #32]
 801703e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	685b      	ldr	r3, [r3, #4]
 8017044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	69db      	ldr	r3, [r3, #28]
 801704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2270      	movs	r2, #112	@ 0x70
 8017050:	4393      	bics	r3, r2
 8017052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2203      	movs	r2, #3
 8017058:	4393      	bics	r3, r2
 801705a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801705c:	683b      	ldr	r3, [r7, #0]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	4313      	orrs	r3, r2
 8017064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	4a0d      	ldr	r2, [pc, #52]	@ (80170a0 <TIM_OC3_SetConfig+0x7c>)
 801706a:	4013      	ands	r3, r2
 801706c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	689b      	ldr	r3, [r3, #8]
 8017072:	021b      	lsls	r3, r3, #8
 8017074:	697a      	ldr	r2, [r7, #20]
 8017076:	4313      	orrs	r3, r2
 8017078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	693a      	ldr	r2, [r7, #16]
 801707e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	68fa      	ldr	r2, [r7, #12]
 8017084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	685a      	ldr	r2, [r3, #4]
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	697a      	ldr	r2, [r7, #20]
 8017092:	621a      	str	r2, [r3, #32]
}
 8017094:	46c0      	nop			@ (mov r8, r8)
 8017096:	46bd      	mov	sp, r7
 8017098:	b006      	add	sp, #24
 801709a:	bd80      	pop	{r7, pc}
 801709c:	fffffeff 	.word	0xfffffeff
 80170a0:	fffffdff 	.word	0xfffffdff

080170a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b086      	sub	sp, #24
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6a1b      	ldr	r3, [r3, #32]
 80170b2:	4a1b      	ldr	r2, [pc, #108]	@ (8017120 <TIM_OC4_SetConfig+0x7c>)
 80170b4:	401a      	ands	r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	6a1b      	ldr	r3, [r3, #32]
 80170be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	69db      	ldr	r3, [r3, #28]
 80170ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	4a15      	ldr	r2, [pc, #84]	@ (8017124 <TIM_OC4_SetConfig+0x80>)
 80170d0:	4013      	ands	r3, r2
 80170d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	4a14      	ldr	r2, [pc, #80]	@ (8017128 <TIM_OC4_SetConfig+0x84>)
 80170d8:	4013      	ands	r3, r2
 80170da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	021b      	lsls	r3, r3, #8
 80170e2:	68fa      	ldr	r2, [r7, #12]
 80170e4:	4313      	orrs	r3, r2
 80170e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80170e8:	697b      	ldr	r3, [r7, #20]
 80170ea:	4a10      	ldr	r2, [pc, #64]	@ (801712c <TIM_OC4_SetConfig+0x88>)
 80170ec:	4013      	ands	r3, r2
 80170ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80170f0:	683b      	ldr	r3, [r7, #0]
 80170f2:	689b      	ldr	r3, [r3, #8]
 80170f4:	031b      	lsls	r3, r3, #12
 80170f6:	697a      	ldr	r2, [r7, #20]
 80170f8:	4313      	orrs	r3, r2
 80170fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	693a      	ldr	r2, [r7, #16]
 8017100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	68fa      	ldr	r2, [r7, #12]
 8017106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	685a      	ldr	r2, [r3, #4]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	697a      	ldr	r2, [r7, #20]
 8017114:	621a      	str	r2, [r3, #32]
}
 8017116:	46c0      	nop			@ (mov r8, r8)
 8017118:	46bd      	mov	sp, r7
 801711a:	b006      	add	sp, #24
 801711c:	bd80      	pop	{r7, pc}
 801711e:	46c0      	nop			@ (mov r8, r8)
 8017120:	ffffefff 	.word	0xffffefff
 8017124:	ffff8fff 	.word	0xffff8fff
 8017128:	fffffcff 	.word	0xfffffcff
 801712c:	ffffdfff 	.word	0xffffdfff

08017130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b086      	sub	sp, #24
 8017134:	af00      	add	r7, sp, #0
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	221f      	movs	r2, #31
 8017140:	4013      	ands	r3, r2
 8017142:	2201      	movs	r2, #1
 8017144:	409a      	lsls	r2, r3
 8017146:	0013      	movs	r3, r2
 8017148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	6a1b      	ldr	r3, [r3, #32]
 801714e:	697a      	ldr	r2, [r7, #20]
 8017150:	43d2      	mvns	r2, r2
 8017152:	401a      	ands	r2, r3
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6a1a      	ldr	r2, [r3, #32]
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	211f      	movs	r1, #31
 8017160:	400b      	ands	r3, r1
 8017162:	6879      	ldr	r1, [r7, #4]
 8017164:	4099      	lsls	r1, r3
 8017166:	000b      	movs	r3, r1
 8017168:	431a      	orrs	r2, r3
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	621a      	str	r2, [r3, #32]
}
 801716e:	46c0      	nop			@ (mov r8, r8)
 8017170:	46bd      	mov	sp, r7
 8017172:	b006      	add	sp, #24
 8017174:	bd80      	pop	{r7, pc}
	...

08017178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2238      	movs	r2, #56	@ 0x38
 8017186:	5c9b      	ldrb	r3, [r3, r2]
 8017188:	2b01      	cmp	r3, #1
 801718a:	d101      	bne.n	8017190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801718c:	2302      	movs	r3, #2
 801718e:	e047      	b.n	8017220 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2238      	movs	r2, #56	@ 0x38
 8017194:	2101      	movs	r1, #1
 8017196:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2239      	movs	r2, #57	@ 0x39
 801719c:	2102      	movs	r1, #2
 801719e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	689b      	ldr	r3, [r3, #8]
 80171ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2270      	movs	r2, #112	@ 0x70
 80171b4:	4393      	bics	r3, r2
 80171b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	68fa      	ldr	r2, [r7, #12]
 80171be:	4313      	orrs	r3, r2
 80171c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	68fa      	ldr	r2, [r7, #12]
 80171c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681a      	ldr	r2, [r3, #0]
 80171ce:	2380      	movs	r3, #128	@ 0x80
 80171d0:	05db      	lsls	r3, r3, #23
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d00e      	beq.n	80171f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	4a13      	ldr	r2, [pc, #76]	@ (8017228 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80171dc:	4293      	cmp	r3, r2
 80171de:	d009      	beq.n	80171f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	4a11      	ldr	r2, [pc, #68]	@ (801722c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80171e6:	4293      	cmp	r3, r2
 80171e8:	d004      	beq.n	80171f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	4a10      	ldr	r2, [pc, #64]	@ (8017230 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80171f0:	4293      	cmp	r3, r2
 80171f2:	d10c      	bne.n	801720e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	2280      	movs	r2, #128	@ 0x80
 80171f8:	4393      	bics	r3, r2
 80171fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	68ba      	ldr	r2, [r7, #8]
 8017202:	4313      	orrs	r3, r2
 8017204:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	68ba      	ldr	r2, [r7, #8]
 801720c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2239      	movs	r2, #57	@ 0x39
 8017212:	2101      	movs	r1, #1
 8017214:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2238      	movs	r2, #56	@ 0x38
 801721a:	2100      	movs	r1, #0
 801721c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801721e:	2300      	movs	r3, #0
}
 8017220:	0018      	movs	r0, r3
 8017222:	46bd      	mov	sp, r7
 8017224:	b004      	add	sp, #16
 8017226:	bd80      	pop	{r7, pc}
 8017228:	40000400 	.word	0x40000400
 801722c:	40010800 	.word	0x40010800
 8017230:	40011400 	.word	0x40011400

08017234 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b082      	sub	sp, #8
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2238      	movs	r2, #56	@ 0x38
 8017242:	5c9b      	ldrb	r3, [r3, r2]
 8017244:	2b01      	cmp	r3, #1
 8017246:	d101      	bne.n	801724c <HAL_TIMEx_RemapConfig+0x18>
 8017248:	2302      	movs	r3, #2
 801724a:	e00c      	b.n	8017266 <HAL_TIMEx_RemapConfig+0x32>
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2238      	movs	r2, #56	@ 0x38
 8017250:	2101      	movs	r1, #1
 8017252:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	683a      	ldr	r2, [r7, #0]
 801725a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2238      	movs	r2, #56	@ 0x38
 8017260:	2100      	movs	r1, #0
 8017262:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017264:	2300      	movs	r3, #0
}
 8017266:	0018      	movs	r0, r3
 8017268:	46bd      	mov	sp, r7
 801726a:	b002      	add	sp, #8
 801726c:	bd80      	pop	{r7, pc}
	...

08017270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d101      	bne.n	8017282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801727e:	2301      	movs	r3, #1
 8017280:	e053      	b.n	801732a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017286:	2b00      	cmp	r3, #0
 8017288:	d116      	bne.n	80172b8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2278      	movs	r2, #120	@ 0x78
 801728e:	2100      	movs	r1, #0
 8017290:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	0018      	movs	r0, r3
 8017296:	f000 fd65 	bl	8017d64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	22b0      	movs	r2, #176	@ 0xb0
 801729e:	589b      	ldr	r3, [r3, r2]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d103      	bne.n	80172ac <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	21b0      	movs	r1, #176	@ 0xb0
 80172a8:	4a22      	ldr	r2, [pc, #136]	@ (8017334 <HAL_UART_Init+0xc4>)
 80172aa:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	22b0      	movs	r2, #176	@ 0xb0
 80172b0:	589b      	ldr	r3, [r3, r2]
 80172b2:	687a      	ldr	r2, [r7, #4]
 80172b4:	0010      	movs	r0, r2
 80172b6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2224      	movs	r2, #36	@ 0x24
 80172bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	2101      	movs	r1, #1
 80172ca:	438a      	bics	r2, r1
 80172cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	0018      	movs	r0, r3
 80172d2:	f000 fd8b 	bl	8017dec <UART_SetConfig>
 80172d6:	0003      	movs	r3, r0
 80172d8:	2b01      	cmp	r3, #1
 80172da:	d101      	bne.n	80172e0 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80172dc:	2301      	movs	r3, #1
 80172de:	e024      	b.n	801732a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d003      	beq.n	80172f0 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	0018      	movs	r0, r3
 80172ec:	f001 f81c 	bl	8018328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	685a      	ldr	r2, [r3, #4]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	490f      	ldr	r1, [pc, #60]	@ (8017338 <HAL_UART_Init+0xc8>)
 80172fc:	400a      	ands	r2, r1
 80172fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	689a      	ldr	r2, [r3, #8]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	212a      	movs	r1, #42	@ 0x2a
 801730c:	438a      	bics	r2, r1
 801730e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2101      	movs	r1, #1
 801731c:	430a      	orrs	r2, r1
 801731e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	0018      	movs	r0, r3
 8017324:	f001 f8b4 	bl	8018490 <UART_CheckIdleState>
 8017328:	0003      	movs	r3, r0
}
 801732a:	0018      	movs	r0, r3
 801732c:	46bd      	mov	sp, r7
 801732e:	b002      	add	sp, #8
 8017330:	bd80      	pop	{r7, pc}
 8017332:	46c0      	nop			@ (mov r8, r8)
 8017334:	0800e341 	.word	0x0800e341
 8017338:	ffffb7ff 	.word	0xffffb7ff

0801733c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b08a      	sub	sp, #40	@ 0x28
 8017340:	af02      	add	r7, sp, #8
 8017342:	60f8      	str	r0, [r7, #12]
 8017344:	60b9      	str	r1, [r7, #8]
 8017346:	603b      	str	r3, [r7, #0]
 8017348:	1dbb      	adds	r3, r7, #6
 801734a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017350:	2b20      	cmp	r3, #32
 8017352:	d000      	beq.n	8017356 <HAL_UART_Transmit+0x1a>
 8017354:	e08c      	b.n	8017470 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d003      	beq.n	8017364 <HAL_UART_Transmit+0x28>
 801735c:	1dbb      	adds	r3, r7, #6
 801735e:	881b      	ldrh	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d101      	bne.n	8017368 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017364:	2301      	movs	r3, #1
 8017366:	e084      	b.n	8017472 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	689a      	ldr	r2, [r3, #8]
 801736c:	2380      	movs	r3, #128	@ 0x80
 801736e:	015b      	lsls	r3, r3, #5
 8017370:	429a      	cmp	r2, r3
 8017372:	d109      	bne.n	8017388 <HAL_UART_Transmit+0x4c>
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	691b      	ldr	r3, [r3, #16]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d105      	bne.n	8017388 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	2201      	movs	r2, #1
 8017380:	4013      	ands	r3, r2
 8017382:	d001      	beq.n	8017388 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017384:	2301      	movs	r3, #1
 8017386:	e074      	b.n	8017472 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	2284      	movs	r2, #132	@ 0x84
 801738c:	2100      	movs	r1, #0
 801738e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2221      	movs	r2, #33	@ 0x21
 8017394:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017396:	f7f7 fda5 	bl	800eee4 <HAL_GetTick>
 801739a:	0003      	movs	r3, r0
 801739c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	1dba      	adds	r2, r7, #6
 80173a2:	2150      	movs	r1, #80	@ 0x50
 80173a4:	8812      	ldrh	r2, [r2, #0]
 80173a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	1dba      	adds	r2, r7, #6
 80173ac:	2152      	movs	r1, #82	@ 0x52
 80173ae:	8812      	ldrh	r2, [r2, #0]
 80173b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	689a      	ldr	r2, [r3, #8]
 80173b6:	2380      	movs	r3, #128	@ 0x80
 80173b8:	015b      	lsls	r3, r3, #5
 80173ba:	429a      	cmp	r2, r3
 80173bc:	d108      	bne.n	80173d0 <HAL_UART_Transmit+0x94>
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	691b      	ldr	r3, [r3, #16]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d104      	bne.n	80173d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80173c6:	2300      	movs	r3, #0
 80173c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	61bb      	str	r3, [r7, #24]
 80173ce:	e003      	b.n	80173d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80173d4:	2300      	movs	r3, #0
 80173d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80173d8:	e02f      	b.n	801743a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80173da:	697a      	ldr	r2, [r7, #20]
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	9300      	str	r3, [sp, #0]
 80173e2:	0013      	movs	r3, r2
 80173e4:	2200      	movs	r2, #0
 80173e6:	2180      	movs	r1, #128	@ 0x80
 80173e8:	f001 f8fa 	bl	80185e0 <UART_WaitOnFlagUntilTimeout>
 80173ec:	1e03      	subs	r3, r0, #0
 80173ee:	d004      	beq.n	80173fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2220      	movs	r2, #32
 80173f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80173f6:	2303      	movs	r3, #3
 80173f8:	e03b      	b.n	8017472 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80173fa:	69fb      	ldr	r3, [r7, #28]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d10b      	bne.n	8017418 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017400:	69bb      	ldr	r3, [r7, #24]
 8017402:	881b      	ldrh	r3, [r3, #0]
 8017404:	001a      	movs	r2, r3
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	05d2      	lsls	r2, r2, #23
 801740c:	0dd2      	lsrs	r2, r2, #23
 801740e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017410:	69bb      	ldr	r3, [r7, #24]
 8017412:	3302      	adds	r3, #2
 8017414:	61bb      	str	r3, [r7, #24]
 8017416:	e007      	b.n	8017428 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	781a      	ldrb	r2, [r3, #0]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	3301      	adds	r3, #1
 8017426:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	2252      	movs	r2, #82	@ 0x52
 801742c:	5a9b      	ldrh	r3, [r3, r2]
 801742e:	b29b      	uxth	r3, r3
 8017430:	3b01      	subs	r3, #1
 8017432:	b299      	uxth	r1, r3
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	2252      	movs	r2, #82	@ 0x52
 8017438:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2252      	movs	r2, #82	@ 0x52
 801743e:	5a9b      	ldrh	r3, [r3, r2]
 8017440:	b29b      	uxth	r3, r3
 8017442:	2b00      	cmp	r3, #0
 8017444:	d1c9      	bne.n	80173da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017446:	697a      	ldr	r2, [r7, #20]
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	683b      	ldr	r3, [r7, #0]
 801744c:	9300      	str	r3, [sp, #0]
 801744e:	0013      	movs	r3, r2
 8017450:	2200      	movs	r2, #0
 8017452:	2140      	movs	r1, #64	@ 0x40
 8017454:	f001 f8c4 	bl	80185e0 <UART_WaitOnFlagUntilTimeout>
 8017458:	1e03      	subs	r3, r0, #0
 801745a:	d004      	beq.n	8017466 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	2220      	movs	r2, #32
 8017460:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8017462:	2303      	movs	r3, #3
 8017464:	e005      	b.n	8017472 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	2220      	movs	r2, #32
 801746a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801746c:	2300      	movs	r3, #0
 801746e:	e000      	b.n	8017472 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017470:	2302      	movs	r3, #2
  }
}
 8017472:	0018      	movs	r0, r3
 8017474:	46bd      	mov	sp, r7
 8017476:	b008      	add	sp, #32
 8017478:	bd80      	pop	{r7, pc}
	...

0801747c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b088      	sub	sp, #32
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	1dbb      	adds	r3, r7, #6
 8017488:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	2280      	movs	r2, #128	@ 0x80
 801748e:	589b      	ldr	r3, [r3, r2]
 8017490:	2b20      	cmp	r3, #32
 8017492:	d14a      	bne.n	801752a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d003      	beq.n	80174a2 <HAL_UART_Receive_IT+0x26>
 801749a:	1dbb      	adds	r3, r7, #6
 801749c:	881b      	ldrh	r3, [r3, #0]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d101      	bne.n	80174a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80174a2:	2301      	movs	r3, #1
 80174a4:	e042      	b.n	801752c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	689a      	ldr	r2, [r3, #8]
 80174aa:	2380      	movs	r3, #128	@ 0x80
 80174ac:	015b      	lsls	r3, r3, #5
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d109      	bne.n	80174c6 <HAL_UART_Receive_IT+0x4a>
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	691b      	ldr	r3, [r3, #16]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d105      	bne.n	80174c6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	2201      	movs	r2, #1
 80174be:	4013      	ands	r3, r2
 80174c0:	d001      	beq.n	80174c6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80174c2:	2301      	movs	r3, #1
 80174c4:	e032      	b.n	801752c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	2200      	movs	r2, #0
 80174ca:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	4a18      	ldr	r2, [pc, #96]	@ (8017534 <HAL_UART_Receive_IT+0xb8>)
 80174d2:	4293      	cmp	r3, r2
 80174d4:	d020      	beq.n	8017518 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	685a      	ldr	r2, [r3, #4]
 80174dc:	2380      	movs	r3, #128	@ 0x80
 80174de:	041b      	lsls	r3, r3, #16
 80174e0:	4013      	ands	r3, r2
 80174e2:	d019      	beq.n	8017518 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174e4:	f3ef 8310 	mrs	r3, PRIMASK
 80174e8:	613b      	str	r3, [r7, #16]
  return(result);
 80174ea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174ec:	61fb      	str	r3, [r7, #28]
 80174ee:	2301      	movs	r3, #1
 80174f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	f383 8810 	msr	PRIMASK, r3
}
 80174f8:	46c0      	nop			@ (mov r8, r8)
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2180      	movs	r1, #128	@ 0x80
 8017506:	04c9      	lsls	r1, r1, #19
 8017508:	430a      	orrs	r2, r1
 801750a:	601a      	str	r2, [r3, #0]
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017510:	69bb      	ldr	r3, [r7, #24]
 8017512:	f383 8810 	msr	PRIMASK, r3
}
 8017516:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017518:	1dbb      	adds	r3, r7, #6
 801751a:	881a      	ldrh	r2, [r3, #0]
 801751c:	68b9      	ldr	r1, [r7, #8]
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	0018      	movs	r0, r3
 8017522:	f001 f8c7 	bl	80186b4 <UART_Start_Receive_IT>
 8017526:	0003      	movs	r3, r0
 8017528:	e000      	b.n	801752c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801752a:	2302      	movs	r3, #2
  }
}
 801752c:	0018      	movs	r0, r3
 801752e:	46bd      	mov	sp, r7
 8017530:	b008      	add	sp, #32
 8017532:	bd80      	pop	{r7, pc}
 8017534:	40004800 	.word	0x40004800

08017538 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b088      	sub	sp, #32
 801753c:	af00      	add	r7, sp, #0
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	1dbb      	adds	r3, r7, #6
 8017544:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801754a:	2b20      	cmp	r3, #32
 801754c:	d000      	beq.n	8017550 <HAL_UART_Transmit_DMA+0x18>
 801754e:	e077      	b.n	8017640 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d003      	beq.n	801755e <HAL_UART_Transmit_DMA+0x26>
 8017556:	1dbb      	adds	r3, r7, #6
 8017558:	881b      	ldrh	r3, [r3, #0]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d101      	bne.n	8017562 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801755e:	2301      	movs	r3, #1
 8017560:	e06f      	b.n	8017642 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	689a      	ldr	r2, [r3, #8]
 8017566:	2380      	movs	r3, #128	@ 0x80
 8017568:	015b      	lsls	r3, r3, #5
 801756a:	429a      	cmp	r2, r3
 801756c:	d109      	bne.n	8017582 <HAL_UART_Transmit_DMA+0x4a>
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	691b      	ldr	r3, [r3, #16]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d105      	bne.n	8017582 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	2201      	movs	r2, #1
 801757a:	4013      	ands	r3, r2
 801757c:	d001      	beq.n	8017582 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801757e:	2301      	movs	r3, #1
 8017580:	e05f      	b.n	8017642 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	68ba      	ldr	r2, [r7, #8]
 8017586:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	1dba      	adds	r2, r7, #6
 801758c:	2150      	movs	r1, #80	@ 0x50
 801758e:	8812      	ldrh	r2, [r2, #0]
 8017590:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	1dba      	adds	r2, r7, #6
 8017596:	2152      	movs	r1, #82	@ 0x52
 8017598:	8812      	ldrh	r2, [r2, #0]
 801759a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	2284      	movs	r2, #132	@ 0x84
 80175a0:	2100      	movs	r1, #0
 80175a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	2221      	movs	r2, #33	@ 0x21
 80175a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d027      	beq.n	8017602 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175b6:	4a25      	ldr	r2, [pc, #148]	@ (801764c <HAL_UART_Transmit_DMA+0x114>)
 80175b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175be:	4a24      	ldr	r2, [pc, #144]	@ (8017650 <HAL_UART_Transmit_DMA+0x118>)
 80175c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175c6:	4a23      	ldr	r2, [pc, #140]	@ (8017654 <HAL_UART_Transmit_DMA+0x11c>)
 80175c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175ce:	2200      	movs	r2, #0
 80175d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175da:	0019      	movs	r1, r3
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	3328      	adds	r3, #40	@ 0x28
 80175e2:	001a      	movs	r2, r3
 80175e4:	1dbb      	adds	r3, r7, #6
 80175e6:	881b      	ldrh	r3, [r3, #0]
 80175e8:	f7f8 f9ce 	bl	800f988 <HAL_DMA_Start_IT>
 80175ec:	1e03      	subs	r3, r0, #0
 80175ee:	d008      	beq.n	8017602 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	2284      	movs	r2, #132	@ 0x84
 80175f4:	2110      	movs	r1, #16
 80175f6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2220      	movs	r2, #32
 80175fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80175fe:	2301      	movs	r3, #1
 8017600:	e01f      	b.n	8017642 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	2240      	movs	r2, #64	@ 0x40
 8017608:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801760a:	f3ef 8310 	mrs	r3, PRIMASK
 801760e:	613b      	str	r3, [r7, #16]
  return(result);
 8017610:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017612:	61fb      	str	r3, [r7, #28]
 8017614:	2301      	movs	r3, #1
 8017616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	f383 8810 	msr	PRIMASK, r3
}
 801761e:	46c0      	nop			@ (mov r8, r8)
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	689a      	ldr	r2, [r3, #8]
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	2180      	movs	r1, #128	@ 0x80
 801762c:	430a      	orrs	r2, r1
 801762e:	609a      	str	r2, [r3, #8]
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017634:	69bb      	ldr	r3, [r7, #24]
 8017636:	f383 8810 	msr	PRIMASK, r3
}
 801763a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801763c:	2300      	movs	r3, #0
 801763e:	e000      	b.n	8017642 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8017640:	2302      	movs	r3, #2
  }
}
 8017642:	0018      	movs	r0, r3
 8017644:	46bd      	mov	sp, r7
 8017646:	b008      	add	sp, #32
 8017648:	bd80      	pop	{r7, pc}
 801764a:	46c0      	nop			@ (mov r8, r8)
 801764c:	08018a99 	.word	0x08018a99
 8017650:	08018b35 	.word	0x08018b35
 8017654:	08018cd5 	.word	0x08018cd5

08017658 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b088      	sub	sp, #32
 801765c:	af00      	add	r7, sp, #0
 801765e:	60f8      	str	r0, [r7, #12]
 8017660:	60b9      	str	r1, [r7, #8]
 8017662:	1dbb      	adds	r3, r7, #6
 8017664:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	2280      	movs	r2, #128	@ 0x80
 801766a:	589b      	ldr	r3, [r3, r2]
 801766c:	2b20      	cmp	r3, #32
 801766e:	d14a      	bne.n	8017706 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d003      	beq.n	801767e <HAL_UART_Receive_DMA+0x26>
 8017676:	1dbb      	adds	r3, r7, #6
 8017678:	881b      	ldrh	r3, [r3, #0]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d101      	bne.n	8017682 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801767e:	2301      	movs	r3, #1
 8017680:	e042      	b.n	8017708 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	689a      	ldr	r2, [r3, #8]
 8017686:	2380      	movs	r3, #128	@ 0x80
 8017688:	015b      	lsls	r3, r3, #5
 801768a:	429a      	cmp	r2, r3
 801768c:	d109      	bne.n	80176a2 <HAL_UART_Receive_DMA+0x4a>
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	691b      	ldr	r3, [r3, #16]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d105      	bne.n	80176a2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	2201      	movs	r2, #1
 801769a:	4013      	ands	r3, r2
 801769c:	d001      	beq.n	80176a2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801769e:	2301      	movs	r3, #1
 80176a0:	e032      	b.n	8017708 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	2200      	movs	r2, #0
 80176a6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	4a18      	ldr	r2, [pc, #96]	@ (8017710 <HAL_UART_Receive_DMA+0xb8>)
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d020      	beq.n	80176f4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	685a      	ldr	r2, [r3, #4]
 80176b8:	2380      	movs	r3, #128	@ 0x80
 80176ba:	041b      	lsls	r3, r3, #16
 80176bc:	4013      	ands	r3, r2
 80176be:	d019      	beq.n	80176f4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176c0:	f3ef 8310 	mrs	r3, PRIMASK
 80176c4:	613b      	str	r3, [r7, #16]
  return(result);
 80176c6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80176c8:	61fb      	str	r3, [r7, #28]
 80176ca:	2301      	movs	r3, #1
 80176cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176ce:	697b      	ldr	r3, [r7, #20]
 80176d0:	f383 8810 	msr	PRIMASK, r3
}
 80176d4:	46c0      	nop			@ (mov r8, r8)
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	681a      	ldr	r2, [r3, #0]
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2180      	movs	r1, #128	@ 0x80
 80176e2:	04c9      	lsls	r1, r1, #19
 80176e4:	430a      	orrs	r2, r1
 80176e6:	601a      	str	r2, [r3, #0]
 80176e8:	69fb      	ldr	r3, [r7, #28]
 80176ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176ec:	69bb      	ldr	r3, [r7, #24]
 80176ee:	f383 8810 	msr	PRIMASK, r3
}
 80176f2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80176f4:	1dbb      	adds	r3, r7, #6
 80176f6:	881a      	ldrh	r2, [r3, #0]
 80176f8:	68b9      	ldr	r1, [r7, #8]
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	0018      	movs	r0, r3
 80176fe:	f001 f8a3 	bl	8018848 <UART_Start_Receive_DMA>
 8017702:	0003      	movs	r3, r0
 8017704:	e000      	b.n	8017708 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017706:	2302      	movs	r3, #2
  }
}
 8017708:	0018      	movs	r0, r3
 801770a:	46bd      	mov	sp, r7
 801770c:	b008      	add	sp, #32
 801770e:	bd80      	pop	{r7, pc}
 8017710:	40004800 	.word	0x40004800

08017714 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017714:	b590      	push	{r4, r7, lr}
 8017716:	b0ab      	sub	sp, #172	@ 0xac
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	69db      	ldr	r3, [r3, #28]
 8017722:	22a4      	movs	r2, #164	@ 0xa4
 8017724:	18b9      	adds	r1, r7, r2
 8017726:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	20a0      	movs	r0, #160	@ 0xa0
 8017730:	1839      	adds	r1, r7, r0
 8017732:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	689b      	ldr	r3, [r3, #8]
 801773a:	219c      	movs	r1, #156	@ 0x9c
 801773c:	1879      	adds	r1, r7, r1
 801773e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017740:	0011      	movs	r1, r2
 8017742:	18bb      	adds	r3, r7, r2
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4a9c      	ldr	r2, [pc, #624]	@ (80179b8 <HAL_UART_IRQHandler+0x2a4>)
 8017748:	4013      	ands	r3, r2
 801774a:	2298      	movs	r2, #152	@ 0x98
 801774c:	18bc      	adds	r4, r7, r2
 801774e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8017750:	18bb      	adds	r3, r7, r2
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d114      	bne.n	8017782 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017758:	187b      	adds	r3, r7, r1
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	2220      	movs	r2, #32
 801775e:	4013      	ands	r3, r2
 8017760:	d00f      	beq.n	8017782 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017762:	183b      	adds	r3, r7, r0
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2220      	movs	r2, #32
 8017768:	4013      	ands	r3, r2
 801776a:	d00a      	beq.n	8017782 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017770:	2b00      	cmp	r3, #0
 8017772:	d100      	bne.n	8017776 <HAL_UART_IRQHandler+0x62>
 8017774:	e2aa      	b.n	8017ccc <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801777a:	687a      	ldr	r2, [r7, #4]
 801777c:	0010      	movs	r0, r2
 801777e:	4798      	blx	r3
      }
      return;
 8017780:	e2a4      	b.n	8017ccc <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017782:	2398      	movs	r3, #152	@ 0x98
 8017784:	18fb      	adds	r3, r7, r3
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d100      	bne.n	801778e <HAL_UART_IRQHandler+0x7a>
 801778c:	e11a      	b.n	80179c4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801778e:	239c      	movs	r3, #156	@ 0x9c
 8017790:	18fb      	adds	r3, r7, r3
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	2201      	movs	r2, #1
 8017796:	4013      	ands	r3, r2
 8017798:	d106      	bne.n	80177a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801779a:	23a0      	movs	r3, #160	@ 0xa0
 801779c:	18fb      	adds	r3, r7, r3
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	4a86      	ldr	r2, [pc, #536]	@ (80179bc <HAL_UART_IRQHandler+0x2a8>)
 80177a2:	4013      	ands	r3, r2
 80177a4:	d100      	bne.n	80177a8 <HAL_UART_IRQHandler+0x94>
 80177a6:	e10d      	b.n	80179c4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80177a8:	23a4      	movs	r3, #164	@ 0xa4
 80177aa:	18fb      	adds	r3, r7, r3
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	2201      	movs	r2, #1
 80177b0:	4013      	ands	r3, r2
 80177b2:	d012      	beq.n	80177da <HAL_UART_IRQHandler+0xc6>
 80177b4:	23a0      	movs	r3, #160	@ 0xa0
 80177b6:	18fb      	adds	r3, r7, r3
 80177b8:	681a      	ldr	r2, [r3, #0]
 80177ba:	2380      	movs	r3, #128	@ 0x80
 80177bc:	005b      	lsls	r3, r3, #1
 80177be:	4013      	ands	r3, r2
 80177c0:	d00b      	beq.n	80177da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2201      	movs	r2, #1
 80177c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2284      	movs	r2, #132	@ 0x84
 80177ce:	589b      	ldr	r3, [r3, r2]
 80177d0:	2201      	movs	r2, #1
 80177d2:	431a      	orrs	r2, r3
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2184      	movs	r1, #132	@ 0x84
 80177d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80177da:	23a4      	movs	r3, #164	@ 0xa4
 80177dc:	18fb      	adds	r3, r7, r3
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	2202      	movs	r2, #2
 80177e2:	4013      	ands	r3, r2
 80177e4:	d011      	beq.n	801780a <HAL_UART_IRQHandler+0xf6>
 80177e6:	239c      	movs	r3, #156	@ 0x9c
 80177e8:	18fb      	adds	r3, r7, r3
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2201      	movs	r2, #1
 80177ee:	4013      	ands	r3, r2
 80177f0:	d00b      	beq.n	801780a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	2202      	movs	r2, #2
 80177f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2284      	movs	r2, #132	@ 0x84
 80177fe:	589b      	ldr	r3, [r3, r2]
 8017800:	2204      	movs	r2, #4
 8017802:	431a      	orrs	r2, r3
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2184      	movs	r1, #132	@ 0x84
 8017808:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801780a:	23a4      	movs	r3, #164	@ 0xa4
 801780c:	18fb      	adds	r3, r7, r3
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2204      	movs	r2, #4
 8017812:	4013      	ands	r3, r2
 8017814:	d011      	beq.n	801783a <HAL_UART_IRQHandler+0x126>
 8017816:	239c      	movs	r3, #156	@ 0x9c
 8017818:	18fb      	adds	r3, r7, r3
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2201      	movs	r2, #1
 801781e:	4013      	ands	r3, r2
 8017820:	d00b      	beq.n	801783a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	2204      	movs	r2, #4
 8017828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	2284      	movs	r2, #132	@ 0x84
 801782e:	589b      	ldr	r3, [r3, r2]
 8017830:	2202      	movs	r2, #2
 8017832:	431a      	orrs	r2, r3
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	2184      	movs	r1, #132	@ 0x84
 8017838:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801783a:	23a4      	movs	r3, #164	@ 0xa4
 801783c:	18fb      	adds	r3, r7, r3
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2208      	movs	r2, #8
 8017842:	4013      	ands	r3, r2
 8017844:	d017      	beq.n	8017876 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017846:	23a0      	movs	r3, #160	@ 0xa0
 8017848:	18fb      	adds	r3, r7, r3
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	2220      	movs	r2, #32
 801784e:	4013      	ands	r3, r2
 8017850:	d105      	bne.n	801785e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8017852:	239c      	movs	r3, #156	@ 0x9c
 8017854:	18fb      	adds	r3, r7, r3
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	2201      	movs	r2, #1
 801785a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801785c:	d00b      	beq.n	8017876 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	2208      	movs	r2, #8
 8017864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	2284      	movs	r2, #132	@ 0x84
 801786a:	589b      	ldr	r3, [r3, r2]
 801786c:	2208      	movs	r2, #8
 801786e:	431a      	orrs	r2, r3
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	2184      	movs	r1, #132	@ 0x84
 8017874:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017876:	23a4      	movs	r3, #164	@ 0xa4
 8017878:	18fb      	adds	r3, r7, r3
 801787a:	681a      	ldr	r2, [r3, #0]
 801787c:	2380      	movs	r3, #128	@ 0x80
 801787e:	011b      	lsls	r3, r3, #4
 8017880:	4013      	ands	r3, r2
 8017882:	d013      	beq.n	80178ac <HAL_UART_IRQHandler+0x198>
 8017884:	23a0      	movs	r3, #160	@ 0xa0
 8017886:	18fb      	adds	r3, r7, r3
 8017888:	681a      	ldr	r2, [r3, #0]
 801788a:	2380      	movs	r3, #128	@ 0x80
 801788c:	04db      	lsls	r3, r3, #19
 801788e:	4013      	ands	r3, r2
 8017890:	d00c      	beq.n	80178ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2280      	movs	r2, #128	@ 0x80
 8017898:	0112      	lsls	r2, r2, #4
 801789a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2284      	movs	r2, #132	@ 0x84
 80178a0:	589b      	ldr	r3, [r3, r2]
 80178a2:	2220      	movs	r2, #32
 80178a4:	431a      	orrs	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	2184      	movs	r1, #132	@ 0x84
 80178aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	2284      	movs	r2, #132	@ 0x84
 80178b0:	589b      	ldr	r3, [r3, r2]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d100      	bne.n	80178b8 <HAL_UART_IRQHandler+0x1a4>
 80178b6:	e20b      	b.n	8017cd0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80178b8:	23a4      	movs	r3, #164	@ 0xa4
 80178ba:	18fb      	adds	r3, r7, r3
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	2220      	movs	r2, #32
 80178c0:	4013      	ands	r3, r2
 80178c2:	d00e      	beq.n	80178e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80178c4:	23a0      	movs	r3, #160	@ 0xa0
 80178c6:	18fb      	adds	r3, r7, r3
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2220      	movs	r2, #32
 80178cc:	4013      	ands	r3, r2
 80178ce:	d008      	beq.n	80178e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d004      	beq.n	80178e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80178dc:	687a      	ldr	r2, [r7, #4]
 80178de:	0010      	movs	r0, r2
 80178e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2284      	movs	r2, #132	@ 0x84
 80178e6:	589b      	ldr	r3, [r3, r2]
 80178e8:	2194      	movs	r1, #148	@ 0x94
 80178ea:	187a      	adds	r2, r7, r1
 80178ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	689b      	ldr	r3, [r3, #8]
 80178f4:	2240      	movs	r2, #64	@ 0x40
 80178f6:	4013      	ands	r3, r2
 80178f8:	2b40      	cmp	r3, #64	@ 0x40
 80178fa:	d004      	beq.n	8017906 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80178fc:	187b      	adds	r3, r7, r1
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2228      	movs	r2, #40	@ 0x28
 8017902:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017904:	d04b      	beq.n	801799e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	0018      	movs	r0, r3
 801790a:	f001 f861 	bl	80189d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	689b      	ldr	r3, [r3, #8]
 8017914:	2240      	movs	r2, #64	@ 0x40
 8017916:	4013      	ands	r3, r2
 8017918:	2b40      	cmp	r3, #64	@ 0x40
 801791a:	d139      	bne.n	8017990 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801791c:	f3ef 8310 	mrs	r3, PRIMASK
 8017920:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017924:	2090      	movs	r0, #144	@ 0x90
 8017926:	183a      	adds	r2, r7, r0
 8017928:	6013      	str	r3, [r2, #0]
 801792a:	2301      	movs	r3, #1
 801792c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801792e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017930:	f383 8810 	msr	PRIMASK, r3
}
 8017934:	46c0      	nop			@ (mov r8, r8)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	689a      	ldr	r2, [r3, #8]
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	2140      	movs	r1, #64	@ 0x40
 8017942:	438a      	bics	r2, r1
 8017944:	609a      	str	r2, [r3, #8]
 8017946:	183b      	adds	r3, r7, r0
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801794c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801794e:	f383 8810 	msr	PRIMASK, r3
}
 8017952:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017958:	2b00      	cmp	r3, #0
 801795a:	d012      	beq.n	8017982 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017960:	4a17      	ldr	r2, [pc, #92]	@ (80179c0 <HAL_UART_IRQHandler+0x2ac>)
 8017962:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017968:	0018      	movs	r0, r3
 801796a:	f7f8 f8b3 	bl	800fad4 <HAL_DMA_Abort_IT>
 801796e:	1e03      	subs	r3, r0, #0
 8017970:	d020      	beq.n	80179b4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801797c:	0018      	movs	r0, r3
 801797e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017980:	e018      	b.n	80179b4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	2298      	movs	r2, #152	@ 0x98
 8017986:	589b      	ldr	r3, [r3, r2]
 8017988:	687a      	ldr	r2, [r7, #4]
 801798a:	0010      	movs	r0, r2
 801798c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801798e:	e011      	b.n	80179b4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2298      	movs	r2, #152	@ 0x98
 8017994:	589b      	ldr	r3, [r3, r2]
 8017996:	687a      	ldr	r2, [r7, #4]
 8017998:	0010      	movs	r0, r2
 801799a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801799c:	e00a      	b.n	80179b4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2298      	movs	r2, #152	@ 0x98
 80179a2:	589b      	ldr	r3, [r3, r2]
 80179a4:	687a      	ldr	r2, [r7, #4]
 80179a6:	0010      	movs	r0, r2
 80179a8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2284      	movs	r2, #132	@ 0x84
 80179ae:	2100      	movs	r1, #0
 80179b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80179b2:	e18d      	b.n	8017cd0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179b4:	46c0      	nop			@ (mov r8, r8)
    return;
 80179b6:	e18b      	b.n	8017cd0 <HAL_UART_IRQHandler+0x5bc>
 80179b8:	0000080f 	.word	0x0000080f
 80179bc:	04000120 	.word	0x04000120
 80179c0:	08018d5d 	.word	0x08018d5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	d000      	beq.n	80179ce <HAL_UART_IRQHandler+0x2ba>
 80179cc:	e13d      	b.n	8017c4a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80179ce:	23a4      	movs	r3, #164	@ 0xa4
 80179d0:	18fb      	adds	r3, r7, r3
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	2210      	movs	r2, #16
 80179d6:	4013      	ands	r3, r2
 80179d8:	d100      	bne.n	80179dc <HAL_UART_IRQHandler+0x2c8>
 80179da:	e136      	b.n	8017c4a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80179dc:	23a0      	movs	r3, #160	@ 0xa0
 80179de:	18fb      	adds	r3, r7, r3
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	2210      	movs	r2, #16
 80179e4:	4013      	ands	r3, r2
 80179e6:	d100      	bne.n	80179ea <HAL_UART_IRQHandler+0x2d6>
 80179e8:	e12f      	b.n	8017c4a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	2210      	movs	r2, #16
 80179f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	689b      	ldr	r3, [r3, #8]
 80179f8:	2240      	movs	r2, #64	@ 0x40
 80179fa:	4013      	ands	r3, r2
 80179fc:	2b40      	cmp	r3, #64	@ 0x40
 80179fe:	d000      	beq.n	8017a02 <HAL_UART_IRQHandler+0x2ee>
 8017a00:	e0a2      	b.n	8017b48 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	685a      	ldr	r2, [r3, #4]
 8017a0a:	217e      	movs	r1, #126	@ 0x7e
 8017a0c:	187b      	adds	r3, r7, r1
 8017a0e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017a10:	187b      	adds	r3, r7, r1
 8017a12:	881b      	ldrh	r3, [r3, #0]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d100      	bne.n	8017a1a <HAL_UART_IRQHandler+0x306>
 8017a18:	e15c      	b.n	8017cd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	2258      	movs	r2, #88	@ 0x58
 8017a1e:	5a9b      	ldrh	r3, [r3, r2]
 8017a20:	187a      	adds	r2, r7, r1
 8017a22:	8812      	ldrh	r2, [r2, #0]
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d300      	bcc.n	8017a2a <HAL_UART_IRQHandler+0x316>
 8017a28:	e154      	b.n	8017cd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	187a      	adds	r2, r7, r1
 8017a2e:	215a      	movs	r1, #90	@ 0x5a
 8017a30:	8812      	ldrh	r2, [r2, #0]
 8017a32:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	2220      	movs	r2, #32
 8017a3e:	4013      	ands	r3, r2
 8017a40:	d16f      	bne.n	8017b22 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a42:	f3ef 8310 	mrs	r3, PRIMASK
 8017a46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a52:	f383 8810 	msr	PRIMASK, r3
}
 8017a56:	46c0      	nop			@ (mov r8, r8)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	681a      	ldr	r2, [r3, #0]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	49a0      	ldr	r1, [pc, #640]	@ (8017ce4 <HAL_UART_IRQHandler+0x5d0>)
 8017a64:	400a      	ands	r2, r1
 8017a66:	601a      	str	r2, [r3, #0]
 8017a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a6e:	f383 8810 	msr	PRIMASK, r3
}
 8017a72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a74:	f3ef 8310 	mrs	r3, PRIMASK
 8017a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8017a7e:	2301      	movs	r3, #1
 8017a80:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a84:	f383 8810 	msr	PRIMASK, r3
}
 8017a88:	46c0      	nop			@ (mov r8, r8)
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	689a      	ldr	r2, [r3, #8]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2101      	movs	r1, #1
 8017a96:	438a      	bics	r2, r1
 8017a98:	609a      	str	r2, [r3, #8]
 8017a9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017a9c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017aa0:	f383 8810 	msr	PRIMASK, r3
}
 8017aa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8017aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ab6:	f383 8810 	msr	PRIMASK, r3
}
 8017aba:	46c0      	nop			@ (mov r8, r8)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	689a      	ldr	r2, [r3, #8]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	2140      	movs	r1, #64	@ 0x40
 8017ac8:	438a      	bics	r2, r1
 8017aca:	609a      	str	r2, [r3, #8]
 8017acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017ace:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ad2:	f383 8810 	msr	PRIMASK, r3
}
 8017ad6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	2280      	movs	r2, #128	@ 0x80
 8017adc:	2120      	movs	r1, #32
 8017ade:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8017aea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017af0:	2301      	movs	r3, #1
 8017af2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017af6:	f383 8810 	msr	PRIMASK, r3
}
 8017afa:	46c0      	nop			@ (mov r8, r8)
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	681a      	ldr	r2, [r3, #0]
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	2110      	movs	r1, #16
 8017b08:	438a      	bics	r2, r1
 8017b0a:	601a      	str	r2, [r3, #0]
 8017b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017b12:	f383 8810 	msr	PRIMASK, r3
}
 8017b16:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017b1c:	0018      	movs	r0, r3
 8017b1e:	f7f7 ff99 	bl	800fa54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2202      	movs	r2, #2
 8017b26:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	22ac      	movs	r2, #172	@ 0xac
 8017b2c:	589b      	ldr	r3, [r3, r2]
 8017b2e:	687a      	ldr	r2, [r7, #4]
 8017b30:	2158      	movs	r1, #88	@ 0x58
 8017b32:	5a51      	ldrh	r1, [r2, r1]
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	205a      	movs	r0, #90	@ 0x5a
 8017b38:	5a12      	ldrh	r2, [r2, r0]
 8017b3a:	b292      	uxth	r2, r2
 8017b3c:	1a8a      	subs	r2, r1, r2
 8017b3e:	b291      	uxth	r1, r2
 8017b40:	687a      	ldr	r2, [r7, #4]
 8017b42:	0010      	movs	r0, r2
 8017b44:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017b46:	e0c5      	b.n	8017cd4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2258      	movs	r2, #88	@ 0x58
 8017b4c:	5a99      	ldrh	r1, [r3, r2]
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	225a      	movs	r2, #90	@ 0x5a
 8017b52:	5a9b      	ldrh	r3, [r3, r2]
 8017b54:	b29a      	uxth	r2, r3
 8017b56:	208e      	movs	r0, #142	@ 0x8e
 8017b58:	183b      	adds	r3, r7, r0
 8017b5a:	1a8a      	subs	r2, r1, r2
 8017b5c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	225a      	movs	r2, #90	@ 0x5a
 8017b62:	5a9b      	ldrh	r3, [r3, r2]
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d100      	bne.n	8017b6c <HAL_UART_IRQHandler+0x458>
 8017b6a:	e0b5      	b.n	8017cd8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017b6c:	183b      	adds	r3, r7, r0
 8017b6e:	881b      	ldrh	r3, [r3, #0]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d100      	bne.n	8017b76 <HAL_UART_IRQHandler+0x462>
 8017b74:	e0b0      	b.n	8017cd8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b76:	f3ef 8310 	mrs	r3, PRIMASK
 8017b7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b7c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b7e:	2488      	movs	r4, #136	@ 0x88
 8017b80:	193a      	adds	r2, r7, r4
 8017b82:	6013      	str	r3, [r2, #0]
 8017b84:	2301      	movs	r3, #1
 8017b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b88:	693b      	ldr	r3, [r7, #16]
 8017b8a:	f383 8810 	msr	PRIMASK, r3
}
 8017b8e:	46c0      	nop			@ (mov r8, r8)
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	4953      	ldr	r1, [pc, #332]	@ (8017ce8 <HAL_UART_IRQHandler+0x5d4>)
 8017b9c:	400a      	ands	r2, r1
 8017b9e:	601a      	str	r2, [r3, #0]
 8017ba0:	193b      	adds	r3, r7, r4
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ba6:	697b      	ldr	r3, [r7, #20]
 8017ba8:	f383 8810 	msr	PRIMASK, r3
}
 8017bac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bae:	f3ef 8310 	mrs	r3, PRIMASK
 8017bb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8017bb4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017bb6:	2484      	movs	r4, #132	@ 0x84
 8017bb8:	193a      	adds	r2, r7, r4
 8017bba:	6013      	str	r3, [r2, #0]
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	f383 8810 	msr	PRIMASK, r3
}
 8017bc6:	46c0      	nop			@ (mov r8, r8)
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	689a      	ldr	r2, [r3, #8]
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	2101      	movs	r1, #1
 8017bd4:	438a      	bics	r2, r1
 8017bd6:	609a      	str	r2, [r3, #8]
 8017bd8:	193b      	adds	r3, r7, r4
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bde:	6a3b      	ldr	r3, [r7, #32]
 8017be0:	f383 8810 	msr	PRIMASK, r3
}
 8017be4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2280      	movs	r2, #128	@ 0x80
 8017bea:	2120      	movs	r1, #32
 8017bec:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8017bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017c02:	2480      	movs	r4, #128	@ 0x80
 8017c04:	193a      	adds	r2, r7, r4
 8017c06:	6013      	str	r3, [r2, #0]
 8017c08:	2301      	movs	r3, #1
 8017c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c0e:	f383 8810 	msr	PRIMASK, r3
}
 8017c12:	46c0      	nop			@ (mov r8, r8)
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	681a      	ldr	r2, [r3, #0]
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	2110      	movs	r1, #16
 8017c20:	438a      	bics	r2, r1
 8017c22:	601a      	str	r2, [r3, #0]
 8017c24:	193b      	adds	r3, r7, r4
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c2c:	f383 8810 	msr	PRIMASK, r3
}
 8017c30:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2202      	movs	r2, #2
 8017c36:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	22ac      	movs	r2, #172	@ 0xac
 8017c3c:	589b      	ldr	r3, [r3, r2]
 8017c3e:	183a      	adds	r2, r7, r0
 8017c40:	8811      	ldrh	r1, [r2, #0]
 8017c42:	687a      	ldr	r2, [r7, #4]
 8017c44:	0010      	movs	r0, r2
 8017c46:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017c48:	e046      	b.n	8017cd8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017c4a:	23a4      	movs	r3, #164	@ 0xa4
 8017c4c:	18fb      	adds	r3, r7, r3
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	2380      	movs	r3, #128	@ 0x80
 8017c52:	035b      	lsls	r3, r3, #13
 8017c54:	4013      	ands	r3, r2
 8017c56:	d012      	beq.n	8017c7e <HAL_UART_IRQHandler+0x56a>
 8017c58:	239c      	movs	r3, #156	@ 0x9c
 8017c5a:	18fb      	adds	r3, r7, r3
 8017c5c:	681a      	ldr	r2, [r3, #0]
 8017c5e:	2380      	movs	r3, #128	@ 0x80
 8017c60:	03db      	lsls	r3, r3, #15
 8017c62:	4013      	ands	r3, r2
 8017c64:	d00b      	beq.n	8017c7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	2280      	movs	r2, #128	@ 0x80
 8017c6c:	0352      	lsls	r2, r2, #13
 8017c6e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	22a8      	movs	r2, #168	@ 0xa8
 8017c74:	589b      	ldr	r3, [r3, r2]
 8017c76:	687a      	ldr	r2, [r7, #4]
 8017c78:	0010      	movs	r0, r2
 8017c7a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017c7c:	e02f      	b.n	8017cde <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017c7e:	23a4      	movs	r3, #164	@ 0xa4
 8017c80:	18fb      	adds	r3, r7, r3
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2280      	movs	r2, #128	@ 0x80
 8017c86:	4013      	ands	r3, r2
 8017c88:	d00f      	beq.n	8017caa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017c8a:	23a0      	movs	r3, #160	@ 0xa0
 8017c8c:	18fb      	adds	r3, r7, r3
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	2280      	movs	r2, #128	@ 0x80
 8017c92:	4013      	ands	r3, r2
 8017c94:	d009      	beq.n	8017caa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d01e      	beq.n	8017cdc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ca2:	687a      	ldr	r2, [r7, #4]
 8017ca4:	0010      	movs	r0, r2
 8017ca6:	4798      	blx	r3
    }
    return;
 8017ca8:	e018      	b.n	8017cdc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017caa:	23a4      	movs	r3, #164	@ 0xa4
 8017cac:	18fb      	adds	r3, r7, r3
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	2240      	movs	r2, #64	@ 0x40
 8017cb2:	4013      	ands	r3, r2
 8017cb4:	d013      	beq.n	8017cde <HAL_UART_IRQHandler+0x5ca>
 8017cb6:	23a0      	movs	r3, #160	@ 0xa0
 8017cb8:	18fb      	adds	r3, r7, r3
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	2240      	movs	r2, #64	@ 0x40
 8017cbe:	4013      	ands	r3, r2
 8017cc0:	d00d      	beq.n	8017cde <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	0018      	movs	r0, r3
 8017cc6:	f001 f862 	bl	8018d8e <UART_EndTransmit_IT>
    return;
 8017cca:	e008      	b.n	8017cde <HAL_UART_IRQHandler+0x5ca>
      return;
 8017ccc:	46c0      	nop			@ (mov r8, r8)
 8017cce:	e006      	b.n	8017cde <HAL_UART_IRQHandler+0x5ca>
    return;
 8017cd0:	46c0      	nop			@ (mov r8, r8)
 8017cd2:	e004      	b.n	8017cde <HAL_UART_IRQHandler+0x5ca>
      return;
 8017cd4:	46c0      	nop			@ (mov r8, r8)
 8017cd6:	e002      	b.n	8017cde <HAL_UART_IRQHandler+0x5ca>
      return;
 8017cd8:	46c0      	nop			@ (mov r8, r8)
 8017cda:	e000      	b.n	8017cde <HAL_UART_IRQHandler+0x5ca>
    return;
 8017cdc:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	b02b      	add	sp, #172	@ 0xac
 8017ce2:	bd90      	pop	{r4, r7, pc}
 8017ce4:	fffffeff 	.word	0xfffffeff
 8017ce8:	fffffedf 	.word	0xfffffedf

08017cec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017cf4:	46c0      	nop			@ (mov r8, r8)
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	b002      	add	sp, #8
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017d04:	46c0      	nop			@ (mov r8, r8)
 8017d06:	46bd      	mov	sp, r7
 8017d08:	b002      	add	sp, #8
 8017d0a:	bd80      	pop	{r7, pc}

08017d0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017d14:	46c0      	nop			@ (mov r8, r8)
 8017d16:	46bd      	mov	sp, r7
 8017d18:	b002      	add	sp, #8
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017d24:	46c0      	nop			@ (mov r8, r8)
 8017d26:	46bd      	mov	sp, r7
 8017d28:	b002      	add	sp, #8
 8017d2a:	bd80      	pop	{r7, pc}

08017d2c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b082      	sub	sp, #8
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017d34:	46c0      	nop			@ (mov r8, r8)
 8017d36:	46bd      	mov	sp, r7
 8017d38:	b002      	add	sp, #8
 8017d3a:	bd80      	pop	{r7, pc}

08017d3c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b082      	sub	sp, #8
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017d44:	46c0      	nop			@ (mov r8, r8)
 8017d46:	46bd      	mov	sp, r7
 8017d48:	b002      	add	sp, #8
 8017d4a:	bd80      	pop	{r7, pc}

08017d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	000a      	movs	r2, r1
 8017d56:	1cbb      	adds	r3, r7, #2
 8017d58:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017d5a:	46c0      	nop			@ (mov r8, r8)
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	b002      	add	sp, #8
 8017d60:	bd80      	pop	{r7, pc}
	...

08017d64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2188      	movs	r1, #136	@ 0x88
 8017d70:	4a14      	ldr	r2, [pc, #80]	@ (8017dc4 <UART_InitCallbacksToDefault+0x60>)
 8017d72:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	218c      	movs	r1, #140	@ 0x8c
 8017d78:	4a13      	ldr	r2, [pc, #76]	@ (8017dc8 <UART_InitCallbacksToDefault+0x64>)
 8017d7a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2190      	movs	r1, #144	@ 0x90
 8017d80:	4a12      	ldr	r2, [pc, #72]	@ (8017dcc <UART_InitCallbacksToDefault+0x68>)
 8017d82:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	2194      	movs	r1, #148	@ 0x94
 8017d88:	4a11      	ldr	r2, [pc, #68]	@ (8017dd0 <UART_InitCallbacksToDefault+0x6c>)
 8017d8a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	2198      	movs	r1, #152	@ 0x98
 8017d90:	4a10      	ldr	r2, [pc, #64]	@ (8017dd4 <UART_InitCallbacksToDefault+0x70>)
 8017d92:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	219c      	movs	r1, #156	@ 0x9c
 8017d98:	4a0f      	ldr	r2, [pc, #60]	@ (8017dd8 <UART_InitCallbacksToDefault+0x74>)
 8017d9a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	21a0      	movs	r1, #160	@ 0xa0
 8017da0:	4a0e      	ldr	r2, [pc, #56]	@ (8017ddc <UART_InitCallbacksToDefault+0x78>)
 8017da2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	21a4      	movs	r1, #164	@ 0xa4
 8017da8:	4a0d      	ldr	r2, [pc, #52]	@ (8017de0 <UART_InitCallbacksToDefault+0x7c>)
 8017daa:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	21a8      	movs	r1, #168	@ 0xa8
 8017db0:	4a0c      	ldr	r2, [pc, #48]	@ (8017de4 <UART_InitCallbacksToDefault+0x80>)
 8017db2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	21ac      	movs	r1, #172	@ 0xac
 8017db8:	4a0b      	ldr	r2, [pc, #44]	@ (8017de8 <UART_InitCallbacksToDefault+0x84>)
 8017dba:	505a      	str	r2, [r3, r1]

}
 8017dbc:	46c0      	nop			@ (mov r8, r8)
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	b002      	add	sp, #8
 8017dc2:	bd80      	pop	{r7, pc}
 8017dc4:	08017cfd 	.word	0x08017cfd
 8017dc8:	08017ced 	.word	0x08017ced
 8017dcc:	08017d0d 	.word	0x08017d0d
 8017dd0:	080082a9 	.word	0x080082a9
 8017dd4:	08003cf5 	.word	0x08003cf5
 8017dd8:	08017d1d 	.word	0x08017d1d
 8017ddc:	08017d2d 	.word	0x08017d2d
 8017de0:	08017d3d 	.word	0x08017d3d
 8017de4:	08019181 	.word	0x08019181
 8017de8:	08017d4d 	.word	0x08017d4d

08017dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017dec:	b5b0      	push	{r4, r5, r7, lr}
 8017dee:	b08e      	sub	sp, #56	@ 0x38
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017df4:	231a      	movs	r3, #26
 8017df6:	2218      	movs	r2, #24
 8017df8:	189b      	adds	r3, r3, r2
 8017dfa:	19db      	adds	r3, r3, r7
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	689a      	ldr	r2, [r3, #8]
 8017e04:	69fb      	ldr	r3, [r7, #28]
 8017e06:	691b      	ldr	r3, [r3, #16]
 8017e08:	431a      	orrs	r2, r3
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	695b      	ldr	r3, [r3, #20]
 8017e0e:	431a      	orrs	r2, r3
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	69db      	ldr	r3, [r3, #28]
 8017e14:	4313      	orrs	r3, r2
 8017e16:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017e18:	69fb      	ldr	r3, [r7, #28]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	4ac3      	ldr	r2, [pc, #780]	@ (801812c <UART_SetConfig+0x340>)
 8017e20:	4013      	ands	r3, r2
 8017e22:	0019      	movs	r1, r3
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e2a:	430a      	orrs	r2, r1
 8017e2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017e2e:	69fb      	ldr	r3, [r7, #28]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	685b      	ldr	r3, [r3, #4]
 8017e34:	4abe      	ldr	r2, [pc, #760]	@ (8018130 <UART_SetConfig+0x344>)
 8017e36:	4013      	ands	r3, r2
 8017e38:	0019      	movs	r1, r3
 8017e3a:	69fb      	ldr	r3, [r7, #28]
 8017e3c:	68da      	ldr	r2, [r3, #12]
 8017e3e:	69fb      	ldr	r3, [r7, #28]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	430a      	orrs	r2, r1
 8017e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	699b      	ldr	r3, [r3, #24]
 8017e4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017e4c:	69fb      	ldr	r3, [r7, #28]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	4ab8      	ldr	r2, [pc, #736]	@ (8018134 <UART_SetConfig+0x348>)
 8017e52:	4293      	cmp	r3, r2
 8017e54:	d004      	beq.n	8017e60 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	6a1b      	ldr	r3, [r3, #32]
 8017e5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e5c:	4313      	orrs	r3, r2
 8017e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	689b      	ldr	r3, [r3, #8]
 8017e66:	4ab4      	ldr	r2, [pc, #720]	@ (8018138 <UART_SetConfig+0x34c>)
 8017e68:	4013      	ands	r3, r2
 8017e6a:	0019      	movs	r1, r3
 8017e6c:	69fb      	ldr	r3, [r7, #28]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e72:	430a      	orrs	r2, r1
 8017e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	4ab0      	ldr	r2, [pc, #704]	@ (801813c <UART_SetConfig+0x350>)
 8017e7c:	4293      	cmp	r3, r2
 8017e7e:	d131      	bne.n	8017ee4 <UART_SetConfig+0xf8>
 8017e80:	4baf      	ldr	r3, [pc, #700]	@ (8018140 <UART_SetConfig+0x354>)
 8017e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e84:	2203      	movs	r2, #3
 8017e86:	4013      	ands	r3, r2
 8017e88:	2b03      	cmp	r3, #3
 8017e8a:	d01d      	beq.n	8017ec8 <UART_SetConfig+0xdc>
 8017e8c:	d823      	bhi.n	8017ed6 <UART_SetConfig+0xea>
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d00c      	beq.n	8017eac <UART_SetConfig+0xc0>
 8017e92:	d820      	bhi.n	8017ed6 <UART_SetConfig+0xea>
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d002      	beq.n	8017e9e <UART_SetConfig+0xb2>
 8017e98:	2b01      	cmp	r3, #1
 8017e9a:	d00e      	beq.n	8017eba <UART_SetConfig+0xce>
 8017e9c:	e01b      	b.n	8017ed6 <UART_SetConfig+0xea>
 8017e9e:	231b      	movs	r3, #27
 8017ea0:	2218      	movs	r2, #24
 8017ea2:	189b      	adds	r3, r3, r2
 8017ea4:	19db      	adds	r3, r3, r7
 8017ea6:	2201      	movs	r2, #1
 8017ea8:	701a      	strb	r2, [r3, #0]
 8017eaa:	e0b4      	b.n	8018016 <UART_SetConfig+0x22a>
 8017eac:	231b      	movs	r3, #27
 8017eae:	2218      	movs	r2, #24
 8017eb0:	189b      	adds	r3, r3, r2
 8017eb2:	19db      	adds	r3, r3, r7
 8017eb4:	2202      	movs	r2, #2
 8017eb6:	701a      	strb	r2, [r3, #0]
 8017eb8:	e0ad      	b.n	8018016 <UART_SetConfig+0x22a>
 8017eba:	231b      	movs	r3, #27
 8017ebc:	2218      	movs	r2, #24
 8017ebe:	189b      	adds	r3, r3, r2
 8017ec0:	19db      	adds	r3, r3, r7
 8017ec2:	2204      	movs	r2, #4
 8017ec4:	701a      	strb	r2, [r3, #0]
 8017ec6:	e0a6      	b.n	8018016 <UART_SetConfig+0x22a>
 8017ec8:	231b      	movs	r3, #27
 8017eca:	2218      	movs	r2, #24
 8017ecc:	189b      	adds	r3, r3, r2
 8017ece:	19db      	adds	r3, r3, r7
 8017ed0:	2208      	movs	r2, #8
 8017ed2:	701a      	strb	r2, [r3, #0]
 8017ed4:	e09f      	b.n	8018016 <UART_SetConfig+0x22a>
 8017ed6:	231b      	movs	r3, #27
 8017ed8:	2218      	movs	r2, #24
 8017eda:	189b      	adds	r3, r3, r2
 8017edc:	19db      	adds	r3, r3, r7
 8017ede:	2210      	movs	r2, #16
 8017ee0:	701a      	strb	r2, [r3, #0]
 8017ee2:	e098      	b.n	8018016 <UART_SetConfig+0x22a>
 8017ee4:	69fb      	ldr	r3, [r7, #28]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	4a96      	ldr	r2, [pc, #600]	@ (8018144 <UART_SetConfig+0x358>)
 8017eea:	4293      	cmp	r3, r2
 8017eec:	d131      	bne.n	8017f52 <UART_SetConfig+0x166>
 8017eee:	4b94      	ldr	r3, [pc, #592]	@ (8018140 <UART_SetConfig+0x354>)
 8017ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017ef2:	220c      	movs	r2, #12
 8017ef4:	4013      	ands	r3, r2
 8017ef6:	2b0c      	cmp	r3, #12
 8017ef8:	d01d      	beq.n	8017f36 <UART_SetConfig+0x14a>
 8017efa:	d823      	bhi.n	8017f44 <UART_SetConfig+0x158>
 8017efc:	2b08      	cmp	r3, #8
 8017efe:	d00c      	beq.n	8017f1a <UART_SetConfig+0x12e>
 8017f00:	d820      	bhi.n	8017f44 <UART_SetConfig+0x158>
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d002      	beq.n	8017f0c <UART_SetConfig+0x120>
 8017f06:	2b04      	cmp	r3, #4
 8017f08:	d00e      	beq.n	8017f28 <UART_SetConfig+0x13c>
 8017f0a:	e01b      	b.n	8017f44 <UART_SetConfig+0x158>
 8017f0c:	231b      	movs	r3, #27
 8017f0e:	2218      	movs	r2, #24
 8017f10:	189b      	adds	r3, r3, r2
 8017f12:	19db      	adds	r3, r3, r7
 8017f14:	2200      	movs	r2, #0
 8017f16:	701a      	strb	r2, [r3, #0]
 8017f18:	e07d      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f1a:	231b      	movs	r3, #27
 8017f1c:	2218      	movs	r2, #24
 8017f1e:	189b      	adds	r3, r3, r2
 8017f20:	19db      	adds	r3, r3, r7
 8017f22:	2202      	movs	r2, #2
 8017f24:	701a      	strb	r2, [r3, #0]
 8017f26:	e076      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f28:	231b      	movs	r3, #27
 8017f2a:	2218      	movs	r2, #24
 8017f2c:	189b      	adds	r3, r3, r2
 8017f2e:	19db      	adds	r3, r3, r7
 8017f30:	2204      	movs	r2, #4
 8017f32:	701a      	strb	r2, [r3, #0]
 8017f34:	e06f      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f36:	231b      	movs	r3, #27
 8017f38:	2218      	movs	r2, #24
 8017f3a:	189b      	adds	r3, r3, r2
 8017f3c:	19db      	adds	r3, r3, r7
 8017f3e:	2208      	movs	r2, #8
 8017f40:	701a      	strb	r2, [r3, #0]
 8017f42:	e068      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f44:	231b      	movs	r3, #27
 8017f46:	2218      	movs	r2, #24
 8017f48:	189b      	adds	r3, r3, r2
 8017f4a:	19db      	adds	r3, r3, r7
 8017f4c:	2210      	movs	r2, #16
 8017f4e:	701a      	strb	r2, [r3, #0]
 8017f50:	e061      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f52:	69fb      	ldr	r3, [r7, #28]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	4a7c      	ldr	r2, [pc, #496]	@ (8018148 <UART_SetConfig+0x35c>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d106      	bne.n	8017f6a <UART_SetConfig+0x17e>
 8017f5c:	231b      	movs	r3, #27
 8017f5e:	2218      	movs	r2, #24
 8017f60:	189b      	adds	r3, r3, r2
 8017f62:	19db      	adds	r3, r3, r7
 8017f64:	2200      	movs	r2, #0
 8017f66:	701a      	strb	r2, [r3, #0]
 8017f68:	e055      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f6a:	69fb      	ldr	r3, [r7, #28]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	4a77      	ldr	r2, [pc, #476]	@ (801814c <UART_SetConfig+0x360>)
 8017f70:	4293      	cmp	r3, r2
 8017f72:	d106      	bne.n	8017f82 <UART_SetConfig+0x196>
 8017f74:	231b      	movs	r3, #27
 8017f76:	2218      	movs	r2, #24
 8017f78:	189b      	adds	r3, r3, r2
 8017f7a:	19db      	adds	r3, r3, r7
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	701a      	strb	r2, [r3, #0]
 8017f80:	e049      	b.n	8018016 <UART_SetConfig+0x22a>
 8017f82:	69fb      	ldr	r3, [r7, #28]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	4a6b      	ldr	r2, [pc, #428]	@ (8018134 <UART_SetConfig+0x348>)
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d13e      	bne.n	801800a <UART_SetConfig+0x21e>
 8017f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8018140 <UART_SetConfig+0x354>)
 8017f8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f90:	23c0      	movs	r3, #192	@ 0xc0
 8017f92:	011b      	lsls	r3, r3, #4
 8017f94:	4013      	ands	r3, r2
 8017f96:	22c0      	movs	r2, #192	@ 0xc0
 8017f98:	0112      	lsls	r2, r2, #4
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d027      	beq.n	8017fee <UART_SetConfig+0x202>
 8017f9e:	22c0      	movs	r2, #192	@ 0xc0
 8017fa0:	0112      	lsls	r2, r2, #4
 8017fa2:	4293      	cmp	r3, r2
 8017fa4:	d82a      	bhi.n	8017ffc <UART_SetConfig+0x210>
 8017fa6:	2280      	movs	r2, #128	@ 0x80
 8017fa8:	0112      	lsls	r2, r2, #4
 8017faa:	4293      	cmp	r3, r2
 8017fac:	d011      	beq.n	8017fd2 <UART_SetConfig+0x1e6>
 8017fae:	2280      	movs	r2, #128	@ 0x80
 8017fb0:	0112      	lsls	r2, r2, #4
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d822      	bhi.n	8017ffc <UART_SetConfig+0x210>
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d004      	beq.n	8017fc4 <UART_SetConfig+0x1d8>
 8017fba:	2280      	movs	r2, #128	@ 0x80
 8017fbc:	00d2      	lsls	r2, r2, #3
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	d00e      	beq.n	8017fe0 <UART_SetConfig+0x1f4>
 8017fc2:	e01b      	b.n	8017ffc <UART_SetConfig+0x210>
 8017fc4:	231b      	movs	r3, #27
 8017fc6:	2218      	movs	r2, #24
 8017fc8:	189b      	adds	r3, r3, r2
 8017fca:	19db      	adds	r3, r3, r7
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]
 8017fd0:	e021      	b.n	8018016 <UART_SetConfig+0x22a>
 8017fd2:	231b      	movs	r3, #27
 8017fd4:	2218      	movs	r2, #24
 8017fd6:	189b      	adds	r3, r3, r2
 8017fd8:	19db      	adds	r3, r3, r7
 8017fda:	2202      	movs	r2, #2
 8017fdc:	701a      	strb	r2, [r3, #0]
 8017fde:	e01a      	b.n	8018016 <UART_SetConfig+0x22a>
 8017fe0:	231b      	movs	r3, #27
 8017fe2:	2218      	movs	r2, #24
 8017fe4:	189b      	adds	r3, r3, r2
 8017fe6:	19db      	adds	r3, r3, r7
 8017fe8:	2204      	movs	r2, #4
 8017fea:	701a      	strb	r2, [r3, #0]
 8017fec:	e013      	b.n	8018016 <UART_SetConfig+0x22a>
 8017fee:	231b      	movs	r3, #27
 8017ff0:	2218      	movs	r2, #24
 8017ff2:	189b      	adds	r3, r3, r2
 8017ff4:	19db      	adds	r3, r3, r7
 8017ff6:	2208      	movs	r2, #8
 8017ff8:	701a      	strb	r2, [r3, #0]
 8017ffa:	e00c      	b.n	8018016 <UART_SetConfig+0x22a>
 8017ffc:	231b      	movs	r3, #27
 8017ffe:	2218      	movs	r2, #24
 8018000:	189b      	adds	r3, r3, r2
 8018002:	19db      	adds	r3, r3, r7
 8018004:	2210      	movs	r2, #16
 8018006:	701a      	strb	r2, [r3, #0]
 8018008:	e005      	b.n	8018016 <UART_SetConfig+0x22a>
 801800a:	231b      	movs	r3, #27
 801800c:	2218      	movs	r2, #24
 801800e:	189b      	adds	r3, r3, r2
 8018010:	19db      	adds	r3, r3, r7
 8018012:	2210      	movs	r2, #16
 8018014:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	4a46      	ldr	r2, [pc, #280]	@ (8018134 <UART_SetConfig+0x348>)
 801801c:	4293      	cmp	r3, r2
 801801e:	d000      	beq.n	8018022 <UART_SetConfig+0x236>
 8018020:	e09a      	b.n	8018158 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018022:	231b      	movs	r3, #27
 8018024:	2218      	movs	r2, #24
 8018026:	189b      	adds	r3, r3, r2
 8018028:	19db      	adds	r3, r3, r7
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	2b08      	cmp	r3, #8
 801802e:	d01d      	beq.n	801806c <UART_SetConfig+0x280>
 8018030:	dc20      	bgt.n	8018074 <UART_SetConfig+0x288>
 8018032:	2b04      	cmp	r3, #4
 8018034:	d015      	beq.n	8018062 <UART_SetConfig+0x276>
 8018036:	dc1d      	bgt.n	8018074 <UART_SetConfig+0x288>
 8018038:	2b00      	cmp	r3, #0
 801803a:	d002      	beq.n	8018042 <UART_SetConfig+0x256>
 801803c:	2b02      	cmp	r3, #2
 801803e:	d005      	beq.n	801804c <UART_SetConfig+0x260>
 8018040:	e018      	b.n	8018074 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018042:	f7fd fe4b 	bl	8015cdc <HAL_RCC_GetPCLK1Freq>
 8018046:	0003      	movs	r3, r0
 8018048:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801804a:	e01c      	b.n	8018086 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801804c:	4b3c      	ldr	r3, [pc, #240]	@ (8018140 <UART_SetConfig+0x354>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	2210      	movs	r2, #16
 8018052:	4013      	ands	r3, r2
 8018054:	d002      	beq.n	801805c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018056:	4b3e      	ldr	r3, [pc, #248]	@ (8018150 <UART_SetConfig+0x364>)
 8018058:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801805a:	e014      	b.n	8018086 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801805c:	4b3d      	ldr	r3, [pc, #244]	@ (8018154 <UART_SetConfig+0x368>)
 801805e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018060:	e011      	b.n	8018086 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018062:	f7fd fd8b 	bl	8015b7c <HAL_RCC_GetSysClockFreq>
 8018066:	0003      	movs	r3, r0
 8018068:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801806a:	e00c      	b.n	8018086 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801806c:	2380      	movs	r3, #128	@ 0x80
 801806e:	021b      	lsls	r3, r3, #8
 8018070:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018072:	e008      	b.n	8018086 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8018074:	2300      	movs	r3, #0
 8018076:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018078:	231a      	movs	r3, #26
 801807a:	2218      	movs	r2, #24
 801807c:	189b      	adds	r3, r3, r2
 801807e:	19db      	adds	r3, r3, r7
 8018080:	2201      	movs	r2, #1
 8018082:	701a      	strb	r2, [r3, #0]
        break;
 8018084:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018088:	2b00      	cmp	r3, #0
 801808a:	d100      	bne.n	801808e <UART_SetConfig+0x2a2>
 801808c:	e133      	b.n	80182f6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801808e:	69fb      	ldr	r3, [r7, #28]
 8018090:	685a      	ldr	r2, [r3, #4]
 8018092:	0013      	movs	r3, r2
 8018094:	005b      	lsls	r3, r3, #1
 8018096:	189b      	adds	r3, r3, r2
 8018098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801809a:	429a      	cmp	r2, r3
 801809c:	d305      	bcc.n	80180aa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801809e:	69fb      	ldr	r3, [r7, #28]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80180a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80180a6:	429a      	cmp	r2, r3
 80180a8:	d906      	bls.n	80180b8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80180aa:	231a      	movs	r3, #26
 80180ac:	2218      	movs	r2, #24
 80180ae:	189b      	adds	r3, r3, r2
 80180b0:	19db      	adds	r3, r3, r7
 80180b2:	2201      	movs	r2, #1
 80180b4:	701a      	strb	r2, [r3, #0]
 80180b6:	e11e      	b.n	80182f6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80180b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ba:	613b      	str	r3, [r7, #16]
 80180bc:	2300      	movs	r3, #0
 80180be:	617b      	str	r3, [r7, #20]
 80180c0:	6939      	ldr	r1, [r7, #16]
 80180c2:	697a      	ldr	r2, [r7, #20]
 80180c4:	000b      	movs	r3, r1
 80180c6:	0e1b      	lsrs	r3, r3, #24
 80180c8:	0010      	movs	r0, r2
 80180ca:	0205      	lsls	r5, r0, #8
 80180cc:	431d      	orrs	r5, r3
 80180ce:	000b      	movs	r3, r1
 80180d0:	021c      	lsls	r4, r3, #8
 80180d2:	69fb      	ldr	r3, [r7, #28]
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	085b      	lsrs	r3, r3, #1
 80180d8:	60bb      	str	r3, [r7, #8]
 80180da:	2300      	movs	r3, #0
 80180dc:	60fb      	str	r3, [r7, #12]
 80180de:	68b8      	ldr	r0, [r7, #8]
 80180e0:	68f9      	ldr	r1, [r7, #12]
 80180e2:	1900      	adds	r0, r0, r4
 80180e4:	4169      	adcs	r1, r5
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	603b      	str	r3, [r7, #0]
 80180ec:	2300      	movs	r3, #0
 80180ee:	607b      	str	r3, [r7, #4]
 80180f0:	683a      	ldr	r2, [r7, #0]
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	f7e8 fa44 	bl	8000580 <__aeabi_uldivmod>
 80180f8:	0002      	movs	r2, r0
 80180fa:	000b      	movs	r3, r1
 80180fc:	0013      	movs	r3, r2
 80180fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018102:	23c0      	movs	r3, #192	@ 0xc0
 8018104:	009b      	lsls	r3, r3, #2
 8018106:	429a      	cmp	r2, r3
 8018108:	d309      	bcc.n	801811e <UART_SetConfig+0x332>
 801810a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801810c:	2380      	movs	r3, #128	@ 0x80
 801810e:	035b      	lsls	r3, r3, #13
 8018110:	429a      	cmp	r2, r3
 8018112:	d204      	bcs.n	801811e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8018114:	69fb      	ldr	r3, [r7, #28]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801811a:	60da      	str	r2, [r3, #12]
 801811c:	e0eb      	b.n	80182f6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801811e:	231a      	movs	r3, #26
 8018120:	2218      	movs	r2, #24
 8018122:	189b      	adds	r3, r3, r2
 8018124:	19db      	adds	r3, r3, r7
 8018126:	2201      	movs	r2, #1
 8018128:	701a      	strb	r2, [r3, #0]
 801812a:	e0e4      	b.n	80182f6 <UART_SetConfig+0x50a>
 801812c:	efff69f3 	.word	0xefff69f3
 8018130:	ffffcfff 	.word	0xffffcfff
 8018134:	40004800 	.word	0x40004800
 8018138:	fffff4ff 	.word	0xfffff4ff
 801813c:	40013800 	.word	0x40013800
 8018140:	40021000 	.word	0x40021000
 8018144:	40004400 	.word	0x40004400
 8018148:	40004c00 	.word	0x40004c00
 801814c:	40005000 	.word	0x40005000
 8018150:	003d0900 	.word	0x003d0900
 8018154:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018158:	69fb      	ldr	r3, [r7, #28]
 801815a:	69da      	ldr	r2, [r3, #28]
 801815c:	2380      	movs	r3, #128	@ 0x80
 801815e:	021b      	lsls	r3, r3, #8
 8018160:	429a      	cmp	r2, r3
 8018162:	d000      	beq.n	8018166 <UART_SetConfig+0x37a>
 8018164:	e070      	b.n	8018248 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8018166:	231b      	movs	r3, #27
 8018168:	2218      	movs	r2, #24
 801816a:	189b      	adds	r3, r3, r2
 801816c:	19db      	adds	r3, r3, r7
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b08      	cmp	r3, #8
 8018172:	d822      	bhi.n	80181ba <UART_SetConfig+0x3ce>
 8018174:	009a      	lsls	r2, r3, #2
 8018176:	4b67      	ldr	r3, [pc, #412]	@ (8018314 <UART_SetConfig+0x528>)
 8018178:	18d3      	adds	r3, r2, r3
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801817e:	f7fd fdad 	bl	8015cdc <HAL_RCC_GetPCLK1Freq>
 8018182:	0003      	movs	r3, r0
 8018184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018186:	e021      	b.n	80181cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018188:	f7fd fdbe 	bl	8015d08 <HAL_RCC_GetPCLK2Freq>
 801818c:	0003      	movs	r3, r0
 801818e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018190:	e01c      	b.n	80181cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018192:	4b61      	ldr	r3, [pc, #388]	@ (8018318 <UART_SetConfig+0x52c>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	2210      	movs	r2, #16
 8018198:	4013      	ands	r3, r2
 801819a:	d002      	beq.n	80181a2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801819c:	4b5f      	ldr	r3, [pc, #380]	@ (801831c <UART_SetConfig+0x530>)
 801819e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80181a0:	e014      	b.n	80181cc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80181a2:	4b5f      	ldr	r3, [pc, #380]	@ (8018320 <UART_SetConfig+0x534>)
 80181a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80181a6:	e011      	b.n	80181cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80181a8:	f7fd fce8 	bl	8015b7c <HAL_RCC_GetSysClockFreq>
 80181ac:	0003      	movs	r3, r0
 80181ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80181b0:	e00c      	b.n	80181cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80181b2:	2380      	movs	r3, #128	@ 0x80
 80181b4:	021b      	lsls	r3, r3, #8
 80181b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80181b8:	e008      	b.n	80181cc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80181ba:	2300      	movs	r3, #0
 80181bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80181be:	231a      	movs	r3, #26
 80181c0:	2218      	movs	r2, #24
 80181c2:	189b      	adds	r3, r3, r2
 80181c4:	19db      	adds	r3, r3, r7
 80181c6:	2201      	movs	r2, #1
 80181c8:	701a      	strb	r2, [r3, #0]
        break;
 80181ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80181cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d100      	bne.n	80181d4 <UART_SetConfig+0x3e8>
 80181d2:	e090      	b.n	80182f6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80181d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181d6:	005a      	lsls	r2, r3, #1
 80181d8:	69fb      	ldr	r3, [r7, #28]
 80181da:	685b      	ldr	r3, [r3, #4]
 80181dc:	085b      	lsrs	r3, r3, #1
 80181de:	18d2      	adds	r2, r2, r3
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	0019      	movs	r1, r3
 80181e6:	0010      	movs	r0, r2
 80181e8:	f7e7 ffdc 	bl	80001a4 <__udivsi3>
 80181ec:	0003      	movs	r3, r0
 80181ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80181f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181f2:	2b0f      	cmp	r3, #15
 80181f4:	d921      	bls.n	801823a <UART_SetConfig+0x44e>
 80181f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80181f8:	2380      	movs	r3, #128	@ 0x80
 80181fa:	025b      	lsls	r3, r3, #9
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d21c      	bcs.n	801823a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018202:	b29a      	uxth	r2, r3
 8018204:	200e      	movs	r0, #14
 8018206:	2418      	movs	r4, #24
 8018208:	1903      	adds	r3, r0, r4
 801820a:	19db      	adds	r3, r3, r7
 801820c:	210f      	movs	r1, #15
 801820e:	438a      	bics	r2, r1
 8018210:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018214:	085b      	lsrs	r3, r3, #1
 8018216:	b29b      	uxth	r3, r3
 8018218:	2207      	movs	r2, #7
 801821a:	4013      	ands	r3, r2
 801821c:	b299      	uxth	r1, r3
 801821e:	1903      	adds	r3, r0, r4
 8018220:	19db      	adds	r3, r3, r7
 8018222:	1902      	adds	r2, r0, r4
 8018224:	19d2      	adds	r2, r2, r7
 8018226:	8812      	ldrh	r2, [r2, #0]
 8018228:	430a      	orrs	r2, r1
 801822a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801822c:	69fb      	ldr	r3, [r7, #28]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	1902      	adds	r2, r0, r4
 8018232:	19d2      	adds	r2, r2, r7
 8018234:	8812      	ldrh	r2, [r2, #0]
 8018236:	60da      	str	r2, [r3, #12]
 8018238:	e05d      	b.n	80182f6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801823a:	231a      	movs	r3, #26
 801823c:	2218      	movs	r2, #24
 801823e:	189b      	adds	r3, r3, r2
 8018240:	19db      	adds	r3, r3, r7
 8018242:	2201      	movs	r2, #1
 8018244:	701a      	strb	r2, [r3, #0]
 8018246:	e056      	b.n	80182f6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018248:	231b      	movs	r3, #27
 801824a:	2218      	movs	r2, #24
 801824c:	189b      	adds	r3, r3, r2
 801824e:	19db      	adds	r3, r3, r7
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	2b08      	cmp	r3, #8
 8018254:	d822      	bhi.n	801829c <UART_SetConfig+0x4b0>
 8018256:	009a      	lsls	r2, r3, #2
 8018258:	4b32      	ldr	r3, [pc, #200]	@ (8018324 <UART_SetConfig+0x538>)
 801825a:	18d3      	adds	r3, r2, r3
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018260:	f7fd fd3c 	bl	8015cdc <HAL_RCC_GetPCLK1Freq>
 8018264:	0003      	movs	r3, r0
 8018266:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018268:	e021      	b.n	80182ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801826a:	f7fd fd4d 	bl	8015d08 <HAL_RCC_GetPCLK2Freq>
 801826e:	0003      	movs	r3, r0
 8018270:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018272:	e01c      	b.n	80182ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018274:	4b28      	ldr	r3, [pc, #160]	@ (8018318 <UART_SetConfig+0x52c>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	2210      	movs	r2, #16
 801827a:	4013      	ands	r3, r2
 801827c:	d002      	beq.n	8018284 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801827e:	4b27      	ldr	r3, [pc, #156]	@ (801831c <UART_SetConfig+0x530>)
 8018280:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018282:	e014      	b.n	80182ae <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018284:	4b26      	ldr	r3, [pc, #152]	@ (8018320 <UART_SetConfig+0x534>)
 8018286:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018288:	e011      	b.n	80182ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801828a:	f7fd fc77 	bl	8015b7c <HAL_RCC_GetSysClockFreq>
 801828e:	0003      	movs	r3, r0
 8018290:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018292:	e00c      	b.n	80182ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018294:	2380      	movs	r3, #128	@ 0x80
 8018296:	021b      	lsls	r3, r3, #8
 8018298:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801829a:	e008      	b.n	80182ae <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801829c:	2300      	movs	r3, #0
 801829e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80182a0:	231a      	movs	r3, #26
 80182a2:	2218      	movs	r2, #24
 80182a4:	189b      	adds	r3, r3, r2
 80182a6:	19db      	adds	r3, r3, r7
 80182a8:	2201      	movs	r2, #1
 80182aa:	701a      	strb	r2, [r3, #0]
        break;
 80182ac:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80182ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d020      	beq.n	80182f6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	685b      	ldr	r3, [r3, #4]
 80182b8:	085a      	lsrs	r2, r3, #1
 80182ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182bc:	18d2      	adds	r2, r2, r3
 80182be:	69fb      	ldr	r3, [r7, #28]
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	0019      	movs	r1, r3
 80182c4:	0010      	movs	r0, r2
 80182c6:	f7e7 ff6d 	bl	80001a4 <__udivsi3>
 80182ca:	0003      	movs	r3, r0
 80182cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80182ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182d0:	2b0f      	cmp	r3, #15
 80182d2:	d90a      	bls.n	80182ea <UART_SetConfig+0x4fe>
 80182d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80182d6:	2380      	movs	r3, #128	@ 0x80
 80182d8:	025b      	lsls	r3, r3, #9
 80182da:	429a      	cmp	r2, r3
 80182dc:	d205      	bcs.n	80182ea <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80182de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182e0:	b29a      	uxth	r2, r3
 80182e2:	69fb      	ldr	r3, [r7, #28]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	60da      	str	r2, [r3, #12]
 80182e8:	e005      	b.n	80182f6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80182ea:	231a      	movs	r3, #26
 80182ec:	2218      	movs	r2, #24
 80182ee:	189b      	adds	r3, r3, r2
 80182f0:	19db      	adds	r3, r3, r7
 80182f2:	2201      	movs	r2, #1
 80182f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80182f6:	69fb      	ldr	r3, [r7, #28]
 80182f8:	2200      	movs	r2, #0
 80182fa:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80182fc:	69fb      	ldr	r3, [r7, #28]
 80182fe:	2200      	movs	r2, #0
 8018300:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018302:	231a      	movs	r3, #26
 8018304:	2218      	movs	r2, #24
 8018306:	189b      	adds	r3, r3, r2
 8018308:	19db      	adds	r3, r3, r7
 801830a:	781b      	ldrb	r3, [r3, #0]
}
 801830c:	0018      	movs	r0, r3
 801830e:	46bd      	mov	sp, r7
 8018310:	b00e      	add	sp, #56	@ 0x38
 8018312:	bdb0      	pop	{r4, r5, r7, pc}
 8018314:	0802585c 	.word	0x0802585c
 8018318:	40021000 	.word	0x40021000
 801831c:	003d0900 	.word	0x003d0900
 8018320:	00f42400 	.word	0x00f42400
 8018324:	08025880 	.word	0x08025880

08018328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b082      	sub	sp, #8
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018334:	2201      	movs	r2, #1
 8018336:	4013      	ands	r3, r2
 8018338:	d00b      	beq.n	8018352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	4a4a      	ldr	r2, [pc, #296]	@ (801846c <UART_AdvFeatureConfig+0x144>)
 8018342:	4013      	ands	r3, r2
 8018344:	0019      	movs	r1, r3
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	430a      	orrs	r2, r1
 8018350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018356:	2202      	movs	r2, #2
 8018358:	4013      	ands	r3, r2
 801835a:	d00b      	beq.n	8018374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	685b      	ldr	r3, [r3, #4]
 8018362:	4a43      	ldr	r2, [pc, #268]	@ (8018470 <UART_AdvFeatureConfig+0x148>)
 8018364:	4013      	ands	r3, r2
 8018366:	0019      	movs	r1, r3
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	430a      	orrs	r2, r1
 8018372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018378:	2204      	movs	r2, #4
 801837a:	4013      	ands	r3, r2
 801837c:	d00b      	beq.n	8018396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	685b      	ldr	r3, [r3, #4]
 8018384:	4a3b      	ldr	r2, [pc, #236]	@ (8018474 <UART_AdvFeatureConfig+0x14c>)
 8018386:	4013      	ands	r3, r2
 8018388:	0019      	movs	r1, r3
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	430a      	orrs	r2, r1
 8018394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801839a:	2208      	movs	r2, #8
 801839c:	4013      	ands	r3, r2
 801839e:	d00b      	beq.n	80183b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	4a34      	ldr	r2, [pc, #208]	@ (8018478 <UART_AdvFeatureConfig+0x150>)
 80183a8:	4013      	ands	r3, r2
 80183aa:	0019      	movs	r1, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	430a      	orrs	r2, r1
 80183b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183bc:	2210      	movs	r2, #16
 80183be:	4013      	ands	r3, r2
 80183c0:	d00b      	beq.n	80183da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	689b      	ldr	r3, [r3, #8]
 80183c8:	4a2c      	ldr	r2, [pc, #176]	@ (801847c <UART_AdvFeatureConfig+0x154>)
 80183ca:	4013      	ands	r3, r2
 80183cc:	0019      	movs	r1, r3
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	430a      	orrs	r2, r1
 80183d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183de:	2220      	movs	r2, #32
 80183e0:	4013      	ands	r3, r2
 80183e2:	d00b      	beq.n	80183fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	689b      	ldr	r3, [r3, #8]
 80183ea:	4a25      	ldr	r2, [pc, #148]	@ (8018480 <UART_AdvFeatureConfig+0x158>)
 80183ec:	4013      	ands	r3, r2
 80183ee:	0019      	movs	r1, r3
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	430a      	orrs	r2, r1
 80183fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018400:	2240      	movs	r2, #64	@ 0x40
 8018402:	4013      	ands	r3, r2
 8018404:	d01d      	beq.n	8018442 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	685b      	ldr	r3, [r3, #4]
 801840c:	4a1d      	ldr	r2, [pc, #116]	@ (8018484 <UART_AdvFeatureConfig+0x15c>)
 801840e:	4013      	ands	r3, r2
 8018410:	0019      	movs	r1, r3
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	430a      	orrs	r2, r1
 801841c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018422:	2380      	movs	r3, #128	@ 0x80
 8018424:	035b      	lsls	r3, r3, #13
 8018426:	429a      	cmp	r2, r3
 8018428:	d10b      	bne.n	8018442 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	4a15      	ldr	r2, [pc, #84]	@ (8018488 <UART_AdvFeatureConfig+0x160>)
 8018432:	4013      	ands	r3, r2
 8018434:	0019      	movs	r1, r3
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	430a      	orrs	r2, r1
 8018440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018446:	2280      	movs	r2, #128	@ 0x80
 8018448:	4013      	ands	r3, r2
 801844a:	d00b      	beq.n	8018464 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	685b      	ldr	r3, [r3, #4]
 8018452:	4a0e      	ldr	r2, [pc, #56]	@ (801848c <UART_AdvFeatureConfig+0x164>)
 8018454:	4013      	ands	r3, r2
 8018456:	0019      	movs	r1, r3
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	430a      	orrs	r2, r1
 8018462:	605a      	str	r2, [r3, #4]
  }
}
 8018464:	46c0      	nop			@ (mov r8, r8)
 8018466:	46bd      	mov	sp, r7
 8018468:	b002      	add	sp, #8
 801846a:	bd80      	pop	{r7, pc}
 801846c:	fffdffff 	.word	0xfffdffff
 8018470:	fffeffff 	.word	0xfffeffff
 8018474:	fffbffff 	.word	0xfffbffff
 8018478:	ffff7fff 	.word	0xffff7fff
 801847c:	ffffefff 	.word	0xffffefff
 8018480:	ffffdfff 	.word	0xffffdfff
 8018484:	ffefffff 	.word	0xffefffff
 8018488:	ff9fffff 	.word	0xff9fffff
 801848c:	fff7ffff 	.word	0xfff7ffff

08018490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b092      	sub	sp, #72	@ 0x48
 8018494:	af02      	add	r7, sp, #8
 8018496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2284      	movs	r2, #132	@ 0x84
 801849c:	2100      	movs	r1, #0
 801849e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80184a0:	f7f6 fd20 	bl	800eee4 <HAL_GetTick>
 80184a4:	0003      	movs	r3, r0
 80184a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	2208      	movs	r2, #8
 80184b0:	4013      	ands	r3, r2
 80184b2:	2b08      	cmp	r3, #8
 80184b4:	d12c      	bne.n	8018510 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80184b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184b8:	2280      	movs	r2, #128	@ 0x80
 80184ba:	0391      	lsls	r1, r2, #14
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	4a46      	ldr	r2, [pc, #280]	@ (80185d8 <UART_CheckIdleState+0x148>)
 80184c0:	9200      	str	r2, [sp, #0]
 80184c2:	2200      	movs	r2, #0
 80184c4:	f000 f88c 	bl	80185e0 <UART_WaitOnFlagUntilTimeout>
 80184c8:	1e03      	subs	r3, r0, #0
 80184ca:	d021      	beq.n	8018510 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184cc:	f3ef 8310 	mrs	r3, PRIMASK
 80184d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80184d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80184d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80184d6:	2301      	movs	r3, #1
 80184d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184dc:	f383 8810 	msr	PRIMASK, r3
}
 80184e0:	46c0      	nop			@ (mov r8, r8)
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2180      	movs	r1, #128	@ 0x80
 80184ee:	438a      	bics	r2, r1
 80184f0:	601a      	str	r2, [r3, #0]
 80184f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184f8:	f383 8810 	msr	PRIMASK, r3
}
 80184fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2220      	movs	r2, #32
 8018502:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2278      	movs	r2, #120	@ 0x78
 8018508:	2100      	movs	r1, #0
 801850a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801850c:	2303      	movs	r3, #3
 801850e:	e05f      	b.n	80185d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	2204      	movs	r2, #4
 8018518:	4013      	ands	r3, r2
 801851a:	2b04      	cmp	r3, #4
 801851c:	d146      	bne.n	80185ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801851e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018520:	2280      	movs	r2, #128	@ 0x80
 8018522:	03d1      	lsls	r1, r2, #15
 8018524:	6878      	ldr	r0, [r7, #4]
 8018526:	4a2c      	ldr	r2, [pc, #176]	@ (80185d8 <UART_CheckIdleState+0x148>)
 8018528:	9200      	str	r2, [sp, #0]
 801852a:	2200      	movs	r2, #0
 801852c:	f000 f858 	bl	80185e0 <UART_WaitOnFlagUntilTimeout>
 8018530:	1e03      	subs	r3, r0, #0
 8018532:	d03b      	beq.n	80185ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018534:	f3ef 8310 	mrs	r3, PRIMASK
 8018538:	60fb      	str	r3, [r7, #12]
  return(result);
 801853a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801853c:	637b      	str	r3, [r7, #52]	@ 0x34
 801853e:	2301      	movs	r3, #1
 8018540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	f383 8810 	msr	PRIMASK, r3
}
 8018548:	46c0      	nop			@ (mov r8, r8)
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	681a      	ldr	r2, [r3, #0]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4921      	ldr	r1, [pc, #132]	@ (80185dc <UART_CheckIdleState+0x14c>)
 8018556:	400a      	ands	r2, r1
 8018558:	601a      	str	r2, [r3, #0]
 801855a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801855c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	f383 8810 	msr	PRIMASK, r3
}
 8018564:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018566:	f3ef 8310 	mrs	r3, PRIMASK
 801856a:	61bb      	str	r3, [r7, #24]
  return(result);
 801856c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801856e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018570:	2301      	movs	r3, #1
 8018572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	f383 8810 	msr	PRIMASK, r3
}
 801857a:	46c0      	nop			@ (mov r8, r8)
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	689a      	ldr	r2, [r3, #8]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2101      	movs	r1, #1
 8018588:	438a      	bics	r2, r1
 801858a:	609a      	str	r2, [r3, #8]
 801858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801858e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018590:	6a3b      	ldr	r3, [r7, #32]
 8018592:	f383 8810 	msr	PRIMASK, r3
}
 8018596:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	2280      	movs	r2, #128	@ 0x80
 801859c:	2120      	movs	r1, #32
 801859e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2278      	movs	r2, #120	@ 0x78
 80185a4:	2100      	movs	r1, #0
 80185a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80185a8:	2303      	movs	r3, #3
 80185aa:	e011      	b.n	80185d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2220      	movs	r2, #32
 80185b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2280      	movs	r2, #128	@ 0x80
 80185b6:	2120      	movs	r1, #32
 80185b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2200      	movs	r2, #0
 80185be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	2200      	movs	r2, #0
 80185c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	2278      	movs	r2, #120	@ 0x78
 80185ca:	2100      	movs	r1, #0
 80185cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80185ce:	2300      	movs	r3, #0
}
 80185d0:	0018      	movs	r0, r3
 80185d2:	46bd      	mov	sp, r7
 80185d4:	b010      	add	sp, #64	@ 0x40
 80185d6:	bd80      	pop	{r7, pc}
 80185d8:	01ffffff 	.word	0x01ffffff
 80185dc:	fffffedf 	.word	0xfffffedf

080185e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b084      	sub	sp, #16
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	60b9      	str	r1, [r7, #8]
 80185ea:	603b      	str	r3, [r7, #0]
 80185ec:	1dfb      	adds	r3, r7, #7
 80185ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80185f0:	e04b      	b.n	801868a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80185f2:	69bb      	ldr	r3, [r7, #24]
 80185f4:	3301      	adds	r3, #1
 80185f6:	d048      	beq.n	801868a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80185f8:	f7f6 fc74 	bl	800eee4 <HAL_GetTick>
 80185fc:	0002      	movs	r2, r0
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	1ad3      	subs	r3, r2, r3
 8018602:	69ba      	ldr	r2, [r7, #24]
 8018604:	429a      	cmp	r2, r3
 8018606:	d302      	bcc.n	801860e <UART_WaitOnFlagUntilTimeout+0x2e>
 8018608:	69bb      	ldr	r3, [r7, #24]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d101      	bne.n	8018612 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801860e:	2303      	movs	r3, #3
 8018610:	e04b      	b.n	80186aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2204      	movs	r2, #4
 801861a:	4013      	ands	r3, r2
 801861c:	d035      	beq.n	801868a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	69db      	ldr	r3, [r3, #28]
 8018624:	2208      	movs	r2, #8
 8018626:	4013      	ands	r3, r2
 8018628:	2b08      	cmp	r3, #8
 801862a:	d111      	bne.n	8018650 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	2208      	movs	r2, #8
 8018632:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	0018      	movs	r0, r3
 8018638:	f000 f9ca 	bl	80189d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	2284      	movs	r2, #132	@ 0x84
 8018640:	2108      	movs	r1, #8
 8018642:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	2278      	movs	r2, #120	@ 0x78
 8018648:	2100      	movs	r1, #0
 801864a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801864c:	2301      	movs	r3, #1
 801864e:	e02c      	b.n	80186aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	69da      	ldr	r2, [r3, #28]
 8018656:	2380      	movs	r3, #128	@ 0x80
 8018658:	011b      	lsls	r3, r3, #4
 801865a:	401a      	ands	r2, r3
 801865c:	2380      	movs	r3, #128	@ 0x80
 801865e:	011b      	lsls	r3, r3, #4
 8018660:	429a      	cmp	r2, r3
 8018662:	d112      	bne.n	801868a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	2280      	movs	r2, #128	@ 0x80
 801866a:	0112      	lsls	r2, r2, #4
 801866c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	0018      	movs	r0, r3
 8018672:	f000 f9ad 	bl	80189d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	2284      	movs	r2, #132	@ 0x84
 801867a:	2120      	movs	r1, #32
 801867c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	2278      	movs	r2, #120	@ 0x78
 8018682:	2100      	movs	r1, #0
 8018684:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018686:	2303      	movs	r3, #3
 8018688:	e00f      	b.n	80186aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	69db      	ldr	r3, [r3, #28]
 8018690:	68ba      	ldr	r2, [r7, #8]
 8018692:	4013      	ands	r3, r2
 8018694:	68ba      	ldr	r2, [r7, #8]
 8018696:	1ad3      	subs	r3, r2, r3
 8018698:	425a      	negs	r2, r3
 801869a:	4153      	adcs	r3, r2
 801869c:	b2db      	uxtb	r3, r3
 801869e:	001a      	movs	r2, r3
 80186a0:	1dfb      	adds	r3, r7, #7
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d0a4      	beq.n	80185f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80186a8:	2300      	movs	r3, #0
}
 80186aa:	0018      	movs	r0, r3
 80186ac:	46bd      	mov	sp, r7
 80186ae:	b004      	add	sp, #16
 80186b0:	bd80      	pop	{r7, pc}
	...

080186b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b090      	sub	sp, #64	@ 0x40
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	60f8      	str	r0, [r7, #12]
 80186bc:	60b9      	str	r1, [r7, #8]
 80186be:	1dbb      	adds	r3, r7, #6
 80186c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	68ba      	ldr	r2, [r7, #8]
 80186c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	1dba      	adds	r2, r7, #6
 80186cc:	2158      	movs	r1, #88	@ 0x58
 80186ce:	8812      	ldrh	r2, [r2, #0]
 80186d0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	1dba      	adds	r2, r7, #6
 80186d6:	215a      	movs	r1, #90	@ 0x5a
 80186d8:	8812      	ldrh	r2, [r2, #0]
 80186da:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	2200      	movs	r2, #0
 80186e0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	689a      	ldr	r2, [r3, #8]
 80186e6:	2380      	movs	r3, #128	@ 0x80
 80186e8:	015b      	lsls	r3, r3, #5
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d10d      	bne.n	801870a <UART_Start_Receive_IT+0x56>
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	691b      	ldr	r3, [r3, #16]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d104      	bne.n	8018700 <UART_Start_Receive_IT+0x4c>
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	225c      	movs	r2, #92	@ 0x5c
 80186fa:	4950      	ldr	r1, [pc, #320]	@ (801883c <UART_Start_Receive_IT+0x188>)
 80186fc:	5299      	strh	r1, [r3, r2]
 80186fe:	e02e      	b.n	801875e <UART_Start_Receive_IT+0xaa>
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	225c      	movs	r2, #92	@ 0x5c
 8018704:	21ff      	movs	r1, #255	@ 0xff
 8018706:	5299      	strh	r1, [r3, r2]
 8018708:	e029      	b.n	801875e <UART_Start_Receive_IT+0xaa>
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	689b      	ldr	r3, [r3, #8]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d10d      	bne.n	801872e <UART_Start_Receive_IT+0x7a>
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	691b      	ldr	r3, [r3, #16]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d104      	bne.n	8018724 <UART_Start_Receive_IT+0x70>
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	225c      	movs	r2, #92	@ 0x5c
 801871e:	21ff      	movs	r1, #255	@ 0xff
 8018720:	5299      	strh	r1, [r3, r2]
 8018722:	e01c      	b.n	801875e <UART_Start_Receive_IT+0xaa>
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	225c      	movs	r2, #92	@ 0x5c
 8018728:	217f      	movs	r1, #127	@ 0x7f
 801872a:	5299      	strh	r1, [r3, r2]
 801872c:	e017      	b.n	801875e <UART_Start_Receive_IT+0xaa>
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	689a      	ldr	r2, [r3, #8]
 8018732:	2380      	movs	r3, #128	@ 0x80
 8018734:	055b      	lsls	r3, r3, #21
 8018736:	429a      	cmp	r2, r3
 8018738:	d10d      	bne.n	8018756 <UART_Start_Receive_IT+0xa2>
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	691b      	ldr	r3, [r3, #16]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d104      	bne.n	801874c <UART_Start_Receive_IT+0x98>
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	225c      	movs	r2, #92	@ 0x5c
 8018746:	217f      	movs	r1, #127	@ 0x7f
 8018748:	5299      	strh	r1, [r3, r2]
 801874a:	e008      	b.n	801875e <UART_Start_Receive_IT+0xaa>
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	225c      	movs	r2, #92	@ 0x5c
 8018750:	213f      	movs	r1, #63	@ 0x3f
 8018752:	5299      	strh	r1, [r3, r2]
 8018754:	e003      	b.n	801875e <UART_Start_Receive_IT+0xaa>
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	225c      	movs	r2, #92	@ 0x5c
 801875a:	2100      	movs	r1, #0
 801875c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	2284      	movs	r2, #132	@ 0x84
 8018762:	2100      	movs	r1, #0
 8018764:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	2280      	movs	r2, #128	@ 0x80
 801876a:	2122      	movs	r1, #34	@ 0x22
 801876c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801876e:	f3ef 8310 	mrs	r3, PRIMASK
 8018772:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018774:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018778:	2301      	movs	r3, #1
 801877a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801877e:	f383 8810 	msr	PRIMASK, r3
}
 8018782:	46c0      	nop			@ (mov r8, r8)
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	689a      	ldr	r2, [r3, #8]
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	2101      	movs	r1, #1
 8018790:	430a      	orrs	r2, r1
 8018792:	609a      	str	r2, [r3, #8]
 8018794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018796:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801879a:	f383 8810 	msr	PRIMASK, r3
}
 801879e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	689a      	ldr	r2, [r3, #8]
 80187a4:	2380      	movs	r3, #128	@ 0x80
 80187a6:	015b      	lsls	r3, r3, #5
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d107      	bne.n	80187bc <UART_Start_Receive_IT+0x108>
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	691b      	ldr	r3, [r3, #16]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d103      	bne.n	80187bc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	4a22      	ldr	r2, [pc, #136]	@ (8018840 <UART_Start_Receive_IT+0x18c>)
 80187b8:	669a      	str	r2, [r3, #104]	@ 0x68
 80187ba:	e002      	b.n	80187c2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	4a21      	ldr	r2, [pc, #132]	@ (8018844 <UART_Start_Receive_IT+0x190>)
 80187c0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	691b      	ldr	r3, [r3, #16]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d019      	beq.n	80187fe <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187ca:	f3ef 8310 	mrs	r3, PRIMASK
 80187ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80187d0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80187d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80187d4:	2301      	movs	r3, #1
 80187d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187d8:	6a3b      	ldr	r3, [r7, #32]
 80187da:	f383 8810 	msr	PRIMASK, r3
}
 80187de:	46c0      	nop			@ (mov r8, r8)
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	681a      	ldr	r2, [r3, #0]
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	2190      	movs	r1, #144	@ 0x90
 80187ec:	0049      	lsls	r1, r1, #1
 80187ee:	430a      	orrs	r2, r1
 80187f0:	601a      	str	r2, [r3, #0]
 80187f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187f8:	f383 8810 	msr	PRIMASK, r3
}
 80187fc:	e018      	b.n	8018830 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187fe:	f3ef 8310 	mrs	r3, PRIMASK
 8018802:	613b      	str	r3, [r7, #16]
  return(result);
 8018804:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018808:	2301      	movs	r3, #1
 801880a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	f383 8810 	msr	PRIMASK, r3
}
 8018812:	46c0      	nop			@ (mov r8, r8)
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	681a      	ldr	r2, [r3, #0]
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	2120      	movs	r1, #32
 8018820:	430a      	orrs	r2, r1
 8018822:	601a      	str	r2, [r3, #0]
 8018824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018826:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018828:	69bb      	ldr	r3, [r7, #24]
 801882a:	f383 8810 	msr	PRIMASK, r3
}
 801882e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8018830:	2300      	movs	r3, #0
}
 8018832:	0018      	movs	r0, r3
 8018834:	46bd      	mov	sp, r7
 8018836:	b010      	add	sp, #64	@ 0x40
 8018838:	bd80      	pop	{r7, pc}
 801883a:	46c0      	nop			@ (mov r8, r8)
 801883c:	000001ff 	.word	0x000001ff
 8018840:	08018fb5 	.word	0x08018fb5
 8018844:	08018de9 	.word	0x08018de9

08018848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b090      	sub	sp, #64	@ 0x40
 801884c:	af00      	add	r7, sp, #0
 801884e:	60f8      	str	r0, [r7, #12]
 8018850:	60b9      	str	r1, [r7, #8]
 8018852:	1dbb      	adds	r3, r7, #6
 8018854:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	68ba      	ldr	r2, [r7, #8]
 801885a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	1dba      	adds	r2, r7, #6
 8018860:	2158      	movs	r1, #88	@ 0x58
 8018862:	8812      	ldrh	r2, [r2, #0]
 8018864:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2284      	movs	r2, #132	@ 0x84
 801886a:	2100      	movs	r1, #0
 801886c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	2280      	movs	r2, #128	@ 0x80
 8018872:	2122      	movs	r1, #34	@ 0x22
 8018874:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801887a:	2b00      	cmp	r3, #0
 801887c:	d028      	beq.n	80188d0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018882:	4a3e      	ldr	r2, [pc, #248]	@ (801897c <UART_Start_Receive_DMA+0x134>)
 8018884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801888a:	4a3d      	ldr	r2, [pc, #244]	@ (8018980 <UART_Start_Receive_DMA+0x138>)
 801888c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018892:	4a3c      	ldr	r2, [pc, #240]	@ (8018984 <UART_Start_Receive_DMA+0x13c>)
 8018894:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801889a:	2200      	movs	r2, #0
 801889c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	3324      	adds	r3, #36	@ 0x24
 80188a8:	0019      	movs	r1, r3
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80188ae:	001a      	movs	r2, r3
 80188b0:	1dbb      	adds	r3, r7, #6
 80188b2:	881b      	ldrh	r3, [r3, #0]
 80188b4:	f7f7 f868 	bl	800f988 <HAL_DMA_Start_IT>
 80188b8:	1e03      	subs	r3, r0, #0
 80188ba:	d009      	beq.n	80188d0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	2284      	movs	r2, #132	@ 0x84
 80188c0:	2110      	movs	r1, #16
 80188c2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	2280      	movs	r2, #128	@ 0x80
 80188c8:	2120      	movs	r1, #32
 80188ca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80188cc:	2301      	movs	r3, #1
 80188ce:	e050      	b.n	8018972 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	691b      	ldr	r3, [r3, #16]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d019      	beq.n	801890c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188d8:	f3ef 8310 	mrs	r3, PRIMASK
 80188dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80188de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80188e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80188e2:	2301      	movs	r3, #1
 80188e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188e8:	f383 8810 	msr	PRIMASK, r3
}
 80188ec:	46c0      	nop			@ (mov r8, r8)
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	681a      	ldr	r2, [r3, #0]
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2180      	movs	r1, #128	@ 0x80
 80188fa:	0049      	lsls	r1, r1, #1
 80188fc:	430a      	orrs	r2, r1
 80188fe:	601a      	str	r2, [r3, #0]
 8018900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018902:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018906:	f383 8810 	msr	PRIMASK, r3
}
 801890a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801890c:	f3ef 8310 	mrs	r3, PRIMASK
 8018910:	613b      	str	r3, [r7, #16]
  return(result);
 8018912:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018916:	2301      	movs	r3, #1
 8018918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801891a:	697b      	ldr	r3, [r7, #20]
 801891c:	f383 8810 	msr	PRIMASK, r3
}
 8018920:	46c0      	nop			@ (mov r8, r8)
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	689a      	ldr	r2, [r3, #8]
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2101      	movs	r1, #1
 801892e:	430a      	orrs	r2, r1
 8018930:	609a      	str	r2, [r3, #8]
 8018932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018934:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018936:	69bb      	ldr	r3, [r7, #24]
 8018938:	f383 8810 	msr	PRIMASK, r3
}
 801893c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801893e:	f3ef 8310 	mrs	r3, PRIMASK
 8018942:	61fb      	str	r3, [r7, #28]
  return(result);
 8018944:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018946:	637b      	str	r3, [r7, #52]	@ 0x34
 8018948:	2301      	movs	r3, #1
 801894a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801894c:	6a3b      	ldr	r3, [r7, #32]
 801894e:	f383 8810 	msr	PRIMASK, r3
}
 8018952:	46c0      	nop			@ (mov r8, r8)
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	689a      	ldr	r2, [r3, #8]
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	2140      	movs	r1, #64	@ 0x40
 8018960:	430a      	orrs	r2, r1
 8018962:	609a      	str	r2, [r3, #8]
 8018964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018966:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801896a:	f383 8810 	msr	PRIMASK, r3
}
 801896e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8018970:	2300      	movs	r3, #0
}
 8018972:	0018      	movs	r0, r3
 8018974:	46bd      	mov	sp, r7
 8018976:	b010      	add	sp, #64	@ 0x40
 8018978:	bd80      	pop	{r7, pc}
 801897a:	46c0      	nop			@ (mov r8, r8)
 801897c:	08018b59 	.word	0x08018b59
 8018980:	08018c8d 	.word	0x08018c8d
 8018984:	08018cd5 	.word	0x08018cd5

08018988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b086      	sub	sp, #24
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018990:	f3ef 8310 	mrs	r3, PRIMASK
 8018994:	60bb      	str	r3, [r7, #8]
  return(result);
 8018996:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018998:	617b      	str	r3, [r7, #20]
 801899a:	2301      	movs	r3, #1
 801899c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	f383 8810 	msr	PRIMASK, r3
}
 80189a4:	46c0      	nop			@ (mov r8, r8)
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	681a      	ldr	r2, [r3, #0]
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	21c0      	movs	r1, #192	@ 0xc0
 80189b2:	438a      	bics	r2, r1
 80189b4:	601a      	str	r2, [r3, #0]
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	f383 8810 	msr	PRIMASK, r3
}
 80189c0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2220      	movs	r2, #32
 80189c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80189c8:	46c0      	nop			@ (mov r8, r8)
 80189ca:	46bd      	mov	sp, r7
 80189cc:	b006      	add	sp, #24
 80189ce:	bd80      	pop	{r7, pc}

080189d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b08e      	sub	sp, #56	@ 0x38
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189d8:	f3ef 8310 	mrs	r3, PRIMASK
 80189dc:	617b      	str	r3, [r7, #20]
  return(result);
 80189de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80189e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80189e2:	2301      	movs	r3, #1
 80189e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	f383 8810 	msr	PRIMASK, r3
}
 80189ec:	46c0      	nop			@ (mov r8, r8)
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	681a      	ldr	r2, [r3, #0]
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	4926      	ldr	r1, [pc, #152]	@ (8018a94 <UART_EndRxTransfer+0xc4>)
 80189fa:	400a      	ands	r2, r1
 80189fc:	601a      	str	r2, [r3, #0]
 80189fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a02:	69fb      	ldr	r3, [r7, #28]
 8018a04:	f383 8810 	msr	PRIMASK, r3
}
 8018a08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8018a0e:	623b      	str	r3, [r7, #32]
  return(result);
 8018a10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8018a14:	2301      	movs	r3, #1
 8018a16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a1a:	f383 8810 	msr	PRIMASK, r3
}
 8018a1e:	46c0      	nop			@ (mov r8, r8)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	689a      	ldr	r2, [r3, #8]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	2101      	movs	r1, #1
 8018a2c:	438a      	bics	r2, r1
 8018a2e:	609a      	str	r2, [r3, #8]
 8018a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a36:	f383 8810 	msr	PRIMASK, r3
}
 8018a3a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a40:	2b01      	cmp	r3, #1
 8018a42:	d118      	bne.n	8018a76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a44:	f3ef 8310 	mrs	r3, PRIMASK
 8018a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a4e:	2301      	movs	r3, #1
 8018a50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	f383 8810 	msr	PRIMASK, r3
}
 8018a58:	46c0      	nop			@ (mov r8, r8)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	681a      	ldr	r2, [r3, #0]
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2110      	movs	r1, #16
 8018a66:	438a      	bics	r2, r1
 8018a68:	601a      	str	r2, [r3, #0]
 8018a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a6e:	693b      	ldr	r3, [r7, #16]
 8018a70:	f383 8810 	msr	PRIMASK, r3
}
 8018a74:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	2280      	movs	r2, #128	@ 0x80
 8018a7a:	2120      	movs	r1, #32
 8018a7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	2200      	movs	r2, #0
 8018a82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	2200      	movs	r2, #0
 8018a88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018a8a:	46c0      	nop			@ (mov r8, r8)
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	b00e      	add	sp, #56	@ 0x38
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	46c0      	nop			@ (mov r8, r8)
 8018a94:	fffffedf 	.word	0xfffffedf

08018a98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b08c      	sub	sp, #48	@ 0x30
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	2220      	movs	r2, #32
 8018aae:	4013      	ands	r3, r2
 8018ab0:	d135      	bne.n	8018b1e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ab4:	2252      	movs	r2, #82	@ 0x52
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018aba:	f3ef 8310 	mrs	r3, PRIMASK
 8018abe:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ac0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	f383 8810 	msr	PRIMASK, r3
}
 8018ace:	46c0      	nop			@ (mov r8, r8)
 8018ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	689a      	ldr	r2, [r3, #8]
 8018ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	2180      	movs	r1, #128	@ 0x80
 8018adc:	438a      	bics	r2, r1
 8018ade:	609a      	str	r2, [r3, #8]
 8018ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	f383 8810 	msr	PRIMASK, r3
}
 8018aea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018aec:	f3ef 8310 	mrs	r3, PRIMASK
 8018af0:	61bb      	str	r3, [r7, #24]
  return(result);
 8018af2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018af6:	2301      	movs	r3, #1
 8018af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018afa:	69fb      	ldr	r3, [r7, #28]
 8018afc:	f383 8810 	msr	PRIMASK, r3
}
 8018b00:	46c0      	nop			@ (mov r8, r8)
 8018b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	681a      	ldr	r2, [r3, #0]
 8018b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	2140      	movs	r1, #64	@ 0x40
 8018b0e:	430a      	orrs	r2, r1
 8018b10:	601a      	str	r2, [r3, #0]
 8018b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b16:	6a3b      	ldr	r3, [r7, #32]
 8018b18:	f383 8810 	msr	PRIMASK, r3
}
 8018b1c:	e006      	b.n	8018b2c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b20:	228c      	movs	r2, #140	@ 0x8c
 8018b22:	589b      	ldr	r3, [r3, r2]
 8018b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b26:	0010      	movs	r0, r2
 8018b28:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018b2a:	46c0      	nop			@ (mov r8, r8)
 8018b2c:	46c0      	nop			@ (mov r8, r8)
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	b00c      	add	sp, #48	@ 0x30
 8018b32:	bd80      	pop	{r7, pc}

08018b34 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b084      	sub	sp, #16
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	2288      	movs	r2, #136	@ 0x88
 8018b46:	589b      	ldr	r3, [r3, r2]
 8018b48:	68fa      	ldr	r2, [r7, #12]
 8018b4a:	0010      	movs	r0, r2
 8018b4c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b4e:	46c0      	nop			@ (mov r8, r8)
 8018b50:	46bd      	mov	sp, r7
 8018b52:	b004      	add	sp, #16
 8018b54:	bd80      	pop	{r7, pc}
	...

08018b58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b094      	sub	sp, #80	@ 0x50
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2220      	movs	r2, #32
 8018b6e:	4013      	ands	r3, r2
 8018b70:	d16f      	bne.n	8018c52 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b74:	225a      	movs	r2, #90	@ 0x5a
 8018b76:	2100      	movs	r1, #0
 8018b78:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8018b7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8018b80:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018b84:	2301      	movs	r3, #1
 8018b86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	f383 8810 	msr	PRIMASK, r3
}
 8018b8e:	46c0      	nop			@ (mov r8, r8)
 8018b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	493b      	ldr	r1, [pc, #236]	@ (8018c88 <UART_DMAReceiveCplt+0x130>)
 8018b9c:	400a      	ands	r2, r1
 8018b9e:	601a      	str	r2, [r3, #0]
 8018ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ba2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ba4:	6a3b      	ldr	r3, [r7, #32]
 8018ba6:	f383 8810 	msr	PRIMASK, r3
}
 8018baa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bac:	f3ef 8310 	mrs	r3, PRIMASK
 8018bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bbc:	f383 8810 	msr	PRIMASK, r3
}
 8018bc0:	46c0      	nop			@ (mov r8, r8)
 8018bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	689a      	ldr	r2, [r3, #8]
 8018bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	2101      	movs	r1, #1
 8018bce:	438a      	bics	r2, r1
 8018bd0:	609a      	str	r2, [r3, #8]
 8018bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bd8:	f383 8810 	msr	PRIMASK, r3
}
 8018bdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bde:	f3ef 8310 	mrs	r3, PRIMASK
 8018be2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8018be8:	2301      	movs	r3, #1
 8018bea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bee:	f383 8810 	msr	PRIMASK, r3
}
 8018bf2:	46c0      	nop			@ (mov r8, r8)
 8018bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	689a      	ldr	r2, [r3, #8]
 8018bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	2140      	movs	r1, #64	@ 0x40
 8018c00:	438a      	bics	r2, r1
 8018c02:	609a      	str	r2, [r3, #8]
 8018c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c0a:	f383 8810 	msr	PRIMASK, r3
}
 8018c0e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c12:	2280      	movs	r2, #128	@ 0x80
 8018c14:	2120      	movs	r1, #32
 8018c16:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c1c:	2b01      	cmp	r3, #1
 8018c1e:	d118      	bne.n	8018c52 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c20:	f3ef 8310 	mrs	r3, PRIMASK
 8018c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8018c26:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	f383 8810 	msr	PRIMASK, r3
}
 8018c34:	46c0      	nop			@ (mov r8, r8)
 8018c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2110      	movs	r1, #16
 8018c42:	438a      	bics	r2, r1
 8018c44:	601a      	str	r2, [r3, #0]
 8018c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	f383 8810 	msr	PRIMASK, r3
}
 8018c50:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c54:	2200      	movs	r2, #0
 8018c56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	d109      	bne.n	8018c74 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c62:	22ac      	movs	r2, #172	@ 0xac
 8018c64:	589b      	ldr	r3, [r3, r2]
 8018c66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c68:	2158      	movs	r1, #88	@ 0x58
 8018c6a:	5a51      	ldrh	r1, [r2, r1]
 8018c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c6e:	0010      	movs	r0, r2
 8018c70:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018c72:	e005      	b.n	8018c80 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c76:	2294      	movs	r2, #148	@ 0x94
 8018c78:	589b      	ldr	r3, [r3, r2]
 8018c7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c7c:	0010      	movs	r0, r2
 8018c7e:	4798      	blx	r3
}
 8018c80:	46c0      	nop			@ (mov r8, r8)
 8018c82:	46bd      	mov	sp, r7
 8018c84:	b014      	add	sp, #80	@ 0x50
 8018c86:	bd80      	pop	{r7, pc}
 8018c88:	fffffeff 	.word	0xfffffeff

08018c8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b084      	sub	sp, #16
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	2201      	movs	r2, #1
 8018c9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ca4:	2b01      	cmp	r3, #1
 8018ca6:	d10b      	bne.n	8018cc0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	22ac      	movs	r2, #172	@ 0xac
 8018cac:	589b      	ldr	r3, [r3, r2]
 8018cae:	68fa      	ldr	r2, [r7, #12]
 8018cb0:	2158      	movs	r1, #88	@ 0x58
 8018cb2:	5a52      	ldrh	r2, [r2, r1]
 8018cb4:	0852      	lsrs	r2, r2, #1
 8018cb6:	b291      	uxth	r1, r2
 8018cb8:	68fa      	ldr	r2, [r7, #12]
 8018cba:	0010      	movs	r0, r2
 8018cbc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018cbe:	e005      	b.n	8018ccc <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	2290      	movs	r2, #144	@ 0x90
 8018cc4:	589b      	ldr	r3, [r3, r2]
 8018cc6:	68fa      	ldr	r2, [r7, #12]
 8018cc8:	0010      	movs	r0, r2
 8018cca:	4798      	blx	r3
}
 8018ccc:	46c0      	nop			@ (mov r8, r8)
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	b004      	add	sp, #16
 8018cd2:	bd80      	pop	{r7, pc}

08018cd4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b086      	sub	sp, #24
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ce0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018ce2:	697b      	ldr	r3, [r7, #20]
 8018ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018ce6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	2280      	movs	r2, #128	@ 0x80
 8018cec:	589b      	ldr	r3, [r3, r2]
 8018cee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	689b      	ldr	r3, [r3, #8]
 8018cf6:	2280      	movs	r2, #128	@ 0x80
 8018cf8:	4013      	ands	r3, r2
 8018cfa:	2b80      	cmp	r3, #128	@ 0x80
 8018cfc:	d10a      	bne.n	8018d14 <UART_DMAError+0x40>
 8018cfe:	693b      	ldr	r3, [r7, #16]
 8018d00:	2b21      	cmp	r3, #33	@ 0x21
 8018d02:	d107      	bne.n	8018d14 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018d04:	697b      	ldr	r3, [r7, #20]
 8018d06:	2252      	movs	r2, #82	@ 0x52
 8018d08:	2100      	movs	r1, #0
 8018d0a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018d0c:	697b      	ldr	r3, [r7, #20]
 8018d0e:	0018      	movs	r0, r3
 8018d10:	f7ff fe3a 	bl	8018988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018d14:	697b      	ldr	r3, [r7, #20]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	689b      	ldr	r3, [r3, #8]
 8018d1a:	2240      	movs	r2, #64	@ 0x40
 8018d1c:	4013      	ands	r3, r2
 8018d1e:	2b40      	cmp	r3, #64	@ 0x40
 8018d20:	d10a      	bne.n	8018d38 <UART_DMAError+0x64>
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	2b22      	cmp	r3, #34	@ 0x22
 8018d26:	d107      	bne.n	8018d38 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	225a      	movs	r2, #90	@ 0x5a
 8018d2c:	2100      	movs	r1, #0
 8018d2e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	0018      	movs	r0, r3
 8018d34:	f7ff fe4c 	bl	80189d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	2284      	movs	r2, #132	@ 0x84
 8018d3c:	589b      	ldr	r3, [r3, r2]
 8018d3e:	2210      	movs	r2, #16
 8018d40:	431a      	orrs	r2, r3
 8018d42:	697b      	ldr	r3, [r7, #20]
 8018d44:	2184      	movs	r1, #132	@ 0x84
 8018d46:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	2298      	movs	r2, #152	@ 0x98
 8018d4c:	589b      	ldr	r3, [r3, r2]
 8018d4e:	697a      	ldr	r2, [r7, #20]
 8018d50:	0010      	movs	r0, r2
 8018d52:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d54:	46c0      	nop			@ (mov r8, r8)
 8018d56:	46bd      	mov	sp, r7
 8018d58:	b006      	add	sp, #24
 8018d5a:	bd80      	pop	{r7, pc}

08018d5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b084      	sub	sp, #16
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	225a      	movs	r2, #90	@ 0x5a
 8018d6e:	2100      	movs	r1, #0
 8018d70:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	2252      	movs	r2, #82	@ 0x52
 8018d76:	2100      	movs	r1, #0
 8018d78:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	2298      	movs	r2, #152	@ 0x98
 8018d7e:	589b      	ldr	r3, [r3, r2]
 8018d80:	68fa      	ldr	r2, [r7, #12]
 8018d82:	0010      	movs	r0, r2
 8018d84:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d86:	46c0      	nop			@ (mov r8, r8)
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	b004      	add	sp, #16
 8018d8c:	bd80      	pop	{r7, pc}

08018d8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018d8e:	b580      	push	{r7, lr}
 8018d90:	b086      	sub	sp, #24
 8018d92:	af00      	add	r7, sp, #0
 8018d94:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d96:	f3ef 8310 	mrs	r3, PRIMASK
 8018d9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018d9c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018d9e:	617b      	str	r3, [r7, #20]
 8018da0:	2301      	movs	r3, #1
 8018da2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	f383 8810 	msr	PRIMASK, r3
}
 8018daa:	46c0      	nop			@ (mov r8, r8)
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	681a      	ldr	r2, [r3, #0]
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2140      	movs	r1, #64	@ 0x40
 8018db8:	438a      	bics	r2, r1
 8018dba:	601a      	str	r2, [r3, #0]
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dc0:	693b      	ldr	r3, [r7, #16]
 8018dc2:	f383 8810 	msr	PRIMASK, r3
}
 8018dc6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2220      	movs	r2, #32
 8018dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	228c      	movs	r2, #140	@ 0x8c
 8018dd8:	589b      	ldr	r3, [r3, r2]
 8018dda:	687a      	ldr	r2, [r7, #4]
 8018ddc:	0010      	movs	r0, r2
 8018dde:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018de0:	46c0      	nop			@ (mov r8, r8)
 8018de2:	46bd      	mov	sp, r7
 8018de4:	b006      	add	sp, #24
 8018de6:	bd80      	pop	{r7, pc}

08018de8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b094      	sub	sp, #80	@ 0x50
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018df0:	204e      	movs	r0, #78	@ 0x4e
 8018df2:	183b      	adds	r3, r7, r0
 8018df4:	687a      	ldr	r2, [r7, #4]
 8018df6:	215c      	movs	r1, #92	@ 0x5c
 8018df8:	5a52      	ldrh	r2, [r2, r1]
 8018dfa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2280      	movs	r2, #128	@ 0x80
 8018e00:	589b      	ldr	r3, [r3, r2]
 8018e02:	2b22      	cmp	r3, #34	@ 0x22
 8018e04:	d000      	beq.n	8018e08 <UART_RxISR_8BIT+0x20>
 8018e06:	e0c2      	b.n	8018f8e <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018e0e:	214c      	movs	r1, #76	@ 0x4c
 8018e10:	187b      	adds	r3, r7, r1
 8018e12:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018e14:	187b      	adds	r3, r7, r1
 8018e16:	881b      	ldrh	r3, [r3, #0]
 8018e18:	b2da      	uxtb	r2, r3
 8018e1a:	183b      	adds	r3, r7, r0
 8018e1c:	881b      	ldrh	r3, [r3, #0]
 8018e1e:	b2d9      	uxtb	r1, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e24:	400a      	ands	r2, r1
 8018e26:	b2d2      	uxtb	r2, r2
 8018e28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e2e:	1c5a      	adds	r2, r3, #1
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	225a      	movs	r2, #90	@ 0x5a
 8018e38:	5a9b      	ldrh	r3, [r3, r2]
 8018e3a:	b29b      	uxth	r3, r3
 8018e3c:	3b01      	subs	r3, #1
 8018e3e:	b299      	uxth	r1, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	225a      	movs	r2, #90	@ 0x5a
 8018e44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	225a      	movs	r2, #90	@ 0x5a
 8018e4a:	5a9b      	ldrh	r3, [r3, r2]
 8018e4c:	b29b      	uxth	r3, r3
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d000      	beq.n	8018e54 <UART_RxISR_8BIT+0x6c>
 8018e52:	e0a4      	b.n	8018f9e <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e54:	f3ef 8310 	mrs	r3, PRIMASK
 8018e58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e5e:	2301      	movs	r3, #1
 8018e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e64:	f383 8810 	msr	PRIMASK, r3
}
 8018e68:	46c0      	nop			@ (mov r8, r8)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	681a      	ldr	r2, [r3, #0]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	494c      	ldr	r1, [pc, #304]	@ (8018fa8 <UART_RxISR_8BIT+0x1c0>)
 8018e76:	400a      	ands	r2, r1
 8018e78:	601a      	str	r2, [r3, #0]
 8018e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e80:	f383 8810 	msr	PRIMASK, r3
}
 8018e84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e86:	f3ef 8310 	mrs	r3, PRIMASK
 8018e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e90:	2301      	movs	r3, #1
 8018e92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e96:	f383 8810 	msr	PRIMASK, r3
}
 8018e9a:	46c0      	nop			@ (mov r8, r8)
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	689a      	ldr	r2, [r3, #8]
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	2101      	movs	r1, #1
 8018ea8:	438a      	bics	r2, r1
 8018eaa:	609a      	str	r2, [r3, #8]
 8018eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eb2:	f383 8810 	msr	PRIMASK, r3
}
 8018eb6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2280      	movs	r2, #128	@ 0x80
 8018ebc:	2120      	movs	r1, #32
 8018ebe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4a36      	ldr	r2, [pc, #216]	@ (8018fac <UART_RxISR_8BIT+0x1c4>)
 8018ed2:	4293      	cmp	r3, r2
 8018ed4:	d01f      	beq.n	8018f16 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	685a      	ldr	r2, [r3, #4]
 8018edc:	2380      	movs	r3, #128	@ 0x80
 8018ede:	041b      	lsls	r3, r3, #16
 8018ee0:	4013      	ands	r3, r2
 8018ee2:	d018      	beq.n	8018f16 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ee8:	61bb      	str	r3, [r7, #24]
  return(result);
 8018eea:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8018eee:	2301      	movs	r3, #1
 8018ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ef2:	69fb      	ldr	r3, [r7, #28]
 8018ef4:	f383 8810 	msr	PRIMASK, r3
}
 8018ef8:	46c0      	nop			@ (mov r8, r8)
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	681a      	ldr	r2, [r3, #0]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	492a      	ldr	r1, [pc, #168]	@ (8018fb0 <UART_RxISR_8BIT+0x1c8>)
 8018f06:	400a      	ands	r2, r1
 8018f08:	601a      	str	r2, [r3, #0]
 8018f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f0e:	6a3b      	ldr	r3, [r7, #32]
 8018f10:	f383 8810 	msr	PRIMASK, r3
}
 8018f14:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018f1a:	2b01      	cmp	r3, #1
 8018f1c:	d130      	bne.n	8018f80 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2200      	movs	r2, #0
 8018f22:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f24:	f3ef 8310 	mrs	r3, PRIMASK
 8018f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8018f2a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f2e:	2301      	movs	r3, #1
 8018f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f32:	693b      	ldr	r3, [r7, #16]
 8018f34:	f383 8810 	msr	PRIMASK, r3
}
 8018f38:	46c0      	nop			@ (mov r8, r8)
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	2110      	movs	r1, #16
 8018f46:	438a      	bics	r2, r1
 8018f48:	601a      	str	r2, [r3, #0]
 8018f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f4e:	697b      	ldr	r3, [r7, #20]
 8018f50:	f383 8810 	msr	PRIMASK, r3
}
 8018f54:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	69db      	ldr	r3, [r3, #28]
 8018f5c:	2210      	movs	r2, #16
 8018f5e:	4013      	ands	r3, r2
 8018f60:	2b10      	cmp	r3, #16
 8018f62:	d103      	bne.n	8018f6c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	2210      	movs	r2, #16
 8018f6a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	22ac      	movs	r2, #172	@ 0xac
 8018f70:	589b      	ldr	r3, [r3, r2]
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	2158      	movs	r1, #88	@ 0x58
 8018f76:	5a51      	ldrh	r1, [r2, r1]
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	0010      	movs	r0, r2
 8018f7c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018f7e:	e00e      	b.n	8018f9e <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2294      	movs	r2, #148	@ 0x94
 8018f84:	589b      	ldr	r3, [r3, r2]
 8018f86:	687a      	ldr	r2, [r7, #4]
 8018f88:	0010      	movs	r0, r2
 8018f8a:	4798      	blx	r3
}
 8018f8c:	e007      	b.n	8018f9e <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	699a      	ldr	r2, [r3, #24]
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	2108      	movs	r1, #8
 8018f9a:	430a      	orrs	r2, r1
 8018f9c:	619a      	str	r2, [r3, #24]
}
 8018f9e:	46c0      	nop			@ (mov r8, r8)
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	b014      	add	sp, #80	@ 0x50
 8018fa4:	bd80      	pop	{r7, pc}
 8018fa6:	46c0      	nop			@ (mov r8, r8)
 8018fa8:	fffffedf 	.word	0xfffffedf
 8018fac:	40004800 	.word	0x40004800
 8018fb0:	fbffffff 	.word	0xfbffffff

08018fb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b094      	sub	sp, #80	@ 0x50
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018fbc:	204e      	movs	r0, #78	@ 0x4e
 8018fbe:	183b      	adds	r3, r7, r0
 8018fc0:	687a      	ldr	r2, [r7, #4]
 8018fc2:	215c      	movs	r1, #92	@ 0x5c
 8018fc4:	5a52      	ldrh	r2, [r2, r1]
 8018fc6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2280      	movs	r2, #128	@ 0x80
 8018fcc:	589b      	ldr	r3, [r3, r2]
 8018fce:	2b22      	cmp	r3, #34	@ 0x22
 8018fd0:	d000      	beq.n	8018fd4 <UART_RxISR_16BIT+0x20>
 8018fd2:	e0c2      	b.n	801915a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018fda:	214c      	movs	r1, #76	@ 0x4c
 8018fdc:	187b      	adds	r3, r7, r1
 8018fde:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018fe6:	187b      	adds	r3, r7, r1
 8018fe8:	183a      	adds	r2, r7, r0
 8018fea:	881b      	ldrh	r3, [r3, #0]
 8018fec:	8812      	ldrh	r2, [r2, #0]
 8018fee:	4013      	ands	r3, r2
 8018ff0:	b29a      	uxth	r2, r3
 8018ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ff4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ffa:	1c9a      	adds	r2, r3, #2
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	225a      	movs	r2, #90	@ 0x5a
 8019004:	5a9b      	ldrh	r3, [r3, r2]
 8019006:	b29b      	uxth	r3, r3
 8019008:	3b01      	subs	r3, #1
 801900a:	b299      	uxth	r1, r3
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	225a      	movs	r2, #90	@ 0x5a
 8019010:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	225a      	movs	r2, #90	@ 0x5a
 8019016:	5a9b      	ldrh	r3, [r3, r2]
 8019018:	b29b      	uxth	r3, r3
 801901a:	2b00      	cmp	r3, #0
 801901c:	d000      	beq.n	8019020 <UART_RxISR_16BIT+0x6c>
 801901e:	e0a4      	b.n	801916a <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019020:	f3ef 8310 	mrs	r3, PRIMASK
 8019024:	623b      	str	r3, [r7, #32]
  return(result);
 8019026:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019028:	647b      	str	r3, [r7, #68]	@ 0x44
 801902a:	2301      	movs	r3, #1
 801902c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019030:	f383 8810 	msr	PRIMASK, r3
}
 8019034:	46c0      	nop			@ (mov r8, r8)
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	681a      	ldr	r2, [r3, #0]
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	494c      	ldr	r1, [pc, #304]	@ (8019174 <UART_RxISR_16BIT+0x1c0>)
 8019042:	400a      	ands	r2, r1
 8019044:	601a      	str	r2, [r3, #0]
 8019046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019048:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801904a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801904c:	f383 8810 	msr	PRIMASK, r3
}
 8019050:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019052:	f3ef 8310 	mrs	r3, PRIMASK
 8019056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8019058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801905a:	643b      	str	r3, [r7, #64]	@ 0x40
 801905c:	2301      	movs	r3, #1
 801905e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019062:	f383 8810 	msr	PRIMASK, r3
}
 8019066:	46c0      	nop			@ (mov r8, r8)
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	689a      	ldr	r2, [r3, #8]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2101      	movs	r1, #1
 8019074:	438a      	bics	r2, r1
 8019076:	609a      	str	r2, [r3, #8]
 8019078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801907a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801907c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801907e:	f383 8810 	msr	PRIMASK, r3
}
 8019082:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	2280      	movs	r2, #128	@ 0x80
 8019088:	2120      	movs	r1, #32
 801908a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	2200      	movs	r2, #0
 8019090:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2200      	movs	r2, #0
 8019096:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a36      	ldr	r2, [pc, #216]	@ (8019178 <UART_RxISR_16BIT+0x1c4>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d01f      	beq.n	80190e2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	685a      	ldr	r2, [r3, #4]
 80190a8:	2380      	movs	r3, #128	@ 0x80
 80190aa:	041b      	lsls	r3, r3, #16
 80190ac:	4013      	ands	r3, r2
 80190ae:	d018      	beq.n	80190e2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190b0:	f3ef 8310 	mrs	r3, PRIMASK
 80190b4:	617b      	str	r3, [r7, #20]
  return(result);
 80190b6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80190b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80190ba:	2301      	movs	r3, #1
 80190bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190be:	69bb      	ldr	r3, [r7, #24]
 80190c0:	f383 8810 	msr	PRIMASK, r3
}
 80190c4:	46c0      	nop			@ (mov r8, r8)
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	681a      	ldr	r2, [r3, #0]
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	492a      	ldr	r1, [pc, #168]	@ (801917c <UART_RxISR_16BIT+0x1c8>)
 80190d2:	400a      	ands	r2, r1
 80190d4:	601a      	str	r2, [r3, #0]
 80190d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190da:	69fb      	ldr	r3, [r7, #28]
 80190dc:	f383 8810 	msr	PRIMASK, r3
}
 80190e0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	d130      	bne.n	801914c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	2200      	movs	r2, #0
 80190ee:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190f0:	f3ef 8310 	mrs	r3, PRIMASK
 80190f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80190f6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80190f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80190fa:	2301      	movs	r3, #1
 80190fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	f383 8810 	msr	PRIMASK, r3
}
 8019104:	46c0      	nop			@ (mov r8, r8)
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	681a      	ldr	r2, [r3, #0]
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	2110      	movs	r1, #16
 8019112:	438a      	bics	r2, r1
 8019114:	601a      	str	r2, [r3, #0]
 8019116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801911a:	693b      	ldr	r3, [r7, #16]
 801911c:	f383 8810 	msr	PRIMASK, r3
}
 8019120:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	69db      	ldr	r3, [r3, #28]
 8019128:	2210      	movs	r2, #16
 801912a:	4013      	ands	r3, r2
 801912c:	2b10      	cmp	r3, #16
 801912e:	d103      	bne.n	8019138 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	2210      	movs	r2, #16
 8019136:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	22ac      	movs	r2, #172	@ 0xac
 801913c:	589b      	ldr	r3, [r3, r2]
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	2158      	movs	r1, #88	@ 0x58
 8019142:	5a51      	ldrh	r1, [r2, r1]
 8019144:	687a      	ldr	r2, [r7, #4]
 8019146:	0010      	movs	r0, r2
 8019148:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801914a:	e00e      	b.n	801916a <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2294      	movs	r2, #148	@ 0x94
 8019150:	589b      	ldr	r3, [r3, r2]
 8019152:	687a      	ldr	r2, [r7, #4]
 8019154:	0010      	movs	r0, r2
 8019156:	4798      	blx	r3
}
 8019158:	e007      	b.n	801916a <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	699a      	ldr	r2, [r3, #24]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	2108      	movs	r1, #8
 8019166:	430a      	orrs	r2, r1
 8019168:	619a      	str	r2, [r3, #24]
}
 801916a:	46c0      	nop			@ (mov r8, r8)
 801916c:	46bd      	mov	sp, r7
 801916e:	b014      	add	sp, #80	@ 0x50
 8019170:	bd80      	pop	{r7, pc}
 8019172:	46c0      	nop			@ (mov r8, r8)
 8019174:	fffffedf 	.word	0xfffffedf
 8019178:	40004800 	.word	0x40004800
 801917c:	fbffffff 	.word	0xfbffffff

08019180 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b082      	sub	sp, #8
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019188:	46c0      	nop			@ (mov r8, r8)
 801918a:	46bd      	mov	sp, r7
 801918c:	b002      	add	sp, #8
 801918e:	bd80      	pop	{r7, pc}

08019190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b084      	sub	sp, #16
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	2244      	movs	r2, #68	@ 0x44
 801919c:	2100      	movs	r1, #0
 801919e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80191a0:	4b05      	ldr	r3, [pc, #20]	@ (80191b8 <USB_EnableGlobalInt+0x28>)
 80191a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	b299      	uxth	r1, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2240      	movs	r2, #64	@ 0x40
 80191ac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80191ae:	2300      	movs	r3, #0
}
 80191b0:	0018      	movs	r0, r3
 80191b2:	46bd      	mov	sp, r7
 80191b4:	b004      	add	sp, #16
 80191b6:	bd80      	pop	{r7, pc}
 80191b8:	0000bf80 	.word	0x0000bf80

080191bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b084      	sub	sp, #16
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80191c4:	4b09      	ldr	r3, [pc, #36]	@ (80191ec <USB_DisableGlobalInt+0x30>)
 80191c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	2240      	movs	r2, #64	@ 0x40
 80191cc:	5a9b      	ldrh	r3, [r3, r2]
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	68fa      	ldr	r2, [r7, #12]
 80191d2:	b292      	uxth	r2, r2
 80191d4:	43d2      	mvns	r2, r2
 80191d6:	b292      	uxth	r2, r2
 80191d8:	4013      	ands	r3, r2
 80191da:	b299      	uxth	r1, r3
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	2240      	movs	r2, #64	@ 0x40
 80191e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80191e2:	2300      	movs	r3, #0
}
 80191e4:	0018      	movs	r0, r3
 80191e6:	46bd      	mov	sp, r7
 80191e8:	b004      	add	sp, #16
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	0000bf80 	.word	0x0000bf80

080191f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80191f0:	b084      	sub	sp, #16
 80191f2:	b590      	push	{r4, r7, lr}
 80191f4:	b083      	sub	sp, #12
 80191f6:	af00      	add	r7, sp, #0
 80191f8:	6078      	str	r0, [r7, #4]
 80191fa:	2004      	movs	r0, #4
 80191fc:	2410      	movs	r4, #16
 80191fe:	1900      	adds	r0, r0, r4
 8019200:	2408      	movs	r4, #8
 8019202:	46a4      	mov	ip, r4
 8019204:	44bc      	add	ip, r7
 8019206:	4460      	add	r0, ip
 8019208:	6001      	str	r1, [r0, #0]
 801920a:	6042      	str	r2, [r0, #4]
 801920c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	2240      	movs	r2, #64	@ 0x40
 8019212:	2101      	movs	r1, #1
 8019214:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	2240      	movs	r2, #64	@ 0x40
 801921a:	2100      	movs	r1, #0
 801921c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	2244      	movs	r2, #68	@ 0x44
 8019222:	2100      	movs	r1, #0
 8019224:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	2250      	movs	r2, #80	@ 0x50
 801922a:	2100      	movs	r1, #0
 801922c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801922e:	2300      	movs	r3, #0
}
 8019230:	0018      	movs	r0, r3
 8019232:	46bd      	mov	sp, r7
 8019234:	b003      	add	sp, #12
 8019236:	bc90      	pop	{r4, r7}
 8019238:	bc08      	pop	{r3}
 801923a:	b004      	add	sp, #16
 801923c:	4718      	bx	r3
	...

08019240 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b09c      	sub	sp, #112	@ 0x70
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801924a:	236f      	movs	r3, #111	@ 0x6f
 801924c:	18fb      	adds	r3, r7, r3
 801924e:	2200      	movs	r2, #0
 8019250:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8019252:	687a      	ldr	r2, [r7, #4]
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	009b      	lsls	r3, r3, #2
 801925a:	18d3      	adds	r3, r2, r3
 801925c:	881b      	ldrh	r3, [r3, #0]
 801925e:	b29a      	uxth	r2, r3
 8019260:	236c      	movs	r3, #108	@ 0x6c
 8019262:	18fb      	adds	r3, r7, r3
 8019264:	49a3      	ldr	r1, [pc, #652]	@ (80194f4 <USB_ActivateEndpoint+0x2b4>)
 8019266:	400a      	ands	r2, r1
 8019268:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	78db      	ldrb	r3, [r3, #3]
 801926e:	2b03      	cmp	r3, #3
 8019270:	d017      	beq.n	80192a2 <USB_ActivateEndpoint+0x62>
 8019272:	dc28      	bgt.n	80192c6 <USB_ActivateEndpoint+0x86>
 8019274:	2b02      	cmp	r3, #2
 8019276:	d00e      	beq.n	8019296 <USB_ActivateEndpoint+0x56>
 8019278:	dc25      	bgt.n	80192c6 <USB_ActivateEndpoint+0x86>
 801927a:	2b00      	cmp	r3, #0
 801927c:	d002      	beq.n	8019284 <USB_ActivateEndpoint+0x44>
 801927e:	2b01      	cmp	r3, #1
 8019280:	d018      	beq.n	80192b4 <USB_ActivateEndpoint+0x74>
 8019282:	e020      	b.n	80192c6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019284:	226c      	movs	r2, #108	@ 0x6c
 8019286:	18bb      	adds	r3, r7, r2
 8019288:	18ba      	adds	r2, r7, r2
 801928a:	8812      	ldrh	r2, [r2, #0]
 801928c:	2180      	movs	r1, #128	@ 0x80
 801928e:	0089      	lsls	r1, r1, #2
 8019290:	430a      	orrs	r2, r1
 8019292:	801a      	strh	r2, [r3, #0]
      break;
 8019294:	e01c      	b.n	80192d0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019296:	226c      	movs	r2, #108	@ 0x6c
 8019298:	18bb      	adds	r3, r7, r2
 801929a:	18ba      	adds	r2, r7, r2
 801929c:	8812      	ldrh	r2, [r2, #0]
 801929e:	801a      	strh	r2, [r3, #0]
      break;
 80192a0:	e016      	b.n	80192d0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80192a2:	226c      	movs	r2, #108	@ 0x6c
 80192a4:	18bb      	adds	r3, r7, r2
 80192a6:	18ba      	adds	r2, r7, r2
 80192a8:	8812      	ldrh	r2, [r2, #0]
 80192aa:	21c0      	movs	r1, #192	@ 0xc0
 80192ac:	00c9      	lsls	r1, r1, #3
 80192ae:	430a      	orrs	r2, r1
 80192b0:	801a      	strh	r2, [r3, #0]
      break;
 80192b2:	e00d      	b.n	80192d0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80192b4:	226c      	movs	r2, #108	@ 0x6c
 80192b6:	18bb      	adds	r3, r7, r2
 80192b8:	18ba      	adds	r2, r7, r2
 80192ba:	8812      	ldrh	r2, [r2, #0]
 80192bc:	2180      	movs	r1, #128	@ 0x80
 80192be:	00c9      	lsls	r1, r1, #3
 80192c0:	430a      	orrs	r2, r1
 80192c2:	801a      	strh	r2, [r3, #0]
      break;
 80192c4:	e004      	b.n	80192d0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80192c6:	236f      	movs	r3, #111	@ 0x6f
 80192c8:	18fb      	adds	r3, r7, r3
 80192ca:	2201      	movs	r2, #1
 80192cc:	701a      	strb	r2, [r3, #0]
      break;
 80192ce:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80192d0:	687a      	ldr	r2, [r7, #4]
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	781b      	ldrb	r3, [r3, #0]
 80192d6:	009b      	lsls	r3, r3, #2
 80192d8:	18d3      	adds	r3, r2, r3
 80192da:	226c      	movs	r2, #108	@ 0x6c
 80192dc:	18ba      	adds	r2, r7, r2
 80192de:	8812      	ldrh	r2, [r2, #0]
 80192e0:	4985      	ldr	r1, [pc, #532]	@ (80194f8 <USB_ActivateEndpoint+0x2b8>)
 80192e2:	430a      	orrs	r2, r1
 80192e4:	b292      	uxth	r2, r2
 80192e6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	683b      	ldr	r3, [r7, #0]
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	009b      	lsls	r3, r3, #2
 80192f0:	18d3      	adds	r3, r2, r3
 80192f2:	881b      	ldrh	r3, [r3, #0]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	b21b      	sxth	r3, r3
 80192f8:	4a80      	ldr	r2, [pc, #512]	@ (80194fc <USB_ActivateEndpoint+0x2bc>)
 80192fa:	4013      	ands	r3, r2
 80192fc:	b21a      	sxth	r2, r3
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	b21b      	sxth	r3, r3
 8019304:	4313      	orrs	r3, r2
 8019306:	b21a      	sxth	r2, r3
 8019308:	2166      	movs	r1, #102	@ 0x66
 801930a:	187b      	adds	r3, r7, r1
 801930c:	801a      	strh	r2, [r3, #0]
 801930e:	687a      	ldr	r2, [r7, #4]
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	781b      	ldrb	r3, [r3, #0]
 8019314:	009b      	lsls	r3, r3, #2
 8019316:	18d3      	adds	r3, r2, r3
 8019318:	187a      	adds	r2, r7, r1
 801931a:	8812      	ldrh	r2, [r2, #0]
 801931c:	4976      	ldr	r1, [pc, #472]	@ (80194f8 <USB_ActivateEndpoint+0x2b8>)
 801931e:	430a      	orrs	r2, r1
 8019320:	b292      	uxth	r2, r2
 8019322:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	7b1b      	ldrb	r3, [r3, #12]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d000      	beq.n	801932e <USB_ActivateEndpoint+0xee>
 801932c:	e178      	b.n	8019620 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	785b      	ldrb	r3, [r3, #1]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d100      	bne.n	8019338 <USB_ActivateEndpoint+0xf8>
 8019336:	e07a      	b.n	801942e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	61bb      	str	r3, [r7, #24]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2250      	movs	r2, #80	@ 0x50
 8019340:	5a9b      	ldrh	r3, [r3, r2]
 8019342:	b29b      	uxth	r3, r3
 8019344:	001a      	movs	r2, r3
 8019346:	69bb      	ldr	r3, [r7, #24]
 8019348:	189b      	adds	r3, r3, r2
 801934a:	61bb      	str	r3, [r7, #24]
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	00da      	lsls	r2, r3, #3
 8019352:	69bb      	ldr	r3, [r7, #24]
 8019354:	18d3      	adds	r3, r2, r3
 8019356:	2280      	movs	r2, #128	@ 0x80
 8019358:	00d2      	lsls	r2, r2, #3
 801935a:	4694      	mov	ip, r2
 801935c:	4463      	add	r3, ip
 801935e:	617b      	str	r3, [r7, #20]
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	88db      	ldrh	r3, [r3, #6]
 8019364:	085b      	lsrs	r3, r3, #1
 8019366:	b29b      	uxth	r3, r3
 8019368:	18db      	adds	r3, r3, r3
 801936a:	b29a      	uxth	r2, r3
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	781b      	ldrb	r3, [r3, #0]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	18d2      	adds	r2, r2, r3
 801937a:	2112      	movs	r1, #18
 801937c:	187b      	adds	r3, r7, r1
 801937e:	8812      	ldrh	r2, [r2, #0]
 8019380:	801a      	strh	r2, [r3, #0]
 8019382:	187b      	adds	r3, r7, r1
 8019384:	881b      	ldrh	r3, [r3, #0]
 8019386:	2240      	movs	r2, #64	@ 0x40
 8019388:	4013      	ands	r3, r2
 801938a:	d016      	beq.n	80193ba <USB_ActivateEndpoint+0x17a>
 801938c:	687a      	ldr	r2, [r7, #4]
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	781b      	ldrb	r3, [r3, #0]
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	18d3      	adds	r3, r2, r3
 8019396:	881b      	ldrh	r3, [r3, #0]
 8019398:	b29a      	uxth	r2, r3
 801939a:	2010      	movs	r0, #16
 801939c:	183b      	adds	r3, r7, r0
 801939e:	4957      	ldr	r1, [pc, #348]	@ (80194fc <USB_ActivateEndpoint+0x2bc>)
 80193a0:	400a      	ands	r2, r1
 80193a2:	801a      	strh	r2, [r3, #0]
 80193a4:	687a      	ldr	r2, [r7, #4]
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	18d3      	adds	r3, r2, r3
 80193ae:	183a      	adds	r2, r7, r0
 80193b0:	8812      	ldrh	r2, [r2, #0]
 80193b2:	4953      	ldr	r1, [pc, #332]	@ (8019500 <USB_ActivateEndpoint+0x2c0>)
 80193b4:	430a      	orrs	r2, r1
 80193b6:	b292      	uxth	r2, r2
 80193b8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	78db      	ldrb	r3, [r3, #3]
 80193be:	2b01      	cmp	r3, #1
 80193c0:	d01d      	beq.n	80193fe <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80193c2:	687a      	ldr	r2, [r7, #4]
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	009b      	lsls	r3, r3, #2
 80193ca:	18d3      	adds	r3, r2, r3
 80193cc:	881b      	ldrh	r3, [r3, #0]
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	200c      	movs	r0, #12
 80193d2:	183b      	adds	r3, r7, r0
 80193d4:	494b      	ldr	r1, [pc, #300]	@ (8019504 <USB_ActivateEndpoint+0x2c4>)
 80193d6:	400a      	ands	r2, r1
 80193d8:	801a      	strh	r2, [r3, #0]
 80193da:	183b      	adds	r3, r7, r0
 80193dc:	183a      	adds	r2, r7, r0
 80193de:	8812      	ldrh	r2, [r2, #0]
 80193e0:	2120      	movs	r1, #32
 80193e2:	404a      	eors	r2, r1
 80193e4:	801a      	strh	r2, [r3, #0]
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	781b      	ldrb	r3, [r3, #0]
 80193ec:	009b      	lsls	r3, r3, #2
 80193ee:	18d3      	adds	r3, r2, r3
 80193f0:	183a      	adds	r2, r7, r0
 80193f2:	8812      	ldrh	r2, [r2, #0]
 80193f4:	4940      	ldr	r1, [pc, #256]	@ (80194f8 <USB_ActivateEndpoint+0x2b8>)
 80193f6:	430a      	orrs	r2, r1
 80193f8:	b292      	uxth	r2, r2
 80193fa:	801a      	strh	r2, [r3, #0]
 80193fc:	e2b4      	b.n	8019968 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80193fe:	687a      	ldr	r2, [r7, #4]
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	18d3      	adds	r3, r2, r3
 8019408:	881b      	ldrh	r3, [r3, #0]
 801940a:	b29a      	uxth	r2, r3
 801940c:	200e      	movs	r0, #14
 801940e:	183b      	adds	r3, r7, r0
 8019410:	493c      	ldr	r1, [pc, #240]	@ (8019504 <USB_ActivateEndpoint+0x2c4>)
 8019412:	400a      	ands	r2, r1
 8019414:	801a      	strh	r2, [r3, #0]
 8019416:	687a      	ldr	r2, [r7, #4]
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	781b      	ldrb	r3, [r3, #0]
 801941c:	009b      	lsls	r3, r3, #2
 801941e:	18d3      	adds	r3, r2, r3
 8019420:	183a      	adds	r2, r7, r0
 8019422:	8812      	ldrh	r2, [r2, #0]
 8019424:	4934      	ldr	r1, [pc, #208]	@ (80194f8 <USB_ActivateEndpoint+0x2b8>)
 8019426:	430a      	orrs	r2, r1
 8019428:	b292      	uxth	r2, r2
 801942a:	801a      	strh	r2, [r3, #0]
 801942c:	e29c      	b.n	8019968 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	633b      	str	r3, [r7, #48]	@ 0x30
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2250      	movs	r2, #80	@ 0x50
 8019436:	5a9b      	ldrh	r3, [r3, r2]
 8019438:	b29b      	uxth	r3, r3
 801943a:	001a      	movs	r2, r3
 801943c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801943e:	189b      	adds	r3, r3, r2
 8019440:	633b      	str	r3, [r7, #48]	@ 0x30
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	00da      	lsls	r2, r3, #3
 8019448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801944a:	18d3      	adds	r3, r2, r3
 801944c:	4a2e      	ldr	r2, [pc, #184]	@ (8019508 <USB_ActivateEndpoint+0x2c8>)
 801944e:	4694      	mov	ip, r2
 8019450:	4463      	add	r3, ip
 8019452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	88db      	ldrh	r3, [r3, #6]
 8019458:	085b      	lsrs	r3, r3, #1
 801945a:	b29b      	uxth	r3, r3
 801945c:	18db      	adds	r3, r3, r3
 801945e:	b29a      	uxth	r2, r3
 8019460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019462:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2250      	movs	r2, #80	@ 0x50
 801946c:	5a9b      	ldrh	r3, [r3, r2]
 801946e:	b29b      	uxth	r3, r3
 8019470:	001a      	movs	r2, r3
 8019472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019474:	189b      	adds	r3, r3, r2
 8019476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	781b      	ldrb	r3, [r3, #0]
 801947c:	00da      	lsls	r2, r3, #3
 801947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019480:	18d3      	adds	r3, r2, r3
 8019482:	4a22      	ldr	r2, [pc, #136]	@ (801950c <USB_ActivateEndpoint+0x2cc>)
 8019484:	4694      	mov	ip, r2
 8019486:	4463      	add	r3, ip
 8019488:	627b      	str	r3, [r7, #36]	@ 0x24
 801948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948c:	881b      	ldrh	r3, [r3, #0]
 801948e:	b29b      	uxth	r3, r3
 8019490:	059b      	lsls	r3, r3, #22
 8019492:	0d9b      	lsrs	r3, r3, #22
 8019494:	b29a      	uxth	r2, r3
 8019496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019498:	801a      	strh	r2, [r3, #0]
 801949a:	683b      	ldr	r3, [r7, #0]
 801949c:	691b      	ldr	r3, [r3, #16]
 801949e:	2b3e      	cmp	r3, #62	@ 0x3e
 80194a0:	d91a      	bls.n	80194d8 <USB_ActivateEndpoint+0x298>
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	691b      	ldr	r3, [r3, #16]
 80194a6:	095b      	lsrs	r3, r3, #5
 80194a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	691b      	ldr	r3, [r3, #16]
 80194ae:	221f      	movs	r2, #31
 80194b0:	4013      	ands	r3, r2
 80194b2:	d102      	bne.n	80194ba <USB_ActivateEndpoint+0x27a>
 80194b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194b6:	3b01      	subs	r3, #1
 80194b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80194ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194bc:	881b      	ldrh	r3, [r3, #0]
 80194be:	b29a      	uxth	r2, r3
 80194c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194c2:	b29b      	uxth	r3, r3
 80194c4:	029b      	lsls	r3, r3, #10
 80194c6:	b29b      	uxth	r3, r3
 80194c8:	4313      	orrs	r3, r2
 80194ca:	b29b      	uxth	r3, r3
 80194cc:	4a10      	ldr	r2, [pc, #64]	@ (8019510 <USB_ActivateEndpoint+0x2d0>)
 80194ce:	4313      	orrs	r3, r2
 80194d0:	b29a      	uxth	r2, r3
 80194d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d4:	801a      	strh	r2, [r3, #0]
 80194d6:	e034      	b.n	8019542 <USB_ActivateEndpoint+0x302>
 80194d8:	683b      	ldr	r3, [r7, #0]
 80194da:	691b      	ldr	r3, [r3, #16]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d119      	bne.n	8019514 <USB_ActivateEndpoint+0x2d4>
 80194e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194e2:	881b      	ldrh	r3, [r3, #0]
 80194e4:	b29b      	uxth	r3, r3
 80194e6:	4a0a      	ldr	r2, [pc, #40]	@ (8019510 <USB_ActivateEndpoint+0x2d0>)
 80194e8:	4313      	orrs	r3, r2
 80194ea:	b29a      	uxth	r2, r3
 80194ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194ee:	801a      	strh	r2, [r3, #0]
 80194f0:	e027      	b.n	8019542 <USB_ActivateEndpoint+0x302>
 80194f2:	46c0      	nop			@ (mov r8, r8)
 80194f4:	ffff898f 	.word	0xffff898f
 80194f8:	ffff8080 	.word	0xffff8080
 80194fc:	ffff8f8f 	.word	0xffff8f8f
 8019500:	ffff80c0 	.word	0xffff80c0
 8019504:	ffff8fbf 	.word	0xffff8fbf
 8019508:	00000404 	.word	0x00000404
 801950c:	00000406 	.word	0x00000406
 8019510:	ffff8000 	.word	0xffff8000
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	691b      	ldr	r3, [r3, #16]
 8019518:	085b      	lsrs	r3, r3, #1
 801951a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	691b      	ldr	r3, [r3, #16]
 8019520:	2201      	movs	r2, #1
 8019522:	4013      	ands	r3, r2
 8019524:	d002      	beq.n	801952c <USB_ActivateEndpoint+0x2ec>
 8019526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019528:	3301      	adds	r3, #1
 801952a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801952e:	881b      	ldrh	r3, [r3, #0]
 8019530:	b29a      	uxth	r2, r3
 8019532:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019534:	b29b      	uxth	r3, r3
 8019536:	029b      	lsls	r3, r3, #10
 8019538:	b29b      	uxth	r3, r3
 801953a:	4313      	orrs	r3, r2
 801953c:	b29a      	uxth	r2, r3
 801953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019540:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019542:	687a      	ldr	r2, [r7, #4]
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	781b      	ldrb	r3, [r3, #0]
 8019548:	009b      	lsls	r3, r3, #2
 801954a:	18d2      	adds	r2, r2, r3
 801954c:	2122      	movs	r1, #34	@ 0x22
 801954e:	187b      	adds	r3, r7, r1
 8019550:	8812      	ldrh	r2, [r2, #0]
 8019552:	801a      	strh	r2, [r3, #0]
 8019554:	187b      	adds	r3, r7, r1
 8019556:	881a      	ldrh	r2, [r3, #0]
 8019558:	2380      	movs	r3, #128	@ 0x80
 801955a:	01db      	lsls	r3, r3, #7
 801955c:	4013      	ands	r3, r2
 801955e:	d016      	beq.n	801958e <USB_ActivateEndpoint+0x34e>
 8019560:	687a      	ldr	r2, [r7, #4]
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	781b      	ldrb	r3, [r3, #0]
 8019566:	009b      	lsls	r3, r3, #2
 8019568:	18d3      	adds	r3, r2, r3
 801956a:	881b      	ldrh	r3, [r3, #0]
 801956c:	b29a      	uxth	r2, r3
 801956e:	2020      	movs	r0, #32
 8019570:	183b      	adds	r3, r7, r0
 8019572:	49dd      	ldr	r1, [pc, #884]	@ (80198e8 <USB_ActivateEndpoint+0x6a8>)
 8019574:	400a      	ands	r2, r1
 8019576:	801a      	strh	r2, [r3, #0]
 8019578:	687a      	ldr	r2, [r7, #4]
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	18d3      	adds	r3, r2, r3
 8019582:	183a      	adds	r2, r7, r0
 8019584:	8812      	ldrh	r2, [r2, #0]
 8019586:	49d9      	ldr	r1, [pc, #868]	@ (80198ec <USB_ActivateEndpoint+0x6ac>)
 8019588:	430a      	orrs	r2, r1
 801958a:	b292      	uxth	r2, r2
 801958c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d125      	bne.n	80195e2 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019596:	687a      	ldr	r2, [r7, #4]
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	781b      	ldrb	r3, [r3, #0]
 801959c:	009b      	lsls	r3, r3, #2
 801959e:	18d3      	adds	r3, r2, r3
 80195a0:	881b      	ldrh	r3, [r3, #0]
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	201c      	movs	r0, #28
 80195a6:	183b      	adds	r3, r7, r0
 80195a8:	49d1      	ldr	r1, [pc, #836]	@ (80198f0 <USB_ActivateEndpoint+0x6b0>)
 80195aa:	400a      	ands	r2, r1
 80195ac:	801a      	strh	r2, [r3, #0]
 80195ae:	183b      	adds	r3, r7, r0
 80195b0:	183a      	adds	r2, r7, r0
 80195b2:	8812      	ldrh	r2, [r2, #0]
 80195b4:	2180      	movs	r1, #128	@ 0x80
 80195b6:	0149      	lsls	r1, r1, #5
 80195b8:	404a      	eors	r2, r1
 80195ba:	801a      	strh	r2, [r3, #0]
 80195bc:	183b      	adds	r3, r7, r0
 80195be:	183a      	adds	r2, r7, r0
 80195c0:	8812      	ldrh	r2, [r2, #0]
 80195c2:	2180      	movs	r1, #128	@ 0x80
 80195c4:	0189      	lsls	r1, r1, #6
 80195c6:	404a      	eors	r2, r1
 80195c8:	801a      	strh	r2, [r3, #0]
 80195ca:	687a      	ldr	r2, [r7, #4]
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	781b      	ldrb	r3, [r3, #0]
 80195d0:	009b      	lsls	r3, r3, #2
 80195d2:	18d3      	adds	r3, r2, r3
 80195d4:	183a      	adds	r2, r7, r0
 80195d6:	8812      	ldrh	r2, [r2, #0]
 80195d8:	49c6      	ldr	r1, [pc, #792]	@ (80198f4 <USB_ActivateEndpoint+0x6b4>)
 80195da:	430a      	orrs	r2, r1
 80195dc:	b292      	uxth	r2, r2
 80195de:	801a      	strh	r2, [r3, #0]
 80195e0:	e1c2      	b.n	8019968 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80195e2:	687a      	ldr	r2, [r7, #4]
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	009b      	lsls	r3, r3, #2
 80195ea:	18d3      	adds	r3, r2, r3
 80195ec:	881b      	ldrh	r3, [r3, #0]
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	201e      	movs	r0, #30
 80195f2:	183b      	adds	r3, r7, r0
 80195f4:	49be      	ldr	r1, [pc, #760]	@ (80198f0 <USB_ActivateEndpoint+0x6b0>)
 80195f6:	400a      	ands	r2, r1
 80195f8:	801a      	strh	r2, [r3, #0]
 80195fa:	183b      	adds	r3, r7, r0
 80195fc:	183a      	adds	r2, r7, r0
 80195fe:	8812      	ldrh	r2, [r2, #0]
 8019600:	2180      	movs	r1, #128	@ 0x80
 8019602:	0189      	lsls	r1, r1, #6
 8019604:	404a      	eors	r2, r1
 8019606:	801a      	strh	r2, [r3, #0]
 8019608:	687a      	ldr	r2, [r7, #4]
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	009b      	lsls	r3, r3, #2
 8019610:	18d3      	adds	r3, r2, r3
 8019612:	183a      	adds	r2, r7, r0
 8019614:	8812      	ldrh	r2, [r2, #0]
 8019616:	49b7      	ldr	r1, [pc, #732]	@ (80198f4 <USB_ActivateEndpoint+0x6b4>)
 8019618:	430a      	orrs	r2, r1
 801961a:	b292      	uxth	r2, r2
 801961c:	801a      	strh	r2, [r3, #0]
 801961e:	e1a3      	b.n	8019968 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	78db      	ldrb	r3, [r3, #3]
 8019624:	2b02      	cmp	r3, #2
 8019626:	d117      	bne.n	8019658 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	009b      	lsls	r3, r3, #2
 8019630:	18d3      	adds	r3, r2, r3
 8019632:	881b      	ldrh	r3, [r3, #0]
 8019634:	b29a      	uxth	r2, r3
 8019636:	2062      	movs	r0, #98	@ 0x62
 8019638:	183b      	adds	r3, r7, r0
 801963a:	49ab      	ldr	r1, [pc, #684]	@ (80198e8 <USB_ActivateEndpoint+0x6a8>)
 801963c:	400a      	ands	r2, r1
 801963e:	801a      	strh	r2, [r3, #0]
 8019640:	687a      	ldr	r2, [r7, #4]
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	781b      	ldrb	r3, [r3, #0]
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	18d3      	adds	r3, r2, r3
 801964a:	183a      	adds	r2, r7, r0
 801964c:	8812      	ldrh	r2, [r2, #0]
 801964e:	49aa      	ldr	r1, [pc, #680]	@ (80198f8 <USB_ActivateEndpoint+0x6b8>)
 8019650:	430a      	orrs	r2, r1
 8019652:	b292      	uxth	r2, r2
 8019654:	801a      	strh	r2, [r3, #0]
 8019656:	e016      	b.n	8019686 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	683b      	ldr	r3, [r7, #0]
 801965c:	781b      	ldrb	r3, [r3, #0]
 801965e:	009b      	lsls	r3, r3, #2
 8019660:	18d3      	adds	r3, r2, r3
 8019662:	881b      	ldrh	r3, [r3, #0]
 8019664:	b29a      	uxth	r2, r3
 8019666:	2064      	movs	r0, #100	@ 0x64
 8019668:	183b      	adds	r3, r7, r0
 801966a:	49a4      	ldr	r1, [pc, #656]	@ (80198fc <USB_ActivateEndpoint+0x6bc>)
 801966c:	400a      	ands	r2, r1
 801966e:	801a      	strh	r2, [r3, #0]
 8019670:	687a      	ldr	r2, [r7, #4]
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	781b      	ldrb	r3, [r3, #0]
 8019676:	009b      	lsls	r3, r3, #2
 8019678:	18d3      	adds	r3, r2, r3
 801967a:	183a      	adds	r2, r7, r0
 801967c:	8812      	ldrh	r2, [r2, #0]
 801967e:	499d      	ldr	r1, [pc, #628]	@ (80198f4 <USB_ActivateEndpoint+0x6b4>)
 8019680:	430a      	orrs	r2, r1
 8019682:	b292      	uxth	r2, r2
 8019684:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2250      	movs	r2, #80	@ 0x50
 801968e:	5a9b      	ldrh	r3, [r3, r2]
 8019690:	b29b      	uxth	r3, r3
 8019692:	001a      	movs	r2, r3
 8019694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019696:	189b      	adds	r3, r3, r2
 8019698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801969a:	683b      	ldr	r3, [r7, #0]
 801969c:	781b      	ldrb	r3, [r3, #0]
 801969e:	00da      	lsls	r2, r3, #3
 80196a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80196a2:	18d3      	adds	r3, r2, r3
 80196a4:	2280      	movs	r2, #128	@ 0x80
 80196a6:	00d2      	lsls	r2, r2, #3
 80196a8:	4694      	mov	ip, r2
 80196aa:	4463      	add	r3, ip
 80196ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	891b      	ldrh	r3, [r3, #8]
 80196b2:	085b      	lsrs	r3, r3, #1
 80196b4:	b29b      	uxth	r3, r3
 80196b6:	18db      	adds	r3, r3, r3
 80196b8:	b29a      	uxth	r2, r3
 80196ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80196bc:	801a      	strh	r2, [r3, #0]
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	2250      	movs	r2, #80	@ 0x50
 80196c6:	5a9b      	ldrh	r3, [r3, r2]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	001a      	movs	r2, r3
 80196cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196ce:	189b      	adds	r3, r3, r2
 80196d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	781b      	ldrb	r3, [r3, #0]
 80196d6:	00da      	lsls	r2, r3, #3
 80196d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196da:	18d3      	adds	r3, r2, r3
 80196dc:	4a88      	ldr	r2, [pc, #544]	@ (8019900 <USB_ActivateEndpoint+0x6c0>)
 80196de:	4694      	mov	ip, r2
 80196e0:	4463      	add	r3, ip
 80196e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	895b      	ldrh	r3, [r3, #10]
 80196e8:	085b      	lsrs	r3, r3, #1
 80196ea:	b29b      	uxth	r3, r3
 80196ec:	18db      	adds	r3, r3, r3
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80196f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	785b      	ldrb	r3, [r3, #1]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d000      	beq.n	80196fe <USB_ActivateEndpoint+0x4be>
 80196fc:	e087      	b.n	801980e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80196fe:	687a      	ldr	r2, [r7, #4]
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	18d2      	adds	r2, r2, r3
 8019708:	2140      	movs	r1, #64	@ 0x40
 801970a:	187b      	adds	r3, r7, r1
 801970c:	8812      	ldrh	r2, [r2, #0]
 801970e:	801a      	strh	r2, [r3, #0]
 8019710:	187b      	adds	r3, r7, r1
 8019712:	881a      	ldrh	r2, [r3, #0]
 8019714:	2380      	movs	r3, #128	@ 0x80
 8019716:	01db      	lsls	r3, r3, #7
 8019718:	4013      	ands	r3, r2
 801971a:	d016      	beq.n	801974a <USB_ActivateEndpoint+0x50a>
 801971c:	687a      	ldr	r2, [r7, #4]
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	18d3      	adds	r3, r2, r3
 8019726:	881b      	ldrh	r3, [r3, #0]
 8019728:	b29a      	uxth	r2, r3
 801972a:	203e      	movs	r0, #62	@ 0x3e
 801972c:	183b      	adds	r3, r7, r0
 801972e:	496e      	ldr	r1, [pc, #440]	@ (80198e8 <USB_ActivateEndpoint+0x6a8>)
 8019730:	400a      	ands	r2, r1
 8019732:	801a      	strh	r2, [r3, #0]
 8019734:	687a      	ldr	r2, [r7, #4]
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	009b      	lsls	r3, r3, #2
 801973c:	18d3      	adds	r3, r2, r3
 801973e:	183a      	adds	r2, r7, r0
 8019740:	8812      	ldrh	r2, [r2, #0]
 8019742:	496a      	ldr	r1, [pc, #424]	@ (80198ec <USB_ActivateEndpoint+0x6ac>)
 8019744:	430a      	orrs	r2, r1
 8019746:	b292      	uxth	r2, r2
 8019748:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801974a:	687a      	ldr	r2, [r7, #4]
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	18d2      	adds	r2, r2, r3
 8019754:	213c      	movs	r1, #60	@ 0x3c
 8019756:	187b      	adds	r3, r7, r1
 8019758:	8812      	ldrh	r2, [r2, #0]
 801975a:	801a      	strh	r2, [r3, #0]
 801975c:	187b      	adds	r3, r7, r1
 801975e:	881b      	ldrh	r3, [r3, #0]
 8019760:	2240      	movs	r2, #64	@ 0x40
 8019762:	4013      	ands	r3, r2
 8019764:	d016      	beq.n	8019794 <USB_ActivateEndpoint+0x554>
 8019766:	687a      	ldr	r2, [r7, #4]
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	781b      	ldrb	r3, [r3, #0]
 801976c:	009b      	lsls	r3, r3, #2
 801976e:	18d3      	adds	r3, r2, r3
 8019770:	881b      	ldrh	r3, [r3, #0]
 8019772:	b29a      	uxth	r2, r3
 8019774:	203a      	movs	r0, #58	@ 0x3a
 8019776:	183b      	adds	r3, r7, r0
 8019778:	495b      	ldr	r1, [pc, #364]	@ (80198e8 <USB_ActivateEndpoint+0x6a8>)
 801977a:	400a      	ands	r2, r1
 801977c:	801a      	strh	r2, [r3, #0]
 801977e:	687a      	ldr	r2, [r7, #4]
 8019780:	683b      	ldr	r3, [r7, #0]
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	009b      	lsls	r3, r3, #2
 8019786:	18d3      	adds	r3, r2, r3
 8019788:	183a      	adds	r2, r7, r0
 801978a:	8812      	ldrh	r2, [r2, #0]
 801978c:	495d      	ldr	r1, [pc, #372]	@ (8019904 <USB_ActivateEndpoint+0x6c4>)
 801978e:	430a      	orrs	r2, r1
 8019790:	b292      	uxth	r2, r2
 8019792:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019794:	687a      	ldr	r2, [r7, #4]
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	781b      	ldrb	r3, [r3, #0]
 801979a:	009b      	lsls	r3, r3, #2
 801979c:	18d3      	adds	r3, r2, r3
 801979e:	881b      	ldrh	r3, [r3, #0]
 80197a0:	b29a      	uxth	r2, r3
 80197a2:	2038      	movs	r0, #56	@ 0x38
 80197a4:	183b      	adds	r3, r7, r0
 80197a6:	4952      	ldr	r1, [pc, #328]	@ (80198f0 <USB_ActivateEndpoint+0x6b0>)
 80197a8:	400a      	ands	r2, r1
 80197aa:	801a      	strh	r2, [r3, #0]
 80197ac:	183b      	adds	r3, r7, r0
 80197ae:	183a      	adds	r2, r7, r0
 80197b0:	8812      	ldrh	r2, [r2, #0]
 80197b2:	2180      	movs	r1, #128	@ 0x80
 80197b4:	0149      	lsls	r1, r1, #5
 80197b6:	404a      	eors	r2, r1
 80197b8:	801a      	strh	r2, [r3, #0]
 80197ba:	183b      	adds	r3, r7, r0
 80197bc:	183a      	adds	r2, r7, r0
 80197be:	8812      	ldrh	r2, [r2, #0]
 80197c0:	2180      	movs	r1, #128	@ 0x80
 80197c2:	0189      	lsls	r1, r1, #6
 80197c4:	404a      	eors	r2, r1
 80197c6:	801a      	strh	r2, [r3, #0]
 80197c8:	687a      	ldr	r2, [r7, #4]
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	781b      	ldrb	r3, [r3, #0]
 80197ce:	009b      	lsls	r3, r3, #2
 80197d0:	18d3      	adds	r3, r2, r3
 80197d2:	183a      	adds	r2, r7, r0
 80197d4:	8812      	ldrh	r2, [r2, #0]
 80197d6:	4947      	ldr	r1, [pc, #284]	@ (80198f4 <USB_ActivateEndpoint+0x6b4>)
 80197d8:	430a      	orrs	r2, r1
 80197da:	b292      	uxth	r2, r2
 80197dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80197de:	687a      	ldr	r2, [r7, #4]
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	781b      	ldrb	r3, [r3, #0]
 80197e4:	009b      	lsls	r3, r3, #2
 80197e6:	18d3      	adds	r3, r2, r3
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	b29a      	uxth	r2, r3
 80197ec:	2036      	movs	r0, #54	@ 0x36
 80197ee:	183b      	adds	r3, r7, r0
 80197f0:	4945      	ldr	r1, [pc, #276]	@ (8019908 <USB_ActivateEndpoint+0x6c8>)
 80197f2:	400a      	ands	r2, r1
 80197f4:	801a      	strh	r2, [r3, #0]
 80197f6:	687a      	ldr	r2, [r7, #4]
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	009b      	lsls	r3, r3, #2
 80197fe:	18d3      	adds	r3, r2, r3
 8019800:	183a      	adds	r2, r7, r0
 8019802:	8812      	ldrh	r2, [r2, #0]
 8019804:	493b      	ldr	r1, [pc, #236]	@ (80198f4 <USB_ActivateEndpoint+0x6b4>)
 8019806:	430a      	orrs	r2, r1
 8019808:	b292      	uxth	r2, r2
 801980a:	801a      	strh	r2, [r3, #0]
 801980c:	e0ac      	b.n	8019968 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801980e:	687a      	ldr	r2, [r7, #4]
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	781b      	ldrb	r3, [r3, #0]
 8019814:	009b      	lsls	r3, r3, #2
 8019816:	18d2      	adds	r2, r2, r3
 8019818:	214e      	movs	r1, #78	@ 0x4e
 801981a:	187b      	adds	r3, r7, r1
 801981c:	8812      	ldrh	r2, [r2, #0]
 801981e:	801a      	strh	r2, [r3, #0]
 8019820:	187b      	adds	r3, r7, r1
 8019822:	881a      	ldrh	r2, [r3, #0]
 8019824:	2380      	movs	r3, #128	@ 0x80
 8019826:	01db      	lsls	r3, r3, #7
 8019828:	4013      	ands	r3, r2
 801982a:	d016      	beq.n	801985a <USB_ActivateEndpoint+0x61a>
 801982c:	687a      	ldr	r2, [r7, #4]
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	009b      	lsls	r3, r3, #2
 8019834:	18d3      	adds	r3, r2, r3
 8019836:	881b      	ldrh	r3, [r3, #0]
 8019838:	b29a      	uxth	r2, r3
 801983a:	204c      	movs	r0, #76	@ 0x4c
 801983c:	183b      	adds	r3, r7, r0
 801983e:	492a      	ldr	r1, [pc, #168]	@ (80198e8 <USB_ActivateEndpoint+0x6a8>)
 8019840:	400a      	ands	r2, r1
 8019842:	801a      	strh	r2, [r3, #0]
 8019844:	687a      	ldr	r2, [r7, #4]
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	009b      	lsls	r3, r3, #2
 801984c:	18d3      	adds	r3, r2, r3
 801984e:	183a      	adds	r2, r7, r0
 8019850:	8812      	ldrh	r2, [r2, #0]
 8019852:	4926      	ldr	r1, [pc, #152]	@ (80198ec <USB_ActivateEndpoint+0x6ac>)
 8019854:	430a      	orrs	r2, r1
 8019856:	b292      	uxth	r2, r2
 8019858:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801985a:	687a      	ldr	r2, [r7, #4]
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	781b      	ldrb	r3, [r3, #0]
 8019860:	009b      	lsls	r3, r3, #2
 8019862:	18d2      	adds	r2, r2, r3
 8019864:	214a      	movs	r1, #74	@ 0x4a
 8019866:	187b      	adds	r3, r7, r1
 8019868:	8812      	ldrh	r2, [r2, #0]
 801986a:	801a      	strh	r2, [r3, #0]
 801986c:	187b      	adds	r3, r7, r1
 801986e:	881b      	ldrh	r3, [r3, #0]
 8019870:	2240      	movs	r2, #64	@ 0x40
 8019872:	4013      	ands	r3, r2
 8019874:	d016      	beq.n	80198a4 <USB_ActivateEndpoint+0x664>
 8019876:	687a      	ldr	r2, [r7, #4]
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	781b      	ldrb	r3, [r3, #0]
 801987c:	009b      	lsls	r3, r3, #2
 801987e:	18d3      	adds	r3, r2, r3
 8019880:	881b      	ldrh	r3, [r3, #0]
 8019882:	b29a      	uxth	r2, r3
 8019884:	2048      	movs	r0, #72	@ 0x48
 8019886:	183b      	adds	r3, r7, r0
 8019888:	4917      	ldr	r1, [pc, #92]	@ (80198e8 <USB_ActivateEndpoint+0x6a8>)
 801988a:	400a      	ands	r2, r1
 801988c:	801a      	strh	r2, [r3, #0]
 801988e:	687a      	ldr	r2, [r7, #4]
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	18d3      	adds	r3, r2, r3
 8019898:	183a      	adds	r2, r7, r0
 801989a:	8812      	ldrh	r2, [r2, #0]
 801989c:	4919      	ldr	r1, [pc, #100]	@ (8019904 <USB_ActivateEndpoint+0x6c4>)
 801989e:	430a      	orrs	r2, r1
 80198a0:	b292      	uxth	r2, r2
 80198a2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	78db      	ldrb	r3, [r3, #3]
 80198a8:	2b01      	cmp	r3, #1
 80198aa:	d02f      	beq.n	801990c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	683b      	ldr	r3, [r7, #0]
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	18d3      	adds	r3, r2, r3
 80198b6:	881b      	ldrh	r3, [r3, #0]
 80198b8:	b29a      	uxth	r2, r3
 80198ba:	2044      	movs	r0, #68	@ 0x44
 80198bc:	183b      	adds	r3, r7, r0
 80198be:	4912      	ldr	r1, [pc, #72]	@ (8019908 <USB_ActivateEndpoint+0x6c8>)
 80198c0:	400a      	ands	r2, r1
 80198c2:	801a      	strh	r2, [r3, #0]
 80198c4:	183b      	adds	r3, r7, r0
 80198c6:	183a      	adds	r2, r7, r0
 80198c8:	8812      	ldrh	r2, [r2, #0]
 80198ca:	2120      	movs	r1, #32
 80198cc:	404a      	eors	r2, r1
 80198ce:	801a      	strh	r2, [r3, #0]
 80198d0:	687a      	ldr	r2, [r7, #4]
 80198d2:	683b      	ldr	r3, [r7, #0]
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	18d3      	adds	r3, r2, r3
 80198da:	183a      	adds	r2, r7, r0
 80198dc:	8812      	ldrh	r2, [r2, #0]
 80198de:	4905      	ldr	r1, [pc, #20]	@ (80198f4 <USB_ActivateEndpoint+0x6b4>)
 80198e0:	430a      	orrs	r2, r1
 80198e2:	b292      	uxth	r2, r2
 80198e4:	801a      	strh	r2, [r3, #0]
 80198e6:	e028      	b.n	801993a <USB_ActivateEndpoint+0x6fa>
 80198e8:	ffff8f8f 	.word	0xffff8f8f
 80198ec:	ffffc080 	.word	0xffffc080
 80198f0:	ffffbf8f 	.word	0xffffbf8f
 80198f4:	ffff8080 	.word	0xffff8080
 80198f8:	ffff8180 	.word	0xffff8180
 80198fc:	ffff8e8f 	.word	0xffff8e8f
 8019900:	00000404 	.word	0x00000404
 8019904:	ffff80c0 	.word	0xffff80c0
 8019908:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	009b      	lsls	r3, r3, #2
 8019914:	18d3      	adds	r3, r2, r3
 8019916:	881b      	ldrh	r3, [r3, #0]
 8019918:	b29a      	uxth	r2, r3
 801991a:	2046      	movs	r0, #70	@ 0x46
 801991c:	183b      	adds	r3, r7, r0
 801991e:	4916      	ldr	r1, [pc, #88]	@ (8019978 <USB_ActivateEndpoint+0x738>)
 8019920:	400a      	ands	r2, r1
 8019922:	801a      	strh	r2, [r3, #0]
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	781b      	ldrb	r3, [r3, #0]
 801992a:	009b      	lsls	r3, r3, #2
 801992c:	18d3      	adds	r3, r2, r3
 801992e:	183a      	adds	r2, r7, r0
 8019930:	8812      	ldrh	r2, [r2, #0]
 8019932:	4912      	ldr	r1, [pc, #72]	@ (801997c <USB_ActivateEndpoint+0x73c>)
 8019934:	430a      	orrs	r2, r1
 8019936:	b292      	uxth	r2, r2
 8019938:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	683b      	ldr	r3, [r7, #0]
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	009b      	lsls	r3, r3, #2
 8019942:	18d3      	adds	r3, r2, r3
 8019944:	881b      	ldrh	r3, [r3, #0]
 8019946:	b29a      	uxth	r2, r3
 8019948:	2042      	movs	r0, #66	@ 0x42
 801994a:	183b      	adds	r3, r7, r0
 801994c:	490c      	ldr	r1, [pc, #48]	@ (8019980 <USB_ActivateEndpoint+0x740>)
 801994e:	400a      	ands	r2, r1
 8019950:	801a      	strh	r2, [r3, #0]
 8019952:	687a      	ldr	r2, [r7, #4]
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	009b      	lsls	r3, r3, #2
 801995a:	18d3      	adds	r3, r2, r3
 801995c:	183a      	adds	r2, r7, r0
 801995e:	8812      	ldrh	r2, [r2, #0]
 8019960:	4906      	ldr	r1, [pc, #24]	@ (801997c <USB_ActivateEndpoint+0x73c>)
 8019962:	430a      	orrs	r2, r1
 8019964:	b292      	uxth	r2, r2
 8019966:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019968:	236f      	movs	r3, #111	@ 0x6f
 801996a:	18fb      	adds	r3, r7, r3
 801996c:	781b      	ldrb	r3, [r3, #0]
}
 801996e:	0018      	movs	r0, r3
 8019970:	46bd      	mov	sp, r7
 8019972:	b01c      	add	sp, #112	@ 0x70
 8019974:	bd80      	pop	{r7, pc}
 8019976:	46c0      	nop			@ (mov r8, r8)
 8019978:	ffff8fbf 	.word	0xffff8fbf
 801997c:	ffff8080 	.word	0xffff8080
 8019980:	ffffbf8f 	.word	0xffffbf8f

08019984 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b08c      	sub	sp, #48	@ 0x30
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801998e:	683b      	ldr	r3, [r7, #0]
 8019990:	7b1b      	ldrb	r3, [r3, #12]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d000      	beq.n	8019998 <USB_DeactivateEndpoint+0x14>
 8019996:	e07e      	b.n	8019a96 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	785b      	ldrb	r3, [r3, #1]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d03c      	beq.n	8019a1a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80199a0:	687a      	ldr	r2, [r7, #4]
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	781b      	ldrb	r3, [r3, #0]
 80199a6:	009b      	lsls	r3, r3, #2
 80199a8:	18d2      	adds	r2, r2, r3
 80199aa:	210c      	movs	r1, #12
 80199ac:	187b      	adds	r3, r7, r1
 80199ae:	8812      	ldrh	r2, [r2, #0]
 80199b0:	801a      	strh	r2, [r3, #0]
 80199b2:	187b      	adds	r3, r7, r1
 80199b4:	881b      	ldrh	r3, [r3, #0]
 80199b6:	2240      	movs	r2, #64	@ 0x40
 80199b8:	4013      	ands	r3, r2
 80199ba:	d016      	beq.n	80199ea <USB_DeactivateEndpoint+0x66>
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	009b      	lsls	r3, r3, #2
 80199c4:	18d3      	adds	r3, r2, r3
 80199c6:	881b      	ldrh	r3, [r3, #0]
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	200a      	movs	r0, #10
 80199cc:	183b      	adds	r3, r7, r0
 80199ce:	49c7      	ldr	r1, [pc, #796]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 80199d0:	400a      	ands	r2, r1
 80199d2:	801a      	strh	r2, [r3, #0]
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	781b      	ldrb	r3, [r3, #0]
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	18d3      	adds	r3, r2, r3
 80199de:	183a      	adds	r2, r7, r0
 80199e0:	8812      	ldrh	r2, [r2, #0]
 80199e2:	49c3      	ldr	r1, [pc, #780]	@ (8019cf0 <USB_DeactivateEndpoint+0x36c>)
 80199e4:	430a      	orrs	r2, r1
 80199e6:	b292      	uxth	r2, r2
 80199e8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80199ea:	687a      	ldr	r2, [r7, #4]
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	009b      	lsls	r3, r3, #2
 80199f2:	18d3      	adds	r3, r2, r3
 80199f4:	881b      	ldrh	r3, [r3, #0]
 80199f6:	b29a      	uxth	r2, r3
 80199f8:	2008      	movs	r0, #8
 80199fa:	183b      	adds	r3, r7, r0
 80199fc:	49bd      	ldr	r1, [pc, #756]	@ (8019cf4 <USB_DeactivateEndpoint+0x370>)
 80199fe:	400a      	ands	r2, r1
 8019a00:	801a      	strh	r2, [r3, #0]
 8019a02:	687a      	ldr	r2, [r7, #4]
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	781b      	ldrb	r3, [r3, #0]
 8019a08:	009b      	lsls	r3, r3, #2
 8019a0a:	18d3      	adds	r3, r2, r3
 8019a0c:	183a      	adds	r2, r7, r0
 8019a0e:	8812      	ldrh	r2, [r2, #0]
 8019a10:	49b9      	ldr	r1, [pc, #740]	@ (8019cf8 <USB_DeactivateEndpoint+0x374>)
 8019a12:	430a      	orrs	r2, r1
 8019a14:	b292      	uxth	r2, r2
 8019a16:	801a      	strh	r2, [r3, #0]
 8019a18:	e163      	b.n	8019ce2 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a1a:	687a      	ldr	r2, [r7, #4]
 8019a1c:	683b      	ldr	r3, [r7, #0]
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	009b      	lsls	r3, r3, #2
 8019a22:	18d2      	adds	r2, r2, r3
 8019a24:	2112      	movs	r1, #18
 8019a26:	187b      	adds	r3, r7, r1
 8019a28:	8812      	ldrh	r2, [r2, #0]
 8019a2a:	801a      	strh	r2, [r3, #0]
 8019a2c:	187b      	adds	r3, r7, r1
 8019a2e:	881a      	ldrh	r2, [r3, #0]
 8019a30:	2380      	movs	r3, #128	@ 0x80
 8019a32:	01db      	lsls	r3, r3, #7
 8019a34:	4013      	ands	r3, r2
 8019a36:	d016      	beq.n	8019a66 <USB_DeactivateEndpoint+0xe2>
 8019a38:	687a      	ldr	r2, [r7, #4]
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	781b      	ldrb	r3, [r3, #0]
 8019a3e:	009b      	lsls	r3, r3, #2
 8019a40:	18d3      	adds	r3, r2, r3
 8019a42:	881b      	ldrh	r3, [r3, #0]
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	2010      	movs	r0, #16
 8019a48:	183b      	adds	r3, r7, r0
 8019a4a:	49a8      	ldr	r1, [pc, #672]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019a4c:	400a      	ands	r2, r1
 8019a4e:	801a      	strh	r2, [r3, #0]
 8019a50:	687a      	ldr	r2, [r7, #4]
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	781b      	ldrb	r3, [r3, #0]
 8019a56:	009b      	lsls	r3, r3, #2
 8019a58:	18d3      	adds	r3, r2, r3
 8019a5a:	183a      	adds	r2, r7, r0
 8019a5c:	8812      	ldrh	r2, [r2, #0]
 8019a5e:	49a7      	ldr	r1, [pc, #668]	@ (8019cfc <USB_DeactivateEndpoint+0x378>)
 8019a60:	430a      	orrs	r2, r1
 8019a62:	b292      	uxth	r2, r2
 8019a64:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019a66:	687a      	ldr	r2, [r7, #4]
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	781b      	ldrb	r3, [r3, #0]
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	18d3      	adds	r3, r2, r3
 8019a70:	881b      	ldrh	r3, [r3, #0]
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	200e      	movs	r0, #14
 8019a76:	183b      	adds	r3, r7, r0
 8019a78:	49a1      	ldr	r1, [pc, #644]	@ (8019d00 <USB_DeactivateEndpoint+0x37c>)
 8019a7a:	400a      	ands	r2, r1
 8019a7c:	801a      	strh	r2, [r3, #0]
 8019a7e:	687a      	ldr	r2, [r7, #4]
 8019a80:	683b      	ldr	r3, [r7, #0]
 8019a82:	781b      	ldrb	r3, [r3, #0]
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	18d3      	adds	r3, r2, r3
 8019a88:	183a      	adds	r2, r7, r0
 8019a8a:	8812      	ldrh	r2, [r2, #0]
 8019a8c:	499a      	ldr	r1, [pc, #616]	@ (8019cf8 <USB_DeactivateEndpoint+0x374>)
 8019a8e:	430a      	orrs	r2, r1
 8019a90:	b292      	uxth	r2, r2
 8019a92:	801a      	strh	r2, [r3, #0]
 8019a94:	e125      	b.n	8019ce2 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	785b      	ldrb	r3, [r3, #1]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d000      	beq.n	8019aa0 <USB_DeactivateEndpoint+0x11c>
 8019a9e:	e090      	b.n	8019bc2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019aa0:	687a      	ldr	r2, [r7, #4]
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	009b      	lsls	r3, r3, #2
 8019aa8:	18d2      	adds	r2, r2, r3
 8019aaa:	2120      	movs	r1, #32
 8019aac:	187b      	adds	r3, r7, r1
 8019aae:	8812      	ldrh	r2, [r2, #0]
 8019ab0:	801a      	strh	r2, [r3, #0]
 8019ab2:	187b      	adds	r3, r7, r1
 8019ab4:	881a      	ldrh	r2, [r3, #0]
 8019ab6:	2380      	movs	r3, #128	@ 0x80
 8019ab8:	01db      	lsls	r3, r3, #7
 8019aba:	4013      	ands	r3, r2
 8019abc:	d016      	beq.n	8019aec <USB_DeactivateEndpoint+0x168>
 8019abe:	687a      	ldr	r2, [r7, #4]
 8019ac0:	683b      	ldr	r3, [r7, #0]
 8019ac2:	781b      	ldrb	r3, [r3, #0]
 8019ac4:	009b      	lsls	r3, r3, #2
 8019ac6:	18d3      	adds	r3, r2, r3
 8019ac8:	881b      	ldrh	r3, [r3, #0]
 8019aca:	b29a      	uxth	r2, r3
 8019acc:	201e      	movs	r0, #30
 8019ace:	183b      	adds	r3, r7, r0
 8019ad0:	4986      	ldr	r1, [pc, #536]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019ad2:	400a      	ands	r2, r1
 8019ad4:	801a      	strh	r2, [r3, #0]
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	683b      	ldr	r3, [r7, #0]
 8019ada:	781b      	ldrb	r3, [r3, #0]
 8019adc:	009b      	lsls	r3, r3, #2
 8019ade:	18d3      	adds	r3, r2, r3
 8019ae0:	183a      	adds	r2, r7, r0
 8019ae2:	8812      	ldrh	r2, [r2, #0]
 8019ae4:	4985      	ldr	r1, [pc, #532]	@ (8019cfc <USB_DeactivateEndpoint+0x378>)
 8019ae6:	430a      	orrs	r2, r1
 8019ae8:	b292      	uxth	r2, r2
 8019aea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019aec:	687a      	ldr	r2, [r7, #4]
 8019aee:	683b      	ldr	r3, [r7, #0]
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	009b      	lsls	r3, r3, #2
 8019af4:	18d2      	adds	r2, r2, r3
 8019af6:	211c      	movs	r1, #28
 8019af8:	187b      	adds	r3, r7, r1
 8019afa:	8812      	ldrh	r2, [r2, #0]
 8019afc:	801a      	strh	r2, [r3, #0]
 8019afe:	187b      	adds	r3, r7, r1
 8019b00:	881b      	ldrh	r3, [r3, #0]
 8019b02:	2240      	movs	r2, #64	@ 0x40
 8019b04:	4013      	ands	r3, r2
 8019b06:	d016      	beq.n	8019b36 <USB_DeactivateEndpoint+0x1b2>
 8019b08:	687a      	ldr	r2, [r7, #4]
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	781b      	ldrb	r3, [r3, #0]
 8019b0e:	009b      	lsls	r3, r3, #2
 8019b10:	18d3      	adds	r3, r2, r3
 8019b12:	881b      	ldrh	r3, [r3, #0]
 8019b14:	b29a      	uxth	r2, r3
 8019b16:	201a      	movs	r0, #26
 8019b18:	183b      	adds	r3, r7, r0
 8019b1a:	4974      	ldr	r1, [pc, #464]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019b1c:	400a      	ands	r2, r1
 8019b1e:	801a      	strh	r2, [r3, #0]
 8019b20:	687a      	ldr	r2, [r7, #4]
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	781b      	ldrb	r3, [r3, #0]
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	18d3      	adds	r3, r2, r3
 8019b2a:	183a      	adds	r2, r7, r0
 8019b2c:	8812      	ldrh	r2, [r2, #0]
 8019b2e:	4970      	ldr	r1, [pc, #448]	@ (8019cf0 <USB_DeactivateEndpoint+0x36c>)
 8019b30:	430a      	orrs	r2, r1
 8019b32:	b292      	uxth	r2, r2
 8019b34:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019b36:	687a      	ldr	r2, [r7, #4]
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	009b      	lsls	r3, r3, #2
 8019b3e:	18d3      	adds	r3, r2, r3
 8019b40:	881b      	ldrh	r3, [r3, #0]
 8019b42:	b29a      	uxth	r2, r3
 8019b44:	2018      	movs	r0, #24
 8019b46:	183b      	adds	r3, r7, r0
 8019b48:	4968      	ldr	r1, [pc, #416]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019b4a:	400a      	ands	r2, r1
 8019b4c:	801a      	strh	r2, [r3, #0]
 8019b4e:	687a      	ldr	r2, [r7, #4]
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	781b      	ldrb	r3, [r3, #0]
 8019b54:	009b      	lsls	r3, r3, #2
 8019b56:	18d3      	adds	r3, r2, r3
 8019b58:	183a      	adds	r2, r7, r0
 8019b5a:	8812      	ldrh	r2, [r2, #0]
 8019b5c:	4964      	ldr	r1, [pc, #400]	@ (8019cf0 <USB_DeactivateEndpoint+0x36c>)
 8019b5e:	430a      	orrs	r2, r1
 8019b60:	b292      	uxth	r2, r2
 8019b62:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019b64:	687a      	ldr	r2, [r7, #4]
 8019b66:	683b      	ldr	r3, [r7, #0]
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	009b      	lsls	r3, r3, #2
 8019b6c:	18d3      	adds	r3, r2, r3
 8019b6e:	881b      	ldrh	r3, [r3, #0]
 8019b70:	b29a      	uxth	r2, r3
 8019b72:	2016      	movs	r0, #22
 8019b74:	183b      	adds	r3, r7, r0
 8019b76:	4962      	ldr	r1, [pc, #392]	@ (8019d00 <USB_DeactivateEndpoint+0x37c>)
 8019b78:	400a      	ands	r2, r1
 8019b7a:	801a      	strh	r2, [r3, #0]
 8019b7c:	687a      	ldr	r2, [r7, #4]
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	009b      	lsls	r3, r3, #2
 8019b84:	18d3      	adds	r3, r2, r3
 8019b86:	183a      	adds	r2, r7, r0
 8019b88:	8812      	ldrh	r2, [r2, #0]
 8019b8a:	495b      	ldr	r1, [pc, #364]	@ (8019cf8 <USB_DeactivateEndpoint+0x374>)
 8019b8c:	430a      	orrs	r2, r1
 8019b8e:	b292      	uxth	r2, r2
 8019b90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019b92:	687a      	ldr	r2, [r7, #4]
 8019b94:	683b      	ldr	r3, [r7, #0]
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	009b      	lsls	r3, r3, #2
 8019b9a:	18d3      	adds	r3, r2, r3
 8019b9c:	881b      	ldrh	r3, [r3, #0]
 8019b9e:	b29a      	uxth	r2, r3
 8019ba0:	2014      	movs	r0, #20
 8019ba2:	183b      	adds	r3, r7, r0
 8019ba4:	4953      	ldr	r1, [pc, #332]	@ (8019cf4 <USB_DeactivateEndpoint+0x370>)
 8019ba6:	400a      	ands	r2, r1
 8019ba8:	801a      	strh	r2, [r3, #0]
 8019baa:	687a      	ldr	r2, [r7, #4]
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	781b      	ldrb	r3, [r3, #0]
 8019bb0:	009b      	lsls	r3, r3, #2
 8019bb2:	18d3      	adds	r3, r2, r3
 8019bb4:	183a      	adds	r2, r7, r0
 8019bb6:	8812      	ldrh	r2, [r2, #0]
 8019bb8:	494f      	ldr	r1, [pc, #316]	@ (8019cf8 <USB_DeactivateEndpoint+0x374>)
 8019bba:	430a      	orrs	r2, r1
 8019bbc:	b292      	uxth	r2, r2
 8019bbe:	801a      	strh	r2, [r3, #0]
 8019bc0:	e08f      	b.n	8019ce2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019bc2:	687a      	ldr	r2, [r7, #4]
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	781b      	ldrb	r3, [r3, #0]
 8019bc8:	009b      	lsls	r3, r3, #2
 8019bca:	18d2      	adds	r2, r2, r3
 8019bcc:	212e      	movs	r1, #46	@ 0x2e
 8019bce:	187b      	adds	r3, r7, r1
 8019bd0:	8812      	ldrh	r2, [r2, #0]
 8019bd2:	801a      	strh	r2, [r3, #0]
 8019bd4:	187b      	adds	r3, r7, r1
 8019bd6:	881a      	ldrh	r2, [r3, #0]
 8019bd8:	2380      	movs	r3, #128	@ 0x80
 8019bda:	01db      	lsls	r3, r3, #7
 8019bdc:	4013      	ands	r3, r2
 8019bde:	d016      	beq.n	8019c0e <USB_DeactivateEndpoint+0x28a>
 8019be0:	687a      	ldr	r2, [r7, #4]
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	781b      	ldrb	r3, [r3, #0]
 8019be6:	009b      	lsls	r3, r3, #2
 8019be8:	18d3      	adds	r3, r2, r3
 8019bea:	881b      	ldrh	r3, [r3, #0]
 8019bec:	b29a      	uxth	r2, r3
 8019bee:	202c      	movs	r0, #44	@ 0x2c
 8019bf0:	183b      	adds	r3, r7, r0
 8019bf2:	493e      	ldr	r1, [pc, #248]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019bf4:	400a      	ands	r2, r1
 8019bf6:	801a      	strh	r2, [r3, #0]
 8019bf8:	687a      	ldr	r2, [r7, #4]
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	009b      	lsls	r3, r3, #2
 8019c00:	18d3      	adds	r3, r2, r3
 8019c02:	183a      	adds	r2, r7, r0
 8019c04:	8812      	ldrh	r2, [r2, #0]
 8019c06:	493d      	ldr	r1, [pc, #244]	@ (8019cfc <USB_DeactivateEndpoint+0x378>)
 8019c08:	430a      	orrs	r2, r1
 8019c0a:	b292      	uxth	r2, r2
 8019c0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019c0e:	687a      	ldr	r2, [r7, #4]
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	781b      	ldrb	r3, [r3, #0]
 8019c14:	009b      	lsls	r3, r3, #2
 8019c16:	18d2      	adds	r2, r2, r3
 8019c18:	212a      	movs	r1, #42	@ 0x2a
 8019c1a:	187b      	adds	r3, r7, r1
 8019c1c:	8812      	ldrh	r2, [r2, #0]
 8019c1e:	801a      	strh	r2, [r3, #0]
 8019c20:	187b      	adds	r3, r7, r1
 8019c22:	881b      	ldrh	r3, [r3, #0]
 8019c24:	2240      	movs	r2, #64	@ 0x40
 8019c26:	4013      	ands	r3, r2
 8019c28:	d016      	beq.n	8019c58 <USB_DeactivateEndpoint+0x2d4>
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	781b      	ldrb	r3, [r3, #0]
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	18d3      	adds	r3, r2, r3
 8019c34:	881b      	ldrh	r3, [r3, #0]
 8019c36:	b29a      	uxth	r2, r3
 8019c38:	2028      	movs	r0, #40	@ 0x28
 8019c3a:	183b      	adds	r3, r7, r0
 8019c3c:	492b      	ldr	r1, [pc, #172]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019c3e:	400a      	ands	r2, r1
 8019c40:	801a      	strh	r2, [r3, #0]
 8019c42:	687a      	ldr	r2, [r7, #4]
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	781b      	ldrb	r3, [r3, #0]
 8019c48:	009b      	lsls	r3, r3, #2
 8019c4a:	18d3      	adds	r3, r2, r3
 8019c4c:	183a      	adds	r2, r7, r0
 8019c4e:	8812      	ldrh	r2, [r2, #0]
 8019c50:	4927      	ldr	r1, [pc, #156]	@ (8019cf0 <USB_DeactivateEndpoint+0x36c>)
 8019c52:	430a      	orrs	r2, r1
 8019c54:	b292      	uxth	r2, r2
 8019c56:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019c58:	687a      	ldr	r2, [r7, #4]
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	781b      	ldrb	r3, [r3, #0]
 8019c5e:	009b      	lsls	r3, r3, #2
 8019c60:	18d3      	adds	r3, r2, r3
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	b29a      	uxth	r2, r3
 8019c66:	2026      	movs	r0, #38	@ 0x26
 8019c68:	183b      	adds	r3, r7, r0
 8019c6a:	4920      	ldr	r1, [pc, #128]	@ (8019cec <USB_DeactivateEndpoint+0x368>)
 8019c6c:	400a      	ands	r2, r1
 8019c6e:	801a      	strh	r2, [r3, #0]
 8019c70:	687a      	ldr	r2, [r7, #4]
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	781b      	ldrb	r3, [r3, #0]
 8019c76:	009b      	lsls	r3, r3, #2
 8019c78:	18d3      	adds	r3, r2, r3
 8019c7a:	183a      	adds	r2, r7, r0
 8019c7c:	8812      	ldrh	r2, [r2, #0]
 8019c7e:	491f      	ldr	r1, [pc, #124]	@ (8019cfc <USB_DeactivateEndpoint+0x378>)
 8019c80:	430a      	orrs	r2, r1
 8019c82:	b292      	uxth	r2, r2
 8019c84:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c86:	687a      	ldr	r2, [r7, #4]
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	781b      	ldrb	r3, [r3, #0]
 8019c8c:	009b      	lsls	r3, r3, #2
 8019c8e:	18d3      	adds	r3, r2, r3
 8019c90:	881b      	ldrh	r3, [r3, #0]
 8019c92:	b29a      	uxth	r2, r3
 8019c94:	2024      	movs	r0, #36	@ 0x24
 8019c96:	183b      	adds	r3, r7, r0
 8019c98:	4916      	ldr	r1, [pc, #88]	@ (8019cf4 <USB_DeactivateEndpoint+0x370>)
 8019c9a:	400a      	ands	r2, r1
 8019c9c:	801a      	strh	r2, [r3, #0]
 8019c9e:	687a      	ldr	r2, [r7, #4]
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	781b      	ldrb	r3, [r3, #0]
 8019ca4:	009b      	lsls	r3, r3, #2
 8019ca6:	18d3      	adds	r3, r2, r3
 8019ca8:	183a      	adds	r2, r7, r0
 8019caa:	8812      	ldrh	r2, [r2, #0]
 8019cac:	4912      	ldr	r1, [pc, #72]	@ (8019cf8 <USB_DeactivateEndpoint+0x374>)
 8019cae:	430a      	orrs	r2, r1
 8019cb0:	b292      	uxth	r2, r2
 8019cb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019cb4:	687a      	ldr	r2, [r7, #4]
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	781b      	ldrb	r3, [r3, #0]
 8019cba:	009b      	lsls	r3, r3, #2
 8019cbc:	18d3      	adds	r3, r2, r3
 8019cbe:	881b      	ldrh	r3, [r3, #0]
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	2022      	movs	r0, #34	@ 0x22
 8019cc4:	183b      	adds	r3, r7, r0
 8019cc6:	490e      	ldr	r1, [pc, #56]	@ (8019d00 <USB_DeactivateEndpoint+0x37c>)
 8019cc8:	400a      	ands	r2, r1
 8019cca:	801a      	strh	r2, [r3, #0]
 8019ccc:	687a      	ldr	r2, [r7, #4]
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	009b      	lsls	r3, r3, #2
 8019cd4:	18d3      	adds	r3, r2, r3
 8019cd6:	183a      	adds	r2, r7, r0
 8019cd8:	8812      	ldrh	r2, [r2, #0]
 8019cda:	4907      	ldr	r1, [pc, #28]	@ (8019cf8 <USB_DeactivateEndpoint+0x374>)
 8019cdc:	430a      	orrs	r2, r1
 8019cde:	b292      	uxth	r2, r2
 8019ce0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019ce2:	2300      	movs	r3, #0
}
 8019ce4:	0018      	movs	r0, r3
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	b00c      	add	sp, #48	@ 0x30
 8019cea:	bd80      	pop	{r7, pc}
 8019cec:	ffff8f8f 	.word	0xffff8f8f
 8019cf0:	ffff80c0 	.word	0xffff80c0
 8019cf4:	ffff8fbf 	.word	0xffff8fbf
 8019cf8:	ffff8080 	.word	0xffff8080
 8019cfc:	ffffc080 	.word	0xffffc080
 8019d00:	ffffbf8f 	.word	0xffffbf8f

08019d04 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019d04:	b590      	push	{r4, r7, lr}
 8019d06:	b0c3      	sub	sp, #268	@ 0x10c
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
 8019d0c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	785b      	ldrb	r3, [r3, #1]
 8019d12:	2b01      	cmp	r3, #1
 8019d14:	d001      	beq.n	8019d1a <USB_EPStartXfer+0x16>
 8019d16:	f000 fd2d 	bl	801a774 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	699a      	ldr	r2, [r3, #24]
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	691b      	ldr	r3, [r3, #16]
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d905      	bls.n	8019d32 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	691b      	ldr	r3, [r3, #16]
 8019d2a:	1d7a      	adds	r2, r7, #5
 8019d2c:	32ff      	adds	r2, #255	@ 0xff
 8019d2e:	6013      	str	r3, [r2, #0]
 8019d30:	e004      	b.n	8019d3c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	699b      	ldr	r3, [r3, #24]
 8019d36:	1d7a      	adds	r2, r7, #5
 8019d38:	32ff      	adds	r2, #255	@ 0xff
 8019d3a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	7b1b      	ldrb	r3, [r3, #12]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d125      	bne.n	8019d90 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019d44:	683b      	ldr	r3, [r7, #0]
 8019d46:	6959      	ldr	r1, [r3, #20]
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	88da      	ldrh	r2, [r3, #6]
 8019d4c:	1d7b      	adds	r3, r7, #5
 8019d4e:	33ff      	adds	r3, #255	@ 0xff
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	b29b      	uxth	r3, r3
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f001 fa47 	bl	801b1e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	613b      	str	r3, [r7, #16]
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2250      	movs	r2, #80	@ 0x50
 8019d62:	5a9b      	ldrh	r3, [r3, r2]
 8019d64:	b29b      	uxth	r3, r3
 8019d66:	001a      	movs	r2, r3
 8019d68:	693b      	ldr	r3, [r7, #16]
 8019d6a:	189b      	adds	r3, r3, r2
 8019d6c:	613b      	str	r3, [r7, #16]
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	00da      	lsls	r2, r3, #3
 8019d74:	693b      	ldr	r3, [r7, #16]
 8019d76:	18d3      	adds	r3, r2, r3
 8019d78:	4ad7      	ldr	r2, [pc, #860]	@ (801a0d8 <USB_EPStartXfer+0x3d4>)
 8019d7a:	4694      	mov	ip, r2
 8019d7c:	4463      	add	r3, ip
 8019d7e:	60fb      	str	r3, [r7, #12]
 8019d80:	1d7b      	adds	r3, r7, #5
 8019d82:	33ff      	adds	r3, #255	@ 0xff
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	b29a      	uxth	r2, r3
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	801a      	strh	r2, [r3, #0]
 8019d8c:	f000 fccd 	bl	801a72a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	78db      	ldrb	r3, [r3, #3]
 8019d94:	2b02      	cmp	r3, #2
 8019d96:	d000      	beq.n	8019d9a <USB_EPStartXfer+0x96>
 8019d98:	e362      	b.n	801a460 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	6a1a      	ldr	r2, [r3, #32]
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	691b      	ldr	r3, [r3, #16]
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d800      	bhi.n	8019da8 <USB_EPStartXfer+0xa4>
 8019da6:	e309      	b.n	801a3bc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019da8:	687a      	ldr	r2, [r7, #4]
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	009b      	lsls	r3, r3, #2
 8019db0:	18d3      	adds	r3, r2, r3
 8019db2:	881b      	ldrh	r3, [r3, #0]
 8019db4:	b29a      	uxth	r2, r3
 8019db6:	2056      	movs	r0, #86	@ 0x56
 8019db8:	183b      	adds	r3, r7, r0
 8019dba:	49c8      	ldr	r1, [pc, #800]	@ (801a0dc <USB_EPStartXfer+0x3d8>)
 8019dbc:	400a      	ands	r2, r1
 8019dbe:	801a      	strh	r2, [r3, #0]
 8019dc0:	687a      	ldr	r2, [r7, #4]
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	781b      	ldrb	r3, [r3, #0]
 8019dc6:	009b      	lsls	r3, r3, #2
 8019dc8:	18d3      	adds	r3, r2, r3
 8019dca:	183a      	adds	r2, r7, r0
 8019dcc:	8812      	ldrh	r2, [r2, #0]
 8019dce:	49c4      	ldr	r1, [pc, #784]	@ (801a0e0 <USB_EPStartXfer+0x3dc>)
 8019dd0:	430a      	orrs	r2, r1
 8019dd2:	b292      	uxth	r2, r2
 8019dd4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019dd6:	683b      	ldr	r3, [r7, #0]
 8019dd8:	6a1a      	ldr	r2, [r3, #32]
 8019dda:	1d7b      	adds	r3, r7, #5
 8019ddc:	33ff      	adds	r3, #255	@ 0xff
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	1ad2      	subs	r2, r2, r3
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019de6:	687a      	ldr	r2, [r7, #4]
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	781b      	ldrb	r3, [r3, #0]
 8019dec:	009b      	lsls	r3, r3, #2
 8019dee:	18d3      	adds	r3, r2, r3
 8019df0:	881b      	ldrh	r3, [r3, #0]
 8019df2:	b29b      	uxth	r3, r3
 8019df4:	001a      	movs	r2, r3
 8019df6:	2340      	movs	r3, #64	@ 0x40
 8019df8:	4013      	ands	r3, r2
 8019dfa:	d100      	bne.n	8019dfe <USB_EPStartXfer+0xfa>
 8019dfc:	e176      	b.n	801a0ec <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	785b      	ldrb	r3, [r3, #1]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d000      	beq.n	8019e0c <USB_EPStartXfer+0x108>
 8019e0a:	e074      	b.n	8019ef6 <USB_EPStartXfer+0x1f2>
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2250      	movs	r2, #80	@ 0x50
 8019e14:	5a9b      	ldrh	r3, [r3, r2]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	001a      	movs	r2, r3
 8019e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e1c:	189b      	adds	r3, r3, r2
 8019e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	00da      	lsls	r2, r3, #3
 8019e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e28:	18d3      	adds	r3, r2, r3
 8019e2a:	4aae      	ldr	r2, [pc, #696]	@ (801a0e4 <USB_EPStartXfer+0x3e0>)
 8019e2c:	4694      	mov	ip, r2
 8019e2e:	4463      	add	r3, ip
 8019e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8019e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e34:	881b      	ldrh	r3, [r3, #0]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	059b      	lsls	r3, r3, #22
 8019e3a:	0d9b      	lsrs	r3, r3, #22
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e40:	801a      	strh	r2, [r3, #0]
 8019e42:	1d7b      	adds	r3, r7, #5
 8019e44:	33ff      	adds	r3, #255	@ 0xff
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e4a:	d924      	bls.n	8019e96 <USB_EPStartXfer+0x192>
 8019e4c:	1d7b      	adds	r3, r7, #5
 8019e4e:	33ff      	adds	r3, #255	@ 0xff
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	095b      	lsrs	r3, r3, #5
 8019e54:	1c7a      	adds	r2, r7, #1
 8019e56:	32ff      	adds	r2, #255	@ 0xff
 8019e58:	6013      	str	r3, [r2, #0]
 8019e5a:	1d7b      	adds	r3, r7, #5
 8019e5c:	33ff      	adds	r3, #255	@ 0xff
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	221f      	movs	r2, #31
 8019e62:	4013      	ands	r3, r2
 8019e64:	d106      	bne.n	8019e74 <USB_EPStartXfer+0x170>
 8019e66:	1c7b      	adds	r3, r7, #1
 8019e68:	33ff      	adds	r3, #255	@ 0xff
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	3b01      	subs	r3, #1
 8019e6e:	1c7a      	adds	r2, r7, #1
 8019e70:	32ff      	adds	r2, #255	@ 0xff
 8019e72:	6013      	str	r3, [r2, #0]
 8019e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e76:	881b      	ldrh	r3, [r3, #0]
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	1c7b      	adds	r3, r7, #1
 8019e7c:	33ff      	adds	r3, #255	@ 0xff
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	029b      	lsls	r3, r3, #10
 8019e84:	b29b      	uxth	r3, r3
 8019e86:	4313      	orrs	r3, r2
 8019e88:	b29b      	uxth	r3, r3
 8019e8a:	4a97      	ldr	r2, [pc, #604]	@ (801a0e8 <USB_EPStartXfer+0x3e4>)
 8019e8c:	4313      	orrs	r3, r2
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e92:	801a      	strh	r2, [r3, #0]
 8019e94:	e04a      	b.n	8019f2c <USB_EPStartXfer+0x228>
 8019e96:	1d7b      	adds	r3, r7, #5
 8019e98:	33ff      	adds	r3, #255	@ 0xff
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d108      	bne.n	8019eb2 <USB_EPStartXfer+0x1ae>
 8019ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ea2:	881b      	ldrh	r3, [r3, #0]
 8019ea4:	b29b      	uxth	r3, r3
 8019ea6:	4a90      	ldr	r2, [pc, #576]	@ (801a0e8 <USB_EPStartXfer+0x3e4>)
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	b29a      	uxth	r2, r3
 8019eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eae:	801a      	strh	r2, [r3, #0]
 8019eb0:	e03c      	b.n	8019f2c <USB_EPStartXfer+0x228>
 8019eb2:	1d7b      	adds	r3, r7, #5
 8019eb4:	33ff      	adds	r3, #255	@ 0xff
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	085b      	lsrs	r3, r3, #1
 8019eba:	1c7a      	adds	r2, r7, #1
 8019ebc:	32ff      	adds	r2, #255	@ 0xff
 8019ebe:	6013      	str	r3, [r2, #0]
 8019ec0:	1d7b      	adds	r3, r7, #5
 8019ec2:	33ff      	adds	r3, #255	@ 0xff
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	4013      	ands	r3, r2
 8019eca:	d006      	beq.n	8019eda <USB_EPStartXfer+0x1d6>
 8019ecc:	1c7b      	adds	r3, r7, #1
 8019ece:	33ff      	adds	r3, #255	@ 0xff
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	3301      	adds	r3, #1
 8019ed4:	1c7a      	adds	r2, r7, #1
 8019ed6:	32ff      	adds	r2, #255	@ 0xff
 8019ed8:	6013      	str	r3, [r2, #0]
 8019eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019edc:	881b      	ldrh	r3, [r3, #0]
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	1c7b      	adds	r3, r7, #1
 8019ee2:	33ff      	adds	r3, #255	@ 0xff
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	029b      	lsls	r3, r3, #10
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	4313      	orrs	r3, r2
 8019eee:	b29a      	uxth	r2, r3
 8019ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ef2:	801a      	strh	r2, [r3, #0]
 8019ef4:	e01a      	b.n	8019f2c <USB_EPStartXfer+0x228>
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	785b      	ldrb	r3, [r3, #1]
 8019efa:	2b01      	cmp	r3, #1
 8019efc:	d116      	bne.n	8019f2c <USB_EPStartXfer+0x228>
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2250      	movs	r2, #80	@ 0x50
 8019f02:	5a9b      	ldrh	r3, [r3, r2]
 8019f04:	b29b      	uxth	r3, r3
 8019f06:	001a      	movs	r2, r3
 8019f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f0a:	189b      	adds	r3, r3, r2
 8019f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	781b      	ldrb	r3, [r3, #0]
 8019f12:	00da      	lsls	r2, r3, #3
 8019f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f16:	18d3      	adds	r3, r2, r3
 8019f18:	4a72      	ldr	r2, [pc, #456]	@ (801a0e4 <USB_EPStartXfer+0x3e0>)
 8019f1a:	4694      	mov	ip, r2
 8019f1c:	4463      	add	r3, ip
 8019f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f20:	1d7b      	adds	r3, r7, #5
 8019f22:	33ff      	adds	r3, #255	@ 0xff
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	b29a      	uxth	r2, r3
 8019f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019f2c:	2076      	movs	r0, #118	@ 0x76
 8019f2e:	183b      	adds	r3, r7, r0
 8019f30:	683a      	ldr	r2, [r7, #0]
 8019f32:	8952      	ldrh	r2, [r2, #10]
 8019f34:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	6959      	ldr	r1, [r3, #20]
 8019f3a:	1d7b      	adds	r3, r7, #5
 8019f3c:	33ff      	adds	r3, #255	@ 0xff
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	b29c      	uxth	r4, r3
 8019f42:	183b      	adds	r3, r7, r0
 8019f44:	881a      	ldrh	r2, [r3, #0]
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	0023      	movs	r3, r4
 8019f4a:	f001 f94d 	bl	801b1e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	695a      	ldr	r2, [r3, #20]
 8019f52:	1d7b      	adds	r3, r7, #5
 8019f54:	33ff      	adds	r3, #255	@ 0xff
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	18d2      	adds	r2, r2, r3
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	6a1a      	ldr	r2, [r3, #32]
 8019f62:	683b      	ldr	r3, [r7, #0]
 8019f64:	691b      	ldr	r3, [r3, #16]
 8019f66:	429a      	cmp	r2, r3
 8019f68:	d908      	bls.n	8019f7c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019f6a:	683b      	ldr	r3, [r7, #0]
 8019f6c:	6a1a      	ldr	r2, [r3, #32]
 8019f6e:	1d7b      	adds	r3, r7, #5
 8019f70:	33ff      	adds	r3, #255	@ 0xff
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	1ad2      	subs	r2, r2, r3
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	621a      	str	r2, [r3, #32]
 8019f7a:	e007      	b.n	8019f8c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019f7c:	683b      	ldr	r3, [r7, #0]
 8019f7e:	6a1b      	ldr	r3, [r3, #32]
 8019f80:	1d7a      	adds	r2, r7, #5
 8019f82:	32ff      	adds	r2, #255	@ 0xff
 8019f84:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	2200      	movs	r2, #0
 8019f8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	785b      	ldrb	r3, [r3, #1]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d000      	beq.n	8019f96 <USB_EPStartXfer+0x292>
 8019f94:	e070      	b.n	801a078 <USB_EPStartXfer+0x374>
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	61bb      	str	r3, [r7, #24]
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	2250      	movs	r2, #80	@ 0x50
 8019f9e:	5a9b      	ldrh	r3, [r3, r2]
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	001a      	movs	r2, r3
 8019fa4:	69bb      	ldr	r3, [r7, #24]
 8019fa6:	189b      	adds	r3, r3, r2
 8019fa8:	61bb      	str	r3, [r7, #24]
 8019faa:	683b      	ldr	r3, [r7, #0]
 8019fac:	781b      	ldrb	r3, [r3, #0]
 8019fae:	00da      	lsls	r2, r3, #3
 8019fb0:	69bb      	ldr	r3, [r7, #24]
 8019fb2:	18d3      	adds	r3, r2, r3
 8019fb4:	4a48      	ldr	r2, [pc, #288]	@ (801a0d8 <USB_EPStartXfer+0x3d4>)
 8019fb6:	4694      	mov	ip, r2
 8019fb8:	4463      	add	r3, ip
 8019fba:	617b      	str	r3, [r7, #20]
 8019fbc:	697b      	ldr	r3, [r7, #20]
 8019fbe:	881b      	ldrh	r3, [r3, #0]
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	059b      	lsls	r3, r3, #22
 8019fc4:	0d9b      	lsrs	r3, r3, #22
 8019fc6:	b29a      	uxth	r2, r3
 8019fc8:	697b      	ldr	r3, [r7, #20]
 8019fca:	801a      	strh	r2, [r3, #0]
 8019fcc:	1d7b      	adds	r3, r7, #5
 8019fce:	33ff      	adds	r3, #255	@ 0xff
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fd4:	d922      	bls.n	801a01c <USB_EPStartXfer+0x318>
 8019fd6:	1d7b      	adds	r3, r7, #5
 8019fd8:	33ff      	adds	r3, #255	@ 0xff
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	095b      	lsrs	r3, r3, #5
 8019fde:	21fc      	movs	r1, #252	@ 0xfc
 8019fe0:	187a      	adds	r2, r7, r1
 8019fe2:	6013      	str	r3, [r2, #0]
 8019fe4:	1d7b      	adds	r3, r7, #5
 8019fe6:	33ff      	adds	r3, #255	@ 0xff
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	221f      	movs	r2, #31
 8019fec:	4013      	ands	r3, r2
 8019fee:	d104      	bne.n	8019ffa <USB_EPStartXfer+0x2f6>
 8019ff0:	187b      	adds	r3, r7, r1
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	3b01      	subs	r3, #1
 8019ff6:	187a      	adds	r2, r7, r1
 8019ff8:	6013      	str	r3, [r2, #0]
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	881b      	ldrh	r3, [r3, #0]
 8019ffe:	b29a      	uxth	r2, r3
 801a000:	23fc      	movs	r3, #252	@ 0xfc
 801a002:	18fb      	adds	r3, r7, r3
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	b29b      	uxth	r3, r3
 801a008:	029b      	lsls	r3, r3, #10
 801a00a:	b29b      	uxth	r3, r3
 801a00c:	4313      	orrs	r3, r2
 801a00e:	b29b      	uxth	r3, r3
 801a010:	4a35      	ldr	r2, [pc, #212]	@ (801a0e8 <USB_EPStartXfer+0x3e4>)
 801a012:	4313      	orrs	r3, r2
 801a014:	b29a      	uxth	r2, r3
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	801a      	strh	r2, [r3, #0]
 801a01a:	e04a      	b.n	801a0b2 <USB_EPStartXfer+0x3ae>
 801a01c:	1d7b      	adds	r3, r7, #5
 801a01e:	33ff      	adds	r3, #255	@ 0xff
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d108      	bne.n	801a038 <USB_EPStartXfer+0x334>
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	881b      	ldrh	r3, [r3, #0]
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	4a2e      	ldr	r2, [pc, #184]	@ (801a0e8 <USB_EPStartXfer+0x3e4>)
 801a02e:	4313      	orrs	r3, r2
 801a030:	b29a      	uxth	r2, r3
 801a032:	697b      	ldr	r3, [r7, #20]
 801a034:	801a      	strh	r2, [r3, #0]
 801a036:	e03c      	b.n	801a0b2 <USB_EPStartXfer+0x3ae>
 801a038:	1d7b      	adds	r3, r7, #5
 801a03a:	33ff      	adds	r3, #255	@ 0xff
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	085b      	lsrs	r3, r3, #1
 801a040:	21fc      	movs	r1, #252	@ 0xfc
 801a042:	187a      	adds	r2, r7, r1
 801a044:	6013      	str	r3, [r2, #0]
 801a046:	1d7b      	adds	r3, r7, #5
 801a048:	33ff      	adds	r3, #255	@ 0xff
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	2201      	movs	r2, #1
 801a04e:	4013      	ands	r3, r2
 801a050:	d004      	beq.n	801a05c <USB_EPStartXfer+0x358>
 801a052:	187b      	adds	r3, r7, r1
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	3301      	adds	r3, #1
 801a058:	187a      	adds	r2, r7, r1
 801a05a:	6013      	str	r3, [r2, #0]
 801a05c:	697b      	ldr	r3, [r7, #20]
 801a05e:	881b      	ldrh	r3, [r3, #0]
 801a060:	b29a      	uxth	r2, r3
 801a062:	23fc      	movs	r3, #252	@ 0xfc
 801a064:	18fb      	adds	r3, r7, r3
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	b29b      	uxth	r3, r3
 801a06a:	029b      	lsls	r3, r3, #10
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	4313      	orrs	r3, r2
 801a070:	b29a      	uxth	r2, r3
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	801a      	strh	r2, [r3, #0]
 801a076:	e01c      	b.n	801a0b2 <USB_EPStartXfer+0x3ae>
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	785b      	ldrb	r3, [r3, #1]
 801a07c:	2b01      	cmp	r3, #1
 801a07e:	d118      	bne.n	801a0b2 <USB_EPStartXfer+0x3ae>
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	623b      	str	r3, [r7, #32]
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	2250      	movs	r2, #80	@ 0x50
 801a088:	5a9b      	ldrh	r3, [r3, r2]
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	001a      	movs	r2, r3
 801a08e:	6a3b      	ldr	r3, [r7, #32]
 801a090:	189b      	adds	r3, r3, r2
 801a092:	623b      	str	r3, [r7, #32]
 801a094:	683b      	ldr	r3, [r7, #0]
 801a096:	781b      	ldrb	r3, [r3, #0]
 801a098:	00da      	lsls	r2, r3, #3
 801a09a:	6a3b      	ldr	r3, [r7, #32]
 801a09c:	18d3      	adds	r3, r2, r3
 801a09e:	4a0e      	ldr	r2, [pc, #56]	@ (801a0d8 <USB_EPStartXfer+0x3d4>)
 801a0a0:	4694      	mov	ip, r2
 801a0a2:	4463      	add	r3, ip
 801a0a4:	61fb      	str	r3, [r7, #28]
 801a0a6:	1d7b      	adds	r3, r7, #5
 801a0a8:	33ff      	adds	r3, #255	@ 0xff
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	b29a      	uxth	r2, r3
 801a0ae:	69fb      	ldr	r3, [r7, #28]
 801a0b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a0b2:	2076      	movs	r0, #118	@ 0x76
 801a0b4:	183b      	adds	r3, r7, r0
 801a0b6:	683a      	ldr	r2, [r7, #0]
 801a0b8:	8912      	ldrh	r2, [r2, #8]
 801a0ba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a0bc:	683b      	ldr	r3, [r7, #0]
 801a0be:	6959      	ldr	r1, [r3, #20]
 801a0c0:	1d7b      	adds	r3, r7, #5
 801a0c2:	33ff      	adds	r3, #255	@ 0xff
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	b29c      	uxth	r4, r3
 801a0c8:	183b      	adds	r3, r7, r0
 801a0ca:	881a      	ldrh	r2, [r3, #0]
 801a0cc:	6878      	ldr	r0, [r7, #4]
 801a0ce:	0023      	movs	r3, r4
 801a0d0:	f001 f88a 	bl	801b1e8 <USB_WritePMA>
 801a0d4:	e329      	b.n	801a72a <USB_EPStartXfer+0xa26>
 801a0d6:	46c0      	nop			@ (mov r8, r8)
 801a0d8:	00000402 	.word	0x00000402
 801a0dc:	ffff8f8f 	.word	0xffff8f8f
 801a0e0:	ffff8180 	.word	0xffff8180
 801a0e4:	00000406 	.word	0x00000406
 801a0e8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a0ec:	683b      	ldr	r3, [r7, #0]
 801a0ee:	785b      	ldrb	r3, [r3, #1]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d000      	beq.n	801a0f6 <USB_EPStartXfer+0x3f2>
 801a0f4:	e070      	b.n	801a1d8 <USB_EPStartXfer+0x4d4>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	2250      	movs	r2, #80	@ 0x50
 801a0fe:	5a9b      	ldrh	r3, [r3, r2]
 801a100:	b29b      	uxth	r3, r3
 801a102:	001a      	movs	r2, r3
 801a104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a106:	189b      	adds	r3, r3, r2
 801a108:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a10a:	683b      	ldr	r3, [r7, #0]
 801a10c:	781b      	ldrb	r3, [r3, #0]
 801a10e:	00da      	lsls	r2, r3, #3
 801a110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a112:	18d3      	adds	r3, r2, r3
 801a114:	4acd      	ldr	r2, [pc, #820]	@ (801a44c <USB_EPStartXfer+0x748>)
 801a116:	4694      	mov	ip, r2
 801a118:	4463      	add	r3, ip
 801a11a:	647b      	str	r3, [r7, #68]	@ 0x44
 801a11c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a11e:	881b      	ldrh	r3, [r3, #0]
 801a120:	b29b      	uxth	r3, r3
 801a122:	059b      	lsls	r3, r3, #22
 801a124:	0d9b      	lsrs	r3, r3, #22
 801a126:	b29a      	uxth	r2, r3
 801a128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a12a:	801a      	strh	r2, [r3, #0]
 801a12c:	1d7b      	adds	r3, r7, #5
 801a12e:	33ff      	adds	r3, #255	@ 0xff
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b3e      	cmp	r3, #62	@ 0x3e
 801a134:	d922      	bls.n	801a17c <USB_EPStartXfer+0x478>
 801a136:	1d7b      	adds	r3, r7, #5
 801a138:	33ff      	adds	r3, #255	@ 0xff
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	095b      	lsrs	r3, r3, #5
 801a13e:	21f8      	movs	r1, #248	@ 0xf8
 801a140:	187a      	adds	r2, r7, r1
 801a142:	6013      	str	r3, [r2, #0]
 801a144:	1d7b      	adds	r3, r7, #5
 801a146:	33ff      	adds	r3, #255	@ 0xff
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	221f      	movs	r2, #31
 801a14c:	4013      	ands	r3, r2
 801a14e:	d104      	bne.n	801a15a <USB_EPStartXfer+0x456>
 801a150:	187b      	adds	r3, r7, r1
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	3b01      	subs	r3, #1
 801a156:	187a      	adds	r2, r7, r1
 801a158:	6013      	str	r3, [r2, #0]
 801a15a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a15c:	881b      	ldrh	r3, [r3, #0]
 801a15e:	b29a      	uxth	r2, r3
 801a160:	23f8      	movs	r3, #248	@ 0xf8
 801a162:	18fb      	adds	r3, r7, r3
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	b29b      	uxth	r3, r3
 801a168:	029b      	lsls	r3, r3, #10
 801a16a:	b29b      	uxth	r3, r3
 801a16c:	4313      	orrs	r3, r2
 801a16e:	b29b      	uxth	r3, r3
 801a170:	4ab7      	ldr	r2, [pc, #732]	@ (801a450 <USB_EPStartXfer+0x74c>)
 801a172:	4313      	orrs	r3, r2
 801a174:	b29a      	uxth	r2, r3
 801a176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a178:	801a      	strh	r2, [r3, #0]
 801a17a:	e04a      	b.n	801a212 <USB_EPStartXfer+0x50e>
 801a17c:	1d7b      	adds	r3, r7, #5
 801a17e:	33ff      	adds	r3, #255	@ 0xff
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d108      	bne.n	801a198 <USB_EPStartXfer+0x494>
 801a186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a188:	881b      	ldrh	r3, [r3, #0]
 801a18a:	b29b      	uxth	r3, r3
 801a18c:	4ab0      	ldr	r2, [pc, #704]	@ (801a450 <USB_EPStartXfer+0x74c>)
 801a18e:	4313      	orrs	r3, r2
 801a190:	b29a      	uxth	r2, r3
 801a192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a194:	801a      	strh	r2, [r3, #0]
 801a196:	e03c      	b.n	801a212 <USB_EPStartXfer+0x50e>
 801a198:	1d7b      	adds	r3, r7, #5
 801a19a:	33ff      	adds	r3, #255	@ 0xff
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	085b      	lsrs	r3, r3, #1
 801a1a0:	21f8      	movs	r1, #248	@ 0xf8
 801a1a2:	187a      	adds	r2, r7, r1
 801a1a4:	6013      	str	r3, [r2, #0]
 801a1a6:	1d7b      	adds	r3, r7, #5
 801a1a8:	33ff      	adds	r3, #255	@ 0xff
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	2201      	movs	r2, #1
 801a1ae:	4013      	ands	r3, r2
 801a1b0:	d004      	beq.n	801a1bc <USB_EPStartXfer+0x4b8>
 801a1b2:	187b      	adds	r3, r7, r1
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	187a      	adds	r2, r7, r1
 801a1ba:	6013      	str	r3, [r2, #0]
 801a1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a1be:	881b      	ldrh	r3, [r3, #0]
 801a1c0:	b29a      	uxth	r2, r3
 801a1c2:	23f8      	movs	r3, #248	@ 0xf8
 801a1c4:	18fb      	adds	r3, r7, r3
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	b29b      	uxth	r3, r3
 801a1ca:	029b      	lsls	r3, r3, #10
 801a1cc:	b29b      	uxth	r3, r3
 801a1ce:	4313      	orrs	r3, r2
 801a1d0:	b29a      	uxth	r2, r3
 801a1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a1d4:	801a      	strh	r2, [r3, #0]
 801a1d6:	e01c      	b.n	801a212 <USB_EPStartXfer+0x50e>
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	785b      	ldrb	r3, [r3, #1]
 801a1dc:	2b01      	cmp	r3, #1
 801a1de:	d118      	bne.n	801a212 <USB_EPStartXfer+0x50e>
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	2250      	movs	r2, #80	@ 0x50
 801a1e8:	5a9b      	ldrh	r3, [r3, r2]
 801a1ea:	b29b      	uxth	r3, r3
 801a1ec:	001a      	movs	r2, r3
 801a1ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1f0:	189b      	adds	r3, r3, r2
 801a1f2:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	781b      	ldrb	r3, [r3, #0]
 801a1f8:	00da      	lsls	r2, r3, #3
 801a1fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1fc:	18d3      	adds	r3, r2, r3
 801a1fe:	4a93      	ldr	r2, [pc, #588]	@ (801a44c <USB_EPStartXfer+0x748>)
 801a200:	4694      	mov	ip, r2
 801a202:	4463      	add	r3, ip
 801a204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a206:	1d7b      	adds	r3, r7, #5
 801a208:	33ff      	adds	r3, #255	@ 0xff
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	b29a      	uxth	r2, r3
 801a20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a212:	2076      	movs	r0, #118	@ 0x76
 801a214:	183b      	adds	r3, r7, r0
 801a216:	683a      	ldr	r2, [r7, #0]
 801a218:	8912      	ldrh	r2, [r2, #8]
 801a21a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	6959      	ldr	r1, [r3, #20]
 801a220:	1d7b      	adds	r3, r7, #5
 801a222:	33ff      	adds	r3, #255	@ 0xff
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	b29c      	uxth	r4, r3
 801a228:	183b      	adds	r3, r7, r0
 801a22a:	881a      	ldrh	r2, [r3, #0]
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	0023      	movs	r3, r4
 801a230:	f000 ffda 	bl	801b1e8 <USB_WritePMA>
            ep->xfer_buff += len;
 801a234:	683b      	ldr	r3, [r7, #0]
 801a236:	695a      	ldr	r2, [r3, #20]
 801a238:	1d7b      	adds	r3, r7, #5
 801a23a:	33ff      	adds	r3, #255	@ 0xff
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	18d2      	adds	r2, r2, r3
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	6a1a      	ldr	r2, [r3, #32]
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	691b      	ldr	r3, [r3, #16]
 801a24c:	429a      	cmp	r2, r3
 801a24e:	d908      	bls.n	801a262 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a250:	683b      	ldr	r3, [r7, #0]
 801a252:	6a1a      	ldr	r2, [r3, #32]
 801a254:	1d7b      	adds	r3, r7, #5
 801a256:	33ff      	adds	r3, #255	@ 0xff
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	1ad2      	subs	r2, r2, r3
 801a25c:	683b      	ldr	r3, [r7, #0]
 801a25e:	621a      	str	r2, [r3, #32]
 801a260:	e007      	b.n	801a272 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	6a1b      	ldr	r3, [r3, #32]
 801a266:	1d7a      	adds	r2, r7, #5
 801a268:	32ff      	adds	r2, #255	@ 0xff
 801a26a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a26c:	683b      	ldr	r3, [r7, #0]
 801a26e:	2200      	movs	r2, #0
 801a270:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	643b      	str	r3, [r7, #64]	@ 0x40
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	785b      	ldrb	r3, [r3, #1]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d000      	beq.n	801a280 <USB_EPStartXfer+0x57c>
 801a27e:	e070      	b.n	801a362 <USB_EPStartXfer+0x65e>
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2250      	movs	r2, #80	@ 0x50
 801a288:	5a9b      	ldrh	r3, [r3, r2]
 801a28a:	b29b      	uxth	r3, r3
 801a28c:	001a      	movs	r2, r3
 801a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a290:	189b      	adds	r3, r3, r2
 801a292:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	00da      	lsls	r2, r3, #3
 801a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a29c:	18d3      	adds	r3, r2, r3
 801a29e:	4a6d      	ldr	r2, [pc, #436]	@ (801a454 <USB_EPStartXfer+0x750>)
 801a2a0:	4694      	mov	ip, r2
 801a2a2:	4463      	add	r3, ip
 801a2a4:	637b      	str	r3, [r7, #52]	@ 0x34
 801a2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2a8:	881b      	ldrh	r3, [r3, #0]
 801a2aa:	b29b      	uxth	r3, r3
 801a2ac:	059b      	lsls	r3, r3, #22
 801a2ae:	0d9b      	lsrs	r3, r3, #22
 801a2b0:	b29a      	uxth	r2, r3
 801a2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2b4:	801a      	strh	r2, [r3, #0]
 801a2b6:	1d7b      	adds	r3, r7, #5
 801a2b8:	33ff      	adds	r3, #255	@ 0xff
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	2b3e      	cmp	r3, #62	@ 0x3e
 801a2be:	d922      	bls.n	801a306 <USB_EPStartXfer+0x602>
 801a2c0:	1d7b      	adds	r3, r7, #5
 801a2c2:	33ff      	adds	r3, #255	@ 0xff
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	095b      	lsrs	r3, r3, #5
 801a2c8:	21f4      	movs	r1, #244	@ 0xf4
 801a2ca:	187a      	adds	r2, r7, r1
 801a2cc:	6013      	str	r3, [r2, #0]
 801a2ce:	1d7b      	adds	r3, r7, #5
 801a2d0:	33ff      	adds	r3, #255	@ 0xff
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	221f      	movs	r2, #31
 801a2d6:	4013      	ands	r3, r2
 801a2d8:	d104      	bne.n	801a2e4 <USB_EPStartXfer+0x5e0>
 801a2da:	187b      	adds	r3, r7, r1
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	3b01      	subs	r3, #1
 801a2e0:	187a      	adds	r2, r7, r1
 801a2e2:	6013      	str	r3, [r2, #0]
 801a2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2e6:	881b      	ldrh	r3, [r3, #0]
 801a2e8:	b29a      	uxth	r2, r3
 801a2ea:	23f4      	movs	r3, #244	@ 0xf4
 801a2ec:	18fb      	adds	r3, r7, r3
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	029b      	lsls	r3, r3, #10
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	4313      	orrs	r3, r2
 801a2f8:	b29b      	uxth	r3, r3
 801a2fa:	4a55      	ldr	r2, [pc, #340]	@ (801a450 <USB_EPStartXfer+0x74c>)
 801a2fc:	4313      	orrs	r3, r2
 801a2fe:	b29a      	uxth	r2, r3
 801a300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a302:	801a      	strh	r2, [r3, #0]
 801a304:	e048      	b.n	801a398 <USB_EPStartXfer+0x694>
 801a306:	1d7b      	adds	r3, r7, #5
 801a308:	33ff      	adds	r3, #255	@ 0xff
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d108      	bne.n	801a322 <USB_EPStartXfer+0x61e>
 801a310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a312:	881b      	ldrh	r3, [r3, #0]
 801a314:	b29b      	uxth	r3, r3
 801a316:	4a4e      	ldr	r2, [pc, #312]	@ (801a450 <USB_EPStartXfer+0x74c>)
 801a318:	4313      	orrs	r3, r2
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a31e:	801a      	strh	r2, [r3, #0]
 801a320:	e03a      	b.n	801a398 <USB_EPStartXfer+0x694>
 801a322:	1d7b      	adds	r3, r7, #5
 801a324:	33ff      	adds	r3, #255	@ 0xff
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	085b      	lsrs	r3, r3, #1
 801a32a:	21f4      	movs	r1, #244	@ 0xf4
 801a32c:	187a      	adds	r2, r7, r1
 801a32e:	6013      	str	r3, [r2, #0]
 801a330:	1d7b      	adds	r3, r7, #5
 801a332:	33ff      	adds	r3, #255	@ 0xff
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	2201      	movs	r2, #1
 801a338:	4013      	ands	r3, r2
 801a33a:	d004      	beq.n	801a346 <USB_EPStartXfer+0x642>
 801a33c:	187b      	adds	r3, r7, r1
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	3301      	adds	r3, #1
 801a342:	187a      	adds	r2, r7, r1
 801a344:	6013      	str	r3, [r2, #0]
 801a346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a348:	881b      	ldrh	r3, [r3, #0]
 801a34a:	b29a      	uxth	r2, r3
 801a34c:	23f4      	movs	r3, #244	@ 0xf4
 801a34e:	18fb      	adds	r3, r7, r3
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	b29b      	uxth	r3, r3
 801a354:	029b      	lsls	r3, r3, #10
 801a356:	b29b      	uxth	r3, r3
 801a358:	4313      	orrs	r3, r2
 801a35a:	b29a      	uxth	r2, r3
 801a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a35e:	801a      	strh	r2, [r3, #0]
 801a360:	e01a      	b.n	801a398 <USB_EPStartXfer+0x694>
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	785b      	ldrb	r3, [r3, #1]
 801a366:	2b01      	cmp	r3, #1
 801a368:	d116      	bne.n	801a398 <USB_EPStartXfer+0x694>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	2250      	movs	r2, #80	@ 0x50
 801a36e:	5a9b      	ldrh	r3, [r3, r2]
 801a370:	b29b      	uxth	r3, r3
 801a372:	001a      	movs	r2, r3
 801a374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a376:	189b      	adds	r3, r3, r2
 801a378:	643b      	str	r3, [r7, #64]	@ 0x40
 801a37a:	683b      	ldr	r3, [r7, #0]
 801a37c:	781b      	ldrb	r3, [r3, #0]
 801a37e:	00da      	lsls	r2, r3, #3
 801a380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a382:	18d3      	adds	r3, r2, r3
 801a384:	4a33      	ldr	r2, [pc, #204]	@ (801a454 <USB_EPStartXfer+0x750>)
 801a386:	4694      	mov	ip, r2
 801a388:	4463      	add	r3, ip
 801a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a38c:	1d7b      	adds	r3, r7, #5
 801a38e:	33ff      	adds	r3, #255	@ 0xff
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	b29a      	uxth	r2, r3
 801a394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a396:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a398:	2076      	movs	r0, #118	@ 0x76
 801a39a:	183b      	adds	r3, r7, r0
 801a39c:	683a      	ldr	r2, [r7, #0]
 801a39e:	8952      	ldrh	r2, [r2, #10]
 801a3a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a3a2:	683b      	ldr	r3, [r7, #0]
 801a3a4:	6959      	ldr	r1, [r3, #20]
 801a3a6:	1d7b      	adds	r3, r7, #5
 801a3a8:	33ff      	adds	r3, #255	@ 0xff
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	b29c      	uxth	r4, r3
 801a3ae:	183b      	adds	r3, r7, r0
 801a3b0:	881a      	ldrh	r2, [r3, #0]
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	0023      	movs	r3, r4
 801a3b6:	f000 ff17 	bl	801b1e8 <USB_WritePMA>
 801a3ba:	e1b6      	b.n	801a72a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	6a1b      	ldr	r3, [r3, #32]
 801a3c0:	1d7a      	adds	r2, r7, #5
 801a3c2:	32ff      	adds	r2, #255	@ 0xff
 801a3c4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a3c6:	687a      	ldr	r2, [r7, #4]
 801a3c8:	683b      	ldr	r3, [r7, #0]
 801a3ca:	781b      	ldrb	r3, [r3, #0]
 801a3cc:	009b      	lsls	r3, r3, #2
 801a3ce:	18d3      	adds	r3, r2, r3
 801a3d0:	881b      	ldrh	r3, [r3, #0]
 801a3d2:	b29a      	uxth	r2, r3
 801a3d4:	2062      	movs	r0, #98	@ 0x62
 801a3d6:	183b      	adds	r3, r7, r0
 801a3d8:	491f      	ldr	r1, [pc, #124]	@ (801a458 <USB_EPStartXfer+0x754>)
 801a3da:	400a      	ands	r2, r1
 801a3dc:	801a      	strh	r2, [r3, #0]
 801a3de:	687a      	ldr	r2, [r7, #4]
 801a3e0:	683b      	ldr	r3, [r7, #0]
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	009b      	lsls	r3, r3, #2
 801a3e6:	18d3      	adds	r3, r2, r3
 801a3e8:	183a      	adds	r2, r7, r0
 801a3ea:	8812      	ldrh	r2, [r2, #0]
 801a3ec:	491b      	ldr	r1, [pc, #108]	@ (801a45c <USB_EPStartXfer+0x758>)
 801a3ee:	430a      	orrs	r2, r1
 801a3f0:	b292      	uxth	r2, r2
 801a3f2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2250      	movs	r2, #80	@ 0x50
 801a3fc:	5a9b      	ldrh	r3, [r3, r2]
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	001a      	movs	r2, r3
 801a402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a404:	189b      	adds	r3, r3, r2
 801a406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	781b      	ldrb	r3, [r3, #0]
 801a40c:	00da      	lsls	r2, r3, #3
 801a40e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a410:	18d3      	adds	r3, r2, r3
 801a412:	4a0e      	ldr	r2, [pc, #56]	@ (801a44c <USB_EPStartXfer+0x748>)
 801a414:	4694      	mov	ip, r2
 801a416:	4463      	add	r3, ip
 801a418:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a41a:	1d7b      	adds	r3, r7, #5
 801a41c:	33ff      	adds	r3, #255	@ 0xff
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	b29a      	uxth	r2, r3
 801a422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a424:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a426:	2076      	movs	r0, #118	@ 0x76
 801a428:	183b      	adds	r3, r7, r0
 801a42a:	683a      	ldr	r2, [r7, #0]
 801a42c:	8912      	ldrh	r2, [r2, #8]
 801a42e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	6959      	ldr	r1, [r3, #20]
 801a434:	1d7b      	adds	r3, r7, #5
 801a436:	33ff      	adds	r3, #255	@ 0xff
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	b29c      	uxth	r4, r3
 801a43c:	183b      	adds	r3, r7, r0
 801a43e:	881a      	ldrh	r2, [r3, #0]
 801a440:	6878      	ldr	r0, [r7, #4]
 801a442:	0023      	movs	r3, r4
 801a444:	f000 fed0 	bl	801b1e8 <USB_WritePMA>
 801a448:	e16f      	b.n	801a72a <USB_EPStartXfer+0xa26>
 801a44a:	46c0      	nop			@ (mov r8, r8)
 801a44c:	00000402 	.word	0x00000402
 801a450:	ffff8000 	.word	0xffff8000
 801a454:	00000406 	.word	0x00000406
 801a458:	ffff8e8f 	.word	0xffff8e8f
 801a45c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	6a1a      	ldr	r2, [r3, #32]
 801a464:	1d7b      	adds	r3, r7, #5
 801a466:	33ff      	adds	r3, #255	@ 0xff
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	1ad2      	subs	r2, r2, r3
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a470:	687a      	ldr	r2, [r7, #4]
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	781b      	ldrb	r3, [r3, #0]
 801a476:	009b      	lsls	r3, r3, #2
 801a478:	18d3      	adds	r3, r2, r3
 801a47a:	881b      	ldrh	r3, [r3, #0]
 801a47c:	b29b      	uxth	r3, r3
 801a47e:	001a      	movs	r2, r3
 801a480:	2340      	movs	r3, #64	@ 0x40
 801a482:	4013      	ands	r3, r2
 801a484:	d100      	bne.n	801a488 <USB_EPStartXfer+0x784>
 801a486:	e0a4      	b.n	801a5d2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	785b      	ldrb	r3, [r3, #1]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d000      	beq.n	801a496 <USB_EPStartXfer+0x792>
 801a494:	e070      	b.n	801a578 <USB_EPStartXfer+0x874>
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2250      	movs	r2, #80	@ 0x50
 801a49e:	5a9b      	ldrh	r3, [r3, r2]
 801a4a0:	b29b      	uxth	r3, r3
 801a4a2:	001a      	movs	r2, r3
 801a4a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4a6:	189b      	adds	r3, r3, r2
 801a4a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a4aa:	683b      	ldr	r3, [r7, #0]
 801a4ac:	781b      	ldrb	r3, [r3, #0]
 801a4ae:	00da      	lsls	r2, r3, #3
 801a4b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4b2:	18d3      	adds	r3, r2, r3
 801a4b4:	4abc      	ldr	r2, [pc, #752]	@ (801a7a8 <USB_EPStartXfer+0xaa4>)
 801a4b6:	4694      	mov	ip, r2
 801a4b8:	4463      	add	r3, ip
 801a4ba:	667b      	str	r3, [r7, #100]	@ 0x64
 801a4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4be:	881b      	ldrh	r3, [r3, #0]
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	059b      	lsls	r3, r3, #22
 801a4c4:	0d9b      	lsrs	r3, r3, #22
 801a4c6:	b29a      	uxth	r2, r3
 801a4c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4ca:	801a      	strh	r2, [r3, #0]
 801a4cc:	1d7b      	adds	r3, r7, #5
 801a4ce:	33ff      	adds	r3, #255	@ 0xff
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a4d4:	d922      	bls.n	801a51c <USB_EPStartXfer+0x818>
 801a4d6:	1d7b      	adds	r3, r7, #5
 801a4d8:	33ff      	adds	r3, #255	@ 0xff
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	095b      	lsrs	r3, r3, #5
 801a4de:	21f0      	movs	r1, #240	@ 0xf0
 801a4e0:	187a      	adds	r2, r7, r1
 801a4e2:	6013      	str	r3, [r2, #0]
 801a4e4:	1d7b      	adds	r3, r7, #5
 801a4e6:	33ff      	adds	r3, #255	@ 0xff
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	221f      	movs	r2, #31
 801a4ec:	4013      	ands	r3, r2
 801a4ee:	d104      	bne.n	801a4fa <USB_EPStartXfer+0x7f6>
 801a4f0:	187b      	adds	r3, r7, r1
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	187a      	adds	r2, r7, r1
 801a4f8:	6013      	str	r3, [r2, #0]
 801a4fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4fc:	881b      	ldrh	r3, [r3, #0]
 801a4fe:	b29a      	uxth	r2, r3
 801a500:	23f0      	movs	r3, #240	@ 0xf0
 801a502:	18fb      	adds	r3, r7, r3
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	b29b      	uxth	r3, r3
 801a508:	029b      	lsls	r3, r3, #10
 801a50a:	b29b      	uxth	r3, r3
 801a50c:	4313      	orrs	r3, r2
 801a50e:	b29b      	uxth	r3, r3
 801a510:	4aa6      	ldr	r2, [pc, #664]	@ (801a7ac <USB_EPStartXfer+0xaa8>)
 801a512:	4313      	orrs	r3, r2
 801a514:	b29a      	uxth	r2, r3
 801a516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a518:	801a      	strh	r2, [r3, #0]
 801a51a:	e048      	b.n	801a5ae <USB_EPStartXfer+0x8aa>
 801a51c:	1d7b      	adds	r3, r7, #5
 801a51e:	33ff      	adds	r3, #255	@ 0xff
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d108      	bne.n	801a538 <USB_EPStartXfer+0x834>
 801a526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a528:	881b      	ldrh	r3, [r3, #0]
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	4a9f      	ldr	r2, [pc, #636]	@ (801a7ac <USB_EPStartXfer+0xaa8>)
 801a52e:	4313      	orrs	r3, r2
 801a530:	b29a      	uxth	r2, r3
 801a532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a534:	801a      	strh	r2, [r3, #0]
 801a536:	e03a      	b.n	801a5ae <USB_EPStartXfer+0x8aa>
 801a538:	1d7b      	adds	r3, r7, #5
 801a53a:	33ff      	adds	r3, #255	@ 0xff
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	085b      	lsrs	r3, r3, #1
 801a540:	21f0      	movs	r1, #240	@ 0xf0
 801a542:	187a      	adds	r2, r7, r1
 801a544:	6013      	str	r3, [r2, #0]
 801a546:	1d7b      	adds	r3, r7, #5
 801a548:	33ff      	adds	r3, #255	@ 0xff
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	2201      	movs	r2, #1
 801a54e:	4013      	ands	r3, r2
 801a550:	d004      	beq.n	801a55c <USB_EPStartXfer+0x858>
 801a552:	187b      	adds	r3, r7, r1
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	3301      	adds	r3, #1
 801a558:	187a      	adds	r2, r7, r1
 801a55a:	6013      	str	r3, [r2, #0]
 801a55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a55e:	881b      	ldrh	r3, [r3, #0]
 801a560:	b29a      	uxth	r2, r3
 801a562:	23f0      	movs	r3, #240	@ 0xf0
 801a564:	18fb      	adds	r3, r7, r3
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	b29b      	uxth	r3, r3
 801a56a:	029b      	lsls	r3, r3, #10
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	4313      	orrs	r3, r2
 801a570:	b29a      	uxth	r2, r3
 801a572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a574:	801a      	strh	r2, [r3, #0]
 801a576:	e01a      	b.n	801a5ae <USB_EPStartXfer+0x8aa>
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	785b      	ldrb	r3, [r3, #1]
 801a57c:	2b01      	cmp	r3, #1
 801a57e:	d116      	bne.n	801a5ae <USB_EPStartXfer+0x8aa>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	2250      	movs	r2, #80	@ 0x50
 801a584:	5a9b      	ldrh	r3, [r3, r2]
 801a586:	b29b      	uxth	r3, r3
 801a588:	001a      	movs	r2, r3
 801a58a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a58c:	189b      	adds	r3, r3, r2
 801a58e:	673b      	str	r3, [r7, #112]	@ 0x70
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	00da      	lsls	r2, r3, #3
 801a596:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	4a83      	ldr	r2, [pc, #524]	@ (801a7a8 <USB_EPStartXfer+0xaa4>)
 801a59c:	4694      	mov	ip, r2
 801a59e:	4463      	add	r3, ip
 801a5a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a5a2:	1d7b      	adds	r3, r7, #5
 801a5a4:	33ff      	adds	r3, #255	@ 0xff
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	b29a      	uxth	r2, r3
 801a5aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a5ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a5ae:	2076      	movs	r0, #118	@ 0x76
 801a5b0:	183b      	adds	r3, r7, r0
 801a5b2:	683a      	ldr	r2, [r7, #0]
 801a5b4:	8952      	ldrh	r2, [r2, #10]
 801a5b6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	6959      	ldr	r1, [r3, #20]
 801a5bc:	1d7b      	adds	r3, r7, #5
 801a5be:	33ff      	adds	r3, #255	@ 0xff
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	b29c      	uxth	r4, r3
 801a5c4:	183b      	adds	r3, r7, r0
 801a5c6:	881a      	ldrh	r2, [r3, #0]
 801a5c8:	6878      	ldr	r0, [r7, #4]
 801a5ca:	0023      	movs	r3, r4
 801a5cc:	f000 fe0c 	bl	801b1e8 <USB_WritePMA>
 801a5d0:	e0ab      	b.n	801a72a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	785b      	ldrb	r3, [r3, #1]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d000      	beq.n	801a5dc <USB_EPStartXfer+0x8d8>
 801a5da:	e070      	b.n	801a6be <USB_EPStartXfer+0x9ba>
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	2250      	movs	r2, #80	@ 0x50
 801a5e4:	5a9b      	ldrh	r3, [r3, r2]
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	001a      	movs	r2, r3
 801a5ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5ec:	189b      	adds	r3, r3, r2
 801a5ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	781b      	ldrb	r3, [r3, #0]
 801a5f4:	00da      	lsls	r2, r3, #3
 801a5f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5f8:	18d3      	adds	r3, r2, r3
 801a5fa:	4a6d      	ldr	r2, [pc, #436]	@ (801a7b0 <USB_EPStartXfer+0xaac>)
 801a5fc:	4694      	mov	ip, r2
 801a5fe:	4463      	add	r3, ip
 801a600:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a604:	881b      	ldrh	r3, [r3, #0]
 801a606:	b29b      	uxth	r3, r3
 801a608:	059b      	lsls	r3, r3, #22
 801a60a:	0d9b      	lsrs	r3, r3, #22
 801a60c:	b29a      	uxth	r2, r3
 801a60e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a610:	801a      	strh	r2, [r3, #0]
 801a612:	1d7b      	adds	r3, r7, #5
 801a614:	33ff      	adds	r3, #255	@ 0xff
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2b3e      	cmp	r3, #62	@ 0x3e
 801a61a:	d922      	bls.n	801a662 <USB_EPStartXfer+0x95e>
 801a61c:	1d7b      	adds	r3, r7, #5
 801a61e:	33ff      	adds	r3, #255	@ 0xff
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	095b      	lsrs	r3, r3, #5
 801a624:	21ec      	movs	r1, #236	@ 0xec
 801a626:	187a      	adds	r2, r7, r1
 801a628:	6013      	str	r3, [r2, #0]
 801a62a:	1d7b      	adds	r3, r7, #5
 801a62c:	33ff      	adds	r3, #255	@ 0xff
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	221f      	movs	r2, #31
 801a632:	4013      	ands	r3, r2
 801a634:	d104      	bne.n	801a640 <USB_EPStartXfer+0x93c>
 801a636:	187b      	adds	r3, r7, r1
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	3b01      	subs	r3, #1
 801a63c:	187a      	adds	r2, r7, r1
 801a63e:	6013      	str	r3, [r2, #0]
 801a640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a642:	881b      	ldrh	r3, [r3, #0]
 801a644:	b29a      	uxth	r2, r3
 801a646:	23ec      	movs	r3, #236	@ 0xec
 801a648:	18fb      	adds	r3, r7, r3
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	029b      	lsls	r3, r3, #10
 801a650:	b29b      	uxth	r3, r3
 801a652:	4313      	orrs	r3, r2
 801a654:	b29b      	uxth	r3, r3
 801a656:	4a55      	ldr	r2, [pc, #340]	@ (801a7ac <USB_EPStartXfer+0xaa8>)
 801a658:	4313      	orrs	r3, r2
 801a65a:	b29a      	uxth	r2, r3
 801a65c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a65e:	801a      	strh	r2, [r3, #0]
 801a660:	e052      	b.n	801a708 <USB_EPStartXfer+0xa04>
 801a662:	1d7b      	adds	r3, r7, #5
 801a664:	33ff      	adds	r3, #255	@ 0xff
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d108      	bne.n	801a67e <USB_EPStartXfer+0x97a>
 801a66c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a66e:	881b      	ldrh	r3, [r3, #0]
 801a670:	b29b      	uxth	r3, r3
 801a672:	4a4e      	ldr	r2, [pc, #312]	@ (801a7ac <USB_EPStartXfer+0xaa8>)
 801a674:	4313      	orrs	r3, r2
 801a676:	b29a      	uxth	r2, r3
 801a678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a67a:	801a      	strh	r2, [r3, #0]
 801a67c:	e044      	b.n	801a708 <USB_EPStartXfer+0xa04>
 801a67e:	1d7b      	adds	r3, r7, #5
 801a680:	33ff      	adds	r3, #255	@ 0xff
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	085b      	lsrs	r3, r3, #1
 801a686:	21ec      	movs	r1, #236	@ 0xec
 801a688:	187a      	adds	r2, r7, r1
 801a68a:	6013      	str	r3, [r2, #0]
 801a68c:	1d7b      	adds	r3, r7, #5
 801a68e:	33ff      	adds	r3, #255	@ 0xff
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	2201      	movs	r2, #1
 801a694:	4013      	ands	r3, r2
 801a696:	d004      	beq.n	801a6a2 <USB_EPStartXfer+0x99e>
 801a698:	187b      	adds	r3, r7, r1
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	3301      	adds	r3, #1
 801a69e:	187a      	adds	r2, r7, r1
 801a6a0:	6013      	str	r3, [r2, #0]
 801a6a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a6a4:	881b      	ldrh	r3, [r3, #0]
 801a6a6:	b29a      	uxth	r2, r3
 801a6a8:	23ec      	movs	r3, #236	@ 0xec
 801a6aa:	18fb      	adds	r3, r7, r3
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	b29b      	uxth	r3, r3
 801a6b0:	029b      	lsls	r3, r3, #10
 801a6b2:	b29b      	uxth	r3, r3
 801a6b4:	4313      	orrs	r3, r2
 801a6b6:	b29a      	uxth	r2, r3
 801a6b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a6ba:	801a      	strh	r2, [r3, #0]
 801a6bc:	e024      	b.n	801a708 <USB_EPStartXfer+0xa04>
 801a6be:	683b      	ldr	r3, [r7, #0]
 801a6c0:	785b      	ldrb	r3, [r3, #1]
 801a6c2:	2b01      	cmp	r3, #1
 801a6c4:	d120      	bne.n	801a708 <USB_EPStartXfer+0xa04>
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	2184      	movs	r1, #132	@ 0x84
 801a6ca:	187a      	adds	r2, r7, r1
 801a6cc:	6013      	str	r3, [r2, #0]
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2250      	movs	r2, #80	@ 0x50
 801a6d2:	5a9b      	ldrh	r3, [r3, r2]
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	001a      	movs	r2, r3
 801a6d8:	187b      	adds	r3, r7, r1
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	189b      	adds	r3, r3, r2
 801a6de:	187a      	adds	r2, r7, r1
 801a6e0:	6013      	str	r3, [r2, #0]
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	00da      	lsls	r2, r3, #3
 801a6e8:	187b      	adds	r3, r7, r1
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	18d3      	adds	r3, r2, r3
 801a6ee:	4a30      	ldr	r2, [pc, #192]	@ (801a7b0 <USB_EPStartXfer+0xaac>)
 801a6f0:	4694      	mov	ip, r2
 801a6f2:	4463      	add	r3, ip
 801a6f4:	2180      	movs	r1, #128	@ 0x80
 801a6f6:	187a      	adds	r2, r7, r1
 801a6f8:	6013      	str	r3, [r2, #0]
 801a6fa:	1d7b      	adds	r3, r7, #5
 801a6fc:	33ff      	adds	r3, #255	@ 0xff
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	b29a      	uxth	r2, r3
 801a702:	187b      	adds	r3, r7, r1
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a708:	2076      	movs	r0, #118	@ 0x76
 801a70a:	183b      	adds	r3, r7, r0
 801a70c:	683a      	ldr	r2, [r7, #0]
 801a70e:	8912      	ldrh	r2, [r2, #8]
 801a710:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a712:	683b      	ldr	r3, [r7, #0]
 801a714:	6959      	ldr	r1, [r3, #20]
 801a716:	1d7b      	adds	r3, r7, #5
 801a718:	33ff      	adds	r3, #255	@ 0xff
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	b29c      	uxth	r4, r3
 801a71e:	183b      	adds	r3, r7, r0
 801a720:	881a      	ldrh	r2, [r3, #0]
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	0023      	movs	r3, r4
 801a726:	f000 fd5f 	bl	801b1e8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a72a:	687a      	ldr	r2, [r7, #4]
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	781b      	ldrb	r3, [r3, #0]
 801a730:	009b      	lsls	r3, r3, #2
 801a732:	18d3      	adds	r3, r2, r3
 801a734:	881b      	ldrh	r3, [r3, #0]
 801a736:	b29a      	uxth	r2, r3
 801a738:	200a      	movs	r0, #10
 801a73a:	183b      	adds	r3, r7, r0
 801a73c:	491d      	ldr	r1, [pc, #116]	@ (801a7b4 <USB_EPStartXfer+0xab0>)
 801a73e:	400a      	ands	r2, r1
 801a740:	801a      	strh	r2, [r3, #0]
 801a742:	183b      	adds	r3, r7, r0
 801a744:	183a      	adds	r2, r7, r0
 801a746:	8812      	ldrh	r2, [r2, #0]
 801a748:	2110      	movs	r1, #16
 801a74a:	404a      	eors	r2, r1
 801a74c:	801a      	strh	r2, [r3, #0]
 801a74e:	183b      	adds	r3, r7, r0
 801a750:	183a      	adds	r2, r7, r0
 801a752:	8812      	ldrh	r2, [r2, #0]
 801a754:	2120      	movs	r1, #32
 801a756:	404a      	eors	r2, r1
 801a758:	801a      	strh	r2, [r3, #0]
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	781b      	ldrb	r3, [r3, #0]
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	18d3      	adds	r3, r2, r3
 801a764:	183a      	adds	r2, r7, r0
 801a766:	8812      	ldrh	r2, [r2, #0]
 801a768:	4913      	ldr	r1, [pc, #76]	@ (801a7b8 <USB_EPStartXfer+0xab4>)
 801a76a:	430a      	orrs	r2, r1
 801a76c:	b292      	uxth	r2, r2
 801a76e:	801a      	strh	r2, [r3, #0]
 801a770:	f000 fbf4 	bl	801af5c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	7b1b      	ldrb	r3, [r3, #12]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d000      	beq.n	801a77e <USB_EPStartXfer+0xa7a>
 801a77c:	e0a9      	b.n	801a8d2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	699a      	ldr	r2, [r3, #24]
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	691b      	ldr	r3, [r3, #16]
 801a786:	429a      	cmp	r2, r3
 801a788:	d918      	bls.n	801a7bc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	691b      	ldr	r3, [r3, #16]
 801a78e:	1d7a      	adds	r2, r7, #5
 801a790:	32ff      	adds	r2, #255	@ 0xff
 801a792:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	699a      	ldr	r2, [r3, #24]
 801a798:	1d7b      	adds	r3, r7, #5
 801a79a:	33ff      	adds	r3, #255	@ 0xff
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	1ad2      	subs	r2, r2, r3
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	619a      	str	r2, [r3, #24]
 801a7a4:	e012      	b.n	801a7cc <USB_EPStartXfer+0xac8>
 801a7a6:	46c0      	nop			@ (mov r8, r8)
 801a7a8:	00000406 	.word	0x00000406
 801a7ac:	ffff8000 	.word	0xffff8000
 801a7b0:	00000402 	.word	0x00000402
 801a7b4:	ffff8fbf 	.word	0xffff8fbf
 801a7b8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	699b      	ldr	r3, [r3, #24]
 801a7c0:	1d7a      	adds	r2, r7, #5
 801a7c2:	32ff      	adds	r2, #255	@ 0xff
 801a7c4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2190      	movs	r1, #144	@ 0x90
 801a7d0:	187a      	adds	r2, r7, r1
 801a7d2:	6013      	str	r3, [r2, #0]
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	2250      	movs	r2, #80	@ 0x50
 801a7d8:	5a9b      	ldrh	r3, [r3, r2]
 801a7da:	b29b      	uxth	r3, r3
 801a7dc:	001a      	movs	r2, r3
 801a7de:	187b      	adds	r3, r7, r1
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	189b      	adds	r3, r3, r2
 801a7e4:	187a      	adds	r2, r7, r1
 801a7e6:	6013      	str	r3, [r2, #0]
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	781b      	ldrb	r3, [r3, #0]
 801a7ec:	00da      	lsls	r2, r3, #3
 801a7ee:	187b      	adds	r3, r7, r1
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	18d3      	adds	r3, r2, r3
 801a7f4:	4acf      	ldr	r2, [pc, #828]	@ (801ab34 <USB_EPStartXfer+0xe30>)
 801a7f6:	4694      	mov	ip, r2
 801a7f8:	4463      	add	r3, ip
 801a7fa:	218c      	movs	r1, #140	@ 0x8c
 801a7fc:	187a      	adds	r2, r7, r1
 801a7fe:	6013      	str	r3, [r2, #0]
 801a800:	187b      	adds	r3, r7, r1
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	881b      	ldrh	r3, [r3, #0]
 801a806:	b29b      	uxth	r3, r3
 801a808:	059b      	lsls	r3, r3, #22
 801a80a:	0d9b      	lsrs	r3, r3, #22
 801a80c:	b29a      	uxth	r2, r3
 801a80e:	187b      	adds	r3, r7, r1
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	801a      	strh	r2, [r3, #0]
 801a814:	1d7b      	adds	r3, r7, #5
 801a816:	33ff      	adds	r3, #255	@ 0xff
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	2b3e      	cmp	r3, #62	@ 0x3e
 801a81c:	d925      	bls.n	801a86a <USB_EPStartXfer+0xb66>
 801a81e:	1d7b      	adds	r3, r7, #5
 801a820:	33ff      	adds	r3, #255	@ 0xff
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	095b      	lsrs	r3, r3, #5
 801a826:	21e8      	movs	r1, #232	@ 0xe8
 801a828:	187a      	adds	r2, r7, r1
 801a82a:	6013      	str	r3, [r2, #0]
 801a82c:	1d7b      	adds	r3, r7, #5
 801a82e:	33ff      	adds	r3, #255	@ 0xff
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	221f      	movs	r2, #31
 801a834:	4013      	ands	r3, r2
 801a836:	d104      	bne.n	801a842 <USB_EPStartXfer+0xb3e>
 801a838:	187b      	adds	r3, r7, r1
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	3b01      	subs	r3, #1
 801a83e:	187a      	adds	r2, r7, r1
 801a840:	6013      	str	r3, [r2, #0]
 801a842:	218c      	movs	r1, #140	@ 0x8c
 801a844:	187b      	adds	r3, r7, r1
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	881b      	ldrh	r3, [r3, #0]
 801a84a:	b29a      	uxth	r2, r3
 801a84c:	23e8      	movs	r3, #232	@ 0xe8
 801a84e:	18fb      	adds	r3, r7, r3
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	b29b      	uxth	r3, r3
 801a854:	029b      	lsls	r3, r3, #10
 801a856:	b29b      	uxth	r3, r3
 801a858:	4313      	orrs	r3, r2
 801a85a:	b29b      	uxth	r3, r3
 801a85c:	4ab6      	ldr	r2, [pc, #728]	@ (801ab38 <USB_EPStartXfer+0xe34>)
 801a85e:	4313      	orrs	r3, r2
 801a860:	b29a      	uxth	r2, r3
 801a862:	187b      	adds	r3, r7, r1
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	801a      	strh	r2, [r3, #0]
 801a868:	e353      	b.n	801af12 <USB_EPStartXfer+0x120e>
 801a86a:	1d7b      	adds	r3, r7, #5
 801a86c:	33ff      	adds	r3, #255	@ 0xff
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d10b      	bne.n	801a88c <USB_EPStartXfer+0xb88>
 801a874:	218c      	movs	r1, #140	@ 0x8c
 801a876:	187b      	adds	r3, r7, r1
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	881b      	ldrh	r3, [r3, #0]
 801a87c:	b29b      	uxth	r3, r3
 801a87e:	4aae      	ldr	r2, [pc, #696]	@ (801ab38 <USB_EPStartXfer+0xe34>)
 801a880:	4313      	orrs	r3, r2
 801a882:	b29a      	uxth	r2, r3
 801a884:	187b      	adds	r3, r7, r1
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	801a      	strh	r2, [r3, #0]
 801a88a:	e342      	b.n	801af12 <USB_EPStartXfer+0x120e>
 801a88c:	1d7b      	adds	r3, r7, #5
 801a88e:	33ff      	adds	r3, #255	@ 0xff
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	085b      	lsrs	r3, r3, #1
 801a894:	21e8      	movs	r1, #232	@ 0xe8
 801a896:	187a      	adds	r2, r7, r1
 801a898:	6013      	str	r3, [r2, #0]
 801a89a:	1d7b      	adds	r3, r7, #5
 801a89c:	33ff      	adds	r3, #255	@ 0xff
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	2201      	movs	r2, #1
 801a8a2:	4013      	ands	r3, r2
 801a8a4:	d004      	beq.n	801a8b0 <USB_EPStartXfer+0xbac>
 801a8a6:	187b      	adds	r3, r7, r1
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	3301      	adds	r3, #1
 801a8ac:	187a      	adds	r2, r7, r1
 801a8ae:	6013      	str	r3, [r2, #0]
 801a8b0:	218c      	movs	r1, #140	@ 0x8c
 801a8b2:	187b      	adds	r3, r7, r1
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	881b      	ldrh	r3, [r3, #0]
 801a8b8:	b29a      	uxth	r2, r3
 801a8ba:	23e8      	movs	r3, #232	@ 0xe8
 801a8bc:	18fb      	adds	r3, r7, r3
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	b29b      	uxth	r3, r3
 801a8c2:	029b      	lsls	r3, r3, #10
 801a8c4:	b29b      	uxth	r3, r3
 801a8c6:	4313      	orrs	r3, r2
 801a8c8:	b29a      	uxth	r2, r3
 801a8ca:	187b      	adds	r3, r7, r1
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	801a      	strh	r2, [r3, #0]
 801a8d0:	e31f      	b.n	801af12 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	78db      	ldrb	r3, [r3, #3]
 801a8d6:	2b02      	cmp	r3, #2
 801a8d8:	d000      	beq.n	801a8dc <USB_EPStartXfer+0xbd8>
 801a8da:	e191      	b.n	801ac00 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a8dc:	683b      	ldr	r3, [r7, #0]
 801a8de:	785b      	ldrb	r3, [r3, #1]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d000      	beq.n	801a8e6 <USB_EPStartXfer+0xbe2>
 801a8e4:	e07c      	b.n	801a9e0 <USB_EPStartXfer+0xcdc>
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	21ac      	movs	r1, #172	@ 0xac
 801a8ea:	187a      	adds	r2, r7, r1
 801a8ec:	6013      	str	r3, [r2, #0]
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	2250      	movs	r2, #80	@ 0x50
 801a8f2:	5a9b      	ldrh	r3, [r3, r2]
 801a8f4:	b29b      	uxth	r3, r3
 801a8f6:	001a      	movs	r2, r3
 801a8f8:	187b      	adds	r3, r7, r1
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	189b      	adds	r3, r3, r2
 801a8fe:	187a      	adds	r2, r7, r1
 801a900:	6013      	str	r3, [r2, #0]
 801a902:	683b      	ldr	r3, [r7, #0]
 801a904:	781b      	ldrb	r3, [r3, #0]
 801a906:	00da      	lsls	r2, r3, #3
 801a908:	187b      	adds	r3, r7, r1
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	18d3      	adds	r3, r2, r3
 801a90e:	4a8b      	ldr	r2, [pc, #556]	@ (801ab3c <USB_EPStartXfer+0xe38>)
 801a910:	4694      	mov	ip, r2
 801a912:	4463      	add	r3, ip
 801a914:	21a8      	movs	r1, #168	@ 0xa8
 801a916:	187a      	adds	r2, r7, r1
 801a918:	6013      	str	r3, [r2, #0]
 801a91a:	187b      	adds	r3, r7, r1
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	881b      	ldrh	r3, [r3, #0]
 801a920:	b29b      	uxth	r3, r3
 801a922:	059b      	lsls	r3, r3, #22
 801a924:	0d9b      	lsrs	r3, r3, #22
 801a926:	b29a      	uxth	r2, r3
 801a928:	187b      	adds	r3, r7, r1
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	801a      	strh	r2, [r3, #0]
 801a92e:	683b      	ldr	r3, [r7, #0]
 801a930:	691b      	ldr	r3, [r3, #16]
 801a932:	2b3e      	cmp	r3, #62	@ 0x3e
 801a934:	d923      	bls.n	801a97e <USB_EPStartXfer+0xc7a>
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	691b      	ldr	r3, [r3, #16]
 801a93a:	095b      	lsrs	r3, r3, #5
 801a93c:	21e4      	movs	r1, #228	@ 0xe4
 801a93e:	187a      	adds	r2, r7, r1
 801a940:	6013      	str	r3, [r2, #0]
 801a942:	683b      	ldr	r3, [r7, #0]
 801a944:	691b      	ldr	r3, [r3, #16]
 801a946:	221f      	movs	r2, #31
 801a948:	4013      	ands	r3, r2
 801a94a:	d104      	bne.n	801a956 <USB_EPStartXfer+0xc52>
 801a94c:	187b      	adds	r3, r7, r1
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	3b01      	subs	r3, #1
 801a952:	187a      	adds	r2, r7, r1
 801a954:	6013      	str	r3, [r2, #0]
 801a956:	21a8      	movs	r1, #168	@ 0xa8
 801a958:	187b      	adds	r3, r7, r1
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	881b      	ldrh	r3, [r3, #0]
 801a95e:	b29a      	uxth	r2, r3
 801a960:	23e4      	movs	r3, #228	@ 0xe4
 801a962:	18fb      	adds	r3, r7, r3
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	b29b      	uxth	r3, r3
 801a968:	029b      	lsls	r3, r3, #10
 801a96a:	b29b      	uxth	r3, r3
 801a96c:	4313      	orrs	r3, r2
 801a96e:	b29b      	uxth	r3, r3
 801a970:	4a71      	ldr	r2, [pc, #452]	@ (801ab38 <USB_EPStartXfer+0xe34>)
 801a972:	4313      	orrs	r3, r2
 801a974:	b29a      	uxth	r2, r3
 801a976:	187b      	adds	r3, r7, r1
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	801a      	strh	r2, [r3, #0]
 801a97c:	e054      	b.n	801aa28 <USB_EPStartXfer+0xd24>
 801a97e:	683b      	ldr	r3, [r7, #0]
 801a980:	691b      	ldr	r3, [r3, #16]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d10b      	bne.n	801a99e <USB_EPStartXfer+0xc9a>
 801a986:	21a8      	movs	r1, #168	@ 0xa8
 801a988:	187b      	adds	r3, r7, r1
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	881b      	ldrh	r3, [r3, #0]
 801a98e:	b29b      	uxth	r3, r3
 801a990:	4a69      	ldr	r2, [pc, #420]	@ (801ab38 <USB_EPStartXfer+0xe34>)
 801a992:	4313      	orrs	r3, r2
 801a994:	b29a      	uxth	r2, r3
 801a996:	187b      	adds	r3, r7, r1
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	801a      	strh	r2, [r3, #0]
 801a99c:	e044      	b.n	801aa28 <USB_EPStartXfer+0xd24>
 801a99e:	683b      	ldr	r3, [r7, #0]
 801a9a0:	691b      	ldr	r3, [r3, #16]
 801a9a2:	085b      	lsrs	r3, r3, #1
 801a9a4:	21e4      	movs	r1, #228	@ 0xe4
 801a9a6:	187a      	adds	r2, r7, r1
 801a9a8:	6013      	str	r3, [r2, #0]
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	691b      	ldr	r3, [r3, #16]
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	4013      	ands	r3, r2
 801a9b2:	d004      	beq.n	801a9be <USB_EPStartXfer+0xcba>
 801a9b4:	187b      	adds	r3, r7, r1
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	3301      	adds	r3, #1
 801a9ba:	187a      	adds	r2, r7, r1
 801a9bc:	6013      	str	r3, [r2, #0]
 801a9be:	21a8      	movs	r1, #168	@ 0xa8
 801a9c0:	187b      	adds	r3, r7, r1
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	881b      	ldrh	r3, [r3, #0]
 801a9c6:	b29a      	uxth	r2, r3
 801a9c8:	23e4      	movs	r3, #228	@ 0xe4
 801a9ca:	18fb      	adds	r3, r7, r3
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	029b      	lsls	r3, r3, #10
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	4313      	orrs	r3, r2
 801a9d6:	b29a      	uxth	r2, r3
 801a9d8:	187b      	adds	r3, r7, r1
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	801a      	strh	r2, [r3, #0]
 801a9de:	e023      	b.n	801aa28 <USB_EPStartXfer+0xd24>
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	785b      	ldrb	r3, [r3, #1]
 801a9e4:	2b01      	cmp	r3, #1
 801a9e6:	d11f      	bne.n	801aa28 <USB_EPStartXfer+0xd24>
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	21b4      	movs	r1, #180	@ 0xb4
 801a9ec:	187a      	adds	r2, r7, r1
 801a9ee:	6013      	str	r3, [r2, #0]
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	2250      	movs	r2, #80	@ 0x50
 801a9f4:	5a9b      	ldrh	r3, [r3, r2]
 801a9f6:	b29b      	uxth	r3, r3
 801a9f8:	001a      	movs	r2, r3
 801a9fa:	187b      	adds	r3, r7, r1
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	189b      	adds	r3, r3, r2
 801aa00:	187a      	adds	r2, r7, r1
 801aa02:	6013      	str	r3, [r2, #0]
 801aa04:	683b      	ldr	r3, [r7, #0]
 801aa06:	781b      	ldrb	r3, [r3, #0]
 801aa08:	00da      	lsls	r2, r3, #3
 801aa0a:	187b      	adds	r3, r7, r1
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	18d3      	adds	r3, r2, r3
 801aa10:	4a4a      	ldr	r2, [pc, #296]	@ (801ab3c <USB_EPStartXfer+0xe38>)
 801aa12:	4694      	mov	ip, r2
 801aa14:	4463      	add	r3, ip
 801aa16:	21b0      	movs	r1, #176	@ 0xb0
 801aa18:	187a      	adds	r2, r7, r1
 801aa1a:	6013      	str	r3, [r2, #0]
 801aa1c:	683b      	ldr	r3, [r7, #0]
 801aa1e:	691b      	ldr	r3, [r3, #16]
 801aa20:	b29a      	uxth	r2, r3
 801aa22:	187b      	adds	r3, r7, r1
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	801a      	strh	r2, [r3, #0]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	22a4      	movs	r2, #164	@ 0xa4
 801aa2c:	18ba      	adds	r2, r7, r2
 801aa2e:	6013      	str	r3, [r2, #0]
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	785b      	ldrb	r3, [r3, #1]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d000      	beq.n	801aa3a <USB_EPStartXfer+0xd36>
 801aa38:	e082      	b.n	801ab40 <USB_EPStartXfer+0xe3c>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	219c      	movs	r1, #156	@ 0x9c
 801aa3e:	187a      	adds	r2, r7, r1
 801aa40:	6013      	str	r3, [r2, #0]
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	2250      	movs	r2, #80	@ 0x50
 801aa46:	5a9b      	ldrh	r3, [r3, r2]
 801aa48:	b29b      	uxth	r3, r3
 801aa4a:	001a      	movs	r2, r3
 801aa4c:	187b      	adds	r3, r7, r1
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	189b      	adds	r3, r3, r2
 801aa52:	187a      	adds	r2, r7, r1
 801aa54:	6013      	str	r3, [r2, #0]
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	781b      	ldrb	r3, [r3, #0]
 801aa5a:	00da      	lsls	r2, r3, #3
 801aa5c:	187b      	adds	r3, r7, r1
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	18d3      	adds	r3, r2, r3
 801aa62:	4a34      	ldr	r2, [pc, #208]	@ (801ab34 <USB_EPStartXfer+0xe30>)
 801aa64:	4694      	mov	ip, r2
 801aa66:	4463      	add	r3, ip
 801aa68:	2198      	movs	r1, #152	@ 0x98
 801aa6a:	187a      	adds	r2, r7, r1
 801aa6c:	6013      	str	r3, [r2, #0]
 801aa6e:	187b      	adds	r3, r7, r1
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	881b      	ldrh	r3, [r3, #0]
 801aa74:	b29b      	uxth	r3, r3
 801aa76:	059b      	lsls	r3, r3, #22
 801aa78:	0d9b      	lsrs	r3, r3, #22
 801aa7a:	b29a      	uxth	r2, r3
 801aa7c:	187b      	adds	r3, r7, r1
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	801a      	strh	r2, [r3, #0]
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	691b      	ldr	r3, [r3, #16]
 801aa86:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa88:	d923      	bls.n	801aad2 <USB_EPStartXfer+0xdce>
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	691b      	ldr	r3, [r3, #16]
 801aa8e:	095b      	lsrs	r3, r3, #5
 801aa90:	21e0      	movs	r1, #224	@ 0xe0
 801aa92:	187a      	adds	r2, r7, r1
 801aa94:	6013      	str	r3, [r2, #0]
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	691b      	ldr	r3, [r3, #16]
 801aa9a:	221f      	movs	r2, #31
 801aa9c:	4013      	ands	r3, r2
 801aa9e:	d104      	bne.n	801aaaa <USB_EPStartXfer+0xda6>
 801aaa0:	187b      	adds	r3, r7, r1
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	3b01      	subs	r3, #1
 801aaa6:	187a      	adds	r2, r7, r1
 801aaa8:	6013      	str	r3, [r2, #0]
 801aaaa:	2198      	movs	r1, #152	@ 0x98
 801aaac:	187b      	adds	r3, r7, r1
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	881b      	ldrh	r3, [r3, #0]
 801aab2:	b29a      	uxth	r2, r3
 801aab4:	23e0      	movs	r3, #224	@ 0xe0
 801aab6:	18fb      	adds	r3, r7, r3
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	b29b      	uxth	r3, r3
 801aabc:	029b      	lsls	r3, r3, #10
 801aabe:	b29b      	uxth	r3, r3
 801aac0:	4313      	orrs	r3, r2
 801aac2:	b29b      	uxth	r3, r3
 801aac4:	4a1c      	ldr	r2, [pc, #112]	@ (801ab38 <USB_EPStartXfer+0xe34>)
 801aac6:	4313      	orrs	r3, r2
 801aac8:	b29a      	uxth	r2, r3
 801aaca:	187b      	adds	r3, r7, r1
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	801a      	strh	r2, [r3, #0]
 801aad0:	e057      	b.n	801ab82 <USB_EPStartXfer+0xe7e>
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	691b      	ldr	r3, [r3, #16]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d10b      	bne.n	801aaf2 <USB_EPStartXfer+0xdee>
 801aada:	2198      	movs	r1, #152	@ 0x98
 801aadc:	187b      	adds	r3, r7, r1
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	881b      	ldrh	r3, [r3, #0]
 801aae2:	b29b      	uxth	r3, r3
 801aae4:	4a14      	ldr	r2, [pc, #80]	@ (801ab38 <USB_EPStartXfer+0xe34>)
 801aae6:	4313      	orrs	r3, r2
 801aae8:	b29a      	uxth	r2, r3
 801aaea:	187b      	adds	r3, r7, r1
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	801a      	strh	r2, [r3, #0]
 801aaf0:	e047      	b.n	801ab82 <USB_EPStartXfer+0xe7e>
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	691b      	ldr	r3, [r3, #16]
 801aaf6:	085b      	lsrs	r3, r3, #1
 801aaf8:	21e0      	movs	r1, #224	@ 0xe0
 801aafa:	187a      	adds	r2, r7, r1
 801aafc:	6013      	str	r3, [r2, #0]
 801aafe:	683b      	ldr	r3, [r7, #0]
 801ab00:	691b      	ldr	r3, [r3, #16]
 801ab02:	2201      	movs	r2, #1
 801ab04:	4013      	ands	r3, r2
 801ab06:	d004      	beq.n	801ab12 <USB_EPStartXfer+0xe0e>
 801ab08:	187b      	adds	r3, r7, r1
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	3301      	adds	r3, #1
 801ab0e:	187a      	adds	r2, r7, r1
 801ab10:	6013      	str	r3, [r2, #0]
 801ab12:	2198      	movs	r1, #152	@ 0x98
 801ab14:	187b      	adds	r3, r7, r1
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	881b      	ldrh	r3, [r3, #0]
 801ab1a:	b29a      	uxth	r2, r3
 801ab1c:	23e0      	movs	r3, #224	@ 0xe0
 801ab1e:	18fb      	adds	r3, r7, r3
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	029b      	lsls	r3, r3, #10
 801ab26:	b29b      	uxth	r3, r3
 801ab28:	4313      	orrs	r3, r2
 801ab2a:	b29a      	uxth	r2, r3
 801ab2c:	187b      	adds	r3, r7, r1
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	801a      	strh	r2, [r3, #0]
 801ab32:	e026      	b.n	801ab82 <USB_EPStartXfer+0xe7e>
 801ab34:	00000406 	.word	0x00000406
 801ab38:	ffff8000 	.word	0xffff8000
 801ab3c:	00000402 	.word	0x00000402
 801ab40:	683b      	ldr	r3, [r7, #0]
 801ab42:	785b      	ldrb	r3, [r3, #1]
 801ab44:	2b01      	cmp	r3, #1
 801ab46:	d11c      	bne.n	801ab82 <USB_EPStartXfer+0xe7e>
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	2250      	movs	r2, #80	@ 0x50
 801ab4c:	5a9b      	ldrh	r3, [r3, r2]
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	001a      	movs	r2, r3
 801ab52:	21a4      	movs	r1, #164	@ 0xa4
 801ab54:	187b      	adds	r3, r7, r1
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	189b      	adds	r3, r3, r2
 801ab5a:	187a      	adds	r2, r7, r1
 801ab5c:	6013      	str	r3, [r2, #0]
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	781b      	ldrb	r3, [r3, #0]
 801ab62:	00da      	lsls	r2, r3, #3
 801ab64:	187b      	adds	r3, r7, r1
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	18d3      	adds	r3, r2, r3
 801ab6a:	4ad2      	ldr	r2, [pc, #840]	@ (801aeb4 <USB_EPStartXfer+0x11b0>)
 801ab6c:	4694      	mov	ip, r2
 801ab6e:	4463      	add	r3, ip
 801ab70:	21a0      	movs	r1, #160	@ 0xa0
 801ab72:	187a      	adds	r2, r7, r1
 801ab74:	6013      	str	r3, [r2, #0]
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	691b      	ldr	r3, [r3, #16]
 801ab7a:	b29a      	uxth	r2, r3
 801ab7c:	187b      	adds	r3, r7, r1
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	69db      	ldr	r3, [r3, #28]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d100      	bne.n	801ab8c <USB_EPStartXfer+0xe88>
 801ab8a:	e1c2      	b.n	801af12 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801ab8c:	687a      	ldr	r2, [r7, #4]
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	781b      	ldrb	r3, [r3, #0]
 801ab92:	009b      	lsls	r3, r3, #2
 801ab94:	18d2      	adds	r2, r2, r3
 801ab96:	2196      	movs	r1, #150	@ 0x96
 801ab98:	187b      	adds	r3, r7, r1
 801ab9a:	8812      	ldrh	r2, [r2, #0]
 801ab9c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ab9e:	187b      	adds	r3, r7, r1
 801aba0:	881a      	ldrh	r2, [r3, #0]
 801aba2:	2380      	movs	r3, #128	@ 0x80
 801aba4:	01db      	lsls	r3, r3, #7
 801aba6:	4013      	ands	r3, r2
 801aba8:	d004      	beq.n	801abb4 <USB_EPStartXfer+0xeb0>
 801abaa:	187b      	adds	r3, r7, r1
 801abac:	881b      	ldrh	r3, [r3, #0]
 801abae:	2240      	movs	r2, #64	@ 0x40
 801abb0:	4013      	ands	r3, r2
 801abb2:	d10d      	bne.n	801abd0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801abb4:	2196      	movs	r1, #150	@ 0x96
 801abb6:	187b      	adds	r3, r7, r1
 801abb8:	881a      	ldrh	r2, [r3, #0]
 801abba:	2380      	movs	r3, #128	@ 0x80
 801abbc:	01db      	lsls	r3, r3, #7
 801abbe:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801abc0:	d000      	beq.n	801abc4 <USB_EPStartXfer+0xec0>
 801abc2:	e1a6      	b.n	801af12 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801abc4:	187b      	adds	r3, r7, r1
 801abc6:	881b      	ldrh	r3, [r3, #0]
 801abc8:	2240      	movs	r2, #64	@ 0x40
 801abca:	4013      	ands	r3, r2
 801abcc:	d000      	beq.n	801abd0 <USB_EPStartXfer+0xecc>
 801abce:	e1a0      	b.n	801af12 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801abd0:	687a      	ldr	r2, [r7, #4]
 801abd2:	683b      	ldr	r3, [r7, #0]
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	009b      	lsls	r3, r3, #2
 801abd8:	18d3      	adds	r3, r2, r3
 801abda:	881b      	ldrh	r3, [r3, #0]
 801abdc:	b29a      	uxth	r2, r3
 801abde:	2094      	movs	r0, #148	@ 0x94
 801abe0:	183b      	adds	r3, r7, r0
 801abe2:	49b5      	ldr	r1, [pc, #724]	@ (801aeb8 <USB_EPStartXfer+0x11b4>)
 801abe4:	400a      	ands	r2, r1
 801abe6:	801a      	strh	r2, [r3, #0]
 801abe8:	687a      	ldr	r2, [r7, #4]
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	781b      	ldrb	r3, [r3, #0]
 801abee:	009b      	lsls	r3, r3, #2
 801abf0:	18d3      	adds	r3, r2, r3
 801abf2:	183a      	adds	r2, r7, r0
 801abf4:	8812      	ldrh	r2, [r2, #0]
 801abf6:	49b1      	ldr	r1, [pc, #708]	@ (801aebc <USB_EPStartXfer+0x11b8>)
 801abf8:	430a      	orrs	r2, r1
 801abfa:	b292      	uxth	r2, r2
 801abfc:	801a      	strh	r2, [r3, #0]
 801abfe:	e188      	b.n	801af12 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801ac00:	683b      	ldr	r3, [r7, #0]
 801ac02:	78db      	ldrb	r3, [r3, #3]
 801ac04:	2b01      	cmp	r3, #1
 801ac06:	d000      	beq.n	801ac0a <USB_EPStartXfer+0xf06>
 801ac08:	e181      	b.n	801af0e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	699a      	ldr	r2, [r3, #24]
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	691b      	ldr	r3, [r3, #16]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d90d      	bls.n	801ac32 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	691b      	ldr	r3, [r3, #16]
 801ac1a:	1d7a      	adds	r2, r7, #5
 801ac1c:	32ff      	adds	r2, #255	@ 0xff
 801ac1e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	699a      	ldr	r2, [r3, #24]
 801ac24:	1d7b      	adds	r3, r7, #5
 801ac26:	33ff      	adds	r3, #255	@ 0xff
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	1ad2      	subs	r2, r2, r3
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	619a      	str	r2, [r3, #24]
 801ac30:	e007      	b.n	801ac42 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	699b      	ldr	r3, [r3, #24]
 801ac36:	1d7a      	adds	r2, r7, #5
 801ac38:	32ff      	adds	r2, #255	@ 0xff
 801ac3a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801ac3c:	683b      	ldr	r3, [r7, #0]
 801ac3e:	2200      	movs	r2, #0
 801ac40:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	785b      	ldrb	r3, [r3, #1]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d000      	beq.n	801ac4c <USB_EPStartXfer+0xf48>
 801ac4a:	e082      	b.n	801ad52 <USB_EPStartXfer+0x104e>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	21cc      	movs	r1, #204	@ 0xcc
 801ac50:	187a      	adds	r2, r7, r1
 801ac52:	6013      	str	r3, [r2, #0]
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2250      	movs	r2, #80	@ 0x50
 801ac58:	5a9b      	ldrh	r3, [r3, r2]
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	001a      	movs	r2, r3
 801ac5e:	187b      	adds	r3, r7, r1
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	189b      	adds	r3, r3, r2
 801ac64:	187a      	adds	r2, r7, r1
 801ac66:	6013      	str	r3, [r2, #0]
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	781b      	ldrb	r3, [r3, #0]
 801ac6c:	00da      	lsls	r2, r3, #3
 801ac6e:	187b      	adds	r3, r7, r1
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	18d3      	adds	r3, r2, r3
 801ac74:	4a92      	ldr	r2, [pc, #584]	@ (801aec0 <USB_EPStartXfer+0x11bc>)
 801ac76:	4694      	mov	ip, r2
 801ac78:	4463      	add	r3, ip
 801ac7a:	21c8      	movs	r1, #200	@ 0xc8
 801ac7c:	187a      	adds	r2, r7, r1
 801ac7e:	6013      	str	r3, [r2, #0]
 801ac80:	187b      	adds	r3, r7, r1
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	881b      	ldrh	r3, [r3, #0]
 801ac86:	b29b      	uxth	r3, r3
 801ac88:	059b      	lsls	r3, r3, #22
 801ac8a:	0d9b      	lsrs	r3, r3, #22
 801ac8c:	b29a      	uxth	r2, r3
 801ac8e:	187b      	adds	r3, r7, r1
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	801a      	strh	r2, [r3, #0]
 801ac94:	1d7b      	adds	r3, r7, #5
 801ac96:	33ff      	adds	r3, #255	@ 0xff
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac9c:	d925      	bls.n	801acea <USB_EPStartXfer+0xfe6>
 801ac9e:	1d7b      	adds	r3, r7, #5
 801aca0:	33ff      	adds	r3, #255	@ 0xff
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	095b      	lsrs	r3, r3, #5
 801aca6:	21dc      	movs	r1, #220	@ 0xdc
 801aca8:	187a      	adds	r2, r7, r1
 801acaa:	6013      	str	r3, [r2, #0]
 801acac:	1d7b      	adds	r3, r7, #5
 801acae:	33ff      	adds	r3, #255	@ 0xff
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	221f      	movs	r2, #31
 801acb4:	4013      	ands	r3, r2
 801acb6:	d104      	bne.n	801acc2 <USB_EPStartXfer+0xfbe>
 801acb8:	187b      	adds	r3, r7, r1
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	3b01      	subs	r3, #1
 801acbe:	187a      	adds	r2, r7, r1
 801acc0:	6013      	str	r3, [r2, #0]
 801acc2:	21c8      	movs	r1, #200	@ 0xc8
 801acc4:	187b      	adds	r3, r7, r1
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	881b      	ldrh	r3, [r3, #0]
 801acca:	b29a      	uxth	r2, r3
 801accc:	23dc      	movs	r3, #220	@ 0xdc
 801acce:	18fb      	adds	r3, r7, r3
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	029b      	lsls	r3, r3, #10
 801acd6:	b29b      	uxth	r3, r3
 801acd8:	4313      	orrs	r3, r2
 801acda:	b29b      	uxth	r3, r3
 801acdc:	4a79      	ldr	r2, [pc, #484]	@ (801aec4 <USB_EPStartXfer+0x11c0>)
 801acde:	4313      	orrs	r3, r2
 801ace0:	b29a      	uxth	r2, r3
 801ace2:	187b      	adds	r3, r7, r1
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	801a      	strh	r2, [r3, #0]
 801ace8:	e058      	b.n	801ad9c <USB_EPStartXfer+0x1098>
 801acea:	1d7b      	adds	r3, r7, #5
 801acec:	33ff      	adds	r3, #255	@ 0xff
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d10b      	bne.n	801ad0c <USB_EPStartXfer+0x1008>
 801acf4:	21c8      	movs	r1, #200	@ 0xc8
 801acf6:	187b      	adds	r3, r7, r1
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	881b      	ldrh	r3, [r3, #0]
 801acfc:	b29b      	uxth	r3, r3
 801acfe:	4a71      	ldr	r2, [pc, #452]	@ (801aec4 <USB_EPStartXfer+0x11c0>)
 801ad00:	4313      	orrs	r3, r2
 801ad02:	b29a      	uxth	r2, r3
 801ad04:	187b      	adds	r3, r7, r1
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	801a      	strh	r2, [r3, #0]
 801ad0a:	e047      	b.n	801ad9c <USB_EPStartXfer+0x1098>
 801ad0c:	1d7b      	adds	r3, r7, #5
 801ad0e:	33ff      	adds	r3, #255	@ 0xff
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	085b      	lsrs	r3, r3, #1
 801ad14:	21dc      	movs	r1, #220	@ 0xdc
 801ad16:	187a      	adds	r2, r7, r1
 801ad18:	6013      	str	r3, [r2, #0]
 801ad1a:	1d7b      	adds	r3, r7, #5
 801ad1c:	33ff      	adds	r3, #255	@ 0xff
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	2201      	movs	r2, #1
 801ad22:	4013      	ands	r3, r2
 801ad24:	d004      	beq.n	801ad30 <USB_EPStartXfer+0x102c>
 801ad26:	187b      	adds	r3, r7, r1
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	3301      	adds	r3, #1
 801ad2c:	187a      	adds	r2, r7, r1
 801ad2e:	6013      	str	r3, [r2, #0]
 801ad30:	21c8      	movs	r1, #200	@ 0xc8
 801ad32:	187b      	adds	r3, r7, r1
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	881b      	ldrh	r3, [r3, #0]
 801ad38:	b29a      	uxth	r2, r3
 801ad3a:	23dc      	movs	r3, #220	@ 0xdc
 801ad3c:	18fb      	adds	r3, r7, r3
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	b29b      	uxth	r3, r3
 801ad42:	029b      	lsls	r3, r3, #10
 801ad44:	b29b      	uxth	r3, r3
 801ad46:	4313      	orrs	r3, r2
 801ad48:	b29a      	uxth	r2, r3
 801ad4a:	187b      	adds	r3, r7, r1
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	801a      	strh	r2, [r3, #0]
 801ad50:	e024      	b.n	801ad9c <USB_EPStartXfer+0x1098>
 801ad52:	683b      	ldr	r3, [r7, #0]
 801ad54:	785b      	ldrb	r3, [r3, #1]
 801ad56:	2b01      	cmp	r3, #1
 801ad58:	d120      	bne.n	801ad9c <USB_EPStartXfer+0x1098>
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	21d4      	movs	r1, #212	@ 0xd4
 801ad5e:	187a      	adds	r2, r7, r1
 801ad60:	6013      	str	r3, [r2, #0]
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	2250      	movs	r2, #80	@ 0x50
 801ad66:	5a9b      	ldrh	r3, [r3, r2]
 801ad68:	b29b      	uxth	r3, r3
 801ad6a:	001a      	movs	r2, r3
 801ad6c:	187b      	adds	r3, r7, r1
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	189b      	adds	r3, r3, r2
 801ad72:	187a      	adds	r2, r7, r1
 801ad74:	6013      	str	r3, [r2, #0]
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	00da      	lsls	r2, r3, #3
 801ad7c:	187b      	adds	r3, r7, r1
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	18d3      	adds	r3, r2, r3
 801ad82:	4a4f      	ldr	r2, [pc, #316]	@ (801aec0 <USB_EPStartXfer+0x11bc>)
 801ad84:	4694      	mov	ip, r2
 801ad86:	4463      	add	r3, ip
 801ad88:	21d0      	movs	r1, #208	@ 0xd0
 801ad8a:	187a      	adds	r2, r7, r1
 801ad8c:	6013      	str	r3, [r2, #0]
 801ad8e:	1d7b      	adds	r3, r7, #5
 801ad90:	33ff      	adds	r3, #255	@ 0xff
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	b29a      	uxth	r2, r3
 801ad96:	187b      	adds	r3, r7, r1
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	801a      	strh	r2, [r3, #0]
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	22c4      	movs	r2, #196	@ 0xc4
 801ada0:	18ba      	adds	r2, r7, r2
 801ada2:	6013      	str	r3, [r2, #0]
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	785b      	ldrb	r3, [r3, #1]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d000      	beq.n	801adae <USB_EPStartXfer+0x10aa>
 801adac:	e08c      	b.n	801aec8 <USB_EPStartXfer+0x11c4>
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	21bc      	movs	r1, #188	@ 0xbc
 801adb2:	187a      	adds	r2, r7, r1
 801adb4:	6013      	str	r3, [r2, #0]
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	2250      	movs	r2, #80	@ 0x50
 801adba:	5a9b      	ldrh	r3, [r3, r2]
 801adbc:	b29b      	uxth	r3, r3
 801adbe:	001a      	movs	r2, r3
 801adc0:	187b      	adds	r3, r7, r1
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	189b      	adds	r3, r3, r2
 801adc6:	187a      	adds	r2, r7, r1
 801adc8:	6013      	str	r3, [r2, #0]
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	781b      	ldrb	r3, [r3, #0]
 801adce:	00da      	lsls	r2, r3, #3
 801add0:	187b      	adds	r3, r7, r1
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	18d3      	adds	r3, r2, r3
 801add6:	4a37      	ldr	r2, [pc, #220]	@ (801aeb4 <USB_EPStartXfer+0x11b0>)
 801add8:	4694      	mov	ip, r2
 801adda:	4463      	add	r3, ip
 801addc:	21b8      	movs	r1, #184	@ 0xb8
 801adde:	187a      	adds	r2, r7, r1
 801ade0:	6013      	str	r3, [r2, #0]
 801ade2:	187b      	adds	r3, r7, r1
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	881b      	ldrh	r3, [r3, #0]
 801ade8:	b29b      	uxth	r3, r3
 801adea:	059b      	lsls	r3, r3, #22
 801adec:	0d9b      	lsrs	r3, r3, #22
 801adee:	b29a      	uxth	r2, r3
 801adf0:	187b      	adds	r3, r7, r1
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	801a      	strh	r2, [r3, #0]
 801adf6:	1d7b      	adds	r3, r7, #5
 801adf8:	33ff      	adds	r3, #255	@ 0xff
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	2b3e      	cmp	r3, #62	@ 0x3e
 801adfe:	d925      	bls.n	801ae4c <USB_EPStartXfer+0x1148>
 801ae00:	1d7b      	adds	r3, r7, #5
 801ae02:	33ff      	adds	r3, #255	@ 0xff
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	095b      	lsrs	r3, r3, #5
 801ae08:	21d8      	movs	r1, #216	@ 0xd8
 801ae0a:	187a      	adds	r2, r7, r1
 801ae0c:	6013      	str	r3, [r2, #0]
 801ae0e:	1d7b      	adds	r3, r7, #5
 801ae10:	33ff      	adds	r3, #255	@ 0xff
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	221f      	movs	r2, #31
 801ae16:	4013      	ands	r3, r2
 801ae18:	d104      	bne.n	801ae24 <USB_EPStartXfer+0x1120>
 801ae1a:	187b      	adds	r3, r7, r1
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	3b01      	subs	r3, #1
 801ae20:	187a      	adds	r2, r7, r1
 801ae22:	6013      	str	r3, [r2, #0]
 801ae24:	21b8      	movs	r1, #184	@ 0xb8
 801ae26:	187b      	adds	r3, r7, r1
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	881b      	ldrh	r3, [r3, #0]
 801ae2c:	b29a      	uxth	r2, r3
 801ae2e:	23d8      	movs	r3, #216	@ 0xd8
 801ae30:	18fb      	adds	r3, r7, r3
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	b29b      	uxth	r3, r3
 801ae36:	029b      	lsls	r3, r3, #10
 801ae38:	b29b      	uxth	r3, r3
 801ae3a:	4313      	orrs	r3, r2
 801ae3c:	b29b      	uxth	r3, r3
 801ae3e:	4a21      	ldr	r2, [pc, #132]	@ (801aec4 <USB_EPStartXfer+0x11c0>)
 801ae40:	4313      	orrs	r3, r2
 801ae42:	b29a      	uxth	r2, r3
 801ae44:	187b      	adds	r3, r7, r1
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	801a      	strh	r2, [r3, #0]
 801ae4a:	e062      	b.n	801af12 <USB_EPStartXfer+0x120e>
 801ae4c:	1d7b      	adds	r3, r7, #5
 801ae4e:	33ff      	adds	r3, #255	@ 0xff
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d10b      	bne.n	801ae6e <USB_EPStartXfer+0x116a>
 801ae56:	21b8      	movs	r1, #184	@ 0xb8
 801ae58:	187b      	adds	r3, r7, r1
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	881b      	ldrh	r3, [r3, #0]
 801ae5e:	b29b      	uxth	r3, r3
 801ae60:	4a18      	ldr	r2, [pc, #96]	@ (801aec4 <USB_EPStartXfer+0x11c0>)
 801ae62:	4313      	orrs	r3, r2
 801ae64:	b29a      	uxth	r2, r3
 801ae66:	187b      	adds	r3, r7, r1
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	801a      	strh	r2, [r3, #0]
 801ae6c:	e051      	b.n	801af12 <USB_EPStartXfer+0x120e>
 801ae6e:	1d7b      	adds	r3, r7, #5
 801ae70:	33ff      	adds	r3, #255	@ 0xff
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	085b      	lsrs	r3, r3, #1
 801ae76:	21d8      	movs	r1, #216	@ 0xd8
 801ae78:	187a      	adds	r2, r7, r1
 801ae7a:	6013      	str	r3, [r2, #0]
 801ae7c:	1d7b      	adds	r3, r7, #5
 801ae7e:	33ff      	adds	r3, #255	@ 0xff
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	2201      	movs	r2, #1
 801ae84:	4013      	ands	r3, r2
 801ae86:	d004      	beq.n	801ae92 <USB_EPStartXfer+0x118e>
 801ae88:	187b      	adds	r3, r7, r1
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	3301      	adds	r3, #1
 801ae8e:	187a      	adds	r2, r7, r1
 801ae90:	6013      	str	r3, [r2, #0]
 801ae92:	21b8      	movs	r1, #184	@ 0xb8
 801ae94:	187b      	adds	r3, r7, r1
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	881b      	ldrh	r3, [r3, #0]
 801ae9a:	b29a      	uxth	r2, r3
 801ae9c:	23d8      	movs	r3, #216	@ 0xd8
 801ae9e:	18fb      	adds	r3, r7, r3
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	029b      	lsls	r3, r3, #10
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	4313      	orrs	r3, r2
 801aeaa:	b29a      	uxth	r2, r3
 801aeac:	187b      	adds	r3, r7, r1
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	801a      	strh	r2, [r3, #0]
 801aeb2:	e02e      	b.n	801af12 <USB_EPStartXfer+0x120e>
 801aeb4:	00000406 	.word	0x00000406
 801aeb8:	ffff8f8f 	.word	0xffff8f8f
 801aebc:	ffff80c0 	.word	0xffff80c0
 801aec0:	00000402 	.word	0x00000402
 801aec4:	ffff8000 	.word	0xffff8000
 801aec8:	683b      	ldr	r3, [r7, #0]
 801aeca:	785b      	ldrb	r3, [r3, #1]
 801aecc:	2b01      	cmp	r3, #1
 801aece:	d120      	bne.n	801af12 <USB_EPStartXfer+0x120e>
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	2250      	movs	r2, #80	@ 0x50
 801aed4:	5a9b      	ldrh	r3, [r3, r2]
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	001a      	movs	r2, r3
 801aeda:	21c4      	movs	r1, #196	@ 0xc4
 801aedc:	187b      	adds	r3, r7, r1
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	189b      	adds	r3, r3, r2
 801aee2:	187a      	adds	r2, r7, r1
 801aee4:	6013      	str	r3, [r2, #0]
 801aee6:	683b      	ldr	r3, [r7, #0]
 801aee8:	781b      	ldrb	r3, [r3, #0]
 801aeea:	00da      	lsls	r2, r3, #3
 801aeec:	187b      	adds	r3, r7, r1
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	18d3      	adds	r3, r2, r3
 801aef2:	4a1d      	ldr	r2, [pc, #116]	@ (801af68 <USB_EPStartXfer+0x1264>)
 801aef4:	4694      	mov	ip, r2
 801aef6:	4463      	add	r3, ip
 801aef8:	21c0      	movs	r1, #192	@ 0xc0
 801aefa:	187a      	adds	r2, r7, r1
 801aefc:	6013      	str	r3, [r2, #0]
 801aefe:	1d7b      	adds	r3, r7, #5
 801af00:	33ff      	adds	r3, #255	@ 0xff
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	b29a      	uxth	r2, r3
 801af06:	187b      	adds	r3, r7, r1
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	801a      	strh	r2, [r3, #0]
 801af0c:	e001      	b.n	801af12 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801af0e:	2301      	movs	r3, #1
 801af10:	e025      	b.n	801af5e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801af12:	687a      	ldr	r2, [r7, #4]
 801af14:	683b      	ldr	r3, [r7, #0]
 801af16:	781b      	ldrb	r3, [r3, #0]
 801af18:	009b      	lsls	r3, r3, #2
 801af1a:	18d3      	adds	r3, r2, r3
 801af1c:	881b      	ldrh	r3, [r3, #0]
 801af1e:	b29a      	uxth	r2, r3
 801af20:	208a      	movs	r0, #138	@ 0x8a
 801af22:	183b      	adds	r3, r7, r0
 801af24:	4911      	ldr	r1, [pc, #68]	@ (801af6c <USB_EPStartXfer+0x1268>)
 801af26:	400a      	ands	r2, r1
 801af28:	801a      	strh	r2, [r3, #0]
 801af2a:	183b      	adds	r3, r7, r0
 801af2c:	183a      	adds	r2, r7, r0
 801af2e:	8812      	ldrh	r2, [r2, #0]
 801af30:	2180      	movs	r1, #128	@ 0x80
 801af32:	0149      	lsls	r1, r1, #5
 801af34:	404a      	eors	r2, r1
 801af36:	801a      	strh	r2, [r3, #0]
 801af38:	183b      	adds	r3, r7, r0
 801af3a:	183a      	adds	r2, r7, r0
 801af3c:	8812      	ldrh	r2, [r2, #0]
 801af3e:	2180      	movs	r1, #128	@ 0x80
 801af40:	0189      	lsls	r1, r1, #6
 801af42:	404a      	eors	r2, r1
 801af44:	801a      	strh	r2, [r3, #0]
 801af46:	687a      	ldr	r2, [r7, #4]
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	781b      	ldrb	r3, [r3, #0]
 801af4c:	009b      	lsls	r3, r3, #2
 801af4e:	18d3      	adds	r3, r2, r3
 801af50:	183a      	adds	r2, r7, r0
 801af52:	8812      	ldrh	r2, [r2, #0]
 801af54:	4906      	ldr	r1, [pc, #24]	@ (801af70 <USB_EPStartXfer+0x126c>)
 801af56:	430a      	orrs	r2, r1
 801af58:	b292      	uxth	r2, r2
 801af5a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801af5c:	2300      	movs	r3, #0
}
 801af5e:	0018      	movs	r0, r3
 801af60:	46bd      	mov	sp, r7
 801af62:	b043      	add	sp, #268	@ 0x10c
 801af64:	bd90      	pop	{r4, r7, pc}
 801af66:	46c0      	nop			@ (mov r8, r8)
 801af68:	00000406 	.word	0x00000406
 801af6c:	ffffbf8f 	.word	0xffffbf8f
 801af70:	ffff8080 	.word	0xffff8080

0801af74 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b084      	sub	sp, #16
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801af7e:	683b      	ldr	r3, [r7, #0]
 801af80:	785b      	ldrb	r3, [r3, #1]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d01d      	beq.n	801afc2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801af86:	687a      	ldr	r2, [r7, #4]
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	781b      	ldrb	r3, [r3, #0]
 801af8c:	009b      	lsls	r3, r3, #2
 801af8e:	18d3      	adds	r3, r2, r3
 801af90:	881b      	ldrh	r3, [r3, #0]
 801af92:	b29a      	uxth	r2, r3
 801af94:	200c      	movs	r0, #12
 801af96:	183b      	adds	r3, r7, r0
 801af98:	491b      	ldr	r1, [pc, #108]	@ (801b008 <USB_EPSetStall+0x94>)
 801af9a:	400a      	ands	r2, r1
 801af9c:	801a      	strh	r2, [r3, #0]
 801af9e:	183b      	adds	r3, r7, r0
 801afa0:	183a      	adds	r2, r7, r0
 801afa2:	8812      	ldrh	r2, [r2, #0]
 801afa4:	2110      	movs	r1, #16
 801afa6:	404a      	eors	r2, r1
 801afa8:	801a      	strh	r2, [r3, #0]
 801afaa:	687a      	ldr	r2, [r7, #4]
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	781b      	ldrb	r3, [r3, #0]
 801afb0:	009b      	lsls	r3, r3, #2
 801afb2:	18d3      	adds	r3, r2, r3
 801afb4:	183a      	adds	r2, r7, r0
 801afb6:	8812      	ldrh	r2, [r2, #0]
 801afb8:	4914      	ldr	r1, [pc, #80]	@ (801b00c <USB_EPSetStall+0x98>)
 801afba:	430a      	orrs	r2, r1
 801afbc:	b292      	uxth	r2, r2
 801afbe:	801a      	strh	r2, [r3, #0]
 801afc0:	e01d      	b.n	801affe <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801afc2:	687a      	ldr	r2, [r7, #4]
 801afc4:	683b      	ldr	r3, [r7, #0]
 801afc6:	781b      	ldrb	r3, [r3, #0]
 801afc8:	009b      	lsls	r3, r3, #2
 801afca:	18d3      	adds	r3, r2, r3
 801afcc:	881b      	ldrh	r3, [r3, #0]
 801afce:	b29a      	uxth	r2, r3
 801afd0:	200e      	movs	r0, #14
 801afd2:	183b      	adds	r3, r7, r0
 801afd4:	490e      	ldr	r1, [pc, #56]	@ (801b010 <USB_EPSetStall+0x9c>)
 801afd6:	400a      	ands	r2, r1
 801afd8:	801a      	strh	r2, [r3, #0]
 801afda:	183b      	adds	r3, r7, r0
 801afdc:	183a      	adds	r2, r7, r0
 801afde:	8812      	ldrh	r2, [r2, #0]
 801afe0:	2180      	movs	r1, #128	@ 0x80
 801afe2:	0149      	lsls	r1, r1, #5
 801afe4:	404a      	eors	r2, r1
 801afe6:	801a      	strh	r2, [r3, #0]
 801afe8:	687a      	ldr	r2, [r7, #4]
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	781b      	ldrb	r3, [r3, #0]
 801afee:	009b      	lsls	r3, r3, #2
 801aff0:	18d3      	adds	r3, r2, r3
 801aff2:	183a      	adds	r2, r7, r0
 801aff4:	8812      	ldrh	r2, [r2, #0]
 801aff6:	4905      	ldr	r1, [pc, #20]	@ (801b00c <USB_EPSetStall+0x98>)
 801aff8:	430a      	orrs	r2, r1
 801affa:	b292      	uxth	r2, r2
 801affc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801affe:	2300      	movs	r3, #0
}
 801b000:	0018      	movs	r0, r3
 801b002:	46bd      	mov	sp, r7
 801b004:	b004      	add	sp, #16
 801b006:	bd80      	pop	{r7, pc}
 801b008:	ffff8fbf 	.word	0xffff8fbf
 801b00c:	ffff8080 	.word	0xffff8080
 801b010:	ffffbf8f 	.word	0xffffbf8f

0801b014 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b086      	sub	sp, #24
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
 801b01c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801b01e:	683b      	ldr	r3, [r7, #0]
 801b020:	7b1b      	ldrb	r3, [r3, #12]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d000      	beq.n	801b028 <USB_EPClearStall+0x14>
 801b026:	e095      	b.n	801b154 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	785b      	ldrb	r3, [r3, #1]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d046      	beq.n	801b0be <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b030:	687a      	ldr	r2, [r7, #4]
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	781b      	ldrb	r3, [r3, #0]
 801b036:	009b      	lsls	r3, r3, #2
 801b038:	18d2      	adds	r2, r2, r3
 801b03a:	2110      	movs	r1, #16
 801b03c:	187b      	adds	r3, r7, r1
 801b03e:	8812      	ldrh	r2, [r2, #0]
 801b040:	801a      	strh	r2, [r3, #0]
 801b042:	187b      	adds	r3, r7, r1
 801b044:	881b      	ldrh	r3, [r3, #0]
 801b046:	2240      	movs	r2, #64	@ 0x40
 801b048:	4013      	ands	r3, r2
 801b04a:	d016      	beq.n	801b07a <USB_EPClearStall+0x66>
 801b04c:	687a      	ldr	r2, [r7, #4]
 801b04e:	683b      	ldr	r3, [r7, #0]
 801b050:	781b      	ldrb	r3, [r3, #0]
 801b052:	009b      	lsls	r3, r3, #2
 801b054:	18d3      	adds	r3, r2, r3
 801b056:	881b      	ldrh	r3, [r3, #0]
 801b058:	b29a      	uxth	r2, r3
 801b05a:	200e      	movs	r0, #14
 801b05c:	183b      	adds	r3, r7, r0
 801b05e:	4940      	ldr	r1, [pc, #256]	@ (801b160 <USB_EPClearStall+0x14c>)
 801b060:	400a      	ands	r2, r1
 801b062:	801a      	strh	r2, [r3, #0]
 801b064:	687a      	ldr	r2, [r7, #4]
 801b066:	683b      	ldr	r3, [r7, #0]
 801b068:	781b      	ldrb	r3, [r3, #0]
 801b06a:	009b      	lsls	r3, r3, #2
 801b06c:	18d3      	adds	r3, r2, r3
 801b06e:	183a      	adds	r2, r7, r0
 801b070:	8812      	ldrh	r2, [r2, #0]
 801b072:	493c      	ldr	r1, [pc, #240]	@ (801b164 <USB_EPClearStall+0x150>)
 801b074:	430a      	orrs	r2, r1
 801b076:	b292      	uxth	r2, r2
 801b078:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b07a:	683b      	ldr	r3, [r7, #0]
 801b07c:	78db      	ldrb	r3, [r3, #3]
 801b07e:	2b01      	cmp	r3, #1
 801b080:	d068      	beq.n	801b154 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b082:	687a      	ldr	r2, [r7, #4]
 801b084:	683b      	ldr	r3, [r7, #0]
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	18d3      	adds	r3, r2, r3
 801b08c:	881b      	ldrh	r3, [r3, #0]
 801b08e:	b29a      	uxth	r2, r3
 801b090:	200c      	movs	r0, #12
 801b092:	183b      	adds	r3, r7, r0
 801b094:	4934      	ldr	r1, [pc, #208]	@ (801b168 <USB_EPClearStall+0x154>)
 801b096:	400a      	ands	r2, r1
 801b098:	801a      	strh	r2, [r3, #0]
 801b09a:	183b      	adds	r3, r7, r0
 801b09c:	183a      	adds	r2, r7, r0
 801b09e:	8812      	ldrh	r2, [r2, #0]
 801b0a0:	2120      	movs	r1, #32
 801b0a2:	404a      	eors	r2, r1
 801b0a4:	801a      	strh	r2, [r3, #0]
 801b0a6:	687a      	ldr	r2, [r7, #4]
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	781b      	ldrb	r3, [r3, #0]
 801b0ac:	009b      	lsls	r3, r3, #2
 801b0ae:	18d3      	adds	r3, r2, r3
 801b0b0:	183a      	adds	r2, r7, r0
 801b0b2:	8812      	ldrh	r2, [r2, #0]
 801b0b4:	492d      	ldr	r1, [pc, #180]	@ (801b16c <USB_EPClearStall+0x158>)
 801b0b6:	430a      	orrs	r2, r1
 801b0b8:	b292      	uxth	r2, r2
 801b0ba:	801a      	strh	r2, [r3, #0]
 801b0bc:	e04a      	b.n	801b154 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b0be:	687a      	ldr	r2, [r7, #4]
 801b0c0:	683b      	ldr	r3, [r7, #0]
 801b0c2:	781b      	ldrb	r3, [r3, #0]
 801b0c4:	009b      	lsls	r3, r3, #2
 801b0c6:	18d2      	adds	r2, r2, r3
 801b0c8:	2116      	movs	r1, #22
 801b0ca:	187b      	adds	r3, r7, r1
 801b0cc:	8812      	ldrh	r2, [r2, #0]
 801b0ce:	801a      	strh	r2, [r3, #0]
 801b0d0:	187b      	adds	r3, r7, r1
 801b0d2:	881a      	ldrh	r2, [r3, #0]
 801b0d4:	2380      	movs	r3, #128	@ 0x80
 801b0d6:	01db      	lsls	r3, r3, #7
 801b0d8:	4013      	ands	r3, r2
 801b0da:	d016      	beq.n	801b10a <USB_EPClearStall+0xf6>
 801b0dc:	687a      	ldr	r2, [r7, #4]
 801b0de:	683b      	ldr	r3, [r7, #0]
 801b0e0:	781b      	ldrb	r3, [r3, #0]
 801b0e2:	009b      	lsls	r3, r3, #2
 801b0e4:	18d3      	adds	r3, r2, r3
 801b0e6:	881b      	ldrh	r3, [r3, #0]
 801b0e8:	b29a      	uxth	r2, r3
 801b0ea:	2014      	movs	r0, #20
 801b0ec:	183b      	adds	r3, r7, r0
 801b0ee:	491c      	ldr	r1, [pc, #112]	@ (801b160 <USB_EPClearStall+0x14c>)
 801b0f0:	400a      	ands	r2, r1
 801b0f2:	801a      	strh	r2, [r3, #0]
 801b0f4:	687a      	ldr	r2, [r7, #4]
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	781b      	ldrb	r3, [r3, #0]
 801b0fa:	009b      	lsls	r3, r3, #2
 801b0fc:	18d3      	adds	r3, r2, r3
 801b0fe:	183a      	adds	r2, r7, r0
 801b100:	8812      	ldrh	r2, [r2, #0]
 801b102:	491b      	ldr	r1, [pc, #108]	@ (801b170 <USB_EPClearStall+0x15c>)
 801b104:	430a      	orrs	r2, r1
 801b106:	b292      	uxth	r2, r2
 801b108:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b10a:	687a      	ldr	r2, [r7, #4]
 801b10c:	683b      	ldr	r3, [r7, #0]
 801b10e:	781b      	ldrb	r3, [r3, #0]
 801b110:	009b      	lsls	r3, r3, #2
 801b112:	18d3      	adds	r3, r2, r3
 801b114:	881b      	ldrh	r3, [r3, #0]
 801b116:	b29a      	uxth	r2, r3
 801b118:	2012      	movs	r0, #18
 801b11a:	183b      	adds	r3, r7, r0
 801b11c:	4915      	ldr	r1, [pc, #84]	@ (801b174 <USB_EPClearStall+0x160>)
 801b11e:	400a      	ands	r2, r1
 801b120:	801a      	strh	r2, [r3, #0]
 801b122:	183b      	adds	r3, r7, r0
 801b124:	183a      	adds	r2, r7, r0
 801b126:	8812      	ldrh	r2, [r2, #0]
 801b128:	2180      	movs	r1, #128	@ 0x80
 801b12a:	0149      	lsls	r1, r1, #5
 801b12c:	404a      	eors	r2, r1
 801b12e:	801a      	strh	r2, [r3, #0]
 801b130:	183b      	adds	r3, r7, r0
 801b132:	183a      	adds	r2, r7, r0
 801b134:	8812      	ldrh	r2, [r2, #0]
 801b136:	2180      	movs	r1, #128	@ 0x80
 801b138:	0189      	lsls	r1, r1, #6
 801b13a:	404a      	eors	r2, r1
 801b13c:	801a      	strh	r2, [r3, #0]
 801b13e:	687a      	ldr	r2, [r7, #4]
 801b140:	683b      	ldr	r3, [r7, #0]
 801b142:	781b      	ldrb	r3, [r3, #0]
 801b144:	009b      	lsls	r3, r3, #2
 801b146:	18d3      	adds	r3, r2, r3
 801b148:	183a      	adds	r2, r7, r0
 801b14a:	8812      	ldrh	r2, [r2, #0]
 801b14c:	4907      	ldr	r1, [pc, #28]	@ (801b16c <USB_EPClearStall+0x158>)
 801b14e:	430a      	orrs	r2, r1
 801b150:	b292      	uxth	r2, r2
 801b152:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b154:	2300      	movs	r3, #0
}
 801b156:	0018      	movs	r0, r3
 801b158:	46bd      	mov	sp, r7
 801b15a:	b006      	add	sp, #24
 801b15c:	bd80      	pop	{r7, pc}
 801b15e:	46c0      	nop			@ (mov r8, r8)
 801b160:	ffff8f8f 	.word	0xffff8f8f
 801b164:	ffff80c0 	.word	0xffff80c0
 801b168:	ffff8fbf 	.word	0xffff8fbf
 801b16c:	ffff8080 	.word	0xffff8080
 801b170:	ffffc080 	.word	0xffffc080
 801b174:	ffffbf8f 	.word	0xffffbf8f

0801b178 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	000a      	movs	r2, r1
 801b182:	1cfb      	adds	r3, r7, #3
 801b184:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b186:	1cfb      	adds	r3, r7, #3
 801b188:	781b      	ldrb	r3, [r3, #0]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d103      	bne.n	801b196 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	224c      	movs	r2, #76	@ 0x4c
 801b192:	2180      	movs	r1, #128	@ 0x80
 801b194:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b196:	2300      	movs	r3, #0
}
 801b198:	0018      	movs	r0, r3
 801b19a:	46bd      	mov	sp, r7
 801b19c:	b002      	add	sp, #8
 801b19e:	bd80      	pop	{r7, pc}

0801b1a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b082      	sub	sp, #8
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	2258      	movs	r2, #88	@ 0x58
 801b1ac:	5a9b      	ldrh	r3, [r3, r2]
 801b1ae:	b29b      	uxth	r3, r3
 801b1b0:	4a05      	ldr	r2, [pc, #20]	@ (801b1c8 <USB_DevConnect+0x28>)
 801b1b2:	4313      	orrs	r3, r2
 801b1b4:	b299      	uxth	r1, r3
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	2258      	movs	r2, #88	@ 0x58
 801b1ba:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b1bc:	2300      	movs	r3, #0
}
 801b1be:	0018      	movs	r0, r3
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	b002      	add	sp, #8
 801b1c4:	bd80      	pop	{r7, pc}
 801b1c6:	46c0      	nop			@ (mov r8, r8)
 801b1c8:	ffff8000 	.word	0xffff8000

0801b1cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b084      	sub	sp, #16
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	2244      	movs	r2, #68	@ 0x44
 801b1d8:	5a9b      	ldrh	r3, [r3, r2]
 801b1da:	b29b      	uxth	r3, r3
 801b1dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b1de:	68fb      	ldr	r3, [r7, #12]
}
 801b1e0:	0018      	movs	r0, r3
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	b004      	add	sp, #16
 801b1e6:	bd80      	pop	{r7, pc}

0801b1e8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b08a      	sub	sp, #40	@ 0x28
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	60f8      	str	r0, [r7, #12]
 801b1f0:	60b9      	str	r1, [r7, #8]
 801b1f2:	0019      	movs	r1, r3
 801b1f4:	1dbb      	adds	r3, r7, #6
 801b1f6:	801a      	strh	r2, [r3, #0]
 801b1f8:	1d3b      	adds	r3, r7, #4
 801b1fa:	1c0a      	adds	r2, r1, #0
 801b1fc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b1fe:	1d3b      	adds	r3, r7, #4
 801b200:	881b      	ldrh	r3, [r3, #0]
 801b202:	3301      	adds	r3, #1
 801b204:	085b      	lsrs	r3, r3, #1
 801b206:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b20c:	68bb      	ldr	r3, [r7, #8]
 801b20e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b210:	1dbb      	adds	r3, r7, #6
 801b212:	881a      	ldrh	r2, [r3, #0]
 801b214:	697b      	ldr	r3, [r7, #20]
 801b216:	18d3      	adds	r3, r2, r3
 801b218:	2280      	movs	r2, #128	@ 0x80
 801b21a:	00d2      	lsls	r2, r2, #3
 801b21c:	4694      	mov	ip, r2
 801b21e:	4463      	add	r3, ip
 801b220:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b222:	69bb      	ldr	r3, [r7, #24]
 801b224:	627b      	str	r3, [r7, #36]	@ 0x24
 801b226:	e020      	b.n	801b26a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b228:	69fb      	ldr	r3, [r7, #28]
 801b22a:	781a      	ldrb	r2, [r3, #0]
 801b22c:	2112      	movs	r1, #18
 801b22e:	187b      	adds	r3, r7, r1
 801b230:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b232:	69fb      	ldr	r3, [r7, #28]
 801b234:	3301      	adds	r3, #1
 801b236:	781b      	ldrb	r3, [r3, #0]
 801b238:	021b      	lsls	r3, r3, #8
 801b23a:	b21a      	sxth	r2, r3
 801b23c:	187b      	adds	r3, r7, r1
 801b23e:	2000      	movs	r0, #0
 801b240:	5e1b      	ldrsh	r3, [r3, r0]
 801b242:	4313      	orrs	r3, r2
 801b244:	b21a      	sxth	r2, r3
 801b246:	187b      	adds	r3, r7, r1
 801b248:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b24a:	6a3b      	ldr	r3, [r7, #32]
 801b24c:	187a      	adds	r2, r7, r1
 801b24e:	8812      	ldrh	r2, [r2, #0]
 801b250:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b252:	6a3b      	ldr	r3, [r7, #32]
 801b254:	3302      	adds	r3, #2
 801b256:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	3301      	adds	r3, #1
 801b25c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b25e:	69fb      	ldr	r3, [r7, #28]
 801b260:	3301      	adds	r3, #1
 801b262:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b266:	3b01      	subs	r3, #1
 801b268:	627b      	str	r3, [r7, #36]	@ 0x24
 801b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d1db      	bne.n	801b228 <USB_WritePMA+0x40>
  }
}
 801b270:	46c0      	nop			@ (mov r8, r8)
 801b272:	46c0      	nop			@ (mov r8, r8)
 801b274:	46bd      	mov	sp, r7
 801b276:	b00a      	add	sp, #40	@ 0x28
 801b278:	bd80      	pop	{r7, pc}

0801b27a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b27a:	b580      	push	{r7, lr}
 801b27c:	b08a      	sub	sp, #40	@ 0x28
 801b27e:	af00      	add	r7, sp, #0
 801b280:	60f8      	str	r0, [r7, #12]
 801b282:	60b9      	str	r1, [r7, #8]
 801b284:	0019      	movs	r1, r3
 801b286:	1dbb      	adds	r3, r7, #6
 801b288:	801a      	strh	r2, [r3, #0]
 801b28a:	1d3b      	adds	r3, r7, #4
 801b28c:	1c0a      	adds	r2, r1, #0
 801b28e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b290:	1d3b      	adds	r3, r7, #4
 801b292:	881b      	ldrh	r3, [r3, #0]
 801b294:	085b      	lsrs	r3, r3, #1
 801b296:	b29b      	uxth	r3, r3
 801b298:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b2a2:	1dbb      	adds	r3, r7, #6
 801b2a4:	881a      	ldrh	r2, [r3, #0]
 801b2a6:	697b      	ldr	r3, [r7, #20]
 801b2a8:	18d3      	adds	r3, r2, r3
 801b2aa:	2280      	movs	r2, #128	@ 0x80
 801b2ac:	00d2      	lsls	r2, r2, #3
 801b2ae:	4694      	mov	ip, r2
 801b2b0:	4463      	add	r3, ip
 801b2b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b2b4:	69bb      	ldr	r3, [r7, #24]
 801b2b6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b2b8:	e018      	b.n	801b2ec <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b2ba:	6a3b      	ldr	r3, [r7, #32]
 801b2bc:	881b      	ldrh	r3, [r3, #0]
 801b2be:	b29b      	uxth	r3, r3
 801b2c0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b2c2:	6a3b      	ldr	r3, [r7, #32]
 801b2c4:	3302      	adds	r3, #2
 801b2c6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	b2da      	uxtb	r2, r3
 801b2cc:	69fb      	ldr	r3, [r7, #28]
 801b2ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b2d0:	69fb      	ldr	r3, [r7, #28]
 801b2d2:	3301      	adds	r3, #1
 801b2d4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b2d6:	693b      	ldr	r3, [r7, #16]
 801b2d8:	0a1b      	lsrs	r3, r3, #8
 801b2da:	b2da      	uxtb	r2, r3
 801b2dc:	69fb      	ldr	r3, [r7, #28]
 801b2de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b2e0:	69fb      	ldr	r3, [r7, #28]
 801b2e2:	3301      	adds	r3, #1
 801b2e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2e8:	3b01      	subs	r3, #1
 801b2ea:	627b      	str	r3, [r7, #36]	@ 0x24
 801b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d1e3      	bne.n	801b2ba <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b2f2:	1d3b      	adds	r3, r7, #4
 801b2f4:	881b      	ldrh	r3, [r3, #0]
 801b2f6:	2201      	movs	r2, #1
 801b2f8:	4013      	ands	r3, r2
 801b2fa:	b29b      	uxth	r3, r3
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d007      	beq.n	801b310 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b300:	6a3b      	ldr	r3, [r7, #32]
 801b302:	881b      	ldrh	r3, [r3, #0]
 801b304:	b29b      	uxth	r3, r3
 801b306:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b308:	693b      	ldr	r3, [r7, #16]
 801b30a:	b2da      	uxtb	r2, r3
 801b30c:	69fb      	ldr	r3, [r7, #28]
 801b30e:	701a      	strb	r2, [r3, #0]
  }
}
 801b310:	46c0      	nop			@ (mov r8, r8)
 801b312:	46bd      	mov	sp, r7
 801b314:	b00a      	add	sp, #40	@ 0x28
 801b316:	bd80      	pop	{r7, pc}

0801b318 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b084      	sub	sp, #16
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	6078      	str	r0, [r7, #4]
 801b320:	000a      	movs	r2, r1
 801b322:	1cfb      	adds	r3, r7, #3
 801b324:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b326:	230f      	movs	r3, #15
 801b328:	18fb      	adds	r3, r7, r3
 801b32a:	2200      	movs	r2, #0
 801b32c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	7c1b      	ldrb	r3, [r3, #16]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d116      	bne.n	801b364 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b336:	2380      	movs	r3, #128	@ 0x80
 801b338:	009b      	lsls	r3, r3, #2
 801b33a:	6878      	ldr	r0, [r7, #4]
 801b33c:	2202      	movs	r2, #2
 801b33e:	2181      	movs	r1, #129	@ 0x81
 801b340:	f002 f8eb 	bl	801d51a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	2201      	movs	r2, #1
 801b348:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b34a:	2380      	movs	r3, #128	@ 0x80
 801b34c:	009b      	lsls	r3, r3, #2
 801b34e:	6878      	ldr	r0, [r7, #4]
 801b350:	2202      	movs	r2, #2
 801b352:	2101      	movs	r1, #1
 801b354:	f002 f8e1 	bl	801d51a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b358:	687a      	ldr	r2, [r7, #4]
 801b35a:	23b6      	movs	r3, #182	@ 0xb6
 801b35c:	005b      	lsls	r3, r3, #1
 801b35e:	2101      	movs	r1, #1
 801b360:	50d1      	str	r1, [r2, r3]
 801b362:	e013      	b.n	801b38c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b364:	6878      	ldr	r0, [r7, #4]
 801b366:	2340      	movs	r3, #64	@ 0x40
 801b368:	2202      	movs	r2, #2
 801b36a:	2181      	movs	r1, #129	@ 0x81
 801b36c:	f002 f8d5 	bl	801d51a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	2201      	movs	r2, #1
 801b374:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b376:	6878      	ldr	r0, [r7, #4]
 801b378:	2340      	movs	r3, #64	@ 0x40
 801b37a:	2202      	movs	r2, #2
 801b37c:	2101      	movs	r1, #1
 801b37e:	f002 f8cc 	bl	801d51a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b382:	687a      	ldr	r2, [r7, #4]
 801b384:	23b6      	movs	r3, #182	@ 0xb6
 801b386:	005b      	lsls	r3, r3, #1
 801b388:	2101      	movs	r1, #1
 801b38a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	2308      	movs	r3, #8
 801b390:	2203      	movs	r2, #3
 801b392:	2182      	movs	r1, #130	@ 0x82
 801b394:	f002 f8c1 	bl	801d51a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	2201      	movs	r2, #1
 801b39c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b39e:	2387      	movs	r3, #135	@ 0x87
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	0018      	movs	r0, r3
 801b3a4:	f002 fa52 	bl	801d84c <USBD_static_malloc>
 801b3a8:	0001      	movs	r1, r0
 801b3aa:	687a      	ldr	r2, [r7, #4]
 801b3ac:	23ae      	movs	r3, #174	@ 0xae
 801b3ae:	009b      	lsls	r3, r3, #2
 801b3b0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b3b2:	687a      	ldr	r2, [r7, #4]
 801b3b4:	23ae      	movs	r3, #174	@ 0xae
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	58d3      	ldr	r3, [r2, r3]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d104      	bne.n	801b3c8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b3be:	230f      	movs	r3, #15
 801b3c0:	18fb      	adds	r3, r7, r3
 801b3c2:	2201      	movs	r2, #1
 801b3c4:	701a      	strb	r2, [r3, #0]
 801b3c6:	e02c      	b.n	801b422 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b3c8:	687a      	ldr	r2, [r7, #4]
 801b3ca:	23ae      	movs	r3, #174	@ 0xae
 801b3cc:	009b      	lsls	r3, r3, #2
 801b3ce:	58d3      	ldr	r3, [r2, r3]
 801b3d0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b3d2:	687a      	ldr	r2, [r7, #4]
 801b3d4:	23af      	movs	r3, #175	@ 0xaf
 801b3d6:	009b      	lsls	r3, r3, #2
 801b3d8:	58d3      	ldr	r3, [r2, r3]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b3de:	68ba      	ldr	r2, [r7, #8]
 801b3e0:	2385      	movs	r3, #133	@ 0x85
 801b3e2:	009b      	lsls	r3, r3, #2
 801b3e4:	2100      	movs	r1, #0
 801b3e6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b3e8:	68ba      	ldr	r2, [r7, #8]
 801b3ea:	2386      	movs	r3, #134	@ 0x86
 801b3ec:	009b      	lsls	r3, r3, #2
 801b3ee:	2100      	movs	r1, #0
 801b3f0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	7c1b      	ldrb	r3, [r3, #16]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d10a      	bne.n	801b410 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b3fa:	68ba      	ldr	r2, [r7, #8]
 801b3fc:	2381      	movs	r3, #129	@ 0x81
 801b3fe:	009b      	lsls	r3, r3, #2
 801b400:	58d2      	ldr	r2, [r2, r3]
 801b402:	2380      	movs	r3, #128	@ 0x80
 801b404:	009b      	lsls	r3, r3, #2
 801b406:	6878      	ldr	r0, [r7, #4]
 801b408:	2101      	movs	r1, #1
 801b40a:	f002 f9d1 	bl	801d7b0 <USBD_LL_PrepareReceive>
 801b40e:	e008      	b.n	801b422 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b410:	68ba      	ldr	r2, [r7, #8]
 801b412:	2381      	movs	r3, #129	@ 0x81
 801b414:	009b      	lsls	r3, r3, #2
 801b416:	58d2      	ldr	r2, [r2, r3]
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	2340      	movs	r3, #64	@ 0x40
 801b41c:	2101      	movs	r1, #1
 801b41e:	f002 f9c7 	bl	801d7b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b422:	230f      	movs	r3, #15
 801b424:	18fb      	adds	r3, r7, r3
 801b426:	781b      	ldrb	r3, [r3, #0]
}
 801b428:	0018      	movs	r0, r3
 801b42a:	46bd      	mov	sp, r7
 801b42c:	b004      	add	sp, #16
 801b42e:	bd80      	pop	{r7, pc}

0801b430 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b430:	b580      	push	{r7, lr}
 801b432:	b084      	sub	sp, #16
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
 801b438:	000a      	movs	r2, r1
 801b43a:	1cfb      	adds	r3, r7, #3
 801b43c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b43e:	230f      	movs	r3, #15
 801b440:	18fb      	adds	r3, r7, r3
 801b442:	2200      	movs	r2, #0
 801b444:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	2181      	movs	r1, #129	@ 0x81
 801b44a:	0018      	movs	r0, r3
 801b44c:	f002 f89c 	bl	801d588 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	2200      	movs	r2, #0
 801b454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	2101      	movs	r1, #1
 801b45a:	0018      	movs	r0, r3
 801b45c:	f002 f894 	bl	801d588 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b460:	687a      	ldr	r2, [r7, #4]
 801b462:	23b6      	movs	r3, #182	@ 0xb6
 801b464:	005b      	lsls	r3, r3, #1
 801b466:	2100      	movs	r1, #0
 801b468:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	2182      	movs	r1, #130	@ 0x82
 801b46e:	0018      	movs	r0, r3
 801b470:	f002 f88a 	bl	801d588 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	2200      	movs	r2, #0
 801b478:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b47a:	687a      	ldr	r2, [r7, #4]
 801b47c:	23ae      	movs	r3, #174	@ 0xae
 801b47e:	009b      	lsls	r3, r3, #2
 801b480:	58d3      	ldr	r3, [r2, r3]
 801b482:	2b00      	cmp	r3, #0
 801b484:	d011      	beq.n	801b4aa <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b486:	687a      	ldr	r2, [r7, #4]
 801b488:	23af      	movs	r3, #175	@ 0xaf
 801b48a:	009b      	lsls	r3, r3, #2
 801b48c:	58d3      	ldr	r3, [r2, r3]
 801b48e:	685b      	ldr	r3, [r3, #4]
 801b490:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b492:	687a      	ldr	r2, [r7, #4]
 801b494:	23ae      	movs	r3, #174	@ 0xae
 801b496:	009b      	lsls	r3, r3, #2
 801b498:	58d3      	ldr	r3, [r2, r3]
 801b49a:	0018      	movs	r0, r3
 801b49c:	f002 f9e2 	bl	801d864 <USBD_static_free>
    pdev->pClassData = NULL;
 801b4a0:	687a      	ldr	r2, [r7, #4]
 801b4a2:	23ae      	movs	r3, #174	@ 0xae
 801b4a4:	009b      	lsls	r3, r3, #2
 801b4a6:	2100      	movs	r1, #0
 801b4a8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b4aa:	230f      	movs	r3, #15
 801b4ac:	18fb      	adds	r3, r7, r3
 801b4ae:	781b      	ldrb	r3, [r3, #0]
}
 801b4b0:	0018      	movs	r0, r3
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	b004      	add	sp, #16
 801b4b6:	bd80      	pop	{r7, pc}

0801b4b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b086      	sub	sp, #24
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
 801b4c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b4c2:	687a      	ldr	r2, [r7, #4]
 801b4c4:	23ae      	movs	r3, #174	@ 0xae
 801b4c6:	009b      	lsls	r3, r3, #2
 801b4c8:	58d3      	ldr	r3, [r2, r3]
 801b4ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b4cc:	230f      	movs	r3, #15
 801b4ce:	18fb      	adds	r3, r7, r3
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b4d4:	230c      	movs	r3, #12
 801b4d6:	18fb      	adds	r3, r7, r3
 801b4d8:	2200      	movs	r2, #0
 801b4da:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b4dc:	2317      	movs	r3, #23
 801b4de:	18fb      	adds	r3, r7, r3
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b4e4:	683b      	ldr	r3, [r7, #0]
 801b4e6:	781b      	ldrb	r3, [r3, #0]
 801b4e8:	001a      	movs	r2, r3
 801b4ea:	2360      	movs	r3, #96	@ 0x60
 801b4ec:	4013      	ands	r3, r2
 801b4ee:	d03d      	beq.n	801b56c <USBD_CDC_Setup+0xb4>
 801b4f0:	2b20      	cmp	r3, #32
 801b4f2:	d000      	beq.n	801b4f6 <USBD_CDC_Setup+0x3e>
 801b4f4:	e094      	b.n	801b620 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	88db      	ldrh	r3, [r3, #6]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d02b      	beq.n	801b556 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	781b      	ldrb	r3, [r3, #0]
 801b502:	b25b      	sxtb	r3, r3
 801b504:	2b00      	cmp	r3, #0
 801b506:	da12      	bge.n	801b52e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b508:	687a      	ldr	r2, [r7, #4]
 801b50a:	23af      	movs	r3, #175	@ 0xaf
 801b50c:	009b      	lsls	r3, r3, #2
 801b50e:	58d3      	ldr	r3, [r2, r3]
 801b510:	689b      	ldr	r3, [r3, #8]
 801b512:	683a      	ldr	r2, [r7, #0]
 801b514:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b516:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b518:	683a      	ldr	r2, [r7, #0]
 801b51a:	88d2      	ldrh	r2, [r2, #6]
 801b51c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b51e:	6939      	ldr	r1, [r7, #16]
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	88da      	ldrh	r2, [r3, #6]
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	0018      	movs	r0, r3
 801b528:	f001 fbaf 	bl	801cc8a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b52c:	e083      	b.n	801b636 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b52e:	683b      	ldr	r3, [r7, #0]
 801b530:	7859      	ldrb	r1, [r3, #1]
 801b532:	693a      	ldr	r2, [r7, #16]
 801b534:	2380      	movs	r3, #128	@ 0x80
 801b536:	009b      	lsls	r3, r3, #2
 801b538:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b53a:	683b      	ldr	r3, [r7, #0]
 801b53c:	88db      	ldrh	r3, [r3, #6]
 801b53e:	b2d9      	uxtb	r1, r3
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	4a40      	ldr	r2, [pc, #256]	@ (801b644 <USBD_CDC_Setup+0x18c>)
 801b544:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b546:	6939      	ldr	r1, [r7, #16]
 801b548:	683b      	ldr	r3, [r7, #0]
 801b54a:	88da      	ldrh	r2, [r3, #6]
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	0018      	movs	r0, r3
 801b550:	f001 fbce 	bl	801ccf0 <USBD_CtlPrepareRx>
      break;
 801b554:	e06f      	b.n	801b636 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b556:	687a      	ldr	r2, [r7, #4]
 801b558:	23af      	movs	r3, #175	@ 0xaf
 801b55a:	009b      	lsls	r3, r3, #2
 801b55c:	58d3      	ldr	r3, [r2, r3]
 801b55e:	689b      	ldr	r3, [r3, #8]
 801b560:	683a      	ldr	r2, [r7, #0]
 801b562:	7850      	ldrb	r0, [r2, #1]
 801b564:	6839      	ldr	r1, [r7, #0]
 801b566:	2200      	movs	r2, #0
 801b568:	4798      	blx	r3
      break;
 801b56a:	e064      	b.n	801b636 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b56c:	683b      	ldr	r3, [r7, #0]
 801b56e:	785b      	ldrb	r3, [r3, #1]
 801b570:	2b0b      	cmp	r3, #11
 801b572:	d037      	beq.n	801b5e4 <USBD_CDC_Setup+0x12c>
 801b574:	dc47      	bgt.n	801b606 <USBD_CDC_Setup+0x14e>
 801b576:	2b00      	cmp	r3, #0
 801b578:	d002      	beq.n	801b580 <USBD_CDC_Setup+0xc8>
 801b57a:	2b0a      	cmp	r3, #10
 801b57c:	d019      	beq.n	801b5b2 <USBD_CDC_Setup+0xfa>
 801b57e:	e042      	b.n	801b606 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b580:	687a      	ldr	r2, [r7, #4]
 801b582:	23a7      	movs	r3, #167	@ 0xa7
 801b584:	009b      	lsls	r3, r3, #2
 801b586:	5cd3      	ldrb	r3, [r2, r3]
 801b588:	2b03      	cmp	r3, #3
 801b58a:	d107      	bne.n	801b59c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b58c:	230c      	movs	r3, #12
 801b58e:	18f9      	adds	r1, r7, r3
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	2202      	movs	r2, #2
 801b594:	0018      	movs	r0, r3
 801b596:	f001 fb78 	bl	801cc8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b59a:	e040      	b.n	801b61e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b59c:	683a      	ldr	r2, [r7, #0]
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	0011      	movs	r1, r2
 801b5a2:	0018      	movs	r0, r3
 801b5a4:	f001 faf3 	bl	801cb8e <USBD_CtlError>
            ret = USBD_FAIL;
 801b5a8:	2317      	movs	r3, #23
 801b5aa:	18fb      	adds	r3, r7, r3
 801b5ac:	2202      	movs	r2, #2
 801b5ae:	701a      	strb	r2, [r3, #0]
          break;
 801b5b0:	e035      	b.n	801b61e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b5b2:	687a      	ldr	r2, [r7, #4]
 801b5b4:	23a7      	movs	r3, #167	@ 0xa7
 801b5b6:	009b      	lsls	r3, r3, #2
 801b5b8:	5cd3      	ldrb	r3, [r2, r3]
 801b5ba:	2b03      	cmp	r3, #3
 801b5bc:	d107      	bne.n	801b5ce <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b5be:	230f      	movs	r3, #15
 801b5c0:	18f9      	adds	r1, r7, r3
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	2201      	movs	r2, #1
 801b5c6:	0018      	movs	r0, r3
 801b5c8:	f001 fb5f 	bl	801cc8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b5cc:	e027      	b.n	801b61e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b5ce:	683a      	ldr	r2, [r7, #0]
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	0011      	movs	r1, r2
 801b5d4:	0018      	movs	r0, r3
 801b5d6:	f001 fada 	bl	801cb8e <USBD_CtlError>
            ret = USBD_FAIL;
 801b5da:	2317      	movs	r3, #23
 801b5dc:	18fb      	adds	r3, r7, r3
 801b5de:	2202      	movs	r2, #2
 801b5e0:	701a      	strb	r2, [r3, #0]
          break;
 801b5e2:	e01c      	b.n	801b61e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b5e4:	687a      	ldr	r2, [r7, #4]
 801b5e6:	23a7      	movs	r3, #167	@ 0xa7
 801b5e8:	009b      	lsls	r3, r3, #2
 801b5ea:	5cd3      	ldrb	r3, [r2, r3]
 801b5ec:	2b03      	cmp	r3, #3
 801b5ee:	d015      	beq.n	801b61c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b5f0:	683a      	ldr	r2, [r7, #0]
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	0011      	movs	r1, r2
 801b5f6:	0018      	movs	r0, r3
 801b5f8:	f001 fac9 	bl	801cb8e <USBD_CtlError>
            ret = USBD_FAIL;
 801b5fc:	2317      	movs	r3, #23
 801b5fe:	18fb      	adds	r3, r7, r3
 801b600:	2202      	movs	r2, #2
 801b602:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b604:	e00a      	b.n	801b61c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b606:	683a      	ldr	r2, [r7, #0]
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	0011      	movs	r1, r2
 801b60c:	0018      	movs	r0, r3
 801b60e:	f001 fabe 	bl	801cb8e <USBD_CtlError>
          ret = USBD_FAIL;
 801b612:	2317      	movs	r3, #23
 801b614:	18fb      	adds	r3, r7, r3
 801b616:	2202      	movs	r2, #2
 801b618:	701a      	strb	r2, [r3, #0]
          break;
 801b61a:	e000      	b.n	801b61e <USBD_CDC_Setup+0x166>
          break;
 801b61c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b61e:	e00a      	b.n	801b636 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b620:	683a      	ldr	r2, [r7, #0]
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	0011      	movs	r1, r2
 801b626:	0018      	movs	r0, r3
 801b628:	f001 fab1 	bl	801cb8e <USBD_CtlError>
      ret = USBD_FAIL;
 801b62c:	2317      	movs	r3, #23
 801b62e:	18fb      	adds	r3, r7, r3
 801b630:	2202      	movs	r2, #2
 801b632:	701a      	strb	r2, [r3, #0]
      break;
 801b634:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b636:	2317      	movs	r3, #23
 801b638:	18fb      	adds	r3, r7, r3
 801b63a:	781b      	ldrb	r3, [r3, #0]
}
 801b63c:	0018      	movs	r0, r3
 801b63e:	46bd      	mov	sp, r7
 801b640:	b006      	add	sp, #24
 801b642:	bd80      	pop	{r7, pc}
 801b644:	00000201 	.word	0x00000201

0801b648 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b084      	sub	sp, #16
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
 801b650:	000a      	movs	r2, r1
 801b652:	1cfb      	adds	r3, r7, #3
 801b654:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b656:	687a      	ldr	r2, [r7, #4]
 801b658:	23ae      	movs	r3, #174	@ 0xae
 801b65a:	009b      	lsls	r3, r3, #2
 801b65c:	58d3      	ldr	r3, [r2, r3]
 801b65e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b660:	687a      	ldr	r2, [r7, #4]
 801b662:	23b0      	movs	r3, #176	@ 0xb0
 801b664:	009b      	lsls	r3, r3, #2
 801b666:	58d3      	ldr	r3, [r2, r3]
 801b668:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b66a:	687a      	ldr	r2, [r7, #4]
 801b66c:	23ae      	movs	r3, #174	@ 0xae
 801b66e:	009b      	lsls	r3, r3, #2
 801b670:	58d3      	ldr	r3, [r2, r3]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d03e      	beq.n	801b6f4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b676:	1cfb      	adds	r3, r7, #3
 801b678:	781a      	ldrb	r2, [r3, #0]
 801b67a:	6879      	ldr	r1, [r7, #4]
 801b67c:	0013      	movs	r3, r2
 801b67e:	009b      	lsls	r3, r3, #2
 801b680:	189b      	adds	r3, r3, r2
 801b682:	009b      	lsls	r3, r3, #2
 801b684:	18cb      	adds	r3, r1, r3
 801b686:	331c      	adds	r3, #28
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d02b      	beq.n	801b6e6 <USBD_CDC_DataIn+0x9e>
 801b68e:	1cfb      	adds	r3, r7, #3
 801b690:	781a      	ldrb	r2, [r3, #0]
 801b692:	6879      	ldr	r1, [r7, #4]
 801b694:	0013      	movs	r3, r2
 801b696:	009b      	lsls	r3, r3, #2
 801b698:	189b      	adds	r3, r3, r2
 801b69a:	009b      	lsls	r3, r3, #2
 801b69c:	18cb      	adds	r3, r1, r3
 801b69e:	331c      	adds	r3, #28
 801b6a0:	6818      	ldr	r0, [r3, #0]
 801b6a2:	1cfb      	adds	r3, r7, #3
 801b6a4:	781a      	ldrb	r2, [r3, #0]
 801b6a6:	68b9      	ldr	r1, [r7, #8]
 801b6a8:	0013      	movs	r3, r2
 801b6aa:	009b      	lsls	r3, r3, #2
 801b6ac:	189b      	adds	r3, r3, r2
 801b6ae:	00db      	lsls	r3, r3, #3
 801b6b0:	18cb      	adds	r3, r1, r3
 801b6b2:	3338      	adds	r3, #56	@ 0x38
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	0019      	movs	r1, r3
 801b6b8:	f7e4 fdfa 	bl	80002b0 <__aeabi_uidivmod>
 801b6bc:	1e0b      	subs	r3, r1, #0
 801b6be:	d112      	bne.n	801b6e6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b6c0:	1cfb      	adds	r3, r7, #3
 801b6c2:	781a      	ldrb	r2, [r3, #0]
 801b6c4:	6879      	ldr	r1, [r7, #4]
 801b6c6:	0013      	movs	r3, r2
 801b6c8:	009b      	lsls	r3, r3, #2
 801b6ca:	189b      	adds	r3, r3, r2
 801b6cc:	009b      	lsls	r3, r3, #2
 801b6ce:	18cb      	adds	r3, r1, r3
 801b6d0:	331c      	adds	r3, #28
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b6d6:	1cfb      	adds	r3, r7, #3
 801b6d8:	7819      	ldrb	r1, [r3, #0]
 801b6da:	6878      	ldr	r0, [r7, #4]
 801b6dc:	2300      	movs	r3, #0
 801b6de:	2200      	movs	r2, #0
 801b6e0:	f002 f82f 	bl	801d742 <USBD_LL_Transmit>
 801b6e4:	e004      	b.n	801b6f0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b6e6:	68fa      	ldr	r2, [r7, #12]
 801b6e8:	2385      	movs	r3, #133	@ 0x85
 801b6ea:	009b      	lsls	r3, r3, #2
 801b6ec:	2100      	movs	r1, #0
 801b6ee:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	e000      	b.n	801b6f6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b6f4:	2302      	movs	r3, #2
  }
}
 801b6f6:	0018      	movs	r0, r3
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	b004      	add	sp, #16
 801b6fc:	bd80      	pop	{r7, pc}

0801b6fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b6fe:	b580      	push	{r7, lr}
 801b700:	b084      	sub	sp, #16
 801b702:	af00      	add	r7, sp, #0
 801b704:	6078      	str	r0, [r7, #4]
 801b706:	000a      	movs	r2, r1
 801b708:	1cfb      	adds	r3, r7, #3
 801b70a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b70c:	687a      	ldr	r2, [r7, #4]
 801b70e:	23ae      	movs	r3, #174	@ 0xae
 801b710:	009b      	lsls	r3, r3, #2
 801b712:	58d3      	ldr	r3, [r2, r3]
 801b714:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b716:	1cfb      	adds	r3, r7, #3
 801b718:	781a      	ldrb	r2, [r3, #0]
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	0011      	movs	r1, r2
 801b71e:	0018      	movs	r0, r3
 801b720:	f002 f87d 	bl	801d81e <USBD_LL_GetRxDataSize>
 801b724:	0001      	movs	r1, r0
 801b726:	68fa      	ldr	r2, [r7, #12]
 801b728:	2383      	movs	r3, #131	@ 0x83
 801b72a:	009b      	lsls	r3, r3, #2
 801b72c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	23ae      	movs	r3, #174	@ 0xae
 801b732:	009b      	lsls	r3, r3, #2
 801b734:	58d3      	ldr	r3, [r2, r3]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d011      	beq.n	801b75e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b73a:	687a      	ldr	r2, [r7, #4]
 801b73c:	23af      	movs	r3, #175	@ 0xaf
 801b73e:	009b      	lsls	r3, r3, #2
 801b740:	58d3      	ldr	r3, [r2, r3]
 801b742:	68da      	ldr	r2, [r3, #12]
 801b744:	68f9      	ldr	r1, [r7, #12]
 801b746:	2381      	movs	r3, #129	@ 0x81
 801b748:	009b      	lsls	r3, r3, #2
 801b74a:	58c8      	ldr	r0, [r1, r3]
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	2183      	movs	r1, #131	@ 0x83
 801b750:	0089      	lsls	r1, r1, #2
 801b752:	468c      	mov	ip, r1
 801b754:	4463      	add	r3, ip
 801b756:	0019      	movs	r1, r3
 801b758:	4790      	blx	r2

    return USBD_OK;
 801b75a:	2300      	movs	r3, #0
 801b75c:	e000      	b.n	801b760 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b75e:	2302      	movs	r3, #2
  }
}
 801b760:	0018      	movs	r0, r3
 801b762:	46bd      	mov	sp, r7
 801b764:	b004      	add	sp, #16
 801b766:	bd80      	pop	{r7, pc}

0801b768 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b768:	b590      	push	{r4, r7, lr}
 801b76a:	b085      	sub	sp, #20
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b770:	687a      	ldr	r2, [r7, #4]
 801b772:	23ae      	movs	r3, #174	@ 0xae
 801b774:	009b      	lsls	r3, r3, #2
 801b776:	58d3      	ldr	r3, [r2, r3]
 801b778:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b77a:	687a      	ldr	r2, [r7, #4]
 801b77c:	23af      	movs	r3, #175	@ 0xaf
 801b77e:	009b      	lsls	r3, r3, #2
 801b780:	58d3      	ldr	r3, [r2, r3]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d018      	beq.n	801b7b8 <USBD_CDC_EP0_RxReady+0x50>
 801b786:	68fa      	ldr	r2, [r7, #12]
 801b788:	2380      	movs	r3, #128	@ 0x80
 801b78a:	009b      	lsls	r3, r3, #2
 801b78c:	5cd3      	ldrb	r3, [r2, r3]
 801b78e:	2bff      	cmp	r3, #255	@ 0xff
 801b790:	d012      	beq.n	801b7b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b792:	687a      	ldr	r2, [r7, #4]
 801b794:	23af      	movs	r3, #175	@ 0xaf
 801b796:	009b      	lsls	r3, r3, #2
 801b798:	58d3      	ldr	r3, [r2, r3]
 801b79a:	689b      	ldr	r3, [r3, #8]
 801b79c:	68f9      	ldr	r1, [r7, #12]
 801b79e:	2280      	movs	r2, #128	@ 0x80
 801b7a0:	0092      	lsls	r2, r2, #2
 801b7a2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b7a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b7a6:	68fa      	ldr	r2, [r7, #12]
 801b7a8:	4c06      	ldr	r4, [pc, #24]	@ (801b7c4 <USBD_CDC_EP0_RxReady+0x5c>)
 801b7aa:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b7ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b7ae:	68fa      	ldr	r2, [r7, #12]
 801b7b0:	2380      	movs	r3, #128	@ 0x80
 801b7b2:	009b      	lsls	r3, r3, #2
 801b7b4:	21ff      	movs	r1, #255	@ 0xff
 801b7b6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b7b8:	2300      	movs	r3, #0
}
 801b7ba:	0018      	movs	r0, r3
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	b005      	add	sp, #20
 801b7c0:	bd90      	pop	{r4, r7, pc}
 801b7c2:	46c0      	nop			@ (mov r8, r8)
 801b7c4:	00000201 	.word	0x00000201

0801b7c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b082      	sub	sp, #8
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	2243      	movs	r2, #67	@ 0x43
 801b7d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b7d6:	4b02      	ldr	r3, [pc, #8]	@ (801b7e0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b7d8:	0018      	movs	r0, r3
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	b002      	add	sp, #8
 801b7de:	bd80      	pop	{r7, pc}
 801b7e0:	20000170 	.word	0x20000170

0801b7e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b7e4:	b580      	push	{r7, lr}
 801b7e6:	b082      	sub	sp, #8
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	2243      	movs	r2, #67	@ 0x43
 801b7f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b7f2:	4b02      	ldr	r3, [pc, #8]	@ (801b7fc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b7f4:	0018      	movs	r0, r3
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	b002      	add	sp, #8
 801b7fa:	bd80      	pop	{r7, pc}
 801b7fc:	2000012c 	.word	0x2000012c

0801b800 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b800:	b580      	push	{r7, lr}
 801b802:	b082      	sub	sp, #8
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	2243      	movs	r2, #67	@ 0x43
 801b80c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b80e:	4b02      	ldr	r3, [pc, #8]	@ (801b818 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b810:	0018      	movs	r0, r3
 801b812:	46bd      	mov	sp, r7
 801b814:	b002      	add	sp, #8
 801b816:	bd80      	pop	{r7, pc}
 801b818:	200001b4 	.word	0x200001b4

0801b81c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b082      	sub	sp, #8
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	220a      	movs	r2, #10
 801b828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b82a:	4b02      	ldr	r3, [pc, #8]	@ (801b834 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b82c:	0018      	movs	r0, r3
 801b82e:	46bd      	mov	sp, r7
 801b830:	b002      	add	sp, #8
 801b832:	bd80      	pop	{r7, pc}
 801b834:	200000e8 	.word	0x200000e8

0801b838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b838:	b580      	push	{r7, lr}
 801b83a:	b084      	sub	sp, #16
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	6078      	str	r0, [r7, #4]
 801b840:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b842:	200f      	movs	r0, #15
 801b844:	183b      	adds	r3, r7, r0
 801b846:	2202      	movs	r2, #2
 801b848:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b84a:	683b      	ldr	r3, [r7, #0]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d007      	beq.n	801b860 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	23af      	movs	r3, #175	@ 0xaf
 801b854:	009b      	lsls	r3, r3, #2
 801b856:	6839      	ldr	r1, [r7, #0]
 801b858:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b85a:	183b      	adds	r3, r7, r0
 801b85c:	2200      	movs	r2, #0
 801b85e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b860:	230f      	movs	r3, #15
 801b862:	18fb      	adds	r3, r7, r3
 801b864:	781b      	ldrb	r3, [r3, #0]
}
 801b866:	0018      	movs	r0, r3
 801b868:	46bd      	mov	sp, r7
 801b86a:	b004      	add	sp, #16
 801b86c:	bd80      	pop	{r7, pc}

0801b86e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b86e:	b580      	push	{r7, lr}
 801b870:	b086      	sub	sp, #24
 801b872:	af00      	add	r7, sp, #0
 801b874:	60f8      	str	r0, [r7, #12]
 801b876:	60b9      	str	r1, [r7, #8]
 801b878:	1dbb      	adds	r3, r7, #6
 801b87a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b87c:	68fa      	ldr	r2, [r7, #12]
 801b87e:	23ae      	movs	r3, #174	@ 0xae
 801b880:	009b      	lsls	r3, r3, #2
 801b882:	58d3      	ldr	r3, [r2, r3]
 801b884:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b886:	697a      	ldr	r2, [r7, #20]
 801b888:	2382      	movs	r3, #130	@ 0x82
 801b88a:	009b      	lsls	r3, r3, #2
 801b88c:	68b9      	ldr	r1, [r7, #8]
 801b88e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b890:	1dbb      	adds	r3, r7, #6
 801b892:	8819      	ldrh	r1, [r3, #0]
 801b894:	697a      	ldr	r2, [r7, #20]
 801b896:	2384      	movs	r3, #132	@ 0x84
 801b898:	009b      	lsls	r3, r3, #2
 801b89a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b89c:	2300      	movs	r3, #0
}
 801b89e:	0018      	movs	r0, r3
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	b006      	add	sp, #24
 801b8a4:	bd80      	pop	{r7, pc}

0801b8a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b8a6:	b580      	push	{r7, lr}
 801b8a8:	b084      	sub	sp, #16
 801b8aa:	af00      	add	r7, sp, #0
 801b8ac:	6078      	str	r0, [r7, #4]
 801b8ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b8b0:	687a      	ldr	r2, [r7, #4]
 801b8b2:	23ae      	movs	r3, #174	@ 0xae
 801b8b4:	009b      	lsls	r3, r3, #2
 801b8b6:	58d3      	ldr	r3, [r2, r3]
 801b8b8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b8ba:	68fa      	ldr	r2, [r7, #12]
 801b8bc:	2381      	movs	r3, #129	@ 0x81
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	6839      	ldr	r1, [r7, #0]
 801b8c2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b8c4:	2300      	movs	r3, #0
}
 801b8c6:	0018      	movs	r0, r3
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	b004      	add	sp, #16
 801b8cc:	bd80      	pop	{r7, pc}

0801b8ce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b8ce:	b580      	push	{r7, lr}
 801b8d0:	b084      	sub	sp, #16
 801b8d2:	af00      	add	r7, sp, #0
 801b8d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b8d6:	687a      	ldr	r2, [r7, #4]
 801b8d8:	23ae      	movs	r3, #174	@ 0xae
 801b8da:	009b      	lsls	r3, r3, #2
 801b8dc:	58d3      	ldr	r3, [r2, r3]
 801b8de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b8e0:	687a      	ldr	r2, [r7, #4]
 801b8e2:	23ae      	movs	r3, #174	@ 0xae
 801b8e4:	009b      	lsls	r3, r3, #2
 801b8e6:	58d3      	ldr	r3, [r2, r3]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d022      	beq.n	801b932 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b8ec:	68fa      	ldr	r2, [r7, #12]
 801b8ee:	2385      	movs	r3, #133	@ 0x85
 801b8f0:	009b      	lsls	r3, r3, #2
 801b8f2:	58d3      	ldr	r3, [r2, r3]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d11a      	bne.n	801b92e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b8f8:	68fa      	ldr	r2, [r7, #12]
 801b8fa:	2385      	movs	r3, #133	@ 0x85
 801b8fc:	009b      	lsls	r3, r3, #2
 801b8fe:	2101      	movs	r1, #1
 801b900:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b902:	68fa      	ldr	r2, [r7, #12]
 801b904:	2384      	movs	r3, #132	@ 0x84
 801b906:	009b      	lsls	r3, r3, #2
 801b908:	58d2      	ldr	r2, [r2, r3]
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b90e:	68fa      	ldr	r2, [r7, #12]
 801b910:	2382      	movs	r3, #130	@ 0x82
 801b912:	009b      	lsls	r3, r3, #2
 801b914:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b916:	68fa      	ldr	r2, [r7, #12]
 801b918:	2384      	movs	r3, #132	@ 0x84
 801b91a:	009b      	lsls	r3, r3, #2
 801b91c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b91e:	b29b      	uxth	r3, r3
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	000a      	movs	r2, r1
 801b924:	2181      	movs	r1, #129	@ 0x81
 801b926:	f001 ff0c 	bl	801d742 <USBD_LL_Transmit>

      return USBD_OK;
 801b92a:	2300      	movs	r3, #0
 801b92c:	e002      	b.n	801b934 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b92e:	2301      	movs	r3, #1
 801b930:	e000      	b.n	801b934 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b932:	2302      	movs	r3, #2
  }
}
 801b934:	0018      	movs	r0, r3
 801b936:	46bd      	mov	sp, r7
 801b938:	b004      	add	sp, #16
 801b93a:	bd80      	pop	{r7, pc}

0801b93c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b084      	sub	sp, #16
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b944:	687a      	ldr	r2, [r7, #4]
 801b946:	23ae      	movs	r3, #174	@ 0xae
 801b948:	009b      	lsls	r3, r3, #2
 801b94a:	58d3      	ldr	r3, [r2, r3]
 801b94c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b94e:	687a      	ldr	r2, [r7, #4]
 801b950:	23ae      	movs	r3, #174	@ 0xae
 801b952:	009b      	lsls	r3, r3, #2
 801b954:	58d3      	ldr	r3, [r2, r3]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d019      	beq.n	801b98e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	7c1b      	ldrb	r3, [r3, #16]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d10a      	bne.n	801b978 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b962:	68fa      	ldr	r2, [r7, #12]
 801b964:	2381      	movs	r3, #129	@ 0x81
 801b966:	009b      	lsls	r3, r3, #2
 801b968:	58d2      	ldr	r2, [r2, r3]
 801b96a:	2380      	movs	r3, #128	@ 0x80
 801b96c:	009b      	lsls	r3, r3, #2
 801b96e:	6878      	ldr	r0, [r7, #4]
 801b970:	2101      	movs	r1, #1
 801b972:	f001 ff1d 	bl	801d7b0 <USBD_LL_PrepareReceive>
 801b976:	e008      	b.n	801b98a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b978:	68fa      	ldr	r2, [r7, #12]
 801b97a:	2381      	movs	r3, #129	@ 0x81
 801b97c:	009b      	lsls	r3, r3, #2
 801b97e:	58d2      	ldr	r2, [r2, r3]
 801b980:	6878      	ldr	r0, [r7, #4]
 801b982:	2340      	movs	r3, #64	@ 0x40
 801b984:	2101      	movs	r1, #1
 801b986:	f001 ff13 	bl	801d7b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b98a:	2300      	movs	r3, #0
 801b98c:	e000      	b.n	801b990 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b98e:	2302      	movs	r3, #2
  }
}
 801b990:	0018      	movs	r0, r3
 801b992:	46bd      	mov	sp, r7
 801b994:	b004      	add	sp, #16
 801b996:	bd80      	pop	{r7, pc}

0801b998 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b084      	sub	sp, #16
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	60f8      	str	r0, [r7, #12]
 801b9a0:	60b9      	str	r1, [r7, #8]
 801b9a2:	1dfb      	adds	r3, r7, #7
 801b9a4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d101      	bne.n	801b9b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b9ac:	2302      	movs	r3, #2
 801b9ae:	e020      	b.n	801b9f2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b9b0:	68fa      	ldr	r2, [r7, #12]
 801b9b2:	23ad      	movs	r3, #173	@ 0xad
 801b9b4:	009b      	lsls	r3, r3, #2
 801b9b6:	58d3      	ldr	r3, [r2, r3]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d004      	beq.n	801b9c6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b9bc:	68fa      	ldr	r2, [r7, #12]
 801b9be:	23ad      	movs	r3, #173	@ 0xad
 801b9c0:	009b      	lsls	r3, r3, #2
 801b9c2:	2100      	movs	r1, #0
 801b9c4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b9c6:	68bb      	ldr	r3, [r7, #8]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d004      	beq.n	801b9d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b9cc:	68fa      	ldr	r2, [r7, #12]
 801b9ce:	23ac      	movs	r3, #172	@ 0xac
 801b9d0:	009b      	lsls	r3, r3, #2
 801b9d2:	68b9      	ldr	r1, [r7, #8]
 801b9d4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b9d6:	68fa      	ldr	r2, [r7, #12]
 801b9d8:	23a7      	movs	r3, #167	@ 0xa7
 801b9da:	009b      	lsls	r3, r3, #2
 801b9dc:	2101      	movs	r1, #1
 801b9de:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	1dfa      	adds	r2, r7, #7
 801b9e4:	7812      	ldrb	r2, [r2, #0]
 801b9e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	0018      	movs	r0, r3
 801b9ec:	f001 fd0c 	bl	801d408 <USBD_LL_Init>

  return USBD_OK;
 801b9f0:	2300      	movs	r3, #0
}
 801b9f2:	0018      	movs	r0, r3
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	b004      	add	sp, #16
 801b9f8:	bd80      	pop	{r7, pc}

0801b9fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b9fa:	b580      	push	{r7, lr}
 801b9fc:	b084      	sub	sp, #16
 801b9fe:	af00      	add	r7, sp, #0
 801ba00:	6078      	str	r0, [r7, #4]
 801ba02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801ba04:	200f      	movs	r0, #15
 801ba06:	183b      	adds	r3, r7, r0
 801ba08:	2200      	movs	r2, #0
 801ba0a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801ba0c:	683b      	ldr	r3, [r7, #0]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d008      	beq.n	801ba24 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801ba12:	687a      	ldr	r2, [r7, #4]
 801ba14:	23ad      	movs	r3, #173	@ 0xad
 801ba16:	009b      	lsls	r3, r3, #2
 801ba18:	6839      	ldr	r1, [r7, #0]
 801ba1a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801ba1c:	183b      	adds	r3, r7, r0
 801ba1e:	2200      	movs	r2, #0
 801ba20:	701a      	strb	r2, [r3, #0]
 801ba22:	e003      	b.n	801ba2c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801ba24:	230f      	movs	r3, #15
 801ba26:	18fb      	adds	r3, r7, r3
 801ba28:	2202      	movs	r2, #2
 801ba2a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801ba2c:	230f      	movs	r3, #15
 801ba2e:	18fb      	adds	r3, r7, r3
 801ba30:	781b      	ldrb	r3, [r3, #0]
}
 801ba32:	0018      	movs	r0, r3
 801ba34:	46bd      	mov	sp, r7
 801ba36:	b004      	add	sp, #16
 801ba38:	bd80      	pop	{r7, pc}

0801ba3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ba3a:	b580      	push	{r7, lr}
 801ba3c:	b082      	sub	sp, #8
 801ba3e:	af00      	add	r7, sp, #0
 801ba40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	0018      	movs	r0, r3
 801ba46:	f001 fd43 	bl	801d4d0 <USBD_LL_Start>

  return USBD_OK;
 801ba4a:	2300      	movs	r3, #0
}
 801ba4c:	0018      	movs	r0, r3
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	b002      	add	sp, #8
 801ba52:	bd80      	pop	{r7, pc}

0801ba54 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b082      	sub	sp, #8
 801ba58:	af00      	add	r7, sp, #0
 801ba5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ba5c:	2300      	movs	r3, #0
}
 801ba5e:	0018      	movs	r0, r3
 801ba60:	46bd      	mov	sp, r7
 801ba62:	b002      	add	sp, #8
 801ba64:	bd80      	pop	{r7, pc}

0801ba66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ba66:	b590      	push	{r4, r7, lr}
 801ba68:	b085      	sub	sp, #20
 801ba6a:	af00      	add	r7, sp, #0
 801ba6c:	6078      	str	r0, [r7, #4]
 801ba6e:	000a      	movs	r2, r1
 801ba70:	1cfb      	adds	r3, r7, #3
 801ba72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ba74:	240f      	movs	r4, #15
 801ba76:	193b      	adds	r3, r7, r4
 801ba78:	2202      	movs	r2, #2
 801ba7a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ba7c:	687a      	ldr	r2, [r7, #4]
 801ba7e:	23ad      	movs	r3, #173	@ 0xad
 801ba80:	009b      	lsls	r3, r3, #2
 801ba82:	58d3      	ldr	r3, [r2, r3]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d00e      	beq.n	801baa6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ba88:	687a      	ldr	r2, [r7, #4]
 801ba8a:	23ad      	movs	r3, #173	@ 0xad
 801ba8c:	009b      	lsls	r3, r3, #2
 801ba8e:	58d3      	ldr	r3, [r2, r3]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	1cfa      	adds	r2, r7, #3
 801ba94:	7811      	ldrb	r1, [r2, #0]
 801ba96:	687a      	ldr	r2, [r7, #4]
 801ba98:	0010      	movs	r0, r2
 801ba9a:	4798      	blx	r3
 801ba9c:	1e03      	subs	r3, r0, #0
 801ba9e:	d102      	bne.n	801baa6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801baa0:	193b      	adds	r3, r7, r4
 801baa2:	2200      	movs	r2, #0
 801baa4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801baa6:	230f      	movs	r3, #15
 801baa8:	18fb      	adds	r3, r7, r3
 801baaa:	781b      	ldrb	r3, [r3, #0]
}
 801baac:	0018      	movs	r0, r3
 801baae:	46bd      	mov	sp, r7
 801bab0:	b005      	add	sp, #20
 801bab2:	bd90      	pop	{r4, r7, pc}

0801bab4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b082      	sub	sp, #8
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
 801babc:	000a      	movs	r2, r1
 801babe:	1cfb      	adds	r3, r7, #3
 801bac0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801bac2:	687a      	ldr	r2, [r7, #4]
 801bac4:	23ad      	movs	r3, #173	@ 0xad
 801bac6:	009b      	lsls	r3, r3, #2
 801bac8:	58d3      	ldr	r3, [r2, r3]
 801baca:	685b      	ldr	r3, [r3, #4]
 801bacc:	1cfa      	adds	r2, r7, #3
 801bace:	7811      	ldrb	r1, [r2, #0]
 801bad0:	687a      	ldr	r2, [r7, #4]
 801bad2:	0010      	movs	r0, r2
 801bad4:	4798      	blx	r3

  return USBD_OK;
 801bad6:	2300      	movs	r3, #0
}
 801bad8:	0018      	movs	r0, r3
 801bada:	46bd      	mov	sp, r7
 801badc:	b002      	add	sp, #8
 801bade:	bd80      	pop	{r7, pc}

0801bae0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b082      	sub	sp, #8
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
 801bae8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	22aa      	movs	r2, #170	@ 0xaa
 801baee:	0092      	lsls	r2, r2, #2
 801baf0:	4694      	mov	ip, r2
 801baf2:	4463      	add	r3, ip
 801baf4:	683a      	ldr	r2, [r7, #0]
 801baf6:	0011      	movs	r1, r2
 801baf8:	0018      	movs	r0, r3
 801bafa:	f001 f810 	bl	801cb1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801bafe:	687a      	ldr	r2, [r7, #4]
 801bb00:	23a5      	movs	r3, #165	@ 0xa5
 801bb02:	009b      	lsls	r3, r3, #2
 801bb04:	2101      	movs	r1, #1
 801bb06:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	4a23      	ldr	r2, [pc, #140]	@ (801bb98 <USBD_LL_SetupStage+0xb8>)
 801bb0c:	5a9b      	ldrh	r3, [r3, r2]
 801bb0e:	0019      	movs	r1, r3
 801bb10:	687a      	ldr	r2, [r7, #4]
 801bb12:	23a6      	movs	r3, #166	@ 0xa6
 801bb14:	009b      	lsls	r3, r3, #2
 801bb16:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801bb18:	687a      	ldr	r2, [r7, #4]
 801bb1a:	23aa      	movs	r3, #170	@ 0xaa
 801bb1c:	009b      	lsls	r3, r3, #2
 801bb1e:	5cd3      	ldrb	r3, [r2, r3]
 801bb20:	001a      	movs	r2, r3
 801bb22:	231f      	movs	r3, #31
 801bb24:	4013      	ands	r3, r2
 801bb26:	2b02      	cmp	r3, #2
 801bb28:	d019      	beq.n	801bb5e <USBD_LL_SetupStage+0x7e>
 801bb2a:	d822      	bhi.n	801bb72 <USBD_LL_SetupStage+0x92>
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d002      	beq.n	801bb36 <USBD_LL_SetupStage+0x56>
 801bb30:	2b01      	cmp	r3, #1
 801bb32:	d00a      	beq.n	801bb4a <USBD_LL_SetupStage+0x6a>
 801bb34:	e01d      	b.n	801bb72 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	22aa      	movs	r2, #170	@ 0xaa
 801bb3a:	0092      	lsls	r2, r2, #2
 801bb3c:	189a      	adds	r2, r3, r2
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	0011      	movs	r1, r2
 801bb42:	0018      	movs	r0, r3
 801bb44:	f000 fa10 	bl	801bf68 <USBD_StdDevReq>
      break;
 801bb48:	e020      	b.n	801bb8c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	22aa      	movs	r2, #170	@ 0xaa
 801bb4e:	0092      	lsls	r2, r2, #2
 801bb50:	189a      	adds	r2, r3, r2
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	0011      	movs	r1, r2
 801bb56:	0018      	movs	r0, r3
 801bb58:	f000 fa78 	bl	801c04c <USBD_StdItfReq>
      break;
 801bb5c:	e016      	b.n	801bb8c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	22aa      	movs	r2, #170	@ 0xaa
 801bb62:	0092      	lsls	r2, r2, #2
 801bb64:	189a      	adds	r2, r3, r2
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	0011      	movs	r1, r2
 801bb6a:	0018      	movs	r0, r3
 801bb6c:	f000 fac5 	bl	801c0fa <USBD_StdEPReq>
      break;
 801bb70:	e00c      	b.n	801bb8c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801bb72:	687a      	ldr	r2, [r7, #4]
 801bb74:	23aa      	movs	r3, #170	@ 0xaa
 801bb76:	009b      	lsls	r3, r3, #2
 801bb78:	5cd3      	ldrb	r3, [r2, r3]
 801bb7a:	227f      	movs	r2, #127	@ 0x7f
 801bb7c:	4393      	bics	r3, r2
 801bb7e:	b2da      	uxtb	r2, r3
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	0011      	movs	r1, r2
 801bb84:	0018      	movs	r0, r3
 801bb86:	f001 fd2a 	bl	801d5de <USBD_LL_StallEP>
      break;
 801bb8a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bb8c:	2300      	movs	r3, #0
}
 801bb8e:	0018      	movs	r0, r3
 801bb90:	46bd      	mov	sp, r7
 801bb92:	b002      	add	sp, #8
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	46c0      	nop			@ (mov r8, r8)
 801bb98:	000002ae 	.word	0x000002ae

0801bb9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b086      	sub	sp, #24
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	60f8      	str	r0, [r7, #12]
 801bba4:	607a      	str	r2, [r7, #4]
 801bba6:	200b      	movs	r0, #11
 801bba8:	183b      	adds	r3, r7, r0
 801bbaa:	1c0a      	adds	r2, r1, #0
 801bbac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bbae:	183b      	adds	r3, r7, r0
 801bbb0:	781b      	ldrb	r3, [r3, #0]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d154      	bne.n	801bc60 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	3355      	adds	r3, #85	@ 0x55
 801bbba:	33ff      	adds	r3, #255	@ 0xff
 801bbbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801bbbe:	68fa      	ldr	r2, [r7, #12]
 801bbc0:	23a5      	movs	r3, #165	@ 0xa5
 801bbc2:	009b      	lsls	r3, r3, #2
 801bbc4:	58d3      	ldr	r3, [r2, r3]
 801bbc6:	2b03      	cmp	r3, #3
 801bbc8:	d139      	bne.n	801bc3e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801bbca:	697b      	ldr	r3, [r7, #20]
 801bbcc:	68da      	ldr	r2, [r3, #12]
 801bbce:	697b      	ldr	r3, [r7, #20]
 801bbd0:	691b      	ldr	r3, [r3, #16]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d919      	bls.n	801bc0a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801bbd6:	697b      	ldr	r3, [r7, #20]
 801bbd8:	68da      	ldr	r2, [r3, #12]
 801bbda:	697b      	ldr	r3, [r7, #20]
 801bbdc:	691b      	ldr	r3, [r3, #16]
 801bbde:	1ad2      	subs	r2, r2, r3
 801bbe0:	697b      	ldr	r3, [r7, #20]
 801bbe2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bbe4:	697b      	ldr	r3, [r7, #20]
 801bbe6:	68da      	ldr	r2, [r3, #12]
 801bbe8:	697b      	ldr	r3, [r7, #20]
 801bbea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bbec:	429a      	cmp	r2, r3
 801bbee:	d203      	bcs.n	801bbf8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bbf0:	697b      	ldr	r3, [r7, #20]
 801bbf2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	e002      	b.n	801bbfe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bbf8:	697b      	ldr	r3, [r7, #20]
 801bbfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bbfc:	b29b      	uxth	r3, r3
 801bbfe:	6879      	ldr	r1, [r7, #4]
 801bc00:	68f8      	ldr	r0, [r7, #12]
 801bc02:	001a      	movs	r2, r3
 801bc04:	f001 f898 	bl	801cd38 <USBD_CtlContinueRx>
 801bc08:	e045      	b.n	801bc96 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bc0a:	68fa      	ldr	r2, [r7, #12]
 801bc0c:	23ad      	movs	r3, #173	@ 0xad
 801bc0e:	009b      	lsls	r3, r3, #2
 801bc10:	58d3      	ldr	r3, [r2, r3]
 801bc12:	691b      	ldr	r3, [r3, #16]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d00d      	beq.n	801bc34 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bc18:	68fa      	ldr	r2, [r7, #12]
 801bc1a:	23a7      	movs	r3, #167	@ 0xa7
 801bc1c:	009b      	lsls	r3, r3, #2
 801bc1e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bc20:	2b03      	cmp	r3, #3
 801bc22:	d107      	bne.n	801bc34 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801bc24:	68fa      	ldr	r2, [r7, #12]
 801bc26:	23ad      	movs	r3, #173	@ 0xad
 801bc28:	009b      	lsls	r3, r3, #2
 801bc2a:	58d3      	ldr	r3, [r2, r3]
 801bc2c:	691b      	ldr	r3, [r3, #16]
 801bc2e:	68fa      	ldr	r2, [r7, #12]
 801bc30:	0010      	movs	r0, r2
 801bc32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	0018      	movs	r0, r3
 801bc38:	f001 f891 	bl	801cd5e <USBD_CtlSendStatus>
 801bc3c:	e02b      	b.n	801bc96 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801bc3e:	68fa      	ldr	r2, [r7, #12]
 801bc40:	23a5      	movs	r3, #165	@ 0xa5
 801bc42:	009b      	lsls	r3, r3, #2
 801bc44:	58d3      	ldr	r3, [r2, r3]
 801bc46:	2b05      	cmp	r3, #5
 801bc48:	d125      	bne.n	801bc96 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801bc4a:	68fa      	ldr	r2, [r7, #12]
 801bc4c:	23a5      	movs	r3, #165	@ 0xa5
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	2100      	movs	r1, #0
 801bc52:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	2100      	movs	r1, #0
 801bc58:	0018      	movs	r0, r3
 801bc5a:	f001 fcc0 	bl	801d5de <USBD_LL_StallEP>
 801bc5e:	e01a      	b.n	801bc96 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bc60:	68fa      	ldr	r2, [r7, #12]
 801bc62:	23ad      	movs	r3, #173	@ 0xad
 801bc64:	009b      	lsls	r3, r3, #2
 801bc66:	58d3      	ldr	r3, [r2, r3]
 801bc68:	699b      	ldr	r3, [r3, #24]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d011      	beq.n	801bc92 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bc6e:	68fa      	ldr	r2, [r7, #12]
 801bc70:	23a7      	movs	r3, #167	@ 0xa7
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bc76:	2b03      	cmp	r3, #3
 801bc78:	d10b      	bne.n	801bc92 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bc7a:	68fa      	ldr	r2, [r7, #12]
 801bc7c:	23ad      	movs	r3, #173	@ 0xad
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	58d3      	ldr	r3, [r2, r3]
 801bc82:	699b      	ldr	r3, [r3, #24]
 801bc84:	220b      	movs	r2, #11
 801bc86:	18ba      	adds	r2, r7, r2
 801bc88:	7811      	ldrb	r1, [r2, #0]
 801bc8a:	68fa      	ldr	r2, [r7, #12]
 801bc8c:	0010      	movs	r0, r2
 801bc8e:	4798      	blx	r3
 801bc90:	e001      	b.n	801bc96 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bc92:	2302      	movs	r3, #2
 801bc94:	e000      	b.n	801bc98 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bc96:	2300      	movs	r3, #0
}
 801bc98:	0018      	movs	r0, r3
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	b006      	add	sp, #24
 801bc9e:	bd80      	pop	{r7, pc}

0801bca0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b086      	sub	sp, #24
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	60f8      	str	r0, [r7, #12]
 801bca8:	607a      	str	r2, [r7, #4]
 801bcaa:	200b      	movs	r0, #11
 801bcac:	183b      	adds	r3, r7, r0
 801bcae:	1c0a      	adds	r2, r1, #0
 801bcb0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bcb2:	183b      	adds	r3, r7, r0
 801bcb4:	781b      	ldrb	r3, [r3, #0]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d000      	beq.n	801bcbc <USBD_LL_DataInStage+0x1c>
 801bcba:	e08e      	b.n	801bdda <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	3314      	adds	r3, #20
 801bcc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bcc2:	68fa      	ldr	r2, [r7, #12]
 801bcc4:	23a5      	movs	r3, #165	@ 0xa5
 801bcc6:	009b      	lsls	r3, r3, #2
 801bcc8:	58d3      	ldr	r3, [r2, r3]
 801bcca:	2b02      	cmp	r3, #2
 801bccc:	d164      	bne.n	801bd98 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bcce:	697b      	ldr	r3, [r7, #20]
 801bcd0:	68da      	ldr	r2, [r3, #12]
 801bcd2:	697b      	ldr	r3, [r7, #20]
 801bcd4:	691b      	ldr	r3, [r3, #16]
 801bcd6:	429a      	cmp	r2, r3
 801bcd8:	d915      	bls.n	801bd06 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	68da      	ldr	r2, [r3, #12]
 801bcde:	697b      	ldr	r3, [r7, #20]
 801bce0:	691b      	ldr	r3, [r3, #16]
 801bce2:	1ad2      	subs	r2, r2, r3
 801bce4:	697b      	ldr	r3, [r7, #20]
 801bce6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bce8:	697b      	ldr	r3, [r7, #20]
 801bcea:	68db      	ldr	r3, [r3, #12]
 801bcec:	b29a      	uxth	r2, r3
 801bcee:	6879      	ldr	r1, [r7, #4]
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	0018      	movs	r0, r3
 801bcf4:	f000 ffe9 	bl	801ccca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	2100      	movs	r1, #0
 801bd00:	f001 fd56 	bl	801d7b0 <USBD_LL_PrepareReceive>
 801bd04:	e059      	b.n	801bdba <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bd06:	697b      	ldr	r3, [r7, #20]
 801bd08:	689a      	ldr	r2, [r3, #8]
 801bd0a:	697b      	ldr	r3, [r7, #20]
 801bd0c:	691b      	ldr	r3, [r3, #16]
 801bd0e:	0019      	movs	r1, r3
 801bd10:	0010      	movs	r0, r2
 801bd12:	f7e4 facd 	bl	80002b0 <__aeabi_uidivmod>
 801bd16:	1e0b      	subs	r3, r1, #0
 801bd18:	d11f      	bne.n	801bd5a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bd1a:	697b      	ldr	r3, [r7, #20]
 801bd1c:	689a      	ldr	r2, [r3, #8]
 801bd1e:	697b      	ldr	r3, [r7, #20]
 801bd20:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bd22:	429a      	cmp	r2, r3
 801bd24:	d319      	bcc.n	801bd5a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bd26:	697b      	ldr	r3, [r7, #20]
 801bd28:	689a      	ldr	r2, [r3, #8]
 801bd2a:	68f9      	ldr	r1, [r7, #12]
 801bd2c:	23a6      	movs	r3, #166	@ 0xa6
 801bd2e:	009b      	lsls	r3, r3, #2
 801bd30:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bd32:	429a      	cmp	r2, r3
 801bd34:	d211      	bcs.n	801bd5a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	2200      	movs	r2, #0
 801bd3a:	2100      	movs	r1, #0
 801bd3c:	0018      	movs	r0, r3
 801bd3e:	f000 ffc4 	bl	801ccca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bd42:	68fa      	ldr	r2, [r7, #12]
 801bd44:	23a6      	movs	r3, #166	@ 0xa6
 801bd46:	009b      	lsls	r3, r3, #2
 801bd48:	2100      	movs	r1, #0
 801bd4a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bd4c:	68f8      	ldr	r0, [r7, #12]
 801bd4e:	2300      	movs	r3, #0
 801bd50:	2200      	movs	r2, #0
 801bd52:	2100      	movs	r1, #0
 801bd54:	f001 fd2c 	bl	801d7b0 <USBD_LL_PrepareReceive>
 801bd58:	e02f      	b.n	801bdba <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bd5a:	68fa      	ldr	r2, [r7, #12]
 801bd5c:	23ad      	movs	r3, #173	@ 0xad
 801bd5e:	009b      	lsls	r3, r3, #2
 801bd60:	58d3      	ldr	r3, [r2, r3]
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d00d      	beq.n	801bd84 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bd68:	68fa      	ldr	r2, [r7, #12]
 801bd6a:	23a7      	movs	r3, #167	@ 0xa7
 801bd6c:	009b      	lsls	r3, r3, #2
 801bd6e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bd70:	2b03      	cmp	r3, #3
 801bd72:	d107      	bne.n	801bd84 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bd74:	68fa      	ldr	r2, [r7, #12]
 801bd76:	23ad      	movs	r3, #173	@ 0xad
 801bd78:	009b      	lsls	r3, r3, #2
 801bd7a:	58d3      	ldr	r3, [r2, r3]
 801bd7c:	68db      	ldr	r3, [r3, #12]
 801bd7e:	68fa      	ldr	r2, [r7, #12]
 801bd80:	0010      	movs	r0, r2
 801bd82:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2180      	movs	r1, #128	@ 0x80
 801bd88:	0018      	movs	r0, r3
 801bd8a:	f001 fc28 	bl	801d5de <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	0018      	movs	r0, r3
 801bd92:	f000 fff8 	bl	801cd86 <USBD_CtlReceiveStatus>
 801bd96:	e010      	b.n	801bdba <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bd98:	68fa      	ldr	r2, [r7, #12]
 801bd9a:	23a5      	movs	r3, #165	@ 0xa5
 801bd9c:	009b      	lsls	r3, r3, #2
 801bd9e:	58d3      	ldr	r3, [r2, r3]
 801bda0:	2b04      	cmp	r3, #4
 801bda2:	d005      	beq.n	801bdb0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bda4:	68fa      	ldr	r2, [r7, #12]
 801bda6:	23a5      	movs	r3, #165	@ 0xa5
 801bda8:	009b      	lsls	r3, r3, #2
 801bdaa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d104      	bne.n	801bdba <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	2180      	movs	r1, #128	@ 0x80
 801bdb4:	0018      	movs	r0, r3
 801bdb6:	f001 fc12 	bl	801d5de <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bdba:	68fa      	ldr	r2, [r7, #12]
 801bdbc:	23a8      	movs	r3, #168	@ 0xa8
 801bdbe:	009b      	lsls	r3, r3, #2
 801bdc0:	5cd3      	ldrb	r3, [r2, r3]
 801bdc2:	2b01      	cmp	r3, #1
 801bdc4:	d124      	bne.n	801be10 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	0018      	movs	r0, r3
 801bdca:	f7ff fe43 	bl	801ba54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bdce:	68fa      	ldr	r2, [r7, #12]
 801bdd0:	23a8      	movs	r3, #168	@ 0xa8
 801bdd2:	009b      	lsls	r3, r3, #2
 801bdd4:	2100      	movs	r1, #0
 801bdd6:	54d1      	strb	r1, [r2, r3]
 801bdd8:	e01a      	b.n	801be10 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bdda:	68fa      	ldr	r2, [r7, #12]
 801bddc:	23ad      	movs	r3, #173	@ 0xad
 801bdde:	009b      	lsls	r3, r3, #2
 801bde0:	58d3      	ldr	r3, [r2, r3]
 801bde2:	695b      	ldr	r3, [r3, #20]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d011      	beq.n	801be0c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bde8:	68fa      	ldr	r2, [r7, #12]
 801bdea:	23a7      	movs	r3, #167	@ 0xa7
 801bdec:	009b      	lsls	r3, r3, #2
 801bdee:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bdf0:	2b03      	cmp	r3, #3
 801bdf2:	d10b      	bne.n	801be0c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bdf4:	68fa      	ldr	r2, [r7, #12]
 801bdf6:	23ad      	movs	r3, #173	@ 0xad
 801bdf8:	009b      	lsls	r3, r3, #2
 801bdfa:	58d3      	ldr	r3, [r2, r3]
 801bdfc:	695b      	ldr	r3, [r3, #20]
 801bdfe:	220b      	movs	r2, #11
 801be00:	18ba      	adds	r2, r7, r2
 801be02:	7811      	ldrb	r1, [r2, #0]
 801be04:	68fa      	ldr	r2, [r7, #12]
 801be06:	0010      	movs	r0, r2
 801be08:	4798      	blx	r3
 801be0a:	e001      	b.n	801be10 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801be0c:	2302      	movs	r3, #2
 801be0e:	e000      	b.n	801be12 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801be10:	2300      	movs	r3, #0
}
 801be12:	0018      	movs	r0, r3
 801be14:	46bd      	mov	sp, r7
 801be16:	b006      	add	sp, #24
 801be18:	bd80      	pop	{r7, pc}

0801be1a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801be1a:	b580      	push	{r7, lr}
 801be1c:	b082      	sub	sp, #8
 801be1e:	af00      	add	r7, sp, #0
 801be20:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	2340      	movs	r3, #64	@ 0x40
 801be26:	2200      	movs	r2, #0
 801be28:	2100      	movs	r1, #0
 801be2a:	f001 fb76 	bl	801d51a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801be2e:	687a      	ldr	r2, [r7, #4]
 801be30:	23ac      	movs	r3, #172	@ 0xac
 801be32:	005b      	lsls	r3, r3, #1
 801be34:	2101      	movs	r1, #1
 801be36:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801be38:	687a      	ldr	r2, [r7, #4]
 801be3a:	23b2      	movs	r3, #178	@ 0xb2
 801be3c:	005b      	lsls	r3, r3, #1
 801be3e:	2140      	movs	r1, #64	@ 0x40
 801be40:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801be42:	6878      	ldr	r0, [r7, #4]
 801be44:	2340      	movs	r3, #64	@ 0x40
 801be46:	2200      	movs	r2, #0
 801be48:	2180      	movs	r1, #128	@ 0x80
 801be4a:	f001 fb66 	bl	801d51a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	2201      	movs	r2, #1
 801be52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	2240      	movs	r2, #64	@ 0x40
 801be58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801be5a:	687a      	ldr	r2, [r7, #4]
 801be5c:	23a7      	movs	r3, #167	@ 0xa7
 801be5e:	009b      	lsls	r3, r3, #2
 801be60:	2101      	movs	r1, #1
 801be62:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801be64:	687a      	ldr	r2, [r7, #4]
 801be66:	23a5      	movs	r3, #165	@ 0xa5
 801be68:	009b      	lsls	r3, r3, #2
 801be6a:	2100      	movs	r1, #0
 801be6c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	2200      	movs	r2, #0
 801be72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801be74:	687a      	ldr	r2, [r7, #4]
 801be76:	23a9      	movs	r3, #169	@ 0xa9
 801be78:	009b      	lsls	r3, r3, #2
 801be7a:	2100      	movs	r1, #0
 801be7c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801be7e:	687a      	ldr	r2, [r7, #4]
 801be80:	23ae      	movs	r3, #174	@ 0xae
 801be82:	009b      	lsls	r3, r3, #2
 801be84:	58d3      	ldr	r3, [r2, r3]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d00a      	beq.n	801bea0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801be8a:	687a      	ldr	r2, [r7, #4]
 801be8c:	23ad      	movs	r3, #173	@ 0xad
 801be8e:	009b      	lsls	r3, r3, #2
 801be90:	58d3      	ldr	r3, [r2, r3]
 801be92:	685a      	ldr	r2, [r3, #4]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	685b      	ldr	r3, [r3, #4]
 801be98:	b2d9      	uxtb	r1, r3
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	0018      	movs	r0, r3
 801be9e:	4790      	blx	r2
  }

  return USBD_OK;
 801bea0:	2300      	movs	r3, #0
}
 801bea2:	0018      	movs	r0, r3
 801bea4:	46bd      	mov	sp, r7
 801bea6:	b002      	add	sp, #8
 801bea8:	bd80      	pop	{r7, pc}

0801beaa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801beaa:	b580      	push	{r7, lr}
 801beac:	b082      	sub	sp, #8
 801beae:	af00      	add	r7, sp, #0
 801beb0:	6078      	str	r0, [r7, #4]
 801beb2:	000a      	movs	r2, r1
 801beb4:	1cfb      	adds	r3, r7, #3
 801beb6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	1cfa      	adds	r2, r7, #3
 801bebc:	7812      	ldrb	r2, [r2, #0]
 801bebe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bec0:	2300      	movs	r3, #0
}
 801bec2:	0018      	movs	r0, r3
 801bec4:	46bd      	mov	sp, r7
 801bec6:	b002      	add	sp, #8
 801bec8:	bd80      	pop	{r7, pc}
	...

0801becc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b082      	sub	sp, #8
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	23a7      	movs	r3, #167	@ 0xa7
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	5cd1      	ldrb	r1, [r2, r3]
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	4a06      	ldr	r2, [pc, #24]	@ (801bef8 <USBD_LL_Suspend+0x2c>)
 801bee0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bee2:	687a      	ldr	r2, [r7, #4]
 801bee4:	23a7      	movs	r3, #167	@ 0xa7
 801bee6:	009b      	lsls	r3, r3, #2
 801bee8:	2104      	movs	r1, #4
 801beea:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801beec:	2300      	movs	r3, #0
}
 801beee:	0018      	movs	r0, r3
 801bef0:	46bd      	mov	sp, r7
 801bef2:	b002      	add	sp, #8
 801bef4:	bd80      	pop	{r7, pc}
 801bef6:	46c0      	nop			@ (mov r8, r8)
 801bef8:	0000029d 	.word	0x0000029d

0801befc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b082      	sub	sp, #8
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bf04:	687a      	ldr	r2, [r7, #4]
 801bf06:	23a7      	movs	r3, #167	@ 0xa7
 801bf08:	009b      	lsls	r3, r3, #2
 801bf0a:	5cd3      	ldrb	r3, [r2, r3]
 801bf0c:	2b04      	cmp	r3, #4
 801bf0e:	d106      	bne.n	801bf1e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	4a05      	ldr	r2, [pc, #20]	@ (801bf28 <USBD_LL_Resume+0x2c>)
 801bf14:	5c99      	ldrb	r1, [r3, r2]
 801bf16:	687a      	ldr	r2, [r7, #4]
 801bf18:	23a7      	movs	r3, #167	@ 0xa7
 801bf1a:	009b      	lsls	r3, r3, #2
 801bf1c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bf1e:	2300      	movs	r3, #0
}
 801bf20:	0018      	movs	r0, r3
 801bf22:	46bd      	mov	sp, r7
 801bf24:	b002      	add	sp, #8
 801bf26:	bd80      	pop	{r7, pc}
 801bf28:	0000029d 	.word	0x0000029d

0801bf2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b082      	sub	sp, #8
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	23a7      	movs	r3, #167	@ 0xa7
 801bf38:	009b      	lsls	r3, r3, #2
 801bf3a:	5cd3      	ldrb	r3, [r2, r3]
 801bf3c:	2b03      	cmp	r3, #3
 801bf3e:	d10e      	bne.n	801bf5e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bf40:	687a      	ldr	r2, [r7, #4]
 801bf42:	23ad      	movs	r3, #173	@ 0xad
 801bf44:	009b      	lsls	r3, r3, #2
 801bf46:	58d3      	ldr	r3, [r2, r3]
 801bf48:	69db      	ldr	r3, [r3, #28]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d007      	beq.n	801bf5e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bf4e:	687a      	ldr	r2, [r7, #4]
 801bf50:	23ad      	movs	r3, #173	@ 0xad
 801bf52:	009b      	lsls	r3, r3, #2
 801bf54:	58d3      	ldr	r3, [r2, r3]
 801bf56:	69db      	ldr	r3, [r3, #28]
 801bf58:	687a      	ldr	r2, [r7, #4]
 801bf5a:	0010      	movs	r0, r2
 801bf5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bf5e:	2300      	movs	r3, #0
}
 801bf60:	0018      	movs	r0, r3
 801bf62:	46bd      	mov	sp, r7
 801bf64:	b002      	add	sp, #8
 801bf66:	bd80      	pop	{r7, pc}

0801bf68 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b084      	sub	sp, #16
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	6078      	str	r0, [r7, #4]
 801bf70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bf72:	230f      	movs	r3, #15
 801bf74:	18fb      	adds	r3, r7, r3
 801bf76:	2200      	movs	r2, #0
 801bf78:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	001a      	movs	r2, r3
 801bf80:	2360      	movs	r3, #96	@ 0x60
 801bf82:	4013      	ands	r3, r2
 801bf84:	2b40      	cmp	r3, #64	@ 0x40
 801bf86:	d004      	beq.n	801bf92 <USBD_StdDevReq+0x2a>
 801bf88:	d84f      	bhi.n	801c02a <USBD_StdDevReq+0xc2>
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d00b      	beq.n	801bfa6 <USBD_StdDevReq+0x3e>
 801bf8e:	2b20      	cmp	r3, #32
 801bf90:	d14b      	bne.n	801c02a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bf92:	687a      	ldr	r2, [r7, #4]
 801bf94:	23ad      	movs	r3, #173	@ 0xad
 801bf96:	009b      	lsls	r3, r3, #2
 801bf98:	58d3      	ldr	r3, [r2, r3]
 801bf9a:	689b      	ldr	r3, [r3, #8]
 801bf9c:	6839      	ldr	r1, [r7, #0]
 801bf9e:	687a      	ldr	r2, [r7, #4]
 801bfa0:	0010      	movs	r0, r2
 801bfa2:	4798      	blx	r3
      break;
 801bfa4:	e048      	b.n	801c038 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	785b      	ldrb	r3, [r3, #1]
 801bfaa:	2b09      	cmp	r3, #9
 801bfac:	d835      	bhi.n	801c01a <USBD_StdDevReq+0xb2>
 801bfae:	009a      	lsls	r2, r3, #2
 801bfb0:	4b25      	ldr	r3, [pc, #148]	@ (801c048 <USBD_StdDevReq+0xe0>)
 801bfb2:	18d3      	adds	r3, r2, r3
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bfb8:	683a      	ldr	r2, [r7, #0]
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	0011      	movs	r1, r2
 801bfbe:	0018      	movs	r0, r3
 801bfc0:	f000 fa52 	bl	801c468 <USBD_GetDescriptor>
          break;
 801bfc4:	e030      	b.n	801c028 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bfc6:	683a      	ldr	r2, [r7, #0]
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	0011      	movs	r1, r2
 801bfcc:	0018      	movs	r0, r3
 801bfce:	f000 fbfd 	bl	801c7cc <USBD_SetAddress>
          break;
 801bfd2:	e029      	b.n	801c028 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bfd4:	683a      	ldr	r2, [r7, #0]
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	0011      	movs	r1, r2
 801bfda:	0018      	movs	r0, r3
 801bfdc:	f000 fc4a 	bl	801c874 <USBD_SetConfig>
          break;
 801bfe0:	e022      	b.n	801c028 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bfe2:	683a      	ldr	r2, [r7, #0]
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	0011      	movs	r1, r2
 801bfe8:	0018      	movs	r0, r3
 801bfea:	f000 fce7 	bl	801c9bc <USBD_GetConfig>
          break;
 801bfee:	e01b      	b.n	801c028 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bff0:	683a      	ldr	r2, [r7, #0]
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	0011      	movs	r1, r2
 801bff6:	0018      	movs	r0, r3
 801bff8:	f000 fd1b 	bl	801ca32 <USBD_GetStatus>
          break;
 801bffc:	e014      	b.n	801c028 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bffe:	683a      	ldr	r2, [r7, #0]
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	0011      	movs	r1, r2
 801c004:	0018      	movs	r0, r3
 801c006:	f000 fd4e 	bl	801caa6 <USBD_SetFeature>
          break;
 801c00a:	e00d      	b.n	801c028 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c00c:	683a      	ldr	r2, [r7, #0]
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	0011      	movs	r1, r2
 801c012:	0018      	movs	r0, r3
 801c014:	f000 fd5d 	bl	801cad2 <USBD_ClrFeature>
          break;
 801c018:	e006      	b.n	801c028 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c01a:	683a      	ldr	r2, [r7, #0]
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	0011      	movs	r1, r2
 801c020:	0018      	movs	r0, r3
 801c022:	f000 fdb4 	bl	801cb8e <USBD_CtlError>
          break;
 801c026:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c028:	e006      	b.n	801c038 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801c02a:	683a      	ldr	r2, [r7, #0]
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	0011      	movs	r1, r2
 801c030:	0018      	movs	r0, r3
 801c032:	f000 fdac 	bl	801cb8e <USBD_CtlError>
      break;
 801c036:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c038:	230f      	movs	r3, #15
 801c03a:	18fb      	adds	r3, r7, r3
 801c03c:	781b      	ldrb	r3, [r3, #0]
}
 801c03e:	0018      	movs	r0, r3
 801c040:	46bd      	mov	sp, r7
 801c042:	b004      	add	sp, #16
 801c044:	bd80      	pop	{r7, pc}
 801c046:	46c0      	nop			@ (mov r8, r8)
 801c048:	080258a4 	.word	0x080258a4

0801c04c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c04c:	b5b0      	push	{r4, r5, r7, lr}
 801c04e:	b084      	sub	sp, #16
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c056:	230f      	movs	r3, #15
 801c058:	18fb      	adds	r3, r7, r3
 801c05a:	2200      	movs	r2, #0
 801c05c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c05e:	683b      	ldr	r3, [r7, #0]
 801c060:	781b      	ldrb	r3, [r3, #0]
 801c062:	001a      	movs	r2, r3
 801c064:	2360      	movs	r3, #96	@ 0x60
 801c066:	4013      	ands	r3, r2
 801c068:	2b40      	cmp	r3, #64	@ 0x40
 801c06a:	d004      	beq.n	801c076 <USBD_StdItfReq+0x2a>
 801c06c:	d839      	bhi.n	801c0e2 <USBD_StdItfReq+0x96>
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d001      	beq.n	801c076 <USBD_StdItfReq+0x2a>
 801c072:	2b20      	cmp	r3, #32
 801c074:	d135      	bne.n	801c0e2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c076:	687a      	ldr	r2, [r7, #4]
 801c078:	23a7      	movs	r3, #167	@ 0xa7
 801c07a:	009b      	lsls	r3, r3, #2
 801c07c:	5cd3      	ldrb	r3, [r2, r3]
 801c07e:	3b01      	subs	r3, #1
 801c080:	2b02      	cmp	r3, #2
 801c082:	d825      	bhi.n	801c0d0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c084:	683b      	ldr	r3, [r7, #0]
 801c086:	889b      	ldrh	r3, [r3, #4]
 801c088:	b2db      	uxtb	r3, r3
 801c08a:	2b01      	cmp	r3, #1
 801c08c:	d819      	bhi.n	801c0c2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c08e:	687a      	ldr	r2, [r7, #4]
 801c090:	23ad      	movs	r3, #173	@ 0xad
 801c092:	009b      	lsls	r3, r3, #2
 801c094:	58d3      	ldr	r3, [r2, r3]
 801c096:	689b      	ldr	r3, [r3, #8]
 801c098:	250f      	movs	r5, #15
 801c09a:	197c      	adds	r4, r7, r5
 801c09c:	6839      	ldr	r1, [r7, #0]
 801c09e:	687a      	ldr	r2, [r7, #4]
 801c0a0:	0010      	movs	r0, r2
 801c0a2:	4798      	blx	r3
 801c0a4:	0003      	movs	r3, r0
 801c0a6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c0a8:	683b      	ldr	r3, [r7, #0]
 801c0aa:	88db      	ldrh	r3, [r3, #6]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d116      	bne.n	801c0de <USBD_StdItfReq+0x92>
 801c0b0:	197b      	adds	r3, r7, r5
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d112      	bne.n	801c0de <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	f000 fe4f 	bl	801cd5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c0c0:	e00d      	b.n	801c0de <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c0c2:	683a      	ldr	r2, [r7, #0]
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	0011      	movs	r1, r2
 801c0c8:	0018      	movs	r0, r3
 801c0ca:	f000 fd60 	bl	801cb8e <USBD_CtlError>
          break;
 801c0ce:	e006      	b.n	801c0de <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c0d0:	683a      	ldr	r2, [r7, #0]
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	0011      	movs	r1, r2
 801c0d6:	0018      	movs	r0, r3
 801c0d8:	f000 fd59 	bl	801cb8e <USBD_CtlError>
          break;
 801c0dc:	e000      	b.n	801c0e0 <USBD_StdItfReq+0x94>
          break;
 801c0de:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c0e0:	e006      	b.n	801c0f0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c0e2:	683a      	ldr	r2, [r7, #0]
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	0011      	movs	r1, r2
 801c0e8:	0018      	movs	r0, r3
 801c0ea:	f000 fd50 	bl	801cb8e <USBD_CtlError>
      break;
 801c0ee:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c0f0:	2300      	movs	r3, #0
}
 801c0f2:	0018      	movs	r0, r3
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	b004      	add	sp, #16
 801c0f8:	bdb0      	pop	{r4, r5, r7, pc}

0801c0fa <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c0fa:	b5b0      	push	{r4, r5, r7, lr}
 801c0fc:	b084      	sub	sp, #16
 801c0fe:	af00      	add	r7, sp, #0
 801c100:	6078      	str	r0, [r7, #4]
 801c102:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c104:	230f      	movs	r3, #15
 801c106:	18fb      	adds	r3, r7, r3
 801c108:	2200      	movs	r2, #0
 801c10a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c10c:	683b      	ldr	r3, [r7, #0]
 801c10e:	889a      	ldrh	r2, [r3, #4]
 801c110:	230e      	movs	r3, #14
 801c112:	18fb      	adds	r3, r7, r3
 801c114:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c116:	683b      	ldr	r3, [r7, #0]
 801c118:	781b      	ldrb	r3, [r3, #0]
 801c11a:	001a      	movs	r2, r3
 801c11c:	2360      	movs	r3, #96	@ 0x60
 801c11e:	4013      	ands	r3, r2
 801c120:	2b40      	cmp	r3, #64	@ 0x40
 801c122:	d006      	beq.n	801c132 <USBD_StdEPReq+0x38>
 801c124:	d900      	bls.n	801c128 <USBD_StdEPReq+0x2e>
 801c126:	e190      	b.n	801c44a <USBD_StdEPReq+0x350>
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d00c      	beq.n	801c146 <USBD_StdEPReq+0x4c>
 801c12c:	2b20      	cmp	r3, #32
 801c12e:	d000      	beq.n	801c132 <USBD_StdEPReq+0x38>
 801c130:	e18b      	b.n	801c44a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c132:	687a      	ldr	r2, [r7, #4]
 801c134:	23ad      	movs	r3, #173	@ 0xad
 801c136:	009b      	lsls	r3, r3, #2
 801c138:	58d3      	ldr	r3, [r2, r3]
 801c13a:	689b      	ldr	r3, [r3, #8]
 801c13c:	6839      	ldr	r1, [r7, #0]
 801c13e:	687a      	ldr	r2, [r7, #4]
 801c140:	0010      	movs	r0, r2
 801c142:	4798      	blx	r3
      break;
 801c144:	e188      	b.n	801c458 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	781b      	ldrb	r3, [r3, #0]
 801c14a:	001a      	movs	r2, r3
 801c14c:	2360      	movs	r3, #96	@ 0x60
 801c14e:	4013      	ands	r3, r2
 801c150:	2b20      	cmp	r3, #32
 801c152:	d10f      	bne.n	801c174 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c154:	687a      	ldr	r2, [r7, #4]
 801c156:	23ad      	movs	r3, #173	@ 0xad
 801c158:	009b      	lsls	r3, r3, #2
 801c15a:	58d3      	ldr	r3, [r2, r3]
 801c15c:	689b      	ldr	r3, [r3, #8]
 801c15e:	250f      	movs	r5, #15
 801c160:	197c      	adds	r4, r7, r5
 801c162:	6839      	ldr	r1, [r7, #0]
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	0010      	movs	r0, r2
 801c168:	4798      	blx	r3
 801c16a:	0003      	movs	r3, r0
 801c16c:	7023      	strb	r3, [r4, #0]

        return ret;
 801c16e:	197b      	adds	r3, r7, r5
 801c170:	781b      	ldrb	r3, [r3, #0]
 801c172:	e174      	b.n	801c45e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c174:	683b      	ldr	r3, [r7, #0]
 801c176:	785b      	ldrb	r3, [r3, #1]
 801c178:	2b03      	cmp	r3, #3
 801c17a:	d007      	beq.n	801c18c <USBD_StdEPReq+0x92>
 801c17c:	dd00      	ble.n	801c180 <USBD_StdEPReq+0x86>
 801c17e:	e15c      	b.n	801c43a <USBD_StdEPReq+0x340>
 801c180:	2b00      	cmp	r3, #0
 801c182:	d100      	bne.n	801c186 <USBD_StdEPReq+0x8c>
 801c184:	e092      	b.n	801c2ac <USBD_StdEPReq+0x1b2>
 801c186:	2b01      	cmp	r3, #1
 801c188:	d04b      	beq.n	801c222 <USBD_StdEPReq+0x128>
 801c18a:	e156      	b.n	801c43a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c18c:	687a      	ldr	r2, [r7, #4]
 801c18e:	23a7      	movs	r3, #167	@ 0xa7
 801c190:	009b      	lsls	r3, r3, #2
 801c192:	5cd3      	ldrb	r3, [r2, r3]
 801c194:	2b02      	cmp	r3, #2
 801c196:	d002      	beq.n	801c19e <USBD_StdEPReq+0xa4>
 801c198:	2b03      	cmp	r3, #3
 801c19a:	d01d      	beq.n	801c1d8 <USBD_StdEPReq+0xde>
 801c19c:	e039      	b.n	801c212 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c19e:	220e      	movs	r2, #14
 801c1a0:	18bb      	adds	r3, r7, r2
 801c1a2:	781b      	ldrb	r3, [r3, #0]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d010      	beq.n	801c1ca <USBD_StdEPReq+0xd0>
 801c1a8:	18bb      	adds	r3, r7, r2
 801c1aa:	781b      	ldrb	r3, [r3, #0]
 801c1ac:	2b80      	cmp	r3, #128	@ 0x80
 801c1ae:	d00c      	beq.n	801c1ca <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c1b0:	18bb      	adds	r3, r7, r2
 801c1b2:	781a      	ldrb	r2, [r3, #0]
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	0011      	movs	r1, r2
 801c1b8:	0018      	movs	r0, r3
 801c1ba:	f001 fa10 	bl	801d5de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	2180      	movs	r1, #128	@ 0x80
 801c1c2:	0018      	movs	r0, r3
 801c1c4:	f001 fa0b 	bl	801d5de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c1c8:	e02a      	b.n	801c220 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c1ca:	683a      	ldr	r2, [r7, #0]
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	0011      	movs	r1, r2
 801c1d0:	0018      	movs	r0, r3
 801c1d2:	f000 fcdc 	bl	801cb8e <USBD_CtlError>
              break;
 801c1d6:	e023      	b.n	801c220 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c1d8:	683b      	ldr	r3, [r7, #0]
 801c1da:	885b      	ldrh	r3, [r3, #2]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d113      	bne.n	801c208 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c1e0:	220e      	movs	r2, #14
 801c1e2:	18bb      	adds	r3, r7, r2
 801c1e4:	781b      	ldrb	r3, [r3, #0]
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d00e      	beq.n	801c208 <USBD_StdEPReq+0x10e>
 801c1ea:	18bb      	adds	r3, r7, r2
 801c1ec:	781b      	ldrb	r3, [r3, #0]
 801c1ee:	2b80      	cmp	r3, #128	@ 0x80
 801c1f0:	d00a      	beq.n	801c208 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c1f2:	683b      	ldr	r3, [r7, #0]
 801c1f4:	88db      	ldrh	r3, [r3, #6]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d106      	bne.n	801c208 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c1fa:	18bb      	adds	r3, r7, r2
 801c1fc:	781a      	ldrb	r2, [r3, #0]
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	0011      	movs	r1, r2
 801c202:	0018      	movs	r0, r3
 801c204:	f001 f9eb 	bl	801d5de <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	0018      	movs	r0, r3
 801c20c:	f000 fda7 	bl	801cd5e <USBD_CtlSendStatus>

              break;
 801c210:	e006      	b.n	801c220 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c212:	683a      	ldr	r2, [r7, #0]
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	0011      	movs	r1, r2
 801c218:	0018      	movs	r0, r3
 801c21a:	f000 fcb8 	bl	801cb8e <USBD_CtlError>
              break;
 801c21e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c220:	e112      	b.n	801c448 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c222:	687a      	ldr	r2, [r7, #4]
 801c224:	23a7      	movs	r3, #167	@ 0xa7
 801c226:	009b      	lsls	r3, r3, #2
 801c228:	5cd3      	ldrb	r3, [r2, r3]
 801c22a:	2b02      	cmp	r3, #2
 801c22c:	d002      	beq.n	801c234 <USBD_StdEPReq+0x13a>
 801c22e:	2b03      	cmp	r3, #3
 801c230:	d01d      	beq.n	801c26e <USBD_StdEPReq+0x174>
 801c232:	e032      	b.n	801c29a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c234:	220e      	movs	r2, #14
 801c236:	18bb      	adds	r3, r7, r2
 801c238:	781b      	ldrb	r3, [r3, #0]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d010      	beq.n	801c260 <USBD_StdEPReq+0x166>
 801c23e:	18bb      	adds	r3, r7, r2
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	2b80      	cmp	r3, #128	@ 0x80
 801c244:	d00c      	beq.n	801c260 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c246:	18bb      	adds	r3, r7, r2
 801c248:	781a      	ldrb	r2, [r3, #0]
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	0011      	movs	r1, r2
 801c24e:	0018      	movs	r0, r3
 801c250:	f001 f9c5 	bl	801d5de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	2180      	movs	r1, #128	@ 0x80
 801c258:	0018      	movs	r0, r3
 801c25a:	f001 f9c0 	bl	801d5de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c25e:	e024      	b.n	801c2aa <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c260:	683a      	ldr	r2, [r7, #0]
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	0011      	movs	r1, r2
 801c266:	0018      	movs	r0, r3
 801c268:	f000 fc91 	bl	801cb8e <USBD_CtlError>
              break;
 801c26c:	e01d      	b.n	801c2aa <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c26e:	683b      	ldr	r3, [r7, #0]
 801c270:	885b      	ldrh	r3, [r3, #2]
 801c272:	2b00      	cmp	r3, #0
 801c274:	d118      	bne.n	801c2a8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c276:	210e      	movs	r1, #14
 801c278:	187b      	adds	r3, r7, r1
 801c27a:	781b      	ldrb	r3, [r3, #0]
 801c27c:	227f      	movs	r2, #127	@ 0x7f
 801c27e:	4013      	ands	r3, r2
 801c280:	d006      	beq.n	801c290 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c282:	187b      	adds	r3, r7, r1
 801c284:	781a      	ldrb	r2, [r3, #0]
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	0011      	movs	r1, r2
 801c28a:	0018      	movs	r0, r3
 801c28c:	f001 f9d2 	bl	801d634 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	0018      	movs	r0, r3
 801c294:	f000 fd63 	bl	801cd5e <USBD_CtlSendStatus>
              }
              break;
 801c298:	e006      	b.n	801c2a8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c29a:	683a      	ldr	r2, [r7, #0]
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	0011      	movs	r1, r2
 801c2a0:	0018      	movs	r0, r3
 801c2a2:	f000 fc74 	bl	801cb8e <USBD_CtlError>
              break;
 801c2a6:	e000      	b.n	801c2aa <USBD_StdEPReq+0x1b0>
              break;
 801c2a8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c2aa:	e0cd      	b.n	801c448 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c2ac:	687a      	ldr	r2, [r7, #4]
 801c2ae:	23a7      	movs	r3, #167	@ 0xa7
 801c2b0:	009b      	lsls	r3, r3, #2
 801c2b2:	5cd3      	ldrb	r3, [r2, r3]
 801c2b4:	2b02      	cmp	r3, #2
 801c2b6:	d002      	beq.n	801c2be <USBD_StdEPReq+0x1c4>
 801c2b8:	2b03      	cmp	r3, #3
 801c2ba:	d03c      	beq.n	801c336 <USBD_StdEPReq+0x23c>
 801c2bc:	e0b5      	b.n	801c42a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c2be:	220e      	movs	r2, #14
 801c2c0:	18bb      	adds	r3, r7, r2
 801c2c2:	781b      	ldrb	r3, [r3, #0]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d00a      	beq.n	801c2de <USBD_StdEPReq+0x1e4>
 801c2c8:	18bb      	adds	r3, r7, r2
 801c2ca:	781b      	ldrb	r3, [r3, #0]
 801c2cc:	2b80      	cmp	r3, #128	@ 0x80
 801c2ce:	d006      	beq.n	801c2de <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c2d0:	683a      	ldr	r2, [r7, #0]
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	0011      	movs	r1, r2
 801c2d6:	0018      	movs	r0, r3
 801c2d8:	f000 fc59 	bl	801cb8e <USBD_CtlError>
                break;
 801c2dc:	e0ac      	b.n	801c438 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c2de:	220e      	movs	r2, #14
 801c2e0:	18bb      	adds	r3, r7, r2
 801c2e2:	781b      	ldrb	r3, [r3, #0]
 801c2e4:	b25b      	sxtb	r3, r3
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	da0c      	bge.n	801c304 <USBD_StdEPReq+0x20a>
 801c2ea:	18bb      	adds	r3, r7, r2
 801c2ec:	781b      	ldrb	r3, [r3, #0]
 801c2ee:	227f      	movs	r2, #127	@ 0x7f
 801c2f0:	401a      	ands	r2, r3
 801c2f2:	0013      	movs	r3, r2
 801c2f4:	009b      	lsls	r3, r3, #2
 801c2f6:	189b      	adds	r3, r3, r2
 801c2f8:	009b      	lsls	r3, r3, #2
 801c2fa:	3310      	adds	r3, #16
 801c2fc:	687a      	ldr	r2, [r7, #4]
 801c2fe:	18d3      	adds	r3, r2, r3
 801c300:	3304      	adds	r3, #4
 801c302:	e00d      	b.n	801c320 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c304:	230e      	movs	r3, #14
 801c306:	18fb      	adds	r3, r7, r3
 801c308:	781b      	ldrb	r3, [r3, #0]
 801c30a:	227f      	movs	r2, #127	@ 0x7f
 801c30c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c30e:	0013      	movs	r3, r2
 801c310:	009b      	lsls	r3, r3, #2
 801c312:	189b      	adds	r3, r3, r2
 801c314:	009b      	lsls	r3, r3, #2
 801c316:	3351      	adds	r3, #81	@ 0x51
 801c318:	33ff      	adds	r3, #255	@ 0xff
 801c31a:	687a      	ldr	r2, [r7, #4]
 801c31c:	18d3      	adds	r3, r2, r3
 801c31e:	3304      	adds	r3, #4
 801c320:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c322:	68bb      	ldr	r3, [r7, #8]
 801c324:	2200      	movs	r2, #0
 801c326:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c328:	68b9      	ldr	r1, [r7, #8]
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	2202      	movs	r2, #2
 801c32e:	0018      	movs	r0, r3
 801c330:	f000 fcab 	bl	801cc8a <USBD_CtlSendData>
              break;
 801c334:	e080      	b.n	801c438 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c336:	220e      	movs	r2, #14
 801c338:	18bb      	adds	r3, r7, r2
 801c33a:	781b      	ldrb	r3, [r3, #0]
 801c33c:	b25b      	sxtb	r3, r3
 801c33e:	2b00      	cmp	r3, #0
 801c340:	da14      	bge.n	801c36c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c342:	18bb      	adds	r3, r7, r2
 801c344:	781b      	ldrb	r3, [r3, #0]
 801c346:	220f      	movs	r2, #15
 801c348:	401a      	ands	r2, r3
 801c34a:	6879      	ldr	r1, [r7, #4]
 801c34c:	0013      	movs	r3, r2
 801c34e:	009b      	lsls	r3, r3, #2
 801c350:	189b      	adds	r3, r3, r2
 801c352:	009b      	lsls	r3, r3, #2
 801c354:	18cb      	adds	r3, r1, r3
 801c356:	3318      	adds	r3, #24
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d11e      	bne.n	801c39c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c35e:	683a      	ldr	r2, [r7, #0]
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	0011      	movs	r1, r2
 801c364:	0018      	movs	r0, r3
 801c366:	f000 fc12 	bl	801cb8e <USBD_CtlError>
                  break;
 801c36a:	e065      	b.n	801c438 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c36c:	230e      	movs	r3, #14
 801c36e:	18fb      	adds	r3, r7, r3
 801c370:	781b      	ldrb	r3, [r3, #0]
 801c372:	220f      	movs	r2, #15
 801c374:	401a      	ands	r2, r3
 801c376:	6878      	ldr	r0, [r7, #4]
 801c378:	23ac      	movs	r3, #172	@ 0xac
 801c37a:	0059      	lsls	r1, r3, #1
 801c37c:	0013      	movs	r3, r2
 801c37e:	009b      	lsls	r3, r3, #2
 801c380:	189b      	adds	r3, r3, r2
 801c382:	009b      	lsls	r3, r3, #2
 801c384:	18c3      	adds	r3, r0, r3
 801c386:	185b      	adds	r3, r3, r1
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d106      	bne.n	801c39c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c38e:	683a      	ldr	r2, [r7, #0]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	0011      	movs	r1, r2
 801c394:	0018      	movs	r0, r3
 801c396:	f000 fbfa 	bl	801cb8e <USBD_CtlError>
                  break;
 801c39a:	e04d      	b.n	801c438 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c39c:	220e      	movs	r2, #14
 801c39e:	18bb      	adds	r3, r7, r2
 801c3a0:	781b      	ldrb	r3, [r3, #0]
 801c3a2:	b25b      	sxtb	r3, r3
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	da0c      	bge.n	801c3c2 <USBD_StdEPReq+0x2c8>
 801c3a8:	18bb      	adds	r3, r7, r2
 801c3aa:	781b      	ldrb	r3, [r3, #0]
 801c3ac:	227f      	movs	r2, #127	@ 0x7f
 801c3ae:	401a      	ands	r2, r3
 801c3b0:	0013      	movs	r3, r2
 801c3b2:	009b      	lsls	r3, r3, #2
 801c3b4:	189b      	adds	r3, r3, r2
 801c3b6:	009b      	lsls	r3, r3, #2
 801c3b8:	3310      	adds	r3, #16
 801c3ba:	687a      	ldr	r2, [r7, #4]
 801c3bc:	18d3      	adds	r3, r2, r3
 801c3be:	3304      	adds	r3, #4
 801c3c0:	e00d      	b.n	801c3de <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c3c2:	230e      	movs	r3, #14
 801c3c4:	18fb      	adds	r3, r7, r3
 801c3c6:	781b      	ldrb	r3, [r3, #0]
 801c3c8:	227f      	movs	r2, #127	@ 0x7f
 801c3ca:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c3cc:	0013      	movs	r3, r2
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	189b      	adds	r3, r3, r2
 801c3d2:	009b      	lsls	r3, r3, #2
 801c3d4:	3351      	adds	r3, #81	@ 0x51
 801c3d6:	33ff      	adds	r3, #255	@ 0xff
 801c3d8:	687a      	ldr	r2, [r7, #4]
 801c3da:	18d3      	adds	r3, r2, r3
 801c3dc:	3304      	adds	r3, #4
 801c3de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c3e0:	220e      	movs	r2, #14
 801c3e2:	18bb      	adds	r3, r7, r2
 801c3e4:	781b      	ldrb	r3, [r3, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d003      	beq.n	801c3f2 <USBD_StdEPReq+0x2f8>
 801c3ea:	18bb      	adds	r3, r7, r2
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	2b80      	cmp	r3, #128	@ 0x80
 801c3f0:	d103      	bne.n	801c3fa <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c3f2:	68bb      	ldr	r3, [r7, #8]
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	601a      	str	r2, [r3, #0]
 801c3f8:	e010      	b.n	801c41c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c3fa:	230e      	movs	r3, #14
 801c3fc:	18fb      	adds	r3, r7, r3
 801c3fe:	781a      	ldrb	r2, [r3, #0]
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	0011      	movs	r1, r2
 801c404:	0018      	movs	r0, r3
 801c406:	f001 f940 	bl	801d68a <USBD_LL_IsStallEP>
 801c40a:	1e03      	subs	r3, r0, #0
 801c40c:	d003      	beq.n	801c416 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c40e:	68bb      	ldr	r3, [r7, #8]
 801c410:	2201      	movs	r2, #1
 801c412:	601a      	str	r2, [r3, #0]
 801c414:	e002      	b.n	801c41c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c416:	68bb      	ldr	r3, [r7, #8]
 801c418:	2200      	movs	r2, #0
 801c41a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c41c:	68b9      	ldr	r1, [r7, #8]
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	2202      	movs	r2, #2
 801c422:	0018      	movs	r0, r3
 801c424:	f000 fc31 	bl	801cc8a <USBD_CtlSendData>
              break;
 801c428:	e006      	b.n	801c438 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c42a:	683a      	ldr	r2, [r7, #0]
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	0011      	movs	r1, r2
 801c430:	0018      	movs	r0, r3
 801c432:	f000 fbac 	bl	801cb8e <USBD_CtlError>
              break;
 801c436:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c438:	e006      	b.n	801c448 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c43a:	683a      	ldr	r2, [r7, #0]
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	0011      	movs	r1, r2
 801c440:	0018      	movs	r0, r3
 801c442:	f000 fba4 	bl	801cb8e <USBD_CtlError>
          break;
 801c446:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c448:	e006      	b.n	801c458 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c44a:	683a      	ldr	r2, [r7, #0]
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	0011      	movs	r1, r2
 801c450:	0018      	movs	r0, r3
 801c452:	f000 fb9c 	bl	801cb8e <USBD_CtlError>
      break;
 801c456:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c458:	230f      	movs	r3, #15
 801c45a:	18fb      	adds	r3, r7, r3
 801c45c:	781b      	ldrb	r3, [r3, #0]
}
 801c45e:	0018      	movs	r0, r3
 801c460:	46bd      	mov	sp, r7
 801c462:	b004      	add	sp, #16
 801c464:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c468 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b084      	sub	sp, #16
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
 801c470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c472:	2308      	movs	r3, #8
 801c474:	18fb      	adds	r3, r7, r3
 801c476:	2200      	movs	r2, #0
 801c478:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c47a:	2300      	movs	r3, #0
 801c47c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c47e:	230b      	movs	r3, #11
 801c480:	18fb      	adds	r3, r7, r3
 801c482:	2200      	movs	r2, #0
 801c484:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c486:	683b      	ldr	r3, [r7, #0]
 801c488:	885b      	ldrh	r3, [r3, #2]
 801c48a:	0a1b      	lsrs	r3, r3, #8
 801c48c:	b29b      	uxth	r3, r3
 801c48e:	2b07      	cmp	r3, #7
 801c490:	d900      	bls.n	801c494 <USBD_GetDescriptor+0x2c>
 801c492:	e159      	b.n	801c748 <USBD_GetDescriptor+0x2e0>
 801c494:	009a      	lsls	r2, r3, #2
 801c496:	4bcb      	ldr	r3, [pc, #812]	@ (801c7c4 <USBD_GetDescriptor+0x35c>)
 801c498:	18d3      	adds	r3, r2, r3
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	23ac      	movs	r3, #172	@ 0xac
 801c4a2:	009b      	lsls	r3, r3, #2
 801c4a4:	58d3      	ldr	r3, [r2, r3]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	687a      	ldr	r2, [r7, #4]
 801c4aa:	7c12      	ldrb	r2, [r2, #16]
 801c4ac:	2108      	movs	r1, #8
 801c4ae:	1879      	adds	r1, r7, r1
 801c4b0:	0010      	movs	r0, r2
 801c4b2:	4798      	blx	r3
 801c4b4:	0003      	movs	r3, r0
 801c4b6:	60fb      	str	r3, [r7, #12]
      break;
 801c4b8:	e153      	b.n	801c762 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	7c1b      	ldrb	r3, [r3, #16]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d10f      	bne.n	801c4e2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c4c2:	687a      	ldr	r2, [r7, #4]
 801c4c4:	23ad      	movs	r3, #173	@ 0xad
 801c4c6:	009b      	lsls	r3, r3, #2
 801c4c8:	58d3      	ldr	r3, [r2, r3]
 801c4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c4cc:	2208      	movs	r2, #8
 801c4ce:	18ba      	adds	r2, r7, r2
 801c4d0:	0010      	movs	r0, r2
 801c4d2:	4798      	blx	r3
 801c4d4:	0003      	movs	r3, r0
 801c4d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	3301      	adds	r3, #1
 801c4dc:	2202      	movs	r2, #2
 801c4de:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c4e0:	e13f      	b.n	801c762 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c4e2:	687a      	ldr	r2, [r7, #4]
 801c4e4:	23ad      	movs	r3, #173	@ 0xad
 801c4e6:	009b      	lsls	r3, r3, #2
 801c4e8:	58d3      	ldr	r3, [r2, r3]
 801c4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4ec:	2208      	movs	r2, #8
 801c4ee:	18ba      	adds	r2, r7, r2
 801c4f0:	0010      	movs	r0, r2
 801c4f2:	4798      	blx	r3
 801c4f4:	0003      	movs	r3, r0
 801c4f6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	3301      	adds	r3, #1
 801c4fc:	2202      	movs	r2, #2
 801c4fe:	701a      	strb	r2, [r3, #0]
      break;
 801c500:	e12f      	b.n	801c762 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c502:	683b      	ldr	r3, [r7, #0]
 801c504:	885b      	ldrh	r3, [r3, #2]
 801c506:	b2db      	uxtb	r3, r3
 801c508:	2b05      	cmp	r3, #5
 801c50a:	d900      	bls.n	801c50e <USBD_GetDescriptor+0xa6>
 801c50c:	e0d0      	b.n	801c6b0 <USBD_GetDescriptor+0x248>
 801c50e:	009a      	lsls	r2, r3, #2
 801c510:	4bad      	ldr	r3, [pc, #692]	@ (801c7c8 <USBD_GetDescriptor+0x360>)
 801c512:	18d3      	adds	r3, r2, r3
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	23ac      	movs	r3, #172	@ 0xac
 801c51c:	009b      	lsls	r3, r3, #2
 801c51e:	58d3      	ldr	r3, [r2, r3]
 801c520:	685b      	ldr	r3, [r3, #4]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d00d      	beq.n	801c542 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c526:	687a      	ldr	r2, [r7, #4]
 801c528:	23ac      	movs	r3, #172	@ 0xac
 801c52a:	009b      	lsls	r3, r3, #2
 801c52c:	58d3      	ldr	r3, [r2, r3]
 801c52e:	685b      	ldr	r3, [r3, #4]
 801c530:	687a      	ldr	r2, [r7, #4]
 801c532:	7c12      	ldrb	r2, [r2, #16]
 801c534:	2108      	movs	r1, #8
 801c536:	1879      	adds	r1, r7, r1
 801c538:	0010      	movs	r0, r2
 801c53a:	4798      	blx	r3
 801c53c:	0003      	movs	r3, r0
 801c53e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c540:	e0c3      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c542:	683a      	ldr	r2, [r7, #0]
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	0011      	movs	r1, r2
 801c548:	0018      	movs	r0, r3
 801c54a:	f000 fb20 	bl	801cb8e <USBD_CtlError>
            err++;
 801c54e:	210b      	movs	r1, #11
 801c550:	187b      	adds	r3, r7, r1
 801c552:	781a      	ldrb	r2, [r3, #0]
 801c554:	187b      	adds	r3, r7, r1
 801c556:	3201      	adds	r2, #1
 801c558:	701a      	strb	r2, [r3, #0]
          break;
 801c55a:	e0b6      	b.n	801c6ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c55c:	687a      	ldr	r2, [r7, #4]
 801c55e:	23ac      	movs	r3, #172	@ 0xac
 801c560:	009b      	lsls	r3, r3, #2
 801c562:	58d3      	ldr	r3, [r2, r3]
 801c564:	689b      	ldr	r3, [r3, #8]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d00d      	beq.n	801c586 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c56a:	687a      	ldr	r2, [r7, #4]
 801c56c:	23ac      	movs	r3, #172	@ 0xac
 801c56e:	009b      	lsls	r3, r3, #2
 801c570:	58d3      	ldr	r3, [r2, r3]
 801c572:	689b      	ldr	r3, [r3, #8]
 801c574:	687a      	ldr	r2, [r7, #4]
 801c576:	7c12      	ldrb	r2, [r2, #16]
 801c578:	2108      	movs	r1, #8
 801c57a:	1879      	adds	r1, r7, r1
 801c57c:	0010      	movs	r0, r2
 801c57e:	4798      	blx	r3
 801c580:	0003      	movs	r3, r0
 801c582:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c584:	e0a1      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c586:	683a      	ldr	r2, [r7, #0]
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	0011      	movs	r1, r2
 801c58c:	0018      	movs	r0, r3
 801c58e:	f000 fafe 	bl	801cb8e <USBD_CtlError>
            err++;
 801c592:	210b      	movs	r1, #11
 801c594:	187b      	adds	r3, r7, r1
 801c596:	781a      	ldrb	r2, [r3, #0]
 801c598:	187b      	adds	r3, r7, r1
 801c59a:	3201      	adds	r2, #1
 801c59c:	701a      	strb	r2, [r3, #0]
          break;
 801c59e:	e094      	b.n	801c6ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c5a0:	687a      	ldr	r2, [r7, #4]
 801c5a2:	23ac      	movs	r3, #172	@ 0xac
 801c5a4:	009b      	lsls	r3, r3, #2
 801c5a6:	58d3      	ldr	r3, [r2, r3]
 801c5a8:	68db      	ldr	r3, [r3, #12]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d00d      	beq.n	801c5ca <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c5ae:	687a      	ldr	r2, [r7, #4]
 801c5b0:	23ac      	movs	r3, #172	@ 0xac
 801c5b2:	009b      	lsls	r3, r3, #2
 801c5b4:	58d3      	ldr	r3, [r2, r3]
 801c5b6:	68db      	ldr	r3, [r3, #12]
 801c5b8:	687a      	ldr	r2, [r7, #4]
 801c5ba:	7c12      	ldrb	r2, [r2, #16]
 801c5bc:	2108      	movs	r1, #8
 801c5be:	1879      	adds	r1, r7, r1
 801c5c0:	0010      	movs	r0, r2
 801c5c2:	4798      	blx	r3
 801c5c4:	0003      	movs	r3, r0
 801c5c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c5c8:	e07f      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c5ca:	683a      	ldr	r2, [r7, #0]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	0011      	movs	r1, r2
 801c5d0:	0018      	movs	r0, r3
 801c5d2:	f000 fadc 	bl	801cb8e <USBD_CtlError>
            err++;
 801c5d6:	210b      	movs	r1, #11
 801c5d8:	187b      	adds	r3, r7, r1
 801c5da:	781a      	ldrb	r2, [r3, #0]
 801c5dc:	187b      	adds	r3, r7, r1
 801c5de:	3201      	adds	r2, #1
 801c5e0:	701a      	strb	r2, [r3, #0]
          break;
 801c5e2:	e072      	b.n	801c6ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c5e4:	687a      	ldr	r2, [r7, #4]
 801c5e6:	23ac      	movs	r3, #172	@ 0xac
 801c5e8:	009b      	lsls	r3, r3, #2
 801c5ea:	58d3      	ldr	r3, [r2, r3]
 801c5ec:	691b      	ldr	r3, [r3, #16]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d00d      	beq.n	801c60e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c5f2:	687a      	ldr	r2, [r7, #4]
 801c5f4:	23ac      	movs	r3, #172	@ 0xac
 801c5f6:	009b      	lsls	r3, r3, #2
 801c5f8:	58d3      	ldr	r3, [r2, r3]
 801c5fa:	691b      	ldr	r3, [r3, #16]
 801c5fc:	687a      	ldr	r2, [r7, #4]
 801c5fe:	7c12      	ldrb	r2, [r2, #16]
 801c600:	2108      	movs	r1, #8
 801c602:	1879      	adds	r1, r7, r1
 801c604:	0010      	movs	r0, r2
 801c606:	4798      	blx	r3
 801c608:	0003      	movs	r3, r0
 801c60a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c60c:	e05d      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c60e:	683a      	ldr	r2, [r7, #0]
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	0011      	movs	r1, r2
 801c614:	0018      	movs	r0, r3
 801c616:	f000 faba 	bl	801cb8e <USBD_CtlError>
            err++;
 801c61a:	210b      	movs	r1, #11
 801c61c:	187b      	adds	r3, r7, r1
 801c61e:	781a      	ldrb	r2, [r3, #0]
 801c620:	187b      	adds	r3, r7, r1
 801c622:	3201      	adds	r2, #1
 801c624:	701a      	strb	r2, [r3, #0]
          break;
 801c626:	e050      	b.n	801c6ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c628:	687a      	ldr	r2, [r7, #4]
 801c62a:	23ac      	movs	r3, #172	@ 0xac
 801c62c:	009b      	lsls	r3, r3, #2
 801c62e:	58d3      	ldr	r3, [r2, r3]
 801c630:	695b      	ldr	r3, [r3, #20]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d00d      	beq.n	801c652 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c636:	687a      	ldr	r2, [r7, #4]
 801c638:	23ac      	movs	r3, #172	@ 0xac
 801c63a:	009b      	lsls	r3, r3, #2
 801c63c:	58d3      	ldr	r3, [r2, r3]
 801c63e:	695b      	ldr	r3, [r3, #20]
 801c640:	687a      	ldr	r2, [r7, #4]
 801c642:	7c12      	ldrb	r2, [r2, #16]
 801c644:	2108      	movs	r1, #8
 801c646:	1879      	adds	r1, r7, r1
 801c648:	0010      	movs	r0, r2
 801c64a:	4798      	blx	r3
 801c64c:	0003      	movs	r3, r0
 801c64e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c650:	e03b      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c652:	683a      	ldr	r2, [r7, #0]
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	0011      	movs	r1, r2
 801c658:	0018      	movs	r0, r3
 801c65a:	f000 fa98 	bl	801cb8e <USBD_CtlError>
            err++;
 801c65e:	210b      	movs	r1, #11
 801c660:	187b      	adds	r3, r7, r1
 801c662:	781a      	ldrb	r2, [r3, #0]
 801c664:	187b      	adds	r3, r7, r1
 801c666:	3201      	adds	r2, #1
 801c668:	701a      	strb	r2, [r3, #0]
          break;
 801c66a:	e02e      	b.n	801c6ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c66c:	687a      	ldr	r2, [r7, #4]
 801c66e:	23ac      	movs	r3, #172	@ 0xac
 801c670:	009b      	lsls	r3, r3, #2
 801c672:	58d3      	ldr	r3, [r2, r3]
 801c674:	699b      	ldr	r3, [r3, #24]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d00d      	beq.n	801c696 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c67a:	687a      	ldr	r2, [r7, #4]
 801c67c:	23ac      	movs	r3, #172	@ 0xac
 801c67e:	009b      	lsls	r3, r3, #2
 801c680:	58d3      	ldr	r3, [r2, r3]
 801c682:	699b      	ldr	r3, [r3, #24]
 801c684:	687a      	ldr	r2, [r7, #4]
 801c686:	7c12      	ldrb	r2, [r2, #16]
 801c688:	2108      	movs	r1, #8
 801c68a:	1879      	adds	r1, r7, r1
 801c68c:	0010      	movs	r0, r2
 801c68e:	4798      	blx	r3
 801c690:	0003      	movs	r3, r0
 801c692:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c694:	e019      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c696:	683a      	ldr	r2, [r7, #0]
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	0011      	movs	r1, r2
 801c69c:	0018      	movs	r0, r3
 801c69e:	f000 fa76 	bl	801cb8e <USBD_CtlError>
            err++;
 801c6a2:	210b      	movs	r1, #11
 801c6a4:	187b      	adds	r3, r7, r1
 801c6a6:	781a      	ldrb	r2, [r3, #0]
 801c6a8:	187b      	adds	r3, r7, r1
 801c6aa:	3201      	adds	r2, #1
 801c6ac:	701a      	strb	r2, [r3, #0]
          break;
 801c6ae:	e00c      	b.n	801c6ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c6b0:	683a      	ldr	r2, [r7, #0]
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	0011      	movs	r1, r2
 801c6b6:	0018      	movs	r0, r3
 801c6b8:	f000 fa69 	bl	801cb8e <USBD_CtlError>
          err++;
 801c6bc:	210b      	movs	r1, #11
 801c6be:	187b      	adds	r3, r7, r1
 801c6c0:	781a      	ldrb	r2, [r3, #0]
 801c6c2:	187b      	adds	r3, r7, r1
 801c6c4:	3201      	adds	r2, #1
 801c6c6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c6c8:	e04b      	b.n	801c762 <USBD_GetDescriptor+0x2fa>
 801c6ca:	e04a      	b.n	801c762 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	7c1b      	ldrb	r3, [r3, #16]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d10b      	bne.n	801c6ec <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c6d4:	687a      	ldr	r2, [r7, #4]
 801c6d6:	23ad      	movs	r3, #173	@ 0xad
 801c6d8:	009b      	lsls	r3, r3, #2
 801c6da:	58d3      	ldr	r3, [r2, r3]
 801c6dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6de:	2208      	movs	r2, #8
 801c6e0:	18ba      	adds	r2, r7, r2
 801c6e2:	0010      	movs	r0, r2
 801c6e4:	4798      	blx	r3
 801c6e6:	0003      	movs	r3, r0
 801c6e8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c6ea:	e03a      	b.n	801c762 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c6ec:	683a      	ldr	r2, [r7, #0]
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	0011      	movs	r1, r2
 801c6f2:	0018      	movs	r0, r3
 801c6f4:	f000 fa4b 	bl	801cb8e <USBD_CtlError>
        err++;
 801c6f8:	210b      	movs	r1, #11
 801c6fa:	187b      	adds	r3, r7, r1
 801c6fc:	781a      	ldrb	r2, [r3, #0]
 801c6fe:	187b      	adds	r3, r7, r1
 801c700:	3201      	adds	r2, #1
 801c702:	701a      	strb	r2, [r3, #0]
      break;
 801c704:	e02d      	b.n	801c762 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	7c1b      	ldrb	r3, [r3, #16]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d10f      	bne.n	801c72e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c70e:	687a      	ldr	r2, [r7, #4]
 801c710:	23ad      	movs	r3, #173	@ 0xad
 801c712:	009b      	lsls	r3, r3, #2
 801c714:	58d3      	ldr	r3, [r2, r3]
 801c716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c718:	2208      	movs	r2, #8
 801c71a:	18ba      	adds	r2, r7, r2
 801c71c:	0010      	movs	r0, r2
 801c71e:	4798      	blx	r3
 801c720:	0003      	movs	r3, r0
 801c722:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	3301      	adds	r3, #1
 801c728:	2207      	movs	r2, #7
 801c72a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c72c:	e019      	b.n	801c762 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c72e:	683a      	ldr	r2, [r7, #0]
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	0011      	movs	r1, r2
 801c734:	0018      	movs	r0, r3
 801c736:	f000 fa2a 	bl	801cb8e <USBD_CtlError>
        err++;
 801c73a:	210b      	movs	r1, #11
 801c73c:	187b      	adds	r3, r7, r1
 801c73e:	781a      	ldrb	r2, [r3, #0]
 801c740:	187b      	adds	r3, r7, r1
 801c742:	3201      	adds	r2, #1
 801c744:	701a      	strb	r2, [r3, #0]
      break;
 801c746:	e00c      	b.n	801c762 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c748:	683a      	ldr	r2, [r7, #0]
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	0011      	movs	r1, r2
 801c74e:	0018      	movs	r0, r3
 801c750:	f000 fa1d 	bl	801cb8e <USBD_CtlError>
      err++;
 801c754:	210b      	movs	r1, #11
 801c756:	187b      	adds	r3, r7, r1
 801c758:	781a      	ldrb	r2, [r3, #0]
 801c75a:	187b      	adds	r3, r7, r1
 801c75c:	3201      	adds	r2, #1
 801c75e:	701a      	strb	r2, [r3, #0]
      break;
 801c760:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c762:	230b      	movs	r3, #11
 801c764:	18fb      	adds	r3, r7, r3
 801c766:	781b      	ldrb	r3, [r3, #0]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d127      	bne.n	801c7bc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c76c:	2108      	movs	r1, #8
 801c76e:	187b      	adds	r3, r7, r1
 801c770:	881b      	ldrh	r3, [r3, #0]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d019      	beq.n	801c7aa <USBD_GetDescriptor+0x342>
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	88db      	ldrh	r3, [r3, #6]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d015      	beq.n	801c7aa <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c77e:	683b      	ldr	r3, [r7, #0]
 801c780:	88da      	ldrh	r2, [r3, #6]
 801c782:	187b      	adds	r3, r7, r1
 801c784:	881b      	ldrh	r3, [r3, #0]
 801c786:	1c18      	adds	r0, r3, #0
 801c788:	1c11      	adds	r1, r2, #0
 801c78a:	b28a      	uxth	r2, r1
 801c78c:	b283      	uxth	r3, r0
 801c78e:	429a      	cmp	r2, r3
 801c790:	d900      	bls.n	801c794 <USBD_GetDescriptor+0x32c>
 801c792:	1c01      	adds	r1, r0, #0
 801c794:	b28a      	uxth	r2, r1
 801c796:	2108      	movs	r1, #8
 801c798:	187b      	adds	r3, r7, r1
 801c79a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c79c:	187b      	adds	r3, r7, r1
 801c79e:	881a      	ldrh	r2, [r3, #0]
 801c7a0:	68f9      	ldr	r1, [r7, #12]
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	0018      	movs	r0, r3
 801c7a6:	f000 fa70 	bl	801cc8a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	88db      	ldrh	r3, [r3, #6]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d105      	bne.n	801c7be <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	0018      	movs	r0, r3
 801c7b6:	f000 fad2 	bl	801cd5e <USBD_CtlSendStatus>
 801c7ba:	e000      	b.n	801c7be <USBD_GetDescriptor+0x356>
    return;
 801c7bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	b004      	add	sp, #16
 801c7c2:	bd80      	pop	{r7, pc}
 801c7c4:	080258cc 	.word	0x080258cc
 801c7c8:	080258ec 	.word	0x080258ec

0801c7cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c7cc:	b590      	push	{r4, r7, lr}
 801c7ce:	b085      	sub	sp, #20
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
 801c7d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c7d6:	683b      	ldr	r3, [r7, #0]
 801c7d8:	889b      	ldrh	r3, [r3, #4]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d13d      	bne.n	801c85a <USBD_SetAddress+0x8e>
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	88db      	ldrh	r3, [r3, #6]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d139      	bne.n	801c85a <USBD_SetAddress+0x8e>
 801c7e6:	683b      	ldr	r3, [r7, #0]
 801c7e8:	885b      	ldrh	r3, [r3, #2]
 801c7ea:	2b7f      	cmp	r3, #127	@ 0x7f
 801c7ec:	d835      	bhi.n	801c85a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c7ee:	683b      	ldr	r3, [r7, #0]
 801c7f0:	885b      	ldrh	r3, [r3, #2]
 801c7f2:	b2da      	uxtb	r2, r3
 801c7f4:	230f      	movs	r3, #15
 801c7f6:	18fb      	adds	r3, r7, r3
 801c7f8:	217f      	movs	r1, #127	@ 0x7f
 801c7fa:	400a      	ands	r2, r1
 801c7fc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	23a7      	movs	r3, #167	@ 0xa7
 801c802:	009b      	lsls	r3, r3, #2
 801c804:	5cd3      	ldrb	r3, [r2, r3]
 801c806:	2b03      	cmp	r3, #3
 801c808:	d106      	bne.n	801c818 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c80a:	683a      	ldr	r2, [r7, #0]
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	0011      	movs	r1, r2
 801c810:	0018      	movs	r0, r3
 801c812:	f000 f9bc 	bl	801cb8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c816:	e027      	b.n	801c868 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	240f      	movs	r4, #15
 801c81c:	193a      	adds	r2, r7, r4
 801c81e:	4914      	ldr	r1, [pc, #80]	@ (801c870 <USBD_SetAddress+0xa4>)
 801c820:	7812      	ldrb	r2, [r2, #0]
 801c822:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c824:	193b      	adds	r3, r7, r4
 801c826:	781a      	ldrb	r2, [r3, #0]
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	0011      	movs	r1, r2
 801c82c:	0018      	movs	r0, r3
 801c82e:	f000 ff5d 	bl	801d6ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	0018      	movs	r0, r3
 801c836:	f000 fa92 	bl	801cd5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c83a:	193b      	adds	r3, r7, r4
 801c83c:	781b      	ldrb	r3, [r3, #0]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d005      	beq.n	801c84e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c842:	687a      	ldr	r2, [r7, #4]
 801c844:	23a7      	movs	r3, #167	@ 0xa7
 801c846:	009b      	lsls	r3, r3, #2
 801c848:	2102      	movs	r1, #2
 801c84a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c84c:	e00c      	b.n	801c868 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c84e:	687a      	ldr	r2, [r7, #4]
 801c850:	23a7      	movs	r3, #167	@ 0xa7
 801c852:	009b      	lsls	r3, r3, #2
 801c854:	2101      	movs	r1, #1
 801c856:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c858:	e006      	b.n	801c868 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c85a:	683a      	ldr	r2, [r7, #0]
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	0011      	movs	r1, r2
 801c860:	0018      	movs	r0, r3
 801c862:	f000 f994 	bl	801cb8e <USBD_CtlError>
  }
}
 801c866:	46c0      	nop			@ (mov r8, r8)
 801c868:	46c0      	nop			@ (mov r8, r8)
 801c86a:	46bd      	mov	sp, r7
 801c86c:	b005      	add	sp, #20
 801c86e:	bd90      	pop	{r4, r7, pc}
 801c870:	0000029e 	.word	0x0000029e

0801c874 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b082      	sub	sp, #8
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
 801c87c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c87e:	683b      	ldr	r3, [r7, #0]
 801c880:	885b      	ldrh	r3, [r3, #2]
 801c882:	b2da      	uxtb	r2, r3
 801c884:	4b4c      	ldr	r3, [pc, #304]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c888:	4b4b      	ldr	r3, [pc, #300]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c88a:	781b      	ldrb	r3, [r3, #0]
 801c88c:	2b01      	cmp	r3, #1
 801c88e:	d906      	bls.n	801c89e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c890:	683a      	ldr	r2, [r7, #0]
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	0011      	movs	r1, r2
 801c896:	0018      	movs	r0, r3
 801c898:	f000 f979 	bl	801cb8e <USBD_CtlError>
 801c89c:	e088      	b.n	801c9b0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c89e:	687a      	ldr	r2, [r7, #4]
 801c8a0:	23a7      	movs	r3, #167	@ 0xa7
 801c8a2:	009b      	lsls	r3, r3, #2
 801c8a4:	5cd3      	ldrb	r3, [r2, r3]
 801c8a6:	2b02      	cmp	r3, #2
 801c8a8:	d002      	beq.n	801c8b0 <USBD_SetConfig+0x3c>
 801c8aa:	2b03      	cmp	r3, #3
 801c8ac:	d029      	beq.n	801c902 <USBD_SetConfig+0x8e>
 801c8ae:	e071      	b.n	801c994 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c8b0:	4b41      	ldr	r3, [pc, #260]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c8b2:	781b      	ldrb	r3, [r3, #0]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d01f      	beq.n	801c8f8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c8b8:	4b3f      	ldr	r3, [pc, #252]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c8ba:	781b      	ldrb	r3, [r3, #0]
 801c8bc:	001a      	movs	r2, r3
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c8c2:	687a      	ldr	r2, [r7, #4]
 801c8c4:	23a7      	movs	r3, #167	@ 0xa7
 801c8c6:	009b      	lsls	r3, r3, #2
 801c8c8:	2103      	movs	r1, #3
 801c8ca:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c8cc:	4b3a      	ldr	r3, [pc, #232]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c8ce:	781a      	ldrb	r2, [r3, #0]
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	0011      	movs	r1, r2
 801c8d4:	0018      	movs	r0, r3
 801c8d6:	f7ff f8c6 	bl	801ba66 <USBD_SetClassConfig>
 801c8da:	0003      	movs	r3, r0
 801c8dc:	2b02      	cmp	r3, #2
 801c8de:	d106      	bne.n	801c8ee <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c8e0:	683a      	ldr	r2, [r7, #0]
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	0011      	movs	r1, r2
 801c8e6:	0018      	movs	r0, r3
 801c8e8:	f000 f951 	bl	801cb8e <USBD_CtlError>
            return;
 801c8ec:	e060      	b.n	801c9b0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	0018      	movs	r0, r3
 801c8f2:	f000 fa34 	bl	801cd5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c8f6:	e05b      	b.n	801c9b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	0018      	movs	r0, r3
 801c8fc:	f000 fa2f 	bl	801cd5e <USBD_CtlSendStatus>
        break;
 801c900:	e056      	b.n	801c9b0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c902:	4b2d      	ldr	r3, [pc, #180]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c904:	781b      	ldrb	r3, [r3, #0]
 801c906:	2b00      	cmp	r3, #0
 801c908:	d115      	bne.n	801c936 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c90a:	687a      	ldr	r2, [r7, #4]
 801c90c:	23a7      	movs	r3, #167	@ 0xa7
 801c90e:	009b      	lsls	r3, r3, #2
 801c910:	2102      	movs	r1, #2
 801c912:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c914:	4b28      	ldr	r3, [pc, #160]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	001a      	movs	r2, r3
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c91e:	4b26      	ldr	r3, [pc, #152]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c920:	781a      	ldrb	r2, [r3, #0]
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	0011      	movs	r1, r2
 801c926:	0018      	movs	r0, r3
 801c928:	f7ff f8c4 	bl	801bab4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	0018      	movs	r0, r3
 801c930:	f000 fa15 	bl	801cd5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c934:	e03c      	b.n	801c9b0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c936:	4b20      	ldr	r3, [pc, #128]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c938:	781b      	ldrb	r3, [r3, #0]
 801c93a:	001a      	movs	r2, r3
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	685b      	ldr	r3, [r3, #4]
 801c940:	429a      	cmp	r2, r3
 801c942:	d022      	beq.n	801c98a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	685b      	ldr	r3, [r3, #4]
 801c948:	b2da      	uxtb	r2, r3
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	0011      	movs	r1, r2
 801c94e:	0018      	movs	r0, r3
 801c950:	f7ff f8b0 	bl	801bab4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c954:	4b18      	ldr	r3, [pc, #96]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c956:	781b      	ldrb	r3, [r3, #0]
 801c958:	001a      	movs	r2, r3
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c95e:	4b16      	ldr	r3, [pc, #88]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c960:	781a      	ldrb	r2, [r3, #0]
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	0011      	movs	r1, r2
 801c966:	0018      	movs	r0, r3
 801c968:	f7ff f87d 	bl	801ba66 <USBD_SetClassConfig>
 801c96c:	0003      	movs	r3, r0
 801c96e:	2b02      	cmp	r3, #2
 801c970:	d106      	bne.n	801c980 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c972:	683a      	ldr	r2, [r7, #0]
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	0011      	movs	r1, r2
 801c978:	0018      	movs	r0, r3
 801c97a:	f000 f908 	bl	801cb8e <USBD_CtlError>
            return;
 801c97e:	e017      	b.n	801c9b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	0018      	movs	r0, r3
 801c984:	f000 f9eb 	bl	801cd5e <USBD_CtlSendStatus>
        break;
 801c988:	e012      	b.n	801c9b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	0018      	movs	r0, r3
 801c98e:	f000 f9e6 	bl	801cd5e <USBD_CtlSendStatus>
        break;
 801c992:	e00d      	b.n	801c9b0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c994:	683a      	ldr	r2, [r7, #0]
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	0011      	movs	r1, r2
 801c99a:	0018      	movs	r0, r3
 801c99c:	f000 f8f7 	bl	801cb8e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c9a0:	4b05      	ldr	r3, [pc, #20]	@ (801c9b8 <USBD_SetConfig+0x144>)
 801c9a2:	781a      	ldrb	r2, [r3, #0]
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	0011      	movs	r1, r2
 801c9a8:	0018      	movs	r0, r3
 801c9aa:	f7ff f883 	bl	801bab4 <USBD_ClrClassConfig>
        break;
 801c9ae:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	b002      	add	sp, #8
 801c9b4:	bd80      	pop	{r7, pc}
 801c9b6:	46c0      	nop			@ (mov r8, r8)
 801c9b8:	200023e4 	.word	0x200023e4

0801c9bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c9bc:	b580      	push	{r7, lr}
 801c9be:	b082      	sub	sp, #8
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	6078      	str	r0, [r7, #4]
 801c9c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c9c6:	683b      	ldr	r3, [r7, #0]
 801c9c8:	88db      	ldrh	r3, [r3, #6]
 801c9ca:	2b01      	cmp	r3, #1
 801c9cc:	d006      	beq.n	801c9dc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c9ce:	683a      	ldr	r2, [r7, #0]
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	0011      	movs	r1, r2
 801c9d4:	0018      	movs	r0, r3
 801c9d6:	f000 f8da 	bl	801cb8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c9da:	e026      	b.n	801ca2a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c9dc:	687a      	ldr	r2, [r7, #4]
 801c9de:	23a7      	movs	r3, #167	@ 0xa7
 801c9e0:	009b      	lsls	r3, r3, #2
 801c9e2:	5cd3      	ldrb	r3, [r2, r3]
 801c9e4:	2b02      	cmp	r3, #2
 801c9e6:	dc02      	bgt.n	801c9ee <USBD_GetConfig+0x32>
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	dc03      	bgt.n	801c9f4 <USBD_GetConfig+0x38>
 801c9ec:	e016      	b.n	801ca1c <USBD_GetConfig+0x60>
 801c9ee:	2b03      	cmp	r3, #3
 801c9f0:	d00c      	beq.n	801ca0c <USBD_GetConfig+0x50>
 801c9f2:	e013      	b.n	801ca1c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	2200      	movs	r2, #0
 801c9f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	3308      	adds	r3, #8
 801c9fe:	0019      	movs	r1, r3
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	2201      	movs	r2, #1
 801ca04:	0018      	movs	r0, r3
 801ca06:	f000 f940 	bl	801cc8a <USBD_CtlSendData>
        break;
 801ca0a:	e00e      	b.n	801ca2a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	1d19      	adds	r1, r3, #4
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	2201      	movs	r2, #1
 801ca14:	0018      	movs	r0, r3
 801ca16:	f000 f938 	bl	801cc8a <USBD_CtlSendData>
        break;
 801ca1a:	e006      	b.n	801ca2a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801ca1c:	683a      	ldr	r2, [r7, #0]
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	0011      	movs	r1, r2
 801ca22:	0018      	movs	r0, r3
 801ca24:	f000 f8b3 	bl	801cb8e <USBD_CtlError>
        break;
 801ca28:	46c0      	nop			@ (mov r8, r8)
}
 801ca2a:	46c0      	nop			@ (mov r8, r8)
 801ca2c:	46bd      	mov	sp, r7
 801ca2e:	b002      	add	sp, #8
 801ca30:	bd80      	pop	{r7, pc}

0801ca32 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ca32:	b580      	push	{r7, lr}
 801ca34:	b082      	sub	sp, #8
 801ca36:	af00      	add	r7, sp, #0
 801ca38:	6078      	str	r0, [r7, #4]
 801ca3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ca3c:	687a      	ldr	r2, [r7, #4]
 801ca3e:	23a7      	movs	r3, #167	@ 0xa7
 801ca40:	009b      	lsls	r3, r3, #2
 801ca42:	5cd3      	ldrb	r3, [r2, r3]
 801ca44:	3b01      	subs	r3, #1
 801ca46:	2b02      	cmp	r3, #2
 801ca48:	d822      	bhi.n	801ca90 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	88db      	ldrh	r3, [r3, #6]
 801ca4e:	2b02      	cmp	r3, #2
 801ca50:	d006      	beq.n	801ca60 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801ca52:	683a      	ldr	r2, [r7, #0]
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	0011      	movs	r1, r2
 801ca58:	0018      	movs	r0, r3
 801ca5a:	f000 f898 	bl	801cb8e <USBD_CtlError>
        break;
 801ca5e:	e01e      	b.n	801ca9e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2201      	movs	r2, #1
 801ca64:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ca66:	687a      	ldr	r2, [r7, #4]
 801ca68:	23a9      	movs	r3, #169	@ 0xa9
 801ca6a:	009b      	lsls	r3, r3, #2
 801ca6c:	58d3      	ldr	r3, [r2, r3]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d005      	beq.n	801ca7e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	68db      	ldr	r3, [r3, #12]
 801ca76:	2202      	movs	r2, #2
 801ca78:	431a      	orrs	r2, r3
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	330c      	adds	r3, #12
 801ca82:	0019      	movs	r1, r3
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2202      	movs	r2, #2
 801ca88:	0018      	movs	r0, r3
 801ca8a:	f000 f8fe 	bl	801cc8a <USBD_CtlSendData>
      break;
 801ca8e:	e006      	b.n	801ca9e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801ca90:	683a      	ldr	r2, [r7, #0]
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	0011      	movs	r1, r2
 801ca96:	0018      	movs	r0, r3
 801ca98:	f000 f879 	bl	801cb8e <USBD_CtlError>
      break;
 801ca9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ca9e:	46c0      	nop			@ (mov r8, r8)
 801caa0:	46bd      	mov	sp, r7
 801caa2:	b002      	add	sp, #8
 801caa4:	bd80      	pop	{r7, pc}

0801caa6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801caa6:	b580      	push	{r7, lr}
 801caa8:	b082      	sub	sp, #8
 801caaa:	af00      	add	r7, sp, #0
 801caac:	6078      	str	r0, [r7, #4]
 801caae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cab0:	683b      	ldr	r3, [r7, #0]
 801cab2:	885b      	ldrh	r3, [r3, #2]
 801cab4:	2b01      	cmp	r3, #1
 801cab6:	d108      	bne.n	801caca <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801cab8:	687a      	ldr	r2, [r7, #4]
 801caba:	23a9      	movs	r3, #169	@ 0xa9
 801cabc:	009b      	lsls	r3, r3, #2
 801cabe:	2101      	movs	r1, #1
 801cac0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	0018      	movs	r0, r3
 801cac6:	f000 f94a 	bl	801cd5e <USBD_CtlSendStatus>
  }
}
 801caca:	46c0      	nop			@ (mov r8, r8)
 801cacc:	46bd      	mov	sp, r7
 801cace:	b002      	add	sp, #8
 801cad0:	bd80      	pop	{r7, pc}

0801cad2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cad2:	b580      	push	{r7, lr}
 801cad4:	b082      	sub	sp, #8
 801cad6:	af00      	add	r7, sp, #0
 801cad8:	6078      	str	r0, [r7, #4]
 801cada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cadc:	687a      	ldr	r2, [r7, #4]
 801cade:	23a7      	movs	r3, #167	@ 0xa7
 801cae0:	009b      	lsls	r3, r3, #2
 801cae2:	5cd3      	ldrb	r3, [r2, r3]
 801cae4:	3b01      	subs	r3, #1
 801cae6:	2b02      	cmp	r3, #2
 801cae8:	d80d      	bhi.n	801cb06 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801caea:	683b      	ldr	r3, [r7, #0]
 801caec:	885b      	ldrh	r3, [r3, #2]
 801caee:	2b01      	cmp	r3, #1
 801caf0:	d110      	bne.n	801cb14 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801caf2:	687a      	ldr	r2, [r7, #4]
 801caf4:	23a9      	movs	r3, #169	@ 0xa9
 801caf6:	009b      	lsls	r3, r3, #2
 801caf8:	2100      	movs	r1, #0
 801cafa:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	0018      	movs	r0, r3
 801cb00:	f000 f92d 	bl	801cd5e <USBD_CtlSendStatus>
      }
      break;
 801cb04:	e006      	b.n	801cb14 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801cb06:	683a      	ldr	r2, [r7, #0]
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	0011      	movs	r1, r2
 801cb0c:	0018      	movs	r0, r3
 801cb0e:	f000 f83e 	bl	801cb8e <USBD_CtlError>
      break;
 801cb12:	e000      	b.n	801cb16 <USBD_ClrFeature+0x44>
      break;
 801cb14:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cb16:	46c0      	nop			@ (mov r8, r8)
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	b002      	add	sp, #8
 801cb1c:	bd80      	pop	{r7, pc}

0801cb1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801cb1e:	b580      	push	{r7, lr}
 801cb20:	b082      	sub	sp, #8
 801cb22:	af00      	add	r7, sp, #0
 801cb24:	6078      	str	r0, [r7, #4]
 801cb26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801cb28:	683b      	ldr	r3, [r7, #0]
 801cb2a:	781a      	ldrb	r2, [r3, #0]
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801cb30:	683b      	ldr	r3, [r7, #0]
 801cb32:	785a      	ldrb	r2, [r3, #1]
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801cb38:	683b      	ldr	r3, [r7, #0]
 801cb3a:	3302      	adds	r3, #2
 801cb3c:	781b      	ldrb	r3, [r3, #0]
 801cb3e:	001a      	movs	r2, r3
 801cb40:	683b      	ldr	r3, [r7, #0]
 801cb42:	3303      	adds	r3, #3
 801cb44:	781b      	ldrb	r3, [r3, #0]
 801cb46:	021b      	lsls	r3, r3, #8
 801cb48:	b29b      	uxth	r3, r3
 801cb4a:	18d3      	adds	r3, r2, r3
 801cb4c:	b29a      	uxth	r2, r3
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801cb52:	683b      	ldr	r3, [r7, #0]
 801cb54:	3304      	adds	r3, #4
 801cb56:	781b      	ldrb	r3, [r3, #0]
 801cb58:	001a      	movs	r2, r3
 801cb5a:	683b      	ldr	r3, [r7, #0]
 801cb5c:	3305      	adds	r3, #5
 801cb5e:	781b      	ldrb	r3, [r3, #0]
 801cb60:	021b      	lsls	r3, r3, #8
 801cb62:	b29b      	uxth	r3, r3
 801cb64:	18d3      	adds	r3, r2, r3
 801cb66:	b29a      	uxth	r2, r3
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801cb6c:	683b      	ldr	r3, [r7, #0]
 801cb6e:	3306      	adds	r3, #6
 801cb70:	781b      	ldrb	r3, [r3, #0]
 801cb72:	001a      	movs	r2, r3
 801cb74:	683b      	ldr	r3, [r7, #0]
 801cb76:	3307      	adds	r3, #7
 801cb78:	781b      	ldrb	r3, [r3, #0]
 801cb7a:	021b      	lsls	r3, r3, #8
 801cb7c:	b29b      	uxth	r3, r3
 801cb7e:	18d3      	adds	r3, r2, r3
 801cb80:	b29a      	uxth	r2, r3
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	80da      	strh	r2, [r3, #6]

}
 801cb86:	46c0      	nop			@ (mov r8, r8)
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	b002      	add	sp, #8
 801cb8c:	bd80      	pop	{r7, pc}

0801cb8e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801cb8e:	b580      	push	{r7, lr}
 801cb90:	b082      	sub	sp, #8
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	6078      	str	r0, [r7, #4]
 801cb96:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	2180      	movs	r1, #128	@ 0x80
 801cb9c:	0018      	movs	r0, r3
 801cb9e:	f000 fd1e 	bl	801d5de <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	2100      	movs	r1, #0
 801cba6:	0018      	movs	r0, r3
 801cba8:	f000 fd19 	bl	801d5de <USBD_LL_StallEP>
}
 801cbac:	46c0      	nop			@ (mov r8, r8)
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	b002      	add	sp, #8
 801cbb2:	bd80      	pop	{r7, pc}

0801cbb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801cbb4:	b590      	push	{r4, r7, lr}
 801cbb6:	b087      	sub	sp, #28
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	60f8      	str	r0, [r7, #12]
 801cbbc:	60b9      	str	r1, [r7, #8]
 801cbbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801cbc0:	2417      	movs	r4, #23
 801cbc2:	193b      	adds	r3, r7, r4
 801cbc4:	2200      	movs	r2, #0
 801cbc6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d03c      	beq.n	801cc48 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	0018      	movs	r0, r3
 801cbd2:	f000 f83d 	bl	801cc50 <USBD_GetLen>
 801cbd6:	0003      	movs	r3, r0
 801cbd8:	3301      	adds	r3, #1
 801cbda:	b29b      	uxth	r3, r3
 801cbdc:	18db      	adds	r3, r3, r3
 801cbde:	b29a      	uxth	r2, r3
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801cbe4:	193b      	adds	r3, r7, r4
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	193a      	adds	r2, r7, r4
 801cbea:	1c59      	adds	r1, r3, #1
 801cbec:	7011      	strb	r1, [r2, #0]
 801cbee:	001a      	movs	r2, r3
 801cbf0:	68bb      	ldr	r3, [r7, #8]
 801cbf2:	189b      	adds	r3, r3, r2
 801cbf4:	687a      	ldr	r2, [r7, #4]
 801cbf6:	7812      	ldrb	r2, [r2, #0]
 801cbf8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801cbfa:	193b      	adds	r3, r7, r4
 801cbfc:	781b      	ldrb	r3, [r3, #0]
 801cbfe:	193a      	adds	r2, r7, r4
 801cc00:	1c59      	adds	r1, r3, #1
 801cc02:	7011      	strb	r1, [r2, #0]
 801cc04:	001a      	movs	r2, r3
 801cc06:	68bb      	ldr	r3, [r7, #8]
 801cc08:	189b      	adds	r3, r3, r2
 801cc0a:	2203      	movs	r2, #3
 801cc0c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801cc0e:	e017      	b.n	801cc40 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	1c5a      	adds	r2, r3, #1
 801cc14:	60fa      	str	r2, [r7, #12]
 801cc16:	2417      	movs	r4, #23
 801cc18:	193a      	adds	r2, r7, r4
 801cc1a:	7812      	ldrb	r2, [r2, #0]
 801cc1c:	1939      	adds	r1, r7, r4
 801cc1e:	1c50      	adds	r0, r2, #1
 801cc20:	7008      	strb	r0, [r1, #0]
 801cc22:	0011      	movs	r1, r2
 801cc24:	68ba      	ldr	r2, [r7, #8]
 801cc26:	1852      	adds	r2, r2, r1
 801cc28:	781b      	ldrb	r3, [r3, #0]
 801cc2a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801cc2c:	193b      	adds	r3, r7, r4
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	193a      	adds	r2, r7, r4
 801cc32:	1c59      	adds	r1, r3, #1
 801cc34:	7011      	strb	r1, [r2, #0]
 801cc36:	001a      	movs	r2, r3
 801cc38:	68bb      	ldr	r3, [r7, #8]
 801cc3a:	189b      	adds	r3, r3, r2
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	781b      	ldrb	r3, [r3, #0]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d1e3      	bne.n	801cc10 <USBD_GetString+0x5c>
    }
  }
}
 801cc48:	46c0      	nop			@ (mov r8, r8)
 801cc4a:	46bd      	mov	sp, r7
 801cc4c:	b007      	add	sp, #28
 801cc4e:	bd90      	pop	{r4, r7, pc}

0801cc50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	b084      	sub	sp, #16
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cc58:	230f      	movs	r3, #15
 801cc5a:	18fb      	adds	r3, r7, r3
 801cc5c:	2200      	movs	r2, #0
 801cc5e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cc60:	e008      	b.n	801cc74 <USBD_GetLen+0x24>
  {
    len++;
 801cc62:	210f      	movs	r1, #15
 801cc64:	187b      	adds	r3, r7, r1
 801cc66:	781a      	ldrb	r2, [r3, #0]
 801cc68:	187b      	adds	r3, r7, r1
 801cc6a:	3201      	adds	r2, #1
 801cc6c:	701a      	strb	r2, [r3, #0]
    buf++;
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	3301      	adds	r3, #1
 801cc72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	781b      	ldrb	r3, [r3, #0]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d1f2      	bne.n	801cc62 <USBD_GetLen+0x12>
  }

  return len;
 801cc7c:	230f      	movs	r3, #15
 801cc7e:	18fb      	adds	r3, r7, r3
 801cc80:	781b      	ldrb	r3, [r3, #0]
}
 801cc82:	0018      	movs	r0, r3
 801cc84:	46bd      	mov	sp, r7
 801cc86:	b004      	add	sp, #16
 801cc88:	bd80      	pop	{r7, pc}

0801cc8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cc8a:	b580      	push	{r7, lr}
 801cc8c:	b084      	sub	sp, #16
 801cc8e:	af00      	add	r7, sp, #0
 801cc90:	60f8      	str	r0, [r7, #12]
 801cc92:	60b9      	str	r1, [r7, #8]
 801cc94:	1dbb      	adds	r3, r7, #6
 801cc96:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cc98:	68fa      	ldr	r2, [r7, #12]
 801cc9a:	23a5      	movs	r3, #165	@ 0xa5
 801cc9c:	009b      	lsls	r3, r3, #2
 801cc9e:	2102      	movs	r1, #2
 801cca0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cca2:	1dbb      	adds	r3, r7, #6
 801cca4:	881a      	ldrh	r2, [r3, #0]
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801ccaa:	1dbb      	adds	r3, r7, #6
 801ccac:	881a      	ldrh	r2, [r3, #0]
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ccb2:	1dbb      	adds	r3, r7, #6
 801ccb4:	881b      	ldrh	r3, [r3, #0]
 801ccb6:	68ba      	ldr	r2, [r7, #8]
 801ccb8:	68f8      	ldr	r0, [r7, #12]
 801ccba:	2100      	movs	r1, #0
 801ccbc:	f000 fd41 	bl	801d742 <USBD_LL_Transmit>

  return USBD_OK;
 801ccc0:	2300      	movs	r3, #0
}
 801ccc2:	0018      	movs	r0, r3
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	b004      	add	sp, #16
 801ccc8:	bd80      	pop	{r7, pc}

0801ccca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801ccca:	b580      	push	{r7, lr}
 801cccc:	b084      	sub	sp, #16
 801ccce:	af00      	add	r7, sp, #0
 801ccd0:	60f8      	str	r0, [r7, #12]
 801ccd2:	60b9      	str	r1, [r7, #8]
 801ccd4:	1dbb      	adds	r3, r7, #6
 801ccd6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ccd8:	1dbb      	adds	r3, r7, #6
 801ccda:	881b      	ldrh	r3, [r3, #0]
 801ccdc:	68ba      	ldr	r2, [r7, #8]
 801ccde:	68f8      	ldr	r0, [r7, #12]
 801cce0:	2100      	movs	r1, #0
 801cce2:	f000 fd2e 	bl	801d742 <USBD_LL_Transmit>

  return USBD_OK;
 801cce6:	2300      	movs	r3, #0
}
 801cce8:	0018      	movs	r0, r3
 801ccea:	46bd      	mov	sp, r7
 801ccec:	b004      	add	sp, #16
 801ccee:	bd80      	pop	{r7, pc}

0801ccf0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b084      	sub	sp, #16
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	60f8      	str	r0, [r7, #12]
 801ccf8:	60b9      	str	r1, [r7, #8]
 801ccfa:	1dbb      	adds	r3, r7, #6
 801ccfc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ccfe:	68fa      	ldr	r2, [r7, #12]
 801cd00:	23a5      	movs	r3, #165	@ 0xa5
 801cd02:	009b      	lsls	r3, r3, #2
 801cd04:	2103      	movs	r1, #3
 801cd06:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cd08:	1dbb      	adds	r3, r7, #6
 801cd0a:	8819      	ldrh	r1, [r3, #0]
 801cd0c:	68fa      	ldr	r2, [r7, #12]
 801cd0e:	23ae      	movs	r3, #174	@ 0xae
 801cd10:	005b      	lsls	r3, r3, #1
 801cd12:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cd14:	1dbb      	adds	r3, r7, #6
 801cd16:	8819      	ldrh	r1, [r3, #0]
 801cd18:	68fa      	ldr	r2, [r7, #12]
 801cd1a:	23b0      	movs	r3, #176	@ 0xb0
 801cd1c:	005b      	lsls	r3, r3, #1
 801cd1e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cd20:	1dbb      	adds	r3, r7, #6
 801cd22:	881b      	ldrh	r3, [r3, #0]
 801cd24:	68ba      	ldr	r2, [r7, #8]
 801cd26:	68f8      	ldr	r0, [r7, #12]
 801cd28:	2100      	movs	r1, #0
 801cd2a:	f000 fd41 	bl	801d7b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cd2e:	2300      	movs	r3, #0
}
 801cd30:	0018      	movs	r0, r3
 801cd32:	46bd      	mov	sp, r7
 801cd34:	b004      	add	sp, #16
 801cd36:	bd80      	pop	{r7, pc}

0801cd38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b084      	sub	sp, #16
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	60f8      	str	r0, [r7, #12]
 801cd40:	60b9      	str	r1, [r7, #8]
 801cd42:	1dbb      	adds	r3, r7, #6
 801cd44:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cd46:	1dbb      	adds	r3, r7, #6
 801cd48:	881b      	ldrh	r3, [r3, #0]
 801cd4a:	68ba      	ldr	r2, [r7, #8]
 801cd4c:	68f8      	ldr	r0, [r7, #12]
 801cd4e:	2100      	movs	r1, #0
 801cd50:	f000 fd2e 	bl	801d7b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cd54:	2300      	movs	r3, #0
}
 801cd56:	0018      	movs	r0, r3
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	b004      	add	sp, #16
 801cd5c:	bd80      	pop	{r7, pc}

0801cd5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cd5e:	b580      	push	{r7, lr}
 801cd60:	b082      	sub	sp, #8
 801cd62:	af00      	add	r7, sp, #0
 801cd64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cd66:	687a      	ldr	r2, [r7, #4]
 801cd68:	23a5      	movs	r3, #165	@ 0xa5
 801cd6a:	009b      	lsls	r3, r3, #2
 801cd6c:	2104      	movs	r1, #4
 801cd6e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cd70:	6878      	ldr	r0, [r7, #4]
 801cd72:	2300      	movs	r3, #0
 801cd74:	2200      	movs	r2, #0
 801cd76:	2100      	movs	r1, #0
 801cd78:	f000 fce3 	bl	801d742 <USBD_LL_Transmit>

  return USBD_OK;
 801cd7c:	2300      	movs	r3, #0
}
 801cd7e:	0018      	movs	r0, r3
 801cd80:	46bd      	mov	sp, r7
 801cd82:	b002      	add	sp, #8
 801cd84:	bd80      	pop	{r7, pc}

0801cd86 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cd86:	b580      	push	{r7, lr}
 801cd88:	b082      	sub	sp, #8
 801cd8a:	af00      	add	r7, sp, #0
 801cd8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cd8e:	687a      	ldr	r2, [r7, #4]
 801cd90:	23a5      	movs	r3, #165	@ 0xa5
 801cd92:	009b      	lsls	r3, r3, #2
 801cd94:	2105      	movs	r1, #5
 801cd96:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cd98:	6878      	ldr	r0, [r7, #4]
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	2100      	movs	r1, #0
 801cda0:	f000 fd06 	bl	801d7b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cda4:	2300      	movs	r3, #0
}
 801cda6:	0018      	movs	r0, r3
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	b002      	add	sp, #8
 801cdac:	bd80      	pop	{r7, pc}
	...

0801cdb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cdb4:	4914      	ldr	r1, [pc, #80]	@ (801ce08 <MX_USB_DEVICE_Init+0x58>)
 801cdb6:	4b15      	ldr	r3, [pc, #84]	@ (801ce0c <MX_USB_DEVICE_Init+0x5c>)
 801cdb8:	2200      	movs	r2, #0
 801cdba:	0018      	movs	r0, r3
 801cdbc:	f7fe fdec 	bl	801b998 <USBD_Init>
 801cdc0:	1e03      	subs	r3, r0, #0
 801cdc2:	d001      	beq.n	801cdc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cdc4:	f7eb faa8 	bl	8008318 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cdc8:	4a11      	ldr	r2, [pc, #68]	@ (801ce10 <MX_USB_DEVICE_Init+0x60>)
 801cdca:	4b10      	ldr	r3, [pc, #64]	@ (801ce0c <MX_USB_DEVICE_Init+0x5c>)
 801cdcc:	0011      	movs	r1, r2
 801cdce:	0018      	movs	r0, r3
 801cdd0:	f7fe fe13 	bl	801b9fa <USBD_RegisterClass>
 801cdd4:	1e03      	subs	r3, r0, #0
 801cdd6:	d001      	beq.n	801cddc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cdd8:	f7eb fa9e 	bl	8008318 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cddc:	4a0d      	ldr	r2, [pc, #52]	@ (801ce14 <MX_USB_DEVICE_Init+0x64>)
 801cdde:	4b0b      	ldr	r3, [pc, #44]	@ (801ce0c <MX_USB_DEVICE_Init+0x5c>)
 801cde0:	0011      	movs	r1, r2
 801cde2:	0018      	movs	r0, r3
 801cde4:	f7fe fd28 	bl	801b838 <USBD_CDC_RegisterInterface>
 801cde8:	1e03      	subs	r3, r0, #0
 801cdea:	d001      	beq.n	801cdf0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cdec:	f7eb fa94 	bl	8008318 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cdf0:	4b06      	ldr	r3, [pc, #24]	@ (801ce0c <MX_USB_DEVICE_Init+0x5c>)
 801cdf2:	0018      	movs	r0, r3
 801cdf4:	f7fe fe21 	bl	801ba3a <USBD_Start>
 801cdf8:	1e03      	subs	r3, r0, #0
 801cdfa:	d001      	beq.n	801ce00 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cdfc:	f7eb fa8c 	bl	8008318 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ce00:	46c0      	nop			@ (mov r8, r8)
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}
 801ce06:	46c0      	nop			@ (mov r8, r8)
 801ce08:	20000208 	.word	0x20000208
 801ce0c:	200023e8 	.word	0x200023e8
 801ce10:	200000f4 	.word	0x200000f4
 801ce14:	200001f8 	.word	0x200001f8

0801ce18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ce1c:	4907      	ldr	r1, [pc, #28]	@ (801ce3c <CDC_Init_FS+0x24>)
 801ce1e:	4b08      	ldr	r3, [pc, #32]	@ (801ce40 <CDC_Init_FS+0x28>)
 801ce20:	2200      	movs	r2, #0
 801ce22:	0018      	movs	r0, r3
 801ce24:	f7fe fd23 	bl	801b86e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ce28:	4a06      	ldr	r2, [pc, #24]	@ (801ce44 <CDC_Init_FS+0x2c>)
 801ce2a:	4b05      	ldr	r3, [pc, #20]	@ (801ce40 <CDC_Init_FS+0x28>)
 801ce2c:	0011      	movs	r1, r2
 801ce2e:	0018      	movs	r0, r3
 801ce30:	f7fe fd39 	bl	801b8a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ce34:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ce36:	0018      	movs	r0, r3
 801ce38:	46bd      	mov	sp, r7
 801ce3a:	bd80      	pop	{r7, pc}
 801ce3c:	20002b6c 	.word	0x20002b6c
 801ce40:	200023e8 	.word	0x200023e8
 801ce44:	2000276c 	.word	0x2000276c

0801ce48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ce4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ce4e:	0018      	movs	r0, r3
 801ce50:	46bd      	mov	sp, r7
 801ce52:	bd80      	pop	{r7, pc}

0801ce54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6039      	str	r1, [r7, #0]
 801ce5c:	0011      	movs	r1, r2
 801ce5e:	1dfb      	adds	r3, r7, #7
 801ce60:	1c02      	adds	r2, r0, #0
 801ce62:	701a      	strb	r2, [r3, #0]
 801ce64:	1d3b      	adds	r3, r7, #4
 801ce66:	1c0a      	adds	r2, r1, #0
 801ce68:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ce6a:	1dfb      	adds	r3, r7, #7
 801ce6c:	781b      	ldrb	r3, [r3, #0]
 801ce6e:	2b23      	cmp	r3, #35	@ 0x23
 801ce70:	d804      	bhi.n	801ce7c <CDC_Control_FS+0x28>
 801ce72:	009a      	lsls	r2, r3, #2
 801ce74:	4b04      	ldr	r3, [pc, #16]	@ (801ce88 <CDC_Control_FS+0x34>)
 801ce76:	18d3      	adds	r3, r2, r3
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ce7c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801ce7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ce80:	0018      	movs	r0, r3
 801ce82:	46bd      	mov	sp, r7
 801ce84:	b002      	add	sp, #8
 801ce86:	bd80      	pop	{r7, pc}
 801ce88:	08025904 	.word	0x08025904

0801ce8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b082      	sub	sp, #8
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
 801ce94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801ce96:	4b12      	ldr	r3, [pc, #72]	@ (801cee0 <CDC_Receive_FS+0x54>)
 801ce98:	781b      	ldrb	r3, [r3, #0]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d013      	beq.n	801cec6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801ce9e:	683b      	ldr	r3, [r7, #0]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	b29a      	uxth	r2, r3
 801cea4:	2301      	movs	r3, #1
 801cea6:	425b      	negs	r3, r3
 801cea8:	6879      	ldr	r1, [r7, #4]
 801ceaa:	480e      	ldr	r0, [pc, #56]	@ (801cee4 <CDC_Receive_FS+0x58>)
 801ceac:	f7fa fa46 	bl	801733c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ceb0:	687a      	ldr	r2, [r7, #4]
 801ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (801cee8 <CDC_Receive_FS+0x5c>)
 801ceb4:	0011      	movs	r1, r2
 801ceb6:	0018      	movs	r0, r3
 801ceb8:	f7fe fcf5 	bl	801b8a6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cebc:	4b0a      	ldr	r3, [pc, #40]	@ (801cee8 <CDC_Receive_FS+0x5c>)
 801cebe:	0018      	movs	r0, r3
 801cec0:	f7fe fd3c 	bl	801b93c <USBD_CDC_ReceivePacket>
 801cec4:	e006      	b.n	801ced4 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801cec6:	683b      	ldr	r3, [r7, #0]
 801cec8:	681a      	ldr	r2, [r3, #0]
 801ceca:	4b08      	ldr	r3, [pc, #32]	@ (801ceec <CDC_Receive_FS+0x60>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	18d2      	adds	r2, r2, r3
 801ced0:	4b06      	ldr	r3, [pc, #24]	@ (801ceec <CDC_Receive_FS+0x60>)
 801ced2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801ced4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ced6:	0018      	movs	r0, r3
 801ced8:	46bd      	mov	sp, r7
 801ceda:	b002      	add	sp, #8
 801cedc:	bd80      	pop	{r7, pc}
 801cede:	46c0      	nop			@ (mov r8, r8)
 801cee0:	200026ac 	.word	0x200026ac
 801cee4:	200026b0 	.word	0x200026b0
 801cee8:	200023e8 	.word	0x200023e8
 801ceec:	20002768 	.word	0x20002768

0801cef0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cef0:	b5b0      	push	{r4, r5, r7, lr}
 801cef2:	b084      	sub	sp, #16
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
 801cef8:	000a      	movs	r2, r1
 801cefa:	1cbb      	adds	r3, r7, #2
 801cefc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801cefe:	230f      	movs	r3, #15
 801cf00:	18fb      	adds	r3, r7, r3
 801cf02:	2200      	movs	r2, #0
 801cf04:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cf06:	4a11      	ldr	r2, [pc, #68]	@ (801cf4c <CDC_Transmit_FS+0x5c>)
 801cf08:	23ae      	movs	r3, #174	@ 0xae
 801cf0a:	009b      	lsls	r3, r3, #2
 801cf0c:	58d3      	ldr	r3, [r2, r3]
 801cf0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cf10:	68ba      	ldr	r2, [r7, #8]
 801cf12:	2385      	movs	r3, #133	@ 0x85
 801cf14:	009b      	lsls	r3, r3, #2
 801cf16:	58d3      	ldr	r3, [r2, r3]
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d001      	beq.n	801cf20 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801cf1c:	2301      	movs	r3, #1
 801cf1e:	e010      	b.n	801cf42 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cf20:	1cbb      	adds	r3, r7, #2
 801cf22:	881a      	ldrh	r2, [r3, #0]
 801cf24:	6879      	ldr	r1, [r7, #4]
 801cf26:	4b09      	ldr	r3, [pc, #36]	@ (801cf4c <CDC_Transmit_FS+0x5c>)
 801cf28:	0018      	movs	r0, r3
 801cf2a:	f7fe fca0 	bl	801b86e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cf2e:	250f      	movs	r5, #15
 801cf30:	197c      	adds	r4, r7, r5
 801cf32:	4b06      	ldr	r3, [pc, #24]	@ (801cf4c <CDC_Transmit_FS+0x5c>)
 801cf34:	0018      	movs	r0, r3
 801cf36:	f7fe fcca 	bl	801b8ce <USBD_CDC_TransmitPacket>
 801cf3a:	0003      	movs	r3, r0
 801cf3c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cf3e:	197b      	adds	r3, r7, r5
 801cf40:	781b      	ldrb	r3, [r3, #0]
}
 801cf42:	0018      	movs	r0, r3
 801cf44:	46bd      	mov	sp, r7
 801cf46:	b004      	add	sp, #16
 801cf48:	bdb0      	pop	{r4, r5, r7, pc}
 801cf4a:	46c0      	nop			@ (mov r8, r8)
 801cf4c:	200023e8 	.word	0x200023e8

0801cf50 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cf50:	b580      	push	{r7, lr}
 801cf52:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cf54:	4b02      	ldr	r3, [pc, #8]	@ (801cf60 <EnableESPProg+0x10>)
 801cf56:	2201      	movs	r2, #1
 801cf58:	701a      	strb	r2, [r3, #0]
}
 801cf5a:	46c0      	nop			@ (mov r8, r8)
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	bd80      	pop	{r7, pc}
 801cf60:	200026ac 	.word	0x200026ac

0801cf64 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cf64:	b580      	push	{r7, lr}
 801cf66:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cf68:	4b01      	ldr	r3, [pc, #4]	@ (801cf70 <GetUsbRxPointer+0xc>)
}
 801cf6a:	0018      	movs	r0, r3
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	bd80      	pop	{r7, pc}
 801cf70:	2000276c 	.word	0x2000276c

0801cf74 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cf74:	b580      	push	{r7, lr}
 801cf76:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cf78:	4b07      	ldr	r3, [pc, #28]	@ (801cf98 <ResetUsbRxDataSize+0x24>)
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cf7e:	4a07      	ldr	r2, [pc, #28]	@ (801cf9c <ResetUsbRxDataSize+0x28>)
 801cf80:	4b07      	ldr	r3, [pc, #28]	@ (801cfa0 <ResetUsbRxDataSize+0x2c>)
 801cf82:	0011      	movs	r1, r2
 801cf84:	0018      	movs	r0, r3
 801cf86:	f7fe fc8e 	bl	801b8a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cf8a:	4b05      	ldr	r3, [pc, #20]	@ (801cfa0 <ResetUsbRxDataSize+0x2c>)
 801cf8c:	0018      	movs	r0, r3
 801cf8e:	f7fe fcd5 	bl	801b93c <USBD_CDC_ReceivePacket>
}
 801cf92:	46c0      	nop			@ (mov r8, r8)
 801cf94:	46bd      	mov	sp, r7
 801cf96:	bd80      	pop	{r7, pc}
 801cf98:	20002768 	.word	0x20002768
 801cf9c:	2000276c 	.word	0x2000276c
 801cfa0:	200023e8 	.word	0x200023e8

0801cfa4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cfa8:	4b02      	ldr	r3, [pc, #8]	@ (801cfb4 <GetUsbRxDataSize+0x10>)
 801cfaa:	681b      	ldr	r3, [r3, #0]
}
 801cfac:	0018      	movs	r0, r3
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	bd80      	pop	{r7, pc}
 801cfb2:	46c0      	nop			@ (mov r8, r8)
 801cfb4:	20002768 	.word	0x20002768

0801cfb8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801cfb8:	b580      	push	{r7, lr}
 801cfba:	b082      	sub	sp, #8
 801cfbc:	af00      	add	r7, sp, #0
 801cfbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801cfc0:	687a      	ldr	r2, [r7, #4]
 801cfc2:	4b07      	ldr	r3, [pc, #28]	@ (801cfe0 <GetUsbRxNextChunk+0x28>)
 801cfc4:	18d2      	adds	r2, r2, r3
 801cfc6:	4b07      	ldr	r3, [pc, #28]	@ (801cfe4 <GetUsbRxNextChunk+0x2c>)
 801cfc8:	0011      	movs	r1, r2
 801cfca:	0018      	movs	r0, r3
 801cfcc:	f7fe fc6b 	bl	801b8a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cfd0:	4b04      	ldr	r3, [pc, #16]	@ (801cfe4 <GetUsbRxNextChunk+0x2c>)
 801cfd2:	0018      	movs	r0, r3
 801cfd4:	f7fe fcb2 	bl	801b93c <USBD_CDC_ReceivePacket>
}
 801cfd8:	46c0      	nop			@ (mov r8, r8)
 801cfda:	46bd      	mov	sp, r7
 801cfdc:	b002      	add	sp, #8
 801cfde:	bd80      	pop	{r7, pc}
 801cfe0:	2000276c 	.word	0x2000276c
 801cfe4:	200023e8 	.word	0x200023e8

0801cfe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	0002      	movs	r2, r0
 801cff0:	6039      	str	r1, [r7, #0]
 801cff2:	1dfb      	adds	r3, r7, #7
 801cff4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	2212      	movs	r2, #18
 801cffa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cffc:	4b02      	ldr	r3, [pc, #8]	@ (801d008 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cffe:	0018      	movs	r0, r3
 801d000:	46bd      	mov	sp, r7
 801d002:	b002      	add	sp, #8
 801d004:	bd80      	pop	{r7, pc}
 801d006:	46c0      	nop			@ (mov r8, r8)
 801d008:	20000224 	.word	0x20000224

0801d00c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
 801d012:	0002      	movs	r2, r0
 801d014:	6039      	str	r1, [r7, #0]
 801d016:	1dfb      	adds	r3, r7, #7
 801d018:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	2204      	movs	r2, #4
 801d01e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d020:	4b02      	ldr	r3, [pc, #8]	@ (801d02c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d022:	0018      	movs	r0, r3
 801d024:	46bd      	mov	sp, r7
 801d026:	b002      	add	sp, #8
 801d028:	bd80      	pop	{r7, pc}
 801d02a:	46c0      	nop			@ (mov r8, r8)
 801d02c:	20000238 	.word	0x20000238

0801d030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d030:	b580      	push	{r7, lr}
 801d032:	b082      	sub	sp, #8
 801d034:	af00      	add	r7, sp, #0
 801d036:	0002      	movs	r2, r0
 801d038:	6039      	str	r1, [r7, #0]
 801d03a:	1dfb      	adds	r3, r7, #7
 801d03c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d03e:	1dfb      	adds	r3, r7, #7
 801d040:	781b      	ldrb	r3, [r3, #0]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d106      	bne.n	801d054 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d046:	683a      	ldr	r2, [r7, #0]
 801d048:	4908      	ldr	r1, [pc, #32]	@ (801d06c <USBD_FS_ProductStrDescriptor+0x3c>)
 801d04a:	4b09      	ldr	r3, [pc, #36]	@ (801d070 <USBD_FS_ProductStrDescriptor+0x40>)
 801d04c:	0018      	movs	r0, r3
 801d04e:	f7ff fdb1 	bl	801cbb4 <USBD_GetString>
 801d052:	e005      	b.n	801d060 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d054:	683a      	ldr	r2, [r7, #0]
 801d056:	4905      	ldr	r1, [pc, #20]	@ (801d06c <USBD_FS_ProductStrDescriptor+0x3c>)
 801d058:	4b05      	ldr	r3, [pc, #20]	@ (801d070 <USBD_FS_ProductStrDescriptor+0x40>)
 801d05a:	0018      	movs	r0, r3
 801d05c:	f7ff fdaa 	bl	801cbb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d060:	4b02      	ldr	r3, [pc, #8]	@ (801d06c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d062:	0018      	movs	r0, r3
 801d064:	46bd      	mov	sp, r7
 801d066:	b002      	add	sp, #8
 801d068:	bd80      	pop	{r7, pc}
 801d06a:	46c0      	nop			@ (mov r8, r8)
 801d06c:	20002f6c 	.word	0x20002f6c
 801d070:	08025390 	.word	0x08025390

0801d074 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d074:	b580      	push	{r7, lr}
 801d076:	b082      	sub	sp, #8
 801d078:	af00      	add	r7, sp, #0
 801d07a:	0002      	movs	r2, r0
 801d07c:	6039      	str	r1, [r7, #0]
 801d07e:	1dfb      	adds	r3, r7, #7
 801d080:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d082:	683a      	ldr	r2, [r7, #0]
 801d084:	4904      	ldr	r1, [pc, #16]	@ (801d098 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d086:	4b05      	ldr	r3, [pc, #20]	@ (801d09c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d088:	0018      	movs	r0, r3
 801d08a:	f7ff fd93 	bl	801cbb4 <USBD_GetString>
  return USBD_StrDesc;
 801d08e:	4b02      	ldr	r3, [pc, #8]	@ (801d098 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d090:	0018      	movs	r0, r3
 801d092:	46bd      	mov	sp, r7
 801d094:	b002      	add	sp, #8
 801d096:	bd80      	pop	{r7, pc}
 801d098:	20002f6c 	.word	0x20002f6c
 801d09c:	080253a8 	.word	0x080253a8

0801d0a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b082      	sub	sp, #8
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	0002      	movs	r2, r0
 801d0a8:	6039      	str	r1, [r7, #0]
 801d0aa:	1dfb      	adds	r3, r7, #7
 801d0ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d0ae:	683b      	ldr	r3, [r7, #0]
 801d0b0:	221a      	movs	r2, #26
 801d0b2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d0b4:	f000 f84c 	bl	801d150 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d0b8:	4b02      	ldr	r3, [pc, #8]	@ (801d0c4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d0ba:	0018      	movs	r0, r3
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	b002      	add	sp, #8
 801d0c0:	bd80      	pop	{r7, pc}
 801d0c2:	46c0      	nop			@ (mov r8, r8)
 801d0c4:	2000023c 	.word	0x2000023c

0801d0c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b082      	sub	sp, #8
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	0002      	movs	r2, r0
 801d0d0:	6039      	str	r1, [r7, #0]
 801d0d2:	1dfb      	adds	r3, r7, #7
 801d0d4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d0d6:	1dfb      	adds	r3, r7, #7
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d106      	bne.n	801d0ec <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d0de:	683a      	ldr	r2, [r7, #0]
 801d0e0:	4908      	ldr	r1, [pc, #32]	@ (801d104 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d0e2:	4b09      	ldr	r3, [pc, #36]	@ (801d108 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d0e4:	0018      	movs	r0, r3
 801d0e6:	f7ff fd65 	bl	801cbb4 <USBD_GetString>
 801d0ea:	e005      	b.n	801d0f8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d0ec:	683a      	ldr	r2, [r7, #0]
 801d0ee:	4905      	ldr	r1, [pc, #20]	@ (801d104 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d0f0:	4b05      	ldr	r3, [pc, #20]	@ (801d108 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d0f2:	0018      	movs	r0, r3
 801d0f4:	f7ff fd5e 	bl	801cbb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d0f8:	4b02      	ldr	r3, [pc, #8]	@ (801d104 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d0fa:	0018      	movs	r0, r3
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	b002      	add	sp, #8
 801d100:	bd80      	pop	{r7, pc}
 801d102:	46c0      	nop			@ (mov r8, r8)
 801d104:	20002f6c 	.word	0x20002f6c
 801d108:	080253bc 	.word	0x080253bc

0801d10c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b082      	sub	sp, #8
 801d110:	af00      	add	r7, sp, #0
 801d112:	0002      	movs	r2, r0
 801d114:	6039      	str	r1, [r7, #0]
 801d116:	1dfb      	adds	r3, r7, #7
 801d118:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d11a:	1dfb      	adds	r3, r7, #7
 801d11c:	781b      	ldrb	r3, [r3, #0]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d106      	bne.n	801d130 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d122:	683a      	ldr	r2, [r7, #0]
 801d124:	4908      	ldr	r1, [pc, #32]	@ (801d148 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d126:	4b09      	ldr	r3, [pc, #36]	@ (801d14c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d128:	0018      	movs	r0, r3
 801d12a:	f7ff fd43 	bl	801cbb4 <USBD_GetString>
 801d12e:	e005      	b.n	801d13c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d130:	683a      	ldr	r2, [r7, #0]
 801d132:	4905      	ldr	r1, [pc, #20]	@ (801d148 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d134:	4b05      	ldr	r3, [pc, #20]	@ (801d14c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d136:	0018      	movs	r0, r3
 801d138:	f7ff fd3c 	bl	801cbb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d13c:	4b02      	ldr	r3, [pc, #8]	@ (801d148 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d13e:	0018      	movs	r0, r3
 801d140:	46bd      	mov	sp, r7
 801d142:	b002      	add	sp, #8
 801d144:	bd80      	pop	{r7, pc}
 801d146:	46c0      	nop			@ (mov r8, r8)
 801d148:	20002f6c 	.word	0x20002f6c
 801d14c:	080253c8 	.word	0x080253c8

0801d150 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b084      	sub	sp, #16
 801d154:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d156:	4b10      	ldr	r3, [pc, #64]	@ (801d198 <Get_SerialNum+0x48>)
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d15c:	4b0f      	ldr	r3, [pc, #60]	@ (801d19c <Get_SerialNum+0x4c>)
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d162:	4b0f      	ldr	r3, [pc, #60]	@ (801d1a0 <Get_SerialNum+0x50>)
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d168:	68fa      	ldr	r2, [r7, #12]
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	18d3      	adds	r3, r2, r3
 801d16e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d00b      	beq.n	801d18e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d176:	490b      	ldr	r1, [pc, #44]	@ (801d1a4 <Get_SerialNum+0x54>)
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	2208      	movs	r2, #8
 801d17c:	0018      	movs	r0, r3
 801d17e:	f000 f815 	bl	801d1ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d182:	4909      	ldr	r1, [pc, #36]	@ (801d1a8 <Get_SerialNum+0x58>)
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	2204      	movs	r2, #4
 801d188:	0018      	movs	r0, r3
 801d18a:	f000 f80f 	bl	801d1ac <IntToUnicode>
  }
}
 801d18e:	46c0      	nop			@ (mov r8, r8)
 801d190:	46bd      	mov	sp, r7
 801d192:	b004      	add	sp, #16
 801d194:	bd80      	pop	{r7, pc}
 801d196:	46c0      	nop			@ (mov r8, r8)
 801d198:	1ff80050 	.word	0x1ff80050
 801d19c:	1ff80054 	.word	0x1ff80054
 801d1a0:	1ff80058 	.word	0x1ff80058
 801d1a4:	2000023e 	.word	0x2000023e
 801d1a8:	2000024e 	.word	0x2000024e

0801d1ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b086      	sub	sp, #24
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	60f8      	str	r0, [r7, #12]
 801d1b4:	60b9      	str	r1, [r7, #8]
 801d1b6:	1dfb      	adds	r3, r7, #7
 801d1b8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d1ba:	2117      	movs	r1, #23
 801d1bc:	187b      	adds	r3, r7, r1
 801d1be:	2200      	movs	r2, #0
 801d1c0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d1c2:	187b      	adds	r3, r7, r1
 801d1c4:	2200      	movs	r2, #0
 801d1c6:	701a      	strb	r2, [r3, #0]
 801d1c8:	e02f      	b.n	801d22a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	0f1b      	lsrs	r3, r3, #28
 801d1ce:	2b09      	cmp	r3, #9
 801d1d0:	d80d      	bhi.n	801d1ee <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	0f1b      	lsrs	r3, r3, #28
 801d1d6:	b2da      	uxtb	r2, r3
 801d1d8:	2317      	movs	r3, #23
 801d1da:	18fb      	adds	r3, r7, r3
 801d1dc:	781b      	ldrb	r3, [r3, #0]
 801d1de:	005b      	lsls	r3, r3, #1
 801d1e0:	0019      	movs	r1, r3
 801d1e2:	68bb      	ldr	r3, [r7, #8]
 801d1e4:	185b      	adds	r3, r3, r1
 801d1e6:	3230      	adds	r2, #48	@ 0x30
 801d1e8:	b2d2      	uxtb	r2, r2
 801d1ea:	701a      	strb	r2, [r3, #0]
 801d1ec:	e00c      	b.n	801d208 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	0f1b      	lsrs	r3, r3, #28
 801d1f2:	b2da      	uxtb	r2, r3
 801d1f4:	2317      	movs	r3, #23
 801d1f6:	18fb      	adds	r3, r7, r3
 801d1f8:	781b      	ldrb	r3, [r3, #0]
 801d1fa:	005b      	lsls	r3, r3, #1
 801d1fc:	0019      	movs	r1, r3
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	185b      	adds	r3, r3, r1
 801d202:	3237      	adds	r2, #55	@ 0x37
 801d204:	b2d2      	uxtb	r2, r2
 801d206:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	011b      	lsls	r3, r3, #4
 801d20c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d20e:	2117      	movs	r1, #23
 801d210:	187b      	adds	r3, r7, r1
 801d212:	781b      	ldrb	r3, [r3, #0]
 801d214:	005b      	lsls	r3, r3, #1
 801d216:	3301      	adds	r3, #1
 801d218:	68ba      	ldr	r2, [r7, #8]
 801d21a:	18d3      	adds	r3, r2, r3
 801d21c:	2200      	movs	r2, #0
 801d21e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d220:	187b      	adds	r3, r7, r1
 801d222:	781a      	ldrb	r2, [r3, #0]
 801d224:	187b      	adds	r3, r7, r1
 801d226:	3201      	adds	r2, #1
 801d228:	701a      	strb	r2, [r3, #0]
 801d22a:	2317      	movs	r3, #23
 801d22c:	18fa      	adds	r2, r7, r3
 801d22e:	1dfb      	adds	r3, r7, #7
 801d230:	7812      	ldrb	r2, [r2, #0]
 801d232:	781b      	ldrb	r3, [r3, #0]
 801d234:	429a      	cmp	r2, r3
 801d236:	d3c8      	bcc.n	801d1ca <IntToUnicode+0x1e>
  }
}
 801d238:	46c0      	nop			@ (mov r8, r8)
 801d23a:	46c0      	nop			@ (mov r8, r8)
 801d23c:	46bd      	mov	sp, r7
 801d23e:	b006      	add	sp, #24
 801d240:	bd80      	pop	{r7, pc}
	...

0801d244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b082      	sub	sp, #8
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	4a0a      	ldr	r2, [pc, #40]	@ (801d27c <HAL_PCD_MspInit+0x38>)
 801d252:	4293      	cmp	r3, r2
 801d254:	d10e      	bne.n	801d274 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d256:	4b0a      	ldr	r3, [pc, #40]	@ (801d280 <HAL_PCD_MspInit+0x3c>)
 801d258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d25a:	4b09      	ldr	r3, [pc, #36]	@ (801d280 <HAL_PCD_MspInit+0x3c>)
 801d25c:	2180      	movs	r1, #128	@ 0x80
 801d25e:	0409      	lsls	r1, r1, #16
 801d260:	430a      	orrs	r2, r1
 801d262:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d264:	2200      	movs	r2, #0
 801d266:	2100      	movs	r1, #0
 801d268:	201f      	movs	r0, #31
 801d26a:	f7f2 fadf 	bl	800f82c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d26e:	201f      	movs	r0, #31
 801d270:	f7f2 faf1 	bl	800f856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d274:	46c0      	nop			@ (mov r8, r8)
 801d276:	46bd      	mov	sp, r7
 801d278:	b002      	add	sp, #8
 801d27a:	bd80      	pop	{r7, pc}
 801d27c:	40005c00 	.word	0x40005c00
 801d280:	40021000 	.word	0x40021000

0801d284 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d284:	b580      	push	{r7, lr}
 801d286:	b082      	sub	sp, #8
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d28c:	687a      	ldr	r2, [r7, #4]
 801d28e:	23bc      	movs	r3, #188	@ 0xbc
 801d290:	009b      	lsls	r3, r3, #2
 801d292:	58d2      	ldr	r2, [r2, r3]
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	21ac      	movs	r1, #172	@ 0xac
 801d298:	0089      	lsls	r1, r1, #2
 801d29a:	468c      	mov	ip, r1
 801d29c:	4463      	add	r3, ip
 801d29e:	0019      	movs	r1, r3
 801d2a0:	0010      	movs	r0, r2
 801d2a2:	f7fe fc1d 	bl	801bae0 <USBD_LL_SetupStage>
}
 801d2a6:	46c0      	nop			@ (mov r8, r8)
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	b002      	add	sp, #8
 801d2ac:	bd80      	pop	{r7, pc}

0801d2ae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ae:	b590      	push	{r4, r7, lr}
 801d2b0:	b083      	sub	sp, #12
 801d2b2:	af00      	add	r7, sp, #0
 801d2b4:	6078      	str	r0, [r7, #4]
 801d2b6:	000a      	movs	r2, r1
 801d2b8:	1cfb      	adds	r3, r7, #3
 801d2ba:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d2bc:	687a      	ldr	r2, [r7, #4]
 801d2be:	23bc      	movs	r3, #188	@ 0xbc
 801d2c0:	009b      	lsls	r3, r3, #2
 801d2c2:	58d4      	ldr	r4, [r2, r3]
 801d2c4:	1cfb      	adds	r3, r7, #3
 801d2c6:	781a      	ldrb	r2, [r3, #0]
 801d2c8:	6878      	ldr	r0, [r7, #4]
 801d2ca:	23be      	movs	r3, #190	@ 0xbe
 801d2cc:	0059      	lsls	r1, r3, #1
 801d2ce:	0013      	movs	r3, r2
 801d2d0:	009b      	lsls	r3, r3, #2
 801d2d2:	189b      	adds	r3, r3, r2
 801d2d4:	00db      	lsls	r3, r3, #3
 801d2d6:	18c3      	adds	r3, r0, r3
 801d2d8:	185b      	adds	r3, r3, r1
 801d2da:	681a      	ldr	r2, [r3, #0]
 801d2dc:	1cfb      	adds	r3, r7, #3
 801d2de:	781b      	ldrb	r3, [r3, #0]
 801d2e0:	0019      	movs	r1, r3
 801d2e2:	0020      	movs	r0, r4
 801d2e4:	f7fe fc5a 	bl	801bb9c <USBD_LL_DataOutStage>
}
 801d2e8:	46c0      	nop			@ (mov r8, r8)
 801d2ea:	46bd      	mov	sp, r7
 801d2ec:	b003      	add	sp, #12
 801d2ee:	bd90      	pop	{r4, r7, pc}

0801d2f0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2f0:	b580      	push	{r7, lr}
 801d2f2:	b082      	sub	sp, #8
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	6078      	str	r0, [r7, #4]
 801d2f8:	000a      	movs	r2, r1
 801d2fa:	1cfb      	adds	r3, r7, #3
 801d2fc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d2fe:	687a      	ldr	r2, [r7, #4]
 801d300:	23bc      	movs	r3, #188	@ 0xbc
 801d302:	009b      	lsls	r3, r3, #2
 801d304:	58d0      	ldr	r0, [r2, r3]
 801d306:	1cfb      	adds	r3, r7, #3
 801d308:	781a      	ldrb	r2, [r3, #0]
 801d30a:	6879      	ldr	r1, [r7, #4]
 801d30c:	0013      	movs	r3, r2
 801d30e:	009b      	lsls	r3, r3, #2
 801d310:	189b      	adds	r3, r3, r2
 801d312:	00db      	lsls	r3, r3, #3
 801d314:	18cb      	adds	r3, r1, r3
 801d316:	333c      	adds	r3, #60	@ 0x3c
 801d318:	681a      	ldr	r2, [r3, #0]
 801d31a:	1cfb      	adds	r3, r7, #3
 801d31c:	781b      	ldrb	r3, [r3, #0]
 801d31e:	0019      	movs	r1, r3
 801d320:	f7fe fcbe 	bl	801bca0 <USBD_LL_DataInStage>
}
 801d324:	46c0      	nop			@ (mov r8, r8)
 801d326:	46bd      	mov	sp, r7
 801d328:	b002      	add	sp, #8
 801d32a:	bd80      	pop	{r7, pc}

0801d32c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b082      	sub	sp, #8
 801d330:	af00      	add	r7, sp, #0
 801d332:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d334:	687a      	ldr	r2, [r7, #4]
 801d336:	23bc      	movs	r3, #188	@ 0xbc
 801d338:	009b      	lsls	r3, r3, #2
 801d33a:	58d3      	ldr	r3, [r2, r3]
 801d33c:	0018      	movs	r0, r3
 801d33e:	f7fe fdf5 	bl	801bf2c <USBD_LL_SOF>
}
 801d342:	46c0      	nop			@ (mov r8, r8)
 801d344:	46bd      	mov	sp, r7
 801d346:	b002      	add	sp, #8
 801d348:	bd80      	pop	{r7, pc}

0801d34a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d34a:	b580      	push	{r7, lr}
 801d34c:	b084      	sub	sp, #16
 801d34e:	af00      	add	r7, sp, #0
 801d350:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d352:	230f      	movs	r3, #15
 801d354:	18fb      	adds	r3, r7, r3
 801d356:	2201      	movs	r2, #1
 801d358:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	689b      	ldr	r3, [r3, #8]
 801d35e:	2b02      	cmp	r3, #2
 801d360:	d001      	beq.n	801d366 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d362:	f7ea ffd9 	bl	8008318 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d366:	687a      	ldr	r2, [r7, #4]
 801d368:	23bc      	movs	r3, #188	@ 0xbc
 801d36a:	009b      	lsls	r3, r3, #2
 801d36c:	58d2      	ldr	r2, [r2, r3]
 801d36e:	230f      	movs	r3, #15
 801d370:	18fb      	adds	r3, r7, r3
 801d372:	781b      	ldrb	r3, [r3, #0]
 801d374:	0019      	movs	r1, r3
 801d376:	0010      	movs	r0, r2
 801d378:	f7fe fd97 	bl	801beaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d37c:	687a      	ldr	r2, [r7, #4]
 801d37e:	23bc      	movs	r3, #188	@ 0xbc
 801d380:	009b      	lsls	r3, r3, #2
 801d382:	58d3      	ldr	r3, [r2, r3]
 801d384:	0018      	movs	r0, r3
 801d386:	f7fe fd48 	bl	801be1a <USBD_LL_Reset>
}
 801d38a:	46c0      	nop			@ (mov r8, r8)
 801d38c:	46bd      	mov	sp, r7
 801d38e:	b004      	add	sp, #16
 801d390:	bd80      	pop	{r7, pc}
	...

0801d394 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d394:	b580      	push	{r7, lr}
 801d396:	b082      	sub	sp, #8
 801d398:	af00      	add	r7, sp, #0
 801d39a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d39c:	687a      	ldr	r2, [r7, #4]
 801d39e:	23bc      	movs	r3, #188	@ 0xbc
 801d3a0:	009b      	lsls	r3, r3, #2
 801d3a2:	58d3      	ldr	r3, [r2, r3]
 801d3a4:	0018      	movs	r0, r3
 801d3a6:	f7fe fd91 	bl	801becc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	699b      	ldr	r3, [r3, #24]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d005      	beq.n	801d3be <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d3b2:	4b05      	ldr	r3, [pc, #20]	@ (801d3c8 <HAL_PCD_SuspendCallback+0x34>)
 801d3b4:	691a      	ldr	r2, [r3, #16]
 801d3b6:	4b04      	ldr	r3, [pc, #16]	@ (801d3c8 <HAL_PCD_SuspendCallback+0x34>)
 801d3b8:	2106      	movs	r1, #6
 801d3ba:	430a      	orrs	r2, r1
 801d3bc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d3be:	46c0      	nop			@ (mov r8, r8)
 801d3c0:	46bd      	mov	sp, r7
 801d3c2:	b002      	add	sp, #8
 801d3c4:	bd80      	pop	{r7, pc}
 801d3c6:	46c0      	nop			@ (mov r8, r8)
 801d3c8:	e000ed00 	.word	0xe000ed00

0801d3cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b082      	sub	sp, #8
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	699b      	ldr	r3, [r3, #24]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d007      	beq.n	801d3ec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d3dc:	4b09      	ldr	r3, [pc, #36]	@ (801d404 <HAL_PCD_ResumeCallback+0x38>)
 801d3de:	691a      	ldr	r2, [r3, #16]
 801d3e0:	4b08      	ldr	r3, [pc, #32]	@ (801d404 <HAL_PCD_ResumeCallback+0x38>)
 801d3e2:	2106      	movs	r1, #6
 801d3e4:	438a      	bics	r2, r1
 801d3e6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d3e8:	f000 fa44 	bl	801d874 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d3ec:	687a      	ldr	r2, [r7, #4]
 801d3ee:	23bc      	movs	r3, #188	@ 0xbc
 801d3f0:	009b      	lsls	r3, r3, #2
 801d3f2:	58d3      	ldr	r3, [r2, r3]
 801d3f4:	0018      	movs	r0, r3
 801d3f6:	f7fe fd81 	bl	801befc <USBD_LL_Resume>
}
 801d3fa:	46c0      	nop			@ (mov r8, r8)
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	b002      	add	sp, #8
 801d400:	bd80      	pop	{r7, pc}
 801d402:	46c0      	nop			@ (mov r8, r8)
 801d404:	e000ed00 	.word	0xe000ed00

0801d408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d408:	b580      	push	{r7, lr}
 801d40a:	b082      	sub	sp, #8
 801d40c:	af00      	add	r7, sp, #0
 801d40e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d410:	4a2d      	ldr	r2, [pc, #180]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d412:	23bc      	movs	r3, #188	@ 0xbc
 801d414:	009b      	lsls	r3, r3, #2
 801d416:	6879      	ldr	r1, [r7, #4]
 801d418:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d41a:	687a      	ldr	r2, [r7, #4]
 801d41c:	23b0      	movs	r3, #176	@ 0xb0
 801d41e:	009b      	lsls	r3, r3, #2
 801d420:	4929      	ldr	r1, [pc, #164]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d422:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d424:	4b28      	ldr	r3, [pc, #160]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d426:	4a29      	ldr	r2, [pc, #164]	@ (801d4cc <USBD_LL_Init+0xc4>)
 801d428:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d42a:	4b27      	ldr	r3, [pc, #156]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d42c:	2208      	movs	r2, #8
 801d42e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d430:	4b25      	ldr	r3, [pc, #148]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d432:	2202      	movs	r2, #2
 801d434:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d436:	4b24      	ldr	r3, [pc, #144]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d438:	2202      	movs	r2, #2
 801d43a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d43c:	4b22      	ldr	r3, [pc, #136]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d43e:	2200      	movs	r2, #0
 801d440:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d442:	4b21      	ldr	r3, [pc, #132]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d444:	2200      	movs	r2, #0
 801d446:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d448:	4b1f      	ldr	r3, [pc, #124]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d44a:	2200      	movs	r2, #0
 801d44c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d44e:	4b1e      	ldr	r3, [pc, #120]	@ (801d4c8 <USBD_LL_Init+0xc0>)
 801d450:	0018      	movs	r0, r3
 801d452:	f7f5 ff95 	bl	8013380 <HAL_PCD_Init>
 801d456:	1e03      	subs	r3, r0, #0
 801d458:	d001      	beq.n	801d45e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d45a:	f7ea ff5d 	bl	8008318 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d45e:	687a      	ldr	r2, [r7, #4]
 801d460:	23b0      	movs	r3, #176	@ 0xb0
 801d462:	009b      	lsls	r3, r3, #2
 801d464:	58d0      	ldr	r0, [r2, r3]
 801d466:	2318      	movs	r3, #24
 801d468:	2200      	movs	r2, #0
 801d46a:	2100      	movs	r1, #0
 801d46c:	f7f7 fd56 	bl	8014f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d470:	687a      	ldr	r2, [r7, #4]
 801d472:	23b0      	movs	r3, #176	@ 0xb0
 801d474:	009b      	lsls	r3, r3, #2
 801d476:	58d0      	ldr	r0, [r2, r3]
 801d478:	2358      	movs	r3, #88	@ 0x58
 801d47a:	2200      	movs	r2, #0
 801d47c:	2180      	movs	r1, #128	@ 0x80
 801d47e:	f7f7 fd4d 	bl	8014f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d482:	687a      	ldr	r2, [r7, #4]
 801d484:	23b0      	movs	r3, #176	@ 0xb0
 801d486:	009b      	lsls	r3, r3, #2
 801d488:	58d0      	ldr	r0, [r2, r3]
 801d48a:	23c0      	movs	r3, #192	@ 0xc0
 801d48c:	2200      	movs	r2, #0
 801d48e:	2181      	movs	r1, #129	@ 0x81
 801d490:	f7f7 fd44 	bl	8014f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d494:	687a      	ldr	r2, [r7, #4]
 801d496:	23b0      	movs	r3, #176	@ 0xb0
 801d498:	009b      	lsls	r3, r3, #2
 801d49a:	58d0      	ldr	r0, [r2, r3]
 801d49c:	2388      	movs	r3, #136	@ 0x88
 801d49e:	005b      	lsls	r3, r3, #1
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	2101      	movs	r1, #1
 801d4a4:	f7f7 fd3a 	bl	8014f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d4a8:	687a      	ldr	r2, [r7, #4]
 801d4aa:	23b0      	movs	r3, #176	@ 0xb0
 801d4ac:	009b      	lsls	r3, r3, #2
 801d4ae:	58d0      	ldr	r0, [r2, r3]
 801d4b0:	2380      	movs	r3, #128	@ 0x80
 801d4b2:	005b      	lsls	r3, r3, #1
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	2182      	movs	r1, #130	@ 0x82
 801d4b8:	f7f7 fd30 	bl	8014f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d4bc:	2300      	movs	r3, #0
}
 801d4be:	0018      	movs	r0, r3
 801d4c0:	46bd      	mov	sp, r7
 801d4c2:	b002      	add	sp, #8
 801d4c4:	bd80      	pop	{r7, pc}
 801d4c6:	46c0      	nop			@ (mov r8, r8)
 801d4c8:	2000316c 	.word	0x2000316c
 801d4cc:	40005c00 	.word	0x40005c00

0801d4d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4d2:	b085      	sub	sp, #20
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4d8:	210f      	movs	r1, #15
 801d4da:	187b      	adds	r3, r7, r1
 801d4dc:	2200      	movs	r2, #0
 801d4de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4e0:	260e      	movs	r6, #14
 801d4e2:	19bb      	adds	r3, r7, r6
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d4e8:	687a      	ldr	r2, [r7, #4]
 801d4ea:	23b0      	movs	r3, #176	@ 0xb0
 801d4ec:	009b      	lsls	r3, r3, #2
 801d4ee:	58d3      	ldr	r3, [r2, r3]
 801d4f0:	000d      	movs	r5, r1
 801d4f2:	187c      	adds	r4, r7, r1
 801d4f4:	0018      	movs	r0, r3
 801d4f6:	f7f6 f843 	bl	8013580 <HAL_PCD_Start>
 801d4fa:	0003      	movs	r3, r0
 801d4fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4fe:	19bc      	adds	r4, r7, r6
 801d500:	197b      	adds	r3, r7, r5
 801d502:	781b      	ldrb	r3, [r3, #0]
 801d504:	0018      	movs	r0, r3
 801d506:	f000 f9bc 	bl	801d882 <USBD_Get_USB_Status>
 801d50a:	0003      	movs	r3, r0
 801d50c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d50e:	19bb      	adds	r3, r7, r6
 801d510:	781b      	ldrb	r3, [r3, #0]
}
 801d512:	0018      	movs	r0, r3
 801d514:	46bd      	mov	sp, r7
 801d516:	b005      	add	sp, #20
 801d518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d51a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d51a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d51c:	b085      	sub	sp, #20
 801d51e:	af00      	add	r7, sp, #0
 801d520:	6078      	str	r0, [r7, #4]
 801d522:	000c      	movs	r4, r1
 801d524:	0010      	movs	r0, r2
 801d526:	0019      	movs	r1, r3
 801d528:	1cfb      	adds	r3, r7, #3
 801d52a:	1c22      	adds	r2, r4, #0
 801d52c:	701a      	strb	r2, [r3, #0]
 801d52e:	1cbb      	adds	r3, r7, #2
 801d530:	1c02      	adds	r2, r0, #0
 801d532:	701a      	strb	r2, [r3, #0]
 801d534:	003b      	movs	r3, r7
 801d536:	1c0a      	adds	r2, r1, #0
 801d538:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d53a:	260f      	movs	r6, #15
 801d53c:	19bb      	adds	r3, r7, r6
 801d53e:	2200      	movs	r2, #0
 801d540:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d542:	250e      	movs	r5, #14
 801d544:	197b      	adds	r3, r7, r5
 801d546:	2200      	movs	r2, #0
 801d548:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d54a:	687a      	ldr	r2, [r7, #4]
 801d54c:	23b0      	movs	r3, #176	@ 0xb0
 801d54e:	009b      	lsls	r3, r3, #2
 801d550:	58d0      	ldr	r0, [r2, r3]
 801d552:	19bc      	adds	r4, r7, r6
 801d554:	1cbb      	adds	r3, r7, #2
 801d556:	781d      	ldrb	r5, [r3, #0]
 801d558:	003b      	movs	r3, r7
 801d55a:	881a      	ldrh	r2, [r3, #0]
 801d55c:	1cfb      	adds	r3, r7, #3
 801d55e:	7819      	ldrb	r1, [r3, #0]
 801d560:	002b      	movs	r3, r5
 801d562:	f7f6 f9a2 	bl	80138aa <HAL_PCD_EP_Open>
 801d566:	0003      	movs	r3, r0
 801d568:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d56a:	250e      	movs	r5, #14
 801d56c:	197c      	adds	r4, r7, r5
 801d56e:	19bb      	adds	r3, r7, r6
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	0018      	movs	r0, r3
 801d574:	f000 f985 	bl	801d882 <USBD_Get_USB_Status>
 801d578:	0003      	movs	r3, r0
 801d57a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d57c:	197b      	adds	r3, r7, r5
 801d57e:	781b      	ldrb	r3, [r3, #0]
}
 801d580:	0018      	movs	r0, r3
 801d582:	46bd      	mov	sp, r7
 801d584:	b005      	add	sp, #20
 801d586:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d588 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d58a:	b085      	sub	sp, #20
 801d58c:	af00      	add	r7, sp, #0
 801d58e:	6078      	str	r0, [r7, #4]
 801d590:	000a      	movs	r2, r1
 801d592:	1cfb      	adds	r3, r7, #3
 801d594:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d596:	210f      	movs	r1, #15
 801d598:	187b      	adds	r3, r7, r1
 801d59a:	2200      	movs	r2, #0
 801d59c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d59e:	260e      	movs	r6, #14
 801d5a0:	19bb      	adds	r3, r7, r6
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d5a6:	687a      	ldr	r2, [r7, #4]
 801d5a8:	23b0      	movs	r3, #176	@ 0xb0
 801d5aa:	009b      	lsls	r3, r3, #2
 801d5ac:	58d2      	ldr	r2, [r2, r3]
 801d5ae:	000d      	movs	r5, r1
 801d5b0:	187c      	adds	r4, r7, r1
 801d5b2:	1cfb      	adds	r3, r7, #3
 801d5b4:	781b      	ldrb	r3, [r3, #0]
 801d5b6:	0019      	movs	r1, r3
 801d5b8:	0010      	movs	r0, r2
 801d5ba:	f7f6 f9e5 	bl	8013988 <HAL_PCD_EP_Close>
 801d5be:	0003      	movs	r3, r0
 801d5c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5c2:	19bc      	adds	r4, r7, r6
 801d5c4:	197b      	adds	r3, r7, r5
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	0018      	movs	r0, r3
 801d5ca:	f000 f95a 	bl	801d882 <USBD_Get_USB_Status>
 801d5ce:	0003      	movs	r3, r0
 801d5d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d5d2:	19bb      	adds	r3, r7, r6
 801d5d4:	781b      	ldrb	r3, [r3, #0]
}
 801d5d6:	0018      	movs	r0, r3
 801d5d8:	46bd      	mov	sp, r7
 801d5da:	b005      	add	sp, #20
 801d5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5de <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5e0:	b085      	sub	sp, #20
 801d5e2:	af00      	add	r7, sp, #0
 801d5e4:	6078      	str	r0, [r7, #4]
 801d5e6:	000a      	movs	r2, r1
 801d5e8:	1cfb      	adds	r3, r7, #3
 801d5ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5ec:	210f      	movs	r1, #15
 801d5ee:	187b      	adds	r3, r7, r1
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5f4:	260e      	movs	r6, #14
 801d5f6:	19bb      	adds	r3, r7, r6
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d5fc:	687a      	ldr	r2, [r7, #4]
 801d5fe:	23b0      	movs	r3, #176	@ 0xb0
 801d600:	009b      	lsls	r3, r3, #2
 801d602:	58d2      	ldr	r2, [r2, r3]
 801d604:	000d      	movs	r5, r1
 801d606:	187c      	adds	r4, r7, r1
 801d608:	1cfb      	adds	r3, r7, #3
 801d60a:	781b      	ldrb	r3, [r3, #0]
 801d60c:	0019      	movs	r1, r3
 801d60e:	0010      	movs	r0, r2
 801d610:	f7f6 fa97 	bl	8013b42 <HAL_PCD_EP_SetStall>
 801d614:	0003      	movs	r3, r0
 801d616:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d618:	19bc      	adds	r4, r7, r6
 801d61a:	197b      	adds	r3, r7, r5
 801d61c:	781b      	ldrb	r3, [r3, #0]
 801d61e:	0018      	movs	r0, r3
 801d620:	f000 f92f 	bl	801d882 <USBD_Get_USB_Status>
 801d624:	0003      	movs	r3, r0
 801d626:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d628:	19bb      	adds	r3, r7, r6
 801d62a:	781b      	ldrb	r3, [r3, #0]
}
 801d62c:	0018      	movs	r0, r3
 801d62e:	46bd      	mov	sp, r7
 801d630:	b005      	add	sp, #20
 801d632:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d634 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d634:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d636:	b085      	sub	sp, #20
 801d638:	af00      	add	r7, sp, #0
 801d63a:	6078      	str	r0, [r7, #4]
 801d63c:	000a      	movs	r2, r1
 801d63e:	1cfb      	adds	r3, r7, #3
 801d640:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d642:	210f      	movs	r1, #15
 801d644:	187b      	adds	r3, r7, r1
 801d646:	2200      	movs	r2, #0
 801d648:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d64a:	260e      	movs	r6, #14
 801d64c:	19bb      	adds	r3, r7, r6
 801d64e:	2200      	movs	r2, #0
 801d650:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d652:	687a      	ldr	r2, [r7, #4]
 801d654:	23b0      	movs	r3, #176	@ 0xb0
 801d656:	009b      	lsls	r3, r3, #2
 801d658:	58d2      	ldr	r2, [r2, r3]
 801d65a:	000d      	movs	r5, r1
 801d65c:	187c      	adds	r4, r7, r1
 801d65e:	1cfb      	adds	r3, r7, #3
 801d660:	781b      	ldrb	r3, [r3, #0]
 801d662:	0019      	movs	r1, r3
 801d664:	0010      	movs	r0, r2
 801d666:	f7f6 fac8 	bl	8013bfa <HAL_PCD_EP_ClrStall>
 801d66a:	0003      	movs	r3, r0
 801d66c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d66e:	19bc      	adds	r4, r7, r6
 801d670:	197b      	adds	r3, r7, r5
 801d672:	781b      	ldrb	r3, [r3, #0]
 801d674:	0018      	movs	r0, r3
 801d676:	f000 f904 	bl	801d882 <USBD_Get_USB_Status>
 801d67a:	0003      	movs	r3, r0
 801d67c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d67e:	19bb      	adds	r3, r7, r6
 801d680:	781b      	ldrb	r3, [r3, #0]
}
 801d682:	0018      	movs	r0, r3
 801d684:	46bd      	mov	sp, r7
 801d686:	b005      	add	sp, #20
 801d688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d68a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d68a:	b580      	push	{r7, lr}
 801d68c:	b084      	sub	sp, #16
 801d68e:	af00      	add	r7, sp, #0
 801d690:	6078      	str	r0, [r7, #4]
 801d692:	000a      	movs	r2, r1
 801d694:	1cfb      	adds	r3, r7, #3
 801d696:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d698:	687a      	ldr	r2, [r7, #4]
 801d69a:	23b0      	movs	r3, #176	@ 0xb0
 801d69c:	009b      	lsls	r3, r3, #2
 801d69e:	58d3      	ldr	r3, [r2, r3]
 801d6a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d6a2:	1cfb      	adds	r3, r7, #3
 801d6a4:	781b      	ldrb	r3, [r3, #0]
 801d6a6:	b25b      	sxtb	r3, r3
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	da0d      	bge.n	801d6c8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d6ac:	1cfb      	adds	r3, r7, #3
 801d6ae:	781b      	ldrb	r3, [r3, #0]
 801d6b0:	227f      	movs	r2, #127	@ 0x7f
 801d6b2:	4013      	ands	r3, r2
 801d6b4:	68f9      	ldr	r1, [r7, #12]
 801d6b6:	1c5a      	adds	r2, r3, #1
 801d6b8:	0013      	movs	r3, r2
 801d6ba:	009b      	lsls	r3, r3, #2
 801d6bc:	189b      	adds	r3, r3, r2
 801d6be:	00db      	lsls	r3, r3, #3
 801d6c0:	18cb      	adds	r3, r1, r3
 801d6c2:	3302      	adds	r3, #2
 801d6c4:	781b      	ldrb	r3, [r3, #0]
 801d6c6:	e00d      	b.n	801d6e4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d6c8:	1cfb      	adds	r3, r7, #3
 801d6ca:	781b      	ldrb	r3, [r3, #0]
 801d6cc:	227f      	movs	r2, #127	@ 0x7f
 801d6ce:	401a      	ands	r2, r3
 801d6d0:	68f8      	ldr	r0, [r7, #12]
 801d6d2:	23b5      	movs	r3, #181	@ 0xb5
 801d6d4:	0059      	lsls	r1, r3, #1
 801d6d6:	0013      	movs	r3, r2
 801d6d8:	009b      	lsls	r3, r3, #2
 801d6da:	189b      	adds	r3, r3, r2
 801d6dc:	00db      	lsls	r3, r3, #3
 801d6de:	18c3      	adds	r3, r0, r3
 801d6e0:	185b      	adds	r3, r3, r1
 801d6e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d6e4:	0018      	movs	r0, r3
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	b004      	add	sp, #16
 801d6ea:	bd80      	pop	{r7, pc}

0801d6ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6ee:	b085      	sub	sp, #20
 801d6f0:	af00      	add	r7, sp, #0
 801d6f2:	6078      	str	r0, [r7, #4]
 801d6f4:	000a      	movs	r2, r1
 801d6f6:	1cfb      	adds	r3, r7, #3
 801d6f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6fa:	210f      	movs	r1, #15
 801d6fc:	187b      	adds	r3, r7, r1
 801d6fe:	2200      	movs	r2, #0
 801d700:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d702:	260e      	movs	r6, #14
 801d704:	19bb      	adds	r3, r7, r6
 801d706:	2200      	movs	r2, #0
 801d708:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d70a:	687a      	ldr	r2, [r7, #4]
 801d70c:	23b0      	movs	r3, #176	@ 0xb0
 801d70e:	009b      	lsls	r3, r3, #2
 801d710:	58d2      	ldr	r2, [r2, r3]
 801d712:	000d      	movs	r5, r1
 801d714:	187c      	adds	r4, r7, r1
 801d716:	1cfb      	adds	r3, r7, #3
 801d718:	781b      	ldrb	r3, [r3, #0]
 801d71a:	0019      	movs	r1, r3
 801d71c:	0010      	movs	r0, r2
 801d71e:	f7f6 f899 	bl	8013854 <HAL_PCD_SetAddress>
 801d722:	0003      	movs	r3, r0
 801d724:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d726:	19bc      	adds	r4, r7, r6
 801d728:	197b      	adds	r3, r7, r5
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	0018      	movs	r0, r3
 801d72e:	f000 f8a8 	bl	801d882 <USBD_Get_USB_Status>
 801d732:	0003      	movs	r3, r0
 801d734:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d736:	19bb      	adds	r3, r7, r6
 801d738:	781b      	ldrb	r3, [r3, #0]
}
 801d73a:	0018      	movs	r0, r3
 801d73c:	46bd      	mov	sp, r7
 801d73e:	b005      	add	sp, #20
 801d740:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d742:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d744:	b087      	sub	sp, #28
 801d746:	af00      	add	r7, sp, #0
 801d748:	60f8      	str	r0, [r7, #12]
 801d74a:	0008      	movs	r0, r1
 801d74c:	607a      	str	r2, [r7, #4]
 801d74e:	0019      	movs	r1, r3
 801d750:	230b      	movs	r3, #11
 801d752:	18fb      	adds	r3, r7, r3
 801d754:	1c02      	adds	r2, r0, #0
 801d756:	701a      	strb	r2, [r3, #0]
 801d758:	2408      	movs	r4, #8
 801d75a:	193b      	adds	r3, r7, r4
 801d75c:	1c0a      	adds	r2, r1, #0
 801d75e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d760:	2117      	movs	r1, #23
 801d762:	187b      	adds	r3, r7, r1
 801d764:	2200      	movs	r2, #0
 801d766:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d768:	2516      	movs	r5, #22
 801d76a:	197b      	adds	r3, r7, r5
 801d76c:	2200      	movs	r2, #0
 801d76e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d770:	68fa      	ldr	r2, [r7, #12]
 801d772:	23b0      	movs	r3, #176	@ 0xb0
 801d774:	009b      	lsls	r3, r3, #2
 801d776:	58d0      	ldr	r0, [r2, r3]
 801d778:	193b      	adds	r3, r7, r4
 801d77a:	881d      	ldrh	r5, [r3, #0]
 801d77c:	000e      	movs	r6, r1
 801d77e:	187c      	adds	r4, r7, r1
 801d780:	687a      	ldr	r2, [r7, #4]
 801d782:	230b      	movs	r3, #11
 801d784:	18fb      	adds	r3, r7, r3
 801d786:	7819      	ldrb	r1, [r3, #0]
 801d788:	002b      	movs	r3, r5
 801d78a:	f7f6 f99e 	bl	8013aca <HAL_PCD_EP_Transmit>
 801d78e:	0003      	movs	r3, r0
 801d790:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d792:	2516      	movs	r5, #22
 801d794:	197c      	adds	r4, r7, r5
 801d796:	19bb      	adds	r3, r7, r6
 801d798:	781b      	ldrb	r3, [r3, #0]
 801d79a:	0018      	movs	r0, r3
 801d79c:	f000 f871 	bl	801d882 <USBD_Get_USB_Status>
 801d7a0:	0003      	movs	r3, r0
 801d7a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d7a4:	197b      	adds	r3, r7, r5
 801d7a6:	781b      	ldrb	r3, [r3, #0]
}
 801d7a8:	0018      	movs	r0, r3
 801d7aa:	46bd      	mov	sp, r7
 801d7ac:	b007      	add	sp, #28
 801d7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7b2:	b087      	sub	sp, #28
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	60f8      	str	r0, [r7, #12]
 801d7b8:	0008      	movs	r0, r1
 801d7ba:	607a      	str	r2, [r7, #4]
 801d7bc:	0019      	movs	r1, r3
 801d7be:	230b      	movs	r3, #11
 801d7c0:	18fb      	adds	r3, r7, r3
 801d7c2:	1c02      	adds	r2, r0, #0
 801d7c4:	701a      	strb	r2, [r3, #0]
 801d7c6:	2408      	movs	r4, #8
 801d7c8:	193b      	adds	r3, r7, r4
 801d7ca:	1c0a      	adds	r2, r1, #0
 801d7cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7ce:	2117      	movs	r1, #23
 801d7d0:	187b      	adds	r3, r7, r1
 801d7d2:	2200      	movs	r2, #0
 801d7d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7d6:	2516      	movs	r5, #22
 801d7d8:	197b      	adds	r3, r7, r5
 801d7da:	2200      	movs	r2, #0
 801d7dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d7de:	68fa      	ldr	r2, [r7, #12]
 801d7e0:	23b0      	movs	r3, #176	@ 0xb0
 801d7e2:	009b      	lsls	r3, r3, #2
 801d7e4:	58d0      	ldr	r0, [r2, r3]
 801d7e6:	193b      	adds	r3, r7, r4
 801d7e8:	881d      	ldrh	r5, [r3, #0]
 801d7ea:	000e      	movs	r6, r1
 801d7ec:	187c      	adds	r4, r7, r1
 801d7ee:	687a      	ldr	r2, [r7, #4]
 801d7f0:	230b      	movs	r3, #11
 801d7f2:	18fb      	adds	r3, r7, r3
 801d7f4:	7819      	ldrb	r1, [r3, #0]
 801d7f6:	002b      	movs	r3, r5
 801d7f8:	f7f6 f917 	bl	8013a2a <HAL_PCD_EP_Receive>
 801d7fc:	0003      	movs	r3, r0
 801d7fe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d800:	2516      	movs	r5, #22
 801d802:	197c      	adds	r4, r7, r5
 801d804:	19bb      	adds	r3, r7, r6
 801d806:	781b      	ldrb	r3, [r3, #0]
 801d808:	0018      	movs	r0, r3
 801d80a:	f000 f83a 	bl	801d882 <USBD_Get_USB_Status>
 801d80e:	0003      	movs	r3, r0
 801d810:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d812:	197b      	adds	r3, r7, r5
 801d814:	781b      	ldrb	r3, [r3, #0]
}
 801d816:	0018      	movs	r0, r3
 801d818:	46bd      	mov	sp, r7
 801d81a:	b007      	add	sp, #28
 801d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d81e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d81e:	b580      	push	{r7, lr}
 801d820:	b082      	sub	sp, #8
 801d822:	af00      	add	r7, sp, #0
 801d824:	6078      	str	r0, [r7, #4]
 801d826:	000a      	movs	r2, r1
 801d828:	1cfb      	adds	r3, r7, #3
 801d82a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d82c:	687a      	ldr	r2, [r7, #4]
 801d82e:	23b0      	movs	r3, #176	@ 0xb0
 801d830:	009b      	lsls	r3, r3, #2
 801d832:	58d2      	ldr	r2, [r2, r3]
 801d834:	1cfb      	adds	r3, r7, #3
 801d836:	781b      	ldrb	r3, [r3, #0]
 801d838:	0019      	movs	r1, r3
 801d83a:	0010      	movs	r0, r2
 801d83c:	f7f6 f92c 	bl	8013a98 <HAL_PCD_EP_GetRxCount>
 801d840:	0003      	movs	r3, r0
}
 801d842:	0018      	movs	r0, r3
 801d844:	46bd      	mov	sp, r7
 801d846:	b002      	add	sp, #8
 801d848:	bd80      	pop	{r7, pc}
	...

0801d84c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b082      	sub	sp, #8
 801d850:	af00      	add	r7, sp, #0
 801d852:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d854:	4b02      	ldr	r3, [pc, #8]	@ (801d860 <USBD_static_malloc+0x14>)
}
 801d856:	0018      	movs	r0, r3
 801d858:	46bd      	mov	sp, r7
 801d85a:	b002      	add	sp, #8
 801d85c:	bd80      	pop	{r7, pc}
 801d85e:	46c0      	nop			@ (mov r8, r8)
 801d860:	20003460 	.word	0x20003460

0801d864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b082      	sub	sp, #8
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]

}
 801d86c:	46c0      	nop			@ (mov r8, r8)
 801d86e:	46bd      	mov	sp, r7
 801d870:	b002      	add	sp, #8
 801d872:	bd80      	pop	{r7, pc}

0801d874 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d874:	b580      	push	{r7, lr}
 801d876:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d878:	f7ea fc08 	bl	800808c <SystemClock_Config>
}
 801d87c:	46c0      	nop			@ (mov r8, r8)
 801d87e:	46bd      	mov	sp, r7
 801d880:	bd80      	pop	{r7, pc}

0801d882 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d882:	b580      	push	{r7, lr}
 801d884:	b084      	sub	sp, #16
 801d886:	af00      	add	r7, sp, #0
 801d888:	0002      	movs	r2, r0
 801d88a:	1dfb      	adds	r3, r7, #7
 801d88c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d88e:	230f      	movs	r3, #15
 801d890:	18fb      	adds	r3, r7, r3
 801d892:	2200      	movs	r2, #0
 801d894:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d896:	1dfb      	adds	r3, r7, #7
 801d898:	781b      	ldrb	r3, [r3, #0]
 801d89a:	2b03      	cmp	r3, #3
 801d89c:	d017      	beq.n	801d8ce <USBD_Get_USB_Status+0x4c>
 801d89e:	dc1b      	bgt.n	801d8d8 <USBD_Get_USB_Status+0x56>
 801d8a0:	2b02      	cmp	r3, #2
 801d8a2:	d00f      	beq.n	801d8c4 <USBD_Get_USB_Status+0x42>
 801d8a4:	dc18      	bgt.n	801d8d8 <USBD_Get_USB_Status+0x56>
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d002      	beq.n	801d8b0 <USBD_Get_USB_Status+0x2e>
 801d8aa:	2b01      	cmp	r3, #1
 801d8ac:	d005      	beq.n	801d8ba <USBD_Get_USB_Status+0x38>
 801d8ae:	e013      	b.n	801d8d8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d8b0:	230f      	movs	r3, #15
 801d8b2:	18fb      	adds	r3, r7, r3
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	701a      	strb	r2, [r3, #0]
    break;
 801d8b8:	e013      	b.n	801d8e2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d8ba:	230f      	movs	r3, #15
 801d8bc:	18fb      	adds	r3, r7, r3
 801d8be:	2202      	movs	r2, #2
 801d8c0:	701a      	strb	r2, [r3, #0]
    break;
 801d8c2:	e00e      	b.n	801d8e2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d8c4:	230f      	movs	r3, #15
 801d8c6:	18fb      	adds	r3, r7, r3
 801d8c8:	2201      	movs	r2, #1
 801d8ca:	701a      	strb	r2, [r3, #0]
    break;
 801d8cc:	e009      	b.n	801d8e2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d8ce:	230f      	movs	r3, #15
 801d8d0:	18fb      	adds	r3, r7, r3
 801d8d2:	2202      	movs	r2, #2
 801d8d4:	701a      	strb	r2, [r3, #0]
    break;
 801d8d6:	e004      	b.n	801d8e2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d8d8:	230f      	movs	r3, #15
 801d8da:	18fb      	adds	r3, r7, r3
 801d8dc:	2202      	movs	r2, #2
 801d8de:	701a      	strb	r2, [r3, #0]
    break;
 801d8e0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d8e2:	230f      	movs	r3, #15
 801d8e4:	18fb      	adds	r3, r7, r3
 801d8e6:	781b      	ldrb	r3, [r3, #0]
}
 801d8e8:	0018      	movs	r0, r3
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	b004      	add	sp, #16
 801d8ee:	bd80      	pop	{r7, pc}

0801d8f0 <arm_cfft_radix4by2_q31>:
 801d8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8f2:	465f      	mov	r7, fp
 801d8f4:	4656      	mov	r6, sl
 801d8f6:	464d      	mov	r5, r9
 801d8f8:	4644      	mov	r4, r8
 801d8fa:	000b      	movs	r3, r1
 801d8fc:	b4f0      	push	{r4, r5, r6, r7}
 801d8fe:	085b      	lsrs	r3, r3, #1
 801d900:	b08f      	sub	sp, #60	@ 0x3c
 801d902:	910a      	str	r1, [sp, #40]	@ 0x28
 801d904:	0007      	movs	r7, r0
 801d906:	9009      	str	r0, [sp, #36]	@ 0x24
 801d908:	0011      	movs	r1, r2
 801d90a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d90c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d100      	bne.n	801d914 <arm_cfft_radix4by2_q31+0x24>
 801d912:	e0a0      	b.n	801da56 <arm_cfft_radix4by2_q31+0x166>
 801d914:	0002      	movs	r2, r0
 801d916:	00db      	lsls	r3, r3, #3
 801d918:	3204      	adds	r2, #4
 801d91a:	4691      	mov	r9, r2
 801d91c:	4698      	mov	r8, r3
 801d91e:	000a      	movs	r2, r1
 801d920:	464e      	mov	r6, r9
 801d922:	4442      	add	r2, r8
 801d924:	4699      	mov	r9, r3
 801d926:	4688      	mov	r8, r1
 801d928:	9208      	str	r2, [sp, #32]
 801d92a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d92c:	4643      	mov	r3, r8
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	469b      	mov	fp, r3
 801d932:	4643      	mov	r3, r8
 801d934:	685b      	ldr	r3, [r3, #4]
 801d936:	469a      	mov	sl, r3
 801d938:	683b      	ldr	r3, [r7, #0]
 801d93a:	109c      	asrs	r4, r3, #2
 801d93c:	464b      	mov	r3, r9
 801d93e:	58fb      	ldr	r3, [r7, r3]
 801d940:	109a      	asrs	r2, r3, #2
 801d942:	18a3      	adds	r3, r4, r2
 801d944:	603b      	str	r3, [r7, #0]
 801d946:	6833      	ldr	r3, [r6, #0]
 801d948:	1aa4      	subs	r4, r4, r2
 801d94a:	109d      	asrs	r5, r3, #2
 801d94c:	464b      	mov	r3, r9
 801d94e:	58f3      	ldr	r3, [r6, r3]
 801d950:	17e2      	asrs	r2, r4, #31
 801d952:	109b      	asrs	r3, r3, #2
 801d954:	18e9      	adds	r1, r5, r3
 801d956:	6031      	str	r1, [r6, #0]
 801d958:	0011      	movs	r1, r2
 801d95a:	465a      	mov	r2, fp
 801d95c:	17d2      	asrs	r2, r2, #31
 801d95e:	0010      	movs	r0, r2
 801d960:	4652      	mov	r2, sl
 801d962:	1aed      	subs	r5, r5, r3
 801d964:	17eb      	asrs	r3, r5, #31
 801d966:	17d2      	asrs	r2, r2, #31
 801d968:	9307      	str	r3, [sp, #28]
 801d96a:	9204      	str	r2, [sp, #16]
 801d96c:	0003      	movs	r3, r0
 801d96e:	465a      	mov	r2, fp
 801d970:	9006      	str	r0, [sp, #24]
 801d972:	0020      	movs	r0, r4
 801d974:	9105      	str	r1, [sp, #20]
 801d976:	f7e2 fe23 	bl	80005c0 <__aeabi_lmul>
 801d97a:	2280      	movs	r2, #128	@ 0x80
 801d97c:	2300      	movs	r3, #0
 801d97e:	0612      	lsls	r2, r2, #24
 801d980:	1880      	adds	r0, r0, r2
 801d982:	4159      	adcs	r1, r3
 801d984:	2300      	movs	r3, #0
 801d986:	9101      	str	r1, [sp, #4]
 801d988:	9300      	str	r3, [sp, #0]
 801d98a:	4652      	mov	r2, sl
 801d98c:	9b04      	ldr	r3, [sp, #16]
 801d98e:	0028      	movs	r0, r5
 801d990:	17e9      	asrs	r1, r5, #31
 801d992:	f7e2 fe15 	bl	80005c0 <__aeabi_lmul>
 801d996:	9a00      	ldr	r2, [sp, #0]
 801d998:	9b01      	ldr	r3, [sp, #4]
 801d99a:	1880      	adds	r0, r0, r2
 801d99c:	4159      	adcs	r1, r3
 801d99e:	2280      	movs	r2, #128	@ 0x80
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	0612      	lsls	r2, r2, #24
 801d9a4:	1880      	adds	r0, r0, r2
 801d9a6:	4159      	adcs	r1, r3
 801d9a8:	464a      	mov	r2, r9
 801d9aa:	004b      	lsls	r3, r1, #1
 801d9ac:	50bb      	str	r3, [r7, r2]
 801d9ae:	4658      	mov	r0, fp
 801d9b0:	002a      	movs	r2, r5
 801d9b2:	9b07      	ldr	r3, [sp, #28]
 801d9b4:	9906      	ldr	r1, [sp, #24]
 801d9b6:	f7e2 fe03 	bl	80005c0 <__aeabi_lmul>
 801d9ba:	2280      	movs	r2, #128	@ 0x80
 801d9bc:	2300      	movs	r3, #0
 801d9be:	0612      	lsls	r2, r2, #24
 801d9c0:	1880      	adds	r0, r0, r2
 801d9c2:	4159      	adcs	r1, r3
 801d9c4:	2000      	movs	r0, #0
 801d9c6:	9103      	str	r1, [sp, #12]
 801d9c8:	9002      	str	r0, [sp, #8]
 801d9ca:	4652      	mov	r2, sl
 801d9cc:	9b04      	ldr	r3, [sp, #16]
 801d9ce:	0020      	movs	r0, r4
 801d9d0:	9905      	ldr	r1, [sp, #20]
 801d9d2:	f7e2 fdf5 	bl	80005c0 <__aeabi_lmul>
 801d9d6:	9a02      	ldr	r2, [sp, #8]
 801d9d8:	9b03      	ldr	r3, [sp, #12]
 801d9da:	1a12      	subs	r2, r2, r0
 801d9dc:	418b      	sbcs	r3, r1
 801d9de:	2080      	movs	r0, #128	@ 0x80
 801d9e0:	2100      	movs	r1, #0
 801d9e2:	0600      	lsls	r0, r0, #24
 801d9e4:	1812      	adds	r2, r2, r0
 801d9e6:	414b      	adcs	r3, r1
 801d9e8:	464a      	mov	r2, r9
 801d9ea:	005b      	lsls	r3, r3, #1
 801d9ec:	50b3      	str	r3, [r6, r2]
 801d9ee:	2308      	movs	r3, #8
 801d9f0:	469c      	mov	ip, r3
 801d9f2:	9b08      	ldr	r3, [sp, #32]
 801d9f4:	44e0      	add	r8, ip
 801d9f6:	3708      	adds	r7, #8
 801d9f8:	3608      	adds	r6, #8
 801d9fa:	4598      	cmp	r8, r3
 801d9fc:	d196      	bne.n	801d92c <arm_cfft_radix4by2_q31+0x3c>
 801d9fe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801da00:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801da02:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801da04:	2302      	movs	r3, #2
 801da06:	003a      	movs	r2, r7
 801da08:	0029      	movs	r1, r5
 801da0a:	0020      	movs	r0, r4
 801da0c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801da0e:	f000 f957 	bl	801dcc0 <arm_radix4_butterfly_q31>
 801da12:	46a4      	mov	ip, r4
 801da14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801da16:	2302      	movs	r3, #2
 801da18:	0088      	lsls	r0, r1, #2
 801da1a:	4460      	add	r0, ip
 801da1c:	003a      	movs	r2, r7
 801da1e:	0029      	movs	r1, r5
 801da20:	f000 f94e 	bl	801dcc0 <arm_radix4_butterfly_q31>
 801da24:	46a4      	mov	ip, r4
 801da26:	0128      	lsls	r0, r5, #4
 801da28:	4460      	add	r0, ip
 801da2a:	6833      	ldr	r3, [r6, #0]
 801da2c:	005b      	lsls	r3, r3, #1
 801da2e:	6033      	str	r3, [r6, #0]
 801da30:	6873      	ldr	r3, [r6, #4]
 801da32:	005b      	lsls	r3, r3, #1
 801da34:	6073      	str	r3, [r6, #4]
 801da36:	68b3      	ldr	r3, [r6, #8]
 801da38:	005b      	lsls	r3, r3, #1
 801da3a:	60b3      	str	r3, [r6, #8]
 801da3c:	68f3      	ldr	r3, [r6, #12]
 801da3e:	005b      	lsls	r3, r3, #1
 801da40:	60f3      	str	r3, [r6, #12]
 801da42:	3610      	adds	r6, #16
 801da44:	42b0      	cmp	r0, r6
 801da46:	d1f0      	bne.n	801da2a <arm_cfft_radix4by2_q31+0x13a>
 801da48:	b00f      	add	sp, #60	@ 0x3c
 801da4a:	bc3c      	pop	{r2, r3, r4, r5}
 801da4c:	4690      	mov	r8, r2
 801da4e:	4699      	mov	r9, r3
 801da50:	46a2      	mov	sl, r4
 801da52:	46ab      	mov	fp, r5
 801da54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da56:	2302      	movs	r3, #2
 801da58:	2100      	movs	r1, #0
 801da5a:	0015      	movs	r5, r2
 801da5c:	f000 f930 	bl	801dcc0 <arm_radix4_butterfly_q31>
 801da60:	46bc      	mov	ip, r7
 801da62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da64:	002a      	movs	r2, r5
 801da66:	0098      	lsls	r0, r3, #2
 801da68:	4460      	add	r0, ip
 801da6a:	2302      	movs	r3, #2
 801da6c:	2100      	movs	r1, #0
 801da6e:	f000 f927 	bl	801dcc0 <arm_radix4_butterfly_q31>
 801da72:	e7e9      	b.n	801da48 <arm_cfft_radix4by2_q31+0x158>

0801da74 <arm_cfft_radix4by2_inverse_q31>:
 801da74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da76:	465f      	mov	r7, fp
 801da78:	4656      	mov	r6, sl
 801da7a:	464d      	mov	r5, r9
 801da7c:	4644      	mov	r4, r8
 801da7e:	000b      	movs	r3, r1
 801da80:	b4f0      	push	{r4, r5, r6, r7}
 801da82:	085b      	lsrs	r3, r3, #1
 801da84:	b08f      	sub	sp, #60	@ 0x3c
 801da86:	910a      	str	r1, [sp, #40]	@ 0x28
 801da88:	0007      	movs	r7, r0
 801da8a:	9009      	str	r0, [sp, #36]	@ 0x24
 801da8c:	0011      	movs	r1, r2
 801da8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801da90:	930c      	str	r3, [sp, #48]	@ 0x30
 801da92:	2b00      	cmp	r3, #0
 801da94:	d100      	bne.n	801da98 <arm_cfft_radix4by2_inverse_q31+0x24>
 801da96:	e0a0      	b.n	801dbda <arm_cfft_radix4by2_inverse_q31+0x166>
 801da98:	0002      	movs	r2, r0
 801da9a:	00db      	lsls	r3, r3, #3
 801da9c:	3204      	adds	r2, #4
 801da9e:	4691      	mov	r9, r2
 801daa0:	4698      	mov	r8, r3
 801daa2:	000a      	movs	r2, r1
 801daa4:	464e      	mov	r6, r9
 801daa6:	4442      	add	r2, r8
 801daa8:	4699      	mov	r9, r3
 801daaa:	4688      	mov	r8, r1
 801daac:	9208      	str	r2, [sp, #32]
 801daae:	900d      	str	r0, [sp, #52]	@ 0x34
 801dab0:	4643      	mov	r3, r8
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	469b      	mov	fp, r3
 801dab6:	4643      	mov	r3, r8
 801dab8:	685b      	ldr	r3, [r3, #4]
 801daba:	469a      	mov	sl, r3
 801dabc:	683b      	ldr	r3, [r7, #0]
 801dabe:	109c      	asrs	r4, r3, #2
 801dac0:	464b      	mov	r3, r9
 801dac2:	58fb      	ldr	r3, [r7, r3]
 801dac4:	109a      	asrs	r2, r3, #2
 801dac6:	18a3      	adds	r3, r4, r2
 801dac8:	603b      	str	r3, [r7, #0]
 801daca:	6833      	ldr	r3, [r6, #0]
 801dacc:	1aa4      	subs	r4, r4, r2
 801dace:	109d      	asrs	r5, r3, #2
 801dad0:	464b      	mov	r3, r9
 801dad2:	58f3      	ldr	r3, [r6, r3]
 801dad4:	17e2      	asrs	r2, r4, #31
 801dad6:	109b      	asrs	r3, r3, #2
 801dad8:	18e9      	adds	r1, r5, r3
 801dada:	6031      	str	r1, [r6, #0]
 801dadc:	0011      	movs	r1, r2
 801dade:	465a      	mov	r2, fp
 801dae0:	17d2      	asrs	r2, r2, #31
 801dae2:	0010      	movs	r0, r2
 801dae4:	4652      	mov	r2, sl
 801dae6:	1aed      	subs	r5, r5, r3
 801dae8:	17eb      	asrs	r3, r5, #31
 801daea:	17d2      	asrs	r2, r2, #31
 801daec:	9307      	str	r3, [sp, #28]
 801daee:	9204      	str	r2, [sp, #16]
 801daf0:	0003      	movs	r3, r0
 801daf2:	465a      	mov	r2, fp
 801daf4:	9006      	str	r0, [sp, #24]
 801daf6:	0020      	movs	r0, r4
 801daf8:	9105      	str	r1, [sp, #20]
 801dafa:	f7e2 fd61 	bl	80005c0 <__aeabi_lmul>
 801dafe:	2280      	movs	r2, #128	@ 0x80
 801db00:	2300      	movs	r3, #0
 801db02:	0612      	lsls	r2, r2, #24
 801db04:	1880      	adds	r0, r0, r2
 801db06:	4159      	adcs	r1, r3
 801db08:	2300      	movs	r3, #0
 801db0a:	9101      	str	r1, [sp, #4]
 801db0c:	9300      	str	r3, [sp, #0]
 801db0e:	4652      	mov	r2, sl
 801db10:	9b04      	ldr	r3, [sp, #16]
 801db12:	0028      	movs	r0, r5
 801db14:	17e9      	asrs	r1, r5, #31
 801db16:	f7e2 fd53 	bl	80005c0 <__aeabi_lmul>
 801db1a:	9a00      	ldr	r2, [sp, #0]
 801db1c:	9b01      	ldr	r3, [sp, #4]
 801db1e:	1a12      	subs	r2, r2, r0
 801db20:	418b      	sbcs	r3, r1
 801db22:	2080      	movs	r0, #128	@ 0x80
 801db24:	2100      	movs	r1, #0
 801db26:	0600      	lsls	r0, r0, #24
 801db28:	1812      	adds	r2, r2, r0
 801db2a:	414b      	adcs	r3, r1
 801db2c:	464a      	mov	r2, r9
 801db2e:	005b      	lsls	r3, r3, #1
 801db30:	50bb      	str	r3, [r7, r2]
 801db32:	4658      	mov	r0, fp
 801db34:	002a      	movs	r2, r5
 801db36:	9b07      	ldr	r3, [sp, #28]
 801db38:	9906      	ldr	r1, [sp, #24]
 801db3a:	f7e2 fd41 	bl	80005c0 <__aeabi_lmul>
 801db3e:	2280      	movs	r2, #128	@ 0x80
 801db40:	2300      	movs	r3, #0
 801db42:	0612      	lsls	r2, r2, #24
 801db44:	1880      	adds	r0, r0, r2
 801db46:	4159      	adcs	r1, r3
 801db48:	2000      	movs	r0, #0
 801db4a:	9103      	str	r1, [sp, #12]
 801db4c:	9002      	str	r0, [sp, #8]
 801db4e:	4652      	mov	r2, sl
 801db50:	9b04      	ldr	r3, [sp, #16]
 801db52:	0020      	movs	r0, r4
 801db54:	9905      	ldr	r1, [sp, #20]
 801db56:	f7e2 fd33 	bl	80005c0 <__aeabi_lmul>
 801db5a:	9b02      	ldr	r3, [sp, #8]
 801db5c:	9c03      	ldr	r4, [sp, #12]
 801db5e:	18c0      	adds	r0, r0, r3
 801db60:	4161      	adcs	r1, r4
 801db62:	2380      	movs	r3, #128	@ 0x80
 801db64:	2400      	movs	r4, #0
 801db66:	061b      	lsls	r3, r3, #24
 801db68:	18c0      	adds	r0, r0, r3
 801db6a:	4161      	adcs	r1, r4
 801db6c:	464a      	mov	r2, r9
 801db6e:	004b      	lsls	r3, r1, #1
 801db70:	50b3      	str	r3, [r6, r2]
 801db72:	2308      	movs	r3, #8
 801db74:	469c      	mov	ip, r3
 801db76:	9b08      	ldr	r3, [sp, #32]
 801db78:	44e0      	add	r8, ip
 801db7a:	3708      	adds	r7, #8
 801db7c:	3608      	adds	r6, #8
 801db7e:	4598      	cmp	r8, r3
 801db80:	d196      	bne.n	801dab0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801db82:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801db84:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801db86:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801db88:	2302      	movs	r3, #2
 801db8a:	003a      	movs	r2, r7
 801db8c:	0029      	movs	r1, r5
 801db8e:	0020      	movs	r0, r4
 801db90:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801db92:	f000 fb3b 	bl	801e20c <arm_radix4_butterfly_inverse_q31>
 801db96:	46a4      	mov	ip, r4
 801db98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801db9a:	2302      	movs	r3, #2
 801db9c:	0088      	lsls	r0, r1, #2
 801db9e:	4460      	add	r0, ip
 801dba0:	003a      	movs	r2, r7
 801dba2:	0029      	movs	r1, r5
 801dba4:	f000 fb32 	bl	801e20c <arm_radix4_butterfly_inverse_q31>
 801dba8:	46a4      	mov	ip, r4
 801dbaa:	0128      	lsls	r0, r5, #4
 801dbac:	4460      	add	r0, ip
 801dbae:	6833      	ldr	r3, [r6, #0]
 801dbb0:	005b      	lsls	r3, r3, #1
 801dbb2:	6033      	str	r3, [r6, #0]
 801dbb4:	6873      	ldr	r3, [r6, #4]
 801dbb6:	005b      	lsls	r3, r3, #1
 801dbb8:	6073      	str	r3, [r6, #4]
 801dbba:	68b3      	ldr	r3, [r6, #8]
 801dbbc:	005b      	lsls	r3, r3, #1
 801dbbe:	60b3      	str	r3, [r6, #8]
 801dbc0:	68f3      	ldr	r3, [r6, #12]
 801dbc2:	005b      	lsls	r3, r3, #1
 801dbc4:	60f3      	str	r3, [r6, #12]
 801dbc6:	3610      	adds	r6, #16
 801dbc8:	42b0      	cmp	r0, r6
 801dbca:	d1f0      	bne.n	801dbae <arm_cfft_radix4by2_inverse_q31+0x13a>
 801dbcc:	b00f      	add	sp, #60	@ 0x3c
 801dbce:	bc3c      	pop	{r2, r3, r4, r5}
 801dbd0:	4690      	mov	r8, r2
 801dbd2:	4699      	mov	r9, r3
 801dbd4:	46a2      	mov	sl, r4
 801dbd6:	46ab      	mov	fp, r5
 801dbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbda:	2302      	movs	r3, #2
 801dbdc:	2100      	movs	r1, #0
 801dbde:	0015      	movs	r5, r2
 801dbe0:	f000 fb14 	bl	801e20c <arm_radix4_butterfly_inverse_q31>
 801dbe4:	46bc      	mov	ip, r7
 801dbe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbe8:	002a      	movs	r2, r5
 801dbea:	0098      	lsls	r0, r3, #2
 801dbec:	4460      	add	r0, ip
 801dbee:	2302      	movs	r3, #2
 801dbf0:	2100      	movs	r1, #0
 801dbf2:	f000 fb0b 	bl	801e20c <arm_radix4_butterfly_inverse_q31>
 801dbf6:	e7e9      	b.n	801dbcc <arm_cfft_radix4by2_inverse_q31+0x158>

0801dbf8 <arm_cfft_q31>:
 801dbf8:	b570      	push	{r4, r5, r6, lr}
 801dbfa:	001e      	movs	r6, r3
 801dbfc:	2380      	movs	r3, #128	@ 0x80
 801dbfe:	000d      	movs	r5, r1
 801dc00:	0004      	movs	r4, r0
 801dc02:	8801      	ldrh	r1, [r0, #0]
 801dc04:	005b      	lsls	r3, r3, #1
 801dc06:	2a01      	cmp	r2, #1
 801dc08:	d028      	beq.n	801dc5c <arm_cfft_q31+0x64>
 801dc0a:	4299      	cmp	r1, r3
 801dc0c:	d020      	beq.n	801dc50 <arm_cfft_q31+0x58>
 801dc0e:	d812      	bhi.n	801dc36 <arm_cfft_q31+0x3e>
 801dc10:	2920      	cmp	r1, #32
 801dc12:	d004      	beq.n	801dc1e <arm_cfft_q31+0x26>
 801dc14:	d949      	bls.n	801dcaa <arm_cfft_q31+0xb2>
 801dc16:	2940      	cmp	r1, #64	@ 0x40
 801dc18:	d01a      	beq.n	801dc50 <arm_cfft_q31+0x58>
 801dc1a:	2980      	cmp	r1, #128	@ 0x80
 801dc1c:	d103      	bne.n	801dc26 <arm_cfft_q31+0x2e>
 801dc1e:	6862      	ldr	r2, [r4, #4]
 801dc20:	0028      	movs	r0, r5
 801dc22:	f7ff fe65 	bl	801d8f0 <arm_cfft_radix4by2_q31>
 801dc26:	2e00      	cmp	r6, #0
 801dc28:	d004      	beq.n	801dc34 <arm_cfft_q31+0x3c>
 801dc2a:	68a2      	ldr	r2, [r4, #8]
 801dc2c:	89a1      	ldrh	r1, [r4, #12]
 801dc2e:	0028      	movs	r0, r5
 801dc30:	f7e2 fa6a 	bl	8000108 <arm_bitreversal_32>
 801dc34:	bd70      	pop	{r4, r5, r6, pc}
 801dc36:	2380      	movs	r3, #128	@ 0x80
 801dc38:	00db      	lsls	r3, r3, #3
 801dc3a:	4299      	cmp	r1, r3
 801dc3c:	d008      	beq.n	801dc50 <arm_cfft_q31+0x58>
 801dc3e:	d92f      	bls.n	801dca0 <arm_cfft_q31+0xa8>
 801dc40:	2380      	movs	r3, #128	@ 0x80
 801dc42:	011b      	lsls	r3, r3, #4
 801dc44:	4299      	cmp	r1, r3
 801dc46:	d0ea      	beq.n	801dc1e <arm_cfft_q31+0x26>
 801dc48:	2380      	movs	r3, #128	@ 0x80
 801dc4a:	015b      	lsls	r3, r3, #5
 801dc4c:	4299      	cmp	r1, r3
 801dc4e:	d1ea      	bne.n	801dc26 <arm_cfft_q31+0x2e>
 801dc50:	2301      	movs	r3, #1
 801dc52:	6862      	ldr	r2, [r4, #4]
 801dc54:	0028      	movs	r0, r5
 801dc56:	f000 f833 	bl	801dcc0 <arm_radix4_butterfly_q31>
 801dc5a:	e7e4      	b.n	801dc26 <arm_cfft_q31+0x2e>
 801dc5c:	4299      	cmp	r1, r3
 801dc5e:	d019      	beq.n	801dc94 <arm_cfft_q31+0x9c>
 801dc60:	d80b      	bhi.n	801dc7a <arm_cfft_q31+0x82>
 801dc62:	2920      	cmp	r1, #32
 801dc64:	d004      	beq.n	801dc70 <arm_cfft_q31+0x78>
 801dc66:	d928      	bls.n	801dcba <arm_cfft_q31+0xc2>
 801dc68:	2940      	cmp	r1, #64	@ 0x40
 801dc6a:	d013      	beq.n	801dc94 <arm_cfft_q31+0x9c>
 801dc6c:	2980      	cmp	r1, #128	@ 0x80
 801dc6e:	d1da      	bne.n	801dc26 <arm_cfft_q31+0x2e>
 801dc70:	6862      	ldr	r2, [r4, #4]
 801dc72:	0028      	movs	r0, r5
 801dc74:	f7ff fefe 	bl	801da74 <arm_cfft_radix4by2_inverse_q31>
 801dc78:	e7d5      	b.n	801dc26 <arm_cfft_q31+0x2e>
 801dc7a:	2380      	movs	r3, #128	@ 0x80
 801dc7c:	00db      	lsls	r3, r3, #3
 801dc7e:	4299      	cmp	r1, r3
 801dc80:	d008      	beq.n	801dc94 <arm_cfft_q31+0x9c>
 801dc82:	d915      	bls.n	801dcb0 <arm_cfft_q31+0xb8>
 801dc84:	2380      	movs	r3, #128	@ 0x80
 801dc86:	011b      	lsls	r3, r3, #4
 801dc88:	4299      	cmp	r1, r3
 801dc8a:	d0f1      	beq.n	801dc70 <arm_cfft_q31+0x78>
 801dc8c:	2380      	movs	r3, #128	@ 0x80
 801dc8e:	015b      	lsls	r3, r3, #5
 801dc90:	4299      	cmp	r1, r3
 801dc92:	d1c8      	bne.n	801dc26 <arm_cfft_q31+0x2e>
 801dc94:	2301      	movs	r3, #1
 801dc96:	6862      	ldr	r2, [r4, #4]
 801dc98:	0028      	movs	r0, r5
 801dc9a:	f000 fab7 	bl	801e20c <arm_radix4_butterfly_inverse_q31>
 801dc9e:	e7c2      	b.n	801dc26 <arm_cfft_q31+0x2e>
 801dca0:	2380      	movs	r3, #128	@ 0x80
 801dca2:	009b      	lsls	r3, r3, #2
 801dca4:	4299      	cmp	r1, r3
 801dca6:	d0ba      	beq.n	801dc1e <arm_cfft_q31+0x26>
 801dca8:	e7bd      	b.n	801dc26 <arm_cfft_q31+0x2e>
 801dcaa:	2910      	cmp	r1, #16
 801dcac:	d1bb      	bne.n	801dc26 <arm_cfft_q31+0x2e>
 801dcae:	e7cf      	b.n	801dc50 <arm_cfft_q31+0x58>
 801dcb0:	2380      	movs	r3, #128	@ 0x80
 801dcb2:	009b      	lsls	r3, r3, #2
 801dcb4:	4299      	cmp	r1, r3
 801dcb6:	d0db      	beq.n	801dc70 <arm_cfft_q31+0x78>
 801dcb8:	e7b5      	b.n	801dc26 <arm_cfft_q31+0x2e>
 801dcba:	2910      	cmp	r1, #16
 801dcbc:	d1b3      	bne.n	801dc26 <arm_cfft_q31+0x2e>
 801dcbe:	e7e9      	b.n	801dc94 <arm_cfft_q31+0x9c>

0801dcc0 <arm_radix4_butterfly_q31>:
 801dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcc2:	464d      	mov	r5, r9
 801dcc4:	4644      	mov	r4, r8
 801dcc6:	465f      	mov	r7, fp
 801dcc8:	4656      	mov	r6, sl
 801dcca:	469c      	mov	ip, r3
 801dccc:	b4f0      	push	{r4, r5, r6, r7}
 801dcce:	b0a7      	sub	sp, #156	@ 0x9c
 801dcd0:	9114      	str	r1, [sp, #80]	@ 0x50
 801dcd2:	0889      	lsrs	r1, r1, #2
 801dcd4:	9310      	str	r3, [sp, #64]	@ 0x40
 801dcd6:	00cb      	lsls	r3, r1, #3
 801dcd8:	0015      	movs	r5, r2
 801dcda:	9223      	str	r2, [sp, #140]	@ 0x8c
 801dcdc:	18c2      	adds	r2, r0, r3
 801dcde:	000c      	movs	r4, r1
 801dce0:	469a      	mov	sl, r3
 801dce2:	9124      	str	r1, [sp, #144]	@ 0x90
 801dce4:	18d1      	adds	r1, r2, r3
 801dce6:	4663      	mov	r3, ip
 801dce8:	468b      	mov	fp, r1
 801dcea:	0119      	lsls	r1, r3, #4
 801dcec:	910d      	str	r1, [sp, #52]	@ 0x34
 801dcee:	00d9      	lsls	r1, r3, #3
 801dcf0:	005b      	lsls	r3, r3, #1
 801dcf2:	4463      	add	r3, ip
 801dcf4:	910e      	str	r1, [sp, #56]	@ 0x38
 801dcf6:	00d9      	lsls	r1, r3, #3
 801dcf8:	465b      	mov	r3, fp
 801dcfa:	44da      	add	sl, fp
 801dcfc:	4690      	mov	r8, r2
 801dcfe:	4683      	mov	fp, r0
 801dd00:	4699      	mov	r9, r3
 801dd02:	9022      	str	r0, [sp, #136]	@ 0x88
 801dd04:	9025      	str	r0, [sp, #148]	@ 0x94
 801dd06:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dd08:	9502      	str	r5, [sp, #8]
 801dd0a:	9500      	str	r5, [sp, #0]
 801dd0c:	9501      	str	r5, [sp, #4]
 801dd0e:	9407      	str	r4, [sp, #28]
 801dd10:	465b      	mov	r3, fp
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	4642      	mov	r2, r8
 801dd16:	111c      	asrs	r4, r3, #4
 801dd18:	464b      	mov	r3, r9
 801dd1a:	4658      	mov	r0, fp
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	6812      	ldr	r2, [r2, #0]
 801dd20:	111b      	asrs	r3, r3, #4
 801dd22:	18e7      	adds	r7, r4, r3
 801dd24:	1ae3      	subs	r3, r4, r3
 801dd26:	1114      	asrs	r4, r2, #4
 801dd28:	4652      	mov	r2, sl
 801dd2a:	6840      	ldr	r0, [r0, #4]
 801dd2c:	6812      	ldr	r2, [r2, #0]
 801dd2e:	1105      	asrs	r5, r0, #4
 801dd30:	4648      	mov	r0, r9
 801dd32:	9303      	str	r3, [sp, #12]
 801dd34:	1113      	asrs	r3, r2, #4
 801dd36:	18e2      	adds	r2, r4, r3
 801dd38:	465c      	mov	r4, fp
 801dd3a:	6840      	ldr	r0, [r0, #4]
 801dd3c:	1103      	asrs	r3, r0, #4
 801dd3e:	18ee      	adds	r6, r5, r3
 801dd40:	1ae8      	subs	r0, r5, r3
 801dd42:	18bb      	adds	r3, r7, r2
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	4644      	mov	r4, r8
 801dd48:	6864      	ldr	r4, [r4, #4]
 801dd4a:	9004      	str	r0, [sp, #16]
 801dd4c:	1125      	asrs	r5, r4, #4
 801dd4e:	4654      	mov	r4, sl
 801dd50:	6864      	ldr	r4, [r4, #4]
 801dd52:	1123      	asrs	r3, r4, #4
 801dd54:	465c      	mov	r4, fp
 801dd56:	18eb      	adds	r3, r5, r3
 801dd58:	18f1      	adds	r1, r6, r3
 801dd5a:	6061      	str	r1, [r4, #4]
 801dd5c:	4655      	mov	r5, sl
 801dd5e:	4644      	mov	r4, r8
 801dd60:	686d      	ldr	r5, [r5, #4]
 801dd62:	6864      	ldr	r4, [r4, #4]
 801dd64:	1129      	asrs	r1, r5, #4
 801dd66:	1124      	asrs	r4, r4, #4
 801dd68:	1a64      	subs	r4, r4, r1
 801dd6a:	4641      	mov	r1, r8
 801dd6c:	6809      	ldr	r1, [r1, #0]
 801dd6e:	9405      	str	r4, [sp, #20]
 801dd70:	1108      	asrs	r0, r1, #4
 801dd72:	4651      	mov	r1, sl
 801dd74:	6809      	ldr	r1, [r1, #0]
 801dd76:	1abc      	subs	r4, r7, r2
 801dd78:	1109      	asrs	r1, r1, #4
 801dd7a:	1a41      	subs	r1, r0, r1
 801dd7c:	17e2      	asrs	r2, r4, #31
 801dd7e:	9106      	str	r1, [sp, #24]
 801dd80:	0011      	movs	r1, r2
 801dd82:	9a01      	ldr	r2, [sp, #4]
 801dd84:	9108      	str	r1, [sp, #32]
 801dd86:	6817      	ldr	r7, [r2, #0]
 801dd88:	17fd      	asrs	r5, r7, #31
 801dd8a:	0028      	movs	r0, r5
 801dd8c:	1af5      	subs	r5, r6, r3
 801dd8e:	17ee      	asrs	r6, r5, #31
 801dd90:	960a      	str	r6, [sp, #40]	@ 0x28
 801dd92:	6856      	ldr	r6, [r2, #4]
 801dd94:	9009      	str	r0, [sp, #36]	@ 0x24
 801dd96:	17f3      	asrs	r3, r6, #31
 801dd98:	003a      	movs	r2, r7
 801dd9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dd9c:	0003      	movs	r3, r0
 801dd9e:	0020      	movs	r0, r4
 801dda0:	f7e2 fc0e 	bl	80005c0 <__aeabi_lmul>
 801dda4:	0032      	movs	r2, r6
 801dda6:	17f3      	asrs	r3, r6, #31
 801dda8:	910c      	str	r1, [sp, #48]	@ 0x30
 801ddaa:	0028      	movs	r0, r5
 801ddac:	17e9      	asrs	r1, r5, #31
 801ddae:	f7e2 fc07 	bl	80005c0 <__aeabi_lmul>
 801ddb2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ddb4:	002a      	movs	r2, r5
 801ddb6:	4684      	mov	ip, r0
 801ddb8:	4640      	mov	r0, r8
 801ddba:	4461      	add	r1, ip
 801ddbc:	0049      	lsls	r1, r1, #1
 801ddbe:	6001      	str	r1, [r0, #0]
 801ddc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ddc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ddc4:	0038      	movs	r0, r7
 801ddc6:	f7e2 fbfb 	bl	80005c0 <__aeabi_lmul>
 801ddca:	0032      	movs	r2, r6
 801ddcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddce:	000d      	movs	r5, r1
 801ddd0:	0020      	movs	r0, r4
 801ddd2:	9908      	ldr	r1, [sp, #32]
 801ddd4:	f7e2 fbf4 	bl	80005c0 <__aeabi_lmul>
 801ddd8:	4646      	mov	r6, r8
 801ddda:	1a6d      	subs	r5, r5, r1
 801dddc:	006d      	lsls	r5, r5, #1
 801ddde:	6075      	str	r5, [r6, #4]
 801dde0:	9903      	ldr	r1, [sp, #12]
 801dde2:	9d05      	ldr	r5, [sp, #20]
 801dde4:	000c      	movs	r4, r1
 801dde6:	46ac      	mov	ip, r5
 801dde8:	4464      	add	r4, ip
 801ddea:	17e6      	asrs	r6, r4, #31
 801ddec:	0031      	movs	r1, r6
 801ddee:	9b00      	ldr	r3, [sp, #0]
 801ddf0:	9804      	ldr	r0, [sp, #16]
 801ddf2:	681e      	ldr	r6, [r3, #0]
 801ddf4:	17f7      	asrs	r7, r6, #31
 801ddf6:	9709      	str	r7, [sp, #36]	@ 0x24
 801ddf8:	9f06      	ldr	r7, [sp, #24]
 801ddfa:	0032      	movs	r2, r6
 801ddfc:	1bc7      	subs	r7, r0, r7
 801ddfe:	17fd      	asrs	r5, r7, #31
 801de00:	950a      	str	r5, [sp, #40]	@ 0x28
 801de02:	685d      	ldr	r5, [r3, #4]
 801de04:	17f3      	asrs	r3, r6, #31
 801de06:	17e8      	asrs	r0, r5, #31
 801de08:	900b      	str	r0, [sp, #44]	@ 0x2c
 801de0a:	0020      	movs	r0, r4
 801de0c:	9108      	str	r1, [sp, #32]
 801de0e:	f7e2 fbd7 	bl	80005c0 <__aeabi_lmul>
 801de12:	002a      	movs	r2, r5
 801de14:	17eb      	asrs	r3, r5, #31
 801de16:	910c      	str	r1, [sp, #48]	@ 0x30
 801de18:	0038      	movs	r0, r7
 801de1a:	17f9      	asrs	r1, r7, #31
 801de1c:	f7e2 fbd0 	bl	80005c0 <__aeabi_lmul>
 801de20:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801de22:	003a      	movs	r2, r7
 801de24:	4684      	mov	ip, r0
 801de26:	4648      	mov	r0, r9
 801de28:	4461      	add	r1, ip
 801de2a:	0049      	lsls	r1, r1, #1
 801de2c:	6001      	str	r1, [r0, #0]
 801de2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de30:	0030      	movs	r0, r6
 801de32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801de34:	f7e2 fbc4 	bl	80005c0 <__aeabi_lmul>
 801de38:	002a      	movs	r2, r5
 801de3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801de3c:	000e      	movs	r6, r1
 801de3e:	0020      	movs	r0, r4
 801de40:	9908      	ldr	r1, [sp, #32]
 801de42:	f7e2 fbbd 	bl	80005c0 <__aeabi_lmul>
 801de46:	464c      	mov	r4, r9
 801de48:	9d05      	ldr	r5, [sp, #20]
 801de4a:	1a76      	subs	r6, r6, r1
 801de4c:	9903      	ldr	r1, [sp, #12]
 801de4e:	0076      	lsls	r6, r6, #1
 801de50:	6066      	str	r6, [r4, #4]
 801de52:	1b4c      	subs	r4, r1, r5
 801de54:	9e06      	ldr	r6, [sp, #24]
 801de56:	17e1      	asrs	r1, r4, #31
 801de58:	9103      	str	r1, [sp, #12]
 801de5a:	9902      	ldr	r1, [sp, #8]
 801de5c:	46b4      	mov	ip, r6
 801de5e:	680f      	ldr	r7, [r1, #0]
 801de60:	9804      	ldr	r0, [sp, #16]
 801de62:	17fd      	asrs	r5, r7, #31
 801de64:	002b      	movs	r3, r5
 801de66:	684e      	ldr	r6, [r1, #4]
 801de68:	4460      	add	r0, ip
 801de6a:	0005      	movs	r5, r0
 801de6c:	17c0      	asrs	r0, r0, #31
 801de6e:	9005      	str	r0, [sp, #20]
 801de70:	17f0      	asrs	r0, r6, #31
 801de72:	9006      	str	r0, [sp, #24]
 801de74:	003a      	movs	r2, r7
 801de76:	0020      	movs	r0, r4
 801de78:	17e1      	asrs	r1, r4, #31
 801de7a:	9304      	str	r3, [sp, #16]
 801de7c:	f7e2 fba0 	bl	80005c0 <__aeabi_lmul>
 801de80:	0032      	movs	r2, r6
 801de82:	9108      	str	r1, [sp, #32]
 801de84:	17f3      	asrs	r3, r6, #31
 801de86:	0028      	movs	r0, r5
 801de88:	17e9      	asrs	r1, r5, #31
 801de8a:	f7e2 fb99 	bl	80005c0 <__aeabi_lmul>
 801de8e:	9808      	ldr	r0, [sp, #32]
 801de90:	002a      	movs	r2, r5
 801de92:	4684      	mov	ip, r0
 801de94:	4650      	mov	r0, sl
 801de96:	4461      	add	r1, ip
 801de98:	0049      	lsls	r1, r1, #1
 801de9a:	6001      	str	r1, [r0, #0]
 801de9c:	9b05      	ldr	r3, [sp, #20]
 801de9e:	9904      	ldr	r1, [sp, #16]
 801dea0:	0038      	movs	r0, r7
 801dea2:	f7e2 fb8d 	bl	80005c0 <__aeabi_lmul>
 801dea6:	0020      	movs	r0, r4
 801dea8:	2408      	movs	r4, #8
 801deaa:	000d      	movs	r5, r1
 801deac:	0032      	movs	r2, r6
 801deae:	9b06      	ldr	r3, [sp, #24]
 801deb0:	9903      	ldr	r1, [sp, #12]
 801deb2:	f7e2 fb85 	bl	80005c0 <__aeabi_lmul>
 801deb6:	46a4      	mov	ip, r4
 801deb8:	4650      	mov	r0, sl
 801deba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801debc:	44e3      	add	fp, ip
 801debe:	44e0      	add	r8, ip
 801dec0:	44e1      	add	r9, ip
 801dec2:	44e2      	add	sl, ip
 801dec4:	46a4      	mov	ip, r4
 801dec6:	1a6d      	subs	r5, r5, r1
 801dec8:	006d      	lsls	r5, r5, #1
 801deca:	9a01      	ldr	r2, [sp, #4]
 801decc:	6045      	str	r5, [r0, #4]
 801dece:	9807      	ldr	r0, [sp, #28]
 801ded0:	4462      	add	r2, ip
 801ded2:	3801      	subs	r0, #1
 801ded4:	9201      	str	r2, [sp, #4]
 801ded6:	9007      	str	r0, [sp, #28]
 801ded8:	9b00      	ldr	r3, [sp, #0]
 801deda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dedc:	9902      	ldr	r1, [sp, #8]
 801dede:	4694      	mov	ip, r2
 801dee0:	4463      	add	r3, ip
 801dee2:	9300      	str	r3, [sp, #0]
 801dee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dee6:	469c      	mov	ip, r3
 801dee8:	4461      	add	r1, ip
 801deea:	9102      	str	r1, [sp, #8]
 801deec:	2800      	cmp	r0, #0
 801deee:	d000      	beq.n	801def2 <arm_radix4_butterfly_q31+0x232>
 801def0:	e70e      	b.n	801dd10 <arm_radix4_butterfly_q31+0x50>
 801def2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801def4:	009b      	lsls	r3, r3, #2
 801def6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801def8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801defa:	9320      	str	r3, [sp, #128]	@ 0x80
 801defc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801defe:	2b04      	cmp	r3, #4
 801df00:	d800      	bhi.n	801df04 <arm_radix4_butterfly_q31+0x244>
 801df02:	e180      	b.n	801e206 <arm_radix4_butterfly_q31+0x546>
 801df04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801df06:	0893      	lsrs	r3, r2, #2
 801df08:	1e59      	subs	r1, r3, #1
 801df0a:	9321      	str	r3, [sp, #132]	@ 0x84
 801df0c:	00db      	lsls	r3, r3, #3
 801df0e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801df10:	00d3      	lsls	r3, r2, #3
 801df12:	9300      	str	r3, [sp, #0]
 801df14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801df16:	911a      	str	r1, [sp, #104]	@ 0x68
 801df18:	00da      	lsls	r2, r3, #3
 801df1a:	921e      	str	r2, [sp, #120]	@ 0x78
 801df1c:	011a      	lsls	r2, r3, #4
 801df1e:	921d      	str	r2, [sp, #116]	@ 0x74
 801df20:	001a      	movs	r2, r3
 801df22:	4694      	mov	ip, r2
 801df24:	005b      	lsls	r3, r3, #1
 801df26:	4463      	add	r3, ip
 801df28:	00db      	lsls	r3, r3, #3
 801df2a:	931c      	str	r3, [sp, #112]	@ 0x70
 801df2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801df2e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801df30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801df32:	9318      	str	r3, [sp, #96]	@ 0x60
 801df34:	9319      	str	r3, [sp, #100]	@ 0x64
 801df36:	9316      	str	r3, [sp, #88]	@ 0x58
 801df38:	2300      	movs	r3, #0
 801df3a:	9315      	str	r3, [sp, #84]	@ 0x54
 801df3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801df3e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801df40:	681a      	ldr	r2, [r3, #0]
 801df42:	685b      	ldr	r3, [r3, #4]
 801df44:	9205      	str	r2, [sp, #20]
 801df46:	9306      	str	r3, [sp, #24]
 801df48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df4a:	468c      	mov	ip, r1
 801df4c:	681a      	ldr	r2, [r3, #0]
 801df4e:	685b      	ldr	r3, [r3, #4]
 801df50:	9207      	str	r2, [sp, #28]
 801df52:	9308      	str	r3, [sp, #32]
 801df54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df56:	681a      	ldr	r2, [r3, #0]
 801df58:	685b      	ldr	r3, [r3, #4]
 801df5a:	9209      	str	r2, [sp, #36]	@ 0x24
 801df5c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801df5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801df60:	0013      	movs	r3, r2
 801df62:	4463      	add	r3, ip
 801df64:	4698      	mov	r8, r3
 801df66:	0013      	movs	r3, r2
 801df68:	4442      	add	r2, r8
 801df6a:	4691      	mov	r9, r2
 801df6c:	001a      	movs	r2, r3
 801df6e:	444a      	add	r2, r9
 801df70:	4692      	mov	sl, r2
 801df72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801df74:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801df76:	4293      	cmp	r3, r2
 801df78:	d800      	bhi.n	801df7c <arm_radix4_butterfly_q31+0x2bc>
 801df7a:	e0dd      	b.n	801e138 <arm_radix4_butterfly_q31+0x478>
 801df7c:	4694      	mov	ip, r2
 801df7e:	468b      	mov	fp, r1
 801df80:	4644      	mov	r4, r8
 801df82:	4655      	mov	r5, sl
 801df84:	9b07      	ldr	r3, [sp, #28]
 801df86:	17db      	asrs	r3, r3, #31
 801df88:	930c      	str	r3, [sp, #48]	@ 0x30
 801df8a:	9b08      	ldr	r3, [sp, #32]
 801df8c:	17db      	asrs	r3, r3, #31
 801df8e:	930d      	str	r3, [sp, #52]	@ 0x34
 801df90:	9b05      	ldr	r3, [sp, #20]
 801df92:	17db      	asrs	r3, r3, #31
 801df94:	930e      	str	r3, [sp, #56]	@ 0x38
 801df96:	9b06      	ldr	r3, [sp, #24]
 801df98:	17db      	asrs	r3, r3, #31
 801df9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801df9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df9e:	17db      	asrs	r3, r3, #31
 801dfa0:	9310      	str	r3, [sp, #64]	@ 0x40
 801dfa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dfa4:	17db      	asrs	r3, r3, #31
 801dfa6:	9311      	str	r3, [sp, #68]	@ 0x44
 801dfa8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dfaa:	4463      	add	r3, ip
 801dfac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dfae:	465b      	mov	r3, fp
 801dfb0:	4659      	mov	r1, fp
 801dfb2:	681a      	ldr	r2, [r3, #0]
 801dfb4:	464b      	mov	r3, r9
 801dfb6:	684f      	ldr	r7, [r1, #4]
 801dfb8:	4649      	mov	r1, r9
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	18d6      	adds	r6, r2, r3
 801dfbe:	1ad3      	subs	r3, r2, r3
 801dfc0:	9301      	str	r3, [sp, #4]
 801dfc2:	684b      	ldr	r3, [r1, #4]
 801dfc4:	18f8      	adds	r0, r7, r3
 801dfc6:	1af9      	subs	r1, r7, r3
 801dfc8:	6827      	ldr	r7, [r4, #0]
 801dfca:	9102      	str	r1, [sp, #8]
 801dfcc:	003a      	movs	r2, r7
 801dfce:	682f      	ldr	r7, [r5, #0]
 801dfd0:	46bc      	mov	ip, r7
 801dfd2:	465f      	mov	r7, fp
 801dfd4:	4462      	add	r2, ip
 801dfd6:	18b3      	adds	r3, r6, r2
 801dfd8:	109b      	asrs	r3, r3, #2
 801dfda:	603b      	str	r3, [r7, #0]
 801dfdc:	6867      	ldr	r7, [r4, #4]
 801dfde:	1ab6      	subs	r6, r6, r2
 801dfe0:	46b8      	mov	r8, r7
 801dfe2:	686f      	ldr	r7, [r5, #4]
 801dfe4:	17f2      	asrs	r2, r6, #31
 801dfe6:	46bc      	mov	ip, r7
 801dfe8:	44e0      	add	r8, ip
 801dfea:	4643      	mov	r3, r8
 801dfec:	465f      	mov	r7, fp
 801dfee:	18c1      	adds	r1, r0, r3
 801dff0:	1089      	asrs	r1, r1, #2
 801dff2:	6079      	str	r1, [r7, #4]
 801dff4:	9900      	ldr	r1, [sp, #0]
 801dff6:	4690      	mov	r8, r2
 801dff8:	468c      	mov	ip, r1
 801dffa:	6867      	ldr	r7, [r4, #4]
 801dffc:	6869      	ldr	r1, [r5, #4]
 801dffe:	44e3      	add	fp, ip
 801e000:	1a7f      	subs	r7, r7, r1
 801e002:	9703      	str	r7, [sp, #12]
 801e004:	6829      	ldr	r1, [r5, #0]
 801e006:	6827      	ldr	r7, [r4, #0]
 801e008:	1a7f      	subs	r7, r7, r1
 801e00a:	9704      	str	r7, [sp, #16]
 801e00c:	1ac7      	subs	r7, r0, r3
 801e00e:	17fa      	asrs	r2, r7, #31
 801e010:	4692      	mov	sl, r2
 801e012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e014:	9a07      	ldr	r2, [sp, #28]
 801e016:	0030      	movs	r0, r6
 801e018:	4641      	mov	r1, r8
 801e01a:	f7e2 fad1 	bl	80005c0 <__aeabi_lmul>
 801e01e:	9a08      	ldr	r2, [sp, #32]
 801e020:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e022:	9112      	str	r1, [sp, #72]	@ 0x48
 801e024:	0038      	movs	r0, r7
 801e026:	4651      	mov	r1, sl
 801e028:	f7e2 faca 	bl	80005c0 <__aeabi_lmul>
 801e02c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e02e:	9a07      	ldr	r2, [sp, #28]
 801e030:	4684      	mov	ip, r0
 801e032:	4461      	add	r1, ip
 801e034:	1049      	asrs	r1, r1, #1
 801e036:	6021      	str	r1, [r4, #0]
 801e038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e03a:	0038      	movs	r0, r7
 801e03c:	4651      	mov	r1, sl
 801e03e:	f7e2 fabf 	bl	80005c0 <__aeabi_lmul>
 801e042:	9a08      	ldr	r2, [sp, #32]
 801e044:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e046:	000f      	movs	r7, r1
 801e048:	0030      	movs	r0, r6
 801e04a:	4641      	mov	r1, r8
 801e04c:	f7e2 fab8 	bl	80005c0 <__aeabi_lmul>
 801e050:	9b00      	ldr	r3, [sp, #0]
 801e052:	9a01      	ldr	r2, [sp, #4]
 801e054:	469c      	mov	ip, r3
 801e056:	9803      	ldr	r0, [sp, #12]
 801e058:	1a7f      	subs	r7, r7, r1
 801e05a:	107f      	asrs	r7, r7, #1
 801e05c:	6067      	str	r7, [r4, #4]
 801e05e:	0016      	movs	r6, r2
 801e060:	4464      	add	r4, ip
 801e062:	4684      	mov	ip, r0
 801e064:	4466      	add	r6, ip
 801e066:	17f2      	asrs	r2, r6, #31
 801e068:	4690      	mov	r8, r2
 801e06a:	9902      	ldr	r1, [sp, #8]
 801e06c:	9f04      	ldr	r7, [sp, #16]
 801e06e:	0030      	movs	r0, r6
 801e070:	1bcf      	subs	r7, r1, r7
 801e072:	17fa      	asrs	r2, r7, #31
 801e074:	4692      	mov	sl, r2
 801e076:	4641      	mov	r1, r8
 801e078:	9a05      	ldr	r2, [sp, #20]
 801e07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e07c:	f7e2 faa0 	bl	80005c0 <__aeabi_lmul>
 801e080:	9a06      	ldr	r2, [sp, #24]
 801e082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e084:	9112      	str	r1, [sp, #72]	@ 0x48
 801e086:	0038      	movs	r0, r7
 801e088:	4651      	mov	r1, sl
 801e08a:	f7e2 fa99 	bl	80005c0 <__aeabi_lmul>
 801e08e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e090:	9a05      	ldr	r2, [sp, #20]
 801e092:	4684      	mov	ip, r0
 801e094:	4648      	mov	r0, r9
 801e096:	4461      	add	r1, ip
 801e098:	1049      	asrs	r1, r1, #1
 801e09a:	6001      	str	r1, [r0, #0]
 801e09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e09e:	0038      	movs	r0, r7
 801e0a0:	4651      	mov	r1, sl
 801e0a2:	f7e2 fa8d 	bl	80005c0 <__aeabi_lmul>
 801e0a6:	9a06      	ldr	r2, [sp, #24]
 801e0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0aa:	000f      	movs	r7, r1
 801e0ac:	0030      	movs	r0, r6
 801e0ae:	4641      	mov	r1, r8
 801e0b0:	f7e2 fa86 	bl	80005c0 <__aeabi_lmul>
 801e0b4:	464e      	mov	r6, r9
 801e0b6:	9a00      	ldr	r2, [sp, #0]
 801e0b8:	9b01      	ldr	r3, [sp, #4]
 801e0ba:	4694      	mov	ip, r2
 801e0bc:	9803      	ldr	r0, [sp, #12]
 801e0be:	1a7f      	subs	r7, r7, r1
 801e0c0:	107f      	asrs	r7, r7, #1
 801e0c2:	6077      	str	r7, [r6, #4]
 801e0c4:	1a1e      	subs	r6, r3, r0
 801e0c6:	9b04      	ldr	r3, [sp, #16]
 801e0c8:	44e1      	add	r9, ip
 801e0ca:	469c      	mov	ip, r3
 801e0cc:	17f0      	asrs	r0, r6, #31
 801e0ce:	4680      	mov	r8, r0
 801e0d0:	9902      	ldr	r1, [sp, #8]
 801e0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0d4:	4461      	add	r1, ip
 801e0d6:	17cb      	asrs	r3, r1, #31
 801e0d8:	000f      	movs	r7, r1
 801e0da:	469a      	mov	sl, r3
 801e0dc:	0030      	movs	r0, r6
 801e0de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0e0:	4641      	mov	r1, r8
 801e0e2:	f7e2 fa6d 	bl	80005c0 <__aeabi_lmul>
 801e0e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e0e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e0ea:	9101      	str	r1, [sp, #4]
 801e0ec:	0038      	movs	r0, r7
 801e0ee:	4651      	mov	r1, sl
 801e0f0:	f7e2 fa66 	bl	80005c0 <__aeabi_lmul>
 801e0f4:	9801      	ldr	r0, [sp, #4]
 801e0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0f8:	4684      	mov	ip, r0
 801e0fa:	4461      	add	r1, ip
 801e0fc:	1049      	asrs	r1, r1, #1
 801e0fe:	6029      	str	r1, [r5, #0]
 801e100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e102:	0038      	movs	r0, r7
 801e104:	4651      	mov	r1, sl
 801e106:	f7e2 fa5b 	bl	80005c0 <__aeabi_lmul>
 801e10a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e10c:	000f      	movs	r7, r1
 801e10e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e110:	0030      	movs	r0, r6
 801e112:	4641      	mov	r1, r8
 801e114:	f7e2 fa54 	bl	80005c0 <__aeabi_lmul>
 801e118:	1a7f      	subs	r7, r7, r1
 801e11a:	107f      	asrs	r7, r7, #1
 801e11c:	606f      	str	r7, [r5, #4]
 801e11e:	9a00      	ldr	r2, [sp, #0]
 801e120:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e122:	4694      	mov	ip, r2
 801e124:	4465      	add	r5, ip
 801e126:	468c      	mov	ip, r1
 801e128:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e12a:	0013      	movs	r3, r2
 801e12c:	4462      	add	r2, ip
 801e12e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e130:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e132:	429a      	cmp	r2, r3
 801e134:	d900      	bls.n	801e138 <arm_radix4_butterfly_q31+0x478>
 801e136:	e73a      	b.n	801dfae <arm_radix4_butterfly_q31+0x2ee>
 801e138:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e13a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e13c:	468c      	mov	ip, r1
 801e13e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e140:	4462      	add	r2, ip
 801e142:	468c      	mov	ip, r1
 801e144:	9216      	str	r2, [sp, #88]	@ 0x58
 801e146:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e148:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e14a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e14c:	4462      	add	r2, ip
 801e14e:	468c      	mov	ip, r1
 801e150:	9219      	str	r2, [sp, #100]	@ 0x64
 801e152:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e154:	3301      	adds	r3, #1
 801e156:	4462      	add	r2, ip
 801e158:	9218      	str	r2, [sp, #96]	@ 0x60
 801e15a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e15c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e15e:	3208      	adds	r2, #8
 801e160:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e162:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e164:	4293      	cmp	r3, r2
 801e166:	d800      	bhi.n	801e16a <arm_radix4_butterfly_q31+0x4aa>
 801e168:	e6e8      	b.n	801df3c <arm_radix4_butterfly_q31+0x27c>
 801e16a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e16c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e16e:	009b      	lsls	r3, r3, #2
 801e170:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e172:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e174:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e176:	089b      	lsrs	r3, r3, #2
 801e178:	9320      	str	r3, [sp, #128]	@ 0x80
 801e17a:	2b04      	cmp	r3, #4
 801e17c:	d900      	bls.n	801e180 <arm_radix4_butterfly_q31+0x4c0>
 801e17e:	e6c1      	b.n	801df04 <arm_radix4_butterfly_q31+0x244>
 801e180:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e182:	469a      	mov	sl, r3
 801e184:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e186:	691c      	ldr	r4, [r3, #16]
 801e188:	685a      	ldr	r2, [r3, #4]
 801e18a:	46a1      	mov	r9, r4
 801e18c:	4690      	mov	r8, r2
 801e18e:	6819      	ldr	r1, [r3, #0]
 801e190:	689a      	ldr	r2, [r3, #8]
 801e192:	699f      	ldr	r7, [r3, #24]
 801e194:	188d      	adds	r5, r1, r2
 801e196:	444d      	add	r5, r9
 801e198:	19ed      	adds	r5, r5, r7
 801e19a:	69de      	ldr	r6, [r3, #28]
 801e19c:	601d      	str	r5, [r3, #0]
 801e19e:	4645      	mov	r5, r8
 801e1a0:	46b4      	mov	ip, r6
 801e1a2:	68d8      	ldr	r0, [r3, #12]
 801e1a4:	695c      	ldr	r4, [r3, #20]
 801e1a6:	182d      	adds	r5, r5, r0
 801e1a8:	192d      	adds	r5, r5, r4
 801e1aa:	4465      	add	r5, ip
 801e1ac:	605d      	str	r5, [r3, #4]
 801e1ae:	1a8d      	subs	r5, r1, r2
 801e1b0:	444d      	add	r5, r9
 801e1b2:	1bed      	subs	r5, r5, r7
 801e1b4:	609d      	str	r5, [r3, #8]
 801e1b6:	4645      	mov	r5, r8
 801e1b8:	1a2d      	subs	r5, r5, r0
 801e1ba:	192d      	adds	r5, r5, r4
 801e1bc:	1bad      	subs	r5, r5, r6
 801e1be:	464e      	mov	r6, r9
 801e1c0:	60dd      	str	r5, [r3, #12]
 801e1c2:	180d      	adds	r5, r1, r0
 801e1c4:	1bad      	subs	r5, r5, r6
 801e1c6:	4666      	mov	r6, ip
 801e1c8:	1bad      	subs	r5, r5, r6
 801e1ca:	611d      	str	r5, [r3, #16]
 801e1cc:	4645      	mov	r5, r8
 801e1ce:	1aad      	subs	r5, r5, r2
 801e1d0:	4442      	add	r2, r8
 801e1d2:	1b12      	subs	r2, r2, r4
 801e1d4:	1bd2      	subs	r2, r2, r7
 801e1d6:	1a08      	subs	r0, r1, r0
 801e1d8:	61da      	str	r2, [r3, #28]
 801e1da:	4649      	mov	r1, r9
 801e1dc:	2201      	movs	r2, #1
 801e1de:	1a41      	subs	r1, r0, r1
 801e1e0:	4252      	negs	r2, r2
 801e1e2:	4461      	add	r1, ip
 801e1e4:	4694      	mov	ip, r2
 801e1e6:	44e2      	add	sl, ip
 801e1e8:	4652      	mov	r2, sl
 801e1ea:	1b2d      	subs	r5, r5, r4
 801e1ec:	19ed      	adds	r5, r5, r7
 801e1ee:	615d      	str	r5, [r3, #20]
 801e1f0:	6199      	str	r1, [r3, #24]
 801e1f2:	3320      	adds	r3, #32
 801e1f4:	2a00      	cmp	r2, #0
 801e1f6:	d1c6      	bne.n	801e186 <arm_radix4_butterfly_q31+0x4c6>
 801e1f8:	b027      	add	sp, #156	@ 0x9c
 801e1fa:	bc3c      	pop	{r2, r3, r4, r5}
 801e1fc:	4690      	mov	r8, r2
 801e1fe:	4699      	mov	r9, r3
 801e200:	46a2      	mov	sl, r4
 801e202:	46ab      	mov	fp, r5
 801e204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e206:	469a      	mov	sl, r3
 801e208:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e20a:	e7bc      	b.n	801e186 <arm_radix4_butterfly_q31+0x4c6>

0801e20c <arm_radix4_butterfly_inverse_q31>:
 801e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e20e:	464d      	mov	r5, r9
 801e210:	4644      	mov	r4, r8
 801e212:	465f      	mov	r7, fp
 801e214:	4656      	mov	r6, sl
 801e216:	b4f0      	push	{r4, r5, r6, r7}
 801e218:	b0a7      	sub	sp, #156	@ 0x9c
 801e21a:	469c      	mov	ip, r3
 801e21c:	9114      	str	r1, [sp, #80]	@ 0x50
 801e21e:	0889      	lsrs	r1, r1, #2
 801e220:	9310      	str	r3, [sp, #64]	@ 0x40
 801e222:	00cb      	lsls	r3, r1, #3
 801e224:	0015      	movs	r5, r2
 801e226:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e228:	18c2      	adds	r2, r0, r3
 801e22a:	000c      	movs	r4, r1
 801e22c:	9124      	str	r1, [sp, #144]	@ 0x90
 801e22e:	18d1      	adds	r1, r2, r3
 801e230:	468b      	mov	fp, r1
 801e232:	469a      	mov	sl, r3
 801e234:	4663      	mov	r3, ip
 801e236:	44da      	add	sl, fp
 801e238:	46d0      	mov	r8, sl
 801e23a:	4681      	mov	r9, r0
 801e23c:	4692      	mov	sl, r2
 801e23e:	0119      	lsls	r1, r3, #4
 801e240:	910d      	str	r1, [sp, #52]	@ 0x34
 801e242:	00d9      	lsls	r1, r3, #3
 801e244:	005b      	lsls	r3, r3, #1
 801e246:	4463      	add	r3, ip
 801e248:	910e      	str	r1, [sp, #56]	@ 0x38
 801e24a:	00d9      	lsls	r1, r3, #3
 801e24c:	9022      	str	r0, [sp, #136]	@ 0x88
 801e24e:	9025      	str	r0, [sp, #148]	@ 0x94
 801e250:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e252:	9502      	str	r5, [sp, #8]
 801e254:	9500      	str	r5, [sp, #0]
 801e256:	9501      	str	r5, [sp, #4]
 801e258:	9409      	str	r4, [sp, #36]	@ 0x24
 801e25a:	464b      	mov	r3, r9
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	4652      	mov	r2, sl
 801e260:	111c      	asrs	r4, r3, #4
 801e262:	465b      	mov	r3, fp
 801e264:	4648      	mov	r0, r9
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	6812      	ldr	r2, [r2, #0]
 801e26a:	6840      	ldr	r0, [r0, #4]
 801e26c:	111b      	asrs	r3, r3, #4
 801e26e:	18e7      	adds	r7, r4, r3
 801e270:	1ae3      	subs	r3, r4, r3
 801e272:	1114      	asrs	r4, r2, #4
 801e274:	4642      	mov	r2, r8
 801e276:	1105      	asrs	r5, r0, #4
 801e278:	4658      	mov	r0, fp
 801e27a:	6812      	ldr	r2, [r2, #0]
 801e27c:	6840      	ldr	r0, [r0, #4]
 801e27e:	9303      	str	r3, [sp, #12]
 801e280:	1113      	asrs	r3, r2, #4
 801e282:	18e2      	adds	r2, r4, r3
 801e284:	1103      	asrs	r3, r0, #4
 801e286:	18ee      	adds	r6, r5, r3
 801e288:	1ae8      	subs	r0, r5, r3
 801e28a:	464d      	mov	r5, r9
 801e28c:	18bb      	adds	r3, r7, r2
 801e28e:	602b      	str	r3, [r5, #0]
 801e290:	4641      	mov	r1, r8
 801e292:	4655      	mov	r5, sl
 801e294:	6849      	ldr	r1, [r1, #4]
 801e296:	686d      	ldr	r5, [r5, #4]
 801e298:	110b      	asrs	r3, r1, #4
 801e29a:	112d      	asrs	r5, r5, #4
 801e29c:	18eb      	adds	r3, r5, r3
 801e29e:	464d      	mov	r5, r9
 801e2a0:	18f1      	adds	r1, r6, r3
 801e2a2:	6069      	str	r1, [r5, #4]
 801e2a4:	4655      	mov	r5, sl
 801e2a6:	686d      	ldr	r5, [r5, #4]
 801e2a8:	9004      	str	r0, [sp, #16]
 801e2aa:	112c      	asrs	r4, r5, #4
 801e2ac:	4645      	mov	r5, r8
 801e2ae:	686d      	ldr	r5, [r5, #4]
 801e2b0:	1129      	asrs	r1, r5, #4
 801e2b2:	1a65      	subs	r5, r4, r1
 801e2b4:	4651      	mov	r1, sl
 801e2b6:	6809      	ldr	r1, [r1, #0]
 801e2b8:	1abc      	subs	r4, r7, r2
 801e2ba:	1108      	asrs	r0, r1, #4
 801e2bc:	4641      	mov	r1, r8
 801e2be:	17e2      	asrs	r2, r4, #31
 801e2c0:	6809      	ldr	r1, [r1, #0]
 801e2c2:	9207      	str	r2, [sp, #28]
 801e2c4:	9a01      	ldr	r2, [sp, #4]
 801e2c6:	1109      	asrs	r1, r1, #4
 801e2c8:	6817      	ldr	r7, [r2, #0]
 801e2ca:	1a41      	subs	r1, r0, r1
 801e2cc:	9106      	str	r1, [sp, #24]
 801e2ce:	0039      	movs	r1, r7
 801e2d0:	17ff      	asrs	r7, r7, #31
 801e2d2:	0038      	movs	r0, r7
 801e2d4:	9505      	str	r5, [sp, #20]
 801e2d6:	1af5      	subs	r5, r6, r3
 801e2d8:	17ef      	asrs	r7, r5, #31
 801e2da:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e2dc:	6857      	ldr	r7, [r2, #4]
 801e2de:	0003      	movs	r3, r0
 801e2e0:	17fe      	asrs	r6, r7, #31
 801e2e2:	000a      	movs	r2, r1
 801e2e4:	9108      	str	r1, [sp, #32]
 801e2e6:	900a      	str	r0, [sp, #40]	@ 0x28
 801e2e8:	17e1      	asrs	r1, r4, #31
 801e2ea:	0020      	movs	r0, r4
 801e2ec:	960c      	str	r6, [sp, #48]	@ 0x30
 801e2ee:	f7e2 f967 	bl	80005c0 <__aeabi_lmul>
 801e2f2:	003a      	movs	r2, r7
 801e2f4:	17fb      	asrs	r3, r7, #31
 801e2f6:	000e      	movs	r6, r1
 801e2f8:	0028      	movs	r0, r5
 801e2fa:	17e9      	asrs	r1, r5, #31
 801e2fc:	f7e2 f960 	bl	80005c0 <__aeabi_lmul>
 801e300:	4653      	mov	r3, sl
 801e302:	1a76      	subs	r6, r6, r1
 801e304:	0076      	lsls	r6, r6, #1
 801e306:	601e      	str	r6, [r3, #0]
 801e308:	002a      	movs	r2, r5
 801e30a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e30c:	9808      	ldr	r0, [sp, #32]
 801e30e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e310:	f7e2 f956 	bl	80005c0 <__aeabi_lmul>
 801e314:	003a      	movs	r2, r7
 801e316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e318:	000d      	movs	r5, r1
 801e31a:	0020      	movs	r0, r4
 801e31c:	9907      	ldr	r1, [sp, #28]
 801e31e:	f7e2 f94f 	bl	80005c0 <__aeabi_lmul>
 801e322:	4657      	mov	r7, sl
 801e324:	186d      	adds	r5, r5, r1
 801e326:	006d      	lsls	r5, r5, #1
 801e328:	607d      	str	r5, [r7, #4]
 801e32a:	9b03      	ldr	r3, [sp, #12]
 801e32c:	9e06      	ldr	r6, [sp, #24]
 801e32e:	9d05      	ldr	r5, [sp, #20]
 801e330:	46b4      	mov	ip, r6
 801e332:	1b5d      	subs	r5, r3, r5
 801e334:	9b00      	ldr	r3, [sp, #0]
 801e336:	17ef      	asrs	r7, r5, #31
 801e338:	0039      	movs	r1, r7
 801e33a:	681f      	ldr	r7, [r3, #0]
 801e33c:	17fc      	asrs	r4, r7, #31
 801e33e:	0020      	movs	r0, r4
 801e340:	9c04      	ldr	r4, [sp, #16]
 801e342:	4464      	add	r4, ip
 801e344:	17e6      	asrs	r6, r4, #31
 801e346:	9407      	str	r4, [sp, #28]
 801e348:	9608      	str	r6, [sp, #32]
 801e34a:	685e      	ldr	r6, [r3, #4]
 801e34c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e34e:	17f2      	asrs	r2, r6, #31
 801e350:	0003      	movs	r3, r0
 801e352:	920c      	str	r2, [sp, #48]	@ 0x30
 801e354:	0028      	movs	r0, r5
 801e356:	003a      	movs	r2, r7
 801e358:	910a      	str	r1, [sp, #40]	@ 0x28
 801e35a:	f7e2 f931 	bl	80005c0 <__aeabi_lmul>
 801e35e:	0032      	movs	r2, r6
 801e360:	17f3      	asrs	r3, r6, #31
 801e362:	9807      	ldr	r0, [sp, #28]
 801e364:	000c      	movs	r4, r1
 801e366:	9908      	ldr	r1, [sp, #32]
 801e368:	f7e2 f92a 	bl	80005c0 <__aeabi_lmul>
 801e36c:	4658      	mov	r0, fp
 801e36e:	1a64      	subs	r4, r4, r1
 801e370:	0064      	lsls	r4, r4, #1
 801e372:	9a07      	ldr	r2, [sp, #28]
 801e374:	6004      	str	r4, [r0, #0]
 801e376:	9b08      	ldr	r3, [sp, #32]
 801e378:	0038      	movs	r0, r7
 801e37a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e37c:	f7e2 f920 	bl	80005c0 <__aeabi_lmul>
 801e380:	0032      	movs	r2, r6
 801e382:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e384:	000c      	movs	r4, r1
 801e386:	0028      	movs	r0, r5
 801e388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e38a:	f7e2 f919 	bl	80005c0 <__aeabi_lmul>
 801e38e:	9d05      	ldr	r5, [sp, #20]
 801e390:	465f      	mov	r7, fp
 801e392:	46ac      	mov	ip, r5
 801e394:	1864      	adds	r4, r4, r1
 801e396:	9903      	ldr	r1, [sp, #12]
 801e398:	0064      	lsls	r4, r4, #1
 801e39a:	4461      	add	r1, ip
 801e39c:	607c      	str	r4, [r7, #4]
 801e39e:	000c      	movs	r4, r1
 801e3a0:	17c9      	asrs	r1, r1, #31
 801e3a2:	9105      	str	r1, [sp, #20]
 801e3a4:	9902      	ldr	r1, [sp, #8]
 801e3a6:	9804      	ldr	r0, [sp, #16]
 801e3a8:	680d      	ldr	r5, [r1, #0]
 801e3aa:	9e06      	ldr	r6, [sp, #24]
 801e3ac:	002b      	movs	r3, r5
 801e3ae:	17ed      	asrs	r5, r5, #31
 801e3b0:	684f      	ldr	r7, [r1, #4]
 801e3b2:	9503      	str	r5, [sp, #12]
 801e3b4:	1b85      	subs	r5, r0, r6
 801e3b6:	17e8      	asrs	r0, r5, #31
 801e3b8:	001a      	movs	r2, r3
 801e3ba:	9006      	str	r0, [sp, #24]
 801e3bc:	17fe      	asrs	r6, r7, #31
 801e3be:	9304      	str	r3, [sp, #16]
 801e3c0:	0020      	movs	r0, r4
 801e3c2:	9b03      	ldr	r3, [sp, #12]
 801e3c4:	17e1      	asrs	r1, r4, #31
 801e3c6:	9607      	str	r6, [sp, #28]
 801e3c8:	f7e2 f8fa 	bl	80005c0 <__aeabi_lmul>
 801e3cc:	003a      	movs	r2, r7
 801e3ce:	000e      	movs	r6, r1
 801e3d0:	17fb      	asrs	r3, r7, #31
 801e3d2:	0028      	movs	r0, r5
 801e3d4:	17e9      	asrs	r1, r5, #31
 801e3d6:	f7e2 f8f3 	bl	80005c0 <__aeabi_lmul>
 801e3da:	4640      	mov	r0, r8
 801e3dc:	1a76      	subs	r6, r6, r1
 801e3de:	0076      	lsls	r6, r6, #1
 801e3e0:	002a      	movs	r2, r5
 801e3e2:	9b06      	ldr	r3, [sp, #24]
 801e3e4:	6006      	str	r6, [r0, #0]
 801e3e6:	9903      	ldr	r1, [sp, #12]
 801e3e8:	9804      	ldr	r0, [sp, #16]
 801e3ea:	f7e2 f8e9 	bl	80005c0 <__aeabi_lmul>
 801e3ee:	0020      	movs	r0, r4
 801e3f0:	2408      	movs	r4, #8
 801e3f2:	9b07      	ldr	r3, [sp, #28]
 801e3f4:	000d      	movs	r5, r1
 801e3f6:	003a      	movs	r2, r7
 801e3f8:	9905      	ldr	r1, [sp, #20]
 801e3fa:	f7e2 f8e1 	bl	80005c0 <__aeabi_lmul>
 801e3fe:	4640      	mov	r0, r8
 801e400:	46a4      	mov	ip, r4
 801e402:	186d      	adds	r5, r5, r1
 801e404:	006d      	lsls	r5, r5, #1
 801e406:	6045      	str	r5, [r0, #4]
 801e408:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e40a:	44e1      	add	r9, ip
 801e40c:	3801      	subs	r0, #1
 801e40e:	9009      	str	r0, [sp, #36]	@ 0x24
 801e410:	9a01      	ldr	r2, [sp, #4]
 801e412:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e414:	44e2      	add	sl, ip
 801e416:	44e3      	add	fp, ip
 801e418:	44e0      	add	r8, ip
 801e41a:	46a4      	mov	ip, r4
 801e41c:	4462      	add	r2, ip
 801e41e:	9201      	str	r2, [sp, #4]
 801e420:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e422:	9b00      	ldr	r3, [sp, #0]
 801e424:	4694      	mov	ip, r2
 801e426:	4463      	add	r3, ip
 801e428:	9300      	str	r3, [sp, #0]
 801e42a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e42c:	9902      	ldr	r1, [sp, #8]
 801e42e:	469c      	mov	ip, r3
 801e430:	4461      	add	r1, ip
 801e432:	9102      	str	r1, [sp, #8]
 801e434:	2800      	cmp	r0, #0
 801e436:	d000      	beq.n	801e43a <arm_radix4_butterfly_inverse_q31+0x22e>
 801e438:	e70f      	b.n	801e25a <arm_radix4_butterfly_inverse_q31+0x4e>
 801e43a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e43c:	009b      	lsls	r3, r3, #2
 801e43e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e440:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e442:	9320      	str	r3, [sp, #128]	@ 0x80
 801e444:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e446:	2b04      	cmp	r3, #4
 801e448:	d800      	bhi.n	801e44c <arm_radix4_butterfly_inverse_q31+0x240>
 801e44a:	e17c      	b.n	801e746 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e44c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e44e:	0893      	lsrs	r3, r2, #2
 801e450:	1e59      	subs	r1, r3, #1
 801e452:	9321      	str	r3, [sp, #132]	@ 0x84
 801e454:	00db      	lsls	r3, r3, #3
 801e456:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e458:	00d3      	lsls	r3, r2, #3
 801e45a:	9300      	str	r3, [sp, #0]
 801e45c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e45e:	911a      	str	r1, [sp, #104]	@ 0x68
 801e460:	00da      	lsls	r2, r3, #3
 801e462:	921e      	str	r2, [sp, #120]	@ 0x78
 801e464:	011a      	lsls	r2, r3, #4
 801e466:	921d      	str	r2, [sp, #116]	@ 0x74
 801e468:	001a      	movs	r2, r3
 801e46a:	4694      	mov	ip, r2
 801e46c:	005b      	lsls	r3, r3, #1
 801e46e:	4463      	add	r3, ip
 801e470:	00db      	lsls	r3, r3, #3
 801e472:	931c      	str	r3, [sp, #112]	@ 0x70
 801e474:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e476:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e478:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e47a:	9318      	str	r3, [sp, #96]	@ 0x60
 801e47c:	9319      	str	r3, [sp, #100]	@ 0x64
 801e47e:	9316      	str	r3, [sp, #88]	@ 0x58
 801e480:	2300      	movs	r3, #0
 801e482:	9315      	str	r3, [sp, #84]	@ 0x54
 801e484:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e486:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e488:	681a      	ldr	r2, [r3, #0]
 801e48a:	685b      	ldr	r3, [r3, #4]
 801e48c:	9205      	str	r2, [sp, #20]
 801e48e:	9306      	str	r3, [sp, #24]
 801e490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e492:	468c      	mov	ip, r1
 801e494:	681a      	ldr	r2, [r3, #0]
 801e496:	685b      	ldr	r3, [r3, #4]
 801e498:	9207      	str	r2, [sp, #28]
 801e49a:	9308      	str	r3, [sp, #32]
 801e49c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e49e:	681a      	ldr	r2, [r3, #0]
 801e4a0:	685b      	ldr	r3, [r3, #4]
 801e4a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e4a4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4a8:	0013      	movs	r3, r2
 801e4aa:	4463      	add	r3, ip
 801e4ac:	4698      	mov	r8, r3
 801e4ae:	0013      	movs	r3, r2
 801e4b0:	4442      	add	r2, r8
 801e4b2:	4691      	mov	r9, r2
 801e4b4:	001a      	movs	r2, r3
 801e4b6:	444a      	add	r2, r9
 801e4b8:	4692      	mov	sl, r2
 801e4ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e4bc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e4be:	4293      	cmp	r3, r2
 801e4c0:	d800      	bhi.n	801e4c4 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e4c2:	e0d9      	b.n	801e678 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e4c4:	4694      	mov	ip, r2
 801e4c6:	4644      	mov	r4, r8
 801e4c8:	4655      	mov	r5, sl
 801e4ca:	4688      	mov	r8, r1
 801e4cc:	9b07      	ldr	r3, [sp, #28]
 801e4ce:	17db      	asrs	r3, r3, #31
 801e4d0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e4d2:	9b08      	ldr	r3, [sp, #32]
 801e4d4:	17db      	asrs	r3, r3, #31
 801e4d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e4d8:	9b05      	ldr	r3, [sp, #20]
 801e4da:	17db      	asrs	r3, r3, #31
 801e4dc:	930e      	str	r3, [sp, #56]	@ 0x38
 801e4de:	9b06      	ldr	r3, [sp, #24]
 801e4e0:	17db      	asrs	r3, r3, #31
 801e4e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4e6:	17db      	asrs	r3, r3, #31
 801e4e8:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4ec:	17db      	asrs	r3, r3, #31
 801e4ee:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4f2:	4463      	add	r3, ip
 801e4f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4f6:	4643      	mov	r3, r8
 801e4f8:	4641      	mov	r1, r8
 801e4fa:	681a      	ldr	r2, [r3, #0]
 801e4fc:	464b      	mov	r3, r9
 801e4fe:	684f      	ldr	r7, [r1, #4]
 801e500:	4649      	mov	r1, r9
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	18d6      	adds	r6, r2, r3
 801e506:	1ad3      	subs	r3, r2, r3
 801e508:	9301      	str	r3, [sp, #4]
 801e50a:	684b      	ldr	r3, [r1, #4]
 801e50c:	1af9      	subs	r1, r7, r3
 801e50e:	9102      	str	r1, [sp, #8]
 801e510:	6829      	ldr	r1, [r5, #0]
 801e512:	18f8      	adds	r0, r7, r3
 801e514:	468c      	mov	ip, r1
 801e516:	6827      	ldr	r7, [r4, #0]
 801e518:	4467      	add	r7, ip
 801e51a:	003a      	movs	r2, r7
 801e51c:	19f3      	adds	r3, r6, r7
 801e51e:	4647      	mov	r7, r8
 801e520:	109b      	asrs	r3, r3, #2
 801e522:	603b      	str	r3, [r7, #0]
 801e524:	6869      	ldr	r1, [r5, #4]
 801e526:	6867      	ldr	r7, [r4, #4]
 801e528:	468c      	mov	ip, r1
 801e52a:	4467      	add	r7, ip
 801e52c:	003b      	movs	r3, r7
 801e52e:	19c1      	adds	r1, r0, r7
 801e530:	4647      	mov	r7, r8
 801e532:	1ab6      	subs	r6, r6, r2
 801e534:	1089      	asrs	r1, r1, #2
 801e536:	6079      	str	r1, [r7, #4]
 801e538:	17f2      	asrs	r2, r6, #31
 801e53a:	9900      	ldr	r1, [sp, #0]
 801e53c:	4692      	mov	sl, r2
 801e53e:	468c      	mov	ip, r1
 801e540:	6867      	ldr	r7, [r4, #4]
 801e542:	6869      	ldr	r1, [r5, #4]
 801e544:	44e0      	add	r8, ip
 801e546:	1a7f      	subs	r7, r7, r1
 801e548:	9703      	str	r7, [sp, #12]
 801e54a:	6821      	ldr	r1, [r4, #0]
 801e54c:	682f      	ldr	r7, [r5, #0]
 801e54e:	1bc9      	subs	r1, r1, r7
 801e550:	1ac7      	subs	r7, r0, r3
 801e552:	17fa      	asrs	r2, r7, #31
 801e554:	4693      	mov	fp, r2
 801e556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e558:	9a07      	ldr	r2, [sp, #28]
 801e55a:	9104      	str	r1, [sp, #16]
 801e55c:	0030      	movs	r0, r6
 801e55e:	4651      	mov	r1, sl
 801e560:	f7e2 f82e 	bl	80005c0 <__aeabi_lmul>
 801e564:	9a08      	ldr	r2, [sp, #32]
 801e566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e568:	9112      	str	r1, [sp, #72]	@ 0x48
 801e56a:	0038      	movs	r0, r7
 801e56c:	4659      	mov	r1, fp
 801e56e:	f7e2 f827 	bl	80005c0 <__aeabi_lmul>
 801e572:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e574:	9a07      	ldr	r2, [sp, #28]
 801e576:	1a41      	subs	r1, r0, r1
 801e578:	1049      	asrs	r1, r1, #1
 801e57a:	6021      	str	r1, [r4, #0]
 801e57c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e57e:	0038      	movs	r0, r7
 801e580:	4659      	mov	r1, fp
 801e582:	f7e2 f81d 	bl	80005c0 <__aeabi_lmul>
 801e586:	9a08      	ldr	r2, [sp, #32]
 801e588:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e58a:	000f      	movs	r7, r1
 801e58c:	0030      	movs	r0, r6
 801e58e:	4651      	mov	r1, sl
 801e590:	f7e2 f816 	bl	80005c0 <__aeabi_lmul>
 801e594:	9b00      	ldr	r3, [sp, #0]
 801e596:	187f      	adds	r7, r7, r1
 801e598:	469c      	mov	ip, r3
 801e59a:	107f      	asrs	r7, r7, #1
 801e59c:	6067      	str	r7, [r4, #4]
 801e59e:	9a01      	ldr	r2, [sp, #4]
 801e5a0:	9f03      	ldr	r7, [sp, #12]
 801e5a2:	9802      	ldr	r0, [sp, #8]
 801e5a4:	1bd7      	subs	r7, r2, r7
 801e5a6:	17fe      	asrs	r6, r7, #31
 801e5a8:	0031      	movs	r1, r6
 801e5aa:	9e04      	ldr	r6, [sp, #16]
 801e5ac:	4682      	mov	sl, r0
 801e5ae:	4464      	add	r4, ip
 801e5b0:	46b4      	mov	ip, r6
 801e5b2:	44e2      	add	sl, ip
 801e5b4:	4652      	mov	r2, sl
 801e5b6:	17d2      	asrs	r2, r2, #31
 801e5b8:	4693      	mov	fp, r2
 801e5ba:	0038      	movs	r0, r7
 801e5bc:	9a05      	ldr	r2, [sp, #20]
 801e5be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5c0:	9112      	str	r1, [sp, #72]	@ 0x48
 801e5c2:	f7e1 fffd 	bl	80005c0 <__aeabi_lmul>
 801e5c6:	9a06      	ldr	r2, [sp, #24]
 801e5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5ca:	000e      	movs	r6, r1
 801e5cc:	4650      	mov	r0, sl
 801e5ce:	4659      	mov	r1, fp
 801e5d0:	f7e1 fff6 	bl	80005c0 <__aeabi_lmul>
 801e5d4:	4648      	mov	r0, r9
 801e5d6:	1a76      	subs	r6, r6, r1
 801e5d8:	1076      	asrs	r6, r6, #1
 801e5da:	6006      	str	r6, [r0, #0]
 801e5dc:	9a05      	ldr	r2, [sp, #20]
 801e5de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5e0:	4650      	mov	r0, sl
 801e5e2:	4659      	mov	r1, fp
 801e5e4:	f7e1 ffec 	bl	80005c0 <__aeabi_lmul>
 801e5e8:	9a06      	ldr	r2, [sp, #24]
 801e5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5ec:	000e      	movs	r6, r1
 801e5ee:	0038      	movs	r0, r7
 801e5f0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e5f2:	f7e1 ffe5 	bl	80005c0 <__aeabi_lmul>
 801e5f6:	9a00      	ldr	r2, [sp, #0]
 801e5f8:	9f03      	ldr	r7, [sp, #12]
 801e5fa:	4694      	mov	ip, r2
 801e5fc:	1876      	adds	r6, r6, r1
 801e5fe:	4649      	mov	r1, r9
 801e600:	44e1      	add	r9, ip
 801e602:	46bc      	mov	ip, r7
 801e604:	9b01      	ldr	r3, [sp, #4]
 801e606:	1076      	asrs	r6, r6, #1
 801e608:	4463      	add	r3, ip
 801e60a:	17df      	asrs	r7, r3, #31
 801e60c:	604e      	str	r6, [r1, #4]
 801e60e:	46ba      	mov	sl, r7
 801e610:	001e      	movs	r6, r3
 801e612:	9802      	ldr	r0, [sp, #8]
 801e614:	9b04      	ldr	r3, [sp, #16]
 801e616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e618:	1ac7      	subs	r7, r0, r3
 801e61a:	17fb      	asrs	r3, r7, #31
 801e61c:	469b      	mov	fp, r3
 801e61e:	0030      	movs	r0, r6
 801e620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e622:	4651      	mov	r1, sl
 801e624:	f7e1 ffcc 	bl	80005c0 <__aeabi_lmul>
 801e628:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e62a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e62c:	9101      	str	r1, [sp, #4]
 801e62e:	0038      	movs	r0, r7
 801e630:	4659      	mov	r1, fp
 801e632:	f7e1 ffc5 	bl	80005c0 <__aeabi_lmul>
 801e636:	9801      	ldr	r0, [sp, #4]
 801e638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e63a:	1a41      	subs	r1, r0, r1
 801e63c:	1049      	asrs	r1, r1, #1
 801e63e:	6029      	str	r1, [r5, #0]
 801e640:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e642:	0038      	movs	r0, r7
 801e644:	4659      	mov	r1, fp
 801e646:	f7e1 ffbb 	bl	80005c0 <__aeabi_lmul>
 801e64a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e64c:	000f      	movs	r7, r1
 801e64e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e650:	0030      	movs	r0, r6
 801e652:	4651      	mov	r1, sl
 801e654:	f7e1 ffb4 	bl	80005c0 <__aeabi_lmul>
 801e658:	187f      	adds	r7, r7, r1
 801e65a:	107f      	asrs	r7, r7, #1
 801e65c:	606f      	str	r7, [r5, #4]
 801e65e:	9a00      	ldr	r2, [sp, #0]
 801e660:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e662:	4694      	mov	ip, r2
 801e664:	4465      	add	r5, ip
 801e666:	468c      	mov	ip, r1
 801e668:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e66a:	0013      	movs	r3, r2
 801e66c:	4462      	add	r2, ip
 801e66e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e670:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e672:	429a      	cmp	r2, r3
 801e674:	d900      	bls.n	801e678 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e676:	e73e      	b.n	801e4f6 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e678:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e67a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e67c:	468c      	mov	ip, r1
 801e67e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e680:	4462      	add	r2, ip
 801e682:	468c      	mov	ip, r1
 801e684:	9216      	str	r2, [sp, #88]	@ 0x58
 801e686:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e688:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e68a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e68c:	4462      	add	r2, ip
 801e68e:	468c      	mov	ip, r1
 801e690:	9219      	str	r2, [sp, #100]	@ 0x64
 801e692:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e694:	3301      	adds	r3, #1
 801e696:	4462      	add	r2, ip
 801e698:	9218      	str	r2, [sp, #96]	@ 0x60
 801e69a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e69c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e69e:	3208      	adds	r2, #8
 801e6a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e6a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e6a4:	4293      	cmp	r3, r2
 801e6a6:	d800      	bhi.n	801e6aa <arm_radix4_butterfly_inverse_q31+0x49e>
 801e6a8:	e6ec      	b.n	801e484 <arm_radix4_butterfly_inverse_q31+0x278>
 801e6aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e6ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e6ae:	009b      	lsls	r3, r3, #2
 801e6b0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e6b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6b4:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e6b6:	089b      	lsrs	r3, r3, #2
 801e6b8:	9320      	str	r3, [sp, #128]	@ 0x80
 801e6ba:	2b04      	cmp	r3, #4
 801e6bc:	d900      	bls.n	801e6c0 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e6be:	e6c5      	b.n	801e44c <arm_radix4_butterfly_inverse_q31+0x240>
 801e6c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e6c2:	469a      	mov	sl, r3
 801e6c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e6c6:	681a      	ldr	r2, [r3, #0]
 801e6c8:	6918      	ldr	r0, [r3, #16]
 801e6ca:	4691      	mov	r9, r2
 801e6cc:	464c      	mov	r4, r9
 801e6ce:	4680      	mov	r8, r0
 801e6d0:	69de      	ldr	r6, [r3, #28]
 801e6d2:	689d      	ldr	r5, [r3, #8]
 801e6d4:	46b4      	mov	ip, r6
 801e6d6:	6998      	ldr	r0, [r3, #24]
 801e6d8:	1964      	adds	r4, r4, r5
 801e6da:	6859      	ldr	r1, [r3, #4]
 801e6dc:	68da      	ldr	r2, [r3, #12]
 801e6de:	4444      	add	r4, r8
 801e6e0:	695f      	ldr	r7, [r3, #20]
 801e6e2:	1824      	adds	r4, r4, r0
 801e6e4:	601c      	str	r4, [r3, #0]
 801e6e6:	188c      	adds	r4, r1, r2
 801e6e8:	19e4      	adds	r4, r4, r7
 801e6ea:	4464      	add	r4, ip
 801e6ec:	605c      	str	r4, [r3, #4]
 801e6ee:	464c      	mov	r4, r9
 801e6f0:	1b64      	subs	r4, r4, r5
 801e6f2:	4444      	add	r4, r8
 801e6f4:	1a24      	subs	r4, r4, r0
 801e6f6:	609c      	str	r4, [r3, #8]
 801e6f8:	1a8c      	subs	r4, r1, r2
 801e6fa:	19e4      	adds	r4, r4, r7
 801e6fc:	1ba4      	subs	r4, r4, r6
 801e6fe:	60dc      	str	r4, [r3, #12]
 801e700:	464c      	mov	r4, r9
 801e702:	4646      	mov	r6, r8
 801e704:	1aa4      	subs	r4, r4, r2
 801e706:	1ba4      	subs	r4, r4, r6
 801e708:	4464      	add	r4, ip
 801e70a:	611c      	str	r4, [r3, #16]
 801e70c:	194c      	adds	r4, r1, r5
 801e70e:	1be4      	subs	r4, r4, r7
 801e710:	1a24      	subs	r4, r4, r0
 801e712:	615c      	str	r4, [r3, #20]
 801e714:	4644      	mov	r4, r8
 801e716:	4666      	mov	r6, ip
 801e718:	444a      	add	r2, r9
 801e71a:	1b12      	subs	r2, r2, r4
 801e71c:	1b92      	subs	r2, r2, r6
 801e71e:	619a      	str	r2, [r3, #24]
 801e720:	1b4a      	subs	r2, r1, r5
 801e722:	1bd1      	subs	r1, r2, r7
 801e724:	2201      	movs	r2, #1
 801e726:	4252      	negs	r2, r2
 801e728:	4694      	mov	ip, r2
 801e72a:	44e2      	add	sl, ip
 801e72c:	4652      	mov	r2, sl
 801e72e:	1809      	adds	r1, r1, r0
 801e730:	61d9      	str	r1, [r3, #28]
 801e732:	3320      	adds	r3, #32
 801e734:	2a00      	cmp	r2, #0
 801e736:	d1c6      	bne.n	801e6c6 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e738:	b027      	add	sp, #156	@ 0x9c
 801e73a:	bc3c      	pop	{r2, r3, r4, r5}
 801e73c:	4690      	mov	r8, r2
 801e73e:	4699      	mov	r9, r3
 801e740:	46a2      	mov	sl, r4
 801e742:	46ab      	mov	fp, r5
 801e744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e746:	469a      	mov	sl, r3
 801e748:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e74a:	e7bc      	b.n	801e6c6 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e74c <arm_cmplx_mag_squared_q31>:
 801e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e74e:	464f      	mov	r7, r9
 801e750:	4646      	mov	r6, r8
 801e752:	0004      	movs	r4, r0
 801e754:	b4c0      	push	{r6, r7}
 801e756:	0016      	movs	r6, r2
 801e758:	000f      	movs	r7, r1
 801e75a:	2a00      	cmp	r2, #0
 801e75c:	d018      	beq.n	801e790 <arm_cmplx_mag_squared_q31+0x44>
 801e75e:	6823      	ldr	r3, [r4, #0]
 801e760:	6822      	ldr	r2, [r4, #0]
 801e762:	17d9      	asrs	r1, r3, #31
 801e764:	6863      	ldr	r3, [r4, #4]
 801e766:	0010      	movs	r0, r2
 801e768:	4698      	mov	r8, r3
 801e76a:	17db      	asrs	r3, r3, #31
 801e76c:	4699      	mov	r9, r3
 801e76e:	000b      	movs	r3, r1
 801e770:	f7e1 ff26 	bl	80005c0 <__aeabi_lmul>
 801e774:	4642      	mov	r2, r8
 801e776:	104d      	asrs	r5, r1, #1
 801e778:	464b      	mov	r3, r9
 801e77a:	4640      	mov	r0, r8
 801e77c:	4649      	mov	r1, r9
 801e77e:	f7e1 ff1f 	bl	80005c0 <__aeabi_lmul>
 801e782:	1049      	asrs	r1, r1, #1
 801e784:	1869      	adds	r1, r5, r1
 801e786:	3e01      	subs	r6, #1
 801e788:	c702      	stmia	r7!, {r1}
 801e78a:	3408      	adds	r4, #8
 801e78c:	2e00      	cmp	r6, #0
 801e78e:	d1e6      	bne.n	801e75e <arm_cmplx_mag_squared_q31+0x12>
 801e790:	bc0c      	pop	{r2, r3}
 801e792:	4690      	mov	r8, r2
 801e794:	4699      	mov	r9, r3
 801e796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e798 <arm_mult_q31>:
 801e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e79a:	4646      	mov	r6, r8
 801e79c:	464f      	mov	r7, r9
 801e79e:	4690      	mov	r8, r2
 801e7a0:	b4c0      	push	{r6, r7}
 801e7a2:	001d      	movs	r5, r3
 801e7a4:	0006      	movs	r6, r0
 801e7a6:	000f      	movs	r7, r1
 801e7a8:	2400      	movs	r4, #0
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d020      	beq.n	801e7f0 <arm_mult_q31+0x58>
 801e7ae:	4b12      	ldr	r3, [pc, #72]	@ (801e7f8 <arm_mult_q31+0x60>)
 801e7b0:	4699      	mov	r9, r3
 801e7b2:	e007      	b.n	801e7c4 <arm_mult_q31+0x2c>
 801e7b4:	464b      	mov	r3, r9
 801e7b6:	4059      	eors	r1, r3
 801e7b8:	4643      	mov	r3, r8
 801e7ba:	3d01      	subs	r5, #1
 801e7bc:	5119      	str	r1, [r3, r4]
 801e7be:	3404      	adds	r4, #4
 801e7c0:	2d00      	cmp	r5, #0
 801e7c2:	d015      	beq.n	801e7f0 <arm_mult_q31+0x58>
 801e7c4:	5933      	ldr	r3, [r6, r4]
 801e7c6:	593a      	ldr	r2, [r7, r4]
 801e7c8:	17d9      	asrs	r1, r3, #31
 801e7ca:	593b      	ldr	r3, [r7, r4]
 801e7cc:	5930      	ldr	r0, [r6, r4]
 801e7ce:	17db      	asrs	r3, r3, #31
 801e7d0:	f7e1 fef6 	bl	80005c0 <__aeabi_lmul>
 801e7d4:	004b      	lsls	r3, r1, #1
 801e7d6:	0fc0      	lsrs	r0, r0, #31
 801e7d8:	4318      	orrs	r0, r3
 801e7da:	17c9      	asrs	r1, r1, #31
 801e7dc:	17c3      	asrs	r3, r0, #31
 801e7de:	428b      	cmp	r3, r1
 801e7e0:	d1e8      	bne.n	801e7b4 <arm_mult_q31+0x1c>
 801e7e2:	0001      	movs	r1, r0
 801e7e4:	4643      	mov	r3, r8
 801e7e6:	3d01      	subs	r5, #1
 801e7e8:	5119      	str	r1, [r3, r4]
 801e7ea:	3404      	adds	r4, #4
 801e7ec:	2d00      	cmp	r5, #0
 801e7ee:	d1e9      	bne.n	801e7c4 <arm_mult_q31+0x2c>
 801e7f0:	bc0c      	pop	{r2, r3}
 801e7f2:	4690      	mov	r8, r2
 801e7f4:	4699      	mov	r9, r3
 801e7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7f8:	7fffffff 	.word	0x7fffffff

0801e7fc <arm_add_q31>:
 801e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7fe:	465f      	mov	r7, fp
 801e800:	4656      	mov	r6, sl
 801e802:	464d      	mov	r5, r9
 801e804:	4644      	mov	r4, r8
 801e806:	b4f0      	push	{r4, r5, r6, r7}
 801e808:	4693      	mov	fp, r2
 801e80a:	b083      	sub	sp, #12
 801e80c:	4681      	mov	r9, r0
 801e80e:	468a      	mov	sl, r1
 801e810:	4698      	mov	r8, r3
 801e812:	2200      	movs	r2, #0
 801e814:	2b00      	cmp	r3, #0
 801e816:	d020      	beq.n	801e85a <arm_add_q31+0x5e>
 801e818:	4649      	mov	r1, r9
 801e81a:	4653      	mov	r3, sl
 801e81c:	588e      	ldr	r6, [r1, r2]
 801e81e:	589b      	ldr	r3, [r3, r2]
 801e820:	17f7      	asrs	r7, r6, #31
 801e822:	001c      	movs	r4, r3
 801e824:	0030      	movs	r0, r6
 801e826:	0039      	movs	r1, r7
 801e828:	17dd      	asrs	r5, r3, #31
 801e82a:	46b4      	mov	ip, r6
 801e82c:	1900      	adds	r0, r0, r4
 801e82e:	4169      	adcs	r1, r5
 801e830:	4463      	add	r3, ip
 801e832:	9000      	str	r0, [sp, #0]
 801e834:	9101      	str	r1, [sp, #4]
 801e836:	17d9      	asrs	r1, r3, #31
 801e838:	468c      	mov	ip, r1
 801e83a:	9901      	ldr	r1, [sp, #4]
 801e83c:	458c      	cmp	ip, r1
 801e83e:	d002      	beq.n	801e846 <arm_add_q31+0x4a>
 801e840:	17cb      	asrs	r3, r1, #31
 801e842:	4909      	ldr	r1, [pc, #36]	@ (801e868 <arm_add_q31+0x6c>)
 801e844:	404b      	eors	r3, r1
 801e846:	4659      	mov	r1, fp
 801e848:	508b      	str	r3, [r1, r2]
 801e84a:	2301      	movs	r3, #1
 801e84c:	425b      	negs	r3, r3
 801e84e:	469c      	mov	ip, r3
 801e850:	44e0      	add	r8, ip
 801e852:	4643      	mov	r3, r8
 801e854:	3204      	adds	r2, #4
 801e856:	2b00      	cmp	r3, #0
 801e858:	d1de      	bne.n	801e818 <arm_add_q31+0x1c>
 801e85a:	b003      	add	sp, #12
 801e85c:	bc3c      	pop	{r2, r3, r4, r5}
 801e85e:	4690      	mov	r8, r2
 801e860:	4699      	mov	r9, r3
 801e862:	46a2      	mov	sl, r4
 801e864:	46ab      	mov	fp, r5
 801e866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e868:	7fffffff 	.word	0x7fffffff

0801e86c <atof>:
 801e86c:	b510      	push	{r4, lr}
 801e86e:	2100      	movs	r1, #0
 801e870:	f000 fe12 	bl	801f498 <strtod>
 801e874:	bd10      	pop	{r4, pc}

0801e876 <atoi>:
 801e876:	b510      	push	{r4, lr}
 801e878:	220a      	movs	r2, #10
 801e87a:	2100      	movs	r1, #0
 801e87c:	f000 fea4 	bl	801f5c8 <strtol>
 801e880:	bd10      	pop	{r4, pc}
	...

0801e884 <sulp>:
 801e884:	b570      	push	{r4, r5, r6, lr}
 801e886:	0016      	movs	r6, r2
 801e888:	000d      	movs	r5, r1
 801e88a:	f003 fcf3 	bl	8022274 <__ulp>
 801e88e:	2e00      	cmp	r6, #0
 801e890:	d00d      	beq.n	801e8ae <sulp+0x2a>
 801e892:	236b      	movs	r3, #107	@ 0x6b
 801e894:	006a      	lsls	r2, r5, #1
 801e896:	0d52      	lsrs	r2, r2, #21
 801e898:	1a9b      	subs	r3, r3, r2
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	dd07      	ble.n	801e8ae <sulp+0x2a>
 801e89e:	2400      	movs	r4, #0
 801e8a0:	4a03      	ldr	r2, [pc, #12]	@ (801e8b0 <sulp+0x2c>)
 801e8a2:	051b      	lsls	r3, r3, #20
 801e8a4:	189d      	adds	r5, r3, r2
 801e8a6:	002b      	movs	r3, r5
 801e8a8:	0022      	movs	r2, r4
 801e8aa:	f7e3 fec7 	bl	800263c <__aeabi_dmul>
 801e8ae:	bd70      	pop	{r4, r5, r6, pc}
 801e8b0:	3ff00000 	.word	0x3ff00000

0801e8b4 <_strtod_l>:
 801e8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8b6:	b0a3      	sub	sp, #140	@ 0x8c
 801e8b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	2600      	movs	r6, #0
 801e8be:	2700      	movs	r7, #0
 801e8c0:	9005      	str	r0, [sp, #20]
 801e8c2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e8c4:	921e      	str	r2, [sp, #120]	@ 0x78
 801e8c6:	911d      	str	r1, [sp, #116]	@ 0x74
 801e8c8:	780a      	ldrb	r2, [r1, #0]
 801e8ca:	2a2b      	cmp	r2, #43	@ 0x2b
 801e8cc:	d053      	beq.n	801e976 <_strtod_l+0xc2>
 801e8ce:	d83f      	bhi.n	801e950 <_strtod_l+0x9c>
 801e8d0:	2a0d      	cmp	r2, #13
 801e8d2:	d839      	bhi.n	801e948 <_strtod_l+0x94>
 801e8d4:	2a08      	cmp	r2, #8
 801e8d6:	d839      	bhi.n	801e94c <_strtod_l+0x98>
 801e8d8:	2a00      	cmp	r2, #0
 801e8da:	d042      	beq.n	801e962 <_strtod_l+0xae>
 801e8dc:	2200      	movs	r2, #0
 801e8de:	9212      	str	r2, [sp, #72]	@ 0x48
 801e8e0:	2100      	movs	r1, #0
 801e8e2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e8e4:	910c      	str	r1, [sp, #48]	@ 0x30
 801e8e6:	782a      	ldrb	r2, [r5, #0]
 801e8e8:	2a30      	cmp	r2, #48	@ 0x30
 801e8ea:	d000      	beq.n	801e8ee <_strtod_l+0x3a>
 801e8ec:	e083      	b.n	801e9f6 <_strtod_l+0x142>
 801e8ee:	786a      	ldrb	r2, [r5, #1]
 801e8f0:	3120      	adds	r1, #32
 801e8f2:	438a      	bics	r2, r1
 801e8f4:	2a58      	cmp	r2, #88	@ 0x58
 801e8f6:	d000      	beq.n	801e8fa <_strtod_l+0x46>
 801e8f8:	e073      	b.n	801e9e2 <_strtod_l+0x12e>
 801e8fa:	9302      	str	r3, [sp, #8]
 801e8fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e8fe:	4a95      	ldr	r2, [pc, #596]	@ (801eb54 <_strtod_l+0x2a0>)
 801e900:	9301      	str	r3, [sp, #4]
 801e902:	ab1e      	add	r3, sp, #120	@ 0x78
 801e904:	9300      	str	r3, [sp, #0]
 801e906:	9805      	ldr	r0, [sp, #20]
 801e908:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e90a:	a91d      	add	r1, sp, #116	@ 0x74
 801e90c:	f002 fd62 	bl	80213d4 <__gethex>
 801e910:	230f      	movs	r3, #15
 801e912:	0002      	movs	r2, r0
 801e914:	401a      	ands	r2, r3
 801e916:	0004      	movs	r4, r0
 801e918:	9206      	str	r2, [sp, #24]
 801e91a:	4218      	tst	r0, r3
 801e91c:	d005      	beq.n	801e92a <_strtod_l+0x76>
 801e91e:	2a06      	cmp	r2, #6
 801e920:	d12b      	bne.n	801e97a <_strtod_l+0xc6>
 801e922:	2300      	movs	r3, #0
 801e924:	3501      	adds	r5, #1
 801e926:	951d      	str	r5, [sp, #116]	@ 0x74
 801e928:	9312      	str	r3, [sp, #72]	@ 0x48
 801e92a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d002      	beq.n	801e936 <_strtod_l+0x82>
 801e930:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e932:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e934:	6013      	str	r3, [r2, #0]
 801e936:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d019      	beq.n	801e970 <_strtod_l+0xbc>
 801e93c:	2380      	movs	r3, #128	@ 0x80
 801e93e:	0030      	movs	r0, r6
 801e940:	061b      	lsls	r3, r3, #24
 801e942:	18f9      	adds	r1, r7, r3
 801e944:	b023      	add	sp, #140	@ 0x8c
 801e946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e948:	2a20      	cmp	r2, #32
 801e94a:	d1c7      	bne.n	801e8dc <_strtod_l+0x28>
 801e94c:	3101      	adds	r1, #1
 801e94e:	e7ba      	b.n	801e8c6 <_strtod_l+0x12>
 801e950:	2a2d      	cmp	r2, #45	@ 0x2d
 801e952:	d1c3      	bne.n	801e8dc <_strtod_l+0x28>
 801e954:	3a2c      	subs	r2, #44	@ 0x2c
 801e956:	9212      	str	r2, [sp, #72]	@ 0x48
 801e958:	1c4a      	adds	r2, r1, #1
 801e95a:	921d      	str	r2, [sp, #116]	@ 0x74
 801e95c:	784a      	ldrb	r2, [r1, #1]
 801e95e:	2a00      	cmp	r2, #0
 801e960:	d1be      	bne.n	801e8e0 <_strtod_l+0x2c>
 801e962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e964:	931d      	str	r3, [sp, #116]	@ 0x74
 801e966:	2300      	movs	r3, #0
 801e968:	9312      	str	r3, [sp, #72]	@ 0x48
 801e96a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d1df      	bne.n	801e930 <_strtod_l+0x7c>
 801e970:	0030      	movs	r0, r6
 801e972:	0039      	movs	r1, r7
 801e974:	e7e6      	b.n	801e944 <_strtod_l+0x90>
 801e976:	2200      	movs	r2, #0
 801e978:	e7ed      	b.n	801e956 <_strtod_l+0xa2>
 801e97a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e97c:	2a00      	cmp	r2, #0
 801e97e:	d007      	beq.n	801e990 <_strtod_l+0xdc>
 801e980:	2135      	movs	r1, #53	@ 0x35
 801e982:	a820      	add	r0, sp, #128	@ 0x80
 801e984:	f003 fd6c 	bl	8022460 <__copybits>
 801e988:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e98a:	9805      	ldr	r0, [sp, #20]
 801e98c:	f003 f926 	bl	8021bdc <_Bfree>
 801e990:	9806      	ldr	r0, [sp, #24]
 801e992:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e994:	3801      	subs	r0, #1
 801e996:	2804      	cmp	r0, #4
 801e998:	d806      	bhi.n	801e9a8 <_strtod_l+0xf4>
 801e99a:	f7e1 fbef 	bl	800017c <__gnu_thumb1_case_uqi>
 801e99e:	0312      	.short	0x0312
 801e9a0:	1e1c      	.short	0x1e1c
 801e9a2:	12          	.byte	0x12
 801e9a3:	00          	.byte	0x00
 801e9a4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e9a6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e9a8:	05e4      	lsls	r4, r4, #23
 801e9aa:	d502      	bpl.n	801e9b2 <_strtod_l+0xfe>
 801e9ac:	2380      	movs	r3, #128	@ 0x80
 801e9ae:	061b      	lsls	r3, r3, #24
 801e9b0:	431f      	orrs	r7, r3
 801e9b2:	4b69      	ldr	r3, [pc, #420]	@ (801eb58 <_strtod_l+0x2a4>)
 801e9b4:	423b      	tst	r3, r7
 801e9b6:	d1b8      	bne.n	801e92a <_strtod_l+0x76>
 801e9b8:	f001 fd90 	bl	80204dc <__errno>
 801e9bc:	2322      	movs	r3, #34	@ 0x22
 801e9be:	6003      	str	r3, [r0, #0]
 801e9c0:	e7b3      	b.n	801e92a <_strtod_l+0x76>
 801e9c2:	4966      	ldr	r1, [pc, #408]	@ (801eb5c <_strtod_l+0x2a8>)
 801e9c4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e9c6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e9c8:	400a      	ands	r2, r1
 801e9ca:	4965      	ldr	r1, [pc, #404]	@ (801eb60 <_strtod_l+0x2ac>)
 801e9cc:	185b      	adds	r3, r3, r1
 801e9ce:	051b      	lsls	r3, r3, #20
 801e9d0:	431a      	orrs	r2, r3
 801e9d2:	0017      	movs	r7, r2
 801e9d4:	e7e8      	b.n	801e9a8 <_strtod_l+0xf4>
 801e9d6:	4f60      	ldr	r7, [pc, #384]	@ (801eb58 <_strtod_l+0x2a4>)
 801e9d8:	e7e6      	b.n	801e9a8 <_strtod_l+0xf4>
 801e9da:	2601      	movs	r6, #1
 801e9dc:	4f61      	ldr	r7, [pc, #388]	@ (801eb64 <_strtod_l+0x2b0>)
 801e9de:	4276      	negs	r6, r6
 801e9e0:	e7e2      	b.n	801e9a8 <_strtod_l+0xf4>
 801e9e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9e4:	1c5a      	adds	r2, r3, #1
 801e9e6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9e8:	785b      	ldrb	r3, [r3, #1]
 801e9ea:	2b30      	cmp	r3, #48	@ 0x30
 801e9ec:	d0f9      	beq.n	801e9e2 <_strtod_l+0x12e>
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d09b      	beq.n	801e92a <_strtod_l+0x76>
 801e9f2:	2301      	movs	r3, #1
 801e9f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801e9f6:	2500      	movs	r5, #0
 801e9f8:	220a      	movs	r2, #10
 801e9fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9fc:	950d      	str	r5, [sp, #52]	@ 0x34
 801e9fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ea00:	9508      	str	r5, [sp, #32]
 801ea02:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ea04:	7804      	ldrb	r4, [r0, #0]
 801ea06:	0023      	movs	r3, r4
 801ea08:	3b30      	subs	r3, #48	@ 0x30
 801ea0a:	b2d9      	uxtb	r1, r3
 801ea0c:	2909      	cmp	r1, #9
 801ea0e:	d927      	bls.n	801ea60 <_strtod_l+0x1ac>
 801ea10:	2201      	movs	r2, #1
 801ea12:	4955      	ldr	r1, [pc, #340]	@ (801eb68 <_strtod_l+0x2b4>)
 801ea14:	f001 fcd4 	bl	80203c0 <strncmp>
 801ea18:	2800      	cmp	r0, #0
 801ea1a:	d031      	beq.n	801ea80 <_strtod_l+0x1cc>
 801ea1c:	2000      	movs	r0, #0
 801ea1e:	0023      	movs	r3, r4
 801ea20:	4684      	mov	ip, r0
 801ea22:	9a08      	ldr	r2, [sp, #32]
 801ea24:	900e      	str	r0, [sp, #56]	@ 0x38
 801ea26:	9206      	str	r2, [sp, #24]
 801ea28:	2220      	movs	r2, #32
 801ea2a:	0019      	movs	r1, r3
 801ea2c:	4391      	bics	r1, r2
 801ea2e:	000a      	movs	r2, r1
 801ea30:	2100      	movs	r1, #0
 801ea32:	9107      	str	r1, [sp, #28]
 801ea34:	2a45      	cmp	r2, #69	@ 0x45
 801ea36:	d000      	beq.n	801ea3a <_strtod_l+0x186>
 801ea38:	e0c0      	b.n	801ebbc <_strtod_l+0x308>
 801ea3a:	9b06      	ldr	r3, [sp, #24]
 801ea3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea3e:	4303      	orrs	r3, r0
 801ea40:	4313      	orrs	r3, r2
 801ea42:	428b      	cmp	r3, r1
 801ea44:	d08d      	beq.n	801e962 <_strtod_l+0xae>
 801ea46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea48:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea4a:	3301      	adds	r3, #1
 801ea4c:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea50:	785b      	ldrb	r3, [r3, #1]
 801ea52:	2b2b      	cmp	r3, #43	@ 0x2b
 801ea54:	d070      	beq.n	801eb38 <_strtod_l+0x284>
 801ea56:	000c      	movs	r4, r1
 801ea58:	2b2d      	cmp	r3, #45	@ 0x2d
 801ea5a:	d173      	bne.n	801eb44 <_strtod_l+0x290>
 801ea5c:	2401      	movs	r4, #1
 801ea5e:	e06c      	b.n	801eb3a <_strtod_l+0x286>
 801ea60:	9908      	ldr	r1, [sp, #32]
 801ea62:	2908      	cmp	r1, #8
 801ea64:	dc09      	bgt.n	801ea7a <_strtod_l+0x1c6>
 801ea66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ea68:	4351      	muls	r1, r2
 801ea6a:	185b      	adds	r3, r3, r1
 801ea6c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea6e:	9b08      	ldr	r3, [sp, #32]
 801ea70:	3001      	adds	r0, #1
 801ea72:	3301      	adds	r3, #1
 801ea74:	9308      	str	r3, [sp, #32]
 801ea76:	901d      	str	r0, [sp, #116]	@ 0x74
 801ea78:	e7c3      	b.n	801ea02 <_strtod_l+0x14e>
 801ea7a:	4355      	muls	r5, r2
 801ea7c:	195d      	adds	r5, r3, r5
 801ea7e:	e7f6      	b.n	801ea6e <_strtod_l+0x1ba>
 801ea80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea82:	1c5a      	adds	r2, r3, #1
 801ea84:	921d      	str	r2, [sp, #116]	@ 0x74
 801ea86:	9a08      	ldr	r2, [sp, #32]
 801ea88:	785b      	ldrb	r3, [r3, #1]
 801ea8a:	2a00      	cmp	r2, #0
 801ea8c:	d03a      	beq.n	801eb04 <_strtod_l+0x250>
 801ea8e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ea90:	9206      	str	r2, [sp, #24]
 801ea92:	001a      	movs	r2, r3
 801ea94:	3a30      	subs	r2, #48	@ 0x30
 801ea96:	2a09      	cmp	r2, #9
 801ea98:	d912      	bls.n	801eac0 <_strtod_l+0x20c>
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	4694      	mov	ip, r2
 801ea9e:	e7c3      	b.n	801ea28 <_strtod_l+0x174>
 801eaa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eaa2:	3001      	adds	r0, #1
 801eaa4:	1c5a      	adds	r2, r3, #1
 801eaa6:	921d      	str	r2, [sp, #116]	@ 0x74
 801eaa8:	785b      	ldrb	r3, [r3, #1]
 801eaaa:	2b30      	cmp	r3, #48	@ 0x30
 801eaac:	d0f8      	beq.n	801eaa0 <_strtod_l+0x1ec>
 801eaae:	001a      	movs	r2, r3
 801eab0:	3a31      	subs	r2, #49	@ 0x31
 801eab2:	2a08      	cmp	r2, #8
 801eab4:	d83b      	bhi.n	801eb2e <_strtod_l+0x27a>
 801eab6:	900e      	str	r0, [sp, #56]	@ 0x38
 801eab8:	2000      	movs	r0, #0
 801eaba:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801eabc:	9006      	str	r0, [sp, #24]
 801eabe:	9213      	str	r2, [sp, #76]	@ 0x4c
 801eac0:	001a      	movs	r2, r3
 801eac2:	1c41      	adds	r1, r0, #1
 801eac4:	3a30      	subs	r2, #48	@ 0x30
 801eac6:	2b30      	cmp	r3, #48	@ 0x30
 801eac8:	d016      	beq.n	801eaf8 <_strtod_l+0x244>
 801eaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eacc:	185b      	adds	r3, r3, r1
 801eace:	930e      	str	r3, [sp, #56]	@ 0x38
 801ead0:	9b06      	ldr	r3, [sp, #24]
 801ead2:	210a      	movs	r1, #10
 801ead4:	469c      	mov	ip, r3
 801ead6:	4484      	add	ip, r0
 801ead8:	459c      	cmp	ip, r3
 801eada:	d115      	bne.n	801eb08 <_strtod_l+0x254>
 801eadc:	9906      	ldr	r1, [sp, #24]
 801eade:	9b06      	ldr	r3, [sp, #24]
 801eae0:	3101      	adds	r1, #1
 801eae2:	1809      	adds	r1, r1, r0
 801eae4:	181b      	adds	r3, r3, r0
 801eae6:	9106      	str	r1, [sp, #24]
 801eae8:	2b08      	cmp	r3, #8
 801eaea:	dc19      	bgt.n	801eb20 <_strtod_l+0x26c>
 801eaec:	230a      	movs	r3, #10
 801eaee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801eaf0:	434b      	muls	r3, r1
 801eaf2:	2100      	movs	r1, #0
 801eaf4:	18d3      	adds	r3, r2, r3
 801eaf6:	930d      	str	r3, [sp, #52]	@ 0x34
 801eaf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eafa:	0008      	movs	r0, r1
 801eafc:	1c5a      	adds	r2, r3, #1
 801eafe:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb00:	785b      	ldrb	r3, [r3, #1]
 801eb02:	e7c6      	b.n	801ea92 <_strtod_l+0x1de>
 801eb04:	9808      	ldr	r0, [sp, #32]
 801eb06:	e7d0      	b.n	801eaaa <_strtod_l+0x1f6>
 801eb08:	1c5c      	adds	r4, r3, #1
 801eb0a:	2b08      	cmp	r3, #8
 801eb0c:	dc04      	bgt.n	801eb18 <_strtod_l+0x264>
 801eb0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb10:	434b      	muls	r3, r1
 801eb12:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb14:	0023      	movs	r3, r4
 801eb16:	e7df      	b.n	801ead8 <_strtod_l+0x224>
 801eb18:	2c10      	cmp	r4, #16
 801eb1a:	dcfb      	bgt.n	801eb14 <_strtod_l+0x260>
 801eb1c:	434d      	muls	r5, r1
 801eb1e:	e7f9      	b.n	801eb14 <_strtod_l+0x260>
 801eb20:	2100      	movs	r1, #0
 801eb22:	2b0f      	cmp	r3, #15
 801eb24:	dce8      	bgt.n	801eaf8 <_strtod_l+0x244>
 801eb26:	230a      	movs	r3, #10
 801eb28:	435d      	muls	r5, r3
 801eb2a:	1955      	adds	r5, r2, r5
 801eb2c:	e7e4      	b.n	801eaf8 <_strtod_l+0x244>
 801eb2e:	2200      	movs	r2, #0
 801eb30:	920e      	str	r2, [sp, #56]	@ 0x38
 801eb32:	9206      	str	r2, [sp, #24]
 801eb34:	3201      	adds	r2, #1
 801eb36:	e7b1      	b.n	801ea9c <_strtod_l+0x1e8>
 801eb38:	2400      	movs	r4, #0
 801eb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb3c:	3302      	adds	r3, #2
 801eb3e:	931d      	str	r3, [sp, #116]	@ 0x74
 801eb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb42:	789b      	ldrb	r3, [r3, #2]
 801eb44:	001a      	movs	r2, r3
 801eb46:	3a30      	subs	r2, #48	@ 0x30
 801eb48:	2a09      	cmp	r2, #9
 801eb4a:	d913      	bls.n	801eb74 <_strtod_l+0x2c0>
 801eb4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb4e:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb50:	2200      	movs	r2, #0
 801eb52:	e032      	b.n	801ebba <_strtod_l+0x306>
 801eb54:	08025d9c 	.word	0x08025d9c
 801eb58:	7ff00000 	.word	0x7ff00000
 801eb5c:	ffefffff 	.word	0xffefffff
 801eb60:	00000433 	.word	0x00000433
 801eb64:	7fffffff 	.word	0x7fffffff
 801eb68:	08025d84 	.word	0x08025d84
 801eb6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb6e:	1c5a      	adds	r2, r3, #1
 801eb70:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb72:	785b      	ldrb	r3, [r3, #1]
 801eb74:	2b30      	cmp	r3, #48	@ 0x30
 801eb76:	d0f9      	beq.n	801eb6c <_strtod_l+0x2b8>
 801eb78:	2200      	movs	r2, #0
 801eb7a:	9207      	str	r2, [sp, #28]
 801eb7c:	001a      	movs	r2, r3
 801eb7e:	3a31      	subs	r2, #49	@ 0x31
 801eb80:	2a08      	cmp	r2, #8
 801eb82:	d81b      	bhi.n	801ebbc <_strtod_l+0x308>
 801eb84:	3b30      	subs	r3, #48	@ 0x30
 801eb86:	9310      	str	r3, [sp, #64]	@ 0x40
 801eb88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb8a:	9307      	str	r3, [sp, #28]
 801eb8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb8e:	1c59      	adds	r1, r3, #1
 801eb90:	911d      	str	r1, [sp, #116]	@ 0x74
 801eb92:	785b      	ldrb	r3, [r3, #1]
 801eb94:	001a      	movs	r2, r3
 801eb96:	3a30      	subs	r2, #48	@ 0x30
 801eb98:	2a09      	cmp	r2, #9
 801eb9a:	d93a      	bls.n	801ec12 <_strtod_l+0x35e>
 801eb9c:	9a07      	ldr	r2, [sp, #28]
 801eb9e:	1a8a      	subs	r2, r1, r2
 801eba0:	49b4      	ldr	r1, [pc, #720]	@ (801ee74 <_strtod_l+0x5c0>)
 801eba2:	9107      	str	r1, [sp, #28]
 801eba4:	2a08      	cmp	r2, #8
 801eba6:	dc04      	bgt.n	801ebb2 <_strtod_l+0x2fe>
 801eba8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ebaa:	9207      	str	r2, [sp, #28]
 801ebac:	428a      	cmp	r2, r1
 801ebae:	dd00      	ble.n	801ebb2 <_strtod_l+0x2fe>
 801ebb0:	9107      	str	r1, [sp, #28]
 801ebb2:	2c00      	cmp	r4, #0
 801ebb4:	d002      	beq.n	801ebbc <_strtod_l+0x308>
 801ebb6:	9a07      	ldr	r2, [sp, #28]
 801ebb8:	4252      	negs	r2, r2
 801ebba:	9207      	str	r2, [sp, #28]
 801ebbc:	9a06      	ldr	r2, [sp, #24]
 801ebbe:	2a00      	cmp	r2, #0
 801ebc0:	d14d      	bne.n	801ec5e <_strtod_l+0x3aa>
 801ebc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ebc4:	4310      	orrs	r0, r2
 801ebc6:	d000      	beq.n	801ebca <_strtod_l+0x316>
 801ebc8:	e6af      	b.n	801e92a <_strtod_l+0x76>
 801ebca:	4662      	mov	r2, ip
 801ebcc:	2a00      	cmp	r2, #0
 801ebce:	d000      	beq.n	801ebd2 <_strtod_l+0x31e>
 801ebd0:	e6c7      	b.n	801e962 <_strtod_l+0xae>
 801ebd2:	2b69      	cmp	r3, #105	@ 0x69
 801ebd4:	d027      	beq.n	801ec26 <_strtod_l+0x372>
 801ebd6:	dc23      	bgt.n	801ec20 <_strtod_l+0x36c>
 801ebd8:	2b49      	cmp	r3, #73	@ 0x49
 801ebda:	d024      	beq.n	801ec26 <_strtod_l+0x372>
 801ebdc:	2b4e      	cmp	r3, #78	@ 0x4e
 801ebde:	d000      	beq.n	801ebe2 <_strtod_l+0x32e>
 801ebe0:	e6bf      	b.n	801e962 <_strtod_l+0xae>
 801ebe2:	49a5      	ldr	r1, [pc, #660]	@ (801ee78 <_strtod_l+0x5c4>)
 801ebe4:	a81d      	add	r0, sp, #116	@ 0x74
 801ebe6:	f002 fe2b 	bl	8021840 <__match>
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d100      	bne.n	801ebf0 <_strtod_l+0x33c>
 801ebee:	e6b8      	b.n	801e962 <_strtod_l+0xae>
 801ebf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebf2:	781b      	ldrb	r3, [r3, #0]
 801ebf4:	2b28      	cmp	r3, #40	@ 0x28
 801ebf6:	d12c      	bne.n	801ec52 <_strtod_l+0x39e>
 801ebf8:	49a0      	ldr	r1, [pc, #640]	@ (801ee7c <_strtod_l+0x5c8>)
 801ebfa:	aa20      	add	r2, sp, #128	@ 0x80
 801ebfc:	a81d      	add	r0, sp, #116	@ 0x74
 801ebfe:	f002 fe33 	bl	8021868 <__hexnan>
 801ec02:	2805      	cmp	r0, #5
 801ec04:	d125      	bne.n	801ec52 <_strtod_l+0x39e>
 801ec06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ec08:	4a9d      	ldr	r2, [pc, #628]	@ (801ee80 <_strtod_l+0x5cc>)
 801ec0a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ec0c:	431a      	orrs	r2, r3
 801ec0e:	0017      	movs	r7, r2
 801ec10:	e68b      	b.n	801e92a <_strtod_l+0x76>
 801ec12:	220a      	movs	r2, #10
 801ec14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ec16:	434a      	muls	r2, r1
 801ec18:	18d2      	adds	r2, r2, r3
 801ec1a:	3a30      	subs	r2, #48	@ 0x30
 801ec1c:	9210      	str	r2, [sp, #64]	@ 0x40
 801ec1e:	e7b5      	b.n	801eb8c <_strtod_l+0x2d8>
 801ec20:	2b6e      	cmp	r3, #110	@ 0x6e
 801ec22:	d0de      	beq.n	801ebe2 <_strtod_l+0x32e>
 801ec24:	e69d      	b.n	801e962 <_strtod_l+0xae>
 801ec26:	4997      	ldr	r1, [pc, #604]	@ (801ee84 <_strtod_l+0x5d0>)
 801ec28:	a81d      	add	r0, sp, #116	@ 0x74
 801ec2a:	f002 fe09 	bl	8021840 <__match>
 801ec2e:	2800      	cmp	r0, #0
 801ec30:	d100      	bne.n	801ec34 <_strtod_l+0x380>
 801ec32:	e696      	b.n	801e962 <_strtod_l+0xae>
 801ec34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec36:	4994      	ldr	r1, [pc, #592]	@ (801ee88 <_strtod_l+0x5d4>)
 801ec38:	3b01      	subs	r3, #1
 801ec3a:	a81d      	add	r0, sp, #116	@ 0x74
 801ec3c:	931d      	str	r3, [sp, #116]	@ 0x74
 801ec3e:	f002 fdff 	bl	8021840 <__match>
 801ec42:	2800      	cmp	r0, #0
 801ec44:	d102      	bne.n	801ec4c <_strtod_l+0x398>
 801ec46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec48:	3301      	adds	r3, #1
 801ec4a:	931d      	str	r3, [sp, #116]	@ 0x74
 801ec4c:	2600      	movs	r6, #0
 801ec4e:	4f8c      	ldr	r7, [pc, #560]	@ (801ee80 <_strtod_l+0x5cc>)
 801ec50:	e66b      	b.n	801e92a <_strtod_l+0x76>
 801ec52:	488e      	ldr	r0, [pc, #568]	@ (801ee8c <_strtod_l+0x5d8>)
 801ec54:	f001 fc84 	bl	8020560 <nan>
 801ec58:	0006      	movs	r6, r0
 801ec5a:	000f      	movs	r7, r1
 801ec5c:	e665      	b.n	801e92a <_strtod_l+0x76>
 801ec5e:	9b07      	ldr	r3, [sp, #28]
 801ec60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec62:	1a9b      	subs	r3, r3, r2
 801ec64:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec66:	9b08      	ldr	r3, [sp, #32]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d101      	bne.n	801ec70 <_strtod_l+0x3bc>
 801ec6c:	9b06      	ldr	r3, [sp, #24]
 801ec6e:	9308      	str	r3, [sp, #32]
 801ec70:	9c06      	ldr	r4, [sp, #24]
 801ec72:	2c10      	cmp	r4, #16
 801ec74:	dd00      	ble.n	801ec78 <_strtod_l+0x3c4>
 801ec76:	2410      	movs	r4, #16
 801ec78:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ec7a:	f7e4 fbcf 	bl	800341c <__aeabi_ui2d>
 801ec7e:	9b06      	ldr	r3, [sp, #24]
 801ec80:	0006      	movs	r6, r0
 801ec82:	000f      	movs	r7, r1
 801ec84:	2b09      	cmp	r3, #9
 801ec86:	dc13      	bgt.n	801ecb0 <_strtod_l+0x3fc>
 801ec88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d100      	bne.n	801ec90 <_strtod_l+0x3dc>
 801ec8e:	e64c      	b.n	801e92a <_strtod_l+0x76>
 801ec90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	dc00      	bgt.n	801ec98 <_strtod_l+0x3e4>
 801ec96:	e07e      	b.n	801ed96 <_strtod_l+0x4e2>
 801ec98:	2b16      	cmp	r3, #22
 801ec9a:	dc63      	bgt.n	801ed64 <_strtod_l+0x4b0>
 801ec9c:	497c      	ldr	r1, [pc, #496]	@ (801ee90 <_strtod_l+0x5dc>)
 801ec9e:	00db      	lsls	r3, r3, #3
 801eca0:	18c9      	adds	r1, r1, r3
 801eca2:	0032      	movs	r2, r6
 801eca4:	6808      	ldr	r0, [r1, #0]
 801eca6:	6849      	ldr	r1, [r1, #4]
 801eca8:	003b      	movs	r3, r7
 801ecaa:	f7e3 fcc7 	bl	800263c <__aeabi_dmul>
 801ecae:	e7d3      	b.n	801ec58 <_strtod_l+0x3a4>
 801ecb0:	0022      	movs	r2, r4
 801ecb2:	4b77      	ldr	r3, [pc, #476]	@ (801ee90 <_strtod_l+0x5dc>)
 801ecb4:	3a09      	subs	r2, #9
 801ecb6:	00d2      	lsls	r2, r2, #3
 801ecb8:	189b      	adds	r3, r3, r2
 801ecba:	681a      	ldr	r2, [r3, #0]
 801ecbc:	685b      	ldr	r3, [r3, #4]
 801ecbe:	f7e3 fcbd 	bl	800263c <__aeabi_dmul>
 801ecc2:	0006      	movs	r6, r0
 801ecc4:	0028      	movs	r0, r5
 801ecc6:	000f      	movs	r7, r1
 801ecc8:	f7e4 fba8 	bl	800341c <__aeabi_ui2d>
 801eccc:	000b      	movs	r3, r1
 801ecce:	0002      	movs	r2, r0
 801ecd0:	0039      	movs	r1, r7
 801ecd2:	0030      	movs	r0, r6
 801ecd4:	f7e2 fd0a 	bl	80016ec <__aeabi_dadd>
 801ecd8:	9b06      	ldr	r3, [sp, #24]
 801ecda:	0006      	movs	r6, r0
 801ecdc:	000f      	movs	r7, r1
 801ecde:	2b0f      	cmp	r3, #15
 801ece0:	ddd2      	ble.n	801ec88 <_strtod_l+0x3d4>
 801ece2:	9b06      	ldr	r3, [sp, #24]
 801ece4:	1b1c      	subs	r4, r3, r4
 801ece6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ece8:	18e4      	adds	r4, r4, r3
 801ecea:	2c00      	cmp	r4, #0
 801ecec:	dc00      	bgt.n	801ecf0 <_strtod_l+0x43c>
 801ecee:	e09b      	b.n	801ee28 <_strtod_l+0x574>
 801ecf0:	220f      	movs	r2, #15
 801ecf2:	0023      	movs	r3, r4
 801ecf4:	4013      	ands	r3, r2
 801ecf6:	4214      	tst	r4, r2
 801ecf8:	d00a      	beq.n	801ed10 <_strtod_l+0x45c>
 801ecfa:	4965      	ldr	r1, [pc, #404]	@ (801ee90 <_strtod_l+0x5dc>)
 801ecfc:	00db      	lsls	r3, r3, #3
 801ecfe:	18c9      	adds	r1, r1, r3
 801ed00:	0032      	movs	r2, r6
 801ed02:	6808      	ldr	r0, [r1, #0]
 801ed04:	6849      	ldr	r1, [r1, #4]
 801ed06:	003b      	movs	r3, r7
 801ed08:	f7e3 fc98 	bl	800263c <__aeabi_dmul>
 801ed0c:	0006      	movs	r6, r0
 801ed0e:	000f      	movs	r7, r1
 801ed10:	230f      	movs	r3, #15
 801ed12:	439c      	bics	r4, r3
 801ed14:	d073      	beq.n	801edfe <_strtod_l+0x54a>
 801ed16:	3326      	adds	r3, #38	@ 0x26
 801ed18:	33ff      	adds	r3, #255	@ 0xff
 801ed1a:	429c      	cmp	r4, r3
 801ed1c:	dd4b      	ble.n	801edb6 <_strtod_l+0x502>
 801ed1e:	2300      	movs	r3, #0
 801ed20:	9306      	str	r3, [sp, #24]
 801ed22:	9307      	str	r3, [sp, #28]
 801ed24:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed26:	9308      	str	r3, [sp, #32]
 801ed28:	2322      	movs	r3, #34	@ 0x22
 801ed2a:	2600      	movs	r6, #0
 801ed2c:	9a05      	ldr	r2, [sp, #20]
 801ed2e:	4f54      	ldr	r7, [pc, #336]	@ (801ee80 <_strtod_l+0x5cc>)
 801ed30:	6013      	str	r3, [r2, #0]
 801ed32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed34:	42b3      	cmp	r3, r6
 801ed36:	d100      	bne.n	801ed3a <_strtod_l+0x486>
 801ed38:	e5f7      	b.n	801e92a <_strtod_l+0x76>
 801ed3a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ed3c:	9805      	ldr	r0, [sp, #20]
 801ed3e:	f002 ff4d 	bl	8021bdc <_Bfree>
 801ed42:	9908      	ldr	r1, [sp, #32]
 801ed44:	9805      	ldr	r0, [sp, #20]
 801ed46:	f002 ff49 	bl	8021bdc <_Bfree>
 801ed4a:	9907      	ldr	r1, [sp, #28]
 801ed4c:	9805      	ldr	r0, [sp, #20]
 801ed4e:	f002 ff45 	bl	8021bdc <_Bfree>
 801ed52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ed54:	9805      	ldr	r0, [sp, #20]
 801ed56:	f002 ff41 	bl	8021bdc <_Bfree>
 801ed5a:	9906      	ldr	r1, [sp, #24]
 801ed5c:	9805      	ldr	r0, [sp, #20]
 801ed5e:	f002 ff3d 	bl	8021bdc <_Bfree>
 801ed62:	e5e2      	b.n	801e92a <_strtod_l+0x76>
 801ed64:	2325      	movs	r3, #37	@ 0x25
 801ed66:	9a06      	ldr	r2, [sp, #24]
 801ed68:	1a9b      	subs	r3, r3, r2
 801ed6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed6c:	4293      	cmp	r3, r2
 801ed6e:	dbb8      	blt.n	801ece2 <_strtod_l+0x42e>
 801ed70:	240f      	movs	r4, #15
 801ed72:	9b06      	ldr	r3, [sp, #24]
 801ed74:	4d46      	ldr	r5, [pc, #280]	@ (801ee90 <_strtod_l+0x5dc>)
 801ed76:	1ae4      	subs	r4, r4, r3
 801ed78:	00e1      	lsls	r1, r4, #3
 801ed7a:	1869      	adds	r1, r5, r1
 801ed7c:	0032      	movs	r2, r6
 801ed7e:	6808      	ldr	r0, [r1, #0]
 801ed80:	6849      	ldr	r1, [r1, #4]
 801ed82:	003b      	movs	r3, r7
 801ed84:	f7e3 fc5a 	bl	800263c <__aeabi_dmul>
 801ed88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed8a:	1b1c      	subs	r4, r3, r4
 801ed8c:	00e4      	lsls	r4, r4, #3
 801ed8e:	192d      	adds	r5, r5, r4
 801ed90:	682a      	ldr	r2, [r5, #0]
 801ed92:	686b      	ldr	r3, [r5, #4]
 801ed94:	e789      	b.n	801ecaa <_strtod_l+0x3f6>
 801ed96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed98:	3316      	adds	r3, #22
 801ed9a:	dba2      	blt.n	801ece2 <_strtod_l+0x42e>
 801ed9c:	9907      	ldr	r1, [sp, #28]
 801ed9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eda0:	4b3b      	ldr	r3, [pc, #236]	@ (801ee90 <_strtod_l+0x5dc>)
 801eda2:	1a52      	subs	r2, r2, r1
 801eda4:	00d2      	lsls	r2, r2, #3
 801eda6:	189b      	adds	r3, r3, r2
 801eda8:	0030      	movs	r0, r6
 801edaa:	681a      	ldr	r2, [r3, #0]
 801edac:	685b      	ldr	r3, [r3, #4]
 801edae:	0039      	movs	r1, r7
 801edb0:	f7e3 f800 	bl	8001db4 <__aeabi_ddiv>
 801edb4:	e750      	b.n	801ec58 <_strtod_l+0x3a4>
 801edb6:	2300      	movs	r3, #0
 801edb8:	0030      	movs	r0, r6
 801edba:	0039      	movs	r1, r7
 801edbc:	4d35      	ldr	r5, [pc, #212]	@ (801ee94 <_strtod_l+0x5e0>)
 801edbe:	1124      	asrs	r4, r4, #4
 801edc0:	9309      	str	r3, [sp, #36]	@ 0x24
 801edc2:	2c01      	cmp	r4, #1
 801edc4:	dc1e      	bgt.n	801ee04 <_strtod_l+0x550>
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d001      	beq.n	801edce <_strtod_l+0x51a>
 801edca:	0006      	movs	r6, r0
 801edcc:	000f      	movs	r7, r1
 801edce:	4b32      	ldr	r3, [pc, #200]	@ (801ee98 <_strtod_l+0x5e4>)
 801edd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801edd2:	18ff      	adds	r7, r7, r3
 801edd4:	4b2f      	ldr	r3, [pc, #188]	@ (801ee94 <_strtod_l+0x5e0>)
 801edd6:	00d5      	lsls	r5, r2, #3
 801edd8:	195d      	adds	r5, r3, r5
 801edda:	0032      	movs	r2, r6
 801eddc:	6828      	ldr	r0, [r5, #0]
 801edde:	6869      	ldr	r1, [r5, #4]
 801ede0:	003b      	movs	r3, r7
 801ede2:	f7e3 fc2b 	bl	800263c <__aeabi_dmul>
 801ede6:	4b26      	ldr	r3, [pc, #152]	@ (801ee80 <_strtod_l+0x5cc>)
 801ede8:	4a2c      	ldr	r2, [pc, #176]	@ (801ee9c <_strtod_l+0x5e8>)
 801edea:	0006      	movs	r6, r0
 801edec:	400b      	ands	r3, r1
 801edee:	4293      	cmp	r3, r2
 801edf0:	d895      	bhi.n	801ed1e <_strtod_l+0x46a>
 801edf2:	4a2b      	ldr	r2, [pc, #172]	@ (801eea0 <_strtod_l+0x5ec>)
 801edf4:	4293      	cmp	r3, r2
 801edf6:	d913      	bls.n	801ee20 <_strtod_l+0x56c>
 801edf8:	2601      	movs	r6, #1
 801edfa:	4f2a      	ldr	r7, [pc, #168]	@ (801eea4 <_strtod_l+0x5f0>)
 801edfc:	4276      	negs	r6, r6
 801edfe:	2300      	movs	r3, #0
 801ee00:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee02:	e086      	b.n	801ef12 <_strtod_l+0x65e>
 801ee04:	2201      	movs	r2, #1
 801ee06:	4214      	tst	r4, r2
 801ee08:	d004      	beq.n	801ee14 <_strtod_l+0x560>
 801ee0a:	682a      	ldr	r2, [r5, #0]
 801ee0c:	686b      	ldr	r3, [r5, #4]
 801ee0e:	f7e3 fc15 	bl	800263c <__aeabi_dmul>
 801ee12:	2301      	movs	r3, #1
 801ee14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee16:	1064      	asrs	r4, r4, #1
 801ee18:	3201      	adds	r2, #1
 801ee1a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee1c:	3508      	adds	r5, #8
 801ee1e:	e7d0      	b.n	801edc2 <_strtod_l+0x50e>
 801ee20:	23d4      	movs	r3, #212	@ 0xd4
 801ee22:	049b      	lsls	r3, r3, #18
 801ee24:	18cf      	adds	r7, r1, r3
 801ee26:	e7ea      	b.n	801edfe <_strtod_l+0x54a>
 801ee28:	2c00      	cmp	r4, #0
 801ee2a:	d0e8      	beq.n	801edfe <_strtod_l+0x54a>
 801ee2c:	4264      	negs	r4, r4
 801ee2e:	230f      	movs	r3, #15
 801ee30:	0022      	movs	r2, r4
 801ee32:	401a      	ands	r2, r3
 801ee34:	421c      	tst	r4, r3
 801ee36:	d00a      	beq.n	801ee4e <_strtod_l+0x59a>
 801ee38:	4b15      	ldr	r3, [pc, #84]	@ (801ee90 <_strtod_l+0x5dc>)
 801ee3a:	00d2      	lsls	r2, r2, #3
 801ee3c:	189b      	adds	r3, r3, r2
 801ee3e:	0030      	movs	r0, r6
 801ee40:	681a      	ldr	r2, [r3, #0]
 801ee42:	685b      	ldr	r3, [r3, #4]
 801ee44:	0039      	movs	r1, r7
 801ee46:	f7e2 ffb5 	bl	8001db4 <__aeabi_ddiv>
 801ee4a:	0006      	movs	r6, r0
 801ee4c:	000f      	movs	r7, r1
 801ee4e:	1124      	asrs	r4, r4, #4
 801ee50:	d0d5      	beq.n	801edfe <_strtod_l+0x54a>
 801ee52:	2c1f      	cmp	r4, #31
 801ee54:	dd28      	ble.n	801eea8 <_strtod_l+0x5f4>
 801ee56:	2300      	movs	r3, #0
 801ee58:	9306      	str	r3, [sp, #24]
 801ee5a:	9307      	str	r3, [sp, #28]
 801ee5c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee5e:	9308      	str	r3, [sp, #32]
 801ee60:	2322      	movs	r3, #34	@ 0x22
 801ee62:	9a05      	ldr	r2, [sp, #20]
 801ee64:	2600      	movs	r6, #0
 801ee66:	6013      	str	r3, [r2, #0]
 801ee68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee6a:	2700      	movs	r7, #0
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d000      	beq.n	801ee72 <_strtod_l+0x5be>
 801ee70:	e763      	b.n	801ed3a <_strtod_l+0x486>
 801ee72:	e55a      	b.n	801e92a <_strtod_l+0x76>
 801ee74:	00004e1f 	.word	0x00004e1f
 801ee78:	08025ee6 	.word	0x08025ee6
 801ee7c:	08025d88 	.word	0x08025d88
 801ee80:	7ff00000 	.word	0x7ff00000
 801ee84:	08025ede 	.word	0x08025ede
 801ee88:	08025f18 	.word	0x08025f18
 801ee8c:	080261a4 	.word	0x080261a4
 801ee90:	08026090 	.word	0x08026090
 801ee94:	08026068 	.word	0x08026068
 801ee98:	fcb00000 	.word	0xfcb00000
 801ee9c:	7ca00000 	.word	0x7ca00000
 801eea0:	7c900000 	.word	0x7c900000
 801eea4:	7fefffff 	.word	0x7fefffff
 801eea8:	2310      	movs	r3, #16
 801eeaa:	0022      	movs	r2, r4
 801eeac:	401a      	ands	r2, r3
 801eeae:	9209      	str	r2, [sp, #36]	@ 0x24
 801eeb0:	421c      	tst	r4, r3
 801eeb2:	d001      	beq.n	801eeb8 <_strtod_l+0x604>
 801eeb4:	335a      	adds	r3, #90	@ 0x5a
 801eeb6:	9309      	str	r3, [sp, #36]	@ 0x24
 801eeb8:	0030      	movs	r0, r6
 801eeba:	0039      	movs	r1, r7
 801eebc:	2300      	movs	r3, #0
 801eebe:	4dbf      	ldr	r5, [pc, #764]	@ (801f1bc <_strtod_l+0x908>)
 801eec0:	2201      	movs	r2, #1
 801eec2:	4214      	tst	r4, r2
 801eec4:	d004      	beq.n	801eed0 <_strtod_l+0x61c>
 801eec6:	682a      	ldr	r2, [r5, #0]
 801eec8:	686b      	ldr	r3, [r5, #4]
 801eeca:	f7e3 fbb7 	bl	800263c <__aeabi_dmul>
 801eece:	2301      	movs	r3, #1
 801eed0:	1064      	asrs	r4, r4, #1
 801eed2:	3508      	adds	r5, #8
 801eed4:	2c00      	cmp	r4, #0
 801eed6:	d1f3      	bne.n	801eec0 <_strtod_l+0x60c>
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d001      	beq.n	801eee0 <_strtod_l+0x62c>
 801eedc:	0006      	movs	r6, r0
 801eede:	000f      	movs	r7, r1
 801eee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d00d      	beq.n	801ef02 <_strtod_l+0x64e>
 801eee6:	236b      	movs	r3, #107	@ 0x6b
 801eee8:	007a      	lsls	r2, r7, #1
 801eeea:	0d52      	lsrs	r2, r2, #21
 801eeec:	0039      	movs	r1, r7
 801eeee:	1a9b      	subs	r3, r3, r2
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	dd06      	ble.n	801ef02 <_strtod_l+0x64e>
 801eef4:	2b1f      	cmp	r3, #31
 801eef6:	dd5a      	ble.n	801efae <_strtod_l+0x6fa>
 801eef8:	2600      	movs	r6, #0
 801eefa:	2b34      	cmp	r3, #52	@ 0x34
 801eefc:	dd50      	ble.n	801efa0 <_strtod_l+0x6ec>
 801eefe:	27dc      	movs	r7, #220	@ 0xdc
 801ef00:	04bf      	lsls	r7, r7, #18
 801ef02:	2200      	movs	r2, #0
 801ef04:	2300      	movs	r3, #0
 801ef06:	0030      	movs	r0, r6
 801ef08:	0039      	movs	r1, r7
 801ef0a:	f7e1 fad1 	bl	80004b0 <__aeabi_dcmpeq>
 801ef0e:	2800      	cmp	r0, #0
 801ef10:	d1a1      	bne.n	801ee56 <_strtod_l+0x5a2>
 801ef12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef14:	9a08      	ldr	r2, [sp, #32]
 801ef16:	9300      	str	r3, [sp, #0]
 801ef18:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ef1a:	9b06      	ldr	r3, [sp, #24]
 801ef1c:	9805      	ldr	r0, [sp, #20]
 801ef1e:	f002 fec5 	bl	8021cac <__s2b>
 801ef22:	900d      	str	r0, [sp, #52]	@ 0x34
 801ef24:	2800      	cmp	r0, #0
 801ef26:	d100      	bne.n	801ef2a <_strtod_l+0x676>
 801ef28:	e6f9      	b.n	801ed1e <_strtod_l+0x46a>
 801ef2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef2c:	9907      	ldr	r1, [sp, #28]
 801ef2e:	17da      	asrs	r2, r3, #31
 801ef30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef32:	1a5b      	subs	r3, r3, r1
 801ef34:	401a      	ands	r2, r3
 801ef36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef38:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ef3a:	43db      	mvns	r3, r3
 801ef3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ef3e:	17db      	asrs	r3, r3, #31
 801ef40:	401a      	ands	r2, r3
 801ef42:	2300      	movs	r3, #0
 801ef44:	921a      	str	r2, [sp, #104]	@ 0x68
 801ef46:	9306      	str	r3, [sp, #24]
 801ef48:	9307      	str	r3, [sp, #28]
 801ef4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef4c:	9805      	ldr	r0, [sp, #20]
 801ef4e:	6859      	ldr	r1, [r3, #4]
 801ef50:	f002 fe00 	bl	8021b54 <_Balloc>
 801ef54:	9008      	str	r0, [sp, #32]
 801ef56:	2800      	cmp	r0, #0
 801ef58:	d100      	bne.n	801ef5c <_strtod_l+0x6a8>
 801ef5a:	e6e5      	b.n	801ed28 <_strtod_l+0x474>
 801ef5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef5e:	300c      	adds	r0, #12
 801ef60:	0019      	movs	r1, r3
 801ef62:	691a      	ldr	r2, [r3, #16]
 801ef64:	310c      	adds	r1, #12
 801ef66:	3202      	adds	r2, #2
 801ef68:	0092      	lsls	r2, r2, #2
 801ef6a:	f001 faef 	bl	802054c <memcpy>
 801ef6e:	ab20      	add	r3, sp, #128	@ 0x80
 801ef70:	9301      	str	r3, [sp, #4]
 801ef72:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ef74:	9300      	str	r3, [sp, #0]
 801ef76:	0032      	movs	r2, r6
 801ef78:	003b      	movs	r3, r7
 801ef7a:	9805      	ldr	r0, [sp, #20]
 801ef7c:	9610      	str	r6, [sp, #64]	@ 0x40
 801ef7e:	9711      	str	r7, [sp, #68]	@ 0x44
 801ef80:	f003 f9e4 	bl	802234c <__d2b>
 801ef84:	901e      	str	r0, [sp, #120]	@ 0x78
 801ef86:	2800      	cmp	r0, #0
 801ef88:	d100      	bne.n	801ef8c <_strtod_l+0x6d8>
 801ef8a:	e6cd      	b.n	801ed28 <_strtod_l+0x474>
 801ef8c:	2101      	movs	r1, #1
 801ef8e:	9805      	ldr	r0, [sp, #20]
 801ef90:	f002 ff28 	bl	8021de4 <__i2b>
 801ef94:	9007      	str	r0, [sp, #28]
 801ef96:	2800      	cmp	r0, #0
 801ef98:	d10e      	bne.n	801efb8 <_strtod_l+0x704>
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	9307      	str	r3, [sp, #28]
 801ef9e:	e6c3      	b.n	801ed28 <_strtod_l+0x474>
 801efa0:	234b      	movs	r3, #75	@ 0x4b
 801efa2:	1a9a      	subs	r2, r3, r2
 801efa4:	3b4c      	subs	r3, #76	@ 0x4c
 801efa6:	4093      	lsls	r3, r2
 801efa8:	4019      	ands	r1, r3
 801efaa:	000f      	movs	r7, r1
 801efac:	e7a9      	b.n	801ef02 <_strtod_l+0x64e>
 801efae:	2201      	movs	r2, #1
 801efb0:	4252      	negs	r2, r2
 801efb2:	409a      	lsls	r2, r3
 801efb4:	4016      	ands	r6, r2
 801efb6:	e7a4      	b.n	801ef02 <_strtod_l+0x64e>
 801efb8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801efba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801efbc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801efbe:	1ad4      	subs	r4, r2, r3
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	db01      	blt.n	801efc8 <_strtod_l+0x714>
 801efc4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801efc6:	195d      	adds	r5, r3, r5
 801efc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801efca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801efcc:	1a5b      	subs	r3, r3, r1
 801efce:	2136      	movs	r1, #54	@ 0x36
 801efd0:	189b      	adds	r3, r3, r2
 801efd2:	1a8a      	subs	r2, r1, r2
 801efd4:	497a      	ldr	r1, [pc, #488]	@ (801f1c0 <_strtod_l+0x90c>)
 801efd6:	2001      	movs	r0, #1
 801efd8:	468c      	mov	ip, r1
 801efda:	2100      	movs	r1, #0
 801efdc:	3b01      	subs	r3, #1
 801efde:	9116      	str	r1, [sp, #88]	@ 0x58
 801efe0:	9014      	str	r0, [sp, #80]	@ 0x50
 801efe2:	4563      	cmp	r3, ip
 801efe4:	da06      	bge.n	801eff4 <_strtod_l+0x740>
 801efe6:	4661      	mov	r1, ip
 801efe8:	1ac9      	subs	r1, r1, r3
 801efea:	1a52      	subs	r2, r2, r1
 801efec:	291f      	cmp	r1, #31
 801efee:	dc3f      	bgt.n	801f070 <_strtod_l+0x7bc>
 801eff0:	4088      	lsls	r0, r1
 801eff2:	9014      	str	r0, [sp, #80]	@ 0x50
 801eff4:	18ab      	adds	r3, r5, r2
 801eff6:	930e      	str	r3, [sp, #56]	@ 0x38
 801eff8:	18a4      	adds	r4, r4, r2
 801effa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801effc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801effe:	191c      	adds	r4, r3, r4
 801f000:	002b      	movs	r3, r5
 801f002:	4295      	cmp	r5, r2
 801f004:	dd00      	ble.n	801f008 <_strtod_l+0x754>
 801f006:	0013      	movs	r3, r2
 801f008:	42a3      	cmp	r3, r4
 801f00a:	dd00      	ble.n	801f00e <_strtod_l+0x75a>
 801f00c:	0023      	movs	r3, r4
 801f00e:	2b00      	cmp	r3, #0
 801f010:	dd04      	ble.n	801f01c <_strtod_l+0x768>
 801f012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f014:	1ae4      	subs	r4, r4, r3
 801f016:	1ad2      	subs	r2, r2, r3
 801f018:	920e      	str	r2, [sp, #56]	@ 0x38
 801f01a:	1aed      	subs	r5, r5, r3
 801f01c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f01e:	2b00      	cmp	r3, #0
 801f020:	dd16      	ble.n	801f050 <_strtod_l+0x79c>
 801f022:	001a      	movs	r2, r3
 801f024:	9907      	ldr	r1, [sp, #28]
 801f026:	9805      	ldr	r0, [sp, #20]
 801f028:	f002 ffa6 	bl	8021f78 <__pow5mult>
 801f02c:	9007      	str	r0, [sp, #28]
 801f02e:	2800      	cmp	r0, #0
 801f030:	d0b3      	beq.n	801ef9a <_strtod_l+0x6e6>
 801f032:	0001      	movs	r1, r0
 801f034:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f036:	9805      	ldr	r0, [sp, #20]
 801f038:	f002 feec 	bl	8021e14 <__multiply>
 801f03c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f03e:	2800      	cmp	r0, #0
 801f040:	d100      	bne.n	801f044 <_strtod_l+0x790>
 801f042:	e671      	b.n	801ed28 <_strtod_l+0x474>
 801f044:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f046:	9805      	ldr	r0, [sp, #20]
 801f048:	f002 fdc8 	bl	8021bdc <_Bfree>
 801f04c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f04e:	931e      	str	r3, [sp, #120]	@ 0x78
 801f050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f052:	2b00      	cmp	r3, #0
 801f054:	dc12      	bgt.n	801f07c <_strtod_l+0x7c8>
 801f056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f058:	2b00      	cmp	r3, #0
 801f05a:	dd18      	ble.n	801f08e <_strtod_l+0x7da>
 801f05c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f05e:	9908      	ldr	r1, [sp, #32]
 801f060:	9805      	ldr	r0, [sp, #20]
 801f062:	f002 ff89 	bl	8021f78 <__pow5mult>
 801f066:	9008      	str	r0, [sp, #32]
 801f068:	2800      	cmp	r0, #0
 801f06a:	d110      	bne.n	801f08e <_strtod_l+0x7da>
 801f06c:	2300      	movs	r3, #0
 801f06e:	e65a      	b.n	801ed26 <_strtod_l+0x472>
 801f070:	4954      	ldr	r1, [pc, #336]	@ (801f1c4 <_strtod_l+0x910>)
 801f072:	1acb      	subs	r3, r1, r3
 801f074:	0001      	movs	r1, r0
 801f076:	4099      	lsls	r1, r3
 801f078:	9116      	str	r1, [sp, #88]	@ 0x58
 801f07a:	e7ba      	b.n	801eff2 <_strtod_l+0x73e>
 801f07c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f07e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f080:	9805      	ldr	r0, [sp, #20]
 801f082:	f002 ffd5 	bl	8022030 <__lshift>
 801f086:	901e      	str	r0, [sp, #120]	@ 0x78
 801f088:	2800      	cmp	r0, #0
 801f08a:	d1e4      	bne.n	801f056 <_strtod_l+0x7a2>
 801f08c:	e64c      	b.n	801ed28 <_strtod_l+0x474>
 801f08e:	2c00      	cmp	r4, #0
 801f090:	dd07      	ble.n	801f0a2 <_strtod_l+0x7ee>
 801f092:	0022      	movs	r2, r4
 801f094:	9908      	ldr	r1, [sp, #32]
 801f096:	9805      	ldr	r0, [sp, #20]
 801f098:	f002 ffca 	bl	8022030 <__lshift>
 801f09c:	9008      	str	r0, [sp, #32]
 801f09e:	2800      	cmp	r0, #0
 801f0a0:	d0e4      	beq.n	801f06c <_strtod_l+0x7b8>
 801f0a2:	2d00      	cmp	r5, #0
 801f0a4:	dd08      	ble.n	801f0b8 <_strtod_l+0x804>
 801f0a6:	002a      	movs	r2, r5
 801f0a8:	9907      	ldr	r1, [sp, #28]
 801f0aa:	9805      	ldr	r0, [sp, #20]
 801f0ac:	f002 ffc0 	bl	8022030 <__lshift>
 801f0b0:	9007      	str	r0, [sp, #28]
 801f0b2:	2800      	cmp	r0, #0
 801f0b4:	d100      	bne.n	801f0b8 <_strtod_l+0x804>
 801f0b6:	e637      	b.n	801ed28 <_strtod_l+0x474>
 801f0b8:	9a08      	ldr	r2, [sp, #32]
 801f0ba:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f0bc:	9805      	ldr	r0, [sp, #20]
 801f0be:	f003 f83f 	bl	8022140 <__mdiff>
 801f0c2:	9006      	str	r0, [sp, #24]
 801f0c4:	2800      	cmp	r0, #0
 801f0c6:	d100      	bne.n	801f0ca <_strtod_l+0x816>
 801f0c8:	e62e      	b.n	801ed28 <_strtod_l+0x474>
 801f0ca:	68c3      	ldr	r3, [r0, #12]
 801f0cc:	9907      	ldr	r1, [sp, #28]
 801f0ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	60c3      	str	r3, [r0, #12]
 801f0d4:	f003 f818 	bl	8022108 <__mcmp>
 801f0d8:	2800      	cmp	r0, #0
 801f0da:	da3b      	bge.n	801f154 <_strtod_l+0x8a0>
 801f0dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0de:	4333      	orrs	r3, r6
 801f0e0:	d167      	bne.n	801f1b2 <_strtod_l+0x8fe>
 801f0e2:	033b      	lsls	r3, r7, #12
 801f0e4:	d165      	bne.n	801f1b2 <_strtod_l+0x8fe>
 801f0e6:	22d6      	movs	r2, #214	@ 0xd6
 801f0e8:	4b37      	ldr	r3, [pc, #220]	@ (801f1c8 <_strtod_l+0x914>)
 801f0ea:	04d2      	lsls	r2, r2, #19
 801f0ec:	403b      	ands	r3, r7
 801f0ee:	4293      	cmp	r3, r2
 801f0f0:	d95f      	bls.n	801f1b2 <_strtod_l+0x8fe>
 801f0f2:	9b06      	ldr	r3, [sp, #24]
 801f0f4:	695b      	ldr	r3, [r3, #20]
 801f0f6:	2b00      	cmp	r3, #0
 801f0f8:	d103      	bne.n	801f102 <_strtod_l+0x84e>
 801f0fa:	9b06      	ldr	r3, [sp, #24]
 801f0fc:	691b      	ldr	r3, [r3, #16]
 801f0fe:	2b01      	cmp	r3, #1
 801f100:	dd57      	ble.n	801f1b2 <_strtod_l+0x8fe>
 801f102:	9906      	ldr	r1, [sp, #24]
 801f104:	2201      	movs	r2, #1
 801f106:	9805      	ldr	r0, [sp, #20]
 801f108:	f002 ff92 	bl	8022030 <__lshift>
 801f10c:	9907      	ldr	r1, [sp, #28]
 801f10e:	9006      	str	r0, [sp, #24]
 801f110:	f002 fffa 	bl	8022108 <__mcmp>
 801f114:	2800      	cmp	r0, #0
 801f116:	dd4c      	ble.n	801f1b2 <_strtod_l+0x8fe>
 801f118:	4b2b      	ldr	r3, [pc, #172]	@ (801f1c8 <_strtod_l+0x914>)
 801f11a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f11c:	403b      	ands	r3, r7
 801f11e:	2a00      	cmp	r2, #0
 801f120:	d074      	beq.n	801f20c <_strtod_l+0x958>
 801f122:	22d6      	movs	r2, #214	@ 0xd6
 801f124:	04d2      	lsls	r2, r2, #19
 801f126:	4293      	cmp	r3, r2
 801f128:	d870      	bhi.n	801f20c <_strtod_l+0x958>
 801f12a:	22dc      	movs	r2, #220	@ 0xdc
 801f12c:	0492      	lsls	r2, r2, #18
 801f12e:	4293      	cmp	r3, r2
 801f130:	d800      	bhi.n	801f134 <_strtod_l+0x880>
 801f132:	e695      	b.n	801ee60 <_strtod_l+0x5ac>
 801f134:	0030      	movs	r0, r6
 801f136:	0039      	movs	r1, r7
 801f138:	4b24      	ldr	r3, [pc, #144]	@ (801f1cc <_strtod_l+0x918>)
 801f13a:	2200      	movs	r2, #0
 801f13c:	f7e3 fa7e 	bl	800263c <__aeabi_dmul>
 801f140:	4b21      	ldr	r3, [pc, #132]	@ (801f1c8 <_strtod_l+0x914>)
 801f142:	0006      	movs	r6, r0
 801f144:	000f      	movs	r7, r1
 801f146:	420b      	tst	r3, r1
 801f148:	d000      	beq.n	801f14c <_strtod_l+0x898>
 801f14a:	e5f6      	b.n	801ed3a <_strtod_l+0x486>
 801f14c:	2322      	movs	r3, #34	@ 0x22
 801f14e:	9a05      	ldr	r2, [sp, #20]
 801f150:	6013      	str	r3, [r2, #0]
 801f152:	e5f2      	b.n	801ed3a <_strtod_l+0x486>
 801f154:	970e      	str	r7, [sp, #56]	@ 0x38
 801f156:	2800      	cmp	r0, #0
 801f158:	d175      	bne.n	801f246 <_strtod_l+0x992>
 801f15a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f15c:	033b      	lsls	r3, r7, #12
 801f15e:	0b1b      	lsrs	r3, r3, #12
 801f160:	2a00      	cmp	r2, #0
 801f162:	d039      	beq.n	801f1d8 <_strtod_l+0x924>
 801f164:	4a1a      	ldr	r2, [pc, #104]	@ (801f1d0 <_strtod_l+0x91c>)
 801f166:	4293      	cmp	r3, r2
 801f168:	d138      	bne.n	801f1dc <_strtod_l+0x928>
 801f16a:	2101      	movs	r1, #1
 801f16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f16e:	4249      	negs	r1, r1
 801f170:	0032      	movs	r2, r6
 801f172:	0008      	movs	r0, r1
 801f174:	2b00      	cmp	r3, #0
 801f176:	d00b      	beq.n	801f190 <_strtod_l+0x8dc>
 801f178:	24d4      	movs	r4, #212	@ 0xd4
 801f17a:	4b13      	ldr	r3, [pc, #76]	@ (801f1c8 <_strtod_l+0x914>)
 801f17c:	0008      	movs	r0, r1
 801f17e:	403b      	ands	r3, r7
 801f180:	04e4      	lsls	r4, r4, #19
 801f182:	42a3      	cmp	r3, r4
 801f184:	d804      	bhi.n	801f190 <_strtod_l+0x8dc>
 801f186:	306c      	adds	r0, #108	@ 0x6c
 801f188:	0d1b      	lsrs	r3, r3, #20
 801f18a:	1ac3      	subs	r3, r0, r3
 801f18c:	4099      	lsls	r1, r3
 801f18e:	0008      	movs	r0, r1
 801f190:	4282      	cmp	r2, r0
 801f192:	d123      	bne.n	801f1dc <_strtod_l+0x928>
 801f194:	4b0f      	ldr	r3, [pc, #60]	@ (801f1d4 <_strtod_l+0x920>)
 801f196:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f198:	4299      	cmp	r1, r3
 801f19a:	d102      	bne.n	801f1a2 <_strtod_l+0x8ee>
 801f19c:	3201      	adds	r2, #1
 801f19e:	d100      	bne.n	801f1a2 <_strtod_l+0x8ee>
 801f1a0:	e5c2      	b.n	801ed28 <_strtod_l+0x474>
 801f1a2:	4b09      	ldr	r3, [pc, #36]	@ (801f1c8 <_strtod_l+0x914>)
 801f1a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f1a6:	2600      	movs	r6, #0
 801f1a8:	401a      	ands	r2, r3
 801f1aa:	0013      	movs	r3, r2
 801f1ac:	2280      	movs	r2, #128	@ 0x80
 801f1ae:	0352      	lsls	r2, r2, #13
 801f1b0:	189f      	adds	r7, r3, r2
 801f1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d1bd      	bne.n	801f134 <_strtod_l+0x880>
 801f1b8:	e5bf      	b.n	801ed3a <_strtod_l+0x486>
 801f1ba:	46c0      	nop			@ (mov r8, r8)
 801f1bc:	08025db0 	.word	0x08025db0
 801f1c0:	fffffc02 	.word	0xfffffc02
 801f1c4:	fffffbe2 	.word	0xfffffbe2
 801f1c8:	7ff00000 	.word	0x7ff00000
 801f1cc:	39500000 	.word	0x39500000
 801f1d0:	000fffff 	.word	0x000fffff
 801f1d4:	7fefffff 	.word	0x7fefffff
 801f1d8:	4333      	orrs	r3, r6
 801f1da:	d09d      	beq.n	801f118 <_strtod_l+0x864>
 801f1dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d01c      	beq.n	801f21c <_strtod_l+0x968>
 801f1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1e6:	4213      	tst	r3, r2
 801f1e8:	d0e3      	beq.n	801f1b2 <_strtod_l+0x8fe>
 801f1ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1ec:	0030      	movs	r0, r6
 801f1ee:	0039      	movs	r1, r7
 801f1f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d016      	beq.n	801f224 <_strtod_l+0x970>
 801f1f6:	f7ff fb45 	bl	801e884 <sulp>
 801f1fa:	0002      	movs	r2, r0
 801f1fc:	000b      	movs	r3, r1
 801f1fe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f200:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f202:	f7e2 fa73 	bl	80016ec <__aeabi_dadd>
 801f206:	0006      	movs	r6, r0
 801f208:	000f      	movs	r7, r1
 801f20a:	e7d2      	b.n	801f1b2 <_strtod_l+0x8fe>
 801f20c:	2601      	movs	r6, #1
 801f20e:	4a92      	ldr	r2, [pc, #584]	@ (801f458 <_strtod_l+0xba4>)
 801f210:	4276      	negs	r6, r6
 801f212:	189b      	adds	r3, r3, r2
 801f214:	4a91      	ldr	r2, [pc, #580]	@ (801f45c <_strtod_l+0xba8>)
 801f216:	431a      	orrs	r2, r3
 801f218:	0017      	movs	r7, r2
 801f21a:	e7ca      	b.n	801f1b2 <_strtod_l+0x8fe>
 801f21c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f21e:	4233      	tst	r3, r6
 801f220:	d0c7      	beq.n	801f1b2 <_strtod_l+0x8fe>
 801f222:	e7e2      	b.n	801f1ea <_strtod_l+0x936>
 801f224:	f7ff fb2e 	bl	801e884 <sulp>
 801f228:	0002      	movs	r2, r0
 801f22a:	000b      	movs	r3, r1
 801f22c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f22e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f230:	f7e3 fccc 	bl	8002bcc <__aeabi_dsub>
 801f234:	2200      	movs	r2, #0
 801f236:	2300      	movs	r3, #0
 801f238:	0006      	movs	r6, r0
 801f23a:	000f      	movs	r7, r1
 801f23c:	f7e1 f938 	bl	80004b0 <__aeabi_dcmpeq>
 801f240:	2800      	cmp	r0, #0
 801f242:	d0b6      	beq.n	801f1b2 <_strtod_l+0x8fe>
 801f244:	e60c      	b.n	801ee60 <_strtod_l+0x5ac>
 801f246:	9907      	ldr	r1, [sp, #28]
 801f248:	9806      	ldr	r0, [sp, #24]
 801f24a:	f003 f8df 	bl	802240c <__ratio>
 801f24e:	2380      	movs	r3, #128	@ 0x80
 801f250:	2200      	movs	r2, #0
 801f252:	05db      	lsls	r3, r3, #23
 801f254:	0004      	movs	r4, r0
 801f256:	000d      	movs	r5, r1
 801f258:	f7e1 f93a 	bl	80004d0 <__aeabi_dcmple>
 801f25c:	2800      	cmp	r0, #0
 801f25e:	d06c      	beq.n	801f33a <_strtod_l+0xa86>
 801f260:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f262:	2b00      	cmp	r3, #0
 801f264:	d177      	bne.n	801f356 <_strtod_l+0xaa2>
 801f266:	2e00      	cmp	r6, #0
 801f268:	d157      	bne.n	801f31a <_strtod_l+0xa66>
 801f26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f26c:	031b      	lsls	r3, r3, #12
 801f26e:	d15a      	bne.n	801f326 <_strtod_l+0xa72>
 801f270:	2200      	movs	r2, #0
 801f272:	0020      	movs	r0, r4
 801f274:	0029      	movs	r1, r5
 801f276:	4b7a      	ldr	r3, [pc, #488]	@ (801f460 <_strtod_l+0xbac>)
 801f278:	f7e1 f920 	bl	80004bc <__aeabi_dcmplt>
 801f27c:	2800      	cmp	r0, #0
 801f27e:	d159      	bne.n	801f334 <_strtod_l+0xa80>
 801f280:	0020      	movs	r0, r4
 801f282:	0029      	movs	r1, r5
 801f284:	2200      	movs	r2, #0
 801f286:	4b77      	ldr	r3, [pc, #476]	@ (801f464 <_strtod_l+0xbb0>)
 801f288:	f7e3 f9d8 	bl	800263c <__aeabi_dmul>
 801f28c:	0004      	movs	r4, r0
 801f28e:	000d      	movs	r5, r1
 801f290:	2380      	movs	r3, #128	@ 0x80
 801f292:	061b      	lsls	r3, r3, #24
 801f294:	18eb      	adds	r3, r5, r3
 801f296:	940a      	str	r4, [sp, #40]	@ 0x28
 801f298:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f29a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f29e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f2a0:	9315      	str	r3, [sp, #84]	@ 0x54
 801f2a2:	4a71      	ldr	r2, [pc, #452]	@ (801f468 <_strtod_l+0xbb4>)
 801f2a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2a6:	4013      	ands	r3, r2
 801f2a8:	9316      	str	r3, [sp, #88]	@ 0x58
 801f2aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f2ac:	4b6f      	ldr	r3, [pc, #444]	@ (801f46c <_strtod_l+0xbb8>)
 801f2ae:	429a      	cmp	r2, r3
 801f2b0:	d000      	beq.n	801f2b4 <_strtod_l+0xa00>
 801f2b2:	e087      	b.n	801f3c4 <_strtod_l+0xb10>
 801f2b4:	4a6e      	ldr	r2, [pc, #440]	@ (801f470 <_strtod_l+0xbbc>)
 801f2b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2b8:	4694      	mov	ip, r2
 801f2ba:	4463      	add	r3, ip
 801f2bc:	001f      	movs	r7, r3
 801f2be:	0030      	movs	r0, r6
 801f2c0:	0019      	movs	r1, r3
 801f2c2:	f002 ffd7 	bl	8022274 <__ulp>
 801f2c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f2c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2ca:	f7e3 f9b7 	bl	800263c <__aeabi_dmul>
 801f2ce:	0032      	movs	r2, r6
 801f2d0:	003b      	movs	r3, r7
 801f2d2:	f7e2 fa0b 	bl	80016ec <__aeabi_dadd>
 801f2d6:	4a64      	ldr	r2, [pc, #400]	@ (801f468 <_strtod_l+0xbb4>)
 801f2d8:	4b66      	ldr	r3, [pc, #408]	@ (801f474 <_strtod_l+0xbc0>)
 801f2da:	0006      	movs	r6, r0
 801f2dc:	400a      	ands	r2, r1
 801f2de:	429a      	cmp	r2, r3
 801f2e0:	d940      	bls.n	801f364 <_strtod_l+0xab0>
 801f2e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f2e4:	4a64      	ldr	r2, [pc, #400]	@ (801f478 <_strtod_l+0xbc4>)
 801f2e6:	4293      	cmp	r3, r2
 801f2e8:	d103      	bne.n	801f2f2 <_strtod_l+0xa3e>
 801f2ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2ec:	3301      	adds	r3, #1
 801f2ee:	d100      	bne.n	801f2f2 <_strtod_l+0xa3e>
 801f2f0:	e51a      	b.n	801ed28 <_strtod_l+0x474>
 801f2f2:	2601      	movs	r6, #1
 801f2f4:	4f60      	ldr	r7, [pc, #384]	@ (801f478 <_strtod_l+0xbc4>)
 801f2f6:	4276      	negs	r6, r6
 801f2f8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f2fa:	9805      	ldr	r0, [sp, #20]
 801f2fc:	f002 fc6e 	bl	8021bdc <_Bfree>
 801f300:	9908      	ldr	r1, [sp, #32]
 801f302:	9805      	ldr	r0, [sp, #20]
 801f304:	f002 fc6a 	bl	8021bdc <_Bfree>
 801f308:	9907      	ldr	r1, [sp, #28]
 801f30a:	9805      	ldr	r0, [sp, #20]
 801f30c:	f002 fc66 	bl	8021bdc <_Bfree>
 801f310:	9906      	ldr	r1, [sp, #24]
 801f312:	9805      	ldr	r0, [sp, #20]
 801f314:	f002 fc62 	bl	8021bdc <_Bfree>
 801f318:	e617      	b.n	801ef4a <_strtod_l+0x696>
 801f31a:	2e01      	cmp	r6, #1
 801f31c:	d103      	bne.n	801f326 <_strtod_l+0xa72>
 801f31e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f320:	2b00      	cmp	r3, #0
 801f322:	d100      	bne.n	801f326 <_strtod_l+0xa72>
 801f324:	e59c      	b.n	801ee60 <_strtod_l+0x5ac>
 801f326:	2300      	movs	r3, #0
 801f328:	4c54      	ldr	r4, [pc, #336]	@ (801f47c <_strtod_l+0xbc8>)
 801f32a:	4d4d      	ldr	r5, [pc, #308]	@ (801f460 <_strtod_l+0xbac>)
 801f32c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f32e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f330:	2400      	movs	r4, #0
 801f332:	e7b2      	b.n	801f29a <_strtod_l+0x9e6>
 801f334:	2400      	movs	r4, #0
 801f336:	4d4b      	ldr	r5, [pc, #300]	@ (801f464 <_strtod_l+0xbb0>)
 801f338:	e7aa      	b.n	801f290 <_strtod_l+0x9dc>
 801f33a:	0020      	movs	r0, r4
 801f33c:	0029      	movs	r1, r5
 801f33e:	4b49      	ldr	r3, [pc, #292]	@ (801f464 <_strtod_l+0xbb0>)
 801f340:	2200      	movs	r2, #0
 801f342:	f7e3 f97b 	bl	800263c <__aeabi_dmul>
 801f346:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f348:	0004      	movs	r4, r0
 801f34a:	000d      	movs	r5, r1
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d09f      	beq.n	801f290 <_strtod_l+0x9dc>
 801f350:	940a      	str	r4, [sp, #40]	@ 0x28
 801f352:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f354:	e7a1      	b.n	801f29a <_strtod_l+0x9e6>
 801f356:	2300      	movs	r3, #0
 801f358:	4c41      	ldr	r4, [pc, #260]	@ (801f460 <_strtod_l+0xbac>)
 801f35a:	0025      	movs	r5, r4
 801f35c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f35e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f360:	001c      	movs	r4, r3
 801f362:	e79a      	b.n	801f29a <_strtod_l+0x9e6>
 801f364:	23d4      	movs	r3, #212	@ 0xd4
 801f366:	049b      	lsls	r3, r3, #18
 801f368:	18cf      	adds	r7, r1, r3
 801f36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f36c:	9710      	str	r7, [sp, #64]	@ 0x40
 801f36e:	2b00      	cmp	r3, #0
 801f370:	d1c2      	bne.n	801f2f8 <_strtod_l+0xa44>
 801f372:	4b3d      	ldr	r3, [pc, #244]	@ (801f468 <_strtod_l+0xbb4>)
 801f374:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f376:	403b      	ands	r3, r7
 801f378:	429a      	cmp	r2, r3
 801f37a:	d1bd      	bne.n	801f2f8 <_strtod_l+0xa44>
 801f37c:	0020      	movs	r0, r4
 801f37e:	0029      	movs	r1, r5
 801f380:	f7e1 f982 	bl	8000688 <__aeabi_d2lz>
 801f384:	f7e1 f9ba 	bl	80006fc <__aeabi_l2d>
 801f388:	0002      	movs	r2, r0
 801f38a:	000b      	movs	r3, r1
 801f38c:	0020      	movs	r0, r4
 801f38e:	0029      	movs	r1, r5
 801f390:	f7e3 fc1c 	bl	8002bcc <__aeabi_dsub>
 801f394:	033c      	lsls	r4, r7, #12
 801f396:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f398:	0b24      	lsrs	r4, r4, #12
 801f39a:	4334      	orrs	r4, r6
 801f39c:	900e      	str	r0, [sp, #56]	@ 0x38
 801f39e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f3a0:	4a37      	ldr	r2, [pc, #220]	@ (801f480 <_strtod_l+0xbcc>)
 801f3a2:	431c      	orrs	r4, r3
 801f3a4:	d052      	beq.n	801f44c <_strtod_l+0xb98>
 801f3a6:	4b37      	ldr	r3, [pc, #220]	@ (801f484 <_strtod_l+0xbd0>)
 801f3a8:	f7e1 f888 	bl	80004bc <__aeabi_dcmplt>
 801f3ac:	2800      	cmp	r0, #0
 801f3ae:	d000      	beq.n	801f3b2 <_strtod_l+0xafe>
 801f3b0:	e4c3      	b.n	801ed3a <_strtod_l+0x486>
 801f3b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f3b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f3b6:	4a34      	ldr	r2, [pc, #208]	@ (801f488 <_strtod_l+0xbd4>)
 801f3b8:	4b2a      	ldr	r3, [pc, #168]	@ (801f464 <_strtod_l+0xbb0>)
 801f3ba:	f7e1 f893 	bl	80004e4 <__aeabi_dcmpgt>
 801f3be:	2800      	cmp	r0, #0
 801f3c0:	d09a      	beq.n	801f2f8 <_strtod_l+0xa44>
 801f3c2:	e4ba      	b.n	801ed3a <_strtod_l+0x486>
 801f3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d02a      	beq.n	801f420 <_strtod_l+0xb6c>
 801f3ca:	23d4      	movs	r3, #212	@ 0xd4
 801f3cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f3ce:	04db      	lsls	r3, r3, #19
 801f3d0:	429a      	cmp	r2, r3
 801f3d2:	d825      	bhi.n	801f420 <_strtod_l+0xb6c>
 801f3d4:	0020      	movs	r0, r4
 801f3d6:	0029      	movs	r1, r5
 801f3d8:	4a2c      	ldr	r2, [pc, #176]	@ (801f48c <_strtod_l+0xbd8>)
 801f3da:	4b2d      	ldr	r3, [pc, #180]	@ (801f490 <_strtod_l+0xbdc>)
 801f3dc:	f7e1 f878 	bl	80004d0 <__aeabi_dcmple>
 801f3e0:	2800      	cmp	r0, #0
 801f3e2:	d016      	beq.n	801f412 <_strtod_l+0xb5e>
 801f3e4:	0020      	movs	r0, r4
 801f3e6:	0029      	movs	r1, r5
 801f3e8:	f7e1 f930 	bl	800064c <__aeabi_d2uiz>
 801f3ec:	2800      	cmp	r0, #0
 801f3ee:	d100      	bne.n	801f3f2 <_strtod_l+0xb3e>
 801f3f0:	3001      	adds	r0, #1
 801f3f2:	f7e4 f813 	bl	800341c <__aeabi_ui2d>
 801f3f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f3f8:	0004      	movs	r4, r0
 801f3fa:	000d      	movs	r5, r1
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d122      	bne.n	801f446 <_strtod_l+0xb92>
 801f400:	2380      	movs	r3, #128	@ 0x80
 801f402:	061b      	lsls	r3, r3, #24
 801f404:	18cb      	adds	r3, r1, r3
 801f406:	9018      	str	r0, [sp, #96]	@ 0x60
 801f408:	9319      	str	r3, [sp, #100]	@ 0x64
 801f40a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f40c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f40e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f410:	9315      	str	r3, [sp, #84]	@ 0x54
 801f412:	22d6      	movs	r2, #214	@ 0xd6
 801f414:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f416:	04d2      	lsls	r2, r2, #19
 801f418:	189b      	adds	r3, r3, r2
 801f41a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f41c:	1a9b      	subs	r3, r3, r2
 801f41e:	9315      	str	r3, [sp, #84]	@ 0x54
 801f420:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f422:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f424:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f426:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f428:	f002 ff24 	bl	8022274 <__ulp>
 801f42c:	0002      	movs	r2, r0
 801f42e:	000b      	movs	r3, r1
 801f430:	0030      	movs	r0, r6
 801f432:	0039      	movs	r1, r7
 801f434:	f7e3 f902 	bl	800263c <__aeabi_dmul>
 801f438:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f43a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f43c:	f7e2 f956 	bl	80016ec <__aeabi_dadd>
 801f440:	0006      	movs	r6, r0
 801f442:	000f      	movs	r7, r1
 801f444:	e791      	b.n	801f36a <_strtod_l+0xab6>
 801f446:	9418      	str	r4, [sp, #96]	@ 0x60
 801f448:	9519      	str	r5, [sp, #100]	@ 0x64
 801f44a:	e7de      	b.n	801f40a <_strtod_l+0xb56>
 801f44c:	4b11      	ldr	r3, [pc, #68]	@ (801f494 <_strtod_l+0xbe0>)
 801f44e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f450:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f452:	f7e1 f833 	bl	80004bc <__aeabi_dcmplt>
 801f456:	e7b2      	b.n	801f3be <_strtod_l+0xb0a>
 801f458:	fff00000 	.word	0xfff00000
 801f45c:	000fffff 	.word	0x000fffff
 801f460:	3ff00000 	.word	0x3ff00000
 801f464:	3fe00000 	.word	0x3fe00000
 801f468:	7ff00000 	.word	0x7ff00000
 801f46c:	7fe00000 	.word	0x7fe00000
 801f470:	fcb00000 	.word	0xfcb00000
 801f474:	7c9fffff 	.word	0x7c9fffff
 801f478:	7fefffff 	.word	0x7fefffff
 801f47c:	bff00000 	.word	0xbff00000
 801f480:	94a03595 	.word	0x94a03595
 801f484:	3fdfffff 	.word	0x3fdfffff
 801f488:	35afe535 	.word	0x35afe535
 801f48c:	ffc00000 	.word	0xffc00000
 801f490:	41dfffff 	.word	0x41dfffff
 801f494:	3fcfffff 	.word	0x3fcfffff

0801f498 <strtod>:
 801f498:	b510      	push	{r4, lr}
 801f49a:	4c04      	ldr	r4, [pc, #16]	@ (801f4ac <strtod+0x14>)
 801f49c:	000a      	movs	r2, r1
 801f49e:	0001      	movs	r1, r0
 801f4a0:	4b03      	ldr	r3, [pc, #12]	@ (801f4b0 <strtod+0x18>)
 801f4a2:	6820      	ldr	r0, [r4, #0]
 801f4a4:	f7ff fa06 	bl	801e8b4 <_strtod_l>
 801f4a8:	bd10      	pop	{r4, pc}
 801f4aa:	46c0      	nop			@ (mov r8, r8)
 801f4ac:	200003d0 	.word	0x200003d0
 801f4b0:	20000264 	.word	0x20000264

0801f4b4 <_strtol_l.constprop.0>:
 801f4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4b6:	b085      	sub	sp, #20
 801f4b8:	0017      	movs	r7, r2
 801f4ba:	001e      	movs	r6, r3
 801f4bc:	9003      	str	r0, [sp, #12]
 801f4be:	9101      	str	r1, [sp, #4]
 801f4c0:	2b24      	cmp	r3, #36	@ 0x24
 801f4c2:	d844      	bhi.n	801f54e <_strtol_l.constprop.0+0x9a>
 801f4c4:	000c      	movs	r4, r1
 801f4c6:	2b01      	cmp	r3, #1
 801f4c8:	d041      	beq.n	801f54e <_strtol_l.constprop.0+0x9a>
 801f4ca:	4b3d      	ldr	r3, [pc, #244]	@ (801f5c0 <_strtol_l.constprop.0+0x10c>)
 801f4cc:	2208      	movs	r2, #8
 801f4ce:	469c      	mov	ip, r3
 801f4d0:	0023      	movs	r3, r4
 801f4d2:	4661      	mov	r1, ip
 801f4d4:	781d      	ldrb	r5, [r3, #0]
 801f4d6:	3401      	adds	r4, #1
 801f4d8:	5d48      	ldrb	r0, [r1, r5]
 801f4da:	0001      	movs	r1, r0
 801f4dc:	4011      	ands	r1, r2
 801f4de:	4210      	tst	r0, r2
 801f4e0:	d1f6      	bne.n	801f4d0 <_strtol_l.constprop.0+0x1c>
 801f4e2:	2d2d      	cmp	r5, #45	@ 0x2d
 801f4e4:	d13a      	bne.n	801f55c <_strtol_l.constprop.0+0xa8>
 801f4e6:	7825      	ldrb	r5, [r4, #0]
 801f4e8:	1c9c      	adds	r4, r3, #2
 801f4ea:	2301      	movs	r3, #1
 801f4ec:	9300      	str	r3, [sp, #0]
 801f4ee:	2210      	movs	r2, #16
 801f4f0:	0033      	movs	r3, r6
 801f4f2:	4393      	bics	r3, r2
 801f4f4:	d109      	bne.n	801f50a <_strtol_l.constprop.0+0x56>
 801f4f6:	2d30      	cmp	r5, #48	@ 0x30
 801f4f8:	d136      	bne.n	801f568 <_strtol_l.constprop.0+0xb4>
 801f4fa:	2120      	movs	r1, #32
 801f4fc:	7823      	ldrb	r3, [r4, #0]
 801f4fe:	438b      	bics	r3, r1
 801f500:	2b58      	cmp	r3, #88	@ 0x58
 801f502:	d131      	bne.n	801f568 <_strtol_l.constprop.0+0xb4>
 801f504:	0016      	movs	r6, r2
 801f506:	7865      	ldrb	r5, [r4, #1]
 801f508:	3402      	adds	r4, #2
 801f50a:	4a2e      	ldr	r2, [pc, #184]	@ (801f5c4 <_strtol_l.constprop.0+0x110>)
 801f50c:	9b00      	ldr	r3, [sp, #0]
 801f50e:	4694      	mov	ip, r2
 801f510:	4463      	add	r3, ip
 801f512:	0031      	movs	r1, r6
 801f514:	0018      	movs	r0, r3
 801f516:	9302      	str	r3, [sp, #8]
 801f518:	f7e0 feca 	bl	80002b0 <__aeabi_uidivmod>
 801f51c:	2200      	movs	r2, #0
 801f51e:	4684      	mov	ip, r0
 801f520:	0010      	movs	r0, r2
 801f522:	002b      	movs	r3, r5
 801f524:	3b30      	subs	r3, #48	@ 0x30
 801f526:	2b09      	cmp	r3, #9
 801f528:	d825      	bhi.n	801f576 <_strtol_l.constprop.0+0xc2>
 801f52a:	001d      	movs	r5, r3
 801f52c:	42ae      	cmp	r6, r5
 801f52e:	dd31      	ble.n	801f594 <_strtol_l.constprop.0+0xe0>
 801f530:	1c53      	adds	r3, r2, #1
 801f532:	d009      	beq.n	801f548 <_strtol_l.constprop.0+0x94>
 801f534:	2201      	movs	r2, #1
 801f536:	4252      	negs	r2, r2
 801f538:	4584      	cmp	ip, r0
 801f53a:	d305      	bcc.n	801f548 <_strtol_l.constprop.0+0x94>
 801f53c:	d101      	bne.n	801f542 <_strtol_l.constprop.0+0x8e>
 801f53e:	42a9      	cmp	r1, r5
 801f540:	db25      	blt.n	801f58e <_strtol_l.constprop.0+0xda>
 801f542:	2201      	movs	r2, #1
 801f544:	4370      	muls	r0, r6
 801f546:	1828      	adds	r0, r5, r0
 801f548:	7825      	ldrb	r5, [r4, #0]
 801f54a:	3401      	adds	r4, #1
 801f54c:	e7e9      	b.n	801f522 <_strtol_l.constprop.0+0x6e>
 801f54e:	f000 ffc5 	bl	80204dc <__errno>
 801f552:	2316      	movs	r3, #22
 801f554:	6003      	str	r3, [r0, #0]
 801f556:	2000      	movs	r0, #0
 801f558:	b005      	add	sp, #20
 801f55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f55c:	9100      	str	r1, [sp, #0]
 801f55e:	2d2b      	cmp	r5, #43	@ 0x2b
 801f560:	d1c5      	bne.n	801f4ee <_strtol_l.constprop.0+0x3a>
 801f562:	7825      	ldrb	r5, [r4, #0]
 801f564:	1c9c      	adds	r4, r3, #2
 801f566:	e7c2      	b.n	801f4ee <_strtol_l.constprop.0+0x3a>
 801f568:	2e00      	cmp	r6, #0
 801f56a:	d1ce      	bne.n	801f50a <_strtol_l.constprop.0+0x56>
 801f56c:	3608      	adds	r6, #8
 801f56e:	2d30      	cmp	r5, #48	@ 0x30
 801f570:	d0cb      	beq.n	801f50a <_strtol_l.constprop.0+0x56>
 801f572:	3602      	adds	r6, #2
 801f574:	e7c9      	b.n	801f50a <_strtol_l.constprop.0+0x56>
 801f576:	002b      	movs	r3, r5
 801f578:	3b41      	subs	r3, #65	@ 0x41
 801f57a:	2b19      	cmp	r3, #25
 801f57c:	d801      	bhi.n	801f582 <_strtol_l.constprop.0+0xce>
 801f57e:	3d37      	subs	r5, #55	@ 0x37
 801f580:	e7d4      	b.n	801f52c <_strtol_l.constprop.0+0x78>
 801f582:	002b      	movs	r3, r5
 801f584:	3b61      	subs	r3, #97	@ 0x61
 801f586:	2b19      	cmp	r3, #25
 801f588:	d804      	bhi.n	801f594 <_strtol_l.constprop.0+0xe0>
 801f58a:	3d57      	subs	r5, #87	@ 0x57
 801f58c:	e7ce      	b.n	801f52c <_strtol_l.constprop.0+0x78>
 801f58e:	2201      	movs	r2, #1
 801f590:	4252      	negs	r2, r2
 801f592:	e7d9      	b.n	801f548 <_strtol_l.constprop.0+0x94>
 801f594:	1c53      	adds	r3, r2, #1
 801f596:	d108      	bne.n	801f5aa <_strtol_l.constprop.0+0xf6>
 801f598:	2322      	movs	r3, #34	@ 0x22
 801f59a:	9a03      	ldr	r2, [sp, #12]
 801f59c:	9802      	ldr	r0, [sp, #8]
 801f59e:	6013      	str	r3, [r2, #0]
 801f5a0:	2f00      	cmp	r7, #0
 801f5a2:	d0d9      	beq.n	801f558 <_strtol_l.constprop.0+0xa4>
 801f5a4:	1e63      	subs	r3, r4, #1
 801f5a6:	9301      	str	r3, [sp, #4]
 801f5a8:	e007      	b.n	801f5ba <_strtol_l.constprop.0+0x106>
 801f5aa:	9b00      	ldr	r3, [sp, #0]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d000      	beq.n	801f5b2 <_strtol_l.constprop.0+0xfe>
 801f5b0:	4240      	negs	r0, r0
 801f5b2:	2f00      	cmp	r7, #0
 801f5b4:	d0d0      	beq.n	801f558 <_strtol_l.constprop.0+0xa4>
 801f5b6:	2a00      	cmp	r2, #0
 801f5b8:	d1f4      	bne.n	801f5a4 <_strtol_l.constprop.0+0xf0>
 801f5ba:	9b01      	ldr	r3, [sp, #4]
 801f5bc:	603b      	str	r3, [r7, #0]
 801f5be:	e7cb      	b.n	801f558 <_strtol_l.constprop.0+0xa4>
 801f5c0:	08025dd9 	.word	0x08025dd9
 801f5c4:	7fffffff 	.word	0x7fffffff

0801f5c8 <strtol>:
 801f5c8:	b510      	push	{r4, lr}
 801f5ca:	4c04      	ldr	r4, [pc, #16]	@ (801f5dc <strtol+0x14>)
 801f5cc:	0013      	movs	r3, r2
 801f5ce:	000a      	movs	r2, r1
 801f5d0:	0001      	movs	r1, r0
 801f5d2:	6820      	ldr	r0, [r4, #0]
 801f5d4:	f7ff ff6e 	bl	801f4b4 <_strtol_l.constprop.0>
 801f5d8:	bd10      	pop	{r4, pc}
 801f5da:	46c0      	nop			@ (mov r8, r8)
 801f5dc:	200003d0 	.word	0x200003d0

0801f5e0 <__cvt>:
 801f5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5e2:	001f      	movs	r7, r3
 801f5e4:	2300      	movs	r3, #0
 801f5e6:	0016      	movs	r6, r2
 801f5e8:	b08b      	sub	sp, #44	@ 0x2c
 801f5ea:	429f      	cmp	r7, r3
 801f5ec:	da04      	bge.n	801f5f8 <__cvt+0x18>
 801f5ee:	2180      	movs	r1, #128	@ 0x80
 801f5f0:	0609      	lsls	r1, r1, #24
 801f5f2:	187b      	adds	r3, r7, r1
 801f5f4:	001f      	movs	r7, r3
 801f5f6:	232d      	movs	r3, #45	@ 0x2d
 801f5f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f5fa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f5fc:	7013      	strb	r3, [r2, #0]
 801f5fe:	2320      	movs	r3, #32
 801f600:	2203      	movs	r2, #3
 801f602:	439d      	bics	r5, r3
 801f604:	2d46      	cmp	r5, #70	@ 0x46
 801f606:	d007      	beq.n	801f618 <__cvt+0x38>
 801f608:	002b      	movs	r3, r5
 801f60a:	3b45      	subs	r3, #69	@ 0x45
 801f60c:	4259      	negs	r1, r3
 801f60e:	414b      	adcs	r3, r1
 801f610:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f612:	3a01      	subs	r2, #1
 801f614:	18cb      	adds	r3, r1, r3
 801f616:	9310      	str	r3, [sp, #64]	@ 0x40
 801f618:	ab09      	add	r3, sp, #36	@ 0x24
 801f61a:	9304      	str	r3, [sp, #16]
 801f61c:	ab08      	add	r3, sp, #32
 801f61e:	9303      	str	r3, [sp, #12]
 801f620:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f622:	9200      	str	r2, [sp, #0]
 801f624:	9302      	str	r3, [sp, #8]
 801f626:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f628:	0032      	movs	r2, r6
 801f62a:	9301      	str	r3, [sp, #4]
 801f62c:	003b      	movs	r3, r7
 801f62e:	f001 f82b 	bl	8020688 <_dtoa_r>
 801f632:	0004      	movs	r4, r0
 801f634:	2d47      	cmp	r5, #71	@ 0x47
 801f636:	d11b      	bne.n	801f670 <__cvt+0x90>
 801f638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f63a:	07db      	lsls	r3, r3, #31
 801f63c:	d511      	bpl.n	801f662 <__cvt+0x82>
 801f63e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f640:	18c3      	adds	r3, r0, r3
 801f642:	9307      	str	r3, [sp, #28]
 801f644:	2200      	movs	r2, #0
 801f646:	2300      	movs	r3, #0
 801f648:	0030      	movs	r0, r6
 801f64a:	0039      	movs	r1, r7
 801f64c:	f7e0 ff30 	bl	80004b0 <__aeabi_dcmpeq>
 801f650:	2800      	cmp	r0, #0
 801f652:	d001      	beq.n	801f658 <__cvt+0x78>
 801f654:	9b07      	ldr	r3, [sp, #28]
 801f656:	9309      	str	r3, [sp, #36]	@ 0x24
 801f658:	2230      	movs	r2, #48	@ 0x30
 801f65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f65c:	9907      	ldr	r1, [sp, #28]
 801f65e:	428b      	cmp	r3, r1
 801f660:	d320      	bcc.n	801f6a4 <__cvt+0xc4>
 801f662:	0020      	movs	r0, r4
 801f664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f666:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f668:	1b1b      	subs	r3, r3, r4
 801f66a:	6013      	str	r3, [r2, #0]
 801f66c:	b00b      	add	sp, #44	@ 0x2c
 801f66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f670:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f672:	18c3      	adds	r3, r0, r3
 801f674:	9307      	str	r3, [sp, #28]
 801f676:	2d46      	cmp	r5, #70	@ 0x46
 801f678:	d1e4      	bne.n	801f644 <__cvt+0x64>
 801f67a:	7803      	ldrb	r3, [r0, #0]
 801f67c:	2b30      	cmp	r3, #48	@ 0x30
 801f67e:	d10c      	bne.n	801f69a <__cvt+0xba>
 801f680:	2200      	movs	r2, #0
 801f682:	2300      	movs	r3, #0
 801f684:	0030      	movs	r0, r6
 801f686:	0039      	movs	r1, r7
 801f688:	f7e0 ff12 	bl	80004b0 <__aeabi_dcmpeq>
 801f68c:	2800      	cmp	r0, #0
 801f68e:	d104      	bne.n	801f69a <__cvt+0xba>
 801f690:	2301      	movs	r3, #1
 801f692:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f694:	1a9b      	subs	r3, r3, r2
 801f696:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f698:	6013      	str	r3, [r2, #0]
 801f69a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f69c:	9a07      	ldr	r2, [sp, #28]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	18d3      	adds	r3, r2, r3
 801f6a2:	e7ce      	b.n	801f642 <__cvt+0x62>
 801f6a4:	1c59      	adds	r1, r3, #1
 801f6a6:	9109      	str	r1, [sp, #36]	@ 0x24
 801f6a8:	701a      	strb	r2, [r3, #0]
 801f6aa:	e7d6      	b.n	801f65a <__cvt+0x7a>

0801f6ac <__exponent>:
 801f6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6ae:	232b      	movs	r3, #43	@ 0x2b
 801f6b0:	0005      	movs	r5, r0
 801f6b2:	000c      	movs	r4, r1
 801f6b4:	b085      	sub	sp, #20
 801f6b6:	7002      	strb	r2, [r0, #0]
 801f6b8:	2900      	cmp	r1, #0
 801f6ba:	da01      	bge.n	801f6c0 <__exponent+0x14>
 801f6bc:	424c      	negs	r4, r1
 801f6be:	3302      	adds	r3, #2
 801f6c0:	706b      	strb	r3, [r5, #1]
 801f6c2:	2c09      	cmp	r4, #9
 801f6c4:	dd2c      	ble.n	801f720 <__exponent+0x74>
 801f6c6:	ab02      	add	r3, sp, #8
 801f6c8:	1dde      	adds	r6, r3, #7
 801f6ca:	0020      	movs	r0, r4
 801f6cc:	210a      	movs	r1, #10
 801f6ce:	f7e0 fed9 	bl	8000484 <__aeabi_idivmod>
 801f6d2:	0037      	movs	r7, r6
 801f6d4:	3130      	adds	r1, #48	@ 0x30
 801f6d6:	3e01      	subs	r6, #1
 801f6d8:	0020      	movs	r0, r4
 801f6da:	7031      	strb	r1, [r6, #0]
 801f6dc:	210a      	movs	r1, #10
 801f6de:	9401      	str	r4, [sp, #4]
 801f6e0:	f7e0 fdea 	bl	80002b8 <__divsi3>
 801f6e4:	9b01      	ldr	r3, [sp, #4]
 801f6e6:	0004      	movs	r4, r0
 801f6e8:	2b63      	cmp	r3, #99	@ 0x63
 801f6ea:	dcee      	bgt.n	801f6ca <__exponent+0x1e>
 801f6ec:	1eba      	subs	r2, r7, #2
 801f6ee:	1ca8      	adds	r0, r5, #2
 801f6f0:	0001      	movs	r1, r0
 801f6f2:	0013      	movs	r3, r2
 801f6f4:	3430      	adds	r4, #48	@ 0x30
 801f6f6:	7014      	strb	r4, [r2, #0]
 801f6f8:	ac02      	add	r4, sp, #8
 801f6fa:	3407      	adds	r4, #7
 801f6fc:	429c      	cmp	r4, r3
 801f6fe:	d80a      	bhi.n	801f716 <__exponent+0x6a>
 801f700:	2300      	movs	r3, #0
 801f702:	42a2      	cmp	r2, r4
 801f704:	d803      	bhi.n	801f70e <__exponent+0x62>
 801f706:	3309      	adds	r3, #9
 801f708:	aa02      	add	r2, sp, #8
 801f70a:	189b      	adds	r3, r3, r2
 801f70c:	1bdb      	subs	r3, r3, r7
 801f70e:	18c0      	adds	r0, r0, r3
 801f710:	1b40      	subs	r0, r0, r5
 801f712:	b005      	add	sp, #20
 801f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f716:	781c      	ldrb	r4, [r3, #0]
 801f718:	3301      	adds	r3, #1
 801f71a:	700c      	strb	r4, [r1, #0]
 801f71c:	3101      	adds	r1, #1
 801f71e:	e7eb      	b.n	801f6f8 <__exponent+0x4c>
 801f720:	2330      	movs	r3, #48	@ 0x30
 801f722:	18e4      	adds	r4, r4, r3
 801f724:	70ab      	strb	r3, [r5, #2]
 801f726:	1d28      	adds	r0, r5, #4
 801f728:	70ec      	strb	r4, [r5, #3]
 801f72a:	e7f1      	b.n	801f710 <__exponent+0x64>

0801f72c <_printf_float>:
 801f72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f72e:	b097      	sub	sp, #92	@ 0x5c
 801f730:	000d      	movs	r5, r1
 801f732:	920a      	str	r2, [sp, #40]	@ 0x28
 801f734:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f736:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f738:	9009      	str	r0, [sp, #36]	@ 0x24
 801f73a:	f000 fe7d 	bl	8020438 <_localeconv_r>
 801f73e:	6803      	ldr	r3, [r0, #0]
 801f740:	0018      	movs	r0, r3
 801f742:	930d      	str	r3, [sp, #52]	@ 0x34
 801f744:	f7e0 fd12 	bl	800016c <strlen>
 801f748:	2300      	movs	r3, #0
 801f74a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f74c:	9314      	str	r3, [sp, #80]	@ 0x50
 801f74e:	7e2b      	ldrb	r3, [r5, #24]
 801f750:	2207      	movs	r2, #7
 801f752:	930c      	str	r3, [sp, #48]	@ 0x30
 801f754:	682b      	ldr	r3, [r5, #0]
 801f756:	930e      	str	r3, [sp, #56]	@ 0x38
 801f758:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f75a:	6823      	ldr	r3, [r4, #0]
 801f75c:	05c9      	lsls	r1, r1, #23
 801f75e:	d545      	bpl.n	801f7ec <_printf_float+0xc0>
 801f760:	189b      	adds	r3, r3, r2
 801f762:	4393      	bics	r3, r2
 801f764:	001a      	movs	r2, r3
 801f766:	3208      	adds	r2, #8
 801f768:	6022      	str	r2, [r4, #0]
 801f76a:	2201      	movs	r2, #1
 801f76c:	681e      	ldr	r6, [r3, #0]
 801f76e:	685f      	ldr	r7, [r3, #4]
 801f770:	007b      	lsls	r3, r7, #1
 801f772:	085b      	lsrs	r3, r3, #1
 801f774:	9311      	str	r3, [sp, #68]	@ 0x44
 801f776:	9610      	str	r6, [sp, #64]	@ 0x40
 801f778:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f77a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f77c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f77e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f780:	4ba7      	ldr	r3, [pc, #668]	@ (801fa20 <_printf_float+0x2f4>)
 801f782:	4252      	negs	r2, r2
 801f784:	f7e3 fdbe 	bl	8003304 <__aeabi_dcmpun>
 801f788:	2800      	cmp	r0, #0
 801f78a:	d131      	bne.n	801f7f0 <_printf_float+0xc4>
 801f78c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f78e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f790:	2201      	movs	r2, #1
 801f792:	4ba3      	ldr	r3, [pc, #652]	@ (801fa20 <_printf_float+0x2f4>)
 801f794:	4252      	negs	r2, r2
 801f796:	f7e0 fe9b 	bl	80004d0 <__aeabi_dcmple>
 801f79a:	2800      	cmp	r0, #0
 801f79c:	d128      	bne.n	801f7f0 <_printf_float+0xc4>
 801f79e:	2200      	movs	r2, #0
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	0030      	movs	r0, r6
 801f7a4:	0039      	movs	r1, r7
 801f7a6:	f7e0 fe89 	bl	80004bc <__aeabi_dcmplt>
 801f7aa:	2800      	cmp	r0, #0
 801f7ac:	d003      	beq.n	801f7b6 <_printf_float+0x8a>
 801f7ae:	002b      	movs	r3, r5
 801f7b0:	222d      	movs	r2, #45	@ 0x2d
 801f7b2:	3343      	adds	r3, #67	@ 0x43
 801f7b4:	701a      	strb	r2, [r3, #0]
 801f7b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7b8:	4f9a      	ldr	r7, [pc, #616]	@ (801fa24 <_printf_float+0x2f8>)
 801f7ba:	2b47      	cmp	r3, #71	@ 0x47
 801f7bc:	d900      	bls.n	801f7c0 <_printf_float+0x94>
 801f7be:	4f9a      	ldr	r7, [pc, #616]	@ (801fa28 <_printf_float+0x2fc>)
 801f7c0:	2303      	movs	r3, #3
 801f7c2:	2400      	movs	r4, #0
 801f7c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7c6:	612b      	str	r3, [r5, #16]
 801f7c8:	3301      	adds	r3, #1
 801f7ca:	439a      	bics	r2, r3
 801f7cc:	602a      	str	r2, [r5, #0]
 801f7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f7d0:	0029      	movs	r1, r5
 801f7d2:	9300      	str	r3, [sp, #0]
 801f7d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f7d8:	aa15      	add	r2, sp, #84	@ 0x54
 801f7da:	f000 f9e5 	bl	801fba8 <_printf_common>
 801f7de:	3001      	adds	r0, #1
 801f7e0:	d000      	beq.n	801f7e4 <_printf_float+0xb8>
 801f7e2:	e09f      	b.n	801f924 <_printf_float+0x1f8>
 801f7e4:	2001      	movs	r0, #1
 801f7e6:	4240      	negs	r0, r0
 801f7e8:	b017      	add	sp, #92	@ 0x5c
 801f7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7ec:	3307      	adds	r3, #7
 801f7ee:	e7b8      	b.n	801f762 <_printf_float+0x36>
 801f7f0:	0032      	movs	r2, r6
 801f7f2:	003b      	movs	r3, r7
 801f7f4:	0030      	movs	r0, r6
 801f7f6:	0039      	movs	r1, r7
 801f7f8:	f7e3 fd84 	bl	8003304 <__aeabi_dcmpun>
 801f7fc:	2800      	cmp	r0, #0
 801f7fe:	d00b      	beq.n	801f818 <_printf_float+0xec>
 801f800:	2f00      	cmp	r7, #0
 801f802:	da03      	bge.n	801f80c <_printf_float+0xe0>
 801f804:	002b      	movs	r3, r5
 801f806:	222d      	movs	r2, #45	@ 0x2d
 801f808:	3343      	adds	r3, #67	@ 0x43
 801f80a:	701a      	strb	r2, [r3, #0]
 801f80c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f80e:	4f87      	ldr	r7, [pc, #540]	@ (801fa2c <_printf_float+0x300>)
 801f810:	2b47      	cmp	r3, #71	@ 0x47
 801f812:	d9d5      	bls.n	801f7c0 <_printf_float+0x94>
 801f814:	4f86      	ldr	r7, [pc, #536]	@ (801fa30 <_printf_float+0x304>)
 801f816:	e7d3      	b.n	801f7c0 <_printf_float+0x94>
 801f818:	2220      	movs	r2, #32
 801f81a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f81c:	686b      	ldr	r3, [r5, #4]
 801f81e:	4394      	bics	r4, r2
 801f820:	1c5a      	adds	r2, r3, #1
 801f822:	d146      	bne.n	801f8b2 <_printf_float+0x186>
 801f824:	3307      	adds	r3, #7
 801f826:	606b      	str	r3, [r5, #4]
 801f828:	2380      	movs	r3, #128	@ 0x80
 801f82a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f82c:	00db      	lsls	r3, r3, #3
 801f82e:	4313      	orrs	r3, r2
 801f830:	2200      	movs	r2, #0
 801f832:	602b      	str	r3, [r5, #0]
 801f834:	9206      	str	r2, [sp, #24]
 801f836:	aa14      	add	r2, sp, #80	@ 0x50
 801f838:	9205      	str	r2, [sp, #20]
 801f83a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f83c:	a90a      	add	r1, sp, #40	@ 0x28
 801f83e:	9204      	str	r2, [sp, #16]
 801f840:	aa13      	add	r2, sp, #76	@ 0x4c
 801f842:	9203      	str	r2, [sp, #12]
 801f844:	2223      	movs	r2, #35	@ 0x23
 801f846:	1852      	adds	r2, r2, r1
 801f848:	9202      	str	r2, [sp, #8]
 801f84a:	9301      	str	r3, [sp, #4]
 801f84c:	686b      	ldr	r3, [r5, #4]
 801f84e:	0032      	movs	r2, r6
 801f850:	9300      	str	r3, [sp, #0]
 801f852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f854:	003b      	movs	r3, r7
 801f856:	f7ff fec3 	bl	801f5e0 <__cvt>
 801f85a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f85c:	0007      	movs	r7, r0
 801f85e:	2c47      	cmp	r4, #71	@ 0x47
 801f860:	d12d      	bne.n	801f8be <_printf_float+0x192>
 801f862:	1cd3      	adds	r3, r2, #3
 801f864:	db02      	blt.n	801f86c <_printf_float+0x140>
 801f866:	686b      	ldr	r3, [r5, #4]
 801f868:	429a      	cmp	r2, r3
 801f86a:	dd48      	ble.n	801f8fe <_printf_float+0x1d2>
 801f86c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f86e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f870:	3b02      	subs	r3, #2
 801f872:	b2db      	uxtb	r3, r3
 801f874:	930c      	str	r3, [sp, #48]	@ 0x30
 801f876:	0028      	movs	r0, r5
 801f878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f87a:	3901      	subs	r1, #1
 801f87c:	3050      	adds	r0, #80	@ 0x50
 801f87e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f880:	f7ff ff14 	bl	801f6ac <__exponent>
 801f884:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f886:	0004      	movs	r4, r0
 801f888:	1813      	adds	r3, r2, r0
 801f88a:	612b      	str	r3, [r5, #16]
 801f88c:	2a01      	cmp	r2, #1
 801f88e:	dc02      	bgt.n	801f896 <_printf_float+0x16a>
 801f890:	682a      	ldr	r2, [r5, #0]
 801f892:	07d2      	lsls	r2, r2, #31
 801f894:	d501      	bpl.n	801f89a <_printf_float+0x16e>
 801f896:	3301      	adds	r3, #1
 801f898:	612b      	str	r3, [r5, #16]
 801f89a:	2323      	movs	r3, #35	@ 0x23
 801f89c:	aa0a      	add	r2, sp, #40	@ 0x28
 801f89e:	189b      	adds	r3, r3, r2
 801f8a0:	781b      	ldrb	r3, [r3, #0]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d100      	bne.n	801f8a8 <_printf_float+0x17c>
 801f8a6:	e792      	b.n	801f7ce <_printf_float+0xa2>
 801f8a8:	002b      	movs	r3, r5
 801f8aa:	222d      	movs	r2, #45	@ 0x2d
 801f8ac:	3343      	adds	r3, #67	@ 0x43
 801f8ae:	701a      	strb	r2, [r3, #0]
 801f8b0:	e78d      	b.n	801f7ce <_printf_float+0xa2>
 801f8b2:	2c47      	cmp	r4, #71	@ 0x47
 801f8b4:	d1b8      	bne.n	801f828 <_printf_float+0xfc>
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d1b6      	bne.n	801f828 <_printf_float+0xfc>
 801f8ba:	3301      	adds	r3, #1
 801f8bc:	e7b3      	b.n	801f826 <_printf_float+0xfa>
 801f8be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8c0:	0011      	movs	r1, r2
 801f8c2:	2b65      	cmp	r3, #101	@ 0x65
 801f8c4:	d9d7      	bls.n	801f876 <_printf_float+0x14a>
 801f8c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8c8:	2b66      	cmp	r3, #102	@ 0x66
 801f8ca:	d11a      	bne.n	801f902 <_printf_float+0x1d6>
 801f8cc:	686b      	ldr	r3, [r5, #4]
 801f8ce:	2a00      	cmp	r2, #0
 801f8d0:	dd09      	ble.n	801f8e6 <_printf_float+0x1ba>
 801f8d2:	612a      	str	r2, [r5, #16]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d102      	bne.n	801f8de <_printf_float+0x1b2>
 801f8d8:	6829      	ldr	r1, [r5, #0]
 801f8da:	07c9      	lsls	r1, r1, #31
 801f8dc:	d50b      	bpl.n	801f8f6 <_printf_float+0x1ca>
 801f8de:	3301      	adds	r3, #1
 801f8e0:	189b      	adds	r3, r3, r2
 801f8e2:	612b      	str	r3, [r5, #16]
 801f8e4:	e007      	b.n	801f8f6 <_printf_float+0x1ca>
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d103      	bne.n	801f8f2 <_printf_float+0x1c6>
 801f8ea:	2201      	movs	r2, #1
 801f8ec:	6829      	ldr	r1, [r5, #0]
 801f8ee:	4211      	tst	r1, r2
 801f8f0:	d000      	beq.n	801f8f4 <_printf_float+0x1c8>
 801f8f2:	1c9a      	adds	r2, r3, #2
 801f8f4:	612a      	str	r2, [r5, #16]
 801f8f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8f8:	2400      	movs	r4, #0
 801f8fa:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f8fc:	e7cd      	b.n	801f89a <_printf_float+0x16e>
 801f8fe:	2367      	movs	r3, #103	@ 0x67
 801f900:	930c      	str	r3, [sp, #48]	@ 0x30
 801f902:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f904:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f906:	4299      	cmp	r1, r3
 801f908:	db06      	blt.n	801f918 <_printf_float+0x1ec>
 801f90a:	682b      	ldr	r3, [r5, #0]
 801f90c:	6129      	str	r1, [r5, #16]
 801f90e:	07db      	lsls	r3, r3, #31
 801f910:	d5f1      	bpl.n	801f8f6 <_printf_float+0x1ca>
 801f912:	3101      	adds	r1, #1
 801f914:	6129      	str	r1, [r5, #16]
 801f916:	e7ee      	b.n	801f8f6 <_printf_float+0x1ca>
 801f918:	2201      	movs	r2, #1
 801f91a:	2900      	cmp	r1, #0
 801f91c:	dce0      	bgt.n	801f8e0 <_printf_float+0x1b4>
 801f91e:	1892      	adds	r2, r2, r2
 801f920:	1a52      	subs	r2, r2, r1
 801f922:	e7dd      	b.n	801f8e0 <_printf_float+0x1b4>
 801f924:	682a      	ldr	r2, [r5, #0]
 801f926:	0553      	lsls	r3, r2, #21
 801f928:	d408      	bmi.n	801f93c <_printf_float+0x210>
 801f92a:	692b      	ldr	r3, [r5, #16]
 801f92c:	003a      	movs	r2, r7
 801f92e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f930:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f932:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f934:	47a0      	blx	r4
 801f936:	3001      	adds	r0, #1
 801f938:	d129      	bne.n	801f98e <_printf_float+0x262>
 801f93a:	e753      	b.n	801f7e4 <_printf_float+0xb8>
 801f93c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f93e:	2b65      	cmp	r3, #101	@ 0x65
 801f940:	d800      	bhi.n	801f944 <_printf_float+0x218>
 801f942:	e0da      	b.n	801fafa <_printf_float+0x3ce>
 801f944:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f946:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f948:	2200      	movs	r2, #0
 801f94a:	2300      	movs	r3, #0
 801f94c:	f7e0 fdb0 	bl	80004b0 <__aeabi_dcmpeq>
 801f950:	2800      	cmp	r0, #0
 801f952:	d033      	beq.n	801f9bc <_printf_float+0x290>
 801f954:	2301      	movs	r3, #1
 801f956:	4a37      	ldr	r2, [pc, #220]	@ (801fa34 <_printf_float+0x308>)
 801f958:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f95a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f95c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f95e:	47a0      	blx	r4
 801f960:	3001      	adds	r0, #1
 801f962:	d100      	bne.n	801f966 <_printf_float+0x23a>
 801f964:	e73e      	b.n	801f7e4 <_printf_float+0xb8>
 801f966:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f968:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f96a:	42b3      	cmp	r3, r6
 801f96c:	db02      	blt.n	801f974 <_printf_float+0x248>
 801f96e:	682b      	ldr	r3, [r5, #0]
 801f970:	07db      	lsls	r3, r3, #31
 801f972:	d50c      	bpl.n	801f98e <_printf_float+0x262>
 801f974:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f976:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f978:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f97a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f97c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f97e:	47a0      	blx	r4
 801f980:	2400      	movs	r4, #0
 801f982:	3001      	adds	r0, #1
 801f984:	d100      	bne.n	801f988 <_printf_float+0x25c>
 801f986:	e72d      	b.n	801f7e4 <_printf_float+0xb8>
 801f988:	1e73      	subs	r3, r6, #1
 801f98a:	42a3      	cmp	r3, r4
 801f98c:	dc0a      	bgt.n	801f9a4 <_printf_float+0x278>
 801f98e:	682b      	ldr	r3, [r5, #0]
 801f990:	079b      	lsls	r3, r3, #30
 801f992:	d500      	bpl.n	801f996 <_printf_float+0x26a>
 801f994:	e105      	b.n	801fba2 <_printf_float+0x476>
 801f996:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f998:	68e8      	ldr	r0, [r5, #12]
 801f99a:	4298      	cmp	r0, r3
 801f99c:	db00      	blt.n	801f9a0 <_printf_float+0x274>
 801f99e:	e723      	b.n	801f7e8 <_printf_float+0xbc>
 801f9a0:	0018      	movs	r0, r3
 801f9a2:	e721      	b.n	801f7e8 <_printf_float+0xbc>
 801f9a4:	002a      	movs	r2, r5
 801f9a6:	2301      	movs	r3, #1
 801f9a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f9ae:	321a      	adds	r2, #26
 801f9b0:	47b8      	blx	r7
 801f9b2:	3001      	adds	r0, #1
 801f9b4:	d100      	bne.n	801f9b8 <_printf_float+0x28c>
 801f9b6:	e715      	b.n	801f7e4 <_printf_float+0xb8>
 801f9b8:	3401      	adds	r4, #1
 801f9ba:	e7e5      	b.n	801f988 <_printf_float+0x25c>
 801f9bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	dc3a      	bgt.n	801fa38 <_printf_float+0x30c>
 801f9c2:	2301      	movs	r3, #1
 801f9c4:	4a1b      	ldr	r2, [pc, #108]	@ (801fa34 <_printf_float+0x308>)
 801f9c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9cc:	47a0      	blx	r4
 801f9ce:	3001      	adds	r0, #1
 801f9d0:	d100      	bne.n	801f9d4 <_printf_float+0x2a8>
 801f9d2:	e707      	b.n	801f7e4 <_printf_float+0xb8>
 801f9d4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f9d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f9d8:	4333      	orrs	r3, r6
 801f9da:	d102      	bne.n	801f9e2 <_printf_float+0x2b6>
 801f9dc:	682b      	ldr	r3, [r5, #0]
 801f9de:	07db      	lsls	r3, r3, #31
 801f9e0:	d5d5      	bpl.n	801f98e <_printf_float+0x262>
 801f9e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f9e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9ec:	47a0      	blx	r4
 801f9ee:	2300      	movs	r3, #0
 801f9f0:	3001      	adds	r0, #1
 801f9f2:	d100      	bne.n	801f9f6 <_printf_float+0x2ca>
 801f9f4:	e6f6      	b.n	801f7e4 <_printf_float+0xb8>
 801f9f6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f9fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9fc:	425b      	negs	r3, r3
 801f9fe:	4293      	cmp	r3, r2
 801fa00:	dc01      	bgt.n	801fa06 <_printf_float+0x2da>
 801fa02:	0033      	movs	r3, r6
 801fa04:	e792      	b.n	801f92c <_printf_float+0x200>
 801fa06:	002a      	movs	r2, r5
 801fa08:	2301      	movs	r3, #1
 801fa0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa0e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fa10:	321a      	adds	r2, #26
 801fa12:	47a0      	blx	r4
 801fa14:	3001      	adds	r0, #1
 801fa16:	d100      	bne.n	801fa1a <_printf_float+0x2ee>
 801fa18:	e6e4      	b.n	801f7e4 <_printf_float+0xb8>
 801fa1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa1c:	3301      	adds	r3, #1
 801fa1e:	e7ea      	b.n	801f9f6 <_printf_float+0x2ca>
 801fa20:	7fefffff 	.word	0x7fefffff
 801fa24:	08025ed9 	.word	0x08025ed9
 801fa28:	08025edd 	.word	0x08025edd
 801fa2c:	08025ee1 	.word	0x08025ee1
 801fa30:	08025ee5 	.word	0x08025ee5
 801fa34:	08025ee9 	.word	0x08025ee9
 801fa38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fa3a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fa3c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fa3e:	429e      	cmp	r6, r3
 801fa40:	dd00      	ble.n	801fa44 <_printf_float+0x318>
 801fa42:	001e      	movs	r6, r3
 801fa44:	2e00      	cmp	r6, #0
 801fa46:	dc31      	bgt.n	801faac <_printf_float+0x380>
 801fa48:	43f3      	mvns	r3, r6
 801fa4a:	2400      	movs	r4, #0
 801fa4c:	17db      	asrs	r3, r3, #31
 801fa4e:	4033      	ands	r3, r6
 801fa50:	930e      	str	r3, [sp, #56]	@ 0x38
 801fa52:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fa54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa56:	1af3      	subs	r3, r6, r3
 801fa58:	42a3      	cmp	r3, r4
 801fa5a:	dc30      	bgt.n	801fabe <_printf_float+0x392>
 801fa5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa60:	429a      	cmp	r2, r3
 801fa62:	dc38      	bgt.n	801fad6 <_printf_float+0x3aa>
 801fa64:	682b      	ldr	r3, [r5, #0]
 801fa66:	07db      	lsls	r3, r3, #31
 801fa68:	d435      	bmi.n	801fad6 <_printf_float+0x3aa>
 801fa6a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa70:	1b9b      	subs	r3, r3, r6
 801fa72:	1b14      	subs	r4, r2, r4
 801fa74:	429c      	cmp	r4, r3
 801fa76:	dd00      	ble.n	801fa7a <_printf_float+0x34e>
 801fa78:	001c      	movs	r4, r3
 801fa7a:	2c00      	cmp	r4, #0
 801fa7c:	dc34      	bgt.n	801fae8 <_printf_float+0x3bc>
 801fa7e:	43e3      	mvns	r3, r4
 801fa80:	2600      	movs	r6, #0
 801fa82:	17db      	asrs	r3, r3, #31
 801fa84:	401c      	ands	r4, r3
 801fa86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa8a:	1ad3      	subs	r3, r2, r3
 801fa8c:	1b1b      	subs	r3, r3, r4
 801fa8e:	42b3      	cmp	r3, r6
 801fa90:	dc00      	bgt.n	801fa94 <_printf_float+0x368>
 801fa92:	e77c      	b.n	801f98e <_printf_float+0x262>
 801fa94:	002a      	movs	r2, r5
 801fa96:	2301      	movs	r3, #1
 801fa98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fa9e:	321a      	adds	r2, #26
 801faa0:	47b8      	blx	r7
 801faa2:	3001      	adds	r0, #1
 801faa4:	d100      	bne.n	801faa8 <_printf_float+0x37c>
 801faa6:	e69d      	b.n	801f7e4 <_printf_float+0xb8>
 801faa8:	3601      	adds	r6, #1
 801faaa:	e7ec      	b.n	801fa86 <_printf_float+0x35a>
 801faac:	0033      	movs	r3, r6
 801faae:	003a      	movs	r2, r7
 801fab0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fab4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fab6:	47a0      	blx	r4
 801fab8:	3001      	adds	r0, #1
 801faba:	d1c5      	bne.n	801fa48 <_printf_float+0x31c>
 801fabc:	e692      	b.n	801f7e4 <_printf_float+0xb8>
 801fabe:	002a      	movs	r2, r5
 801fac0:	2301      	movs	r3, #1
 801fac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fac4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fac6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fac8:	321a      	adds	r2, #26
 801faca:	47b0      	blx	r6
 801facc:	3001      	adds	r0, #1
 801face:	d100      	bne.n	801fad2 <_printf_float+0x3a6>
 801fad0:	e688      	b.n	801f7e4 <_printf_float+0xb8>
 801fad2:	3401      	adds	r4, #1
 801fad4:	e7bd      	b.n	801fa52 <_printf_float+0x326>
 801fad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fada:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fadc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fade:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fae0:	47a0      	blx	r4
 801fae2:	3001      	adds	r0, #1
 801fae4:	d1c1      	bne.n	801fa6a <_printf_float+0x33e>
 801fae6:	e67d      	b.n	801f7e4 <_printf_float+0xb8>
 801fae8:	19ba      	adds	r2, r7, r6
 801faea:	0023      	movs	r3, r4
 801faec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801faee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801faf0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801faf2:	47b0      	blx	r6
 801faf4:	3001      	adds	r0, #1
 801faf6:	d1c2      	bne.n	801fa7e <_printf_float+0x352>
 801faf8:	e674      	b.n	801f7e4 <_printf_float+0xb8>
 801fafa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fafc:	930c      	str	r3, [sp, #48]	@ 0x30
 801fafe:	2b01      	cmp	r3, #1
 801fb00:	dc02      	bgt.n	801fb08 <_printf_float+0x3dc>
 801fb02:	2301      	movs	r3, #1
 801fb04:	421a      	tst	r2, r3
 801fb06:	d039      	beq.n	801fb7c <_printf_float+0x450>
 801fb08:	2301      	movs	r3, #1
 801fb0a:	003a      	movs	r2, r7
 801fb0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb12:	47b0      	blx	r6
 801fb14:	3001      	adds	r0, #1
 801fb16:	d100      	bne.n	801fb1a <_printf_float+0x3ee>
 801fb18:	e664      	b.n	801f7e4 <_printf_float+0xb8>
 801fb1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fb1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fb1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb24:	47b0      	blx	r6
 801fb26:	3001      	adds	r0, #1
 801fb28:	d100      	bne.n	801fb2c <_printf_float+0x400>
 801fb2a:	e65b      	b.n	801f7e4 <_printf_float+0xb8>
 801fb2c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fb2e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fb30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb32:	2200      	movs	r2, #0
 801fb34:	3b01      	subs	r3, #1
 801fb36:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb38:	2300      	movs	r3, #0
 801fb3a:	f7e0 fcb9 	bl	80004b0 <__aeabi_dcmpeq>
 801fb3e:	2800      	cmp	r0, #0
 801fb40:	d11a      	bne.n	801fb78 <_printf_float+0x44c>
 801fb42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb44:	1c7a      	adds	r2, r7, #1
 801fb46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb4c:	47b0      	blx	r6
 801fb4e:	3001      	adds	r0, #1
 801fb50:	d10e      	bne.n	801fb70 <_printf_float+0x444>
 801fb52:	e647      	b.n	801f7e4 <_printf_float+0xb8>
 801fb54:	002a      	movs	r2, r5
 801fb56:	2301      	movs	r3, #1
 801fb58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb5c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fb5e:	321a      	adds	r2, #26
 801fb60:	47b8      	blx	r7
 801fb62:	3001      	adds	r0, #1
 801fb64:	d100      	bne.n	801fb68 <_printf_float+0x43c>
 801fb66:	e63d      	b.n	801f7e4 <_printf_float+0xb8>
 801fb68:	3601      	adds	r6, #1
 801fb6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb6c:	429e      	cmp	r6, r3
 801fb6e:	dbf1      	blt.n	801fb54 <_printf_float+0x428>
 801fb70:	002a      	movs	r2, r5
 801fb72:	0023      	movs	r3, r4
 801fb74:	3250      	adds	r2, #80	@ 0x50
 801fb76:	e6da      	b.n	801f92e <_printf_float+0x202>
 801fb78:	2600      	movs	r6, #0
 801fb7a:	e7f6      	b.n	801fb6a <_printf_float+0x43e>
 801fb7c:	003a      	movs	r2, r7
 801fb7e:	e7e2      	b.n	801fb46 <_printf_float+0x41a>
 801fb80:	002a      	movs	r2, r5
 801fb82:	2301      	movs	r3, #1
 801fb84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb8a:	3219      	adds	r2, #25
 801fb8c:	47b0      	blx	r6
 801fb8e:	3001      	adds	r0, #1
 801fb90:	d100      	bne.n	801fb94 <_printf_float+0x468>
 801fb92:	e627      	b.n	801f7e4 <_printf_float+0xb8>
 801fb94:	3401      	adds	r4, #1
 801fb96:	68eb      	ldr	r3, [r5, #12]
 801fb98:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fb9a:	1a9b      	subs	r3, r3, r2
 801fb9c:	42a3      	cmp	r3, r4
 801fb9e:	dcef      	bgt.n	801fb80 <_printf_float+0x454>
 801fba0:	e6f9      	b.n	801f996 <_printf_float+0x26a>
 801fba2:	2400      	movs	r4, #0
 801fba4:	e7f7      	b.n	801fb96 <_printf_float+0x46a>
 801fba6:	46c0      	nop			@ (mov r8, r8)

0801fba8 <_printf_common>:
 801fba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fbaa:	0016      	movs	r6, r2
 801fbac:	9301      	str	r3, [sp, #4]
 801fbae:	688a      	ldr	r2, [r1, #8]
 801fbb0:	690b      	ldr	r3, [r1, #16]
 801fbb2:	000c      	movs	r4, r1
 801fbb4:	9000      	str	r0, [sp, #0]
 801fbb6:	4293      	cmp	r3, r2
 801fbb8:	da00      	bge.n	801fbbc <_printf_common+0x14>
 801fbba:	0013      	movs	r3, r2
 801fbbc:	0022      	movs	r2, r4
 801fbbe:	6033      	str	r3, [r6, #0]
 801fbc0:	3243      	adds	r2, #67	@ 0x43
 801fbc2:	7812      	ldrb	r2, [r2, #0]
 801fbc4:	2a00      	cmp	r2, #0
 801fbc6:	d001      	beq.n	801fbcc <_printf_common+0x24>
 801fbc8:	3301      	adds	r3, #1
 801fbca:	6033      	str	r3, [r6, #0]
 801fbcc:	6823      	ldr	r3, [r4, #0]
 801fbce:	069b      	lsls	r3, r3, #26
 801fbd0:	d502      	bpl.n	801fbd8 <_printf_common+0x30>
 801fbd2:	6833      	ldr	r3, [r6, #0]
 801fbd4:	3302      	adds	r3, #2
 801fbd6:	6033      	str	r3, [r6, #0]
 801fbd8:	6822      	ldr	r2, [r4, #0]
 801fbda:	2306      	movs	r3, #6
 801fbdc:	0015      	movs	r5, r2
 801fbde:	401d      	ands	r5, r3
 801fbe0:	421a      	tst	r2, r3
 801fbe2:	d027      	beq.n	801fc34 <_printf_common+0x8c>
 801fbe4:	0023      	movs	r3, r4
 801fbe6:	3343      	adds	r3, #67	@ 0x43
 801fbe8:	781b      	ldrb	r3, [r3, #0]
 801fbea:	1e5a      	subs	r2, r3, #1
 801fbec:	4193      	sbcs	r3, r2
 801fbee:	6822      	ldr	r2, [r4, #0]
 801fbf0:	0692      	lsls	r2, r2, #26
 801fbf2:	d430      	bmi.n	801fc56 <_printf_common+0xae>
 801fbf4:	0022      	movs	r2, r4
 801fbf6:	9901      	ldr	r1, [sp, #4]
 801fbf8:	9800      	ldr	r0, [sp, #0]
 801fbfa:	9d08      	ldr	r5, [sp, #32]
 801fbfc:	3243      	adds	r2, #67	@ 0x43
 801fbfe:	47a8      	blx	r5
 801fc00:	3001      	adds	r0, #1
 801fc02:	d025      	beq.n	801fc50 <_printf_common+0xa8>
 801fc04:	2206      	movs	r2, #6
 801fc06:	6823      	ldr	r3, [r4, #0]
 801fc08:	2500      	movs	r5, #0
 801fc0a:	4013      	ands	r3, r2
 801fc0c:	2b04      	cmp	r3, #4
 801fc0e:	d105      	bne.n	801fc1c <_printf_common+0x74>
 801fc10:	6833      	ldr	r3, [r6, #0]
 801fc12:	68e5      	ldr	r5, [r4, #12]
 801fc14:	1aed      	subs	r5, r5, r3
 801fc16:	43eb      	mvns	r3, r5
 801fc18:	17db      	asrs	r3, r3, #31
 801fc1a:	401d      	ands	r5, r3
 801fc1c:	68a3      	ldr	r3, [r4, #8]
 801fc1e:	6922      	ldr	r2, [r4, #16]
 801fc20:	4293      	cmp	r3, r2
 801fc22:	dd01      	ble.n	801fc28 <_printf_common+0x80>
 801fc24:	1a9b      	subs	r3, r3, r2
 801fc26:	18ed      	adds	r5, r5, r3
 801fc28:	2600      	movs	r6, #0
 801fc2a:	42b5      	cmp	r5, r6
 801fc2c:	d120      	bne.n	801fc70 <_printf_common+0xc8>
 801fc2e:	2000      	movs	r0, #0
 801fc30:	e010      	b.n	801fc54 <_printf_common+0xac>
 801fc32:	3501      	adds	r5, #1
 801fc34:	68e3      	ldr	r3, [r4, #12]
 801fc36:	6832      	ldr	r2, [r6, #0]
 801fc38:	1a9b      	subs	r3, r3, r2
 801fc3a:	42ab      	cmp	r3, r5
 801fc3c:	ddd2      	ble.n	801fbe4 <_printf_common+0x3c>
 801fc3e:	0022      	movs	r2, r4
 801fc40:	2301      	movs	r3, #1
 801fc42:	9901      	ldr	r1, [sp, #4]
 801fc44:	9800      	ldr	r0, [sp, #0]
 801fc46:	9f08      	ldr	r7, [sp, #32]
 801fc48:	3219      	adds	r2, #25
 801fc4a:	47b8      	blx	r7
 801fc4c:	3001      	adds	r0, #1
 801fc4e:	d1f0      	bne.n	801fc32 <_printf_common+0x8a>
 801fc50:	2001      	movs	r0, #1
 801fc52:	4240      	negs	r0, r0
 801fc54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fc56:	2030      	movs	r0, #48	@ 0x30
 801fc58:	18e1      	adds	r1, r4, r3
 801fc5a:	3143      	adds	r1, #67	@ 0x43
 801fc5c:	7008      	strb	r0, [r1, #0]
 801fc5e:	0021      	movs	r1, r4
 801fc60:	1c5a      	adds	r2, r3, #1
 801fc62:	3145      	adds	r1, #69	@ 0x45
 801fc64:	7809      	ldrb	r1, [r1, #0]
 801fc66:	18a2      	adds	r2, r4, r2
 801fc68:	3243      	adds	r2, #67	@ 0x43
 801fc6a:	3302      	adds	r3, #2
 801fc6c:	7011      	strb	r1, [r2, #0]
 801fc6e:	e7c1      	b.n	801fbf4 <_printf_common+0x4c>
 801fc70:	0022      	movs	r2, r4
 801fc72:	2301      	movs	r3, #1
 801fc74:	9901      	ldr	r1, [sp, #4]
 801fc76:	9800      	ldr	r0, [sp, #0]
 801fc78:	9f08      	ldr	r7, [sp, #32]
 801fc7a:	321a      	adds	r2, #26
 801fc7c:	47b8      	blx	r7
 801fc7e:	3001      	adds	r0, #1
 801fc80:	d0e6      	beq.n	801fc50 <_printf_common+0xa8>
 801fc82:	3601      	adds	r6, #1
 801fc84:	e7d1      	b.n	801fc2a <_printf_common+0x82>
	...

0801fc88 <_printf_i>:
 801fc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc8a:	b08b      	sub	sp, #44	@ 0x2c
 801fc8c:	9206      	str	r2, [sp, #24]
 801fc8e:	000a      	movs	r2, r1
 801fc90:	3243      	adds	r2, #67	@ 0x43
 801fc92:	9307      	str	r3, [sp, #28]
 801fc94:	9005      	str	r0, [sp, #20]
 801fc96:	9203      	str	r2, [sp, #12]
 801fc98:	7e0a      	ldrb	r2, [r1, #24]
 801fc9a:	000c      	movs	r4, r1
 801fc9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc9e:	2a78      	cmp	r2, #120	@ 0x78
 801fca0:	d809      	bhi.n	801fcb6 <_printf_i+0x2e>
 801fca2:	2a62      	cmp	r2, #98	@ 0x62
 801fca4:	d80b      	bhi.n	801fcbe <_printf_i+0x36>
 801fca6:	2a00      	cmp	r2, #0
 801fca8:	d100      	bne.n	801fcac <_printf_i+0x24>
 801fcaa:	e0bc      	b.n	801fe26 <_printf_i+0x19e>
 801fcac:	497b      	ldr	r1, [pc, #492]	@ (801fe9c <_printf_i+0x214>)
 801fcae:	9104      	str	r1, [sp, #16]
 801fcb0:	2a58      	cmp	r2, #88	@ 0x58
 801fcb2:	d100      	bne.n	801fcb6 <_printf_i+0x2e>
 801fcb4:	e090      	b.n	801fdd8 <_printf_i+0x150>
 801fcb6:	0025      	movs	r5, r4
 801fcb8:	3542      	adds	r5, #66	@ 0x42
 801fcba:	702a      	strb	r2, [r5, #0]
 801fcbc:	e022      	b.n	801fd04 <_printf_i+0x7c>
 801fcbe:	0010      	movs	r0, r2
 801fcc0:	3863      	subs	r0, #99	@ 0x63
 801fcc2:	2815      	cmp	r0, #21
 801fcc4:	d8f7      	bhi.n	801fcb6 <_printf_i+0x2e>
 801fcc6:	f7e0 fa63 	bl	8000190 <__gnu_thumb1_case_shi>
 801fcca:	0016      	.short	0x0016
 801fccc:	fff6001f 	.word	0xfff6001f
 801fcd0:	fff6fff6 	.word	0xfff6fff6
 801fcd4:	001ffff6 	.word	0x001ffff6
 801fcd8:	fff6fff6 	.word	0xfff6fff6
 801fcdc:	fff6fff6 	.word	0xfff6fff6
 801fce0:	003600a1 	.word	0x003600a1
 801fce4:	fff60080 	.word	0xfff60080
 801fce8:	00b2fff6 	.word	0x00b2fff6
 801fcec:	0036fff6 	.word	0x0036fff6
 801fcf0:	fff6fff6 	.word	0xfff6fff6
 801fcf4:	0084      	.short	0x0084
 801fcf6:	0025      	movs	r5, r4
 801fcf8:	681a      	ldr	r2, [r3, #0]
 801fcfa:	3542      	adds	r5, #66	@ 0x42
 801fcfc:	1d11      	adds	r1, r2, #4
 801fcfe:	6019      	str	r1, [r3, #0]
 801fd00:	6813      	ldr	r3, [r2, #0]
 801fd02:	702b      	strb	r3, [r5, #0]
 801fd04:	2301      	movs	r3, #1
 801fd06:	e0a0      	b.n	801fe4a <_printf_i+0x1c2>
 801fd08:	6818      	ldr	r0, [r3, #0]
 801fd0a:	6809      	ldr	r1, [r1, #0]
 801fd0c:	1d02      	adds	r2, r0, #4
 801fd0e:	060d      	lsls	r5, r1, #24
 801fd10:	d50b      	bpl.n	801fd2a <_printf_i+0xa2>
 801fd12:	6806      	ldr	r6, [r0, #0]
 801fd14:	601a      	str	r2, [r3, #0]
 801fd16:	2e00      	cmp	r6, #0
 801fd18:	da03      	bge.n	801fd22 <_printf_i+0x9a>
 801fd1a:	232d      	movs	r3, #45	@ 0x2d
 801fd1c:	9a03      	ldr	r2, [sp, #12]
 801fd1e:	4276      	negs	r6, r6
 801fd20:	7013      	strb	r3, [r2, #0]
 801fd22:	4b5e      	ldr	r3, [pc, #376]	@ (801fe9c <_printf_i+0x214>)
 801fd24:	270a      	movs	r7, #10
 801fd26:	9304      	str	r3, [sp, #16]
 801fd28:	e018      	b.n	801fd5c <_printf_i+0xd4>
 801fd2a:	6806      	ldr	r6, [r0, #0]
 801fd2c:	601a      	str	r2, [r3, #0]
 801fd2e:	0649      	lsls	r1, r1, #25
 801fd30:	d5f1      	bpl.n	801fd16 <_printf_i+0x8e>
 801fd32:	b236      	sxth	r6, r6
 801fd34:	e7ef      	b.n	801fd16 <_printf_i+0x8e>
 801fd36:	6808      	ldr	r0, [r1, #0]
 801fd38:	6819      	ldr	r1, [r3, #0]
 801fd3a:	c940      	ldmia	r1!, {r6}
 801fd3c:	0605      	lsls	r5, r0, #24
 801fd3e:	d402      	bmi.n	801fd46 <_printf_i+0xbe>
 801fd40:	0640      	lsls	r0, r0, #25
 801fd42:	d500      	bpl.n	801fd46 <_printf_i+0xbe>
 801fd44:	b2b6      	uxth	r6, r6
 801fd46:	6019      	str	r1, [r3, #0]
 801fd48:	4b54      	ldr	r3, [pc, #336]	@ (801fe9c <_printf_i+0x214>)
 801fd4a:	270a      	movs	r7, #10
 801fd4c:	9304      	str	r3, [sp, #16]
 801fd4e:	2a6f      	cmp	r2, #111	@ 0x6f
 801fd50:	d100      	bne.n	801fd54 <_printf_i+0xcc>
 801fd52:	3f02      	subs	r7, #2
 801fd54:	0023      	movs	r3, r4
 801fd56:	2200      	movs	r2, #0
 801fd58:	3343      	adds	r3, #67	@ 0x43
 801fd5a:	701a      	strb	r2, [r3, #0]
 801fd5c:	6863      	ldr	r3, [r4, #4]
 801fd5e:	60a3      	str	r3, [r4, #8]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	db03      	blt.n	801fd6c <_printf_i+0xe4>
 801fd64:	2104      	movs	r1, #4
 801fd66:	6822      	ldr	r2, [r4, #0]
 801fd68:	438a      	bics	r2, r1
 801fd6a:	6022      	str	r2, [r4, #0]
 801fd6c:	2e00      	cmp	r6, #0
 801fd6e:	d102      	bne.n	801fd76 <_printf_i+0xee>
 801fd70:	9d03      	ldr	r5, [sp, #12]
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d00c      	beq.n	801fd90 <_printf_i+0x108>
 801fd76:	9d03      	ldr	r5, [sp, #12]
 801fd78:	0030      	movs	r0, r6
 801fd7a:	0039      	movs	r1, r7
 801fd7c:	f7e0 fa98 	bl	80002b0 <__aeabi_uidivmod>
 801fd80:	9b04      	ldr	r3, [sp, #16]
 801fd82:	3d01      	subs	r5, #1
 801fd84:	5c5b      	ldrb	r3, [r3, r1]
 801fd86:	702b      	strb	r3, [r5, #0]
 801fd88:	0033      	movs	r3, r6
 801fd8a:	0006      	movs	r6, r0
 801fd8c:	429f      	cmp	r7, r3
 801fd8e:	d9f3      	bls.n	801fd78 <_printf_i+0xf0>
 801fd90:	2f08      	cmp	r7, #8
 801fd92:	d109      	bne.n	801fda8 <_printf_i+0x120>
 801fd94:	6823      	ldr	r3, [r4, #0]
 801fd96:	07db      	lsls	r3, r3, #31
 801fd98:	d506      	bpl.n	801fda8 <_printf_i+0x120>
 801fd9a:	6862      	ldr	r2, [r4, #4]
 801fd9c:	6923      	ldr	r3, [r4, #16]
 801fd9e:	429a      	cmp	r2, r3
 801fda0:	dc02      	bgt.n	801fda8 <_printf_i+0x120>
 801fda2:	2330      	movs	r3, #48	@ 0x30
 801fda4:	3d01      	subs	r5, #1
 801fda6:	702b      	strb	r3, [r5, #0]
 801fda8:	9b03      	ldr	r3, [sp, #12]
 801fdaa:	1b5b      	subs	r3, r3, r5
 801fdac:	6123      	str	r3, [r4, #16]
 801fdae:	9b07      	ldr	r3, [sp, #28]
 801fdb0:	0021      	movs	r1, r4
 801fdb2:	9300      	str	r3, [sp, #0]
 801fdb4:	9805      	ldr	r0, [sp, #20]
 801fdb6:	9b06      	ldr	r3, [sp, #24]
 801fdb8:	aa09      	add	r2, sp, #36	@ 0x24
 801fdba:	f7ff fef5 	bl	801fba8 <_printf_common>
 801fdbe:	3001      	adds	r0, #1
 801fdc0:	d148      	bne.n	801fe54 <_printf_i+0x1cc>
 801fdc2:	2001      	movs	r0, #1
 801fdc4:	4240      	negs	r0, r0
 801fdc6:	b00b      	add	sp, #44	@ 0x2c
 801fdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdca:	2220      	movs	r2, #32
 801fdcc:	6809      	ldr	r1, [r1, #0]
 801fdce:	430a      	orrs	r2, r1
 801fdd0:	6022      	str	r2, [r4, #0]
 801fdd2:	2278      	movs	r2, #120	@ 0x78
 801fdd4:	4932      	ldr	r1, [pc, #200]	@ (801fea0 <_printf_i+0x218>)
 801fdd6:	9104      	str	r1, [sp, #16]
 801fdd8:	0021      	movs	r1, r4
 801fdda:	3145      	adds	r1, #69	@ 0x45
 801fddc:	700a      	strb	r2, [r1, #0]
 801fdde:	6819      	ldr	r1, [r3, #0]
 801fde0:	6822      	ldr	r2, [r4, #0]
 801fde2:	c940      	ldmia	r1!, {r6}
 801fde4:	0610      	lsls	r0, r2, #24
 801fde6:	d402      	bmi.n	801fdee <_printf_i+0x166>
 801fde8:	0650      	lsls	r0, r2, #25
 801fdea:	d500      	bpl.n	801fdee <_printf_i+0x166>
 801fdec:	b2b6      	uxth	r6, r6
 801fdee:	6019      	str	r1, [r3, #0]
 801fdf0:	07d3      	lsls	r3, r2, #31
 801fdf2:	d502      	bpl.n	801fdfa <_printf_i+0x172>
 801fdf4:	2320      	movs	r3, #32
 801fdf6:	4313      	orrs	r3, r2
 801fdf8:	6023      	str	r3, [r4, #0]
 801fdfa:	2e00      	cmp	r6, #0
 801fdfc:	d001      	beq.n	801fe02 <_printf_i+0x17a>
 801fdfe:	2710      	movs	r7, #16
 801fe00:	e7a8      	b.n	801fd54 <_printf_i+0xcc>
 801fe02:	2220      	movs	r2, #32
 801fe04:	6823      	ldr	r3, [r4, #0]
 801fe06:	4393      	bics	r3, r2
 801fe08:	6023      	str	r3, [r4, #0]
 801fe0a:	e7f8      	b.n	801fdfe <_printf_i+0x176>
 801fe0c:	681a      	ldr	r2, [r3, #0]
 801fe0e:	680d      	ldr	r5, [r1, #0]
 801fe10:	1d10      	adds	r0, r2, #4
 801fe12:	6949      	ldr	r1, [r1, #20]
 801fe14:	6018      	str	r0, [r3, #0]
 801fe16:	6813      	ldr	r3, [r2, #0]
 801fe18:	062e      	lsls	r6, r5, #24
 801fe1a:	d501      	bpl.n	801fe20 <_printf_i+0x198>
 801fe1c:	6019      	str	r1, [r3, #0]
 801fe1e:	e002      	b.n	801fe26 <_printf_i+0x19e>
 801fe20:	066d      	lsls	r5, r5, #25
 801fe22:	d5fb      	bpl.n	801fe1c <_printf_i+0x194>
 801fe24:	8019      	strh	r1, [r3, #0]
 801fe26:	2300      	movs	r3, #0
 801fe28:	9d03      	ldr	r5, [sp, #12]
 801fe2a:	6123      	str	r3, [r4, #16]
 801fe2c:	e7bf      	b.n	801fdae <_printf_i+0x126>
 801fe2e:	681a      	ldr	r2, [r3, #0]
 801fe30:	1d11      	adds	r1, r2, #4
 801fe32:	6019      	str	r1, [r3, #0]
 801fe34:	6815      	ldr	r5, [r2, #0]
 801fe36:	2100      	movs	r1, #0
 801fe38:	0028      	movs	r0, r5
 801fe3a:	6862      	ldr	r2, [r4, #4]
 801fe3c:	f000 fb7b 	bl	8020536 <memchr>
 801fe40:	2800      	cmp	r0, #0
 801fe42:	d001      	beq.n	801fe48 <_printf_i+0x1c0>
 801fe44:	1b40      	subs	r0, r0, r5
 801fe46:	6060      	str	r0, [r4, #4]
 801fe48:	6863      	ldr	r3, [r4, #4]
 801fe4a:	6123      	str	r3, [r4, #16]
 801fe4c:	2300      	movs	r3, #0
 801fe4e:	9a03      	ldr	r2, [sp, #12]
 801fe50:	7013      	strb	r3, [r2, #0]
 801fe52:	e7ac      	b.n	801fdae <_printf_i+0x126>
 801fe54:	002a      	movs	r2, r5
 801fe56:	6923      	ldr	r3, [r4, #16]
 801fe58:	9906      	ldr	r1, [sp, #24]
 801fe5a:	9805      	ldr	r0, [sp, #20]
 801fe5c:	9d07      	ldr	r5, [sp, #28]
 801fe5e:	47a8      	blx	r5
 801fe60:	3001      	adds	r0, #1
 801fe62:	d0ae      	beq.n	801fdc2 <_printf_i+0x13a>
 801fe64:	6823      	ldr	r3, [r4, #0]
 801fe66:	079b      	lsls	r3, r3, #30
 801fe68:	d415      	bmi.n	801fe96 <_printf_i+0x20e>
 801fe6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe6c:	68e0      	ldr	r0, [r4, #12]
 801fe6e:	4298      	cmp	r0, r3
 801fe70:	daa9      	bge.n	801fdc6 <_printf_i+0x13e>
 801fe72:	0018      	movs	r0, r3
 801fe74:	e7a7      	b.n	801fdc6 <_printf_i+0x13e>
 801fe76:	0022      	movs	r2, r4
 801fe78:	2301      	movs	r3, #1
 801fe7a:	9906      	ldr	r1, [sp, #24]
 801fe7c:	9805      	ldr	r0, [sp, #20]
 801fe7e:	9e07      	ldr	r6, [sp, #28]
 801fe80:	3219      	adds	r2, #25
 801fe82:	47b0      	blx	r6
 801fe84:	3001      	adds	r0, #1
 801fe86:	d09c      	beq.n	801fdc2 <_printf_i+0x13a>
 801fe88:	3501      	adds	r5, #1
 801fe8a:	68e3      	ldr	r3, [r4, #12]
 801fe8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe8e:	1a9b      	subs	r3, r3, r2
 801fe90:	42ab      	cmp	r3, r5
 801fe92:	dcf0      	bgt.n	801fe76 <_printf_i+0x1ee>
 801fe94:	e7e9      	b.n	801fe6a <_printf_i+0x1e2>
 801fe96:	2500      	movs	r5, #0
 801fe98:	e7f7      	b.n	801fe8a <_printf_i+0x202>
 801fe9a:	46c0      	nop			@ (mov r8, r8)
 801fe9c:	08025eeb 	.word	0x08025eeb
 801fea0:	08025efc 	.word	0x08025efc

0801fea4 <std>:
 801fea4:	2300      	movs	r3, #0
 801fea6:	b510      	push	{r4, lr}
 801fea8:	0004      	movs	r4, r0
 801feaa:	6003      	str	r3, [r0, #0]
 801feac:	6043      	str	r3, [r0, #4]
 801feae:	6083      	str	r3, [r0, #8]
 801feb0:	8181      	strh	r1, [r0, #12]
 801feb2:	6643      	str	r3, [r0, #100]	@ 0x64
 801feb4:	81c2      	strh	r2, [r0, #14]
 801feb6:	6103      	str	r3, [r0, #16]
 801feb8:	6143      	str	r3, [r0, #20]
 801feba:	6183      	str	r3, [r0, #24]
 801febc:	0019      	movs	r1, r3
 801febe:	2208      	movs	r2, #8
 801fec0:	305c      	adds	r0, #92	@ 0x5c
 801fec2:	f000 fa67 	bl	8020394 <memset>
 801fec6:	4b0b      	ldr	r3, [pc, #44]	@ (801fef4 <std+0x50>)
 801fec8:	6224      	str	r4, [r4, #32]
 801feca:	6263      	str	r3, [r4, #36]	@ 0x24
 801fecc:	4b0a      	ldr	r3, [pc, #40]	@ (801fef8 <std+0x54>)
 801fece:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fed0:	4b0a      	ldr	r3, [pc, #40]	@ (801fefc <std+0x58>)
 801fed2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fed4:	4b0a      	ldr	r3, [pc, #40]	@ (801ff00 <std+0x5c>)
 801fed6:	6323      	str	r3, [r4, #48]	@ 0x30
 801fed8:	4b0a      	ldr	r3, [pc, #40]	@ (801ff04 <std+0x60>)
 801feda:	429c      	cmp	r4, r3
 801fedc:	d005      	beq.n	801feea <std+0x46>
 801fede:	4b0a      	ldr	r3, [pc, #40]	@ (801ff08 <std+0x64>)
 801fee0:	429c      	cmp	r4, r3
 801fee2:	d002      	beq.n	801feea <std+0x46>
 801fee4:	4b09      	ldr	r3, [pc, #36]	@ (801ff0c <std+0x68>)
 801fee6:	429c      	cmp	r4, r3
 801fee8:	d103      	bne.n	801fef2 <std+0x4e>
 801feea:	0020      	movs	r0, r4
 801feec:	3058      	adds	r0, #88	@ 0x58
 801feee:	f000 fb1f 	bl	8020530 <__retarget_lock_init_recursive>
 801fef2:	bd10      	pop	{r4, pc}
 801fef4:	0802014d 	.word	0x0802014d
 801fef8:	08020175 	.word	0x08020175
 801fefc:	080201ad 	.word	0x080201ad
 801ff00:	080201d9 	.word	0x080201d9
 801ff04:	20003680 	.word	0x20003680
 801ff08:	200036e8 	.word	0x200036e8
 801ff0c:	20003750 	.word	0x20003750

0801ff10 <stdio_exit_handler>:
 801ff10:	b510      	push	{r4, lr}
 801ff12:	4a03      	ldr	r2, [pc, #12]	@ (801ff20 <stdio_exit_handler+0x10>)
 801ff14:	4903      	ldr	r1, [pc, #12]	@ (801ff24 <stdio_exit_handler+0x14>)
 801ff16:	4804      	ldr	r0, [pc, #16]	@ (801ff28 <stdio_exit_handler+0x18>)
 801ff18:	f000 f86c 	bl	801fff4 <_fwalk_sglue>
 801ff1c:	bd10      	pop	{r4, pc}
 801ff1e:	46c0      	nop			@ (mov r8, r8)
 801ff20:	20000258 	.word	0x20000258
 801ff24:	08022b55 	.word	0x08022b55
 801ff28:	200003d4 	.word	0x200003d4

0801ff2c <cleanup_stdio>:
 801ff2c:	6841      	ldr	r1, [r0, #4]
 801ff2e:	4b0b      	ldr	r3, [pc, #44]	@ (801ff5c <cleanup_stdio+0x30>)
 801ff30:	b510      	push	{r4, lr}
 801ff32:	0004      	movs	r4, r0
 801ff34:	4299      	cmp	r1, r3
 801ff36:	d001      	beq.n	801ff3c <cleanup_stdio+0x10>
 801ff38:	f002 fe0c 	bl	8022b54 <_fflush_r>
 801ff3c:	68a1      	ldr	r1, [r4, #8]
 801ff3e:	4b08      	ldr	r3, [pc, #32]	@ (801ff60 <cleanup_stdio+0x34>)
 801ff40:	4299      	cmp	r1, r3
 801ff42:	d002      	beq.n	801ff4a <cleanup_stdio+0x1e>
 801ff44:	0020      	movs	r0, r4
 801ff46:	f002 fe05 	bl	8022b54 <_fflush_r>
 801ff4a:	68e1      	ldr	r1, [r4, #12]
 801ff4c:	4b05      	ldr	r3, [pc, #20]	@ (801ff64 <cleanup_stdio+0x38>)
 801ff4e:	4299      	cmp	r1, r3
 801ff50:	d002      	beq.n	801ff58 <cleanup_stdio+0x2c>
 801ff52:	0020      	movs	r0, r4
 801ff54:	f002 fdfe 	bl	8022b54 <_fflush_r>
 801ff58:	bd10      	pop	{r4, pc}
 801ff5a:	46c0      	nop			@ (mov r8, r8)
 801ff5c:	20003680 	.word	0x20003680
 801ff60:	200036e8 	.word	0x200036e8
 801ff64:	20003750 	.word	0x20003750

0801ff68 <global_stdio_init.part.0>:
 801ff68:	b510      	push	{r4, lr}
 801ff6a:	4b09      	ldr	r3, [pc, #36]	@ (801ff90 <global_stdio_init.part.0+0x28>)
 801ff6c:	4a09      	ldr	r2, [pc, #36]	@ (801ff94 <global_stdio_init.part.0+0x2c>)
 801ff6e:	2104      	movs	r1, #4
 801ff70:	601a      	str	r2, [r3, #0]
 801ff72:	4809      	ldr	r0, [pc, #36]	@ (801ff98 <global_stdio_init.part.0+0x30>)
 801ff74:	2200      	movs	r2, #0
 801ff76:	f7ff ff95 	bl	801fea4 <std>
 801ff7a:	2201      	movs	r2, #1
 801ff7c:	2109      	movs	r1, #9
 801ff7e:	4807      	ldr	r0, [pc, #28]	@ (801ff9c <global_stdio_init.part.0+0x34>)
 801ff80:	f7ff ff90 	bl	801fea4 <std>
 801ff84:	2202      	movs	r2, #2
 801ff86:	2112      	movs	r1, #18
 801ff88:	4805      	ldr	r0, [pc, #20]	@ (801ffa0 <global_stdio_init.part.0+0x38>)
 801ff8a:	f7ff ff8b 	bl	801fea4 <std>
 801ff8e:	bd10      	pop	{r4, pc}
 801ff90:	200037b8 	.word	0x200037b8
 801ff94:	0801ff11 	.word	0x0801ff11
 801ff98:	20003680 	.word	0x20003680
 801ff9c:	200036e8 	.word	0x200036e8
 801ffa0:	20003750 	.word	0x20003750

0801ffa4 <__sfp_lock_acquire>:
 801ffa4:	b510      	push	{r4, lr}
 801ffa6:	4802      	ldr	r0, [pc, #8]	@ (801ffb0 <__sfp_lock_acquire+0xc>)
 801ffa8:	f000 fac3 	bl	8020532 <__retarget_lock_acquire_recursive>
 801ffac:	bd10      	pop	{r4, pc}
 801ffae:	46c0      	nop			@ (mov r8, r8)
 801ffb0:	200037c1 	.word	0x200037c1

0801ffb4 <__sfp_lock_release>:
 801ffb4:	b510      	push	{r4, lr}
 801ffb6:	4802      	ldr	r0, [pc, #8]	@ (801ffc0 <__sfp_lock_release+0xc>)
 801ffb8:	f000 fabc 	bl	8020534 <__retarget_lock_release_recursive>
 801ffbc:	bd10      	pop	{r4, pc}
 801ffbe:	46c0      	nop			@ (mov r8, r8)
 801ffc0:	200037c1 	.word	0x200037c1

0801ffc4 <__sinit>:
 801ffc4:	b510      	push	{r4, lr}
 801ffc6:	0004      	movs	r4, r0
 801ffc8:	f7ff ffec 	bl	801ffa4 <__sfp_lock_acquire>
 801ffcc:	6a23      	ldr	r3, [r4, #32]
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d002      	beq.n	801ffd8 <__sinit+0x14>
 801ffd2:	f7ff ffef 	bl	801ffb4 <__sfp_lock_release>
 801ffd6:	bd10      	pop	{r4, pc}
 801ffd8:	4b04      	ldr	r3, [pc, #16]	@ (801ffec <__sinit+0x28>)
 801ffda:	6223      	str	r3, [r4, #32]
 801ffdc:	4b04      	ldr	r3, [pc, #16]	@ (801fff0 <__sinit+0x2c>)
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d1f6      	bne.n	801ffd2 <__sinit+0xe>
 801ffe4:	f7ff ffc0 	bl	801ff68 <global_stdio_init.part.0>
 801ffe8:	e7f3      	b.n	801ffd2 <__sinit+0xe>
 801ffea:	46c0      	nop			@ (mov r8, r8)
 801ffec:	0801ff2d 	.word	0x0801ff2d
 801fff0:	200037b8 	.word	0x200037b8

0801fff4 <_fwalk_sglue>:
 801fff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fff6:	0014      	movs	r4, r2
 801fff8:	2600      	movs	r6, #0
 801fffa:	9000      	str	r0, [sp, #0]
 801fffc:	9101      	str	r1, [sp, #4]
 801fffe:	68a5      	ldr	r5, [r4, #8]
 8020000:	6867      	ldr	r7, [r4, #4]
 8020002:	3f01      	subs	r7, #1
 8020004:	d504      	bpl.n	8020010 <_fwalk_sglue+0x1c>
 8020006:	6824      	ldr	r4, [r4, #0]
 8020008:	2c00      	cmp	r4, #0
 802000a:	d1f8      	bne.n	801fffe <_fwalk_sglue+0xa>
 802000c:	0030      	movs	r0, r6
 802000e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020010:	89ab      	ldrh	r3, [r5, #12]
 8020012:	2b01      	cmp	r3, #1
 8020014:	d908      	bls.n	8020028 <_fwalk_sglue+0x34>
 8020016:	220e      	movs	r2, #14
 8020018:	5eab      	ldrsh	r3, [r5, r2]
 802001a:	3301      	adds	r3, #1
 802001c:	d004      	beq.n	8020028 <_fwalk_sglue+0x34>
 802001e:	0029      	movs	r1, r5
 8020020:	9800      	ldr	r0, [sp, #0]
 8020022:	9b01      	ldr	r3, [sp, #4]
 8020024:	4798      	blx	r3
 8020026:	4306      	orrs	r6, r0
 8020028:	3568      	adds	r5, #104	@ 0x68
 802002a:	e7ea      	b.n	8020002 <_fwalk_sglue+0xe>

0802002c <iprintf>:
 802002c:	b40f      	push	{r0, r1, r2, r3}
 802002e:	b507      	push	{r0, r1, r2, lr}
 8020030:	4905      	ldr	r1, [pc, #20]	@ (8020048 <iprintf+0x1c>)
 8020032:	ab04      	add	r3, sp, #16
 8020034:	6808      	ldr	r0, [r1, #0]
 8020036:	cb04      	ldmia	r3!, {r2}
 8020038:	6881      	ldr	r1, [r0, #8]
 802003a:	9301      	str	r3, [sp, #4]
 802003c:	f002 fbe8 	bl	8022810 <_vfiprintf_r>
 8020040:	b003      	add	sp, #12
 8020042:	bc08      	pop	{r3}
 8020044:	b004      	add	sp, #16
 8020046:	4718      	bx	r3
 8020048:	200003d0 	.word	0x200003d0

0802004c <_puts_r>:
 802004c:	6a03      	ldr	r3, [r0, #32]
 802004e:	b570      	push	{r4, r5, r6, lr}
 8020050:	0005      	movs	r5, r0
 8020052:	000e      	movs	r6, r1
 8020054:	6884      	ldr	r4, [r0, #8]
 8020056:	2b00      	cmp	r3, #0
 8020058:	d101      	bne.n	802005e <_puts_r+0x12>
 802005a:	f7ff ffb3 	bl	801ffc4 <__sinit>
 802005e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020060:	07db      	lsls	r3, r3, #31
 8020062:	d405      	bmi.n	8020070 <_puts_r+0x24>
 8020064:	89a3      	ldrh	r3, [r4, #12]
 8020066:	059b      	lsls	r3, r3, #22
 8020068:	d402      	bmi.n	8020070 <_puts_r+0x24>
 802006a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802006c:	f000 fa61 	bl	8020532 <__retarget_lock_acquire_recursive>
 8020070:	89a3      	ldrh	r3, [r4, #12]
 8020072:	071b      	lsls	r3, r3, #28
 8020074:	d502      	bpl.n	802007c <_puts_r+0x30>
 8020076:	6923      	ldr	r3, [r4, #16]
 8020078:	2b00      	cmp	r3, #0
 802007a:	d11f      	bne.n	80200bc <_puts_r+0x70>
 802007c:	0021      	movs	r1, r4
 802007e:	0028      	movs	r0, r5
 8020080:	f000 f92a 	bl	80202d8 <__swsetup_r>
 8020084:	2800      	cmp	r0, #0
 8020086:	d019      	beq.n	80200bc <_puts_r+0x70>
 8020088:	2501      	movs	r5, #1
 802008a:	426d      	negs	r5, r5
 802008c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802008e:	07db      	lsls	r3, r3, #31
 8020090:	d405      	bmi.n	802009e <_puts_r+0x52>
 8020092:	89a3      	ldrh	r3, [r4, #12]
 8020094:	059b      	lsls	r3, r3, #22
 8020096:	d402      	bmi.n	802009e <_puts_r+0x52>
 8020098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802009a:	f000 fa4b 	bl	8020534 <__retarget_lock_release_recursive>
 802009e:	0028      	movs	r0, r5
 80200a0:	bd70      	pop	{r4, r5, r6, pc}
 80200a2:	3601      	adds	r6, #1
 80200a4:	60a3      	str	r3, [r4, #8]
 80200a6:	2b00      	cmp	r3, #0
 80200a8:	da04      	bge.n	80200b4 <_puts_r+0x68>
 80200aa:	69a2      	ldr	r2, [r4, #24]
 80200ac:	429a      	cmp	r2, r3
 80200ae:	dc16      	bgt.n	80200de <_puts_r+0x92>
 80200b0:	290a      	cmp	r1, #10
 80200b2:	d014      	beq.n	80200de <_puts_r+0x92>
 80200b4:	6823      	ldr	r3, [r4, #0]
 80200b6:	1c5a      	adds	r2, r3, #1
 80200b8:	6022      	str	r2, [r4, #0]
 80200ba:	7019      	strb	r1, [r3, #0]
 80200bc:	68a3      	ldr	r3, [r4, #8]
 80200be:	7831      	ldrb	r1, [r6, #0]
 80200c0:	3b01      	subs	r3, #1
 80200c2:	2900      	cmp	r1, #0
 80200c4:	d1ed      	bne.n	80200a2 <_puts_r+0x56>
 80200c6:	60a3      	str	r3, [r4, #8]
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	da0f      	bge.n	80200ec <_puts_r+0xa0>
 80200cc:	0022      	movs	r2, r4
 80200ce:	0028      	movs	r0, r5
 80200d0:	310a      	adds	r1, #10
 80200d2:	f000 f8bf 	bl	8020254 <__swbuf_r>
 80200d6:	3001      	adds	r0, #1
 80200d8:	d0d6      	beq.n	8020088 <_puts_r+0x3c>
 80200da:	250a      	movs	r5, #10
 80200dc:	e7d6      	b.n	802008c <_puts_r+0x40>
 80200de:	0022      	movs	r2, r4
 80200e0:	0028      	movs	r0, r5
 80200e2:	f000 f8b7 	bl	8020254 <__swbuf_r>
 80200e6:	3001      	adds	r0, #1
 80200e8:	d1e8      	bne.n	80200bc <_puts_r+0x70>
 80200ea:	e7cd      	b.n	8020088 <_puts_r+0x3c>
 80200ec:	6823      	ldr	r3, [r4, #0]
 80200ee:	1c5a      	adds	r2, r3, #1
 80200f0:	6022      	str	r2, [r4, #0]
 80200f2:	220a      	movs	r2, #10
 80200f4:	701a      	strb	r2, [r3, #0]
 80200f6:	e7f0      	b.n	80200da <_puts_r+0x8e>

080200f8 <puts>:
 80200f8:	b510      	push	{r4, lr}
 80200fa:	4b03      	ldr	r3, [pc, #12]	@ (8020108 <puts+0x10>)
 80200fc:	0001      	movs	r1, r0
 80200fe:	6818      	ldr	r0, [r3, #0]
 8020100:	f7ff ffa4 	bl	802004c <_puts_r>
 8020104:	bd10      	pop	{r4, pc}
 8020106:	46c0      	nop			@ (mov r8, r8)
 8020108:	200003d0 	.word	0x200003d0

0802010c <siprintf>:
 802010c:	b40e      	push	{r1, r2, r3}
 802010e:	b500      	push	{lr}
 8020110:	490b      	ldr	r1, [pc, #44]	@ (8020140 <siprintf+0x34>)
 8020112:	b09c      	sub	sp, #112	@ 0x70
 8020114:	ab1d      	add	r3, sp, #116	@ 0x74
 8020116:	9002      	str	r0, [sp, #8]
 8020118:	9006      	str	r0, [sp, #24]
 802011a:	9107      	str	r1, [sp, #28]
 802011c:	9104      	str	r1, [sp, #16]
 802011e:	4809      	ldr	r0, [pc, #36]	@ (8020144 <siprintf+0x38>)
 8020120:	4909      	ldr	r1, [pc, #36]	@ (8020148 <siprintf+0x3c>)
 8020122:	cb04      	ldmia	r3!, {r2}
 8020124:	9105      	str	r1, [sp, #20]
 8020126:	6800      	ldr	r0, [r0, #0]
 8020128:	a902      	add	r1, sp, #8
 802012a:	9301      	str	r3, [sp, #4]
 802012c:	f002 fa4a 	bl	80225c4 <_svfiprintf_r>
 8020130:	2200      	movs	r2, #0
 8020132:	9b02      	ldr	r3, [sp, #8]
 8020134:	701a      	strb	r2, [r3, #0]
 8020136:	b01c      	add	sp, #112	@ 0x70
 8020138:	bc08      	pop	{r3}
 802013a:	b003      	add	sp, #12
 802013c:	4718      	bx	r3
 802013e:	46c0      	nop			@ (mov r8, r8)
 8020140:	7fffffff 	.word	0x7fffffff
 8020144:	200003d0 	.word	0x200003d0
 8020148:	ffff0208 	.word	0xffff0208

0802014c <__sread>:
 802014c:	b570      	push	{r4, r5, r6, lr}
 802014e:	000c      	movs	r4, r1
 8020150:	250e      	movs	r5, #14
 8020152:	5f49      	ldrsh	r1, [r1, r5]
 8020154:	f000 f99a 	bl	802048c <_read_r>
 8020158:	2800      	cmp	r0, #0
 802015a:	db03      	blt.n	8020164 <__sread+0x18>
 802015c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802015e:	181b      	adds	r3, r3, r0
 8020160:	6563      	str	r3, [r4, #84]	@ 0x54
 8020162:	bd70      	pop	{r4, r5, r6, pc}
 8020164:	89a3      	ldrh	r3, [r4, #12]
 8020166:	4a02      	ldr	r2, [pc, #8]	@ (8020170 <__sread+0x24>)
 8020168:	4013      	ands	r3, r2
 802016a:	81a3      	strh	r3, [r4, #12]
 802016c:	e7f9      	b.n	8020162 <__sread+0x16>
 802016e:	46c0      	nop			@ (mov r8, r8)
 8020170:	ffffefff 	.word	0xffffefff

08020174 <__swrite>:
 8020174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020176:	001f      	movs	r7, r3
 8020178:	898b      	ldrh	r3, [r1, #12]
 802017a:	0005      	movs	r5, r0
 802017c:	000c      	movs	r4, r1
 802017e:	0016      	movs	r6, r2
 8020180:	05db      	lsls	r3, r3, #23
 8020182:	d505      	bpl.n	8020190 <__swrite+0x1c>
 8020184:	230e      	movs	r3, #14
 8020186:	5ec9      	ldrsh	r1, [r1, r3]
 8020188:	2200      	movs	r2, #0
 802018a:	2302      	movs	r3, #2
 802018c:	f000 f96a 	bl	8020464 <_lseek_r>
 8020190:	89a3      	ldrh	r3, [r4, #12]
 8020192:	4a05      	ldr	r2, [pc, #20]	@ (80201a8 <__swrite+0x34>)
 8020194:	0028      	movs	r0, r5
 8020196:	4013      	ands	r3, r2
 8020198:	81a3      	strh	r3, [r4, #12]
 802019a:	0032      	movs	r2, r6
 802019c:	230e      	movs	r3, #14
 802019e:	5ee1      	ldrsh	r1, [r4, r3]
 80201a0:	003b      	movs	r3, r7
 80201a2:	f000 f987 	bl	80204b4 <_write_r>
 80201a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201a8:	ffffefff 	.word	0xffffefff

080201ac <__sseek>:
 80201ac:	b570      	push	{r4, r5, r6, lr}
 80201ae:	000c      	movs	r4, r1
 80201b0:	250e      	movs	r5, #14
 80201b2:	5f49      	ldrsh	r1, [r1, r5]
 80201b4:	f000 f956 	bl	8020464 <_lseek_r>
 80201b8:	89a3      	ldrh	r3, [r4, #12]
 80201ba:	1c42      	adds	r2, r0, #1
 80201bc:	d103      	bne.n	80201c6 <__sseek+0x1a>
 80201be:	4a05      	ldr	r2, [pc, #20]	@ (80201d4 <__sseek+0x28>)
 80201c0:	4013      	ands	r3, r2
 80201c2:	81a3      	strh	r3, [r4, #12]
 80201c4:	bd70      	pop	{r4, r5, r6, pc}
 80201c6:	2280      	movs	r2, #128	@ 0x80
 80201c8:	0152      	lsls	r2, r2, #5
 80201ca:	4313      	orrs	r3, r2
 80201cc:	81a3      	strh	r3, [r4, #12]
 80201ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80201d0:	e7f8      	b.n	80201c4 <__sseek+0x18>
 80201d2:	46c0      	nop			@ (mov r8, r8)
 80201d4:	ffffefff 	.word	0xffffefff

080201d8 <__sclose>:
 80201d8:	b510      	push	{r4, lr}
 80201da:	230e      	movs	r3, #14
 80201dc:	5ec9      	ldrsh	r1, [r1, r3]
 80201de:	f000 f92f 	bl	8020440 <_close_r>
 80201e2:	bd10      	pop	{r4, pc}

080201e4 <_vsniprintf_r>:
 80201e4:	b530      	push	{r4, r5, lr}
 80201e6:	0014      	movs	r4, r2
 80201e8:	0005      	movs	r5, r0
 80201ea:	001a      	movs	r2, r3
 80201ec:	b09b      	sub	sp, #108	@ 0x6c
 80201ee:	2c00      	cmp	r4, #0
 80201f0:	da05      	bge.n	80201fe <_vsniprintf_r+0x1a>
 80201f2:	238b      	movs	r3, #139	@ 0x8b
 80201f4:	6003      	str	r3, [r0, #0]
 80201f6:	2001      	movs	r0, #1
 80201f8:	4240      	negs	r0, r0
 80201fa:	b01b      	add	sp, #108	@ 0x6c
 80201fc:	bd30      	pop	{r4, r5, pc}
 80201fe:	2382      	movs	r3, #130	@ 0x82
 8020200:	4668      	mov	r0, sp
 8020202:	009b      	lsls	r3, r3, #2
 8020204:	8183      	strh	r3, [r0, #12]
 8020206:	2300      	movs	r3, #0
 8020208:	9100      	str	r1, [sp, #0]
 802020a:	9104      	str	r1, [sp, #16]
 802020c:	429c      	cmp	r4, r3
 802020e:	d000      	beq.n	8020212 <_vsniprintf_r+0x2e>
 8020210:	1e63      	subs	r3, r4, #1
 8020212:	9302      	str	r3, [sp, #8]
 8020214:	9305      	str	r3, [sp, #20]
 8020216:	2301      	movs	r3, #1
 8020218:	4669      	mov	r1, sp
 802021a:	425b      	negs	r3, r3
 802021c:	81cb      	strh	r3, [r1, #14]
 802021e:	0028      	movs	r0, r5
 8020220:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020222:	f002 f9cf 	bl	80225c4 <_svfiprintf_r>
 8020226:	1c43      	adds	r3, r0, #1
 8020228:	da01      	bge.n	802022e <_vsniprintf_r+0x4a>
 802022a:	238b      	movs	r3, #139	@ 0x8b
 802022c:	602b      	str	r3, [r5, #0]
 802022e:	2c00      	cmp	r4, #0
 8020230:	d0e3      	beq.n	80201fa <_vsniprintf_r+0x16>
 8020232:	2200      	movs	r2, #0
 8020234:	9b00      	ldr	r3, [sp, #0]
 8020236:	701a      	strb	r2, [r3, #0]
 8020238:	e7df      	b.n	80201fa <_vsniprintf_r+0x16>
	...

0802023c <vsniprintf>:
 802023c:	b513      	push	{r0, r1, r4, lr}
 802023e:	4c04      	ldr	r4, [pc, #16]	@ (8020250 <vsniprintf+0x14>)
 8020240:	9300      	str	r3, [sp, #0]
 8020242:	0013      	movs	r3, r2
 8020244:	000a      	movs	r2, r1
 8020246:	0001      	movs	r1, r0
 8020248:	6820      	ldr	r0, [r4, #0]
 802024a:	f7ff ffcb 	bl	80201e4 <_vsniprintf_r>
 802024e:	bd16      	pop	{r1, r2, r4, pc}
 8020250:	200003d0 	.word	0x200003d0

08020254 <__swbuf_r>:
 8020254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020256:	0006      	movs	r6, r0
 8020258:	000d      	movs	r5, r1
 802025a:	0014      	movs	r4, r2
 802025c:	2800      	cmp	r0, #0
 802025e:	d004      	beq.n	802026a <__swbuf_r+0x16>
 8020260:	6a03      	ldr	r3, [r0, #32]
 8020262:	2b00      	cmp	r3, #0
 8020264:	d101      	bne.n	802026a <__swbuf_r+0x16>
 8020266:	f7ff fead 	bl	801ffc4 <__sinit>
 802026a:	69a3      	ldr	r3, [r4, #24]
 802026c:	60a3      	str	r3, [r4, #8]
 802026e:	89a3      	ldrh	r3, [r4, #12]
 8020270:	071b      	lsls	r3, r3, #28
 8020272:	d502      	bpl.n	802027a <__swbuf_r+0x26>
 8020274:	6923      	ldr	r3, [r4, #16]
 8020276:	2b00      	cmp	r3, #0
 8020278:	d109      	bne.n	802028e <__swbuf_r+0x3a>
 802027a:	0021      	movs	r1, r4
 802027c:	0030      	movs	r0, r6
 802027e:	f000 f82b 	bl	80202d8 <__swsetup_r>
 8020282:	2800      	cmp	r0, #0
 8020284:	d003      	beq.n	802028e <__swbuf_r+0x3a>
 8020286:	2501      	movs	r5, #1
 8020288:	426d      	negs	r5, r5
 802028a:	0028      	movs	r0, r5
 802028c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802028e:	6923      	ldr	r3, [r4, #16]
 8020290:	6820      	ldr	r0, [r4, #0]
 8020292:	b2ef      	uxtb	r7, r5
 8020294:	1ac0      	subs	r0, r0, r3
 8020296:	6963      	ldr	r3, [r4, #20]
 8020298:	b2ed      	uxtb	r5, r5
 802029a:	4283      	cmp	r3, r0
 802029c:	dc05      	bgt.n	80202aa <__swbuf_r+0x56>
 802029e:	0021      	movs	r1, r4
 80202a0:	0030      	movs	r0, r6
 80202a2:	f002 fc57 	bl	8022b54 <_fflush_r>
 80202a6:	2800      	cmp	r0, #0
 80202a8:	d1ed      	bne.n	8020286 <__swbuf_r+0x32>
 80202aa:	68a3      	ldr	r3, [r4, #8]
 80202ac:	3001      	adds	r0, #1
 80202ae:	3b01      	subs	r3, #1
 80202b0:	60a3      	str	r3, [r4, #8]
 80202b2:	6823      	ldr	r3, [r4, #0]
 80202b4:	1c5a      	adds	r2, r3, #1
 80202b6:	6022      	str	r2, [r4, #0]
 80202b8:	701f      	strb	r7, [r3, #0]
 80202ba:	6963      	ldr	r3, [r4, #20]
 80202bc:	4283      	cmp	r3, r0
 80202be:	d004      	beq.n	80202ca <__swbuf_r+0x76>
 80202c0:	89a3      	ldrh	r3, [r4, #12]
 80202c2:	07db      	lsls	r3, r3, #31
 80202c4:	d5e1      	bpl.n	802028a <__swbuf_r+0x36>
 80202c6:	2d0a      	cmp	r5, #10
 80202c8:	d1df      	bne.n	802028a <__swbuf_r+0x36>
 80202ca:	0021      	movs	r1, r4
 80202cc:	0030      	movs	r0, r6
 80202ce:	f002 fc41 	bl	8022b54 <_fflush_r>
 80202d2:	2800      	cmp	r0, #0
 80202d4:	d0d9      	beq.n	802028a <__swbuf_r+0x36>
 80202d6:	e7d6      	b.n	8020286 <__swbuf_r+0x32>

080202d8 <__swsetup_r>:
 80202d8:	4b2d      	ldr	r3, [pc, #180]	@ (8020390 <__swsetup_r+0xb8>)
 80202da:	b570      	push	{r4, r5, r6, lr}
 80202dc:	0005      	movs	r5, r0
 80202de:	6818      	ldr	r0, [r3, #0]
 80202e0:	000c      	movs	r4, r1
 80202e2:	2800      	cmp	r0, #0
 80202e4:	d004      	beq.n	80202f0 <__swsetup_r+0x18>
 80202e6:	6a03      	ldr	r3, [r0, #32]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d101      	bne.n	80202f0 <__swsetup_r+0x18>
 80202ec:	f7ff fe6a 	bl	801ffc4 <__sinit>
 80202f0:	230c      	movs	r3, #12
 80202f2:	5ee2      	ldrsh	r2, [r4, r3]
 80202f4:	0713      	lsls	r3, r2, #28
 80202f6:	d423      	bmi.n	8020340 <__swsetup_r+0x68>
 80202f8:	06d3      	lsls	r3, r2, #27
 80202fa:	d407      	bmi.n	802030c <__swsetup_r+0x34>
 80202fc:	2309      	movs	r3, #9
 80202fe:	602b      	str	r3, [r5, #0]
 8020300:	2340      	movs	r3, #64	@ 0x40
 8020302:	2001      	movs	r0, #1
 8020304:	4313      	orrs	r3, r2
 8020306:	81a3      	strh	r3, [r4, #12]
 8020308:	4240      	negs	r0, r0
 802030a:	e03a      	b.n	8020382 <__swsetup_r+0xaa>
 802030c:	0752      	lsls	r2, r2, #29
 802030e:	d513      	bpl.n	8020338 <__swsetup_r+0x60>
 8020310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020312:	2900      	cmp	r1, #0
 8020314:	d008      	beq.n	8020328 <__swsetup_r+0x50>
 8020316:	0023      	movs	r3, r4
 8020318:	3344      	adds	r3, #68	@ 0x44
 802031a:	4299      	cmp	r1, r3
 802031c:	d002      	beq.n	8020324 <__swsetup_r+0x4c>
 802031e:	0028      	movs	r0, r5
 8020320:	f000 ffa6 	bl	8021270 <_free_r>
 8020324:	2300      	movs	r3, #0
 8020326:	6363      	str	r3, [r4, #52]	@ 0x34
 8020328:	2224      	movs	r2, #36	@ 0x24
 802032a:	89a3      	ldrh	r3, [r4, #12]
 802032c:	4393      	bics	r3, r2
 802032e:	81a3      	strh	r3, [r4, #12]
 8020330:	2300      	movs	r3, #0
 8020332:	6063      	str	r3, [r4, #4]
 8020334:	6923      	ldr	r3, [r4, #16]
 8020336:	6023      	str	r3, [r4, #0]
 8020338:	2308      	movs	r3, #8
 802033a:	89a2      	ldrh	r2, [r4, #12]
 802033c:	4313      	orrs	r3, r2
 802033e:	81a3      	strh	r3, [r4, #12]
 8020340:	6923      	ldr	r3, [r4, #16]
 8020342:	2b00      	cmp	r3, #0
 8020344:	d10b      	bne.n	802035e <__swsetup_r+0x86>
 8020346:	21a0      	movs	r1, #160	@ 0xa0
 8020348:	2280      	movs	r2, #128	@ 0x80
 802034a:	89a3      	ldrh	r3, [r4, #12]
 802034c:	0089      	lsls	r1, r1, #2
 802034e:	0092      	lsls	r2, r2, #2
 8020350:	400b      	ands	r3, r1
 8020352:	4293      	cmp	r3, r2
 8020354:	d003      	beq.n	802035e <__swsetup_r+0x86>
 8020356:	0021      	movs	r1, r4
 8020358:	0028      	movs	r0, r5
 802035a:	f002 fc51 	bl	8022c00 <__smakebuf_r>
 802035e:	230c      	movs	r3, #12
 8020360:	5ee2      	ldrsh	r2, [r4, r3]
 8020362:	2101      	movs	r1, #1
 8020364:	0013      	movs	r3, r2
 8020366:	400b      	ands	r3, r1
 8020368:	420a      	tst	r2, r1
 802036a:	d00b      	beq.n	8020384 <__swsetup_r+0xac>
 802036c:	2300      	movs	r3, #0
 802036e:	60a3      	str	r3, [r4, #8]
 8020370:	6963      	ldr	r3, [r4, #20]
 8020372:	425b      	negs	r3, r3
 8020374:	61a3      	str	r3, [r4, #24]
 8020376:	2000      	movs	r0, #0
 8020378:	6923      	ldr	r3, [r4, #16]
 802037a:	4283      	cmp	r3, r0
 802037c:	d101      	bne.n	8020382 <__swsetup_r+0xaa>
 802037e:	0613      	lsls	r3, r2, #24
 8020380:	d4be      	bmi.n	8020300 <__swsetup_r+0x28>
 8020382:	bd70      	pop	{r4, r5, r6, pc}
 8020384:	0791      	lsls	r1, r2, #30
 8020386:	d400      	bmi.n	802038a <__swsetup_r+0xb2>
 8020388:	6963      	ldr	r3, [r4, #20]
 802038a:	60a3      	str	r3, [r4, #8]
 802038c:	e7f3      	b.n	8020376 <__swsetup_r+0x9e>
 802038e:	46c0      	nop			@ (mov r8, r8)
 8020390:	200003d0 	.word	0x200003d0

08020394 <memset>:
 8020394:	0003      	movs	r3, r0
 8020396:	1882      	adds	r2, r0, r2
 8020398:	4293      	cmp	r3, r2
 802039a:	d100      	bne.n	802039e <memset+0xa>
 802039c:	4770      	bx	lr
 802039e:	7019      	strb	r1, [r3, #0]
 80203a0:	3301      	adds	r3, #1
 80203a2:	e7f9      	b.n	8020398 <memset+0x4>

080203a4 <strchr>:
 80203a4:	b2c9      	uxtb	r1, r1
 80203a6:	7803      	ldrb	r3, [r0, #0]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d004      	beq.n	80203b6 <strchr+0x12>
 80203ac:	428b      	cmp	r3, r1
 80203ae:	d100      	bne.n	80203b2 <strchr+0xe>
 80203b0:	4770      	bx	lr
 80203b2:	3001      	adds	r0, #1
 80203b4:	e7f7      	b.n	80203a6 <strchr+0x2>
 80203b6:	424b      	negs	r3, r1
 80203b8:	4159      	adcs	r1, r3
 80203ba:	4249      	negs	r1, r1
 80203bc:	4008      	ands	r0, r1
 80203be:	e7f7      	b.n	80203b0 <strchr+0xc>

080203c0 <strncmp>:
 80203c0:	b530      	push	{r4, r5, lr}
 80203c2:	0005      	movs	r5, r0
 80203c4:	1e10      	subs	r0, r2, #0
 80203c6:	d00b      	beq.n	80203e0 <strncmp+0x20>
 80203c8:	2400      	movs	r4, #0
 80203ca:	3a01      	subs	r2, #1
 80203cc:	5d2b      	ldrb	r3, [r5, r4]
 80203ce:	5d08      	ldrb	r0, [r1, r4]
 80203d0:	4283      	cmp	r3, r0
 80203d2:	d104      	bne.n	80203de <strncmp+0x1e>
 80203d4:	42a2      	cmp	r2, r4
 80203d6:	d002      	beq.n	80203de <strncmp+0x1e>
 80203d8:	3401      	adds	r4, #1
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d1f6      	bne.n	80203cc <strncmp+0xc>
 80203de:	1a18      	subs	r0, r3, r0
 80203e0:	bd30      	pop	{r4, r5, pc}

080203e2 <strncpy>:
 80203e2:	0003      	movs	r3, r0
 80203e4:	b530      	push	{r4, r5, lr}
 80203e6:	001d      	movs	r5, r3
 80203e8:	2a00      	cmp	r2, #0
 80203ea:	d006      	beq.n	80203fa <strncpy+0x18>
 80203ec:	780c      	ldrb	r4, [r1, #0]
 80203ee:	3a01      	subs	r2, #1
 80203f0:	3301      	adds	r3, #1
 80203f2:	702c      	strb	r4, [r5, #0]
 80203f4:	3101      	adds	r1, #1
 80203f6:	2c00      	cmp	r4, #0
 80203f8:	d1f5      	bne.n	80203e6 <strncpy+0x4>
 80203fa:	2100      	movs	r1, #0
 80203fc:	189a      	adds	r2, r3, r2
 80203fe:	4293      	cmp	r3, r2
 8020400:	d100      	bne.n	8020404 <strncpy+0x22>
 8020402:	bd30      	pop	{r4, r5, pc}
 8020404:	7019      	strb	r1, [r3, #0]
 8020406:	3301      	adds	r3, #1
 8020408:	e7f9      	b.n	80203fe <strncpy+0x1c>

0802040a <strstr>:
 802040a:	780a      	ldrb	r2, [r1, #0]
 802040c:	b530      	push	{r4, r5, lr}
 802040e:	2a00      	cmp	r2, #0
 8020410:	d10c      	bne.n	802042c <strstr+0x22>
 8020412:	bd30      	pop	{r4, r5, pc}
 8020414:	429a      	cmp	r2, r3
 8020416:	d108      	bne.n	802042a <strstr+0x20>
 8020418:	2301      	movs	r3, #1
 802041a:	5ccc      	ldrb	r4, [r1, r3]
 802041c:	2c00      	cmp	r4, #0
 802041e:	d0f8      	beq.n	8020412 <strstr+0x8>
 8020420:	5cc5      	ldrb	r5, [r0, r3]
 8020422:	42a5      	cmp	r5, r4
 8020424:	d101      	bne.n	802042a <strstr+0x20>
 8020426:	3301      	adds	r3, #1
 8020428:	e7f7      	b.n	802041a <strstr+0x10>
 802042a:	3001      	adds	r0, #1
 802042c:	7803      	ldrb	r3, [r0, #0]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d1f0      	bne.n	8020414 <strstr+0xa>
 8020432:	0018      	movs	r0, r3
 8020434:	e7ed      	b.n	8020412 <strstr+0x8>
	...

08020438 <_localeconv_r>:
 8020438:	4800      	ldr	r0, [pc, #0]	@ (802043c <_localeconv_r+0x4>)
 802043a:	4770      	bx	lr
 802043c:	20000354 	.word	0x20000354

08020440 <_close_r>:
 8020440:	2300      	movs	r3, #0
 8020442:	b570      	push	{r4, r5, r6, lr}
 8020444:	4d06      	ldr	r5, [pc, #24]	@ (8020460 <_close_r+0x20>)
 8020446:	0004      	movs	r4, r0
 8020448:	0008      	movs	r0, r1
 802044a:	602b      	str	r3, [r5, #0]
 802044c:	f7ed fca4 	bl	800dd98 <_close>
 8020450:	1c43      	adds	r3, r0, #1
 8020452:	d103      	bne.n	802045c <_close_r+0x1c>
 8020454:	682b      	ldr	r3, [r5, #0]
 8020456:	2b00      	cmp	r3, #0
 8020458:	d000      	beq.n	802045c <_close_r+0x1c>
 802045a:	6023      	str	r3, [r4, #0]
 802045c:	bd70      	pop	{r4, r5, r6, pc}
 802045e:	46c0      	nop			@ (mov r8, r8)
 8020460:	200037bc 	.word	0x200037bc

08020464 <_lseek_r>:
 8020464:	b570      	push	{r4, r5, r6, lr}
 8020466:	0004      	movs	r4, r0
 8020468:	0008      	movs	r0, r1
 802046a:	0011      	movs	r1, r2
 802046c:	001a      	movs	r2, r3
 802046e:	2300      	movs	r3, #0
 8020470:	4d05      	ldr	r5, [pc, #20]	@ (8020488 <_lseek_r+0x24>)
 8020472:	602b      	str	r3, [r5, #0]
 8020474:	f7ed fcb1 	bl	800ddda <_lseek>
 8020478:	1c43      	adds	r3, r0, #1
 802047a:	d103      	bne.n	8020484 <_lseek_r+0x20>
 802047c:	682b      	ldr	r3, [r5, #0]
 802047e:	2b00      	cmp	r3, #0
 8020480:	d000      	beq.n	8020484 <_lseek_r+0x20>
 8020482:	6023      	str	r3, [r4, #0]
 8020484:	bd70      	pop	{r4, r5, r6, pc}
 8020486:	46c0      	nop			@ (mov r8, r8)
 8020488:	200037bc 	.word	0x200037bc

0802048c <_read_r>:
 802048c:	b570      	push	{r4, r5, r6, lr}
 802048e:	0004      	movs	r4, r0
 8020490:	0008      	movs	r0, r1
 8020492:	0011      	movs	r1, r2
 8020494:	001a      	movs	r2, r3
 8020496:	2300      	movs	r3, #0
 8020498:	4d05      	ldr	r5, [pc, #20]	@ (80204b0 <_read_r+0x24>)
 802049a:	602b      	str	r3, [r5, #0]
 802049c:	f7ed fc5f 	bl	800dd5e <_read>
 80204a0:	1c43      	adds	r3, r0, #1
 80204a2:	d103      	bne.n	80204ac <_read_r+0x20>
 80204a4:	682b      	ldr	r3, [r5, #0]
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d000      	beq.n	80204ac <_read_r+0x20>
 80204aa:	6023      	str	r3, [r4, #0]
 80204ac:	bd70      	pop	{r4, r5, r6, pc}
 80204ae:	46c0      	nop			@ (mov r8, r8)
 80204b0:	200037bc 	.word	0x200037bc

080204b4 <_write_r>:
 80204b4:	b570      	push	{r4, r5, r6, lr}
 80204b6:	0004      	movs	r4, r0
 80204b8:	0008      	movs	r0, r1
 80204ba:	0011      	movs	r1, r2
 80204bc:	001a      	movs	r2, r3
 80204be:	2300      	movs	r3, #0
 80204c0:	4d05      	ldr	r5, [pc, #20]	@ (80204d8 <_write_r+0x24>)
 80204c2:	602b      	str	r3, [r5, #0]
 80204c4:	f7ee f920 	bl	800e708 <_write>
 80204c8:	1c43      	adds	r3, r0, #1
 80204ca:	d103      	bne.n	80204d4 <_write_r+0x20>
 80204cc:	682b      	ldr	r3, [r5, #0]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d000      	beq.n	80204d4 <_write_r+0x20>
 80204d2:	6023      	str	r3, [r4, #0]
 80204d4:	bd70      	pop	{r4, r5, r6, pc}
 80204d6:	46c0      	nop			@ (mov r8, r8)
 80204d8:	200037bc 	.word	0x200037bc

080204dc <__errno>:
 80204dc:	4b01      	ldr	r3, [pc, #4]	@ (80204e4 <__errno+0x8>)
 80204de:	6818      	ldr	r0, [r3, #0]
 80204e0:	4770      	bx	lr
 80204e2:	46c0      	nop			@ (mov r8, r8)
 80204e4:	200003d0 	.word	0x200003d0

080204e8 <__libc_init_array>:
 80204e8:	b570      	push	{r4, r5, r6, lr}
 80204ea:	2600      	movs	r6, #0
 80204ec:	4c0c      	ldr	r4, [pc, #48]	@ (8020520 <__libc_init_array+0x38>)
 80204ee:	4d0d      	ldr	r5, [pc, #52]	@ (8020524 <__libc_init_array+0x3c>)
 80204f0:	1b64      	subs	r4, r4, r5
 80204f2:	10a4      	asrs	r4, r4, #2
 80204f4:	42a6      	cmp	r6, r4
 80204f6:	d109      	bne.n	802050c <__libc_init_array+0x24>
 80204f8:	2600      	movs	r6, #0
 80204fa:	f002 fee9 	bl	80232d0 <_init>
 80204fe:	4c0a      	ldr	r4, [pc, #40]	@ (8020528 <__libc_init_array+0x40>)
 8020500:	4d0a      	ldr	r5, [pc, #40]	@ (802052c <__libc_init_array+0x44>)
 8020502:	1b64      	subs	r4, r4, r5
 8020504:	10a4      	asrs	r4, r4, #2
 8020506:	42a6      	cmp	r6, r4
 8020508:	d105      	bne.n	8020516 <__libc_init_array+0x2e>
 802050a:	bd70      	pop	{r4, r5, r6, pc}
 802050c:	00b3      	lsls	r3, r6, #2
 802050e:	58eb      	ldr	r3, [r5, r3]
 8020510:	4798      	blx	r3
 8020512:	3601      	adds	r6, #1
 8020514:	e7ee      	b.n	80204f4 <__libc_init_array+0xc>
 8020516:	00b3      	lsls	r3, r6, #2
 8020518:	58eb      	ldr	r3, [r5, r3]
 802051a:	4798      	blx	r3
 802051c:	3601      	adds	r6, #1
 802051e:	e7f2      	b.n	8020506 <__libc_init_array+0x1e>
 8020520:	080261c8 	.word	0x080261c8
 8020524:	080261c8 	.word	0x080261c8
 8020528:	080261cc 	.word	0x080261cc
 802052c:	080261c8 	.word	0x080261c8

08020530 <__retarget_lock_init_recursive>:
 8020530:	4770      	bx	lr

08020532 <__retarget_lock_acquire_recursive>:
 8020532:	4770      	bx	lr

08020534 <__retarget_lock_release_recursive>:
 8020534:	4770      	bx	lr

08020536 <memchr>:
 8020536:	b2c9      	uxtb	r1, r1
 8020538:	1882      	adds	r2, r0, r2
 802053a:	4290      	cmp	r0, r2
 802053c:	d101      	bne.n	8020542 <memchr+0xc>
 802053e:	2000      	movs	r0, #0
 8020540:	4770      	bx	lr
 8020542:	7803      	ldrb	r3, [r0, #0]
 8020544:	428b      	cmp	r3, r1
 8020546:	d0fb      	beq.n	8020540 <memchr+0xa>
 8020548:	3001      	adds	r0, #1
 802054a:	e7f6      	b.n	802053a <memchr+0x4>

0802054c <memcpy>:
 802054c:	2300      	movs	r3, #0
 802054e:	b510      	push	{r4, lr}
 8020550:	429a      	cmp	r2, r3
 8020552:	d100      	bne.n	8020556 <memcpy+0xa>
 8020554:	bd10      	pop	{r4, pc}
 8020556:	5ccc      	ldrb	r4, [r1, r3]
 8020558:	54c4      	strb	r4, [r0, r3]
 802055a:	3301      	adds	r3, #1
 802055c:	e7f8      	b.n	8020550 <memcpy+0x4>
	...

08020560 <nan>:
 8020560:	2000      	movs	r0, #0
 8020562:	4901      	ldr	r1, [pc, #4]	@ (8020568 <nan+0x8>)
 8020564:	4770      	bx	lr
 8020566:	46c0      	nop			@ (mov r8, r8)
 8020568:	7ff80000 	.word	0x7ff80000

0802056c <quorem>:
 802056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802056e:	6902      	ldr	r2, [r0, #16]
 8020570:	690f      	ldr	r7, [r1, #16]
 8020572:	b087      	sub	sp, #28
 8020574:	0006      	movs	r6, r0
 8020576:	000b      	movs	r3, r1
 8020578:	2000      	movs	r0, #0
 802057a:	9102      	str	r1, [sp, #8]
 802057c:	42ba      	cmp	r2, r7
 802057e:	db6d      	blt.n	802065c <quorem+0xf0>
 8020580:	3f01      	subs	r7, #1
 8020582:	00bc      	lsls	r4, r7, #2
 8020584:	3314      	adds	r3, #20
 8020586:	9305      	str	r3, [sp, #20]
 8020588:	191b      	adds	r3, r3, r4
 802058a:	9303      	str	r3, [sp, #12]
 802058c:	0033      	movs	r3, r6
 802058e:	3314      	adds	r3, #20
 8020590:	191c      	adds	r4, r3, r4
 8020592:	9301      	str	r3, [sp, #4]
 8020594:	6823      	ldr	r3, [r4, #0]
 8020596:	9304      	str	r3, [sp, #16]
 8020598:	9b03      	ldr	r3, [sp, #12]
 802059a:	9804      	ldr	r0, [sp, #16]
 802059c:	681d      	ldr	r5, [r3, #0]
 802059e:	3501      	adds	r5, #1
 80205a0:	0029      	movs	r1, r5
 80205a2:	f7df fdff 	bl	80001a4 <__udivsi3>
 80205a6:	9b04      	ldr	r3, [sp, #16]
 80205a8:	9000      	str	r0, [sp, #0]
 80205aa:	42ab      	cmp	r3, r5
 80205ac:	d32b      	bcc.n	8020606 <quorem+0x9a>
 80205ae:	9b05      	ldr	r3, [sp, #20]
 80205b0:	9d01      	ldr	r5, [sp, #4]
 80205b2:	469c      	mov	ip, r3
 80205b4:	2300      	movs	r3, #0
 80205b6:	9305      	str	r3, [sp, #20]
 80205b8:	9304      	str	r3, [sp, #16]
 80205ba:	4662      	mov	r2, ip
 80205bc:	ca08      	ldmia	r2!, {r3}
 80205be:	6828      	ldr	r0, [r5, #0]
 80205c0:	4694      	mov	ip, r2
 80205c2:	9a00      	ldr	r2, [sp, #0]
 80205c4:	b299      	uxth	r1, r3
 80205c6:	4351      	muls	r1, r2
 80205c8:	9a05      	ldr	r2, [sp, #20]
 80205ca:	0c1b      	lsrs	r3, r3, #16
 80205cc:	1889      	adds	r1, r1, r2
 80205ce:	9a00      	ldr	r2, [sp, #0]
 80205d0:	4353      	muls	r3, r2
 80205d2:	0c0a      	lsrs	r2, r1, #16
 80205d4:	189b      	adds	r3, r3, r2
 80205d6:	0c1a      	lsrs	r2, r3, #16
 80205d8:	b289      	uxth	r1, r1
 80205da:	9205      	str	r2, [sp, #20]
 80205dc:	b282      	uxth	r2, r0
 80205de:	1a52      	subs	r2, r2, r1
 80205e0:	9904      	ldr	r1, [sp, #16]
 80205e2:	0c00      	lsrs	r0, r0, #16
 80205e4:	1852      	adds	r2, r2, r1
 80205e6:	b29b      	uxth	r3, r3
 80205e8:	1411      	asrs	r1, r2, #16
 80205ea:	1ac3      	subs	r3, r0, r3
 80205ec:	185b      	adds	r3, r3, r1
 80205ee:	1419      	asrs	r1, r3, #16
 80205f0:	b292      	uxth	r2, r2
 80205f2:	041b      	lsls	r3, r3, #16
 80205f4:	431a      	orrs	r2, r3
 80205f6:	9b03      	ldr	r3, [sp, #12]
 80205f8:	9104      	str	r1, [sp, #16]
 80205fa:	c504      	stmia	r5!, {r2}
 80205fc:	4563      	cmp	r3, ip
 80205fe:	d2dc      	bcs.n	80205ba <quorem+0x4e>
 8020600:	6823      	ldr	r3, [r4, #0]
 8020602:	2b00      	cmp	r3, #0
 8020604:	d030      	beq.n	8020668 <quorem+0xfc>
 8020606:	0030      	movs	r0, r6
 8020608:	9902      	ldr	r1, [sp, #8]
 802060a:	f001 fd7d 	bl	8022108 <__mcmp>
 802060e:	2800      	cmp	r0, #0
 8020610:	db23      	blt.n	802065a <quorem+0xee>
 8020612:	0034      	movs	r4, r6
 8020614:	2500      	movs	r5, #0
 8020616:	9902      	ldr	r1, [sp, #8]
 8020618:	3414      	adds	r4, #20
 802061a:	3114      	adds	r1, #20
 802061c:	6823      	ldr	r3, [r4, #0]
 802061e:	c901      	ldmia	r1!, {r0}
 8020620:	9302      	str	r3, [sp, #8]
 8020622:	466b      	mov	r3, sp
 8020624:	891b      	ldrh	r3, [r3, #8]
 8020626:	b282      	uxth	r2, r0
 8020628:	1a9a      	subs	r2, r3, r2
 802062a:	9b02      	ldr	r3, [sp, #8]
 802062c:	1952      	adds	r2, r2, r5
 802062e:	0c00      	lsrs	r0, r0, #16
 8020630:	0c1b      	lsrs	r3, r3, #16
 8020632:	1a1b      	subs	r3, r3, r0
 8020634:	1410      	asrs	r0, r2, #16
 8020636:	181b      	adds	r3, r3, r0
 8020638:	141d      	asrs	r5, r3, #16
 802063a:	b292      	uxth	r2, r2
 802063c:	041b      	lsls	r3, r3, #16
 802063e:	431a      	orrs	r2, r3
 8020640:	9b03      	ldr	r3, [sp, #12]
 8020642:	c404      	stmia	r4!, {r2}
 8020644:	428b      	cmp	r3, r1
 8020646:	d2e9      	bcs.n	802061c <quorem+0xb0>
 8020648:	9a01      	ldr	r2, [sp, #4]
 802064a:	00bb      	lsls	r3, r7, #2
 802064c:	18d3      	adds	r3, r2, r3
 802064e:	681a      	ldr	r2, [r3, #0]
 8020650:	2a00      	cmp	r2, #0
 8020652:	d013      	beq.n	802067c <quorem+0x110>
 8020654:	9b00      	ldr	r3, [sp, #0]
 8020656:	3301      	adds	r3, #1
 8020658:	9300      	str	r3, [sp, #0]
 802065a:	9800      	ldr	r0, [sp, #0]
 802065c:	b007      	add	sp, #28
 802065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020660:	6823      	ldr	r3, [r4, #0]
 8020662:	2b00      	cmp	r3, #0
 8020664:	d104      	bne.n	8020670 <quorem+0x104>
 8020666:	3f01      	subs	r7, #1
 8020668:	9b01      	ldr	r3, [sp, #4]
 802066a:	3c04      	subs	r4, #4
 802066c:	42a3      	cmp	r3, r4
 802066e:	d3f7      	bcc.n	8020660 <quorem+0xf4>
 8020670:	6137      	str	r7, [r6, #16]
 8020672:	e7c8      	b.n	8020606 <quorem+0x9a>
 8020674:	681a      	ldr	r2, [r3, #0]
 8020676:	2a00      	cmp	r2, #0
 8020678:	d104      	bne.n	8020684 <quorem+0x118>
 802067a:	3f01      	subs	r7, #1
 802067c:	9a01      	ldr	r2, [sp, #4]
 802067e:	3b04      	subs	r3, #4
 8020680:	429a      	cmp	r2, r3
 8020682:	d3f7      	bcc.n	8020674 <quorem+0x108>
 8020684:	6137      	str	r7, [r6, #16]
 8020686:	e7e5      	b.n	8020654 <quorem+0xe8>

08020688 <_dtoa_r>:
 8020688:	b5f0      	push	{r4, r5, r6, r7, lr}
 802068a:	0014      	movs	r4, r2
 802068c:	001d      	movs	r5, r3
 802068e:	69c6      	ldr	r6, [r0, #28]
 8020690:	b09d      	sub	sp, #116	@ 0x74
 8020692:	940a      	str	r4, [sp, #40]	@ 0x28
 8020694:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020696:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020698:	9003      	str	r0, [sp, #12]
 802069a:	2e00      	cmp	r6, #0
 802069c:	d10f      	bne.n	80206be <_dtoa_r+0x36>
 802069e:	2010      	movs	r0, #16
 80206a0:	f001 f98a 	bl	80219b8 <malloc>
 80206a4:	9b03      	ldr	r3, [sp, #12]
 80206a6:	1e02      	subs	r2, r0, #0
 80206a8:	61d8      	str	r0, [r3, #28]
 80206aa:	d104      	bne.n	80206b6 <_dtoa_r+0x2e>
 80206ac:	21ef      	movs	r1, #239	@ 0xef
 80206ae:	4bc7      	ldr	r3, [pc, #796]	@ (80209cc <_dtoa_r+0x344>)
 80206b0:	48c7      	ldr	r0, [pc, #796]	@ (80209d0 <_dtoa_r+0x348>)
 80206b2:	f002 fb2f 	bl	8022d14 <__assert_func>
 80206b6:	6046      	str	r6, [r0, #4]
 80206b8:	6086      	str	r6, [r0, #8]
 80206ba:	6006      	str	r6, [r0, #0]
 80206bc:	60c6      	str	r6, [r0, #12]
 80206be:	9b03      	ldr	r3, [sp, #12]
 80206c0:	69db      	ldr	r3, [r3, #28]
 80206c2:	6819      	ldr	r1, [r3, #0]
 80206c4:	2900      	cmp	r1, #0
 80206c6:	d00b      	beq.n	80206e0 <_dtoa_r+0x58>
 80206c8:	685a      	ldr	r2, [r3, #4]
 80206ca:	2301      	movs	r3, #1
 80206cc:	4093      	lsls	r3, r2
 80206ce:	604a      	str	r2, [r1, #4]
 80206d0:	608b      	str	r3, [r1, #8]
 80206d2:	9803      	ldr	r0, [sp, #12]
 80206d4:	f001 fa82 	bl	8021bdc <_Bfree>
 80206d8:	2200      	movs	r2, #0
 80206da:	9b03      	ldr	r3, [sp, #12]
 80206dc:	69db      	ldr	r3, [r3, #28]
 80206de:	601a      	str	r2, [r3, #0]
 80206e0:	2d00      	cmp	r5, #0
 80206e2:	da1e      	bge.n	8020722 <_dtoa_r+0x9a>
 80206e4:	2301      	movs	r3, #1
 80206e6:	603b      	str	r3, [r7, #0]
 80206e8:	006b      	lsls	r3, r5, #1
 80206ea:	085b      	lsrs	r3, r3, #1
 80206ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80206ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80206f0:	4bb8      	ldr	r3, [pc, #736]	@ (80209d4 <_dtoa_r+0x34c>)
 80206f2:	4ab8      	ldr	r2, [pc, #736]	@ (80209d4 <_dtoa_r+0x34c>)
 80206f4:	403b      	ands	r3, r7
 80206f6:	4293      	cmp	r3, r2
 80206f8:	d116      	bne.n	8020728 <_dtoa_r+0xa0>
 80206fa:	4bb7      	ldr	r3, [pc, #732]	@ (80209d8 <_dtoa_r+0x350>)
 80206fc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80206fe:	6013      	str	r3, [r2, #0]
 8020700:	033b      	lsls	r3, r7, #12
 8020702:	0b1b      	lsrs	r3, r3, #12
 8020704:	4323      	orrs	r3, r4
 8020706:	d101      	bne.n	802070c <_dtoa_r+0x84>
 8020708:	f000 fd83 	bl	8021212 <_dtoa_r+0xb8a>
 802070c:	4bb3      	ldr	r3, [pc, #716]	@ (80209dc <_dtoa_r+0x354>)
 802070e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020710:	9308      	str	r3, [sp, #32]
 8020712:	2a00      	cmp	r2, #0
 8020714:	d002      	beq.n	802071c <_dtoa_r+0x94>
 8020716:	4bb2      	ldr	r3, [pc, #712]	@ (80209e0 <_dtoa_r+0x358>)
 8020718:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802071a:	6013      	str	r3, [r2, #0]
 802071c:	9808      	ldr	r0, [sp, #32]
 802071e:	b01d      	add	sp, #116	@ 0x74
 8020720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020722:	2300      	movs	r3, #0
 8020724:	603b      	str	r3, [r7, #0]
 8020726:	e7e2      	b.n	80206ee <_dtoa_r+0x66>
 8020728:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802072a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802072c:	9212      	str	r2, [sp, #72]	@ 0x48
 802072e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020730:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020732:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020734:	2200      	movs	r2, #0
 8020736:	2300      	movs	r3, #0
 8020738:	f7df feba 	bl	80004b0 <__aeabi_dcmpeq>
 802073c:	1e06      	subs	r6, r0, #0
 802073e:	d00b      	beq.n	8020758 <_dtoa_r+0xd0>
 8020740:	2301      	movs	r3, #1
 8020742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020744:	6013      	str	r3, [r2, #0]
 8020746:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020748:	2b00      	cmp	r3, #0
 802074a:	d002      	beq.n	8020752 <_dtoa_r+0xca>
 802074c:	4ba5      	ldr	r3, [pc, #660]	@ (80209e4 <_dtoa_r+0x35c>)
 802074e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020750:	6013      	str	r3, [r2, #0]
 8020752:	4ba5      	ldr	r3, [pc, #660]	@ (80209e8 <_dtoa_r+0x360>)
 8020754:	9308      	str	r3, [sp, #32]
 8020756:	e7e1      	b.n	802071c <_dtoa_r+0x94>
 8020758:	ab1a      	add	r3, sp, #104	@ 0x68
 802075a:	9301      	str	r3, [sp, #4]
 802075c:	ab1b      	add	r3, sp, #108	@ 0x6c
 802075e:	9300      	str	r3, [sp, #0]
 8020760:	9803      	ldr	r0, [sp, #12]
 8020762:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020766:	f001 fdf1 	bl	802234c <__d2b>
 802076a:	007a      	lsls	r2, r7, #1
 802076c:	9005      	str	r0, [sp, #20]
 802076e:	0d52      	lsrs	r2, r2, #21
 8020770:	d100      	bne.n	8020774 <_dtoa_r+0xec>
 8020772:	e07b      	b.n	802086c <_dtoa_r+0x1e4>
 8020774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020776:	9618      	str	r6, [sp, #96]	@ 0x60
 8020778:	0319      	lsls	r1, r3, #12
 802077a:	4b9c      	ldr	r3, [pc, #624]	@ (80209ec <_dtoa_r+0x364>)
 802077c:	0b09      	lsrs	r1, r1, #12
 802077e:	430b      	orrs	r3, r1
 8020780:	499b      	ldr	r1, [pc, #620]	@ (80209f0 <_dtoa_r+0x368>)
 8020782:	1857      	adds	r7, r2, r1
 8020784:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020786:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020788:	0019      	movs	r1, r3
 802078a:	2200      	movs	r2, #0
 802078c:	4b99      	ldr	r3, [pc, #612]	@ (80209f4 <_dtoa_r+0x36c>)
 802078e:	f7e2 fa1d 	bl	8002bcc <__aeabi_dsub>
 8020792:	4a99      	ldr	r2, [pc, #612]	@ (80209f8 <_dtoa_r+0x370>)
 8020794:	4b99      	ldr	r3, [pc, #612]	@ (80209fc <_dtoa_r+0x374>)
 8020796:	f7e1 ff51 	bl	800263c <__aeabi_dmul>
 802079a:	4a99      	ldr	r2, [pc, #612]	@ (8020a00 <_dtoa_r+0x378>)
 802079c:	4b99      	ldr	r3, [pc, #612]	@ (8020a04 <_dtoa_r+0x37c>)
 802079e:	f7e0 ffa5 	bl	80016ec <__aeabi_dadd>
 80207a2:	0004      	movs	r4, r0
 80207a4:	0038      	movs	r0, r7
 80207a6:	000d      	movs	r5, r1
 80207a8:	f7e2 fe0a 	bl	80033c0 <__aeabi_i2d>
 80207ac:	4a96      	ldr	r2, [pc, #600]	@ (8020a08 <_dtoa_r+0x380>)
 80207ae:	4b97      	ldr	r3, [pc, #604]	@ (8020a0c <_dtoa_r+0x384>)
 80207b0:	f7e1 ff44 	bl	800263c <__aeabi_dmul>
 80207b4:	0002      	movs	r2, r0
 80207b6:	000b      	movs	r3, r1
 80207b8:	0020      	movs	r0, r4
 80207ba:	0029      	movs	r1, r5
 80207bc:	f7e0 ff96 	bl	80016ec <__aeabi_dadd>
 80207c0:	0004      	movs	r4, r0
 80207c2:	000d      	movs	r5, r1
 80207c4:	f7e2 fdc0 	bl	8003348 <__aeabi_d2iz>
 80207c8:	2200      	movs	r2, #0
 80207ca:	9004      	str	r0, [sp, #16]
 80207cc:	2300      	movs	r3, #0
 80207ce:	0020      	movs	r0, r4
 80207d0:	0029      	movs	r1, r5
 80207d2:	f7df fe73 	bl	80004bc <__aeabi_dcmplt>
 80207d6:	2800      	cmp	r0, #0
 80207d8:	d00b      	beq.n	80207f2 <_dtoa_r+0x16a>
 80207da:	9804      	ldr	r0, [sp, #16]
 80207dc:	f7e2 fdf0 	bl	80033c0 <__aeabi_i2d>
 80207e0:	002b      	movs	r3, r5
 80207e2:	0022      	movs	r2, r4
 80207e4:	f7df fe64 	bl	80004b0 <__aeabi_dcmpeq>
 80207e8:	4243      	negs	r3, r0
 80207ea:	4158      	adcs	r0, r3
 80207ec:	9b04      	ldr	r3, [sp, #16]
 80207ee:	1a1b      	subs	r3, r3, r0
 80207f0:	9304      	str	r3, [sp, #16]
 80207f2:	2301      	movs	r3, #1
 80207f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80207f6:	9b04      	ldr	r3, [sp, #16]
 80207f8:	2b16      	cmp	r3, #22
 80207fa:	d810      	bhi.n	802081e <_dtoa_r+0x196>
 80207fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020800:	9a04      	ldr	r2, [sp, #16]
 8020802:	4b83      	ldr	r3, [pc, #524]	@ (8020a10 <_dtoa_r+0x388>)
 8020804:	00d2      	lsls	r2, r2, #3
 8020806:	189b      	adds	r3, r3, r2
 8020808:	681a      	ldr	r2, [r3, #0]
 802080a:	685b      	ldr	r3, [r3, #4]
 802080c:	f7df fe56 	bl	80004bc <__aeabi_dcmplt>
 8020810:	2800      	cmp	r0, #0
 8020812:	d047      	beq.n	80208a4 <_dtoa_r+0x21c>
 8020814:	9b04      	ldr	r3, [sp, #16]
 8020816:	3b01      	subs	r3, #1
 8020818:	9304      	str	r3, [sp, #16]
 802081a:	2300      	movs	r3, #0
 802081c:	9315      	str	r3, [sp, #84]	@ 0x54
 802081e:	2200      	movs	r2, #0
 8020820:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020822:	9206      	str	r2, [sp, #24]
 8020824:	1bdb      	subs	r3, r3, r7
 8020826:	1e5a      	subs	r2, r3, #1
 8020828:	d53e      	bpl.n	80208a8 <_dtoa_r+0x220>
 802082a:	2201      	movs	r2, #1
 802082c:	1ad3      	subs	r3, r2, r3
 802082e:	9306      	str	r3, [sp, #24]
 8020830:	2300      	movs	r3, #0
 8020832:	930d      	str	r3, [sp, #52]	@ 0x34
 8020834:	9b04      	ldr	r3, [sp, #16]
 8020836:	2b00      	cmp	r3, #0
 8020838:	db38      	blt.n	80208ac <_dtoa_r+0x224>
 802083a:	9a04      	ldr	r2, [sp, #16]
 802083c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802083e:	4694      	mov	ip, r2
 8020840:	4463      	add	r3, ip
 8020842:	930d      	str	r3, [sp, #52]	@ 0x34
 8020844:	2300      	movs	r3, #0
 8020846:	9214      	str	r2, [sp, #80]	@ 0x50
 8020848:	930f      	str	r3, [sp, #60]	@ 0x3c
 802084a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802084c:	2401      	movs	r4, #1
 802084e:	2b09      	cmp	r3, #9
 8020850:	d867      	bhi.n	8020922 <_dtoa_r+0x29a>
 8020852:	2b05      	cmp	r3, #5
 8020854:	dd02      	ble.n	802085c <_dtoa_r+0x1d4>
 8020856:	2400      	movs	r4, #0
 8020858:	3b04      	subs	r3, #4
 802085a:	9322      	str	r3, [sp, #136]	@ 0x88
 802085c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802085e:	1e98      	subs	r0, r3, #2
 8020860:	2803      	cmp	r0, #3
 8020862:	d867      	bhi.n	8020934 <_dtoa_r+0x2ac>
 8020864:	f7df fc8a 	bl	800017c <__gnu_thumb1_case_uqi>
 8020868:	5b383a2b 	.word	0x5b383a2b
 802086c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802086e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020870:	18f6      	adds	r6, r6, r3
 8020872:	4b68      	ldr	r3, [pc, #416]	@ (8020a14 <_dtoa_r+0x38c>)
 8020874:	18f2      	adds	r2, r6, r3
 8020876:	2a20      	cmp	r2, #32
 8020878:	dd0f      	ble.n	802089a <_dtoa_r+0x212>
 802087a:	2340      	movs	r3, #64	@ 0x40
 802087c:	1a9b      	subs	r3, r3, r2
 802087e:	409f      	lsls	r7, r3
 8020880:	4b65      	ldr	r3, [pc, #404]	@ (8020a18 <_dtoa_r+0x390>)
 8020882:	0038      	movs	r0, r7
 8020884:	18f3      	adds	r3, r6, r3
 8020886:	40dc      	lsrs	r4, r3
 8020888:	4320      	orrs	r0, r4
 802088a:	f7e2 fdc7 	bl	800341c <__aeabi_ui2d>
 802088e:	2201      	movs	r2, #1
 8020890:	4b62      	ldr	r3, [pc, #392]	@ (8020a1c <_dtoa_r+0x394>)
 8020892:	1e77      	subs	r7, r6, #1
 8020894:	18cb      	adds	r3, r1, r3
 8020896:	9218      	str	r2, [sp, #96]	@ 0x60
 8020898:	e776      	b.n	8020788 <_dtoa_r+0x100>
 802089a:	2320      	movs	r3, #32
 802089c:	0020      	movs	r0, r4
 802089e:	1a9b      	subs	r3, r3, r2
 80208a0:	4098      	lsls	r0, r3
 80208a2:	e7f2      	b.n	802088a <_dtoa_r+0x202>
 80208a4:	9015      	str	r0, [sp, #84]	@ 0x54
 80208a6:	e7ba      	b.n	802081e <_dtoa_r+0x196>
 80208a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80208aa:	e7c3      	b.n	8020834 <_dtoa_r+0x1ac>
 80208ac:	9b06      	ldr	r3, [sp, #24]
 80208ae:	9a04      	ldr	r2, [sp, #16]
 80208b0:	1a9b      	subs	r3, r3, r2
 80208b2:	9306      	str	r3, [sp, #24]
 80208b4:	4253      	negs	r3, r2
 80208b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80208b8:	2300      	movs	r3, #0
 80208ba:	9314      	str	r3, [sp, #80]	@ 0x50
 80208bc:	e7c5      	b.n	802084a <_dtoa_r+0x1c2>
 80208be:	2300      	movs	r3, #0
 80208c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80208c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80208c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80208c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	dc13      	bgt.n	80208f4 <_dtoa_r+0x26c>
 80208cc:	2301      	movs	r3, #1
 80208ce:	001a      	movs	r2, r3
 80208d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80208d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80208d4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80208d6:	e00d      	b.n	80208f4 <_dtoa_r+0x26c>
 80208d8:	2301      	movs	r3, #1
 80208da:	e7f1      	b.n	80208c0 <_dtoa_r+0x238>
 80208dc:	2300      	movs	r3, #0
 80208de:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80208e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80208e2:	4694      	mov	ip, r2
 80208e4:	9b04      	ldr	r3, [sp, #16]
 80208e6:	4463      	add	r3, ip
 80208e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80208ea:	3301      	adds	r3, #1
 80208ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	dc00      	bgt.n	80208f4 <_dtoa_r+0x26c>
 80208f2:	2301      	movs	r3, #1
 80208f4:	9a03      	ldr	r2, [sp, #12]
 80208f6:	2100      	movs	r1, #0
 80208f8:	69d0      	ldr	r0, [r2, #28]
 80208fa:	2204      	movs	r2, #4
 80208fc:	0015      	movs	r5, r2
 80208fe:	3514      	adds	r5, #20
 8020900:	429d      	cmp	r5, r3
 8020902:	d91b      	bls.n	802093c <_dtoa_r+0x2b4>
 8020904:	6041      	str	r1, [r0, #4]
 8020906:	9803      	ldr	r0, [sp, #12]
 8020908:	f001 f924 	bl	8021b54 <_Balloc>
 802090c:	9008      	str	r0, [sp, #32]
 802090e:	2800      	cmp	r0, #0
 8020910:	d117      	bne.n	8020942 <_dtoa_r+0x2ba>
 8020912:	21b0      	movs	r1, #176	@ 0xb0
 8020914:	4b42      	ldr	r3, [pc, #264]	@ (8020a20 <_dtoa_r+0x398>)
 8020916:	482e      	ldr	r0, [pc, #184]	@ (80209d0 <_dtoa_r+0x348>)
 8020918:	9a08      	ldr	r2, [sp, #32]
 802091a:	31ff      	adds	r1, #255	@ 0xff
 802091c:	e6c9      	b.n	80206b2 <_dtoa_r+0x2a>
 802091e:	2301      	movs	r3, #1
 8020920:	e7dd      	b.n	80208de <_dtoa_r+0x256>
 8020922:	2300      	movs	r3, #0
 8020924:	9410      	str	r4, [sp, #64]	@ 0x40
 8020926:	9322      	str	r3, [sp, #136]	@ 0x88
 8020928:	3b01      	subs	r3, #1
 802092a:	930e      	str	r3, [sp, #56]	@ 0x38
 802092c:	9309      	str	r3, [sp, #36]	@ 0x24
 802092e:	2200      	movs	r2, #0
 8020930:	3313      	adds	r3, #19
 8020932:	e7cf      	b.n	80208d4 <_dtoa_r+0x24c>
 8020934:	2301      	movs	r3, #1
 8020936:	9310      	str	r3, [sp, #64]	@ 0x40
 8020938:	3b02      	subs	r3, #2
 802093a:	e7f6      	b.n	802092a <_dtoa_r+0x2a2>
 802093c:	3101      	adds	r1, #1
 802093e:	0052      	lsls	r2, r2, #1
 8020940:	e7dc      	b.n	80208fc <_dtoa_r+0x274>
 8020942:	9b03      	ldr	r3, [sp, #12]
 8020944:	9a08      	ldr	r2, [sp, #32]
 8020946:	69db      	ldr	r3, [r3, #28]
 8020948:	601a      	str	r2, [r3, #0]
 802094a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802094c:	2b0e      	cmp	r3, #14
 802094e:	d900      	bls.n	8020952 <_dtoa_r+0x2ca>
 8020950:	e0d9      	b.n	8020b06 <_dtoa_r+0x47e>
 8020952:	2c00      	cmp	r4, #0
 8020954:	d100      	bne.n	8020958 <_dtoa_r+0x2d0>
 8020956:	e0d6      	b.n	8020b06 <_dtoa_r+0x47e>
 8020958:	9b04      	ldr	r3, [sp, #16]
 802095a:	2b00      	cmp	r3, #0
 802095c:	dd64      	ble.n	8020a28 <_dtoa_r+0x3a0>
 802095e:	210f      	movs	r1, #15
 8020960:	9a04      	ldr	r2, [sp, #16]
 8020962:	4b2b      	ldr	r3, [pc, #172]	@ (8020a10 <_dtoa_r+0x388>)
 8020964:	400a      	ands	r2, r1
 8020966:	00d2      	lsls	r2, r2, #3
 8020968:	189b      	adds	r3, r3, r2
 802096a:	681e      	ldr	r6, [r3, #0]
 802096c:	685f      	ldr	r7, [r3, #4]
 802096e:	9b04      	ldr	r3, [sp, #16]
 8020970:	2402      	movs	r4, #2
 8020972:	111d      	asrs	r5, r3, #4
 8020974:	05db      	lsls	r3, r3, #23
 8020976:	d50a      	bpl.n	802098e <_dtoa_r+0x306>
 8020978:	4b2a      	ldr	r3, [pc, #168]	@ (8020a24 <_dtoa_r+0x39c>)
 802097a:	400d      	ands	r5, r1
 802097c:	6a1a      	ldr	r2, [r3, #32]
 802097e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020980:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020982:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020984:	f7e1 fa16 	bl	8001db4 <__aeabi_ddiv>
 8020988:	900a      	str	r0, [sp, #40]	@ 0x28
 802098a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802098c:	3401      	adds	r4, #1
 802098e:	4b25      	ldr	r3, [pc, #148]	@ (8020a24 <_dtoa_r+0x39c>)
 8020990:	930c      	str	r3, [sp, #48]	@ 0x30
 8020992:	2d00      	cmp	r5, #0
 8020994:	d108      	bne.n	80209a8 <_dtoa_r+0x320>
 8020996:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802099a:	0032      	movs	r2, r6
 802099c:	003b      	movs	r3, r7
 802099e:	f7e1 fa09 	bl	8001db4 <__aeabi_ddiv>
 80209a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80209a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80209a6:	e05a      	b.n	8020a5e <_dtoa_r+0x3d6>
 80209a8:	2301      	movs	r3, #1
 80209aa:	421d      	tst	r5, r3
 80209ac:	d009      	beq.n	80209c2 <_dtoa_r+0x33a>
 80209ae:	18e4      	adds	r4, r4, r3
 80209b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209b2:	0030      	movs	r0, r6
 80209b4:	681a      	ldr	r2, [r3, #0]
 80209b6:	685b      	ldr	r3, [r3, #4]
 80209b8:	0039      	movs	r1, r7
 80209ba:	f7e1 fe3f 	bl	800263c <__aeabi_dmul>
 80209be:	0006      	movs	r6, r0
 80209c0:	000f      	movs	r7, r1
 80209c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209c4:	106d      	asrs	r5, r5, #1
 80209c6:	3308      	adds	r3, #8
 80209c8:	e7e2      	b.n	8020990 <_dtoa_r+0x308>
 80209ca:	46c0      	nop			@ (mov r8, r8)
 80209cc:	08025f22 	.word	0x08025f22
 80209d0:	08025f39 	.word	0x08025f39
 80209d4:	7ff00000 	.word	0x7ff00000
 80209d8:	0000270f 	.word	0x0000270f
 80209dc:	08025f1e 	.word	0x08025f1e
 80209e0:	08025f21 	.word	0x08025f21
 80209e4:	08025eea 	.word	0x08025eea
 80209e8:	08025ee9 	.word	0x08025ee9
 80209ec:	3ff00000 	.word	0x3ff00000
 80209f0:	fffffc01 	.word	0xfffffc01
 80209f4:	3ff80000 	.word	0x3ff80000
 80209f8:	636f4361 	.word	0x636f4361
 80209fc:	3fd287a7 	.word	0x3fd287a7
 8020a00:	8b60c8b3 	.word	0x8b60c8b3
 8020a04:	3fc68a28 	.word	0x3fc68a28
 8020a08:	509f79fb 	.word	0x509f79fb
 8020a0c:	3fd34413 	.word	0x3fd34413
 8020a10:	08026090 	.word	0x08026090
 8020a14:	00000432 	.word	0x00000432
 8020a18:	00000412 	.word	0x00000412
 8020a1c:	fe100000 	.word	0xfe100000
 8020a20:	08025f91 	.word	0x08025f91
 8020a24:	08026068 	.word	0x08026068
 8020a28:	9b04      	ldr	r3, [sp, #16]
 8020a2a:	2402      	movs	r4, #2
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d016      	beq.n	8020a5e <_dtoa_r+0x3d6>
 8020a30:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a34:	220f      	movs	r2, #15
 8020a36:	425d      	negs	r5, r3
 8020a38:	402a      	ands	r2, r5
 8020a3a:	4bd7      	ldr	r3, [pc, #860]	@ (8020d98 <_dtoa_r+0x710>)
 8020a3c:	00d2      	lsls	r2, r2, #3
 8020a3e:	189b      	adds	r3, r3, r2
 8020a40:	681a      	ldr	r2, [r3, #0]
 8020a42:	685b      	ldr	r3, [r3, #4]
 8020a44:	f7e1 fdfa 	bl	800263c <__aeabi_dmul>
 8020a48:	2701      	movs	r7, #1
 8020a4a:	2300      	movs	r3, #0
 8020a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a50:	4ed2      	ldr	r6, [pc, #840]	@ (8020d9c <_dtoa_r+0x714>)
 8020a52:	112d      	asrs	r5, r5, #4
 8020a54:	2d00      	cmp	r5, #0
 8020a56:	d000      	beq.n	8020a5a <_dtoa_r+0x3d2>
 8020a58:	e0ba      	b.n	8020bd0 <_dtoa_r+0x548>
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	d1a1      	bne.n	80209a2 <_dtoa_r+0x31a>
 8020a5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020a60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020a62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d100      	bne.n	8020a6a <_dtoa_r+0x3e2>
 8020a68:	e0bd      	b.n	8020be6 <_dtoa_r+0x55e>
 8020a6a:	2200      	movs	r2, #0
 8020a6c:	0030      	movs	r0, r6
 8020a6e:	0039      	movs	r1, r7
 8020a70:	4bcb      	ldr	r3, [pc, #812]	@ (8020da0 <_dtoa_r+0x718>)
 8020a72:	f7df fd23 	bl	80004bc <__aeabi_dcmplt>
 8020a76:	2800      	cmp	r0, #0
 8020a78:	d100      	bne.n	8020a7c <_dtoa_r+0x3f4>
 8020a7a:	e0b4      	b.n	8020be6 <_dtoa_r+0x55e>
 8020a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a7e:	2b00      	cmp	r3, #0
 8020a80:	d100      	bne.n	8020a84 <_dtoa_r+0x3fc>
 8020a82:	e0b0      	b.n	8020be6 <_dtoa_r+0x55e>
 8020a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	dd39      	ble.n	8020afe <_dtoa_r+0x476>
 8020a8a:	9b04      	ldr	r3, [sp, #16]
 8020a8c:	2200      	movs	r2, #0
 8020a8e:	3b01      	subs	r3, #1
 8020a90:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a92:	0030      	movs	r0, r6
 8020a94:	4bc3      	ldr	r3, [pc, #780]	@ (8020da4 <_dtoa_r+0x71c>)
 8020a96:	0039      	movs	r1, r7
 8020a98:	f7e1 fdd0 	bl	800263c <__aeabi_dmul>
 8020a9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a9e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020aa2:	3401      	adds	r4, #1
 8020aa4:	0020      	movs	r0, r4
 8020aa6:	9311      	str	r3, [sp, #68]	@ 0x44
 8020aa8:	f7e2 fc8a 	bl	80033c0 <__aeabi_i2d>
 8020aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ab0:	f7e1 fdc4 	bl	800263c <__aeabi_dmul>
 8020ab4:	4bbc      	ldr	r3, [pc, #752]	@ (8020da8 <_dtoa_r+0x720>)
 8020ab6:	2200      	movs	r2, #0
 8020ab8:	f7e0 fe18 	bl	80016ec <__aeabi_dadd>
 8020abc:	4bbb      	ldr	r3, [pc, #748]	@ (8020dac <_dtoa_r+0x724>)
 8020abe:	0006      	movs	r6, r0
 8020ac0:	18cf      	adds	r7, r1, r3
 8020ac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d000      	beq.n	8020aca <_dtoa_r+0x442>
 8020ac8:	e091      	b.n	8020bee <_dtoa_r+0x566>
 8020aca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020acc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ace:	2200      	movs	r2, #0
 8020ad0:	4bb7      	ldr	r3, [pc, #732]	@ (8020db0 <_dtoa_r+0x728>)
 8020ad2:	f7e2 f87b 	bl	8002bcc <__aeabi_dsub>
 8020ad6:	0032      	movs	r2, r6
 8020ad8:	003b      	movs	r3, r7
 8020ada:	0004      	movs	r4, r0
 8020adc:	000d      	movs	r5, r1
 8020ade:	f7df fd01 	bl	80004e4 <__aeabi_dcmpgt>
 8020ae2:	2800      	cmp	r0, #0
 8020ae4:	d000      	beq.n	8020ae8 <_dtoa_r+0x460>
 8020ae6:	e29d      	b.n	8021024 <_dtoa_r+0x99c>
 8020ae8:	2180      	movs	r1, #128	@ 0x80
 8020aea:	0609      	lsls	r1, r1, #24
 8020aec:	187b      	adds	r3, r7, r1
 8020aee:	0032      	movs	r2, r6
 8020af0:	0020      	movs	r0, r4
 8020af2:	0029      	movs	r1, r5
 8020af4:	f7df fce2 	bl	80004bc <__aeabi_dcmplt>
 8020af8:	2800      	cmp	r0, #0
 8020afa:	d000      	beq.n	8020afe <_dtoa_r+0x476>
 8020afc:	e130      	b.n	8020d60 <_dtoa_r+0x6d8>
 8020afe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020b00:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b04:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020b06:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	da00      	bge.n	8020b0e <_dtoa_r+0x486>
 8020b0c:	e177      	b.n	8020dfe <_dtoa_r+0x776>
 8020b0e:	9a04      	ldr	r2, [sp, #16]
 8020b10:	2a0e      	cmp	r2, #14
 8020b12:	dd00      	ble.n	8020b16 <_dtoa_r+0x48e>
 8020b14:	e173      	b.n	8020dfe <_dtoa_r+0x776>
 8020b16:	4ba0      	ldr	r3, [pc, #640]	@ (8020d98 <_dtoa_r+0x710>)
 8020b18:	00d2      	lsls	r2, r2, #3
 8020b1a:	189b      	adds	r3, r3, r2
 8020b1c:	685c      	ldr	r4, [r3, #4]
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	9306      	str	r3, [sp, #24]
 8020b22:	9407      	str	r4, [sp, #28]
 8020b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	da03      	bge.n	8020b32 <_dtoa_r+0x4aa>
 8020b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	dc00      	bgt.n	8020b32 <_dtoa_r+0x4aa>
 8020b30:	e106      	b.n	8020d40 <_dtoa_r+0x6b8>
 8020b32:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020b34:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b38:	9d08      	ldr	r5, [sp, #32]
 8020b3a:	3b01      	subs	r3, #1
 8020b3c:	195b      	adds	r3, r3, r5
 8020b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b40:	9a06      	ldr	r2, [sp, #24]
 8020b42:	9b07      	ldr	r3, [sp, #28]
 8020b44:	0030      	movs	r0, r6
 8020b46:	0039      	movs	r1, r7
 8020b48:	f7e1 f934 	bl	8001db4 <__aeabi_ddiv>
 8020b4c:	f7e2 fbfc 	bl	8003348 <__aeabi_d2iz>
 8020b50:	9009      	str	r0, [sp, #36]	@ 0x24
 8020b52:	f7e2 fc35 	bl	80033c0 <__aeabi_i2d>
 8020b56:	9a06      	ldr	r2, [sp, #24]
 8020b58:	9b07      	ldr	r3, [sp, #28]
 8020b5a:	f7e1 fd6f 	bl	800263c <__aeabi_dmul>
 8020b5e:	0002      	movs	r2, r0
 8020b60:	000b      	movs	r3, r1
 8020b62:	0030      	movs	r0, r6
 8020b64:	0039      	movs	r1, r7
 8020b66:	f7e2 f831 	bl	8002bcc <__aeabi_dsub>
 8020b6a:	002b      	movs	r3, r5
 8020b6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020b6e:	3501      	adds	r5, #1
 8020b70:	3230      	adds	r2, #48	@ 0x30
 8020b72:	701a      	strb	r2, [r3, #0]
 8020b74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b76:	002c      	movs	r4, r5
 8020b78:	429a      	cmp	r2, r3
 8020b7a:	d000      	beq.n	8020b7e <_dtoa_r+0x4f6>
 8020b7c:	e131      	b.n	8020de2 <_dtoa_r+0x75a>
 8020b7e:	0002      	movs	r2, r0
 8020b80:	000b      	movs	r3, r1
 8020b82:	f7e0 fdb3 	bl	80016ec <__aeabi_dadd>
 8020b86:	9a06      	ldr	r2, [sp, #24]
 8020b88:	9b07      	ldr	r3, [sp, #28]
 8020b8a:	0006      	movs	r6, r0
 8020b8c:	000f      	movs	r7, r1
 8020b8e:	f7df fca9 	bl	80004e4 <__aeabi_dcmpgt>
 8020b92:	2800      	cmp	r0, #0
 8020b94:	d000      	beq.n	8020b98 <_dtoa_r+0x510>
 8020b96:	e10f      	b.n	8020db8 <_dtoa_r+0x730>
 8020b98:	9a06      	ldr	r2, [sp, #24]
 8020b9a:	9b07      	ldr	r3, [sp, #28]
 8020b9c:	0030      	movs	r0, r6
 8020b9e:	0039      	movs	r1, r7
 8020ba0:	f7df fc86 	bl	80004b0 <__aeabi_dcmpeq>
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	d003      	beq.n	8020bb0 <_dtoa_r+0x528>
 8020ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020baa:	07dd      	lsls	r5, r3, #31
 8020bac:	d500      	bpl.n	8020bb0 <_dtoa_r+0x528>
 8020bae:	e103      	b.n	8020db8 <_dtoa_r+0x730>
 8020bb0:	9905      	ldr	r1, [sp, #20]
 8020bb2:	9803      	ldr	r0, [sp, #12]
 8020bb4:	f001 f812 	bl	8021bdc <_Bfree>
 8020bb8:	2300      	movs	r3, #0
 8020bba:	7023      	strb	r3, [r4, #0]
 8020bbc:	9b04      	ldr	r3, [sp, #16]
 8020bbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020bc0:	3301      	adds	r3, #1
 8020bc2:	6013      	str	r3, [r2, #0]
 8020bc4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d100      	bne.n	8020bcc <_dtoa_r+0x544>
 8020bca:	e5a7      	b.n	802071c <_dtoa_r+0x94>
 8020bcc:	601c      	str	r4, [r3, #0]
 8020bce:	e5a5      	b.n	802071c <_dtoa_r+0x94>
 8020bd0:	423d      	tst	r5, r7
 8020bd2:	d005      	beq.n	8020be0 <_dtoa_r+0x558>
 8020bd4:	6832      	ldr	r2, [r6, #0]
 8020bd6:	6873      	ldr	r3, [r6, #4]
 8020bd8:	f7e1 fd30 	bl	800263c <__aeabi_dmul>
 8020bdc:	003b      	movs	r3, r7
 8020bde:	3401      	adds	r4, #1
 8020be0:	106d      	asrs	r5, r5, #1
 8020be2:	3608      	adds	r6, #8
 8020be4:	e736      	b.n	8020a54 <_dtoa_r+0x3cc>
 8020be6:	9b04      	ldr	r3, [sp, #16]
 8020be8:	930c      	str	r3, [sp, #48]	@ 0x30
 8020bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bec:	e75a      	b.n	8020aa4 <_dtoa_r+0x41c>
 8020bee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020bf0:	4b69      	ldr	r3, [pc, #420]	@ (8020d98 <_dtoa_r+0x710>)
 8020bf2:	3a01      	subs	r2, #1
 8020bf4:	00d2      	lsls	r2, r2, #3
 8020bf6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020bf8:	189b      	adds	r3, r3, r2
 8020bfa:	681a      	ldr	r2, [r3, #0]
 8020bfc:	685b      	ldr	r3, [r3, #4]
 8020bfe:	2900      	cmp	r1, #0
 8020c00:	d04c      	beq.n	8020c9c <_dtoa_r+0x614>
 8020c02:	2000      	movs	r0, #0
 8020c04:	496b      	ldr	r1, [pc, #428]	@ (8020db4 <_dtoa_r+0x72c>)
 8020c06:	f7e1 f8d5 	bl	8001db4 <__aeabi_ddiv>
 8020c0a:	0032      	movs	r2, r6
 8020c0c:	003b      	movs	r3, r7
 8020c0e:	f7e1 ffdd 	bl	8002bcc <__aeabi_dsub>
 8020c12:	9a08      	ldr	r2, [sp, #32]
 8020c14:	0006      	movs	r6, r0
 8020c16:	4694      	mov	ip, r2
 8020c18:	000f      	movs	r7, r1
 8020c1a:	9b08      	ldr	r3, [sp, #32]
 8020c1c:	9316      	str	r3, [sp, #88]	@ 0x58
 8020c1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c20:	4463      	add	r3, ip
 8020c22:	9311      	str	r3, [sp, #68]	@ 0x44
 8020c24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c28:	f7e2 fb8e 	bl	8003348 <__aeabi_d2iz>
 8020c2c:	0005      	movs	r5, r0
 8020c2e:	f7e2 fbc7 	bl	80033c0 <__aeabi_i2d>
 8020c32:	0002      	movs	r2, r0
 8020c34:	000b      	movs	r3, r1
 8020c36:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c3a:	f7e1 ffc7 	bl	8002bcc <__aeabi_dsub>
 8020c3e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020c40:	3530      	adds	r5, #48	@ 0x30
 8020c42:	1c5c      	adds	r4, r3, #1
 8020c44:	701d      	strb	r5, [r3, #0]
 8020c46:	0032      	movs	r2, r6
 8020c48:	003b      	movs	r3, r7
 8020c4a:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c4e:	f7df fc35 	bl	80004bc <__aeabi_dcmplt>
 8020c52:	2800      	cmp	r0, #0
 8020c54:	d16a      	bne.n	8020d2c <_dtoa_r+0x6a4>
 8020c56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020c58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020c5a:	2000      	movs	r0, #0
 8020c5c:	4950      	ldr	r1, [pc, #320]	@ (8020da0 <_dtoa_r+0x718>)
 8020c5e:	f7e1 ffb5 	bl	8002bcc <__aeabi_dsub>
 8020c62:	0032      	movs	r2, r6
 8020c64:	003b      	movs	r3, r7
 8020c66:	f7df fc29 	bl	80004bc <__aeabi_dcmplt>
 8020c6a:	2800      	cmp	r0, #0
 8020c6c:	d000      	beq.n	8020c70 <_dtoa_r+0x5e8>
 8020c6e:	e0a5      	b.n	8020dbc <_dtoa_r+0x734>
 8020c70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c72:	42a3      	cmp	r3, r4
 8020c74:	d100      	bne.n	8020c78 <_dtoa_r+0x5f0>
 8020c76:	e742      	b.n	8020afe <_dtoa_r+0x476>
 8020c78:	2200      	movs	r2, #0
 8020c7a:	0030      	movs	r0, r6
 8020c7c:	0039      	movs	r1, r7
 8020c7e:	4b49      	ldr	r3, [pc, #292]	@ (8020da4 <_dtoa_r+0x71c>)
 8020c80:	f7e1 fcdc 	bl	800263c <__aeabi_dmul>
 8020c84:	2200      	movs	r2, #0
 8020c86:	0006      	movs	r6, r0
 8020c88:	000f      	movs	r7, r1
 8020c8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c8e:	4b45      	ldr	r3, [pc, #276]	@ (8020da4 <_dtoa_r+0x71c>)
 8020c90:	f7e1 fcd4 	bl	800263c <__aeabi_dmul>
 8020c94:	9416      	str	r4, [sp, #88]	@ 0x58
 8020c96:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c9a:	e7c3      	b.n	8020c24 <_dtoa_r+0x59c>
 8020c9c:	0030      	movs	r0, r6
 8020c9e:	0039      	movs	r1, r7
 8020ca0:	f7e1 fccc 	bl	800263c <__aeabi_dmul>
 8020ca4:	9d08      	ldr	r5, [sp, #32]
 8020ca6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020ca8:	002b      	movs	r3, r5
 8020caa:	4694      	mov	ip, r2
 8020cac:	9016      	str	r0, [sp, #88]	@ 0x58
 8020cae:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020cb0:	4463      	add	r3, ip
 8020cb2:	9319      	str	r3, [sp, #100]	@ 0x64
 8020cb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020cb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020cb8:	f7e2 fb46 	bl	8003348 <__aeabi_d2iz>
 8020cbc:	0004      	movs	r4, r0
 8020cbe:	f7e2 fb7f 	bl	80033c0 <__aeabi_i2d>
 8020cc2:	000b      	movs	r3, r1
 8020cc4:	0002      	movs	r2, r0
 8020cc6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020cc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020cca:	f7e1 ff7f 	bl	8002bcc <__aeabi_dsub>
 8020cce:	3430      	adds	r4, #48	@ 0x30
 8020cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020cd2:	702c      	strb	r4, [r5, #0]
 8020cd4:	3501      	adds	r5, #1
 8020cd6:	0006      	movs	r6, r0
 8020cd8:	000f      	movs	r7, r1
 8020cda:	42ab      	cmp	r3, r5
 8020cdc:	d129      	bne.n	8020d32 <_dtoa_r+0x6aa>
 8020cde:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020ce0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020ce2:	9b08      	ldr	r3, [sp, #32]
 8020ce4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020ce6:	469c      	mov	ip, r3
 8020ce8:	2200      	movs	r2, #0
 8020cea:	4b32      	ldr	r3, [pc, #200]	@ (8020db4 <_dtoa_r+0x72c>)
 8020cec:	4464      	add	r4, ip
 8020cee:	f7e0 fcfd 	bl	80016ec <__aeabi_dadd>
 8020cf2:	0002      	movs	r2, r0
 8020cf4:	000b      	movs	r3, r1
 8020cf6:	0030      	movs	r0, r6
 8020cf8:	0039      	movs	r1, r7
 8020cfa:	f7df fbf3 	bl	80004e4 <__aeabi_dcmpgt>
 8020cfe:	2800      	cmp	r0, #0
 8020d00:	d15c      	bne.n	8020dbc <_dtoa_r+0x734>
 8020d02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020d04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020d06:	2000      	movs	r0, #0
 8020d08:	492a      	ldr	r1, [pc, #168]	@ (8020db4 <_dtoa_r+0x72c>)
 8020d0a:	f7e1 ff5f 	bl	8002bcc <__aeabi_dsub>
 8020d0e:	0002      	movs	r2, r0
 8020d10:	000b      	movs	r3, r1
 8020d12:	0030      	movs	r0, r6
 8020d14:	0039      	movs	r1, r7
 8020d16:	f7df fbd1 	bl	80004bc <__aeabi_dcmplt>
 8020d1a:	2800      	cmp	r0, #0
 8020d1c:	d100      	bne.n	8020d20 <_dtoa_r+0x698>
 8020d1e:	e6ee      	b.n	8020afe <_dtoa_r+0x476>
 8020d20:	0023      	movs	r3, r4
 8020d22:	3c01      	subs	r4, #1
 8020d24:	7822      	ldrb	r2, [r4, #0]
 8020d26:	2a30      	cmp	r2, #48	@ 0x30
 8020d28:	d0fa      	beq.n	8020d20 <_dtoa_r+0x698>
 8020d2a:	001c      	movs	r4, r3
 8020d2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d2e:	9304      	str	r3, [sp, #16]
 8020d30:	e73e      	b.n	8020bb0 <_dtoa_r+0x528>
 8020d32:	2200      	movs	r2, #0
 8020d34:	4b1b      	ldr	r3, [pc, #108]	@ (8020da4 <_dtoa_r+0x71c>)
 8020d36:	f7e1 fc81 	bl	800263c <__aeabi_dmul>
 8020d3a:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020d3e:	e7b9      	b.n	8020cb4 <_dtoa_r+0x62c>
 8020d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d10c      	bne.n	8020d60 <_dtoa_r+0x6d8>
 8020d46:	9806      	ldr	r0, [sp, #24]
 8020d48:	9907      	ldr	r1, [sp, #28]
 8020d4a:	2200      	movs	r2, #0
 8020d4c:	4b18      	ldr	r3, [pc, #96]	@ (8020db0 <_dtoa_r+0x728>)
 8020d4e:	f7e1 fc75 	bl	800263c <__aeabi_dmul>
 8020d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d56:	f7df fbcf 	bl	80004f8 <__aeabi_dcmpge>
 8020d5a:	2800      	cmp	r0, #0
 8020d5c:	d100      	bne.n	8020d60 <_dtoa_r+0x6d8>
 8020d5e:	e164      	b.n	802102a <_dtoa_r+0x9a2>
 8020d60:	2600      	movs	r6, #0
 8020d62:	0037      	movs	r7, r6
 8020d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d66:	9c08      	ldr	r4, [sp, #32]
 8020d68:	43db      	mvns	r3, r3
 8020d6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	9304      	str	r3, [sp, #16]
 8020d70:	0031      	movs	r1, r6
 8020d72:	9803      	ldr	r0, [sp, #12]
 8020d74:	f000 ff32 	bl	8021bdc <_Bfree>
 8020d78:	2f00      	cmp	r7, #0
 8020d7a:	d0d7      	beq.n	8020d2c <_dtoa_r+0x6a4>
 8020d7c:	9b04      	ldr	r3, [sp, #16]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d005      	beq.n	8020d8e <_dtoa_r+0x706>
 8020d82:	42bb      	cmp	r3, r7
 8020d84:	d003      	beq.n	8020d8e <_dtoa_r+0x706>
 8020d86:	0019      	movs	r1, r3
 8020d88:	9803      	ldr	r0, [sp, #12]
 8020d8a:	f000 ff27 	bl	8021bdc <_Bfree>
 8020d8e:	0039      	movs	r1, r7
 8020d90:	9803      	ldr	r0, [sp, #12]
 8020d92:	f000 ff23 	bl	8021bdc <_Bfree>
 8020d96:	e7c9      	b.n	8020d2c <_dtoa_r+0x6a4>
 8020d98:	08026090 	.word	0x08026090
 8020d9c:	08026068 	.word	0x08026068
 8020da0:	3ff00000 	.word	0x3ff00000
 8020da4:	40240000 	.word	0x40240000
 8020da8:	401c0000 	.word	0x401c0000
 8020dac:	fcc00000 	.word	0xfcc00000
 8020db0:	40140000 	.word	0x40140000
 8020db4:	3fe00000 	.word	0x3fe00000
 8020db8:	9b04      	ldr	r3, [sp, #16]
 8020dba:	930c      	str	r3, [sp, #48]	@ 0x30
 8020dbc:	0023      	movs	r3, r4
 8020dbe:	001c      	movs	r4, r3
 8020dc0:	3b01      	subs	r3, #1
 8020dc2:	781a      	ldrb	r2, [r3, #0]
 8020dc4:	2a39      	cmp	r2, #57	@ 0x39
 8020dc6:	d108      	bne.n	8020dda <_dtoa_r+0x752>
 8020dc8:	9a08      	ldr	r2, [sp, #32]
 8020dca:	429a      	cmp	r2, r3
 8020dcc:	d1f7      	bne.n	8020dbe <_dtoa_r+0x736>
 8020dce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020dd0:	9908      	ldr	r1, [sp, #32]
 8020dd2:	3201      	adds	r2, #1
 8020dd4:	920c      	str	r2, [sp, #48]	@ 0x30
 8020dd6:	2230      	movs	r2, #48	@ 0x30
 8020dd8:	700a      	strb	r2, [r1, #0]
 8020dda:	781a      	ldrb	r2, [r3, #0]
 8020ddc:	3201      	adds	r2, #1
 8020dde:	701a      	strb	r2, [r3, #0]
 8020de0:	e7a4      	b.n	8020d2c <_dtoa_r+0x6a4>
 8020de2:	2200      	movs	r2, #0
 8020de4:	4bc6      	ldr	r3, [pc, #792]	@ (8021100 <_dtoa_r+0xa78>)
 8020de6:	f7e1 fc29 	bl	800263c <__aeabi_dmul>
 8020dea:	2200      	movs	r2, #0
 8020dec:	2300      	movs	r3, #0
 8020dee:	0006      	movs	r6, r0
 8020df0:	000f      	movs	r7, r1
 8020df2:	f7df fb5d 	bl	80004b0 <__aeabi_dcmpeq>
 8020df6:	2800      	cmp	r0, #0
 8020df8:	d100      	bne.n	8020dfc <_dtoa_r+0x774>
 8020dfa:	e6a1      	b.n	8020b40 <_dtoa_r+0x4b8>
 8020dfc:	e6d8      	b.n	8020bb0 <_dtoa_r+0x528>
 8020dfe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020e00:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020e02:	9c06      	ldr	r4, [sp, #24]
 8020e04:	2f00      	cmp	r7, #0
 8020e06:	d014      	beq.n	8020e32 <_dtoa_r+0x7aa>
 8020e08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020e0a:	2a01      	cmp	r2, #1
 8020e0c:	dd00      	ble.n	8020e10 <_dtoa_r+0x788>
 8020e0e:	e0c8      	b.n	8020fa2 <_dtoa_r+0x91a>
 8020e10:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020e12:	2a00      	cmp	r2, #0
 8020e14:	d100      	bne.n	8020e18 <_dtoa_r+0x790>
 8020e16:	e0be      	b.n	8020f96 <_dtoa_r+0x90e>
 8020e18:	4aba      	ldr	r2, [pc, #744]	@ (8021104 <_dtoa_r+0xa7c>)
 8020e1a:	189b      	adds	r3, r3, r2
 8020e1c:	9a06      	ldr	r2, [sp, #24]
 8020e1e:	2101      	movs	r1, #1
 8020e20:	18d2      	adds	r2, r2, r3
 8020e22:	9206      	str	r2, [sp, #24]
 8020e24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020e26:	9803      	ldr	r0, [sp, #12]
 8020e28:	18d3      	adds	r3, r2, r3
 8020e2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e2c:	f000 ffda 	bl	8021de4 <__i2b>
 8020e30:	0007      	movs	r7, r0
 8020e32:	2c00      	cmp	r4, #0
 8020e34:	d00e      	beq.n	8020e54 <_dtoa_r+0x7cc>
 8020e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	dd0b      	ble.n	8020e54 <_dtoa_r+0x7cc>
 8020e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020e3e:	0023      	movs	r3, r4
 8020e40:	4294      	cmp	r4, r2
 8020e42:	dd00      	ble.n	8020e46 <_dtoa_r+0x7be>
 8020e44:	0013      	movs	r3, r2
 8020e46:	9a06      	ldr	r2, [sp, #24]
 8020e48:	1ae4      	subs	r4, r4, r3
 8020e4a:	1ad2      	subs	r2, r2, r3
 8020e4c:	9206      	str	r2, [sp, #24]
 8020e4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020e50:	1ad3      	subs	r3, r2, r3
 8020e52:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d01f      	beq.n	8020e9a <_dtoa_r+0x812>
 8020e5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d100      	bne.n	8020e62 <_dtoa_r+0x7da>
 8020e60:	e0b5      	b.n	8020fce <_dtoa_r+0x946>
 8020e62:	2d00      	cmp	r5, #0
 8020e64:	d010      	beq.n	8020e88 <_dtoa_r+0x800>
 8020e66:	0039      	movs	r1, r7
 8020e68:	002a      	movs	r2, r5
 8020e6a:	9803      	ldr	r0, [sp, #12]
 8020e6c:	f001 f884 	bl	8021f78 <__pow5mult>
 8020e70:	9a05      	ldr	r2, [sp, #20]
 8020e72:	0001      	movs	r1, r0
 8020e74:	0007      	movs	r7, r0
 8020e76:	9803      	ldr	r0, [sp, #12]
 8020e78:	f000 ffcc 	bl	8021e14 <__multiply>
 8020e7c:	0006      	movs	r6, r0
 8020e7e:	9905      	ldr	r1, [sp, #20]
 8020e80:	9803      	ldr	r0, [sp, #12]
 8020e82:	f000 feab 	bl	8021bdc <_Bfree>
 8020e86:	9605      	str	r6, [sp, #20]
 8020e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e8a:	1b5a      	subs	r2, r3, r5
 8020e8c:	42ab      	cmp	r3, r5
 8020e8e:	d004      	beq.n	8020e9a <_dtoa_r+0x812>
 8020e90:	9905      	ldr	r1, [sp, #20]
 8020e92:	9803      	ldr	r0, [sp, #12]
 8020e94:	f001 f870 	bl	8021f78 <__pow5mult>
 8020e98:	9005      	str	r0, [sp, #20]
 8020e9a:	2101      	movs	r1, #1
 8020e9c:	9803      	ldr	r0, [sp, #12]
 8020e9e:	f000 ffa1 	bl	8021de4 <__i2b>
 8020ea2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ea4:	0006      	movs	r6, r0
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d100      	bne.n	8020eac <_dtoa_r+0x824>
 8020eaa:	e1bc      	b.n	8021226 <_dtoa_r+0xb9e>
 8020eac:	001a      	movs	r2, r3
 8020eae:	0001      	movs	r1, r0
 8020eb0:	9803      	ldr	r0, [sp, #12]
 8020eb2:	f001 f861 	bl	8021f78 <__pow5mult>
 8020eb6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020eb8:	0006      	movs	r6, r0
 8020eba:	2500      	movs	r5, #0
 8020ebc:	2b01      	cmp	r3, #1
 8020ebe:	dc16      	bgt.n	8020eee <_dtoa_r+0x866>
 8020ec0:	2500      	movs	r5, #0
 8020ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ec4:	42ab      	cmp	r3, r5
 8020ec6:	d10e      	bne.n	8020ee6 <_dtoa_r+0x85e>
 8020ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020eca:	031b      	lsls	r3, r3, #12
 8020ecc:	42ab      	cmp	r3, r5
 8020ece:	d10a      	bne.n	8020ee6 <_dtoa_r+0x85e>
 8020ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8021108 <_dtoa_r+0xa80>)
 8020ed2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020ed4:	4213      	tst	r3, r2
 8020ed6:	d006      	beq.n	8020ee6 <_dtoa_r+0x85e>
 8020ed8:	9b06      	ldr	r3, [sp, #24]
 8020eda:	3501      	adds	r5, #1
 8020edc:	3301      	adds	r3, #1
 8020ede:	9306      	str	r3, [sp, #24]
 8020ee0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ee2:	3301      	adds	r3, #1
 8020ee4:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ee6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ee8:	2001      	movs	r0, #1
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d008      	beq.n	8020f00 <_dtoa_r+0x878>
 8020eee:	6933      	ldr	r3, [r6, #16]
 8020ef0:	3303      	adds	r3, #3
 8020ef2:	009b      	lsls	r3, r3, #2
 8020ef4:	18f3      	adds	r3, r6, r3
 8020ef6:	6858      	ldr	r0, [r3, #4]
 8020ef8:	f000 ff24 	bl	8021d44 <__hi0bits>
 8020efc:	2320      	movs	r3, #32
 8020efe:	1a18      	subs	r0, r3, r0
 8020f00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f02:	1818      	adds	r0, r3, r0
 8020f04:	0002      	movs	r2, r0
 8020f06:	231f      	movs	r3, #31
 8020f08:	401a      	ands	r2, r3
 8020f0a:	4218      	tst	r0, r3
 8020f0c:	d065      	beq.n	8020fda <_dtoa_r+0x952>
 8020f0e:	3301      	adds	r3, #1
 8020f10:	1a9b      	subs	r3, r3, r2
 8020f12:	2b04      	cmp	r3, #4
 8020f14:	dd5d      	ble.n	8020fd2 <_dtoa_r+0x94a>
 8020f16:	231c      	movs	r3, #28
 8020f18:	1a9b      	subs	r3, r3, r2
 8020f1a:	9a06      	ldr	r2, [sp, #24]
 8020f1c:	18e4      	adds	r4, r4, r3
 8020f1e:	18d2      	adds	r2, r2, r3
 8020f20:	9206      	str	r2, [sp, #24]
 8020f22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020f24:	18d3      	adds	r3, r2, r3
 8020f26:	930d      	str	r3, [sp, #52]	@ 0x34
 8020f28:	9b06      	ldr	r3, [sp, #24]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	dd05      	ble.n	8020f3a <_dtoa_r+0x8b2>
 8020f2e:	001a      	movs	r2, r3
 8020f30:	9905      	ldr	r1, [sp, #20]
 8020f32:	9803      	ldr	r0, [sp, #12]
 8020f34:	f001 f87c 	bl	8022030 <__lshift>
 8020f38:	9005      	str	r0, [sp, #20]
 8020f3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	dd05      	ble.n	8020f4c <_dtoa_r+0x8c4>
 8020f40:	0031      	movs	r1, r6
 8020f42:	001a      	movs	r2, r3
 8020f44:	9803      	ldr	r0, [sp, #12]
 8020f46:	f001 f873 	bl	8022030 <__lshift>
 8020f4a:	0006      	movs	r6, r0
 8020f4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d045      	beq.n	8020fde <_dtoa_r+0x956>
 8020f52:	0031      	movs	r1, r6
 8020f54:	9805      	ldr	r0, [sp, #20]
 8020f56:	f001 f8d7 	bl	8022108 <__mcmp>
 8020f5a:	2800      	cmp	r0, #0
 8020f5c:	da3f      	bge.n	8020fde <_dtoa_r+0x956>
 8020f5e:	9b04      	ldr	r3, [sp, #16]
 8020f60:	220a      	movs	r2, #10
 8020f62:	3b01      	subs	r3, #1
 8020f64:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f66:	9905      	ldr	r1, [sp, #20]
 8020f68:	2300      	movs	r3, #0
 8020f6a:	9803      	ldr	r0, [sp, #12]
 8020f6c:	f000 fe5a 	bl	8021c24 <__multadd>
 8020f70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f72:	9005      	str	r0, [sp, #20]
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d100      	bne.n	8020f7a <_dtoa_r+0x8f2>
 8020f78:	e15c      	b.n	8021234 <_dtoa_r+0xbac>
 8020f7a:	2300      	movs	r3, #0
 8020f7c:	0039      	movs	r1, r7
 8020f7e:	220a      	movs	r2, #10
 8020f80:	9803      	ldr	r0, [sp, #12]
 8020f82:	f000 fe4f 	bl	8021c24 <__multadd>
 8020f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f88:	0007      	movs	r7, r0
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	dc55      	bgt.n	802103a <_dtoa_r+0x9b2>
 8020f8e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020f90:	2b02      	cmp	r3, #2
 8020f92:	dc2d      	bgt.n	8020ff0 <_dtoa_r+0x968>
 8020f94:	e051      	b.n	802103a <_dtoa_r+0x9b2>
 8020f96:	2336      	movs	r3, #54	@ 0x36
 8020f98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020f9a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020f9c:	9c06      	ldr	r4, [sp, #24]
 8020f9e:	1a9b      	subs	r3, r3, r2
 8020fa0:	e73c      	b.n	8020e1c <_dtoa_r+0x794>
 8020fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fa4:	1e5d      	subs	r5, r3, #1
 8020fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020fa8:	42ab      	cmp	r3, r5
 8020faa:	db08      	blt.n	8020fbe <_dtoa_r+0x936>
 8020fac:	1b5d      	subs	r5, r3, r5
 8020fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fb0:	9c06      	ldr	r4, [sp, #24]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	db00      	blt.n	8020fb8 <_dtoa_r+0x930>
 8020fb6:	e731      	b.n	8020e1c <_dtoa_r+0x794>
 8020fb8:	1ae4      	subs	r4, r4, r3
 8020fba:	2300      	movs	r3, #0
 8020fbc:	e72e      	b.n	8020e1c <_dtoa_r+0x794>
 8020fbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020fc0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020fc2:	1aeb      	subs	r3, r5, r3
 8020fc4:	18d3      	adds	r3, r2, r3
 8020fc6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020fc8:	9314      	str	r3, [sp, #80]	@ 0x50
 8020fca:	2500      	movs	r5, #0
 8020fcc:	e7ef      	b.n	8020fae <_dtoa_r+0x926>
 8020fce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020fd0:	e75e      	b.n	8020e90 <_dtoa_r+0x808>
 8020fd2:	2b04      	cmp	r3, #4
 8020fd4:	d0a8      	beq.n	8020f28 <_dtoa_r+0x8a0>
 8020fd6:	331c      	adds	r3, #28
 8020fd8:	e79f      	b.n	8020f1a <_dtoa_r+0x892>
 8020fda:	0013      	movs	r3, r2
 8020fdc:	e7fb      	b.n	8020fd6 <_dtoa_r+0x94e>
 8020fde:	9b04      	ldr	r3, [sp, #16]
 8020fe0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fe4:	930e      	str	r3, [sp, #56]	@ 0x38
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	dc23      	bgt.n	8021032 <_dtoa_r+0x9aa>
 8020fea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020fec:	2b02      	cmp	r3, #2
 8020fee:	dd20      	ble.n	8021032 <_dtoa_r+0x9aa>
 8020ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d000      	beq.n	8020ff8 <_dtoa_r+0x970>
 8020ff6:	e6b5      	b.n	8020d64 <_dtoa_r+0x6dc>
 8020ff8:	0031      	movs	r1, r6
 8020ffa:	2205      	movs	r2, #5
 8020ffc:	9803      	ldr	r0, [sp, #12]
 8020ffe:	f000 fe11 	bl	8021c24 <__multadd>
 8021002:	0006      	movs	r6, r0
 8021004:	0001      	movs	r1, r0
 8021006:	9805      	ldr	r0, [sp, #20]
 8021008:	f001 f87e 	bl	8022108 <__mcmp>
 802100c:	2800      	cmp	r0, #0
 802100e:	dc00      	bgt.n	8021012 <_dtoa_r+0x98a>
 8021010:	e6a8      	b.n	8020d64 <_dtoa_r+0x6dc>
 8021012:	9b08      	ldr	r3, [sp, #32]
 8021014:	9a08      	ldr	r2, [sp, #32]
 8021016:	1c5c      	adds	r4, r3, #1
 8021018:	2331      	movs	r3, #49	@ 0x31
 802101a:	7013      	strb	r3, [r2, #0]
 802101c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802101e:	3301      	adds	r3, #1
 8021020:	930c      	str	r3, [sp, #48]	@ 0x30
 8021022:	e6a3      	b.n	8020d6c <_dtoa_r+0x6e4>
 8021024:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8021026:	0037      	movs	r7, r6
 8021028:	e7f3      	b.n	8021012 <_dtoa_r+0x98a>
 802102a:	9b04      	ldr	r3, [sp, #16]
 802102c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802102e:	930c      	str	r3, [sp, #48]	@ 0x30
 8021030:	e7f9      	b.n	8021026 <_dtoa_r+0x99e>
 8021032:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021034:	2b00      	cmp	r3, #0
 8021036:	d100      	bne.n	802103a <_dtoa_r+0x9b2>
 8021038:	e100      	b.n	802123c <_dtoa_r+0xbb4>
 802103a:	2c00      	cmp	r4, #0
 802103c:	dd05      	ble.n	802104a <_dtoa_r+0x9c2>
 802103e:	0039      	movs	r1, r7
 8021040:	0022      	movs	r2, r4
 8021042:	9803      	ldr	r0, [sp, #12]
 8021044:	f000 fff4 	bl	8022030 <__lshift>
 8021048:	0007      	movs	r7, r0
 802104a:	0038      	movs	r0, r7
 802104c:	2d00      	cmp	r5, #0
 802104e:	d018      	beq.n	8021082 <_dtoa_r+0x9fa>
 8021050:	6879      	ldr	r1, [r7, #4]
 8021052:	9803      	ldr	r0, [sp, #12]
 8021054:	f000 fd7e 	bl	8021b54 <_Balloc>
 8021058:	1e04      	subs	r4, r0, #0
 802105a:	d105      	bne.n	8021068 <_dtoa_r+0x9e0>
 802105c:	0022      	movs	r2, r4
 802105e:	4b2b      	ldr	r3, [pc, #172]	@ (802110c <_dtoa_r+0xa84>)
 8021060:	482b      	ldr	r0, [pc, #172]	@ (8021110 <_dtoa_r+0xa88>)
 8021062:	492c      	ldr	r1, [pc, #176]	@ (8021114 <_dtoa_r+0xa8c>)
 8021064:	f7ff fb25 	bl	80206b2 <_dtoa_r+0x2a>
 8021068:	0039      	movs	r1, r7
 802106a:	693a      	ldr	r2, [r7, #16]
 802106c:	310c      	adds	r1, #12
 802106e:	3202      	adds	r2, #2
 8021070:	0092      	lsls	r2, r2, #2
 8021072:	300c      	adds	r0, #12
 8021074:	f7ff fa6a 	bl	802054c <memcpy>
 8021078:	2201      	movs	r2, #1
 802107a:	0021      	movs	r1, r4
 802107c:	9803      	ldr	r0, [sp, #12]
 802107e:	f000 ffd7 	bl	8022030 <__lshift>
 8021082:	9b08      	ldr	r3, [sp, #32]
 8021084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021086:	9306      	str	r3, [sp, #24]
 8021088:	3b01      	subs	r3, #1
 802108a:	189b      	adds	r3, r3, r2
 802108c:	2201      	movs	r2, #1
 802108e:	9704      	str	r7, [sp, #16]
 8021090:	0007      	movs	r7, r0
 8021092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021096:	4013      	ands	r3, r2
 8021098:	930e      	str	r3, [sp, #56]	@ 0x38
 802109a:	0031      	movs	r1, r6
 802109c:	9805      	ldr	r0, [sp, #20]
 802109e:	f7ff fa65 	bl	802056c <quorem>
 80210a2:	9904      	ldr	r1, [sp, #16]
 80210a4:	0005      	movs	r5, r0
 80210a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80210a8:	9805      	ldr	r0, [sp, #20]
 80210aa:	f001 f82d 	bl	8022108 <__mcmp>
 80210ae:	003a      	movs	r2, r7
 80210b0:	900d      	str	r0, [sp, #52]	@ 0x34
 80210b2:	0031      	movs	r1, r6
 80210b4:	9803      	ldr	r0, [sp, #12]
 80210b6:	f001 f843 	bl	8022140 <__mdiff>
 80210ba:	2201      	movs	r2, #1
 80210bc:	68c3      	ldr	r3, [r0, #12]
 80210be:	0004      	movs	r4, r0
 80210c0:	3530      	adds	r5, #48	@ 0x30
 80210c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d104      	bne.n	80210d2 <_dtoa_r+0xa4a>
 80210c8:	0001      	movs	r1, r0
 80210ca:	9805      	ldr	r0, [sp, #20]
 80210cc:	f001 f81c 	bl	8022108 <__mcmp>
 80210d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80210d2:	0021      	movs	r1, r4
 80210d4:	9803      	ldr	r0, [sp, #12]
 80210d6:	f000 fd81 	bl	8021bdc <_Bfree>
 80210da:	9b06      	ldr	r3, [sp, #24]
 80210dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80210de:	1c5c      	adds	r4, r3, #1
 80210e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80210e2:	4313      	orrs	r3, r2
 80210e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80210e6:	4313      	orrs	r3, r2
 80210e8:	d116      	bne.n	8021118 <_dtoa_r+0xa90>
 80210ea:	2d39      	cmp	r5, #57	@ 0x39
 80210ec:	d02f      	beq.n	802114e <_dtoa_r+0xac6>
 80210ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	dd01      	ble.n	80210f8 <_dtoa_r+0xa70>
 80210f4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80210f6:	3531      	adds	r5, #49	@ 0x31
 80210f8:	9b06      	ldr	r3, [sp, #24]
 80210fa:	701d      	strb	r5, [r3, #0]
 80210fc:	e638      	b.n	8020d70 <_dtoa_r+0x6e8>
 80210fe:	46c0      	nop			@ (mov r8, r8)
 8021100:	40240000 	.word	0x40240000
 8021104:	00000433 	.word	0x00000433
 8021108:	7ff00000 	.word	0x7ff00000
 802110c:	08025f91 	.word	0x08025f91
 8021110:	08025f39 	.word	0x08025f39
 8021114:	000002ef 	.word	0x000002ef
 8021118:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802111a:	2b00      	cmp	r3, #0
 802111c:	db04      	blt.n	8021128 <_dtoa_r+0xaa0>
 802111e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021120:	4313      	orrs	r3, r2
 8021122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021124:	4313      	orrs	r3, r2
 8021126:	d11e      	bne.n	8021166 <_dtoa_r+0xade>
 8021128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802112a:	2b00      	cmp	r3, #0
 802112c:	dde4      	ble.n	80210f8 <_dtoa_r+0xa70>
 802112e:	9905      	ldr	r1, [sp, #20]
 8021130:	2201      	movs	r2, #1
 8021132:	9803      	ldr	r0, [sp, #12]
 8021134:	f000 ff7c 	bl	8022030 <__lshift>
 8021138:	0031      	movs	r1, r6
 802113a:	9005      	str	r0, [sp, #20]
 802113c:	f000 ffe4 	bl	8022108 <__mcmp>
 8021140:	2800      	cmp	r0, #0
 8021142:	dc02      	bgt.n	802114a <_dtoa_r+0xac2>
 8021144:	d1d8      	bne.n	80210f8 <_dtoa_r+0xa70>
 8021146:	07eb      	lsls	r3, r5, #31
 8021148:	d5d6      	bpl.n	80210f8 <_dtoa_r+0xa70>
 802114a:	2d39      	cmp	r5, #57	@ 0x39
 802114c:	d1d2      	bne.n	80210f4 <_dtoa_r+0xa6c>
 802114e:	2339      	movs	r3, #57	@ 0x39
 8021150:	9a06      	ldr	r2, [sp, #24]
 8021152:	7013      	strb	r3, [r2, #0]
 8021154:	0023      	movs	r3, r4
 8021156:	001c      	movs	r4, r3
 8021158:	3b01      	subs	r3, #1
 802115a:	781a      	ldrb	r2, [r3, #0]
 802115c:	2a39      	cmp	r2, #57	@ 0x39
 802115e:	d04f      	beq.n	8021200 <_dtoa_r+0xb78>
 8021160:	3201      	adds	r2, #1
 8021162:	701a      	strb	r2, [r3, #0]
 8021164:	e604      	b.n	8020d70 <_dtoa_r+0x6e8>
 8021166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021168:	2b00      	cmp	r3, #0
 802116a:	dd03      	ble.n	8021174 <_dtoa_r+0xaec>
 802116c:	2d39      	cmp	r5, #57	@ 0x39
 802116e:	d0ee      	beq.n	802114e <_dtoa_r+0xac6>
 8021170:	3501      	adds	r5, #1
 8021172:	e7c1      	b.n	80210f8 <_dtoa_r+0xa70>
 8021174:	9b06      	ldr	r3, [sp, #24]
 8021176:	9a06      	ldr	r2, [sp, #24]
 8021178:	701d      	strb	r5, [r3, #0]
 802117a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802117c:	4293      	cmp	r3, r2
 802117e:	d02a      	beq.n	80211d6 <_dtoa_r+0xb4e>
 8021180:	2300      	movs	r3, #0
 8021182:	220a      	movs	r2, #10
 8021184:	9905      	ldr	r1, [sp, #20]
 8021186:	9803      	ldr	r0, [sp, #12]
 8021188:	f000 fd4c 	bl	8021c24 <__multadd>
 802118c:	9b04      	ldr	r3, [sp, #16]
 802118e:	9005      	str	r0, [sp, #20]
 8021190:	42bb      	cmp	r3, r7
 8021192:	d109      	bne.n	80211a8 <_dtoa_r+0xb20>
 8021194:	2300      	movs	r3, #0
 8021196:	220a      	movs	r2, #10
 8021198:	9904      	ldr	r1, [sp, #16]
 802119a:	9803      	ldr	r0, [sp, #12]
 802119c:	f000 fd42 	bl	8021c24 <__multadd>
 80211a0:	9004      	str	r0, [sp, #16]
 80211a2:	0007      	movs	r7, r0
 80211a4:	9406      	str	r4, [sp, #24]
 80211a6:	e778      	b.n	802109a <_dtoa_r+0xa12>
 80211a8:	9904      	ldr	r1, [sp, #16]
 80211aa:	2300      	movs	r3, #0
 80211ac:	220a      	movs	r2, #10
 80211ae:	9803      	ldr	r0, [sp, #12]
 80211b0:	f000 fd38 	bl	8021c24 <__multadd>
 80211b4:	2300      	movs	r3, #0
 80211b6:	9004      	str	r0, [sp, #16]
 80211b8:	220a      	movs	r2, #10
 80211ba:	0039      	movs	r1, r7
 80211bc:	9803      	ldr	r0, [sp, #12]
 80211be:	f000 fd31 	bl	8021c24 <__multadd>
 80211c2:	e7ee      	b.n	80211a2 <_dtoa_r+0xb1a>
 80211c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211c6:	2401      	movs	r4, #1
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	dd00      	ble.n	80211ce <_dtoa_r+0xb46>
 80211cc:	001c      	movs	r4, r3
 80211ce:	9b08      	ldr	r3, [sp, #32]
 80211d0:	191c      	adds	r4, r3, r4
 80211d2:	2300      	movs	r3, #0
 80211d4:	9304      	str	r3, [sp, #16]
 80211d6:	9905      	ldr	r1, [sp, #20]
 80211d8:	2201      	movs	r2, #1
 80211da:	9803      	ldr	r0, [sp, #12]
 80211dc:	f000 ff28 	bl	8022030 <__lshift>
 80211e0:	0031      	movs	r1, r6
 80211e2:	9005      	str	r0, [sp, #20]
 80211e4:	f000 ff90 	bl	8022108 <__mcmp>
 80211e8:	2800      	cmp	r0, #0
 80211ea:	dcb3      	bgt.n	8021154 <_dtoa_r+0xacc>
 80211ec:	d101      	bne.n	80211f2 <_dtoa_r+0xb6a>
 80211ee:	07ed      	lsls	r5, r5, #31
 80211f0:	d4b0      	bmi.n	8021154 <_dtoa_r+0xacc>
 80211f2:	0023      	movs	r3, r4
 80211f4:	001c      	movs	r4, r3
 80211f6:	3b01      	subs	r3, #1
 80211f8:	781a      	ldrb	r2, [r3, #0]
 80211fa:	2a30      	cmp	r2, #48	@ 0x30
 80211fc:	d0fa      	beq.n	80211f4 <_dtoa_r+0xb6c>
 80211fe:	e5b7      	b.n	8020d70 <_dtoa_r+0x6e8>
 8021200:	9a08      	ldr	r2, [sp, #32]
 8021202:	429a      	cmp	r2, r3
 8021204:	d1a7      	bne.n	8021156 <_dtoa_r+0xace>
 8021206:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021208:	3301      	adds	r3, #1
 802120a:	930c      	str	r3, [sp, #48]	@ 0x30
 802120c:	2331      	movs	r3, #49	@ 0x31
 802120e:	7013      	strb	r3, [r2, #0]
 8021210:	e5ae      	b.n	8020d70 <_dtoa_r+0x6e8>
 8021212:	4b15      	ldr	r3, [pc, #84]	@ (8021268 <_dtoa_r+0xbe0>)
 8021214:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021216:	9308      	str	r3, [sp, #32]
 8021218:	4b14      	ldr	r3, [pc, #80]	@ (802126c <_dtoa_r+0xbe4>)
 802121a:	2a00      	cmp	r2, #0
 802121c:	d001      	beq.n	8021222 <_dtoa_r+0xb9a>
 802121e:	f7ff fa7b 	bl	8020718 <_dtoa_r+0x90>
 8021222:	f7ff fa7b 	bl	802071c <_dtoa_r+0x94>
 8021226:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021228:	2b01      	cmp	r3, #1
 802122a:	dc00      	bgt.n	802122e <_dtoa_r+0xba6>
 802122c:	e648      	b.n	8020ec0 <_dtoa_r+0x838>
 802122e:	2001      	movs	r0, #1
 8021230:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021232:	e665      	b.n	8020f00 <_dtoa_r+0x878>
 8021234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021236:	2b00      	cmp	r3, #0
 8021238:	dc00      	bgt.n	802123c <_dtoa_r+0xbb4>
 802123a:	e6d6      	b.n	8020fea <_dtoa_r+0x962>
 802123c:	2400      	movs	r4, #0
 802123e:	0031      	movs	r1, r6
 8021240:	9805      	ldr	r0, [sp, #20]
 8021242:	f7ff f993 	bl	802056c <quorem>
 8021246:	9b08      	ldr	r3, [sp, #32]
 8021248:	3030      	adds	r0, #48	@ 0x30
 802124a:	5518      	strb	r0, [r3, r4]
 802124c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802124e:	3401      	adds	r4, #1
 8021250:	0005      	movs	r5, r0
 8021252:	429c      	cmp	r4, r3
 8021254:	dab6      	bge.n	80211c4 <_dtoa_r+0xb3c>
 8021256:	2300      	movs	r3, #0
 8021258:	220a      	movs	r2, #10
 802125a:	9905      	ldr	r1, [sp, #20]
 802125c:	9803      	ldr	r0, [sp, #12]
 802125e:	f000 fce1 	bl	8021c24 <__multadd>
 8021262:	9005      	str	r0, [sp, #20]
 8021264:	e7eb      	b.n	802123e <_dtoa_r+0xbb6>
 8021266:	46c0      	nop			@ (mov r8, r8)
 8021268:	08025f15 	.word	0x08025f15
 802126c:	08025f1d 	.word	0x08025f1d

08021270 <_free_r>:
 8021270:	b570      	push	{r4, r5, r6, lr}
 8021272:	0005      	movs	r5, r0
 8021274:	1e0c      	subs	r4, r1, #0
 8021276:	d010      	beq.n	802129a <_free_r+0x2a>
 8021278:	3c04      	subs	r4, #4
 802127a:	6823      	ldr	r3, [r4, #0]
 802127c:	2b00      	cmp	r3, #0
 802127e:	da00      	bge.n	8021282 <_free_r+0x12>
 8021280:	18e4      	adds	r4, r4, r3
 8021282:	0028      	movs	r0, r5
 8021284:	f000 fc56 	bl	8021b34 <__malloc_lock>
 8021288:	4a1d      	ldr	r2, [pc, #116]	@ (8021300 <_free_r+0x90>)
 802128a:	6813      	ldr	r3, [r2, #0]
 802128c:	2b00      	cmp	r3, #0
 802128e:	d105      	bne.n	802129c <_free_r+0x2c>
 8021290:	6063      	str	r3, [r4, #4]
 8021292:	6014      	str	r4, [r2, #0]
 8021294:	0028      	movs	r0, r5
 8021296:	f000 fc55 	bl	8021b44 <__malloc_unlock>
 802129a:	bd70      	pop	{r4, r5, r6, pc}
 802129c:	42a3      	cmp	r3, r4
 802129e:	d908      	bls.n	80212b2 <_free_r+0x42>
 80212a0:	6820      	ldr	r0, [r4, #0]
 80212a2:	1821      	adds	r1, r4, r0
 80212a4:	428b      	cmp	r3, r1
 80212a6:	d1f3      	bne.n	8021290 <_free_r+0x20>
 80212a8:	6819      	ldr	r1, [r3, #0]
 80212aa:	685b      	ldr	r3, [r3, #4]
 80212ac:	1809      	adds	r1, r1, r0
 80212ae:	6021      	str	r1, [r4, #0]
 80212b0:	e7ee      	b.n	8021290 <_free_r+0x20>
 80212b2:	001a      	movs	r2, r3
 80212b4:	685b      	ldr	r3, [r3, #4]
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d001      	beq.n	80212be <_free_r+0x4e>
 80212ba:	42a3      	cmp	r3, r4
 80212bc:	d9f9      	bls.n	80212b2 <_free_r+0x42>
 80212be:	6811      	ldr	r1, [r2, #0]
 80212c0:	1850      	adds	r0, r2, r1
 80212c2:	42a0      	cmp	r0, r4
 80212c4:	d10b      	bne.n	80212de <_free_r+0x6e>
 80212c6:	6820      	ldr	r0, [r4, #0]
 80212c8:	1809      	adds	r1, r1, r0
 80212ca:	1850      	adds	r0, r2, r1
 80212cc:	6011      	str	r1, [r2, #0]
 80212ce:	4283      	cmp	r3, r0
 80212d0:	d1e0      	bne.n	8021294 <_free_r+0x24>
 80212d2:	6818      	ldr	r0, [r3, #0]
 80212d4:	685b      	ldr	r3, [r3, #4]
 80212d6:	1841      	adds	r1, r0, r1
 80212d8:	6011      	str	r1, [r2, #0]
 80212da:	6053      	str	r3, [r2, #4]
 80212dc:	e7da      	b.n	8021294 <_free_r+0x24>
 80212de:	42a0      	cmp	r0, r4
 80212e0:	d902      	bls.n	80212e8 <_free_r+0x78>
 80212e2:	230c      	movs	r3, #12
 80212e4:	602b      	str	r3, [r5, #0]
 80212e6:	e7d5      	b.n	8021294 <_free_r+0x24>
 80212e8:	6820      	ldr	r0, [r4, #0]
 80212ea:	1821      	adds	r1, r4, r0
 80212ec:	428b      	cmp	r3, r1
 80212ee:	d103      	bne.n	80212f8 <_free_r+0x88>
 80212f0:	6819      	ldr	r1, [r3, #0]
 80212f2:	685b      	ldr	r3, [r3, #4]
 80212f4:	1809      	adds	r1, r1, r0
 80212f6:	6021      	str	r1, [r4, #0]
 80212f8:	6063      	str	r3, [r4, #4]
 80212fa:	6054      	str	r4, [r2, #4]
 80212fc:	e7ca      	b.n	8021294 <_free_r+0x24>
 80212fe:	46c0      	nop			@ (mov r8, r8)
 8021300:	200037c8 	.word	0x200037c8

08021304 <rshift>:
 8021304:	0002      	movs	r2, r0
 8021306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021308:	6904      	ldr	r4, [r0, #16]
 802130a:	b085      	sub	sp, #20
 802130c:	3214      	adds	r2, #20
 802130e:	114b      	asrs	r3, r1, #5
 8021310:	0016      	movs	r6, r2
 8021312:	9302      	str	r3, [sp, #8]
 8021314:	429c      	cmp	r4, r3
 8021316:	dd31      	ble.n	802137c <rshift+0x78>
 8021318:	261f      	movs	r6, #31
 802131a:	000f      	movs	r7, r1
 802131c:	009b      	lsls	r3, r3, #2
 802131e:	00a5      	lsls	r5, r4, #2
 8021320:	18d3      	adds	r3, r2, r3
 8021322:	4037      	ands	r7, r6
 8021324:	1955      	adds	r5, r2, r5
 8021326:	9300      	str	r3, [sp, #0]
 8021328:	9701      	str	r7, [sp, #4]
 802132a:	4231      	tst	r1, r6
 802132c:	d10d      	bne.n	802134a <rshift+0x46>
 802132e:	0016      	movs	r6, r2
 8021330:	0019      	movs	r1, r3
 8021332:	428d      	cmp	r5, r1
 8021334:	d836      	bhi.n	80213a4 <rshift+0xa0>
 8021336:	9b00      	ldr	r3, [sp, #0]
 8021338:	2600      	movs	r6, #0
 802133a:	3b03      	subs	r3, #3
 802133c:	429d      	cmp	r5, r3
 802133e:	d302      	bcc.n	8021346 <rshift+0x42>
 8021340:	9b02      	ldr	r3, [sp, #8]
 8021342:	1ae4      	subs	r4, r4, r3
 8021344:	00a6      	lsls	r6, r4, #2
 8021346:	1996      	adds	r6, r2, r6
 8021348:	e018      	b.n	802137c <rshift+0x78>
 802134a:	2120      	movs	r1, #32
 802134c:	9e01      	ldr	r6, [sp, #4]
 802134e:	9f01      	ldr	r7, [sp, #4]
 8021350:	1b89      	subs	r1, r1, r6
 8021352:	9e00      	ldr	r6, [sp, #0]
 8021354:	9103      	str	r1, [sp, #12]
 8021356:	ce02      	ldmia	r6!, {r1}
 8021358:	4694      	mov	ip, r2
 802135a:	40f9      	lsrs	r1, r7
 802135c:	42b5      	cmp	r5, r6
 802135e:	d816      	bhi.n	802138e <rshift+0x8a>
 8021360:	9b00      	ldr	r3, [sp, #0]
 8021362:	2600      	movs	r6, #0
 8021364:	3301      	adds	r3, #1
 8021366:	429d      	cmp	r5, r3
 8021368:	d303      	bcc.n	8021372 <rshift+0x6e>
 802136a:	9b02      	ldr	r3, [sp, #8]
 802136c:	1ae4      	subs	r4, r4, r3
 802136e:	00a6      	lsls	r6, r4, #2
 8021370:	3e04      	subs	r6, #4
 8021372:	1996      	adds	r6, r2, r6
 8021374:	6031      	str	r1, [r6, #0]
 8021376:	2900      	cmp	r1, #0
 8021378:	d000      	beq.n	802137c <rshift+0x78>
 802137a:	3604      	adds	r6, #4
 802137c:	1ab1      	subs	r1, r6, r2
 802137e:	1089      	asrs	r1, r1, #2
 8021380:	6101      	str	r1, [r0, #16]
 8021382:	4296      	cmp	r6, r2
 8021384:	d101      	bne.n	802138a <rshift+0x86>
 8021386:	2300      	movs	r3, #0
 8021388:	6143      	str	r3, [r0, #20]
 802138a:	b005      	add	sp, #20
 802138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802138e:	6837      	ldr	r7, [r6, #0]
 8021390:	9b03      	ldr	r3, [sp, #12]
 8021392:	409f      	lsls	r7, r3
 8021394:	430f      	orrs	r7, r1
 8021396:	4661      	mov	r1, ip
 8021398:	c180      	stmia	r1!, {r7}
 802139a:	468c      	mov	ip, r1
 802139c:	9b01      	ldr	r3, [sp, #4]
 802139e:	ce02      	ldmia	r6!, {r1}
 80213a0:	40d9      	lsrs	r1, r3
 80213a2:	e7db      	b.n	802135c <rshift+0x58>
 80213a4:	c980      	ldmia	r1!, {r7}
 80213a6:	c680      	stmia	r6!, {r7}
 80213a8:	e7c3      	b.n	8021332 <rshift+0x2e>

080213aa <__hexdig_fun>:
 80213aa:	0002      	movs	r2, r0
 80213ac:	3a30      	subs	r2, #48	@ 0x30
 80213ae:	0003      	movs	r3, r0
 80213b0:	2a09      	cmp	r2, #9
 80213b2:	d802      	bhi.n	80213ba <__hexdig_fun+0x10>
 80213b4:	3b20      	subs	r3, #32
 80213b6:	b2d8      	uxtb	r0, r3
 80213b8:	4770      	bx	lr
 80213ba:	0002      	movs	r2, r0
 80213bc:	3a61      	subs	r2, #97	@ 0x61
 80213be:	2a05      	cmp	r2, #5
 80213c0:	d801      	bhi.n	80213c6 <__hexdig_fun+0x1c>
 80213c2:	3b47      	subs	r3, #71	@ 0x47
 80213c4:	e7f7      	b.n	80213b6 <__hexdig_fun+0xc>
 80213c6:	001a      	movs	r2, r3
 80213c8:	3a41      	subs	r2, #65	@ 0x41
 80213ca:	2000      	movs	r0, #0
 80213cc:	2a05      	cmp	r2, #5
 80213ce:	d8f3      	bhi.n	80213b8 <__hexdig_fun+0xe>
 80213d0:	3b27      	subs	r3, #39	@ 0x27
 80213d2:	e7f0      	b.n	80213b6 <__hexdig_fun+0xc>

080213d4 <__gethex>:
 80213d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213d6:	b089      	sub	sp, #36	@ 0x24
 80213d8:	9307      	str	r3, [sp, #28]
 80213da:	680b      	ldr	r3, [r1, #0]
 80213dc:	9201      	str	r2, [sp, #4]
 80213de:	9003      	str	r0, [sp, #12]
 80213e0:	9106      	str	r1, [sp, #24]
 80213e2:	1c9a      	adds	r2, r3, #2
 80213e4:	0011      	movs	r1, r2
 80213e6:	3201      	adds	r2, #1
 80213e8:	1e50      	subs	r0, r2, #1
 80213ea:	7800      	ldrb	r0, [r0, #0]
 80213ec:	2830      	cmp	r0, #48	@ 0x30
 80213ee:	d0f9      	beq.n	80213e4 <__gethex+0x10>
 80213f0:	1acb      	subs	r3, r1, r3
 80213f2:	3b02      	subs	r3, #2
 80213f4:	9305      	str	r3, [sp, #20]
 80213f6:	9100      	str	r1, [sp, #0]
 80213f8:	f7ff ffd7 	bl	80213aa <__hexdig_fun>
 80213fc:	2300      	movs	r3, #0
 80213fe:	001d      	movs	r5, r3
 8021400:	9302      	str	r3, [sp, #8]
 8021402:	4298      	cmp	r0, r3
 8021404:	d11e      	bne.n	8021444 <__gethex+0x70>
 8021406:	2201      	movs	r2, #1
 8021408:	49a6      	ldr	r1, [pc, #664]	@ (80216a4 <__gethex+0x2d0>)
 802140a:	9800      	ldr	r0, [sp, #0]
 802140c:	f7fe ffd8 	bl	80203c0 <strncmp>
 8021410:	0007      	movs	r7, r0
 8021412:	42a8      	cmp	r0, r5
 8021414:	d000      	beq.n	8021418 <__gethex+0x44>
 8021416:	e06a      	b.n	80214ee <__gethex+0x11a>
 8021418:	9b00      	ldr	r3, [sp, #0]
 802141a:	7858      	ldrb	r0, [r3, #1]
 802141c:	1c5c      	adds	r4, r3, #1
 802141e:	f7ff ffc4 	bl	80213aa <__hexdig_fun>
 8021422:	2301      	movs	r3, #1
 8021424:	9302      	str	r3, [sp, #8]
 8021426:	42a8      	cmp	r0, r5
 8021428:	d02f      	beq.n	802148a <__gethex+0xb6>
 802142a:	9400      	str	r4, [sp, #0]
 802142c:	9b00      	ldr	r3, [sp, #0]
 802142e:	7818      	ldrb	r0, [r3, #0]
 8021430:	2830      	cmp	r0, #48	@ 0x30
 8021432:	d009      	beq.n	8021448 <__gethex+0x74>
 8021434:	f7ff ffb9 	bl	80213aa <__hexdig_fun>
 8021438:	4242      	negs	r2, r0
 802143a:	4142      	adcs	r2, r0
 802143c:	2301      	movs	r3, #1
 802143e:	0025      	movs	r5, r4
 8021440:	9202      	str	r2, [sp, #8]
 8021442:	9305      	str	r3, [sp, #20]
 8021444:	9c00      	ldr	r4, [sp, #0]
 8021446:	e004      	b.n	8021452 <__gethex+0x7e>
 8021448:	9b00      	ldr	r3, [sp, #0]
 802144a:	3301      	adds	r3, #1
 802144c:	9300      	str	r3, [sp, #0]
 802144e:	e7ed      	b.n	802142c <__gethex+0x58>
 8021450:	3401      	adds	r4, #1
 8021452:	7820      	ldrb	r0, [r4, #0]
 8021454:	f7ff ffa9 	bl	80213aa <__hexdig_fun>
 8021458:	1e07      	subs	r7, r0, #0
 802145a:	d1f9      	bne.n	8021450 <__gethex+0x7c>
 802145c:	2201      	movs	r2, #1
 802145e:	0020      	movs	r0, r4
 8021460:	4990      	ldr	r1, [pc, #576]	@ (80216a4 <__gethex+0x2d0>)
 8021462:	f7fe ffad 	bl	80203c0 <strncmp>
 8021466:	2800      	cmp	r0, #0
 8021468:	d10d      	bne.n	8021486 <__gethex+0xb2>
 802146a:	2d00      	cmp	r5, #0
 802146c:	d106      	bne.n	802147c <__gethex+0xa8>
 802146e:	3401      	adds	r4, #1
 8021470:	0025      	movs	r5, r4
 8021472:	7820      	ldrb	r0, [r4, #0]
 8021474:	f7ff ff99 	bl	80213aa <__hexdig_fun>
 8021478:	2800      	cmp	r0, #0
 802147a:	d102      	bne.n	8021482 <__gethex+0xae>
 802147c:	1b2d      	subs	r5, r5, r4
 802147e:	00af      	lsls	r7, r5, #2
 8021480:	e003      	b.n	802148a <__gethex+0xb6>
 8021482:	3401      	adds	r4, #1
 8021484:	e7f5      	b.n	8021472 <__gethex+0x9e>
 8021486:	2d00      	cmp	r5, #0
 8021488:	d1f8      	bne.n	802147c <__gethex+0xa8>
 802148a:	2220      	movs	r2, #32
 802148c:	7823      	ldrb	r3, [r4, #0]
 802148e:	0026      	movs	r6, r4
 8021490:	4393      	bics	r3, r2
 8021492:	2b50      	cmp	r3, #80	@ 0x50
 8021494:	d11d      	bne.n	80214d2 <__gethex+0xfe>
 8021496:	7863      	ldrb	r3, [r4, #1]
 8021498:	2b2b      	cmp	r3, #43	@ 0x2b
 802149a:	d02d      	beq.n	80214f8 <__gethex+0x124>
 802149c:	2b2d      	cmp	r3, #45	@ 0x2d
 802149e:	d02f      	beq.n	8021500 <__gethex+0x12c>
 80214a0:	2300      	movs	r3, #0
 80214a2:	1c66      	adds	r6, r4, #1
 80214a4:	9304      	str	r3, [sp, #16]
 80214a6:	7830      	ldrb	r0, [r6, #0]
 80214a8:	f7ff ff7f 	bl	80213aa <__hexdig_fun>
 80214ac:	1e43      	subs	r3, r0, #1
 80214ae:	b2db      	uxtb	r3, r3
 80214b0:	0005      	movs	r5, r0
 80214b2:	2b18      	cmp	r3, #24
 80214b4:	d82a      	bhi.n	802150c <__gethex+0x138>
 80214b6:	7870      	ldrb	r0, [r6, #1]
 80214b8:	f7ff ff77 	bl	80213aa <__hexdig_fun>
 80214bc:	1e43      	subs	r3, r0, #1
 80214be:	b2db      	uxtb	r3, r3
 80214c0:	3601      	adds	r6, #1
 80214c2:	3d10      	subs	r5, #16
 80214c4:	2b18      	cmp	r3, #24
 80214c6:	d91d      	bls.n	8021504 <__gethex+0x130>
 80214c8:	9b04      	ldr	r3, [sp, #16]
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d000      	beq.n	80214d0 <__gethex+0xfc>
 80214ce:	426d      	negs	r5, r5
 80214d0:	197f      	adds	r7, r7, r5
 80214d2:	9b06      	ldr	r3, [sp, #24]
 80214d4:	601e      	str	r6, [r3, #0]
 80214d6:	9b02      	ldr	r3, [sp, #8]
 80214d8:	2b00      	cmp	r3, #0
 80214da:	d019      	beq.n	8021510 <__gethex+0x13c>
 80214dc:	9b05      	ldr	r3, [sp, #20]
 80214de:	2606      	movs	r6, #6
 80214e0:	425a      	negs	r2, r3
 80214e2:	4153      	adcs	r3, r2
 80214e4:	425b      	negs	r3, r3
 80214e6:	401e      	ands	r6, r3
 80214e8:	0030      	movs	r0, r6
 80214ea:	b009      	add	sp, #36	@ 0x24
 80214ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214ee:	2301      	movs	r3, #1
 80214f0:	2700      	movs	r7, #0
 80214f2:	9c00      	ldr	r4, [sp, #0]
 80214f4:	9302      	str	r3, [sp, #8]
 80214f6:	e7c8      	b.n	802148a <__gethex+0xb6>
 80214f8:	2300      	movs	r3, #0
 80214fa:	9304      	str	r3, [sp, #16]
 80214fc:	1ca6      	adds	r6, r4, #2
 80214fe:	e7d2      	b.n	80214a6 <__gethex+0xd2>
 8021500:	2301      	movs	r3, #1
 8021502:	e7fa      	b.n	80214fa <__gethex+0x126>
 8021504:	230a      	movs	r3, #10
 8021506:	435d      	muls	r5, r3
 8021508:	182d      	adds	r5, r5, r0
 802150a:	e7d4      	b.n	80214b6 <__gethex+0xe2>
 802150c:	0026      	movs	r6, r4
 802150e:	e7e0      	b.n	80214d2 <__gethex+0xfe>
 8021510:	9b00      	ldr	r3, [sp, #0]
 8021512:	9902      	ldr	r1, [sp, #8]
 8021514:	1ae3      	subs	r3, r4, r3
 8021516:	3b01      	subs	r3, #1
 8021518:	2b07      	cmp	r3, #7
 802151a:	dc0a      	bgt.n	8021532 <__gethex+0x15e>
 802151c:	9803      	ldr	r0, [sp, #12]
 802151e:	f000 fb19 	bl	8021b54 <_Balloc>
 8021522:	1e05      	subs	r5, r0, #0
 8021524:	d108      	bne.n	8021538 <__gethex+0x164>
 8021526:	002a      	movs	r2, r5
 8021528:	21e4      	movs	r1, #228	@ 0xe4
 802152a:	4b5f      	ldr	r3, [pc, #380]	@ (80216a8 <__gethex+0x2d4>)
 802152c:	485f      	ldr	r0, [pc, #380]	@ (80216ac <__gethex+0x2d8>)
 802152e:	f001 fbf1 	bl	8022d14 <__assert_func>
 8021532:	3101      	adds	r1, #1
 8021534:	105b      	asrs	r3, r3, #1
 8021536:	e7ef      	b.n	8021518 <__gethex+0x144>
 8021538:	0003      	movs	r3, r0
 802153a:	3314      	adds	r3, #20
 802153c:	9302      	str	r3, [sp, #8]
 802153e:	9305      	str	r3, [sp, #20]
 8021540:	2300      	movs	r3, #0
 8021542:	001e      	movs	r6, r3
 8021544:	9304      	str	r3, [sp, #16]
 8021546:	9b00      	ldr	r3, [sp, #0]
 8021548:	42a3      	cmp	r3, r4
 802154a:	d338      	bcc.n	80215be <__gethex+0x1ea>
 802154c:	9c05      	ldr	r4, [sp, #20]
 802154e:	9b02      	ldr	r3, [sp, #8]
 8021550:	c440      	stmia	r4!, {r6}
 8021552:	1ae4      	subs	r4, r4, r3
 8021554:	10a4      	asrs	r4, r4, #2
 8021556:	0030      	movs	r0, r6
 8021558:	612c      	str	r4, [r5, #16]
 802155a:	f000 fbf3 	bl	8021d44 <__hi0bits>
 802155e:	9b01      	ldr	r3, [sp, #4]
 8021560:	0164      	lsls	r4, r4, #5
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	1a26      	subs	r6, r4, r0
 8021566:	9300      	str	r3, [sp, #0]
 8021568:	429e      	cmp	r6, r3
 802156a:	dd52      	ble.n	8021612 <__gethex+0x23e>
 802156c:	1af6      	subs	r6, r6, r3
 802156e:	0031      	movs	r1, r6
 8021570:	0028      	movs	r0, r5
 8021572:	f000 ff96 	bl	80224a2 <__any_on>
 8021576:	1e04      	subs	r4, r0, #0
 8021578:	d00f      	beq.n	802159a <__gethex+0x1c6>
 802157a:	2401      	movs	r4, #1
 802157c:	231f      	movs	r3, #31
 802157e:	0020      	movs	r0, r4
 8021580:	1e72      	subs	r2, r6, #1
 8021582:	4013      	ands	r3, r2
 8021584:	4098      	lsls	r0, r3
 8021586:	0003      	movs	r3, r0
 8021588:	1151      	asrs	r1, r2, #5
 802158a:	9802      	ldr	r0, [sp, #8]
 802158c:	0089      	lsls	r1, r1, #2
 802158e:	5809      	ldr	r1, [r1, r0]
 8021590:	4219      	tst	r1, r3
 8021592:	d002      	beq.n	802159a <__gethex+0x1c6>
 8021594:	42a2      	cmp	r2, r4
 8021596:	dc34      	bgt.n	8021602 <__gethex+0x22e>
 8021598:	2402      	movs	r4, #2
 802159a:	0031      	movs	r1, r6
 802159c:	0028      	movs	r0, r5
 802159e:	f7ff feb1 	bl	8021304 <rshift>
 80215a2:	19bf      	adds	r7, r7, r6
 80215a4:	9b01      	ldr	r3, [sp, #4]
 80215a6:	689b      	ldr	r3, [r3, #8]
 80215a8:	42bb      	cmp	r3, r7
 80215aa:	da42      	bge.n	8021632 <__gethex+0x25e>
 80215ac:	0029      	movs	r1, r5
 80215ae:	9803      	ldr	r0, [sp, #12]
 80215b0:	f000 fb14 	bl	8021bdc <_Bfree>
 80215b4:	2300      	movs	r3, #0
 80215b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80215b8:	26a3      	movs	r6, #163	@ 0xa3
 80215ba:	6013      	str	r3, [r2, #0]
 80215bc:	e794      	b.n	80214e8 <__gethex+0x114>
 80215be:	3c01      	subs	r4, #1
 80215c0:	7823      	ldrb	r3, [r4, #0]
 80215c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80215c4:	d012      	beq.n	80215ec <__gethex+0x218>
 80215c6:	9b04      	ldr	r3, [sp, #16]
 80215c8:	2b20      	cmp	r3, #32
 80215ca:	d104      	bne.n	80215d6 <__gethex+0x202>
 80215cc:	9b05      	ldr	r3, [sp, #20]
 80215ce:	c340      	stmia	r3!, {r6}
 80215d0:	2600      	movs	r6, #0
 80215d2:	9305      	str	r3, [sp, #20]
 80215d4:	9604      	str	r6, [sp, #16]
 80215d6:	7820      	ldrb	r0, [r4, #0]
 80215d8:	f7ff fee7 	bl	80213aa <__hexdig_fun>
 80215dc:	230f      	movs	r3, #15
 80215de:	4018      	ands	r0, r3
 80215e0:	9b04      	ldr	r3, [sp, #16]
 80215e2:	4098      	lsls	r0, r3
 80215e4:	3304      	adds	r3, #4
 80215e6:	4306      	orrs	r6, r0
 80215e8:	9304      	str	r3, [sp, #16]
 80215ea:	e7ac      	b.n	8021546 <__gethex+0x172>
 80215ec:	9b00      	ldr	r3, [sp, #0]
 80215ee:	42a3      	cmp	r3, r4
 80215f0:	d8e9      	bhi.n	80215c6 <__gethex+0x1f2>
 80215f2:	2201      	movs	r2, #1
 80215f4:	0020      	movs	r0, r4
 80215f6:	492b      	ldr	r1, [pc, #172]	@ (80216a4 <__gethex+0x2d0>)
 80215f8:	f7fe fee2 	bl	80203c0 <strncmp>
 80215fc:	2800      	cmp	r0, #0
 80215fe:	d1e2      	bne.n	80215c6 <__gethex+0x1f2>
 8021600:	e7a1      	b.n	8021546 <__gethex+0x172>
 8021602:	0028      	movs	r0, r5
 8021604:	1eb1      	subs	r1, r6, #2
 8021606:	f000 ff4c 	bl	80224a2 <__any_on>
 802160a:	2800      	cmp	r0, #0
 802160c:	d0c4      	beq.n	8021598 <__gethex+0x1c4>
 802160e:	2403      	movs	r4, #3
 8021610:	e7c3      	b.n	802159a <__gethex+0x1c6>
 8021612:	9b00      	ldr	r3, [sp, #0]
 8021614:	2400      	movs	r4, #0
 8021616:	429e      	cmp	r6, r3
 8021618:	dac4      	bge.n	80215a4 <__gethex+0x1d0>
 802161a:	1b9e      	subs	r6, r3, r6
 802161c:	0029      	movs	r1, r5
 802161e:	0032      	movs	r2, r6
 8021620:	9803      	ldr	r0, [sp, #12]
 8021622:	f000 fd05 	bl	8022030 <__lshift>
 8021626:	0003      	movs	r3, r0
 8021628:	3314      	adds	r3, #20
 802162a:	0005      	movs	r5, r0
 802162c:	1bbf      	subs	r7, r7, r6
 802162e:	9302      	str	r3, [sp, #8]
 8021630:	e7b8      	b.n	80215a4 <__gethex+0x1d0>
 8021632:	9b01      	ldr	r3, [sp, #4]
 8021634:	685e      	ldr	r6, [r3, #4]
 8021636:	42be      	cmp	r6, r7
 8021638:	dd6f      	ble.n	802171a <__gethex+0x346>
 802163a:	9b00      	ldr	r3, [sp, #0]
 802163c:	1bf6      	subs	r6, r6, r7
 802163e:	42b3      	cmp	r3, r6
 8021640:	dc36      	bgt.n	80216b0 <__gethex+0x2dc>
 8021642:	9b01      	ldr	r3, [sp, #4]
 8021644:	68db      	ldr	r3, [r3, #12]
 8021646:	2b02      	cmp	r3, #2
 8021648:	d024      	beq.n	8021694 <__gethex+0x2c0>
 802164a:	2b03      	cmp	r3, #3
 802164c:	d026      	beq.n	802169c <__gethex+0x2c8>
 802164e:	2b01      	cmp	r3, #1
 8021650:	d117      	bne.n	8021682 <__gethex+0x2ae>
 8021652:	9b00      	ldr	r3, [sp, #0]
 8021654:	42b3      	cmp	r3, r6
 8021656:	d114      	bne.n	8021682 <__gethex+0x2ae>
 8021658:	2b01      	cmp	r3, #1
 802165a:	d10b      	bne.n	8021674 <__gethex+0x2a0>
 802165c:	9b01      	ldr	r3, [sp, #4]
 802165e:	9a07      	ldr	r2, [sp, #28]
 8021660:	685b      	ldr	r3, [r3, #4]
 8021662:	2662      	movs	r6, #98	@ 0x62
 8021664:	6013      	str	r3, [r2, #0]
 8021666:	2301      	movs	r3, #1
 8021668:	9a02      	ldr	r2, [sp, #8]
 802166a:	612b      	str	r3, [r5, #16]
 802166c:	6013      	str	r3, [r2, #0]
 802166e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021670:	601d      	str	r5, [r3, #0]
 8021672:	e739      	b.n	80214e8 <__gethex+0x114>
 8021674:	9900      	ldr	r1, [sp, #0]
 8021676:	0028      	movs	r0, r5
 8021678:	3901      	subs	r1, #1
 802167a:	f000 ff12 	bl	80224a2 <__any_on>
 802167e:	2800      	cmp	r0, #0
 8021680:	d1ec      	bne.n	802165c <__gethex+0x288>
 8021682:	0029      	movs	r1, r5
 8021684:	9803      	ldr	r0, [sp, #12]
 8021686:	f000 faa9 	bl	8021bdc <_Bfree>
 802168a:	2300      	movs	r3, #0
 802168c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802168e:	2650      	movs	r6, #80	@ 0x50
 8021690:	6013      	str	r3, [r2, #0]
 8021692:	e729      	b.n	80214e8 <__gethex+0x114>
 8021694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021696:	2b00      	cmp	r3, #0
 8021698:	d1f3      	bne.n	8021682 <__gethex+0x2ae>
 802169a:	e7df      	b.n	802165c <__gethex+0x288>
 802169c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802169e:	2b00      	cmp	r3, #0
 80216a0:	d1dc      	bne.n	802165c <__gethex+0x288>
 80216a2:	e7ee      	b.n	8021682 <__gethex+0x2ae>
 80216a4:	08025d84 	.word	0x08025d84
 80216a8:	08025f91 	.word	0x08025f91
 80216ac:	08025fa2 	.word	0x08025fa2
 80216b0:	1e77      	subs	r7, r6, #1
 80216b2:	2c00      	cmp	r4, #0
 80216b4:	d12f      	bne.n	8021716 <__gethex+0x342>
 80216b6:	2f00      	cmp	r7, #0
 80216b8:	d004      	beq.n	80216c4 <__gethex+0x2f0>
 80216ba:	0039      	movs	r1, r7
 80216bc:	0028      	movs	r0, r5
 80216be:	f000 fef0 	bl	80224a2 <__any_on>
 80216c2:	0004      	movs	r4, r0
 80216c4:	231f      	movs	r3, #31
 80216c6:	117a      	asrs	r2, r7, #5
 80216c8:	401f      	ands	r7, r3
 80216ca:	3b1e      	subs	r3, #30
 80216cc:	40bb      	lsls	r3, r7
 80216ce:	9902      	ldr	r1, [sp, #8]
 80216d0:	0092      	lsls	r2, r2, #2
 80216d2:	5852      	ldr	r2, [r2, r1]
 80216d4:	421a      	tst	r2, r3
 80216d6:	d001      	beq.n	80216dc <__gethex+0x308>
 80216d8:	2302      	movs	r3, #2
 80216da:	431c      	orrs	r4, r3
 80216dc:	9b00      	ldr	r3, [sp, #0]
 80216de:	0031      	movs	r1, r6
 80216e0:	1b9b      	subs	r3, r3, r6
 80216e2:	2602      	movs	r6, #2
 80216e4:	0028      	movs	r0, r5
 80216e6:	9300      	str	r3, [sp, #0]
 80216e8:	f7ff fe0c 	bl	8021304 <rshift>
 80216ec:	9b01      	ldr	r3, [sp, #4]
 80216ee:	685f      	ldr	r7, [r3, #4]
 80216f0:	2c00      	cmp	r4, #0
 80216f2:	d03f      	beq.n	8021774 <__gethex+0x3a0>
 80216f4:	9b01      	ldr	r3, [sp, #4]
 80216f6:	68db      	ldr	r3, [r3, #12]
 80216f8:	2b02      	cmp	r3, #2
 80216fa:	d010      	beq.n	802171e <__gethex+0x34a>
 80216fc:	2b03      	cmp	r3, #3
 80216fe:	d012      	beq.n	8021726 <__gethex+0x352>
 8021700:	2b01      	cmp	r3, #1
 8021702:	d106      	bne.n	8021712 <__gethex+0x33e>
 8021704:	07a2      	lsls	r2, r4, #30
 8021706:	d504      	bpl.n	8021712 <__gethex+0x33e>
 8021708:	9a02      	ldr	r2, [sp, #8]
 802170a:	6812      	ldr	r2, [r2, #0]
 802170c:	4314      	orrs	r4, r2
 802170e:	421c      	tst	r4, r3
 8021710:	d10c      	bne.n	802172c <__gethex+0x358>
 8021712:	2310      	movs	r3, #16
 8021714:	e02d      	b.n	8021772 <__gethex+0x39e>
 8021716:	2401      	movs	r4, #1
 8021718:	e7d4      	b.n	80216c4 <__gethex+0x2f0>
 802171a:	2601      	movs	r6, #1
 802171c:	e7e8      	b.n	80216f0 <__gethex+0x31c>
 802171e:	2301      	movs	r3, #1
 8021720:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021722:	1a9b      	subs	r3, r3, r2
 8021724:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021726:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021728:	2b00      	cmp	r3, #0
 802172a:	d0f2      	beq.n	8021712 <__gethex+0x33e>
 802172c:	692b      	ldr	r3, [r5, #16]
 802172e:	2000      	movs	r0, #0
 8021730:	9302      	str	r3, [sp, #8]
 8021732:	009b      	lsls	r3, r3, #2
 8021734:	9304      	str	r3, [sp, #16]
 8021736:	002b      	movs	r3, r5
 8021738:	9a04      	ldr	r2, [sp, #16]
 802173a:	3314      	adds	r3, #20
 802173c:	1899      	adds	r1, r3, r2
 802173e:	681a      	ldr	r2, [r3, #0]
 8021740:	1c54      	adds	r4, r2, #1
 8021742:	d01c      	beq.n	802177e <__gethex+0x3aa>
 8021744:	3201      	adds	r2, #1
 8021746:	601a      	str	r2, [r3, #0]
 8021748:	002b      	movs	r3, r5
 802174a:	3314      	adds	r3, #20
 802174c:	2e02      	cmp	r6, #2
 802174e:	d13f      	bne.n	80217d0 <__gethex+0x3fc>
 8021750:	9a01      	ldr	r2, [sp, #4]
 8021752:	9900      	ldr	r1, [sp, #0]
 8021754:	6812      	ldr	r2, [r2, #0]
 8021756:	3a01      	subs	r2, #1
 8021758:	428a      	cmp	r2, r1
 802175a:	d109      	bne.n	8021770 <__gethex+0x39c>
 802175c:	000a      	movs	r2, r1
 802175e:	201f      	movs	r0, #31
 8021760:	4010      	ands	r0, r2
 8021762:	2201      	movs	r2, #1
 8021764:	4082      	lsls	r2, r0
 8021766:	1149      	asrs	r1, r1, #5
 8021768:	0089      	lsls	r1, r1, #2
 802176a:	58cb      	ldr	r3, [r1, r3]
 802176c:	4213      	tst	r3, r2
 802176e:	d13d      	bne.n	80217ec <__gethex+0x418>
 8021770:	2320      	movs	r3, #32
 8021772:	431e      	orrs	r6, r3
 8021774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021776:	601d      	str	r5, [r3, #0]
 8021778:	9b07      	ldr	r3, [sp, #28]
 802177a:	601f      	str	r7, [r3, #0]
 802177c:	e6b4      	b.n	80214e8 <__gethex+0x114>
 802177e:	c301      	stmia	r3!, {r0}
 8021780:	4299      	cmp	r1, r3
 8021782:	d8dc      	bhi.n	802173e <__gethex+0x36a>
 8021784:	68ab      	ldr	r3, [r5, #8]
 8021786:	9a02      	ldr	r2, [sp, #8]
 8021788:	429a      	cmp	r2, r3
 802178a:	db18      	blt.n	80217be <__gethex+0x3ea>
 802178c:	6869      	ldr	r1, [r5, #4]
 802178e:	9803      	ldr	r0, [sp, #12]
 8021790:	3101      	adds	r1, #1
 8021792:	f000 f9df 	bl	8021b54 <_Balloc>
 8021796:	1e04      	subs	r4, r0, #0
 8021798:	d104      	bne.n	80217a4 <__gethex+0x3d0>
 802179a:	0022      	movs	r2, r4
 802179c:	2184      	movs	r1, #132	@ 0x84
 802179e:	4b1d      	ldr	r3, [pc, #116]	@ (8021814 <__gethex+0x440>)
 80217a0:	481d      	ldr	r0, [pc, #116]	@ (8021818 <__gethex+0x444>)
 80217a2:	e6c4      	b.n	802152e <__gethex+0x15a>
 80217a4:	0029      	movs	r1, r5
 80217a6:	692a      	ldr	r2, [r5, #16]
 80217a8:	310c      	adds	r1, #12
 80217aa:	3202      	adds	r2, #2
 80217ac:	0092      	lsls	r2, r2, #2
 80217ae:	300c      	adds	r0, #12
 80217b0:	f7fe fecc 	bl	802054c <memcpy>
 80217b4:	0029      	movs	r1, r5
 80217b6:	9803      	ldr	r0, [sp, #12]
 80217b8:	f000 fa10 	bl	8021bdc <_Bfree>
 80217bc:	0025      	movs	r5, r4
 80217be:	692b      	ldr	r3, [r5, #16]
 80217c0:	1c5a      	adds	r2, r3, #1
 80217c2:	612a      	str	r2, [r5, #16]
 80217c4:	2201      	movs	r2, #1
 80217c6:	3304      	adds	r3, #4
 80217c8:	009b      	lsls	r3, r3, #2
 80217ca:	18eb      	adds	r3, r5, r3
 80217cc:	605a      	str	r2, [r3, #4]
 80217ce:	e7bb      	b.n	8021748 <__gethex+0x374>
 80217d0:	692a      	ldr	r2, [r5, #16]
 80217d2:	9902      	ldr	r1, [sp, #8]
 80217d4:	428a      	cmp	r2, r1
 80217d6:	dd0b      	ble.n	80217f0 <__gethex+0x41c>
 80217d8:	2101      	movs	r1, #1
 80217da:	0028      	movs	r0, r5
 80217dc:	f7ff fd92 	bl	8021304 <rshift>
 80217e0:	9b01      	ldr	r3, [sp, #4]
 80217e2:	3701      	adds	r7, #1
 80217e4:	689b      	ldr	r3, [r3, #8]
 80217e6:	42bb      	cmp	r3, r7
 80217e8:	da00      	bge.n	80217ec <__gethex+0x418>
 80217ea:	e6df      	b.n	80215ac <__gethex+0x1d8>
 80217ec:	2601      	movs	r6, #1
 80217ee:	e7bf      	b.n	8021770 <__gethex+0x39c>
 80217f0:	221f      	movs	r2, #31
 80217f2:	9c00      	ldr	r4, [sp, #0]
 80217f4:	9900      	ldr	r1, [sp, #0]
 80217f6:	4014      	ands	r4, r2
 80217f8:	4211      	tst	r1, r2
 80217fa:	d0f7      	beq.n	80217ec <__gethex+0x418>
 80217fc:	9a04      	ldr	r2, [sp, #16]
 80217fe:	189b      	adds	r3, r3, r2
 8021800:	3b04      	subs	r3, #4
 8021802:	6818      	ldr	r0, [r3, #0]
 8021804:	f000 fa9e 	bl	8021d44 <__hi0bits>
 8021808:	2320      	movs	r3, #32
 802180a:	1b1b      	subs	r3, r3, r4
 802180c:	4298      	cmp	r0, r3
 802180e:	dbe3      	blt.n	80217d8 <__gethex+0x404>
 8021810:	e7ec      	b.n	80217ec <__gethex+0x418>
 8021812:	46c0      	nop			@ (mov r8, r8)
 8021814:	08025f91 	.word	0x08025f91
 8021818:	08025fa2 	.word	0x08025fa2

0802181c <L_shift>:
 802181c:	2308      	movs	r3, #8
 802181e:	b570      	push	{r4, r5, r6, lr}
 8021820:	2520      	movs	r5, #32
 8021822:	1a9a      	subs	r2, r3, r2
 8021824:	0092      	lsls	r2, r2, #2
 8021826:	1aad      	subs	r5, r5, r2
 8021828:	6843      	ldr	r3, [r0, #4]
 802182a:	6804      	ldr	r4, [r0, #0]
 802182c:	001e      	movs	r6, r3
 802182e:	40ae      	lsls	r6, r5
 8021830:	40d3      	lsrs	r3, r2
 8021832:	4334      	orrs	r4, r6
 8021834:	6004      	str	r4, [r0, #0]
 8021836:	6043      	str	r3, [r0, #4]
 8021838:	3004      	adds	r0, #4
 802183a:	4288      	cmp	r0, r1
 802183c:	d3f4      	bcc.n	8021828 <L_shift+0xc>
 802183e:	bd70      	pop	{r4, r5, r6, pc}

08021840 <__match>:
 8021840:	b530      	push	{r4, r5, lr}
 8021842:	6803      	ldr	r3, [r0, #0]
 8021844:	780c      	ldrb	r4, [r1, #0]
 8021846:	3301      	adds	r3, #1
 8021848:	2c00      	cmp	r4, #0
 802184a:	d102      	bne.n	8021852 <__match+0x12>
 802184c:	6003      	str	r3, [r0, #0]
 802184e:	2001      	movs	r0, #1
 8021850:	bd30      	pop	{r4, r5, pc}
 8021852:	781a      	ldrb	r2, [r3, #0]
 8021854:	0015      	movs	r5, r2
 8021856:	3d41      	subs	r5, #65	@ 0x41
 8021858:	2d19      	cmp	r5, #25
 802185a:	d800      	bhi.n	802185e <__match+0x1e>
 802185c:	3220      	adds	r2, #32
 802185e:	3101      	adds	r1, #1
 8021860:	42a2      	cmp	r2, r4
 8021862:	d0ef      	beq.n	8021844 <__match+0x4>
 8021864:	2000      	movs	r0, #0
 8021866:	e7f3      	b.n	8021850 <__match+0x10>

08021868 <__hexnan>:
 8021868:	b5f0      	push	{r4, r5, r6, r7, lr}
 802186a:	680b      	ldr	r3, [r1, #0]
 802186c:	b08b      	sub	sp, #44	@ 0x2c
 802186e:	9201      	str	r2, [sp, #4]
 8021870:	9901      	ldr	r1, [sp, #4]
 8021872:	115a      	asrs	r2, r3, #5
 8021874:	0092      	lsls	r2, r2, #2
 8021876:	188a      	adds	r2, r1, r2
 8021878:	9202      	str	r2, [sp, #8]
 802187a:	0019      	movs	r1, r3
 802187c:	221f      	movs	r2, #31
 802187e:	4011      	ands	r1, r2
 8021880:	9008      	str	r0, [sp, #32]
 8021882:	9106      	str	r1, [sp, #24]
 8021884:	4213      	tst	r3, r2
 8021886:	d002      	beq.n	802188e <__hexnan+0x26>
 8021888:	9b02      	ldr	r3, [sp, #8]
 802188a:	3304      	adds	r3, #4
 802188c:	9302      	str	r3, [sp, #8]
 802188e:	9b02      	ldr	r3, [sp, #8]
 8021890:	2500      	movs	r5, #0
 8021892:	1f1f      	subs	r7, r3, #4
 8021894:	003e      	movs	r6, r7
 8021896:	003c      	movs	r4, r7
 8021898:	9b08      	ldr	r3, [sp, #32]
 802189a:	603d      	str	r5, [r7, #0]
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	9507      	str	r5, [sp, #28]
 80218a0:	9305      	str	r3, [sp, #20]
 80218a2:	9503      	str	r5, [sp, #12]
 80218a4:	9b05      	ldr	r3, [sp, #20]
 80218a6:	3301      	adds	r3, #1
 80218a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80218aa:	9b05      	ldr	r3, [sp, #20]
 80218ac:	785b      	ldrb	r3, [r3, #1]
 80218ae:	9304      	str	r3, [sp, #16]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d028      	beq.n	8021906 <__hexnan+0x9e>
 80218b4:	9804      	ldr	r0, [sp, #16]
 80218b6:	f7ff fd78 	bl	80213aa <__hexdig_fun>
 80218ba:	2800      	cmp	r0, #0
 80218bc:	d155      	bne.n	802196a <__hexnan+0x102>
 80218be:	9b04      	ldr	r3, [sp, #16]
 80218c0:	2b20      	cmp	r3, #32
 80218c2:	d819      	bhi.n	80218f8 <__hexnan+0x90>
 80218c4:	9b03      	ldr	r3, [sp, #12]
 80218c6:	9a07      	ldr	r2, [sp, #28]
 80218c8:	4293      	cmp	r3, r2
 80218ca:	dd12      	ble.n	80218f2 <__hexnan+0x8a>
 80218cc:	42b4      	cmp	r4, r6
 80218ce:	d206      	bcs.n	80218de <__hexnan+0x76>
 80218d0:	2d07      	cmp	r5, #7
 80218d2:	dc04      	bgt.n	80218de <__hexnan+0x76>
 80218d4:	002a      	movs	r2, r5
 80218d6:	0031      	movs	r1, r6
 80218d8:	0020      	movs	r0, r4
 80218da:	f7ff ff9f 	bl	802181c <L_shift>
 80218de:	9b01      	ldr	r3, [sp, #4]
 80218e0:	2508      	movs	r5, #8
 80218e2:	429c      	cmp	r4, r3
 80218e4:	d905      	bls.n	80218f2 <__hexnan+0x8a>
 80218e6:	1f26      	subs	r6, r4, #4
 80218e8:	2500      	movs	r5, #0
 80218ea:	0034      	movs	r4, r6
 80218ec:	9b03      	ldr	r3, [sp, #12]
 80218ee:	6035      	str	r5, [r6, #0]
 80218f0:	9307      	str	r3, [sp, #28]
 80218f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218f4:	9305      	str	r3, [sp, #20]
 80218f6:	e7d5      	b.n	80218a4 <__hexnan+0x3c>
 80218f8:	9b04      	ldr	r3, [sp, #16]
 80218fa:	2b29      	cmp	r3, #41	@ 0x29
 80218fc:	d15a      	bne.n	80219b4 <__hexnan+0x14c>
 80218fe:	9b05      	ldr	r3, [sp, #20]
 8021900:	9a08      	ldr	r2, [sp, #32]
 8021902:	3302      	adds	r3, #2
 8021904:	6013      	str	r3, [r2, #0]
 8021906:	9b03      	ldr	r3, [sp, #12]
 8021908:	2b00      	cmp	r3, #0
 802190a:	d053      	beq.n	80219b4 <__hexnan+0x14c>
 802190c:	42b4      	cmp	r4, r6
 802190e:	d206      	bcs.n	802191e <__hexnan+0xb6>
 8021910:	2d07      	cmp	r5, #7
 8021912:	dc04      	bgt.n	802191e <__hexnan+0xb6>
 8021914:	002a      	movs	r2, r5
 8021916:	0031      	movs	r1, r6
 8021918:	0020      	movs	r0, r4
 802191a:	f7ff ff7f 	bl	802181c <L_shift>
 802191e:	9b01      	ldr	r3, [sp, #4]
 8021920:	429c      	cmp	r4, r3
 8021922:	d936      	bls.n	8021992 <__hexnan+0x12a>
 8021924:	001a      	movs	r2, r3
 8021926:	0023      	movs	r3, r4
 8021928:	cb02      	ldmia	r3!, {r1}
 802192a:	c202      	stmia	r2!, {r1}
 802192c:	429f      	cmp	r7, r3
 802192e:	d2fb      	bcs.n	8021928 <__hexnan+0xc0>
 8021930:	9b02      	ldr	r3, [sp, #8]
 8021932:	1c61      	adds	r1, r4, #1
 8021934:	1eda      	subs	r2, r3, #3
 8021936:	2304      	movs	r3, #4
 8021938:	4291      	cmp	r1, r2
 802193a:	d805      	bhi.n	8021948 <__hexnan+0xe0>
 802193c:	9b02      	ldr	r3, [sp, #8]
 802193e:	3b04      	subs	r3, #4
 8021940:	1b1b      	subs	r3, r3, r4
 8021942:	089b      	lsrs	r3, r3, #2
 8021944:	3301      	adds	r3, #1
 8021946:	009b      	lsls	r3, r3, #2
 8021948:	9a01      	ldr	r2, [sp, #4]
 802194a:	18d3      	adds	r3, r2, r3
 802194c:	2200      	movs	r2, #0
 802194e:	c304      	stmia	r3!, {r2}
 8021950:	429f      	cmp	r7, r3
 8021952:	d2fc      	bcs.n	802194e <__hexnan+0xe6>
 8021954:	683b      	ldr	r3, [r7, #0]
 8021956:	2b00      	cmp	r3, #0
 8021958:	d104      	bne.n	8021964 <__hexnan+0xfc>
 802195a:	9b01      	ldr	r3, [sp, #4]
 802195c:	429f      	cmp	r7, r3
 802195e:	d127      	bne.n	80219b0 <__hexnan+0x148>
 8021960:	2301      	movs	r3, #1
 8021962:	603b      	str	r3, [r7, #0]
 8021964:	2005      	movs	r0, #5
 8021966:	b00b      	add	sp, #44	@ 0x2c
 8021968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802196a:	9b03      	ldr	r3, [sp, #12]
 802196c:	3501      	adds	r5, #1
 802196e:	3301      	adds	r3, #1
 8021970:	9303      	str	r3, [sp, #12]
 8021972:	2d08      	cmp	r5, #8
 8021974:	dd06      	ble.n	8021984 <__hexnan+0x11c>
 8021976:	9b01      	ldr	r3, [sp, #4]
 8021978:	429c      	cmp	r4, r3
 802197a:	d9ba      	bls.n	80218f2 <__hexnan+0x8a>
 802197c:	2300      	movs	r3, #0
 802197e:	2501      	movs	r5, #1
 8021980:	3c04      	subs	r4, #4
 8021982:	6023      	str	r3, [r4, #0]
 8021984:	220f      	movs	r2, #15
 8021986:	6823      	ldr	r3, [r4, #0]
 8021988:	4010      	ands	r0, r2
 802198a:	011b      	lsls	r3, r3, #4
 802198c:	4303      	orrs	r3, r0
 802198e:	6023      	str	r3, [r4, #0]
 8021990:	e7af      	b.n	80218f2 <__hexnan+0x8a>
 8021992:	9b06      	ldr	r3, [sp, #24]
 8021994:	2b00      	cmp	r3, #0
 8021996:	d0dd      	beq.n	8021954 <__hexnan+0xec>
 8021998:	2320      	movs	r3, #32
 802199a:	9a06      	ldr	r2, [sp, #24]
 802199c:	9902      	ldr	r1, [sp, #8]
 802199e:	1a9b      	subs	r3, r3, r2
 80219a0:	2201      	movs	r2, #1
 80219a2:	4252      	negs	r2, r2
 80219a4:	40da      	lsrs	r2, r3
 80219a6:	3904      	subs	r1, #4
 80219a8:	680b      	ldr	r3, [r1, #0]
 80219aa:	4013      	ands	r3, r2
 80219ac:	600b      	str	r3, [r1, #0]
 80219ae:	e7d1      	b.n	8021954 <__hexnan+0xec>
 80219b0:	3f04      	subs	r7, #4
 80219b2:	e7cf      	b.n	8021954 <__hexnan+0xec>
 80219b4:	2004      	movs	r0, #4
 80219b6:	e7d6      	b.n	8021966 <__hexnan+0xfe>

080219b8 <malloc>:
 80219b8:	b510      	push	{r4, lr}
 80219ba:	4b03      	ldr	r3, [pc, #12]	@ (80219c8 <malloc+0x10>)
 80219bc:	0001      	movs	r1, r0
 80219be:	6818      	ldr	r0, [r3, #0]
 80219c0:	f000 f826 	bl	8021a10 <_malloc_r>
 80219c4:	bd10      	pop	{r4, pc}
 80219c6:	46c0      	nop			@ (mov r8, r8)
 80219c8:	200003d0 	.word	0x200003d0

080219cc <sbrk_aligned>:
 80219cc:	b570      	push	{r4, r5, r6, lr}
 80219ce:	4e0f      	ldr	r6, [pc, #60]	@ (8021a0c <sbrk_aligned+0x40>)
 80219d0:	000d      	movs	r5, r1
 80219d2:	6831      	ldr	r1, [r6, #0]
 80219d4:	0004      	movs	r4, r0
 80219d6:	2900      	cmp	r1, #0
 80219d8:	d102      	bne.n	80219e0 <sbrk_aligned+0x14>
 80219da:	f001 f989 	bl	8022cf0 <_sbrk_r>
 80219de:	6030      	str	r0, [r6, #0]
 80219e0:	0029      	movs	r1, r5
 80219e2:	0020      	movs	r0, r4
 80219e4:	f001 f984 	bl	8022cf0 <_sbrk_r>
 80219e8:	1c43      	adds	r3, r0, #1
 80219ea:	d103      	bne.n	80219f4 <sbrk_aligned+0x28>
 80219ec:	2501      	movs	r5, #1
 80219ee:	426d      	negs	r5, r5
 80219f0:	0028      	movs	r0, r5
 80219f2:	bd70      	pop	{r4, r5, r6, pc}
 80219f4:	2303      	movs	r3, #3
 80219f6:	1cc5      	adds	r5, r0, #3
 80219f8:	439d      	bics	r5, r3
 80219fa:	42a8      	cmp	r0, r5
 80219fc:	d0f8      	beq.n	80219f0 <sbrk_aligned+0x24>
 80219fe:	1a29      	subs	r1, r5, r0
 8021a00:	0020      	movs	r0, r4
 8021a02:	f001 f975 	bl	8022cf0 <_sbrk_r>
 8021a06:	3001      	adds	r0, #1
 8021a08:	d1f2      	bne.n	80219f0 <sbrk_aligned+0x24>
 8021a0a:	e7ef      	b.n	80219ec <sbrk_aligned+0x20>
 8021a0c:	200037c4 	.word	0x200037c4

08021a10 <_malloc_r>:
 8021a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a12:	2203      	movs	r2, #3
 8021a14:	1ccb      	adds	r3, r1, #3
 8021a16:	4393      	bics	r3, r2
 8021a18:	3308      	adds	r3, #8
 8021a1a:	0005      	movs	r5, r0
 8021a1c:	001f      	movs	r7, r3
 8021a1e:	2b0c      	cmp	r3, #12
 8021a20:	d234      	bcs.n	8021a8c <_malloc_r+0x7c>
 8021a22:	270c      	movs	r7, #12
 8021a24:	42b9      	cmp	r1, r7
 8021a26:	d833      	bhi.n	8021a90 <_malloc_r+0x80>
 8021a28:	0028      	movs	r0, r5
 8021a2a:	f000 f883 	bl	8021b34 <__malloc_lock>
 8021a2e:	4e37      	ldr	r6, [pc, #220]	@ (8021b0c <_malloc_r+0xfc>)
 8021a30:	6833      	ldr	r3, [r6, #0]
 8021a32:	001c      	movs	r4, r3
 8021a34:	2c00      	cmp	r4, #0
 8021a36:	d12f      	bne.n	8021a98 <_malloc_r+0x88>
 8021a38:	0039      	movs	r1, r7
 8021a3a:	0028      	movs	r0, r5
 8021a3c:	f7ff ffc6 	bl	80219cc <sbrk_aligned>
 8021a40:	0004      	movs	r4, r0
 8021a42:	1c43      	adds	r3, r0, #1
 8021a44:	d15f      	bne.n	8021b06 <_malloc_r+0xf6>
 8021a46:	6834      	ldr	r4, [r6, #0]
 8021a48:	9400      	str	r4, [sp, #0]
 8021a4a:	9b00      	ldr	r3, [sp, #0]
 8021a4c:	2b00      	cmp	r3, #0
 8021a4e:	d14a      	bne.n	8021ae6 <_malloc_r+0xd6>
 8021a50:	2c00      	cmp	r4, #0
 8021a52:	d052      	beq.n	8021afa <_malloc_r+0xea>
 8021a54:	6823      	ldr	r3, [r4, #0]
 8021a56:	0028      	movs	r0, r5
 8021a58:	18e3      	adds	r3, r4, r3
 8021a5a:	9900      	ldr	r1, [sp, #0]
 8021a5c:	9301      	str	r3, [sp, #4]
 8021a5e:	f001 f947 	bl	8022cf0 <_sbrk_r>
 8021a62:	9b01      	ldr	r3, [sp, #4]
 8021a64:	4283      	cmp	r3, r0
 8021a66:	d148      	bne.n	8021afa <_malloc_r+0xea>
 8021a68:	6823      	ldr	r3, [r4, #0]
 8021a6a:	0028      	movs	r0, r5
 8021a6c:	1aff      	subs	r7, r7, r3
 8021a6e:	0039      	movs	r1, r7
 8021a70:	f7ff ffac 	bl	80219cc <sbrk_aligned>
 8021a74:	3001      	adds	r0, #1
 8021a76:	d040      	beq.n	8021afa <_malloc_r+0xea>
 8021a78:	6823      	ldr	r3, [r4, #0]
 8021a7a:	19db      	adds	r3, r3, r7
 8021a7c:	6023      	str	r3, [r4, #0]
 8021a7e:	6833      	ldr	r3, [r6, #0]
 8021a80:	685a      	ldr	r2, [r3, #4]
 8021a82:	2a00      	cmp	r2, #0
 8021a84:	d133      	bne.n	8021aee <_malloc_r+0xde>
 8021a86:	9b00      	ldr	r3, [sp, #0]
 8021a88:	6033      	str	r3, [r6, #0]
 8021a8a:	e019      	b.n	8021ac0 <_malloc_r+0xb0>
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	dac9      	bge.n	8021a24 <_malloc_r+0x14>
 8021a90:	230c      	movs	r3, #12
 8021a92:	602b      	str	r3, [r5, #0]
 8021a94:	2000      	movs	r0, #0
 8021a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a98:	6821      	ldr	r1, [r4, #0]
 8021a9a:	1bc9      	subs	r1, r1, r7
 8021a9c:	d420      	bmi.n	8021ae0 <_malloc_r+0xd0>
 8021a9e:	290b      	cmp	r1, #11
 8021aa0:	d90a      	bls.n	8021ab8 <_malloc_r+0xa8>
 8021aa2:	19e2      	adds	r2, r4, r7
 8021aa4:	6027      	str	r7, [r4, #0]
 8021aa6:	42a3      	cmp	r3, r4
 8021aa8:	d104      	bne.n	8021ab4 <_malloc_r+0xa4>
 8021aaa:	6032      	str	r2, [r6, #0]
 8021aac:	6863      	ldr	r3, [r4, #4]
 8021aae:	6011      	str	r1, [r2, #0]
 8021ab0:	6053      	str	r3, [r2, #4]
 8021ab2:	e005      	b.n	8021ac0 <_malloc_r+0xb0>
 8021ab4:	605a      	str	r2, [r3, #4]
 8021ab6:	e7f9      	b.n	8021aac <_malloc_r+0x9c>
 8021ab8:	6862      	ldr	r2, [r4, #4]
 8021aba:	42a3      	cmp	r3, r4
 8021abc:	d10e      	bne.n	8021adc <_malloc_r+0xcc>
 8021abe:	6032      	str	r2, [r6, #0]
 8021ac0:	0028      	movs	r0, r5
 8021ac2:	f000 f83f 	bl	8021b44 <__malloc_unlock>
 8021ac6:	0020      	movs	r0, r4
 8021ac8:	2207      	movs	r2, #7
 8021aca:	300b      	adds	r0, #11
 8021acc:	1d23      	adds	r3, r4, #4
 8021ace:	4390      	bics	r0, r2
 8021ad0:	1ac2      	subs	r2, r0, r3
 8021ad2:	4298      	cmp	r0, r3
 8021ad4:	d0df      	beq.n	8021a96 <_malloc_r+0x86>
 8021ad6:	1a1b      	subs	r3, r3, r0
 8021ad8:	50a3      	str	r3, [r4, r2]
 8021ada:	e7dc      	b.n	8021a96 <_malloc_r+0x86>
 8021adc:	605a      	str	r2, [r3, #4]
 8021ade:	e7ef      	b.n	8021ac0 <_malloc_r+0xb0>
 8021ae0:	0023      	movs	r3, r4
 8021ae2:	6864      	ldr	r4, [r4, #4]
 8021ae4:	e7a6      	b.n	8021a34 <_malloc_r+0x24>
 8021ae6:	9c00      	ldr	r4, [sp, #0]
 8021ae8:	6863      	ldr	r3, [r4, #4]
 8021aea:	9300      	str	r3, [sp, #0]
 8021aec:	e7ad      	b.n	8021a4a <_malloc_r+0x3a>
 8021aee:	001a      	movs	r2, r3
 8021af0:	685b      	ldr	r3, [r3, #4]
 8021af2:	42a3      	cmp	r3, r4
 8021af4:	d1fb      	bne.n	8021aee <_malloc_r+0xde>
 8021af6:	2300      	movs	r3, #0
 8021af8:	e7da      	b.n	8021ab0 <_malloc_r+0xa0>
 8021afa:	230c      	movs	r3, #12
 8021afc:	0028      	movs	r0, r5
 8021afe:	602b      	str	r3, [r5, #0]
 8021b00:	f000 f820 	bl	8021b44 <__malloc_unlock>
 8021b04:	e7c6      	b.n	8021a94 <_malloc_r+0x84>
 8021b06:	6007      	str	r7, [r0, #0]
 8021b08:	e7da      	b.n	8021ac0 <_malloc_r+0xb0>
 8021b0a:	46c0      	nop			@ (mov r8, r8)
 8021b0c:	200037c8 	.word	0x200037c8

08021b10 <__ascii_mbtowc>:
 8021b10:	b082      	sub	sp, #8
 8021b12:	2900      	cmp	r1, #0
 8021b14:	d100      	bne.n	8021b18 <__ascii_mbtowc+0x8>
 8021b16:	a901      	add	r1, sp, #4
 8021b18:	1e10      	subs	r0, r2, #0
 8021b1a:	d006      	beq.n	8021b2a <__ascii_mbtowc+0x1a>
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	d006      	beq.n	8021b2e <__ascii_mbtowc+0x1e>
 8021b20:	7813      	ldrb	r3, [r2, #0]
 8021b22:	600b      	str	r3, [r1, #0]
 8021b24:	7810      	ldrb	r0, [r2, #0]
 8021b26:	1e43      	subs	r3, r0, #1
 8021b28:	4198      	sbcs	r0, r3
 8021b2a:	b002      	add	sp, #8
 8021b2c:	4770      	bx	lr
 8021b2e:	2002      	movs	r0, #2
 8021b30:	4240      	negs	r0, r0
 8021b32:	e7fa      	b.n	8021b2a <__ascii_mbtowc+0x1a>

08021b34 <__malloc_lock>:
 8021b34:	b510      	push	{r4, lr}
 8021b36:	4802      	ldr	r0, [pc, #8]	@ (8021b40 <__malloc_lock+0xc>)
 8021b38:	f7fe fcfb 	bl	8020532 <__retarget_lock_acquire_recursive>
 8021b3c:	bd10      	pop	{r4, pc}
 8021b3e:	46c0      	nop			@ (mov r8, r8)
 8021b40:	200037c0 	.word	0x200037c0

08021b44 <__malloc_unlock>:
 8021b44:	b510      	push	{r4, lr}
 8021b46:	4802      	ldr	r0, [pc, #8]	@ (8021b50 <__malloc_unlock+0xc>)
 8021b48:	f7fe fcf4 	bl	8020534 <__retarget_lock_release_recursive>
 8021b4c:	bd10      	pop	{r4, pc}
 8021b4e:	46c0      	nop			@ (mov r8, r8)
 8021b50:	200037c0 	.word	0x200037c0

08021b54 <_Balloc>:
 8021b54:	b570      	push	{r4, r5, r6, lr}
 8021b56:	69c5      	ldr	r5, [r0, #28]
 8021b58:	0006      	movs	r6, r0
 8021b5a:	000c      	movs	r4, r1
 8021b5c:	2d00      	cmp	r5, #0
 8021b5e:	d10e      	bne.n	8021b7e <_Balloc+0x2a>
 8021b60:	2010      	movs	r0, #16
 8021b62:	f7ff ff29 	bl	80219b8 <malloc>
 8021b66:	1e02      	subs	r2, r0, #0
 8021b68:	61f0      	str	r0, [r6, #28]
 8021b6a:	d104      	bne.n	8021b76 <_Balloc+0x22>
 8021b6c:	216b      	movs	r1, #107	@ 0x6b
 8021b6e:	4b19      	ldr	r3, [pc, #100]	@ (8021bd4 <_Balloc+0x80>)
 8021b70:	4819      	ldr	r0, [pc, #100]	@ (8021bd8 <_Balloc+0x84>)
 8021b72:	f001 f8cf 	bl	8022d14 <__assert_func>
 8021b76:	6045      	str	r5, [r0, #4]
 8021b78:	6085      	str	r5, [r0, #8]
 8021b7a:	6005      	str	r5, [r0, #0]
 8021b7c:	60c5      	str	r5, [r0, #12]
 8021b7e:	69f5      	ldr	r5, [r6, #28]
 8021b80:	68eb      	ldr	r3, [r5, #12]
 8021b82:	2b00      	cmp	r3, #0
 8021b84:	d013      	beq.n	8021bae <_Balloc+0x5a>
 8021b86:	69f3      	ldr	r3, [r6, #28]
 8021b88:	00a2      	lsls	r2, r4, #2
 8021b8a:	68db      	ldr	r3, [r3, #12]
 8021b8c:	189b      	adds	r3, r3, r2
 8021b8e:	6818      	ldr	r0, [r3, #0]
 8021b90:	2800      	cmp	r0, #0
 8021b92:	d118      	bne.n	8021bc6 <_Balloc+0x72>
 8021b94:	2101      	movs	r1, #1
 8021b96:	000d      	movs	r5, r1
 8021b98:	40a5      	lsls	r5, r4
 8021b9a:	1d6a      	adds	r2, r5, #5
 8021b9c:	0030      	movs	r0, r6
 8021b9e:	0092      	lsls	r2, r2, #2
 8021ba0:	f001 f8d6 	bl	8022d50 <_calloc_r>
 8021ba4:	2800      	cmp	r0, #0
 8021ba6:	d00c      	beq.n	8021bc2 <_Balloc+0x6e>
 8021ba8:	6044      	str	r4, [r0, #4]
 8021baa:	6085      	str	r5, [r0, #8]
 8021bac:	e00d      	b.n	8021bca <_Balloc+0x76>
 8021bae:	2221      	movs	r2, #33	@ 0x21
 8021bb0:	2104      	movs	r1, #4
 8021bb2:	0030      	movs	r0, r6
 8021bb4:	f001 f8cc 	bl	8022d50 <_calloc_r>
 8021bb8:	69f3      	ldr	r3, [r6, #28]
 8021bba:	60e8      	str	r0, [r5, #12]
 8021bbc:	68db      	ldr	r3, [r3, #12]
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	d1e1      	bne.n	8021b86 <_Balloc+0x32>
 8021bc2:	2000      	movs	r0, #0
 8021bc4:	bd70      	pop	{r4, r5, r6, pc}
 8021bc6:	6802      	ldr	r2, [r0, #0]
 8021bc8:	601a      	str	r2, [r3, #0]
 8021bca:	2300      	movs	r3, #0
 8021bcc:	6103      	str	r3, [r0, #16]
 8021bce:	60c3      	str	r3, [r0, #12]
 8021bd0:	e7f8      	b.n	8021bc4 <_Balloc+0x70>
 8021bd2:	46c0      	nop			@ (mov r8, r8)
 8021bd4:	08025f22 	.word	0x08025f22
 8021bd8:	08026002 	.word	0x08026002

08021bdc <_Bfree>:
 8021bdc:	b570      	push	{r4, r5, r6, lr}
 8021bde:	69c6      	ldr	r6, [r0, #28]
 8021be0:	0005      	movs	r5, r0
 8021be2:	000c      	movs	r4, r1
 8021be4:	2e00      	cmp	r6, #0
 8021be6:	d10e      	bne.n	8021c06 <_Bfree+0x2a>
 8021be8:	2010      	movs	r0, #16
 8021bea:	f7ff fee5 	bl	80219b8 <malloc>
 8021bee:	1e02      	subs	r2, r0, #0
 8021bf0:	61e8      	str	r0, [r5, #28]
 8021bf2:	d104      	bne.n	8021bfe <_Bfree+0x22>
 8021bf4:	218f      	movs	r1, #143	@ 0x8f
 8021bf6:	4b09      	ldr	r3, [pc, #36]	@ (8021c1c <_Bfree+0x40>)
 8021bf8:	4809      	ldr	r0, [pc, #36]	@ (8021c20 <_Bfree+0x44>)
 8021bfa:	f001 f88b 	bl	8022d14 <__assert_func>
 8021bfe:	6046      	str	r6, [r0, #4]
 8021c00:	6086      	str	r6, [r0, #8]
 8021c02:	6006      	str	r6, [r0, #0]
 8021c04:	60c6      	str	r6, [r0, #12]
 8021c06:	2c00      	cmp	r4, #0
 8021c08:	d007      	beq.n	8021c1a <_Bfree+0x3e>
 8021c0a:	69eb      	ldr	r3, [r5, #28]
 8021c0c:	6862      	ldr	r2, [r4, #4]
 8021c0e:	68db      	ldr	r3, [r3, #12]
 8021c10:	0092      	lsls	r2, r2, #2
 8021c12:	189b      	adds	r3, r3, r2
 8021c14:	681a      	ldr	r2, [r3, #0]
 8021c16:	6022      	str	r2, [r4, #0]
 8021c18:	601c      	str	r4, [r3, #0]
 8021c1a:	bd70      	pop	{r4, r5, r6, pc}
 8021c1c:	08025f22 	.word	0x08025f22
 8021c20:	08026002 	.word	0x08026002

08021c24 <__multadd>:
 8021c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c26:	000f      	movs	r7, r1
 8021c28:	9001      	str	r0, [sp, #4]
 8021c2a:	000c      	movs	r4, r1
 8021c2c:	001e      	movs	r6, r3
 8021c2e:	2000      	movs	r0, #0
 8021c30:	690d      	ldr	r5, [r1, #16]
 8021c32:	3714      	adds	r7, #20
 8021c34:	683b      	ldr	r3, [r7, #0]
 8021c36:	3001      	adds	r0, #1
 8021c38:	b299      	uxth	r1, r3
 8021c3a:	4351      	muls	r1, r2
 8021c3c:	0c1b      	lsrs	r3, r3, #16
 8021c3e:	4353      	muls	r3, r2
 8021c40:	1989      	adds	r1, r1, r6
 8021c42:	0c0e      	lsrs	r6, r1, #16
 8021c44:	199b      	adds	r3, r3, r6
 8021c46:	0c1e      	lsrs	r6, r3, #16
 8021c48:	b289      	uxth	r1, r1
 8021c4a:	041b      	lsls	r3, r3, #16
 8021c4c:	185b      	adds	r3, r3, r1
 8021c4e:	c708      	stmia	r7!, {r3}
 8021c50:	4285      	cmp	r5, r0
 8021c52:	dcef      	bgt.n	8021c34 <__multadd+0x10>
 8021c54:	2e00      	cmp	r6, #0
 8021c56:	d022      	beq.n	8021c9e <__multadd+0x7a>
 8021c58:	68a3      	ldr	r3, [r4, #8]
 8021c5a:	42ab      	cmp	r3, r5
 8021c5c:	dc19      	bgt.n	8021c92 <__multadd+0x6e>
 8021c5e:	6861      	ldr	r1, [r4, #4]
 8021c60:	9801      	ldr	r0, [sp, #4]
 8021c62:	3101      	adds	r1, #1
 8021c64:	f7ff ff76 	bl	8021b54 <_Balloc>
 8021c68:	1e07      	subs	r7, r0, #0
 8021c6a:	d105      	bne.n	8021c78 <__multadd+0x54>
 8021c6c:	003a      	movs	r2, r7
 8021c6e:	21ba      	movs	r1, #186	@ 0xba
 8021c70:	4b0c      	ldr	r3, [pc, #48]	@ (8021ca4 <__multadd+0x80>)
 8021c72:	480d      	ldr	r0, [pc, #52]	@ (8021ca8 <__multadd+0x84>)
 8021c74:	f001 f84e 	bl	8022d14 <__assert_func>
 8021c78:	0021      	movs	r1, r4
 8021c7a:	6922      	ldr	r2, [r4, #16]
 8021c7c:	310c      	adds	r1, #12
 8021c7e:	3202      	adds	r2, #2
 8021c80:	0092      	lsls	r2, r2, #2
 8021c82:	300c      	adds	r0, #12
 8021c84:	f7fe fc62 	bl	802054c <memcpy>
 8021c88:	0021      	movs	r1, r4
 8021c8a:	9801      	ldr	r0, [sp, #4]
 8021c8c:	f7ff ffa6 	bl	8021bdc <_Bfree>
 8021c90:	003c      	movs	r4, r7
 8021c92:	1d2b      	adds	r3, r5, #4
 8021c94:	009b      	lsls	r3, r3, #2
 8021c96:	18e3      	adds	r3, r4, r3
 8021c98:	3501      	adds	r5, #1
 8021c9a:	605e      	str	r6, [r3, #4]
 8021c9c:	6125      	str	r5, [r4, #16]
 8021c9e:	0020      	movs	r0, r4
 8021ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ca2:	46c0      	nop			@ (mov r8, r8)
 8021ca4:	08025f91 	.word	0x08025f91
 8021ca8:	08026002 	.word	0x08026002

08021cac <__s2b>:
 8021cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021cae:	0007      	movs	r7, r0
 8021cb0:	0018      	movs	r0, r3
 8021cb2:	000c      	movs	r4, r1
 8021cb4:	3008      	adds	r0, #8
 8021cb6:	2109      	movs	r1, #9
 8021cb8:	9301      	str	r3, [sp, #4]
 8021cba:	0015      	movs	r5, r2
 8021cbc:	f7de fafc 	bl	80002b8 <__divsi3>
 8021cc0:	2301      	movs	r3, #1
 8021cc2:	2100      	movs	r1, #0
 8021cc4:	4283      	cmp	r3, r0
 8021cc6:	db0a      	blt.n	8021cde <__s2b+0x32>
 8021cc8:	0038      	movs	r0, r7
 8021cca:	f7ff ff43 	bl	8021b54 <_Balloc>
 8021cce:	1e01      	subs	r1, r0, #0
 8021cd0:	d108      	bne.n	8021ce4 <__s2b+0x38>
 8021cd2:	000a      	movs	r2, r1
 8021cd4:	4b19      	ldr	r3, [pc, #100]	@ (8021d3c <__s2b+0x90>)
 8021cd6:	481a      	ldr	r0, [pc, #104]	@ (8021d40 <__s2b+0x94>)
 8021cd8:	31d3      	adds	r1, #211	@ 0xd3
 8021cda:	f001 f81b 	bl	8022d14 <__assert_func>
 8021cde:	005b      	lsls	r3, r3, #1
 8021ce0:	3101      	adds	r1, #1
 8021ce2:	e7ef      	b.n	8021cc4 <__s2b+0x18>
 8021ce4:	9b08      	ldr	r3, [sp, #32]
 8021ce6:	6143      	str	r3, [r0, #20]
 8021ce8:	2301      	movs	r3, #1
 8021cea:	6103      	str	r3, [r0, #16]
 8021cec:	2d09      	cmp	r5, #9
 8021cee:	dd18      	ble.n	8021d22 <__s2b+0x76>
 8021cf0:	0023      	movs	r3, r4
 8021cf2:	3309      	adds	r3, #9
 8021cf4:	001e      	movs	r6, r3
 8021cf6:	9300      	str	r3, [sp, #0]
 8021cf8:	1964      	adds	r4, r4, r5
 8021cfa:	7833      	ldrb	r3, [r6, #0]
 8021cfc:	220a      	movs	r2, #10
 8021cfe:	0038      	movs	r0, r7
 8021d00:	3b30      	subs	r3, #48	@ 0x30
 8021d02:	f7ff ff8f 	bl	8021c24 <__multadd>
 8021d06:	3601      	adds	r6, #1
 8021d08:	0001      	movs	r1, r0
 8021d0a:	42a6      	cmp	r6, r4
 8021d0c:	d1f5      	bne.n	8021cfa <__s2b+0x4e>
 8021d0e:	002c      	movs	r4, r5
 8021d10:	9b00      	ldr	r3, [sp, #0]
 8021d12:	3c08      	subs	r4, #8
 8021d14:	191c      	adds	r4, r3, r4
 8021d16:	002e      	movs	r6, r5
 8021d18:	9b01      	ldr	r3, [sp, #4]
 8021d1a:	429e      	cmp	r6, r3
 8021d1c:	db04      	blt.n	8021d28 <__s2b+0x7c>
 8021d1e:	0008      	movs	r0, r1
 8021d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021d22:	2509      	movs	r5, #9
 8021d24:	340a      	adds	r4, #10
 8021d26:	e7f6      	b.n	8021d16 <__s2b+0x6a>
 8021d28:	1b63      	subs	r3, r4, r5
 8021d2a:	5d9b      	ldrb	r3, [r3, r6]
 8021d2c:	220a      	movs	r2, #10
 8021d2e:	0038      	movs	r0, r7
 8021d30:	3b30      	subs	r3, #48	@ 0x30
 8021d32:	f7ff ff77 	bl	8021c24 <__multadd>
 8021d36:	3601      	adds	r6, #1
 8021d38:	0001      	movs	r1, r0
 8021d3a:	e7ed      	b.n	8021d18 <__s2b+0x6c>
 8021d3c:	08025f91 	.word	0x08025f91
 8021d40:	08026002 	.word	0x08026002

08021d44 <__hi0bits>:
 8021d44:	2280      	movs	r2, #128	@ 0x80
 8021d46:	0003      	movs	r3, r0
 8021d48:	0252      	lsls	r2, r2, #9
 8021d4a:	2000      	movs	r0, #0
 8021d4c:	4293      	cmp	r3, r2
 8021d4e:	d201      	bcs.n	8021d54 <__hi0bits+0x10>
 8021d50:	041b      	lsls	r3, r3, #16
 8021d52:	3010      	adds	r0, #16
 8021d54:	2280      	movs	r2, #128	@ 0x80
 8021d56:	0452      	lsls	r2, r2, #17
 8021d58:	4293      	cmp	r3, r2
 8021d5a:	d201      	bcs.n	8021d60 <__hi0bits+0x1c>
 8021d5c:	3008      	adds	r0, #8
 8021d5e:	021b      	lsls	r3, r3, #8
 8021d60:	2280      	movs	r2, #128	@ 0x80
 8021d62:	0552      	lsls	r2, r2, #21
 8021d64:	4293      	cmp	r3, r2
 8021d66:	d201      	bcs.n	8021d6c <__hi0bits+0x28>
 8021d68:	3004      	adds	r0, #4
 8021d6a:	011b      	lsls	r3, r3, #4
 8021d6c:	2280      	movs	r2, #128	@ 0x80
 8021d6e:	05d2      	lsls	r2, r2, #23
 8021d70:	4293      	cmp	r3, r2
 8021d72:	d201      	bcs.n	8021d78 <__hi0bits+0x34>
 8021d74:	3002      	adds	r0, #2
 8021d76:	009b      	lsls	r3, r3, #2
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	db03      	blt.n	8021d84 <__hi0bits+0x40>
 8021d7c:	3001      	adds	r0, #1
 8021d7e:	4213      	tst	r3, r2
 8021d80:	d100      	bne.n	8021d84 <__hi0bits+0x40>
 8021d82:	2020      	movs	r0, #32
 8021d84:	4770      	bx	lr

08021d86 <__lo0bits>:
 8021d86:	6803      	ldr	r3, [r0, #0]
 8021d88:	0001      	movs	r1, r0
 8021d8a:	2207      	movs	r2, #7
 8021d8c:	0018      	movs	r0, r3
 8021d8e:	4010      	ands	r0, r2
 8021d90:	4213      	tst	r3, r2
 8021d92:	d00d      	beq.n	8021db0 <__lo0bits+0x2a>
 8021d94:	3a06      	subs	r2, #6
 8021d96:	2000      	movs	r0, #0
 8021d98:	4213      	tst	r3, r2
 8021d9a:	d105      	bne.n	8021da8 <__lo0bits+0x22>
 8021d9c:	3002      	adds	r0, #2
 8021d9e:	4203      	tst	r3, r0
 8021da0:	d003      	beq.n	8021daa <__lo0bits+0x24>
 8021da2:	40d3      	lsrs	r3, r2
 8021da4:	0010      	movs	r0, r2
 8021da6:	600b      	str	r3, [r1, #0]
 8021da8:	4770      	bx	lr
 8021daa:	089b      	lsrs	r3, r3, #2
 8021dac:	600b      	str	r3, [r1, #0]
 8021dae:	e7fb      	b.n	8021da8 <__lo0bits+0x22>
 8021db0:	b29a      	uxth	r2, r3
 8021db2:	2a00      	cmp	r2, #0
 8021db4:	d101      	bne.n	8021dba <__lo0bits+0x34>
 8021db6:	2010      	movs	r0, #16
 8021db8:	0c1b      	lsrs	r3, r3, #16
 8021dba:	b2da      	uxtb	r2, r3
 8021dbc:	2a00      	cmp	r2, #0
 8021dbe:	d101      	bne.n	8021dc4 <__lo0bits+0x3e>
 8021dc0:	3008      	adds	r0, #8
 8021dc2:	0a1b      	lsrs	r3, r3, #8
 8021dc4:	071a      	lsls	r2, r3, #28
 8021dc6:	d101      	bne.n	8021dcc <__lo0bits+0x46>
 8021dc8:	3004      	adds	r0, #4
 8021dca:	091b      	lsrs	r3, r3, #4
 8021dcc:	079a      	lsls	r2, r3, #30
 8021dce:	d101      	bne.n	8021dd4 <__lo0bits+0x4e>
 8021dd0:	3002      	adds	r0, #2
 8021dd2:	089b      	lsrs	r3, r3, #2
 8021dd4:	07da      	lsls	r2, r3, #31
 8021dd6:	d4e9      	bmi.n	8021dac <__lo0bits+0x26>
 8021dd8:	3001      	adds	r0, #1
 8021dda:	085b      	lsrs	r3, r3, #1
 8021ddc:	d1e6      	bne.n	8021dac <__lo0bits+0x26>
 8021dde:	2020      	movs	r0, #32
 8021de0:	e7e2      	b.n	8021da8 <__lo0bits+0x22>
	...

08021de4 <__i2b>:
 8021de4:	b510      	push	{r4, lr}
 8021de6:	000c      	movs	r4, r1
 8021de8:	2101      	movs	r1, #1
 8021dea:	f7ff feb3 	bl	8021b54 <_Balloc>
 8021dee:	2800      	cmp	r0, #0
 8021df0:	d107      	bne.n	8021e02 <__i2b+0x1e>
 8021df2:	2146      	movs	r1, #70	@ 0x46
 8021df4:	4c05      	ldr	r4, [pc, #20]	@ (8021e0c <__i2b+0x28>)
 8021df6:	0002      	movs	r2, r0
 8021df8:	4b05      	ldr	r3, [pc, #20]	@ (8021e10 <__i2b+0x2c>)
 8021dfa:	0020      	movs	r0, r4
 8021dfc:	31ff      	adds	r1, #255	@ 0xff
 8021dfe:	f000 ff89 	bl	8022d14 <__assert_func>
 8021e02:	2301      	movs	r3, #1
 8021e04:	6144      	str	r4, [r0, #20]
 8021e06:	6103      	str	r3, [r0, #16]
 8021e08:	bd10      	pop	{r4, pc}
 8021e0a:	46c0      	nop			@ (mov r8, r8)
 8021e0c:	08026002 	.word	0x08026002
 8021e10:	08025f91 	.word	0x08025f91

08021e14 <__multiply>:
 8021e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e16:	0014      	movs	r4, r2
 8021e18:	690a      	ldr	r2, [r1, #16]
 8021e1a:	6923      	ldr	r3, [r4, #16]
 8021e1c:	000d      	movs	r5, r1
 8021e1e:	b08b      	sub	sp, #44	@ 0x2c
 8021e20:	429a      	cmp	r2, r3
 8021e22:	db02      	blt.n	8021e2a <__multiply+0x16>
 8021e24:	0023      	movs	r3, r4
 8021e26:	000c      	movs	r4, r1
 8021e28:	001d      	movs	r5, r3
 8021e2a:	6927      	ldr	r7, [r4, #16]
 8021e2c:	692e      	ldr	r6, [r5, #16]
 8021e2e:	6861      	ldr	r1, [r4, #4]
 8021e30:	19bb      	adds	r3, r7, r6
 8021e32:	9303      	str	r3, [sp, #12]
 8021e34:	68a3      	ldr	r3, [r4, #8]
 8021e36:	19ba      	adds	r2, r7, r6
 8021e38:	4293      	cmp	r3, r2
 8021e3a:	da00      	bge.n	8021e3e <__multiply+0x2a>
 8021e3c:	3101      	adds	r1, #1
 8021e3e:	f7ff fe89 	bl	8021b54 <_Balloc>
 8021e42:	9002      	str	r0, [sp, #8]
 8021e44:	2800      	cmp	r0, #0
 8021e46:	d106      	bne.n	8021e56 <__multiply+0x42>
 8021e48:	21b1      	movs	r1, #177	@ 0xb1
 8021e4a:	4b49      	ldr	r3, [pc, #292]	@ (8021f70 <__multiply+0x15c>)
 8021e4c:	4849      	ldr	r0, [pc, #292]	@ (8021f74 <__multiply+0x160>)
 8021e4e:	9a02      	ldr	r2, [sp, #8]
 8021e50:	0049      	lsls	r1, r1, #1
 8021e52:	f000 ff5f 	bl	8022d14 <__assert_func>
 8021e56:	9b02      	ldr	r3, [sp, #8]
 8021e58:	2200      	movs	r2, #0
 8021e5a:	3314      	adds	r3, #20
 8021e5c:	469c      	mov	ip, r3
 8021e5e:	19bb      	adds	r3, r7, r6
 8021e60:	009b      	lsls	r3, r3, #2
 8021e62:	4463      	add	r3, ip
 8021e64:	9304      	str	r3, [sp, #16]
 8021e66:	4663      	mov	r3, ip
 8021e68:	9904      	ldr	r1, [sp, #16]
 8021e6a:	428b      	cmp	r3, r1
 8021e6c:	d32a      	bcc.n	8021ec4 <__multiply+0xb0>
 8021e6e:	0023      	movs	r3, r4
 8021e70:	00bf      	lsls	r7, r7, #2
 8021e72:	3314      	adds	r3, #20
 8021e74:	3514      	adds	r5, #20
 8021e76:	9308      	str	r3, [sp, #32]
 8021e78:	00b6      	lsls	r6, r6, #2
 8021e7a:	19db      	adds	r3, r3, r7
 8021e7c:	9305      	str	r3, [sp, #20]
 8021e7e:	19ab      	adds	r3, r5, r6
 8021e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e82:	2304      	movs	r3, #4
 8021e84:	9306      	str	r3, [sp, #24]
 8021e86:	0023      	movs	r3, r4
 8021e88:	9a05      	ldr	r2, [sp, #20]
 8021e8a:	3315      	adds	r3, #21
 8021e8c:	9501      	str	r5, [sp, #4]
 8021e8e:	429a      	cmp	r2, r3
 8021e90:	d305      	bcc.n	8021e9e <__multiply+0x8a>
 8021e92:	1b13      	subs	r3, r2, r4
 8021e94:	3b15      	subs	r3, #21
 8021e96:	089b      	lsrs	r3, r3, #2
 8021e98:	3301      	adds	r3, #1
 8021e9a:	009b      	lsls	r3, r3, #2
 8021e9c:	9306      	str	r3, [sp, #24]
 8021e9e:	9b01      	ldr	r3, [sp, #4]
 8021ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021ea2:	4293      	cmp	r3, r2
 8021ea4:	d310      	bcc.n	8021ec8 <__multiply+0xb4>
 8021ea6:	9b03      	ldr	r3, [sp, #12]
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	dd05      	ble.n	8021eb8 <__multiply+0xa4>
 8021eac:	9b04      	ldr	r3, [sp, #16]
 8021eae:	3b04      	subs	r3, #4
 8021eb0:	9304      	str	r3, [sp, #16]
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d056      	beq.n	8021f66 <__multiply+0x152>
 8021eb8:	9b02      	ldr	r3, [sp, #8]
 8021eba:	9a03      	ldr	r2, [sp, #12]
 8021ebc:	0018      	movs	r0, r3
 8021ebe:	611a      	str	r2, [r3, #16]
 8021ec0:	b00b      	add	sp, #44	@ 0x2c
 8021ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ec4:	c304      	stmia	r3!, {r2}
 8021ec6:	e7cf      	b.n	8021e68 <__multiply+0x54>
 8021ec8:	9b01      	ldr	r3, [sp, #4]
 8021eca:	6818      	ldr	r0, [r3, #0]
 8021ecc:	b280      	uxth	r0, r0
 8021ece:	2800      	cmp	r0, #0
 8021ed0:	d01e      	beq.n	8021f10 <__multiply+0xfc>
 8021ed2:	4667      	mov	r7, ip
 8021ed4:	2500      	movs	r5, #0
 8021ed6:	9e08      	ldr	r6, [sp, #32]
 8021ed8:	ce02      	ldmia	r6!, {r1}
 8021eda:	683b      	ldr	r3, [r7, #0]
 8021edc:	9307      	str	r3, [sp, #28]
 8021ede:	b28b      	uxth	r3, r1
 8021ee0:	4343      	muls	r3, r0
 8021ee2:	001a      	movs	r2, r3
 8021ee4:	466b      	mov	r3, sp
 8021ee6:	0c09      	lsrs	r1, r1, #16
 8021ee8:	8b9b      	ldrh	r3, [r3, #28]
 8021eea:	4341      	muls	r1, r0
 8021eec:	18d3      	adds	r3, r2, r3
 8021eee:	9a07      	ldr	r2, [sp, #28]
 8021ef0:	195b      	adds	r3, r3, r5
 8021ef2:	0c12      	lsrs	r2, r2, #16
 8021ef4:	1889      	adds	r1, r1, r2
 8021ef6:	0c1a      	lsrs	r2, r3, #16
 8021ef8:	188a      	adds	r2, r1, r2
 8021efa:	b29b      	uxth	r3, r3
 8021efc:	0c15      	lsrs	r5, r2, #16
 8021efe:	0412      	lsls	r2, r2, #16
 8021f00:	431a      	orrs	r2, r3
 8021f02:	9b05      	ldr	r3, [sp, #20]
 8021f04:	c704      	stmia	r7!, {r2}
 8021f06:	42b3      	cmp	r3, r6
 8021f08:	d8e6      	bhi.n	8021ed8 <__multiply+0xc4>
 8021f0a:	4663      	mov	r3, ip
 8021f0c:	9a06      	ldr	r2, [sp, #24]
 8021f0e:	509d      	str	r5, [r3, r2]
 8021f10:	9b01      	ldr	r3, [sp, #4]
 8021f12:	6818      	ldr	r0, [r3, #0]
 8021f14:	0c00      	lsrs	r0, r0, #16
 8021f16:	d020      	beq.n	8021f5a <__multiply+0x146>
 8021f18:	4663      	mov	r3, ip
 8021f1a:	0025      	movs	r5, r4
 8021f1c:	4661      	mov	r1, ip
 8021f1e:	2700      	movs	r7, #0
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	3514      	adds	r5, #20
 8021f24:	682a      	ldr	r2, [r5, #0]
 8021f26:	680e      	ldr	r6, [r1, #0]
 8021f28:	b292      	uxth	r2, r2
 8021f2a:	4342      	muls	r2, r0
 8021f2c:	0c36      	lsrs	r6, r6, #16
 8021f2e:	1992      	adds	r2, r2, r6
 8021f30:	19d2      	adds	r2, r2, r7
 8021f32:	0416      	lsls	r6, r2, #16
 8021f34:	b29b      	uxth	r3, r3
 8021f36:	431e      	orrs	r6, r3
 8021f38:	600e      	str	r6, [r1, #0]
 8021f3a:	cd40      	ldmia	r5!, {r6}
 8021f3c:	684b      	ldr	r3, [r1, #4]
 8021f3e:	0c36      	lsrs	r6, r6, #16
 8021f40:	4346      	muls	r6, r0
 8021f42:	b29b      	uxth	r3, r3
 8021f44:	0c12      	lsrs	r2, r2, #16
 8021f46:	18f3      	adds	r3, r6, r3
 8021f48:	189b      	adds	r3, r3, r2
 8021f4a:	9a05      	ldr	r2, [sp, #20]
 8021f4c:	0c1f      	lsrs	r7, r3, #16
 8021f4e:	3104      	adds	r1, #4
 8021f50:	42aa      	cmp	r2, r5
 8021f52:	d8e7      	bhi.n	8021f24 <__multiply+0x110>
 8021f54:	4662      	mov	r2, ip
 8021f56:	9906      	ldr	r1, [sp, #24]
 8021f58:	5053      	str	r3, [r2, r1]
 8021f5a:	9b01      	ldr	r3, [sp, #4]
 8021f5c:	3304      	adds	r3, #4
 8021f5e:	9301      	str	r3, [sp, #4]
 8021f60:	2304      	movs	r3, #4
 8021f62:	449c      	add	ip, r3
 8021f64:	e79b      	b.n	8021e9e <__multiply+0x8a>
 8021f66:	9b03      	ldr	r3, [sp, #12]
 8021f68:	3b01      	subs	r3, #1
 8021f6a:	9303      	str	r3, [sp, #12]
 8021f6c:	e79b      	b.n	8021ea6 <__multiply+0x92>
 8021f6e:	46c0      	nop			@ (mov r8, r8)
 8021f70:	08025f91 	.word	0x08025f91
 8021f74:	08026002 	.word	0x08026002

08021f78 <__pow5mult>:
 8021f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f7a:	2303      	movs	r3, #3
 8021f7c:	0015      	movs	r5, r2
 8021f7e:	0007      	movs	r7, r0
 8021f80:	000e      	movs	r6, r1
 8021f82:	401a      	ands	r2, r3
 8021f84:	421d      	tst	r5, r3
 8021f86:	d008      	beq.n	8021f9a <__pow5mult+0x22>
 8021f88:	4925      	ldr	r1, [pc, #148]	@ (8022020 <__pow5mult+0xa8>)
 8021f8a:	3a01      	subs	r2, #1
 8021f8c:	0092      	lsls	r2, r2, #2
 8021f8e:	5852      	ldr	r2, [r2, r1]
 8021f90:	2300      	movs	r3, #0
 8021f92:	0031      	movs	r1, r6
 8021f94:	f7ff fe46 	bl	8021c24 <__multadd>
 8021f98:	0006      	movs	r6, r0
 8021f9a:	10ad      	asrs	r5, r5, #2
 8021f9c:	d03d      	beq.n	802201a <__pow5mult+0xa2>
 8021f9e:	69fc      	ldr	r4, [r7, #28]
 8021fa0:	2c00      	cmp	r4, #0
 8021fa2:	d10f      	bne.n	8021fc4 <__pow5mult+0x4c>
 8021fa4:	2010      	movs	r0, #16
 8021fa6:	f7ff fd07 	bl	80219b8 <malloc>
 8021faa:	1e02      	subs	r2, r0, #0
 8021fac:	61f8      	str	r0, [r7, #28]
 8021fae:	d105      	bne.n	8021fbc <__pow5mult+0x44>
 8021fb0:	21b4      	movs	r1, #180	@ 0xb4
 8021fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8022024 <__pow5mult+0xac>)
 8021fb4:	481c      	ldr	r0, [pc, #112]	@ (8022028 <__pow5mult+0xb0>)
 8021fb6:	31ff      	adds	r1, #255	@ 0xff
 8021fb8:	f000 feac 	bl	8022d14 <__assert_func>
 8021fbc:	6044      	str	r4, [r0, #4]
 8021fbe:	6084      	str	r4, [r0, #8]
 8021fc0:	6004      	str	r4, [r0, #0]
 8021fc2:	60c4      	str	r4, [r0, #12]
 8021fc4:	69fb      	ldr	r3, [r7, #28]
 8021fc6:	689c      	ldr	r4, [r3, #8]
 8021fc8:	9301      	str	r3, [sp, #4]
 8021fca:	2c00      	cmp	r4, #0
 8021fcc:	d108      	bne.n	8021fe0 <__pow5mult+0x68>
 8021fce:	0038      	movs	r0, r7
 8021fd0:	4916      	ldr	r1, [pc, #88]	@ (802202c <__pow5mult+0xb4>)
 8021fd2:	f7ff ff07 	bl	8021de4 <__i2b>
 8021fd6:	9b01      	ldr	r3, [sp, #4]
 8021fd8:	0004      	movs	r4, r0
 8021fda:	6098      	str	r0, [r3, #8]
 8021fdc:	2300      	movs	r3, #0
 8021fde:	6003      	str	r3, [r0, #0]
 8021fe0:	2301      	movs	r3, #1
 8021fe2:	421d      	tst	r5, r3
 8021fe4:	d00a      	beq.n	8021ffc <__pow5mult+0x84>
 8021fe6:	0031      	movs	r1, r6
 8021fe8:	0022      	movs	r2, r4
 8021fea:	0038      	movs	r0, r7
 8021fec:	f7ff ff12 	bl	8021e14 <__multiply>
 8021ff0:	0031      	movs	r1, r6
 8021ff2:	9001      	str	r0, [sp, #4]
 8021ff4:	0038      	movs	r0, r7
 8021ff6:	f7ff fdf1 	bl	8021bdc <_Bfree>
 8021ffa:	9e01      	ldr	r6, [sp, #4]
 8021ffc:	106d      	asrs	r5, r5, #1
 8021ffe:	d00c      	beq.n	802201a <__pow5mult+0xa2>
 8022000:	6820      	ldr	r0, [r4, #0]
 8022002:	2800      	cmp	r0, #0
 8022004:	d107      	bne.n	8022016 <__pow5mult+0x9e>
 8022006:	0022      	movs	r2, r4
 8022008:	0021      	movs	r1, r4
 802200a:	0038      	movs	r0, r7
 802200c:	f7ff ff02 	bl	8021e14 <__multiply>
 8022010:	2300      	movs	r3, #0
 8022012:	6020      	str	r0, [r4, #0]
 8022014:	6003      	str	r3, [r0, #0]
 8022016:	0004      	movs	r4, r0
 8022018:	e7e2      	b.n	8021fe0 <__pow5mult+0x68>
 802201a:	0030      	movs	r0, r6
 802201c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802201e:	46c0      	nop			@ (mov r8, r8)
 8022020:	0802605c 	.word	0x0802605c
 8022024:	08025f22 	.word	0x08025f22
 8022028:	08026002 	.word	0x08026002
 802202c:	00000271 	.word	0x00000271

08022030 <__lshift>:
 8022030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022032:	000c      	movs	r4, r1
 8022034:	0016      	movs	r6, r2
 8022036:	6923      	ldr	r3, [r4, #16]
 8022038:	1157      	asrs	r7, r2, #5
 802203a:	b085      	sub	sp, #20
 802203c:	18fb      	adds	r3, r7, r3
 802203e:	9301      	str	r3, [sp, #4]
 8022040:	3301      	adds	r3, #1
 8022042:	9300      	str	r3, [sp, #0]
 8022044:	6849      	ldr	r1, [r1, #4]
 8022046:	68a3      	ldr	r3, [r4, #8]
 8022048:	9002      	str	r0, [sp, #8]
 802204a:	9a00      	ldr	r2, [sp, #0]
 802204c:	4293      	cmp	r3, r2
 802204e:	db10      	blt.n	8022072 <__lshift+0x42>
 8022050:	9802      	ldr	r0, [sp, #8]
 8022052:	f7ff fd7f 	bl	8021b54 <_Balloc>
 8022056:	2300      	movs	r3, #0
 8022058:	0001      	movs	r1, r0
 802205a:	0005      	movs	r5, r0
 802205c:	001a      	movs	r2, r3
 802205e:	3114      	adds	r1, #20
 8022060:	4298      	cmp	r0, r3
 8022062:	d10c      	bne.n	802207e <__lshift+0x4e>
 8022064:	21ef      	movs	r1, #239	@ 0xef
 8022066:	002a      	movs	r2, r5
 8022068:	4b25      	ldr	r3, [pc, #148]	@ (8022100 <__lshift+0xd0>)
 802206a:	4826      	ldr	r0, [pc, #152]	@ (8022104 <__lshift+0xd4>)
 802206c:	0049      	lsls	r1, r1, #1
 802206e:	f000 fe51 	bl	8022d14 <__assert_func>
 8022072:	3101      	adds	r1, #1
 8022074:	005b      	lsls	r3, r3, #1
 8022076:	e7e8      	b.n	802204a <__lshift+0x1a>
 8022078:	0098      	lsls	r0, r3, #2
 802207a:	500a      	str	r2, [r1, r0]
 802207c:	3301      	adds	r3, #1
 802207e:	42bb      	cmp	r3, r7
 8022080:	dbfa      	blt.n	8022078 <__lshift+0x48>
 8022082:	43fb      	mvns	r3, r7
 8022084:	17db      	asrs	r3, r3, #31
 8022086:	401f      	ands	r7, r3
 8022088:	00bf      	lsls	r7, r7, #2
 802208a:	0023      	movs	r3, r4
 802208c:	201f      	movs	r0, #31
 802208e:	19c9      	adds	r1, r1, r7
 8022090:	0037      	movs	r7, r6
 8022092:	6922      	ldr	r2, [r4, #16]
 8022094:	3314      	adds	r3, #20
 8022096:	0092      	lsls	r2, r2, #2
 8022098:	189a      	adds	r2, r3, r2
 802209a:	4007      	ands	r7, r0
 802209c:	4206      	tst	r6, r0
 802209e:	d029      	beq.n	80220f4 <__lshift+0xc4>
 80220a0:	3001      	adds	r0, #1
 80220a2:	1bc0      	subs	r0, r0, r7
 80220a4:	9003      	str	r0, [sp, #12]
 80220a6:	468c      	mov	ip, r1
 80220a8:	2000      	movs	r0, #0
 80220aa:	681e      	ldr	r6, [r3, #0]
 80220ac:	40be      	lsls	r6, r7
 80220ae:	4306      	orrs	r6, r0
 80220b0:	4660      	mov	r0, ip
 80220b2:	c040      	stmia	r0!, {r6}
 80220b4:	4684      	mov	ip, r0
 80220b6:	9e03      	ldr	r6, [sp, #12]
 80220b8:	cb01      	ldmia	r3!, {r0}
 80220ba:	40f0      	lsrs	r0, r6
 80220bc:	429a      	cmp	r2, r3
 80220be:	d8f4      	bhi.n	80220aa <__lshift+0x7a>
 80220c0:	0026      	movs	r6, r4
 80220c2:	3615      	adds	r6, #21
 80220c4:	2304      	movs	r3, #4
 80220c6:	42b2      	cmp	r2, r6
 80220c8:	d304      	bcc.n	80220d4 <__lshift+0xa4>
 80220ca:	1b13      	subs	r3, r2, r4
 80220cc:	3b15      	subs	r3, #21
 80220ce:	089b      	lsrs	r3, r3, #2
 80220d0:	3301      	adds	r3, #1
 80220d2:	009b      	lsls	r3, r3, #2
 80220d4:	50c8      	str	r0, [r1, r3]
 80220d6:	2800      	cmp	r0, #0
 80220d8:	d002      	beq.n	80220e0 <__lshift+0xb0>
 80220da:	9b01      	ldr	r3, [sp, #4]
 80220dc:	3302      	adds	r3, #2
 80220de:	9300      	str	r3, [sp, #0]
 80220e0:	9b00      	ldr	r3, [sp, #0]
 80220e2:	9802      	ldr	r0, [sp, #8]
 80220e4:	3b01      	subs	r3, #1
 80220e6:	0021      	movs	r1, r4
 80220e8:	612b      	str	r3, [r5, #16]
 80220ea:	f7ff fd77 	bl	8021bdc <_Bfree>
 80220ee:	0028      	movs	r0, r5
 80220f0:	b005      	add	sp, #20
 80220f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220f4:	cb01      	ldmia	r3!, {r0}
 80220f6:	c101      	stmia	r1!, {r0}
 80220f8:	429a      	cmp	r2, r3
 80220fa:	d8fb      	bhi.n	80220f4 <__lshift+0xc4>
 80220fc:	e7f0      	b.n	80220e0 <__lshift+0xb0>
 80220fe:	46c0      	nop			@ (mov r8, r8)
 8022100:	08025f91 	.word	0x08025f91
 8022104:	08026002 	.word	0x08026002

08022108 <__mcmp>:
 8022108:	b530      	push	{r4, r5, lr}
 802210a:	690b      	ldr	r3, [r1, #16]
 802210c:	6904      	ldr	r4, [r0, #16]
 802210e:	0002      	movs	r2, r0
 8022110:	1ae0      	subs	r0, r4, r3
 8022112:	429c      	cmp	r4, r3
 8022114:	d10f      	bne.n	8022136 <__mcmp+0x2e>
 8022116:	3214      	adds	r2, #20
 8022118:	009b      	lsls	r3, r3, #2
 802211a:	3114      	adds	r1, #20
 802211c:	0014      	movs	r4, r2
 802211e:	18c9      	adds	r1, r1, r3
 8022120:	18d2      	adds	r2, r2, r3
 8022122:	3a04      	subs	r2, #4
 8022124:	3904      	subs	r1, #4
 8022126:	6815      	ldr	r5, [r2, #0]
 8022128:	680b      	ldr	r3, [r1, #0]
 802212a:	429d      	cmp	r5, r3
 802212c:	d004      	beq.n	8022138 <__mcmp+0x30>
 802212e:	2001      	movs	r0, #1
 8022130:	429d      	cmp	r5, r3
 8022132:	d200      	bcs.n	8022136 <__mcmp+0x2e>
 8022134:	3802      	subs	r0, #2
 8022136:	bd30      	pop	{r4, r5, pc}
 8022138:	4294      	cmp	r4, r2
 802213a:	d3f2      	bcc.n	8022122 <__mcmp+0x1a>
 802213c:	e7fb      	b.n	8022136 <__mcmp+0x2e>
	...

08022140 <__mdiff>:
 8022140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022142:	000c      	movs	r4, r1
 8022144:	b087      	sub	sp, #28
 8022146:	9000      	str	r0, [sp, #0]
 8022148:	0011      	movs	r1, r2
 802214a:	0020      	movs	r0, r4
 802214c:	0017      	movs	r7, r2
 802214e:	f7ff ffdb 	bl	8022108 <__mcmp>
 8022152:	1e05      	subs	r5, r0, #0
 8022154:	d110      	bne.n	8022178 <__mdiff+0x38>
 8022156:	0001      	movs	r1, r0
 8022158:	9800      	ldr	r0, [sp, #0]
 802215a:	f7ff fcfb 	bl	8021b54 <_Balloc>
 802215e:	1e02      	subs	r2, r0, #0
 8022160:	d104      	bne.n	802216c <__mdiff+0x2c>
 8022162:	4b40      	ldr	r3, [pc, #256]	@ (8022264 <__mdiff+0x124>)
 8022164:	4840      	ldr	r0, [pc, #256]	@ (8022268 <__mdiff+0x128>)
 8022166:	4941      	ldr	r1, [pc, #260]	@ (802226c <__mdiff+0x12c>)
 8022168:	f000 fdd4 	bl	8022d14 <__assert_func>
 802216c:	2301      	movs	r3, #1
 802216e:	6145      	str	r5, [r0, #20]
 8022170:	6103      	str	r3, [r0, #16]
 8022172:	0010      	movs	r0, r2
 8022174:	b007      	add	sp, #28
 8022176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022178:	2600      	movs	r6, #0
 802217a:	42b0      	cmp	r0, r6
 802217c:	da03      	bge.n	8022186 <__mdiff+0x46>
 802217e:	0023      	movs	r3, r4
 8022180:	003c      	movs	r4, r7
 8022182:	001f      	movs	r7, r3
 8022184:	3601      	adds	r6, #1
 8022186:	6861      	ldr	r1, [r4, #4]
 8022188:	9800      	ldr	r0, [sp, #0]
 802218a:	f7ff fce3 	bl	8021b54 <_Balloc>
 802218e:	1e02      	subs	r2, r0, #0
 8022190:	d103      	bne.n	802219a <__mdiff+0x5a>
 8022192:	4b34      	ldr	r3, [pc, #208]	@ (8022264 <__mdiff+0x124>)
 8022194:	4834      	ldr	r0, [pc, #208]	@ (8022268 <__mdiff+0x128>)
 8022196:	4936      	ldr	r1, [pc, #216]	@ (8022270 <__mdiff+0x130>)
 8022198:	e7e6      	b.n	8022168 <__mdiff+0x28>
 802219a:	6923      	ldr	r3, [r4, #16]
 802219c:	3414      	adds	r4, #20
 802219e:	9300      	str	r3, [sp, #0]
 80221a0:	009b      	lsls	r3, r3, #2
 80221a2:	18e3      	adds	r3, r4, r3
 80221a4:	0021      	movs	r1, r4
 80221a6:	9401      	str	r4, [sp, #4]
 80221a8:	003c      	movs	r4, r7
 80221aa:	9302      	str	r3, [sp, #8]
 80221ac:	693b      	ldr	r3, [r7, #16]
 80221ae:	3414      	adds	r4, #20
 80221b0:	009b      	lsls	r3, r3, #2
 80221b2:	18e3      	adds	r3, r4, r3
 80221b4:	9303      	str	r3, [sp, #12]
 80221b6:	0003      	movs	r3, r0
 80221b8:	60c6      	str	r6, [r0, #12]
 80221ba:	468c      	mov	ip, r1
 80221bc:	2000      	movs	r0, #0
 80221be:	3314      	adds	r3, #20
 80221c0:	9304      	str	r3, [sp, #16]
 80221c2:	9305      	str	r3, [sp, #20]
 80221c4:	4663      	mov	r3, ip
 80221c6:	cb20      	ldmia	r3!, {r5}
 80221c8:	b2a9      	uxth	r1, r5
 80221ca:	000e      	movs	r6, r1
 80221cc:	469c      	mov	ip, r3
 80221ce:	cc08      	ldmia	r4!, {r3}
 80221d0:	0c2d      	lsrs	r5, r5, #16
 80221d2:	b299      	uxth	r1, r3
 80221d4:	1a71      	subs	r1, r6, r1
 80221d6:	1809      	adds	r1, r1, r0
 80221d8:	0c1b      	lsrs	r3, r3, #16
 80221da:	1408      	asrs	r0, r1, #16
 80221dc:	1aeb      	subs	r3, r5, r3
 80221de:	181b      	adds	r3, r3, r0
 80221e0:	1418      	asrs	r0, r3, #16
 80221e2:	b289      	uxth	r1, r1
 80221e4:	041b      	lsls	r3, r3, #16
 80221e6:	4319      	orrs	r1, r3
 80221e8:	9b05      	ldr	r3, [sp, #20]
 80221ea:	c302      	stmia	r3!, {r1}
 80221ec:	9305      	str	r3, [sp, #20]
 80221ee:	9b03      	ldr	r3, [sp, #12]
 80221f0:	42a3      	cmp	r3, r4
 80221f2:	d8e7      	bhi.n	80221c4 <__mdiff+0x84>
 80221f4:	0039      	movs	r1, r7
 80221f6:	9c03      	ldr	r4, [sp, #12]
 80221f8:	3115      	adds	r1, #21
 80221fa:	2304      	movs	r3, #4
 80221fc:	428c      	cmp	r4, r1
 80221fe:	d304      	bcc.n	802220a <__mdiff+0xca>
 8022200:	1be3      	subs	r3, r4, r7
 8022202:	3b15      	subs	r3, #21
 8022204:	089b      	lsrs	r3, r3, #2
 8022206:	3301      	adds	r3, #1
 8022208:	009b      	lsls	r3, r3, #2
 802220a:	9901      	ldr	r1, [sp, #4]
 802220c:	18cd      	adds	r5, r1, r3
 802220e:	9904      	ldr	r1, [sp, #16]
 8022210:	002e      	movs	r6, r5
 8022212:	18cb      	adds	r3, r1, r3
 8022214:	001f      	movs	r7, r3
 8022216:	9902      	ldr	r1, [sp, #8]
 8022218:	428e      	cmp	r6, r1
 802221a:	d311      	bcc.n	8022240 <__mdiff+0x100>
 802221c:	9c02      	ldr	r4, [sp, #8]
 802221e:	1ee9      	subs	r1, r5, #3
 8022220:	2000      	movs	r0, #0
 8022222:	428c      	cmp	r4, r1
 8022224:	d304      	bcc.n	8022230 <__mdiff+0xf0>
 8022226:	0021      	movs	r1, r4
 8022228:	3103      	adds	r1, #3
 802222a:	1b49      	subs	r1, r1, r5
 802222c:	0889      	lsrs	r1, r1, #2
 802222e:	0088      	lsls	r0, r1, #2
 8022230:	181b      	adds	r3, r3, r0
 8022232:	3b04      	subs	r3, #4
 8022234:	6819      	ldr	r1, [r3, #0]
 8022236:	2900      	cmp	r1, #0
 8022238:	d010      	beq.n	802225c <__mdiff+0x11c>
 802223a:	9b00      	ldr	r3, [sp, #0]
 802223c:	6113      	str	r3, [r2, #16]
 802223e:	e798      	b.n	8022172 <__mdiff+0x32>
 8022240:	4684      	mov	ip, r0
 8022242:	ce02      	ldmia	r6!, {r1}
 8022244:	b288      	uxth	r0, r1
 8022246:	4460      	add	r0, ip
 8022248:	1400      	asrs	r0, r0, #16
 802224a:	0c0c      	lsrs	r4, r1, #16
 802224c:	1904      	adds	r4, r0, r4
 802224e:	4461      	add	r1, ip
 8022250:	1420      	asrs	r0, r4, #16
 8022252:	b289      	uxth	r1, r1
 8022254:	0424      	lsls	r4, r4, #16
 8022256:	4321      	orrs	r1, r4
 8022258:	c702      	stmia	r7!, {r1}
 802225a:	e7dc      	b.n	8022216 <__mdiff+0xd6>
 802225c:	9900      	ldr	r1, [sp, #0]
 802225e:	3901      	subs	r1, #1
 8022260:	9100      	str	r1, [sp, #0]
 8022262:	e7e6      	b.n	8022232 <__mdiff+0xf2>
 8022264:	08025f91 	.word	0x08025f91
 8022268:	08026002 	.word	0x08026002
 802226c:	00000237 	.word	0x00000237
 8022270:	00000245 	.word	0x00000245

08022274 <__ulp>:
 8022274:	b510      	push	{r4, lr}
 8022276:	2400      	movs	r4, #0
 8022278:	4b0c      	ldr	r3, [pc, #48]	@ (80222ac <__ulp+0x38>)
 802227a:	4a0d      	ldr	r2, [pc, #52]	@ (80222b0 <__ulp+0x3c>)
 802227c:	400b      	ands	r3, r1
 802227e:	189b      	adds	r3, r3, r2
 8022280:	42a3      	cmp	r3, r4
 8022282:	dc06      	bgt.n	8022292 <__ulp+0x1e>
 8022284:	425b      	negs	r3, r3
 8022286:	151a      	asrs	r2, r3, #20
 8022288:	2a13      	cmp	r2, #19
 802228a:	dc05      	bgt.n	8022298 <__ulp+0x24>
 802228c:	2380      	movs	r3, #128	@ 0x80
 802228e:	031b      	lsls	r3, r3, #12
 8022290:	4113      	asrs	r3, r2
 8022292:	0019      	movs	r1, r3
 8022294:	0020      	movs	r0, r4
 8022296:	bd10      	pop	{r4, pc}
 8022298:	3a14      	subs	r2, #20
 802229a:	2401      	movs	r4, #1
 802229c:	2a1e      	cmp	r2, #30
 802229e:	dc02      	bgt.n	80222a6 <__ulp+0x32>
 80222a0:	2480      	movs	r4, #128	@ 0x80
 80222a2:	0624      	lsls	r4, r4, #24
 80222a4:	40d4      	lsrs	r4, r2
 80222a6:	2300      	movs	r3, #0
 80222a8:	e7f3      	b.n	8022292 <__ulp+0x1e>
 80222aa:	46c0      	nop			@ (mov r8, r8)
 80222ac:	7ff00000 	.word	0x7ff00000
 80222b0:	fcc00000 	.word	0xfcc00000

080222b4 <__b2d>:
 80222b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80222b6:	0006      	movs	r6, r0
 80222b8:	6903      	ldr	r3, [r0, #16]
 80222ba:	3614      	adds	r6, #20
 80222bc:	009b      	lsls	r3, r3, #2
 80222be:	18f3      	adds	r3, r6, r3
 80222c0:	1f1d      	subs	r5, r3, #4
 80222c2:	682c      	ldr	r4, [r5, #0]
 80222c4:	000f      	movs	r7, r1
 80222c6:	0020      	movs	r0, r4
 80222c8:	9301      	str	r3, [sp, #4]
 80222ca:	f7ff fd3b 	bl	8021d44 <__hi0bits>
 80222ce:	2220      	movs	r2, #32
 80222d0:	1a12      	subs	r2, r2, r0
 80222d2:	603a      	str	r2, [r7, #0]
 80222d4:	0003      	movs	r3, r0
 80222d6:	4a1c      	ldr	r2, [pc, #112]	@ (8022348 <__b2d+0x94>)
 80222d8:	280a      	cmp	r0, #10
 80222da:	dc15      	bgt.n	8022308 <__b2d+0x54>
 80222dc:	210b      	movs	r1, #11
 80222de:	0027      	movs	r7, r4
 80222e0:	1a09      	subs	r1, r1, r0
 80222e2:	40cf      	lsrs	r7, r1
 80222e4:	433a      	orrs	r2, r7
 80222e6:	468c      	mov	ip, r1
 80222e8:	0011      	movs	r1, r2
 80222ea:	2200      	movs	r2, #0
 80222ec:	42ae      	cmp	r6, r5
 80222ee:	d202      	bcs.n	80222f6 <__b2d+0x42>
 80222f0:	9a01      	ldr	r2, [sp, #4]
 80222f2:	3a08      	subs	r2, #8
 80222f4:	6812      	ldr	r2, [r2, #0]
 80222f6:	3315      	adds	r3, #21
 80222f8:	409c      	lsls	r4, r3
 80222fa:	4663      	mov	r3, ip
 80222fc:	0027      	movs	r7, r4
 80222fe:	40da      	lsrs	r2, r3
 8022300:	4317      	orrs	r7, r2
 8022302:	0038      	movs	r0, r7
 8022304:	b003      	add	sp, #12
 8022306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022308:	2700      	movs	r7, #0
 802230a:	42ae      	cmp	r6, r5
 802230c:	d202      	bcs.n	8022314 <__b2d+0x60>
 802230e:	9d01      	ldr	r5, [sp, #4]
 8022310:	3d08      	subs	r5, #8
 8022312:	682f      	ldr	r7, [r5, #0]
 8022314:	210b      	movs	r1, #11
 8022316:	4249      	negs	r1, r1
 8022318:	468c      	mov	ip, r1
 802231a:	449c      	add	ip, r3
 802231c:	2b0b      	cmp	r3, #11
 802231e:	d010      	beq.n	8022342 <__b2d+0x8e>
 8022320:	4661      	mov	r1, ip
 8022322:	2320      	movs	r3, #32
 8022324:	408c      	lsls	r4, r1
 8022326:	1a5b      	subs	r3, r3, r1
 8022328:	0039      	movs	r1, r7
 802232a:	40d9      	lsrs	r1, r3
 802232c:	430c      	orrs	r4, r1
 802232e:	4322      	orrs	r2, r4
 8022330:	0011      	movs	r1, r2
 8022332:	2200      	movs	r2, #0
 8022334:	42b5      	cmp	r5, r6
 8022336:	d901      	bls.n	802233c <__b2d+0x88>
 8022338:	3d04      	subs	r5, #4
 802233a:	682a      	ldr	r2, [r5, #0]
 802233c:	4664      	mov	r4, ip
 802233e:	40a7      	lsls	r7, r4
 8022340:	e7dd      	b.n	80222fe <__b2d+0x4a>
 8022342:	4322      	orrs	r2, r4
 8022344:	0011      	movs	r1, r2
 8022346:	e7dc      	b.n	8022302 <__b2d+0x4e>
 8022348:	3ff00000 	.word	0x3ff00000

0802234c <__d2b>:
 802234c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802234e:	2101      	movs	r1, #1
 8022350:	0016      	movs	r6, r2
 8022352:	001f      	movs	r7, r3
 8022354:	f7ff fbfe 	bl	8021b54 <_Balloc>
 8022358:	1e04      	subs	r4, r0, #0
 802235a:	d105      	bne.n	8022368 <__d2b+0x1c>
 802235c:	0022      	movs	r2, r4
 802235e:	4b25      	ldr	r3, [pc, #148]	@ (80223f4 <__d2b+0xa8>)
 8022360:	4825      	ldr	r0, [pc, #148]	@ (80223f8 <__d2b+0xac>)
 8022362:	4926      	ldr	r1, [pc, #152]	@ (80223fc <__d2b+0xb0>)
 8022364:	f000 fcd6 	bl	8022d14 <__assert_func>
 8022368:	033b      	lsls	r3, r7, #12
 802236a:	007d      	lsls	r5, r7, #1
 802236c:	0b1b      	lsrs	r3, r3, #12
 802236e:	0d6d      	lsrs	r5, r5, #21
 8022370:	d002      	beq.n	8022378 <__d2b+0x2c>
 8022372:	2280      	movs	r2, #128	@ 0x80
 8022374:	0352      	lsls	r2, r2, #13
 8022376:	4313      	orrs	r3, r2
 8022378:	9301      	str	r3, [sp, #4]
 802237a:	2e00      	cmp	r6, #0
 802237c:	d025      	beq.n	80223ca <__d2b+0x7e>
 802237e:	4668      	mov	r0, sp
 8022380:	9600      	str	r6, [sp, #0]
 8022382:	f7ff fd00 	bl	8021d86 <__lo0bits>
 8022386:	9b01      	ldr	r3, [sp, #4]
 8022388:	9900      	ldr	r1, [sp, #0]
 802238a:	2800      	cmp	r0, #0
 802238c:	d01b      	beq.n	80223c6 <__d2b+0x7a>
 802238e:	2220      	movs	r2, #32
 8022390:	001e      	movs	r6, r3
 8022392:	1a12      	subs	r2, r2, r0
 8022394:	4096      	lsls	r6, r2
 8022396:	0032      	movs	r2, r6
 8022398:	40c3      	lsrs	r3, r0
 802239a:	430a      	orrs	r2, r1
 802239c:	6162      	str	r2, [r4, #20]
 802239e:	9301      	str	r3, [sp, #4]
 80223a0:	9e01      	ldr	r6, [sp, #4]
 80223a2:	61a6      	str	r6, [r4, #24]
 80223a4:	1e73      	subs	r3, r6, #1
 80223a6:	419e      	sbcs	r6, r3
 80223a8:	3601      	adds	r6, #1
 80223aa:	6126      	str	r6, [r4, #16]
 80223ac:	2d00      	cmp	r5, #0
 80223ae:	d014      	beq.n	80223da <__d2b+0x8e>
 80223b0:	2635      	movs	r6, #53	@ 0x35
 80223b2:	4b13      	ldr	r3, [pc, #76]	@ (8022400 <__d2b+0xb4>)
 80223b4:	18ed      	adds	r5, r5, r3
 80223b6:	9b08      	ldr	r3, [sp, #32]
 80223b8:	182d      	adds	r5, r5, r0
 80223ba:	601d      	str	r5, [r3, #0]
 80223bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80223be:	1a36      	subs	r6, r6, r0
 80223c0:	601e      	str	r6, [r3, #0]
 80223c2:	0020      	movs	r0, r4
 80223c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80223c6:	6161      	str	r1, [r4, #20]
 80223c8:	e7ea      	b.n	80223a0 <__d2b+0x54>
 80223ca:	a801      	add	r0, sp, #4
 80223cc:	f7ff fcdb 	bl	8021d86 <__lo0bits>
 80223d0:	9b01      	ldr	r3, [sp, #4]
 80223d2:	2601      	movs	r6, #1
 80223d4:	6163      	str	r3, [r4, #20]
 80223d6:	3020      	adds	r0, #32
 80223d8:	e7e7      	b.n	80223aa <__d2b+0x5e>
 80223da:	4b0a      	ldr	r3, [pc, #40]	@ (8022404 <__d2b+0xb8>)
 80223dc:	18c0      	adds	r0, r0, r3
 80223de:	9b08      	ldr	r3, [sp, #32]
 80223e0:	6018      	str	r0, [r3, #0]
 80223e2:	4b09      	ldr	r3, [pc, #36]	@ (8022408 <__d2b+0xbc>)
 80223e4:	18f3      	adds	r3, r6, r3
 80223e6:	009b      	lsls	r3, r3, #2
 80223e8:	18e3      	adds	r3, r4, r3
 80223ea:	6958      	ldr	r0, [r3, #20]
 80223ec:	f7ff fcaa 	bl	8021d44 <__hi0bits>
 80223f0:	0176      	lsls	r6, r6, #5
 80223f2:	e7e3      	b.n	80223bc <__d2b+0x70>
 80223f4:	08025f91 	.word	0x08025f91
 80223f8:	08026002 	.word	0x08026002
 80223fc:	0000030f 	.word	0x0000030f
 8022400:	fffffbcd 	.word	0xfffffbcd
 8022404:	fffffbce 	.word	0xfffffbce
 8022408:	3fffffff 	.word	0x3fffffff

0802240c <__ratio>:
 802240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802240e:	b087      	sub	sp, #28
 8022410:	000f      	movs	r7, r1
 8022412:	a904      	add	r1, sp, #16
 8022414:	0006      	movs	r6, r0
 8022416:	f7ff ff4d 	bl	80222b4 <__b2d>
 802241a:	9000      	str	r0, [sp, #0]
 802241c:	9101      	str	r1, [sp, #4]
 802241e:	9b00      	ldr	r3, [sp, #0]
 8022420:	9c01      	ldr	r4, [sp, #4]
 8022422:	0038      	movs	r0, r7
 8022424:	a905      	add	r1, sp, #20
 8022426:	9302      	str	r3, [sp, #8]
 8022428:	9403      	str	r4, [sp, #12]
 802242a:	f7ff ff43 	bl	80222b4 <__b2d>
 802242e:	000d      	movs	r5, r1
 8022430:	0002      	movs	r2, r0
 8022432:	000b      	movs	r3, r1
 8022434:	6930      	ldr	r0, [r6, #16]
 8022436:	6939      	ldr	r1, [r7, #16]
 8022438:	9e04      	ldr	r6, [sp, #16]
 802243a:	1a40      	subs	r0, r0, r1
 802243c:	9905      	ldr	r1, [sp, #20]
 802243e:	0140      	lsls	r0, r0, #5
 8022440:	1a71      	subs	r1, r6, r1
 8022442:	1841      	adds	r1, r0, r1
 8022444:	0508      	lsls	r0, r1, #20
 8022446:	2900      	cmp	r1, #0
 8022448:	dd08      	ble.n	802245c <__ratio+0x50>
 802244a:	9901      	ldr	r1, [sp, #4]
 802244c:	1841      	adds	r1, r0, r1
 802244e:	9103      	str	r1, [sp, #12]
 8022450:	9802      	ldr	r0, [sp, #8]
 8022452:	9903      	ldr	r1, [sp, #12]
 8022454:	f7df fcae 	bl	8001db4 <__aeabi_ddiv>
 8022458:	b007      	add	sp, #28
 802245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802245c:	1a2b      	subs	r3, r5, r0
 802245e:	e7f7      	b.n	8022450 <__ratio+0x44>

08022460 <__copybits>:
 8022460:	b570      	push	{r4, r5, r6, lr}
 8022462:	0014      	movs	r4, r2
 8022464:	0005      	movs	r5, r0
 8022466:	3901      	subs	r1, #1
 8022468:	6913      	ldr	r3, [r2, #16]
 802246a:	1149      	asrs	r1, r1, #5
 802246c:	3101      	adds	r1, #1
 802246e:	0089      	lsls	r1, r1, #2
 8022470:	3414      	adds	r4, #20
 8022472:	009b      	lsls	r3, r3, #2
 8022474:	1841      	adds	r1, r0, r1
 8022476:	18e3      	adds	r3, r4, r3
 8022478:	42a3      	cmp	r3, r4
 802247a:	d80d      	bhi.n	8022498 <__copybits+0x38>
 802247c:	0014      	movs	r4, r2
 802247e:	3411      	adds	r4, #17
 8022480:	2500      	movs	r5, #0
 8022482:	429c      	cmp	r4, r3
 8022484:	d803      	bhi.n	802248e <__copybits+0x2e>
 8022486:	1a9b      	subs	r3, r3, r2
 8022488:	3b11      	subs	r3, #17
 802248a:	089b      	lsrs	r3, r3, #2
 802248c:	009d      	lsls	r5, r3, #2
 802248e:	2300      	movs	r3, #0
 8022490:	1940      	adds	r0, r0, r5
 8022492:	4281      	cmp	r1, r0
 8022494:	d803      	bhi.n	802249e <__copybits+0x3e>
 8022496:	bd70      	pop	{r4, r5, r6, pc}
 8022498:	cc40      	ldmia	r4!, {r6}
 802249a:	c540      	stmia	r5!, {r6}
 802249c:	e7ec      	b.n	8022478 <__copybits+0x18>
 802249e:	c008      	stmia	r0!, {r3}
 80224a0:	e7f7      	b.n	8022492 <__copybits+0x32>

080224a2 <__any_on>:
 80224a2:	0002      	movs	r2, r0
 80224a4:	6900      	ldr	r0, [r0, #16]
 80224a6:	b510      	push	{r4, lr}
 80224a8:	3214      	adds	r2, #20
 80224aa:	114b      	asrs	r3, r1, #5
 80224ac:	4298      	cmp	r0, r3
 80224ae:	db13      	blt.n	80224d8 <__any_on+0x36>
 80224b0:	dd0c      	ble.n	80224cc <__any_on+0x2a>
 80224b2:	241f      	movs	r4, #31
 80224b4:	0008      	movs	r0, r1
 80224b6:	4020      	ands	r0, r4
 80224b8:	4221      	tst	r1, r4
 80224ba:	d007      	beq.n	80224cc <__any_on+0x2a>
 80224bc:	0099      	lsls	r1, r3, #2
 80224be:	588c      	ldr	r4, [r1, r2]
 80224c0:	0021      	movs	r1, r4
 80224c2:	40c1      	lsrs	r1, r0
 80224c4:	4081      	lsls	r1, r0
 80224c6:	2001      	movs	r0, #1
 80224c8:	428c      	cmp	r4, r1
 80224ca:	d104      	bne.n	80224d6 <__any_on+0x34>
 80224cc:	009b      	lsls	r3, r3, #2
 80224ce:	18d3      	adds	r3, r2, r3
 80224d0:	4293      	cmp	r3, r2
 80224d2:	d803      	bhi.n	80224dc <__any_on+0x3a>
 80224d4:	2000      	movs	r0, #0
 80224d6:	bd10      	pop	{r4, pc}
 80224d8:	0003      	movs	r3, r0
 80224da:	e7f7      	b.n	80224cc <__any_on+0x2a>
 80224dc:	3b04      	subs	r3, #4
 80224de:	6819      	ldr	r1, [r3, #0]
 80224e0:	2900      	cmp	r1, #0
 80224e2:	d0f5      	beq.n	80224d0 <__any_on+0x2e>
 80224e4:	2001      	movs	r0, #1
 80224e6:	e7f6      	b.n	80224d6 <__any_on+0x34>

080224e8 <__ascii_wctomb>:
 80224e8:	0003      	movs	r3, r0
 80224ea:	1e08      	subs	r0, r1, #0
 80224ec:	d005      	beq.n	80224fa <__ascii_wctomb+0x12>
 80224ee:	2aff      	cmp	r2, #255	@ 0xff
 80224f0:	d904      	bls.n	80224fc <__ascii_wctomb+0x14>
 80224f2:	228a      	movs	r2, #138	@ 0x8a
 80224f4:	2001      	movs	r0, #1
 80224f6:	601a      	str	r2, [r3, #0]
 80224f8:	4240      	negs	r0, r0
 80224fa:	4770      	bx	lr
 80224fc:	2001      	movs	r0, #1
 80224fe:	700a      	strb	r2, [r1, #0]
 8022500:	e7fb      	b.n	80224fa <__ascii_wctomb+0x12>
	...

08022504 <__ssputs_r>:
 8022504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022506:	688e      	ldr	r6, [r1, #8]
 8022508:	b085      	sub	sp, #20
 802250a:	001f      	movs	r7, r3
 802250c:	000c      	movs	r4, r1
 802250e:	680b      	ldr	r3, [r1, #0]
 8022510:	9002      	str	r0, [sp, #8]
 8022512:	9203      	str	r2, [sp, #12]
 8022514:	42be      	cmp	r6, r7
 8022516:	d830      	bhi.n	802257a <__ssputs_r+0x76>
 8022518:	210c      	movs	r1, #12
 802251a:	5e62      	ldrsh	r2, [r4, r1]
 802251c:	2190      	movs	r1, #144	@ 0x90
 802251e:	00c9      	lsls	r1, r1, #3
 8022520:	420a      	tst	r2, r1
 8022522:	d028      	beq.n	8022576 <__ssputs_r+0x72>
 8022524:	2003      	movs	r0, #3
 8022526:	6921      	ldr	r1, [r4, #16]
 8022528:	1a5b      	subs	r3, r3, r1
 802252a:	9301      	str	r3, [sp, #4]
 802252c:	6963      	ldr	r3, [r4, #20]
 802252e:	4343      	muls	r3, r0
 8022530:	9801      	ldr	r0, [sp, #4]
 8022532:	0fdd      	lsrs	r5, r3, #31
 8022534:	18ed      	adds	r5, r5, r3
 8022536:	1c7b      	adds	r3, r7, #1
 8022538:	181b      	adds	r3, r3, r0
 802253a:	106d      	asrs	r5, r5, #1
 802253c:	42ab      	cmp	r3, r5
 802253e:	d900      	bls.n	8022542 <__ssputs_r+0x3e>
 8022540:	001d      	movs	r5, r3
 8022542:	0552      	lsls	r2, r2, #21
 8022544:	d528      	bpl.n	8022598 <__ssputs_r+0x94>
 8022546:	0029      	movs	r1, r5
 8022548:	9802      	ldr	r0, [sp, #8]
 802254a:	f7ff fa61 	bl	8021a10 <_malloc_r>
 802254e:	1e06      	subs	r6, r0, #0
 8022550:	d02c      	beq.n	80225ac <__ssputs_r+0xa8>
 8022552:	9a01      	ldr	r2, [sp, #4]
 8022554:	6921      	ldr	r1, [r4, #16]
 8022556:	f7fd fff9 	bl	802054c <memcpy>
 802255a:	89a2      	ldrh	r2, [r4, #12]
 802255c:	4b18      	ldr	r3, [pc, #96]	@ (80225c0 <__ssputs_r+0xbc>)
 802255e:	401a      	ands	r2, r3
 8022560:	2380      	movs	r3, #128	@ 0x80
 8022562:	4313      	orrs	r3, r2
 8022564:	81a3      	strh	r3, [r4, #12]
 8022566:	9b01      	ldr	r3, [sp, #4]
 8022568:	6126      	str	r6, [r4, #16]
 802256a:	18f6      	adds	r6, r6, r3
 802256c:	6026      	str	r6, [r4, #0]
 802256e:	003e      	movs	r6, r7
 8022570:	6165      	str	r5, [r4, #20]
 8022572:	1aed      	subs	r5, r5, r3
 8022574:	60a5      	str	r5, [r4, #8]
 8022576:	42be      	cmp	r6, r7
 8022578:	d900      	bls.n	802257c <__ssputs_r+0x78>
 802257a:	003e      	movs	r6, r7
 802257c:	0032      	movs	r2, r6
 802257e:	9903      	ldr	r1, [sp, #12]
 8022580:	6820      	ldr	r0, [r4, #0]
 8022582:	f000 fb7e 	bl	8022c82 <memmove>
 8022586:	2000      	movs	r0, #0
 8022588:	68a3      	ldr	r3, [r4, #8]
 802258a:	1b9b      	subs	r3, r3, r6
 802258c:	60a3      	str	r3, [r4, #8]
 802258e:	6823      	ldr	r3, [r4, #0]
 8022590:	199b      	adds	r3, r3, r6
 8022592:	6023      	str	r3, [r4, #0]
 8022594:	b005      	add	sp, #20
 8022596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022598:	002a      	movs	r2, r5
 802259a:	9802      	ldr	r0, [sp, #8]
 802259c:	f000 fc05 	bl	8022daa <_realloc_r>
 80225a0:	1e06      	subs	r6, r0, #0
 80225a2:	d1e0      	bne.n	8022566 <__ssputs_r+0x62>
 80225a4:	6921      	ldr	r1, [r4, #16]
 80225a6:	9802      	ldr	r0, [sp, #8]
 80225a8:	f7fe fe62 	bl	8021270 <_free_r>
 80225ac:	230c      	movs	r3, #12
 80225ae:	2001      	movs	r0, #1
 80225b0:	9a02      	ldr	r2, [sp, #8]
 80225b2:	4240      	negs	r0, r0
 80225b4:	6013      	str	r3, [r2, #0]
 80225b6:	89a2      	ldrh	r2, [r4, #12]
 80225b8:	3334      	adds	r3, #52	@ 0x34
 80225ba:	4313      	orrs	r3, r2
 80225bc:	81a3      	strh	r3, [r4, #12]
 80225be:	e7e9      	b.n	8022594 <__ssputs_r+0x90>
 80225c0:	fffffb7f 	.word	0xfffffb7f

080225c4 <_svfiprintf_r>:
 80225c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225c6:	b0a1      	sub	sp, #132	@ 0x84
 80225c8:	9003      	str	r0, [sp, #12]
 80225ca:	001d      	movs	r5, r3
 80225cc:	898b      	ldrh	r3, [r1, #12]
 80225ce:	000f      	movs	r7, r1
 80225d0:	0016      	movs	r6, r2
 80225d2:	061b      	lsls	r3, r3, #24
 80225d4:	d511      	bpl.n	80225fa <_svfiprintf_r+0x36>
 80225d6:	690b      	ldr	r3, [r1, #16]
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d10e      	bne.n	80225fa <_svfiprintf_r+0x36>
 80225dc:	2140      	movs	r1, #64	@ 0x40
 80225de:	f7ff fa17 	bl	8021a10 <_malloc_r>
 80225e2:	6038      	str	r0, [r7, #0]
 80225e4:	6138      	str	r0, [r7, #16]
 80225e6:	2800      	cmp	r0, #0
 80225e8:	d105      	bne.n	80225f6 <_svfiprintf_r+0x32>
 80225ea:	230c      	movs	r3, #12
 80225ec:	9a03      	ldr	r2, [sp, #12]
 80225ee:	6013      	str	r3, [r2, #0]
 80225f0:	2001      	movs	r0, #1
 80225f2:	4240      	negs	r0, r0
 80225f4:	e0cf      	b.n	8022796 <_svfiprintf_r+0x1d2>
 80225f6:	2340      	movs	r3, #64	@ 0x40
 80225f8:	617b      	str	r3, [r7, #20]
 80225fa:	2300      	movs	r3, #0
 80225fc:	ac08      	add	r4, sp, #32
 80225fe:	6163      	str	r3, [r4, #20]
 8022600:	3320      	adds	r3, #32
 8022602:	7663      	strb	r3, [r4, #25]
 8022604:	3310      	adds	r3, #16
 8022606:	76a3      	strb	r3, [r4, #26]
 8022608:	9507      	str	r5, [sp, #28]
 802260a:	0035      	movs	r5, r6
 802260c:	782b      	ldrb	r3, [r5, #0]
 802260e:	2b00      	cmp	r3, #0
 8022610:	d001      	beq.n	8022616 <_svfiprintf_r+0x52>
 8022612:	2b25      	cmp	r3, #37	@ 0x25
 8022614:	d148      	bne.n	80226a8 <_svfiprintf_r+0xe4>
 8022616:	1bab      	subs	r3, r5, r6
 8022618:	9305      	str	r3, [sp, #20]
 802261a:	42b5      	cmp	r5, r6
 802261c:	d00b      	beq.n	8022636 <_svfiprintf_r+0x72>
 802261e:	0032      	movs	r2, r6
 8022620:	0039      	movs	r1, r7
 8022622:	9803      	ldr	r0, [sp, #12]
 8022624:	f7ff ff6e 	bl	8022504 <__ssputs_r>
 8022628:	3001      	adds	r0, #1
 802262a:	d100      	bne.n	802262e <_svfiprintf_r+0x6a>
 802262c:	e0ae      	b.n	802278c <_svfiprintf_r+0x1c8>
 802262e:	6963      	ldr	r3, [r4, #20]
 8022630:	9a05      	ldr	r2, [sp, #20]
 8022632:	189b      	adds	r3, r3, r2
 8022634:	6163      	str	r3, [r4, #20]
 8022636:	782b      	ldrb	r3, [r5, #0]
 8022638:	2b00      	cmp	r3, #0
 802263a:	d100      	bne.n	802263e <_svfiprintf_r+0x7a>
 802263c:	e0a6      	b.n	802278c <_svfiprintf_r+0x1c8>
 802263e:	2201      	movs	r2, #1
 8022640:	2300      	movs	r3, #0
 8022642:	4252      	negs	r2, r2
 8022644:	6062      	str	r2, [r4, #4]
 8022646:	a904      	add	r1, sp, #16
 8022648:	3254      	adds	r2, #84	@ 0x54
 802264a:	1852      	adds	r2, r2, r1
 802264c:	1c6e      	adds	r6, r5, #1
 802264e:	6023      	str	r3, [r4, #0]
 8022650:	60e3      	str	r3, [r4, #12]
 8022652:	60a3      	str	r3, [r4, #8]
 8022654:	7013      	strb	r3, [r2, #0]
 8022656:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022658:	4b54      	ldr	r3, [pc, #336]	@ (80227ac <_svfiprintf_r+0x1e8>)
 802265a:	2205      	movs	r2, #5
 802265c:	0018      	movs	r0, r3
 802265e:	7831      	ldrb	r1, [r6, #0]
 8022660:	9305      	str	r3, [sp, #20]
 8022662:	f7fd ff68 	bl	8020536 <memchr>
 8022666:	1c75      	adds	r5, r6, #1
 8022668:	2800      	cmp	r0, #0
 802266a:	d11f      	bne.n	80226ac <_svfiprintf_r+0xe8>
 802266c:	6822      	ldr	r2, [r4, #0]
 802266e:	06d3      	lsls	r3, r2, #27
 8022670:	d504      	bpl.n	802267c <_svfiprintf_r+0xb8>
 8022672:	2353      	movs	r3, #83	@ 0x53
 8022674:	a904      	add	r1, sp, #16
 8022676:	185b      	adds	r3, r3, r1
 8022678:	2120      	movs	r1, #32
 802267a:	7019      	strb	r1, [r3, #0]
 802267c:	0713      	lsls	r3, r2, #28
 802267e:	d504      	bpl.n	802268a <_svfiprintf_r+0xc6>
 8022680:	2353      	movs	r3, #83	@ 0x53
 8022682:	a904      	add	r1, sp, #16
 8022684:	185b      	adds	r3, r3, r1
 8022686:	212b      	movs	r1, #43	@ 0x2b
 8022688:	7019      	strb	r1, [r3, #0]
 802268a:	7833      	ldrb	r3, [r6, #0]
 802268c:	2b2a      	cmp	r3, #42	@ 0x2a
 802268e:	d016      	beq.n	80226be <_svfiprintf_r+0xfa>
 8022690:	0035      	movs	r5, r6
 8022692:	2100      	movs	r1, #0
 8022694:	200a      	movs	r0, #10
 8022696:	68e3      	ldr	r3, [r4, #12]
 8022698:	782a      	ldrb	r2, [r5, #0]
 802269a:	1c6e      	adds	r6, r5, #1
 802269c:	3a30      	subs	r2, #48	@ 0x30
 802269e:	2a09      	cmp	r2, #9
 80226a0:	d950      	bls.n	8022744 <_svfiprintf_r+0x180>
 80226a2:	2900      	cmp	r1, #0
 80226a4:	d111      	bne.n	80226ca <_svfiprintf_r+0x106>
 80226a6:	e017      	b.n	80226d8 <_svfiprintf_r+0x114>
 80226a8:	3501      	adds	r5, #1
 80226aa:	e7af      	b.n	802260c <_svfiprintf_r+0x48>
 80226ac:	9b05      	ldr	r3, [sp, #20]
 80226ae:	6822      	ldr	r2, [r4, #0]
 80226b0:	1ac0      	subs	r0, r0, r3
 80226b2:	2301      	movs	r3, #1
 80226b4:	4083      	lsls	r3, r0
 80226b6:	4313      	orrs	r3, r2
 80226b8:	002e      	movs	r6, r5
 80226ba:	6023      	str	r3, [r4, #0]
 80226bc:	e7cc      	b.n	8022658 <_svfiprintf_r+0x94>
 80226be:	9b07      	ldr	r3, [sp, #28]
 80226c0:	1d19      	adds	r1, r3, #4
 80226c2:	681b      	ldr	r3, [r3, #0]
 80226c4:	9107      	str	r1, [sp, #28]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	db01      	blt.n	80226ce <_svfiprintf_r+0x10a>
 80226ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80226cc:	e004      	b.n	80226d8 <_svfiprintf_r+0x114>
 80226ce:	425b      	negs	r3, r3
 80226d0:	60e3      	str	r3, [r4, #12]
 80226d2:	2302      	movs	r3, #2
 80226d4:	4313      	orrs	r3, r2
 80226d6:	6023      	str	r3, [r4, #0]
 80226d8:	782b      	ldrb	r3, [r5, #0]
 80226da:	2b2e      	cmp	r3, #46	@ 0x2e
 80226dc:	d10c      	bne.n	80226f8 <_svfiprintf_r+0x134>
 80226de:	786b      	ldrb	r3, [r5, #1]
 80226e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80226e2:	d134      	bne.n	802274e <_svfiprintf_r+0x18a>
 80226e4:	9b07      	ldr	r3, [sp, #28]
 80226e6:	3502      	adds	r5, #2
 80226e8:	1d1a      	adds	r2, r3, #4
 80226ea:	681b      	ldr	r3, [r3, #0]
 80226ec:	9207      	str	r2, [sp, #28]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	da01      	bge.n	80226f6 <_svfiprintf_r+0x132>
 80226f2:	2301      	movs	r3, #1
 80226f4:	425b      	negs	r3, r3
 80226f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80226f8:	4e2d      	ldr	r6, [pc, #180]	@ (80227b0 <_svfiprintf_r+0x1ec>)
 80226fa:	2203      	movs	r2, #3
 80226fc:	0030      	movs	r0, r6
 80226fe:	7829      	ldrb	r1, [r5, #0]
 8022700:	f7fd ff19 	bl	8020536 <memchr>
 8022704:	2800      	cmp	r0, #0
 8022706:	d006      	beq.n	8022716 <_svfiprintf_r+0x152>
 8022708:	2340      	movs	r3, #64	@ 0x40
 802270a:	1b80      	subs	r0, r0, r6
 802270c:	4083      	lsls	r3, r0
 802270e:	6822      	ldr	r2, [r4, #0]
 8022710:	3501      	adds	r5, #1
 8022712:	4313      	orrs	r3, r2
 8022714:	6023      	str	r3, [r4, #0]
 8022716:	7829      	ldrb	r1, [r5, #0]
 8022718:	2206      	movs	r2, #6
 802271a:	4826      	ldr	r0, [pc, #152]	@ (80227b4 <_svfiprintf_r+0x1f0>)
 802271c:	1c6e      	adds	r6, r5, #1
 802271e:	7621      	strb	r1, [r4, #24]
 8022720:	f7fd ff09 	bl	8020536 <memchr>
 8022724:	2800      	cmp	r0, #0
 8022726:	d038      	beq.n	802279a <_svfiprintf_r+0x1d6>
 8022728:	4b23      	ldr	r3, [pc, #140]	@ (80227b8 <_svfiprintf_r+0x1f4>)
 802272a:	2b00      	cmp	r3, #0
 802272c:	d122      	bne.n	8022774 <_svfiprintf_r+0x1b0>
 802272e:	2207      	movs	r2, #7
 8022730:	9b07      	ldr	r3, [sp, #28]
 8022732:	3307      	adds	r3, #7
 8022734:	4393      	bics	r3, r2
 8022736:	3308      	adds	r3, #8
 8022738:	9307      	str	r3, [sp, #28]
 802273a:	6963      	ldr	r3, [r4, #20]
 802273c:	9a04      	ldr	r2, [sp, #16]
 802273e:	189b      	adds	r3, r3, r2
 8022740:	6163      	str	r3, [r4, #20]
 8022742:	e762      	b.n	802260a <_svfiprintf_r+0x46>
 8022744:	4343      	muls	r3, r0
 8022746:	0035      	movs	r5, r6
 8022748:	2101      	movs	r1, #1
 802274a:	189b      	adds	r3, r3, r2
 802274c:	e7a4      	b.n	8022698 <_svfiprintf_r+0xd4>
 802274e:	2300      	movs	r3, #0
 8022750:	200a      	movs	r0, #10
 8022752:	0019      	movs	r1, r3
 8022754:	3501      	adds	r5, #1
 8022756:	6063      	str	r3, [r4, #4]
 8022758:	782a      	ldrb	r2, [r5, #0]
 802275a:	1c6e      	adds	r6, r5, #1
 802275c:	3a30      	subs	r2, #48	@ 0x30
 802275e:	2a09      	cmp	r2, #9
 8022760:	d903      	bls.n	802276a <_svfiprintf_r+0x1a6>
 8022762:	2b00      	cmp	r3, #0
 8022764:	d0c8      	beq.n	80226f8 <_svfiprintf_r+0x134>
 8022766:	9109      	str	r1, [sp, #36]	@ 0x24
 8022768:	e7c6      	b.n	80226f8 <_svfiprintf_r+0x134>
 802276a:	4341      	muls	r1, r0
 802276c:	0035      	movs	r5, r6
 802276e:	2301      	movs	r3, #1
 8022770:	1889      	adds	r1, r1, r2
 8022772:	e7f1      	b.n	8022758 <_svfiprintf_r+0x194>
 8022774:	aa07      	add	r2, sp, #28
 8022776:	9200      	str	r2, [sp, #0]
 8022778:	0021      	movs	r1, r4
 802277a:	003a      	movs	r2, r7
 802277c:	4b0f      	ldr	r3, [pc, #60]	@ (80227bc <_svfiprintf_r+0x1f8>)
 802277e:	9803      	ldr	r0, [sp, #12]
 8022780:	f7fc ffd4 	bl	801f72c <_printf_float>
 8022784:	9004      	str	r0, [sp, #16]
 8022786:	9b04      	ldr	r3, [sp, #16]
 8022788:	3301      	adds	r3, #1
 802278a:	d1d6      	bne.n	802273a <_svfiprintf_r+0x176>
 802278c:	89bb      	ldrh	r3, [r7, #12]
 802278e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022790:	065b      	lsls	r3, r3, #25
 8022792:	d500      	bpl.n	8022796 <_svfiprintf_r+0x1d2>
 8022794:	e72c      	b.n	80225f0 <_svfiprintf_r+0x2c>
 8022796:	b021      	add	sp, #132	@ 0x84
 8022798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802279a:	aa07      	add	r2, sp, #28
 802279c:	9200      	str	r2, [sp, #0]
 802279e:	0021      	movs	r1, r4
 80227a0:	003a      	movs	r2, r7
 80227a2:	4b06      	ldr	r3, [pc, #24]	@ (80227bc <_svfiprintf_r+0x1f8>)
 80227a4:	9803      	ldr	r0, [sp, #12]
 80227a6:	f7fd fa6f 	bl	801fc88 <_printf_i>
 80227aa:	e7eb      	b.n	8022784 <_svfiprintf_r+0x1c0>
 80227ac:	08026158 	.word	0x08026158
 80227b0:	0802615e 	.word	0x0802615e
 80227b4:	08026162 	.word	0x08026162
 80227b8:	0801f72d 	.word	0x0801f72d
 80227bc:	08022505 	.word	0x08022505

080227c0 <__sfputc_r>:
 80227c0:	6893      	ldr	r3, [r2, #8]
 80227c2:	b510      	push	{r4, lr}
 80227c4:	3b01      	subs	r3, #1
 80227c6:	6093      	str	r3, [r2, #8]
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	da04      	bge.n	80227d6 <__sfputc_r+0x16>
 80227cc:	6994      	ldr	r4, [r2, #24]
 80227ce:	42a3      	cmp	r3, r4
 80227d0:	db07      	blt.n	80227e2 <__sfputc_r+0x22>
 80227d2:	290a      	cmp	r1, #10
 80227d4:	d005      	beq.n	80227e2 <__sfputc_r+0x22>
 80227d6:	6813      	ldr	r3, [r2, #0]
 80227d8:	1c58      	adds	r0, r3, #1
 80227da:	6010      	str	r0, [r2, #0]
 80227dc:	7019      	strb	r1, [r3, #0]
 80227de:	0008      	movs	r0, r1
 80227e0:	bd10      	pop	{r4, pc}
 80227e2:	f7fd fd37 	bl	8020254 <__swbuf_r>
 80227e6:	0001      	movs	r1, r0
 80227e8:	e7f9      	b.n	80227de <__sfputc_r+0x1e>

080227ea <__sfputs_r>:
 80227ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227ec:	0006      	movs	r6, r0
 80227ee:	000f      	movs	r7, r1
 80227f0:	0014      	movs	r4, r2
 80227f2:	18d5      	adds	r5, r2, r3
 80227f4:	42ac      	cmp	r4, r5
 80227f6:	d101      	bne.n	80227fc <__sfputs_r+0x12>
 80227f8:	2000      	movs	r0, #0
 80227fa:	e007      	b.n	802280c <__sfputs_r+0x22>
 80227fc:	7821      	ldrb	r1, [r4, #0]
 80227fe:	003a      	movs	r2, r7
 8022800:	0030      	movs	r0, r6
 8022802:	f7ff ffdd 	bl	80227c0 <__sfputc_r>
 8022806:	3401      	adds	r4, #1
 8022808:	1c43      	adds	r3, r0, #1
 802280a:	d1f3      	bne.n	80227f4 <__sfputs_r+0xa>
 802280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022810 <_vfiprintf_r>:
 8022810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022812:	b0a1      	sub	sp, #132	@ 0x84
 8022814:	000f      	movs	r7, r1
 8022816:	0015      	movs	r5, r2
 8022818:	001e      	movs	r6, r3
 802281a:	9003      	str	r0, [sp, #12]
 802281c:	2800      	cmp	r0, #0
 802281e:	d004      	beq.n	802282a <_vfiprintf_r+0x1a>
 8022820:	6a03      	ldr	r3, [r0, #32]
 8022822:	2b00      	cmp	r3, #0
 8022824:	d101      	bne.n	802282a <_vfiprintf_r+0x1a>
 8022826:	f7fd fbcd 	bl	801ffc4 <__sinit>
 802282a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802282c:	07db      	lsls	r3, r3, #31
 802282e:	d405      	bmi.n	802283c <_vfiprintf_r+0x2c>
 8022830:	89bb      	ldrh	r3, [r7, #12]
 8022832:	059b      	lsls	r3, r3, #22
 8022834:	d402      	bmi.n	802283c <_vfiprintf_r+0x2c>
 8022836:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022838:	f7fd fe7b 	bl	8020532 <__retarget_lock_acquire_recursive>
 802283c:	89bb      	ldrh	r3, [r7, #12]
 802283e:	071b      	lsls	r3, r3, #28
 8022840:	d502      	bpl.n	8022848 <_vfiprintf_r+0x38>
 8022842:	693b      	ldr	r3, [r7, #16]
 8022844:	2b00      	cmp	r3, #0
 8022846:	d113      	bne.n	8022870 <_vfiprintf_r+0x60>
 8022848:	0039      	movs	r1, r7
 802284a:	9803      	ldr	r0, [sp, #12]
 802284c:	f7fd fd44 	bl	80202d8 <__swsetup_r>
 8022850:	2800      	cmp	r0, #0
 8022852:	d00d      	beq.n	8022870 <_vfiprintf_r+0x60>
 8022854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022856:	07db      	lsls	r3, r3, #31
 8022858:	d503      	bpl.n	8022862 <_vfiprintf_r+0x52>
 802285a:	2001      	movs	r0, #1
 802285c:	4240      	negs	r0, r0
 802285e:	b021      	add	sp, #132	@ 0x84
 8022860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022862:	89bb      	ldrh	r3, [r7, #12]
 8022864:	059b      	lsls	r3, r3, #22
 8022866:	d4f8      	bmi.n	802285a <_vfiprintf_r+0x4a>
 8022868:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802286a:	f7fd fe63 	bl	8020534 <__retarget_lock_release_recursive>
 802286e:	e7f4      	b.n	802285a <_vfiprintf_r+0x4a>
 8022870:	2300      	movs	r3, #0
 8022872:	ac08      	add	r4, sp, #32
 8022874:	6163      	str	r3, [r4, #20]
 8022876:	3320      	adds	r3, #32
 8022878:	7663      	strb	r3, [r4, #25]
 802287a:	3310      	adds	r3, #16
 802287c:	76a3      	strb	r3, [r4, #26]
 802287e:	9607      	str	r6, [sp, #28]
 8022880:	002e      	movs	r6, r5
 8022882:	7833      	ldrb	r3, [r6, #0]
 8022884:	2b00      	cmp	r3, #0
 8022886:	d001      	beq.n	802288c <_vfiprintf_r+0x7c>
 8022888:	2b25      	cmp	r3, #37	@ 0x25
 802288a:	d148      	bne.n	802291e <_vfiprintf_r+0x10e>
 802288c:	1b73      	subs	r3, r6, r5
 802288e:	9305      	str	r3, [sp, #20]
 8022890:	42ae      	cmp	r6, r5
 8022892:	d00b      	beq.n	80228ac <_vfiprintf_r+0x9c>
 8022894:	002a      	movs	r2, r5
 8022896:	0039      	movs	r1, r7
 8022898:	9803      	ldr	r0, [sp, #12]
 802289a:	f7ff ffa6 	bl	80227ea <__sfputs_r>
 802289e:	3001      	adds	r0, #1
 80228a0:	d100      	bne.n	80228a4 <_vfiprintf_r+0x94>
 80228a2:	e0ae      	b.n	8022a02 <_vfiprintf_r+0x1f2>
 80228a4:	6963      	ldr	r3, [r4, #20]
 80228a6:	9a05      	ldr	r2, [sp, #20]
 80228a8:	189b      	adds	r3, r3, r2
 80228aa:	6163      	str	r3, [r4, #20]
 80228ac:	7833      	ldrb	r3, [r6, #0]
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d100      	bne.n	80228b4 <_vfiprintf_r+0xa4>
 80228b2:	e0a6      	b.n	8022a02 <_vfiprintf_r+0x1f2>
 80228b4:	2201      	movs	r2, #1
 80228b6:	2300      	movs	r3, #0
 80228b8:	4252      	negs	r2, r2
 80228ba:	6062      	str	r2, [r4, #4]
 80228bc:	a904      	add	r1, sp, #16
 80228be:	3254      	adds	r2, #84	@ 0x54
 80228c0:	1852      	adds	r2, r2, r1
 80228c2:	1c75      	adds	r5, r6, #1
 80228c4:	6023      	str	r3, [r4, #0]
 80228c6:	60e3      	str	r3, [r4, #12]
 80228c8:	60a3      	str	r3, [r4, #8]
 80228ca:	7013      	strb	r3, [r2, #0]
 80228cc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80228ce:	4b59      	ldr	r3, [pc, #356]	@ (8022a34 <_vfiprintf_r+0x224>)
 80228d0:	2205      	movs	r2, #5
 80228d2:	0018      	movs	r0, r3
 80228d4:	7829      	ldrb	r1, [r5, #0]
 80228d6:	9305      	str	r3, [sp, #20]
 80228d8:	f7fd fe2d 	bl	8020536 <memchr>
 80228dc:	1c6e      	adds	r6, r5, #1
 80228de:	2800      	cmp	r0, #0
 80228e0:	d11f      	bne.n	8022922 <_vfiprintf_r+0x112>
 80228e2:	6822      	ldr	r2, [r4, #0]
 80228e4:	06d3      	lsls	r3, r2, #27
 80228e6:	d504      	bpl.n	80228f2 <_vfiprintf_r+0xe2>
 80228e8:	2353      	movs	r3, #83	@ 0x53
 80228ea:	a904      	add	r1, sp, #16
 80228ec:	185b      	adds	r3, r3, r1
 80228ee:	2120      	movs	r1, #32
 80228f0:	7019      	strb	r1, [r3, #0]
 80228f2:	0713      	lsls	r3, r2, #28
 80228f4:	d504      	bpl.n	8022900 <_vfiprintf_r+0xf0>
 80228f6:	2353      	movs	r3, #83	@ 0x53
 80228f8:	a904      	add	r1, sp, #16
 80228fa:	185b      	adds	r3, r3, r1
 80228fc:	212b      	movs	r1, #43	@ 0x2b
 80228fe:	7019      	strb	r1, [r3, #0]
 8022900:	782b      	ldrb	r3, [r5, #0]
 8022902:	2b2a      	cmp	r3, #42	@ 0x2a
 8022904:	d016      	beq.n	8022934 <_vfiprintf_r+0x124>
 8022906:	002e      	movs	r6, r5
 8022908:	2100      	movs	r1, #0
 802290a:	200a      	movs	r0, #10
 802290c:	68e3      	ldr	r3, [r4, #12]
 802290e:	7832      	ldrb	r2, [r6, #0]
 8022910:	1c75      	adds	r5, r6, #1
 8022912:	3a30      	subs	r2, #48	@ 0x30
 8022914:	2a09      	cmp	r2, #9
 8022916:	d950      	bls.n	80229ba <_vfiprintf_r+0x1aa>
 8022918:	2900      	cmp	r1, #0
 802291a:	d111      	bne.n	8022940 <_vfiprintf_r+0x130>
 802291c:	e017      	b.n	802294e <_vfiprintf_r+0x13e>
 802291e:	3601      	adds	r6, #1
 8022920:	e7af      	b.n	8022882 <_vfiprintf_r+0x72>
 8022922:	9b05      	ldr	r3, [sp, #20]
 8022924:	6822      	ldr	r2, [r4, #0]
 8022926:	1ac0      	subs	r0, r0, r3
 8022928:	2301      	movs	r3, #1
 802292a:	4083      	lsls	r3, r0
 802292c:	4313      	orrs	r3, r2
 802292e:	0035      	movs	r5, r6
 8022930:	6023      	str	r3, [r4, #0]
 8022932:	e7cc      	b.n	80228ce <_vfiprintf_r+0xbe>
 8022934:	9b07      	ldr	r3, [sp, #28]
 8022936:	1d19      	adds	r1, r3, #4
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	9107      	str	r1, [sp, #28]
 802293c:	2b00      	cmp	r3, #0
 802293e:	db01      	blt.n	8022944 <_vfiprintf_r+0x134>
 8022940:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022942:	e004      	b.n	802294e <_vfiprintf_r+0x13e>
 8022944:	425b      	negs	r3, r3
 8022946:	60e3      	str	r3, [r4, #12]
 8022948:	2302      	movs	r3, #2
 802294a:	4313      	orrs	r3, r2
 802294c:	6023      	str	r3, [r4, #0]
 802294e:	7833      	ldrb	r3, [r6, #0]
 8022950:	2b2e      	cmp	r3, #46	@ 0x2e
 8022952:	d10c      	bne.n	802296e <_vfiprintf_r+0x15e>
 8022954:	7873      	ldrb	r3, [r6, #1]
 8022956:	2b2a      	cmp	r3, #42	@ 0x2a
 8022958:	d134      	bne.n	80229c4 <_vfiprintf_r+0x1b4>
 802295a:	9b07      	ldr	r3, [sp, #28]
 802295c:	3602      	adds	r6, #2
 802295e:	1d1a      	adds	r2, r3, #4
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	9207      	str	r2, [sp, #28]
 8022964:	2b00      	cmp	r3, #0
 8022966:	da01      	bge.n	802296c <_vfiprintf_r+0x15c>
 8022968:	2301      	movs	r3, #1
 802296a:	425b      	negs	r3, r3
 802296c:	9309      	str	r3, [sp, #36]	@ 0x24
 802296e:	4d32      	ldr	r5, [pc, #200]	@ (8022a38 <_vfiprintf_r+0x228>)
 8022970:	2203      	movs	r2, #3
 8022972:	0028      	movs	r0, r5
 8022974:	7831      	ldrb	r1, [r6, #0]
 8022976:	f7fd fdde 	bl	8020536 <memchr>
 802297a:	2800      	cmp	r0, #0
 802297c:	d006      	beq.n	802298c <_vfiprintf_r+0x17c>
 802297e:	2340      	movs	r3, #64	@ 0x40
 8022980:	1b40      	subs	r0, r0, r5
 8022982:	4083      	lsls	r3, r0
 8022984:	6822      	ldr	r2, [r4, #0]
 8022986:	3601      	adds	r6, #1
 8022988:	4313      	orrs	r3, r2
 802298a:	6023      	str	r3, [r4, #0]
 802298c:	7831      	ldrb	r1, [r6, #0]
 802298e:	2206      	movs	r2, #6
 8022990:	482a      	ldr	r0, [pc, #168]	@ (8022a3c <_vfiprintf_r+0x22c>)
 8022992:	1c75      	adds	r5, r6, #1
 8022994:	7621      	strb	r1, [r4, #24]
 8022996:	f7fd fdce 	bl	8020536 <memchr>
 802299a:	2800      	cmp	r0, #0
 802299c:	d040      	beq.n	8022a20 <_vfiprintf_r+0x210>
 802299e:	4b28      	ldr	r3, [pc, #160]	@ (8022a40 <_vfiprintf_r+0x230>)
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d122      	bne.n	80229ea <_vfiprintf_r+0x1da>
 80229a4:	2207      	movs	r2, #7
 80229a6:	9b07      	ldr	r3, [sp, #28]
 80229a8:	3307      	adds	r3, #7
 80229aa:	4393      	bics	r3, r2
 80229ac:	3308      	adds	r3, #8
 80229ae:	9307      	str	r3, [sp, #28]
 80229b0:	6963      	ldr	r3, [r4, #20]
 80229b2:	9a04      	ldr	r2, [sp, #16]
 80229b4:	189b      	adds	r3, r3, r2
 80229b6:	6163      	str	r3, [r4, #20]
 80229b8:	e762      	b.n	8022880 <_vfiprintf_r+0x70>
 80229ba:	4343      	muls	r3, r0
 80229bc:	002e      	movs	r6, r5
 80229be:	2101      	movs	r1, #1
 80229c0:	189b      	adds	r3, r3, r2
 80229c2:	e7a4      	b.n	802290e <_vfiprintf_r+0xfe>
 80229c4:	2300      	movs	r3, #0
 80229c6:	200a      	movs	r0, #10
 80229c8:	0019      	movs	r1, r3
 80229ca:	3601      	adds	r6, #1
 80229cc:	6063      	str	r3, [r4, #4]
 80229ce:	7832      	ldrb	r2, [r6, #0]
 80229d0:	1c75      	adds	r5, r6, #1
 80229d2:	3a30      	subs	r2, #48	@ 0x30
 80229d4:	2a09      	cmp	r2, #9
 80229d6:	d903      	bls.n	80229e0 <_vfiprintf_r+0x1d0>
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d0c8      	beq.n	802296e <_vfiprintf_r+0x15e>
 80229dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80229de:	e7c6      	b.n	802296e <_vfiprintf_r+0x15e>
 80229e0:	4341      	muls	r1, r0
 80229e2:	002e      	movs	r6, r5
 80229e4:	2301      	movs	r3, #1
 80229e6:	1889      	adds	r1, r1, r2
 80229e8:	e7f1      	b.n	80229ce <_vfiprintf_r+0x1be>
 80229ea:	aa07      	add	r2, sp, #28
 80229ec:	9200      	str	r2, [sp, #0]
 80229ee:	0021      	movs	r1, r4
 80229f0:	003a      	movs	r2, r7
 80229f2:	4b14      	ldr	r3, [pc, #80]	@ (8022a44 <_vfiprintf_r+0x234>)
 80229f4:	9803      	ldr	r0, [sp, #12]
 80229f6:	f7fc fe99 	bl	801f72c <_printf_float>
 80229fa:	9004      	str	r0, [sp, #16]
 80229fc:	9b04      	ldr	r3, [sp, #16]
 80229fe:	3301      	adds	r3, #1
 8022a00:	d1d6      	bne.n	80229b0 <_vfiprintf_r+0x1a0>
 8022a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022a04:	07db      	lsls	r3, r3, #31
 8022a06:	d405      	bmi.n	8022a14 <_vfiprintf_r+0x204>
 8022a08:	89bb      	ldrh	r3, [r7, #12]
 8022a0a:	059b      	lsls	r3, r3, #22
 8022a0c:	d402      	bmi.n	8022a14 <_vfiprintf_r+0x204>
 8022a0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022a10:	f7fd fd90 	bl	8020534 <__retarget_lock_release_recursive>
 8022a14:	89bb      	ldrh	r3, [r7, #12]
 8022a16:	065b      	lsls	r3, r3, #25
 8022a18:	d500      	bpl.n	8022a1c <_vfiprintf_r+0x20c>
 8022a1a:	e71e      	b.n	802285a <_vfiprintf_r+0x4a>
 8022a1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022a1e:	e71e      	b.n	802285e <_vfiprintf_r+0x4e>
 8022a20:	aa07      	add	r2, sp, #28
 8022a22:	9200      	str	r2, [sp, #0]
 8022a24:	0021      	movs	r1, r4
 8022a26:	003a      	movs	r2, r7
 8022a28:	4b06      	ldr	r3, [pc, #24]	@ (8022a44 <_vfiprintf_r+0x234>)
 8022a2a:	9803      	ldr	r0, [sp, #12]
 8022a2c:	f7fd f92c 	bl	801fc88 <_printf_i>
 8022a30:	e7e3      	b.n	80229fa <_vfiprintf_r+0x1ea>
 8022a32:	46c0      	nop			@ (mov r8, r8)
 8022a34:	08026158 	.word	0x08026158
 8022a38:	0802615e 	.word	0x0802615e
 8022a3c:	08026162 	.word	0x08026162
 8022a40:	0801f72d 	.word	0x0801f72d
 8022a44:	080227eb 	.word	0x080227eb

08022a48 <__sflush_r>:
 8022a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022a4a:	220c      	movs	r2, #12
 8022a4c:	5e8b      	ldrsh	r3, [r1, r2]
 8022a4e:	0005      	movs	r5, r0
 8022a50:	000c      	movs	r4, r1
 8022a52:	071a      	lsls	r2, r3, #28
 8022a54:	d456      	bmi.n	8022b04 <__sflush_r+0xbc>
 8022a56:	684a      	ldr	r2, [r1, #4]
 8022a58:	2a00      	cmp	r2, #0
 8022a5a:	dc02      	bgt.n	8022a62 <__sflush_r+0x1a>
 8022a5c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8022a5e:	2a00      	cmp	r2, #0
 8022a60:	dd4e      	ble.n	8022b00 <__sflush_r+0xb8>
 8022a62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022a64:	2f00      	cmp	r7, #0
 8022a66:	d04b      	beq.n	8022b00 <__sflush_r+0xb8>
 8022a68:	2200      	movs	r2, #0
 8022a6a:	2080      	movs	r0, #128	@ 0x80
 8022a6c:	682e      	ldr	r6, [r5, #0]
 8022a6e:	602a      	str	r2, [r5, #0]
 8022a70:	001a      	movs	r2, r3
 8022a72:	0140      	lsls	r0, r0, #5
 8022a74:	6a21      	ldr	r1, [r4, #32]
 8022a76:	4002      	ands	r2, r0
 8022a78:	4203      	tst	r3, r0
 8022a7a:	d033      	beq.n	8022ae4 <__sflush_r+0x9c>
 8022a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022a7e:	89a3      	ldrh	r3, [r4, #12]
 8022a80:	075b      	lsls	r3, r3, #29
 8022a82:	d506      	bpl.n	8022a92 <__sflush_r+0x4a>
 8022a84:	6863      	ldr	r3, [r4, #4]
 8022a86:	1ad2      	subs	r2, r2, r3
 8022a88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d001      	beq.n	8022a92 <__sflush_r+0x4a>
 8022a8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022a90:	1ad2      	subs	r2, r2, r3
 8022a92:	2300      	movs	r3, #0
 8022a94:	0028      	movs	r0, r5
 8022a96:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022a98:	6a21      	ldr	r1, [r4, #32]
 8022a9a:	47b8      	blx	r7
 8022a9c:	89a2      	ldrh	r2, [r4, #12]
 8022a9e:	1c43      	adds	r3, r0, #1
 8022aa0:	d106      	bne.n	8022ab0 <__sflush_r+0x68>
 8022aa2:	6829      	ldr	r1, [r5, #0]
 8022aa4:	291d      	cmp	r1, #29
 8022aa6:	d846      	bhi.n	8022b36 <__sflush_r+0xee>
 8022aa8:	4b29      	ldr	r3, [pc, #164]	@ (8022b50 <__sflush_r+0x108>)
 8022aaa:	410b      	asrs	r3, r1
 8022aac:	07db      	lsls	r3, r3, #31
 8022aae:	d442      	bmi.n	8022b36 <__sflush_r+0xee>
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	6063      	str	r3, [r4, #4]
 8022ab4:	6923      	ldr	r3, [r4, #16]
 8022ab6:	6023      	str	r3, [r4, #0]
 8022ab8:	04d2      	lsls	r2, r2, #19
 8022aba:	d505      	bpl.n	8022ac8 <__sflush_r+0x80>
 8022abc:	1c43      	adds	r3, r0, #1
 8022abe:	d102      	bne.n	8022ac6 <__sflush_r+0x7e>
 8022ac0:	682b      	ldr	r3, [r5, #0]
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d100      	bne.n	8022ac8 <__sflush_r+0x80>
 8022ac6:	6560      	str	r0, [r4, #84]	@ 0x54
 8022ac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022aca:	602e      	str	r6, [r5, #0]
 8022acc:	2900      	cmp	r1, #0
 8022ace:	d017      	beq.n	8022b00 <__sflush_r+0xb8>
 8022ad0:	0023      	movs	r3, r4
 8022ad2:	3344      	adds	r3, #68	@ 0x44
 8022ad4:	4299      	cmp	r1, r3
 8022ad6:	d002      	beq.n	8022ade <__sflush_r+0x96>
 8022ad8:	0028      	movs	r0, r5
 8022ada:	f7fe fbc9 	bl	8021270 <_free_r>
 8022ade:	2300      	movs	r3, #0
 8022ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8022ae2:	e00d      	b.n	8022b00 <__sflush_r+0xb8>
 8022ae4:	2301      	movs	r3, #1
 8022ae6:	0028      	movs	r0, r5
 8022ae8:	47b8      	blx	r7
 8022aea:	0002      	movs	r2, r0
 8022aec:	1c43      	adds	r3, r0, #1
 8022aee:	d1c6      	bne.n	8022a7e <__sflush_r+0x36>
 8022af0:	682b      	ldr	r3, [r5, #0]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d0c3      	beq.n	8022a7e <__sflush_r+0x36>
 8022af6:	2b1d      	cmp	r3, #29
 8022af8:	d001      	beq.n	8022afe <__sflush_r+0xb6>
 8022afa:	2b16      	cmp	r3, #22
 8022afc:	d11a      	bne.n	8022b34 <__sflush_r+0xec>
 8022afe:	602e      	str	r6, [r5, #0]
 8022b00:	2000      	movs	r0, #0
 8022b02:	e01e      	b.n	8022b42 <__sflush_r+0xfa>
 8022b04:	690e      	ldr	r6, [r1, #16]
 8022b06:	2e00      	cmp	r6, #0
 8022b08:	d0fa      	beq.n	8022b00 <__sflush_r+0xb8>
 8022b0a:	680f      	ldr	r7, [r1, #0]
 8022b0c:	600e      	str	r6, [r1, #0]
 8022b0e:	1bba      	subs	r2, r7, r6
 8022b10:	9201      	str	r2, [sp, #4]
 8022b12:	2200      	movs	r2, #0
 8022b14:	079b      	lsls	r3, r3, #30
 8022b16:	d100      	bne.n	8022b1a <__sflush_r+0xd2>
 8022b18:	694a      	ldr	r2, [r1, #20]
 8022b1a:	60a2      	str	r2, [r4, #8]
 8022b1c:	9b01      	ldr	r3, [sp, #4]
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	ddee      	ble.n	8022b00 <__sflush_r+0xb8>
 8022b22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022b24:	0032      	movs	r2, r6
 8022b26:	001f      	movs	r7, r3
 8022b28:	0028      	movs	r0, r5
 8022b2a:	9b01      	ldr	r3, [sp, #4]
 8022b2c:	6a21      	ldr	r1, [r4, #32]
 8022b2e:	47b8      	blx	r7
 8022b30:	2800      	cmp	r0, #0
 8022b32:	dc07      	bgt.n	8022b44 <__sflush_r+0xfc>
 8022b34:	89a2      	ldrh	r2, [r4, #12]
 8022b36:	2340      	movs	r3, #64	@ 0x40
 8022b38:	2001      	movs	r0, #1
 8022b3a:	4313      	orrs	r3, r2
 8022b3c:	b21b      	sxth	r3, r3
 8022b3e:	81a3      	strh	r3, [r4, #12]
 8022b40:	4240      	negs	r0, r0
 8022b42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022b44:	9b01      	ldr	r3, [sp, #4]
 8022b46:	1836      	adds	r6, r6, r0
 8022b48:	1a1b      	subs	r3, r3, r0
 8022b4a:	9301      	str	r3, [sp, #4]
 8022b4c:	e7e6      	b.n	8022b1c <__sflush_r+0xd4>
 8022b4e:	46c0      	nop			@ (mov r8, r8)
 8022b50:	dfbffffe 	.word	0xdfbffffe

08022b54 <_fflush_r>:
 8022b54:	690b      	ldr	r3, [r1, #16]
 8022b56:	b570      	push	{r4, r5, r6, lr}
 8022b58:	0005      	movs	r5, r0
 8022b5a:	000c      	movs	r4, r1
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d102      	bne.n	8022b66 <_fflush_r+0x12>
 8022b60:	2500      	movs	r5, #0
 8022b62:	0028      	movs	r0, r5
 8022b64:	bd70      	pop	{r4, r5, r6, pc}
 8022b66:	2800      	cmp	r0, #0
 8022b68:	d004      	beq.n	8022b74 <_fflush_r+0x20>
 8022b6a:	6a03      	ldr	r3, [r0, #32]
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d101      	bne.n	8022b74 <_fflush_r+0x20>
 8022b70:	f7fd fa28 	bl	801ffc4 <__sinit>
 8022b74:	220c      	movs	r2, #12
 8022b76:	5ea3      	ldrsh	r3, [r4, r2]
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d0f1      	beq.n	8022b60 <_fflush_r+0xc>
 8022b7c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022b7e:	07d2      	lsls	r2, r2, #31
 8022b80:	d404      	bmi.n	8022b8c <_fflush_r+0x38>
 8022b82:	059b      	lsls	r3, r3, #22
 8022b84:	d402      	bmi.n	8022b8c <_fflush_r+0x38>
 8022b86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b88:	f7fd fcd3 	bl	8020532 <__retarget_lock_acquire_recursive>
 8022b8c:	0028      	movs	r0, r5
 8022b8e:	0021      	movs	r1, r4
 8022b90:	f7ff ff5a 	bl	8022a48 <__sflush_r>
 8022b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022b96:	0005      	movs	r5, r0
 8022b98:	07db      	lsls	r3, r3, #31
 8022b9a:	d4e2      	bmi.n	8022b62 <_fflush_r+0xe>
 8022b9c:	89a3      	ldrh	r3, [r4, #12]
 8022b9e:	059b      	lsls	r3, r3, #22
 8022ba0:	d4df      	bmi.n	8022b62 <_fflush_r+0xe>
 8022ba2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022ba4:	f7fd fcc6 	bl	8020534 <__retarget_lock_release_recursive>
 8022ba8:	e7db      	b.n	8022b62 <_fflush_r+0xe>
	...

08022bac <__swhatbuf_r>:
 8022bac:	b570      	push	{r4, r5, r6, lr}
 8022bae:	000e      	movs	r6, r1
 8022bb0:	001d      	movs	r5, r3
 8022bb2:	230e      	movs	r3, #14
 8022bb4:	5ec9      	ldrsh	r1, [r1, r3]
 8022bb6:	0014      	movs	r4, r2
 8022bb8:	b096      	sub	sp, #88	@ 0x58
 8022bba:	2900      	cmp	r1, #0
 8022bbc:	da0c      	bge.n	8022bd8 <__swhatbuf_r+0x2c>
 8022bbe:	89b2      	ldrh	r2, [r6, #12]
 8022bc0:	2380      	movs	r3, #128	@ 0x80
 8022bc2:	0011      	movs	r1, r2
 8022bc4:	4019      	ands	r1, r3
 8022bc6:	421a      	tst	r2, r3
 8022bc8:	d114      	bne.n	8022bf4 <__swhatbuf_r+0x48>
 8022bca:	2380      	movs	r3, #128	@ 0x80
 8022bcc:	00db      	lsls	r3, r3, #3
 8022bce:	2000      	movs	r0, #0
 8022bd0:	6029      	str	r1, [r5, #0]
 8022bd2:	6023      	str	r3, [r4, #0]
 8022bd4:	b016      	add	sp, #88	@ 0x58
 8022bd6:	bd70      	pop	{r4, r5, r6, pc}
 8022bd8:	466a      	mov	r2, sp
 8022bda:	f000 f865 	bl	8022ca8 <_fstat_r>
 8022bde:	2800      	cmp	r0, #0
 8022be0:	dbed      	blt.n	8022bbe <__swhatbuf_r+0x12>
 8022be2:	23f0      	movs	r3, #240	@ 0xf0
 8022be4:	9901      	ldr	r1, [sp, #4]
 8022be6:	021b      	lsls	r3, r3, #8
 8022be8:	4019      	ands	r1, r3
 8022bea:	4b04      	ldr	r3, [pc, #16]	@ (8022bfc <__swhatbuf_r+0x50>)
 8022bec:	18c9      	adds	r1, r1, r3
 8022bee:	424b      	negs	r3, r1
 8022bf0:	4159      	adcs	r1, r3
 8022bf2:	e7ea      	b.n	8022bca <__swhatbuf_r+0x1e>
 8022bf4:	2100      	movs	r1, #0
 8022bf6:	2340      	movs	r3, #64	@ 0x40
 8022bf8:	e7e9      	b.n	8022bce <__swhatbuf_r+0x22>
 8022bfa:	46c0      	nop			@ (mov r8, r8)
 8022bfc:	ffffe000 	.word	0xffffe000

08022c00 <__smakebuf_r>:
 8022c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c02:	2602      	movs	r6, #2
 8022c04:	898b      	ldrh	r3, [r1, #12]
 8022c06:	0005      	movs	r5, r0
 8022c08:	000c      	movs	r4, r1
 8022c0a:	b085      	sub	sp, #20
 8022c0c:	4233      	tst	r3, r6
 8022c0e:	d007      	beq.n	8022c20 <__smakebuf_r+0x20>
 8022c10:	0023      	movs	r3, r4
 8022c12:	3347      	adds	r3, #71	@ 0x47
 8022c14:	6023      	str	r3, [r4, #0]
 8022c16:	6123      	str	r3, [r4, #16]
 8022c18:	2301      	movs	r3, #1
 8022c1a:	6163      	str	r3, [r4, #20]
 8022c1c:	b005      	add	sp, #20
 8022c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c20:	ab03      	add	r3, sp, #12
 8022c22:	aa02      	add	r2, sp, #8
 8022c24:	f7ff ffc2 	bl	8022bac <__swhatbuf_r>
 8022c28:	9f02      	ldr	r7, [sp, #8]
 8022c2a:	9001      	str	r0, [sp, #4]
 8022c2c:	0039      	movs	r1, r7
 8022c2e:	0028      	movs	r0, r5
 8022c30:	f7fe feee 	bl	8021a10 <_malloc_r>
 8022c34:	2800      	cmp	r0, #0
 8022c36:	d108      	bne.n	8022c4a <__smakebuf_r+0x4a>
 8022c38:	220c      	movs	r2, #12
 8022c3a:	5ea3      	ldrsh	r3, [r4, r2]
 8022c3c:	059a      	lsls	r2, r3, #22
 8022c3e:	d4ed      	bmi.n	8022c1c <__smakebuf_r+0x1c>
 8022c40:	2203      	movs	r2, #3
 8022c42:	4393      	bics	r3, r2
 8022c44:	431e      	orrs	r6, r3
 8022c46:	81a6      	strh	r6, [r4, #12]
 8022c48:	e7e2      	b.n	8022c10 <__smakebuf_r+0x10>
 8022c4a:	2380      	movs	r3, #128	@ 0x80
 8022c4c:	89a2      	ldrh	r2, [r4, #12]
 8022c4e:	6020      	str	r0, [r4, #0]
 8022c50:	4313      	orrs	r3, r2
 8022c52:	81a3      	strh	r3, [r4, #12]
 8022c54:	9b03      	ldr	r3, [sp, #12]
 8022c56:	6120      	str	r0, [r4, #16]
 8022c58:	6167      	str	r7, [r4, #20]
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	d00c      	beq.n	8022c78 <__smakebuf_r+0x78>
 8022c5e:	0028      	movs	r0, r5
 8022c60:	230e      	movs	r3, #14
 8022c62:	5ee1      	ldrsh	r1, [r4, r3]
 8022c64:	f000 f832 	bl	8022ccc <_isatty_r>
 8022c68:	2800      	cmp	r0, #0
 8022c6a:	d005      	beq.n	8022c78 <__smakebuf_r+0x78>
 8022c6c:	2303      	movs	r3, #3
 8022c6e:	89a2      	ldrh	r2, [r4, #12]
 8022c70:	439a      	bics	r2, r3
 8022c72:	3b02      	subs	r3, #2
 8022c74:	4313      	orrs	r3, r2
 8022c76:	81a3      	strh	r3, [r4, #12]
 8022c78:	89a3      	ldrh	r3, [r4, #12]
 8022c7a:	9a01      	ldr	r2, [sp, #4]
 8022c7c:	4313      	orrs	r3, r2
 8022c7e:	81a3      	strh	r3, [r4, #12]
 8022c80:	e7cc      	b.n	8022c1c <__smakebuf_r+0x1c>

08022c82 <memmove>:
 8022c82:	b510      	push	{r4, lr}
 8022c84:	4288      	cmp	r0, r1
 8022c86:	d806      	bhi.n	8022c96 <memmove+0x14>
 8022c88:	2300      	movs	r3, #0
 8022c8a:	429a      	cmp	r2, r3
 8022c8c:	d008      	beq.n	8022ca0 <memmove+0x1e>
 8022c8e:	5ccc      	ldrb	r4, [r1, r3]
 8022c90:	54c4      	strb	r4, [r0, r3]
 8022c92:	3301      	adds	r3, #1
 8022c94:	e7f9      	b.n	8022c8a <memmove+0x8>
 8022c96:	188b      	adds	r3, r1, r2
 8022c98:	4298      	cmp	r0, r3
 8022c9a:	d2f5      	bcs.n	8022c88 <memmove+0x6>
 8022c9c:	3a01      	subs	r2, #1
 8022c9e:	d200      	bcs.n	8022ca2 <memmove+0x20>
 8022ca0:	bd10      	pop	{r4, pc}
 8022ca2:	5c8b      	ldrb	r3, [r1, r2]
 8022ca4:	5483      	strb	r3, [r0, r2]
 8022ca6:	e7f9      	b.n	8022c9c <memmove+0x1a>

08022ca8 <_fstat_r>:
 8022ca8:	2300      	movs	r3, #0
 8022caa:	b570      	push	{r4, r5, r6, lr}
 8022cac:	4d06      	ldr	r5, [pc, #24]	@ (8022cc8 <_fstat_r+0x20>)
 8022cae:	0004      	movs	r4, r0
 8022cb0:	0008      	movs	r0, r1
 8022cb2:	0011      	movs	r1, r2
 8022cb4:	602b      	str	r3, [r5, #0]
 8022cb6:	f7eb f879 	bl	800ddac <_fstat>
 8022cba:	1c43      	adds	r3, r0, #1
 8022cbc:	d103      	bne.n	8022cc6 <_fstat_r+0x1e>
 8022cbe:	682b      	ldr	r3, [r5, #0]
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d000      	beq.n	8022cc6 <_fstat_r+0x1e>
 8022cc4:	6023      	str	r3, [r4, #0]
 8022cc6:	bd70      	pop	{r4, r5, r6, pc}
 8022cc8:	200037bc 	.word	0x200037bc

08022ccc <_isatty_r>:
 8022ccc:	2300      	movs	r3, #0
 8022cce:	b570      	push	{r4, r5, r6, lr}
 8022cd0:	4d06      	ldr	r5, [pc, #24]	@ (8022cec <_isatty_r+0x20>)
 8022cd2:	0004      	movs	r4, r0
 8022cd4:	0008      	movs	r0, r1
 8022cd6:	602b      	str	r3, [r5, #0]
 8022cd8:	f7eb f876 	bl	800ddc8 <_isatty>
 8022cdc:	1c43      	adds	r3, r0, #1
 8022cde:	d103      	bne.n	8022ce8 <_isatty_r+0x1c>
 8022ce0:	682b      	ldr	r3, [r5, #0]
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	d000      	beq.n	8022ce8 <_isatty_r+0x1c>
 8022ce6:	6023      	str	r3, [r4, #0]
 8022ce8:	bd70      	pop	{r4, r5, r6, pc}
 8022cea:	46c0      	nop			@ (mov r8, r8)
 8022cec:	200037bc 	.word	0x200037bc

08022cf0 <_sbrk_r>:
 8022cf0:	2300      	movs	r3, #0
 8022cf2:	b570      	push	{r4, r5, r6, lr}
 8022cf4:	4d06      	ldr	r5, [pc, #24]	@ (8022d10 <_sbrk_r+0x20>)
 8022cf6:	0004      	movs	r4, r0
 8022cf8:	0008      	movs	r0, r1
 8022cfa:	602b      	str	r3, [r5, #0]
 8022cfc:	f7eb f878 	bl	800ddf0 <_sbrk>
 8022d00:	1c43      	adds	r3, r0, #1
 8022d02:	d103      	bne.n	8022d0c <_sbrk_r+0x1c>
 8022d04:	682b      	ldr	r3, [r5, #0]
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d000      	beq.n	8022d0c <_sbrk_r+0x1c>
 8022d0a:	6023      	str	r3, [r4, #0]
 8022d0c:	bd70      	pop	{r4, r5, r6, pc}
 8022d0e:	46c0      	nop			@ (mov r8, r8)
 8022d10:	200037bc 	.word	0x200037bc

08022d14 <__assert_func>:
 8022d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022d16:	0014      	movs	r4, r2
 8022d18:	001a      	movs	r2, r3
 8022d1a:	4b09      	ldr	r3, [pc, #36]	@ (8022d40 <__assert_func+0x2c>)
 8022d1c:	0005      	movs	r5, r0
 8022d1e:	681b      	ldr	r3, [r3, #0]
 8022d20:	000e      	movs	r6, r1
 8022d22:	68d8      	ldr	r0, [r3, #12]
 8022d24:	4b07      	ldr	r3, [pc, #28]	@ (8022d44 <__assert_func+0x30>)
 8022d26:	2c00      	cmp	r4, #0
 8022d28:	d101      	bne.n	8022d2e <__assert_func+0x1a>
 8022d2a:	4b07      	ldr	r3, [pc, #28]	@ (8022d48 <__assert_func+0x34>)
 8022d2c:	001c      	movs	r4, r3
 8022d2e:	4907      	ldr	r1, [pc, #28]	@ (8022d4c <__assert_func+0x38>)
 8022d30:	9301      	str	r3, [sp, #4]
 8022d32:	9402      	str	r4, [sp, #8]
 8022d34:	002b      	movs	r3, r5
 8022d36:	9600      	str	r6, [sp, #0]
 8022d38:	f000 f866 	bl	8022e08 <fiprintf>
 8022d3c:	f000 f874 	bl	8022e28 <abort>
 8022d40:	200003d0 	.word	0x200003d0
 8022d44:	08026169 	.word	0x08026169
 8022d48:	080261a4 	.word	0x080261a4
 8022d4c:	08026176 	.word	0x08026176

08022d50 <_calloc_r>:
 8022d50:	b570      	push	{r4, r5, r6, lr}
 8022d52:	0c0b      	lsrs	r3, r1, #16
 8022d54:	0c15      	lsrs	r5, r2, #16
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	d11e      	bne.n	8022d98 <_calloc_r+0x48>
 8022d5a:	2d00      	cmp	r5, #0
 8022d5c:	d10c      	bne.n	8022d78 <_calloc_r+0x28>
 8022d5e:	b289      	uxth	r1, r1
 8022d60:	b294      	uxth	r4, r2
 8022d62:	434c      	muls	r4, r1
 8022d64:	0021      	movs	r1, r4
 8022d66:	f7fe fe53 	bl	8021a10 <_malloc_r>
 8022d6a:	1e05      	subs	r5, r0, #0
 8022d6c:	d01a      	beq.n	8022da4 <_calloc_r+0x54>
 8022d6e:	0022      	movs	r2, r4
 8022d70:	2100      	movs	r1, #0
 8022d72:	f7fd fb0f 	bl	8020394 <memset>
 8022d76:	e016      	b.n	8022da6 <_calloc_r+0x56>
 8022d78:	1c2b      	adds	r3, r5, #0
 8022d7a:	1c0c      	adds	r4, r1, #0
 8022d7c:	b289      	uxth	r1, r1
 8022d7e:	b292      	uxth	r2, r2
 8022d80:	434a      	muls	r2, r1
 8022d82:	b29b      	uxth	r3, r3
 8022d84:	b2a1      	uxth	r1, r4
 8022d86:	4359      	muls	r1, r3
 8022d88:	0c14      	lsrs	r4, r2, #16
 8022d8a:	190c      	adds	r4, r1, r4
 8022d8c:	0c23      	lsrs	r3, r4, #16
 8022d8e:	d107      	bne.n	8022da0 <_calloc_r+0x50>
 8022d90:	0424      	lsls	r4, r4, #16
 8022d92:	b292      	uxth	r2, r2
 8022d94:	4314      	orrs	r4, r2
 8022d96:	e7e5      	b.n	8022d64 <_calloc_r+0x14>
 8022d98:	2d00      	cmp	r5, #0
 8022d9a:	d101      	bne.n	8022da0 <_calloc_r+0x50>
 8022d9c:	1c14      	adds	r4, r2, #0
 8022d9e:	e7ed      	b.n	8022d7c <_calloc_r+0x2c>
 8022da0:	230c      	movs	r3, #12
 8022da2:	6003      	str	r3, [r0, #0]
 8022da4:	2500      	movs	r5, #0
 8022da6:	0028      	movs	r0, r5
 8022da8:	bd70      	pop	{r4, r5, r6, pc}

08022daa <_realloc_r>:
 8022daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022dac:	0006      	movs	r6, r0
 8022dae:	000c      	movs	r4, r1
 8022db0:	0015      	movs	r5, r2
 8022db2:	2900      	cmp	r1, #0
 8022db4:	d105      	bne.n	8022dc2 <_realloc_r+0x18>
 8022db6:	0011      	movs	r1, r2
 8022db8:	f7fe fe2a 	bl	8021a10 <_malloc_r>
 8022dbc:	0004      	movs	r4, r0
 8022dbe:	0020      	movs	r0, r4
 8022dc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022dc2:	2a00      	cmp	r2, #0
 8022dc4:	d103      	bne.n	8022dce <_realloc_r+0x24>
 8022dc6:	f7fe fa53 	bl	8021270 <_free_r>
 8022dca:	2400      	movs	r4, #0
 8022dcc:	e7f7      	b.n	8022dbe <_realloc_r+0x14>
 8022dce:	f000 f832 	bl	8022e36 <_malloc_usable_size_r>
 8022dd2:	0007      	movs	r7, r0
 8022dd4:	4285      	cmp	r5, r0
 8022dd6:	d802      	bhi.n	8022dde <_realloc_r+0x34>
 8022dd8:	0843      	lsrs	r3, r0, #1
 8022dda:	42ab      	cmp	r3, r5
 8022ddc:	d3ef      	bcc.n	8022dbe <_realloc_r+0x14>
 8022dde:	0029      	movs	r1, r5
 8022de0:	0030      	movs	r0, r6
 8022de2:	f7fe fe15 	bl	8021a10 <_malloc_r>
 8022de6:	9001      	str	r0, [sp, #4]
 8022de8:	2800      	cmp	r0, #0
 8022dea:	d0ee      	beq.n	8022dca <_realloc_r+0x20>
 8022dec:	002a      	movs	r2, r5
 8022dee:	42bd      	cmp	r5, r7
 8022df0:	d900      	bls.n	8022df4 <_realloc_r+0x4a>
 8022df2:	003a      	movs	r2, r7
 8022df4:	0021      	movs	r1, r4
 8022df6:	9801      	ldr	r0, [sp, #4]
 8022df8:	f7fd fba8 	bl	802054c <memcpy>
 8022dfc:	0021      	movs	r1, r4
 8022dfe:	0030      	movs	r0, r6
 8022e00:	f7fe fa36 	bl	8021270 <_free_r>
 8022e04:	9c01      	ldr	r4, [sp, #4]
 8022e06:	e7da      	b.n	8022dbe <_realloc_r+0x14>

08022e08 <fiprintf>:
 8022e08:	b40e      	push	{r1, r2, r3}
 8022e0a:	b517      	push	{r0, r1, r2, r4, lr}
 8022e0c:	4c05      	ldr	r4, [pc, #20]	@ (8022e24 <fiprintf+0x1c>)
 8022e0e:	ab05      	add	r3, sp, #20
 8022e10:	cb04      	ldmia	r3!, {r2}
 8022e12:	0001      	movs	r1, r0
 8022e14:	6820      	ldr	r0, [r4, #0]
 8022e16:	9301      	str	r3, [sp, #4]
 8022e18:	f7ff fcfa 	bl	8022810 <_vfiprintf_r>
 8022e1c:	bc1e      	pop	{r1, r2, r3, r4}
 8022e1e:	bc08      	pop	{r3}
 8022e20:	b003      	add	sp, #12
 8022e22:	4718      	bx	r3
 8022e24:	200003d0 	.word	0x200003d0

08022e28 <abort>:
 8022e28:	2006      	movs	r0, #6
 8022e2a:	b510      	push	{r4, lr}
 8022e2c:	f000 f834 	bl	8022e98 <raise>
 8022e30:	2001      	movs	r0, #1
 8022e32:	f7ea ff87 	bl	800dd44 <_exit>

08022e36 <_malloc_usable_size_r>:
 8022e36:	1f0b      	subs	r3, r1, #4
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	1f18      	subs	r0, r3, #4
 8022e3c:	2b00      	cmp	r3, #0
 8022e3e:	da01      	bge.n	8022e44 <_malloc_usable_size_r+0xe>
 8022e40:	580b      	ldr	r3, [r1, r0]
 8022e42:	18c0      	adds	r0, r0, r3
 8022e44:	4770      	bx	lr

08022e46 <_raise_r>:
 8022e46:	b570      	push	{r4, r5, r6, lr}
 8022e48:	0004      	movs	r4, r0
 8022e4a:	000d      	movs	r5, r1
 8022e4c:	291f      	cmp	r1, #31
 8022e4e:	d904      	bls.n	8022e5a <_raise_r+0x14>
 8022e50:	2316      	movs	r3, #22
 8022e52:	6003      	str	r3, [r0, #0]
 8022e54:	2001      	movs	r0, #1
 8022e56:	4240      	negs	r0, r0
 8022e58:	bd70      	pop	{r4, r5, r6, pc}
 8022e5a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d004      	beq.n	8022e6a <_raise_r+0x24>
 8022e60:	008a      	lsls	r2, r1, #2
 8022e62:	189b      	adds	r3, r3, r2
 8022e64:	681a      	ldr	r2, [r3, #0]
 8022e66:	2a00      	cmp	r2, #0
 8022e68:	d108      	bne.n	8022e7c <_raise_r+0x36>
 8022e6a:	0020      	movs	r0, r4
 8022e6c:	f000 f830 	bl	8022ed0 <_getpid_r>
 8022e70:	002a      	movs	r2, r5
 8022e72:	0001      	movs	r1, r0
 8022e74:	0020      	movs	r0, r4
 8022e76:	f000 f819 	bl	8022eac <_kill_r>
 8022e7a:	e7ed      	b.n	8022e58 <_raise_r+0x12>
 8022e7c:	2a01      	cmp	r2, #1
 8022e7e:	d009      	beq.n	8022e94 <_raise_r+0x4e>
 8022e80:	1c51      	adds	r1, r2, #1
 8022e82:	d103      	bne.n	8022e8c <_raise_r+0x46>
 8022e84:	2316      	movs	r3, #22
 8022e86:	6003      	str	r3, [r0, #0]
 8022e88:	2001      	movs	r0, #1
 8022e8a:	e7e5      	b.n	8022e58 <_raise_r+0x12>
 8022e8c:	2100      	movs	r1, #0
 8022e8e:	0028      	movs	r0, r5
 8022e90:	6019      	str	r1, [r3, #0]
 8022e92:	4790      	blx	r2
 8022e94:	2000      	movs	r0, #0
 8022e96:	e7df      	b.n	8022e58 <_raise_r+0x12>

08022e98 <raise>:
 8022e98:	b510      	push	{r4, lr}
 8022e9a:	4b03      	ldr	r3, [pc, #12]	@ (8022ea8 <raise+0x10>)
 8022e9c:	0001      	movs	r1, r0
 8022e9e:	6818      	ldr	r0, [r3, #0]
 8022ea0:	f7ff ffd1 	bl	8022e46 <_raise_r>
 8022ea4:	bd10      	pop	{r4, pc}
 8022ea6:	46c0      	nop			@ (mov r8, r8)
 8022ea8:	200003d0 	.word	0x200003d0

08022eac <_kill_r>:
 8022eac:	2300      	movs	r3, #0
 8022eae:	b570      	push	{r4, r5, r6, lr}
 8022eb0:	4d06      	ldr	r5, [pc, #24]	@ (8022ecc <_kill_r+0x20>)
 8022eb2:	0004      	movs	r4, r0
 8022eb4:	0008      	movs	r0, r1
 8022eb6:	0011      	movs	r1, r2
 8022eb8:	602b      	str	r3, [r5, #0]
 8022eba:	f7ea ff33 	bl	800dd24 <_kill>
 8022ebe:	1c43      	adds	r3, r0, #1
 8022ec0:	d103      	bne.n	8022eca <_kill_r+0x1e>
 8022ec2:	682b      	ldr	r3, [r5, #0]
 8022ec4:	2b00      	cmp	r3, #0
 8022ec6:	d000      	beq.n	8022eca <_kill_r+0x1e>
 8022ec8:	6023      	str	r3, [r4, #0]
 8022eca:	bd70      	pop	{r4, r5, r6, pc}
 8022ecc:	200037bc 	.word	0x200037bc

08022ed0 <_getpid_r>:
 8022ed0:	b510      	push	{r4, lr}
 8022ed2:	f7ea ff21 	bl	800dd18 <_getpid>
 8022ed6:	bd10      	pop	{r4, pc}

08022ed8 <expf>:
 8022ed8:	b570      	push	{r4, r5, r6, lr}
 8022eda:	1c04      	adds	r4, r0, #0
 8022edc:	f000 f8e6 	bl	80230ac <__ieee754_expf>
 8022ee0:	1c05      	adds	r5, r0, #0
 8022ee2:	1c20      	adds	r0, r4, #0
 8022ee4:	f000 f83c 	bl	8022f60 <finitef>
 8022ee8:	2800      	cmp	r0, #0
 8022eea:	d00b      	beq.n	8022f04 <expf+0x2c>
 8022eec:	490c      	ldr	r1, [pc, #48]	@ (8022f20 <expf+0x48>)
 8022eee:	1c20      	adds	r0, r4, #0
 8022ef0:	f7dd fb32 	bl	8000558 <__aeabi_fcmpgt>
 8022ef4:	2800      	cmp	r0, #0
 8022ef6:	d007      	beq.n	8022f08 <expf+0x30>
 8022ef8:	f7fd faf0 	bl	80204dc <__errno>
 8022efc:	25ff      	movs	r5, #255	@ 0xff
 8022efe:	2322      	movs	r3, #34	@ 0x22
 8022f00:	05ed      	lsls	r5, r5, #23
 8022f02:	6003      	str	r3, [r0, #0]
 8022f04:	1c28      	adds	r0, r5, #0
 8022f06:	bd70      	pop	{r4, r5, r6, pc}
 8022f08:	4906      	ldr	r1, [pc, #24]	@ (8022f24 <expf+0x4c>)
 8022f0a:	1c20      	adds	r0, r4, #0
 8022f0c:	f7dd fb10 	bl	8000530 <__aeabi_fcmplt>
 8022f10:	2800      	cmp	r0, #0
 8022f12:	d0f7      	beq.n	8022f04 <expf+0x2c>
 8022f14:	f7fd fae2 	bl	80204dc <__errno>
 8022f18:	2322      	movs	r3, #34	@ 0x22
 8022f1a:	2500      	movs	r5, #0
 8022f1c:	6003      	str	r3, [r0, #0]
 8022f1e:	e7f1      	b.n	8022f04 <expf+0x2c>
 8022f20:	42b17217 	.word	0x42b17217
 8022f24:	c2cff1b5 	.word	0xc2cff1b5

08022f28 <sqrtf>:
 8022f28:	b570      	push	{r4, r5, r6, lr}
 8022f2a:	1c05      	adds	r5, r0, #0
 8022f2c:	f000 f822 	bl	8022f74 <__ieee754_sqrtf>
 8022f30:	1c29      	adds	r1, r5, #0
 8022f32:	1c04      	adds	r4, r0, #0
 8022f34:	1c28      	adds	r0, r5, #0
 8022f36:	f7de fb15 	bl	8001564 <__aeabi_fcmpun>
 8022f3a:	2800      	cmp	r0, #0
 8022f3c:	d10e      	bne.n	8022f5c <sqrtf+0x34>
 8022f3e:	2100      	movs	r1, #0
 8022f40:	1c28      	adds	r0, r5, #0
 8022f42:	f7dd faf5 	bl	8000530 <__aeabi_fcmplt>
 8022f46:	2800      	cmp	r0, #0
 8022f48:	d008      	beq.n	8022f5c <sqrtf+0x34>
 8022f4a:	f7fd fac7 	bl	80204dc <__errno>
 8022f4e:	2321      	movs	r3, #33	@ 0x21
 8022f50:	2100      	movs	r1, #0
 8022f52:	6003      	str	r3, [r0, #0]
 8022f54:	1c08      	adds	r0, r1, #0
 8022f56:	f7dd fe3d 	bl	8000bd4 <__aeabi_fdiv>
 8022f5a:	1c04      	adds	r4, r0, #0
 8022f5c:	1c20      	adds	r0, r4, #0
 8022f5e:	bd70      	pop	{r4, r5, r6, pc}

08022f60 <finitef>:
 8022f60:	22ff      	movs	r2, #255	@ 0xff
 8022f62:	0043      	lsls	r3, r0, #1
 8022f64:	085b      	lsrs	r3, r3, #1
 8022f66:	2001      	movs	r0, #1
 8022f68:	05d2      	lsls	r2, r2, #23
 8022f6a:	4293      	cmp	r3, r2
 8022f6c:	db00      	blt.n	8022f70 <finitef+0x10>
 8022f6e:	2000      	movs	r0, #0
 8022f70:	4770      	bx	lr
	...

08022f74 <__ieee754_sqrtf>:
 8022f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022f76:	0003      	movs	r3, r0
 8022f78:	0042      	lsls	r2, r0, #1
 8022f7a:	1c04      	adds	r4, r0, #0
 8022f7c:	20ff      	movs	r0, #255	@ 0xff
 8022f7e:	0852      	lsrs	r2, r2, #1
 8022f80:	05c0      	lsls	r0, r0, #23
 8022f82:	4282      	cmp	r2, r0
 8022f84:	d30a      	bcc.n	8022f9c <__ieee754_sqrtf+0x28>
 8022f86:	1c21      	adds	r1, r4, #0
 8022f88:	1c20      	adds	r0, r4, #0
 8022f8a:	f7de f809 	bl	8000fa0 <__aeabi_fmul>
 8022f8e:	1c01      	adds	r1, r0, #0
 8022f90:	1c20      	adds	r0, r4, #0
 8022f92:	f7dd fc95 	bl	80008c0 <__aeabi_fadd>
 8022f96:	1c04      	adds	r4, r0, #0
 8022f98:	1c20      	adds	r0, r4, #0
 8022f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022f9c:	2a00      	cmp	r2, #0
 8022f9e:	d0fb      	beq.n	8022f98 <__ieee754_sqrtf+0x24>
 8022fa0:	2c00      	cmp	r4, #0
 8022fa2:	da07      	bge.n	8022fb4 <__ieee754_sqrtf+0x40>
 8022fa4:	1c21      	adds	r1, r4, #0
 8022fa6:	1c20      	adds	r0, r4, #0
 8022fa8:	f7de f938 	bl	800121c <__aeabi_fsub>
 8022fac:	1c01      	adds	r1, r0, #0
 8022fae:	f7dd fe11 	bl	8000bd4 <__aeabi_fdiv>
 8022fb2:	e7f0      	b.n	8022f96 <__ieee754_sqrtf+0x22>
 8022fb4:	0022      	movs	r2, r4
 8022fb6:	15e1      	asrs	r1, r4, #23
 8022fb8:	4002      	ands	r2, r0
 8022fba:	4204      	tst	r4, r0
 8022fbc:	d046      	beq.n	802304c <__ieee754_sqrtf+0xd8>
 8022fbe:	2280      	movs	r2, #128	@ 0x80
 8022fc0:	000f      	movs	r7, r1
 8022fc2:	025b      	lsls	r3, r3, #9
 8022fc4:	0a5b      	lsrs	r3, r3, #9
 8022fc6:	0412      	lsls	r2, r2, #16
 8022fc8:	3f7f      	subs	r7, #127	@ 0x7f
 8022fca:	4313      	orrs	r3, r2
 8022fcc:	07c9      	lsls	r1, r1, #31
 8022fce:	d400      	bmi.n	8022fd2 <__ieee754_sqrtf+0x5e>
 8022fd0:	005b      	lsls	r3, r3, #1
 8022fd2:	2400      	movs	r4, #0
 8022fd4:	2180      	movs	r1, #128	@ 0x80
 8022fd6:	2019      	movs	r0, #25
 8022fd8:	0026      	movs	r6, r4
 8022fda:	107f      	asrs	r7, r7, #1
 8022fdc:	005b      	lsls	r3, r3, #1
 8022fde:	0449      	lsls	r1, r1, #17
 8022fe0:	1875      	adds	r5, r6, r1
 8022fe2:	001a      	movs	r2, r3
 8022fe4:	429d      	cmp	r5, r3
 8022fe6:	dc02      	bgt.n	8022fee <__ieee754_sqrtf+0x7a>
 8022fe8:	186e      	adds	r6, r5, r1
 8022fea:	1b5a      	subs	r2, r3, r5
 8022fec:	1864      	adds	r4, r4, r1
 8022fee:	3801      	subs	r0, #1
 8022ff0:	0053      	lsls	r3, r2, #1
 8022ff2:	0849      	lsrs	r1, r1, #1
 8022ff4:	2800      	cmp	r0, #0
 8022ff6:	d1f3      	bne.n	8022fe0 <__ieee754_sqrtf+0x6c>
 8022ff8:	2a00      	cmp	r2, #0
 8022ffa:	d019      	beq.n	8023030 <__ieee754_sqrtf+0xbc>
 8022ffc:	4d17      	ldr	r5, [pc, #92]	@ (802305c <__ieee754_sqrtf+0xe8>)
 8022ffe:	4e18      	ldr	r6, [pc, #96]	@ (8023060 <__ieee754_sqrtf+0xec>)
 8023000:	6828      	ldr	r0, [r5, #0]
 8023002:	6831      	ldr	r1, [r6, #0]
 8023004:	682b      	ldr	r3, [r5, #0]
 8023006:	9301      	str	r3, [sp, #4]
 8023008:	f7de f908 	bl	800121c <__aeabi_fsub>
 802300c:	1c01      	adds	r1, r0, #0
 802300e:	9801      	ldr	r0, [sp, #4]
 8023010:	f7dd fa98 	bl	8000544 <__aeabi_fcmple>
 8023014:	2800      	cmp	r0, #0
 8023016:	d00b      	beq.n	8023030 <__ieee754_sqrtf+0xbc>
 8023018:	6828      	ldr	r0, [r5, #0]
 802301a:	6831      	ldr	r1, [r6, #0]
 802301c:	f7dd fc50 	bl	80008c0 <__aeabi_fadd>
 8023020:	682d      	ldr	r5, [r5, #0]
 8023022:	1c01      	adds	r1, r0, #0
 8023024:	1c28      	adds	r0, r5, #0
 8023026:	f7dd fa83 	bl	8000530 <__aeabi_fcmplt>
 802302a:	2800      	cmp	r0, #0
 802302c:	d011      	beq.n	8023052 <__ieee754_sqrtf+0xde>
 802302e:	3402      	adds	r4, #2
 8023030:	23fc      	movs	r3, #252	@ 0xfc
 8023032:	1064      	asrs	r4, r4, #1
 8023034:	059b      	lsls	r3, r3, #22
 8023036:	18e3      	adds	r3, r4, r3
 8023038:	05fc      	lsls	r4, r7, #23
 802303a:	18e4      	adds	r4, r4, r3
 802303c:	e7ac      	b.n	8022f98 <__ieee754_sqrtf+0x24>
 802303e:	005b      	lsls	r3, r3, #1
 8023040:	3201      	adds	r2, #1
 8023042:	4203      	tst	r3, r0
 8023044:	d0fb      	beq.n	802303e <__ieee754_sqrtf+0xca>
 8023046:	3a01      	subs	r2, #1
 8023048:	1a89      	subs	r1, r1, r2
 802304a:	e7b8      	b.n	8022fbe <__ieee754_sqrtf+0x4a>
 802304c:	2080      	movs	r0, #128	@ 0x80
 802304e:	0400      	lsls	r0, r0, #16
 8023050:	e7f7      	b.n	8023042 <__ieee754_sqrtf+0xce>
 8023052:	2301      	movs	r3, #1
 8023054:	3401      	adds	r4, #1
 8023056:	439c      	bics	r4, r3
 8023058:	e7ea      	b.n	8023030 <__ieee754_sqrtf+0xbc>
 802305a:	46c0      	nop			@ (mov r8, r8)
 802305c:	20000424 	.word	0x20000424
 8023060:	20000420 	.word	0x20000420

08023064 <roundf>:
 8023064:	0dc3      	lsrs	r3, r0, #23
 8023066:	b2db      	uxtb	r3, r3
 8023068:	3b7f      	subs	r3, #127	@ 0x7f
 802306a:	0002      	movs	r2, r0
 802306c:	b510      	push	{r4, lr}
 802306e:	2b16      	cmp	r3, #22
 8023070:	dc13      	bgt.n	802309a <roundf+0x36>
 8023072:	2b00      	cmp	r3, #0
 8023074:	da07      	bge.n	8023086 <roundf+0x22>
 8023076:	0fc2      	lsrs	r2, r0, #31
 8023078:	07d0      	lsls	r0, r2, #31
 802307a:	3301      	adds	r3, #1
 802307c:	d102      	bne.n	8023084 <roundf+0x20>
 802307e:	23fe      	movs	r3, #254	@ 0xfe
 8023080:	059b      	lsls	r3, r3, #22
 8023082:	4318      	orrs	r0, r3
 8023084:	bd10      	pop	{r4, pc}
 8023086:	4908      	ldr	r1, [pc, #32]	@ (80230a8 <roundf+0x44>)
 8023088:	4119      	asrs	r1, r3
 802308a:	4208      	tst	r0, r1
 802308c:	d0fa      	beq.n	8023084 <roundf+0x20>
 802308e:	2080      	movs	r0, #128	@ 0x80
 8023090:	03c0      	lsls	r0, r0, #15
 8023092:	4118      	asrs	r0, r3
 8023094:	1880      	adds	r0, r0, r2
 8023096:	4388      	bics	r0, r1
 8023098:	e7f4      	b.n	8023084 <roundf+0x20>
 802309a:	2b80      	cmp	r3, #128	@ 0x80
 802309c:	d1f2      	bne.n	8023084 <roundf+0x20>
 802309e:	1c01      	adds	r1, r0, #0
 80230a0:	f7dd fc0e 	bl	80008c0 <__aeabi_fadd>
 80230a4:	e7ee      	b.n	8023084 <roundf+0x20>
 80230a6:	46c0      	nop			@ (mov r8, r8)
 80230a8:	007fffff 	.word	0x007fffff

080230ac <__ieee754_expf>:
 80230ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80230ae:	21ff      	movs	r1, #255	@ 0xff
 80230b0:	0043      	lsls	r3, r0, #1
 80230b2:	1c04      	adds	r4, r0, #0
 80230b4:	085b      	lsrs	r3, r3, #1
 80230b6:	05c9      	lsls	r1, r1, #23
 80230b8:	428b      	cmp	r3, r1
 80230ba:	d904      	bls.n	80230c6 <__ieee754_expf+0x1a>
 80230bc:	1c01      	adds	r1, r0, #0
 80230be:	1c20      	adds	r0, r4, #0
 80230c0:	f7dd fbfe 	bl	80008c0 <__aeabi_fadd>
 80230c4:	e00d      	b.n	80230e2 <__ieee754_expf+0x36>
 80230c6:	0fc6      	lsrs	r6, r0, #31
 80230c8:	428b      	cmp	r3, r1
 80230ca:	d104      	bne.n	80230d6 <__ieee754_expf+0x2a>
 80230cc:	2e00      	cmp	r6, #0
 80230ce:	d000      	beq.n	80230d2 <__ieee754_expf+0x26>
 80230d0:	e0ba      	b.n	8023248 <__ieee754_expf+0x19c>
 80230d2:	1c20      	adds	r0, r4, #0
 80230d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80230d6:	495d      	ldr	r1, [pc, #372]	@ (802324c <__ieee754_expf+0x1a0>)
 80230d8:	4288      	cmp	r0, r1
 80230da:	dd04      	ble.n	80230e6 <__ieee754_expf+0x3a>
 80230dc:	2000      	movs	r0, #0
 80230de:	f000 f8f1 	bl	80232c4 <__math_oflowf>
 80230e2:	1c04      	adds	r4, r0, #0
 80230e4:	e7f5      	b.n	80230d2 <__ieee754_expf+0x26>
 80230e6:	2800      	cmp	r0, #0
 80230e8:	da06      	bge.n	80230f8 <__ieee754_expf+0x4c>
 80230ea:	4a59      	ldr	r2, [pc, #356]	@ (8023250 <__ieee754_expf+0x1a4>)
 80230ec:	4293      	cmp	r3, r2
 80230ee:	d903      	bls.n	80230f8 <__ieee754_expf+0x4c>
 80230f0:	2000      	movs	r0, #0
 80230f2:	f000 f8e1 	bl	80232b8 <__math_uflowf>
 80230f6:	e7f4      	b.n	80230e2 <__ieee754_expf+0x36>
 80230f8:	4a56      	ldr	r2, [pc, #344]	@ (8023254 <__ieee754_expf+0x1a8>)
 80230fa:	4293      	cmp	r3, r2
 80230fc:	d96e      	bls.n	80231dc <__ieee754_expf+0x130>
 80230fe:	4a56      	ldr	r2, [pc, #344]	@ (8023258 <__ieee754_expf+0x1ac>)
 8023100:	00b5      	lsls	r5, r6, #2
 8023102:	4293      	cmp	r3, r2
 8023104:	d84e      	bhi.n	80231a4 <__ieee754_expf+0xf8>
 8023106:	4b55      	ldr	r3, [pc, #340]	@ (802325c <__ieee754_expf+0x1b0>)
 8023108:	1c20      	adds	r0, r4, #0
 802310a:	5959      	ldr	r1, [r3, r5]
 802310c:	f7de f886 	bl	800121c <__aeabi_fsub>
 8023110:	4b53      	ldr	r3, [pc, #332]	@ (8023260 <__ieee754_expf+0x1b4>)
 8023112:	1c07      	adds	r7, r0, #0
 8023114:	595b      	ldr	r3, [r3, r5]
 8023116:	2501      	movs	r5, #1
 8023118:	1bad      	subs	r5, r5, r6
 802311a:	9300      	str	r3, [sp, #0]
 802311c:	1bad      	subs	r5, r5, r6
 802311e:	9900      	ldr	r1, [sp, #0]
 8023120:	1c38      	adds	r0, r7, #0
 8023122:	f7de f87b 	bl	800121c <__aeabi_fsub>
 8023126:	1c04      	adds	r4, r0, #0
 8023128:	1c21      	adds	r1, r4, #0
 802312a:	1c20      	adds	r0, r4, #0
 802312c:	f7dd ff38 	bl	8000fa0 <__aeabi_fmul>
 8023130:	494c      	ldr	r1, [pc, #304]	@ (8023264 <__ieee754_expf+0x1b8>)
 8023132:	1c06      	adds	r6, r0, #0
 8023134:	f7dd ff34 	bl	8000fa0 <__aeabi_fmul>
 8023138:	494b      	ldr	r1, [pc, #300]	@ (8023268 <__ieee754_expf+0x1bc>)
 802313a:	f7de f86f 	bl	800121c <__aeabi_fsub>
 802313e:	1c31      	adds	r1, r6, #0
 8023140:	f7dd ff2e 	bl	8000fa0 <__aeabi_fmul>
 8023144:	4949      	ldr	r1, [pc, #292]	@ (802326c <__ieee754_expf+0x1c0>)
 8023146:	f7dd fbbb 	bl	80008c0 <__aeabi_fadd>
 802314a:	1c31      	adds	r1, r6, #0
 802314c:	f7dd ff28 	bl	8000fa0 <__aeabi_fmul>
 8023150:	4947      	ldr	r1, [pc, #284]	@ (8023270 <__ieee754_expf+0x1c4>)
 8023152:	f7de f863 	bl	800121c <__aeabi_fsub>
 8023156:	1c31      	adds	r1, r6, #0
 8023158:	f7dd ff22 	bl	8000fa0 <__aeabi_fmul>
 802315c:	4945      	ldr	r1, [pc, #276]	@ (8023274 <__ieee754_expf+0x1c8>)
 802315e:	f7dd fbaf 	bl	80008c0 <__aeabi_fadd>
 8023162:	1c31      	adds	r1, r6, #0
 8023164:	f7dd ff1c 	bl	8000fa0 <__aeabi_fmul>
 8023168:	1c01      	adds	r1, r0, #0
 802316a:	1c20      	adds	r0, r4, #0
 802316c:	f7de f856 	bl	800121c <__aeabi_fsub>
 8023170:	1c01      	adds	r1, r0, #0
 8023172:	1c06      	adds	r6, r0, #0
 8023174:	1c20      	adds	r0, r4, #0
 8023176:	f7dd ff13 	bl	8000fa0 <__aeabi_fmul>
 802317a:	9001      	str	r0, [sp, #4]
 802317c:	2d00      	cmp	r5, #0
 802317e:	d140      	bne.n	8023202 <__ieee754_expf+0x156>
 8023180:	2180      	movs	r1, #128	@ 0x80
 8023182:	1c30      	adds	r0, r6, #0
 8023184:	05c9      	lsls	r1, r1, #23
 8023186:	f7de f849 	bl	800121c <__aeabi_fsub>
 802318a:	1c01      	adds	r1, r0, #0
 802318c:	9801      	ldr	r0, [sp, #4]
 802318e:	f7dd fd21 	bl	8000bd4 <__aeabi_fdiv>
 8023192:	1c21      	adds	r1, r4, #0
 8023194:	f7de f842 	bl	800121c <__aeabi_fsub>
 8023198:	1c01      	adds	r1, r0, #0
 802319a:	20fe      	movs	r0, #254	@ 0xfe
 802319c:	0580      	lsls	r0, r0, #22
 802319e:	f7de f83d 	bl	800121c <__aeabi_fsub>
 80231a2:	e79e      	b.n	80230e2 <__ieee754_expf+0x36>
 80231a4:	4934      	ldr	r1, [pc, #208]	@ (8023278 <__ieee754_expf+0x1cc>)
 80231a6:	1c20      	adds	r0, r4, #0
 80231a8:	f7dd fefa 	bl	8000fa0 <__aeabi_fmul>
 80231ac:	4b33      	ldr	r3, [pc, #204]	@ (802327c <__ieee754_expf+0x1d0>)
 80231ae:	5959      	ldr	r1, [r3, r5]
 80231b0:	f7dd fb86 	bl	80008c0 <__aeabi_fadd>
 80231b4:	f7de f9ec 	bl	8001590 <__aeabi_f2iz>
 80231b8:	0005      	movs	r5, r0
 80231ba:	f7de fa09 	bl	80015d0 <__aeabi_i2f>
 80231be:	4930      	ldr	r1, [pc, #192]	@ (8023280 <__ieee754_expf+0x1d4>)
 80231c0:	1c06      	adds	r6, r0, #0
 80231c2:	f7dd feed 	bl	8000fa0 <__aeabi_fmul>
 80231c6:	1c01      	adds	r1, r0, #0
 80231c8:	1c20      	adds	r0, r4, #0
 80231ca:	f7de f827 	bl	800121c <__aeabi_fsub>
 80231ce:	492d      	ldr	r1, [pc, #180]	@ (8023284 <__ieee754_expf+0x1d8>)
 80231d0:	1c07      	adds	r7, r0, #0
 80231d2:	1c30      	adds	r0, r6, #0
 80231d4:	f7dd fee4 	bl	8000fa0 <__aeabi_fmul>
 80231d8:	9000      	str	r0, [sp, #0]
 80231da:	e7a0      	b.n	802311e <__ieee754_expf+0x72>
 80231dc:	22d0      	movs	r2, #208	@ 0xd0
 80231de:	0592      	lsls	r2, r2, #22
 80231e0:	4293      	cmp	r3, r2
 80231e2:	d20c      	bcs.n	80231fe <__ieee754_expf+0x152>
 80231e4:	4928      	ldr	r1, [pc, #160]	@ (8023288 <__ieee754_expf+0x1dc>)
 80231e6:	1c20      	adds	r0, r4, #0
 80231e8:	f7dd fb6a 	bl	80008c0 <__aeabi_fadd>
 80231ec:	21fe      	movs	r1, #254	@ 0xfe
 80231ee:	0589      	lsls	r1, r1, #22
 80231f0:	f7dd f9b2 	bl	8000558 <__aeabi_fcmpgt>
 80231f4:	1e05      	subs	r5, r0, #0
 80231f6:	d097      	beq.n	8023128 <__ieee754_expf+0x7c>
 80231f8:	21fe      	movs	r1, #254	@ 0xfe
 80231fa:	0589      	lsls	r1, r1, #22
 80231fc:	e75f      	b.n	80230be <__ieee754_expf+0x12>
 80231fe:	2500      	movs	r5, #0
 8023200:	e792      	b.n	8023128 <__ieee754_expf+0x7c>
 8023202:	2080      	movs	r0, #128	@ 0x80
 8023204:	1c31      	adds	r1, r6, #0
 8023206:	05c0      	lsls	r0, r0, #23
 8023208:	f7de f808 	bl	800121c <__aeabi_fsub>
 802320c:	1c01      	adds	r1, r0, #0
 802320e:	9801      	ldr	r0, [sp, #4]
 8023210:	f7dd fce0 	bl	8000bd4 <__aeabi_fdiv>
 8023214:	1c01      	adds	r1, r0, #0
 8023216:	9800      	ldr	r0, [sp, #0]
 8023218:	f7de f800 	bl	800121c <__aeabi_fsub>
 802321c:	1c39      	adds	r1, r7, #0
 802321e:	f7dd fffd 	bl	800121c <__aeabi_fsub>
 8023222:	1c01      	adds	r1, r0, #0
 8023224:	20fe      	movs	r0, #254	@ 0xfe
 8023226:	0580      	lsls	r0, r0, #22
 8023228:	f7dd fff8 	bl	800121c <__aeabi_fsub>
 802322c:	002b      	movs	r3, r5
 802322e:	337d      	adds	r3, #125	@ 0x7d
 8023230:	db02      	blt.n	8023238 <__ieee754_expf+0x18c>
 8023232:	05ec      	lsls	r4, r5, #23
 8023234:	1824      	adds	r4, r4, r0
 8023236:	e74c      	b.n	80230d2 <__ieee754_expf+0x26>
 8023238:	21d8      	movs	r1, #216	@ 0xd8
 802323a:	3564      	adds	r5, #100	@ 0x64
 802323c:	05ed      	lsls	r5, r5, #23
 802323e:	1828      	adds	r0, r5, r0
 8023240:	0509      	lsls	r1, r1, #20
 8023242:	f7dd fead 	bl	8000fa0 <__aeabi_fmul>
 8023246:	e74c      	b.n	80230e2 <__ieee754_expf+0x36>
 8023248:	2400      	movs	r4, #0
 802324a:	e742      	b.n	80230d2 <__ieee754_expf+0x26>
 802324c:	42b17217 	.word	0x42b17217
 8023250:	42cff1b5 	.word	0x42cff1b5
 8023254:	3eb17218 	.word	0x3eb17218
 8023258:	3f851591 	.word	0x3f851591
 802325c:	080261b0 	.word	0x080261b0
 8023260:	080261a8 	.word	0x080261a8
 8023264:	3331bb4c 	.word	0x3331bb4c
 8023268:	35ddea0e 	.word	0x35ddea0e
 802326c:	388ab355 	.word	0x388ab355
 8023270:	3b360b61 	.word	0x3b360b61
 8023274:	3e2aaaab 	.word	0x3e2aaaab
 8023278:	3fb8aa3b 	.word	0x3fb8aa3b
 802327c:	080261b8 	.word	0x080261b8
 8023280:	3f317180 	.word	0x3f317180
 8023284:	3717f7d1 	.word	0x3717f7d1
 8023288:	7149f2ca 	.word	0x7149f2ca

0802328c <with_errnof>:
 802328c:	b570      	push	{r4, r5, r6, lr}
 802328e:	000d      	movs	r5, r1
 8023290:	1c04      	adds	r4, r0, #0
 8023292:	f7fd f923 	bl	80204dc <__errno>
 8023296:	6005      	str	r5, [r0, #0]
 8023298:	1c20      	adds	r0, r4, #0
 802329a:	bd70      	pop	{r4, r5, r6, pc}

0802329c <xflowf>:
 802329c:	b510      	push	{r4, lr}
 802329e:	1c0b      	adds	r3, r1, #0
 80232a0:	2800      	cmp	r0, #0
 80232a2:	d002      	beq.n	80232aa <xflowf+0xe>
 80232a4:	2380      	movs	r3, #128	@ 0x80
 80232a6:	061b      	lsls	r3, r3, #24
 80232a8:	18cb      	adds	r3, r1, r3
 80232aa:	1c18      	adds	r0, r3, #0
 80232ac:	f7dd fe78 	bl	8000fa0 <__aeabi_fmul>
 80232b0:	2122      	movs	r1, #34	@ 0x22
 80232b2:	f7ff ffeb 	bl	802328c <with_errnof>
 80232b6:	bd10      	pop	{r4, pc}

080232b8 <__math_uflowf>:
 80232b8:	2180      	movs	r1, #128	@ 0x80
 80232ba:	b510      	push	{r4, lr}
 80232bc:	0549      	lsls	r1, r1, #21
 80232be:	f7ff ffed 	bl	802329c <xflowf>
 80232c2:	bd10      	pop	{r4, pc}

080232c4 <__math_oflowf>:
 80232c4:	21e0      	movs	r1, #224	@ 0xe0
 80232c6:	b510      	push	{r4, lr}
 80232c8:	05c9      	lsls	r1, r1, #23
 80232ca:	f7ff ffe7 	bl	802329c <xflowf>
 80232ce:	bd10      	pop	{r4, pc}

080232d0 <_init>:
 80232d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232d2:	46c0      	nop			@ (mov r8, r8)
 80232d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232d6:	bc08      	pop	{r3}
 80232d8:	469e      	mov	lr, r3
 80232da:	4770      	bx	lr

080232dc <_fini>:
 80232dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232de:	46c0      	nop			@ (mov r8, r8)
 80232e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232e2:	bc08      	pop	{r3}
 80232e4:	469e      	mov	lr, r3
 80232e6:	4770      	bx	lr
