
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a6e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048a8  0802a7a0  0802a7a0  0002b7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f048  0802f048  0003143c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f048  0802f048  00030048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f050  0802f050  0003143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f050  0802f050  00030050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f054  0802f054  00030054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802f058  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034dc  2000043c  0802f494  0003143c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003918  0802f494  00031918  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003143c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036fcf  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009f03  00000000  00000000  00068433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd0  00000000  00000000  00072338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000222b  00000000  00000000  00075108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024659  00000000  00000000  00077333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000469e5  00000000  00000000  0009b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35d6  00000000  00000000  000e2371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00185947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc1c  00000000  00000000  001859f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00191614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00191681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00193bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a788 	.word	0x0802a788

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a788 	.word	0x0802a788

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802de2c 	.word	0x0802de2c
 8000ec8:	0802de6c 	.word	0x0802de6c
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802dea8 	.word	0x0802dea8
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 feb2 	bl	80148c0 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 fe89 	bl	80148d4 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f8b5 	bl	8013da8 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a7a0 	.word	0x0802a7a0
 8003c84:	0802a7ac 	.word	0x0802a7ac
 8003c88:	0802a7b0 	.word	0x0802a7b0
 8003c8c:	0802a7bc 	.word	0x0802a7bc
 8003c90:	0802a7dc 	.word	0x0802a7dc
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fe0e 	bl	80148d4 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fdfa 	bl	80148d4 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f841 	bl	8013da8 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fdd4 	bl	80148d4 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a7e0 	.word	0x0802a7e0
 8003d4c:	0802a7ac 	.word	0x0802a7ac
 8003d50:	0802a7e4 	.word	0x0802a7e4
 8003d54:	0802a7dc 	.word	0x0802a7dc

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fdb6 	bl	80148d4 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fdaa 	bl	80148d4 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f ffe3 	bl	8013da8 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fd76 	bl	80148d4 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a810 	.word	0x0802a810
 8003e08:	0802a7dc 	.word	0x0802a7dc

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fd43 	bl	80148d4 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f ff70 	bl	8013da8 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ff31 	bl	8013da8 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a82c 	.word	0x0802a82c
 8003f5c:	0802a84c 	.word	0x0802a84c
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a850 	.word	0x0802a850
 8003f68:	0802a7dc 	.word	0x0802a7dc

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f ff0a 	bl	8013da8 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a884 	.word	0x0802a884
 8003fa8:	0802a7dc 	.word	0x0802a7dc

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f feea 	bl	8013da8 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fc79 	bl	80148d4 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fc68 	bl	80148d4 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a898 	.word	0x0802a898
 8004098:	0802a7dc 	.word	0x0802a7dc
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f fe6e 	bl	8013da8 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fbfd 	bl	80148d4 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f025 f86d 	bl	8029214 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f025 f849 	bl	8029214 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f025 f825 	bl	8029214 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f025 f801 	bl	8029214 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 ffd7 	bl	8029214 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 ffb3 	bl	8029214 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 ff8f 	bl	8029214 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 ff6b 	bl	8029214 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a8b4 	.word	0x0802a8b4
 800437c:	0802a7dc 	.word	0x0802a7dc
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc5      	ldr	r3, [pc, #788]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fc4a 	bl	8013cfc <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <ENS_Upkeep+0x320>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e1fb      	b.n	8004874 <ENS_Upkeep+0x41c>
  }
  switch(ENSState) {
 800447c:	4bbe      	ldr	r3, [pc, #760]	@ (8004778 <ENS_Upkeep+0x320>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e1dd      	b.n	8004842 <ENS_Upkeep+0x3ea>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbc      	ldr	r3, [pc, #752]	@ (800477c <ENS_Upkeep+0x324>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abb      	ldr	r2, [pc, #748]	@ (8004780 <ENS_Upkeep+0x328>)
 8004492:	4bbc      	ldr	r3, [pc, #752]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fc86 	bl	8013da8 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fa10 	bl	80148c0 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ab9      	ldr	r2, [pc, #740]	@ (8004788 <ENS_Upkeep+0x330>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <ENS_Upkeep+0x31c>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bb8      	ldr	r3, [pc, #736]	@ (800478c <ENS_Upkeep+0x334>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004790 <ENS_Upkeep+0x338>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e1d0      	b.n	800485a <ENS_Upkeep+0x402>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4baf      	ldr	r3, [pc, #700]	@ (8004778 <ENS_Upkeep+0x320>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1cc      	b.n	800485a <ENS_Upkeep+0x402>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fc8c 	bl	800dddc <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1c9      	b.n	800485e <ENS_Upkeep+0x406>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fc72 	bl	800ddb4 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bab      	ldr	r3, [pc, #684]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <ENS_Upkeep+0x340>)
 80044ea:	4aac      	ldr	r2, [pc, #688]	@ (800479c <ENS_Upkeep+0x344>)
 80044ec:	49a5      	ldr	r1, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fc5a 	bl	8013da8 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 f9ed 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fc5a 	bl	800ddb4 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4b9d      	ldr	r3, [pc, #628]	@ (8004778 <ENS_Upkeep+0x320>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 f9db 	bl	80148c0 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1ab      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fc60 	bl	800dddc <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e19f      	b.n	8004862 <ENS_Upkeep+0x40a>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fc46 	bl	800ddb4 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 f9ce 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fc3b 	bl	800ddb4 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <ENS_Upkeep+0x348>)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fc1e 	bl	8013da8 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc17 	bl	8013da8 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fc10 	bl	8013da8 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 f994 	bl	80148c0 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ENS_Upkeep+0x31c>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e164      	b.n	8004870 <ENS_Upkeep+0x418>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <ENS_Upkeep+0x320>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e160      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fc15 	bl	800dddc <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fc11 	bl	800dddc <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fc0b 	bl	800dddc <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <ENS_Upkeep+0x354>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b6e      	ldr	r3, [pc, #440]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <ENS_Upkeep+0x364>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <ENS_Upkeep+0x368>)
 8004608:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <ENS_Upkeep+0x36c>)
 800460a:	495e      	ldr	r1, [pc, #376]	@ (8004784 <ENS_Upkeep+0x32c>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fbcb 	bl	8013da8 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f955 	bl	80148c0 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e125      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fbc5 	bl	800ddb4 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f93f 	bl	80148c0 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <ENS_Upkeep+0x31c>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f940 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fbad 	bl	800ddb4 <setSensorLock>
      break;
 800465a:	e109      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f936 	bl	80148d4 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f930 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fb9d 	bl	800ddb4 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <ENS_Upkeep+0x320>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e0f6      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10f      	bne.n	80046aa <ENS_Upkeep+0x252>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <ENS_Upkeep+0x374>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <ENS_Upkeep+0x374>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <ENS_Upkeep+0x374>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <ENS_Upkeep+0x378>)
 800469c:	494d      	ldr	r1, [pc, #308]	@ (80047d4 <ENS_Upkeep+0x37c>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fb7f 	bl	8013da8 <CreateLine>
//    Debug("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
//    Debug("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
//    Debug("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
//    Debug("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d103      	bne.n	80046ba <ENS_Upkeep+0x262>
 80046b2:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <ENS_Upkeep+0x26e>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046c4:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <ENS_Upkeep+0x374>)
 80046c8:	7818      	ldrb	r0, [r3, #0]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <ENS_Upkeep+0x374>)
 80046cc:	8859      	ldrh	r1, [r3, #2]
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <ENS_Upkeep+0x374>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	001a      	movs	r2, r3
 80046d4:	f000 fa24 	bl	8004b20 <setENS160>
    ENSState = ENS_LOW_POWER;
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <ENS_Upkeep+0x320>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
    break;
 80046de:	e0c7      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80046e0:	f010 f8ee 	bl	80148c0 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22fa      	movs	r2, #250	@ 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <ENS_Upkeep+0x31c>)
 80046ee:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <ENS_Upkeep+0x312>
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <ENS_Upkeep+0x384>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	4053      	eors	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02e      	beq.n	800476a <ENS_Upkeep+0x312>
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <ENS_Upkeep+0x370>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d92a      	bls.n	800476a <ENS_Upkeep+0x312>
      if (getSensorLock() != FREE) {
 8004714:	f009 fb62 	bl	800dddc <getSensorLock>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d000      	beq.n	800471e <ENS_Upkeep+0x2c6>
 800471c:	e0a3      	b.n	8004866 <ENS_Upkeep+0x40e>
        break;
      }
      setSensorLock(ENS160);
 800471e:	2004      	movs	r0, #4
 8004720:	f009 fb48 	bl	800ddb4 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004724:	1cfc      	adds	r4, r7, #3
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fb70 	bl	8003e0c <ENS160_setMode>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <ENS_Upkeep+0x2e4>
 8004738:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <ENS_Upkeep+0x33c>)
 800473a:	e000      	b.n	800473e <ENS_Upkeep+0x2e6>
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <ENS_Upkeep+0x340>)
 800473e:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	0010      	movs	r0, r2
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	2003      	movs	r0, #3
 800474c:	f00f fb2c 	bl	8013da8 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 8004750:	200a      	movs	r0, #10
 8004752:	f010 f8bf 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8004756:	2000      	movs	r0, #0
 8004758:	f009 fb2c 	bl	800ddb4 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800475c:	f010 f8b0 	bl	80148c0 <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004764:	189a      	adds	r2, r3, r2
 8004766:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004768:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800476a:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <ENS_Upkeep+0x320>)
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
    break;
 8004770:	e07e      	b.n	8004870 <ENS_Upkeep+0x418>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000045c 	.word	0x2000045c
 8004778:	20000000 	.word	0x20000000
 800477c:	0802dee8 	.word	0x0802dee8
 8004780:	0802a8d4 	.word	0x0802a8d4
 8004784:	0802a7dc 	.word	0x0802a7dc
 8004788:	000be6e0 	.word	0x000be6e0
 800478c:	20000e43 	.word	0x20000e43
 8004790:	20000461 	.word	0x20000461
 8004794:	0802a908 	.word	0x0802a908
 8004798:	0802a910 	.word	0x0802a910
 800479c:	0802a918 	.word	0x0802a918
 80047a0:	0802a93c 	.word	0x0802a93c
 80047a4:	0802a954 	.word	0x0802a954
 80047a8:	0802a974 	.word	0x0802a974
 80047ac:	0802a98c 	.word	0x0802a98c
 80047b0:	0802a994 	.word	0x0802a994
 80047b4:	0802a99c 	.word	0x0802a99c
 80047b8:	0802a9a4 	.word	0x0802a9a4
 80047bc:	0802a9ac 	.word	0x0802a9ac
 80047c0:	0802a9b4 	.word	0x0802a9b4
 80047c4:	0802a9bc 	.word	0x0802a9bc
 80047c8:	20000460 	.word	0x20000460
 80047cc:	20000490 	.word	0x20000490
 80047d0:	0802a9e4 	.word	0x0802a9e4
 80047d4:	0802a84c 	.word	0x0802a84c
 80047d8:	2000214d 	.word	0x2000214d
 80047dc:	2000214e 	.word	0x2000214e
 80047e0:	0802aa10 	.word	0x0802aa10
 80047e4:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80047e8:	f009 faf8 	bl	800dddc <getSensorLock>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d13c      	bne.n	800486a <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f009 fadf 	bl	800ddb4 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80047f6:	1cba      	adds	r2, r7, #2
 80047f8:	2301      	movs	r3, #1
 80047fa:	2101      	movs	r1, #1
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7ff f96d 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d111      	bne.n	800482e <ENS_Upkeep+0x3d6>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800480a:	1dfc      	adds	r4, r7, #7
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff fafd 	bl	8003e0c <ENS160_setMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <ENS_Upkeep+0x3ca>
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <ENS_Upkeep+0x424>)
 8004820:	e000      	b.n	8004824 <ENS_Upkeep+0x3cc>
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <ENS_Upkeep+0x428>)
 8004824:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <ENS_Upkeep+0x42c>)
 8004826:	4918      	ldr	r1, [pc, #96]	@ (8004888 <ENS_Upkeep+0x430>)
 8004828:	2003      	movs	r0, #3
 800482a:	f00f fabd 	bl	8013da8 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 800482e:	200a      	movs	r0, #10
 8004830:	f010 f850 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8004834:	2000      	movs	r0, #0
 8004836:	f009 fabd 	bl	800ddb4 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <ENS_Upkeep+0x434>)
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
    break;
 8004840:	e016      	b.n	8004870 <ENS_Upkeep+0x418>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <ENS_Upkeep+0x434>)
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004848:	f009 fac8 	bl	800dddc <getSensorLock>
 800484c:	0003      	movs	r3, r0
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00d      	beq.n	800486e <ENS_Upkeep+0x416>
      setSensorLock(FREE);
 8004852:	2000      	movs	r0, #0
 8004854:	f009 faae 	bl	800ddb4 <setSensorLock>
    }
    break;
 8004858:	e009      	b.n	800486e <ENS_Upkeep+0x416>
    break;
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	e008      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	e006      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	e004      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	e002      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	e000      	b.n	8004870 <ENS_Upkeep+0x418>
    break;
 800486e:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ENS_Upkeep+0x434>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802a908 	.word	0x0802a908
 8004880:	0802a910 	.word	0x0802a910
 8004884:	0802aa48 	.word	0x0802aa48
 8004888:	0802a7dc 	.word	0x0802a7dc
 800488c:	20000000 	.word	0x20000000

08004890 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <forceNTPupdate+0x10>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000698 	.word	0x20000698

080048a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80048ac:	f010 f808 	bl	80148c0 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <setESPTimeStamp+0x20>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	20000694 	.word	0x20000694

080048c8 <setCharges>:

void setCharges(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  solarCharge = ReadSolarVoltage() / 1000.0;
 80048cc:	f005 f934 	bl	8009b38 <ReadSolarVoltage>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fe ff8c 	bl	80037f0 <__aeabi_i2d>
 80048d8:	2200      	movs	r2, #0
 80048da:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <setCharges+0x30>)
 80048dc:	f7fd fc00 	bl	80020e0 <__aeabi_ddiv>
 80048e0:	0002      	movs	r2, r0
 80048e2:	000b      	movs	r3, r1
 80048e4:	0010      	movs	r0, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	f7ff f81c 	bl	8003924 <__aeabi_d2f>
 80048ec:	1c02      	adds	r2, r0, #0
 80048ee:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <setCharges+0x34>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	408f4000 	.word	0x408f4000
 80048fc:	200005c0 	.word	0x200005c0

08004900 <getWifiCred>:

void getWifiCred(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <getWifiCred+0x58>)
 8004906:	4815      	ldr	r0, [pc, #84]	@ (800495c <getWifiCred+0x5c>)
 8004908:	2220      	movs	r2, #32
 800490a:	0019      	movs	r1, r3
 800490c:	f007 fbe2 	bl	800c0d4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <getWifiCred+0x60>)
 8004912:	4814      	ldr	r0, [pc, #80]	@ (8004964 <getWifiCred+0x64>)
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	0019      	movs	r1, r3
 8004918:	f007 fbdc 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <getWifiCred+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <getWifiCred+0x2e>
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <getWifiCred+0x58>)
 8004926:	2220      	movs	r2, #32
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 800492e:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <getWifiCred+0x68>)
 8004930:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <getWifiCred+0x6c>)
 8004932:	0019      	movs	r1, r3
 8004934:	2001      	movs	r0, #1
 8004936:	f00f fa37 	bl	8013da8 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 800493a:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <getWifiCred+0x58>)
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <getWifiCred+0x70>)
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <getWifiCred+0x74>)
 8004940:	2002      	movs	r0, #2
 8004942:	f00f fa31 	bl	8013da8 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <getWifiCred+0x60>)
 8004948:	4a0b      	ldr	r2, [pc, #44]	@ (8004978 <getWifiCred+0x78>)
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <getWifiCred+0x74>)
 800494c:	2002      	movs	r0, #2
 800494e:	f00f fa2b 	bl	8013da8 <CreateLine>
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	200006a0 	.word	0x200006a0
 800495c:	08080200 	.word	0x08080200
 8004960:	200006c0 	.word	0x200006c0
 8004964:	08080220 	.word	0x08080220
 8004968:	0802aa78 	.word	0x0802aa78
 800496c:	0802aac0 	.word	0x0802aac0
 8004970:	0802aac4 	.word	0x0802aac4
 8004974:	0802aad4 	.word	0x0802aad4
 8004978:	0802aad8 	.word	0x0802aad8

0800497c <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <checkName+0x5c>)
 8004984:	4815      	ldr	r0, [pc, #84]	@ (80049dc <checkName+0x60>)
 8004986:	2220      	movs	r2, #32
 8004988:	0019      	movs	r1, r3
 800498a:	f007 fba3 	bl	800c0d4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e00e      	b.n	80049b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <checkName+0x5c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	001a      	movs	r2, r3
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <checkName+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	18d2      	adds	r2, r2, r3
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <checkName+0x64>)
 80049a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	3201      	adds	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b0b      	cmp	r3, #11
 80049ba:	d9ec      	bls.n	8004996 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <checkName+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	4193      	sbcs	r3, r2
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <checkName+0x68>)
 80049c8:	701a      	strb	r2, [r3, #0]
  return test;
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <checkName+0x68>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	20000768 	.word	0x20000768
 80049dc:	08080090 	.word	0x08080090
 80049e0:	20000788 	.word	0x20000788
 80049e4:	2000078c 	.word	0x2000078c

080049e8 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08c      	sub	sp, #48	@ 0x30
 80049ec:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049ee:	003b      	movs	r3, r7
 80049f0:	4814      	ldr	r0, [pc, #80]	@ (8004a44 <setModePowerMail+0x5c>)
 80049f2:	2230      	movs	r2, #48	@ 0x30
 80049f4:	0019      	movs	r1, r3
 80049f6:	f007 fb6d 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 80049fa:	003b      	movs	r3, r7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <setModePowerMail+0x60>)
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <setModePowerMail+0x64>)
 8004a06:	0019      	movs	r1, r3
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f00f f9cd 	bl	8013da8 <CreateLine>
 8004a0e:	e015      	b.n	8004a3c <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <setModePowerMail+0x68>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <setModePowerMail+0x6c>)
 8004a18:	2206      	movs	r2, #6
 8004a1a:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <setModePowerMail+0x70>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <setModePowerMail+0x74>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <setModePowerMail+0x78>)
 8004a28:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <setModePowerMail+0x74>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004a30:	f005 f98c 	bl	8009d4c <getDate>
 8004a34:	0003      	movs	r3, r0
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <setModePowerMail+0x7c>)
 8004a3a:	701a      	strb	r2, [r3, #0]
}
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	@ 0x30
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080802c0 	.word	0x080802c0
 8004a48:	0802aaec 	.word	0x0802aaec
 8004a4c:	0802aac0 	.word	0x0802aac0
 8004a50:	200010f9 	.word	0x200010f9
 8004a54:	20000702 	.word	0x20000702
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000694 	.word	0x20000694
 8004a60:	2000002c 	.word	0x2000002c
 8004a64:	20001110 	.word	0x20001110

08004a68 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004a6c:	f005 f96e 	bl	8009d4c <getDate>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <pwrmailTodaySend+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <pwrmailTodaySend+0x24>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
  }
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20001110 	.word	0x20001110
 8004a8c:	200010f9 	.word	0x200010f9

08004a90 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <setHIDS+0x20>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <setHIDS+0x20>)
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	20000704 	.word	0x20000704

08004ab4 <setVOC>:

void setVOC(uint16_t voc) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	0002      	movs	r2, r0
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <setVOC+0x20>)
 8004ac2:	1dba      	adds	r2, r7, #6
 8004ac4:	2148      	movs	r1, #72	@ 0x48
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	20000704 	.word	0x20000704

08004ad8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <setAHT2x+0x20>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.AHT2x_temperature = airtemp;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <setAHT2x+0x20>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	20000704 	.word	0x20000704

08004afc <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <setBMP280+0x20>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  MeasVal.BMP280_airpressure = airhpa;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <setBMP280+0x20>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000704 	.word	0x20000704

08004b20 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	0004      	movs	r4, r0
 8004b28:	0008      	movs	r0, r1
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	1c22      	adds	r2, r4, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	1c02      	adds	r2, r0, #0
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	1cbb      	adds	r3, r7, #2
 8004b3a:	1c0a      	adds	r2, r1, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <setENS160+0x74>)
 8004b40:	1dfa      	adds	r2, r7, #7
 8004b42:	2154      	movs	r1, #84	@ 0x54
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <setENS160+0x74>)
 8004b4a:	2255      	movs	r2, #85	@ 0x55
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	1dfa      	adds	r2, r7, #7
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d904      	bls.n	8004b60 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <setENS160+0x74>)
 8004b58:	1dfa      	adds	r2, r7, #7
 8004b5a:	2155      	movs	r1, #85	@ 0x55
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <setENS160+0x74>)
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	214a      	movs	r1, #74	@ 0x4a
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <setENS160+0x74>)
 8004b6c:	1cba      	adds	r2, r7, #2
 8004b6e:	2150      	movs	r1, #80	@ 0x50
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <setENS160+0x74>)
 8004b76:	2252      	movs	r2, #82	@ 0x52
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	1cba      	adds	r2, r7, #2
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d904      	bls.n	8004b8c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <setENS160+0x74>)
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	2152      	movs	r1, #82	@ 0x52
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b003      	add	sp, #12
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	20000704 	.word	0x20000704

08004b98 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <setMic+0x28>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <setMic+0x28>)
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <setMic+0x28>)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	20000704 	.word	0x20000704

08004bc4 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	0002      	movs	r2, r0
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fc fe27 	bl	8001828 <__aeabi_i2f>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <setPM1p0+0x50>)
 8004bde:	1c18      	adds	r0, r3, #0
 8004be0:	f7fc f860 	bl	8000ca4 <__aeabi_fdiv>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <setPM1p0+0x54>)
 8004bea:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <setPM1p0+0x54>)
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <setPM1p0+0x54>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1c19      	adds	r1, r3, #0
 8004bf6:	1c10      	adds	r0, r2, #0
 8004bf8:	f7fb fcae 	bl	8000558 <__aeabi_fcmpgt>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d100      	bne.n	8004c02 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c00:	e003      	b.n	8004c0a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <setPM1p0+0x54>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <setPM1p0+0x54>)
 8004c08:	60da      	str	r2, [r3, #12]
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	41200000 	.word	0x41200000
 8004c18:	20000704 	.word	0x20000704

08004c1c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	0002      	movs	r2, r0
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fdfb 	bl	8001828 <__aeabi_i2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	490d      	ldr	r1, [pc, #52]	@ (8004c6c <setPM2p5+0x50>)
 8004c36:	1c18      	adds	r0, r3, #0
 8004c38:	f7fc f834 	bl	8000ca4 <__aeabi_fdiv>
 8004c3c:	1c03      	adds	r3, r0, #0
 8004c3e:	1c1a      	adds	r2, r3, #0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <setPM2p5+0x54>)
 8004c42:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <setPM2p5+0x54>)
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <setPM2p5+0x54>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	1c19      	adds	r1, r3, #0
 8004c4e:	1c10      	adds	r0, r2, #0
 8004c50:	f7fb fc82 	bl	8000558 <__aeabi_fcmpgt>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d100      	bne.n	8004c5a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c58:	e003      	b.n	8004c62 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <setPM2p5+0x54>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <setPM2p5+0x54>)
 8004c60:	615a      	str	r2, [r3, #20]
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	41200000 	.word	0x41200000
 8004c70:	20000704 	.word	0x20000704

08004c74 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fc fdcf 	bl	8001828 <__aeabi_i2f>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	490d      	ldr	r1, [pc, #52]	@ (8004cc4 <setPM4p0+0x50>)
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fc f808 	bl	8000ca4 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
 8004c96:	1c1a      	adds	r2, r3, #0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9a:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <setPM4p0+0x54>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	1c19      	adds	r1, r3, #0
 8004ca6:	1c10      	adds	r0, r2, #0
 8004ca8:	f7fb fc56 	bl	8000558 <__aeabi_fcmpgt>
 8004cac:	1e03      	subs	r3, r0, #0
 8004cae:	d100      	bne.n	8004cb2 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004cb0:	e003      	b.n	8004cba <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb8:	61da      	str	r2, [r3, #28]
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	41200000 	.word	0x41200000
 8004cc8:	20000704 	.word	0x20000704

08004ccc <setPM10>:

void setPM10(uint16_t PM10) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	1dbb      	adds	r3, r7, #6
 8004cd6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fc fda3 	bl	8001828 <__aeabi_i2f>
 8004ce2:	1c03      	adds	r3, r0, #0
 8004ce4:	490d      	ldr	r1, [pc, #52]	@ (8004d1c <setPM10+0x50>)
 8004ce6:	1c18      	adds	r0, r3, #0
 8004ce8:	f7fb ffdc 	bl	8000ca4 <__aeabi_fdiv>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	1c1a      	adds	r2, r3, #0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <setPM10+0x54>)
 8004cf2:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <setPM10+0x54>)
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <setPM10+0x54>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	1c19      	adds	r1, r3, #0
 8004cfe:	1c10      	adds	r0, r2, #0
 8004d00:	f7fb fc2a 	bl	8000558 <__aeabi_fcmpgt>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d100      	bne.n	8004d0a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d08:	e003      	b.n	8004d12 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <setPM10+0x54>)
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <setPM10+0x54>)
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	41200000 	.word	0x41200000
 8004d20:	20000704 	.word	0x20000704

08004d24 <setNOx>:

void setNOx(uint16_t nox) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	801a      	strh	r2, [r3, #0]
  MeasVal.airNOx = nox;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <setNOx+0x38>)
 8004d32:	1dba      	adds	r2, r7, #6
 8004d34:	214c      	movs	r1, #76	@ 0x4c
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <setNOx+0x38>)
 8004d3c:	224e      	movs	r2, #78	@ 0x4e
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	1dba      	adds	r2, r7, #6
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d904      	bls.n	8004d52 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <setNOx+0x38>)
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	214e      	movs	r1, #78	@ 0x4e
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayNOx();
  }
#endif
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	20000704 	.word	0x20000704

08004d60 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d6a:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <SetSEN545temphum+0x34>)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff99 	bl	8000ca4 <__aeabi_fdiv>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	1c1a      	adds	r2, r3, #0
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <SetSEN545temphum+0x3c>)
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f7fb ff91 	bl	8000ca4 <__aeabi_fdiv>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1a      	adds	r2, r3, #0
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	43480000 	.word	0x43480000
 8004d98:	20000704 	.word	0x20000704
 8004d9c:	42c80000 	.word	0x42c80000

08004da0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004da4:	f009 fbd4 	bl	800e550 <sen5x_Get_sen5x_enable_state>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d00f      	beq.n	8004dcc <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc6:	224e      	movs	r2, #78	@ 0x4e
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.eCO2Indexmax = 0;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dce:	2252      	movs	r2, #82	@ 0x52
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dd6:	2255      	movs	r2, #85	@ 0x55
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000704 	.word	0x20000704

08004de8 <SetConfigMode>:

void SetConfigMode(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <SetConfigMode+0x30>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4053      	eors	r3, r2
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <SetConfigMode+0x34>)
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <SetConfigMode+0x38>)
 8004dfe:	0019      	movs	r1, r3
 8004e00:	2003      	movs	r0, #3
 8004e02:	f00e ffd1 	bl	8013da8 <CreateLine>
  }
  ReconfigSet = true;
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SetConfigMode+0x30>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <SetConfigMode+0x3c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200005af 	.word	0x200005af
 8004e1c:	0802ab04 	.word	0x0802ab04
 8004e20:	0802ab24 	.word	0x0802ab24
 8004e24:	200010f7 	.word	0x200010f7

08004e28 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <GetReconfigMode+0x10>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	200005af 	.word	0x200005af

08004e3c <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <ESP_Init+0x1c>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <ESP_Init+0x20>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200004a4 	.word	0x200004a4
 8004e5c:	20000030 	.word	0x20000030

08004e60 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <ESP_Send+0xac>)
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	250f      	movs	r5, #15
 8004e74:	197c      	adds	r4, r7, r5
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	f018 fbc3 	bl	801d608 <HAL_UART_Transmit_DMA>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <ESP_Send+0xb0>)
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <ESP_Send+0xb4>)
 8004e92:	0019      	movs	r1, r3
 8004e94:	2001      	movs	r0, #1
 8004e96:	f00e ff87 	bl	8013da8 <CreateLine>
    return false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e032      	b.n	8004f04 <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	2b5a      	cmp	r3, #90	@ 0x5a
 8004ea4:	d927      	bls.n	8004ef6 <ESP_Send+0x96>
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <ESP_Send+0xb8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d023      	beq.n	8004ef6 <ESP_Send+0x96>
 8004eae:	f004 fe97 	bl	8009be0 <Check_USB_PowerOn>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d01f      	beq.n	8004ef6 <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	001a      	movs	r2, r3
 8004ebc:	240e      	movs	r4, #14
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)command);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f003 fdcc 	bl	8008a6c <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f003 fdc2 	bl	8008a6c <printf_USB>
    printf("ESP_Send: %s", command);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <ESP_Send+0xbc>)
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f021 fa12 	bl	8026318 <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004ef4:	e005      	b.n	8004f02 <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <ESP_Send+0xbc>)
 8004efa:	4909      	ldr	r1, [pc, #36]	@ (8004f20 <ESP_Send+0xc0>)
 8004efc:	2003      	movs	r0, #3
 8004efe:	f00e ff53 	bl	8013da8 <CreateLine>
  return true;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	200004a4 	.word	0x200004a4
 8004f10:	0802ab28 	.word	0x0802ab28
 8004f14:	0802aac0 	.word	0x0802aac0
 8004f18:	200010f7 	.word	0x200010f7
 8004f1c:	0802ab48 	.word	0x0802ab48
 8004f20:	0802ab24 	.word	0x0802ab24

08004f24 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b08b      	sub	sp, #44	@ 0x2c
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cbb      	adds	r3, r7, #2
 8004f30:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <ESP_Receive+0x11c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
#ifndef IGNORE_PARITY_ERRORS
  bool reset = false;
#endif
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <ESP_Receive+0x120>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	2527      	movs	r5, #39	@ 0x27
 8004f3e:	197c      	adds	r4, r7, r5
 8004f40:	1cbb      	adds	r3, r7, #2
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0019      	movs	r1, r3
 8004f48:	f018 fbee 	bl	801d728 <HAL_UART_Receive_DMA>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f50:	197b      	adds	r3, r7, r5
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d100      	bne.n	8004f5a <ESP_Receive+0x36>
 8004f58:	e06c      	b.n	8005034 <ESP_Receive+0x110>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005044 <ESP_Receive+0x120>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2284      	movs	r2, #132	@ 0x84
 8004f60:	589b      	ldr	r3, [r3, r2]
 8004f62:	4a39      	ldr	r2, [pc, #228]	@ (8005048 <ESP_Receive+0x124>)
 8004f64:	4939      	ldr	r1, [pc, #228]	@ (800504c <ESP_Receive+0x128>)
 8004f66:	2001      	movs	r0, #1
 8004f68:	f00e ff1e 	bl	8013da8 <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004f6c:	2608      	movs	r6, #8
 8004f6e:	19bb      	adds	r3, r7, r6
 8004f70:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <ESP_Receive+0x12c>)
 8004f72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f74:	c313      	stmia	r3!, {r0, r1, r4}
 8004f76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f78:	c313      	stmia	r3!, {r0, r1, r4}
 8004f7a:	6811      	ldr	r1, [r2, #0]
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	7912      	ldrb	r2, [r2, #4]
 8004f80:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8004f82:	197b      	adds	r3, r7, r5
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d005      	beq.n	8004f98 <ESP_Receive+0x74>
      Error("Parity%s", uartespmod);
 8004f8c:	19bb      	adds	r3, r7, r6
 8004f8e:	4a31      	ldr	r2, [pc, #196]	@ (8005054 <ESP_Receive+0x130>)
 8004f90:	492e      	ldr	r1, [pc, #184]	@ (800504c <ESP_Receive+0x128>)
 8004f92:	2001      	movs	r0, #1
 8004f94:	f00e ff08 	bl	8013da8 <CreateLine>
#ifndef IGNORE_PARITY_ERRORS
      reset = true;
#endif
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f98:	2327      	movs	r3, #39	@ 0x27
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d006      	beq.n	8004fb2 <ESP_Receive+0x8e>
      Error("Noise%s", uartespmod);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005058 <ESP_Receive+0x134>)
 8004faa:	4928      	ldr	r1, [pc, #160]	@ (800504c <ESP_Receive+0x128>)
 8004fac:	2001      	movs	r0, #1
 8004fae:	f00e fefb 	bl	8013da8 <CreateLine>
#ifndef IGNORE_PARITY_ERRORS
      reset = true;
#endif
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fb2:	2327      	movs	r3, #39	@ 0x27
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d006      	beq.n	8004fcc <ESP_Receive+0xa8>
      Error("Frame%s", uartespmod);
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	4a26      	ldr	r2, [pc, #152]	@ (800505c <ESP_Receive+0x138>)
 8004fc4:	4921      	ldr	r1, [pc, #132]	@ (800504c <ESP_Receive+0x128>)
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f00e feee 	bl	8013da8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004fcc:	2327      	movs	r3, #39	@ 0x27
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d006      	beq.n	8004fe6 <ESP_Receive+0xc2>
      Error("Overrun%s", uartespmod);
 8004fd8:	2308      	movs	r3, #8
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	4a20      	ldr	r2, [pc, #128]	@ (8005060 <ESP_Receive+0x13c>)
 8004fde:	491b      	ldr	r1, [pc, #108]	@ (800504c <ESP_Receive+0x128>)
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f00e fee1 	bl	8013da8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004fe6:	2327      	movs	r3, #39	@ 0x27
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d006      	beq.n	8005000 <ESP_Receive+0xdc>
      Error("DMA transfer%s", uartespmod);
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <ESP_Receive+0x140>)
 8004ff8:	4914      	ldr	r1, [pc, #80]	@ (800504c <ESP_Receive+0x128>)
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f00e fed4 	bl	8013da8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005000:	2327      	movs	r3, #39	@ 0x27
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2220      	movs	r2, #32
 8005008:	4013      	ands	r3, r2
 800500a:	d006      	beq.n	800501a <ESP_Receive+0xf6>
      Error("Receiver Timeout%s", uartespmod);
 800500c:	2308      	movs	r3, #8
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <ESP_Receive+0x144>)
 8005012:	490e      	ldr	r1, [pc, #56]	@ (800504c <ESP_Receive+0x128>)
 8005014:	2001      	movs	r0, #1
 8005016:	f00e fec7 	bl	8013da8 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800501a:	2327      	movs	r3, #39	@ 0x27
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2240      	movs	r2, #64	@ 0x40
 8005022:	4013      	ands	r3, r2
 8005024:	d006      	beq.n	8005034 <ESP_Receive+0x110>
      Error("Invalid Callback%s", uartespmod);
 8005026:	2308      	movs	r3, #8
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	4a10      	ldr	r2, [pc, #64]	@ (800506c <ESP_Receive+0x148>)
 800502c:	4907      	ldr	r1, [pc, #28]	@ (800504c <ESP_Receive+0x128>)
 800502e:	2001      	movs	r0, #1
 8005030:	f00e feba 	bl	8013da8 <CreateLine>
    RxComplete = true;
    return false;
#endif
#endif
  }
  return true;
 8005034:	2301      	movs	r3, #1
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b00b      	add	sp, #44	@ 0x2c
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	200004a8 	.word	0x200004a8
 8005044:	200004a4 	.word	0x200004a4
 8005048:	0802ab58 	.word	0x0802ab58
 800504c:	0802aac0 	.word	0x0802aac0
 8005050:	0802abe8 	.word	0x0802abe8
 8005054:	0802ab88 	.word	0x0802ab88
 8005058:	0802ab94 	.word	0x0802ab94
 800505c:	0802ab9c 	.word	0x0802ab9c
 8005060:	0802aba4 	.word	0x0802aba4
 8005064:	0802abb0 	.word	0x0802abb0
 8005068:	0802abc0 	.word	0x0802abc0
 800506c:	0802abd4 	.word	0x0802abd4

08005070 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b093      	sub	sp, #76	@ 0x4c
 8005074:	af02      	add	r7, sp, #8
 8005076:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 8005078:	2328      	movs	r3, #40	@ 0x28
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	4a6d      	ldr	r2, [pc, #436]	@ (8005234 <HAL_UART_ErrorCallback+0x1c4>)
 800507e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005080:	c313      	stmia	r3!, {r0, r1, r4}
 8005082:	ca03      	ldmia	r2!, {r0, r1}
 8005084:	c303      	stmia	r3!, {r0, r1}
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 800508a:	231c      	movs	r3, #28
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	4a6a      	ldr	r2, [pc, #424]	@ (8005238 <HAL_UART_ErrorCallback+0x1c8>)
 8005090:	ca03      	ldmia	r2!, {r0, r1}
 8005092:	c303      	stmia	r3!, {r0, r1}
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 8005098:	230c      	movs	r3, #12
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_UART_ErrorCallback+0x1cc>)
 800509e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80050a0:	c313      	stmia	r3!, {r0, r1, r4}
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 80050a6:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_UART_ErrorCallback+0x1d0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d000      	beq.n	80050b2 <HAL_UART_ErrorCallback+0x42>
 80050b0:	e0bd      	b.n	800522e <HAL_UART_ErrorCallback+0x1be>
    if (huart->ErrorCode == 4) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2284      	movs	r2, #132	@ 0x84
 80050b6:	589b      	ldr	r3, [r3, r2]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d100      	bne.n	80050be <HAL_UART_ErrorCallback+0x4e>
 80050bc:	e0b6      	b.n	800522c <HAL_UART_ErrorCallback+0x1bc>
      return;
    }
    Error("A callback error has occurred, errorcode: 0x%X", huart->ErrorCode);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2284      	movs	r2, #132	@ 0x84
 80050c2:	589b      	ldr	r3, [r3, r2]
 80050c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005244 <HAL_UART_ErrorCallback+0x1d4>)
 80050c6:	4960      	ldr	r1, [pc, #384]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80050c8:	2001      	movs	r0, #1
 80050ca:	f00e fe6d 	bl	8013da8 <CreateLine>
    switch (huart->ErrorCode) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2284      	movs	r2, #132	@ 0x84
 80050d2:	589b      	ldr	r3, [r3, r2]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d900      	bls.n	80050da <HAL_UART_ErrorCallback+0x6a>
 80050d8:	e09d      	b.n	8005216 <HAL_UART_ErrorCallback+0x1a6>
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_UART_ErrorCallback+0x1dc>)
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 80050e4:	2328      	movs	r3, #40	@ 0x28
 80050e6:	18f8      	adds	r0, r7, r3
 80050e8:	4a59      	ldr	r2, [pc, #356]	@ (8005250 <HAL_UART_ErrorCallback+0x1e0>)
 80050ea:	4957      	ldr	r1, [pc, #348]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80050ec:	230c      	movs	r3, #12
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	231c      	movs	r3, #28
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	0003      	movs	r3, r0
 80050fa:	2001      	movs	r0, #1
 80050fc:	f00e fe54 	bl	8013da8 <CreateLine>
        break;
 8005100:	e08f      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 8005102:	2328      	movs	r3, #40	@ 0x28
 8005104:	18f8      	adds	r0, r7, r3
 8005106:	4a53      	ldr	r2, [pc, #332]	@ (8005254 <HAL_UART_ErrorCallback+0x1e4>)
 8005108:	494f      	ldr	r1, [pc, #316]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800510a:	230c      	movs	r3, #12
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	231c      	movs	r3, #28
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	0003      	movs	r3, r0
 8005118:	2001      	movs	r0, #1
 800511a:	f00e fe45 	bl	8013da8 <CreateLine>
        break;
 800511e:	e080      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 8005120:	2328      	movs	r3, #40	@ 0x28
 8005122:	18f8      	adds	r0, r7, r3
 8005124:	4a4c      	ldr	r2, [pc, #304]	@ (8005258 <HAL_UART_ErrorCallback+0x1e8>)
 8005126:	4948      	ldr	r1, [pc, #288]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005128:	230c      	movs	r3, #12
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	231c      	movs	r3, #28
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	0003      	movs	r3, r0
 8005136:	2001      	movs	r0, #1
 8005138:	f00e fe36 	bl	8013da8 <CreateLine>
        break;
 800513c:	e071      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 800513e:	2328      	movs	r3, #40	@ 0x28
 8005140:	18f8      	adds	r0, r7, r3
 8005142:	4a46      	ldr	r2, [pc, #280]	@ (800525c <HAL_UART_ErrorCallback+0x1ec>)
 8005144:	4940      	ldr	r1, [pc, #256]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005146:	230c      	movs	r3, #12
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	231c      	movs	r3, #28
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0003      	movs	r3, r0
 8005154:	2001      	movs	r0, #1
 8005156:	f00e fe27 	bl	8013da8 <CreateLine>
        break;
 800515a:	e062      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 800515c:	2328      	movs	r3, #40	@ 0x28
 800515e:	18f8      	adds	r0, r7, r3
 8005160:	4a3f      	ldr	r2, [pc, #252]	@ (8005260 <HAL_UART_ErrorCallback+0x1f0>)
 8005162:	4939      	ldr	r1, [pc, #228]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005164:	230c      	movs	r3, #12
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	0003      	movs	r3, r0
 800516c:	2001      	movs	r0, #1
 800516e:	f00e fe1b 	bl	8013da8 <CreateLine>
        break;
 8005172:	e056      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 8005174:	2328      	movs	r3, #40	@ 0x28
 8005176:	18f8      	adds	r0, r7, r3
 8005178:	4a3a      	ldr	r2, [pc, #232]	@ (8005264 <HAL_UART_ErrorCallback+0x1f4>)
 800517a:	4933      	ldr	r1, [pc, #204]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800517c:	230c      	movs	r3, #12
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	231c      	movs	r3, #28
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	0003      	movs	r3, r0
 800518a:	2001      	movs	r0, #1
 800518c:	f00e fe0c 	bl	8013da8 <CreateLine>
        break;
 8005190:	e047      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 8005192:	2328      	movs	r3, #40	@ 0x28
 8005194:	18f8      	adds	r0, r7, r3
 8005196:	4a34      	ldr	r2, [pc, #208]	@ (8005268 <HAL_UART_ErrorCallback+0x1f8>)
 8005198:	492b      	ldr	r1, [pc, #172]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800519a:	230c      	movs	r3, #12
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	231c      	movs	r3, #28
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	0003      	movs	r3, r0
 80051a8:	2001      	movs	r0, #1
 80051aa:	f00e fdfd 	bl	8013da8 <CreateLine>
        break;
 80051ae:	e038      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 80051b0:	2328      	movs	r3, #40	@ 0x28
 80051b2:	18f8      	adds	r0, r7, r3
 80051b4:	4a2d      	ldr	r2, [pc, #180]	@ (800526c <HAL_UART_ErrorCallback+0x1fc>)
 80051b6:	4924      	ldr	r1, [pc, #144]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051b8:	230c      	movs	r3, #12
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	231c      	movs	r3, #28
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	0003      	movs	r3, r0
 80051c6:	2001      	movs	r0, #1
 80051c8:	f00e fdee 	bl	8013da8 <CreateLine>
        break;
 80051cc:	e029      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 80051ce:	2328      	movs	r3, #40	@ 0x28
 80051d0:	18f8      	adds	r0, r7, r3
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_UART_ErrorCallback+0x200>)
 80051d4:	491c      	ldr	r1, [pc, #112]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051d6:	230c      	movs	r3, #12
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	0003      	movs	r3, r0
 80051de:	2001      	movs	r0, #1
 80051e0:	f00e fde2 	bl	8013da8 <CreateLine>
        break;
 80051e4:	e01d      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 80051e6:	2328      	movs	r3, #40	@ 0x28
 80051e8:	18f8      	adds	r0, r7, r3
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_UART_ErrorCallback+0x204>)
 80051ec:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051ee:	230c      	movs	r3, #12
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	0003      	movs	r3, r0
 80051f6:	2001      	movs	r0, #1
 80051f8:	f00e fdd6 	bl	8013da8 <CreateLine>
        break;
 80051fc:	e011      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 80051fe:	2328      	movs	r3, #40	@ 0x28
 8005200:	18f8      	adds	r0, r7, r3
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_UART_ErrorCallback+0x208>)
 8005204:	4910      	ldr	r1, [pc, #64]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005206:	230c      	movs	r3, #12
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	0003      	movs	r3, r0
 800520e:	2001      	movs	r0, #1
 8005210:	f00e fdca 	bl	8013da8 <CreateLine>
        break;
 8005214:	e005      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      default:
        Error("%sUnknown error");
 8005216:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_UART_ErrorCallback+0x20c>)
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800521a:	0019      	movs	r1, r3
 800521c:	2001      	movs	r0, #1
 800521e:	f00e fdc3 	bl	8013da8 <CreateLine>
    }
    HAL_UART_Abort(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f018 fadd 	bl	801d7e4 <HAL_UART_Abort>
 800522a:	e000      	b.n	800522e <HAL_UART_ErrorCallback+0x1be>
      return;
 800522c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800522e:	46bd      	mov	sp, r7
 8005230:	b011      	add	sp, #68	@ 0x44
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	0802acec 	.word	0x0802acec
 8005238:	0802ad04 	.word	0x0802ad04
 800523c:	0802ad10 	.word	0x0802ad10
 8005240:	200004a4 	.word	0x200004a4
 8005244:	0802ac08 	.word	0x0802ac08
 8005248:	0802aac0 	.word	0x0802aac0
 800524c:	0802df3c 	.word	0x0802df3c
 8005250:	0802ac38 	.word	0x0802ac38
 8005254:	0802ac48 	.word	0x0802ac48
 8005258:	0802ac54 	.word	0x0802ac54
 800525c:	0802ac64 	.word	0x0802ac64
 8005260:	0802ac70 	.word	0x0802ac70
 8005264:	0802ac7c 	.word	0x0802ac7c
 8005268:	0802ac88 	.word	0x0802ac88
 800526c:	0802aca0 	.word	0x0802aca0
 8005270:	0802acb4 	.word	0x0802acb4
 8005274:	0802acc0 	.word	0x0802acc0
 8005278:	0802accc 	.word	0x0802accc
 800527c:	0802acdc 	.word	0x0802acdc

08005280 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF)) {
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b42      	cmp	r3, #66	@ 0x42
 8005292:	d905      	bls.n	80052a0 <isKeyValid+0x20>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2bff      	cmp	r3, #255	@ 0xff
 800529a:	d001      	beq.n	80052a0 <isKeyValid+0x20>
    return true;
 800529c:	2301      	movs	r3, #1
 800529e:	e015      	b.n	80052cc <isKeyValid+0x4c>
  }
  else {
    uint8ArrayToString(message, data);
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <isKeyValid+0x54>)
 80052a4:	0011      	movs	r1, r2
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f81a 	bl	80052e0 <uint8ArrayToString>
    data[12] = '\0';
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	330c      	adds	r3, #12
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
    Error("Error key for %s has no stored key for %s: %s\r\n", sensormodel, sensortype, message);
 80052b4:	68b8      	ldr	r0, [r7, #8]
 80052b6:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <isKeyValid+0x58>)
 80052b8:	4908      	ldr	r1, [pc, #32]	@ (80052dc <isKeyValid+0x5c>)
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <isKeyValid+0x54>)
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	0003      	movs	r3, r0
 80052c4:	2001      	movs	r0, #1
 80052c6:	f00e fd6f 	bl	8013da8 <CreateLine>
    if (usblog && Check_USB_PowerOn()) {
      printf_USB("\r\n");
    }
    printf("\r\n");
*/
    return false;
 80052ca:	2300      	movs	r3, #0
  }
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b004      	add	sp, #16
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200005c4 	.word	0x200005c4
 80052d8:	0802ad20 	.word	0x0802ad20
 80052dc:	0802aac0 	.word	0x0802aac0

080052e0 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e010      	b.n	8005312 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	001a      	movs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1898      	adds	r0, r3, r2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	001a      	movs	r2, r3
 8005304:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <uint8ArrayToString+0x44>)
 8005306:	0019      	movs	r1, r3
 8005308:	f021 f876 	bl	80263f8 <siprintf>
  for (int i = 0; i < 12; i++) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b0b      	cmp	r3, #11
 8005316:	ddeb      	ble.n	80052f0 <uint8ArrayToString+0x10>
  }
}
 8005318:	46c0      	nop			@ (mov r8, r8)
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	0802ad50 	.word	0x0802ad50

08005328 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b087      	sub	sp, #28
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	000a      	movs	r2, r1
 8005332:	1cfb      	adds	r3, r7, #3
 8005334:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 8005336:	240e      	movs	r4, #14
 8005338:	193b      	adds	r3, r7, r4
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800533e:	4b41      	ldr	r3, [pc, #260]	@ (8005444 <CreateMailMessage+0x11c>)
 8005340:	4841      	ldr	r0, [pc, #260]	@ (8005448 <CreateMailMessage+0x120>)
 8005342:	2220      	movs	r2, #32
 8005344:	0019      	movs	r1, r3
 8005346:	f006 fec5 	bl	800c0d4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800534a:	4b40      	ldr	r3, [pc, #256]	@ (800544c <CreateMailMessage+0x124>)
 800534c:	4840      	ldr	r0, [pc, #256]	@ (8005450 <CreateMailMessage+0x128>)
 800534e:	2230      	movs	r2, #48	@ 0x30
 8005350:	0019      	movs	r1, r3
 8005352:	f006 febf 	bl	800c0d4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8005356:	4b3f      	ldr	r3, [pc, #252]	@ (8005454 <CreateMailMessage+0x12c>)
 8005358:	483f      	ldr	r0, [pc, #252]	@ (8005458 <CreateMailMessage+0x130>)
 800535a:	2230      	movs	r2, #48	@ 0x30
 800535c:	0019      	movs	r1, r3
 800535e:	f006 feb9 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 8005362:	4b3c      	ldr	r3, [pc, #240]	@ (8005454 <CreateMailMessage+0x12c>)
 8005364:	4a39      	ldr	r2, [pc, #228]	@ (800544c <CreateMailMessage+0x124>)
 8005366:	493d      	ldr	r1, [pc, #244]	@ (800545c <CreateMailMessage+0x134>)
 8005368:	483d      	ldr	r0, [pc, #244]	@ (8005460 <CreateMailMessage+0x138>)
 800536a:	f021 f845 	bl	80263f8 <siprintf>
  lngth = strlen(message);
 800536e:	4b3c      	ldr	r3, [pc, #240]	@ (8005460 <CreateMailMessage+0x138>)
 8005370:	0018      	movs	r0, r3
 8005372:	f7fa fefb 	bl	800016c <strlen>
 8005376:	0002      	movs	r2, r0
 8005378:	193b      	adds	r3, r7, r4
 800537a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800537c:	1cfb      	adds	r3, r7, #3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005384:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <CreateMailMessage+0x138>)
 8005386:	0018      	movs	r0, r3
 8005388:	f7fa fef0 	bl	800016c <strlen>
 800538c:	0003      	movs	r3, r0
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b33      	ldr	r3, [pc, #204]	@ (8005460 <CreateMailMessage+0x138>)
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f7ff fd63 	bl	8004e60 <ESP_Send>
 800539a:	0003      	movs	r3, r0
 800539c:	001a      	movs	r2, r3
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <CreateMailMessage+0x13c>)
 80053a0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <CreateMailMessage+0x140>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	001a      	movs	r2, r3
 80053a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005464 <CreateMailMessage+0x13c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4013      	ands	r3, r2
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	4193      	sbcs	r3, r2
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <CreateMailMessage+0x140>)
 80053b6:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 80053b8:	f004 fb5c 	bl	8009a74 <ReadBatteryVoltage>
 80053bc:	1c03      	adds	r3, r0, #0
 80053be:	1c18      	adds	r0, r3, #0
 80053c0:	f7fe fa68 	bl	8003894 <__aeabi_f2d>
 80053c4:	0002      	movs	r2, r0
 80053c6:	000b      	movs	r3, r1
 80053c8:	4c1e      	ldr	r4, [pc, #120]	@ (8005444 <CreateMailMessage+0x11c>)
 80053ca:	4928      	ldr	r1, [pc, #160]	@ (800546c <CreateMailMessage+0x144>)
 80053cc:	4824      	ldr	r0, [pc, #144]	@ (8005460 <CreateMailMessage+0x138>)
 80053ce:	9200      	str	r2, [sp, #0]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	0022      	movs	r2, r4
 80053d4:	f021 f810 	bl	80263f8 <siprintf>
  lngth += strlen(message);
 80053d8:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <CreateMailMessage+0x138>)
 80053da:	0018      	movs	r0, r3
 80053dc:	f7fa fec6 	bl	800016c <strlen>
 80053e0:	0003      	movs	r3, r0
 80053e2:	b299      	uxth	r1, r3
 80053e4:	220e      	movs	r2, #14
 80053e6:	18bb      	adds	r3, r7, r2
 80053e8:	18ba      	adds	r2, r7, r2
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	188a      	adds	r2, r1, r2
 80053ee:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053f0:	1cfb      	adds	r3, r7, #3
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <CreateMailMessage+0x138>)
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fa feb6 	bl	800016c <strlen>
 8005400:	0003      	movs	r3, r0
 8005402:	b29a      	uxth	r2, r3
 8005404:	4b16      	ldr	r3, [pc, #88]	@ (8005460 <CreateMailMessage+0x138>)
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff fd29 	bl	8004e60 <ESP_Send>
 800540e:	0003      	movs	r3, r0
 8005410:	001a      	movs	r2, r3
 8005412:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <CreateMailMessage+0x13c>)
 8005414:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <CreateMailMessage+0x140>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	001a      	movs	r2, r3
 800541c:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <CreateMailMessage+0x13c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	1e5a      	subs	r2, r3, #1
 8005424:	4193      	sbcs	r3, r2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	4b0f      	ldr	r3, [pc, #60]	@ (8005468 <CreateMailMessage+0x140>)
 800542a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <CreateMailMessage+0x140>)
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	701a      	strb	r2, [r3, #0]
  return lngth;
 8005434:	230e      	movs	r3, #14
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	881b      	ldrh	r3, [r3, #0]
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b005      	add	sp, #20
 8005440:	bd90      	pop	{r4, r7, pc}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	20000790 	.word	0x20000790
 8005448:	08080090 	.word	0x08080090
 800544c:	200007b0 	.word	0x200007b0
 8005450:	08080260 	.word	0x08080260
 8005454:	200007e0 	.word	0x200007e0
 8005458:	08080290 	.word	0x08080290
 800545c:	0802ad58 	.word	0x0802ad58
 8005460:	200005c4 	.word	0x200005c4
 8005464:	20000810 	.word	0x20000810
 8005468:	20000031 	.word	0x20000031
 800546c:	0802ada0 	.word	0x0802ada0

08005470 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	000a      	movs	r2, r1
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800547e:	f7ff fa7d 	bl	800497c <checkName>
 8005482:	1e03      	subs	r3, r0, #0
 8005484:	d00a      	beq.n	800549c <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005486:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <CreateMessage+0x24>)
 8005488:	4803      	ldr	r0, [pc, #12]	@ (8005498 <CreateMessage+0x28>)
 800548a:	2220      	movs	r2, #32
 800548c:	0019      	movs	r1, r3
 800548e:	f006 fe21 	bl	800c0d4 <ReadUint8ArrayEEprom>
 8005492:	e009      	b.n	80054a8 <CreateMessage+0x38>
 8005494:	20000814 	.word	0x20000814
 8005498:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 800549c:	4beb      	ldr	r3, [pc, #940]	@ (800584c <CreateMessage+0x3dc>)
 800549e:	4aec      	ldr	r2, [pc, #944]	@ (8005850 <CreateMessage+0x3e0>)
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	7912      	ldrb	r2, [r2, #4]
 80054a6:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80054a8:	f7ff fa0e 	bl	80048c8 <setCharges>
  uint16_t index = 0;
 80054ac:	250e      	movs	r5, #14
 80054ae:	197b      	adds	r3, r7, r5
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	4be6      	ldr	r3, [pc, #920]	@ (8005854 <CreateMessage+0x3e4>)
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	4ae6      	ldr	r2, [pc, #920]	@ (8005858 <CreateMessage+0x3e8>)
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f020 ff99 	bl	80263f8 <siprintf>
#ifdef LONGDATAGRAM
  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80054c6:	4be5      	ldr	r3, [pc, #916]	@ (800585c <CreateMessage+0x3ec>)
 80054c8:	48e5      	ldr	r0, [pc, #916]	@ (8005860 <CreateMessage+0x3f0>)
 80054ca:	220c      	movs	r2, #12
 80054cc:	0019      	movs	r1, r3
 80054ce:	f006 fe01 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80054d2:	4ae2      	ldr	r2, [pc, #904]	@ (800585c <CreateMessage+0x3ec>)
 80054d4:	4be3      	ldr	r3, [pc, #908]	@ (8005864 <CreateMessage+0x3f4>)
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff ff01 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80054de:	4be2      	ldr	r3, [pc, #904]	@ (8005868 <CreateMessage+0x3f8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1c18      	adds	r0, r3, #0
 80054e4:	f7fe f9d6 	bl	8003894 <__aeabi_f2d>
 80054e8:	0002      	movs	r2, r0
 80054ea:	000b      	movs	r3, r1
 80054ec:	4cdd      	ldr	r4, [pc, #884]	@ (8005864 <CreateMessage+0x3f4>)
 80054ee:	49df      	ldr	r1, [pc, #892]	@ (800586c <CreateMessage+0x3fc>)
 80054f0:	48df      	ldr	r0, [pc, #892]	@ (8005870 <CreateMessage+0x400>)
 80054f2:	9200      	str	r2, [sp, #0]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	0022      	movs	r2, r4
 80054f8:	f020 ff7e 	bl	80263f8 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 80054fc:	4bd5      	ldr	r3, [pc, #852]	@ (8005854 <CreateMessage+0x3e4>)
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fa fe34 	bl	800016c <strlen>
 8005504:	0002      	movs	r2, r0
 8005506:	197b      	adds	r3, r7, r5
 8005508:	801a      	strh	r2, [r3, #0]
  if (send) {
 800550a:	1cfb      	adds	r3, r7, #3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d019      	beq.n	8005546 <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005512:	4bd0      	ldr	r3, [pc, #832]	@ (8005854 <CreateMessage+0x3e4>)
 8005514:	0018      	movs	r0, r3
 8005516:	f7fa fe29 	bl	800016c <strlen>
 800551a:	0003      	movs	r3, r0
 800551c:	b29a      	uxth	r2, r3
 800551e:	4bcd      	ldr	r3, [pc, #820]	@ (8005854 <CreateMessage+0x3e4>)
 8005520:	0011      	movs	r1, r2
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fc9c 	bl	8004e60 <ESP_Send>
 8005528:	0003      	movs	r3, r0
 800552a:	001a      	movs	r2, r3
 800552c:	4bd1      	ldr	r3, [pc, #836]	@ (8005874 <CreateMessage+0x404>)
 800552e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005530:	4bd1      	ldr	r3, [pc, #836]	@ (8005878 <CreateMessage+0x408>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	001a      	movs	r2, r3
 8005536:	4bcf      	ldr	r3, [pc, #828]	@ (8005874 <CreateMessage+0x404>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	4013      	ands	r3, r2
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	4193      	sbcs	r3, r2
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4bcd      	ldr	r3, [pc, #820]	@ (8005878 <CreateMessage+0x408>)
 8005544:	701a      	strb	r2, [r3, #0]
  }
  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8005546:	4bc5      	ldr	r3, [pc, #788]	@ (800585c <CreateMessage+0x3ec>)
 8005548:	48cc      	ldr	r0, [pc, #816]	@ (800587c <CreateMessage+0x40c>)
 800554a:	220c      	movs	r2, #12
 800554c:	0019      	movs	r1, r3
 800554e:	f006 fdc1 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005552:	4ac2      	ldr	r2, [pc, #776]	@ (800585c <CreateMessage+0x3ec>)
 8005554:	4bc3      	ldr	r3, [pc, #780]	@ (8005864 <CreateMessage+0x3f4>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fec1 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 800555e:	4bc2      	ldr	r3, [pc, #776]	@ (8005868 <CreateMessage+0x3f8>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	1c18      	adds	r0, r3, #0
 8005564:	f7fe f996 	bl	8003894 <__aeabi_f2d>
 8005568:	0002      	movs	r2, r0
 800556a:	000b      	movs	r3, r1
 800556c:	4cbd      	ldr	r4, [pc, #756]	@ (8005864 <CreateMessage+0x3f4>)
 800556e:	49c4      	ldr	r1, [pc, #784]	@ (8005880 <CreateMessage+0x410>)
 8005570:	48b8      	ldr	r0, [pc, #736]	@ (8005854 <CreateMessage+0x3e4>)
 8005572:	9200      	str	r2, [sp, #0]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	0022      	movs	r2, r4
 8005578:	f020 ff3e 	bl	80263f8 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 800557c:	4bb5      	ldr	r3, [pc, #724]	@ (8005854 <CreateMessage+0x3e4>)
 800557e:	0018      	movs	r0, r3
 8005580:	f7fa fdf4 	bl	800016c <strlen>
 8005584:	0003      	movs	r3, r0
 8005586:	b299      	uxth	r1, r3
 8005588:	220e      	movs	r2, #14
 800558a:	18bb      	adds	r3, r7, r2
 800558c:	18ba      	adds	r2, r7, r2
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	188a      	adds	r2, r1, r2
 8005592:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005594:	1cfb      	adds	r3, r7, #3
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d019      	beq.n	80055d0 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800559c:	4bad      	ldr	r3, [pc, #692]	@ (8005854 <CreateMessage+0x3e4>)
 800559e:	0018      	movs	r0, r3
 80055a0:	f7fa fde4 	bl	800016c <strlen>
 80055a4:	0003      	movs	r3, r0
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	4baa      	ldr	r3, [pc, #680]	@ (8005854 <CreateMessage+0x3e4>)
 80055aa:	0011      	movs	r1, r2
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7ff fc57 	bl	8004e60 <ESP_Send>
 80055b2:	0003      	movs	r3, r0
 80055b4:	001a      	movs	r2, r3
 80055b6:	4baf      	ldr	r3, [pc, #700]	@ (8005874 <CreateMessage+0x404>)
 80055b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80055ba:	4baf      	ldr	r3, [pc, #700]	@ (8005878 <CreateMessage+0x408>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	001a      	movs	r2, r3
 80055c0:	4bac      	ldr	r3, [pc, #688]	@ (8005874 <CreateMessage+0x404>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4013      	ands	r3, r2
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	4193      	sbcs	r3, r2
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	4baa      	ldr	r3, [pc, #680]	@ (8005878 <CreateMessage+0x408>)
 80055ce:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80055d0:	4ba2      	ldr	r3, [pc, #648]	@ (800585c <CreateMessage+0x3ec>)
 80055d2:	48ac      	ldr	r0, [pc, #688]	@ (8005884 <CreateMessage+0x414>)
 80055d4:	220c      	movs	r2, #12
 80055d6:	0019      	movs	r1, r3
 80055d8:	f006 fd7c 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055dc:	4a9f      	ldr	r2, [pc, #636]	@ (800585c <CreateMessage+0x3ec>)
 80055de:	4ba1      	ldr	r3, [pc, #644]	@ (8005864 <CreateMessage+0x3f4>)
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7ff fe7c 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 80055e8:	4b9f      	ldr	r3, [pc, #636]	@ (8005868 <CreateMessage+0x3f8>)
 80055ea:	2248      	movs	r2, #72	@ 0x48
 80055ec:	5a9b      	ldrh	r3, [r3, r2]
 80055ee:	4a9d      	ldr	r2, [pc, #628]	@ (8005864 <CreateMessage+0x3f4>)
 80055f0:	49a5      	ldr	r1, [pc, #660]	@ (8005888 <CreateMessage+0x418>)
 80055f2:	4898      	ldr	r0, [pc, #608]	@ (8005854 <CreateMessage+0x3e4>)
 80055f4:	f020 ff00 	bl	80263f8 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 80055f8:	4b96      	ldr	r3, [pc, #600]	@ (8005854 <CreateMessage+0x3e4>)
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fa fdb6 	bl	800016c <strlen>
 8005600:	0003      	movs	r3, r0
 8005602:	b299      	uxth	r1, r3
 8005604:	220e      	movs	r2, #14
 8005606:	18bb      	adds	r3, r7, r2
 8005608:	18ba      	adds	r2, r7, r2
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	188a      	adds	r2, r1, r2
 800560e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005610:	1cfb      	adds	r3, r7, #3
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005618:	4b8e      	ldr	r3, [pc, #568]	@ (8005854 <CreateMessage+0x3e4>)
 800561a:	0018      	movs	r0, r3
 800561c:	f7fa fda6 	bl	800016c <strlen>
 8005620:	0003      	movs	r3, r0
 8005622:	b29a      	uxth	r2, r3
 8005624:	4b8b      	ldr	r3, [pc, #556]	@ (8005854 <CreateMessage+0x3e4>)
 8005626:	0011      	movs	r1, r2
 8005628:	0018      	movs	r0, r3
 800562a:	f7ff fc19 	bl	8004e60 <ESP_Send>
 800562e:	0003      	movs	r3, r0
 8005630:	001a      	movs	r2, r3
 8005632:	4b90      	ldr	r3, [pc, #576]	@ (8005874 <CreateMessage+0x404>)
 8005634:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005636:	4b90      	ldr	r3, [pc, #576]	@ (8005878 <CreateMessage+0x408>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	001a      	movs	r2, r3
 800563c:	4b8d      	ldr	r3, [pc, #564]	@ (8005874 <CreateMessage+0x404>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4013      	ands	r3, r2
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	4193      	sbcs	r3, r2
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b8b      	ldr	r3, [pc, #556]	@ (8005878 <CreateMessage+0x408>)
 800564a:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, keybuffer, IdSize);
 800564c:	4b83      	ldr	r3, [pc, #524]	@ (800585c <CreateMessage+0x3ec>)
 800564e:	488f      	ldr	r0, [pc, #572]	@ (800588c <CreateMessage+0x41c>)
 8005650:	220c      	movs	r2, #12
 8005652:	0019      	movs	r1, r3
 8005654:	f006 fd3e 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "ChargeStat", "true/false")) {
 8005658:	4a8d      	ldr	r2, [pc, #564]	@ (8005890 <CreateMessage+0x420>)
 800565a:	498e      	ldr	r1, [pc, #568]	@ (8005894 <CreateMessage+0x424>)
 800565c:	4b7f      	ldr	r3, [pc, #508]	@ (800585c <CreateMessage+0x3ec>)
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff fe0e 	bl	8005280 <isKeyValid>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d036      	beq.n	80056d6 <CreateMessage+0x266>
    uint8ArrayToString(Buffer, keybuffer);
 8005668:	4a7c      	ldr	r2, [pc, #496]	@ (800585c <CreateMessage+0x3ec>)
 800566a:	4b7e      	ldr	r3, [pc, #504]	@ (8005864 <CreateMessage+0x3f4>)
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f7ff fe36 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
 8005674:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <CreateMessage+0x428>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4a7a      	ldr	r2, [pc, #488]	@ (8005864 <CreateMessage+0x3f4>)
 800567a:	4988      	ldr	r1, [pc, #544]	@ (800589c <CreateMessage+0x42c>)
 800567c:	4875      	ldr	r0, [pc, #468]	@ (8005854 <CreateMessage+0x3e4>)
 800567e:	f020 febb 	bl	80263f8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"charging\", \"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
#endif
    index += strlen(message);
 8005682:	4b74      	ldr	r3, [pc, #464]	@ (8005854 <CreateMessage+0x3e4>)
 8005684:	0018      	movs	r0, r3
 8005686:	f7fa fd71 	bl	800016c <strlen>
 800568a:	0003      	movs	r3, r0
 800568c:	b299      	uxth	r1, r3
 800568e:	220e      	movs	r2, #14
 8005690:	18bb      	adds	r3, r7, r2
 8005692:	18ba      	adds	r2, r7, r2
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	188a      	adds	r2, r1, r2
 8005698:	801a      	strh	r2, [r3, #0]
    if (send) {
 800569a:	1cfb      	adds	r3, r7, #3
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d019      	beq.n	80056d6 <CreateMessage+0x266>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80056a2:	4b6c      	ldr	r3, [pc, #432]	@ (8005854 <CreateMessage+0x3e4>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fa fd61 	bl	800016c <strlen>
 80056aa:	0003      	movs	r3, r0
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	4b69      	ldr	r3, [pc, #420]	@ (8005854 <CreateMessage+0x3e4>)
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fbd4 	bl	8004e60 <ESP_Send>
 80056b8:	0003      	movs	r3, r0
 80056ba:	001a      	movs	r2, r3
 80056bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005874 <CreateMessage+0x404>)
 80056be:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80056c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005878 <CreateMessage+0x408>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	001a      	movs	r2, r3
 80056c6:	4b6b      	ldr	r3, [pc, #428]	@ (8005874 <CreateMessage+0x404>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	4193      	sbcs	r3, r2
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b69      	ldr	r3, [pc, #420]	@ (8005878 <CreateMessage+0x408>)
 80056d4:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80056d6:	4b61      	ldr	r3, [pc, #388]	@ (800585c <CreateMessage+0x3ec>)
 80056d8:	4871      	ldr	r0, [pc, #452]	@ (80058a0 <CreateMessage+0x430>)
 80056da:	220c      	movs	r2, #12
 80056dc:	0019      	movs	r1, r3
 80056de:	f006 fcf9 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80056e2:	4a70      	ldr	r2, [pc, #448]	@ (80058a4 <CreateMessage+0x434>)
 80056e4:	4970      	ldr	r1, [pc, #448]	@ (80058a8 <CreateMessage+0x438>)
 80056e6:	4b5d      	ldr	r3, [pc, #372]	@ (800585c <CreateMessage+0x3ec>)
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fdc9 	bl	8005280 <isKeyValid>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d039      	beq.n	8005766 <CreateMessage+0x2f6>
    uint8ArrayToString(Buffer, keybuffer);
 80056f2:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <CreateMessage+0x3ec>)
 80056f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005864 <CreateMessage+0x3f4>)
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff fdf1 	bl	80052e0 <uint8ArrayToString>
    getUptime(uptimeBuf);
 80056fe:	4b6b      	ldr	r3, [pc, #428]	@ (80058ac <CreateMessage+0x43c>)
 8005700:	0018      	movs	r0, r3
 8005702:	f004 fb09 	bl	8009d18 <getUptime>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 8005706:	4b69      	ldr	r3, [pc, #420]	@ (80058ac <CreateMessage+0x43c>)
 8005708:	4a56      	ldr	r2, [pc, #344]	@ (8005864 <CreateMessage+0x3f4>)
 800570a:	4969      	ldr	r1, [pc, #420]	@ (80058b0 <CreateMessage+0x440>)
 800570c:	4851      	ldr	r0, [pc, #324]	@ (8005854 <CreateMessage+0x3e4>)
 800570e:	f020 fe73 	bl	80263f8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 8005712:	4b50      	ldr	r3, [pc, #320]	@ (8005854 <CreateMessage+0x3e4>)
 8005714:	0018      	movs	r0, r3
 8005716:	f7fa fd29 	bl	800016c <strlen>
 800571a:	0003      	movs	r3, r0
 800571c:	b299      	uxth	r1, r3
 800571e:	220e      	movs	r2, #14
 8005720:	18bb      	adds	r3, r7, r2
 8005722:	18ba      	adds	r2, r7, r2
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	188a      	adds	r2, r1, r2
 8005728:	801a      	strh	r2, [r3, #0]
    if (send) {
 800572a:	1cfb      	adds	r3, r7, #3
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <CreateMessage+0x2f6>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005732:	4b48      	ldr	r3, [pc, #288]	@ (8005854 <CreateMessage+0x3e4>)
 8005734:	0018      	movs	r0, r3
 8005736:	f7fa fd19 	bl	800016c <strlen>
 800573a:	0003      	movs	r3, r0
 800573c:	b29a      	uxth	r2, r3
 800573e:	4b45      	ldr	r3, [pc, #276]	@ (8005854 <CreateMessage+0x3e4>)
 8005740:	0011      	movs	r1, r2
 8005742:	0018      	movs	r0, r3
 8005744:	f7ff fb8c 	bl	8004e60 <ESP_Send>
 8005748:	0003      	movs	r3, r0
 800574a:	001a      	movs	r2, r3
 800574c:	4b49      	ldr	r3, [pc, #292]	@ (8005874 <CreateMessage+0x404>)
 800574e:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005750:	4b49      	ldr	r3, [pc, #292]	@ (8005878 <CreateMessage+0x408>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	001a      	movs	r2, r3
 8005756:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <CreateMessage+0x404>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	1e5a      	subs	r2, r3, #1
 800575e:	4193      	sbcs	r3, r2
 8005760:	b2da      	uxtb	r2, r3
 8005762:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <CreateMessage+0x408>)
 8005764:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 8005766:	f007 fe7d 	bl	800d464 <IsBMP280SensorPresent>
 800576a:	1e03      	subs	r3, r0, #0
 800576c:	d100      	bne.n	8005770 <CreateMessage+0x300>
 800576e:	e0e1      	b.n	8005934 <CreateMessage+0x4c4>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005770:	4b3a      	ldr	r3, [pc, #232]	@ (800585c <CreateMessage+0x3ec>)
 8005772:	4850      	ldr	r0, [pc, #320]	@ (80058b4 <CreateMessage+0x444>)
 8005774:	220c      	movs	r2, #12
 8005776:	0019      	movs	r1, r3
 8005778:	f006 fcac 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800577c:	4a4e      	ldr	r2, [pc, #312]	@ (80058b8 <CreateMessage+0x448>)
 800577e:	494f      	ldr	r1, [pc, #316]	@ (80058bc <CreateMessage+0x44c>)
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <CreateMessage+0x3ec>)
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff fd7c 	bl	8005280 <isKeyValid>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d046      	beq.n	800581a <CreateMessage+0x3aa>
 800578c:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <CreateMessage+0x3f8>)
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	2100      	movs	r1, #0
 8005792:	1c18      	adds	r0, r3, #0
 8005794:	f7fa fec6 	bl	8000524 <__aeabi_fcmpeq>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d13e      	bne.n	800581a <CreateMessage+0x3aa>
      uint8ArrayToString(Buffer, keybuffer);
 800579c:	4a2f      	ldr	r2, [pc, #188]	@ (800585c <CreateMessage+0x3ec>)
 800579e:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <CreateMessage+0x3f4>)
 80057a0:	0011      	movs	r1, r2
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7ff fd9c 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80057a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005868 <CreateMessage+0x3f8>)
 80057aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ac:	1c18      	adds	r0, r3, #0
 80057ae:	f7fe f871 	bl	8003894 <__aeabi_f2d>
 80057b2:	0002      	movs	r2, r0
 80057b4:	000b      	movs	r3, r1
 80057b6:	4c2b      	ldr	r4, [pc, #172]	@ (8005864 <CreateMessage+0x3f4>)
 80057b8:	4931      	ldr	r1, [pc, #196]	@ (8005880 <CreateMessage+0x410>)
 80057ba:	4826      	ldr	r0, [pc, #152]	@ (8005854 <CreateMessage+0x3e4>)
 80057bc:	9200      	str	r2, [sp, #0]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	0022      	movs	r2, r4
 80057c2:	f020 fe19 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80057c6:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <CreateMessage+0x3e4>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7fa fccf 	bl	800016c <strlen>
 80057ce:	0003      	movs	r3, r0
 80057d0:	b299      	uxth	r1, r3
 80057d2:	220e      	movs	r2, #14
 80057d4:	18bb      	adds	r3, r7, r2
 80057d6:	18ba      	adds	r2, r7, r2
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	188a      	adds	r2, r1, r2
 80057dc:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057de:	1cfb      	adds	r3, r7, #3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <CreateMessage+0x3aa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <CreateMessage+0x3e4>)
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fa fcbf 	bl	800016c <strlen>
 80057ee:	0003      	movs	r3, r0
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <CreateMessage+0x3e4>)
 80057f4:	0011      	movs	r1, r2
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7ff fb32 	bl	8004e60 <ESP_Send>
 80057fc:	0003      	movs	r3, r0
 80057fe:	001a      	movs	r2, r3
 8005800:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <CreateMessage+0x404>)
 8005802:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005804:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <CreateMessage+0x408>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	001a      	movs	r2, r3
 800580a:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <CreateMessage+0x404>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4013      	ands	r3, r2
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	4193      	sbcs	r3, r2
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <CreateMessage+0x408>)
 8005818:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 800581a:	4b10      	ldr	r3, [pc, #64]	@ (800585c <CreateMessage+0x3ec>)
 800581c:	4828      	ldr	r0, [pc, #160]	@ (80058c0 <CreateMessage+0x450>)
 800581e:	220c      	movs	r2, #12
 8005820:	0019      	movs	r1, r3
 8005822:	f006 fc57 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005826:	4a27      	ldr	r2, [pc, #156]	@ (80058c4 <CreateMessage+0x454>)
 8005828:	4924      	ldr	r1, [pc, #144]	@ (80058bc <CreateMessage+0x44c>)
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <CreateMessage+0x3ec>)
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fd27 	bl	8005280 <isKeyValid>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d100      	bne.n	8005838 <CreateMessage+0x3c8>
 8005836:	e07d      	b.n	8005934 <CreateMessage+0x4c4>
      uint8ArrayToString(Buffer, keybuffer);
 8005838:	4a08      	ldr	r2, [pc, #32]	@ (800585c <CreateMessage+0x3ec>)
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <CreateMessage+0x3f4>)
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff fd4e 	bl	80052e0 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 8005844:	4b08      	ldr	r3, [pc, #32]	@ (8005868 <CreateMessage+0x3f8>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	1c18      	adds	r0, r3, #0
 800584a:	e03d      	b.n	80058c8 <CreateMessage+0x458>
 800584c:	20000814 	.word	0x20000814
 8005850:	0802df0c 	.word	0x0802df0c
 8005854:	200005c4 	.word	0x200005c4
 8005858:	0802adf4 	.word	0x0802adf4
 800585c:	20000834 	.word	0x20000834
 8005860:	0808000c 	.word	0x0808000c
 8005864:	20000840 	.word	0x20000840
 8005868:	20000704 	.word	0x20000704
 800586c:	0802adf8 	.word	0x0802adf8
 8005870:	200005c5 	.word	0x200005c5
 8005874:	20000859 	.word	0x20000859
 8005878:	20000032 	.word	0x20000032
 800587c:	08080018 	.word	0x08080018
 8005880:	0802ae18 	.word	0x0802ae18
 8005884:	08080030 	.word	0x08080030
 8005888:	0802ae38 	.word	0x0802ae38
 800588c:	08080084 	.word	0x08080084
 8005890:	0802ae58 	.word	0x0802ae58
 8005894:	0802ae64 	.word	0x0802ae64
 8005898:	2000215c 	.word	0x2000215c
 800589c:	0802ae70 	.word	0x0802ae70
 80058a0:	080801a0 	.word	0x080801a0
 80058a4:	0802ae90 	.word	0x0802ae90
 80058a8:	0802ae98 	.word	0x0802ae98
 80058ac:	2000085c 	.word	0x2000085c
 80058b0:	0802aea0 	.word	0x0802aea0
 80058b4:	08080188 	.word	0x08080188
 80058b8:	0802aec0 	.word	0x0802aec0
 80058bc:	0802aec4 	.word	0x0802aec4
 80058c0:	080800e0 	.word	0x080800e0
 80058c4:	0802aecc 	.word	0x0802aecc
 80058c8:	f7fd ffe4 	bl	8003894 <__aeabi_f2d>
 80058cc:	0002      	movs	r2, r0
 80058ce:	000b      	movs	r3, r1
 80058d0:	4ce3      	ldr	r4, [pc, #908]	@ (8005c60 <CreateMessage+0x7f0>)
 80058d2:	49e4      	ldr	r1, [pc, #912]	@ (8005c64 <CreateMessage+0x7f4>)
 80058d4:	48e4      	ldr	r0, [pc, #912]	@ (8005c68 <CreateMessage+0x7f8>)
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	0022      	movs	r2, r4
 80058dc:	f020 fd8c 	bl	80263f8 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80058e0:	4be1      	ldr	r3, [pc, #900]	@ (8005c68 <CreateMessage+0x7f8>)
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fa fc42 	bl	800016c <strlen>
 80058e8:	0003      	movs	r3, r0
 80058ea:	b299      	uxth	r1, r3
 80058ec:	220e      	movs	r2, #14
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	188a      	adds	r2, r1, r2
 80058f6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058f8:	1cfb      	adds	r3, r7, #3
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <CreateMessage+0x4c4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005900:	4bd9      	ldr	r3, [pc, #868]	@ (8005c68 <CreateMessage+0x7f8>)
 8005902:	0018      	movs	r0, r3
 8005904:	f7fa fc32 	bl	800016c <strlen>
 8005908:	0003      	movs	r3, r0
 800590a:	b29a      	uxth	r2, r3
 800590c:	4bd6      	ldr	r3, [pc, #856]	@ (8005c68 <CreateMessage+0x7f8>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff faa5 	bl	8004e60 <ESP_Send>
 8005916:	0003      	movs	r3, r0
 8005918:	001a      	movs	r2, r3
 800591a:	4bd4      	ldr	r3, [pc, #848]	@ (8005c6c <CreateMessage+0x7fc>)
 800591c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800591e:	4bd4      	ldr	r3, [pc, #848]	@ (8005c70 <CreateMessage+0x800>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	001a      	movs	r2, r3
 8005924:	4bd1      	ldr	r3, [pc, #836]	@ (8005c6c <CreateMessage+0x7fc>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4013      	ands	r3, r2
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2da      	uxtb	r2, r3
 8005930:	4bcf      	ldr	r3, [pc, #828]	@ (8005c70 <CreateMessage+0x800>)
 8005932:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005934:	4bcf      	ldr	r3, [pc, #828]	@ (8005c74 <CreateMessage+0x804>)
 8005936:	48d0      	ldr	r0, [pc, #832]	@ (8005c78 <CreateMessage+0x808>)
 8005938:	220c      	movs	r2, #12
 800593a:	0019      	movs	r1, r3
 800593c:	f006 fbca 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "MIC", "dBA")) {
 8005940:	4ace      	ldr	r2, [pc, #824]	@ (8005c7c <CreateMessage+0x80c>)
 8005942:	49cf      	ldr	r1, [pc, #828]	@ (8005c80 <CreateMessage+0x810>)
 8005944:	4bcb      	ldr	r3, [pc, #812]	@ (8005c74 <CreateMessage+0x804>)
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff fc9a 	bl	8005280 <isKeyValid>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d03e      	beq.n	80059ce <CreateMessage+0x55e>
    uint8ArrayToString(Buffer, keybuffer);
 8005950:	4ac8      	ldr	r2, [pc, #800]	@ (8005c74 <CreateMessage+0x804>)
 8005952:	4bc3      	ldr	r3, [pc, #780]	@ (8005c60 <CreateMessage+0x7f0>)
 8005954:	0011      	movs	r1, r2
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fcc2 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 800595c:	4bc9      	ldr	r3, [pc, #804]	@ (8005c84 <CreateMessage+0x814>)
 800595e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005960:	1c18      	adds	r0, r3, #0
 8005962:	f7fd ff97 	bl	8003894 <__aeabi_f2d>
 8005966:	0002      	movs	r2, r0
 8005968:	000b      	movs	r3, r1
 800596a:	4cbd      	ldr	r4, [pc, #756]	@ (8005c60 <CreateMessage+0x7f0>)
 800596c:	49bd      	ldr	r1, [pc, #756]	@ (8005c64 <CreateMessage+0x7f4>)
 800596e:	48be      	ldr	r0, [pc, #760]	@ (8005c68 <CreateMessage+0x7f8>)
 8005970:	9200      	str	r2, [sp, #0]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	0022      	movs	r2, r4
 8005976:	f020 fd3f 	bl	80263f8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
    index += strlen(message);
 800597a:	4bbb      	ldr	r3, [pc, #748]	@ (8005c68 <CreateMessage+0x7f8>)
 800597c:	0018      	movs	r0, r3
 800597e:	f7fa fbf5 	bl	800016c <strlen>
 8005982:	0003      	movs	r3, r0
 8005984:	b299      	uxth	r1, r3
 8005986:	220e      	movs	r2, #14
 8005988:	18bb      	adds	r3, r7, r2
 800598a:	18ba      	adds	r2, r7, r2
 800598c:	8812      	ldrh	r2, [r2, #0]
 800598e:	188a      	adds	r2, r1, r2
 8005990:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005992:	1cfb      	adds	r3, r7, #3
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d019      	beq.n	80059ce <CreateMessage+0x55e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800599a:	4bb3      	ldr	r3, [pc, #716]	@ (8005c68 <CreateMessage+0x7f8>)
 800599c:	0018      	movs	r0, r3
 800599e:	f7fa fbe5 	bl	800016c <strlen>
 80059a2:	0003      	movs	r3, r0
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	4bb0      	ldr	r3, [pc, #704]	@ (8005c68 <CreateMessage+0x7f8>)
 80059a8:	0011      	movs	r1, r2
 80059aa:	0018      	movs	r0, r3
 80059ac:	f7ff fa58 	bl	8004e60 <ESP_Send>
 80059b0:	0003      	movs	r3, r0
 80059b2:	001a      	movs	r2, r3
 80059b4:	4bad      	ldr	r3, [pc, #692]	@ (8005c6c <CreateMessage+0x7fc>)
 80059b6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80059b8:	4bad      	ldr	r3, [pc, #692]	@ (8005c70 <CreateMessage+0x800>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	001a      	movs	r2, r3
 80059be:	4bab      	ldr	r3, [pc, #684]	@ (8005c6c <CreateMessage+0x7fc>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4013      	ands	r3, r2
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	4193      	sbcs	r3, r2
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4ba9      	ldr	r3, [pc, #676]	@ (8005c70 <CreateMessage+0x800>)
 80059cc:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80059ce:	4ba9      	ldr	r3, [pc, #676]	@ (8005c74 <CreateMessage+0x804>)
 80059d0:	48ad      	ldr	r0, [pc, #692]	@ (8005c88 <CreateMessage+0x818>)
 80059d2:	220c      	movs	r2, #12
 80059d4:	0019      	movs	r1, r3
 80059d6:	f006 fb7d 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Solar", "Volt")) {
 80059da:	4aac      	ldr	r2, [pc, #688]	@ (8005c8c <CreateMessage+0x81c>)
 80059dc:	49ac      	ldr	r1, [pc, #688]	@ (8005c90 <CreateMessage+0x820>)
 80059de:	4ba5      	ldr	r3, [pc, #660]	@ (8005c74 <CreateMessage+0x804>)
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fc4d 	bl	8005280 <isKeyValid>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d03e      	beq.n	8005a68 <CreateMessage+0x5f8>
    uint8ArrayToString(Buffer, keybuffer);
 80059ea:	4aa2      	ldr	r2, [pc, #648]	@ (8005c74 <CreateMessage+0x804>)
 80059ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005c60 <CreateMessage+0x7f0>)
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7ff fc75 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 80059f6:	4ba7      	ldr	r3, [pc, #668]	@ (8005c94 <CreateMessage+0x824>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1c18      	adds	r0, r3, #0
 80059fc:	f7fd ff4a 	bl	8003894 <__aeabi_f2d>
 8005a00:	0002      	movs	r2, r0
 8005a02:	000b      	movs	r3, r1
 8005a04:	4c96      	ldr	r4, [pc, #600]	@ (8005c60 <CreateMessage+0x7f0>)
 8005a06:	4997      	ldr	r1, [pc, #604]	@ (8005c64 <CreateMessage+0x7f4>)
 8005a08:	4897      	ldr	r0, [pc, #604]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a0a:	9200      	str	r2, [sp, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	0022      	movs	r2, r4
 8005a10:	f020 fcf2 	bl	80263f8 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005a14:	4b94      	ldr	r3, [pc, #592]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fa fba8 	bl	800016c <strlen>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	b299      	uxth	r1, r3
 8005a20:	220e      	movs	r2, #14
 8005a22:	18bb      	adds	r3, r7, r2
 8005a24:	18ba      	adds	r2, r7, r2
 8005a26:	8812      	ldrh	r2, [r2, #0]
 8005a28:	188a      	adds	r2, r1, r2
 8005a2a:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005a2c:	1cfb      	adds	r3, r7, #3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d019      	beq.n	8005a68 <CreateMessage+0x5f8>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005a34:	4b8c      	ldr	r3, [pc, #560]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fa fb98 	bl	800016c <strlen>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	4b89      	ldr	r3, [pc, #548]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fa0b 	bl	8004e60 <ESP_Send>
 8005a4a:	0003      	movs	r3, r0
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	4b87      	ldr	r3, [pc, #540]	@ (8005c6c <CreateMessage+0x7fc>)
 8005a50:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005a52:	4b87      	ldr	r3, [pc, #540]	@ (8005c70 <CreateMessage+0x800>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	001a      	movs	r2, r3
 8005a58:	4b84      	ldr	r3, [pc, #528]	@ (8005c6c <CreateMessage+0x7fc>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	1e5a      	subs	r2, r3, #1
 8005a60:	4193      	sbcs	r3, r2
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b82      	ldr	r3, [pc, #520]	@ (8005c70 <CreateMessage+0x800>)
 8005a66:	701a      	strb	r2, [r3, #0]
    }
  }

  if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005a68:	4b8b      	ldr	r3, [pc, #556]	@ (8005c98 <CreateMessage+0x828>)
 8005a6a:	791b      	ldrb	r3, [r3, #4]
 8005a6c:	2b35      	cmp	r3, #53	@ 0x35
 8005a6e:	d149      	bne.n	8005b04 <CreateMessage+0x694>
 8005a70:	f004 f8b6 	bl	8009be0 <Check_USB_PowerOn>
 8005a74:	1e03      	subs	r3, r0, #0
 8005a76:	d045      	beq.n	8005b04 <CreateMessage+0x694>
    ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005a78:	4b7e      	ldr	r3, [pc, #504]	@ (8005c74 <CreateMessage+0x804>)
 8005a7a:	4888      	ldr	r0, [pc, #544]	@ (8005c9c <CreateMessage+0x82c>)
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	0019      	movs	r1, r3
 8005a80:	f006 fb28 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "NOx", "NOxr")) {
 8005a84:	4a86      	ldr	r2, [pc, #536]	@ (8005ca0 <CreateMessage+0x830>)
 8005a86:	4987      	ldr	r1, [pc, #540]	@ (8005ca4 <CreateMessage+0x834>)
 8005a88:	4b7a      	ldr	r3, [pc, #488]	@ (8005c74 <CreateMessage+0x804>)
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7ff fbf8 	bl	8005280 <isKeyValid>
 8005a90:	1e03      	subs	r3, r0, #0
 8005a92:	d037      	beq.n	8005b04 <CreateMessage+0x694>
      uint8ArrayToString(Buffer, keybuffer);
 8005a94:	4a77      	ldr	r2, [pc, #476]	@ (8005c74 <CreateMessage+0x804>)
 8005a96:	4b72      	ldr	r3, [pc, #456]	@ (8005c60 <CreateMessage+0x7f0>)
 8005a98:	0011      	movs	r1, r2
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7ff fc20 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005aa0:	4b78      	ldr	r3, [pc, #480]	@ (8005c84 <CreateMessage+0x814>)
 8005aa2:	224e      	movs	r2, #78	@ 0x4e
 8005aa4:	5a9b      	ldrh	r3, [r3, r2]
 8005aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8005c60 <CreateMessage+0x7f0>)
 8005aa8:	497f      	ldr	r1, [pc, #508]	@ (8005ca8 <CreateMessage+0x838>)
 8005aaa:	486f      	ldr	r0, [pc, #444]	@ (8005c68 <CreateMessage+0x7f8>)
 8005aac:	f020 fca4 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005ab0:	4b6d      	ldr	r3, [pc, #436]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7fa fb5a 	bl	800016c <strlen>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	b299      	uxth	r1, r3
 8005abc:	220e      	movs	r2, #14
 8005abe:	18bb      	adds	r3, r7, r2
 8005ac0:	18ba      	adds	r2, r7, r2
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	188a      	adds	r2, r1, r2
 8005ac6:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ac8:	1cfb      	adds	r3, r7, #3
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d019      	beq.n	8005b04 <CreateMessage+0x694>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ad0:	4b65      	ldr	r3, [pc, #404]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7fa fb4a 	bl	800016c <strlen>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	4b62      	ldr	r3, [pc, #392]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ade:	0011      	movs	r1, r2
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff f9bd 	bl	8004e60 <ESP_Send>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	001a      	movs	r2, r3
 8005aea:	4b60      	ldr	r3, [pc, #384]	@ (8005c6c <CreateMessage+0x7fc>)
 8005aec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005aee:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <CreateMessage+0x800>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	001a      	movs	r2, r3
 8005af4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c6c <CreateMessage+0x7fc>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4013      	ands	r3, r2
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	4193      	sbcs	r3, r2
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	4b5b      	ldr	r3, [pc, #364]	@ (8005c70 <CreateMessage+0x800>)
 8005b02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005b04:	4b5b      	ldr	r3, [pc, #364]	@ (8005c74 <CreateMessage+0x804>)
 8005b06:	4869      	ldr	r0, [pc, #420]	@ (8005cac <CreateMessage+0x83c>)
 8005b08:	220c      	movs	r2, #12
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	f006 fae2 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005b10:	4b61      	ldr	r3, [pc, #388]	@ (8005c98 <CreateMessage+0x828>)
 8005b12:	791b      	ldrb	r3, [r3, #4]
 8005b14:	2b34      	cmp	r3, #52	@ 0x34
 8005b16:	d003      	beq.n	8005b20 <CreateMessage+0x6b0>
 8005b18:	4b5f      	ldr	r3, [pc, #380]	@ (8005c98 <CreateMessage+0x828>)
 8005b1a:	791b      	ldrb	r3, [r3, #4]
 8005b1c:	2b35      	cmp	r3, #53	@ 0x35
 8005b1e:	d14e      	bne.n	8005bbe <CreateMessage+0x74e>
 8005b20:	4a63      	ldr	r2, [pc, #396]	@ (8005cb0 <CreateMessage+0x840>)
 8005b22:	4964      	ldr	r1, [pc, #400]	@ (8005cb4 <CreateMessage+0x844>)
 8005b24:	4b53      	ldr	r3, [pc, #332]	@ (8005c74 <CreateMessage+0x804>)
 8005b26:	0018      	movs	r0, r3
 8005b28:	f7ff fbaa 	bl	8005280 <isKeyValid>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d046      	beq.n	8005bbe <CreateMessage+0x74e>
    uint8ArrayToString(Buffer, keybuffer);
 8005b30:	4a50      	ldr	r2, [pc, #320]	@ (8005c74 <CreateMessage+0x804>)
 8005b32:	4b4b      	ldr	r3, [pc, #300]	@ (8005c60 <CreateMessage+0x7f0>)
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff fbd2 	bl	80052e0 <uint8ArrayToString>
    if (isKeyValid(keybuffer, "Sen5x", "temp")) {
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb8 <CreateMessage+0x848>)
 8005b3e:	495f      	ldr	r1, [pc, #380]	@ (8005cbc <CreateMessage+0x84c>)
 8005b40:	4b4c      	ldr	r3, [pc, #304]	@ (8005c74 <CreateMessage+0x804>)
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff fb9c 	bl	8005280 <isKeyValid>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d038      	beq.n	8005bbe <CreateMessage+0x74e>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c84 <CreateMessage+0x814>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	1c18      	adds	r0, r3, #0
 8005b52:	f7fd fe9f 	bl	8003894 <__aeabi_f2d>
 8005b56:	0002      	movs	r2, r0
 8005b58:	000b      	movs	r3, r1
 8005b5a:	4c41      	ldr	r4, [pc, #260]	@ (8005c60 <CreateMessage+0x7f0>)
 8005b5c:	4958      	ldr	r1, [pc, #352]	@ (8005cc0 <CreateMessage+0x850>)
 8005b5e:	4842      	ldr	r0, [pc, #264]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b60:	9200      	str	r2, [sp, #0]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	0022      	movs	r2, r4
 8005b66:	f020 fc47 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7fa fafd 	bl	800016c <strlen>
 8005b72:	0003      	movs	r3, r0
 8005b74:	b299      	uxth	r1, r3
 8005b76:	220e      	movs	r2, #14
 8005b78:	18bb      	adds	r3, r7, r2
 8005b7a:	18ba      	adds	r2, r7, r2
 8005b7c:	8812      	ldrh	r2, [r2, #0]
 8005b7e:	188a      	adds	r2, r1, r2
 8005b80:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b82:	1cfb      	adds	r3, r7, #3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d019      	beq.n	8005bbe <CreateMessage+0x74e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b8a:	4b37      	ldr	r3, [pc, #220]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7fa faed 	bl	800016c <strlen>
 8005b92:	0003      	movs	r3, r0
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	4b34      	ldr	r3, [pc, #208]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b98:	0011      	movs	r1, r2
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff f960 	bl	8004e60 <ESP_Send>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <CreateMessage+0x7fc>)
 8005ba6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ba8:	4b31      	ldr	r3, [pc, #196]	@ (8005c70 <CreateMessage+0x800>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	001a      	movs	r2, r3
 8005bae:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <CreateMessage+0x7fc>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	1e5a      	subs	r2, r3, #1
 8005bb6:	4193      	sbcs	r3, r2
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <CreateMessage+0x800>)
 8005bbc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <CreateMessage+0x804>)
 8005bc0:	4840      	ldr	r0, [pc, #256]	@ (8005cc4 <CreateMessage+0x854>)
 8005bc2:	220c      	movs	r2, #12
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	f006 fa85 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005bca:	4b33      	ldr	r3, [pc, #204]	@ (8005c98 <CreateMessage+0x828>)
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	2b34      	cmp	r3, #52	@ 0x34
 8005bd0:	d004      	beq.n	8005bdc <CreateMessage+0x76c>
 8005bd2:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <CreateMessage+0x828>)
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b35      	cmp	r3, #53	@ 0x35
 8005bd8:	d000      	beq.n	8005bdc <CreateMessage+0x76c>
 8005bda:	e088      	b.n	8005cee <CreateMessage+0x87e>
 8005bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8005cc8 <CreateMessage+0x858>)
 8005bde:	4935      	ldr	r1, [pc, #212]	@ (8005cb4 <CreateMessage+0x844>)
 8005be0:	4b24      	ldr	r3, [pc, #144]	@ (8005c74 <CreateMessage+0x804>)
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fb4c 	bl	8005280 <isKeyValid>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d100      	bne.n	8005bee <CreateMessage+0x77e>
 8005bec:	e07f      	b.n	8005cee <CreateMessage+0x87e>
    uint8ArrayToString(Buffer, keybuffer);
 8005bee:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <CreateMessage+0x804>)
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <CreateMessage+0x7f0>)
 8005bf2:	0011      	movs	r1, r2
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff fb73 	bl	80052e0 <uint8ArrayToString>
    if (isKeyValid(keybuffer, "Sen5x", "hum")) {
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <CreateMessage+0x85c>)
 8005bfc:	492f      	ldr	r1, [pc, #188]	@ (8005cbc <CreateMessage+0x84c>)
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <CreateMessage+0x804>)
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7ff fb3d 	bl	8005280 <isKeyValid>
 8005c06:	1e03      	subs	r3, r0, #0
 8005c08:	d071      	beq.n	8005cee <CreateMessage+0x87e>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <CreateMessage+0x814>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	1c18      	adds	r0, r3, #0
 8005c10:	f7fd fe40 	bl	8003894 <__aeabi_f2d>
 8005c14:	0002      	movs	r2, r0
 8005c16:	000b      	movs	r3, r1
 8005c18:	4c11      	ldr	r4, [pc, #68]	@ (8005c60 <CreateMessage+0x7f0>)
 8005c1a:	4929      	ldr	r1, [pc, #164]	@ (8005cc0 <CreateMessage+0x850>)
 8005c1c:	4812      	ldr	r0, [pc, #72]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c1e:	9200      	str	r2, [sp, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	0022      	movs	r2, r4
 8005c24:	f020 fbe8 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005c28:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fa fa9e 	bl	800016c <strlen>
 8005c30:	0003      	movs	r3, r0
 8005c32:	b299      	uxth	r1, r3
 8005c34:	220e      	movs	r2, #14
 8005c36:	18bb      	adds	r3, r7, r2
 8005c38:	18ba      	adds	r2, r7, r2
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	188a      	adds	r2, r1, r2
 8005c3e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c40:	1cfb      	adds	r3, r7, #3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d052      	beq.n	8005cee <CreateMessage+0x87e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7fa fa8e 	bl	800016c <strlen>
 8005c50:	0003      	movs	r3, r0
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c56:	0011      	movs	r1, r2
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7ff f901 	bl	8004e60 <ESP_Send>
 8005c5e:	e037      	b.n	8005cd0 <CreateMessage+0x860>
 8005c60:	20000840 	.word	0x20000840
 8005c64:	0802ae18 	.word	0x0802ae18
 8005c68:	200005c4 	.word	0x200005c4
 8005c6c:	20000859 	.word	0x20000859
 8005c70:	20000032 	.word	0x20000032
 8005c74:	20000834 	.word	0x20000834
 8005c78:	08080048 	.word	0x08080048
 8005c7c:	0802aed8 	.word	0x0802aed8
 8005c80:	0802aedc 	.word	0x0802aedc
 8005c84:	20000704 	.word	0x20000704
 8005c88:	08080078 	.word	0x08080078
 8005c8c:	0802aee0 	.word	0x0802aee0
 8005c90:	0802aee8 	.word	0x0802aee8
 8005c94:	200005c0 	.word	0x200005c0
 8005c98:	200011c0 	.word	0x200011c0
 8005c9c:	08080024 	.word	0x08080024
 8005ca0:	0802aef0 	.word	0x0802aef0
 8005ca4:	0802aef8 	.word	0x0802aef8
 8005ca8:	0802ae38 	.word	0x0802ae38
 8005cac:	08080170 	.word	0x08080170
 8005cb0:	0802aefc 	.word	0x0802aefc
 8005cb4:	0802af08 	.word	0x0802af08
 8005cb8:	0802af10 	.word	0x0802af10
 8005cbc:	0802af18 	.word	0x0802af18
 8005cc0:	0802af20 	.word	0x0802af20
 8005cc4:	0808017c 	.word	0x0808017c
 8005cc8:	0802af40 	.word	0x0802af40
 8005ccc:	0802af4c 	.word	0x0802af4c
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	4be9      	ldr	r3, [pc, #932]	@ (800607c <CreateMessage+0xc0c>)
 8005cd6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cd8:	4be9      	ldr	r3, [pc, #932]	@ (8006080 <CreateMessage+0xc10>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	4be7      	ldr	r3, [pc, #924]	@ (800607c <CreateMessage+0xc0c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	4193      	sbcs	r3, r2
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4be5      	ldr	r3, [pc, #916]	@ (8006080 <CreateMessage+0xc10>)
 8005cec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (sen5x_Get_sen5x_enable_state() && (batteryStatus > BATTERY_LOW)) {
 8005cee:	f008 fc2f 	bl	800e550 <sen5x_Get_sen5x_enable_state>
 8005cf2:	1e03      	subs	r3, r0, #0
 8005cf4:	d100      	bne.n	8005cf8 <CreateMessage+0x888>
 8005cf6:	e138      	b.n	8005f6a <CreateMessage+0xafa>
 8005cf8:	4be2      	ldr	r3, [pc, #904]	@ (8006084 <CreateMessage+0xc14>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d800      	bhi.n	8005d02 <CreateMessage+0x892>
 8005d00:	e133      	b.n	8005f6a <CreateMessage+0xafa>
    ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005d02:	4be1      	ldr	r3, [pc, #900]	@ (8006088 <CreateMessage+0xc18>)
 8005d04:	48e1      	ldr	r0, [pc, #900]	@ (800608c <CreateMessage+0xc1c>)
 8005d06:	220c      	movs	r2, #12
 8005d08:	0019      	movs	r1, r3
 8005d0a:	f006 f9e3 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005d0e:	4ae0      	ldr	r2, [pc, #896]	@ (8006090 <CreateMessage+0xc20>)
 8005d10:	49e0      	ldr	r1, [pc, #896]	@ (8006094 <CreateMessage+0xc24>)
 8005d12:	4bdd      	ldr	r3, [pc, #884]	@ (8006088 <CreateMessage+0xc18>)
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fab3 	bl	8005280 <isKeyValid>
 8005d1a:	1e03      	subs	r3, r0, #0
 8005d1c:	d03e      	beq.n	8005d9c <CreateMessage+0x92c>
      uint8ArrayToString(Buffer, keybuffer);
 8005d1e:	4ada      	ldr	r2, [pc, #872]	@ (8006088 <CreateMessage+0xc18>)
 8005d20:	4bdd      	ldr	r3, [pc, #884]	@ (8006098 <CreateMessage+0xc28>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff fadb 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005d2a:	4bdc      	ldr	r3, [pc, #880]	@ (800609c <CreateMessage+0xc2c>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	1c18      	adds	r0, r3, #0
 8005d30:	f7fd fdb0 	bl	8003894 <__aeabi_f2d>
 8005d34:	0002      	movs	r2, r0
 8005d36:	000b      	movs	r3, r1
 8005d38:	4cd7      	ldr	r4, [pc, #860]	@ (8006098 <CreateMessage+0xc28>)
 8005d3a:	49d9      	ldr	r1, [pc, #868]	@ (80060a0 <CreateMessage+0xc30>)
 8005d3c:	48d9      	ldr	r0, [pc, #868]	@ (80060a4 <CreateMessage+0xc34>)
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	0022      	movs	r2, r4
 8005d44:	f020 fb58 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
      index += strlen(message);
 8005d48:	4bd6      	ldr	r3, [pc, #856]	@ (80060a4 <CreateMessage+0xc34>)
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f7fa fa0e 	bl	800016c <strlen>
 8005d50:	0003      	movs	r3, r0
 8005d52:	b299      	uxth	r1, r3
 8005d54:	220e      	movs	r2, #14
 8005d56:	18bb      	adds	r3, r7, r2
 8005d58:	18ba      	adds	r2, r7, r2
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	188a      	adds	r2, r1, r2
 8005d5e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d60:	1cfb      	adds	r3, r7, #3
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d019      	beq.n	8005d9c <CreateMessage+0x92c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d68:	4bce      	ldr	r3, [pc, #824]	@ (80060a4 <CreateMessage+0xc34>)
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7fa f9fe 	bl	800016c <strlen>
 8005d70:	0003      	movs	r3, r0
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4bcb      	ldr	r3, [pc, #812]	@ (80060a4 <CreateMessage+0xc34>)
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7ff f871 	bl	8004e60 <ESP_Send>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	001a      	movs	r2, r3
 8005d82:	4bbe      	ldr	r3, [pc, #760]	@ (800607c <CreateMessage+0xc0c>)
 8005d84:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d86:	4bbe      	ldr	r3, [pc, #760]	@ (8006080 <CreateMessage+0xc10>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	4bbb      	ldr	r3, [pc, #748]	@ (800607c <CreateMessage+0xc0c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	4193      	sbcs	r3, r2
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4bb9      	ldr	r3, [pc, #740]	@ (8006080 <CreateMessage+0xc10>)
 8005d9a:	701a      	strb	r2, [r3, #0]
      }
    }
    ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005d9c:	4bba      	ldr	r3, [pc, #744]	@ (8006088 <CreateMessage+0xc18>)
 8005d9e:	48c2      	ldr	r0, [pc, #776]	@ (80060a8 <CreateMessage+0xc38>)
 8005da0:	220c      	movs	r2, #12
 8005da2:	0019      	movs	r1, r3
 8005da4:	f006 f996 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM2p5", "particle")) {
 8005da8:	4ab9      	ldr	r2, [pc, #740]	@ (8006090 <CreateMessage+0xc20>)
 8005daa:	49c0      	ldr	r1, [pc, #768]	@ (80060ac <CreateMessage+0xc3c>)
 8005dac:	4bb6      	ldr	r3, [pc, #728]	@ (8006088 <CreateMessage+0xc18>)
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff fa66 	bl	8005280 <isKeyValid>
 8005db4:	1e03      	subs	r3, r0, #0
 8005db6:	d03e      	beq.n	8005e36 <CreateMessage+0x9c6>
      uint8ArrayToString(Buffer, keybuffer);
 8005db8:	4ab3      	ldr	r2, [pc, #716]	@ (8006088 <CreateMessage+0xc18>)
 8005dba:	4bb7      	ldr	r3, [pc, #732]	@ (8006098 <CreateMessage+0xc28>)
 8005dbc:	0011      	movs	r1, r2
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7ff fa8e 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005dc4:	4bb5      	ldr	r3, [pc, #724]	@ (800609c <CreateMessage+0xc2c>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	1c18      	adds	r0, r3, #0
 8005dca:	f7fd fd63 	bl	8003894 <__aeabi_f2d>
 8005dce:	0002      	movs	r2, r0
 8005dd0:	000b      	movs	r3, r1
 8005dd2:	4cb1      	ldr	r4, [pc, #708]	@ (8006098 <CreateMessage+0xc28>)
 8005dd4:	49b2      	ldr	r1, [pc, #712]	@ (80060a0 <CreateMessage+0xc30>)
 8005dd6:	48b3      	ldr	r0, [pc, #716]	@ (80060a4 <CreateMessage+0xc34>)
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	0022      	movs	r2, r4
 8005dde:	f020 fb0b 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005de2:	4bb0      	ldr	r3, [pc, #704]	@ (80060a4 <CreateMessage+0xc34>)
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fa f9c1 	bl	800016c <strlen>
 8005dea:	0003      	movs	r3, r0
 8005dec:	b299      	uxth	r1, r3
 8005dee:	220e      	movs	r2, #14
 8005df0:	18bb      	adds	r3, r7, r2
 8005df2:	18ba      	adds	r2, r7, r2
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	188a      	adds	r2, r1, r2
 8005df8:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005dfa:	1cfb      	adds	r3, r7, #3
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d019      	beq.n	8005e36 <CreateMessage+0x9c6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e02:	4ba8      	ldr	r3, [pc, #672]	@ (80060a4 <CreateMessage+0xc34>)
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fa f9b1 	bl	800016c <strlen>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	4ba5      	ldr	r3, [pc, #660]	@ (80060a4 <CreateMessage+0xc34>)
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff f824 	bl	8004e60 <ESP_Send>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	4b97      	ldr	r3, [pc, #604]	@ (800607c <CreateMessage+0xc0c>)
 8005e1e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e20:	4b97      	ldr	r3, [pc, #604]	@ (8006080 <CreateMessage+0xc10>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	001a      	movs	r2, r3
 8005e26:	4b95      	ldr	r3, [pc, #596]	@ (800607c <CreateMessage+0xc0c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	4193      	sbcs	r3, r2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b93      	ldr	r3, [pc, #588]	@ (8006080 <CreateMessage+0xc10>)
 8005e34:	701a      	strb	r2, [r3, #0]
      }
    }
    ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005e36:	4b94      	ldr	r3, [pc, #592]	@ (8006088 <CreateMessage+0xc18>)
 8005e38:	489d      	ldr	r0, [pc, #628]	@ (80060b0 <CreateMessage+0xc40>)
 8005e3a:	220c      	movs	r2, #12
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	f006 f949 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005e42:	4a93      	ldr	r2, [pc, #588]	@ (8006090 <CreateMessage+0xc20>)
 8005e44:	499b      	ldr	r1, [pc, #620]	@ (80060b4 <CreateMessage+0xc44>)
 8005e46:	4b90      	ldr	r3, [pc, #576]	@ (8006088 <CreateMessage+0xc18>)
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff fa19 	bl	8005280 <isKeyValid>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d03e      	beq.n	8005ed0 <CreateMessage+0xa60>
      uint8ArrayToString(Buffer, keybuffer);
 8005e52:	4a8d      	ldr	r2, [pc, #564]	@ (8006088 <CreateMessage+0xc18>)
 8005e54:	4b90      	ldr	r3, [pc, #576]	@ (8006098 <CreateMessage+0xc28>)
 8005e56:	0011      	movs	r1, r2
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7ff fa41 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800609c <CreateMessage+0xc2c>)
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	1c18      	adds	r0, r3, #0
 8005e64:	f7fd fd16 	bl	8003894 <__aeabi_f2d>
 8005e68:	0002      	movs	r2, r0
 8005e6a:	000b      	movs	r3, r1
 8005e6c:	4c8a      	ldr	r4, [pc, #552]	@ (8006098 <CreateMessage+0xc28>)
 8005e6e:	498c      	ldr	r1, [pc, #560]	@ (80060a0 <CreateMessage+0xc30>)
 8005e70:	488c      	ldr	r0, [pc, #560]	@ (80060a4 <CreateMessage+0xc34>)
 8005e72:	9200      	str	r2, [sp, #0]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	0022      	movs	r2, r4
 8005e78:	f020 fabe 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
      index += strlen(message);
 8005e7c:	4b89      	ldr	r3, [pc, #548]	@ (80060a4 <CreateMessage+0xc34>)
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f7fa f974 	bl	800016c <strlen>
 8005e84:	0003      	movs	r3, r0
 8005e86:	b299      	uxth	r1, r3
 8005e88:	220e      	movs	r2, #14
 8005e8a:	18bb      	adds	r3, r7, r2
 8005e8c:	18ba      	adds	r2, r7, r2
 8005e8e:	8812      	ldrh	r2, [r2, #0]
 8005e90:	188a      	adds	r2, r1, r2
 8005e92:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e94:	1cfb      	adds	r3, r7, #3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d019      	beq.n	8005ed0 <CreateMessage+0xa60>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e9c:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <CreateMessage+0xc34>)
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fa f964 	bl	800016c <strlen>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80060a4 <CreateMessage+0xc34>)
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fe ffd7 	bl	8004e60 <ESP_Send>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	4b71      	ldr	r3, [pc, #452]	@ (800607c <CreateMessage+0xc0c>)
 8005eb8:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eba:	4b71      	ldr	r3, [pc, #452]	@ (8006080 <CreateMessage+0xc10>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	4b6e      	ldr	r3, [pc, #440]	@ (800607c <CreateMessage+0xc0c>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	4193      	sbcs	r3, r2
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8006080 <CreateMessage+0xc10>)
 8005ece:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8006088 <CreateMessage+0xc18>)
 8005ed2:	4879      	ldr	r0, [pc, #484]	@ (80060b8 <CreateMessage+0xc48>)
 8005ed4:	220c      	movs	r2, #12
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	f006 f8fc 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM10", "particle")) {
 8005edc:	4a6c      	ldr	r2, [pc, #432]	@ (8006090 <CreateMessage+0xc20>)
 8005ede:	4977      	ldr	r1, [pc, #476]	@ (80060bc <CreateMessage+0xc4c>)
 8005ee0:	4b69      	ldr	r3, [pc, #420]	@ (8006088 <CreateMessage+0xc18>)
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff f9cc 	bl	8005280 <isKeyValid>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d03e      	beq.n	8005f6a <CreateMessage+0xafa>
      uint8ArrayToString(Buffer, keybuffer);
 8005eec:	4a66      	ldr	r2, [pc, #408]	@ (8006088 <CreateMessage+0xc18>)
 8005eee:	4b6a      	ldr	r3, [pc, #424]	@ (8006098 <CreateMessage+0xc28>)
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff f9f4 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005ef8:	4b68      	ldr	r3, [pc, #416]	@ (800609c <CreateMessage+0xc2c>)
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	1c18      	adds	r0, r3, #0
 8005efe:	f7fd fcc9 	bl	8003894 <__aeabi_f2d>
 8005f02:	0002      	movs	r2, r0
 8005f04:	000b      	movs	r3, r1
 8005f06:	4c64      	ldr	r4, [pc, #400]	@ (8006098 <CreateMessage+0xc28>)
 8005f08:	4965      	ldr	r1, [pc, #404]	@ (80060a0 <CreateMessage+0xc30>)
 8005f0a:	4866      	ldr	r0, [pc, #408]	@ (80060a4 <CreateMessage+0xc34>)
 8005f0c:	9200      	str	r2, [sp, #0]
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	0022      	movs	r2, r4
 8005f12:	f020 fa71 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005f16:	4b63      	ldr	r3, [pc, #396]	@ (80060a4 <CreateMessage+0xc34>)
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fa f927 	bl	800016c <strlen>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	b299      	uxth	r1, r3
 8005f22:	220e      	movs	r2, #14
 8005f24:	18bb      	adds	r3, r7, r2
 8005f26:	18ba      	adds	r2, r7, r2
 8005f28:	8812      	ldrh	r2, [r2, #0]
 8005f2a:	188a      	adds	r2, r1, r2
 8005f2c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f2e:	1cfb      	adds	r3, r7, #3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <CreateMessage+0xafa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f36:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <CreateMessage+0xc34>)
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7fa f917 	bl	800016c <strlen>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	4b58      	ldr	r3, [pc, #352]	@ (80060a4 <CreateMessage+0xc34>)
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7fe ff8a 	bl	8004e60 <ESP_Send>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	001a      	movs	r2, r3
 8005f50:	4b4a      	ldr	r3, [pc, #296]	@ (800607c <CreateMessage+0xc0c>)
 8005f52:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f54:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <CreateMessage+0xc10>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	001a      	movs	r2, r3
 8005f5a:	4b48      	ldr	r3, [pc, #288]	@ (800607c <CreateMessage+0xc0c>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	4193      	sbcs	r3, r2
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4b46      	ldr	r3, [pc, #280]	@ (8006080 <CreateMessage+0xc10>)
 8005f68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005f6a:	f007 fa71 	bl	800d450 <IsAHT20SensorPresent>
 8005f6e:	1e03      	subs	r3, r0, #0
 8005f70:	d100      	bne.n	8005f74 <CreateMessage+0xb04>
 8005f72:	e0c7      	b.n	8006104 <CreateMessage+0xc94>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005f74:	4b44      	ldr	r3, [pc, #272]	@ (8006088 <CreateMessage+0xc18>)
 8005f76:	4852      	ldr	r0, [pc, #328]	@ (80060c0 <CreateMessage+0xc50>)
 8005f78:	220c      	movs	r2, #12
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	f006 f8aa 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005f80:	4a50      	ldr	r2, [pc, #320]	@ (80060c4 <CreateMessage+0xc54>)
 8005f82:	4951      	ldr	r1, [pc, #324]	@ (80060c8 <CreateMessage+0xc58>)
 8005f84:	4b40      	ldr	r3, [pc, #256]	@ (8006088 <CreateMessage+0xc18>)
 8005f86:	0018      	movs	r0, r3
 8005f88:	f7ff f97a 	bl	8005280 <isKeyValid>
 8005f8c:	1e03      	subs	r3, r0, #0
 8005f8e:	d03e      	beq.n	800600e <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005f90:	4a3d      	ldr	r2, [pc, #244]	@ (8006088 <CreateMessage+0xc18>)
 8005f92:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <CreateMessage+0xc28>)
 8005f94:	0011      	movs	r1, r2
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff f9a2 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800609c <CreateMessage+0xc2c>)
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	1c18      	adds	r0, r3, #0
 8005fa2:	f7fd fc77 	bl	8003894 <__aeabi_f2d>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	000b      	movs	r3, r1
 8005faa:	4c3b      	ldr	r4, [pc, #236]	@ (8006098 <CreateMessage+0xc28>)
 8005fac:	493c      	ldr	r1, [pc, #240]	@ (80060a0 <CreateMessage+0xc30>)
 8005fae:	483d      	ldr	r0, [pc, #244]	@ (80060a4 <CreateMessage+0xc34>)
 8005fb0:	9200      	str	r2, [sp, #0]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	0022      	movs	r2, r4
 8005fb6:	f020 fa1f 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005fba:	4b3a      	ldr	r3, [pc, #232]	@ (80060a4 <CreateMessage+0xc34>)
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7fa f8d5 	bl	800016c <strlen>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	b299      	uxth	r1, r3
 8005fc6:	220e      	movs	r2, #14
 8005fc8:	18bb      	adds	r3, r7, r2
 8005fca:	18ba      	adds	r2, r7, r2
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	188a      	adds	r2, r1, r2
 8005fd0:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fd2:	1cfb      	adds	r3, r7, #3
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d019      	beq.n	800600e <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fda:	4b32      	ldr	r3, [pc, #200]	@ (80060a4 <CreateMessage+0xc34>)
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7fa f8c5 	bl	800016c <strlen>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <CreateMessage+0xc34>)
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7fe ff38 	bl	8004e60 <ESP_Send>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	4b21      	ldr	r3, [pc, #132]	@ (800607c <CreateMessage+0xc0c>)
 8005ff6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ff8:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <CreateMessage+0xc10>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <CreateMessage+0xc0c>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4013      	ands	r3, r2
 8006004:	1e5a      	subs	r2, r3, #1
 8006006:	4193      	sbcs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <CreateMessage+0xc10>)
 800600c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800600e:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <CreateMessage+0xc18>)
 8006010:	482e      	ldr	r0, [pc, #184]	@ (80060cc <CreateMessage+0xc5c>)
 8006012:	220c      	movs	r2, #12
 8006014:	0019      	movs	r1, r3
 8006016:	f006 f85d 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <CreateMessage+0xc60>)
 800601c:	492a      	ldr	r1, [pc, #168]	@ (80060c8 <CreateMessage+0xc58>)
 800601e:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <CreateMessage+0xc18>)
 8006020:	0018      	movs	r0, r3
 8006022:	f7ff f92d 	bl	8005280 <isKeyValid>
 8006026:	1e03      	subs	r3, r0, #0
 8006028:	d06c      	beq.n	8006104 <CreateMessage+0xc94>
      uint8ArrayToString(Buffer, keybuffer);
 800602a:	4a17      	ldr	r2, [pc, #92]	@ (8006088 <CreateMessage+0xc18>)
 800602c:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <CreateMessage+0xc28>)
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f7ff f955 	bl	80052e0 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <CreateMessage+0xc2c>)
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	1c18      	adds	r0, r3, #0
 800603c:	f7fd fc2a 	bl	8003894 <__aeabi_f2d>
 8006040:	0002      	movs	r2, r0
 8006042:	000b      	movs	r3, r1
 8006044:	4c14      	ldr	r4, [pc, #80]	@ (8006098 <CreateMessage+0xc28>)
 8006046:	4916      	ldr	r1, [pc, #88]	@ (80060a0 <CreateMessage+0xc30>)
 8006048:	4816      	ldr	r0, [pc, #88]	@ (80060a4 <CreateMessage+0xc34>)
 800604a:	9200      	str	r2, [sp, #0]
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	0022      	movs	r2, r4
 8006050:	f020 f9d2 	bl	80263f8 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <CreateMessage+0xc34>)
 8006056:	0018      	movs	r0, r3
 8006058:	f7fa f888 	bl	800016c <strlen>
 800605c:	0003      	movs	r3, r0
 800605e:	b299      	uxth	r1, r3
 8006060:	220e      	movs	r2, #14
 8006062:	18bb      	adds	r3, r7, r2
 8006064:	18ba      	adds	r2, r7, r2
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	188a      	adds	r2, r1, r2
 800606a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800606c:	1cfb      	adds	r3, r7, #3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d047      	beq.n	8006104 <CreateMessage+0xc94>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <CreateMessage+0xc34>)
 8006076:	0018      	movs	r0, r3
 8006078:	e02c      	b.n	80060d4 <CreateMessage+0xc64>
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	20000859 	.word	0x20000859
 8006080:	20000032 	.word	0x20000032
 8006084:	2000215d 	.word	0x2000215d
 8006088:	20000834 	.word	0x20000834
 800608c:	080800b0 	.word	0x080800b0
 8006090:	0802af50 	.word	0x0802af50
 8006094:	0802af5c 	.word	0x0802af5c
 8006098:	20000840 	.word	0x20000840
 800609c:	20000704 	.word	0x20000704
 80060a0:	0802ae18 	.word	0x0802ae18
 80060a4:	200005c4 	.word	0x200005c4
 80060a8:	08080054 	.word	0x08080054
 80060ac:	0802af60 	.word	0x0802af60
 80060b0:	080800bc 	.word	0x080800bc
 80060b4:	0802af68 	.word	0x0802af68
 80060b8:	08080060 	.word	0x08080060
 80060bc:	0802af6c 	.word	0x0802af6c
 80060c0:	080800c8 	.word	0x080800c8
 80060c4:	0802aefc 	.word	0x0802aefc
 80060c8:	0802af74 	.word	0x0802af74
 80060cc:	080800d4 	.word	0x080800d4
 80060d0:	0802af40 	.word	0x0802af40
 80060d4:	f7fa f84a 	bl	800016c <strlen>
 80060d8:	0003      	movs	r3, r0
 80060da:	b29a      	uxth	r2, r3
 80060dc:	4ba3      	ldr	r3, [pc, #652]	@ (800636c <CreateMessage+0xefc>)
 80060de:	0011      	movs	r1, r2
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7fe febd 	bl	8004e60 <ESP_Send>
 80060e6:	0003      	movs	r3, r0
 80060e8:	001a      	movs	r2, r3
 80060ea:	4ba1      	ldr	r3, [pc, #644]	@ (8006370 <CreateMessage+0xf00>)
 80060ec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80060ee:	4ba1      	ldr	r3, [pc, #644]	@ (8006374 <CreateMessage+0xf04>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	001a      	movs	r2, r3
 80060f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006370 <CreateMessage+0xf00>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	4013      	ands	r3, r2
 80060fa:	1e5a      	subs	r2, r3, #1
 80060fc:	4193      	sbcs	r3, r2
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	4b9c      	ldr	r3, [pc, #624]	@ (8006374 <CreateMessage+0xf04>)
 8006102:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006104:	f007 f9b8 	bl	800d478 <IsENS160SensorPresent>
 8006108:	1e03      	subs	r3, r0, #0
 800610a:	d100      	bne.n	800610e <CreateMessage+0xc9e>
 800610c:	e0d1      	b.n	80062b2 <CreateMessage+0xe42>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 800610e:	4b9a      	ldr	r3, [pc, #616]	@ (8006378 <CreateMessage+0xf08>)
 8006110:	489a      	ldr	r0, [pc, #616]	@ (800637c <CreateMessage+0xf0c>)
 8006112:	220c      	movs	r2, #12
 8006114:	0019      	movs	r1, r3
 8006116:	f005 ffdd 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 800611a:	4a99      	ldr	r2, [pc, #612]	@ (8006380 <CreateMessage+0xf10>)
 800611c:	4999      	ldr	r1, [pc, #612]	@ (8006384 <CreateMessage+0xf14>)
 800611e:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <CreateMessage+0xf08>)
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff f8ad 	bl	8005280 <isKeyValid>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d037      	beq.n	800619a <CreateMessage+0xd2a>
      uint8ArrayToString(Buffer, keybuffer);
 800612a:	4a93      	ldr	r2, [pc, #588]	@ (8006378 <CreateMessage+0xf08>)
 800612c:	4b96      	ldr	r3, [pc, #600]	@ (8006388 <CreateMessage+0xf18>)
 800612e:	0011      	movs	r1, r2
 8006130:	0018      	movs	r0, r3
 8006132:	f7ff f8d5 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 8006136:	4b95      	ldr	r3, [pc, #596]	@ (800638c <CreateMessage+0xf1c>)
 8006138:	2255      	movs	r2, #85	@ 0x55
 800613a:	5c9b      	ldrb	r3, [r3, r2]
 800613c:	4a92      	ldr	r2, [pc, #584]	@ (8006388 <CreateMessage+0xf18>)
 800613e:	4994      	ldr	r1, [pc, #592]	@ (8006390 <CreateMessage+0xf20>)
 8006140:	488a      	ldr	r0, [pc, #552]	@ (800636c <CreateMessage+0xefc>)
 8006142:	f020 f959 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 8006146:	4b89      	ldr	r3, [pc, #548]	@ (800636c <CreateMessage+0xefc>)
 8006148:	0018      	movs	r0, r3
 800614a:	f7fa f80f 	bl	800016c <strlen>
 800614e:	0003      	movs	r3, r0
 8006150:	b299      	uxth	r1, r3
 8006152:	220e      	movs	r2, #14
 8006154:	18bb      	adds	r3, r7, r2
 8006156:	18ba      	adds	r2, r7, r2
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	188a      	adds	r2, r1, r2
 800615c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800615e:	1cfb      	adds	r3, r7, #3
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d019      	beq.n	800619a <CreateMessage+0xd2a>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006166:	4b81      	ldr	r3, [pc, #516]	@ (800636c <CreateMessage+0xefc>)
 8006168:	0018      	movs	r0, r3
 800616a:	f7f9 ffff 	bl	800016c <strlen>
 800616e:	0003      	movs	r3, r0
 8006170:	b29a      	uxth	r2, r3
 8006172:	4b7e      	ldr	r3, [pc, #504]	@ (800636c <CreateMessage+0xefc>)
 8006174:	0011      	movs	r1, r2
 8006176:	0018      	movs	r0, r3
 8006178:	f7fe fe72 	bl	8004e60 <ESP_Send>
 800617c:	0003      	movs	r3, r0
 800617e:	001a      	movs	r2, r3
 8006180:	4b7b      	ldr	r3, [pc, #492]	@ (8006370 <CreateMessage+0xf00>)
 8006182:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006184:	4b7b      	ldr	r3, [pc, #492]	@ (8006374 <CreateMessage+0xf04>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	001a      	movs	r2, r3
 800618a:	4b79      	ldr	r3, [pc, #484]	@ (8006370 <CreateMessage+0xf00>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	4013      	ands	r3, r2
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	4193      	sbcs	r3, r2
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b77      	ldr	r3, [pc, #476]	@ (8006374 <CreateMessage+0xf04>)
 8006198:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 800619a:	4b77      	ldr	r3, [pc, #476]	@ (8006378 <CreateMessage+0xf08>)
 800619c:	487d      	ldr	r0, [pc, #500]	@ (8006394 <CreateMessage+0xf24>)
 800619e:	220c      	movs	r2, #12
 80061a0:	0019      	movs	r1, r3
 80061a2:	f005 ff97 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 80061a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006398 <CreateMessage+0xf28>)
 80061a8:	4976      	ldr	r1, [pc, #472]	@ (8006384 <CreateMessage+0xf14>)
 80061aa:	4b73      	ldr	r3, [pc, #460]	@ (8006378 <CreateMessage+0xf08>)
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff f867 	bl	8005280 <isKeyValid>
 80061b2:	1e03      	subs	r3, r0, #0
 80061b4:	d037      	beq.n	8006226 <CreateMessage+0xdb6>
      uint8ArrayToString(Buffer, keybuffer);
 80061b6:	4a70      	ldr	r2, [pc, #448]	@ (8006378 <CreateMessage+0xf08>)
 80061b8:	4b73      	ldr	r3, [pc, #460]	@ (8006388 <CreateMessage+0xf18>)
 80061ba:	0011      	movs	r1, r2
 80061bc:	0018      	movs	r0, r3
 80061be:	f7ff f88f 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 80061c2:	4b72      	ldr	r3, [pc, #456]	@ (800638c <CreateMessage+0xf1c>)
 80061c4:	224a      	movs	r2, #74	@ 0x4a
 80061c6:	5a9b      	ldrh	r3, [r3, r2]
 80061c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006388 <CreateMessage+0xf18>)
 80061ca:	4971      	ldr	r1, [pc, #452]	@ (8006390 <CreateMessage+0xf20>)
 80061cc:	4867      	ldr	r0, [pc, #412]	@ (800636c <CreateMessage+0xefc>)
 80061ce:	f020 f913 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 80061d2:	4b66      	ldr	r3, [pc, #408]	@ (800636c <CreateMessage+0xefc>)
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7f9 ffc9 	bl	800016c <strlen>
 80061da:	0003      	movs	r3, r0
 80061dc:	b299      	uxth	r1, r3
 80061de:	220e      	movs	r2, #14
 80061e0:	18bb      	adds	r3, r7, r2
 80061e2:	18ba      	adds	r2, r7, r2
 80061e4:	8812      	ldrh	r2, [r2, #0]
 80061e6:	188a      	adds	r2, r1, r2
 80061e8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80061ea:	1cfb      	adds	r3, r7, #3
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d019      	beq.n	8006226 <CreateMessage+0xdb6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061f2:	4b5e      	ldr	r3, [pc, #376]	@ (800636c <CreateMessage+0xefc>)
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7f9 ffb9 	bl	800016c <strlen>
 80061fa:	0003      	movs	r3, r0
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	4b5b      	ldr	r3, [pc, #364]	@ (800636c <CreateMessage+0xefc>)
 8006200:	0011      	movs	r1, r2
 8006202:	0018      	movs	r0, r3
 8006204:	f7fe fe2c 	bl	8004e60 <ESP_Send>
 8006208:	0003      	movs	r3, r0
 800620a:	001a      	movs	r2, r3
 800620c:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <CreateMessage+0xf00>)
 800620e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006210:	4b58      	ldr	r3, [pc, #352]	@ (8006374 <CreateMessage+0xf04>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	001a      	movs	r2, r3
 8006216:	4b56      	ldr	r3, [pc, #344]	@ (8006370 <CreateMessage+0xf00>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	4013      	ands	r3, r2
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	4193      	sbcs	r3, r2
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b54      	ldr	r3, [pc, #336]	@ (8006374 <CreateMessage+0xf04>)
 8006224:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8006226:	4b54      	ldr	r3, [pc, #336]	@ (8006378 <CreateMessage+0xf08>)
 8006228:	485c      	ldr	r0, [pc, #368]	@ (800639c <CreateMessage+0xf2c>)
 800622a:	220c      	movs	r2, #12
 800622c:	0019      	movs	r1, r3
 800622e:	f005 ff51 	bl	800c0d4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8006232:	4a5b      	ldr	r2, [pc, #364]	@ (80063a0 <CreateMessage+0xf30>)
 8006234:	4953      	ldr	r1, [pc, #332]	@ (8006384 <CreateMessage+0xf14>)
 8006236:	4b50      	ldr	r3, [pc, #320]	@ (8006378 <CreateMessage+0xf08>)
 8006238:	0018      	movs	r0, r3
 800623a:	f7ff f821 	bl	8005280 <isKeyValid>
 800623e:	1e03      	subs	r3, r0, #0
 8006240:	d037      	beq.n	80062b2 <CreateMessage+0xe42>
      uint8ArrayToString(Buffer, keybuffer);
 8006242:	4a4d      	ldr	r2, [pc, #308]	@ (8006378 <CreateMessage+0xf08>)
 8006244:	4b50      	ldr	r3, [pc, #320]	@ (8006388 <CreateMessage+0xf18>)
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff f849 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 800624e:	4b4f      	ldr	r3, [pc, #316]	@ (800638c <CreateMessage+0xf1c>)
 8006250:	2252      	movs	r2, #82	@ 0x52
 8006252:	5a9b      	ldrh	r3, [r3, r2]
 8006254:	4a4c      	ldr	r2, [pc, #304]	@ (8006388 <CreateMessage+0xf18>)
 8006256:	494e      	ldr	r1, [pc, #312]	@ (8006390 <CreateMessage+0xf20>)
 8006258:	4844      	ldr	r0, [pc, #272]	@ (800636c <CreateMessage+0xefc>)
 800625a:	f020 f8cd 	bl	80263f8 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 800625e:	4b43      	ldr	r3, [pc, #268]	@ (800636c <CreateMessage+0xefc>)
 8006260:	0018      	movs	r0, r3
 8006262:	f7f9 ff83 	bl	800016c <strlen>
 8006266:	0003      	movs	r3, r0
 8006268:	b299      	uxth	r1, r3
 800626a:	220e      	movs	r2, #14
 800626c:	18bb      	adds	r3, r7, r2
 800626e:	18ba      	adds	r2, r7, r2
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	188a      	adds	r2, r1, r2
 8006274:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006276:	1cfb      	adds	r3, r7, #3
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d019      	beq.n	80062b2 <CreateMessage+0xe42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800627e:	4b3b      	ldr	r3, [pc, #236]	@ (800636c <CreateMessage+0xefc>)
 8006280:	0018      	movs	r0, r3
 8006282:	f7f9 ff73 	bl	800016c <strlen>
 8006286:	0003      	movs	r3, r0
 8006288:	b29a      	uxth	r2, r3
 800628a:	4b38      	ldr	r3, [pc, #224]	@ (800636c <CreateMessage+0xefc>)
 800628c:	0011      	movs	r1, r2
 800628e:	0018      	movs	r0, r3
 8006290:	f7fe fde6 	bl	8004e60 <ESP_Send>
 8006294:	0003      	movs	r3, r0
 8006296:	001a      	movs	r2, r3
 8006298:	4b35      	ldr	r3, [pc, #212]	@ (8006370 <CreateMessage+0xf00>)
 800629a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800629c:	4b35      	ldr	r3, [pc, #212]	@ (8006374 <CreateMessage+0xf04>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	001a      	movs	r2, r3
 80062a2:	4b33      	ldr	r3, [pc, #204]	@ (8006370 <CreateMessage+0xf00>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	4013      	ands	r3, r2
 80062a8:	1e5a      	subs	r2, r3, #1
 80062aa:	4193      	sbcs	r3, r2
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b31      	ldr	r3, [pc, #196]	@ (8006374 <CreateMessage+0xf04>)
 80062b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <CreateMessage+0xf08>)
 80062b4:	483b      	ldr	r0, [pc, #236]	@ (80063a4 <CreateMessage+0xf34>)
 80062b6:	220c      	movs	r2, #12
 80062b8:	0019      	movs	r1, r3
 80062ba:	f005 ff0b 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80062be:	4a2e      	ldr	r2, [pc, #184]	@ (8006378 <CreateMessage+0xf08>)
 80062c0:	4b31      	ldr	r3, [pc, #196]	@ (8006388 <CreateMessage+0xf18>)
 80062c2:	0011      	movs	r1, r2
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff f80b 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 80062ca:	4b37      	ldr	r3, [pc, #220]	@ (80063a8 <CreateMessage+0xf38>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1c18      	adds	r0, r3, #0
 80062d0:	f7fd fae0 	bl	8003894 <__aeabi_f2d>
 80062d4:	0002      	movs	r2, r0
 80062d6:	000b      	movs	r3, r1
 80062d8:	4c2b      	ldr	r4, [pc, #172]	@ (8006388 <CreateMessage+0xf18>)
 80062da:	4934      	ldr	r1, [pc, #208]	@ (80063ac <CreateMessage+0xf3c>)
 80062dc:	4823      	ldr	r0, [pc, #140]	@ (800636c <CreateMessage+0xefc>)
 80062de:	9200      	str	r2, [sp, #0]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	0022      	movs	r2, r4
 80062e4:	f020 f888 	bl	80263f8 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80062e8:	4b20      	ldr	r3, [pc, #128]	@ (800636c <CreateMessage+0xefc>)
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7f9 ff3e 	bl	800016c <strlen>
 80062f0:	0002      	movs	r2, r0
 80062f2:	4b1e      	ldr	r3, [pc, #120]	@ (800636c <CreateMessage+0xefc>)
 80062f4:	18d3      	adds	r3, r2, r3
 80062f6:	4a2e      	ldr	r2, [pc, #184]	@ (80063b0 <CreateMessage+0xf40>)
 80062f8:	0011      	movs	r1, r2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f020 f87c 	bl	80263f8 <siprintf>
  index += strlen(message);
 8006300:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <CreateMessage+0xefc>)
 8006302:	0018      	movs	r0, r3
 8006304:	f7f9 ff32 	bl	800016c <strlen>
 8006308:	0003      	movs	r3, r0
 800630a:	b299      	uxth	r1, r3
 800630c:	220e      	movs	r2, #14
 800630e:	18bb      	adds	r3, r7, r2
 8006310:	18ba      	adds	r2, r7, r2
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	188a      	adds	r2, r1, r2
 8006316:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <CreateMessage+0xee4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <CreateMessage+0xefc>)
 8006322:	0018      	movs	r0, r3
 8006324:	f7f9 ff22 	bl	800016c <strlen>
 8006328:	0003      	movs	r3, r0
 800632a:	b29a      	uxth	r2, r3
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <CreateMessage+0xefc>)
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f7fe fd95 	bl	8004e60 <ESP_Send>
 8006336:	0003      	movs	r3, r0
 8006338:	001a      	movs	r2, r3
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <CreateMessage+0xf00>)
 800633c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <CreateMessage+0xf04>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	001a      	movs	r2, r3
 8006344:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <CreateMessage+0xf00>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	4013      	ands	r3, r2
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	4193      	sbcs	r3, r2
 800634e:	b2da      	uxtb	r2, r3
 8006350:	4b08      	ldr	r3, [pc, #32]	@ (8006374 <CreateMessage+0xf04>)
 8006352:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006354:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <CreateMessage+0xf04>)
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	701a      	strb	r2, [r3, #0]
  return index;
 800635c:	230e      	movs	r3, #14
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	881b      	ldrh	r3, [r3, #0]
}
 8006362:	0018      	movs	r0, r3
 8006364:	46bd      	mov	sp, r7
 8006366:	b004      	add	sp, #16
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	200005c4 	.word	0x200005c4
 8006370:	20000859 	.word	0x20000859
 8006374:	20000032 	.word	0x20000032
 8006378:	20000834 	.word	0x20000834
 800637c:	080800ec 	.word	0x080800ec
 8006380:	0802af7c 	.word	0x0802af7c
 8006384:	0802af90 	.word	0x0802af90
 8006388:	20000840 	.word	0x20000840
 800638c:	20000704 	.word	0x20000704
 8006390:	0802ae38 	.word	0x0802ae38
 8006394:	080800f8 	.word	0x080800f8
 8006398:	0802af98 	.word	0x0802af98
 800639c:	08080104 	.word	0x08080104
 80063a0:	0802afa0 	.word	0x0802afa0
 80063a4:	0808006c 	.word	0x0808006c
 80063a8:	20002158 	.word	0x20002158
 80063ac:	0802ae18 	.word	0x0802ae18
 80063b0:	0802afa8 	.word	0x0802afa8

080063b4 <StartProg>:

void StartProg(){
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80063b8:	2064      	movs	r0, #100	@ 0x64
 80063ba:	f00e fa8b 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <StartProg+0x60>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	2101      	movs	r1, #1
 80063c4:	0018      	movs	r0, r3
 80063c6:	f00f fce2 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80063ca:	2064      	movs	r0, #100	@ 0x64
 80063cc:	f00e fa82 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <StartProg+0x60>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	2102      	movs	r1, #2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f00f fcd9 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063dc:	23fa      	movs	r3, #250	@ 0xfa
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	0018      	movs	r0, r3
 80063e2:	f00e fa77 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80063e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <StartProg+0x60>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	2101      	movs	r1, #1
 80063ec:	0018      	movs	r0, r3
 80063ee:	f00f fcce 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063f2:	23fa      	movs	r3, #250	@ 0xfa
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	0018      	movs	r0, r3
 80063f8:	f00e fa6c 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <StartProg+0x60>)
 80063fe:	2201      	movs	r2, #1
 8006400:	2102      	movs	r1, #2
 8006402:	0018      	movs	r0, r3
 8006404:	f00f fcc3 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006408:	2028      	movs	r0, #40	@ 0x28
 800640a:	f00e fa63 	bl	80148d4 <HAL_Delay>
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	50001c00 	.word	0x50001c00

08006418 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b0d9      	sub	sp, #356	@ 0x164
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	0008      	movs	r0, r1
 8006422:	0011      	movs	r1, r2
 8006424:	4bab      	ldr	r3, [pc, #684]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006426:	24b0      	movs	r4, #176	@ 0xb0
 8006428:	0064      	lsls	r4, r4, #1
 800642a:	191b      	adds	r3, r3, r4
 800642c:	19db      	adds	r3, r3, r7
 800642e:	1c02      	adds	r2, r0, #0
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	4ba9      	ldr	r3, [pc, #676]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006434:	191b      	adds	r3, r3, r4
 8006436:	19db      	adds	r3, r3, r7
 8006438:	1c0a      	adds	r2, r1, #0
 800643a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	005a      	lsls	r2, r3, #1
 8006440:	2348      	movs	r3, #72	@ 0x48
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	2100      	movs	r1, #0
 8006446:	0018      	movs	r0, r3
 8006448:	f020 f91e 	bl	8026688 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800644c:	2360      	movs	r3, #96	@ 0x60
 800644e:	33ff      	adds	r3, #255	@ 0xff
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2203      	movs	r2, #3
 8006454:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8006456:	23ae      	movs	r3, #174	@ 0xae
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	2200      	movs	r2, #0
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	e013      	b.n	800648a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006462:	20ae      	movs	r0, #174	@ 0xae
 8006464:	0040      	lsls	r0, r0, #1
 8006466:	183b      	adds	r3, r7, r0
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	18d2      	adds	r2, r2, r3
 800646e:	183b      	adds	r3, r7, r0
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	7811      	ldrb	r1, [r2, #0]
 8006474:	4a99      	ldr	r2, [pc, #612]	@ (80066dc <ParseBuffer+0x2c4>)
 8006476:	24b0      	movs	r4, #176	@ 0xb0
 8006478:	0064      	lsls	r4, r4, #1
 800647a:	1912      	adds	r2, r2, r4
 800647c:	19d2      	adds	r2, r2, r7
 800647e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006480:	183b      	adds	r3, r7, r0
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	183b      	adds	r3, r7, r0
 8006486:	3201      	adds	r2, #1
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	23ae      	movs	r3, #174	@ 0xae
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	18fa      	adds	r2, r7, r3
 8006490:	4b90      	ldr	r3, [pc, #576]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006492:	21b0      	movs	r1, #176	@ 0xb0
 8006494:	0049      	lsls	r1, r1, #1
 8006496:	185b      	adds	r3, r3, r1
 8006498:	19db      	adds	r3, r3, r7
 800649a:	8812      	ldrh	r2, [r2, #0]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3df      	bcc.n	8006462 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80064a2:	4b8c      	ldr	r3, [pc, #560]	@ (80066d4 <ParseBuffer+0x2bc>)
 80064a4:	185b      	adds	r3, r3, r1
 80064a6:	19db      	adds	r3, r3, r7
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	4a8c      	ldr	r2, [pc, #560]	@ (80066dc <ParseBuffer+0x2c4>)
 80064ac:	1852      	adds	r2, r2, r1
 80064ae:	19d2      	adds	r2, r2, r7
 80064b0:	2100      	movs	r1, #0
 80064b2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80064b4:	f00d fd02 	bl	8013ebc <GetVerboseLevel>
 80064b8:	0003      	movs	r3, r0
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d115      	bne.n	80064ea <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 80064be:	4b88      	ldr	r3, [pc, #544]	@ (80066e0 <ParseBuffer+0x2c8>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <ParseBuffer+0xc4>
 80064c6:	f003 fb8b 	bl	8009be0 <Check_USB_PowerOn>
 80064ca:	1e03      	subs	r3, r0, #0
 80064cc:	d006      	beq.n	80064dc <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 80064ce:	2348      	movs	r3, #72	@ 0x48
 80064d0:	18fa      	adds	r2, r7, r3
 80064d2:	4b84      	ldr	r3, [pc, #528]	@ (80066e4 <ParseBuffer+0x2cc>)
 80064d4:	0011      	movs	r1, r2
 80064d6:	0018      	movs	r0, r3
 80064d8:	f002 fac8 	bl	8008a6c <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 80064dc:	2348      	movs	r3, #72	@ 0x48
 80064de:	18fa      	adds	r2, r7, r3
 80064e0:	4b81      	ldr	r3, [pc, #516]	@ (80066e8 <ParseBuffer+0x2d0>)
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f01f ff17 	bl	8026318 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	26ac      	movs	r6, #172	@ 0xac
 80064ee:	0076      	lsls	r6, r6, #1
 80064f0:	19ba      	adds	r2, r7, r6
 80064f2:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80064f4:	4b7d      	ldr	r3, [pc, #500]	@ (80066ec <ParseBuffer+0x2d4>)
 80064f6:	25b0      	movs	r5, #176	@ 0xb0
 80064f8:	006d      	lsls	r5, r5, #1
 80064fa:	195b      	adds	r3, r3, r5
 80064fc:	19db      	adds	r3, r3, r7
 80064fe:	4a7c      	ldr	r2, [pc, #496]	@ (80066f0 <ParseBuffer+0x2d8>)
 8006500:	8811      	ldrh	r1, [r2, #0]
 8006502:	8019      	strh	r1, [r3, #0]
 8006504:	7892      	ldrb	r2, [r2, #2]
 8006506:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006508:	4b7a      	ldr	r3, [pc, #488]	@ (80066f4 <ParseBuffer+0x2dc>)
 800650a:	195b      	adds	r3, r3, r5
 800650c:	19db      	adds	r3, r3, r7
 800650e:	4a7a      	ldr	r2, [pc, #488]	@ (80066f8 <ParseBuffer+0x2e0>)
 8006510:	6811      	ldr	r1, [r2, #0]
 8006512:	6019      	str	r1, [r3, #0]
 8006514:	8892      	ldrh	r2, [r2, #4]
 8006516:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006518:	4b78      	ldr	r3, [pc, #480]	@ (80066fc <ParseBuffer+0x2e4>)
 800651a:	195b      	adds	r3, r3, r5
 800651c:	19db      	adds	r3, r3, r7
 800651e:	4a78      	ldr	r2, [pc, #480]	@ (8006700 <ParseBuffer+0x2e8>)
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006526:	4b77      	ldr	r3, [pc, #476]	@ (8006704 <ParseBuffer+0x2ec>)
 8006528:	195b      	adds	r3, r3, r5
 800652a:	19db      	adds	r3, r3, r7
 800652c:	4a76      	ldr	r2, [pc, #472]	@ (8006708 <ParseBuffer+0x2f0>)
 800652e:	6811      	ldr	r1, [r2, #0]
 8006530:	6019      	str	r1, [r3, #0]
 8006532:	8892      	ldrh	r2, [r2, #4]
 8006534:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006536:	4b75      	ldr	r3, [pc, #468]	@ (800670c <ParseBuffer+0x2f4>)
 8006538:	195b      	adds	r3, r3, r5
 800653a:	19db      	adds	r3, r3, r7
 800653c:	223e      	movs	r2, #62	@ 0x3e
 800653e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006540:	4b73      	ldr	r3, [pc, #460]	@ (8006710 <ParseBuffer+0x2f8>)
 8006542:	195b      	adds	r3, r3, r5
 8006544:	19db      	adds	r3, r3, r7
 8006546:	4a73      	ldr	r2, [pc, #460]	@ (8006714 <ParseBuffer+0x2fc>)
 8006548:	ca13      	ldmia	r2!, {r0, r1, r4}
 800654a:	c313      	stmia	r3!, {r0, r1, r4}
 800654c:	8811      	ldrh	r1, [r2, #0]
 800654e:	8019      	strh	r1, [r3, #0]
 8006550:	7892      	ldrb	r2, [r2, #2]
 8006552:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006554:	4b70      	ldr	r3, [pc, #448]	@ (8006718 <ParseBuffer+0x300>)
 8006556:	195b      	adds	r3, r3, r5
 8006558:	19db      	adds	r3, r3, r7
 800655a:	4a70      	ldr	r2, [pc, #448]	@ (800671c <ParseBuffer+0x304>)
 800655c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800655e:	c313      	stmia	r3!, {r0, r1, r4}
 8006560:	8812      	ldrh	r2, [r2, #0]
 8006562:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8006564:	4b5c      	ldr	r3, [pc, #368]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006566:	195b      	adds	r3, r3, r5
 8006568:	19db      	adds	r3, r3, r7
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 8006570:	2344      	movs	r3, #68	@ 0x44
 8006572:	18fa      	adds	r2, r7, r3
 8006574:	2348      	movs	r3, #72	@ 0x48
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	0011      	movs	r1, r2
 800657a:	0018      	movs	r0, r3
 800657c:	f020 f8bf 	bl	80266fe <strstr>
 8006580:	0003      	movs	r3, r0
 8006582:	19ba      	adds	r2, r7, r6
 8006584:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8006586:	4b54      	ldr	r3, [pc, #336]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006588:	22b0      	movs	r2, #176	@ 0xb0
 800658a:	0052      	lsls	r2, r2, #1
 800658c:	189b      	adds	r3, r3, r2
 800658e:	19db      	adds	r3, r3, r7
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10c      	bne.n	80065b0 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 8006596:	232c      	movs	r3, #44	@ 0x2c
 8006598:	18fa      	adds	r2, r7, r3
 800659a:	2348      	movs	r3, #72	@ 0x48
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f020 f8ac 	bl	80266fe <strstr>
 80065a6:	0003      	movs	r3, r0
 80065a8:	22ac      	movs	r2, #172	@ 0xac
 80065aa:	0052      	lsls	r2, r2, #1
 80065ac:	18ba      	adds	r2, r7, r2
 80065ae:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80065b0:	4b49      	ldr	r3, [pc, #292]	@ (80066d8 <ParseBuffer+0x2c0>)
 80065b2:	22b0      	movs	r2, #176	@ 0xb0
 80065b4:	0052      	lsls	r2, r2, #1
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	19db      	adds	r3, r3, r7
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d10c      	bne.n	80065da <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 80065c0:	2328      	movs	r3, #40	@ 0x28
 80065c2:	18fa      	adds	r2, r7, r3
 80065c4:	2348      	movs	r3, #72	@ 0x48
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f020 f897 	bl	80266fe <strstr>
 80065d0:	0003      	movs	r3, r0
 80065d2:	22ac      	movs	r2, #172	@ 0xac
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	18ba      	adds	r2, r7, r2
 80065d8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80065da:	4b3f      	ldr	r3, [pc, #252]	@ (80066d8 <ParseBuffer+0x2c0>)
 80065dc:	22b0      	movs	r2, #176	@ 0xb0
 80065de:	0052      	lsls	r2, r2, #1
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d10c      	bne.n	8006604 <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 80065ea:	2308      	movs	r3, #8
 80065ec:	18fa      	adds	r2, r7, r3
 80065ee:	2348      	movs	r3, #72	@ 0x48
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	0011      	movs	r1, r2
 80065f4:	0018      	movs	r0, r3
 80065f6:	f020 f882 	bl	80266fe <strstr>
 80065fa:	0003      	movs	r3, r0
 80065fc:	22ac      	movs	r2, #172	@ 0xac
 80065fe:	0052      	lsls	r2, r2, #1
 8006600:	18ba      	adds	r2, r7, r2
 8006602:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006604:	233c      	movs	r3, #60	@ 0x3c
 8006606:	18fa      	adds	r2, r7, r3
 8006608:	2448      	movs	r4, #72	@ 0x48
 800660a:	193b      	adds	r3, r7, r4
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f020 f875 	bl	80266fe <strstr>
 8006614:	0003      	movs	r3, r0
 8006616:	22aa      	movs	r2, #170	@ 0xaa
 8006618:	0052      	lsls	r2, r2, #1
 800661a:	18ba      	adds	r2, r7, r2
 800661c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800661e:	2318      	movs	r3, #24
 8006620:	18fa      	adds	r2, r7, r3
 8006622:	193b      	adds	r3, r7, r4
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f020 f869 	bl	80266fe <strstr>
 800662c:	0003      	movs	r3, r0
 800662e:	22a8      	movs	r2, #168	@ 0xa8
 8006630:	0052      	lsls	r2, r2, #1
 8006632:	18ba      	adds	r2, r7, r2
 8006634:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 8006636:	4a3a      	ldr	r2, [pc, #232]	@ (8006720 <ParseBuffer+0x308>)
 8006638:	193b      	adds	r3, r7, r4
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f020 f85e 	bl	80266fe <strstr>
 8006642:	0003      	movs	r3, r0
 8006644:	22a6      	movs	r2, #166	@ 0xa6
 8006646:	0052      	lsls	r2, r2, #1
 8006648:	18ba      	adds	r2, r7, r2
 800664a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800664c:	2334      	movs	r3, #52	@ 0x34
 800664e:	18fa      	adds	r2, r7, r3
 8006650:	193b      	adds	r3, r7, r4
 8006652:	0011      	movs	r1, r2
 8006654:	0018      	movs	r0, r3
 8006656:	f020 f852 	bl	80266fe <strstr>
 800665a:	0003      	movs	r3, r0
 800665c:	22a4      	movs	r2, #164	@ 0xa4
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	18ba      	adds	r2, r7, r2
 8006662:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8006664:	4b1b      	ldr	r3, [pc, #108]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006666:	21b0      	movs	r1, #176	@ 0xb0
 8006668:	0049      	lsls	r1, r1, #1
 800666a:	185b      	adds	r3, r3, r1
 800666c:	19db      	adds	r3, r3, r7
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d800      	bhi.n	8006676 <ParseBuffer+0x25e>
 8006674:	e0b5      	b.n	80067e2 <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8006676:	22ac      	movs	r2, #172	@ 0xac
 8006678:	0052      	lsls	r2, r2, #1
 800667a:	18bb      	adds	r3, r7, r2
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d056      	beq.n	8006730 <ParseBuffer+0x318>
 8006682:	18bb      	adds	r3, r7, r2
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b4f      	cmp	r3, #79	@ 0x4f
 800668a:	d151      	bne.n	8006730 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800668c:	2360      	movs	r3, #96	@ 0x60
 800668e:	33ff      	adds	r3, #255	@ 0xff
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006696:	4b23      	ldr	r3, [pc, #140]	@ (8006724 <ParseBuffer+0x30c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b12      	cmp	r3, #18
 800669c:	d148      	bne.n	8006730 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800669e:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <ParseBuffer+0x2bc>)
 80066a0:	185b      	adds	r3, r3, r1
 80066a2:	19db      	adds	r3, r3, r7
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80066a8:	d10b      	bne.n	80066c2 <ParseBuffer+0x2aa>
 80066aa:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <ParseBuffer+0x2c4>)
 80066ac:	185b      	adds	r3, r3, r1
 80066ae:	19db      	adds	r3, r3, r7
 80066b0:	2221      	movs	r2, #33	@ 0x21
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	2b32      	cmp	r3, #50	@ 0x32
 80066b6:	d104      	bne.n	80066c2 <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	0018      	movs	r0, r3
 80066bc:	f003 fd3e 	bl	800a13c <ParseTime>
 80066c0:	e036      	b.n	8006730 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 80066c2:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <ParseBuffer+0x310>)
 80066c4:	4b19      	ldr	r3, [pc, #100]	@ (800672c <ParseBuffer+0x314>)
 80066c6:	0019      	movs	r1, r3
 80066c8:	2001      	movs	r0, #1
 80066ca:	f00d fb6d 	bl	8013da8 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80066ce:	2306      	movs	r3, #6
 80066d0:	e08b      	b.n	80067ea <ParseBuffer+0x3d2>
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	fffffea2 	.word	0xfffffea2
 80066d8:	fffffea1 	.word	0xfffffea1
 80066dc:	fffffee8 	.word	0xfffffee8
 80066e0:	200010f7 	.word	0x200010f7
 80066e4:	0802afac 	.word	0x0802afac
 80066e8:	0802afb4 	.word	0x0802afb4
 80066ec:	fffffee4 	.word	0xfffffee4
 80066f0:	0802afe4 	.word	0x0802afe4
 80066f4:	fffffedc 	.word	0xfffffedc
 80066f8:	0802afe8 	.word	0x0802afe8
 80066fc:	fffffed4 	.word	0xfffffed4
 8006700:	4c494146 	.word	0x4c494146
 8006704:	fffffecc 	.word	0xfffffecc
 8006708:	0802aff0 	.word	0x0802aff0
 800670c:	fffffec8 	.word	0xfffffec8
 8006710:	fffffeb8 	.word	0xfffffeb8
 8006714:	0802aff8 	.word	0x0802aff8
 8006718:	fffffea8 	.word	0xfffffea8
 800671c:	0802b008 	.word	0x0802b008
 8006720:	200006a0 	.word	0x200006a0
 8006724:	20000701 	.word	0x20000701
 8006728:	0802afd0 	.word	0x0802afd0
 800672c:	0802aac0 	.word	0x0802aac0
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006730:	22ac      	movs	r2, #172	@ 0xac
 8006732:	0052      	lsls	r2, r2, #1
 8006734:	18bb      	adds	r3, r7, r2
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <ParseBuffer+0x338>
 800673c:	18bb      	adds	r3, r7, r2
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b72      	cmp	r3, #114	@ 0x72
 8006744:	d104      	bne.n	8006750 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 8006746:	2360      	movs	r3, #96	@ 0x60
 8006748:	33ff      	adds	r3, #255	@ 0xff
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	2202      	movs	r2, #2
 800674e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006750:	22ac      	movs	r2, #172	@ 0xac
 8006752:	0052      	lsls	r2, r2, #1
 8006754:	18bb      	adds	r3, r7, r2
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <ParseBuffer+0x358>
 800675c:	18bb      	adds	r3, r7, r2
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b3e      	cmp	r3, #62	@ 0x3e
 8006764:	d104      	bne.n	8006770 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 8006766:	2360      	movs	r3, #96	@ 0x60
 8006768:	33ff      	adds	r3, #255	@ 0xff
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2205      	movs	r2, #5
 800676e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006770:	22ac      	movs	r2, #172	@ 0xac
 8006772:	0052      	lsls	r2, r2, #1
 8006774:	18bb      	adds	r3, r7, r2
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <ParseBuffer+0x378>
 800677c:	18bb      	adds	r3, r7, r2
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b2b      	cmp	r3, #43	@ 0x2b
 8006784:	d104      	bne.n	8006790 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 8006786:	2360      	movs	r3, #96	@ 0x60
 8006788:	33ff      	adds	r3, #255	@ 0xff
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	220b      	movs	r2, #11
 800678e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006790:	22aa      	movs	r2, #170	@ 0xaa
 8006792:	0052      	lsls	r2, r2, #1
 8006794:	18bb      	adds	r3, r7, r2
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <ParseBuffer+0x38e>
 800679c:	18bb      	adds	r3, r7, r2
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b45      	cmp	r3, #69	@ 0x45
 80067a4:	d00a      	beq.n	80067bc <ParseBuffer+0x3a4>
 80067a6:	22a4      	movs	r2, #164	@ 0xa4
 80067a8:	0052      	lsls	r2, r2, #1
 80067aa:	18bb      	adds	r3, r7, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <ParseBuffer+0x3ae>
 80067b2:	18bb      	adds	r3, r7, r2
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b46      	cmp	r3, #70	@ 0x46
 80067ba:	d104      	bne.n	80067c6 <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 80067bc:	2360      	movs	r3, #96	@ 0x60
 80067be:	33ff      	adds	r3, #255	@ 0xff
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80067c6:	22a8      	movs	r2, #168	@ 0xa8
 80067c8:	0052      	lsls	r2, r2, #1
 80067ca:	18bb      	adds	r3, r7, r2
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <ParseBuffer+0x3ca>
 80067d2:	18bb      	adds	r3, r7, r2
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b57      	cmp	r3, #87	@ 0x57
 80067da:	d102      	bne.n	80067e2 <ParseBuffer+0x3ca>
      ConnectionMade = true;
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <ParseBuffer+0x3dc>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 80067e2:	2360      	movs	r3, #96	@ 0x60
 80067e4:	33ff      	adds	r3, #255	@ 0xff
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	781b      	ldrb	r3, [r3, #0]

}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b059      	add	sp, #356	@ 0x164
 80067f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	200005b0 	.word	0x200005b0

080067f8 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <PollAwake+0x34>)
 8006800:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f7f9 fcb1 	bl	800016c <strlen>
 800680a:	0003      	movs	r3, r0
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f7fe fb24 	bl	8004e60 <ESP_Send>
 8006818:	1e03      	subs	r3, r0, #0
 800681a:	d001      	beq.n	8006820 <PollAwake+0x28>
    return true;
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <PollAwake+0x2a>
  }
  else{
    return false;
 8006820:	2300      	movs	r3, #0
  }
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b002      	add	sp, #8
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	0802b018 	.word	0x0802b018

08006830 <RFPower>:

bool RFPower(){
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <RFPower+0x34>)
 8006838:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f7f9 fc95 	bl	800016c <strlen>
 8006842:	0003      	movs	r3, r0
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0011      	movs	r1, r2
 800684a:	0018      	movs	r0, r3
 800684c:	f7fe fb08 	bl	8004e60 <ESP_Send>
 8006850:	1e03      	subs	r3, r0, #0
 8006852:	d001      	beq.n	8006858 <RFPower+0x28>
    return true;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <RFPower+0x2a>
  }
  else{
    return false;
 8006858:	2300      	movs	r3, #0
  }
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	0802b020 	.word	0x0802b020

08006868 <CheckRFPower>:

bool CheckRFPower(){
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <CheckRFPower+0x34>)
 8006870:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f7f9 fc79 	bl	800016c <strlen>
 800687a:	0003      	movs	r3, r0
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0011      	movs	r1, r2
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe faec 	bl	8004e60 <ESP_Send>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d001      	beq.n	8006890 <CheckRFPower+0x28>
    return true;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006890:	2300      	movs	r3, #0
  }
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b002      	add	sp, #8
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	0802b030 	.word	0x0802b030

080068a0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <ATRestore+0x34>)
 80068a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7f9 fc5d 	bl	800016c <strlen>
 80068b2:	0003      	movs	r3, r0
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fe fad0 	bl	8004e60 <ESP_Send>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d001      	beq.n	80068c8 <ATRestore+0x28>
    return true;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <ATRestore+0x2a>
  }
  else{
    return false;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	0802b040 	.word	0x0802b040

080068d8 <CWINIT>:

bool CWINIT(){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <CWINIT+0x34>)
 80068e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7f9 fc41 	bl	800016c <strlen>
 80068ea:	0003      	movs	r3, r0
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0011      	movs	r1, r2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fab4 	bl	8004e60 <ESP_Send>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d001      	beq.n	8006900 <CWINIT+0x28>
    return true;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <CWINIT+0x2a>
  }
  else{
    return false;
 8006900:	2300      	movs	r3, #0
  }
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b002      	add	sp, #8
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	0802b050 	.word	0x0802b050

08006910 <CWMODE1>:

bool CWMODE1(){
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <CWMODE1+0x34>)
 8006918:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f7f9 fc25 	bl	800016c <strlen>
 8006922:	0003      	movs	r3, r0
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f7fe fa98 	bl	8004e60 <ESP_Send>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d001      	beq.n	8006938 <CWMODE1+0x28>
    return true;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <CWMODE1+0x2a>
  }
  else{
    return false;
 8006938:	2300      	movs	r3, #0
  }
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b002      	add	sp, #8
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	0802b060 	.word	0x0802b060

08006948 <CWMODE2>:

bool CWMODE2(){
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <CWMODE2+0x34>)
 8006950:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0018      	movs	r0, r3
 8006956:	f7f9 fc09 	bl	800016c <strlen>
 800695a:	0003      	movs	r3, r0
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fa7c 	bl	8004e60 <ESP_Send>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <CWMODE2+0x28>
    return true;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	0802b070 	.word	0x0802b070

08006980 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <CWAUTOCONN+0x34>)
 8006988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f7f9 fbed 	bl	800016c <strlen>
 8006992:	0003      	movs	r3, r0
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f7fe fa60 	bl	8004e60 <ESP_Send>
 80069a0:	1e03      	subs	r3, r0, #0
 80069a2:	d001      	beq.n	80069a8 <CWAUTOCONN+0x28>
    return true;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80069a8:	2300      	movs	r3, #0
  }
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b002      	add	sp, #8
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	0802b080 	.word	0x0802b080

080069b8 <CWJAP>:

bool CWJAP()
{
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	46c6      	mov	lr, r8
 80069bc:	b500      	push	{lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	466b      	mov	r3, sp
 80069c4:	4698      	mov	r8, r3
  APtested = true;
 80069c6:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <CWJAP+0xe8>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 80069cc:	f7fd ff98 	bl	8004900 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 80069d0:	4b34      	ldr	r3, [pc, #208]	@ (8006aa4 <CWJAP+0xec>)
 80069d2:	2270      	movs	r2, #112	@ 0x70
 80069d4:	2100      	movs	r1, #0
 80069d6:	0018      	movs	r0, r3
 80069d8:	f01f fe56 	bl	8026688 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 80069dc:	4b32      	ldr	r3, [pc, #200]	@ (8006aa8 <CWJAP+0xf0>)
 80069de:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <CWJAP+0xf4>)
 80069e0:	4933      	ldr	r1, [pc, #204]	@ (8006ab0 <CWJAP+0xf8>)
 80069e2:	4830      	ldr	r0, [pc, #192]	@ (8006aa4 <CWJAP+0xec>)
 80069e4:	f01f fd08 	bl	80263f8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80069e8:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa4 <CWJAP+0xec>)
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7f9 fbbe 	bl	800016c <strlen>
 80069f0:	0002      	movs	r2, r0
 80069f2:	210f      	movs	r1, #15
 80069f4:	2018      	movs	r0, #24
 80069f6:	180b      	adds	r3, r1, r0
 80069f8:	19db      	adds	r3, r3, r7
 80069fa:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 80069fc:	180b      	adds	r3, r1, r0
 80069fe:	19db      	adds	r3, r3, r7
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	623a      	str	r2, [r7, #32]
 8006a08:	001a      	movs	r2, r3
 8006a0a:	60ba      	str	r2, [r7, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	60fa      	str	r2, [r7, #12]
 8006a10:	68b8      	ldr	r0, [r7, #8]
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	0002      	movs	r2, r0
 8006a16:	0f52      	lsrs	r2, r2, #29
 8006a18:	000e      	movs	r6, r1
 8006a1a:	00f6      	lsls	r6, r6, #3
 8006a1c:	617e      	str	r6, [r7, #20]
 8006a1e:	697e      	ldr	r6, [r7, #20]
 8006a20:	4316      	orrs	r6, r2
 8006a22:	617e      	str	r6, [r7, #20]
 8006a24:	0002      	movs	r2, r0
 8006a26:	00d2      	lsls	r2, r2, #3
 8006a28:	613a      	str	r2, [r7, #16]
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	603a      	str	r2, [r7, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	6838      	ldr	r0, [r7, #0]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	0002      	movs	r2, r0
 8006a38:	0f52      	lsrs	r2, r2, #29
 8006a3a:	000e      	movs	r6, r1
 8006a3c:	00f5      	lsls	r5, r6, #3
 8006a3e:	4315      	orrs	r5, r2
 8006a40:	0002      	movs	r2, r0
 8006a42:	00d4      	lsls	r4, r2, #3
 8006a44:	3307      	adds	r3, #7
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	466a      	mov	r2, sp
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	469d      	mov	sp, r3
 8006a50:	466b      	mov	r3, sp
 8006a52:	3300      	adds	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006a56:	240f      	movs	r4, #15
 8006a58:	2518      	movs	r5, #24
 8006a5a:	1963      	adds	r3, r4, r5
 8006a5c:	19db      	adds	r3, r3, r7
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	001a      	movs	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2100      	movs	r1, #0
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f01f fe0d 	bl	8026688 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006a6e:	1963      	adds	r3, r4, r5
 8006a70:	19db      	adds	r3, r3, r7
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	490b      	ldr	r1, [pc, #44]	@ (8006aa4 <CWJAP+0xec>)
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f01f fe2c 	bl	80266d6 <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006a7e:	1963      	adds	r3, r4, r5
 8006a80:	19db      	adds	r3, r3, r7
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	0011      	movs	r1, r2
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7fe f9e8 	bl	8004e60 <ESP_Send>
 8006a90:	0003      	movs	r3, r0
 8006a92:	46c5      	mov	sp, r8
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b00a      	add	sp, #40	@ 0x28
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	46b8      	mov	r8, r7
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa0:	200005b1 	.word	0x200005b1
 8006aa4:	2000086c 	.word	0x2000086c
 8006aa8:	200006c0 	.word	0x200006c0
 8006aac:	200006a0 	.word	0x200006a0
 8006ab0:	0802b094 	.word	0x0802b094

08006ab4 <CWMODE3>:


bool CWMODE3(){
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006aba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae8 <CWMODE3+0x34>)
 8006abc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7f9 fb53 	bl	800016c <strlen>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0011      	movs	r1, r2
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7fe f9c6 	bl	8004e60 <ESP_Send>
 8006ad4:	1e03      	subs	r3, r0, #0
 8006ad6:	d001      	beq.n	8006adc <CWMODE3+0x28>
    return true;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <CWMODE3+0x2a>
  }
  else{
    return false;
 8006adc:	2300      	movs	r3, #0
  }
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	0802b0ac 	.word	0x0802b0ac

08006aec <CWSTATE>:

bool CWSTATE(){
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <CWSTATE+0x34>)
 8006af4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7f9 fb37 	bl	800016c <strlen>
 8006afe:	0003      	movs	r3, r0
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7fe f9aa 	bl	8004e60 <ESP_Send>
 8006b0c:	1e03      	subs	r3, r0, #0
 8006b0e:	d001      	beq.n	8006b14 <CWSTATE+0x28>
    return true;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006b14:	2300      	movs	r3, #0
  }
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	0802b0bc 	.word	0x0802b0bc

08006b24 <CWSAP>:

bool CWSAP(){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <CWSAP+0x34>)
 8006b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7f9 fb1b 	bl	800016c <strlen>
 8006b36:	0003      	movs	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7fe f98e 	bl	8004e60 <ESP_Send>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d001      	beq.n	8006b4c <CWSAP+0x28>
    return true;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <CWSAP+0x2a>
  }
  else{
    return false;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	0802b0cc 	.word	0x0802b0cc

08006b5c <CIPMUX>:

bool CIPMUX(){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006b62:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <CIPMUX+0x34>)
 8006b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 faff 	bl	800016c <strlen>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe f972 	bl	8004e60 <ESP_Send>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <CIPMUX+0x28>
    return true;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006b84:	2300      	movs	r3, #0
  }
}
 8006b86:	0018      	movs	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	0802b0f0 	.word	0x0802b0f0

08006b94 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <WEBSERVER+0x34>)
 8006b9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7f9 fae3 	bl	800016c <strlen>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0011      	movs	r1, r2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7fe f956 	bl	8004e60 <ESP_Send>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d001      	beq.n	8006bbc <WEBSERVER+0x28>
    return true;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006bbc:	2300      	movs	r3, #0
  }
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	0802b100 	.word	0x0802b100

08006bcc <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006bcc:	b5b0      	push	{r4, r5, r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006bd2:	1cfb      	adds	r3, r7, #3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006bd8:	1dbc      	adds	r4, r7, #6
 8006bda:	1cfb      	adds	r3, r7, #3
 8006bdc:	2100      	movs	r1, #0
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7fe fc46 	bl	8005470 <CreateMessage>
 8006be4:	0003      	movs	r3, r0
 8006be6:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006be8:	4b22      	ldr	r3, [pc, #136]	@ (8006c74 <HTTPCPOST+0xa8>)
 8006bea:	4823      	ldr	r0, [pc, #140]	@ (8006c78 <HTTPCPOST+0xac>)
 8006bec:	220c      	movs	r2, #12
 8006bee:	0019      	movs	r1, r3
 8006bf0:	f005 fa70 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c74 <HTTPCPOST+0xa8>)
 8006bf6:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HTTPCPOST+0xb0>)
 8006bf8:	0011      	movs	r1, r2
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f7fe fb70 	bl	80052e0 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006c00:	4b1f      	ldr	r3, [pc, #124]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c02:	4820      	ldr	r0, [pc, #128]	@ (8006c84 <HTTPCPOST+0xb8>)
 8006c04:	2230      	movs	r2, #48	@ 0x30
 8006c06:	0019      	movs	r1, r3
 8006c08:	f005 fa64 	bl	800c0d4 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c16:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <HTTPCPOST+0xbc>)
 8006c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c1a:	c313      	stmia	r3!, {r0, r1, r4}
 8006c1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c1e:	c313      	stmia	r3!, {r0, r1, r4}
 8006c20:	ca03      	ldmia	r2!, {r0, r1}
 8006c22:	c303      	stmia	r3!, {r0, r1}
 8006c24:	8811      	ldrh	r1, [r2, #0]
 8006c26:	8019      	strh	r1, [r3, #0]
 8006c28:	7892      	ldrb	r2, [r2, #2]
 8006c2a:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c2c:	1dbb      	adds	r3, r7, #6
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	4d12      	ldr	r5, [pc, #72]	@ (8006c7c <HTTPCPOST+0xb0>)
 8006c32:	4c13      	ldr	r4, [pc, #76]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c34:	4915      	ldr	r1, [pc, #84]	@ (8006c8c <HTTPCPOST+0xc0>)
 8006c36:	4816      	ldr	r0, [pc, #88]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c38:	4a16      	ldr	r2, [pc, #88]	@ (8006c94 <HTTPCPOST+0xc8>)
 8006c3a:	9201      	str	r2, [sp, #4]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	002b      	movs	r3, r5
 8006c40:	0022      	movs	r2, r4
 8006c42:	f01f fbd9 	bl	80263f8 <siprintf>
  uint16_t len = strlen(message);
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7f9 fa8f 	bl	800016c <strlen>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	1d3b      	adds	r3, r7, #4
 8006c52:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	881a      	ldrh	r2, [r3, #0]
 8006c58:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7fe f8ff 	bl	8004e60 <ESP_Send>
 8006c62:	1e03      	subs	r3, r0, #0
 8006c64:	d001      	beq.n	8006c6a <HTTPCPOST+0x9e>
    return true;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006c6a:	2300      	movs	r3, #0
  }
}
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bdb0      	pop	{r4, r5, r7, pc}
 8006c74:	200008dc 	.word	0x200008dc
 8006c78:	08080000 	.word	0x08080000
 8006c7c:	200008e8 	.word	0x200008e8
 8006c80:	20000904 	.word	0x20000904
 8006c84:	08080110 	.word	0x08080110
 8006c88:	0802b118 	.word	0x0802b118
 8006c8c:	0802b13c 	.word	0x0802b13c
 8006c90:	200005c4 	.word	0x200005c4
 8006c94:	0802b160 	.word	0x0802b160

08006c98 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
  bool result = false;
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7fe fb3d 	bl	8005328 <CreateMailMessage>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <SENDMAIL+0x2c>)
 8006cb4:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006cb6:	1dfb      	adds	r3, r7, #7
 8006cb8:	781b      	ldrb	r3, [r3, #0]
}
 8006cba:	0018      	movs	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b002      	add	sp, #8
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	200005bc 	.word	0x200005bc

08006cc8 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b090      	sub	sp, #64	@ 0x40
 8006ccc:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006cce:	2133      	movs	r1, #51	@ 0x33
 8006cd0:	187b      	adds	r3, r7, r1
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006cd6:	2536      	movs	r5, #54	@ 0x36
 8006cd8:	197c      	adds	r4, r7, r5
 8006cda:	187b      	adds	r3, r7, r1
 8006cdc:	2100      	movs	r1, #0
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7fe fb22 	bl	8005328 <CreateMailMessage>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006ce8:	003b      	movs	r3, r7
 8006cea:	4814      	ldr	r0, [pc, #80]	@ (8006d3c <HTTPCPOST_MAILAPI+0x74>)
 8006cec:	2230      	movs	r2, #48	@ 0x30
 8006cee:	0019      	movs	r1, r3
 8006cf0:	f005 f9f0 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006cf4:	197b      	adds	r3, r7, r5
 8006cf6:	881c      	ldrh	r4, [r3, #0]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	@ (8006d40 <HTTPCPOST_MAILAPI+0x78>)
 8006cfa:	4912      	ldr	r1, [pc, #72]	@ (8006d44 <HTTPCPOST_MAILAPI+0x7c>)
 8006cfc:	4812      	ldr	r0, [pc, #72]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006cfe:	003b      	movs	r3, r7
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <HTTPCPOST_MAILAPI+0x84>)
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	0023      	movs	r3, r4
 8006d08:	f01f fb76 	bl	80263f8 <siprintf>
  uint16_t len = strlen(message);
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7f9 fa2c 	bl	800016c <strlen>
 8006d14:	0002      	movs	r2, r0
 8006d16:	2134      	movs	r1, #52	@ 0x34
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006d1c:	187b      	adds	r3, r7, r1
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	4b09      	ldr	r3, [pc, #36]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7fe f89b 	bl	8004e60 <ESP_Send>
 8006d2a:	1e03      	subs	r3, r0, #0
 8006d2c:	d001      	beq.n	8006d32 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b00e      	add	sp, #56	@ 0x38
 8006d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3c:	080802c0 	.word	0x080802c0
 8006d40:	0802df14 	.word	0x0802df14
 8006d44:	0802b184 	.word	0x0802b184
 8006d48:	200005c4 	.word	0x200005c4
 8006d4c:	0802b160 	.word	0x0802b160

08006d50 <SENDDATA>:
#endif

bool SENDDATA(){
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
  bool result = false;
 8006d56:	1dfb      	adds	r3, r7, #7
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006d5c:	1dfb      	adds	r3, r7, #7
 8006d5e:	2101      	movs	r1, #1
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fe fb85 	bl	8005470 <CreateMessage>
 8006d66:	0003      	movs	r3, r0
 8006d68:	001a      	movs	r2, r3
 8006d6a:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <SENDDATA+0x2c>)
 8006d6c:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d6e:	1dfb      	adds	r3, r7, #7
 8006d70:	781b      	ldrb	r3, [r3, #0]
}
 8006d72:	0018      	movs	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b002      	add	sp, #8
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	200005bc 	.word	0x200005bc

08006d80 <SLEEP>:

bool SLEEP(){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <SLEEP+0x34>)
 8006d88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7f9 f9ed 	bl	800016c <strlen>
 8006d92:	0003      	movs	r3, r0
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fe f860 	bl	8004e60 <ESP_Send>
 8006da0:	1e03      	subs	r3, r0, #0
 8006da2:	d001      	beq.n	8006da8 <SLEEP+0x28>
    return true;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <SLEEP+0x2a>
  }
  else{
    return false;
 8006da8:	2300      	movs	r3, #0
  }
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	0802b1d4 	.word	0x0802b1d4

08006db8 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <CIPSNTPCFG+0x3c>)
 8006dc0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7f9 f9d1 	bl	800016c <strlen>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7fe f844 	bl	8004e60 <ESP_Send>
 8006dd8:	1e03      	subs	r3, r0, #0
 8006dda:	d006      	beq.n	8006dea <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006ddc:	23fa      	movs	r3, #250	@ 0xfa
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f00d fd77 	bl	80148d4 <HAL_Delay>
    return true;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006dea:	2300      	movs	r3, #0
  }
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b002      	add	sp, #8
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	0802b1e4 	.word	0x0802b1e4

08006df8 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <CIPSNTPTIME+0x34>)
 8006e00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7f9 f9b1 	bl	800016c <strlen>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0011      	movs	r1, r2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fe f824 	bl	8004e60 <ESP_Send>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d001      	beq.n	8006e20 <CIPSNTPTIME+0x28>
    return true;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e20:	2300      	movs	r3, #0
  }
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	0802b234 	.word	0x0802b234

08006e30 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <CIPSNTPINTV+0x34>)
 8006e38:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7f9 f995 	bl	800016c <strlen>
 8006e42:	0003      	movs	r3, r0
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7fe f808 	bl	8004e60 <ESP_Send>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d001      	beq.n	8006e58 <CIPSNTPINTV+0x28>
    return true;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006e58:	2300      	movs	r3, #0
  }
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	0802b248 	.word	0x0802b248

08006e68 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	0002      	movs	r2, r0
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006e74:	4b6c      	ldr	r3, [pc, #432]	@ (8007028 <DMA_ProcessBuffer+0x1c0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	200e      	movs	r0, #14
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	0049      	lsls	r1, r1, #1
 8006e84:	1a8a      	subs	r2, r1, r2
 8006e86:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006e88:	230d      	movs	r3, #13
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d903      	bls.n	8006ea4 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	2280      	movs	r2, #128	@ 0x80
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006ea4:	4b61      	ldr	r3, [pc, #388]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	001a      	movs	r2, r3
 8006eac:	230e      	movs	r3, #14
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d131      	bne.n	8006f1a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b14      	cmp	r3, #20
 8006ebc:	d91b      	bls.n	8006ef6 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <DMA_ProcessBuffer+0x74>
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <DMA_ProcessBuffer+0x1d0>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006ed4:	230d      	movs	r3, #13
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2207      	movs	r2, #7
 8006eda:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006edc:	4b55      	ldr	r3, [pc, #340]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d103      	bne.n	8006eec <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006ee4:	4b55      	ldr	r3, [pc, #340]	@ (800703c <DMA_ProcessBuffer+0x1d4>)
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e016      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006eec:	230d      	movs	r3, #13
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e011      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f00:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f02:	f00d fcdd 	bl	80148c0 <HAL_GetTick>
 8006f06:	0003      	movs	r3, r0
 8006f08:	33f5      	adds	r3, #245	@ 0xf5
 8006f0a:	33ff      	adds	r3, #255	@ 0xff
 8006f0c:	001a      	movs	r2, r3
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <DMA_ProcessBuffer+0x1d8>)
 8006f10:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f12:	230d      	movs	r3, #13
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2204      	movs	r2, #4
 8006f18:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f1a:	4b44      	ldr	r3, [pc, #272]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	210e      	movs	r1, #14
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <DMA_ProcessBuffer+0xc6>
 8006f2c:	e075      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f2e:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006f34:	4b43      	ldr	r3, [pc, #268]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d109      	bne.n	8006f58 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f4c:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006f4e:	230d      	movs	r3, #13
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	220a      	movs	r2, #10
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e060      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006f58:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	001a      	movs	r2, r3
 8006f60:	210e      	movs	r1, #14
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b34      	ldr	r3, [pc, #208]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f72:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006f74:	230d      	movs	r3, #13
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e04d      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	001a      	movs	r2, r3
 8006f86:	210e      	movs	r1, #14
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d917      	bls.n	8006fc0 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006f90:	4b26      	ldr	r3, [pc, #152]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	001a      	movs	r2, r3
 8006f98:	4b2b      	ldr	r3, [pc, #172]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006f9a:	18d0      	adds	r0, r2, r3
 8006f9c:	4b23      	ldr	r3, [pc, #140]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	001a      	movs	r2, r3
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	b299      	uxth	r1, r3
 8006fac:	230d      	movs	r3, #13
 8006fae:	18fc      	adds	r4, r7, r3
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	f7ff fa2f 	bl	8006418 <ParseBuffer>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]
 8006fbe:	e026      	b.n	800700e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006fca:	18d0      	adds	r0, r2, r3
 8006fcc:	4b17      	ldr	r3, [pc, #92]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	b299      	uxth	r1, r3
 8006fdc:	250d      	movs	r5, #13
 8006fde:	197c      	adds	r4, r7, r5
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	001a      	movs	r2, r3
 8006fe6:	f7ff fa17 	bl	8006418 <ParseBuffer>
 8006fea:	0003      	movs	r3, r0
 8006fec:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006fee:	210e      	movs	r1, #14
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006ff8:	197c      	adds	r4, r7, r5
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	8819      	ldrh	r1, [r3, #0]
 8007002:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff fa07 	bl	8006418 <ParseBuffer>
 800700a:	0003      	movs	r3, r0
 800700c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800700e:	230e      	movs	r3, #14
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b05      	ldr	r3, [pc, #20]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8007018:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800701a:	230d      	movs	r3, #13
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bdb0      	pop	{r4, r5, r7, pc}
 8007028:	20002454 	.word	0x20002454
 800702c:	20000934 	.word	0x20000934
 8007030:	2000069c 	.word	0x2000069c
 8007034:	20000701 	.word	0x20000701
 8007038:	20000001 	.word	0x20000001
 800703c:	20000030 	.word	0x20000030
 8007040:	20000694 	.word	0x20000694
 8007044:	20000935 	.word	0x20000935
 8007048:	200004ac 	.word	0x200004ac

0800704c <clearDMABuffer>:

void clearDMABuffer(){
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	005a      	lsls	r2, r3, #1
 8007054:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <clearDMABuffer+0x18>)
 8007056:	2100      	movs	r1, #0
 8007058:	0018      	movs	r0, r3
 800705a:	f01f fb15 	bl	8026688 <memset>
}
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200004ac 	.word	0x200004ac

08007068 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	0002      	movs	r2, r0
 8007070:	1dfb      	adds	r3, r7, #7
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	1c0a      	adds	r2, r1, #0
 8007078:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800707a:	210f      	movs	r1, #15
 800707c:	187b      	adds	r3, r7, r1
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8007082:	1dbb      	adds	r3, r7, #6
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800708a:	187b      	adds	r3, r7, r1
 800708c:	1dfa      	adds	r2, r7, #7
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	4251      	negs	r1, r2
 8007092:	414a      	adcs	r2, r1
 8007094:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007096:	1dbb      	adds	r3, r7, #6
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800709e:	230f      	movs	r3, #15
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	1dfa      	adds	r2, r7, #7
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	3a02      	subs	r2, #2
 80070a8:	4251      	negs	r1, r2
 80070aa:	414a      	adcs	r2, r1
 80070ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d107      	bne.n	80070c6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80070b6:	230f      	movs	r3, #15
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	1dfa      	adds	r2, r7, #7
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	3a05      	subs	r2, #5
 80070c0:	4251      	negs	r1, r2
 80070c2:	414a      	adcs	r2, r1
 80070c4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d107      	bne.n	80070de <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	1dfa      	adds	r2, r7, #7
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	3a0b      	subs	r2, #11
 80070d8:	4251      	negs	r1, r2
 80070da:	414a      	adcs	r2, r1
 80070dc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80070de:	230f      	movs	r3, #15
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	781b      	ldrb	r3, [r3, #0]
}
 80070e4:	0018      	movs	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b004      	add	sp, #16
 80070ea:	bd80      	pop	{r7, pc}

080070ec <AT_Send>:

bool AT_Send(AT_Commands state){
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	0002      	movs	r2, r0
 80070f4:	1dfb      	adds	r3, r7, #7
 80070f6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007100:	1dfb      	adds	r3, r7, #7
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b16      	cmp	r3, #22
 8007106:	d900      	bls.n	800710a <AT_Send+0x1e>
 8007108:	e161      	b.n	80073ce <AT_Send+0x2e2>
 800710a:	009a      	lsls	r2, r3, #2
 800710c:	4bb3      	ldr	r3, [pc, #716]	@ (80073dc <AT_Send+0x2f0>)
 800710e:	18d3      	adds	r3, r2, r3
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8007114:	4bb2      	ldr	r3, [pc, #712]	@ (80073e0 <AT_Send+0x2f4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	0018      	movs	r0, r3
 800711a:	f00c fdef 	bl	8013cfc <TimestampIsReached>
 800711e:	1e03      	subs	r3, r0, #0
 8007120:	d100      	bne.n	8007124 <AT_Send+0x38>
 8007122:	e153      	b.n	80073cc <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 8007124:	4aaf      	ldr	r2, [pc, #700]	@ (80073e4 <AT_Send+0x2f8>)
 8007126:	4bb0      	ldr	r3, [pc, #704]	@ (80073e8 <AT_Send+0x2fc>)
 8007128:	0019      	movs	r1, r3
 800712a:	2003      	movs	r0, #3
 800712c:	f00c fe3c 	bl	8013da8 <CreateLine>
    ATCommandSend = PollAwake();
 8007130:	230f      	movs	r3, #15
 8007132:	18fc      	adds	r4, r7, r3
 8007134:	f7ff fb60 	bl	80067f8 <PollAwake>
 8007138:	0003      	movs	r3, r0
 800713a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800713c:	f00d fbc0 	bl	80148c0 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	3332      	adds	r3, #50	@ 0x32
 8007144:	001a      	movs	r2, r3
 8007146:	4ba6      	ldr	r3, [pc, #664]	@ (80073e0 <AT_Send+0x2f4>)
 8007148:	601a      	str	r2, [r3, #0]
  }
  break;
 800714a:	e13f      	b.n	80073cc <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 800714c:	230f      	movs	r3, #15
 800714e:	18fc      	adds	r4, r7, r3
 8007150:	f7ff fb6e 	bl	8006830 <RFPower>
 8007154:	0003      	movs	r3, r0
 8007156:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007158:	f00d fbb2 	bl	80148c0 <HAL_GetTick>
 800715c:	0003      	movs	r3, r0
 800715e:	330a      	adds	r3, #10
 8007160:	001a      	movs	r2, r3
 8007162:	4b9f      	ldr	r3, [pc, #636]	@ (80073e0 <AT_Send+0x2f4>)
 8007164:	601a      	str	r2, [r3, #0]
    break;
 8007166:	e132      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 8007168:	230f      	movs	r3, #15
 800716a:	18fc      	adds	r4, r7, r3
 800716c:	f7ff fb7c 	bl	8006868 <CheckRFPower>
 8007170:	0003      	movs	r3, r0
 8007172:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007174:	f00d fba4 	bl	80148c0 <HAL_GetTick>
 8007178:	0003      	movs	r3, r0
 800717a:	330a      	adds	r3, #10
 800717c:	001a      	movs	r2, r3
 800717e:	4b98      	ldr	r3, [pc, #608]	@ (80073e0 <AT_Send+0x2f4>)
 8007180:	601a      	str	r2, [r3, #0]
    break;
 8007182:	e124      	b.n	80073ce <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 8007184:	230f      	movs	r3, #15
 8007186:	18fc      	adds	r4, r7, r3
 8007188:	f7ff fb8a 	bl	80068a0 <ATRestore>
 800718c:	0003      	movs	r3, r0
 800718e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007190:	f00d fb96 	bl	80148c0 <HAL_GetTick>
 8007194:	0003      	movs	r3, r0
 8007196:	3332      	adds	r3, #50	@ 0x32
 8007198:	001a      	movs	r2, r3
 800719a:	4b91      	ldr	r3, [pc, #580]	@ (80073e0 <AT_Send+0x2f4>)
 800719c:	601a      	str	r2, [r3, #0]
    break;
 800719e:	e116      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 80071a0:	230f      	movs	r3, #15
 80071a2:	18fc      	adds	r4, r7, r3
 80071a4:	f7ff fb98 	bl	80068d8 <CWINIT>
 80071a8:	0003      	movs	r3, r0
 80071aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071ac:	f00d fb88 	bl	80148c0 <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	33f5      	adds	r3, #245	@ 0xf5
 80071b4:	33ff      	adds	r3, #255	@ 0xff
 80071b6:	001a      	movs	r2, r3
 80071b8:	4b89      	ldr	r3, [pc, #548]	@ (80073e0 <AT_Send+0x2f4>)
 80071ba:	601a      	str	r2, [r3, #0]
    break;
 80071bc:	e107      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 80071be:	230f      	movs	r3, #15
 80071c0:	18fc      	adds	r4, r7, r3
 80071c2:	f7ff fc93 	bl	8006aec <CWSTATE>
 80071c6:	0003      	movs	r3, r0
 80071c8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071ca:	f00d fb79 	bl	80148c0 <HAL_GetTick>
 80071ce:	0003      	movs	r3, r0
 80071d0:	33f5      	adds	r3, #245	@ 0xf5
 80071d2:	33ff      	adds	r3, #255	@ 0xff
 80071d4:	001a      	movs	r2, r3
 80071d6:	4b82      	ldr	r3, [pc, #520]	@ (80073e0 <AT_Send+0x2f4>)
 80071d8:	601a      	str	r2, [r3, #0]
    break;
 80071da:	e0f8      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 80071dc:	230f      	movs	r3, #15
 80071de:	18fc      	adds	r4, r7, r3
 80071e0:	f7ff fb96 	bl	8006910 <CWMODE1>
 80071e4:	0003      	movs	r3, r0
 80071e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071e8:	f00d fb6a 	bl	80148c0 <HAL_GetTick>
 80071ec:	0003      	movs	r3, r0
 80071ee:	330a      	adds	r3, #10
 80071f0:	001a      	movs	r2, r3
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <AT_Send+0x2f4>)
 80071f4:	601a      	str	r2, [r3, #0]
    break;
 80071f6:	e0ea      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 80071f8:	230f      	movs	r3, #15
 80071fa:	18fc      	adds	r4, r7, r3
 80071fc:	f7ff fba4 	bl	8006948 <CWMODE2>
 8007200:	0003      	movs	r3, r0
 8007202:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007204:	f00d fb5c 	bl	80148c0 <HAL_GetTick>
 8007208:	0003      	movs	r3, r0
 800720a:	330a      	adds	r3, #10
 800720c:	001a      	movs	r2, r3
 800720e:	4b74      	ldr	r3, [pc, #464]	@ (80073e0 <AT_Send+0x2f4>)
 8007210:	601a      	str	r2, [r3, #0]
    break;
 8007212:	e0dc      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 8007214:	230f      	movs	r3, #15
 8007216:	18fc      	adds	r4, r7, r3
 8007218:	f7ff fbb2 	bl	8006980 <CWAUTOCONN>
 800721c:	0003      	movs	r3, r0
 800721e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007220:	f00d fb4e 	bl	80148c0 <HAL_GetTick>
 8007224:	0003      	movs	r3, r0
 8007226:	330a      	adds	r3, #10
 8007228:	001a      	movs	r2, r3
 800722a:	4b6d      	ldr	r3, [pc, #436]	@ (80073e0 <AT_Send+0x2f4>)
 800722c:	601a      	str	r2, [r3, #0]
    break;
 800722e:	e0ce      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8007230:	4a6e      	ldr	r2, [pc, #440]	@ (80073ec <AT_Send+0x300>)
 8007232:	4b6d      	ldr	r3, [pc, #436]	@ (80073e8 <AT_Send+0x2fc>)
 8007234:	0019      	movs	r1, r3
 8007236:	2003      	movs	r0, #3
 8007238:	f00c fdb6 	bl	8013da8 <CreateLine>
    ATCommandSend = CWJAP();
 800723c:	230f      	movs	r3, #15
 800723e:	18fc      	adds	r4, r7, r3
 8007240:	f7ff fbba 	bl	80069b8 <CWJAP>
 8007244:	0003      	movs	r3, r0
 8007246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007248:	f00d fb3a 	bl	80148c0 <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	3332      	adds	r3, #50	@ 0x32
 8007250:	001a      	movs	r2, r3
 8007252:	4b63      	ldr	r3, [pc, #396]	@ (80073e0 <AT_Send+0x2f4>)
 8007254:	601a      	str	r2, [r3, #0]
    break;
 8007256:	e0ba      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 8007258:	230f      	movs	r3, #15
 800725a:	18fc      	adds	r4, r7, r3
 800725c:	f7ff fc2a 	bl	8006ab4 <CWMODE3>
 8007260:	0003      	movs	r3, r0
 8007262:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007264:	f00d fb2c 	bl	80148c0 <HAL_GetTick>
 8007268:	0003      	movs	r3, r0
 800726a:	330a      	adds	r3, #10
 800726c:	001a      	movs	r2, r3
 800726e:	4b5c      	ldr	r3, [pc, #368]	@ (80073e0 <AT_Send+0x2f4>)
 8007270:	601a      	str	r2, [r3, #0]
    break;
 8007272:	e0ac      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 8007274:	230f      	movs	r3, #15
 8007276:	18fc      	adds	r4, r7, r3
 8007278:	f7ff fc54 	bl	8006b24 <CWSAP>
 800727c:	0003      	movs	r3, r0
 800727e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007280:	f00d fb1e 	bl	80148c0 <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	330a      	adds	r3, #10
 8007288:	001a      	movs	r2, r3
 800728a:	4b55      	ldr	r3, [pc, #340]	@ (80073e0 <AT_Send+0x2f4>)
 800728c:	601a      	str	r2, [r3, #0]
    break;
 800728e:	e09e      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 8007290:	230f      	movs	r3, #15
 8007292:	18fc      	adds	r4, r7, r3
 8007294:	f7ff fc62 	bl	8006b5c <CIPMUX>
 8007298:	0003      	movs	r3, r0
 800729a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800729c:	f00d fb10 	bl	80148c0 <HAL_GetTick>
 80072a0:	0003      	movs	r3, r0
 80072a2:	330a      	adds	r3, #10
 80072a4:	001a      	movs	r2, r3
 80072a6:	4b4e      	ldr	r3, [pc, #312]	@ (80073e0 <AT_Send+0x2f4>)
 80072a8:	601a      	str	r2, [r3, #0]
    break;
 80072aa:	e090      	b.n	80073ce <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 80072ac:	230f      	movs	r3, #15
 80072ae:	18fc      	adds	r4, r7, r3
 80072b0:	f7ff fc70 	bl	8006b94 <WEBSERVER>
 80072b4:	0003      	movs	r3, r0
 80072b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072b8:	f00d fb02 	bl	80148c0 <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	330a      	adds	r3, #10
 80072c0:	001a      	movs	r2, r3
 80072c2:	4b47      	ldr	r3, [pc, #284]	@ (80073e0 <AT_Send+0x2f4>)
 80072c4:	601a      	str	r2, [r3, #0]
    break;
 80072c6:	e082      	b.n	80073ce <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80072c8:	230f      	movs	r3, #15
 80072ca:	18fc      	adds	r4, r7, r3
 80072cc:	f7ff fc7e 	bl	8006bcc <HTTPCPOST>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80072d4:	f00d faf4 	bl	80148c0 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	33f5      	adds	r3, #245	@ 0xf5
 80072dc:	33ff      	adds	r3, #255	@ 0xff
 80072de:	001a      	movs	r2, r3
 80072e0:	4b3f      	ldr	r3, [pc, #252]	@ (80073e0 <AT_Send+0x2f4>)
 80072e2:	601a      	str	r2, [r3, #0]
    break;
 80072e4:	e073      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 80072e6:	230f      	movs	r3, #15
 80072e8:	18fc      	adds	r4, r7, r3
 80072ea:	f7ff fd31 	bl	8006d50 <SENDDATA>
 80072ee:	0003      	movs	r3, r0
 80072f0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80072f2:	f00d fae5 	bl	80148c0 <HAL_GetTick>
 80072f6:	0003      	movs	r3, r0
 80072f8:	33f5      	adds	r3, #245	@ 0xf5
 80072fa:	33ff      	adds	r3, #255	@ 0xff
 80072fc:	001a      	movs	r2, r3
 80072fe:	4b38      	ldr	r3, [pc, #224]	@ (80073e0 <AT_Send+0x2f4>)
 8007300:	601a      	str	r2, [r3, #0]
    break;
 8007302:	e064      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007304:	4a3a      	ldr	r2, [pc, #232]	@ (80073f0 <AT_Send+0x304>)
 8007306:	4b38      	ldr	r3, [pc, #224]	@ (80073e8 <AT_Send+0x2fc>)
 8007308:	0019      	movs	r1, r3
 800730a:	2003      	movs	r0, #3
 800730c:	f00c fd4c 	bl	8013da8 <CreateLine>
    ATCommandSend = SLEEP();
 8007310:	230f      	movs	r3, #15
 8007312:	18fc      	adds	r4, r7, r3
 8007314:	f7ff fd34 	bl	8006d80 <SLEEP>
 8007318:	0003      	movs	r3, r0
 800731a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800731c:	f00d fad0 	bl	80148c0 <HAL_GetTick>
 8007320:	0003      	movs	r3, r0
 8007322:	330a      	adds	r3, #10
 8007324:	001a      	movs	r2, r3
 8007326:	4b2e      	ldr	r3, [pc, #184]	@ (80073e0 <AT_Send+0x2f4>)
 8007328:	601a      	str	r2, [r3, #0]
    break;
 800732a:	e050      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 800732c:	230f      	movs	r3, #15
 800732e:	18fc      	adds	r4, r7, r3
 8007330:	f7ff fd42 	bl	8006db8 <CIPSNTPCFG>
 8007334:	0003      	movs	r3, r0
 8007336:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007338:	f00d fac2 	bl	80148c0 <HAL_GetTick>
 800733c:	0003      	movs	r3, r0
 800733e:	330a      	adds	r3, #10
 8007340:	001a      	movs	r2, r3
 8007342:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <AT_Send+0x2f4>)
 8007344:	601a      	str	r2, [r3, #0]
    break;
 8007346:	e042      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 8007348:	230f      	movs	r3, #15
 800734a:	18fc      	adds	r4, r7, r3
 800734c:	f7ff fd54 	bl	8006df8 <CIPSNTPTIME>
 8007350:	0003      	movs	r3, r0
 8007352:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007354:	f00d fab4 	bl	80148c0 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	33f5      	adds	r3, #245	@ 0xf5
 800735c:	33ff      	adds	r3, #255	@ 0xff
 800735e:	001a      	movs	r2, r3
 8007360:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <AT_Send+0x2f4>)
 8007362:	601a      	str	r2, [r3, #0]
    break;
 8007364:	e033      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 8007366:	230f      	movs	r3, #15
 8007368:	18fc      	adds	r4, r7, r3
 800736a:	f7ff fd61 	bl	8006e30 <CIPSNTPINTV>
 800736e:	0003      	movs	r3, r0
 8007370:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007372:	f00d faa5 	bl	80148c0 <HAL_GetTick>
 8007376:	0003      	movs	r3, r0
 8007378:	330a      	adds	r3, #10
 800737a:	001a      	movs	r2, r3
 800737c:	4b18      	ldr	r3, [pc, #96]	@ (80073e0 <AT_Send+0x2f4>)
 800737e:	601a      	str	r2, [r3, #0]
    break;
 8007380:	e025      	b.n	80073ce <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 8007382:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <AT_Send+0x308>)
 8007384:	4b18      	ldr	r3, [pc, #96]	@ (80073e8 <AT_Send+0x2fc>)
 8007386:	0019      	movs	r1, r3
 8007388:	2003      	movs	r0, #3
 800738a:	f00c fd0d 	bl	8013da8 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 800738e:	230f      	movs	r3, #15
 8007390:	18fc      	adds	r4, r7, r3
 8007392:	f7ff fc99 	bl	8006cc8 <HTTPCPOST_MAILAPI>
 8007396:	0003      	movs	r3, r0
 8007398:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800739a:	f00d fa91 	bl	80148c0 <HAL_GetTick>
 800739e:	0003      	movs	r3, r0
 80073a0:	3332      	adds	r3, #50	@ 0x32
 80073a2:	001a      	movs	r2, r3
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <AT_Send+0x2f4>)
 80073a6:	601a      	str	r2, [r3, #0]
    break;
 80073a8:	e011      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 80073aa:	230f      	movs	r3, #15
 80073ac:	18fc      	adds	r4, r7, r3
 80073ae:	f7ff fc73 	bl	8006c98 <SENDMAIL>
 80073b2:	0003      	movs	r3, r0
 80073b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80073b6:	f00d fa83 	bl	80148c0 <HAL_GetTick>
 80073ba:	0003      	movs	r3, r0
 80073bc:	33f5      	adds	r3, #245	@ 0xf5
 80073be:	33ff      	adds	r3, #255	@ 0xff
 80073c0:	001a      	movs	r2, r3
 80073c2:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <AT_Send+0x2f4>)
 80073c4:	601a      	str	r2, [r3, #0]
    break;
 80073c6:	e002      	b.n	80073ce <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 80073c8:	46c0      	nop			@ (mov r8, r8)
 80073ca:	e000      	b.n	80073ce <AT_Send+0x2e2>
  break;
 80073cc:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80073ce:	230f      	movs	r3, #15
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	781b      	ldrb	r3, [r3, #0]
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b005      	add	sp, #20
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	0802df70 	.word	0x0802df70
 80073e0:	20000694 	.word	0x20000694
 80073e4:	0802b260 	.word	0x0802b260
 80073e8:	0802ab24 	.word	0x0802ab24
 80073ec:	0802b26c 	.word	0x0802b26c
 80073f0:	0802b280 	.word	0x0802b280
 80073f4:	0802b2a4 	.word	0x0802b2a4

080073f8 <is_OM_configured>:

bool is_OM_configured(void) {
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b08b      	sub	sp, #44	@ 0x2c
 80073fc:	af00      	add	r7, sp, #0
//bert
  uint8_t boxConfig[IdSize];
  char Buffer[1+(2*IdSize)];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80073fe:	241c      	movs	r4, #28
 8007400:	193b      	adds	r3, r7, r4
 8007402:	4814      	ldr	r0, [pc, #80]	@ (8007454 <is_OM_configured+0x5c>)
 8007404:	220c      	movs	r2, #12
 8007406:	0019      	movs	r1, r3
 8007408:	f004 fe64 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 800740c:	193a      	adds	r2, r7, r4
 800740e:	003b      	movs	r3, r7
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f7fd ff64 	bl	80052e0 <uint8ArrayToString>
  Buffer[12] = '\0';
 8007418:	003b      	movs	r3, r7
 800741a:	2200      	movs	r2, #0
 800741c:	731a      	strb	r2, [r3, #12]
  if (!isKeyValid(boxConfig, "box", "upload")) {
 800741e:	4a0e      	ldr	r2, [pc, #56]	@ (8007458 <is_OM_configured+0x60>)
 8007420:	490e      	ldr	r1, [pc, #56]	@ (800745c <is_OM_configured+0x64>)
 8007422:	193b      	adds	r3, r7, r4
 8007424:	0018      	movs	r0, r3
 8007426:	f7fd ff2b 	bl	8005280 <isKeyValid>
 800742a:	0003      	movs	r3, r0
 800742c:	001a      	movs	r2, r3
 800742e:	2301      	movs	r3, #1
 8007430:	4053      	eors	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <is_OM_configured+0x52>
    ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007438:	f00d fa42 	bl	80148c0 <HAL_GetTick>
 800743c:	0003      	movs	r3, r0
 800743e:	4a08      	ldr	r2, [pc, #32]	@ (8007460 <is_OM_configured+0x68>)
 8007440:	189a      	adds	r2, r3, r2
 8007442:	4b08      	ldr	r3, [pc, #32]	@ (8007464 <is_OM_configured+0x6c>)
 8007444:	601a      	str	r2, [r3, #0]
    return false;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <is_OM_configured+0x54>
  }
  return true;
 800744a:	2301      	movs	r3, #1
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b00b      	add	sp, #44	@ 0x2c
 8007452:	bd90      	pop	{r4, r7, pc}
 8007454:	08080000 	.word	0x08080000
 8007458:	0802b2b8 	.word	0x0802b2b8
 800745c:	0802b2c0 	.word	0x0802b2c0
 8007460:	0003a980 	.word	0x0003a980
 8007464:	20000694 	.word	0x20000694

08007468 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007474:	4b82      	ldr	r3, [pc, #520]	@ (8007680 <ESP_WakeTest+0x218>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d900      	bls.n	800747e <ESP_WakeTest+0x16>
 800747c:	e0e4      	b.n	8007648 <ESP_WakeTest+0x1e0>
 800747e:	009a      	lsls	r2, r3, #2
 8007480:	4b80      	ldr	r3, [pc, #512]	@ (8007684 <ESP_WakeTest+0x21c>)
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007488:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <ESP_WakeTest+0x220>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4053      	eors	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d041      	beq.n	800751a <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 8007496:	4b7c      	ldr	r3, [pc, #496]	@ (8007688 <ESP_WakeTest+0x220>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	487a      	ldr	r0, [pc, #488]	@ (800768c <ESP_WakeTest+0x224>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	0019      	movs	r1, r3
 80074a6:	f00e fc72 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80074aa:	2032      	movs	r0, #50	@ 0x32
 80074ac:	f00d fa12 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4875      	ldr	r0, [pc, #468]	@ (800768c <ESP_WakeTest+0x224>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	0019      	movs	r1, r3
 80074ba:	f00e fc68 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074be:	200a      	movs	r0, #10
 80074c0:	f00d fa08 	bl	80148d4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074c4:	4b72      	ldr	r3, [pc, #456]	@ (8007690 <ESP_WakeTest+0x228>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	2101      	movs	r1, #1
 80074ca:	0018      	movs	r0, r3
 80074cc:	f00e fc5f 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074d0:	200a      	movs	r0, #10
 80074d2:	f00d f9ff 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80074d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <ESP_WakeTest+0x228>)
 80074d8:	2201      	movs	r2, #1
 80074da:	2102      	movs	r1, #2
 80074dc:	0018      	movs	r0, r3
 80074de:	f00e fc56 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 80074e2:	2032      	movs	r0, #50	@ 0x32
 80074e4:	f00d f9f6 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e8:	4b69      	ldr	r3, [pc, #420]	@ (8007690 <ESP_WakeTest+0x228>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	2101      	movs	r1, #1
 80074ee:	0018      	movs	r0, r3
 80074f0:	f00e fc4d 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80074f4:	2064      	movs	r0, #100	@ 0x64
 80074f6:	f00d f9ed 	bl	80148d4 <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 80074fa:	f002 fabb 	bl	8009a74 <ReadBatteryVoltage>
 80074fe:	1c02      	adds	r2, r0, #0
 8007500:	4b64      	ldr	r3, [pc, #400]	@ (8007694 <ESP_WakeTest+0x22c>)
 8007502:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007504:	f00d f9dc 	bl	80148c0 <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	22e1      	movs	r2, #225	@ 0xe1
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	189a      	adds	r2, r3, r2
 8007510:	4b61      	ldr	r3, [pc, #388]	@ (8007698 <ESP_WakeTest+0x230>)
 8007512:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007514:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <ESP_WakeTest+0x220>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	4b5f      	ldr	r3, [pc, #380]	@ (800769c <ESP_WakeTest+0x234>)
 8007520:	0011      	movs	r1, r2
 8007522:	0018      	movs	r0, r3
 8007524:	f7fd fcfe 	bl	8004f24 <ESP_Receive>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d100      	bne.n	800752e <ESP_WakeTest+0xc6>
 800752c:	e09f      	b.n	800766e <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 800752e:	4b54      	ldr	r3, [pc, #336]	@ (8007680 <ESP_WakeTest+0x218>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007534:	e09b      	b.n	800766e <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007536:	4b58      	ldr	r3, [pc, #352]	@ (8007698 <ESP_WakeTest+0x230>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0018      	movs	r0, r3
 800753c:	f00c fbde 	bl	8013cfc <TimestampIsReached>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d100      	bne.n	8007546 <ESP_WakeTest+0xde>
 8007544:	e095      	b.n	8007672 <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 8007546:	4b56      	ldr	r3, [pc, #344]	@ (80076a0 <ESP_WakeTest+0x238>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	1dfc      	adds	r4, r7, #7
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff fdcd 	bl	80070ec <AT_Send>
 8007552:	0003      	movs	r3, r0
 8007554:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d100      	bne.n	8007560 <ESP_WakeTest+0xf8>
 800755e:	e088      	b.n	8007672 <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <ESP_WakeTest+0x218>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007566:	e084      	b.n	8007672 <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007568:	4b4b      	ldr	r3, [pc, #300]	@ (8007698 <ESP_WakeTest+0x230>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0018      	movs	r0, r3
 800756e:	f00c fbc5 	bl	8013cfc <TimestampIsReached>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d100      	bne.n	8007578 <ESP_WakeTest+0x110>
 8007576:	e07e      	b.n	8007676 <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007578:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <ESP_WakeTest+0x23c>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	0018      	movs	r0, r3
 800757e:	f7ff fc73 	bl	8006e68 <DMA_ProcessBuffer>
 8007582:	0003      	movs	r3, r0
 8007584:	001a      	movs	r2, r3
 8007586:	4b48      	ldr	r3, [pc, #288]	@ (80076a8 <ESP_WakeTest+0x240>)
 8007588:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <ESP_WakeTest+0x240>)
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <ESP_WakeTest+0x23c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	1dbc      	adds	r4, r7, #6
 8007594:	0019      	movs	r1, r3
 8007596:	0010      	movs	r0, r2
 8007598:	f7ff fd66 	bl	8007068 <ATCompare>
 800759c:	0003      	movs	r3, r0
 800759e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80075a0:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 80075a8:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <ESP_WakeTest+0x218>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80075ae:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	d104      	bne.n	80075c0 <ESP_WakeTest+0x158>
          StartProg();
 80075b6:	f7fe fefd 	bl	80063b4 <StartProg>
          TestState = ESP_TEST_BOOT;
 80075ba:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <ESP_WakeTest+0x218>)
 80075bc:	2205      	movs	r2, #5
 80075be:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075c0:	4b39      	ldr	r3, [pc, #228]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d109      	bne.n	80075dc <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075c8:	f00d f97a 	bl	80148c0 <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	3332      	adds	r3, #50	@ 0x32
 80075d0:	001a      	movs	r2, r3
 80075d2:	4b31      	ldr	r3, [pc, #196]	@ (8007698 <ESP_WakeTest+0x230>)
 80075d4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <ESP_WakeTest+0x218>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d048      	beq.n	8007676 <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 80075e4:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <ESP_WakeTest+0x218>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075ea:	e044      	b.n	8007676 <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <ESP_WakeTest+0x244>)
 80075ee:	22fa      	movs	r2, #250	@ 0xfa
 80075f0:	0112      	lsls	r2, r2, #4
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80075f4:	f00b f86e 	bl	80126d4 <Calculate_LED_ON>
 80075f8:	0003      	movs	r3, r0
 80075fa:	001a      	movs	r2, r3
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <ESP_WakeTest+0x244>)
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007600:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <ESP_WakeTest+0x244>)
 8007602:	22fa      	movs	r2, #250	@ 0xfa
 8007604:	0112      	lsls	r2, r2, #4
 8007606:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <ESP_WakeTest+0x218>)
 800760a:	2204      	movs	r2, #4
 800760c:	701a      	strb	r2, [r3, #0]

      break;
 800760e:	e033      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <ESP_WakeTest+0x248>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <ESP_WakeTest+0x228>)
 8007618:	2200      	movs	r2, #0
 800761a:	2101      	movs	r1, #1
 800761c:	0018      	movs	r0, r3
 800761e:	f00e fbb6 	bl	8015d8e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007622:	2380      	movs	r3, #128	@ 0x80
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4819      	ldr	r0, [pc, #100]	@ (800768c <ESP_WakeTest+0x224>)
 8007628:	2200      	movs	r2, #0
 800762a:	0019      	movs	r1, r3
 800762c:	f00e fbaf 	bl	8015d8e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <ESP_WakeTest+0x228>)
 8007632:	2200      	movs	r2, #0
 8007634:	2102      	movs	r1, #2
 8007636:	0018      	movs	r0, r3
 8007638:	f00e fba9 	bl	8015d8e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800763c:	f005 ff8a 	bl	800d554 <SetESPMeasurementDone>
      EspTurnedOn = false;
 8007640:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <ESP_WakeTest+0x220>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e017      	b.n	8007678 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <ESP_WakeTest+0x218>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e013      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <ESP_WakeTest+0x244>)
 8007652:	22fa      	movs	r2, #250	@ 0xfa
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007658:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <ESP_WakeTest+0x244>)
 800765a:	22fa      	movs	r2, #250	@ 0xfa
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007660:	f00b f838 	bl	80126d4 <Calculate_LED_ON>
 8007664:	0003      	movs	r3, r0
 8007666:	001a      	movs	r2, r3
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <ESP_WakeTest+0x244>)
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800766c:	e004      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	e002      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	e000      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007676:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b003      	add	sp, #12
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	20000703 	.word	0x20000703
 8007684:	0802dfcc 	.word	0x0802dfcc
 8007688:	200005ac 	.word	0x200005ac
 800768c:	50000800 	.word	0x50000800
 8007690:	50001c00 	.word	0x50001c00
 8007694:	20002158 	.word	0x20002158
 8007698:	20000694 	.word	0x20000694
 800769c:	200004ac 	.word	0x200004ac
 80076a0:	20000701 	.word	0x20000701
 80076a4:	20000700 	.word	0x20000700
 80076a8:	20000033 	.word	0x20000033
 80076ac:	40000400 	.word	0x40000400
 80076b0:	20000001 	.word	0x20000001

080076b4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076c0:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d028      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076cc:	f00c fbf6 	bl	8013ebc <GetVerboseLevel>
 80076d0:	0003      	movs	r3, r0
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d123      	bne.n	800771e <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076d6:	4b65      	ldr	r3, [pc, #404]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	4b65      	ldr	r3, [pc, #404]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076dc:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076de:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d107      	bne.n	80076f6 <ESP_Upkeep+0x42>
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d017      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b14      	cmp	r3, #20
 80076f4:	d013      	beq.n	800771e <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80076f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	001d      	movs	r5, r3
 80076fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	0018      	movs	r0, r3
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <ESP_Upkeep+0x1c4>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	001c      	movs	r4, r3
 8007708:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <ESP_Upkeep+0x1c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4a5c      	ldr	r2, [pc, #368]	@ (8007880 <ESP_Upkeep+0x1cc>)
 800770e:	495d      	ldr	r1, [pc, #372]	@ (8007884 <ESP_Upkeep+0x1d0>)
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	9401      	str	r4, [sp, #4]
 8007714:	9000      	str	r0, [sp, #0]
 8007716:	002b      	movs	r3, r5
 8007718:	2003      	movs	r0, #3
 800771a:	f00c fb45 	bl	8013da8 <CreateLine>
    }
  }
  switch (EspState) {
 800771e:	4b53      	ldr	r3, [pc, #332]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d901      	bls.n	800772a <ESP_Upkeep+0x76>
 8007726:	f000 fcfc 	bl	8008122 <ESP_Upkeep+0xa6e>
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	4b56      	ldr	r3, [pc, #344]	@ (8007888 <ESP_Upkeep+0x1d4>)
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007734:	4b4d      	ldr	r3, [pc, #308]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	f000 fd0d 	bl	8008158 <ESP_Upkeep+0xaa4>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800773e:	4b53      	ldr	r3, [pc, #332]	@ (800788c <ESP_Upkeep+0x1d8>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007744:	f006 f966 	bl	800da14 <AllDevicesReady>
 8007748:	0003      	movs	r3, r0
 800774a:	001a      	movs	r2, r3
 800774c:	2301      	movs	r3, #1
 800774e:	4053      	eors	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <ESP_Upkeep+0xa6>
 8007756:	f000 fcf0 	bl	800813a <ESP_Upkeep+0xa86>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 800775a:	f00b f915 	bl	8012988 <SetESPIndicator>
      if(!EspTurnedOn){
 800775e:	4b4c      	ldr	r3, [pc, #304]	@ (8007890 <ESP_Upkeep+0x1dc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	4053      	eors	r3, r2
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <ESP_Upkeep+0x142>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	4848      	ldr	r0, [pc, #288]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007772:	2200      	movs	r2, #0
 8007774:	0019      	movs	r1, r3
 8007776:	f00e fb0a 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800777a:	200a      	movs	r0, #10
 800777c:	f00d f8aa 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4843      	ldr	r0, [pc, #268]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007786:	2201      	movs	r2, #1
 8007788:	0019      	movs	r1, r3
 800778a:	f00e fb00 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800778e:	2032      	movs	r0, #50	@ 0x32
 8007790:	f00d f8a0 	bl	80148d4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007794:	4b40      	ldr	r3, [pc, #256]	@ (8007898 <ESP_Upkeep+0x1e4>)
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	0018      	movs	r0, r3
 800779c:	f00e faf7 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80077a0:	200a      	movs	r0, #10
 80077a2:	f00d f897 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80077a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	0018      	movs	r0, r3
 80077ae:	f00e faee 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077b2:	2032      	movs	r0, #50	@ 0x32
 80077b4:	f00d f88e 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80077b8:	4b37      	ldr	r3, [pc, #220]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	2101      	movs	r1, #1
 80077be:	0018      	movs	r0, r3
 80077c0:	f00e fae5 	bl	8015d8e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077c4:	2032      	movs	r0, #50	@ 0x32
 80077c6:	f00d f885 	bl	80148d4 <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077ca:	f00d f879 	bl	80148c0 <HAL_GetTick>
 80077ce:	0003      	movs	r3, r0
 80077d0:	22e1      	movs	r2, #225	@ 0xe1
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	189a      	adds	r2, r3, r2
 80077d6:	4b31      	ldr	r3, [pc, #196]	@ (800789c <ESP_Upkeep+0x1e8>)
 80077d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077da:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <ESP_Upkeep+0x1dc>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077e0:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <ESP_Upkeep+0x1ec>)
 80077e2:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <ESP_Upkeep+0x1d0>)
 80077e4:	0019      	movs	r1, r3
 80077e6:	2003      	movs	r0, #3
 80077e8:	f00c fade 	bl	8013da8 <CreateLine>
        SetBatteryReadTimer(ESP_START_UP_TIME/2);  // read battery voltage during boot of ESP32
 80077ec:	23e1      	movs	r3, #225	@ 0xe1
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	0018      	movs	r0, r3
 80077f2:	f005 f93f 	bl	800ca74 <SetBatteryReadTimer>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80077f6:	2380      	movs	r3, #128	@ 0x80
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	4b2a      	ldr	r3, [pc, #168]	@ (80078a4 <ESP_Upkeep+0x1f0>)
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f7fd fb90 	bl	8004f24 <ESP_Receive>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d101      	bne.n	800780c <ESP_Upkeep+0x158>
 8007808:	f000 fc99 	bl	800813e <ESP_Upkeep+0xa8a>
        EspState = ESP_STATE_WAIT_AWAKE;
 800780c:	4b17      	ldr	r3, [pc, #92]	@ (800786c <ESP_Upkeep+0x1b8>)
 800780e:	220f      	movs	r2, #15
 8007810:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007812:	f00d f855 	bl	80148c0 <HAL_GetTick>
 8007816:	0003      	movs	r3, r0
 8007818:	22fa      	movs	r2, #250	@ 0xfa
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	189a      	adds	r2, r3, r2
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007820:	601a      	str	r2, [r3, #0]
      }
      break;
 8007822:	f000 fc8c 	bl	800813e <ESP_Upkeep+0xa8a>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007826:	2001      	movs	r0, #1
 8007828:	f7ff fb1e 	bl	8006e68 <DMA_ProcessBuffer>
 800782c:	0003      	movs	r3, r0
 800782e:	001a      	movs	r2, r3
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007832:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	1dbc      	adds	r4, r7, #6
 800783a:	2101      	movs	r1, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc13 	bl	8007068 <ATCompare>
 8007842:	0003      	movs	r3, r0
 8007844:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0018      	movs	r0, r3
 8007854:	f00c fa52 	bl	8013cfc <TimestampIsReached>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d101      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800785c:	f000 fc71 	bl	8008142 <ESP_Upkeep+0xa8e>
          EspState = ESP_STATE_MODE_SELECT;
 8007860:	4b02      	ldr	r3, [pc, #8]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007862:	220b      	movs	r2, #11
 8007864:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007866:	f000 fc6c 	bl	8008142 <ESP_Upkeep+0xa8e>
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	20000030 	.word	0x20000030
 8007870:	20000003 	.word	0x20000003
 8007874:	20000701 	.word	0x20000701
 8007878:	20000702 	.word	0x20000702
 800787c:	20000700 	.word	0x20000700
 8007880:	0802b2c4 	.word	0x0802b2c4
 8007884:	0802ab24 	.word	0x0802ab24
 8007888:	0802dfe4 	.word	0x0802dfe4
 800788c:	20001114 	.word	0x20001114
 8007890:	200005ac 	.word	0x200005ac
 8007894:	50000800 	.word	0x50000800
 8007898:	50001c00 	.word	0x50001c00
 800789c:	20000694 	.word	0x20000694
 80078a0:	0802b2f0 	.word	0x0802b2f0
 80078a4:	200004ac 	.word	0x200004ac
 80078a8:	20000938 	.word	0x20000938
 80078ac:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80078b0:	4bd6      	ldr	r3, [pc, #856]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078b2:	2209      	movs	r2, #9
 80078b4:	2116      	movs	r1, #22
 80078b6:	0018      	movs	r0, r3
 80078b8:	f01e fee6 	bl	8026688 <memset>
      if(!InitIsDone || WifiReset){
 80078bc:	4bd4      	ldr	r3, [pc, #848]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4053      	eors	r3, r2
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <ESP_Upkeep+0x21e>
 80078ca:	4bd2      	ldr	r3, [pc, #840]	@ (8007c14 <ESP_Upkeep+0x560>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d016      	beq.n	8007900 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 80078d2:	4bce      	ldr	r3, [pc, #824]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078d4:	4ad0      	ldr	r2, [pc, #832]	@ (8007c18 <ESP_Upkeep+0x564>)
 80078d6:	ca03      	ldmia	r2!, {r0, r1}
 80078d8:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 80078da:	4bd0      	ldr	r3, [pc, #832]	@ (8007c1c <ESP_Upkeep+0x568>)
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078e0:	4bcf      	ldr	r3, [pc, #828]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078e6:	4bcf      	ldr	r3, [pc, #828]	@ (8007c24 <ESP_Upkeep+0x570>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078ec:	4bcc      	ldr	r3, [pc, #816]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	001a      	movs	r2, r3
 80078f2:	4bc6      	ldr	r3, [pc, #792]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078f4:	5c9a      	ldrb	r2, [r3, r2]
 80078f6:	4bcc      	ldr	r3, [pc, #816]	@ (8007c28 <ESP_Upkeep+0x574>)
 80078f8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078fa:	4bcc      	ldr	r3, [pc, #816]	@ (8007c2c <ESP_Upkeep+0x578>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007900:	4bc3      	ldr	r3, [pc, #780]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01f      	beq.n	8007948 <ESP_Upkeep+0x294>
 8007908:	4bc9      	ldr	r3, [pc, #804]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	4053      	eors	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <ESP_Upkeep+0x294>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007916:	4bbd      	ldr	r3, [pc, #756]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007918:	4ac6      	ldr	r2, [pc, #792]	@ (8007c34 <ESP_Upkeep+0x580>)
 800791a:	6811      	ldr	r1, [r2, #0]
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	8892      	ldrh	r2, [r2, #4]
 8007920:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007922:	4bbe      	ldr	r3, [pc, #760]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007924:	2204      	movs	r2, #4
 8007926:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007928:	4bbd      	ldr	r3, [pc, #756]	@ (8007c20 <ESP_Upkeep+0x56c>)
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800792e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007934:	4bba      	ldr	r3, [pc, #744]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	001a      	movs	r2, r3
 800793a:	4bb4      	ldr	r3, [pc, #720]	@ (8007c0c <ESP_Upkeep+0x558>)
 800793c:	5c9a      	ldrb	r2, [r3, r2]
 800793e:	4bba      	ldr	r3, [pc, #744]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007940:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007942:	4bba      	ldr	r3, [pc, #744]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 8007948:	4bb1      	ldr	r3, [pc, #708]	@ (8007c10 <ESP_Upkeep+0x55c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d021      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007950:	4bb7      	ldr	r3, [pc, #732]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007958:	4bb7      	ldr	r3, [pc, #732]	@ (8007c38 <ESP_Upkeep+0x584>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	4053      	eors	r3, r2
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_TEST, 2);
 8007966:	4bb5      	ldr	r3, [pc, #724]	@ (8007c3c <ESP_Upkeep+0x588>)
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	4ba8      	ldr	r3, [pc, #672]	@ (8007c0c <ESP_Upkeep+0x558>)
 800796c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800796e:	4bab      	ldr	r3, [pc, #684]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007970:	2204      	movs	r2, #4
 8007972:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007974:	4baa      	ldr	r3, [pc, #680]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800797a:	4baa      	ldr	r3, [pc, #680]	@ (8007c24 <ESP_Upkeep+0x570>)
 800797c:	2204      	movs	r2, #4
 800797e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007980:	4ba7      	ldr	r3, [pc, #668]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	001a      	movs	r2, r3
 8007986:	4ba1      	ldr	r3, [pc, #644]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007988:	5c9a      	ldrb	r2, [r3, r2]
 800798a:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <ESP_Upkeep+0x574>)
 800798c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800798e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007994:	4b9e      	ldr	r3, [pc, #632]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d024      	beq.n	80079e6 <ESP_Upkeep+0x332>
 800799c:	4ba4      	ldr	r3, [pc, #656]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01c      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079ac:	4ba4      	ldr	r3, [pc, #656]	@ (8007c40 <ESP_Upkeep+0x58c>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d118      	bne.n	80079e6 <ESP_Upkeep+0x332>
        memcpy(ATCommandArray, AT_MAIL, 3);
 80079b4:	4b95      	ldr	r3, [pc, #596]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079b6:	4aa3      	ldr	r2, [pc, #652]	@ (8007c44 <ESP_Upkeep+0x590>)
 80079b8:	8811      	ldrh	r1, [r2, #0]
 80079ba:	8019      	strh	r1, [r3, #0]
 80079bc:	7892      	ldrb	r2, [r2, #2]
 80079be:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079c0:	4b96      	ldr	r3, [pc, #600]	@ (8007c1c <ESP_Upkeep+0x568>)
 80079c2:	2204      	movs	r2, #4
 80079c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079c6:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079cc:	4b95      	ldr	r3, [pc, #596]	@ (8007c24 <ESP_Upkeep+0x570>)
 80079ce:	2206      	movs	r2, #6
 80079d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079d2:	4b93      	ldr	r3, [pc, #588]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	001a      	movs	r2, r3
 80079d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079da:	5c9a      	ldrb	r2, [r3, r2]
 80079dc:	4b92      	ldr	r3, [pc, #584]	@ (8007c28 <ESP_Upkeep+0x574>)
 80079de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079e0:	4b92      	ldr	r3, [pc, #584]	@ (8007c2c <ESP_Upkeep+0x578>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d030      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079ee:	4b90      	ldr	r3, [pc, #576]	@ (8007c30 <ESP_Upkeep+0x57c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02c      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079f6:	4b90      	ldr	r3, [pc, #576]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d028      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079fe:	4b92      	ldr	r3, [pc, #584]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	4053      	eors	r3, r2
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 8007a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d01d      	beq.n	8007a50 <ESP_Upkeep+0x39c>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007a14:	4b7d      	ldr	r3, [pc, #500]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a16:	4a8d      	ldr	r2, [pc, #564]	@ (8007c4c <ESP_Upkeep+0x598>)
 8007a18:	8811      	ldrh	r1, [r2, #0]
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	7892      	ldrb	r2, [r2, #2]
 8007a1e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a22:	2204      	movs	r2, #4
 8007a24:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a26:	4b7e      	ldr	r3, [pc, #504]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a32:	f00c ff45 	bl	80148c0 <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b85      	ldr	r3, [pc, #532]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a3a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a3c:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	001a      	movs	r2, r3
 8007a42:	4b72      	ldr	r3, [pc, #456]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a44:	5c9a      	ldrb	r2, [r3, r2]
 8007a46:	4b78      	ldr	r3, [pc, #480]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007a48:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4a:	4b78      	ldr	r3, [pc, #480]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a50:	4b6f      	ldr	r3, [pc, #444]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a58:	4b75      	ldr	r3, [pc, #468]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d027      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a60:	4b75      	ldr	r3, [pc, #468]	@ (8007c38 <ESP_Upkeep+0x584>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d023      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a68:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a70:	4b73      	ldr	r3, [pc, #460]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d01b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a78:	4b76      	ldr	r3, [pc, #472]	@ (8007c54 <ESP_Upkeep+0x5a0>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b63      	ldr	r3, [pc, #396]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a7e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a80:	4b66      	ldr	r3, [pc, #408]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a82:	2204      	movs	r2, #4
 8007a84:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007a8c:	4b65      	ldr	r3, [pc, #404]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a8e:	2205      	movs	r2, #5
 8007a90:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a92:	f00c ff15 	bl	80148c0 <HAL_GetTick>
 8007a96:	0002      	movs	r2, r0
 8007a98:	4b6d      	ldr	r3, [pc, #436]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a9a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a9c:	4b60      	ldr	r3, [pc, #384]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007aa4:	5c9a      	ldrb	r2, [r3, r2]
 8007aa6:	4b60      	ldr	r3, [pc, #384]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007aa8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007aaa:	4b60      	ldr	r3, [pc, #384]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007ab0:	4b69      	ldr	r3, [pc, #420]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d100      	bne.n	8007aba <ESP_Upkeep+0x406>
 8007ab8:	e345      	b.n	8008146 <ESP_Upkeep+0xa92>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007aba:	4b54      	ldr	r3, [pc, #336]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007abc:	4a67      	ldr	r2, [pc, #412]	@ (8007c5c <ESP_Upkeep+0x5a8>)
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	7912      	ldrb	r2, [r2, #4]
 8007ac4:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007ac6:	4a66      	ldr	r2, [pc, #408]	@ (8007c60 <ESP_Upkeep+0x5ac>)
 8007ac8:	4b66      	ldr	r3, [pc, #408]	@ (8007c64 <ESP_Upkeep+0x5b0>)
 8007aca:	0019      	movs	r1, r3
 8007acc:	2003      	movs	r0, #3
 8007ace:	f00c f96b 	bl	8013da8 <CreateLine>
        DisableConnectedDevices();
 8007ad2:	f006 f949 	bl	800dd68 <DisableConnectedDevices>
        usblog = false;
 8007ad6:	4b64      	ldr	r3, [pc, #400]	@ (8007c68 <ESP_Upkeep+0x5b4>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007adc:	4b4f      	ldr	r3, [pc, #316]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007ade:	2204      	movs	r2, #4
 8007ae0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007aea:	2203      	movs	r2, #3
 8007aec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007aee:	4b4c      	ldr	r3, [pc, #304]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b45      	ldr	r3, [pc, #276]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007af6:	5c9a      	ldrb	r2, [r3, r2]
 8007af8:	4b4b      	ldr	r3, [pc, #300]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007afa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007afc:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b02:	e320      	b.n	8008146 <ESP_Upkeep+0xa92>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b04:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	1dfc      	adds	r4, r7, #7
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff faee 	bl	80070ec <AT_Send>
 8007b10:	0003      	movs	r3, r0
 8007b12:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d100      	bne.n	8007b1e <ESP_Upkeep+0x46a>
 8007b1c:	e315      	b.n	800814a <ESP_Upkeep+0xa96>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b20:	2203      	movs	r2, #3
 8007b22:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007b24:	e311      	b.n	800814a <ESP_Upkeep+0xa96>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007b26:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <ESP_Upkeep+0x48a>
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d003      	beq.n	8007b3e <ESP_Upkeep+0x48a>
        EspState = ESP_STATE_MODE_SELECT;
 8007b36:	4b39      	ldr	r3, [pc, #228]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b38:	220b      	movs	r2, #11
 8007b3a:	701a      	strb	r2, [r3, #0]
        break;
 8007b3c:	e30c      	b.n	8008158 <ESP_Upkeep+0xaa4>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f00c f8da 	bl	8013cfc <TimestampIsReached>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d100      	bne.n	8007b4e <ESP_Upkeep+0x49a>
 8007b4c:	e2ff      	b.n	800814e <ESP_Upkeep+0xa9a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff f988 	bl	8006e68 <DMA_ProcessBuffer>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b44      	ldr	r3, [pc, #272]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b5e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b60:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	1d7c      	adds	r4, r7, #5
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	0010      	movs	r0, r2
 8007b6e:	f7ff fa7b 	bl	8007068 <ATCompare>
 8007b72:	0003      	movs	r3, r0
 8007b74:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b76:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d000      	beq.n	8007b80 <ESP_Upkeep+0x4cc>
 8007b7e:	e085      	b.n	8007c8c <ESP_Upkeep+0x5d8>
          if(ATCommand == AT_SENDDATA){
 8007b80:	4b29      	ldr	r3, [pc, #164]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d108      	bne.n	8007b9a <ESP_Upkeep+0x4e6>
            ATCommand = AT_HTTPCPOST;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b8a:	220e      	movs	r2, #14
 8007b8c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b94:	4b22      	ldr	r3, [pc, #136]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d108      	bne.n	8007bb4 <ESP_Upkeep+0x500>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007ba4:	2214      	movs	r2, #20
 8007ba6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba8:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007bae:	4b1c      	ldr	r3, [pc, #112]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007bba:	4b2e      	ldr	r3, [pc, #184]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc4:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d95e      	bls.n	8007c8c <ESP_Upkeep+0x5d8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007bce:	f00c fe77 	bl	80148c0 <HAL_GetTick>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <ESP_Upkeep+0x5c4>)
 8007bd6:	189a      	adds	r2, r3, r2
 8007bd8:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007bda:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <ESP_Upkeep+0x5c8>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007be2:	f7ff fa33 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007be6:	f00c fe6b 	bl	80148c0 <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bee:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bf0:	4b23      	ldr	r3, [pc, #140]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a22      	ldr	r2, [pc, #136]	@ (8007c84 <ESP_Upkeep+0x5d0>)
 8007bfc:	4922      	ldr	r1, [pc, #136]	@ (8007c88 <ESP_Upkeep+0x5d4>)
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f00c f8d2 	bl	8013da8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007c06:	220d      	movs	r2, #13
 8007c08:	701a      	strb	r2, [r3, #0]
            break;
 8007c0a:	e2a5      	b.n	8008158 <ESP_Upkeep+0xaa4>
 8007c0c:	20000684 	.word	0x20000684
 8007c10:	200005ad 	.word	0x200005ad
 8007c14:	200005ae 	.word	0x200005ae
 8007c18:	20000004 	.word	0x20000004
 8007c1c:	20000030 	.word	0x20000030
 8007c20:	2000068e 	.word	0x2000068e
 8007c24:	20000702 	.word	0x20000702
 8007c28:	20000701 	.word	0x20000701
 8007c2c:	20000700 	.word	0x20000700
 8007c30:	200005b0 	.word	0x200005b0
 8007c34:	20000014 	.word	0x20000014
 8007c38:	200005b1 	.word	0x200005b1
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	200010f9 	.word	0x200010f9
 8007c44:	20000028 	.word	0x20000028
 8007c48:	20000002 	.word	0x20000002
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	200005b4 	.word	0x200005b4
 8007c54:	20000024 	.word	0x20000024
 8007c58:	200005af 	.word	0x200005af
 8007c5c:	2000001c 	.word	0x2000001c
 8007c60:	0802b300 	.word	0x0802b300
 8007c64:	0802ab24 	.word	0x0802ab24
 8007c68:	200010f7 	.word	0x200010f7
 8007c6c:	20000694 	.word	0x20000694
 8007c70:	20000034 	.word	0x20000034
 8007c74:	2000068f 	.word	0x2000068f
 8007c78:	0003a980 	.word	0x0003a980
 8007c7c:	200005b3 	.word	0x200005b3
 8007c80:	200005b8 	.word	0x200005b8
 8007c84:	0802b330 	.word	0x0802b330
 8007c88:	0802aac0 	.word	0x0802aac0
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d106      	bne.n	8007ca2 <ESP_Upkeep+0x5ee>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c94:	f00c fe14 	bl	80148c0 <HAL_GetTick>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	4bb0      	ldr	r3, [pc, #704]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ca0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007ca2:	4bae      	ldr	r3, [pc, #696]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	d106      	bne.n	8007cb8 <ESP_Upkeep+0x604>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007caa:	f00c fe09 	bl	80148c0 <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	330a      	adds	r3, #10
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	4baa      	ldr	r3, [pc, #680]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cb6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007cb8:	4ba8      	ldr	r3, [pc, #672]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d14b      	bne.n	8007d58 <ESP_Upkeep+0x6a4>
          timeoutcntr++;
 8007cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007ccc:	4aa6      	ldr	r2, [pc, #664]	@ (8007f68 <ESP_Upkeep+0x8b4>)
 8007cce:	4ba7      	ldr	r3, [pc, #668]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f00c f868 	bl	8013da8 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cd8:	4ba2      	ldr	r3, [pc, #648]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d924      	bls.n	8007d2a <ESP_Upkeep+0x676>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007ce0:	f00c fdee 	bl	80148c0 <HAL_GetTick>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	4aa2      	ldr	r2, [pc, #648]	@ (8007f70 <ESP_Upkeep+0x8bc>)
 8007ce8:	189a      	adds	r2, r3, r2
 8007cea:	4b9d      	ldr	r3, [pc, #628]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cee:	4ba1      	ldr	r3, [pc, #644]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cf4:	f7ff f9aa 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007cf8:	f00c fde2 	bl	80148c0 <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d00:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a9c      	ldr	r2, [pc, #624]	@ (8007f80 <ESP_Upkeep+0x8cc>)
 8007d0e:	4997      	ldr	r1, [pc, #604]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007d10:	2001      	movs	r0, #1
 8007d12:	f00c f849 	bl	8013da8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d18:	220d      	movs	r2, #13
 8007d1a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d1e:	2216      	movs	r2, #22
 8007d20:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d22:	4b9a      	ldr	r3, [pc, #616]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
            break;
 8007d28:	e216      	b.n	8008158 <ESP_Upkeep+0xaa4>
          }
          if(ATCommand != AT_SENDDATA){
 8007d2a:	4b97      	ldr	r3, [pc, #604]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d003      	beq.n	8007d3a <ESP_Upkeep+0x686>
            EspState = ESP_STATE_SEND;
 8007d32:	4b94      	ldr	r3, [pc, #592]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d34:	2204      	movs	r2, #4
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e00e      	b.n	8007d58 <ESP_Upkeep+0x6a4>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d3a:	4b93      	ldr	r3, [pc, #588]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d3c:	220e      	movs	r2, #14
 8007d3e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d40:	4b93      	ldr	r3, [pc, #588]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b91      	ldr	r3, [pc, #580]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d4a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d4e:	2202      	movs	r2, #2
 8007d50:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d52:	4b8c      	ldr	r3, [pc, #560]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d54:	2204      	movs	r2, #4
 8007d56:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d58:	1d7b      	adds	r3, r7, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d100      	bne.n	8007d62 <ESP_Upkeep+0x6ae>
 8007d60:	e1f5      	b.n	800814e <ESP_Upkeep+0xa9a>
          EspState = ESP_STATE_NEXT_AT;
 8007d62:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d64:	2205      	movs	r2, #5
 8007d66:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d68:	e1f1      	b.n	800814e <ESP_Upkeep+0xa9a>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d6a:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4b87      	ldr	r3, [pc, #540]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d74:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d76:	4b86      	ldr	r3, [pc, #536]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <ESP_Upkeep+0x8e0>)
 8007d7e:	5c9a      	ldrb	r2, [r3, r2]
 8007d80:	4b81      	ldr	r3, [pc, #516]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d82:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d84:	4b80      	ldr	r3, [pc, #512]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d102      	bne.n	8007d92 <ESP_Upkeep+0x6de>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d92:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b0e      	cmp	r3, #14
 8007d98:	d102      	bne.n	8007da0 <ESP_Upkeep+0x6ec>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007da0:	4b79      	ldr	r3, [pc, #484]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	d006      	beq.n	8007db6 <ESP_Upkeep+0x702>
 8007da8:	4b77      	ldr	r3, [pc, #476]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d002      	beq.n	8007db6 <ESP_Upkeep+0x702>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007db0:	4b76      	ldr	r3, [pc, #472]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007db6:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b11      	cmp	r3, #17
 8007dbc:	d102      	bne.n	8007dc4 <ESP_Upkeep+0x710>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007dbe:	4b73      	ldr	r3, [pc, #460]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007dc4:	4b70      	ldr	r3, [pc, #448]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b15      	cmp	r3, #21
 8007dca:	d102      	bne.n	8007dd2 <ESP_Upkeep+0x71e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b16      	cmp	r3, #22
 8007dde:	d000      	beq.n	8007de2 <ESP_Upkeep+0x72e>
 8007de0:	e1b7      	b.n	8008152 <ESP_Upkeep+0xa9e>
        if(Mode == AT_MODE_SEND){
 8007de2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d124      	bne.n	8007e34 <ESP_Upkeep+0x780>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007dea:	f00c fd69 	bl	80148c0 <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	4a6a      	ldr	r2, [pc, #424]	@ (8007f9c <ESP_Upkeep+0x8e8>)
 8007df2:	189a      	adds	r2, r3, r2
 8007df4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007df6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007df8:	f7ff f928 	bl	800704c <clearDMABuffer>
          stop = HAL_GetTick();
 8007dfc:	f00c fd60 	bl	80148c0 <HAL_GetTick>
 8007e00:	0002      	movs	r2, r0
 8007e02:	4b5d      	ldr	r3, [pc, #372]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e06:	4b5c      	ldr	r3, [pc, #368]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	4a63      	ldr	r2, [pc, #396]	@ (8007fa0 <ESP_Upkeep+0x8ec>)
 8007e12:	4964      	ldr	r1, [pc, #400]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e14:	2002      	movs	r0, #2
 8007e16:	f00b ffc7 	bl	8013da8 <CreateLine>
          ResetdBAmax();
 8007e1a:	f006 f82d 	bl	800de78 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e1e:	f7fc ffbf 	bl	8004da0 <resetMaxMeasurementValues>
          showTime();
 8007e22:	f001 ffe5 	bl	8009df0 <showTime>
          ESPTransmitDone = true;
 8007e26:	4b53      	ldr	r3, [pc, #332]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007e2e:	220d      	movs	r2, #13
 8007e30:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e32:	e18e      	b.n	8008152 <ESP_Upkeep+0xa9e>
        else if (Mode == AT_MODE_GETTIME) {
 8007e34:	4b58      	ldr	r3, [pc, #352]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d13a      	bne.n	8007eb2 <ESP_Upkeep+0x7fe>
            setTime = false;
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <ESP_Upkeep+0x8f4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e42:	f002 f877 	bl	8009f34 <calculateNextNTPTime>
 8007e46:	0002      	movs	r2, r0
 8007e48:	4b58      	ldr	r3, [pc, #352]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4a:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e4c:	4b57      	ldr	r3, [pc, #348]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a57      	ldr	r2, [pc, #348]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e52:	189a      	adds	r2, r3, r2
 8007e54:	4b55      	ldr	r3, [pc, #340]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e56:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e58:	4b55      	ldr	r3, [pc, #340]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e5a:	4a56      	ldr	r2, [pc, #344]	@ (8007fb4 <ESP_Upkeep+0x900>)
 8007e5c:	4951      	ldr	r1, [pc, #324]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f00b ffa2 	bl	8013da8 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e64:	4b54      	ldr	r3, [pc, #336]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b3d      	ldr	r3, [pc, #244]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007e6a:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e6c:	f7ff f8ee 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007e70:	f00c fd26 	bl	80148c0 <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b40      	ldr	r3, [pc, #256]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e78:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	4a4d      	ldr	r2, [pc, #308]	@ (8007fbc <ESP_Upkeep+0x908>)
 8007e86:	4947      	ldr	r1, [pc, #284]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f00b ff8d 	bl	8013da8 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e8e:	f00c fd17 	bl	80148c0 <HAL_GetTick>
 8007e92:	0003      	movs	r3, r0
 8007e94:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc0 <ESP_Upkeep+0x90c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d804      	bhi.n	8007ea4 <ESP_Upkeep+0x7f0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc4 <ESP_Upkeep+0x910>)
 8007e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <ESP_Upkeep+0x914>)
 8007e9e:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007ea0:	f005 ff04 	bl	800dcac <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ea6:	220d      	movs	r2, #13
 8007ea8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	701a      	strb	r2, [r3, #0]
    break;
 8007eb0:	e14f      	b.n	8008152 <ESP_Upkeep+0xa9e>
        else if (Mode == AT_MODE_MAIL) {
 8007eb2:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d111      	bne.n	8007ede <ESP_Upkeep+0x82a>
            clearDMABuffer();
 8007eba:	f7ff f8c7 	bl	800704c <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ec4:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007ec6:	4b41      	ldr	r3, [pc, #260]	@ (8007fcc <ESP_Upkeep+0x918>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ece:	220d      	movs	r2, #13
 8007ed0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007ed8:	f005 fee8 	bl	800dcac <EnabledConnectedDevices>
    break;
 8007edc:	e139      	b.n	8008152 <ESP_Upkeep+0xa9e>
          EspState = ESP_STATE_RESET;
 8007ede:	4b29      	ldr	r3, [pc, #164]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ee0:	2209      	movs	r2, #9
 8007ee2:	701a      	strb	r2, [r3, #0]
    break;
 8007ee4:	e135      	b.n	8008152 <ESP_Upkeep+0xa9e>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <ESP_Upkeep+0x91c>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007eec:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00d ff4b 	bl	8015d8e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f00c fceb 	bl	80148d4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007efe:	2380      	movs	r3, #128	@ 0x80
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	4835      	ldr	r0, [pc, #212]	@ (8007fd8 <ESP_Upkeep+0x924>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	0019      	movs	r1, r3
 8007f08:	f00d ff41 	bl	8015d8e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	f00c fce1 	bl	80148d4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f12:	4b30      	ldr	r3, [pc, #192]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	2102      	movs	r1, #2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f00d ff38 	bl	8015d8e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007f20:	2209      	movs	r2, #9
 8007f22:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007f24:	2001      	movs	r0, #1
 8007f26:	f00c fcd5 	bl	80148d4 <HAL_Delay>
      ResetESPIndicator();
 8007f2a:	f00a fd3f 	bl	80129ac <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <ESP_Upkeep+0x928>)
 8007f30:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe0 <ESP_Upkeep+0x92c>)
 8007f32:	0019      	movs	r1, r3
 8007f34:	2003      	movs	r0, #3
 8007f36:	f00b ff37 	bl	8013da8 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f3a:	f001 fe51 	bl	8009be0 <Check_USB_PowerOn>
 8007f3e:	1e03      	subs	r3, r0, #0
 8007f40:	d103      	bne.n	8007f4a <ESP_Upkeep+0x896>
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <ESP_Upkeep+0x930>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <ESP_Upkeep+0x89a>
        EnabledConnectedDevices();
 8007f4a:	f005 feaf 	bl	800dcac <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f4e:	4b26      	ldr	r3, [pc, #152]	@ (8007fe8 <ESP_Upkeep+0x934>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f54:	4b03      	ldr	r3, [pc, #12]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0fd      	b.n	8008158 <ESP_Upkeep+0xaa4>
 8007f5c:	20000034 	.word	0x20000034
 8007f60:	20000694 	.word	0x20000694
 8007f64:	20000690 	.word	0x20000690
 8007f68:	0802b364 	.word	0x0802b364
 8007f6c:	0802aac0 	.word	0x0802aac0
 8007f70:	0000c350 	.word	0x0000c350
 8007f74:	200005b3 	.word	0x200005b3
 8007f78:	200005b8 	.word	0x200005b8
 8007f7c:	200005b4 	.word	0x200005b4
 8007f80:	0802b3a0 	.word	0x0802b3a0
 8007f84:	20000030 	.word	0x20000030
 8007f88:	20000701 	.word	0x20000701
 8007f8c:	20000700 	.word	0x20000700
 8007f90:	2000068e 	.word	0x2000068e
 8007f94:	20000684 	.word	0x20000684
 8007f98:	20000702 	.word	0x20000702
 8007f9c:	0003a980 	.word	0x0003a980
 8007fa0:	0802b3d0 	.word	0x0802b3d0
 8007fa4:	0802aad4 	.word	0x0802aad4
 8007fa8:	20000002 	.word	0x20000002
 8007fac:	20000698 	.word	0x20000698
 8007fb0:	00012686 	.word	0x00012686
 8007fb4:	0802b3e8 	.word	0x0802b3e8
 8007fb8:	2000002c 	.word	0x2000002c
 8007fbc:	0802b42c 	.word	0x0802b42c
 8007fc0:	000061a7 	.word	0x000061a7
 8007fc4:	20001114 	.word	0x20001114
 8007fc8:	000061a8 	.word	0x000061a8
 8007fcc:	200010f9 	.word	0x200010f9
 8007fd0:	200005ac 	.word	0x200005ac
 8007fd4:	50001c00 	.word	0x50001c00
 8007fd8:	50000800 	.word	0x50000800
 8007fdc:	0802b44c 	.word	0x0802b44c
 8007fe0:	0802ab24 	.word	0x0802ab24
 8007fe4:	2000214e 	.word	0x2000214e
 8007fe8:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007fec:	4b5d      	ldr	r3, [pc, #372]	@ (8008164 <ESP_Upkeep+0xab0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f00b fe83 	bl	8013cfc <TimestampIsReached>
 8007ff6:	1e03      	subs	r3, r0, #0
 8007ff8:	d103      	bne.n	8008002 <ESP_Upkeep+0x94e>
 8007ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8008168 <ESP_Upkeep+0xab4>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d053      	beq.n	80080aa <ESP_Upkeep+0x9f6>
        ESPTransmitDone = false;
 8008002:	4b5a      	ldr	r3, [pc, #360]	@ (800816c <ESP_Upkeep+0xab8>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
        if((Mode == AT_MODE_INIT) && is_OM_configured()){
 8008008:	4b59      	ldr	r3, [pc, #356]	@ (8008170 <ESP_Upkeep+0xabc>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <ESP_Upkeep+0x970>
 8008010:	f7ff f9f2 	bl	80073f8 <is_OM_configured>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d005      	beq.n	8008024 <ESP_Upkeep+0x970>
          InitIsDone = true;
 8008018:	4b56      	ldr	r3, [pc, #344]	@ (8008174 <ESP_Upkeep+0xac0>)
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800801e:	4b56      	ldr	r3, [pc, #344]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008020:	220b      	movs	r2, #11
 8008022:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8008024:	4b52      	ldr	r3, [pc, #328]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d105      	bne.n	8008038 <ESP_Upkeep+0x984>
          ConnectionMade = true;
 800802c:	4b53      	ldr	r3, [pc, #332]	@ (800817c <ESP_Upkeep+0xac8>)
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008032:	4b51      	ldr	r3, [pc, #324]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008034:	220b      	movs	r2, #11
 8008036:	701a      	strb	r2, [r3, #0]
        }
        if((Mode == AT_MODE_SEND) && is_OM_configured()) {
 8008038:	4b4d      	ldr	r3, [pc, #308]	@ (8008170 <ESP_Upkeep+0xabc>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d106      	bne.n	800804e <ESP_Upkeep+0x99a>
 8008040:	f7ff f9da 	bl	80073f8 <is_OM_configured>
 8008044:	1e03      	subs	r3, r0, #0
 8008046:	d002      	beq.n	800804e <ESP_Upkeep+0x99a>
          EspState = ESP_STATE_INIT;
 8008048:	4b4b      	ldr	r3, [pc, #300]	@ (8008178 <ESP_Upkeep+0xac4>)
 800804a:	2202      	movs	r2, #2
 800804c:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if((Mode == AT_MODE_MAIL) && is_OM_configured()){
 800804e:	4b48      	ldr	r3, [pc, #288]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b06      	cmp	r3, #6
 8008054:	d106      	bne.n	8008064 <ESP_Upkeep+0x9b0>
 8008056:	f7ff f9cf 	bl	80073f8 <is_OM_configured>
 800805a:	1e03      	subs	r3, r0, #0
 800805c:	d002      	beq.n	8008064 <ESP_Upkeep+0x9b0>
          EspState = ESP_STATE_CONFIG;
 800805e:	4b46      	ldr	r3, [pc, #280]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008060:	220e      	movs	r2, #14
 8008062:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8008064:	4b42      	ldr	r3, [pc, #264]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d108      	bne.n	800807e <ESP_Upkeep+0x9ca>
          EspState = ESP_STATE_CONFIG;
 800806c:	4b42      	ldr	r3, [pc, #264]	@ (8008178 <ESP_Upkeep+0xac4>)
 800806e:	220e      	movs	r2, #14
 8008070:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8008072:	4a43      	ldr	r2, [pc, #268]	@ (8008180 <ESP_Upkeep+0xacc>)
 8008074:	4b43      	ldr	r3, [pc, #268]	@ (8008184 <ESP_Upkeep+0xad0>)
 8008076:	0019      	movs	r1, r3
 8008078:	2002      	movs	r0, #2
 800807a:	f00b fe95 	bl	8013da8 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800807e:	4b3c      	ldr	r3, [pc, #240]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d105      	bne.n	8008092 <ESP_Upkeep+0x9de>
          EspState = ESP_STATE_MODE_SELECT;
 8008086:	4b3c      	ldr	r3, [pc, #240]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008088:	220b      	movs	r2, #11
 800808a:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 800808c:	4b3e      	ldr	r3, [pc, #248]	@ (8008188 <ESP_Upkeep+0xad4>)
 800808e:	2201      	movs	r2, #1
 8008090:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008092:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <ESP_Upkeep+0xab4>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <ESP_Upkeep+0xa28>
 800809a:	4b35      	ldr	r3, [pc, #212]	@ (8008170 <ESP_Upkeep+0xabc>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d01c      	beq.n	80080dc <ESP_Upkeep+0xa28>
          EspState = ESP_STATE_INIT;
 80080a2:	4b35      	ldr	r3, [pc, #212]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080a4:	2202      	movs	r2, #2
 80080a6:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080a8:	e018      	b.n	80080dc <ESP_Upkeep+0xa28>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 80080aa:	f001 ff43 	bl	8009f34 <calculateNextNTPTime>
 80080ae:	0002      	movs	r2, r0
 80080b0:	4b36      	ldr	r3, [pc, #216]	@ (800818c <ESP_Upkeep+0xad8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d94e      	bls.n	8008156 <ESP_Upkeep+0xaa2>
        if(Mode == AT_MODE_SEND ) {
 80080b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008170 <ESP_Upkeep+0xabc>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d14a      	bne.n	8008156 <ESP_Upkeep+0xaa2>
           Mode = AT_MODE_GETTIME;
 80080c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008170 <ESP_Upkeep+0xabc>)
 80080c2:	2205      	movs	r2, #5
 80080c4:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80080c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080c8:	2202      	movs	r2, #2
 80080ca:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80080cc:	4b25      	ldr	r3, [pc, #148]	@ (8008164 <ESP_Upkeep+0xab0>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <ESP_Upkeep+0xadc>)
 80080d2:	601a      	str	r2, [r3, #0]
           setTime = true;
 80080d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008194 <ESP_Upkeep+0xae0>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80080da:	e03c      	b.n	8008156 <ESP_Upkeep+0xaa2>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080dc:	46c0      	nop			@ (mov r8, r8)
      break;
 80080de:	e03a      	b.n	8008156 <ESP_Upkeep+0xaa2>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80080e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <ESP_Upkeep+0xae4>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2201      	movs	r2, #1
 80080e6:	4053      	eors	r3, r2
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d008      	beq.n	8008100 <ESP_Upkeep+0xa4c>
        Info("Do nothing until reset");
 80080ee:	4a24      	ldr	r2, [pc, #144]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080f0:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <ESP_Upkeep+0xad0>)
 80080f2:	0019      	movs	r1, r3
 80080f4:	2002      	movs	r0, #2
 80080f6:	f00b fe57 	bl	8013da8 <CreateLine>
        msgdone = true;
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <ESP_Upkeep+0xae4>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8008100:	f01b f89c 	bl	802323c <GetUsbRxPointer>
 8008104:	0003      	movs	r3, r0
 8008106:	0018      	movs	r0, r3
 8008108:	f000 f98c 	bl	8008424 <Process_PC_Config>
      break;
 800810c:	e024      	b.n	8008158 <ESP_Upkeep+0xaa4>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 800810e:	4a23      	ldr	r2, [pc, #140]	@ (800819c <ESP_Upkeep+0xae8>)
 8008110:	4b23      	ldr	r3, [pc, #140]	@ (80081a0 <ESP_Upkeep+0xaec>)
 8008112:	0019      	movs	r1, r3
 8008114:	2001      	movs	r0, #1
 8008116:	f00b fe47 	bl	8013da8 <CreateLine>
      EspState = ESP_STATE_INIT;
 800811a:	4b17      	ldr	r3, [pc, #92]	@ (8008178 <ESP_Upkeep+0xac4>)
 800811c:	2202      	movs	r2, #2
 800811e:	701a      	strb	r2, [r3, #0]
      break;
 8008120:	e01a      	b.n	8008158 <ESP_Upkeep+0xaa4>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8008122:	4a20      	ldr	r2, [pc, #128]	@ (80081a4 <ESP_Upkeep+0xaf0>)
 8008124:	4b1e      	ldr	r3, [pc, #120]	@ (80081a0 <ESP_Upkeep+0xaec>)
 8008126:	0019      	movs	r1, r3
 8008128:	2001      	movs	r0, #1
 800812a:	f00b fe3d 	bl	8013da8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 800812e:	4b12      	ldr	r3, [pc, #72]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008130:	2207      	movs	r2, #7
 8008132:	701a      	strb	r2, [r3, #0]
      break;
 8008134:	e010      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	e00e      	b.n	8008158 <ESP_Upkeep+0xaa4>
        break;
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	e00c      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	e00a      	b.n	8008158 <ESP_Upkeep+0xaa4>
        break;
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	e008      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 8008146:	46c0      	nop			@ (mov r8, r8)
 8008148:	e006      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	e004      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 800814e:	46c0      	nop			@ (mov r8, r8)
 8008150:	e002      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	e000      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 8008156:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8008158:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <ESP_Upkeep+0xac4>)
 800815a:	781b      	ldrb	r3, [r3, #0]
}
 800815c:	0018      	movs	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	b002      	add	sp, #8
 8008162:	bdb0      	pop	{r4, r5, r7, pc}
 8008164:	20000694 	.word	0x20000694
 8008168:	200005af 	.word	0x200005af
 800816c:	200005b3 	.word	0x200005b3
 8008170:	20000702 	.word	0x20000702
 8008174:	200005ad 	.word	0x200005ad
 8008178:	20000030 	.word	0x20000030
 800817c:	200005b0 	.word	0x200005b0
 8008180:	0802b460 	.word	0x0802b460
 8008184:	0802aad4 	.word	0x0802aad4
 8008188:	200005b1 	.word	0x200005b1
 800818c:	20000698 	.word	0x20000698
 8008190:	2000002c 	.word	0x2000002c
 8008194:	20000002 	.word	0x20000002
 8008198:	200005b2 	.word	0x200005b2
 800819c:	0802b478 	.word	0x0802b478
 80081a0:	0802aac0 	.word	0x0802aac0
 80081a4:	0802b48c 	.word	0x0802b48c

080081a8 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <I2CSensors_Init+0x54>)
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80081b6:	4a12      	ldr	r2, [pc, #72]	@ (8008200 <I2CSensors_Init+0x58>)
 80081b8:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081ba:	0011      	movs	r1, r2
 80081bc:	0018      	movs	r0, r3
 80081be:	f00c f83d 	bl	801423c <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80081c2:	4a0f      	ldr	r2, [pc, #60]	@ (8008200 <I2CSensors_Init+0x58>)
 80081c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081c6:	0011      	movs	r1, r2
 80081c8:	0018      	movs	r0, r3
 80081ca:	f008 fddb 	bl	8010d84 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80081ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008208 <I2CSensors_Init+0x60>)
 80081d0:	490b      	ldr	r1, [pc, #44]	@ (8008200 <I2CSensors_Init+0x58>)
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081d4:	0018      	movs	r0, r3
 80081d6:	f002 fe95 	bl	800af04 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80081da:	4a0c      	ldr	r2, [pc, #48]	@ (800820c <I2CSensors_Init+0x64>)
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <I2CSensors_Init+0x68>)
 80081de:	0011      	movs	r1, r2
 80081e0:	0018      	movs	r0, r3
 80081e2:	f003 fa6b 	bl	800b6bc <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081e6:	4a09      	ldr	r2, [pc, #36]	@ (800820c <I2CSensors_Init+0x64>)
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <I2CSensors_Init+0x68>)
 80081ea:	0011      	movs	r1, r2
 80081ec:	0018      	movs	r0, r3
 80081ee:	f7fb fcc1 	bl	8003b74 <ENS_Init>
}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	2000093c 	.word	0x2000093c
 8008200:	080082cd 	.word	0x080082cd
 8008204:	08008275 	.word	0x08008275
 8008208:	08008215 	.word	0x08008215
 800820c:	080083a5 	.word	0x080083a5
 8008210:	08008321 	.word	0x08008321

08008214 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af02      	add	r7, sp, #8
 800821a:	6039      	str	r1, [r7, #0]
 800821c:	0011      	movs	r1, r2
 800821e:	1dfb      	adds	r3, r7, #7
 8008220:	1c02      	adds	r2, r0, #0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	1c0a      	adds	r2, r1, #0
 8008228:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 800822a:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <ReadI2CDirect+0x5c>)
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	1dfb      	adds	r3, r7, #7
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	18db      	adds	r3, r3, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	3301      	adds	r3, #1
 800823a:	b299      	uxth	r1, r3
 800823c:	1dbb      	adds	r3, r7, #6
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b29d      	uxth	r5, r3
 8008242:	260f      	movs	r6, #15
 8008244:	19bc      	adds	r4, r7, r6
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	23fa      	movs	r3, #250	@ 0xfa
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	002b      	movs	r3, r5
 8008250:	f00d ff74 	bl	801613c <HAL_I2C_Master_Receive>
 8008254:	0003      	movs	r3, r0
 8008256:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008258:	19bb      	adds	r3, r7, r6
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <ReadI2CDirect+0x50>
        return false;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <ReadI2CDirect+0x52>
    }
    return true;
 8008264:	2301      	movs	r3, #1
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b005      	add	sp, #20
 800826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	2000093c 	.word	0x2000093c

08008274 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008274:	b5b0      	push	{r4, r5, r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6039      	str	r1, [r7, #0]
 800827c:	0011      	movs	r1, r2
 800827e:	1dfb      	adds	r3, r7, #7
 8008280:	1c02      	adds	r2, r0, #0
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	1c0a      	adds	r2, r1, #0
 8008288:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 800828a:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <ReadI2C+0x54>)
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	1dfb      	adds	r3, r7, #7
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	18db      	adds	r3, r3, r3
 8008296:	b29b      	uxth	r3, r3
 8008298:	3301      	adds	r3, #1
 800829a:	b299      	uxth	r1, r3
 800829c:	1dbb      	adds	r3, r7, #6
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	250f      	movs	r5, #15
 80082a4:	197c      	adds	r4, r7, r5
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f00e f956 	bl	8016558 <HAL_I2C_Master_Receive_DMA>
 80082ac:	0003      	movs	r3, r0
 80082ae:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082b0:	197b      	adds	r3, r7, r5
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <ReadI2C+0x48>
        return false;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <ReadI2C+0x4a>
    }
    return true;
 80082bc:	2301      	movs	r3, #1
}
 80082be:	0018      	movs	r0, r3
 80082c0:	46bd      	mov	sp, r7
 80082c2:	b004      	add	sp, #16
 80082c4:	bdb0      	pop	{r4, r5, r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	2000093c 	.word	0x2000093c

080082cc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082cc:	b5b0      	push	{r4, r5, r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6039      	str	r1, [r7, #0]
 80082d4:	0011      	movs	r1, r2
 80082d6:	1dfb      	adds	r3, r7, #7
 80082d8:	1c02      	adds	r2, r0, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	1c0a      	adds	r2, r1, #0
 80082e0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082e2:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <WriteI2C+0x50>)
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	1dfb      	adds	r3, r7, #7
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	18db      	adds	r3, r3, r3
 80082ee:	b299      	uxth	r1, r3
 80082f0:	1dbb      	adds	r3, r7, #6
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	250f      	movs	r5, #15
 80082f8:	197c      	adds	r4, r7, r5
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f00e f826 	bl	801634c <HAL_I2C_Master_Transmit_DMA>
 8008300:	0003      	movs	r3, r0
 8008302:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008304:	197b      	adds	r3, r7, r5
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <WriteI2C+0x44>
        return false;
 800830c:	2300      	movs	r3, #0
 800830e:	e000      	b.n	8008312 <WriteI2C+0x46>
    }
    return true;
 8008310:	2301      	movs	r3, #1
}
 8008312:	0018      	movs	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	b004      	add	sp, #16
 8008318:	bdb0      	pop	{r4, r5, r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	2000093c 	.word	0x2000093c

08008320 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008322:	b08b      	sub	sp, #44	@ 0x2c
 8008324:	af04      	add	r7, sp, #16
 8008326:	0004      	movs	r4, r0
 8008328:	0008      	movs	r0, r1
 800832a:	0011      	movs	r1, r2
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	250f      	movs	r5, #15
 8008330:	197b      	adds	r3, r7, r5
 8008332:	1c22      	adds	r2, r4, #0
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	260c      	movs	r6, #12
 8008338:	19bb      	adds	r3, r7, r6
 800833a:	1c02      	adds	r2, r0, #0
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	230a      	movs	r3, #10
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	1c0a      	adds	r2, r1, #0
 8008344:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 8008346:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <ReadI2CMem+0x80>)
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	197b      	adds	r3, r7, r5
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	18db      	adds	r3, r3, r3
 8008352:	b29b      	uxth	r3, r3
 8008354:	3301      	adds	r3, #1
 8008356:	b299      	uxth	r1, r3
 8008358:	2217      	movs	r2, #23
 800835a:	18bc      	adds	r4, r7, r2
 800835c:	230a      	movs	r3, #10
 800835e:	18fb      	adds	r3, r7, r3
 8008360:	881d      	ldrh	r5, [r3, #0]
 8008362:	19bb      	adds	r3, r7, r6
 8008364:	881a      	ldrh	r2, [r3, #0]
 8008366:	23fa      	movs	r3, #250	@ 0xfa
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	2328      	movs	r3, #40	@ 0x28
 800836e:	2608      	movs	r6, #8
 8008370:	199b      	adds	r3, r3, r6
 8008372:	19db      	adds	r3, r3, r7
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	002b      	movs	r3, r5
 800837e:	f00e fb1f 	bl	80169c0 <HAL_I2C_Mem_Read>
 8008382:	0003      	movs	r3, r0
 8008384:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008386:	2217      	movs	r2, #23
 8008388:	18bb      	adds	r3, r7, r2
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <ReadI2CMem+0x74>
     return false;
 8008390:	2300      	movs	r3, #0
 8008392:	e000      	b.n	8008396 <ReadI2CMem+0x76>
   }
   return true;
 8008394:	2301      	movs	r3, #1
}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b007      	add	sp, #28
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	2000093c 	.word	0x2000093c

080083a4 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08b      	sub	sp, #44	@ 0x2c
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	0004      	movs	r4, r0
 80083ac:	0008      	movs	r0, r1
 80083ae:	0011      	movs	r1, r2
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	250f      	movs	r5, #15
 80083b4:	197b      	adds	r3, r7, r5
 80083b6:	1c22      	adds	r2, r4, #0
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	260c      	movs	r6, #12
 80083bc:	19bb      	adds	r3, r7, r6
 80083be:	1c02      	adds	r2, r0, #0
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	230a      	movs	r3, #10
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	1c0a      	adds	r2, r1, #0
 80083c8:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 80083ca:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <WriteI2CMem+0x7c>)
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	197b      	adds	r3, r7, r5
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	18db      	adds	r3, r3, r3
 80083d6:	b299      	uxth	r1, r3
 80083d8:	2217      	movs	r2, #23
 80083da:	18bc      	adds	r4, r7, r2
 80083dc:	230a      	movs	r3, #10
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	881d      	ldrh	r5, [r3, #0]
 80083e2:	19bb      	adds	r3, r7, r6
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	23fa      	movs	r3, #250	@ 0xfa
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	2328      	movs	r3, #40	@ 0x28
 80083ee:	2608      	movs	r6, #8
 80083f0:	199b      	adds	r3, r3, r6
 80083f2:	19db      	adds	r3, r3, r7
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	002b      	movs	r3, r5
 80083fe:	f00e f9b1 	bl	8016764 <HAL_I2C_Mem_Write>
 8008402:	0003      	movs	r3, r0
 8008404:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008406:	2217      	movs	r2, #23
 8008408:	18bb      	adds	r3, r7, r2
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <WriteI2CMem+0x70>
     return false;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <WriteI2CMem+0x72>
   }
   return true;
 8008414:	2301      	movs	r3, #1
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	b007      	add	sp, #28
 800841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	2000093c 	.word	0x2000093c

08008424 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b0c3      	sub	sp, #268	@ 0x10c
 8008428:	af3e      	add	r7, sp, #248	@ 0xf8
 800842a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800842c:	f01a ff26 	bl	802327c <GetUsbRxDataSize>
 8008430:	0003      	movs	r3, r0
 8008432:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d972      	bls.n	8008520 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2123      	movs	r1, #35	@ 0x23
 800843e:	0018      	movs	r0, r3
 8008440:	f01e f92a 	bl	8026698 <strchr>
 8008444:	0003      	movs	r3, r0
 8008446:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d066      	beq.n	800851c <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <Process_PC_Config+0x104>)
 8008454:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	789a      	ldrb	r2, [r3, #2]
 800845a:	4b33      	ldr	r3, [pc, #204]	@ (8008528 <Process_PC_Config+0x104>)
 800845c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800845e:	4b32      	ldr	r3, [pc, #200]	@ (8008528 <Process_PC_Config+0x104>)
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	3305      	adds	r3, #5
 8008464:	001a      	movs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4293      	cmp	r3, r2
 800846a:	d352      	bcc.n	8008512 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	1cd9      	adds	r1, r3, #3
 8008470:	4b2d      	ldr	r3, [pc, #180]	@ (8008528 <Process_PC_Config+0x104>)
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	001a      	movs	r2, r3
 8008476:	4b2d      	ldr	r3, [pc, #180]	@ (800852c <Process_PC_Config+0x108>)
 8008478:	0018      	movs	r0, r3
 800847a:	f01e f9e1 	bl	8026840 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800847e:	4b2a      	ldr	r3, [pc, #168]	@ (8008528 <Process_PC_Config+0x104>)
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	3303      	adds	r3, #3
 8008484:	001a      	movs	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	189b      	adds	r3, r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b21b      	sxth	r3, r3
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	b21a      	sxth	r2, r3
 8008492:	4b25      	ldr	r3, [pc, #148]	@ (8008528 <Process_PC_Config+0x104>)
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	3304      	adds	r3, #4
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	18cb      	adds	r3, r1, r3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b21b      	sxth	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	b299      	uxth	r1, r3
 80084a6:	4a20      	ldr	r2, [pc, #128]	@ (8008528 <Process_PC_Config+0x104>)
 80084a8:	2381      	movs	r3, #129	@ 0x81
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80084ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008528 <Process_PC_Config+0x104>)
 80084b0:	2381      	movs	r3, #129	@ 0x81
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	5ad4      	ldrh	r4, [r2, r3]
 80084b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <Process_PC_Config+0x104>)
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	3303      	adds	r3, #3
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	0011      	movs	r1, r2
 80084c2:	0018      	movs	r0, r3
 80084c4:	f000 fa86 	bl	80089d4 <CRC16_ARC>
 80084c8:	0003      	movs	r3, r0
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d007      	beq.n	80084de <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80084ce:	4b16      	ldr	r3, [pc, #88]	@ (8008528 <Process_PC_Config+0x104>)
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	4b16      	ldr	r3, [pc, #88]	@ (800852c <Process_PC_Config+0x108>)
 80084d4:	0019      	movs	r1, r3
 80084d6:	2001      	movs	r0, #1
 80084d8:	f000 fa2a 	bl	8008930 <Create_Message>
 80084dc:	e016      	b.n	800850c <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80084de:	4c12      	ldr	r4, [pc, #72]	@ (8008528 <Process_PC_Config+0x104>)
 80084e0:	466b      	mov	r3, sp
 80084e2:	0018      	movs	r0, r3
 80084e4:	0023      	movs	r3, r4
 80084e6:	3310      	adds	r3, #16
 80084e8:	22f4      	movs	r2, #244	@ 0xf4
 80084ea:	0019      	movs	r1, r3
 80084ec:	f01e f9a8 	bl	8026840 <memcpy>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	6861      	ldr	r1, [r4, #4]
 80084f4:	68a2      	ldr	r2, [r4, #8]
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	f000 f81a 	bl	8008530 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008528 <Process_PC_Config+0x104>)
 80084fe:	7818      	ldrb	r0, [r3, #0]
 8008500:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <Process_PC_Config+0x104>)
 8008502:	785a      	ldrb	r2, [r3, #1]
 8008504:	4b09      	ldr	r3, [pc, #36]	@ (800852c <Process_PC_Config+0x108>)
 8008506:	0019      	movs	r1, r3
 8008508:	f000 fa12 	bl	8008930 <Create_Message>
                }
                ResetUsbRxDataSize();
 800850c:	f01a fe9e 	bl	802324c <ResetUsbRxDataSize>
                return;
 8008510:	e006      	b.n	8008520 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	0018      	movs	r0, r3
 8008516:	f01a febb 	bl	8023290 <GetUsbRxNextChunk>
 800851a:	e001      	b.n	8008520 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 800851c:	f01a fe96 	bl	802324c <ResetUsbRxDataSize>
        }
    }
}
 8008520:	46bd      	mov	sp, r7
 8008522:	b005      	add	sp, #20
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	20000940 	.word	0x20000940
 800852c:	20000942 	.word	0x20000942

08008530 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008530:	b084      	sub	sp, #16
 8008532:	b5b0      	push	{r4, r5, r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	2518      	movs	r5, #24
 800853a:	197c      	adds	r4, r7, r5
 800853c:	6020      	str	r0, [r4, #0]
 800853e:	6061      	str	r1, [r4, #4]
 8008540:	60a2      	str	r2, [r4, #8]
 8008542:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 8008544:	197b      	adds	r3, r7, r5
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2bfe      	cmp	r3, #254	@ 0xfe
 800854a:	d900      	bls.n	800854e <ProcessCmd+0x1e>
 800854c:	e1a6      	b.n	800889c <ProcessCmd+0x36c>
 800854e:	009a      	lsls	r2, r3, #2
 8008550:	4bd6      	ldr	r3, [pc, #856]	@ (80088ac <ProcessCmd+0x37c>)
 8008552:	18d3      	adds	r3, r2, r3
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008558:	2118      	movs	r1, #24
 800855a:	187b      	adds	r3, r7, r1
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	001a      	movs	r2, r3
 8008560:	187b      	adds	r3, r7, r1
 8008562:	1c99      	adds	r1, r3, #2
 8008564:	48d2      	ldr	r0, [pc, #840]	@ (80088b0 <ProcessCmd+0x380>)
 8008566:	230c      	movs	r3, #12
 8008568:	f003 fd98 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800856c:	e196      	b.n	800889c <ProcessCmd+0x36c>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856e:	2118      	movs	r1, #24
 8008570:	187b      	adds	r3, r7, r1
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	001a      	movs	r2, r3
 8008576:	187b      	adds	r3, r7, r1
 8008578:	1c99      	adds	r1, r3, #2
 800857a:	48ce      	ldr	r0, [pc, #824]	@ (80088b4 <ProcessCmd+0x384>)
 800857c:	230c      	movs	r3, #12
 800857e:	f003 fd8d 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008582:	e18b      	b.n	800889c <ProcessCmd+0x36c>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008584:	2118      	movs	r1, #24
 8008586:	187b      	adds	r3, r7, r1
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	001a      	movs	r2, r3
 800858c:	187b      	adds	r3, r7, r1
 800858e:	1c99      	adds	r1, r3, #2
 8008590:	48c9      	ldr	r0, [pc, #804]	@ (80088b8 <ProcessCmd+0x388>)
 8008592:	230c      	movs	r3, #12
 8008594:	f003 fd82 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008598:	e180      	b.n	800889c <ProcessCmd+0x36c>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800859a:	2118      	movs	r1, #24
 800859c:	187b      	adds	r3, r7, r1
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	001a      	movs	r2, r3
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	1c99      	adds	r1, r3, #2
 80085a6:	48c5      	ldr	r0, [pc, #788]	@ (80088bc <ProcessCmd+0x38c>)
 80085a8:	230c      	movs	r3, #12
 80085aa:	f003 fd77 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80085ae:	e175      	b.n	800889c <ProcessCmd+0x36c>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085b0:	2118      	movs	r1, #24
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	001a      	movs	r2, r3
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	1c99      	adds	r1, r3, #2
 80085bc:	48c0      	ldr	r0, [pc, #768]	@ (80088c0 <ProcessCmd+0x390>)
 80085be:	230c      	movs	r3, #12
 80085c0:	f003 fd6c 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80085c4:	e16a      	b.n	800889c <ProcessCmd+0x36c>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085c6:	2118      	movs	r1, #24
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	001a      	movs	r2, r3
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	1c99      	adds	r1, r3, #2
 80085d2:	48bc      	ldr	r0, [pc, #752]	@ (80088c4 <ProcessCmd+0x394>)
 80085d4:	230c      	movs	r3, #12
 80085d6:	f003 fd61 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80085da:	e15f      	b.n	800889c <ProcessCmd+0x36c>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085dc:	2118      	movs	r1, #24
 80085de:	187b      	adds	r3, r7, r1
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	001a      	movs	r2, r3
 80085e4:	187b      	adds	r3, r7, r1
 80085e6:	1c99      	adds	r1, r3, #2
 80085e8:	48b7      	ldr	r0, [pc, #732]	@ (80088c8 <ProcessCmd+0x398>)
 80085ea:	230c      	movs	r3, #12
 80085ec:	f003 fd56 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80085f0:	e154      	b.n	800889c <ProcessCmd+0x36c>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f2:	2118      	movs	r1, #24
 80085f4:	187b      	adds	r3, r7, r1
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	001a      	movs	r2, r3
 80085fa:	187b      	adds	r3, r7, r1
 80085fc:	1c99      	adds	r1, r3, #2
 80085fe:	48b3      	ldr	r0, [pc, #716]	@ (80088cc <ProcessCmd+0x39c>)
 8008600:	230c      	movs	r3, #12
 8008602:	f003 fd4b 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008606:	e149      	b.n	800889c <ProcessCmd+0x36c>
        case PM10ConfigCmd:  // 8
//            char Buffer[1+(2*IdSize)];
//            uint8ArrayToString(Buffer, msg.Payload);
//            Buffer[24] = '\0';
//            printf_USB("command: %d, payload: %s, length: %d\r\n",msg.Command, Buffer, msg.PayloadLength);
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008608:	2118      	movs	r1, #24
 800860a:	187b      	adds	r3, r7, r1
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	001a      	movs	r2, r3
 8008610:	187b      	adds	r3, r7, r1
 8008612:	1c99      	adds	r1, r3, #2
 8008614:	48ae      	ldr	r0, [pc, #696]	@ (80088d0 <ProcessCmd+0x3a0>)
 8008616:	230c      	movs	r3, #12
 8008618:	f003 fd40 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800861c:	e13e      	b.n	800889c <ProcessCmd+0x36c>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800861e:	2118      	movs	r1, #24
 8008620:	187b      	adds	r3, r7, r1
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	001a      	movs	r2, r3
 8008626:	187b      	adds	r3, r7, r1
 8008628:	1c99      	adds	r1, r3, #2
 800862a:	48aa      	ldr	r0, [pc, #680]	@ (80088d4 <ProcessCmd+0x3a4>)
 800862c:	230c      	movs	r3, #12
 800862e:	f003 fd35 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008632:	e133      	b.n	800889c <ProcessCmd+0x36c>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008634:	2118      	movs	r1, #24
 8008636:	187b      	adds	r3, r7, r1
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	001a      	movs	r2, r3
 800863c:	187b      	adds	r3, r7, r1
 800863e:	1c99      	adds	r1, r3, #2
 8008640:	48a5      	ldr	r0, [pc, #660]	@ (80088d8 <ProcessCmd+0x3a8>)
 8008642:	230c      	movs	r3, #12
 8008644:	f003 fd2a 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008648:	e128      	b.n	800889c <ProcessCmd+0x36c>
        case ChargerStatConfigCmd:  // 11
            WriteUint8ArrayEepromSafe(ChargerStatConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800864a:	2118      	movs	r1, #24
 800864c:	187b      	adds	r3, r7, r1
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	001a      	movs	r2, r3
 8008652:	187b      	adds	r3, r7, r1
 8008654:	1c99      	adds	r1, r3, #2
 8008656:	48a1      	ldr	r0, [pc, #644]	@ (80088dc <ProcessCmd+0x3ac>)
 8008658:	230c      	movs	r3, #12
 800865a:	f003 fd1f 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800865e:	e11d      	b.n	800889c <ProcessCmd+0x36c>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008660:	2118      	movs	r1, #24
 8008662:	187b      	adds	r3, r7, r1
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	001a      	movs	r2, r3
 8008668:	187b      	adds	r3, r7, r1
 800866a:	1c99      	adds	r1, r3, #2
 800866c:	489c      	ldr	r0, [pc, #624]	@ (80088e0 <ProcessCmd+0x3b0>)
 800866e:	2320      	movs	r3, #32
 8008670:	f003 fd14 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008674:	e112      	b.n	800889c <ProcessCmd+0x36c>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 8008676:	4b9b      	ldr	r3, [pc, #620]	@ (80088e4 <ProcessCmd+0x3b4>)
 8008678:	2120      	movs	r1, #32
 800867a:	0018      	movs	r0, r3
 800867c:	f003 fd53 	bl	800c126 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 8008680:	2118      	movs	r1, #24
 8008682:	187b      	adds	r3, r7, r1
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	001a      	movs	r2, r3
 8008688:	187b      	adds	r3, r7, r1
 800868a:	1c99      	adds	r1, r3, #2
 800868c:	4895      	ldr	r0, [pc, #596]	@ (80088e4 <ProcessCmd+0x3b4>)
 800868e:	2320      	movs	r3, #32
 8008690:	f003 fd04 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008694:	e102      	b.n	800889c <ProcessCmd+0x36c>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 8008696:	4b94      	ldr	r3, [pc, #592]	@ (80088e8 <ProcessCmd+0x3b8>)
 8008698:	2140      	movs	r1, #64	@ 0x40
 800869a:	0018      	movs	r0, r3
 800869c:	f003 fd43 	bl	800c126 <ClearEEprom>
 //         printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 80086a0:	2118      	movs	r1, #24
 80086a2:	187b      	adds	r3, r7, r1
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	001a      	movs	r2, r3
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	1c99      	adds	r1, r3, #2
 80086ac:	488e      	ldr	r0, [pc, #568]	@ (80088e8 <ProcessCmd+0x3b8>)
 80086ae:	2340      	movs	r3, #64	@ 0x40
 80086b0:	f003 fcf4 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80086b4:	e0f2      	b.n	800889c <ProcessCmd+0x36c>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086b6:	2118      	movs	r1, #24
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	785b      	ldrb	r3, [r3, #1]
 80086bc:	001a      	movs	r2, r3
 80086be:	187b      	adds	r3, r7, r1
 80086c0:	1c99      	adds	r1, r3, #2
 80086c2:	488a      	ldr	r0, [pc, #552]	@ (80088ec <ProcessCmd+0x3bc>)
 80086c4:	230c      	movs	r3, #12
 80086c6:	f003 fce9 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80086ca:	e0e7      	b.n	800889c <ProcessCmd+0x36c>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086cc:	2118      	movs	r1, #24
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	001a      	movs	r2, r3
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	1c99      	adds	r1, r3, #2
 80086d8:	4885      	ldr	r0, [pc, #532]	@ (80088f0 <ProcessCmd+0x3c0>)
 80086da:	230c      	movs	r3, #12
 80086dc:	f003 fcde 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80086e0:	e0dc      	b.n	800889c <ProcessCmd+0x36c>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086e2:	2118      	movs	r1, #24
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	001a      	movs	r2, r3
 80086ea:	187b      	adds	r3, r7, r1
 80086ec:	1c99      	adds	r1, r3, #2
 80086ee:	4881      	ldr	r0, [pc, #516]	@ (80088f4 <ProcessCmd+0x3c4>)
 80086f0:	230c      	movs	r3, #12
 80086f2:	f003 fcd3 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80086f6:	e0d1      	b.n	800889c <ProcessCmd+0x36c>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086f8:	2118      	movs	r1, #24
 80086fa:	187b      	adds	r3, r7, r1
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	001a      	movs	r2, r3
 8008700:	187b      	adds	r3, r7, r1
 8008702:	1c99      	adds	r1, r3, #2
 8008704:	487c      	ldr	r0, [pc, #496]	@ (80088f8 <ProcessCmd+0x3c8>)
 8008706:	230c      	movs	r3, #12
 8008708:	f003 fcc8 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800870c:	e0c6      	b.n	800889c <ProcessCmd+0x36c>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800870e:	2118      	movs	r1, #24
 8008710:	187b      	adds	r3, r7, r1
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	001a      	movs	r2, r3
 8008716:	187b      	adds	r3, r7, r1
 8008718:	1c99      	adds	r1, r3, #2
 800871a:	4878      	ldr	r0, [pc, #480]	@ (80088fc <ProcessCmd+0x3cc>)
 800871c:	230c      	movs	r3, #12
 800871e:	f003 fcbd 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008722:	e0bb      	b.n	800889c <ProcessCmd+0x36c>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008724:	2118      	movs	r1, #24
 8008726:	187b      	adds	r3, r7, r1
 8008728:	785b      	ldrb	r3, [r3, #1]
 800872a:	001a      	movs	r2, r3
 800872c:	187b      	adds	r3, r7, r1
 800872e:	1c99      	adds	r1, r3, #2
 8008730:	4873      	ldr	r0, [pc, #460]	@ (8008900 <ProcessCmd+0x3d0>)
 8008732:	230c      	movs	r3, #12
 8008734:	f003 fcb2 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008738:	e0b0      	b.n	800889c <ProcessCmd+0x36c>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800873a:	2118      	movs	r1, #24
 800873c:	187b      	adds	r3, r7, r1
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	001a      	movs	r2, r3
 8008742:	187b      	adds	r3, r7, r1
 8008744:	1c99      	adds	r1, r3, #2
 8008746:	486f      	ldr	r0, [pc, #444]	@ (8008904 <ProcessCmd+0x3d4>)
 8008748:	230c      	movs	r3, #12
 800874a:	f003 fca7 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800874e:	e0a5      	b.n	800889c <ProcessCmd+0x36c>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008750:	2118      	movs	r1, #24
 8008752:	187b      	adds	r3, r7, r1
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	001a      	movs	r2, r3
 8008758:	187b      	adds	r3, r7, r1
 800875a:	1c99      	adds	r1, r3, #2
 800875c:	486a      	ldr	r0, [pc, #424]	@ (8008908 <ProcessCmd+0x3d8>)
 800875e:	230c      	movs	r3, #12
 8008760:	f003 fc9c 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008764:	e09a      	b.n	800889c <ProcessCmd+0x36c>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008766:	2118      	movs	r1, #24
 8008768:	187b      	adds	r3, r7, r1
 800876a:	785b      	ldrb	r3, [r3, #1]
 800876c:	001a      	movs	r2, r3
 800876e:	187b      	adds	r3, r7, r1
 8008770:	1c99      	adds	r1, r3, #2
 8008772:	4866      	ldr	r0, [pc, #408]	@ (800890c <ProcessCmd+0x3dc>)
 8008774:	230c      	movs	r3, #12
 8008776:	f003 fc91 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800877a:	e08f      	b.n	800889c <ProcessCmd+0x36c>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800877c:	2118      	movs	r1, #24
 800877e:	187b      	adds	r3, r7, r1
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	001a      	movs	r2, r3
 8008784:	187b      	adds	r3, r7, r1
 8008786:	1c99      	adds	r1, r3, #2
 8008788:	4861      	ldr	r0, [pc, #388]	@ (8008910 <ProcessCmd+0x3e0>)
 800878a:	230c      	movs	r3, #12
 800878c:	f003 fc86 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008790:	e084      	b.n	800889c <ProcessCmd+0x36c>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 8008792:	4b60      	ldr	r3, [pc, #384]	@ (8008914 <ProcessCmd+0x3e4>)
 8008794:	2130      	movs	r1, #48	@ 0x30
 8008796:	0018      	movs	r0, r3
 8008798:	f003 fcc5 	bl	800c126 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 800879c:	2118      	movs	r1, #24
 800879e:	187b      	adds	r3, r7, r1
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	001a      	movs	r2, r3
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	1c99      	adds	r1, r3, #2
 80087a8:	485a      	ldr	r0, [pc, #360]	@ (8008914 <ProcessCmd+0x3e4>)
 80087aa:	2330      	movs	r3, #48	@ 0x30
 80087ac:	f003 fc76 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80087b0:	e074      	b.n	800889c <ProcessCmd+0x36c>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80087b2:	4b59      	ldr	r3, [pc, #356]	@ (8008918 <ProcessCmd+0x3e8>)
 80087b4:	2130      	movs	r1, #48	@ 0x30
 80087b6:	0018      	movs	r0, r3
 80087b8:	f003 fcb5 	bl	800c126 <ClearEEprom>
//          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 80087bc:	2118      	movs	r1, #24
 80087be:	187b      	adds	r3, r7, r1
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	001a      	movs	r2, r3
 80087c4:	187b      	adds	r3, r7, r1
 80087c6:	1c99      	adds	r1, r3, #2
 80087c8:	4853      	ldr	r0, [pc, #332]	@ (8008918 <ProcessCmd+0x3e8>)
 80087ca:	2330      	movs	r3, #48	@ 0x30
 80087cc:	f003 fc66 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80087d0:	e064      	b.n	800889c <ProcessCmd+0x36c>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 80087d2:	4b52      	ldr	r3, [pc, #328]	@ (800891c <ProcessCmd+0x3ec>)
 80087d4:	2130      	movs	r1, #48	@ 0x30
 80087d6:	0018      	movs	r0, r3
 80087d8:	f003 fca5 	bl	800c126 <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 80087dc:	2118      	movs	r1, #24
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	001a      	movs	r2, r3
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	1c99      	adds	r1, r3, #2
 80087e8:	484c      	ldr	r0, [pc, #304]	@ (800891c <ProcessCmd+0x3ec>)
 80087ea:	2330      	movs	r3, #48	@ 0x30
 80087ec:	f003 fc56 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 80087f0:	e054      	b.n	800889c <ProcessCmd+0x36c>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087f2:	2118      	movs	r1, #24
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	001a      	movs	r2, r3
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	1c99      	adds	r1, r3, #2
 80087fe:	4848      	ldr	r0, [pc, #288]	@ (8008920 <ProcessCmd+0x3f0>)
 8008800:	230c      	movs	r3, #12
 8008802:	f003 fc4b 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008806:	e049      	b.n	800889c <ProcessCmd+0x36c>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008808:	2118      	movs	r1, #24
 800880a:	187b      	adds	r3, r7, r1
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	001a      	movs	r2, r3
 8008810:	187b      	adds	r3, r7, r1
 8008812:	1c99      	adds	r1, r3, #2
 8008814:	4843      	ldr	r0, [pc, #268]	@ (8008924 <ProcessCmd+0x3f4>)
 8008816:	230c      	movs	r3, #12
 8008818:	f003 fc40 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 800881c:	e03e      	b.n	800889c <ProcessCmd+0x36c>
        case URLToUploadConfigCmd: // 30
//          printf_USB("command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 800881e:	2118      	movs	r1, #24
 8008820:	187b      	adds	r3, r7, r1
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	001a      	movs	r2, r3
 8008826:	187b      	adds	r3, r7, r1
 8008828:	1c99      	adds	r1, r3, #2
 800882a:	483f      	ldr	r0, [pc, #252]	@ (8008928 <ProcessCmd+0x3f8>)
 800882c:	2330      	movs	r3, #48	@ 0x30
 800882e:	f003 fc35 	bl	800c09c <WriteUint8ArrayEepromSafe>
        break;
 8008832:	e033      	b.n	800889c <ProcessCmd+0x36c>

        case ClearConfigCmd: // 253
//          printf_USB("command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
          printf_USB("CLEAR CONFIGURATION MEMORY!");
 8008834:	4b3d      	ldr	r3, [pc, #244]	@ (800892c <ProcessCmd+0x3fc>)
 8008836:	0018      	movs	r0, r3
 8008838:	f000 f918 	bl	8008a6c <printf_USB>
          ClearEEprom(EEPromStartAddr, ConfigSize);
 800883c:	23a2      	movs	r3, #162	@ 0xa2
 800883e:	33ff      	adds	r3, #255	@ 0xff
 8008840:	4a1b      	ldr	r2, [pc, #108]	@ (80088b0 <ProcessCmd+0x380>)
 8008842:	0019      	movs	r1, r3
 8008844:	0010      	movs	r0, r2
 8008846:	f003 fc6e 	bl	800c126 <ClearEEprom>
          ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 800884a:	4b26      	ldr	r3, [pc, #152]	@ (80088e4 <ProcessCmd+0x3b4>)
 800884c:	21f0      	movs	r1, #240	@ 0xf0
 800884e:	0018      	movs	r0, r3
 8008850:	f003 fc69 	bl	800c126 <ClearEEprom>
        break;
 8008854:	e022      	b.n	800889c <ProcessCmd+0x36c>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008856:	2118      	movs	r1, #24
 8008858:	187b      	adds	r3, r7, r1
 800885a:	789b      	ldrb	r3, [r3, #2]
 800885c:	b21b      	sxth	r3, r3
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	b21a      	sxth	r2, r3
 8008862:	187b      	adds	r3, r7, r1
 8008864:	78db      	ldrb	r3, [r3, #3]
 8008866:	b21b      	sxth	r3, r3
 8008868:	4313      	orrs	r3, r2
 800886a:	b21a      	sxth	r2, r3
 800886c:	1dbb      	adds	r3, r7, #6
 800886e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008870:	1dbb      	adds	r3, r7, #6
 8008872:	881a      	ldrh	r2, [r3, #0]
 8008874:	23c0      	movs	r3, #192	@ 0xc0
 8008876:	015b      	lsls	r3, r3, #5
 8008878:	429a      	cmp	r2, r3
 800887a:	d207      	bcs.n	800888c <ProcessCmd+0x35c>
            {
                ClearEEprom(EEPromStartAddr, size);
 800887c:	1dbb      	adds	r3, r7, #6
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	4a0b      	ldr	r2, [pc, #44]	@ (80088b0 <ProcessCmd+0x380>)
 8008882:	0019      	movs	r1, r3
 8008884:	0010      	movs	r0, r2
 8008886:	f003 fc4e 	bl	800c126 <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 800888a:	e006      	b.n	800889a <ProcessCmd+0x36a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800888c:	23c0      	movs	r3, #192	@ 0xc0
 800888e:	015b      	lsls	r3, r3, #5
 8008890:	4a07      	ldr	r2, [pc, #28]	@ (80088b0 <ProcessCmd+0x380>)
 8008892:	0019      	movs	r1, r3
 8008894:	0010      	movs	r0, r2
 8008896:	f003 fc46 	bl	800c126 <ClearEEprom>
            break;
 800889a:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 800889c:	46c0      	nop			@ (mov r8, r8)
 800889e:	46bd      	mov	sp, r7
 80088a0:	b002      	add	sp, #8
 80088a2:	bcb0      	pop	{r4, r5, r7}
 80088a4:	bc08      	pop	{r3}
 80088a6:	b004      	add	sp, #16
 80088a8:	4718      	bx	r3
 80088aa:	46c0      	nop			@ (mov r8, r8)
 80088ac:	0802e024 	.word	0x0802e024
 80088b0:	08080000 	.word	0x08080000
 80088b4:	0808000c 	.word	0x0808000c
 80088b8:	08080018 	.word	0x08080018
 80088bc:	08080024 	.word	0x08080024
 80088c0:	08080030 	.word	0x08080030
 80088c4:	08080048 	.word	0x08080048
 80088c8:	0808003c 	.word	0x0808003c
 80088cc:	08080054 	.word	0x08080054
 80088d0:	08080060 	.word	0x08080060
 80088d4:	0808006c 	.word	0x0808006c
 80088d8:	08080078 	.word	0x08080078
 80088dc:	08080084 	.word	0x08080084
 80088e0:	08080090 	.word	0x08080090
 80088e4:	08080200 	.word	0x08080200
 80088e8:	08080220 	.word	0x08080220
 80088ec:	080800b0 	.word	0x080800b0
 80088f0:	080800bc 	.word	0x080800bc
 80088f4:	080800c8 	.word	0x080800c8
 80088f8:	080800d4 	.word	0x080800d4
 80088fc:	080800e0 	.word	0x080800e0
 8008900:	080800ec 	.word	0x080800ec
 8008904:	080800f8 	.word	0x080800f8
 8008908:	08080104 	.word	0x08080104
 800890c:	08080170 	.word	0x08080170
 8008910:	0808017c 	.word	0x0808017c
 8008914:	08080260 	.word	0x08080260
 8008918:	08080290 	.word	0x08080290
 800891c:	080802c0 	.word	0x080802c0
 8008920:	08080188 	.word	0x08080188
 8008924:	080801a0 	.word	0x080801a0
 8008928:	08080110 	.word	0x08080110
 800892c:	0802b4bc 	.word	0x0802b4bc

08008930 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6039      	str	r1, [r7, #0]
 8008938:	0011      	movs	r1, r2
 800893a:	1dfb      	adds	r3, r7, #7
 800893c:	1c02      	adds	r2, r0, #0
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	1dbb      	adds	r3, r7, #6
 8008942:	1c0a      	adds	r2, r1, #0
 8008944:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8008946:	2223      	movs	r2, #35	@ 0x23
 8008948:	4b20      	ldr	r3, [pc, #128]	@ (80089cc <Create_Message+0x9c>)
 800894a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800894c:	4b1f      	ldr	r3, [pc, #124]	@ (80089cc <Create_Message+0x9c>)
 800894e:	1dfa      	adds	r2, r7, #7
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8008954:	4b1d      	ldr	r3, [pc, #116]	@ (80089cc <Create_Message+0x9c>)
 8008956:	1dba      	adds	r2, r7, #6
 8008958:	7812      	ldrb	r2, [r2, #0]
 800895a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800895c:	1dbb      	adds	r3, r7, #6
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	4b1b      	ldr	r3, [pc, #108]	@ (80089d0 <Create_Message+0xa0>)
 8008964:	0018      	movs	r0, r3
 8008966:	f01d ff6b 	bl	8026840 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800896a:	1dbb      	adds	r3, r7, #6
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b29a      	uxth	r2, r3
 8008970:	250e      	movs	r5, #14
 8008972:	197b      	adds	r3, r7, r5
 8008974:	3203      	adds	r2, #3
 8008976:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008978:	260c      	movs	r6, #12
 800897a:	19bc      	adds	r4, r7, r6
 800897c:	197b      	adds	r3, r7, r5
 800897e:	881a      	ldrh	r2, [r3, #0]
 8008980:	4b12      	ldr	r3, [pc, #72]	@ (80089cc <Create_Message+0x9c>)
 8008982:	0011      	movs	r1, r2
 8008984:	0018      	movs	r0, r3
 8008986:	f000 f825 	bl	80089d4 <CRC16_ARC>
 800898a:	0003      	movs	r3, r0
 800898c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800898e:	0030      	movs	r0, r6
 8008990:	183b      	adds	r3, r7, r0
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	b29a      	uxth	r2, r3
 8008998:	197b      	adds	r3, r7, r5
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b2d1      	uxtb	r1, r2
 800899e:	4a0b      	ldr	r2, [pc, #44]	@ (80089cc <Create_Message+0x9c>)
 80089a0:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80089a2:	197b      	adds	r3, r7, r5
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	183a      	adds	r2, r7, r0
 80089aa:	8812      	ldrh	r2, [r2, #0]
 80089ac:	b2d1      	uxtb	r1, r2
 80089ae:	4a07      	ldr	r2, [pc, #28]	@ (80089cc <Create_Message+0x9c>)
 80089b0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80089b2:	197b      	adds	r3, r7, r5
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	3302      	adds	r3, #2
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	4b04      	ldr	r3, [pc, #16]	@ (80089cc <Create_Message+0x9c>)
 80089bc:	0011      	movs	r1, r2
 80089be:	0018      	movs	r0, r3
 80089c0:	f01a fc02 	bl	80231c8 <CDC_Transmit_FS>
}
 80089c4:	46c0      	nop			@ (mov r8, r8)
 80089c6:	46bd      	mov	sp, r7
 80089c8:	b005      	add	sp, #20
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089cc:	20000a4c 	.word	0x20000a4c
 80089d0:	20000a4f 	.word	0x20000a4f

080089d4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	000a      	movs	r2, r1
 80089de:	1cbb      	adds	r3, r7, #2
 80089e0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80089e2:	2316      	movs	r3, #22
 80089e4:	18fb      	adds	r3, r7, r3
 80089e6:	2200      	movs	r2, #0
 80089e8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	e02e      	b.n	8008a4e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	18d3      	adds	r3, r2, r3
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	0019      	movs	r1, r3
 80089fa:	2216      	movs	r2, #22
 80089fc:	18bb      	adds	r3, r7, r2
 80089fe:	18ba      	adds	r2, r7, r2
 8008a00:	8812      	ldrh	r2, [r2, #0]
 8008a02:	404a      	eors	r2, r1
 8008a04:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	e01a      	b.n	8008a42 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008a0c:	2116      	movs	r1, #22
 8008a0e:	187b      	adds	r3, r7, r1
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	2201      	movs	r2, #1
 8008a14:	4013      	ands	r3, r2
 8008a16:	d00b      	beq.n	8008a30 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008a18:	187b      	adds	r3, r7, r1
 8008a1a:	187a      	adds	r2, r7, r1
 8008a1c:	8812      	ldrh	r2, [r2, #0]
 8008a1e:	0852      	lsrs	r2, r2, #1
 8008a20:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	187a      	adds	r2, r7, r1
 8008a26:	8812      	ldrh	r2, [r2, #0]
 8008a28:	490f      	ldr	r1, [pc, #60]	@ (8008a68 <CRC16_ARC+0x94>)
 8008a2a:	404a      	eors	r2, r1
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	e005      	b.n	8008a3c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008a30:	2216      	movs	r2, #22
 8008a32:	18bb      	adds	r3, r7, r2
 8008a34:	18ba      	adds	r2, r7, r2
 8008a36:	8812      	ldrh	r2, [r2, #0]
 8008a38:	0852      	lsrs	r2, r2, #1
 8008a3a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b07      	cmp	r3, #7
 8008a46:	dde1      	ble.n	8008a0c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	1cbb      	adds	r3, r7, #2
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	dbcb      	blt.n	80089f0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008a58:	2316      	movs	r3, #22
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	881b      	ldrh	r3, [r3, #0]
}
 8008a5e:	0018      	movs	r0, r3
 8008a60:	46bd      	mov	sp, r7
 8008a62:	b006      	add	sp, #24
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	ffffa001 	.word	0xffffa001

08008a6c <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008a6c:	b40f      	push	{r0, r1, r2, r3}
 8008a6e:	b590      	push	{r4, r7, lr}
 8008a70:	b0a9      	sub	sp, #164	@ 0xa4
 8008a72:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008a74:	23ac      	movs	r3, #172	@ 0xac
 8008a76:	2108      	movs	r1, #8
 8008a78:	185b      	adds	r3, r3, r1
 8008a7a:	19db      	adds	r3, r3, r7
 8008a7c:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	22a8      	movs	r2, #168	@ 0xa8
 8008a82:	1852      	adds	r2, r2, r1
 8008a84:	19d2      	adds	r2, r2, r7
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	2408      	movs	r4, #8
 8008a8a:	1938      	adds	r0, r7, r4
 8008a8c:	2196      	movs	r1, #150	@ 0x96
 8008a8e:	f01d fd4f 	bl	8026530 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008a92:	193b      	adds	r3, r7, r4
 8008a94:	0018      	movs	r0, r3
 8008a96:	f7f7 fb69 	bl	800016c <strlen>
 8008a9a:	0003      	movs	r3, r0
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	193b      	adds	r3, r7, r4
 8008aa0:	0011      	movs	r1, r2
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f01a fb90 	bl	80231c8 <CDC_Transmit_FS>
}
 8008aa8:	46c0      	nop			@ (mov r8, r8)
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b029      	add	sp, #164	@ 0xa4
 8008aae:	bc90      	pop	{r4, r7}
 8008ab0:	bc08      	pop	{r3}
 8008ab2:	b004      	add	sp, #16
 8008ab4:	4718      	bx	r3

08008ab6 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	000a      	movs	r2, r1
 8008ac0:	1cfb      	adds	r3, r7, #3
 8008ac2:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008ac4:	1cfb      	adds	r3, r7, #3
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d006      	beq.n	8008ada <PC_selectout+0x24>
    printf_USB(msg);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7ff ffcc 	bl	8008a6c <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008ad4:	200a      	movs	r0, #10
 8008ad6:	f00b fefd 	bl	80148d4 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	0018      	movs	r0, r3
 8008ade:	f01d fc1b 	bl	8026318 <iprintf>
//  }
}
 8008ae2:	46c0      	nop			@ (mov r8, r8)
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b002      	add	sp, #8
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <PC_show_Keys>:

void PC_show_Keys() {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008af0:	f001 f876 	bl	8009be0 <Check_USB_PowerOn>
 8008af4:	1e03      	subs	r3, r0, #0
 8008af6:	d005      	beq.n	8008b04 <PC_show_Keys+0x18>
    usb_out = true;
 8008af8:	4b01      	ldr	r3, [pc, #4]	@ (8008b00 <PC_show_Keys+0x14>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e004      	b.n	8008b0a <PC_show_Keys+0x1e>
 8008b00:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008b04:	4bfd      	ldr	r3, [pc, #1012]	@ (8008efc <PC_show_Keys+0x410>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008b0a:	4afd      	ldr	r2, [pc, #1012]	@ (8008f00 <PC_show_Keys+0x414>)
 8008b0c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f04 <PC_show_Keys+0x418>)
 8008b0e:	0011      	movs	r1, r2
 8008b10:	0018      	movs	r0, r3
 8008b12:	f01d fc71 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b16:	4bf9      	ldr	r3, [pc, #996]	@ (8008efc <PC_show_Keys+0x410>)
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	4bfa      	ldr	r3, [pc, #1000]	@ (8008f04 <PC_show_Keys+0x418>)
 8008b1c:	0011      	movs	r1, r2
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f7ff ffc9 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008b24:	4bf8      	ldr	r3, [pc, #992]	@ (8008f08 <PC_show_Keys+0x41c>)
 8008b26:	48f9      	ldr	r0, [pc, #996]	@ (8008f0c <PC_show_Keys+0x420>)
 8008b28:	220c      	movs	r2, #12
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	f003 fad2 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008b30:	4af5      	ldr	r2, [pc, #980]	@ (8008f08 <PC_show_Keys+0x41c>)
 8008b32:	4bf7      	ldr	r3, [pc, #988]	@ (8008f10 <PC_show_Keys+0x424>)
 8008b34:	0011      	movs	r1, r2
 8008b36:	0018      	movs	r0, r3
 8008b38:	f7fc fbd2 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008b3c:	4bf4      	ldr	r3, [pc, #976]	@ (8008f10 <PC_show_Keys+0x424>)
 8008b3e:	49f5      	ldr	r1, [pc, #980]	@ (8008f14 <PC_show_Keys+0x428>)
 8008b40:	48f0      	ldr	r0, [pc, #960]	@ (8008f04 <PC_show_Keys+0x418>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	f01d fc58 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b48:	4bec      	ldr	r3, [pc, #944]	@ (8008efc <PC_show_Keys+0x410>)
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	4bed      	ldr	r3, [pc, #948]	@ (8008f04 <PC_show_Keys+0x418>)
 8008b4e:	0011      	movs	r1, r2
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7ff ffb0 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008b56:	4bf0      	ldr	r3, [pc, #960]	@ (8008f18 <PC_show_Keys+0x42c>)
 8008b58:	48f0      	ldr	r0, [pc, #960]	@ (8008f1c <PC_show_Keys+0x430>)
 8008b5a:	220c      	movs	r2, #12
 8008b5c:	0019      	movs	r1, r3
 8008b5e:	f003 fab9 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008b62:	4aed      	ldr	r2, [pc, #948]	@ (8008f18 <PC_show_Keys+0x42c>)
 8008b64:	4bea      	ldr	r3, [pc, #936]	@ (8008f10 <PC_show_Keys+0x424>)
 8008b66:	0011      	movs	r1, r2
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7fc fbb9 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008b6e:	4be8      	ldr	r3, [pc, #928]	@ (8008f10 <PC_show_Keys+0x424>)
 8008b70:	49eb      	ldr	r1, [pc, #940]	@ (8008f20 <PC_show_Keys+0x434>)
 8008b72:	48e4      	ldr	r0, [pc, #912]	@ (8008f04 <PC_show_Keys+0x418>)
 8008b74:	2201      	movs	r2, #1
 8008b76:	f01d fc3f 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b7a:	4be0      	ldr	r3, [pc, #896]	@ (8008efc <PC_show_Keys+0x410>)
 8008b7c:	781a      	ldrb	r2, [r3, #0]
 8008b7e:	4be1      	ldr	r3, [pc, #900]	@ (8008f04 <PC_show_Keys+0x418>)
 8008b80:	0011      	movs	r1, r2
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7ff ff97 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008b88:	4be6      	ldr	r3, [pc, #920]	@ (8008f24 <PC_show_Keys+0x438>)
 8008b8a:	48e7      	ldr	r0, [pc, #924]	@ (8008f28 <PC_show_Keys+0x43c>)
 8008b8c:	220c      	movs	r2, #12
 8008b8e:	0019      	movs	r1, r3
 8008b90:	f003 faa0 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008b94:	4ae3      	ldr	r2, [pc, #908]	@ (8008f24 <PC_show_Keys+0x438>)
 8008b96:	4bde      	ldr	r3, [pc, #888]	@ (8008f10 <PC_show_Keys+0x424>)
 8008b98:	0011      	movs	r1, r2
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f7fc fba0 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008ba0:	4bdb      	ldr	r3, [pc, #876]	@ (8008f10 <PC_show_Keys+0x424>)
 8008ba2:	49e2      	ldr	r1, [pc, #904]	@ (8008f2c <PC_show_Keys+0x440>)
 8008ba4:	48d7      	ldr	r0, [pc, #860]	@ (8008f04 <PC_show_Keys+0x418>)
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f01d fc26 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bac:	4bd3      	ldr	r3, [pc, #844]	@ (8008efc <PC_show_Keys+0x410>)
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	4bd4      	ldr	r3, [pc, #848]	@ (8008f04 <PC_show_Keys+0x418>)
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7ff ff7e 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008bba:	4bdd      	ldr	r3, [pc, #884]	@ (8008f30 <PC_show_Keys+0x444>)
 8008bbc:	48dd      	ldr	r0, [pc, #884]	@ (8008f34 <PC_show_Keys+0x448>)
 8008bbe:	220c      	movs	r2, #12
 8008bc0:	0019      	movs	r1, r3
 8008bc2:	f003 fa87 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008bc6:	4ada      	ldr	r2, [pc, #872]	@ (8008f30 <PC_show_Keys+0x444>)
 8008bc8:	4bd1      	ldr	r3, [pc, #836]	@ (8008f10 <PC_show_Keys+0x424>)
 8008bca:	0011      	movs	r1, r2
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7fc fb87 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008bd2:	4bcf      	ldr	r3, [pc, #828]	@ (8008f10 <PC_show_Keys+0x424>)
 8008bd4:	49d8      	ldr	r1, [pc, #864]	@ (8008f38 <PC_show_Keys+0x44c>)
 8008bd6:	48cb      	ldr	r0, [pc, #812]	@ (8008f04 <PC_show_Keys+0x418>)
 8008bd8:	2203      	movs	r2, #3
 8008bda:	f01d fc0d 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bde:	4bc7      	ldr	r3, [pc, #796]	@ (8008efc <PC_show_Keys+0x410>)
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	4bc8      	ldr	r3, [pc, #800]	@ (8008f04 <PC_show_Keys+0x418>)
 8008be4:	0011      	movs	r1, r2
 8008be6:	0018      	movs	r0, r3
 8008be8:	f7ff ff65 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008bec:	4bd3      	ldr	r3, [pc, #844]	@ (8008f3c <PC_show_Keys+0x450>)
 8008bee:	48d4      	ldr	r0, [pc, #848]	@ (8008f40 <PC_show_Keys+0x454>)
 8008bf0:	220c      	movs	r2, #12
 8008bf2:	0019      	movs	r1, r3
 8008bf4:	f003 fa6e 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008bf8:	4ad0      	ldr	r2, [pc, #832]	@ (8008f3c <PC_show_Keys+0x450>)
 8008bfa:	4bc5      	ldr	r3, [pc, #788]	@ (8008f10 <PC_show_Keys+0x424>)
 8008bfc:	0011      	movs	r1, r2
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f7fc fb6e 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008c04:	4bc2      	ldr	r3, [pc, #776]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c06:	49cf      	ldr	r1, [pc, #828]	@ (8008f44 <PC_show_Keys+0x458>)
 8008c08:	48be      	ldr	r0, [pc, #760]	@ (8008f04 <PC_show_Keys+0x418>)
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	f01d fbf4 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c10:	4bba      	ldr	r3, [pc, #744]	@ (8008efc <PC_show_Keys+0x410>)
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	4bbb      	ldr	r3, [pc, #748]	@ (8008f04 <PC_show_Keys+0x418>)
 8008c16:	0011      	movs	r1, r2
 8008c18:	0018      	movs	r0, r3
 8008c1a:	f7ff ff4c 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008c1e:	4bca      	ldr	r3, [pc, #808]	@ (8008f48 <PC_show_Keys+0x45c>)
 8008c20:	48ca      	ldr	r0, [pc, #808]	@ (8008f4c <PC_show_Keys+0x460>)
 8008c22:	220c      	movs	r2, #12
 8008c24:	0019      	movs	r1, r3
 8008c26:	f003 fa55 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008c2a:	4ac7      	ldr	r2, [pc, #796]	@ (8008f48 <PC_show_Keys+0x45c>)
 8008c2c:	4bb8      	ldr	r3, [pc, #736]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c2e:	0011      	movs	r1, r2
 8008c30:	0018      	movs	r0, r3
 8008c32:	f7fc fb55 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008c36:	4bb6      	ldr	r3, [pc, #728]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c38:	49c5      	ldr	r1, [pc, #788]	@ (8008f50 <PC_show_Keys+0x464>)
 8008c3a:	48b2      	ldr	r0, [pc, #712]	@ (8008f04 <PC_show_Keys+0x418>)
 8008c3c:	2205      	movs	r2, #5
 8008c3e:	f01d fbdb 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c42:	4bae      	ldr	r3, [pc, #696]	@ (8008efc <PC_show_Keys+0x410>)
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	4baf      	ldr	r3, [pc, #700]	@ (8008f04 <PC_show_Keys+0x418>)
 8008c48:	0011      	movs	r1, r2
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f7ff ff33 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008c50:	4bc0      	ldr	r3, [pc, #768]	@ (8008f54 <PC_show_Keys+0x468>)
 8008c52:	48c1      	ldr	r0, [pc, #772]	@ (8008f58 <PC_show_Keys+0x46c>)
 8008c54:	220c      	movs	r2, #12
 8008c56:	0019      	movs	r1, r3
 8008c58:	f003 fa3c 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008c5c:	4abd      	ldr	r2, [pc, #756]	@ (8008f54 <PC_show_Keys+0x468>)
 8008c5e:	4bac      	ldr	r3, [pc, #688]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c60:	0011      	movs	r1, r2
 8008c62:	0018      	movs	r0, r3
 8008c64:	f7fc fb3c 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008c68:	4ba9      	ldr	r3, [pc, #676]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c6a:	49bc      	ldr	r1, [pc, #752]	@ (8008f5c <PC_show_Keys+0x470>)
 8008c6c:	48a5      	ldr	r0, [pc, #660]	@ (8008f04 <PC_show_Keys+0x418>)
 8008c6e:	2206      	movs	r2, #6
 8008c70:	f01d fbc2 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c74:	4ba1      	ldr	r3, [pc, #644]	@ (8008efc <PC_show_Keys+0x410>)
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	4ba2      	ldr	r3, [pc, #648]	@ (8008f04 <PC_show_Keys+0x418>)
 8008c7a:	0011      	movs	r1, r2
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f7ff ff1a 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008c82:	4bb7      	ldr	r3, [pc, #732]	@ (8008f60 <PC_show_Keys+0x474>)
 8008c84:	48b7      	ldr	r0, [pc, #732]	@ (8008f64 <PC_show_Keys+0x478>)
 8008c86:	220c      	movs	r2, #12
 8008c88:	0019      	movs	r1, r3
 8008c8a:	f003 fa23 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008c8e:	4ab4      	ldr	r2, [pc, #720]	@ (8008f60 <PC_show_Keys+0x474>)
 8008c90:	4b9f      	ldr	r3, [pc, #636]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c92:	0011      	movs	r1, r2
 8008c94:	0018      	movs	r0, r3
 8008c96:	f7fc fb23 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008c9a:	4b9d      	ldr	r3, [pc, #628]	@ (8008f10 <PC_show_Keys+0x424>)
 8008c9c:	49b2      	ldr	r1, [pc, #712]	@ (8008f68 <PC_show_Keys+0x47c>)
 8008c9e:	4899      	ldr	r0, [pc, #612]	@ (8008f04 <PC_show_Keys+0x418>)
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	f01d fba9 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ca6:	4b95      	ldr	r3, [pc, #596]	@ (8008efc <PC_show_Keys+0x410>)
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	4b96      	ldr	r3, [pc, #600]	@ (8008f04 <PC_show_Keys+0x418>)
 8008cac:	0011      	movs	r1, r2
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f7ff ff01 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008cb4:	4bad      	ldr	r3, [pc, #692]	@ (8008f6c <PC_show_Keys+0x480>)
 8008cb6:	48ae      	ldr	r0, [pc, #696]	@ (8008f70 <PC_show_Keys+0x484>)
 8008cb8:	220c      	movs	r2, #12
 8008cba:	0019      	movs	r1, r3
 8008cbc:	f003 fa0a 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008cc0:	4aaa      	ldr	r2, [pc, #680]	@ (8008f6c <PC_show_Keys+0x480>)
 8008cc2:	4b93      	ldr	r3, [pc, #588]	@ (8008f10 <PC_show_Keys+0x424>)
 8008cc4:	0011      	movs	r1, r2
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f7fc fb0a 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008ccc:	4b90      	ldr	r3, [pc, #576]	@ (8008f10 <PC_show_Keys+0x424>)
 8008cce:	49a9      	ldr	r1, [pc, #676]	@ (8008f74 <PC_show_Keys+0x488>)
 8008cd0:	488c      	ldr	r0, [pc, #560]	@ (8008f04 <PC_show_Keys+0x418>)
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	f01d fb90 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cd8:	4b88      	ldr	r3, [pc, #544]	@ (8008efc <PC_show_Keys+0x410>)
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	4b89      	ldr	r3, [pc, #548]	@ (8008f04 <PC_show_Keys+0x418>)
 8008cde:	0011      	movs	r1, r2
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f7ff fee8 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008ce6:	4ba4      	ldr	r3, [pc, #656]	@ (8008f78 <PC_show_Keys+0x48c>)
 8008ce8:	48a4      	ldr	r0, [pc, #656]	@ (8008f7c <PC_show_Keys+0x490>)
 8008cea:	220c      	movs	r2, #12
 8008cec:	0019      	movs	r1, r3
 8008cee:	f003 f9f1 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008cf2:	4aa1      	ldr	r2, [pc, #644]	@ (8008f78 <PC_show_Keys+0x48c>)
 8008cf4:	4b86      	ldr	r3, [pc, #536]	@ (8008f10 <PC_show_Keys+0x424>)
 8008cf6:	0011      	movs	r1, r2
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7fc faf1 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008cfe:	4b84      	ldr	r3, [pc, #528]	@ (8008f10 <PC_show_Keys+0x424>)
 8008d00:	499f      	ldr	r1, [pc, #636]	@ (8008f80 <PC_show_Keys+0x494>)
 8008d02:	4880      	ldr	r0, [pc, #512]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d04:	2209      	movs	r2, #9
 8008d06:	f01d fb77 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8008efc <PC_show_Keys+0x410>)
 8008d0c:	781a      	ldrb	r2, [r3, #0]
 8008d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d10:	0011      	movs	r1, r2
 8008d12:	0018      	movs	r0, r3
 8008d14:	f7ff fecf 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008d18:	4b9a      	ldr	r3, [pc, #616]	@ (8008f84 <PC_show_Keys+0x498>)
 8008d1a:	489b      	ldr	r0, [pc, #620]	@ (8008f88 <PC_show_Keys+0x49c>)
 8008d1c:	220c      	movs	r2, #12
 8008d1e:	0019      	movs	r1, r3
 8008d20:	f003 f9d8 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008d24:	4a97      	ldr	r2, [pc, #604]	@ (8008f84 <PC_show_Keys+0x498>)
 8008d26:	4b7a      	ldr	r3, [pc, #488]	@ (8008f10 <PC_show_Keys+0x424>)
 8008d28:	0011      	movs	r1, r2
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f7fc fad8 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008d30:	4b77      	ldr	r3, [pc, #476]	@ (8008f10 <PC_show_Keys+0x424>)
 8008d32:	4996      	ldr	r1, [pc, #600]	@ (8008f8c <PC_show_Keys+0x4a0>)
 8008d34:	4873      	ldr	r0, [pc, #460]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d36:	220a      	movs	r2, #10
 8008d38:	f01d fb5e 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8008efc <PC_show_Keys+0x410>)
 8008d3e:	781a      	ldrb	r2, [r3, #0]
 8008d40:	4b70      	ldr	r3, [pc, #448]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d42:	0011      	movs	r1, r2
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7ff feb6 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008d4a:	4b91      	ldr	r3, [pc, #580]	@ (8008f90 <PC_show_Keys+0x4a4>)
 8008d4c:	4891      	ldr	r0, [pc, #580]	@ (8008f94 <PC_show_Keys+0x4a8>)
 8008d4e:	220c      	movs	r2, #12
 8008d50:	0019      	movs	r1, r3
 8008d52:	f003 f9bf 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008d56:	4a8e      	ldr	r2, [pc, #568]	@ (8008f90 <PC_show_Keys+0x4a4>)
 8008d58:	4b6d      	ldr	r3, [pc, #436]	@ (8008f10 <PC_show_Keys+0x424>)
 8008d5a:	0011      	movs	r1, r2
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7fc fabf 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status ----------------: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008d62:	4b6b      	ldr	r3, [pc, #428]	@ (8008f10 <PC_show_Keys+0x424>)
 8008d64:	498c      	ldr	r1, [pc, #560]	@ (8008f98 <PC_show_Keys+0x4ac>)
 8008d66:	4867      	ldr	r0, [pc, #412]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d68:	220b      	movs	r2, #11
 8008d6a:	f01d fb45 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d6e:	4b63      	ldr	r3, [pc, #396]	@ (8008efc <PC_show_Keys+0x410>)
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	4b64      	ldr	r3, [pc, #400]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d74:	0011      	movs	r1, r2
 8008d76:	0018      	movs	r0, r3
 8008d78:	f7ff fe9d 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008d7c:	4b87      	ldr	r3, [pc, #540]	@ (8008f9c <PC_show_Keys+0x4b0>)
 8008d7e:	4888      	ldr	r0, [pc, #544]	@ (8008fa0 <PC_show_Keys+0x4b4>)
 8008d80:	2220      	movs	r2, #32
 8008d82:	0019      	movs	r1, r3
 8008d84:	f003 f9a6 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008d88:	4986      	ldr	r1, [pc, #536]	@ (8008fa4 <PC_show_Keys+0x4b8>)
 8008d8a:	4b5e      	ldr	r3, [pc, #376]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d8c:	220c      	movs	r2, #12
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f01d fb32 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d94:	4b59      	ldr	r3, [pc, #356]	@ (8008efc <PC_show_Keys+0x410>)
 8008d96:	781a      	ldrb	r2, [r3, #0]
 8008d98:	4b5a      	ldr	r3, [pc, #360]	@ (8008f04 <PC_show_Keys+0x418>)
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f7ff fe8a 	bl	8008ab6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008da2:	4a7e      	ldr	r2, [pc, #504]	@ (8008f9c <PC_show_Keys+0x4b0>)
 8008da4:	4980      	ldr	r1, [pc, #512]	@ (8008fa8 <PC_show_Keys+0x4bc>)
 8008da6:	4b57      	ldr	r3, [pc, #348]	@ (8008f04 <PC_show_Keys+0x418>)
 8008da8:	0018      	movs	r0, r3
 8008daa:	f01d fb25 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dae:	4b53      	ldr	r3, [pc, #332]	@ (8008efc <PC_show_Keys+0x410>)
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	4b54      	ldr	r3, [pc, #336]	@ (8008f04 <PC_show_Keys+0x418>)
 8008db4:	0011      	movs	r1, r2
 8008db6:	0018      	movs	r0, r3
 8008db8:	f7ff fe7d 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8008fac <PC_show_Keys+0x4c0>)
 8008dbe:	487c      	ldr	r0, [pc, #496]	@ (8008fb0 <PC_show_Keys+0x4c4>)
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	0019      	movs	r1, r3
 8008dc4:	f003 f986 	bl	800c0d4 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008dc8:	497a      	ldr	r1, [pc, #488]	@ (8008fb4 <PC_show_Keys+0x4c8>)
 8008dca:	4b4e      	ldr	r3, [pc, #312]	@ (8008f04 <PC_show_Keys+0x418>)
 8008dcc:	220d      	movs	r2, #13
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f01d fb12 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dd4:	4b49      	ldr	r3, [pc, #292]	@ (8008efc <PC_show_Keys+0x410>)
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8008f04 <PC_show_Keys+0x418>)
 8008dda:	0011      	movs	r1, r2
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff fe6a 	bl	8008ab6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008de2:	4a72      	ldr	r2, [pc, #456]	@ (8008fac <PC_show_Keys+0x4c0>)
 8008de4:	4970      	ldr	r1, [pc, #448]	@ (8008fa8 <PC_show_Keys+0x4bc>)
 8008de6:	4b47      	ldr	r3, [pc, #284]	@ (8008f04 <PC_show_Keys+0x418>)
 8008de8:	0018      	movs	r0, r3
 8008dea:	f01d fb05 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dee:	4b43      	ldr	r3, [pc, #268]	@ (8008efc <PC_show_Keys+0x410>)
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	4b44      	ldr	r3, [pc, #272]	@ (8008f04 <PC_show_Keys+0x418>)
 8008df4:	0011      	movs	r1, r2
 8008df6:	0018      	movs	r0, r3
 8008df8:	f7ff fe5d 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008dfc:	4b6e      	ldr	r3, [pc, #440]	@ (8008fb8 <PC_show_Keys+0x4cc>)
 8008dfe:	486f      	ldr	r0, [pc, #444]	@ (8008fbc <PC_show_Keys+0x4d0>)
 8008e00:	2240      	movs	r2, #64	@ 0x40
 8008e02:	0019      	movs	r1, r3
 8008e04:	f003 f966 	bl	800c0d4 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008e08:	496d      	ldr	r1, [pc, #436]	@ (8008fc0 <PC_show_Keys+0x4d4>)
 8008e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e0c:	220e      	movs	r2, #14
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f01d faf2 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e14:	4b39      	ldr	r3, [pc, #228]	@ (8008efc <PC_show_Keys+0x410>)
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	4b3a      	ldr	r3, [pc, #232]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e1a:	0011      	movs	r1, r2
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f7ff fe4a 	bl	8008ab6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008e22:	4a65      	ldr	r2, [pc, #404]	@ (8008fb8 <PC_show_Keys+0x4cc>)
 8008e24:	4960      	ldr	r1, [pc, #384]	@ (8008fa8 <PC_show_Keys+0x4bc>)
 8008e26:	4b37      	ldr	r3, [pc, #220]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e28:	0018      	movs	r0, r3
 8008e2a:	f01d fae5 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e2e:	4b33      	ldr	r3, [pc, #204]	@ (8008efc <PC_show_Keys+0x410>)
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	4b34      	ldr	r3, [pc, #208]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e34:	0011      	movs	r1, r2
 8008e36:	0018      	movs	r0, r3
 8008e38:	f7ff fe3d 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008e3c:	4b61      	ldr	r3, [pc, #388]	@ (8008fc4 <PC_show_Keys+0x4d8>)
 8008e3e:	4862      	ldr	r0, [pc, #392]	@ (8008fc8 <PC_show_Keys+0x4dc>)
 8008e40:	220c      	movs	r2, #12
 8008e42:	0019      	movs	r1, r3
 8008e44:	f003 f946 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008e48:	4a5e      	ldr	r2, [pc, #376]	@ (8008fc4 <PC_show_Keys+0x4d8>)
 8008e4a:	4b31      	ldr	r3, [pc, #196]	@ (8008f10 <PC_show_Keys+0x424>)
 8008e4c:	0011      	movs	r1, r2
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f7fc fa46 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008e54:	4b2e      	ldr	r3, [pc, #184]	@ (8008f10 <PC_show_Keys+0x424>)
 8008e56:	495d      	ldr	r1, [pc, #372]	@ (8008fcc <PC_show_Keys+0x4e0>)
 8008e58:	482a      	ldr	r0, [pc, #168]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e5a:	220f      	movs	r2, #15
 8008e5c:	f01d facc 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e60:	4b26      	ldr	r3, [pc, #152]	@ (8008efc <PC_show_Keys+0x410>)
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	4b27      	ldr	r3, [pc, #156]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e66:	0011      	movs	r1, r2
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7ff fe24 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008e6e:	4b58      	ldr	r3, [pc, #352]	@ (8008fd0 <PC_show_Keys+0x4e4>)
 8008e70:	4858      	ldr	r0, [pc, #352]	@ (8008fd4 <PC_show_Keys+0x4e8>)
 8008e72:	220c      	movs	r2, #12
 8008e74:	0019      	movs	r1, r3
 8008e76:	f003 f92d 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008e7a:	4a55      	ldr	r2, [pc, #340]	@ (8008fd0 <PC_show_Keys+0x4e4>)
 8008e7c:	4b24      	ldr	r3, [pc, #144]	@ (8008f10 <PC_show_Keys+0x424>)
 8008e7e:	0011      	movs	r1, r2
 8008e80:	0018      	movs	r0, r3
 8008e82:	f7fc fa2d 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008e86:	4b22      	ldr	r3, [pc, #136]	@ (8008f10 <PC_show_Keys+0x424>)
 8008e88:	4953      	ldr	r1, [pc, #332]	@ (8008fd8 <PC_show_Keys+0x4ec>)
 8008e8a:	481e      	ldr	r0, [pc, #120]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e8c:	2210      	movs	r2, #16
 8008e8e:	f01d fab3 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e92:	4b1a      	ldr	r3, [pc, #104]	@ (8008efc <PC_show_Keys+0x410>)
 8008e94:	781a      	ldrb	r2, [r3, #0]
 8008e96:	4b1b      	ldr	r3, [pc, #108]	@ (8008f04 <PC_show_Keys+0x418>)
 8008e98:	0011      	movs	r1, r2
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7ff fe0b 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8008fdc <PC_show_Keys+0x4f0>)
 8008ea2:	484f      	ldr	r0, [pc, #316]	@ (8008fe0 <PC_show_Keys+0x4f4>)
 8008ea4:	220c      	movs	r2, #12
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	f003 f914 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008eac:	4a4b      	ldr	r2, [pc, #300]	@ (8008fdc <PC_show_Keys+0x4f0>)
 8008eae:	4b18      	ldr	r3, [pc, #96]	@ (8008f10 <PC_show_Keys+0x424>)
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7fc fa14 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008eb8:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <PC_show_Keys+0x424>)
 8008eba:	494a      	ldr	r1, [pc, #296]	@ (8008fe4 <PC_show_Keys+0x4f8>)
 8008ebc:	4811      	ldr	r0, [pc, #68]	@ (8008f04 <PC_show_Keys+0x418>)
 8008ebe:	2211      	movs	r2, #17
 8008ec0:	f01d fa9a 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8008efc <PC_show_Keys+0x410>)
 8008ec6:	781a      	ldrb	r2, [r3, #0]
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <PC_show_Keys+0x418>)
 8008eca:	0011      	movs	r1, r2
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f7ff fdf2 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008ed2:	4b45      	ldr	r3, [pc, #276]	@ (8008fe8 <PC_show_Keys+0x4fc>)
 8008ed4:	4845      	ldr	r0, [pc, #276]	@ (8008fec <PC_show_Keys+0x500>)
 8008ed6:	220c      	movs	r2, #12
 8008ed8:	0019      	movs	r1, r3
 8008eda:	f003 f8fb 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008ede:	4a42      	ldr	r2, [pc, #264]	@ (8008fe8 <PC_show_Keys+0x4fc>)
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <PC_show_Keys+0x424>)
 8008ee2:	0011      	movs	r1, r2
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7fc f9fb 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008eea:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <PC_show_Keys+0x424>)
 8008eec:	4940      	ldr	r1, [pc, #256]	@ (8008ff0 <PC_show_Keys+0x504>)
 8008eee:	4805      	ldr	r0, [pc, #20]	@ (8008f04 <PC_show_Keys+0x418>)
 8008ef0:	2212      	movs	r2, #18
 8008ef2:	f01d fa81 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ef6:	4b01      	ldr	r3, [pc, #4]	@ (8008efc <PC_show_Keys+0x410>)
 8008ef8:	781a      	ldrb	r2, [r3, #0]
 8008efa:	e07b      	b.n	8008ff4 <PC_show_Keys+0x508>
 8008efc:	20000b51 	.word	0x20000b51
 8008f00:	0802b4d8 	.word	0x0802b4d8
 8008f04:	20000b54 	.word	0x20000b54
 8008f08:	20000b9c 	.word	0x20000b9c
 8008f0c:	08080000 	.word	0x08080000
 8008f10:	20000ba8 	.word	0x20000ba8
 8008f14:	0802b4f8 	.word	0x0802b4f8
 8008f18:	20000bc4 	.word	0x20000bc4
 8008f1c:	0808000c 	.word	0x0808000c
 8008f20:	0802b528 	.word	0x0802b528
 8008f24:	20000bd0 	.word	0x20000bd0
 8008f28:	08080018 	.word	0x08080018
 8008f2c:	0802b558 	.word	0x0802b558
 8008f30:	20000bdc 	.word	0x20000bdc
 8008f34:	08080024 	.word	0x08080024
 8008f38:	0802b588 	.word	0x0802b588
 8008f3c:	20000be8 	.word	0x20000be8
 8008f40:	08080030 	.word	0x08080030
 8008f44:	0802b5b8 	.word	0x0802b5b8
 8008f48:	20000bf4 	.word	0x20000bf4
 8008f4c:	08080048 	.word	0x08080048
 8008f50:	0802b5e8 	.word	0x0802b5e8
 8008f54:	20000c00 	.word	0x20000c00
 8008f58:	0808003c 	.word	0x0808003c
 8008f5c:	0802b618 	.word	0x0802b618
 8008f60:	20000c0c 	.word	0x20000c0c
 8008f64:	08080054 	.word	0x08080054
 8008f68:	0802b648 	.word	0x0802b648
 8008f6c:	20000c18 	.word	0x20000c18
 8008f70:	08080060 	.word	0x08080060
 8008f74:	0802b678 	.word	0x0802b678
 8008f78:	20000c24 	.word	0x20000c24
 8008f7c:	0808006c 	.word	0x0808006c
 8008f80:	0802b6a8 	.word	0x0802b6a8
 8008f84:	20000c30 	.word	0x20000c30
 8008f88:	08080078 	.word	0x08080078
 8008f8c:	0802b6d8 	.word	0x0802b6d8
 8008f90:	20000c3c 	.word	0x20000c3c
 8008f94:	08080084 	.word	0x08080084
 8008f98:	0802b708 	.word	0x0802b708
 8008f9c:	20000c48 	.word	0x20000c48
 8008fa0:	08080090 	.word	0x08080090
 8008fa4:	0802b738 	.word	0x0802b738
 8008fa8:	0802b764 	.word	0x0802b764
 8008fac:	20000c68 	.word	0x20000c68
 8008fb0:	08080200 	.word	0x08080200
 8008fb4:	0802b76c 	.word	0x0802b76c
 8008fb8:	20000c88 	.word	0x20000c88
 8008fbc:	08080220 	.word	0x08080220
 8008fc0:	0802b798 	.word	0x0802b798
 8008fc4:	20000cc8 	.word	0x20000cc8
 8008fc8:	080800c8 	.word	0x080800c8
 8008fcc:	0802b7c4 	.word	0x0802b7c4
 8008fd0:	20000cd4 	.word	0x20000cd4
 8008fd4:	080800d4 	.word	0x080800d4
 8008fd8:	0802b7f4 	.word	0x0802b7f4
 8008fdc:	20000ce0 	.word	0x20000ce0
 8008fe0:	080800e0 	.word	0x080800e0
 8008fe4:	0802b824 	.word	0x0802b824
 8008fe8:	20000cec 	.word	0x20000cec
 8008fec:	080800ec 	.word	0x080800ec
 8008ff0:	0802b854 	.word	0x0802b854
 8008ff4:	4be2      	ldr	r3, [pc, #904]	@ (8009380 <PC_show_Keys+0x894>)
 8008ff6:	0011      	movs	r1, r2
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7ff fd5c 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008ffe:	4be1      	ldr	r3, [pc, #900]	@ (8009384 <PC_show_Keys+0x898>)
 8009000:	48e1      	ldr	r0, [pc, #900]	@ (8009388 <PC_show_Keys+0x89c>)
 8009002:	220c      	movs	r2, #12
 8009004:	0019      	movs	r1, r3
 8009006:	f003 f865 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 800900a:	4ade      	ldr	r2, [pc, #888]	@ (8009384 <PC_show_Keys+0x898>)
 800900c:	4bdf      	ldr	r3, [pc, #892]	@ (800938c <PC_show_Keys+0x8a0>)
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f7fc f965 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 8009016:	4bdd      	ldr	r3, [pc, #884]	@ (800938c <PC_show_Keys+0x8a0>)
 8009018:	49dd      	ldr	r1, [pc, #884]	@ (8009390 <PC_show_Keys+0x8a4>)
 800901a:	48d9      	ldr	r0, [pc, #868]	@ (8009380 <PC_show_Keys+0x894>)
 800901c:	2213      	movs	r2, #19
 800901e:	f01d f9eb 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009022:	4bdc      	ldr	r3, [pc, #880]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009024:	781a      	ldrb	r2, [r3, #0]
 8009026:	4bd6      	ldr	r3, [pc, #856]	@ (8009380 <PC_show_Keys+0x894>)
 8009028:	0011      	movs	r1, r2
 800902a:	0018      	movs	r0, r3
 800902c:	f7ff fd43 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8009030:	4bd9      	ldr	r3, [pc, #868]	@ (8009398 <PC_show_Keys+0x8ac>)
 8009032:	48da      	ldr	r0, [pc, #872]	@ (800939c <PC_show_Keys+0x8b0>)
 8009034:	220c      	movs	r2, #12
 8009036:	0019      	movs	r1, r3
 8009038:	f003 f84c 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 800903c:	4ad6      	ldr	r2, [pc, #856]	@ (8009398 <PC_show_Keys+0x8ac>)
 800903e:	4bd3      	ldr	r3, [pc, #844]	@ (800938c <PC_show_Keys+0x8a0>)
 8009040:	0011      	movs	r1, r2
 8009042:	0018      	movs	r0, r3
 8009044:	f7fc f94c 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 8009048:	4bd0      	ldr	r3, [pc, #832]	@ (800938c <PC_show_Keys+0x8a0>)
 800904a:	49d5      	ldr	r1, [pc, #852]	@ (80093a0 <PC_show_Keys+0x8b4>)
 800904c:	48cc      	ldr	r0, [pc, #816]	@ (8009380 <PC_show_Keys+0x894>)
 800904e:	2214      	movs	r2, #20
 8009050:	f01d f9d2 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009054:	4bcf      	ldr	r3, [pc, #828]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	4bc9      	ldr	r3, [pc, #804]	@ (8009380 <PC_show_Keys+0x894>)
 800905a:	0011      	movs	r1, r2
 800905c:	0018      	movs	r0, r3
 800905e:	f7ff fd2a 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8009062:	4bd0      	ldr	r3, [pc, #832]	@ (80093a4 <PC_show_Keys+0x8b8>)
 8009064:	48d0      	ldr	r0, [pc, #832]	@ (80093a8 <PC_show_Keys+0x8bc>)
 8009066:	220c      	movs	r2, #12
 8009068:	0019      	movs	r1, r3
 800906a:	f003 f833 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 800906e:	4acd      	ldr	r2, [pc, #820]	@ (80093a4 <PC_show_Keys+0x8b8>)
 8009070:	4bc6      	ldr	r3, [pc, #792]	@ (800938c <PC_show_Keys+0x8a0>)
 8009072:	0011      	movs	r1, r2
 8009074:	0018      	movs	r0, r3
 8009076:	f7fc f933 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 800907a:	4bc4      	ldr	r3, [pc, #784]	@ (800938c <PC_show_Keys+0x8a0>)
 800907c:	49cb      	ldr	r1, [pc, #812]	@ (80093ac <PC_show_Keys+0x8c0>)
 800907e:	48c0      	ldr	r0, [pc, #768]	@ (8009380 <PC_show_Keys+0x894>)
 8009080:	2215      	movs	r2, #21
 8009082:	f01d f9b9 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009086:	4bc3      	ldr	r3, [pc, #780]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	4bbd      	ldr	r3, [pc, #756]	@ (8009380 <PC_show_Keys+0x894>)
 800908c:	0011      	movs	r1, r2
 800908e:	0018      	movs	r0, r3
 8009090:	f7ff fd11 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8009094:	4bc6      	ldr	r3, [pc, #792]	@ (80093b0 <PC_show_Keys+0x8c4>)
 8009096:	48c7      	ldr	r0, [pc, #796]	@ (80093b4 <PC_show_Keys+0x8c8>)
 8009098:	220c      	movs	r2, #12
 800909a:	0019      	movs	r1, r3
 800909c:	f003 f81a 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80090a0:	4ac3      	ldr	r2, [pc, #780]	@ (80093b0 <PC_show_Keys+0x8c4>)
 80090a2:	4bba      	ldr	r3, [pc, #744]	@ (800938c <PC_show_Keys+0x8a0>)
 80090a4:	0011      	movs	r1, r2
 80090a6:	0018      	movs	r0, r3
 80090a8:	f7fc f91a 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 80090ac:	4bb7      	ldr	r3, [pc, #732]	@ (800938c <PC_show_Keys+0x8a0>)
 80090ae:	49c2      	ldr	r1, [pc, #776]	@ (80093b8 <PC_show_Keys+0x8cc>)
 80090b0:	48b3      	ldr	r0, [pc, #716]	@ (8009380 <PC_show_Keys+0x894>)
 80090b2:	2216      	movs	r2, #22
 80090b4:	f01d f9a0 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090b8:	4bb6      	ldr	r3, [pc, #728]	@ (8009394 <PC_show_Keys+0x8a8>)
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	4bb0      	ldr	r3, [pc, #704]	@ (8009380 <PC_show_Keys+0x894>)
 80090be:	0011      	movs	r1, r2
 80090c0:	0018      	movs	r0, r3
 80090c2:	f7ff fcf8 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 80090c6:	4bbd      	ldr	r3, [pc, #756]	@ (80093bc <PC_show_Keys+0x8d0>)
 80090c8:	48bd      	ldr	r0, [pc, #756]	@ (80093c0 <PC_show_Keys+0x8d4>)
 80090ca:	220c      	movs	r2, #12
 80090cc:	0019      	movs	r1, r3
 80090ce:	f003 f801 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 80090d2:	4aba      	ldr	r2, [pc, #744]	@ (80093bc <PC_show_Keys+0x8d0>)
 80090d4:	4bad      	ldr	r3, [pc, #692]	@ (800938c <PC_show_Keys+0x8a0>)
 80090d6:	0011      	movs	r1, r2
 80090d8:	0018      	movs	r0, r3
 80090da:	f7fc f901 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 80090de:	4bab      	ldr	r3, [pc, #684]	@ (800938c <PC_show_Keys+0x8a0>)
 80090e0:	49b8      	ldr	r1, [pc, #736]	@ (80093c4 <PC_show_Keys+0x8d8>)
 80090e2:	48a7      	ldr	r0, [pc, #668]	@ (8009380 <PC_show_Keys+0x894>)
 80090e4:	2217      	movs	r2, #23
 80090e6:	f01d f987 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090ea:	4baa      	ldr	r3, [pc, #680]	@ (8009394 <PC_show_Keys+0x8a8>)
 80090ec:	781a      	ldrb	r2, [r3, #0]
 80090ee:	4ba4      	ldr	r3, [pc, #656]	@ (8009380 <PC_show_Keys+0x894>)
 80090f0:	0011      	movs	r1, r2
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7ff fcdf 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 80090f8:	4bb3      	ldr	r3, [pc, #716]	@ (80093c8 <PC_show_Keys+0x8dc>)
 80090fa:	48b4      	ldr	r0, [pc, #720]	@ (80093cc <PC_show_Keys+0x8e0>)
 80090fc:	220c      	movs	r2, #12
 80090fe:	0019      	movs	r1, r3
 8009100:	f002 ffe8 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8009104:	4ab0      	ldr	r2, [pc, #704]	@ (80093c8 <PC_show_Keys+0x8dc>)
 8009106:	4ba1      	ldr	r3, [pc, #644]	@ (800938c <PC_show_Keys+0x8a0>)
 8009108:	0011      	movs	r1, r2
 800910a:	0018      	movs	r0, r3
 800910c:	f7fc f8e8 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 8009110:	4b9e      	ldr	r3, [pc, #632]	@ (800938c <PC_show_Keys+0x8a0>)
 8009112:	49af      	ldr	r1, [pc, #700]	@ (80093d0 <PC_show_Keys+0x8e4>)
 8009114:	489a      	ldr	r0, [pc, #616]	@ (8009380 <PC_show_Keys+0x894>)
 8009116:	2218      	movs	r2, #24
 8009118:	f01d f96e 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800911c:	4b9d      	ldr	r3, [pc, #628]	@ (8009394 <PC_show_Keys+0x8a8>)
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	4b97      	ldr	r3, [pc, #604]	@ (8009380 <PC_show_Keys+0x894>)
 8009122:	0011      	movs	r1, r2
 8009124:	0018      	movs	r0, r3
 8009126:	f7ff fcc6 	bl	8008ab6 <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800912a:	4baa      	ldr	r3, [pc, #680]	@ (80093d4 <PC_show_Keys+0x8e8>)
 800912c:	48aa      	ldr	r0, [pc, #680]	@ (80093d8 <PC_show_Keys+0x8ec>)
 800912e:	2230      	movs	r2, #48	@ 0x30
 8009130:	0019      	movs	r1, r3
 8009132:	f002 ffcf 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 8009136:	49a9      	ldr	r1, [pc, #676]	@ (80093dc <PC_show_Keys+0x8f0>)
 8009138:	4b91      	ldr	r3, [pc, #580]	@ (8009380 <PC_show_Keys+0x894>)
 800913a:	2219      	movs	r2, #25
 800913c:	0018      	movs	r0, r3
 800913e:	f01d f95b 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009142:	4b94      	ldr	r3, [pc, #592]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009144:	781a      	ldrb	r2, [r3, #0]
 8009146:	4b8e      	ldr	r3, [pc, #568]	@ (8009380 <PC_show_Keys+0x894>)
 8009148:	0011      	movs	r1, r2
 800914a:	0018      	movs	r0, r3
 800914c:	f7ff fcb3 	bl	8008ab6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 8009150:	4aa0      	ldr	r2, [pc, #640]	@ (80093d4 <PC_show_Keys+0x8e8>)
 8009152:	49a3      	ldr	r1, [pc, #652]	@ (80093e0 <PC_show_Keys+0x8f4>)
 8009154:	4b8a      	ldr	r3, [pc, #552]	@ (8009380 <PC_show_Keys+0x894>)
 8009156:	0018      	movs	r0, r3
 8009158:	f01d f94e 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800915c:	4b8d      	ldr	r3, [pc, #564]	@ (8009394 <PC_show_Keys+0x8a8>)
 800915e:	781a      	ldrb	r2, [r3, #0]
 8009160:	4b87      	ldr	r3, [pc, #540]	@ (8009380 <PC_show_Keys+0x894>)
 8009162:	0011      	movs	r1, r2
 8009164:	0018      	movs	r0, r3
 8009166:	f7ff fca6 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 800916a:	4b9e      	ldr	r3, [pc, #632]	@ (80093e4 <PC_show_Keys+0x8f8>)
 800916c:	489e      	ldr	r0, [pc, #632]	@ (80093e8 <PC_show_Keys+0x8fc>)
 800916e:	2230      	movs	r2, #48	@ 0x30
 8009170:	0019      	movs	r1, r3
 8009172:	f002 ffaf 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 8009176:	499d      	ldr	r1, [pc, #628]	@ (80093ec <PC_show_Keys+0x900>)
 8009178:	4b81      	ldr	r3, [pc, #516]	@ (8009380 <PC_show_Keys+0x894>)
 800917a:	221a      	movs	r2, #26
 800917c:	0018      	movs	r0, r3
 800917e:	f01d f93b 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009182:	4b84      	ldr	r3, [pc, #528]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009184:	781a      	ldrb	r2, [r3, #0]
 8009186:	4b7e      	ldr	r3, [pc, #504]	@ (8009380 <PC_show_Keys+0x894>)
 8009188:	0011      	movs	r1, r2
 800918a:	0018      	movs	r0, r3
 800918c:	f7ff fc93 	bl	8008ab6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 8009190:	4a94      	ldr	r2, [pc, #592]	@ (80093e4 <PC_show_Keys+0x8f8>)
 8009192:	4993      	ldr	r1, [pc, #588]	@ (80093e0 <PC_show_Keys+0x8f4>)
 8009194:	4b7a      	ldr	r3, [pc, #488]	@ (8009380 <PC_show_Keys+0x894>)
 8009196:	0018      	movs	r0, r3
 8009198:	f01d f92e 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800919c:	4b7d      	ldr	r3, [pc, #500]	@ (8009394 <PC_show_Keys+0x8a8>)
 800919e:	781a      	ldrb	r2, [r3, #0]
 80091a0:	4b77      	ldr	r3, [pc, #476]	@ (8009380 <PC_show_Keys+0x894>)
 80091a2:	0011      	movs	r1, r2
 80091a4:	0018      	movs	r0, r3
 80091a6:	f7ff fc86 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80091aa:	4b91      	ldr	r3, [pc, #580]	@ (80093f0 <PC_show_Keys+0x904>)
 80091ac:	4891      	ldr	r0, [pc, #580]	@ (80093f4 <PC_show_Keys+0x908>)
 80091ae:	2230      	movs	r2, #48	@ 0x30
 80091b0:	0019      	movs	r1, r3
 80091b2:	f002 ff8f 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 80091b6:	4990      	ldr	r1, [pc, #576]	@ (80093f8 <PC_show_Keys+0x90c>)
 80091b8:	4b71      	ldr	r3, [pc, #452]	@ (8009380 <PC_show_Keys+0x894>)
 80091ba:	221b      	movs	r2, #27
 80091bc:	0018      	movs	r0, r3
 80091be:	f01d f91b 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091c2:	4b74      	ldr	r3, [pc, #464]	@ (8009394 <PC_show_Keys+0x8a8>)
 80091c4:	781a      	ldrb	r2, [r3, #0]
 80091c6:	4b6e      	ldr	r3, [pc, #440]	@ (8009380 <PC_show_Keys+0x894>)
 80091c8:	0011      	movs	r1, r2
 80091ca:	0018      	movs	r0, r3
 80091cc:	f7ff fc73 	bl	8008ab6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 80091d0:	4a87      	ldr	r2, [pc, #540]	@ (80093f0 <PC_show_Keys+0x904>)
 80091d2:	4983      	ldr	r1, [pc, #524]	@ (80093e0 <PC_show_Keys+0x8f4>)
 80091d4:	4b6a      	ldr	r3, [pc, #424]	@ (8009380 <PC_show_Keys+0x894>)
 80091d6:	0018      	movs	r0, r3
 80091d8:	f01d f90e 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091dc:	4b6d      	ldr	r3, [pc, #436]	@ (8009394 <PC_show_Keys+0x8a8>)
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	4b67      	ldr	r3, [pc, #412]	@ (8009380 <PC_show_Keys+0x894>)
 80091e2:	0011      	movs	r1, r2
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7ff fc66 	bl	8008ab6 <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80091ea:	4b84      	ldr	r3, [pc, #528]	@ (80093fc <PC_show_Keys+0x910>)
 80091ec:	4884      	ldr	r0, [pc, #528]	@ (8009400 <PC_show_Keys+0x914>)
 80091ee:	220c      	movs	r2, #12
 80091f0:	0019      	movs	r1, r3
 80091f2:	f002 ff6f 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80091f6:	4a81      	ldr	r2, [pc, #516]	@ (80093fc <PC_show_Keys+0x910>)
 80091f8:	4b64      	ldr	r3, [pc, #400]	@ (800938c <PC_show_Keys+0x8a0>)
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7fc f86f 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Air pressure sensor id -: %s\r\n", hPaConfigCmd, Buffer);
 8009202:	4b62      	ldr	r3, [pc, #392]	@ (800938c <PC_show_Keys+0x8a0>)
 8009204:	497f      	ldr	r1, [pc, #508]	@ (8009404 <PC_show_Keys+0x918>)
 8009206:	485e      	ldr	r0, [pc, #376]	@ (8009380 <PC_show_Keys+0x894>)
 8009208:	221c      	movs	r2, #28
 800920a:	f01d f8f5 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800920e:	4b61      	ldr	r3, [pc, #388]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	4b5b      	ldr	r3, [pc, #364]	@ (8009380 <PC_show_Keys+0x894>)
 8009214:	0011      	movs	r1, r2
 8009216:	0018      	movs	r0, r3
 8009218:	f7ff fc4d 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 800921c:	4b7a      	ldr	r3, [pc, #488]	@ (8009408 <PC_show_Keys+0x91c>)
 800921e:	487b      	ldr	r0, [pc, #492]	@ (800940c <PC_show_Keys+0x920>)
 8009220:	220c      	movs	r2, #12
 8009222:	0019      	movs	r1, r3
 8009224:	f002 ff56 	bl	800c0d4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 8009228:	4a77      	ldr	r2, [pc, #476]	@ (8009408 <PC_show_Keys+0x91c>)
 800922a:	4b58      	ldr	r3, [pc, #352]	@ (800938c <PC_show_Keys+0x8a0>)
 800922c:	0011      	movs	r1, r2
 800922e:	0018      	movs	r0, r3
 8009230:	f7fc f856 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 8009234:	4b55      	ldr	r3, [pc, #340]	@ (800938c <PC_show_Keys+0x8a0>)
 8009236:	4976      	ldr	r1, [pc, #472]	@ (8009410 <PC_show_Keys+0x924>)
 8009238:	4851      	ldr	r0, [pc, #324]	@ (8009380 <PC_show_Keys+0x894>)
 800923a:	221d      	movs	r2, #29
 800923c:	f01d f8dc 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009240:	4b54      	ldr	r3, [pc, #336]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	4b4e      	ldr	r3, [pc, #312]	@ (8009380 <PC_show_Keys+0x894>)
 8009246:	0011      	movs	r1, r2
 8009248:	0018      	movs	r0, r3
 800924a:	f7ff fc34 	bl	8008ab6 <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 800924e:	4b71      	ldr	r3, [pc, #452]	@ (8009414 <PC_show_Keys+0x928>)
 8009250:	4871      	ldr	r0, [pc, #452]	@ (8009418 <PC_show_Keys+0x92c>)
 8009252:	2230      	movs	r2, #48	@ 0x30
 8009254:	0019      	movs	r1, r3
 8009256:	f002 ff3d 	bl	800c0d4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 800925a:	4970      	ldr	r1, [pc, #448]	@ (800941c <PC_show_Keys+0x930>)
 800925c:	4b48      	ldr	r3, [pc, #288]	@ (8009380 <PC_show_Keys+0x894>)
 800925e:	221e      	movs	r2, #30
 8009260:	0018      	movs	r0, r3
 8009262:	f01d f8c9 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009266:	4b4b      	ldr	r3, [pc, #300]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	4b45      	ldr	r3, [pc, #276]	@ (8009380 <PC_show_Keys+0x894>)
 800926c:	0011      	movs	r1, r2
 800926e:	0018      	movs	r0, r3
 8009270:	f7ff fc21 	bl	8008ab6 <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 8009274:	4b67      	ldr	r3, [pc, #412]	@ (8009414 <PC_show_Keys+0x928>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d11b      	bne.n	80092b4 <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 800927c:	4a68      	ldr	r2, [pc, #416]	@ (8009420 <PC_show_Keys+0x934>)
 800927e:	4b40      	ldr	r3, [pc, #256]	@ (8009380 <PC_show_Keys+0x894>)
 8009280:	0011      	movs	r1, r2
 8009282:	0018      	movs	r0, r3
 8009284:	f01d f8b8 	bl	80263f8 <siprintf>
    PC_selectout(&msg[0], usb_out);
 8009288:	4b42      	ldr	r3, [pc, #264]	@ (8009394 <PC_show_Keys+0x8a8>)
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	4b3c      	ldr	r3, [pc, #240]	@ (8009380 <PC_show_Keys+0x894>)
 800928e:	0011      	movs	r1, r2
 8009290:	0018      	movs	r0, r3
 8009292:	f7ff fc10 	bl	8008ab6 <PC_selectout>
    PC_selectout((char*)API, usb_out);
 8009296:	4b3f      	ldr	r3, [pc, #252]	@ (8009394 <PC_show_Keys+0x8a8>)
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	4b62      	ldr	r3, [pc, #392]	@ (8009424 <PC_show_Keys+0x938>)
 800929c:	0011      	movs	r1, r2
 800929e:	0018      	movs	r0, r3
 80092a0:	f7ff fc09 	bl	8008ab6 <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 80092a4:	4b3b      	ldr	r3, [pc, #236]	@ (8009394 <PC_show_Keys+0x8a8>)
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	4b5f      	ldr	r3, [pc, #380]	@ (8009428 <PC_show_Keys+0x93c>)
 80092aa:	0011      	movs	r1, r2
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7ff fc02 	bl	8008ab6 <PC_selectout>
 80092b2:	e00c      	b.n	80092ce <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 80092b4:	4a57      	ldr	r2, [pc, #348]	@ (8009414 <PC_show_Keys+0x928>)
 80092b6:	494a      	ldr	r1, [pc, #296]	@ (80093e0 <PC_show_Keys+0x8f4>)
 80092b8:	4b31      	ldr	r3, [pc, #196]	@ (8009380 <PC_show_Keys+0x894>)
 80092ba:	0018      	movs	r0, r3
 80092bc:	f01d f89c 	bl	80263f8 <siprintf>
    PC_selectout(&msg[0], usb_out);
 80092c0:	4b34      	ldr	r3, [pc, #208]	@ (8009394 <PC_show_Keys+0x8a8>)
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009380 <PC_show_Keys+0x894>)
 80092c6:	0011      	movs	r1, r2
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7ff fbf4 	bl	8008ab6 <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 80092ce:	4957      	ldr	r1, [pc, #348]	@ (800942c <PC_show_Keys+0x940>)
 80092d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009380 <PC_show_Keys+0x894>)
 80092d2:	221f      	movs	r2, #31
 80092d4:	0018      	movs	r0, r3
 80092d6:	f01d f88f 	bl	80263f8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092da:	4b2e      	ldr	r3, [pc, #184]	@ (8009394 <PC_show_Keys+0x8a8>)
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	4b28      	ldr	r3, [pc, #160]	@ (8009380 <PC_show_Keys+0x894>)
 80092e0:	0011      	movs	r1, r2
 80092e2:	0018      	movs	r0, r3
 80092e4:	f7ff fbe7 	bl	8008ab6 <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 80092e8:	4b51      	ldr	r3, [pc, #324]	@ (8009430 <PC_show_Keys+0x944>)
 80092ea:	0018      	movs	r0, r3
 80092ec:	f7ff fbbe 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 80092f0:	200a      	movs	r0, #10
 80092f2:	f00b faef 	bl	80148d4 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 80092f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009434 <PC_show_Keys+0x948>)
 80092f8:	0018      	movs	r0, r3
 80092fa:	f7ff fbb7 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 80092fe:	200a      	movs	r0, #10
 8009300:	f00b fae8 	bl	80148d4 <HAL_Delay>
  printf_USB(" command example for air pressure => #28,6a\r\n");
 8009304:	4b4c      	ldr	r3, [pc, #304]	@ (8009438 <PC_show_Keys+0x94c>)
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff fbb0 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 800930c:	200a      	movs	r0, #10
 800930e:	f00b fae1 	bl	80148d4 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8009312:	4b4a      	ldr	r3, [pc, #296]	@ (800943c <PC_show_Keys+0x950>)
 8009314:	0018      	movs	r0, r3
 8009316:	f7ff fba9 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 800931a:	200a      	movs	r0, #10
 800931c:	f00b fada 	bl	80148d4 <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 8009320:	4b47      	ldr	r3, [pc, #284]	@ (8009440 <PC_show_Keys+0x954>)
 8009322:	0018      	movs	r0, r3
 8009324:	f7ff fba2 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 8009328:	200a      	movs	r0, #10
 800932a:	f00b fad3 	bl	80148d4 <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 800932e:	4b45      	ldr	r3, [pc, #276]	@ (8009444 <PC_show_Keys+0x958>)
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff fb9b 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 8009336:	200a      	movs	r0, #10
 8009338:	f00b facc 	bl	80148d4 <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 800933c:	4b42      	ldr	r3, [pc, #264]	@ (8009448 <PC_show_Keys+0x95c>)
 800933e:	0018      	movs	r0, r3
 8009340:	f7ff fb94 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 8009344:	200a      	movs	r0, #10
 8009346:	f00b fac5 	bl	80148d4 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 800934a:	4b40      	ldr	r3, [pc, #256]	@ (800944c <PC_show_Keys+0x960>)
 800934c:	0018      	movs	r0, r3
 800934e:	f7ff fb8d 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 8009352:	200a      	movs	r0, #10
 8009354:	f00b fabe 	bl	80148d4 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 8009358:	4b3d      	ldr	r3, [pc, #244]	@ (8009450 <PC_show_Keys+0x964>)
 800935a:	0018      	movs	r0, r3
 800935c:	f7ff fb86 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 8009360:	200a      	movs	r0, #10
 8009362:	f00b fab7 	bl	80148d4 <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 8009366:	4b3b      	ldr	r3, [pc, #236]	@ (8009454 <PC_show_Keys+0x968>)
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff fb7f 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 800936e:	200a      	movs	r0, #10
 8009370:	f00b fab0 	bl	80148d4 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 8009374:	4b38      	ldr	r3, [pc, #224]	@ (8009458 <PC_show_Keys+0x96c>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d071      	beq.n	8009460 <PC_show_Keys+0x974>
 800937c:	4b37      	ldr	r3, [pc, #220]	@ (800945c <PC_show_Keys+0x970>)
 800937e:	e070      	b.n	8009462 <PC_show_Keys+0x976>
 8009380:	20000b54 	.word	0x20000b54
 8009384:	20000cf8 	.word	0x20000cf8
 8009388:	080800f8 	.word	0x080800f8
 800938c:	20000ba8 	.word	0x20000ba8
 8009390:	0802b884 	.word	0x0802b884
 8009394:	20000b51 	.word	0x20000b51
 8009398:	20000d04 	.word	0x20000d04
 800939c:	08080104 	.word	0x08080104
 80093a0:	0802b8b4 	.word	0x0802b8b4
 80093a4:	20000d10 	.word	0x20000d10
 80093a8:	080800b0 	.word	0x080800b0
 80093ac:	0802b8e4 	.word	0x0802b8e4
 80093b0:	20000d1c 	.word	0x20000d1c
 80093b4:	080800bc 	.word	0x080800bc
 80093b8:	0802b914 	.word	0x0802b914
 80093bc:	20000d28 	.word	0x20000d28
 80093c0:	08080170 	.word	0x08080170
 80093c4:	0802b944 	.word	0x0802b944
 80093c8:	20000d34 	.word	0x20000d34
 80093cc:	0808017c 	.word	0x0808017c
 80093d0:	0802b974 	.word	0x0802b974
 80093d4:	20000d40 	.word	0x20000d40
 80093d8:	08080260 	.word	0x08080260
 80093dc:	0802b9a4 	.word	0x0802b9a4
 80093e0:	0802b764 	.word	0x0802b764
 80093e4:	20000d70 	.word	0x20000d70
 80093e8:	08080290 	.word	0x08080290
 80093ec:	0802b9d0 	.word	0x0802b9d0
 80093f0:	20000da0 	.word	0x20000da0
 80093f4:	080802c0 	.word	0x080802c0
 80093f8:	0802b9fc 	.word	0x0802b9fc
 80093fc:	20000dd0 	.word	0x20000dd0
 8009400:	08080188 	.word	0x08080188
 8009404:	0802ba28 	.word	0x0802ba28
 8009408:	20000ddc 	.word	0x20000ddc
 800940c:	080801a0 	.word	0x080801a0
 8009410:	0802ba58 	.word	0x0802ba58
 8009414:	20000de8 	.word	0x20000de8
 8009418:	08080110 	.word	0x08080110
 800941c:	0802ba88 	.word	0x0802ba88
 8009420:	0802bab4 	.word	0x0802bab4
 8009424:	0802bad0 	.word	0x0802bad0
 8009428:	0802baf4 	.word	0x0802baf4
 800942c:	0802baf8 	.word	0x0802baf8
 8009430:	0802bb24 	.word	0x0802bb24
 8009434:	0802bb3c 	.word	0x0802bb3c
 8009438:	0802bb68 	.word	0x0802bb68
 800943c:	0802bb98 	.word	0x0802bb98
 8009440:	0802bbd4 	.word	0x0802bbd4
 8009444:	0802bc0c 	.word	0x0802bc0c
 8009448:	0802bc40 	.word	0x0802bc40
 800944c:	0802bc60 	.word	0x0802bc60
 8009450:	0802bc94 	.word	0x0802bc94
 8009454:	0802bcb8 	.word	0x0802bcb8
 8009458:	200010f7 	.word	0x200010f7
 800945c:	0802bcec 	.word	0x0802bcec
 8009460:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <PC_show_Keys+0x9c0>)
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <PC_show_Keys+0x9c4>)
 8009464:	0019      	movs	r1, r3
 8009466:	0010      	movs	r0, r2
 8009468:	f7ff fb00 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 800946c:	200a      	movs	r0, #10
 800946e:	f00b fa31 	bl	80148d4 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 8009472:	4b10      	ldr	r3, [pc, #64]	@ (80094b4 <PC_show_Keys+0x9c8>)
 8009474:	0018      	movs	r0, r3
 8009476:	f7ff faf9 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 800947a:	200a      	movs	r0, #10
 800947c:	f00b fa2a 	bl	80148d4 <HAL_Delay>
  printf_USB("E31, - Erase configuration memory\r\n");
 8009480:	4b0d      	ldr	r3, [pc, #52]	@ (80094b8 <PC_show_Keys+0x9cc>)
 8009482:	0018      	movs	r0, r3
 8009484:	f7ff faf2 	bl	8008a6c <printf_USB>
  HAL_Delay(10);
 8009488:	200a      	movs	r0, #10
 800948a:	f00b fa23 	bl	80148d4 <HAL_Delay>
  if (!usb_out) {
 800948e:	4b0b      	ldr	r3, [pc, #44]	@ (80094bc <PC_show_Keys+0x9d0>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2201      	movs	r2, #1
 8009494:	4053      	eors	r3, r2
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <PC_show_Keys+0x9b8>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 800949c:	4b08      	ldr	r3, [pc, #32]	@ (80094c0 <PC_show_Keys+0x9d4>)
 800949e:	0018      	movs	r0, r3
 80094a0:	f01c ffa0 	bl	80263e4 <puts>
  }
}
 80094a4:	46c0      	nop			@ (mov r8, r8)
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	46c0      	nop			@ (mov r8, r8)
 80094ac:	0802bcf0 	.word	0x0802bcf0
 80094b0:	0802bcf4 	.word	0x0802bcf4
 80094b4:	0802bd20 	.word	0x0802bd20
 80094b8:	0802bd40 	.word	0x0802bd40
 80094bc:	20000b51 	.word	0x20000b51
 80094c0:	0802bd64 	.word	0x0802bd64

080094c4 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	4b20      	ldr	r3, [pc, #128]	@ (8009554 <ascii_to_uint8+0x90>)
 80094d4:	18d3      	adds	r3, r2, r3
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	001a      	movs	r2, r3
 80094da:	2304      	movs	r3, #4
 80094dc:	4013      	ands	r3, r2
 80094de:	d00a      	beq.n	80094f6 <ascii_to_uint8+0x32>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3301      	adds	r3, #1
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009554 <ascii_to_uint8+0x90>)
 80094ea:	18d3      	adds	r3, r2, r3
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	001a      	movs	r2, r3
 80094f0:	2304      	movs	r3, #4
 80094f2:	4013      	ands	r3, r2
 80094f4:	d105      	bne.n	8009502 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 80094f6:	4b18      	ldr	r3, [pc, #96]	@ (8009558 <ascii_to_uint8+0x94>)
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7ff fab7 	bl	8008a6c <printf_USB>
    return 100;
 80094fe:	2364      	movs	r3, #100	@ 0x64
 8009500:	e024      	b.n	800954c <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	1c1a      	adds	r2, r3, #0
 8009508:	0092      	lsls	r2, r2, #2
 800950a:	18d3      	adds	r3, r2, r3
 800950c:	18db      	adds	r3, r3, r3
 800950e:	b2da      	uxtb	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3301      	adds	r3, #1
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	18d3      	adds	r3, r2, r3
 8009518:	b2da      	uxtb	r2, r3
 800951a:	210f      	movs	r1, #15
 800951c:	187b      	adds	r3, r7, r1
 800951e:	3a10      	subs	r2, #16
 8009520:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 8009522:	187b      	adds	r3, r7, r1
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b1f      	cmp	r3, #31
 8009528:	d905      	bls.n	8009536 <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 800952a:	4b0c      	ldr	r3, [pc, #48]	@ (800955c <ascii_to_uint8+0x98>)
 800952c:	0018      	movs	r0, r3
 800952e:	f7ff fa9d 	bl	8008a6c <printf_USB>
    return 100;
 8009532:	2364      	movs	r3, #100	@ 0x64
 8009534:	e00a      	b.n	800954c <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 8009536:	220f      	movs	r2, #15
 8009538:	18bb      	adds	r3, r7, r2
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b1f      	cmp	r3, #31
 800953e:	d102      	bne.n	8009546 <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 8009540:	18bb      	adds	r3, r7, r2
 8009542:	22fd      	movs	r2, #253	@ 0xfd
 8009544:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 8009546:	230f      	movs	r3, #15
 8009548:	18fb      	adds	r3, r7, r3
 800954a:	781b      	ldrb	r3, [r3, #0]
}
 800954c:	0018      	movs	r0, r3
 800954e:	46bd      	mov	sp, r7
 8009550:	b004      	add	sp, #16
 8009552:	bd80      	pop	{r7, pc}
 8009554:	0802ede8 	.word	0x0802ede8
 8009558:	0802bdb8 	.word	0x0802bdb8
 800955c:	0802bde0 	.word	0x0802bde0

08009560 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8009560:	b590      	push	{r4, r7, lr}
 8009562:	b0d9      	sub	sp, #356	@ 0x164
 8009564:	af3e      	add	r7, sp, #248	@ 0xf8
 8009566:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8009568:	f019 fe88 	bl	802327c <GetUsbRxDataSize>
 800956c:	0003      	movs	r3, r0
 800956e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 8009570:	2367      	movs	r3, #103	@ 0x67
 8009572:	18fb      	adds	r3, r7, r3
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 8009578:	2366      	movs	r3, #102	@ 0x66
 800957a:	18fb      	adds	r3, r7, r3
 800957c:	2200      	movs	r2, #0
 800957e:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2124      	movs	r1, #36	@ 0x24
 8009584:	0018      	movs	r0, r3
 8009586:	f01d f887 	bl	8026698 <strchr>
 800958a:	0003      	movs	r3, r0
 800958c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 800958e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d109      	bne.n	80095a8 <Process_USB_input+0x48>
 8009594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <Process_USB_input+0x48>
 800959a:	4bd8      	ldr	r3, [pc, #864]	@ (80098fc <Process_USB_input+0x39c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b1c      	cmp	r3, #28
 80095a0:	d002      	beq.n	80095a8 <Process_USB_input+0x48>
      len = 28;
 80095a2:	4bd6      	ldr	r3, [pc, #856]	@ (80098fc <Process_USB_input+0x39c>)
 80095a4:	221c      	movs	r2, #28
 80095a6:	601a      	str	r2, [r3, #0]
//      printf_USB("len = %d\r\n", len);
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2153      	movs	r1, #83	@ 0x53
 80095ac:	0018      	movs	r0, r3
 80095ae:	f01d f873 	bl	8026698 <strchr>
 80095b2:	0003      	movs	r3, r0
 80095b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 80095b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d109      	bne.n	80095d0 <Process_USB_input+0x70>
 80095bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d006      	beq.n	80095d0 <Process_USB_input+0x70>
 80095c2:	4bce      	ldr	r3, [pc, #824]	@ (80098fc <Process_USB_input+0x39c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b40      	cmp	r3, #64	@ 0x40
 80095c8:	d002      	beq.n	80095d0 <Process_USB_input+0x70>
      len = pwdMaxLength;
 80095ca:	4bcc      	ldr	r3, [pc, #816]	@ (80098fc <Process_USB_input+0x39c>)
 80095cc:	2240      	movs	r2, #64	@ 0x40
 80095ce:	601a      	str	r2, [r3, #0]
//      printf_USB("len = %d\r\n", len);
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	214c      	movs	r1, #76	@ 0x4c
 80095d4:	0018      	movs	r0, r3
 80095d6:	f01d f85f 	bl	8026698 <strchr>
 80095da:	0003      	movs	r3, r0
 80095dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 80095de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d131      	bne.n	8009648 <Process_USB_input+0xe8>
 80095e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d02e      	beq.n	8009648 <Process_USB_input+0xe8>
    usblog = !usblog; // log info to usb too
 80095ea:	4bc5      	ldr	r3, [pc, #788]	@ (8009900 <Process_USB_input+0x3a0>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	1e5a      	subs	r2, r3, #1
 80095f0:	4193      	sbcs	r3, r2
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2201      	movs	r2, #1
 80095f6:	4053      	eors	r3, r2
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	1c1a      	adds	r2, r3, #0
 80095fc:	2301      	movs	r3, #1
 80095fe:	4013      	ands	r3, r2
 8009600:	b2da      	uxtb	r2, r3
 8009602:	4bbf      	ldr	r3, [pc, #764]	@ (8009900 <Process_USB_input+0x3a0>)
 8009604:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8009606:	f00c f967 	bl	80158d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 800960a:	4bbd      	ldr	r3, [pc, #756]	@ (8009900 <Process_USB_input+0x3a0>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	001a      	movs	r2, r3
 8009610:	4bbc      	ldr	r3, [pc, #752]	@ (8009904 <Process_USB_input+0x3a4>)
 8009612:	0019      	movs	r1, r3
 8009614:	2000      	movs	r0, #0
 8009616:	f00c f9c7 	bl	80159a8 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 800961a:	f00c f98b 	bl	8015934 <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 800961e:	4bb8      	ldr	r3, [pc, #736]	@ (8009900 <Process_USB_input+0x3a0>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <Process_USB_input+0xca>
 8009626:	4bb8      	ldr	r3, [pc, #736]	@ (8009908 <Process_USB_input+0x3a8>)
 8009628:	e000      	b.n	800962c <Process_USB_input+0xcc>
 800962a:	4bb8      	ldr	r3, [pc, #736]	@ (800990c <Process_USB_input+0x3ac>)
 800962c:	4ab8      	ldr	r2, [pc, #736]	@ (8009910 <Process_USB_input+0x3b0>)
 800962e:	0019      	movs	r1, r3
 8009630:	0010      	movs	r0, r2
 8009632:	f7ff fa1b 	bl	8008a6c <printf_USB>
    length = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009640:	f019 fe04 	bl	802324c <ResetUsbRxDataSize>
    return true;
 8009644:	2301      	movs	r3, #1
 8009646:	e204      	b.n	8009a52 <Process_USB_input+0x4f2>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2142      	movs	r1, #66	@ 0x42
 800964c:	0018      	movs	r0, r3
 800964e:	f01d f823 	bl	8026698 <strchr>
 8009652:	0003      	movs	r3, r0
 8009654:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d10f      	bne.n	800967c <Process_USB_input+0x11c>
 800965c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00c      	beq.n	800967c <Process_USB_input+0x11c>
    BinaryReleaseInfo();
 8009662:	f00a fc35 	bl	8013ed0 <BinaryReleaseInfo>
    showUpTime();
 8009666:	f000 fb83 	bl	8009d70 <showUpTime>
    length = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 8009674:	f019 fdea 	bl	802324c <ResetUsbRxDataSize>
    return true;
 8009678:	2301      	movs	r3, #1
 800967a:	e1ea      	b.n	8009a52 <Process_USB_input+0x4f2>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 800967c:	4b9f      	ldr	r3, [pc, #636]	@ (80098fc <Process_USB_input+0x39c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009682:	429a      	cmp	r2, r3
 8009684:	d207      	bcs.n	8009696 <Process_USB_input+0x136>
 8009686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009688:	3b01      	subs	r3, #1
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	18d3      	adds	r3, r2, r3
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b0d      	cmp	r3, #13
 8009692:	d000      	beq.n	8009696 <Process_USB_input+0x136>
 8009694:	e1ca      	b.n	8009a2c <Process_USB_input+0x4cc>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 8009696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009698:	3b01      	subs	r3, #1
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	18d3      	adds	r3, r2, r3
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b0d      	cmp	r3, #13
 80096a2:	d105      	bne.n	80096b0 <Process_USB_input+0x150>
//      printf_USB("Inputstring detected, string terminated\r\n");
      data[length-1] = 0;
 80096a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096a6:	3b01      	subs	r3, #1
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	18d3      	adds	r3, r2, r3
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b23      	cmp	r3, #35	@ 0x23
 80096b6:	d00c      	beq.n	80096d2 <Process_USB_input+0x172>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b24      	cmp	r3, #36	@ 0x24
 80096be:	d008      	beq.n	80096d2 <Process_USB_input+0x172>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b53      	cmp	r3, #83	@ 0x53
 80096c6:	d004      	beq.n	80096d2 <Process_USB_input+0x172>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b45      	cmp	r3, #69	@ 0x45
 80096ce:	d000      	beq.n	80096d2 <Process_USB_input+0x172>
 80096d0:	e18e      	b.n	80099f0 <Process_USB_input+0x490>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3301      	adds	r3, #1
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7ff fef4 	bl	80094c4 <ascii_to_uint8>
 80096dc:	0003      	movs	r3, r0
 80096de:	001a      	movs	r2, r3
 80096e0:	4b8c      	ldr	r3, [pc, #560]	@ (8009914 <Process_USB_input+0x3b4>)
 80096e2:	701a      	strb	r2, [r3, #0]
      printf_USB("\r\n");
 80096e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009918 <Process_USB_input+0x3b8>)
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7ff f9c0 	bl	8008a6c <printf_USB>
//      printf_USB("\r\nCommand nr determined: %02d \r\n", received.Command);
      if (received.Command == 100) {
 80096ec:	4b89      	ldr	r3, [pc, #548]	@ (8009914 <Process_USB_input+0x3b4>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b64      	cmp	r3, #100	@ 0x64
 80096f2:	d11f      	bne.n	8009734 <Process_USB_input+0x1d4>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 80096f4:	4b89      	ldr	r3, [pc, #548]	@ (800991c <Process_USB_input+0x3bc>)
 80096f6:	0018      	movs	r0, r3
 80096f8:	f7ff f9b8 	bl	8008a6c <printf_USB>
        ResetUsbRxDataSize();
 80096fc:	f019 fda6 	bl	802324c <ResetUsbRxDataSize>
        PC_show_Keys();
 8009700:	f7ff f9f4 	bl	8008aec <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009704:	2365      	movs	r3, #101	@ 0x65
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e00b      	b.n	8009726 <Process_USB_input+0x1c6>
          data[i] = '\0';
 800970e:	2165      	movs	r1, #101	@ 0x65
 8009710:	187b      	adds	r3, r7, r1
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	18d3      	adds	r3, r2, r3
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 800971c:	187b      	adds	r3, r7, r1
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	187b      	adds	r3, r7, r1
 8009722:	3201      	adds	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	2365      	movs	r3, #101	@ 0x65
 8009728:	18fb      	adds	r3, r7, r3
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b1f      	cmp	r3, #31
 800972e:	d9ee      	bls.n	800970e <Process_USB_input+0x1ae>
        }
        return false; // value out of range
 8009730:	2300      	movs	r3, #0
 8009732:	e18e      	b.n	8009a52 <Process_USB_input+0x4f2>
      }
      if (data[3] == ',') {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3303      	adds	r3, #3
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b2c      	cmp	r3, #44	@ 0x2c
 800973c:	d000      	beq.n	8009740 <Process_USB_input+0x1e0>
 800973e:	e153      	b.n	80099e8 <Process_USB_input+0x488>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b53      	cmp	r3, #83	@ 0x53
 8009746:	d003      	beq.n	8009750 <Process_USB_input+0x1f0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b45      	cmp	r3, #69	@ 0x45
 800974e:	d10a      	bne.n	8009766 <Process_USB_input+0x206>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b45      	cmp	r3, #69	@ 0x45
 8009756:	d106      	bne.n	8009766 <Process_USB_input+0x206>
 8009758:	4b6e      	ldr	r3, [pc, #440]	@ (8009914 <Process_USB_input+0x3b4>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b1f      	cmp	r3, #31
 800975e:	d102      	bne.n	8009766 <Process_USB_input+0x206>
//            printf_USB("\r\nClear EEPROM request\r\n");
            received.Command = ClearConfigCmd;
 8009760:	4b6c      	ldr	r3, [pc, #432]	@ (8009914 <Process_USB_input+0x3b4>)
 8009762:	22fd      	movs	r2, #253	@ 0xfd
 8009764:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2b24      	cmp	r3, #36	@ 0x24
 800976c:	d004      	beq.n	8009778 <Process_USB_input+0x218>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b23      	cmp	r3, #35	@ 0x23
 8009774:	d000      	beq.n	8009778 <Process_USB_input+0x218>
 8009776:	e0a3      	b.n	80098c0 <Process_USB_input+0x360>
          for (i=4; i < len; i++) {
 8009778:	2366      	movs	r3, #102	@ 0x66
 800977a:	18fb      	adds	r3, r7, r3
 800977c:	2204      	movs	r2, #4
 800977e:	701a      	strb	r2, [r3, #0]
 8009780:	e096      	b.n	80098b0 <Process_USB_input+0x350>
            HAL_Delay(10);
 8009782:	200a      	movs	r0, #10
 8009784:	f00b f8a6 	bl	80148d4 <HAL_Delay>
            if (isxdigit(data[i])) {
 8009788:	2166      	movs	r1, #102	@ 0x66
 800978a:	187b      	adds	r3, r7, r1
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	18d3      	adds	r3, r2, r3
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	4b62      	ldr	r3, [pc, #392]	@ (8009920 <Process_USB_input+0x3c0>)
 8009798:	18d3      	adds	r3, r2, r3
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	001a      	movs	r2, r3
 800979e:	2344      	movs	r3, #68	@ 0x44
 80097a0:	4013      	ands	r3, r2
 80097a2:	d05c      	beq.n	800985e <Process_USB_input+0x2fe>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 80097a4:	4b5f      	ldr	r3, [pc, #380]	@ (8009924 <Process_USB_input+0x3c4>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b25b      	sxtb	r3, r3
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	b25a      	sxtb	r2, r3
 80097ae:	0008      	movs	r0, r1
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	18cb      	adds	r3, r1, r3
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	1c59      	adds	r1, r3, #1
 80097bc:	4b58      	ldr	r3, [pc, #352]	@ (8009920 <Process_USB_input+0x3c0>)
 80097be:	18cb      	adds	r3, r1, r3
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	0019      	movs	r1, r3
 80097c4:	2304      	movs	r3, #4
 80097c6:	400b      	ands	r3, r1
 80097c8:	d008      	beq.n	80097dc <Process_USB_input+0x27c>
 80097ca:	183b      	adds	r3, r7, r0
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	18cb      	adds	r3, r1, r3
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	3b30      	subs	r3, #48	@ 0x30
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	b25b      	sxtb	r3, r3
 80097da:	e01e      	b.n	800981a <Process_USB_input+0x2ba>
 80097dc:	2366      	movs	r3, #102	@ 0x66
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	18c9      	adds	r1, r1, r3
 80097e6:	2056      	movs	r0, #86	@ 0x56
 80097e8:	183b      	adds	r3, r7, r0
 80097ea:	7809      	ldrb	r1, [r1, #0]
 80097ec:	7019      	strb	r1, [r3, #0]
 80097ee:	183b      	adds	r3, r7, r0
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	1c59      	adds	r1, r3, #1
 80097f4:	4b4a      	ldr	r3, [pc, #296]	@ (8009920 <Process_USB_input+0x3c0>)
 80097f6:	18cb      	adds	r3, r1, r3
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	0019      	movs	r1, r3
 80097fc:	2303      	movs	r3, #3
 80097fe:	400b      	ands	r3, r1
 8009800:	2b02      	cmp	r3, #2
 8009802:	d103      	bne.n	800980c <Process_USB_input+0x2ac>
 8009804:	183b      	adds	r3, r7, r0
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	3b20      	subs	r3, #32
 800980a:	e002      	b.n	8009812 <Process_USB_input+0x2b2>
 800980c:	2356      	movs	r3, #86	@ 0x56
 800980e:	18fb      	adds	r3, r7, r3
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	3b37      	subs	r3, #55	@ 0x37
 8009816:	b2db      	uxtb	r3, r3
 8009818:	b25b      	sxtb	r3, r3
 800981a:	4313      	orrs	r3, r2
 800981c:	b25b      	sxtb	r3, r3
 800981e:	b2da      	uxtb	r2, r3
 8009820:	4b40      	ldr	r3, [pc, #256]	@ (8009924 <Process_USB_input+0x3c4>)
 8009822:	701a      	strb	r2, [r3, #0]
              HAL_Delay(10);
 8009824:	200a      	movs	r0, #10
 8009826:	f00b f855 	bl	80148d4 <HAL_Delay>
              if (len == 28) {
 800982a:	4b34      	ldr	r3, [pc, #208]	@ (80098fc <Process_USB_input+0x39c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b1c      	cmp	r3, #28
 8009830:	d138      	bne.n	80098a4 <Process_USB_input+0x344>
                if ((i % 2) == 1) {
 8009832:	2366      	movs	r3, #102	@ 0x66
 8009834:	18fb      	adds	r3, r7, r3
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2201      	movs	r2, #1
 800983a:	4013      	ands	r3, r2
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d030      	beq.n	80098a4 <Process_USB_input+0x344>
                  data[r] = result;
 8009842:	2167      	movs	r1, #103	@ 0x67
 8009844:	187b      	adds	r3, r7, r1
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	18d3      	adds	r3, r2, r3
 800984c:	4a35      	ldr	r2, [pc, #212]	@ (8009924 <Process_USB_input+0x3c4>)
 800984e:	7812      	ldrb	r2, [r2, #0]
 8009850:	701a      	strb	r2, [r3, #0]
//                  printf_USB("data[%d] = 0x%02X\r\n",r, data[r]);
                  r++;
 8009852:	187b      	adds	r3, r7, r1
 8009854:	781a      	ldrb	r2, [r3, #0]
 8009856:	187b      	adds	r3, r7, r1
 8009858:	3201      	adds	r2, #1
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	e022      	b.n	80098a4 <Process_USB_input+0x344>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 800985e:	2066      	movs	r0, #102	@ 0x66
 8009860:	183b      	adds	r3, r7, r0
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	18d3      	adds	r3, r2, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	0019      	movs	r1, r3
 800986c:	183b      	adds	r3, r7, r0
 800986e:	781a      	ldrb	r2, [r3, #0]
 8009870:	4b2d      	ldr	r3, [pc, #180]	@ (8009928 <Process_USB_input+0x3c8>)
 8009872:	0018      	movs	r0, r3
 8009874:	f7ff f8fa 	bl	8008a6c <printf_USB>
              ResetUsbRxDataSize();
 8009878:	f019 fce8 	bl	802324c <ResetUsbRxDataSize>
              PC_show_Keys();
 800987c:	f7ff f936 	bl	8008aec <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 8009880:	2157      	movs	r1, #87	@ 0x57
 8009882:	187b      	adds	r3, r7, r1
 8009884:	2200      	movs	r2, #0
 8009886:	701a      	strb	r2, [r3, #0]
 8009888:	46c0      	nop			@ (mov r8, r8)
 800988a:	187b      	adds	r3, r7, r1
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009890:	429a      	cmp	r2, r3
 8009892:	d907      	bls.n	80098a4 <Process_USB_input+0x344>
                data[i] = '\0';
 8009894:	187b      	adds	r3, r7, r1
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	18d3      	adds	r3, r2, r3
 800989c:	2200      	movs	r2, #0
 800989e:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 80098a0:	2300      	movs	r3, #0
 80098a2:	e0d6      	b.n	8009a52 <Process_USB_input+0x4f2>
          for (i=4; i < len; i++) {
 80098a4:	2166      	movs	r1, #102	@ 0x66
 80098a6:	187b      	adds	r3, r7, r1
 80098a8:	781a      	ldrb	r2, [r3, #0]
 80098aa:	187b      	adds	r3, r7, r1
 80098ac:	3201      	adds	r2, #1
 80098ae:	701a      	strb	r2, [r3, #0]
 80098b0:	2366      	movs	r3, #102	@ 0x66
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <Process_USB_input+0x39c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d200      	bcs.n	80098c0 <Process_USB_input+0x360>
 80098be:	e760      	b.n	8009782 <Process_USB_input+0x222>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 80098c0:	4b0e      	ldr	r3, [pc, #56]	@ (80098fc <Process_USB_input+0x39c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80098c6:	d840      	bhi.n	800994a <Process_USB_input+0x3ea>
          if (len == 6) {
 80098c8:	4b0c      	ldr	r3, [pc, #48]	@ (80098fc <Process_USB_input+0x39c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b06      	cmp	r3, #6
 80098ce:	d12f      	bne.n	8009930 <Process_USB_input+0x3d0>
//            printf_USB("len = %, overwriting last byte\r\n", len);
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80098d0:	2448      	movs	r4, #72	@ 0x48
 80098d2:	193b      	adds	r3, r7, r4
 80098d4:	4815      	ldr	r0, [pc, #84]	@ (800992c <Process_USB_input+0x3cc>)
 80098d6:	220c      	movs	r2, #12
 80098d8:	0019      	movs	r1, r3
 80098da:	f002 fbfb 	bl	800c0d4 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 80098de:	4b11      	ldr	r3, [pc, #68]	@ (8009924 <Process_USB_input+0x3c4>)
 80098e0:	781a      	ldrb	r2, [r3, #0]
 80098e2:	0021      	movs	r1, r4
 80098e4:	187b      	adds	r3, r7, r1
 80098e6:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 80098e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <Process_USB_input+0x3b4>)
 80098ea:	2202      	movs	r2, #2
 80098ec:	1879      	adds	r1, r7, r1
 80098ee:	189b      	adds	r3, r3, r2
 80098f0:	220c      	movs	r2, #12
 80098f2:	0018      	movs	r0, r3
 80098f4:	f01c ffa4 	bl	8026840 <memcpy>
 80098f8:	e020      	b.n	800993c <Process_USB_input+0x3dc>
 80098fa:	46c0      	nop			@ (mov r8, r8)
 80098fc:	20000038 	.word	0x20000038
 8009900:	200010f7 	.word	0x200010f7
 8009904:	08080194 	.word	0x08080194
 8009908:	0802bcec 	.word	0x0802bcec
 800990c:	0802bcf0 	.word	0x0802bcf0
 8009910:	0802bdfc 	.word	0x0802bdfc
 8009914:	20000940 	.word	0x20000940
 8009918:	0802be1c 	.word	0x0802be1c
 800991c:	0802be20 	.word	0x0802be20
 8009920:	0802ede8 	.word	0x0802ede8
 8009924:	20000a44 	.word	0x20000a44
 8009928:	0802be40 	.word	0x0802be40
 800992c:	08080000 	.word	0x08080000
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	4b4a      	ldr	r3, [pc, #296]	@ (8009a5c <Process_USB_input+0x4fc>)
 8009934:	220c      	movs	r2, #12
 8009936:	0018      	movs	r0, r3
 8009938:	f01c ff82 	bl	8026840 <memcpy>
          }
          received.Payload[12] = '\0';
 800993c:	4b48      	ldr	r3, [pc, #288]	@ (8009a60 <Process_USB_input+0x500>)
 800993e:	2200      	movs	r2, #0
 8009940:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009942:	4b47      	ldr	r3, [pc, #284]	@ (8009a60 <Process_USB_input+0x500>)
 8009944:	220c      	movs	r2, #12
 8009946:	705a      	strb	r2, [r3, #1]
 8009948:	e005      	b.n	8009956 <Process_USB_input+0x3f6>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 800994a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800994c:	b2db      	uxtb	r3, r3
 800994e:	3b04      	subs	r3, #4
 8009950:	b2da      	uxtb	r2, r3
 8009952:	4b43      	ldr	r3, [pc, #268]	@ (8009a60 <Process_USB_input+0x500>)
 8009954:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009956:	4b43      	ldr	r3, [pc, #268]	@ (8009a64 <Process_USB_input+0x504>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b3f      	cmp	r3, #63	@ 0x3f
 800995c:	d80b      	bhi.n	8009976 <Process_USB_input+0x416>
 800995e:	4b41      	ldr	r3, [pc, #260]	@ (8009a64 <Process_USB_input+0x504>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b06      	cmp	r3, #6
 8009964:	d007      	beq.n	8009976 <Process_USB_input+0x416>
          uint8ArrayToString(Buffer, received.Payload);
 8009966:	4a3d      	ldr	r2, [pc, #244]	@ (8009a5c <Process_USB_input+0x4fc>)
 8009968:	2308      	movs	r3, #8
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	0011      	movs	r1, r2
 800996e:	0018      	movs	r0, r3
 8009970:	f7fb fcb6 	bl	80052e0 <uint8ArrayToString>
 8009974:	e00c      	b.n	8009990 <Process_USB_input+0x430>
        }
        else if (len == pwdMaxLength) {
 8009976:	4b3b      	ldr	r3, [pc, #236]	@ (8009a64 <Process_USB_input+0x504>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b40      	cmp	r3, #64	@ 0x40
 800997c:	d108      	bne.n	8009990 <Process_USB_input+0x430>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	1d19      	adds	r1, r3, #4
 8009982:	4b37      	ldr	r3, [pc, #220]	@ (8009a60 <Process_USB_input+0x500>)
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	001a      	movs	r2, r3
 8009988:	4b34      	ldr	r3, [pc, #208]	@ (8009a5c <Process_USB_input+0x4fc>)
 800998a:	0018      	movs	r0, r3
 800998c:	f01c ff58 	bl	8026840 <memcpy>
        }
//        printf_USB("payload length: %d\r\n", received.PayloadLength);
        ProcessCmd(received);
 8009990:	4c33      	ldr	r4, [pc, #204]	@ (8009a60 <Process_USB_input+0x500>)
 8009992:	466b      	mov	r3, sp
 8009994:	0018      	movs	r0, r3
 8009996:	0023      	movs	r3, r4
 8009998:	3310      	adds	r3, #16
 800999a:	22f4      	movs	r2, #244	@ 0xf4
 800999c:	0019      	movs	r1, r3
 800999e:	f01c ff4f 	bl	8026840 <memcpy>
 80099a2:	6820      	ldr	r0, [r4, #0]
 80099a4:	6861      	ldr	r1, [r4, #4]
 80099a6:	68a2      	ldr	r2, [r4, #8]
 80099a8:	68e3      	ldr	r3, [r4, #12]
 80099aa:	f7fe fdc1 	bl	8008530 <ProcessCmd>
        ResetUsbRxDataSize();
 80099ae:	f019 fc4d 	bl	802324c <ResetUsbRxDataSize>
        PC_show_Keys();
 80099b2:	f7ff f89b 	bl	8008aec <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 80099b6:	2364      	movs	r3, #100	@ 0x64
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e00b      	b.n	80099d8 <Process_USB_input+0x478>
          data[i] = '\0';
 80099c0:	2164      	movs	r1, #100	@ 0x64
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	18d3      	adds	r3, r2, r3
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	187b      	adds	r3, r7, r1
 80099d4:	3201      	adds	r2, #1
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	2364      	movs	r3, #100	@ 0x64
 80099da:	18fb      	adds	r3, r7, r3
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d8ed      	bhi.n	80099c0 <Process_USB_input+0x460>
        }
        return true;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e034      	b.n	8009a52 <Process_USB_input+0x4f2>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 80099e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009a68 <Process_USB_input+0x508>)
 80099ea:	0018      	movs	r0, r3
 80099ec:	f7ff f83e 	bl	8008a6c <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 80099f0:	f7ff f87c 	bl	8008aec <PC_show_Keys>
    ResetUsbRxDataSize();
 80099f4:	f019 fc2a 	bl	802324c <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 80099f8:	2363      	movs	r3, #99	@ 0x63
 80099fa:	18fb      	adds	r3, r7, r3
 80099fc:	2200      	movs	r2, #0
 80099fe:	701a      	strb	r2, [r3, #0]
 8009a00:	e00b      	b.n	8009a1a <Process_USB_input+0x4ba>
      data[i] = '\0';
 8009a02:	2163      	movs	r1, #99	@ 0x63
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	18d3      	adds	r3, r2, r3
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009a10:	187b      	adds	r3, r7, r1
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	187b      	adds	r3, r7, r1
 8009a16:	3201      	adds	r2, #1
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	2363      	movs	r3, #99	@ 0x63
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d8ed      	bhi.n	8009a02 <Process_USB_input+0x4a2>
    }
    len = 6;
 8009a26:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <Process_USB_input+0x504>)
 8009a28:	2206      	movs	r2, #6
 8009a2a:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a6c <Process_USB_input+0x50c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d008      	beq.n	8009a48 <Process_USB_input+0x4e8>
    printf_USB("USB input: %s\r", (const char*)data);
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <Process_USB_input+0x510>)
 8009a3a:	0011      	movs	r1, r2
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f7ff f815 	bl	8008a6c <printf_USB>
    formerlength = length;
 8009a42:	4b0a      	ldr	r3, [pc, #40]	@ (8009a6c <Process_USB_input+0x50c>)
 8009a44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a46:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f019 fc20 	bl	8023290 <GetUsbRxNextChunk>
  return false;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	0018      	movs	r0, r3
 8009a54:	46bd      	mov	sp, r7
 8009a56:	b01b      	add	sp, #108	@ 0x6c
 8009a58:	bd90      	pop	{r4, r7, pc}
 8009a5a:	46c0      	nop			@ (mov r8, r8)
 8009a5c:	20000942 	.word	0x20000942
 8009a60:	20000940 	.word	0x20000940
 8009a64:	20000038 	.word	0x20000038
 8009a68:	0802be78 	.word	0x0802be78
 8009a6c:	20000a48 	.word	0x20000a48
 8009a70:	0802be9c 	.word	0x0802be9c

08009a74 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009a78:	4b26      	ldr	r3, [pc, #152]	@ (8009b14 <ReadBatteryVoltage+0xa0>)
 8009a7a:	4a27      	ldr	r2, [pc, #156]	@ (8009b18 <ReadBatteryVoltage+0xa4>)
 8009a7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009a7e:	4b25      	ldr	r3, [pc, #148]	@ (8009b14 <ReadBatteryVoltage+0xa0>)
 8009a80:	2280      	movs	r2, #128	@ 0x80
 8009a82:	0152      	lsls	r2, r2, #5
 8009a84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009a86:	4a23      	ldr	r2, [pc, #140]	@ (8009b14 <ReadBatteryVoltage+0xa0>)
 8009a88:	4b24      	ldr	r3, [pc, #144]	@ (8009b1c <ReadBatteryVoltage+0xa8>)
 8009a8a:	0011      	movs	r1, r2
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f00b f9d1 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009a92:	1e03      	subs	r3, r0, #0
 8009a94:	d001      	beq.n	8009a9a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009a96:	f003 fc75 	bl	800d384 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009a9a:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <ReadBatteryVoltage+0xa8>)
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f00b f8cd 	bl	8014c3c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b1c <ReadBatteryVoltage+0xa8>)
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f00b f91c 	bl	8014ce4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009aac:	4b1b      	ldr	r3, [pc, #108]	@ (8009b1c <ReadBatteryVoltage+0xa8>)
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f00b f9b4 	bl	8014e1c <HAL_ADC_GetValue>
 8009ab4:	0002      	movs	r2, r0
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b20 <ReadBatteryVoltage+0xac>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4353      	muls	r3, r2
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	4919      	ldr	r1, [pc, #100]	@ (8009b24 <ReadBatteryVoltage+0xb0>)
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f7f6 fb6f 	bl	80001a4 <__udivsi3>
 8009ac6:	0003      	movs	r3, r0
 8009ac8:	001a      	movs	r2, r3
 8009aca:	4b17      	ldr	r3, [pc, #92]	@ (8009b28 <ReadBatteryVoltage+0xb4>)
 8009acc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009ace:	4b16      	ldr	r3, [pc, #88]	@ (8009b28 <ReadBatteryVoltage+0xb4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f7f7 fef8 	bl	80018c8 <__aeabi_ui2f>
 8009ad8:	1c03      	adds	r3, r0, #0
 8009ada:	4914      	ldr	r1, [pc, #80]	@ (8009b2c <ReadBatteryVoltage+0xb8>)
 8009adc:	1c18      	adds	r0, r3, #0
 8009ade:	f7f7 f8e1 	bl	8000ca4 <__aeabi_fdiv>
 8009ae2:	1c03      	adds	r3, r0, #0
 8009ae4:	1c1a      	adds	r2, r3, #0
 8009ae6:	4b12      	ldr	r3, [pc, #72]	@ (8009b30 <ReadBatteryVoltage+0xbc>)
 8009ae8:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009aea:	4b0a      	ldr	r3, [pc, #40]	@ (8009b14 <ReadBatteryVoltage+0xa0>)
 8009aec:	4a0a      	ldr	r2, [pc, #40]	@ (8009b18 <ReadBatteryVoltage+0xa4>)
 8009aee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009af0:	4b08      	ldr	r3, [pc, #32]	@ (8009b14 <ReadBatteryVoltage+0xa0>)
 8009af2:	4a10      	ldr	r2, [pc, #64]	@ (8009b34 <ReadBatteryVoltage+0xc0>)
 8009af4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009af6:	4a07      	ldr	r2, [pc, #28]	@ (8009b14 <ReadBatteryVoltage+0xa0>)
 8009af8:	4b08      	ldr	r3, [pc, #32]	@ (8009b1c <ReadBatteryVoltage+0xa8>)
 8009afa:	0011      	movs	r1, r2
 8009afc:	0018      	movs	r0, r3
 8009afe:	f00b f999 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009b02:	1e03      	subs	r3, r0, #0
 8009b04:	d001      	beq.n	8009b0a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009b06:	f003 fc3d 	bl	800d384 <Error_Handler>
  }
  return trueValue;
 8009b0a:	4b09      	ldr	r3, [pc, #36]	@ (8009b30 <ReadBatteryVoltage+0xbc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 }
 8009b0e:	1c18      	adds	r0, r3, #0
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000e18 	.word	0x20000e18
 8009b18:	38004000 	.word	0x38004000
 8009b1c:	20000e84 	.word	0x20000e84
 8009b20:	2000003c 	.word	0x2000003c
 8009b24:	00000fff 	.word	0x00000fff
 8009b28:	20000e34 	.word	0x20000e34
 8009b2c:	447a0000 	.word	0x447a0000
 8009b30:	20000e38 	.word	0x20000e38
 8009b34:	00001001 	.word	0x00001001

08009b38 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009b3c:	4b21      	ldr	r3, [pc, #132]	@ (8009bc4 <ReadSolarVoltage+0x8c>)
 8009b3e:	4a22      	ldr	r2, [pc, #136]	@ (8009bc8 <ReadSolarVoltage+0x90>)
 8009b40:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009b42:	4b20      	ldr	r3, [pc, #128]	@ (8009bc4 <ReadSolarVoltage+0x8c>)
 8009b44:	2280      	movs	r2, #128	@ 0x80
 8009b46:	0152      	lsls	r2, r2, #5
 8009b48:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8009bc4 <ReadSolarVoltage+0x8c>)
 8009b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009bcc <ReadSolarVoltage+0x94>)
 8009b4e:	0011      	movs	r1, r2
 8009b50:	0018      	movs	r0, r3
 8009b52:	f00b f96f 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009b56:	1e03      	subs	r3, r0, #0
 8009b58:	d001      	beq.n	8009b5e <ReadSolarVoltage+0x26>
    Error_Handler();
 8009b5a:	f003 fc13 	bl	800d384 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bcc <ReadSolarVoltage+0x94>)
 8009b60:	0018      	movs	r0, r3
 8009b62:	f00b f86b 	bl	8014c3c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009b66:	4b19      	ldr	r3, [pc, #100]	@ (8009bcc <ReadSolarVoltage+0x94>)
 8009b68:	2101      	movs	r1, #1
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f00b f8ba 	bl	8014ce4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009b70:	4b16      	ldr	r3, [pc, #88]	@ (8009bcc <ReadSolarVoltage+0x94>)
 8009b72:	0018      	movs	r0, r3
 8009b74:	f00b f952 	bl	8014e1c <HAL_ADC_GetValue>
 8009b78:	0002      	movs	r2, r0
 8009b7a:	4b15      	ldr	r3, [pc, #84]	@ (8009bd0 <ReadSolarVoltage+0x98>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	435a      	muls	r2, r3
 8009b80:	0013      	movs	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	189b      	adds	r3, r3, r2
 8009b86:	4913      	ldr	r1, [pc, #76]	@ (8009bd4 <ReadSolarVoltage+0x9c>)
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f7f6 fb0b 	bl	80001a4 <__udivsi3>
 8009b8e:	0003      	movs	r3, r0
 8009b90:	001a      	movs	r2, r3
 8009b92:	4b11      	ldr	r3, [pc, #68]	@ (8009bd8 <ReadSolarVoltage+0xa0>)
 8009b94:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009b96:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc4 <ReadSolarVoltage+0x8c>)
 8009b98:	4a0b      	ldr	r2, [pc, #44]	@ (8009bc8 <ReadSolarVoltage+0x90>)
 8009b9a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009b9c:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <ReadSolarVoltage+0x8c>)
 8009b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009bdc <ReadSolarVoltage+0xa4>)
 8009ba0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009ba2:	4a08      	ldr	r2, [pc, #32]	@ (8009bc4 <ReadSolarVoltage+0x8c>)
 8009ba4:	4b09      	ldr	r3, [pc, #36]	@ (8009bcc <ReadSolarVoltage+0x94>)
 8009ba6:	0011      	movs	r1, r2
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f00b f943 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009bae:	1e03      	subs	r3, r0, #0
 8009bb0:	d001      	beq.n	8009bb6 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009bb2:	f003 fbe7 	bl	800d384 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009bb6:	4b08      	ldr	r3, [pc, #32]	@ (8009bd8 <ReadSolarVoltage+0xa0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	b29b      	uxth	r3, r3
 }
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	46c0      	nop			@ (mov r8, r8)
 8009bc4:	20000e18 	.word	0x20000e18
 8009bc8:	3c008000 	.word	0x3c008000
 8009bcc:	20000e84 	.word	0x20000e84
 8009bd0:	2000003c 	.word	0x2000003c
 8009bd4:	00000fff 	.word	0x00000fff
 8009bd8:	20000e3c 	.word	0x20000e3c
 8009bdc:	00001001 	.word	0x00001001

08009be0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009be4:	23a0      	movs	r3, #160	@ 0xa0
 8009be6:	05db      	lsls	r3, r3, #23
 8009be8:	2180      	movs	r1, #128	@ 0x80
 8009bea:	0018      	movs	r0, r3
 8009bec:	f00c f8b2 	bl	8015d54 <HAL_GPIO_ReadPin>
 8009bf0:	1e03      	subs	r3, r0, #0
 8009bf2:	d00b      	beq.n	8009c0c <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009bf4:	4b07      	ldr	r3, [pc, #28]	@ (8009c14 <Check_USB_PowerOn+0x34>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d105      	bne.n	8009c08 <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009bfc:	4b05      	ldr	r3, [pc, #20]	@ (8009c14 <Check_USB_PowerOn+0x34>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009c02:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <Check_USB_PowerOn+0x38>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e000      	b.n	8009c0e <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	0018      	movs	r0, r3
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200010f9 	.word	0x200010f9
 8009c18:	20001110 	.word	0x20001110

08009c1c <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009c22:	1dfb      	adds	r3, r7, #7
 8009c24:	2201      	movs	r2, #1
 8009c26:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009c28:	1dbb      	adds	r3, r7, #6
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c2e:	4b27      	ldr	r3, [pc, #156]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c30:	2280      	movs	r2, #128	@ 0x80
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c36:	4b25      	ldr	r3, [pc, #148]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c3c:	4b23      	ldr	r3, [pc, #140]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c42:	4b22      	ldr	r3, [pc, #136]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c44:	4a22      	ldr	r2, [pc, #136]	@ (8009cd0 <Read_Charge_Status+0xb4>)
 8009c46:	0019      	movs	r1, r3
 8009c48:	0010      	movs	r0, r2
 8009c4a:	f00b ff05 	bl	8015a58 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c4e:	2380      	movs	r3, #128	@ 0x80
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd0 <Read_Charge_Status+0xb4>)
 8009c54:	0019      	movs	r1, r3
 8009c56:	0010      	movs	r0, r2
 8009c58:	f00c f87c 	bl	8015d54 <HAL_GPIO_ReadPin>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	001a      	movs	r2, r3
 8009c60:	1dfb      	adds	r3, r7, #7
 8009c62:	1e51      	subs	r1, r2, #1
 8009c64:	418a      	sbcs	r2, r1
 8009c66:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c68:	4b18      	ldr	r3, [pc, #96]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c6a:	2280      	movs	r2, #128	@ 0x80
 8009c6c:	0092      	lsls	r2, r2, #2
 8009c6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c70:	4b16      	ldr	r3, [pc, #88]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009c76:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c78:	2202      	movs	r2, #2
 8009c7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c7c:	4b13      	ldr	r3, [pc, #76]	@ (8009ccc <Read_Charge_Status+0xb0>)
 8009c7e:	4a14      	ldr	r2, [pc, #80]	@ (8009cd0 <Read_Charge_Status+0xb4>)
 8009c80:	0019      	movs	r1, r3
 8009c82:	0010      	movs	r0, r2
 8009c84:	f00b fee8 	bl	8015a58 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c88:	2380      	movs	r3, #128	@ 0x80
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4a10      	ldr	r2, [pc, #64]	@ (8009cd0 <Read_Charge_Status+0xb4>)
 8009c8e:	0019      	movs	r1, r3
 8009c90:	0010      	movs	r0, r2
 8009c92:	f00c f85f 	bl	8015d54 <HAL_GPIO_ReadPin>
 8009c96:	0003      	movs	r3, r0
 8009c98:	001a      	movs	r2, r3
 8009c9a:	1dbb      	adds	r3, r7, #6
 8009c9c:	1e51      	subs	r1, r2, #1
 8009c9e:	418a      	sbcs	r2, r1
 8009ca0:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009ca2:	1dfb      	adds	r3, r7, #7
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4053      	eors	r3, r2
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e006      	b.n	8009cc2 <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009cb4:	1dbb      	adds	r3, r7, #6
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e000      	b.n	8009cc2 <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	b002      	add	sp, #8
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	20000e20 	.word	0x20000e20
 8009cd0:	50000800 	.word	0x50000800

08009cd4 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009cd8:	2380      	movs	r3, #128	@ 0x80
 8009cda:	021a      	lsls	r2, r3, #8
 8009cdc:	23a0      	movs	r3, #160	@ 0xa0
 8009cde:	05db      	lsls	r3, r3, #23
 8009ce0:	0011      	movs	r1, r2
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f00c f836 	bl	8015d54 <HAL_GPIO_ReadPin>
 8009ce8:	0003      	movs	r3, r0
 8009cea:	1e5a      	subs	r2, r3, #1
 8009cec:	4193      	sbcs	r3, r2
 8009cee:	b2db      	uxtb	r3, r3
}
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009cfc:	4b05      	ldr	r3, [pc, #20]	@ (8009d14 <UserButton_Pressed+0x1c>)
 8009cfe:	2104      	movs	r1, #4
 8009d00:	0018      	movs	r0, r3
 8009d02:	f00c f827 	bl	8015d54 <HAL_GPIO_ReadPin>
 8009d06:	0003      	movs	r3, r0
 8009d08:	425a      	negs	r2, r3
 8009d0a:	4153      	adcs	r3, r2
 8009d0c:	b2db      	uxtb	r3, r3
}
 8009d0e:	0018      	movs	r0, r3
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	50000c00 	.word	0x50000c00

08009d18 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009d20:	4b08      	ldr	r3, [pc, #32]	@ (8009d44 <getUptime+0x2c>)
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	001a      	movs	r2, r3
 8009d26:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <getUptime+0x2c>)
 8009d28:	789b      	ldrb	r3, [r3, #2]
 8009d2a:	001c      	movs	r4, r3
 8009d2c:	4b05      	ldr	r3, [pc, #20]	@ (8009d44 <getUptime+0x2c>)
 8009d2e:	78db      	ldrb	r3, [r3, #3]
 8009d30:	4905      	ldr	r1, [pc, #20]	@ (8009d48 <getUptime+0x30>)
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	0023      	movs	r3, r4
 8009d38:	f01c fb5e 	bl	80263f8 <siprintf>
}
 8009d3c:	46c0      	nop			@ (mov r8, r8)
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	b003      	add	sp, #12
 8009d42:	bd90      	pop	{r4, r7, pc}
 8009d44:	20000e48 	.word	0x20000e48
 8009d48:	0802bef8 	.word	0x0802bef8

08009d4c <getDate>:
#endif

uint8_t getDate() {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009d50:	4a05      	ldr	r2, [pc, #20]	@ (8009d68 <getDate+0x1c>)
 8009d52:	4b06      	ldr	r3, [pc, #24]	@ (8009d6c <getDate+0x20>)
 8009d54:	0011      	movs	r1, r2
 8009d56:	0018      	movs	r0, r3
 8009d58:	f000 fb66 	bl	800a428 <RTC_GetTime>
  return currentDate.Date;
 8009d5c:	4b02      	ldr	r3, [pc, #8]	@ (8009d68 <getDate+0x1c>)
 8009d5e:	789b      	ldrb	r3, [r3, #2]
}
 8009d60:	0018      	movs	r0, r3
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	46c0      	nop			@ (mov r8, r8)
 8009d68:	20000e68 	.word	0x20000e68
 8009d6c:	20000e54 	.word	0x20000e54

08009d70 <showUpTime>:

void showUpTime() {
 8009d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d72:	46ce      	mov	lr, r9
 8009d74:	4647      	mov	r7, r8
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b087      	sub	sp, #28
 8009d7a:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d7c:	4b17      	ldr	r3, [pc, #92]	@ (8009ddc <showUpTime+0x6c>)
 8009d7e:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d80:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d82:	4b16      	ldr	r3, [pc, #88]	@ (8009ddc <showUpTime+0x6c>)
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d88:	4b15      	ldr	r3, [pc, #84]	@ (8009de0 <showUpTime+0x70>)
 8009d8a:	0092      	lsls	r2, r2, #2
 8009d8c:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d8e:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <showUpTime+0x6c>)
 8009d90:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d92:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d94:	4b13      	ldr	r3, [pc, #76]	@ (8009de4 <showUpTime+0x74>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d98:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d9a:	4b12      	ldr	r3, [pc, #72]	@ (8009de4 <showUpTime+0x74>)
 8009d9c:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d9e:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009da0:	4b10      	ldr	r3, [pc, #64]	@ (8009de4 <showUpTime+0x74>)
 8009da2:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009da4:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009da6:	4b10      	ldr	r3, [pc, #64]	@ (8009de8 <showUpTime+0x78>)
 8009da8:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009daa:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009dac:	4b0e      	ldr	r3, [pc, #56]	@ (8009de8 <showUpTime+0x78>)
 8009dae:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009db0:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009db2:	4b0d      	ldr	r3, [pc, #52]	@ (8009de8 <showUpTime+0x78>)
 8009db4:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009db6:	480d      	ldr	r0, [pc, #52]	@ (8009dec <showUpTime+0x7c>)
 8009db8:	9305      	str	r3, [sp, #20]
 8009dba:	4663      	mov	r3, ip
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	9603      	str	r6, [sp, #12]
 8009dc0:	9502      	str	r5, [sp, #8]
 8009dc2:	9401      	str	r4, [sp, #4]
 8009dc4:	9100      	str	r1, [sp, #0]
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	4641      	mov	r1, r8
 8009dca:	f7fe fe4f 	bl	8008a6c <printf_USB>
}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	b001      	add	sp, #4
 8009dd4:	bcc0      	pop	{r6, r7}
 8009dd6:	46b9      	mov	r9, r7
 8009dd8:	46b0      	mov	r8, r6
 8009dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ddc:	20000e68 	.word	0x20000e68
 8009de0:	2000005c 	.word	0x2000005c
 8009de4:	20000e54 	.word	0x20000e54
 8009de8:	20000e48 	.word	0x20000e48
 8009dec:	0802bf04 	.word	0x0802bf04

08009df0 <showTime>:

void showTime() {
 8009df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df2:	46de      	mov	lr, fp
 8009df4:	4657      	mov	r7, sl
 8009df6:	464e      	mov	r6, r9
 8009df8:	4645      	mov	r5, r8
 8009dfa:	b5e0      	push	{r5, r6, r7, lr}
 8009dfc:	b08d      	sub	sp, #52	@ 0x34
 8009dfe:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009e00:	4b41      	ldr	r3, [pc, #260]	@ (8009f08 <showTime+0x118>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d100      	bne.n	8009e0a <showTime+0x1a>
 8009e08:	e075      	b.n	8009ef6 <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009e0a:	4a40      	ldr	r2, [pc, #256]	@ (8009f0c <showTime+0x11c>)
 8009e0c:	4b40      	ldr	r3, [pc, #256]	@ (8009f10 <showTime+0x120>)
 8009e0e:	0011      	movs	r1, r2
 8009e10:	0018      	movs	r0, r3
 8009e12:	f000 fb09 	bl	800a428 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009e16:	4b3e      	ldr	r3, [pc, #248]	@ (8009f10 <showTime+0x120>)
 8009e18:	781a      	ldrb	r2, [r3, #0]
 8009e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8009f14 <showTime+0x124>)
 8009e1c:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8009f0c <showTime+0x11c>)
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	4b3d      	ldr	r3, [pc, #244]	@ (8009f18 <showTime+0x128>)
 8009e24:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009e26:	f000 f89b 	bl	8009f60 <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009e2a:	4b39      	ldr	r3, [pc, #228]	@ (8009f10 <showTime+0x120>)
 8009e2c:	785a      	ldrb	r2, [r3, #1]
 8009e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8009f1c <showTime+0x12c>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d039      	beq.n	8009eaa <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009e36:	4b36      	ldr	r3, [pc, #216]	@ (8009f10 <showTime+0x120>)
 8009e38:	785a      	ldrb	r2, [r3, #1]
 8009e3a:	4b38      	ldr	r3, [pc, #224]	@ (8009f1c <showTime+0x12c>)
 8009e3c:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009e3e:	4b33      	ldr	r3, [pc, #204]	@ (8009f0c <showTime+0x11c>)
 8009e40:	789b      	ldrb	r3, [r3, #2]
 8009e42:	469b      	mov	fp, r3
 8009e44:	4b31      	ldr	r3, [pc, #196]	@ (8009f0c <showTime+0x11c>)
 8009e46:	785b      	ldrb	r3, [r3, #1]
 8009e48:	1e5a      	subs	r2, r3, #1
 8009e4a:	4b35      	ldr	r3, [pc, #212]	@ (8009f20 <showTime+0x130>)
 8009e4c:	0092      	lsls	r2, r2, #2
 8009e4e:	58d3      	ldr	r3, [r2, r3]
 8009e50:	607b      	str	r3, [r7, #4]
 8009e52:	4a2e      	ldr	r2, [pc, #184]	@ (8009f0c <showTime+0x11c>)
 8009e54:	78d2      	ldrb	r2, [r2, #3]
 8009e56:	0010      	movs	r0, r2
 8009e58:	4a2d      	ldr	r2, [pc, #180]	@ (8009f10 <showTime+0x120>)
 8009e5a:	7812      	ldrb	r2, [r2, #0]
 8009e5c:	0014      	movs	r4, r2
 8009e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8009f10 <showTime+0x120>)
 8009e60:	7852      	ldrb	r2, [r2, #1]
 8009e62:	0015      	movs	r5, r2
 8009e64:	4a2a      	ldr	r2, [pc, #168]	@ (8009f10 <showTime+0x120>)
 8009e66:	7892      	ldrb	r2, [r2, #2]
 8009e68:	0016      	movs	r6, r2
 8009e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8009f24 <showTime+0x134>)
 8009e6c:	8812      	ldrh	r2, [r2, #0]
 8009e6e:	4694      	mov	ip, r2
 8009e70:	4a2c      	ldr	r2, [pc, #176]	@ (8009f24 <showTime+0x134>)
 8009e72:	7892      	ldrb	r2, [r2, #2]
 8009e74:	4690      	mov	r8, r2
 8009e76:	4a2b      	ldr	r2, [pc, #172]	@ (8009f24 <showTime+0x134>)
 8009e78:	78d2      	ldrb	r2, [r2, #3]
 8009e7a:	4691      	mov	r9, r2
 8009e7c:	4a29      	ldr	r2, [pc, #164]	@ (8009f24 <showTime+0x134>)
 8009e7e:	7912      	ldrb	r2, [r2, #4]
 8009e80:	4692      	mov	sl, r2
 8009e82:	4a29      	ldr	r2, [pc, #164]	@ (8009f28 <showTime+0x138>)
 8009e84:	4929      	ldr	r1, [pc, #164]	@ (8009f2c <showTime+0x13c>)
 8009e86:	4653      	mov	r3, sl
 8009e88:	9308      	str	r3, [sp, #32]
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	4643      	mov	r3, r8
 8009e90:	9306      	str	r3, [sp, #24]
 8009e92:	4663      	mov	r3, ip
 8009e94:	9305      	str	r3, [sp, #20]
 8009e96:	9604      	str	r6, [sp, #16]
 8009e98:	9503      	str	r5, [sp, #12]
 8009e9a:	9402      	str	r4, [sp, #8]
 8009e9c:	9001      	str	r0, [sp, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	465b      	mov	r3, fp
 8009ea4:	2002      	movs	r0, #2
 8009ea6:	f009 ff7f 	bl	8013da8 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8009f18 <showTime+0x128>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	d122      	bne.n	8009ef8 <showTime+0x108>
 8009eb2:	4b18      	ldr	r3, [pc, #96]	@ (8009f14 <showTime+0x124>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d11e      	bne.n	8009ef8 <showTime+0x108>
 8009eba:	4b15      	ldr	r3, [pc, #84]	@ (8009f10 <showTime+0x120>)
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d81a      	bhi.n	8009ef8 <showTime+0x108>
 8009ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f30 <showTime+0x140>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	4053      	eors	r3, r2
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d013      	beq.n	8009ef8 <showTime+0x108>
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8009f0c <showTime+0x11c>)
 8009ed2:	789b      	ldrb	r3, [r3, #2]
 8009ed4:	2b18      	cmp	r3, #24
 8009ed6:	d90f      	bls.n	8009ef8 <showTime+0x108>
 8009ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8009f0c <showTime+0x11c>)
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d003      	beq.n	8009ee8 <showTime+0xf8>
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8009f0c <showTime+0x11c>)
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b0a      	cmp	r3, #10
 8009ee6:	d107      	bne.n	8009ef8 <showTime+0x108>
    dstchkd = true;
 8009ee8:	4b11      	ldr	r3, [pc, #68]	@ (8009f30 <showTime+0x140>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009eee:	2000      	movs	r0, #0
 8009ef0:	f7fa fcd8 	bl	80048a4 <setESPTimeStamp>
 8009ef4:	e000      	b.n	8009ef8 <showTime+0x108>
    return;
 8009ef6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b003      	add	sp, #12
 8009efc:	bcf0      	pop	{r4, r5, r6, r7}
 8009efe:	46bb      	mov	fp, r7
 8009f00:	46b2      	mov	sl, r6
 8009f02:	46a9      	mov	r9, r5
 8009f04:	46a0      	mov	r8, r4
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	20000e44 	.word	0x20000e44
 8009f0c:	20000e68 	.word	0x20000e68
 8009f10:	20000e54 	.word	0x20000e54
 8009f14:	20000e42 	.word	0x20000e42
 8009f18:	20000e43 	.word	0x20000e43
 8009f1c:	20000e41 	.word	0x20000e41
 8009f20:	2000005c 	.word	0x2000005c
 8009f24:	20000e48 	.word	0x20000e48
 8009f28:	0802bf58 	.word	0x0802bf58
 8009f2c:	0802bfb0 	.word	0x0802bfb0
 8009f30:	20000e40 	.word	0x20000e40

08009f34 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f38:	4a07      	ldr	r2, [pc, #28]	@ (8009f58 <calculateNextNTPTime+0x24>)
 8009f3a:	4b08      	ldr	r3, [pc, #32]	@ (8009f5c <calculateNextNTPTime+0x28>)
 8009f3c:	0011      	movs	r1, r2
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f000 fa72 	bl	800a428 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009f44:	4a05      	ldr	r2, [pc, #20]	@ (8009f5c <calculateNextNTPTime+0x28>)
 8009f46:	4b04      	ldr	r3, [pc, #16]	@ (8009f58 <calculateNextNTPTime+0x24>)
 8009f48:	0011      	movs	r1, r2
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f000 fc6c 	bl	800a828 <makeTime>
 8009f50:	0003      	movs	r3, r0
}
 8009f52:	0018      	movs	r0, r3
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000e68 	.word	0x20000e68
 8009f5c:	20000e54 	.word	0x20000e54

08009f60 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009f66:	4a25      	ldr	r2, [pc, #148]	@ (8009ffc <UpdateSystemUptime+0x9c>)
 8009f68:	4b25      	ldr	r3, [pc, #148]	@ (800a000 <UpdateSystemUptime+0xa0>)
 8009f6a:	0011      	movs	r1, r2
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f000 fa5b 	bl	800a428 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009f72:	4a23      	ldr	r2, [pc, #140]	@ (800a000 <UpdateSystemUptime+0xa0>)
 8009f74:	4b21      	ldr	r3, [pc, #132]	@ (8009ffc <UpdateSystemUptime+0x9c>)
 8009f76:	0011      	movs	r1, r2
 8009f78:	0018      	movs	r0, r3
 8009f7a:	f000 fc55 	bl	800a828 <makeTime>
 8009f7e:	0002      	movs	r2, r0
 8009f80:	4b20      	ldr	r3, [pc, #128]	@ (800a004 <UpdateSystemUptime+0xa4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	213c      	movs	r1, #60	@ 0x3c
 8009f90:	0018      	movs	r0, r3
 8009f92:	f7f6 f98d 	bl	80002b0 <__aeabi_uidivmod>
 8009f96:	000b      	movs	r3, r1
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <UpdateSystemUptime+0xa8>)
 8009f9c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	213c      	movs	r1, #60	@ 0x3c
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7f6 f8fe 	bl	80001a4 <__udivsi3>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	213c      	movs	r1, #60	@ 0x3c
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f7f6 f97d 	bl	80002b0 <__aeabi_uidivmod>
 8009fb6:	000b      	movs	r3, r1
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	4b13      	ldr	r3, [pc, #76]	@ (800a008 <UpdateSystemUptime+0xa8>)
 8009fbc:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	213c      	movs	r1, #60	@ 0x3c
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f7f6 f8ee 	bl	80001a4 <__udivsi3>
 8009fc8:	0003      	movs	r3, r0
 8009fca:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2118      	movs	r1, #24
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f7f6 f96d 	bl	80002b0 <__aeabi_uidivmod>
 8009fd6:	000b      	movs	r3, r1
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <UpdateSystemUptime+0xa8>)
 8009fdc:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2118      	movs	r1, #24
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f7f6 f8de 	bl	80001a4 <__udivsi3>
 8009fe8:	0003      	movs	r3, r0
 8009fea:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	4b05      	ldr	r3, [pc, #20]	@ (800a008 <UpdateSystemUptime+0xa8>)
 8009ff2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009ff4:	46c0      	nop			@ (mov r8, r8)
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	b002      	add	sp, #8
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000e68 	.word	0x20000e68
 800a000:	20000e54 	.word	0x20000e54
 800a004:	20000e44 	.word	0x20000e44
 800a008:	20000e48 	.word	0x20000e48

0800a00c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a00c:	b590      	push	{r4, r7, lr}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	0008      	movs	r0, r1
 800a016:	0011      	movs	r1, r2
 800a018:	1cfb      	adds	r3, r7, #3
 800a01a:	1c02      	adds	r2, r0, #0
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	1cbb      	adds	r3, r7, #2
 800a020:	1c0a      	adds	r2, r1, #0
 800a022:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a024:	230e      	movs	r3, #14
 800a026:	18fb      	adds	r3, r7, r3
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a02c:	230f      	movs	r3, #15
 800a02e:	18fb      	adds	r3, r7, r3
 800a030:	1cfa      	adds	r2, r7, #3
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	e015      	b.n	800a064 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a038:	200f      	movs	r0, #15
 800a03a:	183b      	adds	r3, r7, r0
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	18d2      	adds	r2, r2, r3
 800a042:	240e      	movs	r4, #14
 800a044:	193b      	adds	r3, r7, r4
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	7811      	ldrb	r1, [r2, #0]
 800a04a:	2208      	movs	r2, #8
 800a04c:	18ba      	adds	r2, r7, r2
 800a04e:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a050:	193b      	adds	r3, r7, r4
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	193b      	adds	r3, r7, r4
 800a056:	3201      	adds	r2, #1
 800a058:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a05a:	183b      	adds	r3, r7, r0
 800a05c:	781a      	ldrb	r2, [r3, #0]
 800a05e:	183b      	adds	r3, r7, r0
 800a060:	3201      	adds	r2, #1
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	200f      	movs	r0, #15
 800a066:	183a      	adds	r2, r7, r0
 800a068:	1cbb      	adds	r3, r7, #2
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d9e2      	bls.n	800a038 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a072:	230e      	movs	r3, #14
 800a074:	18fb      	adds	r3, r7, r3
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2208      	movs	r2, #8
 800a07a:	18ba      	adds	r2, r7, r2
 800a07c:	2100      	movs	r1, #0
 800a07e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a080:	1cfb      	adds	r3, r7, #3
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b13      	cmp	r3, #19
 800a086:	d849      	bhi.n	800a11c <aBuff2int+0x110>
    if (start == 17) { //month
 800a088:	1cfb      	adds	r3, r7, #3
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b11      	cmp	r3, #17
 800a08e:	d122      	bne.n	800a0d6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a090:	183b      	adds	r3, r7, r0
 800a092:	2200      	movs	r2, #0
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	e018      	b.n	800a0ca <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a098:	240f      	movs	r4, #15
 800a09a:	193b      	adds	r3, r7, r4
 800a09c:	781a      	ldrb	r2, [r3, #0]
 800a09e:	4b25      	ldr	r3, [pc, #148]	@ (800a134 <aBuff2int+0x128>)
 800a0a0:	0092      	lsls	r2, r2, #2
 800a0a2:	58d2      	ldr	r2, [r2, r3]
 800a0a4:	2308      	movs	r3, #8
 800a0a6:	18fb      	adds	r3, r7, r3
 800a0a8:	0011      	movs	r1, r2
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f7f6 f854 	bl	8000158 <strcmp>
 800a0b0:	1e03      	subs	r3, r0, #0
 800a0b2:	d104      	bne.n	800a0be <aBuff2int+0xb2>
          return i+1;
 800a0b4:	193b      	adds	r3, r7, r4
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	e035      	b.n	800a12a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a0be:	210f      	movs	r1, #15
 800a0c0:	187b      	adds	r3, r7, r1
 800a0c2:	781a      	ldrb	r2, [r3, #0]
 800a0c4:	187b      	adds	r3, r7, r1
 800a0c6:	3201      	adds	r2, #1
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	230f      	movs	r3, #15
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b0b      	cmp	r3, #11
 800a0d2:	d9e1      	bls.n	800a098 <aBuff2int+0x8c>
 800a0d4:	e022      	b.n	800a11c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a0d6:	230f      	movs	r3, #15
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e018      	b.n	800a112 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a0e0:	240f      	movs	r4, #15
 800a0e2:	193b      	adds	r3, r7, r4
 800a0e4:	781a      	ldrb	r2, [r3, #0]
 800a0e6:	4b14      	ldr	r3, [pc, #80]	@ (800a138 <aBuff2int+0x12c>)
 800a0e8:	0092      	lsls	r2, r2, #2
 800a0ea:	58d2      	ldr	r2, [r2, r3]
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	0011      	movs	r1, r2
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f7f6 f830 	bl	8000158 <strcmp>
 800a0f8:	1e03      	subs	r3, r0, #0
 800a0fa:	d104      	bne.n	800a106 <aBuff2int+0xfa>
          return i+1;
 800a0fc:	193b      	adds	r3, r7, r4
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	3301      	adds	r3, #1
 800a102:	b2db      	uxtb	r3, r3
 800a104:	e011      	b.n	800a12a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a106:	210f      	movs	r1, #15
 800a108:	187b      	adds	r3, r7, r1
 800a10a:	781a      	ldrb	r2, [r3, #0]
 800a10c:	187b      	adds	r3, r7, r1
 800a10e:	3201      	adds	r2, #1
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	230f      	movs	r3, #15
 800a114:	18fb      	adds	r3, r7, r3
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b06      	cmp	r3, #6
 800a11a:	d9e1      	bls.n	800a0e0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a11c:	2308      	movs	r3, #8
 800a11e:	18fb      	adds	r3, r7, r3
 800a120:	0018      	movs	r0, r3
 800a122:	f01a fd14 	bl	8024b4e <atoi>
 800a126:	0003      	movs	r3, r0
 800a128:	b2db      	uxtb	r3, r3
}
 800a12a:	0018      	movs	r0, r3
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b005      	add	sp, #20
 800a130:	bd90      	pop	{r4, r7, pc}
 800a132:	46c0      	nop			@ (mov r8, r8)
 800a134:	2000005c 	.word	0x2000005c
 800a138:	20000040 	.word	0x20000040

0800a13c <ParseTime>:

void ParseTime(char* buffer) {
 800a13c:	b590      	push	{r4, r7, lr}
 800a13e:	b087      	sub	sp, #28
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a144:	4a7b      	ldr	r2, [pc, #492]	@ (800a334 <ParseTime+0x1f8>)
 800a146:	4b7c      	ldr	r3, [pc, #496]	@ (800a338 <ParseTime+0x1fc>)
 800a148:	0011      	movs	r1, r2
 800a14a:	0018      	movs	r0, r3
 800a14c:	f000 f96c 	bl	800a428 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2219      	movs	r2, #25
 800a154:	2118      	movs	r1, #24
 800a156:	0018      	movs	r0, r3
 800a158:	f7ff ff58 	bl	800a00c <aBuff2int>
 800a15c:	0003      	movs	r3, r0
 800a15e:	001a      	movs	r2, r3
 800a160:	4b75      	ldr	r3, [pc, #468]	@ (800a338 <ParseTime+0x1fc>)
 800a162:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	221c      	movs	r2, #28
 800a168:	211b      	movs	r1, #27
 800a16a:	0018      	movs	r0, r3
 800a16c:	f7ff ff4e 	bl	800a00c <aBuff2int>
 800a170:	0003      	movs	r3, r0
 800a172:	001a      	movs	r2, r3
 800a174:	4b70      	ldr	r3, [pc, #448]	@ (800a338 <ParseTime+0x1fc>)
 800a176:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	221f      	movs	r2, #31
 800a17c:	211e      	movs	r1, #30
 800a17e:	0018      	movs	r0, r3
 800a180:	f7ff ff44 	bl	800a00c <aBuff2int>
 800a184:	0003      	movs	r3, r0
 800a186:	001a      	movs	r2, r3
 800a188:	4b6b      	ldr	r3, [pc, #428]	@ (800a338 <ParseTime+0x1fc>)
 800a18a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2224      	movs	r2, #36	@ 0x24
 800a190:	2123      	movs	r1, #35	@ 0x23
 800a192:	0018      	movs	r0, r3
 800a194:	f7ff ff3a 	bl	800a00c <aBuff2int>
 800a198:	0003      	movs	r3, r0
 800a19a:	001a      	movs	r2, r3
 800a19c:	4b65      	ldr	r3, [pc, #404]	@ (800a334 <ParseTime+0x1f8>)
 800a19e:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2213      	movs	r2, #19
 800a1a4:	2111      	movs	r1, #17
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f7ff ff30 	bl	800a00c <aBuff2int>
 800a1ac:	0003      	movs	r3, r0
 800a1ae:	001a      	movs	r2, r3
 800a1b0:	4b60      	ldr	r3, [pc, #384]	@ (800a334 <ParseTime+0x1f8>)
 800a1b2:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2216      	movs	r2, #22
 800a1b8:	2115      	movs	r1, #21
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7ff ff26 	bl	800a00c <aBuff2int>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	001a      	movs	r2, r3
 800a1c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a334 <ParseTime+0x1f8>)
 800a1c6:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	220f      	movs	r2, #15
 800a1cc:	210d      	movs	r1, #13
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f7ff ff1c 	bl	800a00c <aBuff2int>
 800a1d4:	0003      	movs	r3, r0
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	4b56      	ldr	r3, [pc, #344]	@ (800a334 <ParseTime+0x1f8>)
 800a1da:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a1dc:	4b56      	ldr	r3, [pc, #344]	@ (800a338 <ParseTime+0x1fc>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	001c      	movs	r4, r3
 800a1e2:	4b55      	ldr	r3, [pc, #340]	@ (800a338 <ParseTime+0x1fc>)
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	4b53      	ldr	r3, [pc, #332]	@ (800a338 <ParseTime+0x1fc>)
 800a1ea:	789b      	ldrb	r3, [r3, #2]
 800a1ec:	4a53      	ldr	r2, [pc, #332]	@ (800a33c <ParseTime+0x200>)
 800a1ee:	4954      	ldr	r1, [pc, #336]	@ (800a340 <ParseTime+0x204>)
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	9000      	str	r0, [sp, #0]
 800a1f4:	0023      	movs	r3, r4
 800a1f6:	2003      	movs	r0, #3
 800a1f8:	f009 fdd6 	bl	8013da8 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a334 <ParseTime+0x1f8>)
 800a1fe:	789b      	ldrb	r3, [r3, #2]
 800a200:	001c      	movs	r4, r3
 800a202:	4b4c      	ldr	r3, [pc, #304]	@ (800a334 <ParseTime+0x1f8>)
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	0018      	movs	r0, r3
 800a208:	4b4a      	ldr	r3, [pc, #296]	@ (800a334 <ParseTime+0x1f8>)
 800a20a:	78db      	ldrb	r3, [r3, #3]
 800a20c:	4a4d      	ldr	r2, [pc, #308]	@ (800a344 <ParseTime+0x208>)
 800a20e:	494c      	ldr	r1, [pc, #304]	@ (800a340 <ParseTime+0x204>)
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	9000      	str	r0, [sp, #0]
 800a214:	0023      	movs	r3, r4
 800a216:	2003      	movs	r0, #3
 800a218:	f009 fdc6 	bl	8013da8 <CreateLine>
  RTC_SetTime(&currentTime);
 800a21c:	4b46      	ldr	r3, [pc, #280]	@ (800a338 <ParseTime+0x1fc>)
 800a21e:	0018      	movs	r0, r3
 800a220:	f000 f89e 	bl	800a360 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a224:	4b43      	ldr	r3, [pc, #268]	@ (800a334 <ParseTime+0x1f8>)
 800a226:	0018      	movs	r0, r3
 800a228:	f000 f8c0 	bl	800a3ac <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a22c:	230f      	movs	r3, #15
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a234:	4b3f      	ldr	r3, [pc, #252]	@ (800a334 <ParseTime+0x1f8>)
 800a236:	785b      	ldrb	r3, [r3, #1]
 800a238:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	dd04      	ble.n	800a24a <ParseTime+0x10e>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b0a      	cmp	r3, #10
 800a244:	dc01      	bgt.n	800a24a <ParseTime+0x10e>
 800a246:	2201      	movs	r2, #1
 800a248:	e000      	b.n	800a24c <ParseTime+0x110>
 800a24a:	2200      	movs	r2, #0
 800a24c:	200f      	movs	r0, #15
 800a24e:	183b      	adds	r3, r7, r0
 800a250:	701a      	strb	r2, [r3, #0]
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	2101      	movs	r1, #1
 800a256:	400a      	ands	r2, r1
 800a258:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a25a:	0002      	movs	r2, r0
 800a25c:	18bb      	adds	r3, r7, r2
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01d      	beq.n	800a2a0 <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b03      	cmp	r3, #3
 800a268:	d10b      	bne.n	800a282 <ParseTime+0x146>
 800a26a:	4b32      	ldr	r3, [pc, #200]	@ (800a334 <ParseTime+0x1f8>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b07      	cmp	r3, #7
 800a270:	d107      	bne.n	800a282 <ParseTime+0x146>
 800a272:	4b30      	ldr	r3, [pc, #192]	@ (800a334 <ParseTime+0x1f8>)
 800a274:	789b      	ldrb	r3, [r3, #2]
 800a276:	2b18      	cmp	r3, #24
 800a278:	d803      	bhi.n	800a282 <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a27a:	18bb      	adds	r3, r7, r2
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	e00e      	b.n	800a2a0 <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b0a      	cmp	r3, #10
 800a286:	d10b      	bne.n	800a2a0 <ParseTime+0x164>
 800a288:	4b2a      	ldr	r3, [pc, #168]	@ (800a334 <ParseTime+0x1f8>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d107      	bne.n	800a2a0 <ParseTime+0x164>
 800a290:	4b28      	ldr	r3, [pc, #160]	@ (800a334 <ParseTime+0x1f8>)
 800a292:	789b      	ldrb	r3, [r3, #2]
 800a294:	2b18      	cmp	r3, #24
 800a296:	d803      	bhi.n	800a2a0 <ParseTime+0x164>
    {
        dst = false;
 800a298:	230f      	movs	r3, #15
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a2a0:	230f      	movs	r3, #15
 800a2a2:	18fb      	adds	r3, r7, r3
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d02a      	beq.n	800a300 <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a2aa:	4a27      	ldr	r2, [pc, #156]	@ (800a348 <ParseTime+0x20c>)
 800a2ac:	4b27      	ldr	r3, [pc, #156]	@ (800a34c <ParseTime+0x210>)
 800a2ae:	0019      	movs	r1, r3
 800a2b0:	2002      	movs	r0, #2
 800a2b2:	f009 fd79 	bl	8013da8 <CreateLine>
    HAL_Delay(1000);
 800a2b6:	23fa      	movs	r3, #250	@ 0xfa
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f00a fb0a 	bl	80148d4 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a2c0:	4b23      	ldr	r3, [pc, #140]	@ (800a350 <ParseTime+0x214>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f012 f98b 	bl	801c5e0 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a2ca:	23fa      	movs	r3, #250	@ 0xfa
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f00a fb00 	bl	80148d4 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a2d4:	4a17      	ldr	r2, [pc, #92]	@ (800a334 <ParseTime+0x1f8>)
 800a2d6:	4b18      	ldr	r3, [pc, #96]	@ (800a338 <ParseTime+0x1fc>)
 800a2d8:	0011      	movs	r1, r2
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f000 f8a4 	bl	800a428 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a2e0:	4b15      	ldr	r3, [pc, #84]	@ (800a338 <ParseTime+0x1fc>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	001c      	movs	r4, r3
 800a2e6:	4b14      	ldr	r3, [pc, #80]	@ (800a338 <ParseTime+0x1fc>)
 800a2e8:	785b      	ldrb	r3, [r3, #1]
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	4b12      	ldr	r3, [pc, #72]	@ (800a338 <ParseTime+0x1fc>)
 800a2ee:	789b      	ldrb	r3, [r3, #2]
 800a2f0:	4a18      	ldr	r2, [pc, #96]	@ (800a354 <ParseTime+0x218>)
 800a2f2:	4913      	ldr	r1, [pc, #76]	@ (800a340 <ParseTime+0x204>)
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	9000      	str	r0, [sp, #0]
 800a2f8:	0023      	movs	r3, r4
 800a2fa:	2003      	movs	r0, #3
 800a2fc:	f009 fd54 	bl	8013da8 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a300:	4b0c      	ldr	r3, [pc, #48]	@ (800a334 <ParseTime+0x1f8>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d104      	bne.n	800a312 <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a308:	f004 fa16 	bl	800e738 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a30c:	4b12      	ldr	r3, [pc, #72]	@ (800a358 <ParseTime+0x21c>)
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a312:	4b12      	ldr	r3, [pc, #72]	@ (800a35c <ParseTime+0x220>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d108      	bne.n	800a32c <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a31a:	4a07      	ldr	r2, [pc, #28]	@ (800a338 <ParseTime+0x1fc>)
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <ParseTime+0x1f8>)
 800a31e:	0011      	movs	r1, r2
 800a320:	0018      	movs	r0, r3
 800a322:	f000 fa81 	bl	800a828 <makeTime>
 800a326:	0002      	movs	r2, r0
 800a328:	4b0c      	ldr	r3, [pc, #48]	@ (800a35c <ParseTime+0x220>)
 800a32a:	601a      	str	r2, [r3, #0]
  }
}
 800a32c:	46c0      	nop			@ (mov r8, r8)
 800a32e:	46bd      	mov	sp, r7
 800a330:	b005      	add	sp, #20
 800a332:	bd90      	pop	{r4, r7, pc}
 800a334:	20000e68 	.word	0x20000e68
 800a338:	20000e54 	.word	0x20000e54
 800a33c:	0802bfb4 	.word	0x0802bfb4
 800a340:	0802bfec 	.word	0x0802bfec
 800a344:	0802bff0 	.word	0x0802bff0
 800a348:	0802c024 	.word	0x0802c024
 800a34c:	0802bfb0 	.word	0x0802bfb0
 800a350:	20000e50 	.word	0x20000e50
 800a354:	0802c040 	.word	0x0802c040
 800a358:	20000e40 	.word	0x20000e40
 800a35c:	20000e44 	.word	0x20000e44

0800a360 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a37a:	4b09      	ldr	r3, [pc, #36]	@ (800a3a0 <RTC_SetTime+0x40>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	0018      	movs	r0, r3
 800a384:	f011 ff18 	bl	801c1b8 <HAL_RTC_SetTime>
 800a388:	1e03      	subs	r3, r0, #0
 800a38a:	d005      	beq.n	800a398 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a38c:	4a05      	ldr	r2, [pc, #20]	@ (800a3a4 <RTC_SetTime+0x44>)
 800a38e:	4b06      	ldr	r3, [pc, #24]	@ (800a3a8 <RTC_SetTime+0x48>)
 800a390:	0019      	movs	r1, r3
 800a392:	2001      	movs	r0, #1
 800a394:	f009 fd08 	bl	8013da8 <CreateLine>
    }
}
 800a398:	46c0      	nop			@ (mov r8, r8)
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b002      	add	sp, #8
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000e50 	.word	0x20000e50
 800a3a4:	0802c074 	.word	0x0802c074
 800a3a8:	0802c090 	.word	0x0802c090

0800a3ac <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a3b4:	4b16      	ldr	r3, [pc, #88]	@ (800a410 <RTC_SetDate+0x64>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	0018      	movs	r0, r3
 800a3be:	f012 f803 	bl	801c3c8 <HAL_RTC_SetDate>
 800a3c2:	1e03      	subs	r3, r0, #0
 800a3c4:	d005      	beq.n	800a3d2 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a3c6:	4a13      	ldr	r2, [pc, #76]	@ (800a414 <RTC_SetDate+0x68>)
 800a3c8:	4b13      	ldr	r3, [pc, #76]	@ (800a418 <RTC_SetDate+0x6c>)
 800a3ca:	0019      	movs	r1, r3
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	f009 fceb 	bl	8013da8 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a410 <RTC_SetDate+0x64>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f012 fb59 	bl	801ca90 <HAL_RTCEx_BKUPRead>
 800a3de:	0003      	movs	r3, r0
 800a3e0:	4a0e      	ldr	r2, [pc, #56]	@ (800a41c <RTC_SetDate+0x70>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d010      	beq.n	800a408 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a3e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a420 <RTC_SetDate+0x74>)
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a424 <RTC_SetDate+0x78>)
 800a3ea:	0019      	movs	r1, r3
 800a3ec:	2003      	movs	r0, #3
 800a3ee:	f009 fcdb 	bl	8013da8 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a3f2:	f010 fe77 	bl	801b0e4 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a3f6:	4b06      	ldr	r3, [pc, #24]	@ (800a410 <RTC_SetDate+0x64>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a08      	ldr	r2, [pc, #32]	@ (800a41c <RTC_SetDate+0x70>)
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	0018      	movs	r0, r3
 800a400:	f012 fb2e 	bl	801ca60 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a404:	f010 fe7c 	bl	801b100 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a408:	46c0      	nop			@ (mov r8, r8)
 800a40a:	46bd      	mov	sp, r7
 800a40c:	b002      	add	sp, #8
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000e50 	.word	0x20000e50
 800a414:	0802c094 	.word	0x0802c094
 800a418:	0802c090 	.word	0x0802c090
 800a41c:	0000bebe 	.word	0x0000bebe
 800a420:	0802c0b0 	.word	0x0802c0b0
 800a424:	0802bfec 	.word	0x0802bfec

0800a428 <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a432:	240f      	movs	r4, #15
 800a434:	193b      	adds	r3, r7, r4
 800a436:	2201      	movs	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a43a:	230e      	movs	r3, #14
 800a43c:	18fb      	adds	r3, r7, r3
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a442:	4b31      	ldr	r3, [pc, #196]	@ (800a508 <RTC_GetTime+0xe0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	1c18      	adds	r0, r3, #0
 800a448:	f7f9 fa24 	bl	8003894 <__aeabi_f2d>
 800a44c:	4a2f      	ldr	r2, [pc, #188]	@ (800a50c <RTC_GetTime+0xe4>)
 800a44e:	4b30      	ldr	r3, [pc, #192]	@ (800a510 <RTC_GetTime+0xe8>)
 800a450:	f7f6 f834 	bl	80004bc <__aeabi_dcmplt>
 800a454:	1e03      	subs	r3, r0, #0
 800a456:	d004      	beq.n	800a462 <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a458:	193b      	adds	r3, r7, r4
 800a45a:	781a      	ldrb	r2, [r3, #0]
 800a45c:	193b      	adds	r3, r7, r4
 800a45e:	3201      	adds	r2, #1
 800a460:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a462:	230d      	movs	r3, #13
 800a464:	18fb      	adds	r3, r7, r3
 800a466:	2200      	movs	r2, #0
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e03f      	b.n	800a4ec <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a46c:	4b29      	ldr	r3, [pc, #164]	@ (800a514 <RTC_GetTime+0xec>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	0018      	movs	r0, r3
 800a476:	f011 ff49 	bl	801c30c <HAL_RTC_GetTime>
 800a47a:	1e03      	subs	r3, r0, #0
 800a47c:	d005      	beq.n	800a48a <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a47e:	4a26      	ldr	r2, [pc, #152]	@ (800a518 <RTC_GetTime+0xf0>)
 800a480:	4b26      	ldr	r3, [pc, #152]	@ (800a51c <RTC_GetTime+0xf4>)
 800a482:	0019      	movs	r1, r3
 800a484:	2001      	movs	r0, #1
 800a486:	f009 fc8f 	bl	8013da8 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a48a:	4b22      	ldr	r3, [pc, #136]	@ (800a514 <RTC_GetTime+0xec>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	2200      	movs	r2, #0
 800a492:	0018      	movs	r0, r3
 800a494:	f012 f82c 	bl	801c4f0 <HAL_RTC_GetDate>
 800a498:	1e03      	subs	r3, r0, #0
 800a49a:	d005      	beq.n	800a4a8 <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a49c:	4a20      	ldr	r2, [pc, #128]	@ (800a520 <RTC_GetTime+0xf8>)
 800a49e:	4b1f      	ldr	r3, [pc, #124]	@ (800a51c <RTC_GetTime+0xf4>)
 800a4a0:	0019      	movs	r1, r3
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	f009 fc80 	bl	8013da8 <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a4a8:	4b17      	ldr	r3, [pc, #92]	@ (800a508 <RTC_GetTime+0xe0>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	1c18      	adds	r0, r3, #0
 800a4ae:	f7f9 f9f1 	bl	8003894 <__aeabi_f2d>
 800a4b2:	4a16      	ldr	r2, [pc, #88]	@ (800a50c <RTC_GetTime+0xe4>)
 800a4b4:	4b16      	ldr	r3, [pc, #88]	@ (800a510 <RTC_GetTime+0xe8>)
 800a4b6:	f7f6 f801 	bl	80004bc <__aeabi_dcmplt>
 800a4ba:	1e03      	subs	r3, r0, #0
 800a4bc:	d010      	beq.n	800a4e0 <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	210e      	movs	r1, #14
 800a4c4:	187a      	adds	r2, r7, r1
 800a4c6:	7812      	ldrb	r2, [r2, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d018      	beq.n	800a4fe <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a4cc:	187b      	adds	r3, r7, r1
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	7812      	ldrb	r2, [r2, #0]
 800a4d2:	701a      	strb	r2, [r3, #0]
        t++;
 800a4d4:	210f      	movs	r1, #15
 800a4d6:	187b      	adds	r3, r7, r1
 800a4d8:	781a      	ldrb	r2, [r3, #0]
 800a4da:	187b      	adds	r3, r7, r1
 800a4dc:	3201      	adds	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a4e0:	210d      	movs	r1, #13
 800a4e2:	187b      	adds	r3, r7, r1
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	187b      	adds	r3, r7, r1
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	230d      	movs	r3, #13
 800a4ee:	18fa      	adds	r2, r7, r3
 800a4f0:	230f      	movs	r3, #15
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	7812      	ldrb	r2, [r2, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d3b7      	bcc.n	800a46c <RTC_GetTime+0x44>
 800a4fc:	e000      	b.n	800a500 <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a4fe:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a500:	46bd      	mov	sp, r7
 800a502:	b005      	add	sp, #20
 800a504:	bd90      	pop	{r4, r7, pc}
 800a506:	46c0      	nop			@ (mov r8, r8)
 800a508:	20002158 	.word	0x20002158
 800a50c:	c28f5c29 	.word	0xc28f5c29
 800a510:	400e28f5 	.word	0x400e28f5
 800a514:	20000e50 	.word	0x20000e50
 800a518:	0802c0c8 	.word	0x0802c0c8
 800a51c:	0802c090 	.word	0x0802c090
 800a520:	0802c0e4 	.word	0x0802c0e4

0800a524 <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a528:	4a07      	ldr	r2, [pc, #28]	@ (800a548 <getPosixTime+0x24>)
 800a52a:	4b08      	ldr	r3, [pc, #32]	@ (800a54c <getPosixTime+0x28>)
 800a52c:	0011      	movs	r1, r2
 800a52e:	0018      	movs	r0, r3
 800a530:	f7ff ff7a 	bl	800a428 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a534:	4a05      	ldr	r2, [pc, #20]	@ (800a54c <getPosixTime+0x28>)
 800a536:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <getPosixTime+0x24>)
 800a538:	0011      	movs	r1, r2
 800a53a:	0018      	movs	r0, r3
 800a53c:	f000 f974 	bl	800a828 <makeTime>
 800a540:	0003      	movs	r3, r0
}
 800a542:	0018      	movs	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20000e68 	.word	0x20000e68
 800a54c:	20000e54 	.word	0x20000e54

0800a550 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a552:	b087      	sub	sp, #28
 800a554:	af04      	add	r7, sp, #16
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a55a:	4a12      	ldr	r2, [pc, #72]	@ (800a5a4 <getUTCfromPosixTime+0x54>)
 800a55c:	4912      	ldr	r1, [pc, #72]	@ (800a5a8 <getUTCfromPosixTime+0x58>)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	0018      	movs	r0, r3
 800a562:	f000 fa2b 	bl	800a9bc <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a566:	4b10      	ldr	r3, [pc, #64]	@ (800a5a8 <getUTCfromPosixTime+0x58>)
 800a568:	789b      	ldrb	r3, [r3, #2]
 800a56a:	001e      	movs	r6, r3
 800a56c:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a8 <getUTCfromPosixTime+0x58>)
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	469c      	mov	ip, r3
 800a572:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a8 <getUTCfromPosixTime+0x58>)
 800a574:	78db      	ldrb	r3, [r3, #3]
 800a576:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a578:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a4 <getUTCfromPosixTime+0x54>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a57c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a57e:	4b09      	ldr	r3, [pc, #36]	@ (800a5a4 <getUTCfromPosixTime+0x54>)
 800a580:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a582:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a584:	4b07      	ldr	r3, [pc, #28]	@ (800a5a4 <getUTCfromPosixTime+0x54>)
 800a586:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a588:	4908      	ldr	r1, [pc, #32]	@ (800a5ac <getUTCfromPosixTime+0x5c>)
 800a58a:	6838      	ldr	r0, [r7, #0]
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	9502      	str	r5, [sp, #8]
 800a590:	9401      	str	r4, [sp, #4]
 800a592:	9200      	str	r2, [sp, #0]
 800a594:	4663      	mov	r3, ip
 800a596:	0032      	movs	r2, r6
 800a598:	f01b ff2e 	bl	80263f8 <siprintf>
}
 800a59c:	46c0      	nop			@ (mov r8, r8)
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	b003      	add	sp, #12
 800a5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a4:	20000e54 	.word	0x20000e54
 800a5a8:	20000e68 	.word	0x20000e68
 800a5ac:	0802c100 	.word	0x0802c100

0800a5b0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a5b8:	4b10      	ldr	r3, [pc, #64]	@ (800a5fc <RTC_SetWakeUpTimer+0x4c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f012 f9b3 	bl	801c928 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a5fc <RTC_SetWakeUpTimer+0x4c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	22ff      	movs	r2, #255	@ 0xff
 800a5cc:	401a      	ands	r2, r3
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a5fc <RTC_SetWakeUpTimer+0x4c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	490a      	ldr	r1, [pc, #40]	@ (800a600 <RTC_SetWakeUpTimer+0x50>)
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a5da:	4b0a      	ldr	r3, [pc, #40]	@ (800a604 <RTC_SetWakeUpTimer+0x54>)
 800a5dc:	2280      	movs	r2, #128	@ 0x80
 800a5de:	0352      	lsls	r2, r2, #13
 800a5e0:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a5e2:	4b06      	ldr	r3, [pc, #24]	@ (800a5fc <RTC_SetWakeUpTimer+0x4c>)
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	0019      	movs	r1, r3
 800a5ee:	f012 f8c3 	bl	801c778 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a5f2:	46c0      	nop			@ (mov r8, r8)
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b002      	add	sp, #8
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	46c0      	nop			@ (mov r8, r8)
 800a5fc:	20000e50 	.word	0x20000e50
 800a600:	fffffb7f 	.word	0xfffffb7f
 800a604:	40010400 	.word	0x40010400

0800a608 <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	0002      	movs	r2, r0
 800a610:	1dbb      	adds	r3, r7, #6
 800a612:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a614:	4b22      	ldr	r3, [pc, #136]	@ (800a6a0 <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a61c:	f004 f860 	bl	800e6e0 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a620:	4b20      	ldr	r3, [pc, #128]	@ (800a6a4 <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	1c18      	adds	r0, r3, #0
 800a626:	f7f9 f935 	bl	8003894 <__aeabi_f2d>
 800a62a:	0002      	movs	r2, r0
 800a62c:	000b      	movs	r3, r1
 800a62e:	481e      	ldr	r0, [pc, #120]	@ (800a6a8 <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a630:	491e      	ldr	r1, [pc, #120]	@ (800a6ac <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a632:	9200      	str	r2, [sp, #0]
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	0002      	movs	r2, r0
 800a638:	2002      	movs	r0, #2
 800a63a:	f009 fbb5 	bl	8013da8 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a63e:	1dbb      	adds	r3, r7, #6
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	4a1b      	ldr	r2, [pc, #108]	@ (800a6b0 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a644:	491b      	ldr	r1, [pc, #108]	@ (800a6b4 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a646:	2003      	movs	r0, #3
 800a648:	f009 fbae 	bl	8013da8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a64c:	f7ff ff6a 	bl	800a524 <getPosixTime>
 800a650:	0002      	movs	r2, r0
 800a652:	1dbb      	adds	r3, r7, #6
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	18d3      	adds	r3, r2, r3
 800a658:	4a17      	ldr	r2, [pc, #92]	@ (800a6b8 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a65a:	0011      	movs	r1, r2
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7ff ff77 	bl	800a550 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a662:	4b15      	ldr	r3, [pc, #84]	@ (800a6b8 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a664:	4a15      	ldr	r2, [pc, #84]	@ (800a6bc <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a666:	4911      	ldr	r1, [pc, #68]	@ (800a6ac <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a668:	2002      	movs	r0, #2
 800a66a:	f009 fb9d 	bl	8013da8 <CreateLine>
  HAL_Delay(100);
 800a66e:	2064      	movs	r0, #100	@ 0x64
 800a670:	f00a f930 	bl	80148d4 <HAL_Delay>
  HAL_SuspendTick();
 800a674:	f00a f952 	bl	801491c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a678:	1dbb      	adds	r3, r7, #6
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7ff ff97 	bl	800a5b0 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a682:	2101      	movs	r1, #1
 800a684:	2001      	movs	r0, #1
 800a686:	f010 fd4b 	bl	801b120 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a68a:	f002 fd0f 	bl	800d0ac <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a68e:	f00a f953 	bl	8014938 <HAL_ResumeTick>
  showTime();
 800a692:	f7ff fbad 	bl	8009df0 <showTime>
}
 800a696:	46c0      	nop			@ (mov r8, r8)
 800a698:	46bd      	mov	sp, r7
 800a69a:	b002      	add	sp, #8
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	46c0      	nop			@ (mov r8, r8)
 800a6a0:	200011bd 	.word	0x200011bd
 800a6a4:	20002158 	.word	0x20002158
 800a6a8:	0802c154 	.word	0x0802c154
 800a6ac:	0802bfb0 	.word	0x0802bfb0
 800a6b0:	0802c16c 	.word	0x0802c16c
 800a6b4:	0802bfec 	.word	0x0802bfec
 800a6b8:	20000e6c 	.word	0x20000e6c
 800a6bc:	0802c190 	.word	0x0802c190

0800a6c0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	0002      	movs	r2, r0
 800a6c8:	1dbb      	adds	r3, r7, #6
 800a6ca:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a6cc:	4b45      	ldr	r3, [pc, #276]	@ (800a7e4 <Enter_Stop_Mode+0x124>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a6d4:	f004 f804 	bl	800e6e0 <sen5x_Power_Off>
  }
//  Info("Battery voltage %.02fV", batteryCharge);
  batteryChargeCheck();
 800a6d8:	f007 ff8a 	bl	80125f0 <batteryChargeCheck>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a6dc:	1dbb      	adds	r3, r7, #6
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	4a41      	ldr	r2, [pc, #260]	@ (800a7e8 <Enter_Stop_Mode+0x128>)
 800a6e2:	4942      	ldr	r1, [pc, #264]	@ (800a7ec <Enter_Stop_Mode+0x12c>)
 800a6e4:	2003      	movs	r0, #3
 800a6e6:	f009 fb5f 	bl	8013da8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a6ea:	f7ff ff1b 	bl	800a524 <getPosixTime>
 800a6ee:	0002      	movs	r2, r0
 800a6f0:	1dbb      	adds	r3, r7, #6
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	18d3      	adds	r3, r2, r3
 800a6f6:	4a3e      	ldr	r2, [pc, #248]	@ (800a7f0 <Enter_Stop_Mode+0x130>)
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f7ff ff28 	bl	800a550 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a700:	4b3b      	ldr	r3, [pc, #236]	@ (800a7f0 <Enter_Stop_Mode+0x130>)
 800a702:	4a3c      	ldr	r2, [pc, #240]	@ (800a7f4 <Enter_Stop_Mode+0x134>)
 800a704:	493c      	ldr	r1, [pc, #240]	@ (800a7f8 <Enter_Stop_Mode+0x138>)
 800a706:	2002      	movs	r0, #2
 800a708:	f009 fb4e 	bl	8013da8 <CreateLine>
  HAL_Delay(100);
 800a70c:	2064      	movs	r0, #100	@ 0x64
 800a70e:	f00a f8e1 	bl	80148d4 <HAL_Delay>
  HAL_SuspendTick();
 800a712:	f00a f903 	bl	801491c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a716:	1dbb      	adds	r3, r7, #6
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	0018      	movs	r0, r3
 800a71c:	f7ff ff48 	bl	800a5b0 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a720:	2101      	movs	r1, #1
 800a722:	2001      	movs	r0, #1
 800a724:	f010 fcfc 	bl	801b120 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a728:	f002 fcc0 	bl	800d0ac <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a72c:	f00a f904 	bl	8014938 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a730:	1dbb      	adds	r3, r7, #6
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	0018      	movs	r0, r3
 800a736:	f003 ff47 	bl	800e5c8 <sen5x_enable>
 800a73a:	1e03      	subs	r3, r0, #0
 800a73c:	d01e      	beq.n	800a77c <Enter_Stop_Mode+0xbc>
    showTime();
 800a73e:	f7ff fb57 	bl	8009df0 <showTime>
    set_light_on_state();
 800a742:	f004 fc9d 	bl	800f080 <set_light_on_state>
    if (!userToggle) {
 800a746:	4b2d      	ldr	r3, [pc, #180]	@ (800a7fc <Enter_Stop_Mode+0x13c>)
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2201      	movs	r2, #1
 800a74c:	4053      	eors	r3, r2
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d013      	beq.n	800a77c <Enter_Stop_Mode+0xbc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a754:	201c      	movs	r0, #28
 800a756:	f7ff ff2b 	bl	800a5b0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a75a:	4a23      	ldr	r2, [pc, #140]	@ (800a7e8 <Enter_Stop_Mode+0x128>)
 800a75c:	4923      	ldr	r1, [pc, #140]	@ (800a7ec <Enter_Stop_Mode+0x12c>)
 800a75e:	231c      	movs	r3, #28
 800a760:	2003      	movs	r0, #3
 800a762:	f009 fb21 	bl	8013da8 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a766:	2101      	movs	r1, #1
 800a768:	2001      	movs	r0, #1
 800a76a:	f010 fcd9 	bl	801b120 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a76e:	f002 fc9d 	bl	800d0ac <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a772:	f00a f8e1 	bl	8014938 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a776:	2000      	movs	r0, #0
 800a778:	f003 ff04 	bl	800e584 <setsen5xReadTimer>
    }
  }
  showTime();
 800a77c:	f7ff fb38 	bl	8009df0 <showTime>
  EnabledConnectedDevices();
 800a780:	f003 fa94 	bl	800dcac <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a784:	f003 fb94 	bl	800deb0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a788:	f006 faf2 	bl	8010d70 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a78c:	f7f9 f9d6 	bl	8003b3c <ResetENS160samplecounter>
  SetBatteryReadTimer(0);
 800a790:	2000      	movs	r0, #0
 800a792:	f002 f96f 	bl	800ca74 <SetBatteryReadTimer>
  setsen5xSamplecounter(0);
 800a796:	2000      	movs	r0, #0
 800a798:	f003 ff06 	bl	800e5a8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a79c:	4b18      	ldr	r3, [pc, #96]	@ (800a800 <Enter_Stop_Mode+0x140>)
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f7fa f880 	bl	80048a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a7a4:	201e      	movs	r0, #30
 800a7a6:	f006 fad1 	bl	8010d4c <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a7aa:	205a      	movs	r0, #90	@ 0x5a
 800a7ac:	f009 fda6 	bl	80142fc <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a7b0:	203c      	movs	r0, #60	@ 0x3c
 800a7b2:	f000 fb95 	bl	800aee0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a7b6:	205a      	movs	r0, #90	@ 0x5a
 800a7b8:	f000 ff6e 	bl	800b698 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a7bc:	2000      	movs	r0, #0
 800a7be:	f7f9 f9c7 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f003 fb62 	bl	800de8c <setMICTimeStamp>
  ESPTransmitDone = false;
 800a7c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a804 <Enter_Stop_Mode+0x144>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a7ce:	f00a f877 	bl	80148c0 <HAL_GetTick>
 800a7d2:	0003      	movs	r3, r0
 800a7d4:	4a0a      	ldr	r2, [pc, #40]	@ (800a800 <Enter_Stop_Mode+0x140>)
 800a7d6:	189a      	adds	r2, r3, r2
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a808 <Enter_Stop_Mode+0x148>)
 800a7da:	601a      	str	r2, [r3, #0]
}
 800a7dc:	46c0      	nop			@ (mov r8, r8)
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	b002      	add	sp, #8
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	200011bd 	.word	0x200011bd
 800a7e8:	0802c16c 	.word	0x0802c16c
 800a7ec:	0802bfec 	.word	0x0802bfec
 800a7f0:	20000e6c 	.word	0x20000e6c
 800a7f4:	0802c190 	.word	0x0802c190
 800a7f8:	0802bfb0 	.word	0x0802bfb0
 800a7fc:	2000214e 	.word	0x2000214e
 800a800:	00001194 	.word	0x00001194
 800a804:	200005b3 	.word	0x200005b3
 800a808:	20001114 	.word	0x20001114

0800a80c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a814:	4b03      	ldr	r3, [pc, #12]	@ (800a824 <InitClock+0x18>)
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	601a      	str	r2, [r3, #0]
}
 800a81a:	46c0      	nop			@ (mov r8, r8)
 800a81c:	46bd      	mov	sp, r7
 800a81e:	b002      	add	sp, #8
 800a820:	bd80      	pop	{r7, pc}
 800a822:	46c0      	nop			@ (mov r8, r8)
 800a824:	20000e50 	.word	0x20000e50

0800a828 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	78db      	ldrb	r3, [r3, #3]
 800a836:	001a      	movs	r2, r3
 800a838:	0013      	movs	r3, r2
 800a83a:	025b      	lsls	r3, r3, #9
 800a83c:	189b      	adds	r3, r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	189b      	adds	r3, r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	189b      	adds	r3, r3, r2
 800a846:	011a      	lsls	r2, r3, #4
 800a848:	1ad2      	subs	r2, r2, r3
 800a84a:	01d3      	lsls	r3, r2, #7
 800a84c:	001a      	movs	r2, r3
 800a84e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	e028      	b.n	800a8a8 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4a53      	ldr	r2, [pc, #332]	@ (800a9a8 <makeTime+0x180>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	db21      	blt.n	800a8a2 <makeTime+0x7a>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4a52      	ldr	r2, [pc, #328]	@ (800a9ac <makeTime+0x184>)
 800a862:	4694      	mov	ip, r2
 800a864:	4463      	add	r3, ip
 800a866:	001a      	movs	r2, r3
 800a868:	2303      	movs	r3, #3
 800a86a:	4013      	ands	r3, r2
 800a86c:	d119      	bne.n	800a8a2 <makeTime+0x7a>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4a4e      	ldr	r2, [pc, #312]	@ (800a9ac <makeTime+0x184>)
 800a872:	4694      	mov	ip, r2
 800a874:	4463      	add	r3, ip
 800a876:	2164      	movs	r1, #100	@ 0x64
 800a878:	0018      	movs	r0, r3
 800a87a:	f7f5 fe03 	bl	8000484 <__aeabi_idivmod>
 800a87e:	1e0b      	subs	r3, r1, #0
 800a880:	d10a      	bne.n	800a898 <makeTime+0x70>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4a49      	ldr	r2, [pc, #292]	@ (800a9ac <makeTime+0x184>)
 800a886:	4694      	mov	ip, r2
 800a888:	4463      	add	r3, ip
 800a88a:	22c8      	movs	r2, #200	@ 0xc8
 800a88c:	0051      	lsls	r1, r2, #1
 800a88e:	0018      	movs	r0, r3
 800a890:	f7f5 fdf8 	bl	8000484 <__aeabi_idivmod>
 800a894:	1e0b      	subs	r3, r1, #0
 800a896:	d104      	bne.n	800a8a2 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4a45      	ldr	r2, [pc, #276]	@ (800a9b0 <makeTime+0x188>)
 800a89c:	4694      	mov	ip, r2
 800a89e:	4463      	add	r3, ip
 800a8a0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	78db      	ldrb	r3, [r3, #3]
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	dbd0      	blt.n	800a856 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e03c      	b.n	800a934 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d125      	bne.n	800a90c <makeTime+0xe4>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	78db      	ldrb	r3, [r3, #3]
 800a8c4:	4a39      	ldr	r2, [pc, #228]	@ (800a9ac <makeTime+0x184>)
 800a8c6:	4694      	mov	ip, r2
 800a8c8:	4463      	add	r3, ip
 800a8ca:	001a      	movs	r2, r3
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	d11c      	bne.n	800a90c <makeTime+0xe4>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	78db      	ldrb	r3, [r3, #3]
 800a8d6:	4a35      	ldr	r2, [pc, #212]	@ (800a9ac <makeTime+0x184>)
 800a8d8:	4694      	mov	ip, r2
 800a8da:	4463      	add	r3, ip
 800a8dc:	2164      	movs	r1, #100	@ 0x64
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f7f5 fdd0 	bl	8000484 <__aeabi_idivmod>
 800a8e4:	1e0b      	subs	r3, r1, #0
 800a8e6:	d10b      	bne.n	800a900 <makeTime+0xd8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	78db      	ldrb	r3, [r3, #3]
 800a8ec:	4a2f      	ldr	r2, [pc, #188]	@ (800a9ac <makeTime+0x184>)
 800a8ee:	4694      	mov	ip, r2
 800a8f0:	4463      	add	r3, ip
 800a8f2:	22c8      	movs	r2, #200	@ 0xc8
 800a8f4:	0051      	lsls	r1, r2, #1
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	f7f5 fdc4 	bl	8000484 <__aeabi_idivmod>
 800a8fc:	1e0b      	subs	r3, r1, #0
 800a8fe:	d105      	bne.n	800a90c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	4a2c      	ldr	r2, [pc, #176]	@ (800a9b4 <makeTime+0x18c>)
 800a904:	4694      	mov	ip, r2
 800a906:	4463      	add	r3, ip
 800a908:	60bb      	str	r3, [r7, #8]
 800a90a:	e010      	b.n	800a92e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3b01      	subs	r3, #1
 800a910:	4a29      	ldr	r2, [pc, #164]	@ (800a9b8 <makeTime+0x190>)
 800a912:	5cd3      	ldrb	r3, [r2, r3]
 800a914:	001a      	movs	r2, r3
 800a916:	0013      	movs	r3, r2
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	189b      	adds	r3, r3, r2
 800a91c:	011a      	lsls	r2, r3, #4
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	0113      	lsls	r3, r2, #4
 800a922:	1a9b      	subs	r3, r3, r2
 800a924:	01db      	lsls	r3, r3, #7
 800a926:	001a      	movs	r2, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	189b      	adds	r3, r3, r2
 800a92c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3301      	adds	r3, #1
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	001a      	movs	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4293      	cmp	r3, r2
 800a93e:	dbbc      	blt.n	800a8ba <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	789b      	ldrb	r3, [r3, #2]
 800a944:	3b01      	subs	r3, #1
 800a946:	001a      	movs	r2, r3
 800a948:	0013      	movs	r3, r2
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	189b      	adds	r3, r3, r2
 800a94e:	011a      	lsls	r2, r3, #4
 800a950:	1ad2      	subs	r2, r2, r3
 800a952:	0113      	lsls	r3, r2, #4
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	01db      	lsls	r3, r3, #7
 800a958:	001a      	movs	r2, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	189b      	adds	r3, r3, r2
 800a95e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	001a      	movs	r2, r3
 800a966:	0013      	movs	r3, r2
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	011a      	lsls	r2, r3, #4
 800a96e:	1ad2      	subs	r2, r2, r3
 800a970:	0113      	lsls	r3, r2, #4
 800a972:	001a      	movs	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	189b      	adds	r3, r3, r2
 800a978:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	001a      	movs	r2, r3
 800a980:	0013      	movs	r3, r2
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	001a      	movs	r2, r3
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	189b      	adds	r3, r3, r2
 800a98e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	789b      	ldrb	r3, [r3, #2]
 800a994:	001a      	movs	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	189b      	adds	r3, r3, r2
 800a99a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a99c:	68bb      	ldr	r3, [r7, #8]
}
 800a99e:	0018      	movs	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b004      	add	sp, #16
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	fffff84f 	.word	0xfffff84f
 800a9ac:	000007b2 	.word	0x000007b2
 800a9b0:	00015180 	.word	0x00015180
 800a9b4:	00263b80 	.word	0x00263b80
 800a9b8:	0802e420 	.word	0x0802e420

0800a9bc <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b089      	sub	sp, #36	@ 0x24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	213c      	movs	r1, #60	@ 0x3c
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f7f5 fc6d 	bl	80002b0 <__aeabi_uidivmod>
 800a9d6:	000b      	movs	r3, r1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	213c      	movs	r1, #60	@ 0x3c
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	f7f5 fbde 	bl	80001a4 <__udivsi3>
 800a9e8:	0003      	movs	r3, r0
 800a9ea:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	213c      	movs	r1, #60	@ 0x3c
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f7f5 fc5d 	bl	80002b0 <__aeabi_uidivmod>
 800a9f6:	000b      	movs	r3, r1
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	213c      	movs	r1, #60	@ 0x3c
 800aa02:	0018      	movs	r0, r3
 800aa04:	f7f5 fbce 	bl	80001a4 <__udivsi3>
 800aa08:	0003      	movs	r3, r0
 800aa0a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2118      	movs	r1, #24
 800aa10:	0018      	movs	r0, r3
 800aa12:	f7f5 fc4d 	bl	80002b0 <__aeabi_uidivmod>
 800aa16:	000b      	movs	r3, r1
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2118      	movs	r1, #24
 800aa22:	0018      	movs	r0, r3
 800aa24:	f7f5 fbbe 	bl	80001a4 <__udivsi3>
 800aa28:	0003      	movs	r3, r0
 800aa2a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2107      	movs	r1, #7
 800aa32:	0018      	movs	r0, r3
 800aa34:	f7f5 fc3c 	bl	80002b0 <__aeabi_uidivmod>
 800aa38:	000b      	movs	r3, r1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	701a      	strb	r2, [r3, #0]
  year = 0;
 800aa44:	231f      	movs	r3, #31
 800aa46:	18fb      	adds	r3, r7, r3
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa50:	e005      	b.n	800aa5e <breakPosixTime+0xa2>
    year++;
 800aa52:	211f      	movs	r1, #31
 800aa54:	187b      	adds	r3, r7, r1
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	187b      	adds	r3, r7, r1
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800aa5e:	241f      	movs	r4, #31
 800aa60:	193b      	adds	r3, r7, r4
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	4a64      	ldr	r2, [pc, #400]	@ (800abf8 <breakPosixTime+0x23c>)
 800aa66:	4694      	mov	ip, r2
 800aa68:	4463      	add	r3, ip
 800aa6a:	001a      	movs	r2, r3
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	4013      	ands	r3, r2
 800aa70:	d119      	bne.n	800aaa6 <breakPosixTime+0xea>
 800aa72:	193b      	adds	r3, r7, r4
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	4a60      	ldr	r2, [pc, #384]	@ (800abf8 <breakPosixTime+0x23c>)
 800aa78:	4694      	mov	ip, r2
 800aa7a:	4463      	add	r3, ip
 800aa7c:	2164      	movs	r1, #100	@ 0x64
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f7f5 fd00 	bl	8000484 <__aeabi_idivmod>
 800aa84:	1e0b      	subs	r3, r1, #0
 800aa86:	d10b      	bne.n	800aaa0 <breakPosixTime+0xe4>
 800aa88:	193b      	adds	r3, r7, r4
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	4a5a      	ldr	r2, [pc, #360]	@ (800abf8 <breakPosixTime+0x23c>)
 800aa8e:	4694      	mov	ip, r2
 800aa90:	4463      	add	r3, ip
 800aa92:	22c8      	movs	r2, #200	@ 0xc8
 800aa94:	0051      	lsls	r1, r2, #1
 800aa96:	0018      	movs	r0, r3
 800aa98:	f7f5 fcf4 	bl	8000484 <__aeabi_idivmod>
 800aa9c:	1e0b      	subs	r3, r1, #0
 800aa9e:	d102      	bne.n	800aaa6 <breakPosixTime+0xea>
 800aaa0:	23b7      	movs	r3, #183	@ 0xb7
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	e001      	b.n	800aaaa <breakPosixTime+0xee>
 800aaa6:	236e      	movs	r3, #110	@ 0x6e
 800aaa8:	33ff      	adds	r3, #255	@ 0xff
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	18d3      	adds	r3, r2, r3
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d9cc      	bls.n	800aa52 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	241f      	movs	r4, #31
 800aabc:	193a      	adds	r2, r7, r4
 800aabe:	7812      	ldrb	r2, [r2, #0]
 800aac0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800aac2:	193b      	adds	r3, r7, r4
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	4a4c      	ldr	r2, [pc, #304]	@ (800abf8 <breakPosixTime+0x23c>)
 800aac8:	4694      	mov	ip, r2
 800aaca:	4463      	add	r3, ip
 800aacc:	001a      	movs	r2, r3
 800aace:	2303      	movs	r3, #3
 800aad0:	4013      	ands	r3, r2
 800aad2:	d119      	bne.n	800ab08 <breakPosixTime+0x14c>
 800aad4:	193b      	adds	r3, r7, r4
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	4a47      	ldr	r2, [pc, #284]	@ (800abf8 <breakPosixTime+0x23c>)
 800aada:	4694      	mov	ip, r2
 800aadc:	4463      	add	r3, ip
 800aade:	2164      	movs	r1, #100	@ 0x64
 800aae0:	0018      	movs	r0, r3
 800aae2:	f7f5 fccf 	bl	8000484 <__aeabi_idivmod>
 800aae6:	1e0b      	subs	r3, r1, #0
 800aae8:	d10b      	bne.n	800ab02 <breakPosixTime+0x146>
 800aaea:	193b      	adds	r3, r7, r4
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	4a42      	ldr	r2, [pc, #264]	@ (800abf8 <breakPosixTime+0x23c>)
 800aaf0:	4694      	mov	ip, r2
 800aaf2:	4463      	add	r3, ip
 800aaf4:	22c8      	movs	r2, #200	@ 0xc8
 800aaf6:	0051      	lsls	r1, r2, #1
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f7f5 fcc3 	bl	8000484 <__aeabi_idivmod>
 800aafe:	1e0b      	subs	r3, r1, #0
 800ab00:	d102      	bne.n	800ab08 <breakPosixTime+0x14c>
 800ab02:	23b7      	movs	r3, #183	@ 0xb7
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	e001      	b.n	800ab0c <breakPosixTime+0x150>
 800ab08:	236e      	movs	r3, #110	@ 0x6e
 800ab0a:	33ff      	adds	r3, #255	@ 0xff
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	61bb      	str	r3, [r7, #24]

  days=0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  month=0;
 800ab1e:	211e      	movs	r1, #30
 800ab20:	187b      	adds	r3, r7, r1
 800ab22:	2200      	movs	r2, #0
 800ab24:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ab26:	231d      	movs	r3, #29
 800ab28:	18fb      	adds	r3, r7, r3
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ab2e:	187b      	adds	r3, r7, r1
 800ab30:	2200      	movs	r2, #0
 800ab32:	701a      	strb	r2, [r3, #0]
 800ab34:	e048      	b.n	800abc8 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ab36:	231e      	movs	r3, #30
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d12a      	bne.n	800ab96 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ab40:	241f      	movs	r4, #31
 800ab42:	193b      	adds	r3, r7, r4
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	4a2c      	ldr	r2, [pc, #176]	@ (800abf8 <breakPosixTime+0x23c>)
 800ab48:	4694      	mov	ip, r2
 800ab4a:	4463      	add	r3, ip
 800ab4c:	001a      	movs	r2, r3
 800ab4e:	2303      	movs	r3, #3
 800ab50:	4013      	ands	r3, r2
 800ab52:	d11b      	bne.n	800ab8c <breakPosixTime+0x1d0>
 800ab54:	193b      	adds	r3, r7, r4
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	4a27      	ldr	r2, [pc, #156]	@ (800abf8 <breakPosixTime+0x23c>)
 800ab5a:	4694      	mov	ip, r2
 800ab5c:	4463      	add	r3, ip
 800ab5e:	2164      	movs	r1, #100	@ 0x64
 800ab60:	0018      	movs	r0, r3
 800ab62:	f7f5 fc8f 	bl	8000484 <__aeabi_idivmod>
 800ab66:	1e0b      	subs	r3, r1, #0
 800ab68:	d10b      	bne.n	800ab82 <breakPosixTime+0x1c6>
 800ab6a:	193b      	adds	r3, r7, r4
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	4a22      	ldr	r2, [pc, #136]	@ (800abf8 <breakPosixTime+0x23c>)
 800ab70:	4694      	mov	ip, r2
 800ab72:	4463      	add	r3, ip
 800ab74:	22c8      	movs	r2, #200	@ 0xc8
 800ab76:	0051      	lsls	r1, r2, #1
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f7f5 fc83 	bl	8000484 <__aeabi_idivmod>
 800ab7e:	1e0b      	subs	r3, r1, #0
 800ab80:	d104      	bne.n	800ab8c <breakPosixTime+0x1d0>
        monthLength=29;
 800ab82:	231d      	movs	r3, #29
 800ab84:	18fb      	adds	r3, r7, r3
 800ab86:	221d      	movs	r2, #29
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	e00c      	b.n	800aba6 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800ab8c:	231d      	movs	r3, #29
 800ab8e:	18fb      	adds	r3, r7, r3
 800ab90:	221c      	movs	r2, #28
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	e007      	b.n	800aba6 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800ab96:	231e      	movs	r3, #30
 800ab98:	18fb      	adds	r3, r7, r3
 800ab9a:	781a      	ldrb	r2, [r3, #0]
 800ab9c:	231d      	movs	r3, #29
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	4916      	ldr	r1, [pc, #88]	@ (800abfc <breakPosixTime+0x240>)
 800aba2:	5c8a      	ldrb	r2, [r1, r2]
 800aba4:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800aba6:	211d      	movs	r1, #29
 800aba8:	187b      	adds	r3, r7, r1
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d310      	bcc.n	800abd4 <breakPosixTime+0x218>
      time -= monthLength;
 800abb2:	187b      	adds	r3, r7, r1
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800abbc:	211e      	movs	r1, #30
 800abbe:	187b      	adds	r3, r7, r1
 800abc0:	781a      	ldrb	r2, [r3, #0]
 800abc2:	187b      	adds	r3, r7, r1
 800abc4:	3201      	adds	r2, #1
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	231e      	movs	r3, #30
 800abca:	18fb      	adds	r3, r7, r3
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b0b      	cmp	r3, #11
 800abd0:	d9b1      	bls.n	800ab36 <breakPosixTime+0x17a>
 800abd2:	e000      	b.n	800abd6 <breakPosixTime+0x21a>
    } else {
        break;
 800abd4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800abd6:	231e      	movs	r3, #30
 800abd8:	18fb      	adds	r3, r7, r3
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	3301      	adds	r3, #1
 800abea:	b2da      	uxtb	r2, r3
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	709a      	strb	r2, [r3, #2]
}
 800abf0:	46c0      	nop			@ (mov r8, r8)
 800abf2:	46bd      	mov	sp, r7
 800abf4:	b009      	add	sp, #36	@ 0x24
 800abf6:	bd90      	pop	{r4, r7, pc}
 800abf8:	000007b2 	.word	0x000007b2
 800abfc:	0802e420 	.word	0x0802e420

0800ac00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ac06:	003b      	movs	r3, r7
 800ac08:	0018      	movs	r0, r3
 800ac0a:	2308      	movs	r3, #8
 800ac0c:	001a      	movs	r2, r3
 800ac0e:	2100      	movs	r1, #0
 800ac10:	f01b fd3a 	bl	8026688 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ac14:	4b30      	ldr	r3, [pc, #192]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac16:	4a31      	ldr	r2, [pc, #196]	@ (800acdc <MX_ADC_Init+0xdc>)
 800ac18:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ac1a:	4b2f      	ldr	r3, [pc, #188]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ac20:	4b2d      	ldr	r3, [pc, #180]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac22:	22c0      	movs	r2, #192	@ 0xc0
 800ac24:	0612      	lsls	r2, r2, #24
 800ac26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ac28:	4b2b      	ldr	r3, [pc, #172]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ac2e:	4b2a      	ldr	r3, [pc, #168]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ac34:	4b28      	ldr	r3, [pc, #160]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac3a:	4b27      	ldr	r3, [pc, #156]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ac40:	4b25      	ldr	r3, [pc, #148]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac42:	2220      	movs	r2, #32
 800ac44:	2100      	movs	r1, #0
 800ac46:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ac48:	4b23      	ldr	r3, [pc, #140]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac4a:	2221      	movs	r2, #33	@ 0x21
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ac50:	4b21      	ldr	r3, [pc, #132]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ac56:	4b20      	ldr	r3, [pc, #128]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac58:	22c2      	movs	r2, #194	@ 0xc2
 800ac5a:	32ff      	adds	r2, #255	@ 0xff
 800ac5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ac5e:	4b1e      	ldr	r3, [pc, #120]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac60:	222c      	movs	r2, #44	@ 0x2c
 800ac62:	2100      	movs	r1, #0
 800ac64:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ac66:	4b1c      	ldr	r3, [pc, #112]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac68:	2204      	movs	r2, #4
 800ac6a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800ac72:	4b19      	ldr	r3, [pc, #100]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800ac78:	4b17      	ldr	r3, [pc, #92]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800ac7e:	4b16      	ldr	r3, [pc, #88]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800ac84:	4b14      	ldr	r3, [pc, #80]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800ac86:	0018      	movs	r0, r3
 800ac88:	f009 fe64 	bl	8014954 <HAL_ADC_Init>
 800ac8c:	1e03      	subs	r3, r0, #0
 800ac8e:	d001      	beq.n	800ac94 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800ac90:	f002 fb78 	bl	800d384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ac94:	003b      	movs	r3, r7
 800ac96:	4a12      	ldr	r2, [pc, #72]	@ (800ace0 <MX_ADC_Init+0xe0>)
 800ac98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ac9a:	003b      	movs	r3, r7
 800ac9c:	2280      	movs	r2, #128	@ 0x80
 800ac9e:	0152      	lsls	r2, r2, #5
 800aca0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800aca2:	003a      	movs	r2, r7
 800aca4:	4b0c      	ldr	r3, [pc, #48]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800aca6:	0011      	movs	r1, r2
 800aca8:	0018      	movs	r0, r3
 800acaa:	f00a f8c3 	bl	8014e34 <HAL_ADC_ConfigChannel>
 800acae:	1e03      	subs	r3, r0, #0
 800acb0:	d001      	beq.n	800acb6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800acb2:	f002 fb67 	bl	800d384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800acb6:	003b      	movs	r3, r7
 800acb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ace4 <MX_ADC_Init+0xe4>)
 800acba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800acbc:	003a      	movs	r2, r7
 800acbe:	4b06      	ldr	r3, [pc, #24]	@ (800acd8 <MX_ADC_Init+0xd8>)
 800acc0:	0011      	movs	r1, r2
 800acc2:	0018      	movs	r0, r3
 800acc4:	f00a f8b6 	bl	8014e34 <HAL_ADC_ConfigChannel>
 800acc8:	1e03      	subs	r3, r0, #0
 800acca:	d001      	beq.n	800acd0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800accc:	f002 fb5a 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800acd0:	46c0      	nop			@ (mov r8, r8)
 800acd2:	46bd      	mov	sp, r7
 800acd4:	b002      	add	sp, #8
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	20000e84 	.word	0x20000e84
 800acdc:	40012400 	.word	0x40012400
 800ace0:	38004000 	.word	0x38004000
 800ace4:	3c008000 	.word	0x3c008000

0800ace8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ace8:	b590      	push	{r4, r7, lr}
 800acea:	b089      	sub	sp, #36	@ 0x24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acf0:	240c      	movs	r4, #12
 800acf2:	193b      	adds	r3, r7, r4
 800acf4:	0018      	movs	r0, r3
 800acf6:	2314      	movs	r3, #20
 800acf8:	001a      	movs	r2, r3
 800acfa:	2100      	movs	r1, #0
 800acfc:	f01b fcc4 	bl	8026688 <memset>
  if(adcHandle->Instance==ADC1)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a14      	ldr	r2, [pc, #80]	@ (800ad58 <HAL_ADC_MspInit+0x70>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d121      	bne.n	800ad4e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ad0a:	4b14      	ldr	r3, [pc, #80]	@ (800ad5c <HAL_ADC_MspInit+0x74>)
 800ad0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad0e:	4b13      	ldr	r3, [pc, #76]	@ (800ad5c <HAL_ADC_MspInit+0x74>)
 800ad10:	2180      	movs	r1, #128	@ 0x80
 800ad12:	0089      	lsls	r1, r1, #2
 800ad14:	430a      	orrs	r2, r1
 800ad16:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad18:	4b10      	ldr	r3, [pc, #64]	@ (800ad5c <HAL_ADC_MspInit+0x74>)
 800ad1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad5c <HAL_ADC_MspInit+0x74>)
 800ad1e:	2104      	movs	r1, #4
 800ad20:	430a      	orrs	r2, r1
 800ad22:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ad24:	4b0d      	ldr	r3, [pc, #52]	@ (800ad5c <HAL_ADC_MspInit+0x74>)
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	2204      	movs	r2, #4
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ad30:	193b      	adds	r3, r7, r4
 800ad32:	2230      	movs	r2, #48	@ 0x30
 800ad34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad36:	193b      	adds	r3, r7, r4
 800ad38:	2203      	movs	r2, #3
 800ad3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3c:	193b      	adds	r3, r7, r4
 800ad3e:	2200      	movs	r2, #0
 800ad40:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad42:	193b      	adds	r3, r7, r4
 800ad44:	4a06      	ldr	r2, [pc, #24]	@ (800ad60 <HAL_ADC_MspInit+0x78>)
 800ad46:	0019      	movs	r1, r3
 800ad48:	0010      	movs	r0, r2
 800ad4a:	f00a fe85 	bl	8015a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ad4e:	46c0      	nop			@ (mov r8, r8)
 800ad50:	46bd      	mov	sp, r7
 800ad52:	b009      	add	sp, #36	@ 0x24
 800ad54:	bd90      	pop	{r4, r7, pc}
 800ad56:	46c0      	nop			@ (mov r8, r8)
 800ad58:	40012400 	.word	0x40012400
 800ad5c:	40021000 	.word	0x40021000
 800ad60:	50000800 	.word	0x50000800

0800ad64 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6039      	str	r1, [r7, #0]
 800ad6c:	0011      	movs	r1, r2
 800ad6e:	1dfb      	adds	r3, r7, #7
 800ad70:	1c02      	adds	r2, r0, #0
 800ad72:	701a      	strb	r2, [r3, #0]
 800ad74:	1dbb      	adds	r3, r7, #6
 800ad76:	1c0a      	adds	r2, r1, #0
 800ad78:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <ReadDirRegister+0x40>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800ad82:	4b08      	ldr	r3, [pc, #32]	@ (800ada4 <ReadDirRegister+0x40>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	1dba      	adds	r2, r7, #6
 800ad88:	7814      	ldrb	r4, [r2, #0]
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	1dfa      	adds	r2, r7, #7
 800ad8e:	7810      	ldrb	r0, [r2, #0]
 800ad90:	0022      	movs	r2, r4
 800ad92:	4798      	blx	r3
 800ad94:	0003      	movs	r3, r0
 800ad96:	e000      	b.n	800ad9a <ReadDirRegister+0x36>
  }
  return false;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b003      	add	sp, #12
 800ada0:	bd90      	pop	{r4, r7, pc}
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	20000ef0 	.word	0x20000ef0

0800ada8 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ada8:	b590      	push	{r4, r7, lr}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6039      	str	r1, [r7, #0]
 800adb0:	0011      	movs	r1, r2
 800adb2:	1dfb      	adds	r3, r7, #7
 800adb4:	1c02      	adds	r2, r0, #0
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	1dbb      	adds	r3, r7, #6
 800adba:	1c0a      	adds	r2, r1, #0
 800adbc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800adbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <ReadRegister+0x40>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800adc6:	4b08      	ldr	r3, [pc, #32]	@ (800ade8 <ReadRegister+0x40>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	1dba      	adds	r2, r7, #6
 800adcc:	7814      	ldrb	r4, [r2, #0]
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	1dfa      	adds	r2, r7, #7
 800add2:	7810      	ldrb	r0, [r2, #0]
 800add4:	0022      	movs	r2, r4
 800add6:	4798      	blx	r3
 800add8:	0003      	movs	r3, r0
 800adda:	e000      	b.n	800adde <ReadRegister+0x36>
  }
  return false;
 800addc:	2300      	movs	r3, #0
}
 800adde:	0018      	movs	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b003      	add	sp, #12
 800ade4:	bd90      	pop	{r4, r7, pc}
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	20000ee8 	.word	0x20000ee8

0800adec <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800adec:	b590      	push	{r4, r7, lr}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6039      	str	r1, [r7, #0]
 800adf4:	0011      	movs	r1, r2
 800adf6:	1dfb      	adds	r3, r7, #7
 800adf8:	1c02      	adds	r2, r0, #0
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	1dbb      	adds	r3, r7, #6
 800adfe:	1c0a      	adds	r2, r1, #0
 800ae00:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ae02:	4b0a      	ldr	r3, [pc, #40]	@ (800ae2c <WriteRegister+0x40>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ae0a:	4b08      	ldr	r3, [pc, #32]	@ (800ae2c <WriteRegister+0x40>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	1dba      	adds	r2, r7, #6
 800ae10:	7814      	ldrb	r4, [r2, #0]
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	1dfa      	adds	r2, r7, #7
 800ae16:	7810      	ldrb	r0, [r2, #0]
 800ae18:	0022      	movs	r2, r4
 800ae1a:	4798      	blx	r3
 800ae1c:	0003      	movs	r3, r0
 800ae1e:	e000      	b.n	800ae22 <WriteRegister+0x36>
  }
  return false;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	0018      	movs	r0, r3
 800ae24:	46bd      	mov	sp, r7
 800ae26:	b003      	add	sp, #12
 800ae28:	bd90      	pop	{r4, r7, pc}
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	20000eec 	.word	0x20000eec

0800ae30 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	000a      	movs	r2, r1
 800ae3a:	1cfb      	adds	r3, r7, #3
 800ae3c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800ae3e:	230f      	movs	r3, #15
 800ae40:	18fb      	adds	r3, r7, r3
 800ae42:	22ff      	movs	r2, #255	@ 0xff
 800ae44:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ae46:	230e      	movs	r3, #14
 800ae48:	18fb      	adds	r3, r7, r3
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	701a      	strb	r2, [r3, #0]
 800ae4e:	e038      	b.n	800aec2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ae50:	230e      	movs	r3, #14
 800ae52:	18fb      	adds	r3, r7, r3
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	18d3      	adds	r3, r2, r3
 800ae5a:	7819      	ldrb	r1, [r3, #0]
 800ae5c:	220f      	movs	r2, #15
 800ae5e:	18bb      	adds	r3, r7, r2
 800ae60:	18ba      	adds	r2, r7, r2
 800ae62:	7812      	ldrb	r2, [r2, #0]
 800ae64:	404a      	eors	r2, r1
 800ae66:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ae68:	230d      	movs	r3, #13
 800ae6a:	18fb      	adds	r3, r7, r3
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	e01c      	b.n	800aeac <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800ae72:	210f      	movs	r1, #15
 800ae74:	187b      	adds	r3, r7, r1
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	da0a      	bge.n	800ae94 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800ae7e:	187b      	adds	r3, r7, r1
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	b25b      	sxtb	r3, r3
 800ae84:	18db      	adds	r3, r3, r3
 800ae86:	b25b      	sxtb	r3, r3
 800ae88:	2231      	movs	r2, #49	@ 0x31
 800ae8a:	4053      	eors	r3, r2
 800ae8c:	b25a      	sxtb	r2, r3
 800ae8e:	187b      	adds	r3, r7, r1
 800ae90:	701a      	strb	r2, [r3, #0]
 800ae92:	e005      	b.n	800aea0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800ae94:	230f      	movs	r3, #15
 800ae96:	18fa      	adds	r2, r7, r3
 800ae98:	18fb      	adds	r3, r7, r3
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	18db      	adds	r3, r3, r3
 800ae9e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800aea0:	210d      	movs	r1, #13
 800aea2:	187b      	adds	r3, r7, r1
 800aea4:	781a      	ldrb	r2, [r3, #0]
 800aea6:	187b      	adds	r3, r7, r1
 800aea8:	3201      	adds	r2, #1
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	230d      	movs	r3, #13
 800aeae:	18fb      	adds	r3, r7, r3
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b07      	cmp	r3, #7
 800aeb4:	d9dd      	bls.n	800ae72 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800aeb6:	210e      	movs	r1, #14
 800aeb8:	187b      	adds	r3, r7, r1
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	187b      	adds	r3, r7, r1
 800aebe:	3201      	adds	r2, #1
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	230e      	movs	r3, #14
 800aec4:	18fa      	adds	r2, r7, r3
 800aec6:	1cfb      	adds	r3, r7, #3
 800aec8:	7812      	ldrb	r2, [r2, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d3bf      	bcc.n	800ae50 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800aed0:	230f      	movs	r3, #15
 800aed2:	18fb      	adds	r3, r7, r3
 800aed4:	781b      	ldrb	r3, [r3, #0]
}
 800aed6:	0018      	movs	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	b004      	add	sp, #16
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800aee8:	f009 fcea 	bl	80148c0 <HAL_GetTick>
 800aeec:	0002      	movs	r2, r0
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	18d2      	adds	r2, r2, r3
 800aef2:	4b03      	ldr	r3, [pc, #12]	@ (800af00 <setAHT20TimeStamp+0x20>)
 800aef4:	601a      	str	r2, [r3, #0]
}
 800aef6:	46c0      	nop			@ (mov r8, r8)
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b002      	add	sp, #8
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	46c0      	nop			@ (mov r8, r8)
 800af00:	20000ee0 	.word	0x20000ee0

0800af04 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800af10:	4b06      	ldr	r3, [pc, #24]	@ (800af2c <AHT_Init+0x28>)
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800af16:	4b06      	ldr	r3, [pc, #24]	@ (800af30 <AHT_Init+0x2c>)
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800af1c:	4b05      	ldr	r3, [pc, #20]	@ (800af34 <AHT_Init+0x30>)
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	601a      	str	r2, [r3, #0]
}
 800af22:	46c0      	nop			@ (mov r8, r8)
 800af24:	46bd      	mov	sp, r7
 800af26:	b004      	add	sp, #16
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	46c0      	nop			@ (mov r8, r8)
 800af2c:	20000ef0 	.word	0x20000ef0
 800af30:	20000ee8 	.word	0x20000ee8
 800af34:	20000eec 	.word	0x20000eec

0800af38 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	0002      	movs	r2, r0
 800af40:	1dfb      	adds	r3, r7, #7
 800af42:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800af44:	4b18      	ldr	r3, [pc, #96]	@ (800afa8 <AHT20_register_reset+0x70>)
 800af46:	1dfa      	adds	r2, r7, #7
 800af48:	7812      	ldrb	r2, [r2, #0]
 800af4a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800af4c:	4b16      	ldr	r3, [pc, #88]	@ (800afa8 <AHT20_register_reset+0x70>)
 800af4e:	2203      	movs	r2, #3
 800af50:	0019      	movs	r1, r3
 800af52:	2038      	movs	r0, #56	@ 0x38
 800af54:	f7ff ff4a 	bl	800adec <WriteRegister>
  HAL_Delay(15);
 800af58:	200f      	movs	r0, #15
 800af5a:	f009 fcbb 	bl	80148d4 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af5e:	4b13      	ldr	r3, [pc, #76]	@ (800afac <AHT20_register_reset+0x74>)
 800af60:	2203      	movs	r2, #3
 800af62:	0019      	movs	r1, r3
 800af64:	2038      	movs	r0, #56	@ 0x38
 800af66:	f7ff ff1f 	bl	800ada8 <ReadRegister>
  HAL_Delay(15);
 800af6a:	200f      	movs	r0, #15
 800af6c:	f009 fcb2 	bl	80148d4 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800af70:	4b0e      	ldr	r3, [pc, #56]	@ (800afac <AHT20_register_reset+0x74>)
 800af72:	22b0      	movs	r2, #176	@ 0xb0
 800af74:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800af76:	4b0d      	ldr	r3, [pc, #52]	@ (800afac <AHT20_register_reset+0x74>)
 800af78:	789b      	ldrb	r3, [r3, #2]
 800af7a:	0018      	movs	r0, r3
 800af7c:	4b0b      	ldr	r3, [pc, #44]	@ (800afac <AHT20_register_reset+0x74>)
 800af7e:	78db      	ldrb	r3, [r3, #3]
 800af80:	4a0b      	ldr	r2, [pc, #44]	@ (800afb0 <AHT20_register_reset+0x78>)
 800af82:	490c      	ldr	r1, [pc, #48]	@ (800afb4 <AHT20_register_reset+0x7c>)
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	0003      	movs	r3, r0
 800af88:	2003      	movs	r0, #3
 800af8a:	f008 ff0d 	bl	8013da8 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af8e:	4b07      	ldr	r3, [pc, #28]	@ (800afac <AHT20_register_reset+0x74>)
 800af90:	2203      	movs	r2, #3
 800af92:	0019      	movs	r1, r3
 800af94:	2038      	movs	r0, #56	@ 0x38
 800af96:	f7ff ff29 	bl	800adec <WriteRegister>
  HAL_Delay(15);
 800af9a:	200f      	movs	r0, #15
 800af9c:	f009 fc9a 	bl	80148d4 <HAL_Delay>
}
 800afa0:	46c0      	nop			@ (mov r8, r8)
 800afa2:	46bd      	mov	sp, r7
 800afa4:	b002      	add	sp, #8
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	2000009c 	.word	0x2000009c
 800afac:	20000ef4 	.word	0x20000ef4
 800afb0:	0802c1b0 	.word	0x0802c1b0
 800afb4:	0802c1f0 	.word	0x0802c1f0

0800afb8 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800afbc:	201b      	movs	r0, #27
 800afbe:	f7ff ffbb 	bl	800af38 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800afc2:	201c      	movs	r0, #28
 800afc4:	f7ff ffb8 	bl	800af38 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800afc8:	201e      	movs	r0, #30
 800afca:	f7ff ffb5 	bl	800af38 <AHT20_register_reset>
}
 800afce:	46c0      	nop			@ (mov r8, r8)
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800afd8:	4b0c      	ldr	r3, [pc, #48]	@ (800b00c <AHT20_read_status+0x38>)
 800afda:	2201      	movs	r2, #1
 800afdc:	0019      	movs	r1, r3
 800afde:	2038      	movs	r0, #56	@ 0x38
 800afe0:	f7ff ff04 	bl	800adec <WriteRegister>
  HAL_Delay(10);
 800afe4:	200a      	movs	r0, #10
 800afe6:	f009 fc75 	bl	80148d4 <HAL_Delay>
  airtemphumraw[0] = 0;
 800afea:	4b09      	ldr	r3, [pc, #36]	@ (800b010 <AHT20_read_status+0x3c>)
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800aff0:	4b07      	ldr	r3, [pc, #28]	@ (800b010 <AHT20_read_status+0x3c>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	0019      	movs	r1, r3
 800aff6:	2038      	movs	r0, #56	@ 0x38
 800aff8:	f7ff fed6 	bl	800ada8 <ReadRegister>
  HAL_Delay(10);
 800affc:	200a      	movs	r0, #10
 800affe:	f009 fc69 	bl	80148d4 <HAL_Delay>
  return airtemphumraw[0];
 800b002:	4b03      	ldr	r3, [pc, #12]	@ (800b010 <AHT20_read_status+0x3c>)
 800b004:	781b      	ldrb	r3, [r3, #0]
}
 800b006:	0018      	movs	r0, r3
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	20000098 	.word	0x20000098
 800b010:	20000ef4 	.word	0x20000ef4

0800b014 <AHT20_init>:

bool AHT20_init(void) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b01a:	f009 fc51 	bl	80148c0 <HAL_GetTick>
 800b01e:	0003      	movs	r3, r0
 800b020:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b77      	cmp	r3, #119	@ 0x77
 800b026:	d805      	bhi.n	800b034 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2278      	movs	r2, #120	@ 0x78
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	0018      	movs	r0, r3
 800b030:	f009 fc50 	bl	80148d4 <HAL_Delay>
  }
  AHT20_read_status();
 800b034:	f7ff ffce 	bl	800afd4 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b038:	4b0e      	ldr	r3, [pc, #56]	@ (800b074 <AHT20_init+0x60>)
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	4a0e      	ldr	r2, [pc, #56]	@ (800b078 <AHT20_init+0x64>)
 800b03e:	490f      	ldr	r1, [pc, #60]	@ (800b07c <AHT20_init+0x68>)
 800b040:	2003      	movs	r0, #3
 800b042:	f008 feb1 	bl	8013da8 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b046:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <AHT20_init+0x60>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	001a      	movs	r2, r3
 800b04c:	2318      	movs	r3, #24
 800b04e:	4013      	ands	r3, r2
 800b050:	2b18      	cmp	r3, #24
 800b052:	d00a      	beq.n	800b06a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b054:	4b0a      	ldr	r3, [pc, #40]	@ (800b080 <AHT20_init+0x6c>)
 800b056:	2203      	movs	r2, #3
 800b058:	0019      	movs	r1, r3
 800b05a:	2038      	movs	r0, #56	@ 0x38
 800b05c:	f7ff fec6 	bl	800adec <WriteRegister>
    HAL_Delay(10);
 800b060:	200a      	movs	r0, #10
 800b062:	f009 fc37 	bl	80148d4 <HAL_Delay>
    AHT20_Start_Init();
 800b066:	f7ff ffa7 	bl	800afb8 <AHT20_Start_Init>
  }
  return true;
 800b06a:	2301      	movs	r3, #1
}
 800b06c:	0018      	movs	r0, r3
 800b06e:	46bd      	mov	sp, r7
 800b070:	b002      	add	sp, #8
 800b072:	bd80      	pop	{r7, pc}
 800b074:	20000ef4 	.word	0x20000ef4
 800b078:	0802c1f4 	.word	0x0802c1f4
 800b07c:	0802c1f0 	.word	0x0802c1f0
 800b080:	2000008c 	.word	0x2000008c

0800b084 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b08a:	1dfc      	adds	r4, r7, #7
 800b08c:	4b10      	ldr	r3, [pc, #64]	@ (800b0d0 <AHT20_calibrate+0x4c>)
 800b08e:	2201      	movs	r2, #1
 800b090:	0019      	movs	r1, r3
 800b092:	2038      	movs	r0, #56	@ 0x38
 800b094:	f7ff feaa 	bl	800adec <WriteRegister>
 800b098:	0003      	movs	r3, r0
 800b09a:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b09c:	1dfb      	adds	r3, r7, #7
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4053      	eors	r3, r2
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d005      	beq.n	800b0b6 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b0d4 <AHT20_calibrate+0x50>)
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d8 <AHT20_calibrate+0x54>)
 800b0ae:	0019      	movs	r1, r3
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f008 fe79 	bl	8013da8 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b0b6:	f009 fc03 	bl	80148c0 <HAL_GetTick>
 800b0ba:	0003      	movs	r3, r0
 800b0bc:	3332      	adds	r3, #50	@ 0x32
 800b0be:	001a      	movs	r2, r3
 800b0c0:	4b06      	ldr	r3, [pc, #24]	@ (800b0dc <AHT20_calibrate+0x58>)
 800b0c2:	601a      	str	r2, [r3, #0]
  return response;
 800b0c4:	1dfb      	adds	r3, r7, #7
 800b0c6:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	b003      	add	sp, #12
 800b0ce:	bd90      	pop	{r4, r7, pc}
 800b0d0:	20000098 	.word	0x20000098
 800b0d4:	0802c21c 	.word	0x0802c21c
 800b0d8:	0802c254 	.word	0x0802c254
 800b0dc:	20000ee0 	.word	0x20000ee0

0800b0e0 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b0e4:	4a0a      	ldr	r2, [pc, #40]	@ (800b110 <AHT20_DeviceConnected+0x30>)
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b114 <AHT20_DeviceConnected+0x34>)
 800b0e8:	0019      	movs	r1, r3
 800b0ea:	2003      	movs	r0, #3
 800b0ec:	f008 fe5c 	bl	8013da8 <CreateLine>
   AHT20_init();
 800b0f0:	f7ff ff90 	bl	800b014 <AHT20_init>
   HAL_Delay(10);
 800b0f4:	200a      	movs	r0, #10
 800b0f6:	f009 fbed 	bl	80148d4 <HAL_Delay>
   AHT20_calibrate();
 800b0fa:	f7ff ffc3 	bl	800b084 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b0fe:	f7ff ff69 	bl	800afd4 <AHT20_read_status>
 800b102:	0003      	movs	r3, r0
 800b104:	1e5a      	subs	r2, r3, #1
 800b106:	4193      	sbcs	r3, r2
 800b108:	b2db      	uxtb	r3, r3
 }
 800b10a:	0018      	movs	r0, r3
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	0802c258 	.word	0x0802c258
 800b114:	0802c1f0 	.word	0x0802c1f0

0800b118 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b118:	b590      	push	{r4, r7, lr}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b11e:	1dfc      	adds	r4, r7, #7
 800b120:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <AHT20_StartMeasurement+0x4c>)
 800b122:	2203      	movs	r2, #3
 800b124:	0019      	movs	r1, r3
 800b126:	2038      	movs	r0, #56	@ 0x38
 800b128:	f7ff fe60 	bl	800adec <WriteRegister>
 800b12c:	0003      	movs	r3, r0
 800b12e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b130:	1dfb      	adds	r3, r7, #7
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2201      	movs	r2, #1
 800b136:	4053      	eors	r3, r2
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d005      	beq.n	800b14a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b13e:	4a0a      	ldr	r2, [pc, #40]	@ (800b168 <AHT20_StartMeasurement+0x50>)
 800b140:	4b0a      	ldr	r3, [pc, #40]	@ (800b16c <AHT20_StartMeasurement+0x54>)
 800b142:	0019      	movs	r1, r3
 800b144:	2001      	movs	r0, #1
 800b146:	f008 fe2f 	bl	8013da8 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b14a:	f009 fbb9 	bl	80148c0 <HAL_GetTick>
 800b14e:	0003      	movs	r3, r0
 800b150:	33fa      	adds	r3, #250	@ 0xfa
 800b152:	001a      	movs	r2, r3
 800b154:	4b06      	ldr	r3, [pc, #24]	@ (800b170 <AHT20_StartMeasurement+0x58>)
 800b156:	601a      	str	r2, [r3, #0]
  return response;
 800b158:	1dfb      	adds	r3, r7, #7
 800b15a:	781b      	ldrb	r3, [r3, #0]
}
 800b15c:	0018      	movs	r0, r3
 800b15e:	46bd      	mov	sp, r7
 800b160:	b003      	add	sp, #12
 800b162:	bd90      	pop	{r4, r7, pc}
 800b164:	20000094 	.word	0x20000094
 800b168:	0802c270 	.word	0x0802c270
 800b16c:	0802c254 	.word	0x0802c254
 800b170:	20000ee0 	.word	0x20000ee0

0800b174 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b174:	b590      	push	{r4, r7, lr}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b17a:	f009 fba1 	bl	80148c0 <HAL_GetTick>
 800b17e:	0003      	movs	r3, r0
 800b180:	22fa      	movs	r2, #250	@ 0xfa
 800b182:	0092      	lsls	r2, r2, #2
 800b184:	189a      	adds	r2, r3, r2
 800b186:	4b29      	ldr	r3, [pc, #164]	@ (800b22c <AHT20_GetMeasurementValues+0xb8>)
 800b188:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b18a:	e019      	b.n	800b1c0 <AHT20_GetMeasurementValues+0x4c>
//    Info("AHT20 Device busy, waiting for results");
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b18c:	4b27      	ldr	r3, [pc, #156]	@ (800b22c <AHT20_GetMeasurementValues+0xb8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	0018      	movs	r0, r3
 800b192:	f008 fdb3 	bl	8013cfc <TimestampIsReached>
 800b196:	1e03      	subs	r3, r0, #0
 800b198:	d00f      	beq.n	800b1ba <AHT20_GetMeasurementValues+0x46>
      Error("AHT2x timeout for getting values");
 800b19a:	4a25      	ldr	r2, [pc, #148]	@ (800b230 <AHT20_GetMeasurementValues+0xbc>)
 800b19c:	4b25      	ldr	r3, [pc, #148]	@ (800b234 <AHT20_GetMeasurementValues+0xc0>)
 800b19e:	0019      	movs	r1, r3
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	f008 fe01 	bl	8013da8 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b1a6:	f009 fb8b 	bl	80148c0 <HAL_GetTick>
 800b1aa:	0003      	movs	r3, r0
 800b1ac:	22fa      	movs	r2, #250	@ 0xfa
 800b1ae:	00d2      	lsls	r2, r2, #3
 800b1b0:	189a      	adds	r2, r3, r2
 800b1b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b22c <AHT20_GetMeasurementValues+0xb8>)
 800b1b4:	601a      	str	r2, [r3, #0]
      return false;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e034      	b.n	800b224 <AHT20_GetMeasurementValues+0xb0>
    }
    HAL_Delay(10);
 800b1ba:	200a      	movs	r0, #10
 800b1bc:	f009 fb8a 	bl	80148d4 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b1c0:	f7ff ff08 	bl	800afd4 <AHT20_read_status>
 800b1c4:	0003      	movs	r3, r0
 800b1c6:	001a      	movs	r2, r3
 800b1c8:	2380      	movs	r3, #128	@ 0x80
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	2b80      	cmp	r3, #128	@ 0x80
 800b1ce:	d0dd      	beq.n	800b18c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b1d0:	200a      	movs	r0, #10
 800b1d2:	f009 fb7f 	bl	80148d4 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b1d6:	1dfb      	adds	r3, r7, #7
 800b1d8:	2200      	movs	r2, #0
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	e009      	b.n	800b1f2 <AHT20_GetMeasurementValues+0x7e>
    airtemphumraw[g] = 0;
 800b1de:	1dfb      	adds	r3, r7, #7
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	@ (800b238 <AHT20_GetMeasurementValues+0xc4>)
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b1e8:	1dfb      	adds	r3, r7, #7
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	1dfb      	adds	r3, r7, #7
 800b1ee:	3201      	adds	r2, #1
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	1dfb      	adds	r3, r7, #7
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b06      	cmp	r3, #6
 800b1f8:	d9f1      	bls.n	800b1de <AHT20_GetMeasurementValues+0x6a>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b1fa:	1dbc      	adds	r4, r7, #6
 800b1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b238 <AHT20_GetMeasurementValues+0xc4>)
 800b1fe:	2207      	movs	r2, #7
 800b200:	0019      	movs	r1, r3
 800b202:	2038      	movs	r0, #56	@ 0x38
 800b204:	f7ff fdae 	bl	800ad64 <ReadDirRegister>
 800b208:	0003      	movs	r3, r0
 800b20a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b20c:	200a      	movs	r0, #10
 800b20e:	f009 fb61 	bl	80148d4 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b212:	f009 fb55 	bl	80148c0 <HAL_GetTick>
 800b216:	0003      	movs	r3, r0
 800b218:	3364      	adds	r3, #100	@ 0x64
 800b21a:	001a      	movs	r2, r3
 800b21c:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <AHT20_GetMeasurementValues+0xb8>)
 800b21e:	601a      	str	r2, [r3, #0]
  return response;
 800b220:	1dbb      	adds	r3, r7, #6
 800b222:	781b      	ldrb	r3, [r3, #0]
}
 800b224:	0018      	movs	r0, r3
 800b226:	46bd      	mov	sp, r7
 800b228:	b003      	add	sp, #12
 800b22a:	bd90      	pop	{r4, r7, pc}
 800b22c:	20000ee0 	.word	0x20000ee0
 800b230:	0802c29c 	.word	0x0802c29c
 800b234:	0802c254 	.word	0x0802c254
 800b238:	20000ef4 	.word	0x20000ef4

0800b23c <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23e:	46c6      	mov	lr, r8
 800b240:	b500      	push	{lr}
 800b242:	b08a      	sub	sp, #40	@ 0x28
 800b244:	af06      	add	r7, sp, #24
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b24a:	4b5a      	ldr	r3, [pc, #360]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b24c:	799c      	ldrb	r4, [r3, #6]
 800b24e:	4b59      	ldr	r3, [pc, #356]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b250:	2106      	movs	r1, #6
 800b252:	0018      	movs	r0, r3
 800b254:	f7ff fdec 	bl	800ae30 <CalculateCRC>
 800b258:	0003      	movs	r3, r0
 800b25a:	429c      	cmp	r4, r3
 800b25c:	d044      	beq.n	800b2e8 <AHT20_Calculate+0xac>
 800b25e:	4b55      	ldr	r3, [pc, #340]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b260:	799b      	ldrb	r3, [r3, #6]
 800b262:	2bff      	cmp	r3, #255	@ 0xff
 800b264:	d040      	beq.n	800b2e8 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b266:	4b53      	ldr	r3, [pc, #332]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	4698      	mov	r8, r3
 800b26c:	4b51      	ldr	r3, [pc, #324]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b26e:	785b      	ldrb	r3, [r3, #1]
 800b270:	0018      	movs	r0, r3
 800b272:	4b50      	ldr	r3, [pc, #320]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b274:	789b      	ldrb	r3, [r3, #2]
 800b276:	001c      	movs	r4, r3
 800b278:	4b4e      	ldr	r3, [pc, #312]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b27a:	78db      	ldrb	r3, [r3, #3]
 800b27c:	001d      	movs	r5, r3
 800b27e:	4b4d      	ldr	r3, [pc, #308]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b280:	791b      	ldrb	r3, [r3, #4]
 800b282:	001e      	movs	r6, r3
 800b284:	4b4b      	ldr	r3, [pc, #300]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b286:	795b      	ldrb	r3, [r3, #5]
 800b288:	469c      	mov	ip, r3
 800b28a:	4b4a      	ldr	r3, [pc, #296]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b28c:	799b      	ldrb	r3, [r3, #6]
 800b28e:	4a4a      	ldr	r2, [pc, #296]	@ (800b3b8 <AHT20_Calculate+0x17c>)
 800b290:	494a      	ldr	r1, [pc, #296]	@ (800b3bc <AHT20_Calculate+0x180>)
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	4663      	mov	r3, ip
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	9603      	str	r6, [sp, #12]
 800b29a:	9502      	str	r5, [sp, #8]
 800b29c:	9401      	str	r4, [sp, #4]
 800b29e:	9000      	str	r0, [sp, #0]
 800b2a0:	4643      	mov	r3, r8
 800b2a2:	2003      	movs	r0, #3
 800b2a4:	f008 fd80 	bl	8013da8 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b2a8:	4b42      	ldr	r3, [pc, #264]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b2aa:	799b      	ldrb	r3, [r3, #6]
 800b2ac:	001c      	movs	r4, r3
 800b2ae:	4b41      	ldr	r3, [pc, #260]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b2b0:	2106      	movs	r1, #6
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	f7ff fdbc 	bl	800ae30 <CalculateCRC>
 800b2b8:	0003      	movs	r3, r0
 800b2ba:	4a41      	ldr	r2, [pc, #260]	@ (800b3c0 <AHT20_Calculate+0x184>)
 800b2bc:	4941      	ldr	r1, [pc, #260]	@ (800b3c4 <AHT20_Calculate+0x188>)
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	0023      	movs	r3, r4
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	f008 fd70 	bl	8013da8 <CreateLine>
    *airtemp = 0.0;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b2d4:	f009 faf4 	bl	80148c0 <HAL_GetTick>
 800b2d8:	0003      	movs	r3, r0
 800b2da:	22fa      	movs	r2, #250	@ 0xfa
 800b2dc:	00d2      	lsls	r2, r2, #3
 800b2de:	189a      	adds	r2, r3, r2
 800b2e0:	4b39      	ldr	r3, [pc, #228]	@ (800b3c8 <AHT20_Calculate+0x18c>)
 800b2e2:	601a      	str	r2, [r3, #0]
    return false;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e05f      	b.n	800b3a8 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b2e8:	4b38      	ldr	r3, [pc, #224]	@ (800b3cc <AHT20_Calculate+0x190>)
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b2ee:	4b31      	ldr	r3, [pc, #196]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b2f0:	78db      	ldrb	r3, [r3, #3]
 800b2f2:	041a      	lsls	r2, r3, #16
 800b2f4:	23f0      	movs	r3, #240	@ 0xf0
 800b2f6:	031b      	lsls	r3, r3, #12
 800b2f8:	401a      	ands	r2, r3
 800b2fa:	4b2e      	ldr	r3, [pc, #184]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b2fc:	791b      	ldrb	r3, [r3, #4]
 800b2fe:	021b      	lsls	r3, r3, #8
 800b300:	18d3      	adds	r3, r2, r3
 800b302:	4a2c      	ldr	r2, [pc, #176]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b304:	7952      	ldrb	r2, [r2, #5]
 800b306:	189b      	adds	r3, r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7f6 fadc 	bl	80018c8 <__aeabi_ui2f>
 800b310:	1c03      	adds	r3, r0, #0
 800b312:	2193      	movs	r1, #147	@ 0x93
 800b314:	05c9      	lsls	r1, r1, #23
 800b316:	1c18      	adds	r0, r3, #0
 800b318:	f7f5 fcc4 	bl	8000ca4 <__aeabi_fdiv>
 800b31c:	1c03      	adds	r3, r0, #0
 800b31e:	492c      	ldr	r1, [pc, #176]	@ (800b3d0 <AHT20_Calculate+0x194>)
 800b320:	1c18      	adds	r0, r3, #0
 800b322:	f7f5 fe8d 	bl	8001040 <__aeabi_fmul>
 800b326:	1c03      	adds	r3, r0, #0
 800b328:	492a      	ldr	r1, [pc, #168]	@ (800b3d4 <AHT20_Calculate+0x198>)
 800b32a:	1c18      	adds	r0, r3, #0
 800b32c:	f7f5 ffe2 	bl	80012f4 <__aeabi_fsub>
 800b330:	1c03      	adds	r3, r0, #0
 800b332:	1c1a      	adds	r2, r3, #0
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b338:	4b1e      	ldr	r3, [pc, #120]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b33a:	785b      	ldrb	r3, [r3, #1]
 800b33c:	031a      	lsls	r2, r3, #12
 800b33e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b340:	789b      	ldrb	r3, [r3, #2]
 800b342:	011b      	lsls	r3, r3, #4
 800b344:	18d3      	adds	r3, r2, r3
 800b346:	4a1b      	ldr	r2, [pc, #108]	@ (800b3b4 <AHT20_Calculate+0x178>)
 800b348:	78d2      	ldrb	r2, [r2, #3]
 800b34a:	0912      	lsrs	r2, r2, #4
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	189b      	adds	r3, r3, r2
 800b350:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b352:	68b8      	ldr	r0, [r7, #8]
 800b354:	f7f6 fab8 	bl	80018c8 <__aeabi_ui2f>
 800b358:	1c03      	adds	r3, r0, #0
 800b35a:	2193      	movs	r1, #147	@ 0x93
 800b35c:	05c9      	lsls	r1, r1, #23
 800b35e:	1c18      	adds	r0, r3, #0
 800b360:	f7f5 fca0 	bl	8000ca4 <__aeabi_fdiv>
 800b364:	1c03      	adds	r3, r0, #0
 800b366:	491c      	ldr	r1, [pc, #112]	@ (800b3d8 <AHT20_Calculate+0x19c>)
 800b368:	1c18      	adds	r0, r3, #0
 800b36a:	f7f5 fe69 	bl	8001040 <__aeabi_fmul>
 800b36e:	1c03      	adds	r3, r0, #0
 800b370:	1c1a      	adds	r2, r3, #0
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	1c18      	adds	r0, r3, #0
 800b37c:	f7f8 fa8a 	bl	8003894 <__aeabi_f2d>
 800b380:	0004      	movs	r4, r0
 800b382:	000d      	movs	r5, r1
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	1c18      	adds	r0, r3, #0
 800b38a:	f7f8 fa83 	bl	8003894 <__aeabi_f2d>
 800b38e:	0002      	movs	r2, r0
 800b390:	000b      	movs	r3, r1
 800b392:	4812      	ldr	r0, [pc, #72]	@ (800b3dc <AHT20_Calculate+0x1a0>)
 800b394:	4912      	ldr	r1, [pc, #72]	@ (800b3e0 <AHT20_Calculate+0x1a4>)
 800b396:	9202      	str	r2, [sp, #8]
 800b398:	9303      	str	r3, [sp, #12]
 800b39a:	9400      	str	r4, [sp, #0]
 800b39c:	9501      	str	r5, [sp, #4]
 800b39e:	0002      	movs	r2, r0
 800b3a0:	2002      	movs	r0, #2
 800b3a2:	f008 fd01 	bl	8013da8 <CreateLine>
  return true;
 800b3a6:	2301      	movs	r3, #1
}
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	b004      	add	sp, #16
 800b3ae:	bc80      	pop	{r7}
 800b3b0:	46b8      	mov	r8, r7
 800b3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b4:	20000ef4 	.word	0x20000ef4
 800b3b8:	0802c2c0 	.word	0x0802c2c0
 800b3bc:	0802c1f0 	.word	0x0802c1f0
 800b3c0:	0802c340 	.word	0x0802c340
 800b3c4:	0802c254 	.word	0x0802c254
 800b3c8:	20000ee0 	.word	0x20000ee0
 800b3cc:	20000efb 	.word	0x20000efb
 800b3d0:	43480000 	.word	0x43480000
 800b3d4:	42480000 	.word	0x42480000
 800b3d8:	42c80000 	.word	0x42c80000
 800b3dc:	0802c368 	.word	0x0802c368
 800b3e0:	0802c39c 	.word	0x0802c39c

0800b3e4 <AHT20_reset>:

bool AHT20_reset(void) {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b3e8:	f009 fa6a 	bl	80148c0 <HAL_GetTick>
 800b3ec:	0003      	movs	r3, r0
 800b3ee:	3332      	adds	r3, #50	@ 0x32
 800b3f0:	001a      	movs	r2, r3
 800b3f2:	4b07      	ldr	r3, [pc, #28]	@ (800b410 <AHT20_reset+0x2c>)
 800b3f4:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b3f6:	4b07      	ldr	r3, [pc, #28]	@ (800b414 <AHT20_reset+0x30>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b3fc:	4b06      	ldr	r3, [pc, #24]	@ (800b418 <AHT20_reset+0x34>)
 800b3fe:	2201      	movs	r2, #1
 800b400:	0019      	movs	r1, r3
 800b402:	2038      	movs	r0, #56	@ 0x38
 800b404:	f7ff fcf2 	bl	800adec <WriteRegister>
 800b408:	0003      	movs	r3, r0
}
 800b40a:	0018      	movs	r0, r3
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20000ee0 	.word	0x20000ee0
 800b414:	20000ee4 	.word	0x20000ee4
 800b418:	20000090 	.word	0x20000090

0800b41c <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b422:	4b61      	ldr	r3, [pc, #388]	@ (800b5a8 <AHT_Upkeep+0x18c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	0018      	movs	r0, r3
 800b428:	f008 fc68 	bl	8013cfc <TimestampIsReached>
 800b42c:	0003      	movs	r3, r0
 800b42e:	001a      	movs	r2, r3
 800b430:	2301      	movs	r3, #1
 800b432:	4053      	eors	r3, r2
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d002      	beq.n	800b440 <AHT_Upkeep+0x24>
    return AHTState;
 800b43a:	4b5c      	ldr	r3, [pc, #368]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	e0ae      	b.n	800b59e <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b440:	4b5a      	ldr	r3, [pc, #360]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b05      	cmp	r3, #5
 800b446:	d900      	bls.n	800b44a <AHT_Upkeep+0x2e>
 800b448:	e07d      	b.n	800b546 <AHT_Upkeep+0x12a>
 800b44a:	009a      	lsls	r2, r3, #2
 800b44c:	4b58      	ldr	r3, [pc, #352]	@ (800b5b0 <AHT_Upkeep+0x194>)
 800b44e:	18d3      	adds	r3, r2, r3
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b454:	4a57      	ldr	r2, [pc, #348]	@ (800b5b4 <AHT_Upkeep+0x198>)
 800b456:	4b58      	ldr	r3, [pc, #352]	@ (800b5b8 <AHT_Upkeep+0x19c>)
 800b458:	0019      	movs	r1, r3
 800b45a:	2003      	movs	r0, #3
 800b45c:	f008 fca4 	bl	8013da8 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b460:	f009 fa2e 	bl	80148c0 <HAL_GetTick>
 800b464:	0003      	movs	r3, r0
 800b466:	4a55      	ldr	r2, [pc, #340]	@ (800b5bc <AHT_Upkeep+0x1a0>)
 800b468:	189a      	adds	r2, r3, r2
 800b46a:	4b4f      	ldr	r3, [pc, #316]	@ (800b5a8 <AHT_Upkeep+0x18c>)
 800b46c:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b46e:	4b54      	ldr	r3, [pc, #336]	@ (800b5c0 <AHT_Upkeep+0x1a4>)
 800b470:	781a      	ldrb	r2, [r3, #0]
 800b472:	4b54      	ldr	r3, [pc, #336]	@ (800b5c4 <AHT_Upkeep+0x1a8>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d100      	bne.n	800b47c <AHT_Upkeep+0x60>
 800b47a:	e087      	b.n	800b58c <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b47c:	4b4b      	ldr	r3, [pc, #300]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b47e:	2205      	movs	r2, #5
 800b480:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b482:	e083      	b.n	800b58c <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b484:	f002 fcaa 	bl	800dddc <getSensorLock>
 800b488:	1e03      	subs	r3, r0, #0
 800b48a:	d000      	beq.n	800b48e <AHT_Upkeep+0x72>
 800b48c:	e080      	b.n	800b590 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b48e:	2002      	movs	r0, #2
 800b490:	f002 fc90 	bl	800ddb4 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b494:	f7ff fe40 	bl	800b118 <AHT20_StartMeasurement>
 800b498:	0003      	movs	r3, r0
 800b49a:	001a      	movs	r2, r3
 800b49c:	2301      	movs	r3, #1
 800b49e:	4053      	eors	r3, r2
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00c      	beq.n	800b4c0 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b4a6:	f7ff ff9d 	bl	800b3e4 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b4aa:	f009 fa09 	bl	80148c0 <HAL_GetTick>
 800b4ae:	0003      	movs	r3, r0
 800b4b0:	33c8      	adds	r3, #200	@ 0xc8
 800b4b2:	001a      	movs	r2, r3
 800b4b4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5a8 <AHT_Upkeep+0x18c>)
 800b4b6:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b4b8:	4b3c      	ldr	r3, [pc, #240]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b4ba:	22ff      	movs	r2, #255	@ 0xff
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	e002      	b.n	800b4c6 <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b4c0:	4b3a      	ldr	r3, [pc, #232]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b4c6:	200a      	movs	r0, #10
 800b4c8:	f009 fa04 	bl	80148d4 <HAL_Delay>
    break;
 800b4cc:	e065      	b.n	800b59a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b4ce:	f7ff fe51 	bl	800b174 <AHT20_GetMeasurementValues>
 800b4d2:	1e03      	subs	r3, r0, #0
 800b4d4:	d05e      	beq.n	800b594 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b4d6:	200a      	movs	r0, #10
 800b4d8:	f009 f9fc 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f002 fc69 	bl	800ddb4 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b4e2:	4b32      	ldr	r3, [pc, #200]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b4e8:	e054      	b.n	800b594 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b4ea:	003a      	movs	r2, r7
 800b4ec:	1d3b      	adds	r3, r7, #4
 800b4ee:	0011      	movs	r1, r2
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	f7ff fea3 	bl	800b23c <AHT20_Calculate>
 800b4f6:	0003      	movs	r3, r0
 800b4f8:	001a      	movs	r2, r3
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4053      	eors	r3, r2
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b00      	cmp	r3, #0
 800b502:	d005      	beq.n	800b510 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b504:	4b29      	ldr	r3, [pc, #164]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b506:	22ff      	movs	r2, #255	@ 0xff
 800b508:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b50a:	4b28      	ldr	r3, [pc, #160]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	e046      	b.n	800b59e <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	1c11      	adds	r1, r2, #0
 800b516:	1c18      	adds	r0, r3, #0
 800b518:	f7f9 fade 	bl	8004ad8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	1c11      	adds	r1, r2, #0
 800b522:	1c18      	adds	r0, r3, #0
 800b524:	f7f8 ff64 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b528:	4b20      	ldr	r3, [pc, #128]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b52a:	2205      	movs	r2, #5
 800b52c:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b52e:	f009 f9c7 	bl	80148c0 <HAL_GetTick>
 800b532:	0003      	movs	r3, r0
 800b534:	4a24      	ldr	r2, [pc, #144]	@ (800b5c8 <AHT_Upkeep+0x1ac>)
 800b536:	189a      	adds	r2, r3, r2
 800b538:	4b1b      	ldr	r3, [pc, #108]	@ (800b5a8 <AHT_Upkeep+0x18c>)
 800b53a:	601a      	str	r2, [r3, #0]
    break;
 800b53c:	e02d      	b.n	800b59a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b53e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b540:	2201      	movs	r2, #1
 800b542:	701a      	strb	r2, [r3, #0]
  break;
 800b544:	e029      	b.n	800b59a <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b546:	4b19      	ldr	r3, [pc, #100]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b54c:	f002 fc46 	bl	800dddc <getSensorLock>
 800b550:	0003      	movs	r3, r0
 800b552:	2b02      	cmp	r3, #2
 800b554:	d102      	bne.n	800b55c <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b556:	2000      	movs	r0, #0
 800b558:	f002 fc2c 	bl	800ddb4 <setSensorLock>
    }
    AHTerrors++;
 800b55c:	4b1b      	ldr	r3, [pc, #108]	@ (800b5cc <AHT_Upkeep+0x1b0>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	b2da      	uxtb	r2, r3
 800b564:	4b19      	ldr	r3, [pc, #100]	@ (800b5cc <AHT_Upkeep+0x1b0>)
 800b566:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b568:	4b18      	ldr	r3, [pc, #96]	@ (800b5cc <AHT_Upkeep+0x1b0>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b19      	cmp	r3, #25
 800b56e:	d913      	bls.n	800b598 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b570:	4a17      	ldr	r2, [pc, #92]	@ (800b5d0 <AHT_Upkeep+0x1b4>)
 800b572:	4b18      	ldr	r3, [pc, #96]	@ (800b5d4 <AHT_Upkeep+0x1b8>)
 800b574:	0019      	movs	r1, r3
 800b576:	2001      	movs	r0, #1
 800b578:	f008 fc16 	bl	8013da8 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b57c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b582:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c0 <AHT_Upkeep+0x1a4>)
 800b584:	781a      	ldrb	r2, [r3, #0]
 800b586:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c4 <AHT_Upkeep+0x1a8>)
 800b588:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b58a:	e005      	b.n	800b598 <AHT_Upkeep+0x17c>
    break;
 800b58c:	46c0      	nop			@ (mov r8, r8)
 800b58e:	e004      	b.n	800b59a <AHT_Upkeep+0x17e>
      break;
 800b590:	46c0      	nop			@ (mov r8, r8)
 800b592:	e002      	b.n	800b59a <AHT_Upkeep+0x17e>
    break;
 800b594:	46c0      	nop			@ (mov r8, r8)
 800b596:	e000      	b.n	800b59a <AHT_Upkeep+0x17e>
    break;
 800b598:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b59a:	4b04      	ldr	r3, [pc, #16]	@ (800b5ac <AHT_Upkeep+0x190>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
}
 800b59e:	0018      	movs	r0, r3
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	b002      	add	sp, #8
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	46c0      	nop			@ (mov r8, r8)
 800b5a8:	20000ee0 	.word	0x20000ee0
 800b5ac:	2000009f 	.word	0x2000009f
 800b5b0:	0802e42c 	.word	0x0802e42c
 800b5b4:	0802c3a0 	.word	0x0802c3a0
 800b5b8:	0802c1f0 	.word	0x0802c1f0
 800b5bc:	000dbba0 	.word	0x000dbba0
 800b5c0:	20000e43 	.word	0x20000e43
 800b5c4:	20000efc 	.word	0x20000efc
 800b5c8:	0000ea60 	.word	0x0000ea60
 800b5cc:	20000efb 	.word	0x20000efb
 800b5d0:	0802c3c8 	.word	0x0802c3c8
 800b5d4:	0802c254 	.word	0x0802c254

0800b5d8 <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	0004      	movs	r4, r0
 800b5e0:	0008      	movs	r0, r1
 800b5e2:	60ba      	str	r2, [r7, #8]
 800b5e4:	0019      	movs	r1, r3
 800b5e6:	260e      	movs	r6, #14
 800b5e8:	19bb      	adds	r3, r7, r6
 800b5ea:	1c22      	adds	r2, r4, #0
 800b5ec:	801a      	strh	r2, [r3, #0]
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	18fb      	adds	r3, r7, r3
 800b5f2:	1c02      	adds	r2, r0, #0
 800b5f4:	801a      	strh	r2, [r3, #0]
 800b5f6:	1dbb      	adds	r3, r7, #6
 800b5f8:	1c0a      	adds	r2, r1, #0
 800b5fa:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <WriteMemRegister+0x58>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d010      	beq.n	800b626 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b604:	4b0a      	ldr	r3, [pc, #40]	@ (800b630 <WriteMemRegister+0x58>)
 800b606:	681c      	ldr	r4, [r3, #0]
 800b608:	4b0a      	ldr	r3, [pc, #40]	@ (800b634 <WriteMemRegister+0x5c>)
 800b60a:	7818      	ldrb	r0, [r3, #0]
 800b60c:	68bd      	ldr	r5, [r7, #8]
 800b60e:	230c      	movs	r3, #12
 800b610:	18fb      	adds	r3, r7, r3
 800b612:	881a      	ldrh	r2, [r3, #0]
 800b614:	19bb      	adds	r3, r7, r6
 800b616:	8819      	ldrh	r1, [r3, #0]
 800b618:	1dbb      	adds	r3, r7, #6
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	002b      	movs	r3, r5
 800b620:	47a0      	blx	r4
 800b622:	0003      	movs	r3, r0
 800b624:	e000      	b.n	800b628 <WriteMemRegister+0x50>
  }
  return false;
 800b626:	2300      	movs	r3, #0
}
 800b628:	0018      	movs	r0, r3
 800b62a:	46bd      	mov	sp, r7
 800b62c:	b005      	add	sp, #20
 800b62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b630:	20000f00 	.word	0x20000f00
 800b634:	200000a0 	.word	0x200000a0

0800b638 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	0004      	movs	r4, r0
 800b640:	0008      	movs	r0, r1
 800b642:	60ba      	str	r2, [r7, #8]
 800b644:	0019      	movs	r1, r3
 800b646:	260e      	movs	r6, #14
 800b648:	19bb      	adds	r3, r7, r6
 800b64a:	1c22      	adds	r2, r4, #0
 800b64c:	801a      	strh	r2, [r3, #0]
 800b64e:	230c      	movs	r3, #12
 800b650:	18fb      	adds	r3, r7, r3
 800b652:	1c02      	adds	r2, r0, #0
 800b654:	801a      	strh	r2, [r3, #0]
 800b656:	1dbb      	adds	r3, r7, #6
 800b658:	1c0a      	adds	r2, r1, #0
 800b65a:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b65c:	4b0c      	ldr	r3, [pc, #48]	@ (800b690 <ReadMemRegister+0x58>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d010      	beq.n	800b686 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b664:	4b0a      	ldr	r3, [pc, #40]	@ (800b690 <ReadMemRegister+0x58>)
 800b666:	681c      	ldr	r4, [r3, #0]
 800b668:	4b0a      	ldr	r3, [pc, #40]	@ (800b694 <ReadMemRegister+0x5c>)
 800b66a:	7818      	ldrb	r0, [r3, #0]
 800b66c:	68bd      	ldr	r5, [r7, #8]
 800b66e:	230c      	movs	r3, #12
 800b670:	18fb      	adds	r3, r7, r3
 800b672:	881a      	ldrh	r2, [r3, #0]
 800b674:	19bb      	adds	r3, r7, r6
 800b676:	8819      	ldrh	r1, [r3, #0]
 800b678:	1dbb      	adds	r3, r7, #6
 800b67a:	881b      	ldrh	r3, [r3, #0]
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	002b      	movs	r3, r5
 800b680:	47a0      	blx	r4
 800b682:	0003      	movs	r3, r0
 800b684:	e000      	b.n	800b688 <ReadMemRegister+0x50>
  }
  return false;
 800b686:	2300      	movs	r3, #0
}
 800b688:	0018      	movs	r0, r3
 800b68a:	46bd      	mov	sp, r7
 800b68c:	b005      	add	sp, #20
 800b68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b690:	20000f04 	.word	0x20000f04
 800b694:	200000a0 	.word	0x200000a0

0800b698 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b6a0:	f009 f90e 	bl	80148c0 <HAL_GetTick>
 800b6a4:	0002      	movs	r2, r0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	18d2      	adds	r2, r2, r3
 800b6aa:	4b03      	ldr	r3, [pc, #12]	@ (800b6b8 <setBMP280TimeStamp+0x20>)
 800b6ac:	601a      	str	r2, [r3, #0]
}
 800b6ae:	46c0      	nop			@ (mov r8, r8)
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b002      	add	sp, #8
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	46c0      	nop			@ (mov r8, r8)
 800b6b8:	20000f24 	.word	0x20000f24

0800b6bc <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b6c6:	4b05      	ldr	r3, [pc, #20]	@ (800b6dc <BMP_Init+0x20>)
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b6cc:	4b04      	ldr	r3, [pc, #16]	@ (800b6e0 <BMP_Init+0x24>)
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	601a      	str	r2, [r3, #0]
}
 800b6d2:	46c0      	nop			@ (mov r8, r8)
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	b002      	add	sp, #8
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	46c0      	nop			@ (mov r8, r8)
 800b6dc:	20000f04 	.word	0x20000f04
 800b6e0:	20000f00 	.word	0x20000f00

0800b6e4 <BMP280_reset>:

static void BMP280_reset() {
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b6ea:	1dfb      	adds	r3, r7, #7
 800b6ec:	22b6      	movs	r2, #182	@ 0xb6
 800b6ee:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b71c <BMP280_reset+0x38>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b6f6:	1dfa      	adds	r2, r7, #7
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	20e0      	movs	r0, #224	@ 0xe0
 800b6fe:	f7ff ff6b 	bl	800b5d8 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b702:	4a07      	ldr	r2, [pc, #28]	@ (800b720 <BMP280_reset+0x3c>)
 800b704:	4b07      	ldr	r3, [pc, #28]	@ (800b724 <BMP280_reset+0x40>)
 800b706:	0019      	movs	r1, r3
 800b708:	2002      	movs	r0, #2
 800b70a:	f008 fb4d 	bl	8013da8 <CreateLine>
  HAL_Delay(100);
 800b70e:	2064      	movs	r0, #100	@ 0x64
 800b710:	f009 f8e0 	bl	80148d4 <HAL_Delay>
}
 800b714:	46c0      	nop			@ (mov r8, r8)
 800b716:	46bd      	mov	sp, r7
 800b718:	b002      	add	sp, #8
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000f2a 	.word	0x20000f2a
 800b720:	0802c40c 	.word	0x0802c40c
 800b724:	0802c424 	.word	0x0802c424

0800b728 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b728:	b590      	push	{r4, r7, lr}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b72e:	4a30      	ldr	r2, [pc, #192]	@ (800b7f0 <BMP280_get_calibration+0xc8>)
 800b730:	2318      	movs	r3, #24
 800b732:	2101      	movs	r1, #1
 800b734:	2088      	movs	r0, #136	@ 0x88
 800b736:	f7ff ff7f 	bl	800b638 <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b73a:	4a2e      	ldr	r2, [pc, #184]	@ (800b7f4 <BMP280_get_calibration+0xcc>)
 800b73c:	4b2e      	ldr	r3, [pc, #184]	@ (800b7f8 <BMP280_get_calibration+0xd0>)
 800b73e:	0019      	movs	r1, r3
 800b740:	2003      	movs	r0, #3
 800b742:	f008 fb31 	bl	8013da8 <CreateLine>
  char stc = 'T';
 800b746:	1dfb      	adds	r3, r7, #7
 800b748:	2254      	movs	r2, #84	@ 0x54
 800b74a:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b74c:	1dbb      	adds	r3, r7, #6
 800b74e:	2201      	movs	r2, #1
 800b750:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b752:	1d7b      	adds	r3, r7, #5
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e041      	b.n	800b7de <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b75a:	1d7b      	adds	r3, r7, #5
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <BMP280_get_calibration+0x42>
 800b762:	1d7b      	adds	r3, r7, #5
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b03      	cmp	r3, #3
 800b768:	d11d      	bne.n	800b7a6 <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b76a:	1d7b      	adds	r3, r7, #5
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d105      	bne.n	800b77e <BMP280_get_calibration+0x56>
        idx = 1;
 800b772:	1dbb      	adds	r3, r7, #6
 800b774:	2201      	movs	r2, #1
 800b776:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b778:	1dfb      	adds	r3, r7, #7
 800b77a:	2250      	movs	r2, #80	@ 0x50
 800b77c:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b77e:	1dfb      	adds	r3, r7, #7
 800b780:	7818      	ldrb	r0, [r3, #0]
 800b782:	1dbb      	adds	r3, r7, #6
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	1d7a      	adds	r2, r7, #5
 800b788:	7811      	ldrb	r1, [r2, #0]
 800b78a:	4a19      	ldr	r2, [pc, #100]	@ (800b7f0 <BMP280_get_calibration+0xc8>)
 800b78c:	0049      	lsls	r1, r1, #1
 800b78e:	5e8a      	ldrsh	r2, [r1, r2]
 800b790:	b292      	uxth	r2, r2
 800b792:	0014      	movs	r4, r2
 800b794:	4a19      	ldr	r2, [pc, #100]	@ (800b7fc <BMP280_get_calibration+0xd4>)
 800b796:	4918      	ldr	r1, [pc, #96]	@ (800b7f8 <BMP280_get_calibration+0xd0>)
 800b798:	9401      	str	r4, [sp, #4]
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	0003      	movs	r3, r0
 800b79e:	2003      	movs	r0, #3
 800b7a0:	f008 fb02 	bl	8013da8 <CreateLine>
 800b7a4:	e011      	b.n	800b7ca <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b7a6:	1dfb      	adds	r3, r7, #7
 800b7a8:	7818      	ldrb	r0, [r3, #0]
 800b7aa:	1dbb      	adds	r3, r7, #6
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	1d7a      	adds	r2, r7, #5
 800b7b0:	7811      	ldrb	r1, [r2, #0]
 800b7b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b7f0 <BMP280_get_calibration+0xc8>)
 800b7b4:	0049      	lsls	r1, r1, #1
 800b7b6:	5e8a      	ldrsh	r2, [r1, r2]
 800b7b8:	0014      	movs	r4, r2
 800b7ba:	4a10      	ldr	r2, [pc, #64]	@ (800b7fc <BMP280_get_calibration+0xd4>)
 800b7bc:	490e      	ldr	r1, [pc, #56]	@ (800b7f8 <BMP280_get_calibration+0xd0>)
 800b7be:	9401      	str	r4, [sp, #4]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	0003      	movs	r3, r0
 800b7c4:	2003      	movs	r0, #3
 800b7c6:	f008 faef 	bl	8013da8 <CreateLine>
    }
    idx++;
 800b7ca:	1dbb      	adds	r3, r7, #6
 800b7cc:	781a      	ldrb	r2, [r3, #0]
 800b7ce:	1dbb      	adds	r3, r7, #6
 800b7d0:	3201      	adds	r2, #1
 800b7d2:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b7d4:	1d7b      	adds	r3, r7, #5
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	1d7b      	adds	r3, r7, #5
 800b7da:	3201      	adds	r2, #1
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	1d7b      	adds	r3, r7, #5
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b0b      	cmp	r3, #11
 800b7e4:	d9b9      	bls.n	800b75a <BMP280_get_calibration+0x32>
  }
}
 800b7e6:	46c0      	nop			@ (mov r8, r8)
 800b7e8:	46c0      	nop			@ (mov r8, r8)
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	b003      	add	sp, #12
 800b7ee:	bd90      	pop	{r4, r7, pc}
 800b7f0:	20000f08 	.word	0x20000f08
 800b7f4:	0802c428 	.word	0x0802c428
 800b7f8:	0802c444 	.word	0x0802c444
 800b7fc:	0802c448 	.word	0x0802c448

0800b800 <BMP280_set_config>:

void BMP280_set_config() {
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b806:	1dfb      	adds	r3, r7, #7
 800b808:	2290      	movs	r2, #144	@ 0x90
 800b80a:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b80c:	1dfa      	adds	r2, r7, #7
 800b80e:	2301      	movs	r3, #1
 800b810:	2101      	movs	r1, #1
 800b812:	20f5      	movs	r0, #245	@ 0xf5
 800b814:	f7ff fee0 	bl	800b5d8 <WriteMemRegister>
 800b818:	0003      	movs	r3, r0
 800b81a:	001a      	movs	r2, r3
 800b81c:	2301      	movs	r3, #1
 800b81e:	4053      	eors	r3, r2
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d005      	beq.n	800b832 <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b826:	4a0b      	ldr	r2, [pc, #44]	@ (800b854 <BMP280_set_config+0x54>)
 800b828:	4b0b      	ldr	r3, [pc, #44]	@ (800b858 <BMP280_set_config+0x58>)
 800b82a:	0019      	movs	r1, r3
 800b82c:	2001      	movs	r0, #1
 800b82e:	f008 fabb 	bl	8013da8 <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b832:	1dfa      	adds	r2, r7, #7
 800b834:	2301      	movs	r3, #1
 800b836:	2101      	movs	r1, #1
 800b838:	20f5      	movs	r0, #245	@ 0xf5
 800b83a:	f7ff fefd 	bl	800b638 <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b83e:	1dfb      	adds	r3, r7, #7
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	4a06      	ldr	r2, [pc, #24]	@ (800b85c <BMP280_set_config+0x5c>)
 800b844:	4906      	ldr	r1, [pc, #24]	@ (800b860 <BMP280_set_config+0x60>)
 800b846:	2003      	movs	r0, #3
 800b848:	f008 faae 	bl	8013da8 <CreateLine>
}
 800b84c:	46c0      	nop			@ (mov r8, r8)
 800b84e:	46bd      	mov	sp, r7
 800b850:	b002      	add	sp, #8
 800b852:	bd80      	pop	{r7, pc}
 800b854:	0802c458 	.word	0x0802c458
 800b858:	0802c47c 	.word	0x0802c47c
 800b85c:	0802c480 	.word	0x0802c480
 800b860:	0802c444 	.word	0x0802c444

0800b864 <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b86a:	1dfb      	adds	r3, r7, #7
 800b86c:	2200      	movs	r2, #0
 800b86e:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b870:	4b28      	ldr	r3, [pc, #160]	@ (800b914 <BMP280_DeviceConnected+0xb0>)
 800b872:	2276      	movs	r2, #118	@ 0x76
 800b874:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b876:	1dfc      	adds	r4, r7, #7
 800b878:	1dba      	adds	r2, r7, #6
 800b87a:	2301      	movs	r3, #1
 800b87c:	2101      	movs	r1, #1
 800b87e:	20d0      	movs	r0, #208	@ 0xd0
 800b880:	f7ff feda 	bl	800b638 <ReadMemRegister>
 800b884:	0003      	movs	r3, r0
 800b886:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b888:	1dbb      	adds	r3, r7, #6
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b58      	cmp	r3, #88	@ 0x58
 800b88e:	d00e      	beq.n	800b8ae <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b890:	4b20      	ldr	r3, [pc, #128]	@ (800b914 <BMP280_DeviceConnected+0xb0>)
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	b2da      	uxtb	r2, r3
 800b898:	4b1e      	ldr	r3, [pc, #120]	@ (800b914 <BMP280_DeviceConnected+0xb0>)
 800b89a:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b89c:	1dfc      	adds	r4, r7, #7
 800b89e:	1dba      	adds	r2, r7, #6
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	20d0      	movs	r0, #208	@ 0xd0
 800b8a6:	f7ff fec7 	bl	800b638 <ReadMemRegister>
 800b8aa:	0003      	movs	r3, r0
 800b8ac:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b8ae:	1dfb      	adds	r3, r7, #7
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01b      	beq.n	800b8ee <BMP280_DeviceConnected+0x8a>
 800b8b6:	1dbb      	adds	r3, r7, #6
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b58      	cmp	r3, #88	@ 0x58
 800b8bc:	d117      	bne.n	800b8ee <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b8be:	1dbb      	adds	r3, r7, #6
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	4b13      	ldr	r3, [pc, #76]	@ (800b914 <BMP280_DeviceConnected+0xb0>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	4a13      	ldr	r2, [pc, #76]	@ (800b918 <BMP280_DeviceConnected+0xb4>)
 800b8ca:	4914      	ldr	r1, [pc, #80]	@ (800b91c <BMP280_DeviceConnected+0xb8>)
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	0003      	movs	r3, r0
 800b8d0:	2002      	movs	r0, #2
 800b8d2:	f008 fa69 	bl	8013da8 <CreateLine>
      BMP280_reset(); // get an initial state
 800b8d6:	f7ff ff05 	bl	800b6e4 <BMP280_reset>
      HAL_Delay(3);
 800b8da:	2003      	movs	r0, #3
 800b8dc:	f008 fffa 	bl	80148d4 <HAL_Delay>
      BMP280_get_calibration();
 800b8e0:	f7ff ff22 	bl	800b728 <BMP280_get_calibration>
      BMP280_set_config();
 800b8e4:	f7ff ff8c 	bl	800b800 <BMP280_set_config>
      BMP280_set_mode();
 800b8e8:	f000 f8f6 	bl	800bad8 <BMP280_set_mode>
 800b8ec:	e008      	b.n	800b900 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b8ee:	4b09      	ldr	r3, [pc, #36]	@ (800b914 <BMP280_DeviceConnected+0xb0>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b8f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b920 <BMP280_DeviceConnected+0xbc>)
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <BMP280_DeviceConnected+0xc0>)
 800b8f8:	0019      	movs	r1, r3
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	f008 fa54 	bl	8013da8 <CreateLine>
    }
    return bmp280I2Caddr;
 800b900:	4b04      	ldr	r3, [pc, #16]	@ (800b914 <BMP280_DeviceConnected+0xb0>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	1e5a      	subs	r2, r3, #1
 800b906:	4193      	sbcs	r3, r2
 800b908:	b2db      	uxtb	r3, r3
}
 800b90a:	0018      	movs	r0, r3
 800b90c:	46bd      	mov	sp, r7
 800b90e:	b003      	add	sp, #12
 800b910:	bd90      	pop	{r4, r7, pc}
 800b912:	46c0      	nop			@ (mov r8, r8)
 800b914:	200000a0 	.word	0x200000a0
 800b918:	0802c49c 	.word	0x0802c49c
 800b91c:	0802c424 	.word	0x0802c424
 800b920:	0802c4d4 	.word	0x0802c4d4
 800b924:	0802c47c 	.word	0x0802c47c

0800b928 <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800b928:	b5b0      	push	{r4, r5, r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800b92e:	1dfb      	adds	r3, r7, #7
 800b930:	2201      	movs	r2, #1
 800b932:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800b934:	2009      	movs	r0, #9
 800b936:	f008 ffcd 	bl	80148d4 <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;  // time for local loop
 800b93a:	f008 ffc1 	bl	80148c0 <HAL_GetTick>
 800b93e:	0003      	movs	r3, r0
 800b940:	4a49      	ldr	r2, [pc, #292]	@ (800ba68 <BMP280_get_measurement_values+0x140>)
 800b942:	189a      	adds	r2, r3, r2
 800b944:	4b49      	ldr	r3, [pc, #292]	@ (800ba6c <BMP280_get_measurement_values+0x144>)
 800b946:	601a      	str	r2, [r3, #0]
  do {
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1); // store at start address of array
 800b948:	003a      	movs	r2, r7
 800b94a:	2301      	movs	r3, #1
 800b94c:	2101      	movs	r1, #1
 800b94e:	20f3      	movs	r0, #243	@ 0xf3
 800b950:	f7ff fe72 	bl	800b638 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800b954:	4b45      	ldr	r3, [pc, #276]	@ (800ba6c <BMP280_get_measurement_values+0x144>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	0018      	movs	r0, r3
 800b95a:	f008 f9cf 	bl	8013cfc <TimestampIsReached>
 800b95e:	1e03      	subs	r3, r0, #0
 800b960:	d007      	beq.n	800b972 <BMP280_get_measurement_values+0x4a>
      Error("BMP280 timeout while waiting for ready.");
 800b962:	4a43      	ldr	r2, [pc, #268]	@ (800ba70 <BMP280_get_measurement_values+0x148>)
 800b964:	4b43      	ldr	r3, [pc, #268]	@ (800ba74 <BMP280_get_measurement_values+0x14c>)
 800b966:	0019      	movs	r1, r3
 800b968:	2001      	movs	r0, #1
 800b96a:	f008 fa1d 	bl	8013da8 <CreateLine>
      return false;
 800b96e:	2300      	movs	r3, #0
 800b970:	e076      	b.n	800ba60 <BMP280_get_measurement_values+0x138>
    }
    HAL_Delay(10);
 800b972:	200a      	movs	r0, #10
 800b974:	f008 ffae 	bl	80148d4 <HAL_Delay>
  } while ((bmpData[0] & (BMP280_NVM_RDY | BMP280_MEAS_RDY)) != 0);
 800b978:	003b      	movs	r3, r7
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	001a      	movs	r2, r3
 800b97e:	2309      	movs	r3, #9
 800b980:	4013      	ands	r3, r2
 800b982:	d1e1      	bne.n	800b948 <BMP280_get_measurement_values+0x20>
  //  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800b984:	003a      	movs	r2, r7
 800b986:	2306      	movs	r3, #6
 800b988:	2101      	movs	r1, #1
 800b98a:	20f7      	movs	r0, #247	@ 0xf7
 800b98c:	f7ff fe54 	bl	800b638 <ReadMemRegister>
 800b990:	0003      	movs	r3, r0
 800b992:	001a      	movs	r2, r3
 800b994:	1dfb      	adds	r3, r7, #7
 800b996:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b998:	003b      	movs	r3, r7
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	031a      	lsls	r2, r3, #12
 800b99e:	003b      	movs	r3, r7
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	18d3      	adds	r3, r2, r3
 800b9a6:	003a      	movs	r2, r7
 800b9a8:	7892      	ldrb	r2, [r2, #2]
 800b9aa:	0912      	lsrs	r2, r2, #4
 800b9ac:	b2d2      	uxtb	r2, r2
 800b9ae:	189b      	adds	r3, r3, r2
 800b9b0:	001a      	movs	r2, r3
 800b9b2:	4b31      	ldr	r3, [pc, #196]	@ (800ba78 <BMP280_get_measurement_values+0x150>)
 800b9b4:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800b9b6:	003b      	movs	r3, r7
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b80      	cmp	r3, #128	@ 0x80
 800b9bc:	d11b      	bne.n	800b9f6 <BMP280_get_measurement_values+0xce>
    Error("BMP280 Invalid read of barometric pressure.");
 800b9be:	4a2f      	ldr	r2, [pc, #188]	@ (800ba7c <BMP280_get_measurement_values+0x154>)
 800b9c0:	4b2c      	ldr	r3, [pc, #176]	@ (800ba74 <BMP280_get_measurement_values+0x14c>)
 800b9c2:	0019      	movs	r1, r3
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f008 f9ef 	bl	8013da8 <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800b9ca:	003b      	movs	r3, r7
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	001d      	movs	r5, r3
 800b9d0:	003b      	movs	r3, r7
 800b9d2:	785b      	ldrb	r3, [r3, #1]
 800b9d4:	0018      	movs	r0, r3
 800b9d6:	003b      	movs	r3, r7
 800b9d8:	789b      	ldrb	r3, [r3, #2]
 800b9da:	001c      	movs	r4, r3
 800b9dc:	4b26      	ldr	r3, [pc, #152]	@ (800ba78 <BMP280_get_measurement_values+0x150>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a27      	ldr	r2, [pc, #156]	@ (800ba80 <BMP280_get_measurement_values+0x158>)
 800b9e2:	4928      	ldr	r1, [pc, #160]	@ (800ba84 <BMP280_get_measurement_values+0x15c>)
 800b9e4:	9302      	str	r3, [sp, #8]
 800b9e6:	9401      	str	r4, [sp, #4]
 800b9e8:	9000      	str	r0, [sp, #0]
 800b9ea:	002b      	movs	r3, r5
 800b9ec:	2003      	movs	r0, #3
 800b9ee:	f008 f9db 	bl	8013da8 <CreateLine>
    SetAllBlueLED();
 800b9f2:	f007 f8e5 	bl	8012bc0 <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b9f6:	003b      	movs	r3, r7
 800b9f8:	78db      	ldrb	r3, [r3, #3]
 800b9fa:	031a      	lsls	r2, r3, #12
 800b9fc:	003b      	movs	r3, r7
 800b9fe:	791b      	ldrb	r3, [r3, #4]
 800ba00:	011b      	lsls	r3, r3, #4
 800ba02:	18d3      	adds	r3, r2, r3
 800ba04:	003a      	movs	r2, r7
 800ba06:	7952      	ldrb	r2, [r2, #5]
 800ba08:	0912      	lsrs	r2, r2, #4
 800ba0a:	b2d2      	uxtb	r2, r2
 800ba0c:	189b      	adds	r3, r3, r2
 800ba0e:	001a      	movs	r2, r3
 800ba10:	4b1d      	ldr	r3, [pc, #116]	@ (800ba88 <BMP280_get_measurement_values+0x160>)
 800ba12:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800ba14:	003b      	movs	r3, r7
 800ba16:	78db      	ldrb	r3, [r3, #3]
 800ba18:	2b80      	cmp	r3, #128	@ 0x80
 800ba1a:	d11b      	bne.n	800ba54 <BMP280_get_measurement_values+0x12c>
    Error("BMP280 Invalid read of temperature.");
 800ba1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ba8c <BMP280_get_measurement_values+0x164>)
 800ba1e:	4b15      	ldr	r3, [pc, #84]	@ (800ba74 <BMP280_get_measurement_values+0x14c>)
 800ba20:	0019      	movs	r1, r3
 800ba22:	2001      	movs	r0, #1
 800ba24:	f008 f9c0 	bl	8013da8 <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800ba28:	003b      	movs	r3, r7
 800ba2a:	78db      	ldrb	r3, [r3, #3]
 800ba2c:	001d      	movs	r5, r3
 800ba2e:	003b      	movs	r3, r7
 800ba30:	791b      	ldrb	r3, [r3, #4]
 800ba32:	0018      	movs	r0, r3
 800ba34:	003b      	movs	r3, r7
 800ba36:	795b      	ldrb	r3, [r3, #5]
 800ba38:	001c      	movs	r4, r3
 800ba3a:	4b13      	ldr	r3, [pc, #76]	@ (800ba88 <BMP280_get_measurement_values+0x160>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a14      	ldr	r2, [pc, #80]	@ (800ba90 <BMP280_get_measurement_values+0x168>)
 800ba40:	4910      	ldr	r1, [pc, #64]	@ (800ba84 <BMP280_get_measurement_values+0x15c>)
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	9401      	str	r4, [sp, #4]
 800ba46:	9000      	str	r0, [sp, #0]
 800ba48:	002b      	movs	r3, r5
 800ba4a:	2003      	movs	r0, #3
 800ba4c:	f008 f9ac 	bl	8013da8 <CreateLine>
    SetAllBlueLED();
 800ba50:	f007 f8b6 	bl	8012bc0 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld, rslt: %s", raw_mpa, raw_temp, rslt?"success":"fail");
  return rslt;
 800ba54:	1dfb      	adds	r3, r7, #7
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	1e5a      	subs	r2, r3, #1
 800ba5c:	4193      	sbcs	r3, r2
 800ba5e:	b2db      	uxtb	r3, r3
}
 800ba60:	0018      	movs	r0, r3
 800ba62:	46bd      	mov	sp, r7
 800ba64:	b002      	add	sp, #8
 800ba66:	bdb0      	pop	{r4, r5, r7, pc}
 800ba68:	000005dc 	.word	0x000005dc
 800ba6c:	20000f24 	.word	0x20000f24
 800ba70:	0802c4e8 	.word	0x0802c4e8
 800ba74:	0802c47c 	.word	0x0802c47c
 800ba78:	20000f30 	.word	0x20000f30
 800ba7c:	0802c510 	.word	0x0802c510
 800ba80:	0802c53c 	.word	0x0802c53c
 800ba84:	0802c444 	.word	0x0802c444
 800ba88:	20000f2c 	.word	0x20000f2c
 800ba8c:	0802c57c 	.word	0x0802c57c
 800ba90:	0802c5a0 	.word	0x0802c5a0

0800ba94 <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800ba9a:	1dba      	adds	r2, r7, #6
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	2101      	movs	r1, #1
 800baa0:	20f4      	movs	r0, #244	@ 0xf4
 800baa2:	f7ff fdc9 	bl	800b638 <ReadMemRegister>
 800baa6:	0003      	movs	r3, r0
 800baa8:	001a      	movs	r2, r3
 800baaa:	1dfb      	adds	r3, r7, #7
 800baac:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800baae:	1dbb      	adds	r3, r7, #6
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2203      	movs	r2, #3
 800bab4:	4013      	ands	r3, r2
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	1dbb      	adds	r3, r7, #6
 800baba:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800babc:	1dfb      	adds	r3, r7, #7
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	b25b      	sxtb	r3, r3
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <BMP280_get_mode+0x38>
    bmpData = 255;
 800bac6:	1dbb      	adds	r3, r7, #6
 800bac8:	22ff      	movs	r2, #255	@ 0xff
 800baca:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bacc:	1dbb      	adds	r3, r7, #6
 800bace:	781b      	ldrb	r3, [r3, #0]
}
 800bad0:	0018      	movs	r0, r3
 800bad2:	46bd      	mov	sp, r7
 800bad4:	b002      	add	sp, #8
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800bade:	4b1a      	ldr	r3, [pc, #104]	@ (800bb48 <BMP280_set_mode+0x70>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2254      	movs	r2, #84	@ 0x54
 800bae4:	4313      	orrs	r3, r2
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	1dfb      	adds	r3, r7, #7
 800baea:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800baec:	1dfa      	adds	r2, r7, #7
 800baee:	2301      	movs	r3, #1
 800baf0:	2101      	movs	r1, #1
 800baf2:	20f4      	movs	r0, #244	@ 0xf4
 800baf4:	f7ff fd70 	bl	800b5d8 <WriteMemRegister>
  HAL_Delay(10);
 800baf8:	200a      	movs	r0, #10
 800bafa:	f008 feeb 	bl	80148d4 <HAL_Delay>
  data = BMP280_get_mode();
 800bafe:	f7ff ffc9 	bl	800ba94 <BMP280_get_mode>
 800bb02:	0003      	movs	r3, r0
 800bb04:	001a      	movs	r2, r3
 800bb06:	1dfb      	adds	r3, r7, #7
 800bb08:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800bb0a:	1dfb      	adds	r3, r7, #7
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	2203      	movs	r2, #3
 800bb10:	4013      	ands	r3, r2
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	1dfb      	adds	r3, r7, #7
 800bb16:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bb18:	1dfb      	adds	r3, r7, #7
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d007      	beq.n	800bb30 <BMP280_set_mode+0x58>
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d101      	bne.n	800bb2c <BMP280_set_mode+0x54>
 800bb28:	4b08      	ldr	r3, [pc, #32]	@ (800bb4c <BMP280_set_mode+0x74>)
 800bb2a:	e002      	b.n	800bb32 <BMP280_set_mode+0x5a>
 800bb2c:	4b08      	ldr	r3, [pc, #32]	@ (800bb50 <BMP280_set_mode+0x78>)
 800bb2e:	e000      	b.n	800bb32 <BMP280_set_mode+0x5a>
 800bb30:	4b08      	ldr	r3, [pc, #32]	@ (800bb54 <BMP280_set_mode+0x7c>)
 800bb32:	4a09      	ldr	r2, [pc, #36]	@ (800bb58 <BMP280_set_mode+0x80>)
 800bb34:	4909      	ldr	r1, [pc, #36]	@ (800bb5c <BMP280_set_mode+0x84>)
 800bb36:	2003      	movs	r0, #3
 800bb38:	f008 f936 	bl	8013da8 <CreateLine>
  return true;
 800bb3c:	2301      	movs	r3, #1
}
 800bb3e:	0018      	movs	r0, r3
 800bb40:	46bd      	mov	sp, r7
 800bb42:	b002      	add	sp, #8
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	46c0      	nop			@ (mov r8, r8)
 800bb48:	200000a1 	.word	0x200000a1
 800bb4c:	0802c5e0 	.word	0x0802c5e0
 800bb50:	0802c5e8 	.word	0x0802c5e8
 800bb54:	0802c5f0 	.word	0x0802c5f0
 800bb58:	0802c5f8 	.word	0x0802c5f8
 800bb5c:	0802c444 	.word	0x0802c444

0800bb60 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bb66:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe0 <BMP280_calc_temperature+0x80>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	10da      	asrs	r2, r3, #3
 800bb70:	4b1c      	ldr	r3, [pc, #112]	@ (800bbe4 <BMP280_calc_temperature+0x84>)
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	4a1a      	ldr	r2, [pc, #104]	@ (800bbe4 <BMP280_calc_temperature+0x84>)
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	5e52      	ldrsh	r2, [r2, r1]
 800bb7e:	4353      	muls	r3, r2
 800bb80:	12db      	asrs	r3, r3, #11
 800bb82:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	111b      	asrs	r3, r3, #4
 800bb88:	4a16      	ldr	r2, [pc, #88]	@ (800bbe4 <BMP280_calc_temperature+0x84>)
 800bb8a:	8812      	ldrh	r2, [r2, #0]
 800bb8c:	1a9b      	subs	r3, r3, r2
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	1112      	asrs	r2, r2, #4
 800bb92:	4914      	ldr	r1, [pc, #80]	@ (800bbe4 <BMP280_calc_temperature+0x84>)
 800bb94:	8809      	ldrh	r1, [r1, #0]
 800bb96:	1a52      	subs	r2, r2, r1
 800bb98:	4353      	muls	r3, r2
 800bb9a:	131b      	asrs	r3, r3, #12
 800bb9c:	4a11      	ldr	r2, [pc, #68]	@ (800bbe4 <BMP280_calc_temperature+0x84>)
 800bb9e:	2104      	movs	r1, #4
 800bba0:	5e52      	ldrsh	r2, [r2, r1]
 800bba2:	4353      	muls	r3, r2
 800bba4:	139b      	asrs	r3, r3, #14
 800bba6:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	18d2      	adds	r2, r2, r3
 800bbae:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe8 <BMP280_calc_temperature+0x88>)
 800bbb0:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe8 <BMP280_calc_temperature+0x88>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	0013      	movs	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	189b      	adds	r3, r3, r2
 800bbbc:	3380      	adds	r3, #128	@ 0x80
 800bbbe:	121b      	asrs	r3, r3, #8
 800bbc0:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bbc2:	68b8      	ldr	r0, [r7, #8]
 800bbc4:	f7f5 fe30 	bl	8001828 <__aeabi_i2f>
 800bbc8:	1c03      	adds	r3, r0, #0
 800bbca:	4908      	ldr	r1, [pc, #32]	@ (800bbec <BMP280_calc_temperature+0x8c>)
 800bbcc:	1c18      	adds	r0, r3, #0
 800bbce:	f7f5 f869 	bl	8000ca4 <__aeabi_fdiv>
 800bbd2:	1c03      	adds	r3, r0, #0
 800bbd4:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bbd6:	687b      	ldr	r3, [r7, #4]
}
 800bbd8:	1c18      	adds	r0, r3, #0
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	b006      	add	sp, #24
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	20000f2c 	.word	0x20000f2c
 800bbe4:	20000f08 	.word	0x20000f08
 800bbe8:	20000f20 	.word	0x20000f20
 800bbec:	42c80000 	.word	0x42c80000

0800bbf0 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bbf6:	4b4e      	ldr	r3, [pc, #312]	@ (800bd30 <BMP280_calc_pressure+0x140>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bbfc:	4b4d      	ldr	r3, [pc, #308]	@ (800bd34 <BMP280_calc_pressure+0x144>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	105b      	asrs	r3, r3, #1
 800bc02:	4a4d      	ldr	r2, [pc, #308]	@ (800bd38 <BMP280_calc_pressure+0x148>)
 800bc04:	4694      	mov	ip, r2
 800bc06:	4463      	add	r3, ip
 800bc08:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	109b      	asrs	r3, r3, #2
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	1092      	asrs	r2, r2, #2
 800bc12:	4353      	muls	r3, r2
 800bc14:	12db      	asrs	r3, r3, #11
 800bc16:	4a49      	ldr	r2, [pc, #292]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bc18:	2110      	movs	r1, #16
 800bc1a:	5e52      	ldrsh	r2, [r2, r1]
 800bc1c:	4353      	muls	r3, r2
 800bc1e:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bc20:	4b46      	ldr	r3, [pc, #280]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bc22:	220e      	movs	r2, #14
 800bc24:	5e9b      	ldrsh	r3, [r3, r2]
 800bc26:	001a      	movs	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4353      	muls	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	18d3      	adds	r3, r2, r3
 800bc32:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	109a      	asrs	r2, r3, #2
 800bc38:	4b40      	ldr	r3, [pc, #256]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bc3a:	210c      	movs	r1, #12
 800bc3c:	5e5b      	ldrsh	r3, [r3, r1]
 800bc3e:	041b      	lsls	r3, r3, #16
 800bc40:	18d3      	adds	r3, r2, r3
 800bc42:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bc44:	4b3d      	ldr	r3, [pc, #244]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bc46:	220a      	movs	r2, #10
 800bc48:	5e9b      	ldrsh	r3, [r3, r2]
 800bc4a:	0019      	movs	r1, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	109b      	asrs	r3, r3, #2
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	1092      	asrs	r2, r2, #2
 800bc54:	4353      	muls	r3, r2
 800bc56:	135b      	asrs	r3, r3, #13
 800bc58:	434b      	muls	r3, r1
 800bc5a:	10da      	asrs	r2, r3, #3
 800bc5c:	4b37      	ldr	r3, [pc, #220]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bc5e:	2108      	movs	r1, #8
 800bc60:	5e5b      	ldrsh	r3, [r3, r1]
 800bc62:	0019      	movs	r1, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	434b      	muls	r3, r1
 800bc68:	105b      	asrs	r3, r3, #1
 800bc6a:	18d3      	adds	r3, r2, r3
 800bc6c:	149b      	asrs	r3, r3, #18
 800bc6e:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2280      	movs	r2, #128	@ 0x80
 800bc74:	0212      	lsls	r2, r2, #8
 800bc76:	4694      	mov	ip, r2
 800bc78:	4463      	add	r3, ip
 800bc7a:	4a30      	ldr	r2, [pc, #192]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bc7c:	88d2      	ldrh	r2, [r2, #6]
 800bc7e:	4353      	muls	r3, r2
 800bc80:	13db      	asrs	r3, r3, #15
 800bc82:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <BMP280_calc_pressure+0x9e>
    return 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e04b      	b.n	800bd26 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2280      	movs	r2, #128	@ 0x80
 800bc92:	0352      	lsls	r2, r2, #13
 800bc94:	1ad2      	subs	r2, r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	131b      	asrs	r3, r3, #12
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	001a      	movs	r2, r3
 800bc9e:	4b28      	ldr	r3, [pc, #160]	@ (800bd40 <BMP280_calc_pressure+0x150>)
 800bca0:	4353      	muls	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	db09      	blt.n	800bcbe <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	0011      	movs	r1, r2
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	f7f4 fa76 	bl	80001a4 <__udivsi3>
 800bcb8:	0003      	movs	r3, r0
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e007      	b.n	800bcce <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	0019      	movs	r1, r3
 800bcc2:	6978      	ldr	r0, [r7, #20]
 800bcc4:	f7f4 fa6e 	bl	80001a4 <__udivsi3>
 800bcc8:	0003      	movs	r3, r0
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bcce:	4b1b      	ldr	r3, [pc, #108]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bcd0:	2216      	movs	r2, #22
 800bcd2:	5e9b      	ldrsh	r3, [r3, r2]
 800bcd4:	0019      	movs	r1, r3
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	08db      	lsrs	r3, r3, #3
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	08d2      	lsrs	r2, r2, #3
 800bcde:	4353      	muls	r3, r2
 800bce0:	0b5b      	lsrs	r3, r3, #13
 800bce2:	434b      	muls	r3, r1
 800bce4:	131b      	asrs	r3, r3, #12
 800bce6:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	089b      	lsrs	r3, r3, #2
 800bcec:	001a      	movs	r2, r3
 800bcee:	4b13      	ldr	r3, [pc, #76]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bcf0:	2114      	movs	r1, #20
 800bcf2:	5e5b      	ldrsh	r3, [r3, r1]
 800bcf4:	4353      	muls	r3, r2
 800bcf6:	135b      	asrs	r3, r3, #13
 800bcf8:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	18d3      	adds	r3, r2, r3
 800bd00:	4a0e      	ldr	r2, [pc, #56]	@ (800bd3c <BMP280_calc_pressure+0x14c>)
 800bd02:	2112      	movs	r1, #18
 800bd04:	5e52      	ldrsh	r2, [r2, r1]
 800bd06:	189b      	adds	r3, r3, r2
 800bd08:	111a      	asrs	r2, r3, #4
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	18d3      	adds	r3, r2, r3
 800bd0e:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800bd10:	6978      	ldr	r0, [r7, #20]
 800bd12:	f7f5 fdd9 	bl	80018c8 <__aeabi_ui2f>
 800bd16:	1c03      	adds	r3, r0, #0
 800bd18:	490a      	ldr	r1, [pc, #40]	@ (800bd44 <BMP280_calc_pressure+0x154>)
 800bd1a:	1c18      	adds	r0, r3, #0
 800bd1c:	f7f4 ffc2 	bl	8000ca4 <__aeabi_fdiv>
 800bd20:	1c03      	adds	r3, r0, #0
 800bd22:	607b      	str	r3, [r7, #4]
  return airhPa;
 800bd24:	687b      	ldr	r3, [r7, #4]
}
 800bd26:	1c18      	adds	r0, r3, #0
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	b006      	add	sp, #24
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	20000f30 	.word	0x20000f30
 800bd34:	20000f20 	.word	0x20000f20
 800bd38:	ffff0600 	.word	0xffff0600
 800bd3c:	20000f08 	.word	0x20000f08
 800bd40:	00000c35 	.word	0x00000c35
 800bd44:	42c80000 	.word	0x42c80000

0800bd48 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800bd48:	b5b0      	push	{r4, r5, r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800bd4e:	4b8e      	ldr	r3, [pc, #568]	@ (800bf88 <BMP_Upkeep+0x240>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	0018      	movs	r0, r3
 800bd54:	f007 ffd2 	bl	8013cfc <TimestampIsReached>
 800bd58:	0003      	movs	r3, r0
 800bd5a:	001a      	movs	r2, r3
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	4053      	eors	r3, r2
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <BMP_Upkeep+0x24>
    return BMPState;
 800bd66:	4b89      	ldr	r3, [pc, #548]	@ (800bf8c <BMP_Upkeep+0x244>)
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	e109      	b.n	800bf80 <BMP_Upkeep+0x238>
  }
  switch(BMPState) {
 800bd6c:	4b87      	ldr	r3, [pc, #540]	@ (800bf8c <BMP_Upkeep+0x244>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d100      	bne.n	800bd76 <BMP_Upkeep+0x2e>
 800bd74:	e0f2      	b.n	800bf5c <BMP_Upkeep+0x214>
 800bd76:	dd00      	ble.n	800bd7a <BMP_Upkeep+0x32>
 800bd78:	e0f4      	b.n	800bf64 <BMP_Upkeep+0x21c>
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <BMP_Upkeep+0x3e>
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d100      	bne.n	800bd84 <BMP_Upkeep+0x3c>
 800bd82:	e092      	b.n	800beaa <BMP_Upkeep+0x162>
 800bd84:	e0ee      	b.n	800bf64 <BMP_Upkeep+0x21c>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bd86:	f002 f829 	bl	800dddc <getSensorLock>
 800bd8a:	1e03      	subs	r3, r0, #0
 800bd8c:	d005      	beq.n	800bd9a <BMP_Upkeep+0x52>
 800bd8e:	f002 f825 	bl	800dddc <getSensorLock>
 800bd92:	0003      	movs	r3, r0
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d000      	beq.n	800bd9a <BMP_Upkeep+0x52>
 800bd98:	e07f      	b.n	800be9a <BMP_Upkeep+0x152>
      if (getSensorLock() == FREE) {
 800bd9a:	f002 f81f 	bl	800dddc <getSensorLock>
 800bd9e:	1e03      	subs	r3, r0, #0
 800bda0:	d102      	bne.n	800bda8 <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800bda2:	2003      	movs	r0, #3
 800bda4:	f002 f806 	bl	800ddb4 <setSensorLock>
      }
      bmperror = false;
 800bda8:	4b79      	ldr	r3, [pc, #484]	@ (800bf90 <BMP_Upkeep+0x248>)
 800bdaa:	2200      	movs	r2, #0
 800bdac:	701a      	strb	r2, [r3, #0]
      bool changed = false;
 800bdae:	240f      	movs	r4, #15
 800bdb0:	193b      	adds	r3, r7, r4
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800bdb6:	f7ff fe6d 	bl	800ba94 <BMP280_get_mode>
 800bdba:	0003      	movs	r3, r0
 800bdbc:	001a      	movs	r2, r3
 800bdbe:	4b75      	ldr	r3, [pc, #468]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800bdc0:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bdc2:	4b74      	ldr	r3, [pc, #464]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2203      	movs	r2, #3
 800bdc8:	4013      	ands	r3, r2
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	4b71      	ldr	r3, [pc, #452]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800bdce:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bdd0:	f7fd ff06 	bl	8009be0 <Check_USB_PowerOn>
 800bdd4:	1e03      	subs	r3, r0, #0
 800bdd6:	d010      	beq.n	800bdfa <BMP_Upkeep+0xb2>
        if (mode != BMP280_NORMAL_MODE) {
 800bdd8:	4b6e      	ldr	r3, [pc, #440]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d02d      	beq.n	800be3c <BMP_Upkeep+0xf4>
          mode =BMP280_NORMAL_MODE;
 800bde0:	4b6c      	ldr	r3, [pc, #432]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800bde2:	2203      	movs	r2, #3
 800bde4:	701a      	strb	r2, [r3, #0]
          changed = true;
 800bde6:	193b      	adds	r3, r7, r4
 800bde8:	2201      	movs	r2, #1
 800bdea:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800bdec:	4a6a      	ldr	r2, [pc, #424]	@ (800bf98 <BMP_Upkeep+0x250>)
 800bdee:	4b6b      	ldr	r3, [pc, #428]	@ (800bf9c <BMP_Upkeep+0x254>)
 800bdf0:	0019      	movs	r1, r3
 800bdf2:	2002      	movs	r0, #2
 800bdf4:	f007 ffd8 	bl	8013da8 <CreateLine>
 800bdf8:	e020      	b.n	800be3c <BMP_Upkeep+0xf4>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800bdfa:	4b66      	ldr	r3, [pc, #408]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d007      	beq.n	800be12 <BMP_Upkeep+0xca>
 800be02:	4b64      	ldr	r3, [pc, #400]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d003      	beq.n	800be12 <BMP_Upkeep+0xca>
 800be0a:	4b62      	ldr	r3, [pc, #392]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2bff      	cmp	r3, #255	@ 0xff
 800be10:	d114      	bne.n	800be3c <BMP_Upkeep+0xf4>
          changed = true;
 800be12:	230f      	movs	r3, #15
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	2201      	movs	r2, #1
 800be18:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800be1a:	4b5e      	ldr	r3, [pc, #376]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800be1c:	2201      	movs	r2, #1
 800be1e:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800be20:	4b5c      	ldr	r3, [pc, #368]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b03      	cmp	r3, #3
 800be26:	d003      	beq.n	800be30 <BMP_Upkeep+0xe8>
 800be28:	4b5a      	ldr	r3, [pc, #360]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2bff      	cmp	r3, #255	@ 0xff
 800be2e:	d105      	bne.n	800be3c <BMP_Upkeep+0xf4>
           Info("BMP280 modus changed to forced");
 800be30:	4a5b      	ldr	r2, [pc, #364]	@ (800bfa0 <BMP_Upkeep+0x258>)
 800be32:	4b5a      	ldr	r3, [pc, #360]	@ (800bf9c <BMP_Upkeep+0x254>)
 800be34:	0019      	movs	r1, r3
 800be36:	2002      	movs	r0, #2
 800be38:	f007 ffb6 	bl	8013da8 <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800be3c:	230f      	movs	r3, #15
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d103      	bne.n	800be4e <BMP_Upkeep+0x106>
 800be46:	4b53      	ldr	r3, [pc, #332]	@ (800bf94 <BMP_Upkeep+0x24c>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d105      	bne.n	800be5a <BMP_Upkeep+0x112>
        BMP280_set_mode();
 800be4e:	f7ff fe43 	bl	800bad8 <BMP280_set_mode>
        changed = false;
 800be52:	230f      	movs	r3, #15
 800be54:	18fb      	adds	r3, r7, r3
 800be56:	2200      	movs	r2, #0
 800be58:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800be5a:	f7ff fd65 	bl	800b928 <BMP280_get_measurement_values>
 800be5e:	1e03      	subs	r3, r0, #0
 800be60:	d003      	beq.n	800be6a <BMP_Upkeep+0x122>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800be62:	4b4a      	ldr	r3, [pc, #296]	@ (800bf8c <BMP_Upkeep+0x244>)
 800be64:	2201      	movs	r2, #1
 800be66:	701a      	strb	r2, [r3, #0]
 800be68:	e012      	b.n	800be90 <BMP_Upkeep+0x148>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800be6a:	4a4e      	ldr	r2, [pc, #312]	@ (800bfa4 <BMP_Upkeep+0x25c>)
 800be6c:	4b4e      	ldr	r3, [pc, #312]	@ (800bfa8 <BMP_Upkeep+0x260>)
 800be6e:	0019      	movs	r1, r3
 800be70:	2001      	movs	r0, #1
 800be72:	f007 ff99 	bl	8013da8 <CreateLine>
        bmperror = true;
 800be76:	4b46      	ldr	r3, [pc, #280]	@ (800bf90 <BMP_Upkeep+0x248>)
 800be78:	2201      	movs	r2, #1
 800be7a:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800be7c:	f008 fd20 	bl	80148c0 <HAL_GetTick>
 800be80:	0003      	movs	r3, r0
 800be82:	4a4a      	ldr	r2, [pc, #296]	@ (800bfac <BMP_Upkeep+0x264>)
 800be84:	189a      	adds	r2, r3, r2
 800be86:	4b40      	ldr	r3, [pc, #256]	@ (800bf88 <BMP_Upkeep+0x240>)
 800be88:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800be8a:	4b40      	ldr	r3, [pc, #256]	@ (800bf8c <BMP_Upkeep+0x244>)
 800be8c:	2202      	movs	r2, #2
 800be8e:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800be90:	2000      	movs	r0, #0
 800be92:	f001 ff8f 	bl	800ddb4 <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800be96:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800be98:	e070      	b.n	800bf7c <BMP_Upkeep+0x234>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800be9a:	f008 fd11 	bl	80148c0 <HAL_GetTick>
 800be9e:	0003      	movs	r3, r0
 800bea0:	3361      	adds	r3, #97	@ 0x61
 800bea2:	001a      	movs	r2, r3
 800bea4:	4b38      	ldr	r3, [pc, #224]	@ (800bf88 <BMP_Upkeep+0x240>)
 800bea6:	601a      	str	r2, [r3, #0]
    break;
 800bea8:	e068      	b.n	800bf7c <BMP_Upkeep+0x234>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800beaa:	f7ff fe59 	bl	800bb60 <BMP280_calc_temperature>
 800beae:	1c03      	adds	r3, r0, #0
 800beb0:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800beb2:	f7ff fe9d 	bl	800bbf0 <BMP280_calc_pressure>
 800beb6:	1c03      	adds	r3, r0, #0
 800beb8:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7f7 fcea 	bl	8003894 <__aeabi_f2d>
 800bec0:	0004      	movs	r4, r0
 800bec2:	000d      	movs	r5, r1
 800bec4:	68b8      	ldr	r0, [r7, #8]
 800bec6:	f7f7 fce5 	bl	8003894 <__aeabi_f2d>
 800beca:	0002      	movs	r2, r0
 800becc:	000b      	movs	r3, r1
 800bece:	4838      	ldr	r0, [pc, #224]	@ (800bfb0 <BMP_Upkeep+0x268>)
 800bed0:	4932      	ldr	r1, [pc, #200]	@ (800bf9c <BMP_Upkeep+0x254>)
 800bed2:	9202      	str	r2, [sp, #8]
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	9400      	str	r4, [sp, #0]
 800bed8:	9501      	str	r5, [sp, #4]
 800beda:	0002      	movs	r2, r0
 800bedc:	2002      	movs	r0, #2
 800bede:	f007 ff63 	bl	8013da8 <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bee2:	4934      	ldr	r1, [pc, #208]	@ (800bfb4 <BMP_Upkeep+0x26c>)
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7f4 fb37 	bl	8000558 <__aeabi_fcmpgt>
 800beea:	1e03      	subs	r3, r0, #0
 800beec:	d022      	beq.n	800bf34 <BMP_Upkeep+0x1ec>
 800beee:	4932      	ldr	r1, [pc, #200]	@ (800bfb8 <BMP_Upkeep+0x270>)
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7f4 fb1d 	bl	8000530 <__aeabi_fcmplt>
 800bef6:	1e03      	subs	r3, r0, #0
 800bef8:	d01c      	beq.n	800bf34 <BMP_Upkeep+0x1ec>
      setBMP280(airtemp, airhpa);
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	1c11      	adds	r1, r2, #0
 800bf00:	1c18      	adds	r0, r3, #0
 800bf02:	f7f8 fdfb 	bl	8004afc <setBMP280>
      if (Check_USB_PowerOn()) {
 800bf06:	f7fd fe6b 	bl	8009be0 <Check_USB_PowerOn>
 800bf0a:	1e03      	subs	r3, r0, #0
 800bf0c:	d00a      	beq.n	800bf24 <BMP_Upkeep+0x1dc>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800bf0e:	f008 fcd7 	bl	80148c0 <HAL_GetTick>
 800bf12:	0003      	movs	r3, r0
 800bf14:	4a29      	ldr	r2, [pc, #164]	@ (800bfbc <BMP_Upkeep+0x274>)
 800bf16:	189a      	adds	r2, r3, r2
 800bf18:	4b1b      	ldr	r3, [pc, #108]	@ (800bf88 <BMP_Upkeep+0x240>)
 800bf1a:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800bf1c:	4b28      	ldr	r3, [pc, #160]	@ (800bfc0 <BMP_Upkeep+0x278>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf22:	e017      	b.n	800bf54 <BMP_Upkeep+0x20c>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800bf24:	f008 fccc 	bl	80148c0 <HAL_GetTick>
 800bf28:	0003      	movs	r3, r0
 800bf2a:	4a26      	ldr	r2, [pc, #152]	@ (800bfc4 <BMP_Upkeep+0x27c>)
 800bf2c:	189a      	adds	r2, r3, r2
 800bf2e:	4b16      	ldr	r3, [pc, #88]	@ (800bf88 <BMP_Upkeep+0x240>)
 800bf30:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bf32:	e00f      	b.n	800bf54 <BMP_Upkeep+0x20c>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800bf34:	4a24      	ldr	r2, [pc, #144]	@ (800bfc8 <BMP_Upkeep+0x280>)
 800bf36:	4b1c      	ldr	r3, [pc, #112]	@ (800bfa8 <BMP_Upkeep+0x260>)
 800bf38:	0019      	movs	r1, r3
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	f007 ff34 	bl	8013da8 <CreateLine>
      bmperror = true;
 800bf40:	4b13      	ldr	r3, [pc, #76]	@ (800bf90 <BMP_Upkeep+0x248>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 5000;
 800bf46:	f008 fcbb 	bl	80148c0 <HAL_GetTick>
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	4a17      	ldr	r2, [pc, #92]	@ (800bfac <BMP_Upkeep+0x264>)
 800bf4e:	189a      	adds	r2, r3, r2
 800bf50:	4b0d      	ldr	r3, [pc, #52]	@ (800bf88 <BMP_Upkeep+0x240>)
 800bf52:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800bf54:	4b0d      	ldr	r3, [pc, #52]	@ (800bf8c <BMP_Upkeep+0x244>)
 800bf56:	2202      	movs	r2, #2
 800bf58:	701a      	strb	r2, [r3, #0]
    break;
 800bf5a:	e00f      	b.n	800bf7c <BMP_Upkeep+0x234>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800bf5c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf8c <BMP_Upkeep+0x244>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
    break;
 800bf62:	e00b      	b.n	800bf7c <BMP_Upkeep+0x234>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800bf64:	4b09      	ldr	r3, [pc, #36]	@ (800bf8c <BMP_Upkeep+0x244>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800bf6a:	f001 ff37 	bl	800dddc <getSensorLock>
 800bf6e:	0003      	movs	r3, r0
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d102      	bne.n	800bf7a <BMP_Upkeep+0x232>
      setSensorLock(FREE);
 800bf74:	2000      	movs	r0, #0
 800bf76:	f001 ff1d 	bl	800ddb4 <setSensorLock>
    }
    break;
 800bf7a:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800bf7c:	4b03      	ldr	r3, [pc, #12]	@ (800bf8c <BMP_Upkeep+0x244>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
}
 800bf80:	0018      	movs	r0, r3
 800bf82:	46bd      	mov	sp, r7
 800bf84:	b004      	add	sp, #16
 800bf86:	bdb0      	pop	{r4, r5, r7, pc}
 800bf88:	20000f24 	.word	0x20000f24
 800bf8c:	20000f29 	.word	0x20000f29
 800bf90:	20000f2a 	.word	0x20000f2a
 800bf94:	200000a1 	.word	0x200000a1
 800bf98:	0802c614 	.word	0x0802c614
 800bf9c:	0802c424 	.word	0x0802c424
 800bfa0:	0802c634 	.word	0x0802c634
 800bfa4:	0802c654 	.word	0x0802c654
 800bfa8:	0802c47c 	.word	0x0802c47c
 800bfac:	00001388 	.word	0x00001388
 800bfb0:	0802c68c 	.word	0x0802c68c
 800bfb4:	44548000 	.word	0x44548000
 800bfb8:	44898000 	.word	0x44898000
 800bfbc:	00006d60 	.word	0x00006d60
 800bfc0:	20000f28 	.word	0x20000f28
 800bfc4:	00002710 	.word	0x00002710
 800bfc8:	0802c6c8 	.word	0x0802c6c8

0800bfcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bfd2:	4b10      	ldr	r3, [pc, #64]	@ (800c014 <MX_DMA_Init+0x48>)
 800bfd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfd6:	4b0f      	ldr	r3, [pc, #60]	@ (800c014 <MX_DMA_Init+0x48>)
 800bfd8:	2101      	movs	r1, #1
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	631a      	str	r2, [r3, #48]	@ 0x30
 800bfde:	4b0d      	ldr	r3, [pc, #52]	@ (800c014 <MX_DMA_Init+0x48>)
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	607b      	str	r3, [r7, #4]
 800bfe8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800bfea:	2200      	movs	r2, #0
 800bfec:	2100      	movs	r1, #0
 800bfee:	200a      	movs	r0, #10
 800bff0:	f009 f8da 	bl	80151a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800bff4:	200a      	movs	r0, #10
 800bff6:	f009 f8ec 	bl	80151d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800bffa:	2200      	movs	r2, #0
 800bffc:	2103      	movs	r1, #3
 800bffe:	200b      	movs	r0, #11
 800c000:	f009 f8d2 	bl	80151a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c004:	200b      	movs	r0, #11
 800c006:	f009 f8e4 	bl	80151d2 <HAL_NVIC_EnableIRQ>

}
 800c00a:	46c0      	nop			@ (mov r8, r8)
 800c00c:	46bd      	mov	sp, r7
 800c00e:	b002      	add	sp, #8
 800c010:	bd80      	pop	{r7, pc}
 800c012:	46c0      	nop			@ (mov r8, r8)
 800c014:	40021000 	.word	0x40021000

0800c018 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	1dbb      	adds	r3, r7, #6
 800c024:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c026:	4b1b      	ldr	r3, [pc, #108]	@ (800c094 <WriteUint8ArrayEeprom+0x7c>)
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c02c:	4b1a      	ldr	r3, [pc, #104]	@ (800c098 <WriteUint8ArrayEeprom+0x80>)
 800c02e:	2280      	movs	r2, #128	@ 0x80
 800c030:	0052      	lsls	r2, r2, #1
 800c032:	619a      	str	r2, [r3, #24]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c034:	f009 fc50 	bl	80158d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_Delay(3);
 800c038:	2003      	movs	r0, #3
 800c03a:	f008 fc4b 	bl	80148d4 <HAL_Delay>
    for (uint16_t i = 0; i < size; i++)
 800c03e:	2316      	movs	r3, #22
 800c040:	18fb      	adds	r3, r7, r3
 800c042:	2200      	movs	r2, #0
 800c044:	801a      	strh	r2, [r3, #0]
 800c046:	e015      	b.n	800c074 <WriteUint8ArrayEeprom+0x5c>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c048:	4b12      	ldr	r3, [pc, #72]	@ (800c094 <WriteUint8ArrayEeprom+0x7c>)
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	2416      	movs	r4, #22
 800c04e:	193b      	adds	r3, r7, r4
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	18d3      	adds	r3, r2, r3
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	001a      	movs	r2, r3
 800c05a:	2000      	movs	r0, #0
 800c05c:	f009 fca4 	bl	80159a8 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c060:	4b0c      	ldr	r3, [pc, #48]	@ (800c094 <WriteUint8ArrayEeprom+0x7c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	4b0b      	ldr	r3, [pc, #44]	@ (800c094 <WriteUint8ArrayEeprom+0x7c>)
 800c068:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c06a:	193b      	adds	r3, r7, r4
 800c06c:	881a      	ldrh	r2, [r3, #0]
 800c06e:	193b      	adds	r3, r7, r4
 800c070:	3201      	adds	r2, #1
 800c072:	801a      	strh	r2, [r3, #0]
 800c074:	2316      	movs	r3, #22
 800c076:	18fa      	adds	r2, r7, r3
 800c078:	1dbb      	adds	r3, r7, #6
 800c07a:	8812      	ldrh	r2, [r2, #0]
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d3e2      	bcc.n	800c048 <WriteUint8ArrayEeprom+0x30>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c082:	f009 fc57 	bl	8015934 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c086:	4b03      	ldr	r3, [pc, #12]	@ (800c094 <WriteUint8ArrayEeprom+0x7c>)
 800c088:	681b      	ldr	r3, [r3, #0]
}
 800c08a:	0018      	movs	r0, r3
 800c08c:	46bd      	mov	sp, r7
 800c08e:	b007      	add	sp, #28
 800c090:	bd90      	pop	{r4, r7, pc}
 800c092:	46c0      	nop			@ (mov r8, r8)
 800c094:	20000f34 	.word	0x20000f34
 800c098:	40022000 	.word	0x40022000

0800c09c <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	0019      	movs	r1, r3
 800c0a8:	1dbb      	adds	r3, r7, #6
 800c0aa:	801a      	strh	r2, [r3, #0]
 800c0ac:	1d3b      	adds	r3, r7, #4
 800c0ae:	1c0a      	adds	r2, r1, #0
 800c0b0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c0b2:	1dba      	adds	r2, r7, #6
 800c0b4:	1d3b      	adds	r3, r7, #4
 800c0b6:	8812      	ldrh	r2, [r2, #0]
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d806      	bhi.n	800c0cc <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c0be:	1dbb      	adds	r3, r7, #6
 800c0c0:	881a      	ldrh	r2, [r3, #0]
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f7ff ffa6 	bl	800c018 <WriteUint8ArrayEeprom>
    }
}
 800c0cc:	46c0      	nop			@ (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b004      	add	sp, #16
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	1dbb      	adds	r3, r7, #6
 800c0e0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	18fb      	adds	r3, r7, r3
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	801a      	strh	r2, [r3, #0]
 800c0ea:	e010      	b.n	800c10e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c0ec:	2016      	movs	r0, #22
 800c0ee:	183b      	adds	r3, r7, r0
 800c0f0:	881a      	ldrh	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	18d3      	adds	r3, r2, r3
 800c0f6:	0019      	movs	r1, r3
 800c0f8:	183b      	adds	r3, r7, r0
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	18d3      	adds	r3, r2, r3
 800c100:	780a      	ldrb	r2, [r1, #0]
 800c102:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c104:	183b      	adds	r3, r7, r0
 800c106:	881a      	ldrh	r2, [r3, #0]
 800c108:	183b      	adds	r3, r7, r0
 800c10a:	3201      	adds	r2, #1
 800c10c:	801a      	strh	r2, [r3, #0]
 800c10e:	2316      	movs	r3, #22
 800c110:	18fa      	adds	r2, r7, r3
 800c112:	1dbb      	adds	r3, r7, #6
 800c114:	8812      	ldrh	r2, [r2, #0]
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d3e7      	bcc.n	800c0ec <ReadUint8ArrayEEprom+0x18>
    }
}
 800c11c:	46c0      	nop			@ (mov r8, r8)
 800c11e:	46c0      	nop			@ (mov r8, r8)
 800c120:	46bd      	mov	sp, r7
 800c122:	b006      	add	sp, #24
 800c124:	bd80      	pop	{r7, pc}

0800c126 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c126:	b590      	push	{r4, r7, lr}
 800c128:	b085      	sub	sp, #20
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	000a      	movs	r2, r1
 800c130:	1cbb      	adds	r3, r7, #2
 800c132:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c134:	f009 fbd0 	bl	80158d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c138:	230e      	movs	r3, #14
 800c13a:	18fb      	adds	r3, r7, r3
 800c13c:	2200      	movs	r2, #0
 800c13e:	801a      	strh	r2, [r3, #0]
 800c140:	e00c      	b.n	800c15c <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c142:	240e      	movs	r4, #14
 800c144:	193b      	adds	r3, r7, r4
 800c146:	881a      	ldrh	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	18d3      	adds	r3, r2, r3
 800c14c:	0018      	movs	r0, r3
 800c14e:	f009 fbff 	bl	8015950 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c152:	193b      	adds	r3, r7, r4
 800c154:	193a      	adds	r2, r7, r4
 800c156:	8812      	ldrh	r2, [r2, #0]
 800c158:	3204      	adds	r2, #4
 800c15a:	801a      	strh	r2, [r3, #0]
 800c15c:	230e      	movs	r3, #14
 800c15e:	18fa      	adds	r2, r7, r3
 800c160:	1cbb      	adds	r3, r7, #2
 800c162:	8812      	ldrh	r2, [r2, #0]
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	429a      	cmp	r2, r3
 800c168:	d3eb      	bcc.n	800c142 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c16a:	f009 fbe3 	bl	8015934 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c16e:	46c0      	nop			@ (mov r8, r8)
 800c170:	46bd      	mov	sp, r7
 800c172:	b005      	add	sp, #20
 800c174:	bd90      	pop	{r4, r7, pc}
	...

0800c178 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b7f      	cmp	r3, #127	@ 0x7f
 800c188:	d901      	bls.n	800c18e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c18a:	237f      	movs	r3, #127	@ 0x7f
 800c18c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c18e:	2017      	movs	r0, #23
 800c190:	183b      	adds	r3, r7, r0
 800c192:	490d      	ldr	r1, [pc, #52]	@ (800c1c8 <accessLUT10log10+0x50>)
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	188a      	adds	r2, r1, r2
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c19c:	0001      	movs	r1, r0
 800c19e:	187b      	adds	r3, r7, r1
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2206      	movs	r2, #6
 800c1a4:	4113      	asrs	r3, r2
 800c1a6:	001a      	movs	r2, r3
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c1ac:	187b      	adds	r3, r7, r1
 800c1ae:	781a      	ldrb	r2, [r3, #0]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2106      	movs	r1, #6
 800c1b6:	408b      	lsls	r3, r1
 800c1b8:	1ad2      	subs	r2, r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	601a      	str	r2, [r3, #0]
}
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b006      	add	sp, #24
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	46c0      	nop			@ (mov r8, r8)
 800c1c8:	0802e444 	.word	0x0802e444

0800c1cc <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c1cc:	b5b0      	push	{r4, r5, r7, lr}
 800c1ce:	b090      	sub	sp, #64	@ 0x40
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6138      	str	r0, [r7, #16]
 800c1d4:	6179      	str	r1, [r7, #20]
 800c1d6:	60fa      	str	r2, [r7, #12]
 800c1d8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c1da:	2308      	movs	r3, #8
 800c1dc:	001a      	movs	r2, r3
 800c1de:	3a20      	subs	r2, #32
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	db03      	blt.n	800c1ec <efficient10log10+0x20>
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	4091      	lsls	r1, r2
 800c1e8:	000d      	movs	r5, r1
 800c1ea:	e008      	b.n	800c1fe <efficient10log10+0x32>
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	40d1      	lsrs	r1, r2
 800c1f4:	000a      	movs	r2, r1
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	4099      	lsls	r1, r3
 800c1fa:	000d      	movs	r5, r1
 800c1fc:	4315      	orrs	r5, r2
 800c1fe:	2201      	movs	r2, #1
 800c200:	409a      	lsls	r2, r3
 800c202:	0014      	movs	r4, r2
 800c204:	2201      	movs	r2, #1
 800c206:	4252      	negs	r2, r2
 800c208:	17d3      	asrs	r3, r2, #31
 800c20a:	1912      	adds	r2, r2, r4
 800c20c:	416b      	adcs	r3, r5
 800c20e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c210:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c212:	2336      	movs	r3, #54	@ 0x36
 800c214:	2208      	movs	r2, #8
 800c216:	189b      	adds	r3, r3, r2
 800c218:	19db      	adds	r3, r3, r7
 800c21a:	2200      	movs	r2, #0
 800c21c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c21e:	e017      	b.n	800c250 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	07db      	lsls	r3, r3, #31
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	0852      	lsrs	r2, r2, #1
 800c228:	603a      	str	r2, [r7, #0]
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	431a      	orrs	r2, r3
 800c22e:	603a      	str	r2, [r7, #0]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	085b      	lsrs	r3, r3, #1
 800c234:	607b      	str	r3, [r7, #4]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	687c      	ldr	r4, [r7, #4]
 800c23a:	613b      	str	r3, [r7, #16]
 800c23c:	617c      	str	r4, [r7, #20]
        bShift++;
 800c23e:	2136      	movs	r1, #54	@ 0x36
 800c240:	2008      	movs	r0, #8
 800c242:	180b      	adds	r3, r1, r0
 800c244:	19db      	adds	r3, r3, r7
 800c246:	881a      	ldrh	r2, [r3, #0]
 800c248:	180b      	adds	r3, r1, r0
 800c24a:	19db      	adds	r3, r3, r7
 800c24c:	3201      	adds	r2, #1
 800c24e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c254:	429a      	cmp	r2, r3
 800c256:	d8e3      	bhi.n	800c220 <efficient10log10+0x54>
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d103      	bne.n	800c268 <efficient10log10+0x9c>
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	429a      	cmp	r2, r3
 800c266:	d8db      	bhi.n	800c220 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	2308      	movs	r3, #8
 800c26c:	3b01      	subs	r3, #1
 800c26e:	2101      	movs	r1, #1
 800c270:	4099      	lsls	r1, r3
 800c272:	000b      	movs	r3, r1
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c280:	231c      	movs	r3, #28
 800c282:	2408      	movs	r4, #8
 800c284:	191b      	adds	r3, r3, r4
 800c286:	19da      	adds	r2, r3, r7
 800c288:	2320      	movs	r3, #32
 800c28a:	191b      	adds	r3, r3, r4
 800c28c:	19d9      	adds	r1, r3, r7
 800c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c290:	0018      	movs	r0, r3
 800c292:	f7ff ff71 	bl	800c178 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c296:	2215      	movs	r2, #21
 800c298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c29c:	2036      	movs	r0, #54	@ 0x36
 800c29e:	1902      	adds	r2, r0, r4
 800c2a0:	19d2      	adds	r2, r2, r7
 800c2a2:	8812      	ldrh	r2, [r2, #0]
 800c2a4:	2103      	movs	r1, #3
 800c2a6:	434a      	muls	r2, r1
 800c2a8:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c2aa:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c2ac:	0021      	movs	r1, r4
 800c2ae:	1843      	adds	r3, r0, r1
 800c2b0:	19db      	adds	r3, r3, r7
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	4353      	muls	r3, r2
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	4113      	asrs	r3, r2
 800c2bc:	001a      	movs	r2, r3
 800c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c2c2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c2c4:	2314      	movs	r3, #20
 800c2c6:	185b      	adds	r3, r3, r1
 800c2c8:	19da      	adds	r2, r3, r7
 800c2ca:	2318      	movs	r3, #24
 800c2cc:	185b      	adds	r3, r3, r1
 800c2ce:	19db      	adds	r3, r3, r7
 800c2d0:	0011      	movs	r1, r2
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	f000 f80a 	bl	800c2ec <correctIntFracNumber>
    integerPart[0] = intPart;
 800c2d8:	6a3a      	ldr	r2, [r7, #32]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c2de:	69fa      	ldr	r2, [r7, #28]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	601a      	str	r2, [r3, #0]
}
 800c2e4:	46c0      	nop			@ (mov r8, r8)
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b010      	add	sp, #64	@ 0x40
 800c2ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c2ec <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c2f6:	e00a      	b.n	800c30e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	1c5a      	adds	r2, r3, #1
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3b0a      	subs	r3, #10
 800c308:	001a      	movs	r2, r3
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b09      	cmp	r3, #9
 800c314:	dcf0      	bgt.n	800c2f8 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c316:	e00a      	b.n	800c32e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	1e5a      	subs	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	330a      	adds	r3, #10
 800c328:	001a      	movs	r2, r3
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3309      	adds	r3, #9
 800c334:	dbf0      	blt.n	800c318 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	da0f      	bge.n	800c35e <correctIntFracNumber+0x72>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	dd0b      	ble.n	800c35e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3b0a      	subs	r3, #10
 800c356:	001a      	movs	r2, r3
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c35c:	e012      	b.n	800c384 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	dd0e      	ble.n	800c384 <correctIntFracNumber+0x98>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	da0a      	bge.n	800c384 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	330a      	adds	r3, #10
 800c37e:	001a      	movs	r2, r3
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	601a      	str	r2, [r3, #0]
}
 800c384:	46c0      	nop			@ (mov r8, r8)
 800c386:	46bd      	mov	sp, r7
 800c388:	b002      	add	sp, #8
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c38c:	b590      	push	{r4, r7, lr}
 800c38e:	b08b      	sub	sp, #44	@ 0x2c
 800c390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c392:	2414      	movs	r4, #20
 800c394:	193b      	adds	r3, r7, r4
 800c396:	0018      	movs	r0, r3
 800c398:	2314      	movs	r3, #20
 800c39a:	001a      	movs	r2, r3
 800c39c:	2100      	movs	r1, #0
 800c39e:	f01a f973 	bl	8026688 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3a2:	4b8a      	ldr	r3, [pc, #552]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a6:	4b89      	ldr	r3, [pc, #548]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3a8:	2104      	movs	r1, #4
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3ae:	4b87      	ldr	r3, [pc, #540]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b2:	2204      	movs	r2, #4
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
 800c3b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c3ba:	4b84      	ldr	r3, [pc, #528]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3be:	4b83      	ldr	r3, [pc, #524]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3c0:	2180      	movs	r1, #128	@ 0x80
 800c3c2:	430a      	orrs	r2, r1
 800c3c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3c6:	4b81      	ldr	r3, [pc, #516]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ca:	2280      	movs	r2, #128	@ 0x80
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3d2:	4b7e      	ldr	r3, [pc, #504]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d6:	4b7d      	ldr	r3, [pc, #500]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3d8:	2101      	movs	r1, #1
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3de:	4b7b      	ldr	r3, [pc, #492]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	4013      	ands	r3, r2
 800c3e6:	60bb      	str	r3, [r7, #8]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c3ea:	4b78      	ldr	r3, [pc, #480]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ee:	4b77      	ldr	r3, [pc, #476]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3f0:	2102      	movs	r1, #2
 800c3f2:	430a      	orrs	r2, r1
 800c3f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3f6:	4b75      	ldr	r3, [pc, #468]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	607b      	str	r3, [r7, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c402:	4b72      	ldr	r3, [pc, #456]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c406:	4b71      	ldr	r3, [pc, #452]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c408:	2108      	movs	r1, #8
 800c40a:	430a      	orrs	r2, r1
 800c40c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c40e:	4b6f      	ldr	r3, [pc, #444]	@ (800c5cc <MX_GPIO_Init+0x240>)
 800c410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c412:	2208      	movs	r2, #8
 800c414:	4013      	ands	r3, r2
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c41a:	4b6d      	ldr	r3, [pc, #436]	@ (800c5d0 <MX_GPIO_Init+0x244>)
 800c41c:	2201      	movs	r2, #1
 800c41e:	2101      	movs	r1, #1
 800c420:	0018      	movs	r0, r3
 800c422:	f009 fcb4 	bl	8015d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c426:	4b6a      	ldr	r3, [pc, #424]	@ (800c5d0 <MX_GPIO_Init+0x244>)
 800c428:	2200      	movs	r2, #0
 800c42a:	2102      	movs	r1, #2
 800c42c:	0018      	movs	r0, r3
 800c42e:	f009 fcae 	bl	8015d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c432:	4968      	ldr	r1, [pc, #416]	@ (800c5d4 <MX_GPIO_Init+0x248>)
 800c434:	4b68      	ldr	r3, [pc, #416]	@ (800c5d8 <MX_GPIO_Init+0x24c>)
 800c436:	2201      	movs	r2, #1
 800c438:	0018      	movs	r0, r3
 800c43a:	f009 fca8 	bl	8015d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c43e:	2380      	movs	r3, #128	@ 0x80
 800c440:	011b      	lsls	r3, r3, #4
 800c442:	4866      	ldr	r0, [pc, #408]	@ (800c5dc <MX_GPIO_Init+0x250>)
 800c444:	2201      	movs	r2, #1
 800c446:	0019      	movs	r1, r3
 800c448:	f009 fca1 	bl	8015d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c44c:	2380      	movs	r3, #128	@ 0x80
 800c44e:	015b      	lsls	r3, r3, #5
 800c450:	4862      	ldr	r0, [pc, #392]	@ (800c5dc <MX_GPIO_Init+0x250>)
 800c452:	2200      	movs	r2, #0
 800c454:	0019      	movs	r1, r3
 800c456:	f009 fc9a 	bl	8015d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c45a:	193b      	adds	r3, r7, r4
 800c45c:	4a60      	ldr	r2, [pc, #384]	@ (800c5e0 <MX_GPIO_Init+0x254>)
 800c45e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c460:	193b      	adds	r3, r7, r4
 800c462:	2203      	movs	r2, #3
 800c464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c466:	193b      	adds	r3, r7, r4
 800c468:	2200      	movs	r2, #0
 800c46a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c46c:	193b      	adds	r3, r7, r4
 800c46e:	4a5b      	ldr	r2, [pc, #364]	@ (800c5dc <MX_GPIO_Init+0x250>)
 800c470:	0019      	movs	r1, r3
 800c472:	0010      	movs	r0, r2
 800c474:	f009 faf0 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c478:	193b      	adds	r3, r7, r4
 800c47a:	2203      	movs	r2, #3
 800c47c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c47e:	193b      	adds	r3, r7, r4
 800c480:	2201      	movs	r2, #1
 800c482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c484:	193b      	adds	r3, r7, r4
 800c486:	2200      	movs	r2, #0
 800c488:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c48a:	193b      	adds	r3, r7, r4
 800c48c:	2200      	movs	r2, #0
 800c48e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c490:	193b      	adds	r3, r7, r4
 800c492:	4a4f      	ldr	r2, [pc, #316]	@ (800c5d0 <MX_GPIO_Init+0x244>)
 800c494:	0019      	movs	r1, r3
 800c496:	0010      	movs	r0, r2
 800c498:	f009 fade 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c49c:	193b      	adds	r3, r7, r4
 800c49e:	2270      	movs	r2, #112	@ 0x70
 800c4a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4a2:	193b      	adds	r3, r7, r4
 800c4a4:	2203      	movs	r2, #3
 800c4a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a8:	193b      	adds	r3, r7, r4
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4ae:	193a      	adds	r2, r7, r4
 800c4b0:	23a0      	movs	r3, #160	@ 0xa0
 800c4b2:	05db      	lsls	r3, r3, #23
 800c4b4:	0011      	movs	r1, r2
 800c4b6:	0018      	movs	r0, r3
 800c4b8:	f009 face 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c4bc:	193b      	adds	r3, r7, r4
 800c4be:	22c0      	movs	r2, #192	@ 0xc0
 800c4c0:	0052      	lsls	r2, r2, #1
 800c4c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4c4:	193b      	adds	r3, r7, r4
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ca:	193b      	adds	r3, r7, r4
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4d0:	193a      	adds	r2, r7, r4
 800c4d2:	23a0      	movs	r3, #160	@ 0xa0
 800c4d4:	05db      	lsls	r3, r3, #23
 800c4d6:	0011      	movs	r1, r2
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f009 fabd 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c4de:	193b      	adds	r3, r7, r4
 800c4e0:	4a3c      	ldr	r2, [pc, #240]	@ (800c5d4 <MX_GPIO_Init+0x248>)
 800c4e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4e4:	193b      	adds	r3, r7, r4
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ea:	193b      	adds	r3, r7, r4
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4f0:	193b      	adds	r3, r7, r4
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4f6:	193b      	adds	r3, r7, r4
 800c4f8:	4a37      	ldr	r2, [pc, #220]	@ (800c5d8 <MX_GPIO_Init+0x24c>)
 800c4fa:	0019      	movs	r1, r3
 800c4fc:	0010      	movs	r0, r2
 800c4fe:	f009 faab 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c502:	193b      	adds	r3, r7, r4
 800c504:	4a37      	ldr	r2, [pc, #220]	@ (800c5e4 <MX_GPIO_Init+0x258>)
 800c506:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c508:	193b      	adds	r3, r7, r4
 800c50a:	2203      	movs	r2, #3
 800c50c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c50e:	193b      	adds	r3, r7, r4
 800c510:	2200      	movs	r2, #0
 800c512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c514:	193b      	adds	r3, r7, r4
 800c516:	4a30      	ldr	r2, [pc, #192]	@ (800c5d8 <MX_GPIO_Init+0x24c>)
 800c518:	0019      	movs	r1, r3
 800c51a:	0010      	movs	r0, r2
 800c51c:	f009 fa9c 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c520:	0021      	movs	r1, r4
 800c522:	187b      	adds	r3, r7, r1
 800c524:	2280      	movs	r2, #128	@ 0x80
 800c526:	0092      	lsls	r2, r2, #2
 800c528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c52a:	000c      	movs	r4, r1
 800c52c:	193b      	adds	r3, r7, r4
 800c52e:	2200      	movs	r2, #0
 800c530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c532:	193b      	adds	r3, r7, r4
 800c534:	2200      	movs	r2, #0
 800c536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c538:	193b      	adds	r3, r7, r4
 800c53a:	4a28      	ldr	r2, [pc, #160]	@ (800c5dc <MX_GPIO_Init+0x250>)
 800c53c:	0019      	movs	r1, r3
 800c53e:	0010      	movs	r0, r2
 800c540:	f009 fa8a 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c544:	193b      	adds	r3, r7, r4
 800c546:	2280      	movs	r2, #128	@ 0x80
 800c548:	0212      	lsls	r2, r2, #8
 800c54a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c54c:	193b      	adds	r3, r7, r4
 800c54e:	2288      	movs	r2, #136	@ 0x88
 800c550:	0352      	lsls	r2, r2, #13
 800c552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c554:	193b      	adds	r3, r7, r4
 800c556:	2200      	movs	r2, #0
 800c558:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c55a:	193a      	adds	r2, r7, r4
 800c55c:	23a0      	movs	r3, #160	@ 0xa0
 800c55e:	05db      	lsls	r3, r3, #23
 800c560:	0011      	movs	r1, r2
 800c562:	0018      	movs	r0, r3
 800c564:	f009 fa78 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c568:	0021      	movs	r1, r4
 800c56a:	187b      	adds	r3, r7, r1
 800c56c:	22c0      	movs	r2, #192	@ 0xc0
 800c56e:	0152      	lsls	r2, r2, #5
 800c570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c572:	000c      	movs	r4, r1
 800c574:	193b      	adds	r3, r7, r4
 800c576:	2201      	movs	r2, #1
 800c578:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c57a:	193b      	adds	r3, r7, r4
 800c57c:	2200      	movs	r2, #0
 800c57e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c580:	193b      	adds	r3, r7, r4
 800c582:	2200      	movs	r2, #0
 800c584:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c586:	193b      	adds	r3, r7, r4
 800c588:	4a14      	ldr	r2, [pc, #80]	@ (800c5dc <MX_GPIO_Init+0x250>)
 800c58a:	0019      	movs	r1, r3
 800c58c:	0010      	movs	r0, r2
 800c58e:	f009 fa63 	bl	8015a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c592:	0021      	movs	r1, r4
 800c594:	187b      	adds	r3, r7, r1
 800c596:	2204      	movs	r2, #4
 800c598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c59a:	187b      	adds	r3, r7, r1
 800c59c:	2200      	movs	r2, #0
 800c59e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5a0:	187b      	adds	r3, r7, r1
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c5a6:	187b      	adds	r3, r7, r1
 800c5a8:	4a0f      	ldr	r2, [pc, #60]	@ (800c5e8 <MX_GPIO_Init+0x25c>)
 800c5aa:	0019      	movs	r1, r3
 800c5ac:	0010      	movs	r0, r2
 800c5ae:	f009 fa53 	bl	8015a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	2007      	movs	r0, #7
 800c5b8:	f008 fdf6 	bl	80151a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c5bc:	2007      	movs	r0, #7
 800c5be:	f008 fe08 	bl	80151d2 <HAL_NVIC_EnableIRQ>

}
 800c5c2:	46c0      	nop			@ (mov r8, r8)
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	b00b      	add	sp, #44	@ 0x2c
 800c5c8:	bd90      	pop	{r4, r7, pc}
 800c5ca:	46c0      	nop			@ (mov r8, r8)
 800c5cc:	40021000 	.word	0x40021000
 800c5d0:	50001c00 	.word	0x50001c00
 800c5d4:	00000301 	.word	0x00000301
 800c5d8:	50000400 	.word	0x50000400
 800c5dc:	50000800 	.word	0x50000800
 800c5e0:	0000200c 	.word	0x0000200c
 800c5e4:	0000403e 	.word	0x0000403e
 800c5e8:	50000c00 	.word	0x50000c00

0800c5ec <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	f010 fb46 	bl	801cc8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2108      	movs	r1, #8
 800c604:	0018      	movs	r0, r3
 800c606:	f010 fb41 	bl	801cc8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	210c      	movs	r1, #12
 800c60e:	0018      	movs	r0, r3
 800c610:	f010 fb3c 	bl	801cc8c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c614:	2380      	movs	r3, #128	@ 0x80
 800c616:	05db      	lsls	r3, r3, #23
 800c618:	22fa      	movs	r2, #250	@ 0xfa
 800c61a:	0112      	lsls	r2, r2, #4
 800c61c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c61e:	2380      	movs	r3, #128	@ 0x80
 800c620:	05db      	lsls	r3, r3, #23
 800c622:	22fa      	movs	r2, #250	@ 0xfa
 800c624:	0112      	lsls	r2, r2, #4
 800c626:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c628:	2380      	movs	r3, #128	@ 0x80
 800c62a:	05db      	lsls	r3, r3, #23
 800c62c:	22fa      	movs	r2, #250	@ 0xfa
 800c62e:	0112      	lsls	r2, r2, #4
 800c630:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c632:	2380      	movs	r3, #128	@ 0x80
 800c634:	05db      	lsls	r3, r3, #23
 800c636:	22fa      	movs	r2, #250	@ 0xfa
 800c638:	0112      	lsls	r2, r2, #4
 800c63a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2100      	movs	r1, #0
 800c640:	0018      	movs	r0, r3
 800c642:	f010 fb23 	bl	801cc8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2104      	movs	r1, #4
 800c64a:	0018      	movs	r0, r3
 800c64c:	f010 fb1e 	bl	801cc8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2108      	movs	r1, #8
 800c654:	0018      	movs	r0, r3
 800c656:	f010 fb19 	bl	801cc8c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c65a:	4b0a      	ldr	r3, [pc, #40]	@ (800c684 <GPIO_InitPWMLEDs+0x98>)
 800c65c:	22fa      	movs	r2, #250	@ 0xfa
 800c65e:	0112      	lsls	r2, r2, #4
 800c660:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c662:	4b08      	ldr	r3, [pc, #32]	@ (800c684 <GPIO_InitPWMLEDs+0x98>)
 800c664:	22fa      	movs	r2, #250	@ 0xfa
 800c666:	0112      	lsls	r2, r2, #4
 800c668:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c66a:	4b06      	ldr	r3, [pc, #24]	@ (800c684 <GPIO_InitPWMLEDs+0x98>)
 800c66c:	22fa      	movs	r2, #250	@ 0xfa
 800c66e:	0112      	lsls	r2, r2, #4
 800c670:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c672:	4b04      	ldr	r3, [pc, #16]	@ (800c684 <GPIO_InitPWMLEDs+0x98>)
 800c674:	22fa      	movs	r2, #250	@ 0xfa
 800c676:	0112      	lsls	r2, r2, #4
 800c678:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c67a:	46c0      	nop			@ (mov r8, r8)
 800c67c:	46bd      	mov	sp, r7
 800c67e:	b002      	add	sp, #8
 800c680:	bd80      	pop	{r7, pc}
 800c682:	46c0      	nop			@ (mov r8, r8)
 800c684:	40000400 	.word	0x40000400

0800c688 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c68c:	4b1b      	ldr	r3, [pc, #108]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c68e:	4a1c      	ldr	r2, [pc, #112]	@ (800c700 <MX_I2C1_Init+0x78>)
 800c690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c692:	4b1a      	ldr	r3, [pc, #104]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c694:	4a1b      	ldr	r2, [pc, #108]	@ (800c704 <MX_I2C1_Init+0x7c>)
 800c696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c698:	4b18      	ldr	r3, [pc, #96]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c69e:	4b17      	ldr	r3, [pc, #92]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c6a4:	4b15      	ldr	r3, [pc, #84]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c6aa:	4b14      	ldr	r3, [pc, #80]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c6b0:	4b12      	ldr	r3, [pc, #72]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c6b6:	4b11      	ldr	r3, [pc, #68]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c6c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6c4:	0018      	movs	r0, r3
 800c6c6:	f009 fb9b 	bl	8015e00 <HAL_I2C_Init>
 800c6ca:	1e03      	subs	r3, r0, #0
 800c6cc:	d001      	beq.n	800c6d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c6ce:	f000 fe59 	bl	800d384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	0018      	movs	r0, r3
 800c6d8:	f00c fb08 	bl	8018cec <HAL_I2CEx_ConfigAnalogFilter>
 800c6dc:	1e03      	subs	r3, r0, #0
 800c6de:	d001      	beq.n	800c6e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c6e0:	f000 fe50 	bl	800d384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c6e4:	4b05      	ldr	r3, [pc, #20]	@ (800c6fc <MX_I2C1_Init+0x74>)
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f00c fb4b 	bl	8018d84 <HAL_I2CEx_ConfigDigitalFilter>
 800c6ee:	1e03      	subs	r3, r0, #0
 800c6f0:	d001      	beq.n	800c6f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c6f2:	f000 fe47 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20000f38 	.word	0x20000f38
 800c700:	40005400 	.word	0x40005400
 800c704:	00503d58 	.word	0x00503d58

0800c708 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c70c:	4b1b      	ldr	r3, [pc, #108]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c70e:	4a1c      	ldr	r2, [pc, #112]	@ (800c780 <MX_I2C2_Init+0x78>)
 800c710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c712:	4b1a      	ldr	r3, [pc, #104]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c714:	4a1b      	ldr	r2, [pc, #108]	@ (800c784 <MX_I2C2_Init+0x7c>)
 800c716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c718:	4b18      	ldr	r3, [pc, #96]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c71e:	4b17      	ldr	r3, [pc, #92]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c720:	2201      	movs	r2, #1
 800c722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c724:	4b15      	ldr	r3, [pc, #84]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c726:	2200      	movs	r2, #0
 800c728:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c72a:	4b14      	ldr	r3, [pc, #80]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c730:	4b12      	ldr	r3, [pc, #72]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c732:	2200      	movs	r2, #0
 800c734:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c736:	4b11      	ldr	r3, [pc, #68]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c738:	2200      	movs	r2, #0
 800c73a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c73c:	4b0f      	ldr	r3, [pc, #60]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c73e:	2200      	movs	r2, #0
 800c740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c742:	4b0e      	ldr	r3, [pc, #56]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c744:	0018      	movs	r0, r3
 800c746:	f009 fb5b 	bl	8015e00 <HAL_I2C_Init>
 800c74a:	1e03      	subs	r3, r0, #0
 800c74c:	d001      	beq.n	800c752 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c74e:	f000 fe19 	bl	800d384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c752:	4b0a      	ldr	r3, [pc, #40]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c754:	2100      	movs	r1, #0
 800c756:	0018      	movs	r0, r3
 800c758:	f00c fac8 	bl	8018cec <HAL_I2CEx_ConfigAnalogFilter>
 800c75c:	1e03      	subs	r3, r0, #0
 800c75e:	d001      	beq.n	800c764 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c760:	f000 fe10 	bl	800d384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c764:	4b05      	ldr	r3, [pc, #20]	@ (800c77c <MX_I2C2_Init+0x74>)
 800c766:	2100      	movs	r1, #0
 800c768:	0018      	movs	r0, r3
 800c76a:	f00c fb0b 	bl	8018d84 <HAL_I2CEx_ConfigDigitalFilter>
 800c76e:	1e03      	subs	r3, r0, #0
 800c770:	d001      	beq.n	800c776 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c772:	f000 fe07 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c776:	46c0      	nop			@ (mov r8, r8)
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20000f8c 	.word	0x20000f8c
 800c780:	40005800 	.word	0x40005800
 800c784:	00503d58 	.word	0x00503d58

0800c788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c788:	b590      	push	{r4, r7, lr}
 800c78a:	b08b      	sub	sp, #44	@ 0x2c
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c790:	2414      	movs	r4, #20
 800c792:	193b      	adds	r3, r7, r4
 800c794:	0018      	movs	r0, r3
 800c796:	2314      	movs	r3, #20
 800c798:	001a      	movs	r2, r3
 800c79a:	2100      	movs	r1, #0
 800c79c:	f019 ff74 	bl	8026688 <memset>
  if(i2cHandle->Instance==I2C1)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a5d      	ldr	r2, [pc, #372]	@ (800c91c <HAL_I2C_MspInit+0x194>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d000      	beq.n	800c7ac <HAL_I2C_MspInit+0x24>
 800c7aa:	e083      	b.n	800c8b4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7b0:	4b5b      	ldr	r3, [pc, #364]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c7b2:	2102      	movs	r1, #2
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7b8:	4b59      	ldr	r3, [pc, #356]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7bc:	2202      	movs	r2, #2
 800c7be:	4013      	ands	r3, r2
 800c7c0:	613b      	str	r3, [r7, #16]
 800c7c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c7c4:	0021      	movs	r1, r4
 800c7c6:	187b      	adds	r3, r7, r1
 800c7c8:	22c0      	movs	r2, #192	@ 0xc0
 800c7ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c7cc:	187b      	adds	r3, r7, r1
 800c7ce:	2212      	movs	r2, #18
 800c7d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d2:	187b      	adds	r3, r7, r1
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7d8:	187b      	adds	r3, r7, r1
 800c7da:	2203      	movs	r2, #3
 800c7dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c7de:	187b      	adds	r3, r7, r1
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7e4:	187b      	adds	r3, r7, r1
 800c7e6:	4a4f      	ldr	r2, [pc, #316]	@ (800c924 <HAL_I2C_MspInit+0x19c>)
 800c7e8:	0019      	movs	r1, r3
 800c7ea:	0010      	movs	r0, r2
 800c7ec:	f009 f934 	bl	8015a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c7f0:	4b4b      	ldr	r3, [pc, #300]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c7f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7f4:	4b4a      	ldr	r3, [pc, #296]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c7f6:	2180      	movs	r1, #128	@ 0x80
 800c7f8:	0389      	lsls	r1, r1, #14
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c7fe:	4b4a      	ldr	r3, [pc, #296]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c800:	4a4a      	ldr	r2, [pc, #296]	@ (800c92c <HAL_I2C_MspInit+0x1a4>)
 800c802:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c804:	4b48      	ldr	r3, [pc, #288]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c806:	2206      	movs	r2, #6
 800c808:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c80a:	4b47      	ldr	r3, [pc, #284]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c810:	4b45      	ldr	r3, [pc, #276]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c812:	2200      	movs	r2, #0
 800c814:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c816:	4b44      	ldr	r3, [pc, #272]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c818:	2280      	movs	r2, #128	@ 0x80
 800c81a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c81c:	4b42      	ldr	r3, [pc, #264]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c81e:	2200      	movs	r2, #0
 800c820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c822:	4b41      	ldr	r3, [pc, #260]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c824:	2200      	movs	r2, #0
 800c826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c828:	4b3f      	ldr	r3, [pc, #252]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c82e:	4b3e      	ldr	r3, [pc, #248]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c830:	2200      	movs	r2, #0
 800c832:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c834:	4b3c      	ldr	r3, [pc, #240]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c836:	0018      	movs	r0, r3
 800c838:	f008 fce8 	bl	801520c <HAL_DMA_Init>
 800c83c:	1e03      	subs	r3, r0, #0
 800c83e:	d001      	beq.n	800c844 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c840:	f000 fda0 	bl	800d384 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a38      	ldr	r2, [pc, #224]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c848:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c84a:	4b37      	ldr	r3, [pc, #220]	@ (800c928 <HAL_I2C_MspInit+0x1a0>)
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c850:	4b37      	ldr	r3, [pc, #220]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c852:	4a38      	ldr	r2, [pc, #224]	@ (800c934 <HAL_I2C_MspInit+0x1ac>)
 800c854:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c856:	4b36      	ldr	r3, [pc, #216]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c858:	2206      	movs	r2, #6
 800c85a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c85c:	4b34      	ldr	r3, [pc, #208]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c85e:	2210      	movs	r2, #16
 800c860:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c862:	4b33      	ldr	r3, [pc, #204]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c864:	2200      	movs	r2, #0
 800c866:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c868:	4b31      	ldr	r3, [pc, #196]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c86a:	2280      	movs	r2, #128	@ 0x80
 800c86c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c86e:	4b30      	ldr	r3, [pc, #192]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c870:	2200      	movs	r2, #0
 800c872:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c874:	4b2e      	ldr	r3, [pc, #184]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c876:	2200      	movs	r2, #0
 800c878:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c87a:	4b2d      	ldr	r3, [pc, #180]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c880:	4b2b      	ldr	r3, [pc, #172]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c882:	2200      	movs	r2, #0
 800c884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c886:	4b2a      	ldr	r3, [pc, #168]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c888:	0018      	movs	r0, r3
 800c88a:	f008 fcbf 	bl	801520c <HAL_DMA_Init>
 800c88e:	1e03      	subs	r3, r0, #0
 800c890:	d001      	beq.n	800c896 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c892:	f000 fd77 	bl	800d384 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a25      	ldr	r2, [pc, #148]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c89a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c89c:	4b24      	ldr	r3, [pc, #144]	@ (800c930 <HAL_I2C_MspInit+0x1a8>)
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	2017      	movs	r0, #23
 800c8a8:	f008 fc7e 	bl	80151a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c8ac:	2017      	movs	r0, #23
 800c8ae:	f008 fc90 	bl	80151d2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c8b2:	e02e      	b.n	800c912 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a1f      	ldr	r2, [pc, #124]	@ (800c938 <HAL_I2C_MspInit+0x1b0>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d129      	bne.n	800c912 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8be:	4b18      	ldr	r3, [pc, #96]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8c2:	4b17      	ldr	r3, [pc, #92]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c8c4:	2102      	movs	r1, #2
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8ca:	4b15      	ldr	r3, [pc, #84]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c8d6:	2114      	movs	r1, #20
 800c8d8:	187b      	adds	r3, r7, r1
 800c8da:	22c0      	movs	r2, #192	@ 0xc0
 800c8dc:	0112      	lsls	r2, r2, #4
 800c8de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c8e0:	187b      	adds	r3, r7, r1
 800c8e2:	2212      	movs	r2, #18
 800c8e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e6:	187b      	adds	r3, r7, r1
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8ec:	187b      	adds	r3, r7, r1
 800c8ee:	2203      	movs	r2, #3
 800c8f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c8f2:	187b      	adds	r3, r7, r1
 800c8f4:	2206      	movs	r2, #6
 800c8f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8f8:	187b      	adds	r3, r7, r1
 800c8fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c924 <HAL_I2C_MspInit+0x19c>)
 800c8fc:	0019      	movs	r1, r3
 800c8fe:	0010      	movs	r0, r2
 800c900:	f009 f8aa 	bl	8015a58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c904:	4b06      	ldr	r3, [pc, #24]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c908:	4b05      	ldr	r3, [pc, #20]	@ (800c920 <HAL_I2C_MspInit+0x198>)
 800c90a:	2180      	movs	r1, #128	@ 0x80
 800c90c:	03c9      	lsls	r1, r1, #15
 800c90e:	430a      	orrs	r2, r1
 800c910:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	46bd      	mov	sp, r7
 800c916:	b00b      	add	sp, #44	@ 0x2c
 800c918:	bd90      	pop	{r4, r7, pc}
 800c91a:	46c0      	nop			@ (mov r8, r8)
 800c91c:	40005400 	.word	0x40005400
 800c920:	40021000 	.word	0x40021000
 800c924:	50000400 	.word	0x50000400
 800c928:	20000fe0 	.word	0x20000fe0
 800c92c:	40020030 	.word	0x40020030
 800c930:	20001028 	.word	0x20001028
 800c934:	4002001c 	.word	0x4002001c
 800c938:	40005800 	.word	0x40005800

0800c93c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c940:	4b10      	ldr	r3, [pc, #64]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c942:	4a11      	ldr	r2, [pc, #68]	@ (800c988 <MX_I2S2_Init+0x4c>)
 800c944:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c946:	4b0f      	ldr	r3, [pc, #60]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c948:	22c0      	movs	r2, #192	@ 0xc0
 800c94a:	0092      	lsls	r2, r2, #2
 800c94c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c94e:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c950:	2200      	movs	r2, #0
 800c952:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c954:	4b0b      	ldr	r3, [pc, #44]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c956:	2203      	movs	r2, #3
 800c958:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c95a:	4b0a      	ldr	r3, [pc, #40]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c960:	4b08      	ldr	r3, [pc, #32]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c962:	22fa      	movs	r2, #250	@ 0xfa
 800c964:	0192      	lsls	r2, r2, #6
 800c966:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c968:	4b06      	ldr	r3, [pc, #24]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c96e:	4b05      	ldr	r3, [pc, #20]	@ (800c984 <MX_I2S2_Init+0x48>)
 800c970:	0018      	movs	r0, r3
 800c972:	f00c fa53 	bl	8018e1c <HAL_I2S_Init>
 800c976:	1e03      	subs	r3, r0, #0
 800c978:	d001      	beq.n	800c97e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c97a:	f000 fd03 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c97e:	46c0      	nop			@ (mov r8, r8)
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20001070 	.word	0x20001070
 800c988:	40003800 	.word	0x40003800

0800c98c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c98c:	b590      	push	{r4, r7, lr}
 800c98e:	b089      	sub	sp, #36	@ 0x24
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c994:	240c      	movs	r4, #12
 800c996:	193b      	adds	r3, r7, r4
 800c998:	0018      	movs	r0, r3
 800c99a:	2314      	movs	r3, #20
 800c99c:	001a      	movs	r2, r3
 800c99e:	2100      	movs	r1, #0
 800c9a0:	f019 fe72 	bl	8026688 <memset>
  if(i2sHandle->Instance==SPI2)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a2d      	ldr	r2, [pc, #180]	@ (800ca60 <HAL_I2S_MspInit+0xd4>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d154      	bne.n	800ca58 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c9ae:	4b2d      	ldr	r3, [pc, #180]	@ (800ca64 <HAL_I2S_MspInit+0xd8>)
 800c9b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9b2:	4b2c      	ldr	r3, [pc, #176]	@ (800ca64 <HAL_I2S_MspInit+0xd8>)
 800c9b4:	2180      	movs	r1, #128	@ 0x80
 800c9b6:	01c9      	lsls	r1, r1, #7
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9bc:	4b29      	ldr	r3, [pc, #164]	@ (800ca64 <HAL_I2S_MspInit+0xd8>)
 800c9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c0:	4b28      	ldr	r3, [pc, #160]	@ (800ca64 <HAL_I2S_MspInit+0xd8>)
 800c9c2:	2102      	movs	r1, #2
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9c8:	4b26      	ldr	r3, [pc, #152]	@ (800ca64 <HAL_I2S_MspInit+0xd8>)
 800c9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	60bb      	str	r3, [r7, #8]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c9d4:	193b      	adds	r3, r7, r4
 800c9d6:	22b0      	movs	r2, #176	@ 0xb0
 800c9d8:	0212      	lsls	r2, r2, #8
 800c9da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9dc:	0021      	movs	r1, r4
 800c9de:	187b      	adds	r3, r7, r1
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9e4:	187b      	adds	r3, r7, r1
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9ea:	187b      	adds	r3, r7, r1
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c9f0:	187b      	adds	r3, r7, r1
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9f6:	187b      	adds	r3, r7, r1
 800c9f8:	4a1b      	ldr	r2, [pc, #108]	@ (800ca68 <HAL_I2S_MspInit+0xdc>)
 800c9fa:	0019      	movs	r1, r3
 800c9fc:	0010      	movs	r0, r2
 800c9fe:	f009 f82b 	bl	8015a58 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800ca02:	4b1a      	ldr	r3, [pc, #104]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca04:	4a1a      	ldr	r2, [pc, #104]	@ (800ca70 <HAL_I2S_MspInit+0xe4>)
 800ca06:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800ca08:	4b18      	ldr	r3, [pc, #96]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca0e:	4b17      	ldr	r3, [pc, #92]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca14:	4b15      	ldr	r3, [pc, #84]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca1a:	4b14      	ldr	r3, [pc, #80]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca1c:	2280      	movs	r2, #128	@ 0x80
 800ca1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ca20:	4b12      	ldr	r3, [pc, #72]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca22:	2280      	movs	r2, #128	@ 0x80
 800ca24:	0052      	lsls	r2, r2, #1
 800ca26:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ca28:	4b10      	ldr	r3, [pc, #64]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca2a:	2280      	movs	r2, #128	@ 0x80
 800ca2c:	00d2      	lsls	r2, r2, #3
 800ca2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ca30:	4b0e      	ldr	r3, [pc, #56]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca32:	2220      	movs	r2, #32
 800ca34:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ca36:	4b0d      	ldr	r3, [pc, #52]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ca3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca3e:	0018      	movs	r0, r3
 800ca40:	f008 fbe4 	bl	801520c <HAL_DMA_Init>
 800ca44:	1e03      	subs	r3, r0, #0
 800ca46:	d001      	beq.n	800ca4c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800ca48:	f000 fc9c 	bl	800d384 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a07      	ldr	r2, [pc, #28]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca50:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca52:	4b06      	ldr	r3, [pc, #24]	@ (800ca6c <HAL_I2S_MspInit+0xe0>)
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800ca58:	46c0      	nop			@ (mov r8, r8)
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	b009      	add	sp, #36	@ 0x24
 800ca5e:	bd90      	pop	{r4, r7, pc}
 800ca60:	40003800 	.word	0x40003800
 800ca64:	40021000 	.word	0x40021000
 800ca68:	50000400 	.word	0x50000400
 800ca6c:	200010ac 	.word	0x200010ac
 800ca70:	40020044 	.word	0x40020044

0800ca74 <SetBatteryReadTimer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetBatteryReadTimer(uint32_t ticks) {
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  batteryReadTimer  = HAL_GetTick() + ticks;
 800ca7c:	f007 ff20 	bl	80148c0 <HAL_GetTick>
 800ca80:	0002      	movs	r2, r0
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	18d2      	adds	r2, r2, r3
 800ca86:	4b03      	ldr	r3, [pc, #12]	@ (800ca94 <SetBatteryReadTimer+0x20>)
 800ca88:	601a      	str	r2, [r3, #0]
}
 800ca8a:	46c0      	nop			@ (mov r8, r8)
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	b002      	add	sp, #8
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	46c0      	nop			@ (mov r8, r8)
 800ca94:	200000a4 	.word	0x200000a4

0800ca98 <SetTestDone>:

void SetTestDone(){
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  testDone = true;
 800ca9c:	4b12      	ldr	r3, [pc, #72]	@ (800cae8 <SetTestDone+0x50>)
 800ca9e:	2201      	movs	r2, #1
 800caa0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800caa2:	20fa      	movs	r0, #250	@ 0xfa
 800caa4:	f007 ff16 	bl	80148d4 <HAL_Delay>
  SetDBLED(false, false, true);
 800caa8:	2201      	movs	r2, #1
 800caaa:	2100      	movs	r1, #0
 800caac:	2000      	movs	r0, #0
 800caae:	f005 fe87 	bl	80127c0 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cab2:	4a0e      	ldr	r2, [pc, #56]	@ (800caec <SetTestDone+0x54>)
 800cab4:	23fa      	movs	r3, #250	@ 0xfa
 800cab6:	0119      	lsls	r1, r3, #4
 800cab8:	23fa      	movs	r3, #250	@ 0xfa
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	0018      	movs	r0, r3
 800cabe:	f005 fe51 	bl	8012764 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cac2:	4a0a      	ldr	r2, [pc, #40]	@ (800caec <SetTestDone+0x54>)
 800cac4:	23fa      	movs	r3, #250	@ 0xfa
 800cac6:	0119      	lsls	r1, r3, #4
 800cac8:	23fa      	movs	r3, #250	@ 0xfa
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	0018      	movs	r0, r3
 800cace:	f005 febb 	bl	8012848 <SetVocLED>
  HAL_Delay(250);
 800cad2:	20fa      	movs	r0, #250	@ 0xfa
 800cad4:	f007 fefe 	bl	80148d4 <HAL_Delay>
  SetLEDsOff();
 800cad8:	f005 ffb2 	bl	8012a40 <SetLEDsOff>
  InitDone();
 800cadc:	f005 fd7e 	bl	80125dc <InitDone>
}
 800cae0:	46c0      	nop			@ (mov r8, r8)
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	46c0      	nop			@ (mov r8, r8)
 800cae8:	200010f4 	.word	0x200010f4
 800caec:	00000bb8 	.word	0x00000bb8

0800caf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800caf0:	b5b0      	push	{r4, r5, r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800caf6:	f007 fe7d 	bl	80147f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cafa:	f000 fad7 	bl	800d0ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cafe:	f7ff fc45 	bl	800c38c <MX_GPIO_Init>
  MX_DMA_Init();
 800cb02:	f7ff fa63 	bl	800bfcc <MX_DMA_Init>
  MX_I2C1_Init();
 800cb06:	f7ff fdbf 	bl	800c688 <MX_I2C1_Init>
  MX_I2S2_Init();
 800cb0a:	f7ff ff17 	bl	800c93c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cb0e:	f006 ff39 	bl	8013984 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cb12:	f7ff fdf9 	bl	800c708 <MX_I2C2_Init>
  MX_TIM2_Init();
 800cb16:	f006 fd2d 	bl	8013574 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cb1a:	f006 fd9f 	bl	801365c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cb1e:	f006 ff61 	bl	80139e4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cb22:	f7fe f86d 	bl	800ac00 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cb26:	f016 faa3 	bl	8023070 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cb2a:	f001 fc83 	bl	800e434 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cb2e:	f006 fef3 	bl	8013918 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cb32:	f006 fe11 	bl	8013758 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cb36:	f7fd f853 	bl	8009be0 <Check_USB_PowerOn>
 800cb3a:	1e03      	subs	r3, r0, #0
 800cb3c:	d006      	beq.n	800cb4c <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cb3e:	46c0      	nop			@ (mov r8, r8)
 800cb40:	f007 febe 	bl	80148c0 <HAL_GetTick>
 800cb44:	0003      	movs	r3, r0
 800cb46:	4ac1      	ldr	r2, [pc, #772]	@ (800ce4c <main+0x35c>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d9f9      	bls.n	800cb40 <main+0x50>
	/*
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cb4c:	4ac0      	ldr	r2, [pc, #768]	@ (800ce50 <main+0x360>)
 800cb4e:	4bc1      	ldr	r3, [pc, #772]	@ (800ce54 <main+0x364>)
 800cb50:	0011      	movs	r1, r2
 800cb52:	0018      	movs	r0, r3
 800cb54:	f7ff fd4a 	bl	800c5ec <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cb58:	4abf      	ldr	r2, [pc, #764]	@ (800ce58 <main+0x368>)
 800cb5a:	4bc0      	ldr	r3, [pc, #768]	@ (800ce5c <main+0x36c>)
 800cb5c:	0019      	movs	r1, r3
 800cb5e:	2002      	movs	r0, #2
 800cb60:	f007 f922 	bl	8013da8 <CreateLine>
  BinaryReleaseInfo();
 800cb64:	f007 f9b4 	bl	8013ed0 <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cb68:	4bbd      	ldr	r3, [pc, #756]	@ (800ce60 <main+0x370>)
 800cb6a:	781a      	ldrb	r2, [r3, #0]
 800cb6c:	4bbd      	ldr	r3, [pc, #756]	@ (800ce64 <main+0x374>)
 800cb6e:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cb70:	f7fd f8c2 	bl	8009cf8 <UserButton_Pressed>
 800cb74:	1e03      	subs	r3, r0, #0
 800cb76:	d005      	beq.n	800cb84 <main+0x94>
    EnableESPProg();
 800cb78:	f016 fb56 	bl	8023228 <EnableESPProg>
    ESP_Programming = true;
 800cb7c:	4bba      	ldr	r3, [pc, #744]	@ (800ce68 <main+0x378>)
 800cb7e:	2201      	movs	r2, #1
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	e037      	b.n	800cbf4 <main+0x104>
  }
  else {
    batteryChargeCheck();
 800cb84:	f005 fd34 	bl	80125f0 <batteryChargeCheck>
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cb88:	4bb8      	ldr	r3, [pc, #736]	@ (800ce6c <main+0x37c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	1c18      	adds	r0, r3, #0
 800cb8e:	f7f6 fe81 	bl	8003894 <__aeabi_f2d>
 800cb92:	0002      	movs	r2, r0
 800cb94:	000b      	movs	r3, r1
 800cb96:	48b6      	ldr	r0, [pc, #728]	@ (800ce70 <main+0x380>)
 800cb98:	49b6      	ldr	r1, [pc, #728]	@ (800ce74 <main+0x384>)
 800cb9a:	9200      	str	r2, [sp, #0]
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	0002      	movs	r2, r0
 800cba0:	2001      	movs	r0, #1
 800cba2:	f007 f901 	bl	8013da8 <CreateLine>
#ifdef LARGEBATTERY
    if(batteryCharge <= 3.58) {
#else
    if(batteryCharge <= 3.68) {
 800cba6:	4bb1      	ldr	r3, [pc, #708]	@ (800ce6c <main+0x37c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	1c18      	adds	r0, r3, #0
 800cbac:	f7f6 fe72 	bl	8003894 <__aeabi_f2d>
 800cbb0:	4ab1      	ldr	r2, [pc, #708]	@ (800ce78 <main+0x388>)
 800cbb2:	4bb2      	ldr	r3, [pc, #712]	@ (800ce7c <main+0x38c>)
 800cbb4:	f7f3 fc8c 	bl	80004d0 <__aeabi_dcmple>
 800cbb8:	1e03      	subs	r3, r0, #0
 800cbba:	d01b      	beq.n	800cbf4 <main+0x104>
#endif
      SetAllREDLED();
 800cbbc:	f005 ff5c 	bl	8012a78 <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800cbc0:	4baa      	ldr	r3, [pc, #680]	@ (800ce6c <main+0x37c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	1c18      	adds	r0, r3, #0
 800cbc6:	f7f6 fe65 	bl	8003894 <__aeabi_f2d>
 800cbca:	0002      	movs	r2, r0
 800cbcc:	000b      	movs	r3, r1
 800cbce:	4cac      	ldr	r4, [pc, #688]	@ (800ce80 <main+0x390>)
 800cbd0:	48a8      	ldr	r0, [pc, #672]	@ (800ce74 <main+0x384>)
 800cbd2:	21e1      	movs	r1, #225	@ 0xe1
 800cbd4:	0109      	lsls	r1, r1, #4
 800cbd6:	9102      	str	r1, [sp, #8]
 800cbd8:	9200      	str	r2, [sp, #0]
 800cbda:	9301      	str	r3, [sp, #4]
 800cbdc:	0022      	movs	r2, r4
 800cbde:	0001      	movs	r1, r0
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	f007 f8e1 	bl	8013da8 <CreateLine>
      WalkAllRedLED();
 800cbe6:	f005 ff95 	bl	8012b14 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800cbea:	23e1      	movs	r3, #225	@ 0xe1
 800cbec:	011b      	lsls	r3, r3, #4
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f7fd fd0a 	bl	800a608 <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cbf4:	2003      	movs	r0, #3
 800cbf6:	f007 f951 	bl	8013e9c <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cbfa:	49a2      	ldr	r1, [pc, #648]	@ (800ce84 <main+0x394>)
 800cbfc:	4ba2      	ldr	r3, [pc, #648]	@ (800ce88 <main+0x398>)
 800cbfe:	2201      	movs	r2, #1
 800cc00:	0018      	movs	r0, r3
 800cc02:	f010 fca3 	bl	801d54c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cc06:	4ba1      	ldr	r3, [pc, #644]	@ (800ce8c <main+0x39c>)
 800cc08:	0018      	movs	r0, r3
 800cc0a:	f7fd fdff 	bl	800a80c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cc0e:	4aa0      	ldr	r2, [pc, #640]	@ (800ce90 <main+0x3a0>)
 800cc10:	49a0      	ldr	r1, [pc, #640]	@ (800ce94 <main+0x3a4>)
 800cc12:	48a1      	ldr	r0, [pc, #644]	@ (800ce98 <main+0x3a8>)
 800cc14:	230b      	movs	r3, #11
 800cc16:	f004 fe5b 	bl	80118d0 <soundInit>
 800cc1a:	0003      	movs	r3, r0
 800cc1c:	001a      	movs	r2, r3
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4053      	eors	r3, r2
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <main+0x148>
    errorHandler(__func__, __LINE__, __FILE__);
 800cc28:	4a9c      	ldr	r2, [pc, #624]	@ (800ce9c <main+0x3ac>)
 800cc2a:	2304      	movs	r3, #4
 800cc2c:	33ff      	adds	r3, #255	@ 0xff
 800cc2e:	0019      	movs	r1, r3
 800cc30:	4b9b      	ldr	r3, [pc, #620]	@ (800cea0 <main+0x3b0>)
 800cc32:	0018      	movs	r0, r3
 800cc34:	f007 f9b4 	bl	8013fa0 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cc38:	4b9a      	ldr	r3, [pc, #616]	@ (800cea4 <main+0x3b4>)
 800cc3a:	4a9b      	ldr	r2, [pc, #620]	@ (800cea8 <main+0x3b8>)
 800cc3c:	4995      	ldr	r1, [pc, #596]	@ (800ce94 <main+0x3a4>)
 800cc3e:	489b      	ldr	r0, [pc, #620]	@ (800ceac <main+0x3bc>)
 800cc40:	f000 fc92 	bl	800d568 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cc44:	f007 fe3c 	bl	80148c0 <HAL_GetTick>
 800cc48:	0003      	movs	r3, r0
 800cc4a:	4a99      	ldr	r2, [pc, #612]	@ (800ceb0 <main+0x3c0>)
 800cc4c:	189a      	adds	r2, r3, r2
 800cc4e:	4b99      	ldr	r3, [pc, #612]	@ (800ceb4 <main+0x3c4>)
 800cc50:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cc52:	f7fc ffc5 	bl	8009be0 <Check_USB_PowerOn>
 800cc56:	0003      	movs	r3, r0
 800cc58:	1e5a      	subs	r2, r3, #1
 800cc5a:	4193      	sbcs	r3, r2
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4053      	eors	r3, r2
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	1c1a      	adds	r2, r3, #0
 800cc66:	2301      	movs	r3, #1
 800cc68:	4013      	ands	r3, r2
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	4b92      	ldr	r3, [pc, #584]	@ (800ceb8 <main+0x3c8>)
 800cc6e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cc70:	f7fc ffb6 	bl	8009be0 <Check_USB_PowerOn>
 800cc74:	1e03      	subs	r3, r0, #0
 800cc76:	d003      	beq.n	800cc80 <main+0x190>
    printf_USB("Input command followed by Enter or type Helpme\r\n");
 800cc78:	4b90      	ldr	r3, [pc, #576]	@ (800cebc <main+0x3cc>)
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	f7fb fef6 	bl	8008a6c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cc80:	4b8f      	ldr	r3, [pc, #572]	@ (800cec0 <main+0x3d0>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	0018      	movs	r0, r3
 800cc86:	f007 f839 	bl	8013cfc <TimestampIsReached>
 800cc8a:	1e03      	subs	r3, r0, #0
 800cc8c:	d00a      	beq.n	800cca4 <main+0x1b4>
      Battery_Upkeep();
 800cc8e:	f006 faff 	bl	8013290 <Battery_Upkeep>
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800cc92:	f007 fe15 	bl	80148c0 <HAL_GetTick>
 800cc96:	0003      	movs	r3, r0
 800cc98:	4a8a      	ldr	r2, [pc, #552]	@ (800cec4 <main+0x3d4>)
 800cc9a:	189a      	adds	r2, r3, r2
 800cc9c:	4b88      	ldr	r3, [pc, #544]	@ (800cec0 <main+0x3d0>)
 800cc9e:	601a      	str	r2, [r3, #0]
      showTime();
 800cca0:	f7fd f8a6 	bl	8009df0 <showTime>
    }
    configCheck();
 800cca4:	f006 f954 	bl	8012f50 <configCheck>
    if ((batteryStatus == BATTERY_LOW || batteryStatus == BATTERY_CRITICAL)  && !EspTurnedOn){
 800cca8:	4b87      	ldr	r3, [pc, #540]	@ (800cec8 <main+0x3d8>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d003      	beq.n	800ccb8 <main+0x1c8>
 800ccb0:	4b85      	ldr	r3, [pc, #532]	@ (800cec8 <main+0x3d8>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d137      	bne.n	800cd28 <main+0x238>
 800ccb8:	4b84      	ldr	r3, [pc, #528]	@ (800cecc <main+0x3dc>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	4053      	eors	r3, r2
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d030      	beq.n	800cd28 <main+0x238>
      WalkAllRedLED();
 800ccc6:	f005 ff25 	bl	8012b14 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800ccca:	4b81      	ldr	r3, [pc, #516]	@ (800ced0 <main+0x3e0>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800ccd0:	f7f7 feca 	bl	8004a68 <pwrmailTodaySend>
      if (((batteryStatus == BATTERY_LOW)  || (batteryStatus == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800ccd4:	4b7c      	ldr	r3, [pc, #496]	@ (800cec8 <main+0x3d8>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d003      	beq.n	800cce4 <main+0x1f4>
 800ccdc:	4b7a      	ldr	r3, [pc, #488]	@ (800cec8 <main+0x3d8>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d121      	bne.n	800cd28 <main+0x238>
 800cce4:	4b7b      	ldr	r3, [pc, #492]	@ (800ced4 <main+0x3e4>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d11d      	bne.n	800cd28 <main+0x238>
 800ccec:	f7fc ff78 	bl	8009be0 <Check_USB_PowerOn>
 800ccf0:	0003      	movs	r3, r0
 800ccf2:	001a      	movs	r2, r3
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	4053      	eors	r3, r2
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d014      	beq.n	800cd28 <main+0x238>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", batteryStatus, sendpwremail, Check_USB_PowerOn());
 800ccfe:	4b72      	ldr	r3, [pc, #456]	@ (800cec8 <main+0x3d8>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	001d      	movs	r5, r3
 800cd04:	4b73      	ldr	r3, [pc, #460]	@ (800ced4 <main+0x3e4>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	001c      	movs	r4, r3
 800cd0a:	f7fc ff69 	bl	8009be0 <Check_USB_PowerOn>
 800cd0e:	0003      	movs	r3, r0
 800cd10:	4a71      	ldr	r2, [pc, #452]	@ (800ced8 <main+0x3e8>)
 800cd12:	4972      	ldr	r1, [pc, #456]	@ (800cedc <main+0x3ec>)
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	9400      	str	r4, [sp, #0]
 800cd18:	002b      	movs	r3, r5
 800cd1a:	2003      	movs	r0, #3
 800cd1c:	f007 f844 	bl	8013da8 <CreateLine>
        setModePowerMail();
 800cd20:	f7f7 fe62 	bl	80049e8 <setModePowerMail>
        ESP_Upkeep();
 800cd24:	f7fa fcc6 	bl	80076b4 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800cd28:	4b6d      	ldr	r3, [pc, #436]	@ (800cee0 <main+0x3f0>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
    if (batteryStatus == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800cd2e:	4b66      	ldr	r3, [pc, #408]	@ (800cec8 <main+0x3d8>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10c      	bne.n	800cd50 <main+0x260>
 800cd36:	4b6b      	ldr	r3, [pc, #428]	@ (800cee4 <main+0x3f4>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b09      	cmp	r3, #9
 800cd3c:	d108      	bne.n	800cd50 <main+0x260>
       batteryEmpty = true;
 800cd3e:	4b6a      	ldr	r3, [pc, #424]	@ (800cee8 <main+0x3f8>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800cd44:	23e1      	movs	r3, #225	@ 0xe1
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	0018      	movs	r0, r3
 800cd4a:	f7fd fc5d 	bl	800a608 <Enter_Stop_Mode_for_empty_battery>
 800cd4e:	e002      	b.n	800cd56 <main+0x266>
    }
    else{
      batteryEmpty = false;
 800cd50:	4b65      	ldr	r3, [pc, #404]	@ (800cee8 <main+0x3f8>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cd56:	4b65      	ldr	r3, [pc, #404]	@ (800ceec <main+0x3fc>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d100      	bne.n	800cd60 <main+0x270>
 800cd5e:	e10b      	b.n	800cf78 <main+0x488>
 800cd60:	4b41      	ldr	r3, [pc, #260]	@ (800ce68 <main+0x378>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2201      	movs	r2, #1
 800cd66:	4053      	eors	r3, r2
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d100      	bne.n	800cd70 <main+0x280>
 800cd6e:	e103      	b.n	800cf78 <main+0x488>
 800cd70:	4b5d      	ldr	r3, [pc, #372]	@ (800cee8 <main+0x3f8>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2201      	movs	r2, #1
 800cd76:	4053      	eors	r3, r2
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d100      	bne.n	800cd80 <main+0x290>
 800cd7e:	e0fb      	b.n	800cf78 <main+0x488>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800cd80:	4b4d      	ldr	r3, [pc, #308]	@ (800ceb8 <main+0x3c8>)
 800cd82:	781a      	ldrb	r2, [r3, #0]
 800cd84:	4b5a      	ldr	r3, [pc, #360]	@ (800cef0 <main+0x400>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d034      	beq.n	800cdf6 <main+0x306>
        if (IsSGPPresent() && !usbPluggedIn) {
 800cd8c:	f000 fb7e 	bl	800d48c <IsSGPPresent>
 800cd90:	1e03      	subs	r3, r0, #0
 800cd92:	d009      	beq.n	800cda8 <main+0x2b8>
 800cd94:	4b56      	ldr	r3, [pc, #344]	@ (800cef0 <main+0x400>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4053      	eors	r3, r2
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d002      	beq.n	800cda8 <main+0x2b8>
          SetVOCSensorDIS_ENA(true);
 800cda2:	2001      	movs	r0, #1
 800cda4:	f000 fb7c 	bl	800d4a0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800cda8:	4b52      	ldr	r3, [pc, #328]	@ (800cef4 <main+0x404>)
 800cdaa:	791b      	ldrb	r3, [r3, #4]
 800cdac:	2b34      	cmp	r3, #52	@ 0x34
 800cdae:	d003      	beq.n	800cdb8 <main+0x2c8>
 800cdb0:	4b50      	ldr	r3, [pc, #320]	@ (800cef4 <main+0x404>)
 800cdb2:	791b      	ldrb	r3, [r3, #4]
 800cdb4:	2b35      	cmp	r3, #53	@ 0x35
 800cdb6:	d106      	bne.n	800cdc6 <main+0x2d6>
 800cdb8:	4b4d      	ldr	r3, [pc, #308]	@ (800cef0 <main+0x400>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <main+0x2d6>
          SetVOCSensorDIS_ENA(false);
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	f000 fb6d 	bl	800d4a0 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800cdc6:	4b4a      	ldr	r3, [pc, #296]	@ (800cef0 <main+0x400>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	4053      	eors	r3, r2
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00c      	beq.n	800cdee <main+0x2fe>
 800cdd4:	f007 fd74 	bl	80148c0 <HAL_GetTick>
 800cdd8:	0003      	movs	r3, r0
 800cdda:	4a35      	ldr	r2, [pc, #212]	@ (800ceb0 <main+0x3c0>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d906      	bls.n	800cdee <main+0x2fe>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800cde0:	f007 fd6e 	bl	80148c0 <HAL_GetTick>
 800cde4:	0003      	movs	r3, r0
 800cde6:	4a44      	ldr	r2, [pc, #272]	@ (800cef8 <main+0x408>)
 800cde8:	189a      	adds	r2, r3, r2
 800cdea:	4b32      	ldr	r3, [pc, #200]	@ (800ceb4 <main+0x3c4>)
 800cdec:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800cdee:	4b40      	ldr	r3, [pc, #256]	@ (800cef0 <main+0x400>)
 800cdf0:	781a      	ldrb	r2, [r3, #0]
 800cdf2:	4b31      	ldr	r3, [pc, #196]	@ (800ceb8 <main+0x3c8>)
 800cdf4:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800cdf6:	f000 fffb 	bl	800ddf0 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800cdfa:	4b35      	ldr	r3, [pc, #212]	@ (800ced0 <main+0x3e0>)
 800cdfc:	78db      	ldrb	r3, [r3, #3]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <main+0x31e>
        MICstate = Mic_Upkeep();
 800ce02:	f001 fa05 	bl	800e210 <Mic_Upkeep>
 800ce06:	0003      	movs	r3, r0
 800ce08:	001a      	movs	r2, r3
 800ce0a:	4b3c      	ldr	r3, [pc, #240]	@ (800cefc <main+0x40c>)
 800ce0c:	701a      	strb	r2, [r3, #0]
      }
      if ( ((batteryStatus >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800ce0e:	4b2e      	ldr	r3, [pc, #184]	@ (800cec8 <main+0x3d8>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d803      	bhi.n	800ce1e <main+0x32e>
 800ce16:	4b32      	ldr	r3, [pc, #200]	@ (800cee0 <main+0x3f0>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d070      	beq.n	800cf00 <main+0x410>
 800ce1e:	4b2c      	ldr	r3, [pc, #176]	@ (800ced0 <main+0x3e0>)
 800ce20:	789b      	ldrb	r3, [r3, #2]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d06c      	beq.n	800cf00 <main+0x410>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ce26:	f001 fb93 	bl	800e550 <sen5x_Get_sen5x_enable_state>
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	001a      	movs	r2, r3
 800ce2e:	2301      	movs	r3, #1
 800ce30:	4053      	eors	r3, r2
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d006      	beq.n	800ce46 <main+0x356>
 800ce38:	4b2d      	ldr	r3, [pc, #180]	@ (800cef0 <main+0x400>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <main+0x356>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ce40:	2000      	movs	r0, #0
 800ce42:	f001 fbc1 	bl	800e5c8 <sen5x_enable>
        }
        sen5x_statemachine();
 800ce46:	f002 f959 	bl	800f0fc <sen5x_statemachine>
 800ce4a:	e07a      	b.n	800cf42 <main+0x452>
 800ce4c:	00000289 	.word	0x00000289
 800ce50:	200021ac 	.word	0x200021ac
 800ce54:	2000216c 	.word	0x2000216c
 800ce58:	0802c6fc 	.word	0x0802c6fc
 800ce5c:	0802c728 	.word	0x0802c728
 800ce60:	08080194 	.word	0x08080194
 800ce64:	200010f7 	.word	0x200010f7
 800ce68:	200010f5 	.word	0x200010f5
 800ce6c:	20002158 	.word	0x20002158
 800ce70:	0802c72c 	.word	0x0802c72c
 800ce74:	0802c748 	.word	0x0802c748
 800ce78:	d70a3d71 	.word	0xd70a3d71
 800ce7c:	400d70a3 	.word	0x400d70a3
 800ce80:	0802c74c 	.word	0x0802c74c
 800ce84:	20001100 	.word	0x20001100
 800ce88:	200022e4 	.word	0x200022e4
 800ce8c:	20001198 	.word	0x20001198
 800ce90:	200021ec 	.word	0x200021ec
 800ce94:	20001070 	.word	0x20001070
 800ce98:	200010ac 	.word	0x200010ac
 800ce9c:	0802c7ac 	.word	0x0802c7ac
 800cea0:	0802e51c 	.word	0x0802e51c
 800cea4:	2000239c 	.word	0x2000239c
 800cea8:	20000e84 	.word	0x20000e84
 800ceac:	20000f38 	.word	0x20000f38
 800ceb0:	000061a8 	.word	0x000061a8
 800ceb4:	20001114 	.word	0x20001114
 800ceb8:	200010fa 	.word	0x200010fa
 800cebc:	0802c7c0 	.word	0x0802c7c0
 800cec0:	200000a4 	.word	0x200000a4
 800cec4:	0000c350 	.word	0x0000c350
 800cec8:	2000215d 	.word	0x2000215d
 800cecc:	200005ac 	.word	0x200005ac
 800ced0:	20001118 	.word	0x20001118
 800ced4:	200010f9 	.word	0x200010f9
 800ced8:	0802c7f4 	.word	0x0802c7f4
 800cedc:	0802c828 	.word	0x0802c828
 800cee0:	200000a2 	.word	0x200000a2
 800cee4:	200010fc 	.word	0x200010fc
 800cee8:	200010f6 	.word	0x200010f6
 800ceec:	200010f4 	.word	0x200010f4
 800cef0:	2000214d 	.word	0x2000214d
 800cef4:	200011c0 	.word	0x200011c0
 800cef8:	00001194 	.word	0x00001194
 800cefc:	200010fb 	.word	0x200010fb
      }
      else if ((batteryStatus <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800cf00:	4b52      	ldr	r3, [pc, #328]	@ (800d04c <main+0x55c>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d81c      	bhi.n	800cf42 <main+0x452>
 800cf08:	4b51      	ldr	r3, [pc, #324]	@ (800d050 <main+0x560>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	4053      	eors	r3, r2
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d015      	beq.n	800cf42 <main+0x452>
 800cf16:	4b4f      	ldr	r3, [pc, #316]	@ (800d054 <main+0x564>)
 800cf18:	789b      	ldrb	r3, [r3, #2]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d011      	beq.n	800cf42 <main+0x452>
        Info("Battery level insufficient for sen5x operation");
 800cf1e:	4a4e      	ldr	r2, [pc, #312]	@ (800d058 <main+0x568>)
 800cf20:	4b4e      	ldr	r3, [pc, #312]	@ (800d05c <main+0x56c>)
 800cf22:	0019      	movs	r1, r3
 800cf24:	2002      	movs	r0, #2
 800cf26:	f006 ff3f 	bl	8013da8 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800cf2a:	4b4a      	ldr	r3, [pc, #296]	@ (800d054 <main+0x564>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800cf30:	4b4b      	ldr	r3, [pc, #300]	@ (800d060 <main+0x570>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800cf36:	4b4b      	ldr	r3, [pc, #300]	@ (800d064 <main+0x574>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <main+0x452>
          sen5x_Power_Off();
 800cf3e:	f001 fbcf 	bl	800e6e0 <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800cf42:	4b49      	ldr	r3, [pc, #292]	@ (800d068 <main+0x578>)
 800cf44:	79db      	ldrb	r3, [r3, #7]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00d      	beq.n	800cf66 <main+0x476>
 800cf4a:	4b48      	ldr	r3, [pc, #288]	@ (800d06c <main+0x57c>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	4053      	eors	r3, r2
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <main+0x476>
        ESPstate = ESP_Upkeep();
 800cf58:	f7fa fbac 	bl	80076b4 <ESP_Upkeep>
 800cf5c:	0003      	movs	r3, r0
 800cf5e:	001a      	movs	r2, r3
 800cf60:	4b43      	ldr	r3, [pc, #268]	@ (800d070 <main+0x580>)
 800cf62:	701a      	strb	r2, [r3, #0]
 800cf64:	e008      	b.n	800cf78 <main+0x488>
      }
      else {
        Error("ESP failed during init");
 800cf66:	4a43      	ldr	r2, [pc, #268]	@ (800d074 <main+0x584>)
 800cf68:	4b43      	ldr	r3, [pc, #268]	@ (800d078 <main+0x588>)
 800cf6a:	0019      	movs	r1, r3
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	f006 ff1b 	bl	8013da8 <CreateLine>
        espfailshown = true;
 800cf72:	4b3e      	ldr	r3, [pc, #248]	@ (800d06c <main+0x57c>)
 800cf74:	2201      	movs	r2, #1
 800cf76:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800cf78:	4b40      	ldr	r3, [pc, #256]	@ (800d07c <main+0x58c>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	4053      	eors	r3, r2
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00f      	beq.n	800cfa6 <main+0x4b6>
 800cf86:	4b3e      	ldr	r3, [pc, #248]	@ (800d080 <main+0x590>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	4053      	eors	r3, r2
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <main+0x4b6>
 800cf94:	4b3b      	ldr	r3, [pc, #236]	@ (800d084 <main+0x594>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	4053      	eors	r3, r2
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <main+0x4b6>
      Device_Test();  // for device with startup time
 800cfa2:	f000 fcb9 	bl	800d918 <Device_Test>
    }
    if (!usbPluggedIn) {
 800cfa6:	4b38      	ldr	r3, [pc, #224]	@ (800d088 <main+0x598>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	4053      	eors	r3, r2
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d030      	beq.n	800d016 <main+0x526>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800cfb4:	4b35      	ldr	r3, [pc, #212]	@ (800d08c <main+0x59c>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	4053      	eors	r3, r2
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d029      	beq.n	800d016 <main+0x526>
 800cfc2:	f000 fd27 	bl	800da14 <AllDevicesReady>
 800cfc6:	1e03      	subs	r3, r0, #0
 800cfc8:	d025      	beq.n	800d016 <main+0x526>
 800cfca:	4b31      	ldr	r3, [pc, #196]	@ (800d090 <main+0x5a0>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d021      	beq.n	800d016 <main+0x526>
        EnabledConnectedDevices();
 800cfd2:	f000 fe6b 	bl	800dcac <EnabledConnectedDevices>
        Enter_Stop_Mode((batteryCharge<3.90)?SensorProbe.PM_Present?WAIT_WITH_PM+900:WAIT_WITHOUT_PM+900:SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800cfd6:	4b2f      	ldr	r3, [pc, #188]	@ (800d094 <main+0x5a4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	1c18      	adds	r0, r3, #0
 800cfdc:	f7f6 fc5a 	bl	8003894 <__aeabi_f2d>
 800cfe0:	4a2d      	ldr	r2, [pc, #180]	@ (800d098 <main+0x5a8>)
 800cfe2:	4b2e      	ldr	r3, [pc, #184]	@ (800d09c <main+0x5ac>)
 800cfe4:	f7f3 fa6a 	bl	80004bc <__aeabi_dcmplt>
 800cfe8:	1e03      	subs	r3, r0, #0
 800cfea:	d008      	beq.n	800cffe <main+0x50e>
 800cfec:	4b1e      	ldr	r3, [pc, #120]	@ (800d068 <main+0x578>)
 800cfee:	795b      	ldrb	r3, [r3, #5]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <main+0x50a>
 800cff4:	23dc      	movs	r3, #220	@ 0xdc
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	e00a      	b.n	800d010 <main+0x520>
 800cffa:	4b29      	ldr	r3, [pc, #164]	@ (800d0a0 <main+0x5b0>)
 800cffc:	e008      	b.n	800d010 <main+0x520>
 800cffe:	4b1a      	ldr	r3, [pc, #104]	@ (800d068 <main+0x578>)
 800d000:	795b      	ldrb	r3, [r3, #5]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <main+0x51c>
 800d006:	23d7      	movs	r3, #215	@ 0xd7
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	e001      	b.n	800d010 <main+0x520>
 800d00c:	23dc      	movs	r3, #220	@ 0xdc
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	0018      	movs	r0, r3
 800d012:	f7fd fb55 	bl	800a6c0 <Enter_Stop_Mode>
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d016:	4b23      	ldr	r3, [pc, #140]	@ (800d0a4 <main+0x5b4>)
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <main+0x532>
      check_cli_command();
 800d01e:	f000 f8cf 	bl	800d1c0 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d022:	f7fc fddd 	bl	8009be0 <Check_USB_PowerOn>
 800d026:	1e03      	subs	r3, r0, #0
 800d028:	d100      	bne.n	800d02c <main+0x53c>
 800d02a:	e629      	b.n	800cc80 <main+0x190>
 800d02c:	4b1e      	ldr	r3, [pc, #120]	@ (800d0a8 <main+0x5b8>)
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2201      	movs	r2, #1
 800d032:	4053      	eors	r3, r2
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d100      	bne.n	800d03c <main+0x54c>
 800d03a:	e621      	b.n	800cc80 <main+0x190>
      Process_USB_input(GetUsbRxPointer());
 800d03c:	f016 f8fe 	bl	802323c <GetUsbRxPointer>
 800d040:	0003      	movs	r3, r0
 800d042:	0018      	movs	r0, r3
 800d044:	f7fc fa8c 	bl	8009560 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d048:	e61a      	b.n	800cc80 <main+0x190>
 800d04a:	46c0      	nop			@ (mov r8, r8)
 800d04c:	2000215d 	.word	0x2000215d
 800d050:	200000a2 	.word	0x200000a2
 800d054:	20001118 	.word	0x20001118
 800d058:	0802c82c 	.word	0x0802c82c
 800d05c:	0802c728 	.word	0x0802c728
 800d060:	200011be 	.word	0x200011be
 800d064:	200011bd 	.word	0x200011bd
 800d068:	20001120 	.word	0x20001120
 800d06c:	200010f8 	.word	0x200010f8
 800d070:	200010fc 	.word	0x200010fc
 800d074:	0802c85c 	.word	0x0802c85c
 800d078:	0802c748 	.word	0x0802c748
 800d07c:	200010f4 	.word	0x200010f4
 800d080:	200010f5 	.word	0x200010f5
 800d084:	200010f6 	.word	0x200010f6
 800d088:	2000214d 	.word	0x2000214d
 800d08c:	2000214e 	.word	0x2000214e
 800d090:	200005b3 	.word	0x200005b3
 800d094:	20002158 	.word	0x20002158
 800d098:	33333333 	.word	0x33333333
 800d09c:	400f3333 	.word	0x400f3333
 800d0a0:	000006f4 	.word	0x000006f4
 800d0a4:	20001100 	.word	0x20001100
 800d0a8:	200005af 	.word	0x200005af

0800d0ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b09d      	sub	sp, #116	@ 0x74
 800d0b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d0b2:	2438      	movs	r4, #56	@ 0x38
 800d0b4:	193b      	adds	r3, r7, r4
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	2338      	movs	r3, #56	@ 0x38
 800d0ba:	001a      	movs	r2, r3
 800d0bc:	2100      	movs	r1, #0
 800d0be:	f019 fae3 	bl	8026688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0c2:	2324      	movs	r3, #36	@ 0x24
 800d0c4:	18fb      	adds	r3, r7, r3
 800d0c6:	0018      	movs	r0, r3
 800d0c8:	2314      	movs	r3, #20
 800d0ca:	001a      	movs	r2, r3
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	f019 fadb 	bl	8026688 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d0d2:	003b      	movs	r3, r7
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	2324      	movs	r3, #36	@ 0x24
 800d0d8:	001a      	movs	r2, r3
 800d0da:	2100      	movs	r1, #0
 800d0dc:	f019 fad4 	bl	8026688 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0e0:	4b34      	ldr	r3, [pc, #208]	@ (800d1b4 <SystemClock_Config+0x108>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a34      	ldr	r2, [pc, #208]	@ (800d1b8 <SystemClock_Config+0x10c>)
 800d0e6:	401a      	ands	r2, r3
 800d0e8:	4b32      	ldr	r3, [pc, #200]	@ (800d1b4 <SystemClock_Config+0x108>)
 800d0ea:	2180      	movs	r1, #128	@ 0x80
 800d0ec:	0109      	lsls	r1, r1, #4
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d0f2:	f00d fff7 	bl	801b0e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d0f6:	4b31      	ldr	r3, [pc, #196]	@ (800d1bc <SystemClock_Config+0x110>)
 800d0f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0fa:	4a2f      	ldr	r2, [pc, #188]	@ (800d1b8 <SystemClock_Config+0x10c>)
 800d0fc:	401a      	ands	r2, r3
 800d0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d1bc <SystemClock_Config+0x110>)
 800d100:	2180      	movs	r1, #128	@ 0x80
 800d102:	0149      	lsls	r1, r1, #5
 800d104:	430a      	orrs	r2, r1
 800d106:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d108:	193b      	adds	r3, r7, r4
 800d10a:	2226      	movs	r2, #38	@ 0x26
 800d10c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d10e:	193b      	adds	r3, r7, r4
 800d110:	2280      	movs	r2, #128	@ 0x80
 800d112:	0052      	lsls	r2, r2, #1
 800d114:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d116:	0021      	movs	r1, r4
 800d118:	187b      	adds	r3, r7, r1
 800d11a:	2201      	movs	r2, #1
 800d11c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d11e:	187b      	adds	r3, r7, r1
 800d120:	2210      	movs	r2, #16
 800d122:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d124:	187b      	adds	r3, r7, r1
 800d126:	2201      	movs	r2, #1
 800d128:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d12a:	187b      	adds	r3, r7, r1
 800d12c:	2200      	movs	r2, #0
 800d12e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d130:	187b      	adds	r3, r7, r1
 800d132:	0018      	movs	r0, r3
 800d134:	f00e f850 	bl	801b1d8 <HAL_RCC_OscConfig>
 800d138:	1e03      	subs	r3, r0, #0
 800d13a:	d001      	beq.n	800d140 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d13c:	f000 f922 	bl	800d384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d140:	2124      	movs	r1, #36	@ 0x24
 800d142:	187b      	adds	r3, r7, r1
 800d144:	220f      	movs	r2, #15
 800d146:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d148:	187b      	adds	r3, r7, r1
 800d14a:	2201      	movs	r2, #1
 800d14c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d14e:	187b      	adds	r3, r7, r1
 800d150:	2200      	movs	r2, #0
 800d152:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d154:	187b      	adds	r3, r7, r1
 800d156:	2200      	movs	r2, #0
 800d158:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d15a:	187b      	adds	r3, r7, r1
 800d15c:	2200      	movs	r2, #0
 800d15e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d160:	187b      	adds	r3, r7, r1
 800d162:	2100      	movs	r1, #0
 800d164:	0018      	movs	r0, r3
 800d166:	f00e fc0b 	bl	801b980 <HAL_RCC_ClockConfig>
 800d16a:	1e03      	subs	r3, r0, #0
 800d16c:	d001      	beq.n	800d172 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d16e:	f000 f909 	bl	800d384 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d172:	003b      	movs	r3, r7
 800d174:	226d      	movs	r2, #109	@ 0x6d
 800d176:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d178:	003b      	movs	r3, r7
 800d17a:	2200      	movs	r2, #0
 800d17c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d17e:	003b      	movs	r3, r7
 800d180:	2200      	movs	r2, #0
 800d182:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d184:	003b      	movs	r3, r7
 800d186:	2200      	movs	r2, #0
 800d188:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d18a:	003b      	movs	r3, r7
 800d18c:	2280      	movs	r2, #128	@ 0x80
 800d18e:	0252      	lsls	r2, r2, #9
 800d190:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d192:	003b      	movs	r3, r7
 800d194:	2280      	movs	r2, #128	@ 0x80
 800d196:	04d2      	lsls	r2, r2, #19
 800d198:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d19a:	003b      	movs	r3, r7
 800d19c:	0018      	movs	r0, r3
 800d19e:	f00e fe13 	bl	801bdc8 <HAL_RCCEx_PeriphCLKConfig>
 800d1a2:	1e03      	subs	r3, r0, #0
 800d1a4:	d001      	beq.n	800d1aa <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d1a6:	f000 f8ed 	bl	800d384 <Error_Handler>
  }
}
 800d1aa:	46c0      	nop			@ (mov r8, r8)
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	b01d      	add	sp, #116	@ 0x74
 800d1b0:	bd90      	pop	{r4, r7, pc}
 800d1b2:	46c0      	nop			@ (mov r8, r8)
 800d1b4:	40007000 	.word	0x40007000
 800d1b8:	ffffe7ff 	.word	0xffffe7ff
 800d1bc:	40021000 	.word	0x40021000

0800d1c0 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d1c4:	4b40      	ldr	r3, [pc, #256]	@ (800d2c8 <check_cli_command+0x108>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	3b61      	subs	r3, #97	@ 0x61
 800d1ca:	2b15      	cmp	r3, #21
 800d1cc:	d845      	bhi.n	800d25a <check_cli_command+0x9a>
 800d1ce:	009a      	lsls	r2, r3, #2
 800d1d0:	4b3e      	ldr	r3, [pc, #248]	@ (800d2cc <check_cli_command+0x10c>)
 800d1d2:	18d3      	adds	r3, r2, r3
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d1d8:	4b3d      	ldr	r3, [pc, #244]	@ (800d2d0 <check_cli_command+0x110>)
 800d1da:	0018      	movs	r0, r3
 800d1dc:	f019 f902 	bl	80263e4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d1e0:	2003      	movs	r0, #3
 800d1e2:	f006 fe5b 	bl	8013e9c <SetVerboseLevel>
      break;
 800d1e6:	e069      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d1e8:	f7fb fc80 	bl	8008aec <PC_show_Keys>
    break;
 800d1ec:	e066      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d1ee:	f7f7 fb4f 	bl	8004890 <forceNTPupdate>
    break;
 800d1f2:	e063      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d1f4:	4b37      	ldr	r3, [pc, #220]	@ (800d2d4 <check_cli_command+0x114>)
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f019 f8f4 	bl	80263e4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d1fc:	2002      	movs	r0, #2
 800d1fe:	f006 fe4d 	bl	8013e9c <SetVerboseLevel>
      break;
 800d202:	e05b      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d204:	4b34      	ldr	r3, [pc, #208]	@ (800d2d8 <check_cli_command+0x118>)
 800d206:	0018      	movs	r0, r3
 800d208:	f019 f8ec 	bl	80263e4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d20c:	2001      	movs	r0, #1
 800d20e:	f006 fe45 	bl	8013e9c <SetVerboseLevel>
      break;
 800d212:	e053      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d214:	4b31      	ldr	r3, [pc, #196]	@ (800d2dc <check_cli_command+0x11c>)
 800d216:	0018      	movs	r0, r3
 800d218:	f019 f8e4 	bl	80263e4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d21c:	2000      	movs	r0, #0
 800d21e:	f006 fe3d 	bl	8013e9c <SetVerboseLevel>
      break;
 800d222:	e04b      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d224:	f007 fb4c 	bl	80148c0 <HAL_GetTick>
 800d228:	0002      	movs	r2, r0
 800d22a:	4b2d      	ldr	r3, [pc, #180]	@ (800d2e0 <check_cli_command+0x120>)
 800d22c:	601a      	str	r2, [r3, #0]
      break;
 800d22e:	e045      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d230:	f7fc fdde 	bl	8009df0 <showTime>
      break;
 800d234:	e042      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d236:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e4 <check_cli_command+0x124>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	1e5a      	subs	r2, r3, #1
 800d23c:	4193      	sbcs	r3, r2
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2201      	movs	r2, #1
 800d242:	4053      	eors	r3, r2
 800d244:	b2db      	uxtb	r3, r3
 800d246:	1c1a      	adds	r2, r3, #0
 800d248:	2301      	movs	r3, #1
 800d24a:	4013      	ands	r3, r2
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4b25      	ldr	r3, [pc, #148]	@ (800d2e4 <check_cli_command+0x124>)
 800d250:	701a      	strb	r2, [r3, #0]
      break;
 800d252:	e033      	b.n	800d2bc <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d254:	f006 fe3c 	bl	8013ed0 <BinaryReleaseInfo>
      break;
 800d258:	e030      	b.n	800d2bc <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d25a:	4b23      	ldr	r3, [pc, #140]	@ (800d2e8 <check_cli_command+0x128>)
 800d25c:	0018      	movs	r0, r3
 800d25e:	f019 f8c1 	bl	80263e4 <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d262:	4b22      	ldr	r3, [pc, #136]	@ (800d2ec <check_cli_command+0x12c>)
 800d264:	0018      	movs	r0, r3
 800d266:	f019 f8bd 	bl	80263e4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d26a:	4b21      	ldr	r3, [pc, #132]	@ (800d2f0 <check_cli_command+0x130>)
 800d26c:	0018      	movs	r0, r3
 800d26e:	f019 f8b9 	bl	80263e4 <puts>
      printf("e - show EEPROM\r\n");
 800d272:	4b20      	ldr	r3, [pc, #128]	@ (800d2f4 <check_cli_command+0x134>)
 800d274:	0018      	movs	r0, r3
 800d276:	f019 f8b5 	bl	80263e4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d27a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2f8 <check_cli_command+0x138>)
 800d27c:	0018      	movs	r0, r3
 800d27e:	f019 f8b1 	bl	80263e4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d282:	4b1e      	ldr	r3, [pc, #120]	@ (800d2fc <check_cli_command+0x13c>)
 800d284:	0018      	movs	r0, r3
 800d286:	f019 f8ad 	bl	80263e4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d28a:	4b1d      	ldr	r3, [pc, #116]	@ (800d300 <check_cli_command+0x140>)
 800d28c:	0018      	movs	r0, r3
 800d28e:	f019 f8a9 	bl	80263e4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d292:	4b1c      	ldr	r3, [pc, #112]	@ (800d304 <check_cli_command+0x144>)
 800d294:	0018      	movs	r0, r3
 800d296:	f019 f8a5 	bl	80263e4 <puts>
      printf("s - Start particle measurement\r\n");
 800d29a:	4b1b      	ldr	r3, [pc, #108]	@ (800d308 <check_cli_command+0x148>)
 800d29c:	0018      	movs	r0, r3
 800d29e:	f019 f8a1 	bl	80263e4 <puts>
      printf("t - Show actual system time\r\n");
 800d2a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d30c <check_cli_command+0x14c>)
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f019 f89d 	bl	80263e4 <puts>
      printf("u - USB logging toggle\r\n");
 800d2aa:	4b19      	ldr	r3, [pc, #100]	@ (800d310 <check_cli_command+0x150>)
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f019 f899 	bl	80263e4 <puts>
      printf("v - Show system version\r\n");
 800d2b2:	4b18      	ldr	r3, [pc, #96]	@ (800d314 <check_cli_command+0x154>)
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	f019 f895 	bl	80263e4 <puts>
  break;
 800d2ba:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d2bc:	4b02      	ldr	r3, [pc, #8]	@ (800d2c8 <check_cli_command+0x108>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	701a      	strb	r2, [r3, #0]
}
 800d2c2:	46c0      	nop			@ (mov r8, r8)
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20001100 	.word	0x20001100
 800d2cc:	0802e4c4 	.word	0x0802e4c4
 800d2d0:	0802c874 	.word	0x0802c874
 800d2d4:	0802c890 	.word	0x0802c890
 800d2d8:	0802c8ac 	.word	0x0802c8ac
 800d2dc:	0802c8cc 	.word	0x0802c8cc
 800d2e0:	200011cc 	.word	0x200011cc
 800d2e4:	200010f7 	.word	0x200010f7
 800d2e8:	0802c8e8 	.word	0x0802c8e8
 800d2ec:	0802c918 	.word	0x0802c918
 800d2f0:	0802c934 	.word	0x0802c934
 800d2f4:	0802c954 	.word	0x0802c954
 800d2f8:	0802c968 	.word	0x0802c968
 800d2fc:	0802c98c 	.word	0x0802c98c
 800d300:	0802c9ac 	.word	0x0802c9ac
 800d304:	0802c9d0 	.word	0x0802c9d0
 800d308:	0802c9f0 	.word	0x0802c9f0
 800d30c:	0802ca10 	.word	0x0802ca10
 800d310:	0802ca30 	.word	0x0802ca30
 800d314:	0802ca48 	.word	0x0802ca48

0800d318 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d320:	4907      	ldr	r1, [pc, #28]	@ (800d340 <HAL_UART_RxCpltCallback+0x28>)
 800d322:	4b08      	ldr	r3, [pc, #32]	@ (800d344 <HAL_UART_RxCpltCallback+0x2c>)
 800d324:	2201      	movs	r2, #1
 800d326:	0018      	movs	r0, r3
 800d328:	f010 f910 	bl	801d54c <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d32c:	4904      	ldr	r1, [pc, #16]	@ (800d340 <HAL_UART_RxCpltCallback+0x28>)
 800d32e:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <HAL_UART_RxCpltCallback+0x2c>)
 800d330:	2201      	movs	r2, #1
 800d332:	0018      	movs	r0, r3
 800d334:	f010 f90a 	bl	801d54c <HAL_UART_Receive_IT>
}
 800d338:	46c0      	nop			@ (mov r8, r8)
 800d33a:	46bd      	mov	sp, r7
 800d33c:	b002      	add	sp, #8
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20001100 	.word	0x20001100
 800d344:	200022e4 	.word	0x200022e4

0800d348 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	0002      	movs	r2, r0
 800d350:	1dbb      	adds	r3, r7, #6
 800d352:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d354:	1dbb      	adds	r3, r7, #6
 800d356:	881a      	ldrh	r2, [r3, #0]
 800d358:	2380      	movs	r3, #128	@ 0x80
 800d35a:	021b      	lsls	r3, r3, #8
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d10b      	bne.n	800d378 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d360:	f005 ffa0 	bl	80132a4 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d364:	f000 f860 	bl	800d428 <GetPMSensorPresence>
 800d368:	1e03      	subs	r3, r0, #0
 800d36a:	d005      	beq.n	800d378 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d36c:	4b04      	ldr	r3, [pc, #16]	@ (800d380 <HAL_GPIO_EXTI_Callback+0x38>)
 800d36e:	2201      	movs	r2, #1
 800d370:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d372:	2000      	movs	r0, #0
 800d374:	f001 f8f6 	bl	800e564 <sen5x_Set_sen5x_state>
    }
  }
}
 800d378:	46c0      	nop			@ (mov r8, r8)
 800d37a:	46bd      	mov	sp, r7
 800d37c:	b002      	add	sp, #8
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	20001118 	.word	0x20001118

0800d384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d388:	f005 fb76 	bl	8012a78 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d38c:	b672      	cpsid	i
}
 800d38e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d390:	4a05      	ldr	r2, [pc, #20]	@ (800d3a8 <Error_Handler+0x24>)
 800d392:	4b06      	ldr	r3, [pc, #24]	@ (800d3ac <Error_Handler+0x28>)
 800d394:	0019      	movs	r1, r3
 800d396:	2001      	movs	r0, #1
 800d398:	f006 fd06 	bl	8013da8 <CreateLine>

    HAL_Delay(2500);
 800d39c:	4b04      	ldr	r3, [pc, #16]	@ (800d3b0 <Error_Handler+0x2c>)
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f007 fa98 	bl	80148d4 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d3a4:	46c0      	nop			@ (mov r8, r8)
 800d3a6:	e7f3      	b.n	800d390 <Error_Handler+0xc>
 800d3a8:	0802ca64 	.word	0x0802ca64
 800d3ac:	0802c748 	.word	0x0802c748
 800d3b0:	000009c4 	.word	0x000009c4

0800d3b4 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d3b8:	4b19      	ldr	r3, [pc, #100]	@ (800d420 <testInit+0x6c>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d3be:	4b18      	ldr	r3, [pc, #96]	@ (800d420 <testInit+0x6c>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d3c4:	4b16      	ldr	r3, [pc, #88]	@ (800d420 <testInit+0x6c>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d3ca:	4b15      	ldr	r3, [pc, #84]	@ (800d420 <testInit+0x6c>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d3d0:	4b13      	ldr	r3, [pc, #76]	@ (800d420 <testInit+0x6c>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d3d6:	4b12      	ldr	r3, [pc, #72]	@ (800d420 <testInit+0x6c>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d3dc:	4b10      	ldr	r3, [pc, #64]	@ (800d420 <testInit+0x6c>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d3e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d420 <testInit+0x6c>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d3e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d420 <testInit+0x6c>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d424 <testInit+0x70>)
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d424 <testInit+0x70>)
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d3fa:	4b0a      	ldr	r3, [pc, #40]	@ (800d424 <testInit+0x70>)
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d400:	4b08      	ldr	r3, [pc, #32]	@ (800d424 <testInit+0x70>)
 800d402:	2201      	movs	r2, #1
 800d404:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d406:	4b07      	ldr	r3, [pc, #28]	@ (800d424 <testInit+0x70>)
 800d408:	2201      	movs	r2, #1
 800d40a:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d40c:	4b05      	ldr	r3, [pc, #20]	@ (800d424 <testInit+0x70>)
 800d40e:	2201      	movs	r2, #1
 800d410:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d412:	4b04      	ldr	r3, [pc, #16]	@ (800d424 <testInit+0x70>)
 800d414:	2201      	movs	r2, #1
 800d416:	719a      	strb	r2, [r3, #6]
}
 800d418:	46c0      	nop			@ (mov r8, r8)
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	46c0      	nop			@ (mov r8, r8)
 800d420:	20001120 	.word	0x20001120
 800d424:	20001118 	.word	0x20001118

0800d428 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d42c:	4b02      	ldr	r3, [pc, #8]	@ (800d438 <GetPMSensorPresence+0x10>)
 800d42e:	795b      	ldrb	r3, [r3, #5]
}
 800d430:	0018      	movs	r0, r3
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	46c0      	nop			@ (mov r8, r8)
 800d438:	20001120 	.word	0x20001120

0800d43c <DisablePMSensor>:

void DisablePMSensor() {
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d440:	4b02      	ldr	r3, [pc, #8]	@ (800d44c <DisablePMSensor+0x10>)
 800d442:	2200      	movs	r2, #0
 800d444:	715a      	strb	r2, [r3, #5]
}
 800d446:	46c0      	nop			@ (mov r8, r8)
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	20001120 	.word	0x20001120

0800d450 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d454:	4b02      	ldr	r3, [pc, #8]	@ (800d460 <IsAHT20SensorPresent+0x10>)
 800d456:	789b      	ldrb	r3, [r3, #2]
}
 800d458:	0018      	movs	r0, r3
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	46c0      	nop			@ (mov r8, r8)
 800d460:	20001120 	.word	0x20001120

0800d464 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d464:	b580      	push	{r7, lr}
 800d466:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d468:	4b02      	ldr	r3, [pc, #8]	@ (800d474 <IsBMP280SensorPresent+0x10>)
 800d46a:	791b      	ldrb	r3, [r3, #4]
}
 800d46c:	0018      	movs	r0, r3
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	46c0      	nop			@ (mov r8, r8)
 800d474:	20001120 	.word	0x20001120

0800d478 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d47c:	4b02      	ldr	r3, [pc, #8]	@ (800d488 <IsENS160SensorPresent+0x10>)
 800d47e:	78db      	ldrb	r3, [r3, #3]
}
 800d480:	0018      	movs	r0, r3
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	46c0      	nop			@ (mov r8, r8)
 800d488:	20001120 	.word	0x20001120

0800d48c <IsSGPPresent>:

bool IsSGPPresent() {
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d490:	4b02      	ldr	r3, [pc, #8]	@ (800d49c <IsSGPPresent+0x10>)
 800d492:	785b      	ldrb	r3, [r3, #1]
}
 800d494:	0018      	movs	r0, r3
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	46c0      	nop			@ (mov r8, r8)
 800d49c:	20001120 	.word	0x20001120

0800d4a0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	0002      	movs	r2, r0
 800d4a8:	1dfb      	adds	r3, r7, #7
 800d4aa:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d4dc <SetVOCSensorDIS_ENA+0x3c>)
 800d4ae:	1dfa      	adds	r2, r7, #7
 800d4b0:	7812      	ldrb	r2, [r2, #0]
 800d4b2:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e0 <SetVOCSensorDIS_ENA+0x40>)
 800d4b6:	1dfa      	adds	r2, r7, #7
 800d4b8:	7812      	ldrb	r2, [r2, #0]
 800d4ba:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d4bc:	1dfb      	adds	r3, r7, #7
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <SetVOCSensorDIS_ENA+0x28>
 800d4c4:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <SetVOCSensorDIS_ENA+0x44>)
 800d4c6:	e000      	b.n	800d4ca <SetVOCSensorDIS_ENA+0x2a>
 800d4c8:	4b07      	ldr	r3, [pc, #28]	@ (800d4e8 <SetVOCSensorDIS_ENA+0x48>)
 800d4ca:	4a08      	ldr	r2, [pc, #32]	@ (800d4ec <SetVOCSensorDIS_ENA+0x4c>)
 800d4cc:	4908      	ldr	r1, [pc, #32]	@ (800d4f0 <SetVOCSensorDIS_ENA+0x50>)
 800d4ce:	2003      	movs	r0, #3
 800d4d0:	f006 fc6a 	bl	8013da8 <CreateLine>
}
 800d4d4:	46c0      	nop			@ (mov r8, r8)
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	b002      	add	sp, #8
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20001120 	.word	0x20001120
 800d4e0:	20001118 	.word	0x20001118
 800d4e4:	0802ca90 	.word	0x0802ca90
 800d4e8:	0802ca98 	.word	0x0802ca98
 800d4ec:	0802caa4 	.word	0x0802caa4
 800d4f0:	0802cab8 	.word	0x0802cab8

0800d4f4 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d4f8:	4b02      	ldr	r3, [pc, #8]	@ (800d504 <IsPMSensorEnabled+0x10>)
 800d4fa:	789b      	ldrb	r3, [r3, #2]
}
 800d4fc:	0018      	movs	r0, r3
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	46c0      	nop			@ (mov r8, r8)
 800d504:	20001118 	.word	0x20001118

0800d508 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	0002      	movs	r2, r0
 800d510:	1dfb      	adds	r3, r7, #7
 800d512:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d514:	4b05      	ldr	r3, [pc, #20]	@ (800d52c <SetVOCSensorStatus+0x24>)
 800d516:	7a1b      	ldrb	r3, [r3, #8]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d51c:	4b04      	ldr	r3, [pc, #16]	@ (800d530 <SetVOCSensorStatus+0x28>)
 800d51e:	1dfa      	adds	r2, r7, #7
 800d520:	7812      	ldrb	r2, [r2, #0]
 800d522:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d524:	46c0      	nop			@ (mov r8, r8)
 800d526:	46bd      	mov	sp, r7
 800d528:	b002      	add	sp, #8
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20001120 	.word	0x20001120
 800d530:	20001118 	.word	0x20001118

0800d534 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	0002      	movs	r2, r0
 800d53c:	1dfb      	adds	r3, r7, #7
 800d53e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d540:	4b03      	ldr	r3, [pc, #12]	@ (800d550 <SetPMSensorStatus+0x1c>)
 800d542:	1dfa      	adds	r2, r7, #7
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	709a      	strb	r2, [r3, #2]
}
 800d548:	46c0      	nop			@ (mov r8, r8)
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b002      	add	sp, #8
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20001118 	.word	0x20001118

0800d554 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d558:	4b02      	ldr	r3, [pc, #8]	@ (800d564 <SetESPMeasurementDone+0x10>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	71da      	strb	r2, [r3, #7]
}
 800d55e:	46c0      	nop			@ (mov r8, r8)
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	20001120 	.word	0x20001120

0800d568 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
 800d574:	603b      	str	r3, [r7, #0]
  testInit();
 800d576:	f7ff ff1d 	bl	800d3b4 <testInit>
  I2CSensors_Init(sensorI2C);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	0018      	movs	r0, r3
 800d57e:	f7fa fe13 	bl	80081a8 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d582:	f006 ff29 	bl	80143d8 <HIDS_DeviceConnected>
 800d586:	0003      	movs	r3, r0
 800d588:	001a      	movs	r2, r3
 800d58a:	2301      	movs	r3, #1
 800d58c:	4053      	eors	r3, r2
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00c      	beq.n	800d5ae <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d594:	4abf      	ldr	r2, [pc, #764]	@ (800d894 <Device_Init+0x32c>)
 800d596:	4bc0      	ldr	r3, [pc, #768]	@ (800d898 <Device_Init+0x330>)
 800d598:	0019      	movs	r1, r3
 800d59a:	2001      	movs	r0, #1
 800d59c:	f006 fc04 	bl	8013da8 <CreateLine>
     SensorProbe.HT_Present = false;
 800d5a0:	4bbe      	ldr	r3, [pc, #760]	@ (800d89c <Device_Init+0x334>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d5a6:	4bbe      	ldr	r3, [pc, #760]	@ (800d8a0 <Device_Init+0x338>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	701a      	strb	r2, [r3, #0]
 800d5ac:	e008      	b.n	800d5c0 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d5ae:	4bbb      	ldr	r3, [pc, #748]	@ (800d89c <Device_Init+0x334>)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d5b4:	4abb      	ldr	r2, [pc, #748]	@ (800d8a4 <Device_Init+0x33c>)
 800d5b6:	4bbc      	ldr	r3, [pc, #752]	@ (800d8a8 <Device_Init+0x340>)
 800d5b8:	0019      	movs	r1, r3
 800d5ba:	2003      	movs	r0, #3
 800d5bc:	f006 fbf4 	bl	8013da8 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d5c0:	f7fe f950 	bl	800b864 <BMP280_DeviceConnected>
 800d5c4:	0003      	movs	r3, r0
 800d5c6:	001a      	movs	r2, r3
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	4053      	eors	r3, r2
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00c      	beq.n	800d5ec <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d5d2:	4ab6      	ldr	r2, [pc, #728]	@ (800d8ac <Device_Init+0x344>)
 800d5d4:	4bb0      	ldr	r3, [pc, #704]	@ (800d898 <Device_Init+0x330>)
 800d5d6:	0019      	movs	r1, r3
 800d5d8:	2001      	movs	r0, #1
 800d5da:	f006 fbe5 	bl	8013da8 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d5de:	4baf      	ldr	r3, [pc, #700]	@ (800d89c <Device_Init+0x334>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d5e4:	4bae      	ldr	r3, [pc, #696]	@ (800d8a0 <Device_Init+0x338>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	715a      	strb	r2, [r3, #5]
 800d5ea:	e008      	b.n	800d5fe <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d5ec:	4bab      	ldr	r3, [pc, #684]	@ (800d89c <Device_Init+0x334>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d5f2:	4aaf      	ldr	r2, [pc, #700]	@ (800d8b0 <Device_Init+0x348>)
 800d5f4:	4bac      	ldr	r3, [pc, #688]	@ (800d8a8 <Device_Init+0x340>)
 800d5f6:	0019      	movs	r1, r3
 800d5f8:	2003      	movs	r0, #3
 800d5fa:	f006 fbd5 	bl	8013da8 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d5fe:	f003 fd99 	bl	8011134 <SGP_DeviceConnected>
 800d602:	0003      	movs	r3, r0
 800d604:	001a      	movs	r2, r3
 800d606:	2301      	movs	r3, #1
 800d608:	4053      	eors	r3, r2
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00c      	beq.n	800d62a <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d610:	4ba2      	ldr	r3, [pc, #648]	@ (800d89c <Device_Init+0x334>)
 800d612:	2200      	movs	r2, #0
 800d614:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d616:	4aa7      	ldr	r2, [pc, #668]	@ (800d8b4 <Device_Init+0x34c>)
 800d618:	4b9f      	ldr	r3, [pc, #636]	@ (800d898 <Device_Init+0x330>)
 800d61a:	0019      	movs	r1, r3
 800d61c:	2001      	movs	r0, #1
 800d61e:	f006 fbc3 	bl	8013da8 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d622:	4b9f      	ldr	r3, [pc, #636]	@ (800d8a0 <Device_Init+0x338>)
 800d624:	2200      	movs	r2, #0
 800d626:	705a      	strb	r2, [r3, #1]
 800d628:	e00b      	b.n	800d642 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d62a:	4b9c      	ldr	r3, [pc, #624]	@ (800d89c <Device_Init+0x334>)
 800d62c:	2201      	movs	r2, #1
 800d62e:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d630:	4b9a      	ldr	r3, [pc, #616]	@ (800d89c <Device_Init+0x334>)
 800d632:	2201      	movs	r2, #1
 800d634:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d636:	4aa0      	ldr	r2, [pc, #640]	@ (800d8b8 <Device_Init+0x350>)
 800d638:	4b9b      	ldr	r3, [pc, #620]	@ (800d8a8 <Device_Init+0x340>)
 800d63a:	0019      	movs	r1, r3
 800d63c:	2003      	movs	r0, #3
 800d63e:	f006 fbb3 	bl	8013da8 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d642:	f7f6 fc11 	bl	8003e68 <ENS_DeviceConnected>
 800d646:	0003      	movs	r3, r0
 800d648:	001a      	movs	r2, r3
 800d64a:	2301      	movs	r3, #1
 800d64c:	4053      	eors	r3, r2
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00c      	beq.n	800d66e <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d654:	4b91      	ldr	r3, [pc, #580]	@ (800d89c <Device_Init+0x334>)
 800d656:	2200      	movs	r2, #0
 800d658:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d65a:	4a98      	ldr	r2, [pc, #608]	@ (800d8bc <Device_Init+0x354>)
 800d65c:	4b8e      	ldr	r3, [pc, #568]	@ (800d898 <Device_Init+0x330>)
 800d65e:	0019      	movs	r1, r3
 800d660:	2001      	movs	r0, #1
 800d662:	f006 fba1 	bl	8013da8 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d666:	4b8e      	ldr	r3, [pc, #568]	@ (800d8a0 <Device_Init+0x338>)
 800d668:	2200      	movs	r2, #0
 800d66a:	719a      	strb	r2, [r3, #6]
 800d66c:	e008      	b.n	800d680 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d66e:	4b8b      	ldr	r3, [pc, #556]	@ (800d89c <Device_Init+0x334>)
 800d670:	2201      	movs	r2, #1
 800d672:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d674:	4a92      	ldr	r2, [pc, #584]	@ (800d8c0 <Device_Init+0x358>)
 800d676:	4b8c      	ldr	r3, [pc, #560]	@ (800d8a8 <Device_Init+0x340>)
 800d678:	0019      	movs	r1, r3
 800d67a:	2003      	movs	r0, #3
 800d67c:	f006 fb94 	bl	8013da8 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d680:	f7fd fd2e 	bl	800b0e0 <AHT20_DeviceConnected>
 800d684:	0003      	movs	r3, r0
 800d686:	001a      	movs	r2, r3
 800d688:	2301      	movs	r3, #1
 800d68a:	4053      	eors	r3, r2
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00c      	beq.n	800d6ac <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d692:	4a8c      	ldr	r2, [pc, #560]	@ (800d8c4 <Device_Init+0x35c>)
 800d694:	4b80      	ldr	r3, [pc, #512]	@ (800d898 <Device_Init+0x330>)
 800d696:	0019      	movs	r1, r3
 800d698:	2001      	movs	r0, #1
 800d69a:	f006 fb85 	bl	8013da8 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d69e:	4b7f      	ldr	r3, [pc, #508]	@ (800d89c <Device_Init+0x334>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d6a4:	4b7e      	ldr	r3, [pc, #504]	@ (800d8a0 <Device_Init+0x338>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	711a      	strb	r2, [r3, #4]
 800d6aa:	e008      	b.n	800d6be <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d6ac:	4b7b      	ldr	r3, [pc, #492]	@ (800d89c <Device_Init+0x334>)
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d6b2:	4a85      	ldr	r2, [pc, #532]	@ (800d8c8 <Device_Init+0x360>)
 800d6b4:	4b7c      	ldr	r3, [pc, #496]	@ (800d8a8 <Device_Init+0x340>)
 800d6b6:	0019      	movs	r1, r3
 800d6b8:	2003      	movs	r0, #3
 800d6ba:	f006 fb75 	bl	8013da8 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d6be:	4b77      	ldr	r3, [pc, #476]	@ (800d89c <Device_Init+0x334>)
 800d6c0:	785b      	ldrb	r3, [r3, #1]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d009      	beq.n	800d6da <Device_Init+0x172>
 800d6c6:	4b75      	ldr	r3, [pc, #468]	@ (800d89c <Device_Init+0x334>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d005      	beq.n	800d6da <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	f005 f874 	bl	80127c0 <SetDBLED>
 800d6d8:	e018      	b.n	800d70c <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	2001      	movs	r0, #1
 800d6e0:	f005 f86e 	bl	80127c0 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d6e4:	4b79      	ldr	r3, [pc, #484]	@ (800d8cc <Device_Init+0x364>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	f008 fb4f 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d6f0:	2380      	movs	r3, #128	@ 0x80
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	4875      	ldr	r0, [pc, #468]	@ (800d8cc <Device_Init+0x364>)
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	0019      	movs	r1, r3
 800d6fa:	f008 fb48 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d6fe:	2380      	movs	r3, #128	@ 0x80
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4872      	ldr	r0, [pc, #456]	@ (800d8cc <Device_Init+0x364>)
 800d704:	2201      	movs	r2, #1
 800d706:	0019      	movs	r1, r3
 800d708:	f008 fb41 	bl	8015d8e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d70c:	4b64      	ldr	r3, [pc, #400]	@ (800d8a0 <Device_Init+0x338>)
 800d70e:	78db      	ldrb	r3, [r3, #3]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d028      	beq.n	800d766 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d714:	4a6e      	ldr	r2, [pc, #440]	@ (800d8d0 <Device_Init+0x368>)
 800d716:	4b6f      	ldr	r3, [pc, #444]	@ (800d8d4 <Device_Init+0x36c>)
 800d718:	0019      	movs	r1, r3
 800d71a:	2002      	movs	r0, #2
 800d71c:	f006 fb44 	bl	8013da8 <CreateLine>
    if (!enableMicrophone(true)) {
 800d720:	2001      	movs	r0, #1
 800d722:	f004 f937 	bl	8011994 <enableMicrophone>
 800d726:	0003      	movs	r3, r0
 800d728:	001a      	movs	r2, r3
 800d72a:	2301      	movs	r3, #1
 800d72c:	4053      	eors	r3, r2
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00c      	beq.n	800d74e <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d734:	4a68      	ldr	r2, [pc, #416]	@ (800d8d8 <Device_Init+0x370>)
 800d736:	4b58      	ldr	r3, [pc, #352]	@ (800d898 <Device_Init+0x330>)
 800d738:	0019      	movs	r1, r3
 800d73a:	2001      	movs	r0, #1
 800d73c:	f006 fb34 	bl	8013da8 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d740:	4b56      	ldr	r3, [pc, #344]	@ (800d89c <Device_Init+0x334>)
 800d742:	2200      	movs	r2, #0
 800d744:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d746:	4b56      	ldr	r3, [pc, #344]	@ (800d8a0 <Device_Init+0x338>)
 800d748:	2200      	movs	r2, #0
 800d74a:	70da      	strb	r2, [r3, #3]
 800d74c:	e00b      	b.n	800d766 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d74e:	4b53      	ldr	r3, [pc, #332]	@ (800d89c <Device_Init+0x334>)
 800d750:	2201      	movs	r2, #1
 800d752:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d754:	4b52      	ldr	r3, [pc, #328]	@ (800d8a0 <Device_Init+0x338>)
 800d756:	2201      	movs	r2, #1
 800d758:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d75a:	4a60      	ldr	r2, [pc, #384]	@ (800d8dc <Device_Init+0x374>)
 800d75c:	4b52      	ldr	r3, [pc, #328]	@ (800d8a8 <Device_Init+0x340>)
 800d75e:	0019      	movs	r1, r3
 800d760:	2003      	movs	r0, #3
 800d762:	f006 fb21 	bl	8013da8 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d766:	f000 fff1 	bl	800e74c <probe_sen5x>
 800d76a:	1e03      	subs	r3, r0, #0
 800d76c:	d122      	bne.n	800d7b4 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d76e:	4a5c      	ldr	r2, [pc, #368]	@ (800d8e0 <Device_Init+0x378>)
 800d770:	4b4d      	ldr	r3, [pc, #308]	@ (800d8a8 <Device_Init+0x340>)
 800d772:	0019      	movs	r1, r3
 800d774:	2003      	movs	r0, #3
 800d776:	f006 fb17 	bl	8013da8 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d77a:	4b48      	ldr	r3, [pc, #288]	@ (800d89c <Device_Init+0x334>)
 800d77c:	2201      	movs	r2, #1
 800d77e:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d780:	4b47      	ldr	r3, [pc, #284]	@ (800d8a0 <Device_Init+0x338>)
 800d782:	2201      	movs	r2, #1
 800d784:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d786:	4b57      	ldr	r3, [pc, #348]	@ (800d8e4 <Device_Init+0x37c>)
 800d788:	791b      	ldrb	r3, [r3, #4]
 800d78a:	2b34      	cmp	r3, #52	@ 0x34
 800d78c:	d003      	beq.n	800d796 <Device_Init+0x22e>
 800d78e:	4b55      	ldr	r3, [pc, #340]	@ (800d8e4 <Device_Init+0x37c>)
 800d790:	791b      	ldrb	r3, [r3, #4]
 800d792:	2b35      	cmp	r3, #53	@ 0x35
 800d794:	d11c      	bne.n	800d7d0 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d796:	4a54      	ldr	r2, [pc, #336]	@ (800d8e8 <Device_Init+0x380>)
 800d798:	4b4e      	ldr	r3, [pc, #312]	@ (800d8d4 <Device_Init+0x36c>)
 800d79a:	0019      	movs	r1, r3
 800d79c:	2002      	movs	r0, #2
 800d79e:	f006 fb03 	bl	8013da8 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d7a2:	4b3f      	ldr	r3, [pc, #252]	@ (800d8a0 <Device_Init+0x338>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d7a8:	4b3c      	ldr	r3, [pc, #240]	@ (800d89c <Device_Init+0x334>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d7ae:	f003 fea7 	bl	8011500 <SGP_SoftReset>
 800d7b2:	e00d      	b.n	800d7d0 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d7b4:	f000 ff94 	bl	800e6e0 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d7b8:	4a4c      	ldr	r2, [pc, #304]	@ (800d8ec <Device_Init+0x384>)
 800d7ba:	4b3b      	ldr	r3, [pc, #236]	@ (800d8a8 <Device_Init+0x340>)
 800d7bc:	0019      	movs	r1, r3
 800d7be:	2003      	movs	r0, #3
 800d7c0:	f006 faf2 	bl	8013da8 <CreateLine>
    SensorProbe.PM_Present = false;
 800d7c4:	4b35      	ldr	r3, [pc, #212]	@ (800d89c <Device_Init+0x334>)
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d7ca:	4b35      	ldr	r3, [pc, #212]	@ (800d8a0 <Device_Init+0x338>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d7d0:	4b32      	ldr	r3, [pc, #200]	@ (800d89c <Device_Init+0x334>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <Device_Init+0x274>
 800d7d8:	4b45      	ldr	r3, [pc, #276]	@ (800d8f0 <Device_Init+0x388>)
 800d7da:	e000      	b.n	800d7de <Device_Init+0x276>
 800d7dc:	4b45      	ldr	r3, [pc, #276]	@ (800d8f4 <Device_Init+0x38c>)
 800d7de:	4a46      	ldr	r2, [pc, #280]	@ (800d8f8 <Device_Init+0x390>)
 800d7e0:	493c      	ldr	r1, [pc, #240]	@ (800d8d4 <Device_Init+0x36c>)
 800d7e2:	2002      	movs	r0, #2
 800d7e4:	f006 fae0 	bl	8013da8 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d7e8:	4b2c      	ldr	r3, [pc, #176]	@ (800d89c <Device_Init+0x334>)
 800d7ea:	785b      	ldrb	r3, [r3, #1]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <Device_Init+0x28c>
 800d7f0:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f0 <Device_Init+0x388>)
 800d7f2:	e000      	b.n	800d7f6 <Device_Init+0x28e>
 800d7f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f4 <Device_Init+0x38c>)
 800d7f6:	4a41      	ldr	r2, [pc, #260]	@ (800d8fc <Device_Init+0x394>)
 800d7f8:	4936      	ldr	r1, [pc, #216]	@ (800d8d4 <Device_Init+0x36c>)
 800d7fa:	2002      	movs	r0, #2
 800d7fc:	f006 fad4 	bl	8013da8 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d800:	4b26      	ldr	r3, [pc, #152]	@ (800d89c <Device_Init+0x334>)
 800d802:	789b      	ldrb	r3, [r3, #2]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <Device_Init+0x2a4>
 800d808:	4b39      	ldr	r3, [pc, #228]	@ (800d8f0 <Device_Init+0x388>)
 800d80a:	e000      	b.n	800d80e <Device_Init+0x2a6>
 800d80c:	4b39      	ldr	r3, [pc, #228]	@ (800d8f4 <Device_Init+0x38c>)
 800d80e:	4a3c      	ldr	r2, [pc, #240]	@ (800d900 <Device_Init+0x398>)
 800d810:	4930      	ldr	r1, [pc, #192]	@ (800d8d4 <Device_Init+0x36c>)
 800d812:	2002      	movs	r0, #2
 800d814:	f006 fac8 	bl	8013da8 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d818:	4b20      	ldr	r3, [pc, #128]	@ (800d89c <Device_Init+0x334>)
 800d81a:	791b      	ldrb	r3, [r3, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <Device_Init+0x2bc>
 800d820:	4b33      	ldr	r3, [pc, #204]	@ (800d8f0 <Device_Init+0x388>)
 800d822:	e000      	b.n	800d826 <Device_Init+0x2be>
 800d824:	4b33      	ldr	r3, [pc, #204]	@ (800d8f4 <Device_Init+0x38c>)
 800d826:	4a37      	ldr	r2, [pc, #220]	@ (800d904 <Device_Init+0x39c>)
 800d828:	492a      	ldr	r1, [pc, #168]	@ (800d8d4 <Device_Init+0x36c>)
 800d82a:	2002      	movs	r0, #2
 800d82c:	f006 fabc 	bl	8013da8 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d830:	4b1a      	ldr	r3, [pc, #104]	@ (800d89c <Device_Init+0x334>)
 800d832:	78db      	ldrb	r3, [r3, #3]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <Device_Init+0x2d4>
 800d838:	4b2d      	ldr	r3, [pc, #180]	@ (800d8f0 <Device_Init+0x388>)
 800d83a:	e000      	b.n	800d83e <Device_Init+0x2d6>
 800d83c:	4b2d      	ldr	r3, [pc, #180]	@ (800d8f4 <Device_Init+0x38c>)
 800d83e:	4a32      	ldr	r2, [pc, #200]	@ (800d908 <Device_Init+0x3a0>)
 800d840:	4924      	ldr	r1, [pc, #144]	@ (800d8d4 <Device_Init+0x36c>)
 800d842:	2002      	movs	r0, #2
 800d844:	f006 fab0 	bl	8013da8 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d848:	4b14      	ldr	r3, [pc, #80]	@ (800d89c <Device_Init+0x334>)
 800d84a:	795b      	ldrb	r3, [r3, #5]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <Device_Init+0x2ec>
 800d850:	4b27      	ldr	r3, [pc, #156]	@ (800d8f0 <Device_Init+0x388>)
 800d852:	e000      	b.n	800d856 <Device_Init+0x2ee>
 800d854:	4b27      	ldr	r3, [pc, #156]	@ (800d8f4 <Device_Init+0x38c>)
 800d856:	4a2d      	ldr	r2, [pc, #180]	@ (800d90c <Device_Init+0x3a4>)
 800d858:	491e      	ldr	r1, [pc, #120]	@ (800d8d4 <Device_Init+0x36c>)
 800d85a:	2002      	movs	r0, #2
 800d85c:	f006 faa4 	bl	8013da8 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d860:	4b0e      	ldr	r3, [pc, #56]	@ (800d89c <Device_Init+0x334>)
 800d862:	799b      	ldrb	r3, [r3, #6]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <Device_Init+0x304>
 800d868:	4b21      	ldr	r3, [pc, #132]	@ (800d8f0 <Device_Init+0x388>)
 800d86a:	e000      	b.n	800d86e <Device_Init+0x306>
 800d86c:	4b21      	ldr	r3, [pc, #132]	@ (800d8f4 <Device_Init+0x38c>)
 800d86e:	4a28      	ldr	r2, [pc, #160]	@ (800d910 <Device_Init+0x3a8>)
 800d870:	4918      	ldr	r1, [pc, #96]	@ (800d8d4 <Device_Init+0x36c>)
 800d872:	2002      	movs	r0, #2
 800d874:	f006 fa98 	bl	8013da8 <CreateLine>
  Debug("Sensors initialized, probing ESP.");
 800d878:	4a26      	ldr	r2, [pc, #152]	@ (800d914 <Device_Init+0x3ac>)
 800d87a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8a8 <Device_Init+0x340>)
 800d87c:	0019      	movs	r1, r3
 800d87e:	2003      	movs	r0, #3
 800d880:	f006 fa92 	bl	8013da8 <CreateLine>
  ESP_Init(espUart);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	0018      	movs	r0, r3
 800d888:	f7f7 fad8 	bl	8004e3c <ESP_Init>
}
 800d88c:	46c0      	nop			@ (mov r8, r8)
 800d88e:	46bd      	mov	sp, r7
 800d890:	b004      	add	sp, #16
 800d892:	bd80      	pop	{r7, pc}
 800d894:	0802cabc 	.word	0x0802cabc
 800d898:	0802caec 	.word	0x0802caec
 800d89c:	20001120 	.word	0x20001120
 800d8a0:	20001118 	.word	0x20001118
 800d8a4:	0802caf0 	.word	0x0802caf0
 800d8a8:	0802cab8 	.word	0x0802cab8
 800d8ac:	0802cb1c 	.word	0x0802cb1c
 800d8b0:	0802cb50 	.word	0x0802cb50
 800d8b4:	0802cb80 	.word	0x0802cb80
 800d8b8:	0802cb9c 	.word	0x0802cb9c
 800d8bc:	0802cbb4 	.word	0x0802cbb4
 800d8c0:	0802cbd0 	.word	0x0802cbd0
 800d8c4:	0802cbe8 	.word	0x0802cbe8
 800d8c8:	0802cc1c 	.word	0x0802cc1c
 800d8cc:	50000400 	.word	0x50000400
 800d8d0:	0802cc50 	.word	0x0802cc50
 800d8d4:	0802cc74 	.word	0x0802cc74
 800d8d8:	0802cc78 	.word	0x0802cc78
 800d8dc:	0802cca4 	.word	0x0802cca4
 800d8e0:	0802ccd0 	.word	0x0802ccd0
 800d8e4:	200011c0 	.word	0x200011c0
 800d8e8:	0802cce8 	.word	0x0802cce8
 800d8ec:	0802cd38 	.word	0x0802cd38
 800d8f0:	0802cd5c 	.word	0x0802cd5c
 800d8f4:	0802cd60 	.word	0x0802cd60
 800d8f8:	0802cd64 	.word	0x0802cd64
 800d8fc:	0802cd80 	.word	0x0802cd80
 800d900:	0802cd9c 	.word	0x0802cd9c
 800d904:	0802cdbc 	.word	0x0802cdbc
 800d908:	0802cddc 	.word	0x0802cddc
 800d90c:	0802cdfc 	.word	0x0802cdfc
 800d910:	0802ce18 	.word	0x0802ce18
 800d914:	0802ce34 	.word	0x0802ce34

0800d918 <Device_Test>:

void Device_Test(){
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d91c:	4b34      	ldr	r3, [pc, #208]	@ (800d9f0 <Device_Test+0xd8>)
 800d91e:	799b      	ldrb	r3, [r3, #6]
 800d920:	2201      	movs	r2, #1
 800d922:	4053      	eors	r3, r2
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	d027      	beq.n	800d97a <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d92a:	f000 fc41 	bl	800e1b0 <MIC_TestMeasurementDone>
 800d92e:	1e03      	subs	r3, r0, #0
 800d930:	d011      	beq.n	800d956 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d932:	4b2f      	ldr	r3, [pc, #188]	@ (800d9f0 <Device_Test+0xd8>)
 800d934:	2201      	movs	r2, #1
 800d936:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d938:	4b2e      	ldr	r3, [pc, #184]	@ (800d9f4 <Device_Test+0xdc>)
 800d93a:	2201      	movs	r2, #1
 800d93c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d93e:	f004 fec9 	bl	80126d4 <Calculate_LED_ON>
 800d942:	0003      	movs	r3, r0
 800d944:	0019      	movs	r1, r3
 800d946:	23fa      	movs	r3, #250	@ 0xfa
 800d948:	011a      	lsls	r2, r3, #4
 800d94a:	23fa      	movs	r3, #250	@ 0xfa
 800d94c:	011b      	lsls	r3, r3, #4
 800d94e:	0018      	movs	r0, r3
 800d950:	f004 ff08 	bl	8012764 <SetStatusLED>
 800d954:	e011      	b.n	800d97a <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d956:	f003 fff9 	bl	801194c <micSettlingComplete>
 800d95a:	1e03      	subs	r3, r0, #0
 800d95c:	d00d      	beq.n	800d97a <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d95e:	4b25      	ldr	r3, [pc, #148]	@ (800d9f4 <Device_Test+0xdc>)
 800d960:	2201      	movs	r2, #1
 800d962:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d964:	f004 feb6 	bl	80126d4 <Calculate_LED_ON>
 800d968:	0003      	movs	r3, r0
 800d96a:	0018      	movs	r0, r3
 800d96c:	23fa      	movs	r3, #250	@ 0xfa
 800d96e:	011a      	lsls	r2, r3, #4
 800d970:	23fa      	movs	r3, #250	@ 0xfa
 800d972:	011b      	lsls	r3, r3, #4
 800d974:	0019      	movs	r1, r3
 800d976:	f004 fef5 	bl	8012764 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d97a:	4b1d      	ldr	r3, [pc, #116]	@ (800d9f0 <Device_Test+0xd8>)
 800d97c:	79db      	ldrb	r3, [r3, #7]
 800d97e:	2201      	movs	r2, #1
 800d980:	4053      	eors	r3, r2
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d988:	f7f9 fd6e 	bl	8007468 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d98c:	4b18      	ldr	r3, [pc, #96]	@ (800d9f0 <Device_Test+0xd8>)
 800d98e:	79db      	ldrb	r3, [r3, #7]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <Device_Test+0x84>
 800d994:	4b16      	ldr	r3, [pc, #88]	@ (800d9f0 <Device_Test+0xd8>)
 800d996:	799b      	ldrb	r3, [r3, #6]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d106      	bne.n	800d9aa <Device_Test+0x92>
 800d99c:	4b16      	ldr	r3, [pc, #88]	@ (800d9f8 <Device_Test+0xe0>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	f006 f9ab 	bl	8013cfc <TimestampIsReached>
 800d9a6:	1e03      	subs	r3, r0, #0
 800d9a8:	d01f      	beq.n	800d9ea <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d9aa:	4b11      	ldr	r3, [pc, #68]	@ (800d9f0 <Device_Test+0xd8>)
 800d9ac:	79db      	ldrb	r3, [r3, #7]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <Device_Test+0x9e>
 800d9b2:	4b12      	ldr	r3, [pc, #72]	@ (800d9fc <Device_Test+0xe4>)
 800d9b4:	e000      	b.n	800d9b8 <Device_Test+0xa0>
 800d9b6:	4b12      	ldr	r3, [pc, #72]	@ (800da00 <Device_Test+0xe8>)
 800d9b8:	4a12      	ldr	r2, [pc, #72]	@ (800da04 <Device_Test+0xec>)
 800d9ba:	4913      	ldr	r1, [pc, #76]	@ (800da08 <Device_Test+0xf0>)
 800d9bc:	2002      	movs	r0, #2
 800d9be:	f006 f9f3 	bl	8013da8 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f0 <Device_Test+0xd8>)
 800d9c4:	799b      	ldrb	r3, [r3, #6]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <Device_Test+0xb6>
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d9fc <Device_Test+0xe4>)
 800d9cc:	e000      	b.n	800d9d0 <Device_Test+0xb8>
 800d9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800da00 <Device_Test+0xe8>)
 800d9d0:	4a0e      	ldr	r2, [pc, #56]	@ (800da0c <Device_Test+0xf4>)
 800d9d2:	490d      	ldr	r1, [pc, #52]	@ (800da08 <Device_Test+0xf0>)
 800d9d4:	2002      	movs	r0, #2
 800d9d6:	f006 f9e7 	bl	8013da8 <CreateLine>
    Info("Test completed");
 800d9da:	4a0d      	ldr	r2, [pc, #52]	@ (800da10 <Device_Test+0xf8>)
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800da08 <Device_Test+0xf0>)
 800d9de:	0019      	movs	r1, r3
 800d9e0:	2002      	movs	r0, #2
 800d9e2:	f006 f9e1 	bl	8013da8 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800d9e6:	f7ff f857 	bl	800ca98 <SetTestDone>
  }
}
 800d9ea:	46c0      	nop			@ (mov r8, r8)
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20001120 	.word	0x20001120
 800d9f4:	20001118 	.word	0x20001118
 800d9f8:	20001114 	.word	0x20001114
 800d9fc:	0802ce58 	.word	0x0802ce58
 800da00:	0802ce60 	.word	0x0802ce60
 800da04:	0802ce68 	.word	0x0802ce68
 800da08:	0802cc74 	.word	0x0802cc74
 800da0c:	0802ce7c 	.word	0x0802ce7c
 800da10:	0802ce90 	.word	0x0802ce90

0800da14 <AllDevicesReady>:

bool AllDevicesReady() {
 800da14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da16:	46de      	mov	lr, fp
 800da18:	4657      	mov	r7, sl
 800da1a:	464e      	mov	r6, r9
 800da1c:	4645      	mov	r5, r8
 800da1e:	b5e0      	push	{r5, r6, r7, lr}
 800da20:	b08b      	sub	sp, #44	@ 0x2c
 800da22:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800da24:	4b8a      	ldr	r3, [pc, #552]	@ (800dc50 <AllDevicesReady+0x23c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	0018      	movs	r0, r3
 800da2a:	f006 f967 	bl	8013cfc <TimestampIsReached>
 800da2e:	1e03      	subs	r3, r0, #0
 800da30:	d100      	bne.n	800da34 <AllDevicesReady+0x20>
 800da32:	e103      	b.n	800dc3c <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800da34:	4b87      	ldr	r3, [pc, #540]	@ (800dc54 <AllDevicesReady+0x240>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2201      	movs	r2, #1
 800da3a:	4053      	eors	r3, r2
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d008      	beq.n	800da54 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800da42:	4a85      	ldr	r2, [pc, #532]	@ (800dc58 <AllDevicesReady+0x244>)
 800da44:	4b85      	ldr	r3, [pc, #532]	@ (800dc5c <AllDevicesReady+0x248>)
 800da46:	0019      	movs	r1, r3
 800da48:	2003      	movs	r0, #3
 800da4a:	f006 f9ad 	bl	8013da8 <CreateLine>
      sensorsdisablereq = true;
 800da4e:	4b81      	ldr	r3, [pc, #516]	@ (800dc54 <AllDevicesReady+0x240>)
 800da50:	2201      	movs	r2, #1
 800da52:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800da54:	4b82      	ldr	r3, [pc, #520]	@ (800dc60 <AllDevicesReady+0x24c>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b06      	cmp	r3, #6
 800da5a:	d102      	bne.n	800da62 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800da5c:	4b81      	ldr	r3, [pc, #516]	@ (800dc64 <AllDevicesReady+0x250>)
 800da5e:	2200      	movs	r2, #0
 800da60:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800da62:	4b81      	ldr	r3, [pc, #516]	@ (800dc68 <AllDevicesReady+0x254>)
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	2b05      	cmp	r3, #5
 800da68:	d006      	beq.n	800da78 <AllDevicesReady+0x64>
 800da6a:	4b80      	ldr	r3, [pc, #512]	@ (800dc6c <AllDevicesReady+0x258>)
 800da6c:	789b      	ldrb	r3, [r3, #2]
 800da6e:	2201      	movs	r2, #1
 800da70:	4053      	eors	r3, r2
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800da78:	4b7a      	ldr	r3, [pc, #488]	@ (800dc64 <AllDevicesReady+0x250>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800da7e:	4b7c      	ldr	r3, [pc, #496]	@ (800dc70 <AllDevicesReady+0x25c>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d006      	beq.n	800da94 <AllDevicesReady+0x80>
 800da86:	4b79      	ldr	r3, [pc, #484]	@ (800dc6c <AllDevicesReady+0x258>)
 800da88:	791b      	ldrb	r3, [r3, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	4053      	eors	r3, r2
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800da94:	4b73      	ldr	r3, [pc, #460]	@ (800dc64 <AllDevicesReady+0x250>)
 800da96:	2200      	movs	r2, #0
 800da98:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800da9a:	4b76      	ldr	r3, [pc, #472]	@ (800dc74 <AllDevicesReady+0x260>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b08      	cmp	r3, #8
 800daa0:	d006      	beq.n	800dab0 <AllDevicesReady+0x9c>
 800daa2:	4b72      	ldr	r3, [pc, #456]	@ (800dc6c <AllDevicesReady+0x258>)
 800daa4:	78db      	ldrb	r3, [r3, #3]
 800daa6:	2201      	movs	r2, #1
 800daa8:	4053      	eors	r3, r2
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800dab0:	4b6c      	ldr	r3, [pc, #432]	@ (800dc64 <AllDevicesReady+0x250>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dab6:	4b70      	ldr	r3, [pc, #448]	@ (800dc78 <AllDevicesReady+0x264>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b07      	cmp	r3, #7
 800dabc:	d006      	beq.n	800dacc <AllDevicesReady+0xb8>
 800dabe:	4b6b      	ldr	r3, [pc, #428]	@ (800dc6c <AllDevicesReady+0x258>)
 800dac0:	7a1b      	ldrb	r3, [r3, #8]
 800dac2:	2201      	movs	r2, #1
 800dac4:	4053      	eors	r3, r2
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800dacc:	4b65      	ldr	r3, [pc, #404]	@ (800dc64 <AllDevicesReady+0x250>)
 800dace:	2200      	movs	r2, #0
 800dad0:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800dad2:	4b6a      	ldr	r3, [pc, #424]	@ (800dc7c <AllDevicesReady+0x268>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d007      	beq.n	800daea <AllDevicesReady+0xd6>
 800dada:	4b68      	ldr	r3, [pc, #416]	@ (800dc7c <AllDevicesReady+0x268>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d003      	beq.n	800daea <AllDevicesReady+0xd6>
 800dae2:	4b66      	ldr	r3, [pc, #408]	@ (800dc7c <AllDevicesReady+0x268>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800daea:	4b5e      	ldr	r3, [pc, #376]	@ (800dc64 <AllDevicesReady+0x250>)
 800daec:	2200      	movs	r2, #0
 800daee:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800daf0:	4b63      	ldr	r3, [pc, #396]	@ (800dc80 <AllDevicesReady+0x26c>)
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	2b03      	cmp	r3, #3
 800daf6:	d102      	bne.n	800dafe <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800daf8:	4b5a      	ldr	r3, [pc, #360]	@ (800dc64 <AllDevicesReady+0x250>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800dafe:	4b61      	ldr	r3, [pc, #388]	@ (800dc84 <AllDevicesReady+0x270>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b09      	cmp	r3, #9
 800db04:	d004      	beq.n	800db10 <AllDevicesReady+0xfc>
 800db06:	4b5f      	ldr	r3, [pc, #380]	@ (800dc84 <AllDevicesReady+0x270>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d000      	beq.n	800db10 <AllDevicesReady+0xfc>
 800db0e:	e095      	b.n	800dc3c <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db10:	4b54      	ldr	r3, [pc, #336]	@ (800dc64 <AllDevicesReady+0x250>)
 800db12:	781a      	ldrb	r2, [r3, #0]
 800db14:	4b53      	ldr	r3, [pc, #332]	@ (800dc64 <AllDevicesReady+0x250>)
 800db16:	785b      	ldrb	r3, [r3, #1]
 800db18:	4313      	orrs	r3, r2
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	4b51      	ldr	r3, [pc, #324]	@ (800dc64 <AllDevicesReady+0x250>)
 800db1e:	791b      	ldrb	r3, [r3, #4]
 800db20:	4313      	orrs	r3, r2
 800db22:	b2da      	uxtb	r2, r3
 800db24:	4b4f      	ldr	r3, [pc, #316]	@ (800dc64 <AllDevicesReady+0x250>)
 800db26:	795b      	ldrb	r3, [r3, #5]
 800db28:	4313      	orrs	r3, r2
 800db2a:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db2c:	4b4d      	ldr	r3, [pc, #308]	@ (800dc64 <AllDevicesReady+0x250>)
 800db2e:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db30:	4313      	orrs	r3, r2
 800db32:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800db34:	4b4b      	ldr	r3, [pc, #300]	@ (800dc64 <AllDevicesReady+0x250>)
 800db36:	789b      	ldrb	r3, [r3, #2]
 800db38:	4313      	orrs	r3, r2
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	4b49      	ldr	r3, [pc, #292]	@ (800dc64 <AllDevicesReady+0x250>)
 800db3e:	78db      	ldrb	r3, [r3, #3]
 800db40:	4313      	orrs	r3, r2
 800db42:	b2db      	uxtb	r3, r3
 800db44:	1e5a      	subs	r2, r3, #1
 800db46:	4193      	sbcs	r3, r2
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2201      	movs	r2, #1
 800db4c:	4053      	eors	r3, r2
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800db52:	1dfb      	adds	r3, r7, #7
 800db54:	701a      	strb	r2, [r3, #0]
 800db56:	781a      	ldrb	r2, [r3, #0]
 800db58:	2101      	movs	r1, #1
 800db5a:	400a      	ands	r2, r1
 800db5c:	701a      	strb	r2, [r3, #0]
      if (!status && ((prevstatus != status) || (iminute != lastminute))) {
 800db5e:	1dfb      	adds	r3, r7, #7
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2201      	movs	r2, #1
 800db64:	4053      	eors	r3, r2
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d03e      	beq.n	800dbea <AllDevicesReady+0x1d6>
 800db6c:	4b46      	ldr	r3, [pc, #280]	@ (800dc88 <AllDevicesReady+0x274>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	1dfa      	adds	r2, r7, #7
 800db72:	7812      	ldrb	r2, [r2, #0]
 800db74:	429a      	cmp	r2, r3
 800db76:	d105      	bne.n	800db84 <AllDevicesReady+0x170>
 800db78:	4b44      	ldr	r3, [pc, #272]	@ (800dc8c <AllDevicesReady+0x278>)
 800db7a:	781a      	ldrb	r2, [r3, #0]
 800db7c:	4b44      	ldr	r3, [pc, #272]	@ (800dc90 <AllDevicesReady+0x27c>)
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	d032      	beq.n	800dbea <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800db84:	4b37      	ldr	r3, [pc, #220]	@ (800dc64 <AllDevicesReady+0x250>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	469b      	mov	fp, r3
 800db8a:	4b36      	ldr	r3, [pc, #216]	@ (800dc64 <AllDevicesReady+0x250>)
 800db8c:	791b      	ldrb	r3, [r3, #4]
 800db8e:	001c      	movs	r4, r3
 800db90:	4b34      	ldr	r3, [pc, #208]	@ (800dc64 <AllDevicesReady+0x250>)
 800db92:	795b      	ldrb	r3, [r3, #5]
 800db94:	001d      	movs	r5, r3
 800db96:	4b33      	ldr	r3, [pc, #204]	@ (800dc64 <AllDevicesReady+0x250>)
 800db98:	799b      	ldrb	r3, [r3, #6]
 800db9a:	001e      	movs	r6, r3
 800db9c:	4b31      	ldr	r3, [pc, #196]	@ (800dc64 <AllDevicesReady+0x250>)
 800db9e:	785b      	ldrb	r3, [r3, #1]
 800dba0:	4698      	mov	r8, r3
 800dba2:	4b30      	ldr	r3, [pc, #192]	@ (800dc64 <AllDevicesReady+0x250>)
 800dba4:	789b      	ldrb	r3, [r3, #2]
 800dba6:	4699      	mov	r9, r3
 800dba8:	4b2e      	ldr	r3, [pc, #184]	@ (800dc64 <AllDevicesReady+0x250>)
 800dbaa:	78db      	ldrb	r3, [r3, #3]
 800dbac:	469a      	mov	sl, r3
 800dbae:	f000 f915 	bl	800dddc <getSensorLock>
 800dbb2:	0003      	movs	r3, r0
 800dbb4:	4a37      	ldr	r2, [pc, #220]	@ (800dc94 <AllDevicesReady+0x280>)
 800dbb6:	4929      	ldr	r1, [pc, #164]	@ (800dc5c <AllDevicesReady+0x248>)
 800dbb8:	9306      	str	r3, [sp, #24]
 800dbba:	4653      	mov	r3, sl
 800dbbc:	9305      	str	r3, [sp, #20]
 800dbbe:	464b      	mov	r3, r9
 800dbc0:	9304      	str	r3, [sp, #16]
 800dbc2:	4643      	mov	r3, r8
 800dbc4:	9303      	str	r3, [sp, #12]
 800dbc6:	9602      	str	r6, [sp, #8]
 800dbc8:	9501      	str	r5, [sp, #4]
 800dbca:	9400      	str	r4, [sp, #0]
 800dbcc:	465b      	mov	r3, fp
 800dbce:	2003      	movs	r0, #3
 800dbd0:	f006 f8ea 	bl	8013da8 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800dbd4:	4b2c      	ldr	r3, [pc, #176]	@ (800dc88 <AllDevicesReady+0x274>)
 800dbd6:	1dfa      	adds	r2, r7, #7
 800dbd8:	7812      	ldrb	r2, [r2, #0]
 800dbda:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800dbdc:	4b2e      	ldr	r3, [pc, #184]	@ (800dc98 <AllDevicesReady+0x284>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800dbe2:	4b2b      	ldr	r3, [pc, #172]	@ (800dc90 <AllDevicesReady+0x27c>)
 800dbe4:	781a      	ldrb	r2, [r3, #0]
 800dbe6:	4b29      	ldr	r3, [pc, #164]	@ (800dc8c <AllDevicesReady+0x278>)
 800dbe8:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800dbea:	1dfb      	adds	r3, r7, #7
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d021      	beq.n	800dc36 <AllDevicesReady+0x222>
 800dbf2:	4b29      	ldr	r3, [pc, #164]	@ (800dc98 <AllDevicesReady+0x284>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	4053      	eors	r3, r2
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d01a      	beq.n	800dc36 <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dc00:	4a26      	ldr	r2, [pc, #152]	@ (800dc9c <AllDevicesReady+0x288>)
 800dc02:	4b16      	ldr	r3, [pc, #88]	@ (800dc5c <AllDevicesReady+0x248>)
 800dc04:	0019      	movs	r1, r3
 800dc06:	2003      	movs	r0, #3
 800dc08:	f006 f8ce 	bl	8013da8 <CreateLine>
        prevstatus = status;
 800dc0c:	4b1e      	ldr	r3, [pc, #120]	@ (800dc88 <AllDevicesReady+0x274>)
 800dc0e:	1dfa      	adds	r2, r7, #7
 800dc10:	7812      	ldrb	r2, [r2, #0]
 800dc12:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dc14:	4b20      	ldr	r3, [pc, #128]	@ (800dc98 <AllDevicesReady+0x284>)
 800dc16:	2201      	movs	r2, #1
 800dc18:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dc1a:	f7fc f897 	bl	8009d4c <getDate>
 800dc1e:	0003      	movs	r3, r0
 800dc20:	001a      	movs	r2, r3
 800dc22:	4b1f      	ldr	r3, [pc, #124]	@ (800dca0 <AllDevicesReady+0x28c>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d105      	bne.n	800dc36 <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dc2a:	4a1e      	ldr	r2, [pc, #120]	@ (800dca4 <AllDevicesReady+0x290>)
 800dc2c:	4b1e      	ldr	r3, [pc, #120]	@ (800dca8 <AllDevicesReady+0x294>)
 800dc2e:	0019      	movs	r1, r3
 800dc30:	2002      	movs	r0, #2
 800dc32:	f006 f8b9 	bl	8013da8 <CreateLine>
        }

      }
      return status;
 800dc36:	1dfb      	adds	r3, r7, #7
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	e000      	b.n	800dc3e <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	0018      	movs	r0, r3
 800dc40:	46bd      	mov	sp, r7
 800dc42:	b003      	add	sp, #12
 800dc44:	bcf0      	pop	{r4, r5, r6, r7}
 800dc46:	46bb      	mov	fp, r7
 800dc48:	46b2      	mov	sl, r6
 800dc4a:	46a9      	mov	r9, r5
 800dc4c:	46a0      	mov	r8, r4
 800dc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc50:	20001114 	.word	0x20001114
 800dc54:	2000112f 	.word	0x2000112f
 800dc58:	0802cea0 	.word	0x0802cea0
 800dc5c:	0802cab8 	.word	0x0802cab8
 800dc60:	2000112b 	.word	0x2000112b
 800dc64:	20001118 	.word	0x20001118
 800dc68:	2000112c 	.word	0x2000112c
 800dc6c:	20001120 	.word	0x20001120
 800dc70:	2000112d 	.word	0x2000112d
 800dc74:	2000112e 	.word	0x2000112e
 800dc78:	2000112a 	.word	0x2000112a
 800dc7c:	200000aa 	.word	0x200000aa
 800dc80:	200010fb 	.word	0x200010fb
 800dc84:	200010fc 	.word	0x200010fc
 800dc88:	200000a8 	.word	0x200000a8
 800dc8c:	20001130 	.word	0x20001130
 800dc90:	20000e41 	.word	0x20000e41
 800dc94:	0802cec0 	.word	0x0802cec0
 800dc98:	20001131 	.word	0x20001131
 800dc9c:	0802cf24 	.word	0x0802cf24
 800dca0:	20001110 	.word	0x20001110
 800dca4:	0802cf38 	.word	0x0802cf38
 800dca8:	0802cc74 	.word	0x0802cc74

0800dcac <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dcb0:	4b25      	ldr	r3, [pc, #148]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800dcb8:	4b24      	ldr	r3, [pc, #144]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dcba:	2201      	movs	r2, #1
 800dcbc:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800dcbe:	4b22      	ldr	r3, [pc, #136]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dcc0:	789b      	ldrb	r3, [r3, #2]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <EnabledConnectedDevices+0x28>
 800dcc6:	4b22      	ldr	r3, [pc, #136]	@ (800dd50 <EnabledConnectedDevices+0xa4>)
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d002      	beq.n	800dcd4 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800dcce:	4b1f      	ldr	r3, [pc, #124]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	711a      	strb	r2, [r3, #4]
  }
//  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
//    Info("AHT2x sensor is disabled");
//  }
  if (SensorProbe.BMP280_Present) {
 800dcd4:	4b1c      	ldr	r3, [pc, #112]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dcd6:	791b      	ldrb	r3, [r3, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <EnabledConnectedDevices+0x36>
    Sensor.BMP_measurementEnabled = true;
 800dcdc:	4b1b      	ldr	r3, [pc, #108]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800dce2:	4b19      	ldr	r3, [pc, #100]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dce4:	78db      	ldrb	r3, [r3, #3]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <EnabledConnectedDevices+0x44>
    Sensor.ENS_measurementEnabled = true;
 800dcea:	4b18      	ldr	r3, [pc, #96]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dcec:	2201      	movs	r2, #1
 800dcee:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800dcf0:	4b15      	ldr	r3, [pc, #84]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d006      	beq.n	800dd06 <EnabledConnectedDevices+0x5a>
 800dcf8:	4b13      	ldr	r3, [pc, #76]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dcfa:	7a1b      	ldrb	r3, [r3, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <EnabledConnectedDevices+0x5a>
    Sensor.VOC_measurementEnabled = true;
 800dd00:	4b12      	ldr	r3, [pc, #72]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800dd06:	4b10      	ldr	r3, [pc, #64]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dd08:	795b      	ldrb	r3, [r3, #5]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <EnabledConnectedDevices+0x68>
    Sensor.PM_measurementEnabled = true;
 800dd0e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dd10:	2201      	movs	r2, #1
 800dd12:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800dd14:	4b0c      	ldr	r3, [pc, #48]	@ (800dd48 <EnabledConnectedDevices+0x9c>)
 800dd16:	799b      	ldrb	r3, [r3, #6]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <EnabledConnectedDevices+0x76>
    Sensor.MIC_measurementEnabled = true;
 800dd1c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd4c <EnabledConnectedDevices+0xa0>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800dd22:	f006 fdcd 	bl	80148c0 <HAL_GetTick>
 800dd26:	0003      	movs	r3, r0
 800dd28:	4a0a      	ldr	r2, [pc, #40]	@ (800dd54 <EnabledConnectedDevices+0xa8>)
 800dd2a:	189a      	adds	r2, r3, r2
 800dd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd58 <EnabledConnectedDevices+0xac>)
 800dd2e:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800dd30:	4b0a      	ldr	r3, [pc, #40]	@ (800dd5c <EnabledConnectedDevices+0xb0>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800dd36:	4a0a      	ldr	r2, [pc, #40]	@ (800dd60 <EnabledConnectedDevices+0xb4>)
 800dd38:	4b0a      	ldr	r3, [pc, #40]	@ (800dd64 <EnabledConnectedDevices+0xb8>)
 800dd3a:	0019      	movs	r1, r3
 800dd3c:	2003      	movs	r0, #3
 800dd3e:	f006 f833 	bl	8013da8 <CreateLine>
}
 800dd42:	46c0      	nop			@ (mov r8, r8)
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20001120 	.word	0x20001120
 800dd4c:	20001118 	.word	0x20001118
 800dd50:	2000009f 	.word	0x2000009f
 800dd54:	00124f80 	.word	0x00124f80
 800dd58:	20001114 	.word	0x20001114
 800dd5c:	2000112f 	.word	0x2000112f
 800dd60:	0802cf60 	.word	0x0802cf60
 800dd64:	0802cab8 	.word	0x0802cab8

0800dd68 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800dd72:	4b0d      	ldr	r3, [pc, #52]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800dd78:	4b0b      	ldr	r3, [pc, #44]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800dd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800dd84:	4b08      	ldr	r3, [pc, #32]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800dd8a:	4b07      	ldr	r3, [pc, #28]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800dd90:	4b05      	ldr	r3, [pc, #20]	@ (800dda8 <DisableConnectedDevices+0x40>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800dd96:	4a05      	ldr	r2, [pc, #20]	@ (800ddac <DisableConnectedDevices+0x44>)
 800dd98:	4b05      	ldr	r3, [pc, #20]	@ (800ddb0 <DisableConnectedDevices+0x48>)
 800dd9a:	0019      	movs	r1, r3
 800dd9c:	2003      	movs	r0, #3
 800dd9e:	f006 f803 	bl	8013da8 <CreateLine>
}
 800dda2:	46c0      	nop			@ (mov r8, r8)
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	20001118 	.word	0x20001118
 800ddac:	0802cf70 	.word	0x0802cf70
 800ddb0:	0802cab8 	.word	0x0802cab8

0800ddb4 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	0002      	movs	r2, r0
 800ddbc:	1dfb      	adds	r3, r7, #7
 800ddbe:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800ddc0:	4b05      	ldr	r3, [pc, #20]	@ (800ddd8 <setSensorLock+0x24>)
 800ddc2:	1dfa      	adds	r2, r7, #7
 800ddc4:	7812      	ldrb	r2, [r2, #0]
 800ddc6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800ddc8:	200a      	movs	r0, #10
 800ddca:	f006 fd83 	bl	80148d4 <HAL_Delay>
}
 800ddce:	46c0      	nop			@ (mov r8, r8)
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	b002      	add	sp, #8
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	46c0      	nop			@ (mov r8, r8)
 800ddd8:	20001129 	.word	0x20001129

0800dddc <getSensorLock>:

uint8_t getSensorLock() {
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800dde0:	4b02      	ldr	r3, [pc, #8]	@ (800ddec <getSensorLock+0x10>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
}
 800dde4:	0018      	movs	r0, r3
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	46c0      	nop			@ (mov r8, r8)
 800ddec:	20001129 	.word	0x20001129

0800ddf0 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800ddf4:	4b1a      	ldr	r3, [pc, #104]	@ (800de60 <UpkeepI2Csensors+0x70>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d005      	beq.n	800de08 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800ddfc:	f006 fbde 	bl	80145bc <HIDS_Upkeep>
 800de00:	0003      	movs	r3, r0
 800de02:	001a      	movs	r2, r3
 800de04:	4b17      	ldr	r3, [pc, #92]	@ (800de64 <UpkeepI2Csensors+0x74>)
 800de06:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800de08:	4b15      	ldr	r3, [pc, #84]	@ (800de60 <UpkeepI2Csensors+0x70>)
 800de0a:	785b      	ldrb	r3, [r3, #1]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d005      	beq.n	800de1c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800de10:	f003 fb9c 	bl	801154c <SGP_Upkeep>
 800de14:	0003      	movs	r3, r0
 800de16:	001a      	movs	r2, r3
 800de18:	4b13      	ldr	r3, [pc, #76]	@ (800de68 <UpkeepI2Csensors+0x78>)
 800de1a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800de1c:	4b10      	ldr	r3, [pc, #64]	@ (800de60 <UpkeepI2Csensors+0x70>)
 800de1e:	791b      	ldrb	r3, [r3, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d005      	beq.n	800de30 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800de24:	f7fd fafa 	bl	800b41c <AHT_Upkeep>
 800de28:	0003      	movs	r3, r0
 800de2a:	001a      	movs	r2, r3
 800de2c:	4b0f      	ldr	r3, [pc, #60]	@ (800de6c <UpkeepI2Csensors+0x7c>)
 800de2e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800de30:	4b0b      	ldr	r3, [pc, #44]	@ (800de60 <UpkeepI2Csensors+0x70>)
 800de32:	795b      	ldrb	r3, [r3, #5]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d005      	beq.n	800de44 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800de38:	f7fd ff86 	bl	800bd48 <BMP_Upkeep>
 800de3c:	0003      	movs	r3, r0
 800de3e:	001a      	movs	r2, r3
 800de40:	4b0b      	ldr	r3, [pc, #44]	@ (800de70 <UpkeepI2Csensors+0x80>)
 800de42:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800de44:	4b06      	ldr	r3, [pc, #24]	@ (800de60 <UpkeepI2Csensors+0x70>)
 800de46:	799b      	ldrb	r3, [r3, #6]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d005      	beq.n	800de58 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800de4c:	f7f6 fb04 	bl	8004458 <ENS_Upkeep>
 800de50:	0003      	movs	r3, r0
 800de52:	001a      	movs	r2, r3
 800de54:	4b07      	ldr	r3, [pc, #28]	@ (800de74 <UpkeepI2Csensors+0x84>)
 800de56:	701a      	strb	r2, [r3, #0]
  }
}
 800de58:	46c0      	nop			@ (mov r8, r8)
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	46c0      	nop			@ (mov r8, r8)
 800de60:	20001118 	.word	0x20001118
 800de64:	2000112b 	.word	0x2000112b
 800de68:	2000112a 	.word	0x2000112a
 800de6c:	2000112c 	.word	0x2000112c
 800de70:	2000112d 	.word	0x2000112d
 800de74:	2000112e 	.word	0x2000112e

0800de78 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800de78:	b580      	push	{r7, lr}
 800de7a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800de7c:	4b02      	ldr	r3, [pc, #8]	@ (800de88 <ResetdBAmax+0x10>)
 800de7e:	2200      	movs	r2, #0
 800de80:	601a      	str	r2, [r3, #0]
}
 800de82:	46c0      	nop			@ (mov r8, r8)
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	20001178 	.word	0x20001178

0800de8c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800de94:	f006 fd14 	bl	80148c0 <HAL_GetTick>
 800de98:	0002      	movs	r2, r0
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	18d2      	adds	r2, r2, r3
 800de9e:	4b03      	ldr	r3, [pc, #12]	@ (800deac <setMICTimeStamp+0x20>)
 800dea0:	601a      	str	r2, [r3, #0]
}
 800dea2:	46c0      	nop			@ (mov r8, r8)
 800dea4:	46bd      	mov	sp, r7
 800dea6:	b002      	add	sp, #8
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	46c0      	nop			@ (mov r8, r8)
 800deac:	20001180 	.word	0x20001180

0800deb0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800deb0:	b580      	push	{r7, lr}
 800deb2:	af00      	add	r7, sp, #0
  counter = 0;
 800deb4:	4b05      	ldr	r3, [pc, #20]	@ (800decc <ResetDBACalculator+0x1c>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800deba:	4b05      	ldr	r3, [pc, #20]	@ (800ded0 <ResetDBACalculator+0x20>)
 800debc:	2201      	movs	r2, #1
 800debe:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dec0:	4b04      	ldr	r3, [pc, #16]	@ (800ded4 <ResetDBACalculator+0x24>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	701a      	strb	r2, [r3, #0]
}
 800dec6:	46c0      	nop			@ (mov r8, r8)
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	2000117c 	.word	0x2000117c
 800ded0:	200000a9 	.word	0x200000a9
 800ded4:	2000117d 	.word	0x2000117d

0800ded8 <MIC_Print>:

void MIC_Print(void) {
 800ded8:	b5b0      	push	{r4, r5, r7, lr}
 800deda:	b08c      	sub	sp, #48	@ 0x30
 800dedc:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800dede:	4ba1      	ldr	r3, [pc, #644]	@ (800e164 <MIC_Print+0x28c>)
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	4ba1      	ldr	r3, [pc, #644]	@ (800e168 <MIC_Print+0x290>)
 800dee4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800dee6:	4ba1      	ldr	r3, [pc, #644]	@ (800e16c <MIC_Print+0x294>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	001a      	movs	r2, r3
 800deec:	4b9e      	ldr	r3, [pc, #632]	@ (800e168 <MIC_Print+0x290>)
 800deee:	6819      	ldr	r1, [r3, #0]
 800def0:	4b9f      	ldr	r3, [pc, #636]	@ (800e170 <MIC_Print+0x298>)
 800def2:	0092      	lsls	r2, r2, #2
 800def4:	50d1      	str	r1, [r2, r3]
  counter++;
 800def6:	4b9d      	ldr	r3, [pc, #628]	@ (800e16c <MIC_Print+0x294>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	3301      	adds	r3, #1
 800defc:	b2da      	uxtb	r2, r3
 800defe:	4b9b      	ldr	r3, [pc, #620]	@ (800e16c <MIC_Print+0x294>)
 800df00:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800df02:	4b9a      	ldr	r3, [pc, #616]	@ (800e16c <MIC_Print+0x294>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b09      	cmp	r3, #9
 800df08:	d80b      	bhi.n	800df22 <MIC_Print+0x4a>
 800df0a:	4b9a      	ldr	r3, [pc, #616]	@ (800e174 <MIC_Print+0x29c>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2201      	movs	r2, #1
 800df10:	4053      	eors	r3, r2
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <MIC_Print+0x4a>
    denominator = counter;
 800df18:	4b94      	ldr	r3, [pc, #592]	@ (800e16c <MIC_Print+0x294>)
 800df1a:	781a      	ldrb	r2, [r3, #0]
 800df1c:	4b96      	ldr	r3, [pc, #600]	@ (800e178 <MIC_Print+0x2a0>)
 800df1e:	701a      	strb	r2, [r3, #0]
 800df20:	e005      	b.n	800df2e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800df22:	4b95      	ldr	r3, [pc, #596]	@ (800e178 <MIC_Print+0x2a0>)
 800df24:	220a      	movs	r2, #10
 800df26:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800df28:	4b92      	ldr	r3, [pc, #584]	@ (800e174 <MIC_Print+0x29c>)
 800df2a:	2201      	movs	r2, #1
 800df2c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800df2e:	4b93      	ldr	r3, [pc, #588]	@ (800e17c <MIC_Print+0x2a4>)
 800df30:	2200      	movs	r2, #0
 800df32:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800df34:	230f      	movs	r3, #15
 800df36:	18fb      	adds	r3, r7, r3
 800df38:	2200      	movs	r2, #0
 800df3a:	701a      	strb	r2, [r3, #0]
 800df3c:	e042      	b.n	800dfc4 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800df3e:	240f      	movs	r4, #15
 800df40:	193b      	adds	r3, r7, r4
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	4b8a      	ldr	r3, [pc, #552]	@ (800e170 <MIC_Print+0x298>)
 800df46:	0092      	lsls	r2, r2, #2
 800df48:	58d2      	ldr	r2, [r2, r3]
 800df4a:	4b8c      	ldr	r3, [pc, #560]	@ (800e17c <MIC_Print+0x2a4>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	1c19      	adds	r1, r3, #0
 800df50:	1c10      	adds	r0, r2, #0
 800df52:	f7f2 fcb5 	bl	80008c0 <__aeabi_fadd>
 800df56:	1c03      	adds	r3, r0, #0
 800df58:	1c1a      	adds	r2, r3, #0
 800df5a:	4b88      	ldr	r3, [pc, #544]	@ (800e17c <MIC_Print+0x2a4>)
 800df5c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800df5e:	193b      	adds	r3, r7, r4
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	4b83      	ldr	r3, [pc, #524]	@ (800e170 <MIC_Print+0x298>)
 800df64:	0092      	lsls	r2, r2, #2
 800df66:	58d2      	ldr	r2, [r2, r3]
 800df68:	4b85      	ldr	r3, [pc, #532]	@ (800e180 <MIC_Print+0x2a8>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	1c19      	adds	r1, r3, #0
 800df6e:	1c10      	adds	r0, r2, #0
 800df70:	f7f2 faf2 	bl	8000558 <__aeabi_fcmpgt>
 800df74:	1e03      	subs	r3, r0, #0
 800df76:	d006      	beq.n	800df86 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800df78:	193b      	adds	r3, r7, r4
 800df7a:	781a      	ldrb	r2, [r3, #0]
 800df7c:	4b7c      	ldr	r3, [pc, #496]	@ (800e170 <MIC_Print+0x298>)
 800df7e:	0092      	lsls	r2, r2, #2
 800df80:	58d2      	ldr	r2, [r2, r3]
 800df82:	4b7f      	ldr	r3, [pc, #508]	@ (800e180 <MIC_Print+0x2a8>)
 800df84:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800df86:	4b7d      	ldr	r3, [pc, #500]	@ (800e17c <MIC_Print+0x2a4>)
 800df88:	681c      	ldr	r4, [r3, #0]
 800df8a:	4b7b      	ldr	r3, [pc, #492]	@ (800e178 <MIC_Print+0x2a0>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	0018      	movs	r0, r3
 800df90:	f7f3 fc9a 	bl	80018c8 <__aeabi_ui2f>
 800df94:	1c03      	adds	r3, r0, #0
 800df96:	1c19      	adds	r1, r3, #0
 800df98:	1c20      	adds	r0, r4, #0
 800df9a:	f7f2 fe83 	bl	8000ca4 <__aeabi_fdiv>
 800df9e:	1c03      	adds	r3, r0, #0
 800dfa0:	1c1a      	adds	r2, r3, #0
 800dfa2:	4b78      	ldr	r3, [pc, #480]	@ (800e184 <MIC_Print+0x2ac>)
 800dfa4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800dfa6:	4b70      	ldr	r3, [pc, #448]	@ (800e168 <MIC_Print+0x290>)
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	4b75      	ldr	r3, [pc, #468]	@ (800e180 <MIC_Print+0x2a8>)
 800dfac:	6819      	ldr	r1, [r3, #0]
 800dfae:	4b75      	ldr	r3, [pc, #468]	@ (800e184 <MIC_Print+0x2ac>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	1c1a      	adds	r2, r3, #0
 800dfb4:	f7f6 fdf0 	bl	8004b98 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800dfb8:	210f      	movs	r1, #15
 800dfba:	187b      	adds	r3, r7, r1
 800dfbc:	781a      	ldrb	r2, [r3, #0]
 800dfbe:	187b      	adds	r3, r7, r1
 800dfc0:	3201      	adds	r2, #1
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	4b6c      	ldr	r3, [pc, #432]	@ (800e178 <MIC_Print+0x2a0>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	220f      	movs	r2, #15
 800dfca:	18ba      	adds	r2, r7, r2
 800dfcc:	7812      	ldrb	r2, [r2, #0]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d3b5      	bcc.n	800df3e <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800dfd2:	4b65      	ldr	r3, [pc, #404]	@ (800e168 <MIC_Print+0x290>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	1c18      	adds	r0, r3, #0
 800dfd8:	f7f5 fc5c 	bl	8003894 <__aeabi_f2d>
 800dfdc:	0004      	movs	r4, r0
 800dfde:	000d      	movs	r5, r1
 800dfe0:	4b67      	ldr	r3, [pc, #412]	@ (800e180 <MIC_Print+0x2a8>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	1c18      	adds	r0, r3, #0
 800dfe6:	f7f5 fc55 	bl	8003894 <__aeabi_f2d>
 800dfea:	6038      	str	r0, [r7, #0]
 800dfec:	6079      	str	r1, [r7, #4]
 800dfee:	4b65      	ldr	r3, [pc, #404]	@ (800e184 <MIC_Print+0x2ac>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	1c18      	adds	r0, r3, #0
 800dff4:	f7f5 fc4e 	bl	8003894 <__aeabi_f2d>
 800dff8:	0002      	movs	r2, r0
 800dffa:	000b      	movs	r3, r1
 800dffc:	4862      	ldr	r0, [pc, #392]	@ (800e188 <MIC_Print+0x2b0>)
 800dffe:	4963      	ldr	r1, [pc, #396]	@ (800e18c <MIC_Print+0x2b4>)
 800e000:	9206      	str	r2, [sp, #24]
 800e002:	9307      	str	r3, [sp, #28]
 800e004:	683a      	ldr	r2, [r7, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	9204      	str	r2, [sp, #16]
 800e00a:	9305      	str	r3, [sp, #20]
 800e00c:	4b60      	ldr	r3, [pc, #384]	@ (800e190 <MIC_Print+0x2b8>)
 800e00e:	9302      	str	r3, [sp, #8]
 800e010:	9400      	str	r4, [sp, #0]
 800e012:	9501      	str	r5, [sp, #4]
 800e014:	0002      	movs	r2, r0
 800e016:	2002      	movs	r0, #2
 800e018:	f005 fec6 	bl	8013da8 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e01c:	4b53      	ldr	r3, [pc, #332]	@ (800e16c <MIC_Print+0x294>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b0a      	cmp	r3, #10
 800e022:	d902      	bls.n	800e02a <MIC_Print+0x152>
    counter = 0;
 800e024:	4b51      	ldr	r3, [pc, #324]	@ (800e16c <MIC_Print+0x294>)
 800e026:	2200      	movs	r2, #0
 800e028:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e02a:	4b4f      	ldr	r3, [pc, #316]	@ (800e168 <MIC_Print+0x290>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4959      	ldr	r1, [pc, #356]	@ (800e194 <MIC_Print+0x2bc>)
 800e030:	1c18      	adds	r0, r3, #0
 800e032:	f7f2 fa9b 	bl	800056c <__aeabi_fcmpge>
 800e036:	1e03      	subs	r3, r0, #0
 800e038:	d004      	beq.n	800e044 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e03a:	2201      	movs	r2, #1
 800e03c:	2101      	movs	r1, #1
 800e03e:	2001      	movs	r0, #1
 800e040:	f004 fbbe 	bl	80127c0 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e044:	4b48      	ldr	r3, [pc, #288]	@ (800e168 <MIC_Print+0x290>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4953      	ldr	r1, [pc, #332]	@ (800e198 <MIC_Print+0x2c0>)
 800e04a:	1c18      	adds	r0, r3, #0
 800e04c:	f7f2 fa8e 	bl	800056c <__aeabi_fcmpge>
 800e050:	1e03      	subs	r3, r0, #0
 800e052:	d00c      	beq.n	800e06e <MIC_Print+0x196>
 800e054:	4b44      	ldr	r3, [pc, #272]	@ (800e168 <MIC_Print+0x290>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	494e      	ldr	r1, [pc, #312]	@ (800e194 <MIC_Print+0x2bc>)
 800e05a:	1c18      	adds	r0, r3, #0
 800e05c:	f7f2 fa68 	bl	8000530 <__aeabi_fcmplt>
 800e060:	1e03      	subs	r3, r0, #0
 800e062:	d004      	beq.n	800e06e <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e064:	2200      	movs	r2, #0
 800e066:	2100      	movs	r1, #0
 800e068:	2001      	movs	r0, #1
 800e06a:	f004 fba9 	bl	80127c0 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e06e:	4b3e      	ldr	r3, [pc, #248]	@ (800e168 <MIC_Print+0x290>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	494a      	ldr	r1, [pc, #296]	@ (800e19c <MIC_Print+0x2c4>)
 800e074:	1c18      	adds	r0, r3, #0
 800e076:	f7f2 fa79 	bl	800056c <__aeabi_fcmpge>
 800e07a:	1e03      	subs	r3, r0, #0
 800e07c:	d00c      	beq.n	800e098 <MIC_Print+0x1c0>
 800e07e:	4b3a      	ldr	r3, [pc, #232]	@ (800e168 <MIC_Print+0x290>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4945      	ldr	r1, [pc, #276]	@ (800e198 <MIC_Print+0x2c0>)
 800e084:	1c18      	adds	r0, r3, #0
 800e086:	f7f2 fa53 	bl	8000530 <__aeabi_fcmplt>
 800e08a:	1e03      	subs	r3, r0, #0
 800e08c:	d004      	beq.n	800e098 <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e08e:	2200      	movs	r2, #0
 800e090:	2101      	movs	r1, #1
 800e092:	2001      	movs	r0, #1
 800e094:	f004 fb94 	bl	80127c0 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e098:	4b33      	ldr	r3, [pc, #204]	@ (800e168 <MIC_Print+0x290>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4940      	ldr	r1, [pc, #256]	@ (800e1a0 <MIC_Print+0x2c8>)
 800e09e:	1c18      	adds	r0, r3, #0
 800e0a0:	f7f2 fa64 	bl	800056c <__aeabi_fcmpge>
 800e0a4:	1e03      	subs	r3, r0, #0
 800e0a6:	d00c      	beq.n	800e0c2 <MIC_Print+0x1ea>
 800e0a8:	4b2f      	ldr	r3, [pc, #188]	@ (800e168 <MIC_Print+0x290>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	493b      	ldr	r1, [pc, #236]	@ (800e19c <MIC_Print+0x2c4>)
 800e0ae:	1c18      	adds	r0, r3, #0
 800e0b0:	f7f2 fa3e 	bl	8000530 <__aeabi_fcmplt>
 800e0b4:	1e03      	subs	r3, r0, #0
 800e0b6:	d004      	beq.n	800e0c2 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2101      	movs	r1, #1
 800e0bc:	2000      	movs	r0, #0
 800e0be:	f004 fb7f 	bl	80127c0 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e0c2:	4b29      	ldr	r3, [pc, #164]	@ (800e168 <MIC_Print+0x290>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4937      	ldr	r1, [pc, #220]	@ (800e1a4 <MIC_Print+0x2cc>)
 800e0c8:	1c18      	adds	r0, r3, #0
 800e0ca:	f7f2 fa4f 	bl	800056c <__aeabi_fcmpge>
 800e0ce:	1e03      	subs	r3, r0, #0
 800e0d0:	d00c      	beq.n	800e0ec <MIC_Print+0x214>
 800e0d2:	4b25      	ldr	r3, [pc, #148]	@ (800e168 <MIC_Print+0x290>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4932      	ldr	r1, [pc, #200]	@ (800e1a0 <MIC_Print+0x2c8>)
 800e0d8:	1c18      	adds	r0, r3, #0
 800e0da:	f7f2 fa29 	bl	8000530 <__aeabi_fcmplt>
 800e0de:	1e03      	subs	r3, r0, #0
 800e0e0:	d004      	beq.n	800e0ec <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f004 fb6a 	bl	80127c0 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e0ec:	4b1e      	ldr	r3, [pc, #120]	@ (800e168 <MIC_Print+0x290>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	492d      	ldr	r1, [pc, #180]	@ (800e1a8 <MIC_Print+0x2d0>)
 800e0f2:	1c18      	adds	r0, r3, #0
 800e0f4:	f7f2 fa3a 	bl	800056c <__aeabi_fcmpge>
 800e0f8:	1e03      	subs	r3, r0, #0
 800e0fa:	d00c      	beq.n	800e116 <MIC_Print+0x23e>
 800e0fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e168 <MIC_Print+0x290>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4928      	ldr	r1, [pc, #160]	@ (800e1a4 <MIC_Print+0x2cc>)
 800e102:	1c18      	adds	r0, r3, #0
 800e104:	f7f2 fa14 	bl	8000530 <__aeabi_fcmplt>
 800e108:	1e03      	subs	r3, r0, #0
 800e10a:	d004      	beq.n	800e116 <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e10c:	2201      	movs	r2, #1
 800e10e:	2100      	movs	r1, #0
 800e110:	2000      	movs	r0, #0
 800e112:	f004 fb55 	bl	80127c0 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e116:	4b14      	ldr	r3, [pc, #80]	@ (800e168 <MIC_Print+0x290>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4924      	ldr	r1, [pc, #144]	@ (800e1ac <MIC_Print+0x2d4>)
 800e11c:	1c18      	adds	r0, r3, #0
 800e11e:	f7f2 fa25 	bl	800056c <__aeabi_fcmpge>
 800e122:	1e03      	subs	r3, r0, #0
 800e124:	d00c      	beq.n	800e140 <MIC_Print+0x268>
 800e126:	4b10      	ldr	r3, [pc, #64]	@ (800e168 <MIC_Print+0x290>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	491f      	ldr	r1, [pc, #124]	@ (800e1a8 <MIC_Print+0x2d0>)
 800e12c:	1c18      	adds	r0, r3, #0
 800e12e:	f7f2 f9ff 	bl	8000530 <__aeabi_fcmplt>
 800e132:	1e03      	subs	r3, r0, #0
 800e134:	d004      	beq.n	800e140 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e136:	2201      	movs	r2, #1
 800e138:	2100      	movs	r1, #0
 800e13a:	2001      	movs	r0, #1
 800e13c:	f004 fb40 	bl	80127c0 <SetDBLED>
  }
  if(dBA < 35){//off
 800e140:	4b09      	ldr	r3, [pc, #36]	@ (800e168 <MIC_Print+0x290>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4919      	ldr	r1, [pc, #100]	@ (800e1ac <MIC_Print+0x2d4>)
 800e146:	1c18      	adds	r0, r3, #0
 800e148:	f7f2 f9f2 	bl	8000530 <__aeabi_fcmplt>
 800e14c:	1e03      	subs	r3, r0, #0
 800e14e:	d100      	bne.n	800e152 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e150:	e004      	b.n	800e15c <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e152:	2200      	movs	r2, #0
 800e154:	2100      	movs	r1, #0
 800e156:	2000      	movs	r0, #0
 800e158:	f004 fb32 	bl	80127c0 <SetDBLED>
}
 800e15c:	46c0      	nop			@ (mov r8, r8)
 800e15e:	46bd      	mov	sp, r7
 800e160:	b004      	add	sp, #16
 800e162:	bdb0      	pop	{r4, r5, r7, pc}
 800e164:	20001174 	.word	0x20001174
 800e168:	20001140 	.word	0x20001140
 800e16c:	2000117c 	.word	0x2000117c
 800e170:	20001144 	.word	0x20001144
 800e174:	2000117d 	.word	0x2000117d
 800e178:	200000a9 	.word	0x200000a9
 800e17c:	20001170 	.word	0x20001170
 800e180:	20001178 	.word	0x20001178
 800e184:	2000116c 	.word	0x2000116c
 800e188:	0802cf84 	.word	0x0802cf84
 800e18c:	0802cfc8 	.word	0x0802cfc8
 800e190:	20001134 	.word	0x20001134
 800e194:	42b40000 	.word	0x42b40000
 800e198:	42a00000 	.word	0x42a00000
 800e19c:	428c0000 	.word	0x428c0000
 800e1a0:	42700000 	.word	0x42700000
 800e1a4:	42480000 	.word	0x42480000
 800e1a8:	42200000 	.word	0x42200000
 800e1ac:	420c0000 	.word	0x420c0000

0800e1b0 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e1b6:	4b11      	ldr	r3, [pc, #68]	@ (800e1fc <MIC_TestMeasurementDone+0x4c>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	4a10      	ldr	r2, [pc, #64]	@ (800e200 <MIC_TestMeasurementDone+0x50>)
 800e1be:	4911      	ldr	r1, [pc, #68]	@ (800e204 <MIC_TestMeasurementDone+0x54>)
 800e1c0:	2002      	movs	r0, #2
 800e1c2:	f005 fdf1 	bl	8013da8 <CreateLine>
  if(DataReady) {
 800e1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e1fc <MIC_TestMeasurementDone+0x4c>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d010      	beq.n	800e1f2 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e1d0:	1dfb      	adds	r3, r7, #7
 800e1d2:	4a0d      	ldr	r2, [pc, #52]	@ (800e208 <MIC_TestMeasurementDone+0x58>)
 800e1d4:	7812      	ldrb	r2, [r2, #0]
 800e1d6:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e1d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e208 <MIC_TestMeasurementDone+0x58>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	4a0b      	ldr	r2, [pc, #44]	@ (800e20c <MIC_TestMeasurementDone+0x5c>)
 800e1e0:	4908      	ldr	r1, [pc, #32]	@ (800e204 <MIC_TestMeasurementDone+0x54>)
 800e1e2:	2002      	movs	r0, #2
 800e1e4:	f005 fde0 	bl	8013da8 <CreateLine>
    ResetChargeIndicator();
 800e1e8:	f004 fbbe 	bl	8012968 <ResetChargeIndicator>
    return Check;
 800e1ec:	1dfb      	adds	r3, r7, #7
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	e000      	b.n	800e1f4 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	0018      	movs	r0, r3
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	b002      	add	sp, #8
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	200012b1 	.word	0x200012b1
 800e200:	0802cfcc 	.word	0x0802cfcc
 800e204:	0802cfc8 	.word	0x0802cfc8
 800e208:	200012b2 	.word	0x200012b2
 800e20c:	0802cff8 	.word	0x0802cff8

0800e210 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e216:	4b78      	ldr	r3, [pc, #480]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d100      	bne.n	800e220 <Mic_Upkeep+0x10>
 800e21e:	e0b9      	b.n	800e394 <Mic_Upkeep+0x184>
 800e220:	dd00      	ble.n	800e224 <Mic_Upkeep+0x14>
 800e222:	e0d4      	b.n	800e3ce <Mic_Upkeep+0x1be>
 800e224:	2b02      	cmp	r3, #2
 800e226:	d037      	beq.n	800e298 <Mic_Upkeep+0x88>
 800e228:	dd00      	ble.n	800e22c <Mic_Upkeep+0x1c>
 800e22a:	e0d0      	b.n	800e3ce <Mic_Upkeep+0x1be>
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d002      	beq.n	800e236 <Mic_Upkeep+0x26>
 800e230:	2b01      	cmp	r3, #1
 800e232:	d014      	beq.n	800e25e <Mic_Upkeep+0x4e>
 800e234:	e0cb      	b.n	800e3ce <Mic_Upkeep+0x1be>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e236:	2001      	movs	r0, #1
 800e238:	f003 fbac 	bl	8011994 <enableMicrophone>
 800e23c:	0003      	movs	r3, r0
 800e23e:	001a      	movs	r2, r3
 800e240:	2301      	movs	r3, #1
 800e242:	4053      	eors	r3, r2
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d005      	beq.n	800e256 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e24a:	4a6c      	ldr	r2, [pc, #432]	@ (800e3fc <Mic_Upkeep+0x1ec>)
 800e24c:	4b6c      	ldr	r3, [pc, #432]	@ (800e400 <Mic_Upkeep+0x1f0>)
 800e24e:	217f      	movs	r1, #127	@ 0x7f
 800e250:	0018      	movs	r0, r3
 800e252:	f005 fea5 	bl	8013fa0 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e256:	4b68      	ldr	r3, [pc, #416]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e258:	2201      	movs	r2, #1
 800e25a:	701a      	strb	r2, [r3, #0]
    break;
 800e25c:	e0c6      	b.n	800e3ec <Mic_Upkeep+0x1dc>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e25e:	f003 fb75 	bl	801194c <micSettlingComplete>
 800e262:	1e03      	subs	r3, r0, #0
 800e264:	d105      	bne.n	800e272 <Mic_Upkeep+0x62>
 800e266:	4b67      	ldr	r3, [pc, #412]	@ (800e404 <Mic_Upkeep+0x1f4>)
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d100      	bne.n	800e272 <Mic_Upkeep+0x62>
 800e270:	e0b7      	b.n	800e3e2 <Mic_Upkeep+0x1d2>
      if (!startSPLcalculation())
 800e272:	f003 fbf9 	bl	8011a68 <startSPLcalculation>
 800e276:	0003      	movs	r3, r0
 800e278:	001a      	movs	r2, r3
 800e27a:	2301      	movs	r3, #1
 800e27c:	4053      	eors	r3, r2
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e284:	4a5d      	ldr	r2, [pc, #372]	@ (800e3fc <Mic_Upkeep+0x1ec>)
 800e286:	4b5e      	ldr	r3, [pc, #376]	@ (800e400 <Mic_Upkeep+0x1f0>)
 800e288:	2188      	movs	r1, #136	@ 0x88
 800e28a:	0018      	movs	r0, r3
 800e28c:	f005 fe88 	bl	8013fa0 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e290:	4b59      	ldr	r3, [pc, #356]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e292:	2202      	movs	r2, #2
 800e294:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e296:	e0a4      	b.n	800e3e2 <Mic_Upkeep+0x1d2>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e298:	4b5b      	ldr	r3, [pc, #364]	@ (800e408 <Mic_Upkeep+0x1f8>)
 800e29a:	2201      	movs	r2, #1
 800e29c:	2101      	movs	r1, #1
 800e29e:	0018      	movs	r0, r3
 800e2a0:	f003 fa3c 	bl	801171c <getSoundData>
 800e2a4:	1e03      	subs	r3, r0, #0
 800e2a6:	d100      	bne.n	800e2aa <Mic_Upkeep+0x9a>
 800e2a8:	e09d      	b.n	800e3e6 <Mic_Upkeep+0x1d6>
      clearMaximumAmplitude();
 800e2aa:	f003 fb2f 	bl	801190c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e2ae:	4b56      	ldr	r3, [pc, #344]	@ (800e408 <Mic_Upkeep+0x1f8>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	001a      	movs	r2, r3
 800e2b4:	4b54      	ldr	r3, [pc, #336]	@ (800e408 <Mic_Upkeep+0x1f8>)
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	4954      	ldr	r1, [pc, #336]	@ (800e40c <Mic_Upkeep+0x1fc>)
 800e2ba:	0038      	movs	r0, r7
 800e2bc:	f018 f89c 	bl	80263f8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e2c0:	4b51      	ldr	r3, [pc, #324]	@ (800e408 <Mic_Upkeep+0x1f8>)
 800e2c2:	89db      	ldrh	r3, [r3, #14]
 800e2c4:	001a      	movs	r2, r3
 800e2c6:	4b50      	ldr	r3, [pc, #320]	@ (800e408 <Mic_Upkeep+0x1f8>)
 800e2c8:	7c1b      	ldrb	r3, [r3, #16]
 800e2ca:	4951      	ldr	r1, [pc, #324]	@ (800e410 <Mic_Upkeep+0x200>)
 800e2cc:	4851      	ldr	r0, [pc, #324]	@ (800e414 <Mic_Upkeep+0x204>)
 800e2ce:	f018 f893 	bl	80263f8 <siprintf>
      dBValue = atof(dBbuffer);
 800e2d2:	003b      	movs	r3, r7
 800e2d4:	0018      	movs	r0, r3
 800e2d6:	f016 fc35 	bl	8024b44 <atof>
 800e2da:	0002      	movs	r2, r0
 800e2dc:	000b      	movs	r3, r1
 800e2de:	0010      	movs	r0, r2
 800e2e0:	0019      	movs	r1, r3
 800e2e2:	f7f5 fb1f 	bl	8003924 <__aeabi_d2f>
 800e2e6:	1c02      	adds	r2, r0, #0
 800e2e8:	4b4b      	ldr	r3, [pc, #300]	@ (800e418 <Mic_Upkeep+0x208>)
 800e2ea:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e2ec:	4b4a      	ldr	r3, [pc, #296]	@ (800e418 <Mic_Upkeep+0x208>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	494a      	ldr	r1, [pc, #296]	@ (800e41c <Mic_Upkeep+0x20c>)
 800e2f2:	1c18      	adds	r0, r3, #0
 800e2f4:	f7f2 fea4 	bl	8001040 <__aeabi_fmul>
 800e2f8:	1c03      	adds	r3, r0, #0
 800e2fa:	1c18      	adds	r0, r3, #0
 800e2fc:	f7f5 faca 	bl	8003894 <__aeabi_f2d>
 800e300:	2200      	movs	r2, #0
 800e302:	4b47      	ldr	r3, [pc, #284]	@ (800e420 <Mic_Upkeep+0x210>)
 800e304:	f7f3 fb26 	bl	8001954 <__aeabi_dadd>
 800e308:	0002      	movs	r2, r0
 800e30a:	000b      	movs	r3, r1
 800e30c:	0010      	movs	r0, r2
 800e30e:	0019      	movs	r1, r3
 800e310:	f7f5 fa32 	bl	8003778 <__aeabi_d2iz>
 800e314:	0003      	movs	r3, r0
 800e316:	0018      	movs	r0, r3
 800e318:	f7f5 fa6a 	bl	80037f0 <__aeabi_i2d>
 800e31c:	2200      	movs	r2, #0
 800e31e:	4b41      	ldr	r3, [pc, #260]	@ (800e424 <Mic_Upkeep+0x214>)
 800e320:	f7f3 fede 	bl	80020e0 <__aeabi_ddiv>
 800e324:	0002      	movs	r2, r0
 800e326:	000b      	movs	r3, r1
 800e328:	0010      	movs	r0, r2
 800e32a:	0019      	movs	r1, r3
 800e32c:	f7f5 fafa 	bl	8003924 <__aeabi_d2f>
 800e330:	1c02      	adds	r2, r0, #0
 800e332:	4b39      	ldr	r3, [pc, #228]	@ (800e418 <Mic_Upkeep+0x208>)
 800e334:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e336:	f7ff fdcf 	bl	800ded8 <MIC_Print>
      if (!startSPLcalculation()) {
 800e33a:	f003 fb95 	bl	8011a68 <startSPLcalculation>
 800e33e:	0003      	movs	r3, r0
 800e340:	001a      	movs	r2, r3
 800e342:	2301      	movs	r3, #1
 800e344:	4053      	eors	r3, r2
 800e346:	b2db      	uxtb	r3, r3
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d005      	beq.n	800e358 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e34c:	4a2b      	ldr	r2, [pc, #172]	@ (800e3fc <Mic_Upkeep+0x1ec>)
 800e34e:	4b2c      	ldr	r3, [pc, #176]	@ (800e400 <Mic_Upkeep+0x1f0>)
 800e350:	2198      	movs	r1, #152	@ 0x98
 800e352:	0018      	movs	r0, r3
 800e354:	f005 fe24 	bl	8013fa0 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e358:	2000      	movs	r0, #0
 800e35a:	f003 fb1b 	bl	8011994 <enableMicrophone>
 800e35e:	0003      	movs	r3, r0
 800e360:	001a      	movs	r2, r3
 800e362:	2301      	movs	r3, #1
 800e364:	4053      	eors	r3, r2
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d005      	beq.n	800e378 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e36c:	4a23      	ldr	r2, [pc, #140]	@ (800e3fc <Mic_Upkeep+0x1ec>)
 800e36e:	4b24      	ldr	r3, [pc, #144]	@ (800e400 <Mic_Upkeep+0x1f0>)
 800e370:	219b      	movs	r1, #155	@ 0x9b
 800e372:	0018      	movs	r0, r3
 800e374:	f005 fe14 	bl	8013fa0 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 430;  // about twice second
 800e378:	f006 faa2 	bl	80148c0 <HAL_GetTick>
 800e37c:	0003      	movs	r3, r0
 800e37e:	33af      	adds	r3, #175	@ 0xaf
 800e380:	33ff      	adds	r3, #255	@ 0xff
 800e382:	001a      	movs	r2, r3
 800e384:	4b28      	ldr	r3, [pc, #160]	@ (800e428 <Mic_Upkeep+0x218>)
 800e386:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e388:	4b1b      	ldr	r3, [pc, #108]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e38a:	2203      	movs	r2, #3
 800e38c:	701a      	strb	r2, [r3, #0]
      ResetChargeIndicator();
 800e38e:	f004 faeb 	bl	8012968 <ResetChargeIndicator>
    }
    break;
 800e392:	e028      	b.n	800e3e6 <Mic_Upkeep+0x1d6>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e394:	4b24      	ldr	r3, [pc, #144]	@ (800e428 <Mic_Upkeep+0x218>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	0018      	movs	r0, r3
 800e39a:	f005 fcaf 	bl	8013cfc <TimestampIsReached>
 800e39e:	1e03      	subs	r3, r0, #0
 800e3a0:	d023      	beq.n	800e3ea <Mic_Upkeep+0x1da>
      if (!enableMicrophone(true)) {
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	f003 faf6 	bl	8011994 <enableMicrophone>
 800e3a8:	0003      	movs	r3, r0
 800e3aa:	001a      	movs	r2, r3
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	4053      	eors	r3, r2
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d005      	beq.n	800e3c2 <Mic_Upkeep+0x1b2>
        errorHandler(__func__, __LINE__, __FILE__);
 800e3b6:	4a11      	ldr	r2, [pc, #68]	@ (800e3fc <Mic_Upkeep+0x1ec>)
 800e3b8:	4b11      	ldr	r3, [pc, #68]	@ (800e400 <Mic_Upkeep+0x1f0>)
 800e3ba:	21a6      	movs	r1, #166	@ 0xa6
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f005 fdef 	bl	8013fa0 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	701a      	strb	r2, [r3, #0]
      SetChargeIndicator();
 800e3c8:	f004 fa8e 	bl	80128e8 <SetChargeIndicator>
    }
    break;
 800e3cc:	e00d      	b.n	800e3ea <Mic_Upkeep+0x1da>

  default:
    Debug("Unexpected occurrence happened");
 800e3ce:	4a17      	ldr	r2, [pc, #92]	@ (800e42c <Mic_Upkeep+0x21c>)
 800e3d0:	4b17      	ldr	r3, [pc, #92]	@ (800e430 <Mic_Upkeep+0x220>)
 800e3d2:	0019      	movs	r1, r3
 800e3d4:	2003      	movs	r0, #3
 800e3d6:	f005 fce7 	bl	8013da8 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e3da:	4b07      	ldr	r3, [pc, #28]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e3dc:	2200      	movs	r2, #0
 800e3de:	701a      	strb	r2, [r3, #0]
    break;
 800e3e0:	e004      	b.n	800e3ec <Mic_Upkeep+0x1dc>
    break;
 800e3e2:	46c0      	nop			@ (mov r8, r8)
 800e3e4:	e002      	b.n	800e3ec <Mic_Upkeep+0x1dc>
    break;
 800e3e6:	46c0      	nop			@ (mov r8, r8)
 800e3e8:	e000      	b.n	800e3ec <Mic_Upkeep+0x1dc>
    break;
 800e3ea:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e3ec:	4b02      	ldr	r3, [pc, #8]	@ (800e3f8 <Mic_Upkeep+0x1e8>)
 800e3ee:	781b      	ldrb	r3, [r3, #0]
}
 800e3f0:	0018      	movs	r0, r3
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	b002      	add	sp, #8
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	20001196 	.word	0x20001196
 800e3fc:	0802d010 	.word	0x0802d010
 800e400:	0802e524 	.word	0x0802e524
 800e404:	200012b1 	.word	0x200012b1
 800e408:	20001184 	.word	0x20001184
 800e40c:	0802d02c 	.word	0x0802d02c
 800e410:	0802d034 	.word	0x0802d034
 800e414:	20001134 	.word	0x20001134
 800e418:	20001174 	.word	0x20001174
 800e41c:	42c80000 	.word	0x42c80000
 800e420:	3fe00000 	.word	0x3fe00000
 800e424:	40590000 	.word	0x40590000
 800e428:	20001180 	.word	0x20001180
 800e42c:	0802d03c 	.word	0x0802d03c
 800e430:	0802d05c 	.word	0x0802d05c

0800e434 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e43a:	1d3b      	adds	r3, r7, #4
 800e43c:	0018      	movs	r0, r3
 800e43e:	2314      	movs	r3, #20
 800e440:	001a      	movs	r2, r3
 800e442:	2100      	movs	r1, #0
 800e444:	f018 f920 	bl	8026688 <memset>
  RTC_DateTypeDef sDate = {0};
 800e448:	003b      	movs	r3, r7
 800e44a:	2200      	movs	r2, #0
 800e44c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e44e:	4b2e      	ldr	r3, [pc, #184]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e450:	4a2e      	ldr	r2, [pc, #184]	@ (800e50c <MX_RTC_Init+0xd8>)
 800e452:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e454:	4b2c      	ldr	r3, [pc, #176]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e456:	2200      	movs	r2, #0
 800e458:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e45a:	4b2b      	ldr	r3, [pc, #172]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e45c:	227f      	movs	r2, #127	@ 0x7f
 800e45e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e460:	4b29      	ldr	r3, [pc, #164]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e462:	22ff      	movs	r2, #255	@ 0xff
 800e464:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e466:	4b28      	ldr	r3, [pc, #160]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e468:	2200      	movs	r2, #0
 800e46a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e46c:	4b26      	ldr	r3, [pc, #152]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e46e:	2200      	movs	r2, #0
 800e470:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e472:	4b25      	ldr	r3, [pc, #148]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e474:	2200      	movs	r2, #0
 800e476:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e478:	4b23      	ldr	r3, [pc, #140]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e47e:	4b22      	ldr	r3, [pc, #136]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e480:	0018      	movs	r0, r3
 800e482:	f00d fdfd 	bl	801c080 <HAL_RTC_Init>
 800e486:	1e03      	subs	r3, r0, #0
 800e488:	d001      	beq.n	800e48e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e48a:	f7fe ff7b 	bl	800d384 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e48e:	1d3b      	adds	r3, r7, #4
 800e490:	220d      	movs	r2, #13
 800e492:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e494:	1d3b      	adds	r3, r7, #4
 800e496:	2200      	movs	r2, #0
 800e498:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e49a:	1d3b      	adds	r3, r7, #4
 800e49c:	2200      	movs	r2, #0
 800e49e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e4a0:	1d3b      	adds	r3, r7, #4
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e4a6:	1d3b      	adds	r3, r7, #4
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e4ac:	1d39      	adds	r1, r7, #4
 800e4ae:	4b16      	ldr	r3, [pc, #88]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	0018      	movs	r0, r3
 800e4b4:	f00d fe80 	bl	801c1b8 <HAL_RTC_SetTime>
 800e4b8:	1e03      	subs	r3, r0, #0
 800e4ba:	d001      	beq.n	800e4c0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e4bc:	f7fe ff62 	bl	800d384 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e4c0:	003b      	movs	r3, r7
 800e4c2:	2206      	movs	r2, #6
 800e4c4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e4c6:	003b      	movs	r3, r7
 800e4c8:	2211      	movs	r2, #17
 800e4ca:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e4cc:	003b      	movs	r3, r7
 800e4ce:	2217      	movs	r2, #23
 800e4d0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e4d2:	003b      	movs	r3, r7
 800e4d4:	2218      	movs	r2, #24
 800e4d6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e4d8:	0039      	movs	r1, r7
 800e4da:	4b0b      	ldr	r3, [pc, #44]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	0018      	movs	r0, r3
 800e4e0:	f00d ff72 	bl	801c3c8 <HAL_RTC_SetDate>
 800e4e4:	1e03      	subs	r3, r0, #0
 800e4e6:	d001      	beq.n	800e4ec <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e4e8:	f7fe ff4c 	bl	800d384 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e4ec:	4b06      	ldr	r3, [pc, #24]	@ (800e508 <MX_RTC_Init+0xd4>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	0018      	movs	r0, r3
 800e4f4:	f00e f940 	bl	801c778 <HAL_RTCEx_SetWakeUpTimer_IT>
 800e4f8:	1e03      	subs	r3, r0, #0
 800e4fa:	d001      	beq.n	800e500 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e4fc:	f7fe ff42 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e500:	46c0      	nop			@ (mov r8, r8)
 800e502:	46bd      	mov	sp, r7
 800e504:	b006      	add	sp, #24
 800e506:	bd80      	pop	{r7, pc}
 800e508:	20001198 	.word	0x20001198
 800e50c:	40002800 	.word	0x40002800

0800e510 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a0a      	ldr	r2, [pc, #40]	@ (800e548 <HAL_RTC_MspInit+0x38>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d10e      	bne.n	800e540 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e522:	4b0a      	ldr	r3, [pc, #40]	@ (800e54c <HAL_RTC_MspInit+0x3c>)
 800e524:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e526:	4b09      	ldr	r3, [pc, #36]	@ (800e54c <HAL_RTC_MspInit+0x3c>)
 800e528:	2180      	movs	r1, #128	@ 0x80
 800e52a:	02c9      	lsls	r1, r1, #11
 800e52c:	430a      	orrs	r2, r1
 800e52e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e530:	2200      	movs	r2, #0
 800e532:	2100      	movs	r1, #0
 800e534:	2002      	movs	r0, #2
 800e536:	f006 fe37 	bl	80151a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e53a:	2002      	movs	r0, #2
 800e53c:	f006 fe49 	bl	80151d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e540:	46c0      	nop			@ (mov r8, r8)
 800e542:	46bd      	mov	sp, r7
 800e544:	b002      	add	sp, #8
 800e546:	bd80      	pop	{r7, pc}
 800e548:	40002800 	.word	0x40002800
 800e54c:	40021000 	.word	0x40021000

0800e550 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e550:	b580      	push	{r7, lr}
 800e552:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e554:	4b02      	ldr	r3, [pc, #8]	@ (800e560 <sen5x_Get_sen5x_enable_state+0x10>)
 800e556:	781b      	ldrb	r3, [r3, #0]
}
 800e558:	0018      	movs	r0, r3
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	46c0      	nop			@ (mov r8, r8)
 800e560:	200011bf 	.word	0x200011bf

0800e564 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	0002      	movs	r2, r0
 800e56c:	1dfb      	adds	r3, r7, #7
 800e56e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e570:	4b03      	ldr	r3, [pc, #12]	@ (800e580 <sen5x_Set_sen5x_state+0x1c>)
 800e572:	1dfa      	adds	r2, r7, #7
 800e574:	7812      	ldrb	r2, [r2, #0]
 800e576:	701a      	strb	r2, [r3, #0]
}
 800e578:	46c0      	nop			@ (mov r8, r8)
 800e57a:	46bd      	mov	sp, r7
 800e57c:	b002      	add	sp, #8
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	200011bf 	.word	0x200011bf

0800e584 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e58c:	f006 f998 	bl	80148c0 <HAL_GetTick>
 800e590:	0002      	movs	r2, r0
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	18d2      	adds	r2, r2, r3
 800e596:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <setsen5xReadTimer+0x20>)
 800e598:	601a      	str	r2, [r3, #0]
}
 800e59a:	46c0      	nop			@ (mov r8, r8)
 800e59c:	46bd      	mov	sp, r7
 800e59e:	b002      	add	sp, #8
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	46c0      	nop			@ (mov r8, r8)
 800e5a4:	200011cc 	.word	0x200011cc

0800e5a8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	0002      	movs	r2, r0
 800e5b0:	1dfb      	adds	r3, r7, #7
 800e5b2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e5b4:	4b03      	ldr	r3, [pc, #12]	@ (800e5c4 <setsen5xSamplecounter+0x1c>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	701a      	strb	r2, [r3, #0]
}
 800e5ba:	46c0      	nop			@ (mov r8, r8)
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	b002      	add	sp, #8
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	46c0      	nop			@ (mov r8, r8)
 800e5c4:	200011c8 	.word	0x200011c8

0800e5c8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e5d0:	f7fe ff90 	bl	800d4f4 <IsPMSensorEnabled>
 800e5d4:	1e03      	subs	r3, r0, #0
 800e5d6:	d034      	beq.n	800e642 <sen5x_enable+0x7a>
    if (batteryStatus == BATTERY_FULL) {
 800e5d8:	4b21      	ldr	r3, [pc, #132]	@ (800e660 <sen5x_enable+0x98>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	2b03      	cmp	r3, #3
 800e5de:	d103      	bne.n	800e5e8 <sen5x_enable+0x20>
      sen5x_Enable = true;
 800e5e0:	4b20      	ldr	r3, [pc, #128]	@ (800e664 <sen5x_enable+0x9c>)
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	701a      	strb	r2, [r3, #0]
 800e5e6:	e00d      	b.n	800e604 <sen5x_enable+0x3c>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e5e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e664 <sen5x_enable+0x9c>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	1e5a      	subs	r2, r3, #1
 800e5ee:	4193      	sbcs	r3, r2
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	4053      	eors	r3, r2
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	1c1a      	adds	r2, r3, #0
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	4b18      	ldr	r3, [pc, #96]	@ (800e664 <sen5x_enable+0x9c>)
 800e602:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e604:	4b17      	ldr	r3, [pc, #92]	@ (800e664 <sen5x_enable+0x9c>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d003      	beq.n	800e614 <sen5x_enable+0x4c>
      setsen5xReadTimer(0);
 800e60c:	2000      	movs	r0, #0
 800e60e:	f7ff ffb9 	bl	800e584 <setsen5xReadTimer>
 800e612:	e009      	b.n	800e628 <sen5x_enable+0x60>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e614:	f006 f954 	bl	80148c0 <HAL_GetTick>
 800e618:	0002      	movs	r2, r0
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2164      	movs	r1, #100	@ 0x64
 800e61e:	434b      	muls	r3, r1
 800e620:	18d3      	adds	r3, r2, r3
 800e622:	0018      	movs	r0, r3
 800e624:	f7ff ffae 	bl	800e584 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e628:	4b0e      	ldr	r3, [pc, #56]	@ (800e664 <sen5x_enable+0x9c>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <sen5x_enable+0x6c>
 800e630:	4b0d      	ldr	r3, [pc, #52]	@ (800e668 <sen5x_enable+0xa0>)
 800e632:	e000      	b.n	800e636 <sen5x_enable+0x6e>
 800e634:	4b0d      	ldr	r3, [pc, #52]	@ (800e66c <sen5x_enable+0xa4>)
 800e636:	4a0e      	ldr	r2, [pc, #56]	@ (800e670 <sen5x_enable+0xa8>)
 800e638:	490e      	ldr	r1, [pc, #56]	@ (800e674 <sen5x_enable+0xac>)
 800e63a:	2002      	movs	r0, #2
 800e63c:	f005 fbb4 	bl	8013da8 <CreateLine>
 800e640:	e005      	b.n	800e64e <sen5x_enable+0x86>
  }
  else {
    Info("sen5x measurement is disabled");
 800e642:	4a0d      	ldr	r2, [pc, #52]	@ (800e678 <sen5x_enable+0xb0>)
 800e644:	4b0b      	ldr	r3, [pc, #44]	@ (800e674 <sen5x_enable+0xac>)
 800e646:	0019      	movs	r1, r3
 800e648:	2002      	movs	r0, #2
 800e64a:	f005 fbad 	bl	8013da8 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e64e:	4b0b      	ldr	r3, [pc, #44]	@ (800e67c <sen5x_enable+0xb4>)
 800e650:	2201      	movs	r2, #1
 800e652:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e654:	4b03      	ldr	r3, [pc, #12]	@ (800e664 <sen5x_enable+0x9c>)
 800e656:	781b      	ldrb	r3, [r3, #0]
}
 800e658:	0018      	movs	r0, r3
 800e65a:	46bd      	mov	sp, r7
 800e65c:	b002      	add	sp, #8
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	2000215d 	.word	0x2000215d
 800e664:	200011bf 	.word	0x200011bf
 800e668:	0802d060 	.word	0x0802d060
 800e66c:	0802d068 	.word	0x0802d068
 800e670:	0802d074 	.word	0x0802d074
 800e674:	0802d090 	.word	0x0802d090
 800e678:	0802d094 	.word	0x0802d094
 800e67c:	200000aa 	.word	0x200000aa

0800e680 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e684:	2380      	movs	r3, #128	@ 0x80
 800e686:	015b      	lsls	r3, r3, #5
 800e688:	480f      	ldr	r0, [pc, #60]	@ (800e6c8 <sen5x_Power_On+0x48>)
 800e68a:	2201      	movs	r2, #1
 800e68c:	0019      	movs	r1, r3
 800e68e:	f007 fb7e 	bl	8015d8e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e692:	4a0e      	ldr	r2, [pc, #56]	@ (800e6cc <sen5x_Power_On+0x4c>)
 800e694:	4b0e      	ldr	r3, [pc, #56]	@ (800e6d0 <sen5x_Power_On+0x50>)
 800e696:	0019      	movs	r1, r3
 800e698:	2003      	movs	r0, #3
 800e69a:	f005 fb85 	bl	8013da8 <CreateLine>
  HAL_Delay(150);
 800e69e:	2096      	movs	r0, #150	@ 0x96
 800e6a0:	f006 f918 	bl	80148d4 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e6a4:	f001 f9f6 	bl	800fa94 <sen5x_device_reset>
 800e6a8:	1e03      	subs	r3, r0, #0
 800e6aa:	d006      	beq.n	800e6ba <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e6ac:	4a09      	ldr	r2, [pc, #36]	@ (800e6d4 <sen5x_Power_On+0x54>)
 800e6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d8 <sen5x_Power_On+0x58>)
 800e6b0:	0019      	movs	r1, r3
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	f005 fb78 	bl	8013da8 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e6b8:	e002      	b.n	800e6c0 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e6ba:	4b08      	ldr	r3, [pc, #32]	@ (800e6dc <sen5x_Power_On+0x5c>)
 800e6bc:	2201      	movs	r2, #1
 800e6be:	701a      	strb	r2, [r3, #0]
}
 800e6c0:	46c0      	nop			@ (mov r8, r8)
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	46c0      	nop			@ (mov r8, r8)
 800e6c8:	50000800 	.word	0x50000800
 800e6cc:	0802d0b4 	.word	0x0802d0b4
 800e6d0:	0802d0d0 	.word	0x0802d0d0
 800e6d4:	0802d0d4 	.word	0x0802d0d4
 800e6d8:	0802d0fc 	.word	0x0802d0fc
 800e6dc:	200011bd 	.word	0x200011bd

0800e6e0 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e6e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e720 <sen5x_Power_Off+0x40>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d006      	beq.n	800e6fa <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e6ec:	4a0d      	ldr	r2, [pc, #52]	@ (800e724 <sen5x_Power_Off+0x44>)
 800e6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e728 <sen5x_Power_Off+0x48>)
 800e6f0:	0019      	movs	r1, r3
 800e6f2:	2003      	movs	r0, #3
 800e6f4:	f005 fb58 	bl	8013da8 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e6f8:	e00f      	b.n	800e71a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e6fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e72c <sen5x_Power_Off+0x4c>)
 800e6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e728 <sen5x_Power_Off+0x48>)
 800e6fe:	0019      	movs	r1, r3
 800e700:	2003      	movs	r0, #3
 800e702:	f005 fb51 	bl	8013da8 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e706:	2380      	movs	r3, #128	@ 0x80
 800e708:	015b      	lsls	r3, r3, #5
 800e70a:	4809      	ldr	r0, [pc, #36]	@ (800e730 <sen5x_Power_Off+0x50>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	0019      	movs	r1, r3
 800e710:	f007 fb3d 	bl	8015d8e <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e714:	4b07      	ldr	r3, [pc, #28]	@ (800e734 <sen5x_Power_Off+0x54>)
 800e716:	2200      	movs	r2, #0
 800e718:	701a      	strb	r2, [r3, #0]
}
 800e71a:	46c0      	nop			@ (mov r8, r8)
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	200011be 	.word	0x200011be
 800e724:	0802d100 	.word	0x0802d100
 800e728:	0802d0d0 	.word	0x0802d0d0
 800e72c:	0802d130 	.word	0x0802d130
 800e730:	50000800 	.word	0x50000800
 800e734:	200011bd 	.word	0x200011bd

0800e738 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e738:	b580      	push	{r7, lr}
 800e73a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e73c:	4b02      	ldr	r3, [pc, #8]	@ (800e748 <reset_fanCleaningDone+0x10>)
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
}
 800e742:	46c0      	nop			@ (mov r8, r8)
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	200011bc 	.word	0x200011bc

0800e74c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	b093      	sub	sp, #76	@ 0x4c
 800e750:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e752:	2436      	movs	r4, #54	@ 0x36
 800e754:	193b      	adds	r3, r7, r4
 800e756:	2200      	movs	r2, #0
 800e758:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e75a:	2335      	movs	r3, #53	@ 0x35
 800e75c:	18fb      	adds	r3, r7, r3
 800e75e:	2220      	movs	r2, #32
 800e760:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e762:	2334      	movs	r3, #52	@ 0x34
 800e764:	18fb      	adds	r3, r7, r3
 800e766:	2220      	movs	r2, #32
 800e768:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e76a:	f7ff ff89 	bl	800e680 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e76e:	0025      	movs	r5, r4
 800e770:	193c      	adds	r4, r7, r4
 800e772:	f001 f98f 	bl	800fa94 <sen5x_device_reset>
 800e776:	0003      	movs	r3, r0
 800e778:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e77a:	002c      	movs	r4, r5
 800e77c:	193b      	adds	r3, r7, r4
 800e77e:	2200      	movs	r2, #0
 800e780:	5e9b      	ldrsh	r3, [r3, r2]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00b      	beq.n	800e79e <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e786:	193b      	adds	r3, r7, r4
 800e788:	2200      	movs	r2, #0
 800e78a:	5e9b      	ldrsh	r3, [r3, r2]
 800e78c:	4a77      	ldr	r2, [pc, #476]	@ (800e96c <probe_sen5x+0x220>)
 800e78e:	4978      	ldr	r1, [pc, #480]	@ (800e970 <probe_sen5x+0x224>)
 800e790:	2001      	movs	r0, #1
 800e792:	f005 fb09 	bl	8013da8 <CreateLine>
      return error;
 800e796:	193b      	adds	r3, r7, r4
 800e798:	2200      	movs	r2, #0
 800e79a:	5e9b      	ldrsh	r3, [r3, r2]
 800e79c:	e0e2      	b.n	800e964 <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e79e:	2536      	movs	r5, #54	@ 0x36
 800e7a0:	197c      	adds	r4, r7, r5
 800e7a2:	2335      	movs	r3, #53	@ 0x35
 800e7a4:	18fb      	adds	r3, r7, r3
 800e7a6:	781a      	ldrb	r2, [r3, #0]
 800e7a8:	230c      	movs	r3, #12
 800e7aa:	18fb      	adds	r3, r7, r3
 800e7ac:	0011      	movs	r1, r2
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f001 f85c 	bl	800f86c <sen5x_get_serial_number>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e7b8:	197b      	adds	r3, r7, r5
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	5e9b      	ldrsh	r3, [r3, r2]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00b      	beq.n	800e7da <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e7c2:	197b      	adds	r3, r7, r5
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	5e9b      	ldrsh	r3, [r3, r2]
 800e7c8:	4a6a      	ldr	r2, [pc, #424]	@ (800e974 <probe_sen5x+0x228>)
 800e7ca:	4969      	ldr	r1, [pc, #420]	@ (800e970 <probe_sen5x+0x224>)
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	f005 faeb 	bl	8013da8 <CreateLine>
      return error;
 800e7d2:	197b      	adds	r3, r7, r5
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	5e9b      	ldrsh	r3, [r3, r2]
 800e7d8:	e0c4      	b.n	800e964 <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e7da:	230c      	movs	r3, #12
 800e7dc:	18fb      	adds	r3, r7, r3
 800e7de:	4a66      	ldr	r2, [pc, #408]	@ (800e978 <probe_sen5x+0x22c>)
 800e7e0:	4966      	ldr	r1, [pc, #408]	@ (800e97c <probe_sen5x+0x230>)
 800e7e2:	2002      	movs	r0, #2
 800e7e4:	f005 fae0 	bl	8013da8 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e7e8:	2536      	movs	r5, #54	@ 0x36
 800e7ea:	197c      	adds	r4, r7, r5
 800e7ec:	2334      	movs	r3, #52	@ 0x34
 800e7ee:	18fb      	adds	r3, r7, r3
 800e7f0:	781a      	ldrb	r2, [r3, #0]
 800e7f2:	4b63      	ldr	r3, [pc, #396]	@ (800e980 <probe_sen5x+0x234>)
 800e7f4:	0011      	movs	r1, r2
 800e7f6:	0018      	movs	r0, r3
 800e7f8:	f000 ffe2 	bl	800f7c0 <sen5x_get_product_name>
 800e7fc:	0003      	movs	r3, r0
 800e7fe:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e800:	197b      	adds	r3, r7, r5
 800e802:	2200      	movs	r2, #0
 800e804:	5e9b      	ldrsh	r3, [r3, r2]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00b      	beq.n	800e822 <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e80a:	197b      	adds	r3, r7, r5
 800e80c:	2200      	movs	r2, #0
 800e80e:	5e9b      	ldrsh	r3, [r3, r2]
 800e810:	4a5c      	ldr	r2, [pc, #368]	@ (800e984 <probe_sen5x+0x238>)
 800e812:	4957      	ldr	r1, [pc, #348]	@ (800e970 <probe_sen5x+0x224>)
 800e814:	2001      	movs	r0, #1
 800e816:	f005 fac7 	bl	8013da8 <CreateLine>
      return error;
 800e81a:	197b      	adds	r3, r7, r5
 800e81c:	2200      	movs	r2, #0
 800e81e:	5e9b      	ldrsh	r3, [r3, r2]
 800e820:	e0a0      	b.n	800e964 <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e822:	4b57      	ldr	r3, [pc, #348]	@ (800e980 <probe_sen5x+0x234>)
 800e824:	4a58      	ldr	r2, [pc, #352]	@ (800e988 <probe_sen5x+0x23c>)
 800e826:	4955      	ldr	r1, [pc, #340]	@ (800e97c <probe_sen5x+0x230>)
 800e828:	2002      	movs	r0, #2
 800e82a:	f005 fabd 	bl	8013da8 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e82e:	2636      	movs	r6, #54	@ 0x36
 800e830:	19bc      	adds	r4, r7, r6
 800e832:	2308      	movs	r3, #8
 800e834:	18fd      	adds	r5, r7, r3
 800e836:	2309      	movs	r3, #9
 800e838:	18fa      	adds	r2, r7, r3
 800e83a:	230a      	movs	r3, #10
 800e83c:	18f9      	adds	r1, r7, r3
 800e83e:	230b      	movs	r3, #11
 800e840:	18f8      	adds	r0, r7, r3
 800e842:	1d7b      	adds	r3, r7, #5
 800e844:	9302      	str	r3, [sp, #8]
 800e846:	1dbb      	adds	r3, r7, #6
 800e848:	9301      	str	r3, [sp, #4]
 800e84a:	1dfb      	adds	r3, r7, #7
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	002b      	movs	r3, r5
 800e850:	f001 f862 	bl	800f918 <sen5x_get_version>
 800e854:	0003      	movs	r3, r0
 800e856:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e858:	19bb      	adds	r3, r7, r6
 800e85a:	2200      	movs	r2, #0
 800e85c:	5e9b      	ldrsh	r3, [r3, r2]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00b      	beq.n	800e87a <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e862:	19bb      	adds	r3, r7, r6
 800e864:	2200      	movs	r2, #0
 800e866:	5e9b      	ldrsh	r3, [r3, r2]
 800e868:	4a48      	ldr	r2, [pc, #288]	@ (800e98c <probe_sen5x+0x240>)
 800e86a:	4941      	ldr	r1, [pc, #260]	@ (800e970 <probe_sen5x+0x224>)
 800e86c:	2001      	movs	r0, #1
 800e86e:	f005 fa9b 	bl	8013da8 <CreateLine>
      return error;
 800e872:	19bb      	adds	r3, r7, r6
 800e874:	2200      	movs	r2, #0
 800e876:	5e9b      	ldrsh	r3, [r3, r2]
 800e878:	e074      	b.n	800e964 <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e87a:	230b      	movs	r3, #11
 800e87c:	18fb      	adds	r3, r7, r3
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	001d      	movs	r5, r3
 800e882:	230a      	movs	r3, #10
 800e884:	18fb      	adds	r3, r7, r3
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	0018      	movs	r0, r3
 800e88a:	2308      	movs	r3, #8
 800e88c:	18fb      	adds	r3, r7, r3
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	001c      	movs	r4, r3
 800e892:	1dfb      	adds	r3, r7, #7
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	4a3e      	ldr	r2, [pc, #248]	@ (800e990 <probe_sen5x+0x244>)
 800e898:	4938      	ldr	r1, [pc, #224]	@ (800e97c <probe_sen5x+0x230>)
 800e89a:	9302      	str	r3, [sp, #8]
 800e89c:	9401      	str	r4, [sp, #4]
 800e89e:	9000      	str	r0, [sp, #0]
 800e8a0:	002b      	movs	r3, r5
 800e8a2:	2002      	movs	r0, #2
 800e8a4:	f005 fa80 	bl	8013da8 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e8ac:	262e      	movs	r6, #46	@ 0x2e
 800e8ae:	19bb      	adds	r3, r7, r6
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e8b4:	232c      	movs	r3, #44	@ 0x2c
 800e8b6:	18fb      	adds	r3, r7, r3
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e8bc:	4935      	ldr	r1, [pc, #212]	@ (800e994 <probe_sen5x+0x248>)
 800e8be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8c0:	f7f2 fbbe 	bl	8001040 <__aeabi_fmul>
 800e8c4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e8c6:	1c18      	adds	r0, r3, #0
 800e8c8:	f7f2 ff8e 	bl	80017e8 <__aeabi_f2iz>
 800e8cc:	0003      	movs	r3, r0
 800e8ce:	b218      	sxth	r0, r3
 800e8d0:	2536      	movs	r5, #54	@ 0x36
 800e8d2:	197c      	adds	r4, r7, r5
 800e8d4:	232c      	movs	r3, #44	@ 0x2c
 800e8d6:	18fb      	adds	r3, r7, r3
 800e8d8:	881a      	ldrh	r2, [r3, #0]
 800e8da:	19bb      	adds	r3, r7, r6
 800e8dc:	2100      	movs	r1, #0
 800e8de:	5e5b      	ldrsh	r3, [r3, r1]
 800e8e0:	0019      	movs	r1, r3
 800e8e2:	f000 ff09 	bl	800f6f8 <sen5x_set_temperature_offset_parameters>
 800e8e6:	0003      	movs	r3, r0
 800e8e8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e8ea:	197b      	adds	r3, r7, r5
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	5e9b      	ldrsh	r3, [r3, r2]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00b      	beq.n	800e90c <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e8f4:	197b      	adds	r3, r7, r5
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	5e9b      	ldrsh	r3, [r3, r2]
 800e8fa:	4a27      	ldr	r2, [pc, #156]	@ (800e998 <probe_sen5x+0x24c>)
 800e8fc:	491c      	ldr	r1, [pc, #112]	@ (800e970 <probe_sen5x+0x224>)
 800e8fe:	2001      	movs	r0, #1
 800e900:	f005 fa52 	bl	8013da8 <CreateLine>
      return error;
 800e904:	197b      	adds	r3, r7, r5
 800e906:	2200      	movs	r2, #0
 800e908:	5e9b      	ldrsh	r3, [r3, r2]
 800e90a:	e02b      	b.n	800e964 <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e90c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e90e:	f7f4 ffc1 	bl	8003894 <__aeabi_f2d>
 800e912:	0002      	movs	r2, r0
 800e914:	000b      	movs	r3, r1
 800e916:	4821      	ldr	r0, [pc, #132]	@ (800e99c <probe_sen5x+0x250>)
 800e918:	4918      	ldr	r1, [pc, #96]	@ (800e97c <probe_sen5x+0x230>)
 800e91a:	9200      	str	r2, [sp, #0]
 800e91c:	9301      	str	r3, [sp, #4]
 800e91e:	0002      	movs	r2, r0
 800e920:	2002      	movs	r0, #2
 800e922:	f005 fa41 	bl	8013da8 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e926:	f7fb f95b 	bl	8009be0 <Check_USB_PowerOn>
 800e92a:	0003      	movs	r3, r0
 800e92c:	001a      	movs	r2, r3
 800e92e:	2301      	movs	r3, #1
 800e930:	4053      	eors	r3, r2
 800e932:	b2db      	uxtb	r3, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00a      	beq.n	800e94e <probe_sen5x+0x202>
    sen5x_Power_Off();
 800e938:	f7ff fed2 	bl	800e6e0 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e93c:	f005 ffc0 	bl	80148c0 <HAL_GetTick>
 800e940:	0003      	movs	r3, r0
 800e942:	22fa      	movs	r2, #250	@ 0xfa
 800e944:	00d2      	lsls	r2, r2, #3
 800e946:	189a      	adds	r2, r3, r2
 800e948:	4b15      	ldr	r3, [pc, #84]	@ (800e9a0 <probe_sen5x+0x254>)
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	e006      	b.n	800e95c <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e94e:	f005 ffb7 	bl	80148c0 <HAL_GetTick>
 800e952:	0003      	movs	r3, r0
 800e954:	4a13      	ldr	r2, [pc, #76]	@ (800e9a4 <probe_sen5x+0x258>)
 800e956:	189a      	adds	r2, r3, r2
 800e958:	4b11      	ldr	r3, [pc, #68]	@ (800e9a0 <probe_sen5x+0x254>)
 800e95a:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e95c:	2336      	movs	r3, #54	@ 0x36
 800e95e:	18fb      	adds	r3, r7, r3
 800e960:	2200      	movs	r2, #0
 800e962:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e964:	0018      	movs	r0, r3
 800e966:	46bd      	mov	sp, r7
 800e968:	b00f      	add	sp, #60	@ 0x3c
 800e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e96c:	0802d14c 	.word	0x0802d14c
 800e970:	0802d0fc 	.word	0x0802d0fc
 800e974:	0802d178 	.word	0x0802d178
 800e978:	0802d1a8 	.word	0x0802d1a8
 800e97c:	0802d090 	.word	0x0802d090
 800e980:	200011c0 	.word	0x200011c0
 800e984:	0802d1bc 	.word	0x0802d1bc
 800e988:	0802d1ec 	.word	0x0802d1ec
 800e98c:	0802d200 	.word	0x0802d200
 800e990:	0802d228 	.word	0x0802d228
 800e994:	43480000 	.word	0x43480000
 800e998:	0802d24c 	.word	0x0802d24c
 800e99c:	0802d28c 	.word	0x0802d28c
 800e9a0:	200011cc 	.word	0x200011cc
 800e9a4:	00006d60 	.word	0x00006d60

0800e9a8 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e9ae:	1dbb      	adds	r3, r7, #6
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e9b4:	4b1b      	ldr	r3, [pc, #108]	@ (800ea24 <sen5x_lightup_measurement+0x7c>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00b      	beq.n	800e9d4 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e9bc:	4a1a      	ldr	r2, [pc, #104]	@ (800ea28 <sen5x_lightup_measurement+0x80>)
 800e9be:	4b1b      	ldr	r3, [pc, #108]	@ (800ea2c <sen5x_lightup_measurement+0x84>)
 800e9c0:	0019      	movs	r1, r3
 800e9c2:	2002      	movs	r0, #2
 800e9c4:	f005 f9f0 	bl	8013da8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e9c8:	1dbc      	adds	r4, r7, #6
 800e9ca:	f000 fd21 	bl	800f410 <sen5x_start_measurement_without_pm>
 800e9ce:	0003      	movs	r3, r0
 800e9d0:	8023      	strh	r3, [r4, #0]
 800e9d2:	e00a      	b.n	800e9ea <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e9d4:	4a16      	ldr	r2, [pc, #88]	@ (800ea30 <sen5x_lightup_measurement+0x88>)
 800e9d6:	4b15      	ldr	r3, [pc, #84]	@ (800ea2c <sen5x_lightup_measurement+0x84>)
 800e9d8:	0019      	movs	r1, r3
 800e9da:	2002      	movs	r0, #2
 800e9dc:	f005 f9e4 	bl	8013da8 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800e9e0:	1dbc      	adds	r4, r7, #6
 800e9e2:	f000 fce7 	bl	800f3b4 <sen5x_start_measurement>
 800e9e6:	0003      	movs	r3, r0
 800e9e8:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800e9ea:	1dbb      	adds	r3, r7, #6
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	5e9b      	ldrsh	r3, [r3, r2]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d008      	beq.n	800ea06 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800e9f4:	1dbb      	adds	r3, r7, #6
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	5e9b      	ldrsh	r3, [r3, r2]
 800e9fa:	4a0e      	ldr	r2, [pc, #56]	@ (800ea34 <sen5x_lightup_measurement+0x8c>)
 800e9fc:	490e      	ldr	r1, [pc, #56]	@ (800ea38 <sen5x_lightup_measurement+0x90>)
 800e9fe:	2001      	movs	r0, #1
 800ea00:	f005 f9d2 	bl	8013da8 <CreateLine>
 800ea04:	e007      	b.n	800ea16 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800ea06:	f7fb f9f3 	bl	8009df0 <showTime>
    Info("sen5x_start_measurement executed");
 800ea0a:	4a0c      	ldr	r2, [pc, #48]	@ (800ea3c <sen5x_lightup_measurement+0x94>)
 800ea0c:	4b07      	ldr	r3, [pc, #28]	@ (800ea2c <sen5x_lightup_measurement+0x84>)
 800ea0e:	0019      	movs	r1, r3
 800ea10:	2002      	movs	r0, #2
 800ea12:	f005 f9c9 	bl	8013da8 <CreateLine>
  }
  return error;
 800ea16:	1dbb      	adds	r3, r7, #6
 800ea18:	2200      	movs	r2, #0
 800ea1a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea1c:	0018      	movs	r0, r3
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	b003      	add	sp, #12
 800ea22:	bd90      	pop	{r4, r7, pc}
 800ea24:	200011be 	.word	0x200011be
 800ea28:	0802d2c4 	.word	0x0802d2c4
 800ea2c:	0802d090 	.word	0x0802d090
 800ea30:	0802d2f0 	.word	0x0802d2f0
 800ea34:	0802d310 	.word	0x0802d310
 800ea38:	0802d0fc 	.word	0x0802d0fc
 800ea3c:	0802d340 	.word	0x0802d340

0800ea40 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ea40:	b590      	push	{r4, r7, lr}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ea46:	1dbb      	adds	r3, r7, #6
 800ea48:	2200      	movs	r2, #0
 800ea4a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ea4c:	4b21      	ldr	r3, [pc, #132]	@ (800ead4 <sen5x_extinguish_measurement+0x94>)
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d01e      	beq.n	800ea92 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ea54:	4a20      	ldr	r2, [pc, #128]	@ (800ead8 <sen5x_extinguish_measurement+0x98>)
 800ea56:	4b21      	ldr	r3, [pc, #132]	@ (800eadc <sen5x_extinguish_measurement+0x9c>)
 800ea58:	0019      	movs	r1, r3
 800ea5a:	2002      	movs	r0, #2
 800ea5c:	f005 f9a4 	bl	8013da8 <CreateLine>
    Info("PM measurement is disabled");
 800ea60:	4a1f      	ldr	r2, [pc, #124]	@ (800eae0 <sen5x_extinguish_measurement+0xa0>)
 800ea62:	4b1e      	ldr	r3, [pc, #120]	@ (800eadc <sen5x_extinguish_measurement+0x9c>)
 800ea64:	0019      	movs	r1, r3
 800ea66:	2002      	movs	r0, #2
 800ea68:	f005 f99e 	bl	8013da8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ea6c:	1dbc      	adds	r4, r7, #6
 800ea6e:	f000 fccf 	bl	800f410 <sen5x_start_measurement_without_pm>
 800ea72:	0003      	movs	r3, r0
 800ea74:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea76:	1dbb      	adds	r3, r7, #6
 800ea78:	2200      	movs	r2, #0
 800ea7a:	5e9b      	ldrsh	r3, [r3, r2]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d022      	beq.n	800eac6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800ea80:	1dbb      	adds	r3, r7, #6
 800ea82:	2200      	movs	r2, #0
 800ea84:	5e9b      	ldrsh	r3, [r3, r2]
 800ea86:	4a17      	ldr	r2, [pc, #92]	@ (800eae4 <sen5x_extinguish_measurement+0xa4>)
 800ea88:	4917      	ldr	r1, [pc, #92]	@ (800eae8 <sen5x_extinguish_measurement+0xa8>)
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	f005 f98c 	bl	8013da8 <CreateLine>
 800ea90:	e019      	b.n	800eac6 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800ea92:	1dbc      	adds	r4, r7, #6
 800ea94:	f000 fcea 	bl	800f46c <sen5x_stop_measurement>
 800ea98:	0003      	movs	r3, r0
 800ea9a:	8023      	strh	r3, [r4, #0]
    showTime();
 800ea9c:	f7fb f9a8 	bl	8009df0 <showTime>
    Info("sen5x_stop_measurement executed");
 800eaa0:	4a12      	ldr	r2, [pc, #72]	@ (800eaec <sen5x_extinguish_measurement+0xac>)
 800eaa2:	4b0e      	ldr	r3, [pc, #56]	@ (800eadc <sen5x_extinguish_measurement+0x9c>)
 800eaa4:	0019      	movs	r1, r3
 800eaa6:	2002      	movs	r0, #2
 800eaa8:	f005 f97e 	bl	8013da8 <CreateLine>
    if (error) {
 800eaac:	1dbb      	adds	r3, r7, #6
 800eaae:	2200      	movs	r2, #0
 800eab0:	5e9b      	ldrsh	r3, [r3, r2]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d007      	beq.n	800eac6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800eab6:	1dbb      	adds	r3, r7, #6
 800eab8:	2200      	movs	r2, #0
 800eaba:	5e9b      	ldrsh	r3, [r3, r2]
 800eabc:	4a0c      	ldr	r2, [pc, #48]	@ (800eaf0 <sen5x_extinguish_measurement+0xb0>)
 800eabe:	490a      	ldr	r1, [pc, #40]	@ (800eae8 <sen5x_extinguish_measurement+0xa8>)
 800eac0:	2001      	movs	r0, #1
 800eac2:	f005 f971 	bl	8013da8 <CreateLine>
    }
  }
  return error;
 800eac6:	1dbb      	adds	r3, r7, #6
 800eac8:	2200      	movs	r2, #0
 800eaca:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eacc:	0018      	movs	r0, r3
 800eace:	46bd      	mov	sp, r7
 800ead0:	b003      	add	sp, #12
 800ead2:	bd90      	pop	{r4, r7, pc}
 800ead4:	200011be 	.word	0x200011be
 800ead8:	0802d364 	.word	0x0802d364
 800eadc:	0802d090 	.word	0x0802d090
 800eae0:	0802d39c 	.word	0x0802d39c
 800eae4:	0802d3b8 	.word	0x0802d3b8
 800eae8:	0802d0fc 	.word	0x0802d0fc
 800eaec:	0802d3f8 	.word	0x0802d3f8
 800eaf0:	0802d418 	.word	0x0802d418

0800eaf4 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaf6:	b08d      	sub	sp, #52	@ 0x34
 800eaf8:	af04      	add	r7, sp, #16
 800eafa:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800eafc:	261e      	movs	r6, #30
 800eafe:	19bb      	adds	r3, r7, r6
 800eb00:	2200      	movs	r2, #0
 800eb02:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800eb04:	19bc      	adds	r4, r7, r6
 800eb06:	2316      	movs	r3, #22
 800eb08:	18fd      	adds	r5, r7, r3
 800eb0a:	2318      	movs	r3, #24
 800eb0c:	18fa      	adds	r2, r7, r3
 800eb0e:	231a      	movs	r3, #26
 800eb10:	18f9      	adds	r1, r7, r3
 800eb12:	231c      	movs	r3, #28
 800eb14:	18f8      	adds	r0, r7, r3
 800eb16:	230e      	movs	r3, #14
 800eb18:	18fb      	adds	r3, r7, r3
 800eb1a:	9303      	str	r3, [sp, #12]
 800eb1c:	2310      	movs	r3, #16
 800eb1e:	18fb      	adds	r3, r7, r3
 800eb20:	9302      	str	r3, [sp, #8]
 800eb22:	2312      	movs	r3, #18
 800eb24:	18fb      	adds	r3, r7, r3
 800eb26:	9301      	str	r3, [sp, #4]
 800eb28:	2314      	movs	r3, #20
 800eb2a:	18fb      	adds	r3, r7, r3
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	002b      	movs	r3, r5
 800eb30:	f000 fd1e 	bl	800f570 <sen5x_read_measured_values>
 800eb34:	0003      	movs	r3, r0
 800eb36:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800eb38:	19bb      	adds	r3, r7, r6
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	5e9b      	ldrsh	r3, [r3, r2]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d003      	beq.n	800eb4a <sen5x_read_measurement+0x56>
    return error;
 800eb42:	19bb      	adds	r3, r7, r6
 800eb44:	2200      	movs	r2, #0
 800eb46:	5e9b      	ldrsh	r3, [r3, r2]
 800eb48:	e02c      	b.n	800eba4 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800eb4a:	231c      	movs	r3, #28
 800eb4c:	18fb      	adds	r3, r7, r3
 800eb4e:	881a      	ldrh	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800eb54:	231a      	movs	r3, #26
 800eb56:	18fb      	adds	r3, r7, r3
 800eb58:	881a      	ldrh	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800eb5e:	2318      	movs	r3, #24
 800eb60:	18fb      	adds	r3, r7, r3
 800eb62:	881a      	ldrh	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800eb68:	2316      	movs	r3, #22
 800eb6a:	18fb      	adds	r3, r7, r3
 800eb6c:	881a      	ldrh	r2, [r3, #0]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800eb72:	2314      	movs	r3, #20
 800eb74:	18fb      	adds	r3, r7, r3
 800eb76:	2200      	movs	r2, #0
 800eb78:	5e9a      	ldrsh	r2, [r3, r2]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800eb7e:	2312      	movs	r3, #18
 800eb80:	18fb      	adds	r3, r7, r3
 800eb82:	2200      	movs	r2, #0
 800eb84:	5e9a      	ldrsh	r2, [r3, r2]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800eb8a:	2310      	movs	r3, #16
 800eb8c:	18fb      	adds	r3, r7, r3
 800eb8e:	2200      	movs	r2, #0
 800eb90:	5e9a      	ldrsh	r2, [r3, r2]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800eb96:	230e      	movs	r3, #14
 800eb98:	18fb      	adds	r3, r7, r3
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	5e9a      	ldrsh	r2, [r3, r2]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	81da      	strh	r2, [r3, #14]
  return 0;
 800eba2:	2300      	movs	r3, #0
}
 800eba4:	0018      	movs	r0, r3
 800eba6:	46bd      	mov	sp, r7
 800eba8:	b009      	add	sp, #36	@ 0x24
 800ebaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebac <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ebb2:	4b6e      	ldr	r3, [pc, #440]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ebb4:	881b      	ldrh	r3, [r3, #0]
 800ebb6:	4a6e      	ldr	r2, [pc, #440]	@ (800ed70 <sen5x_printvalues+0x1c4>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d017      	beq.n	800ebec <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ebbc:	4b6b      	ldr	r3, [pc, #428]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ebbe:	881b      	ldrh	r3, [r3, #0]
 800ebc0:	0018      	movs	r0, r3
 800ebc2:	f7f2 fe31 	bl	8001828 <__aeabi_i2f>
 800ebc6:	1c03      	adds	r3, r0, #0
 800ebc8:	496a      	ldr	r1, [pc, #424]	@ (800ed74 <sen5x_printvalues+0x1c8>)
 800ebca:	1c18      	adds	r0, r3, #0
 800ebcc:	f7f2 f86a 	bl	8000ca4 <__aeabi_fdiv>
 800ebd0:	1c03      	adds	r3, r0, #0
 800ebd2:	1c18      	adds	r0, r3, #0
 800ebd4:	f7f4 fe5e 	bl	8003894 <__aeabi_f2d>
 800ebd8:	0002      	movs	r2, r0
 800ebda:	000b      	movs	r3, r1
 800ebdc:	4866      	ldr	r0, [pc, #408]	@ (800ed78 <sen5x_printvalues+0x1cc>)
 800ebde:	4967      	ldr	r1, [pc, #412]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ebe0:	9200      	str	r2, [sp, #0]
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	0002      	movs	r2, r0
 800ebe6:	2002      	movs	r0, #2
 800ebe8:	f005 f8de 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ebec:	4b5f      	ldr	r3, [pc, #380]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ebee:	885b      	ldrh	r3, [r3, #2]
 800ebf0:	4a5f      	ldr	r2, [pc, #380]	@ (800ed70 <sen5x_printvalues+0x1c4>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d017      	beq.n	800ec26 <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ebf6:	4b5d      	ldr	r3, [pc, #372]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ebf8:	885b      	ldrh	r3, [r3, #2]
 800ebfa:	0018      	movs	r0, r3
 800ebfc:	f7f2 fe14 	bl	8001828 <__aeabi_i2f>
 800ec00:	1c03      	adds	r3, r0, #0
 800ec02:	495c      	ldr	r1, [pc, #368]	@ (800ed74 <sen5x_printvalues+0x1c8>)
 800ec04:	1c18      	adds	r0, r3, #0
 800ec06:	f7f2 f84d 	bl	8000ca4 <__aeabi_fdiv>
 800ec0a:	1c03      	adds	r3, r0, #0
 800ec0c:	1c18      	adds	r0, r3, #0
 800ec0e:	f7f4 fe41 	bl	8003894 <__aeabi_f2d>
 800ec12:	0002      	movs	r2, r0
 800ec14:	000b      	movs	r3, r1
 800ec16:	485a      	ldr	r0, [pc, #360]	@ (800ed80 <sen5x_printvalues+0x1d4>)
 800ec18:	4958      	ldr	r1, [pc, #352]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ec1a:	9200      	str	r2, [sp, #0]
 800ec1c:	9301      	str	r3, [sp, #4]
 800ec1e:	0002      	movs	r2, r0
 800ec20:	2002      	movs	r0, #2
 800ec22:	f005 f8c1 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ec26:	4b51      	ldr	r3, [pc, #324]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ec28:	889b      	ldrh	r3, [r3, #4]
 800ec2a:	4a51      	ldr	r2, [pc, #324]	@ (800ed70 <sen5x_printvalues+0x1c4>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d017      	beq.n	800ec60 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ec30:	4b4e      	ldr	r3, [pc, #312]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ec32:	889b      	ldrh	r3, [r3, #4]
 800ec34:	0018      	movs	r0, r3
 800ec36:	f7f2 fdf7 	bl	8001828 <__aeabi_i2f>
 800ec3a:	1c03      	adds	r3, r0, #0
 800ec3c:	494d      	ldr	r1, [pc, #308]	@ (800ed74 <sen5x_printvalues+0x1c8>)
 800ec3e:	1c18      	adds	r0, r3, #0
 800ec40:	f7f2 f830 	bl	8000ca4 <__aeabi_fdiv>
 800ec44:	1c03      	adds	r3, r0, #0
 800ec46:	1c18      	adds	r0, r3, #0
 800ec48:	f7f4 fe24 	bl	8003894 <__aeabi_f2d>
 800ec4c:	0002      	movs	r2, r0
 800ec4e:	000b      	movs	r3, r1
 800ec50:	484c      	ldr	r0, [pc, #304]	@ (800ed84 <sen5x_printvalues+0x1d8>)
 800ec52:	494a      	ldr	r1, [pc, #296]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ec54:	9200      	str	r2, [sp, #0]
 800ec56:	9301      	str	r3, [sp, #4]
 800ec58:	0002      	movs	r2, r0
 800ec5a:	2002      	movs	r0, #2
 800ec5c:	f005 f8a4 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ec60:	4b42      	ldr	r3, [pc, #264]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ec62:	88db      	ldrh	r3, [r3, #6]
 800ec64:	4a42      	ldr	r2, [pc, #264]	@ (800ed70 <sen5x_printvalues+0x1c4>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d017      	beq.n	800ec9a <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ec6a:	4b40      	ldr	r3, [pc, #256]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ec6c:	88db      	ldrh	r3, [r3, #6]
 800ec6e:	0018      	movs	r0, r3
 800ec70:	f7f2 fdda 	bl	8001828 <__aeabi_i2f>
 800ec74:	1c03      	adds	r3, r0, #0
 800ec76:	493f      	ldr	r1, [pc, #252]	@ (800ed74 <sen5x_printvalues+0x1c8>)
 800ec78:	1c18      	adds	r0, r3, #0
 800ec7a:	f7f2 f813 	bl	8000ca4 <__aeabi_fdiv>
 800ec7e:	1c03      	adds	r3, r0, #0
 800ec80:	1c18      	adds	r0, r3, #0
 800ec82:	f7f4 fe07 	bl	8003894 <__aeabi_f2d>
 800ec86:	0002      	movs	r2, r0
 800ec88:	000b      	movs	r3, r1
 800ec8a:	483f      	ldr	r0, [pc, #252]	@ (800ed88 <sen5x_printvalues+0x1dc>)
 800ec8c:	493b      	ldr	r1, [pc, #236]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ec8e:	9200      	str	r2, [sp, #0]
 800ec90:	9301      	str	r3, [sp, #4]
 800ec92:	0002      	movs	r2, r0
 800ec94:	2002      	movs	r0, #2
 800ec96:	f005 f887 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800ec9a:	4b34      	ldr	r3, [pc, #208]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ec9c:	2208      	movs	r2, #8
 800ec9e:	5e9b      	ldrsh	r3, [r3, r2]
 800eca0:	4a3a      	ldr	r2, [pc, #232]	@ (800ed8c <sen5x_printvalues+0x1e0>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d018      	beq.n	800ecd8 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800eca6:	4b31      	ldr	r3, [pc, #196]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800eca8:	2208      	movs	r2, #8
 800ecaa:	5e9b      	ldrsh	r3, [r3, r2]
 800ecac:	0018      	movs	r0, r3
 800ecae:	f7f2 fdbb 	bl	8001828 <__aeabi_i2f>
 800ecb2:	1c03      	adds	r3, r0, #0
 800ecb4:	4936      	ldr	r1, [pc, #216]	@ (800ed90 <sen5x_printvalues+0x1e4>)
 800ecb6:	1c18      	adds	r0, r3, #0
 800ecb8:	f7f1 fff4 	bl	8000ca4 <__aeabi_fdiv>
 800ecbc:	1c03      	adds	r3, r0, #0
 800ecbe:	1c18      	adds	r0, r3, #0
 800ecc0:	f7f4 fde8 	bl	8003894 <__aeabi_f2d>
 800ecc4:	0002      	movs	r2, r0
 800ecc6:	000b      	movs	r3, r1
 800ecc8:	4832      	ldr	r0, [pc, #200]	@ (800ed94 <sen5x_printvalues+0x1e8>)
 800ecca:	492c      	ldr	r1, [pc, #176]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800eccc:	9200      	str	r2, [sp, #0]
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	0002      	movs	r2, r0
 800ecd2:	2002      	movs	r0, #2
 800ecd4:	f005 f868 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800ecd8:	4b24      	ldr	r3, [pc, #144]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ecda:	220a      	movs	r2, #10
 800ecdc:	5e9b      	ldrsh	r3, [r3, r2]
 800ecde:	4a2b      	ldr	r2, [pc, #172]	@ (800ed8c <sen5x_printvalues+0x1e0>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d018      	beq.n	800ed16 <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800ece4:	4b21      	ldr	r3, [pc, #132]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ece6:	220a      	movs	r2, #10
 800ece8:	5e9b      	ldrsh	r3, [r3, r2]
 800ecea:	0018      	movs	r0, r3
 800ecec:	f7f2 fd9c 	bl	8001828 <__aeabi_i2f>
 800ecf0:	1c03      	adds	r3, r0, #0
 800ecf2:	4929      	ldr	r1, [pc, #164]	@ (800ed98 <sen5x_printvalues+0x1ec>)
 800ecf4:	1c18      	adds	r0, r3, #0
 800ecf6:	f7f1 ffd5 	bl	8000ca4 <__aeabi_fdiv>
 800ecfa:	1c03      	adds	r3, r0, #0
 800ecfc:	1c18      	adds	r0, r3, #0
 800ecfe:	f7f4 fdc9 	bl	8003894 <__aeabi_f2d>
 800ed02:	0002      	movs	r2, r0
 800ed04:	000b      	movs	r3, r1
 800ed06:	4825      	ldr	r0, [pc, #148]	@ (800ed9c <sen5x_printvalues+0x1f0>)
 800ed08:	491c      	ldr	r1, [pc, #112]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ed0a:	9200      	str	r2, [sp, #0]
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	0002      	movs	r2, r0
 800ed10:	2002      	movs	r0, #2
 800ed12:	f005 f849 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ed16:	4b15      	ldr	r3, [pc, #84]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ed18:	220c      	movs	r2, #12
 800ed1a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ed8c <sen5x_printvalues+0x1e0>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d00d      	beq.n	800ed3e <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ed22:	4b12      	ldr	r3, [pc, #72]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ed24:	220c      	movs	r2, #12
 800ed26:	5e9b      	ldrsh	r3, [r3, r2]
 800ed28:	210a      	movs	r1, #10
 800ed2a:	0018      	movs	r0, r3
 800ed2c:	f7f1 fac4 	bl	80002b8 <__divsi3>
 800ed30:	0003      	movs	r3, r0
 800ed32:	b21b      	sxth	r3, r3
 800ed34:	4a1a      	ldr	r2, [pc, #104]	@ (800eda0 <sen5x_printvalues+0x1f4>)
 800ed36:	4911      	ldr	r1, [pc, #68]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ed38:	2002      	movs	r0, #2
 800ed3a:	f005 f835 	bl	8013da8 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ed3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ed40:	220e      	movs	r2, #14
 800ed42:	5e9b      	ldrsh	r3, [r3, r2]
 800ed44:	4a11      	ldr	r2, [pc, #68]	@ (800ed8c <sen5x_printvalues+0x1e0>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d00d      	beq.n	800ed66 <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ed4a:	4b08      	ldr	r3, [pc, #32]	@ (800ed6c <sen5x_printvalues+0x1c0>)
 800ed4c:	220e      	movs	r2, #14
 800ed4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed50:	210a      	movs	r1, #10
 800ed52:	0018      	movs	r0, r3
 800ed54:	f7f1 fab0 	bl	80002b8 <__divsi3>
 800ed58:	0003      	movs	r3, r0
 800ed5a:	b21b      	sxth	r3, r3
 800ed5c:	4a11      	ldr	r2, [pc, #68]	@ (800eda4 <sen5x_printvalues+0x1f8>)
 800ed5e:	4907      	ldr	r1, [pc, #28]	@ (800ed7c <sen5x_printvalues+0x1d0>)
 800ed60:	2002      	movs	r0, #2
 800ed62:	f005 f821 	bl	8013da8 <CreateLine>
  }
}
 800ed66:	46c0      	nop			@ (mov r8, r8)
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	200011d0 	.word	0x200011d0
 800ed70:	0000ffff 	.word	0x0000ffff
 800ed74:	41200000 	.word	0x41200000
 800ed78:	0802d448 	.word	0x0802d448
 800ed7c:	0802d090 	.word	0x0802d090
 800ed80:	0802d470 	.word	0x0802d470
 800ed84:	0802d498 	.word	0x0802d498
 800ed88:	0802d4c0 	.word	0x0802d4c0
 800ed8c:	00007fff 	.word	0x00007fff
 800ed90:	42c80000 	.word	0x42c80000
 800ed94:	0802d4e8 	.word	0x0802d4e8
 800ed98:	43480000 	.word	0x43480000
 800ed9c:	0802d50c 	.word	0x0802d50c
 800eda0:	0802d530 	.word	0x0802d530
 800eda4:	0802d544 	.word	0x0802d544

0800eda8 <sen5xStore>:

void sen5xStore() {
 800eda8:	b5b0      	push	{r4, r5, r7, lr}
 800edaa:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800edac:	4b41      	ldr	r3, [pc, #260]	@ (800eeb4 <sen5xStore+0x10c>)
 800edae:	881b      	ldrh	r3, [r3, #0]
 800edb0:	4a41      	ldr	r2, [pc, #260]	@ (800eeb8 <sen5xStore+0x110>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d004      	beq.n	800edc0 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800edb6:	4b3f      	ldr	r3, [pc, #252]	@ (800eeb4 <sen5xStore+0x10c>)
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	0018      	movs	r0, r3
 800edbc:	f7f5 ff02 	bl	8004bc4 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800edc0:	4b3c      	ldr	r3, [pc, #240]	@ (800eeb4 <sen5xStore+0x10c>)
 800edc2:	885b      	ldrh	r3, [r3, #2]
 800edc4:	4a3c      	ldr	r2, [pc, #240]	@ (800eeb8 <sen5xStore+0x110>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d004      	beq.n	800edd4 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800edca:	4b3a      	ldr	r3, [pc, #232]	@ (800eeb4 <sen5xStore+0x10c>)
 800edcc:	885b      	ldrh	r3, [r3, #2]
 800edce:	0018      	movs	r0, r3
 800edd0:	f7f5 ff24 	bl	8004c1c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800edd4:	4b37      	ldr	r3, [pc, #220]	@ (800eeb4 <sen5xStore+0x10c>)
 800edd6:	889b      	ldrh	r3, [r3, #4]
 800edd8:	4a37      	ldr	r2, [pc, #220]	@ (800eeb8 <sen5xStore+0x110>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d004      	beq.n	800ede8 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800edde:	4b35      	ldr	r3, [pc, #212]	@ (800eeb4 <sen5xStore+0x10c>)
 800ede0:	889b      	ldrh	r3, [r3, #4]
 800ede2:	0018      	movs	r0, r3
 800ede4:	f7f5 ff46 	bl	8004c74 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ede8:	4b32      	ldr	r3, [pc, #200]	@ (800eeb4 <sen5xStore+0x10c>)
 800edea:	88db      	ldrh	r3, [r3, #6]
 800edec:	4a32      	ldr	r2, [pc, #200]	@ (800eeb8 <sen5xStore+0x110>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d004      	beq.n	800edfc <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800edf2:	4b30      	ldr	r3, [pc, #192]	@ (800eeb4 <sen5xStore+0x10c>)
 800edf4:	88db      	ldrh	r3, [r3, #6]
 800edf6:	0018      	movs	r0, r3
 800edf8:	f7f5 ff68 	bl	8004ccc <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800edfc:	4b2f      	ldr	r3, [pc, #188]	@ (800eebc <sen5xStore+0x114>)
 800edfe:	791b      	ldrb	r3, [r3, #4]
 800ee00:	2b34      	cmp	r3, #52	@ 0x34
 800ee02:	d003      	beq.n	800ee0c <sen5xStore+0x64>
 800ee04:	4b2d      	ldr	r3, [pc, #180]	@ (800eebc <sen5xStore+0x114>)
 800ee06:	791b      	ldrb	r3, [r3, #4]
 800ee08:	2b35      	cmp	r3, #53	@ 0x35
 800ee0a:	d14f      	bne.n	800eeac <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800ee0c:	4b29      	ldr	r3, [pc, #164]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee0e:	220a      	movs	r2, #10
 800ee10:	5e9b      	ldrsh	r3, [r3, r2]
 800ee12:	0018      	movs	r0, r3
 800ee14:	f7f2 fd08 	bl	8001828 <__aeabi_i2f>
 800ee18:	1c04      	adds	r4, r0, #0
 800ee1a:	4b26      	ldr	r3, [pc, #152]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee1c:	2208      	movs	r2, #8
 800ee1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee20:	0018      	movs	r0, r3
 800ee22:	f7f2 fd01 	bl	8001828 <__aeabi_i2f>
 800ee26:	1c03      	adds	r3, r0, #0
 800ee28:	1c19      	adds	r1, r3, #0
 800ee2a:	1c20      	adds	r0, r4, #0
 800ee2c:	f7f5 ff98 	bl	8004d60 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ee30:	4b23      	ldr	r3, [pc, #140]	@ (800eec0 <sen5xStore+0x118>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	2201      	movs	r2, #1
 800ee36:	4053      	eors	r3, r2
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d103      	bne.n	800ee46 <sen5xStore+0x9e>
 800ee3e:	4b21      	ldr	r3, [pc, #132]	@ (800eec4 <sen5xStore+0x11c>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d032      	beq.n	800eeac <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ee46:	4b1b      	ldr	r3, [pc, #108]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee48:	220c      	movs	r2, #12
 800ee4a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee4c:	4a1e      	ldr	r2, [pc, #120]	@ (800eec8 <sen5xStore+0x120>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d019      	beq.n	800ee86 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ee52:	4b18      	ldr	r3, [pc, #96]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee54:	220c      	movs	r2, #12
 800ee56:	5e9b      	ldrsh	r3, [r3, r2]
 800ee58:	210a      	movs	r1, #10
 800ee5a:	0018      	movs	r0, r3
 800ee5c:	f7f1 fa2c 	bl	80002b8 <__divsi3>
 800ee60:	0003      	movs	r3, r0
 800ee62:	b21b      	sxth	r3, r3
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	0018      	movs	r0, r3
 800ee68:	f003 ff02 	bl	8012c70 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ee6c:	4b11      	ldr	r3, [pc, #68]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee6e:	220c      	movs	r2, #12
 800ee70:	5e9b      	ldrsh	r3, [r3, r2]
 800ee72:	210a      	movs	r1, #10
 800ee74:	0018      	movs	r0, r3
 800ee76:	f7f1 fa1f 	bl	80002b8 <__divsi3>
 800ee7a:	0003      	movs	r3, r0
 800ee7c:	b21b      	sxth	r3, r3
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	0018      	movs	r0, r3
 800ee82:	f7f5 fe17 	bl	8004ab4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800ee86:	4b0b      	ldr	r3, [pc, #44]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee88:	220e      	movs	r2, #14
 800ee8a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee8c:	4a0e      	ldr	r2, [pc, #56]	@ (800eec8 <sen5xStore+0x120>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d00c      	beq.n	800eeac <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800ee92:	4b08      	ldr	r3, [pc, #32]	@ (800eeb4 <sen5xStore+0x10c>)
 800ee94:	220e      	movs	r2, #14
 800ee96:	5e9b      	ldrsh	r3, [r3, r2]
 800ee98:	210a      	movs	r1, #10
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	f7f1 fa0c 	bl	80002b8 <__divsi3>
 800eea0:	0003      	movs	r3, r0
 800eea2:	b21b      	sxth	r3, r3
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	0018      	movs	r0, r3
 800eea8:	f7f5 ff3c 	bl	8004d24 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800eeac:	46c0      	nop			@ (mov r8, r8)
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bdb0      	pop	{r4, r5, r7, pc}
 800eeb2:	46c0      	nop			@ (mov r8, r8)
 800eeb4:	200011d0 	.word	0x200011d0
 800eeb8:	0000ffff 	.word	0x0000ffff
 800eebc:	200011c0 	.word	0x200011c0
 800eec0:	200011be 	.word	0x200011be
 800eec4:	2000214d 	.word	0x2000214d
 800eec8:	00007fff 	.word	0x00007fff

0800eecc <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800eecc:	b590      	push	{r4, r7, lr}
 800eece:	b085      	sub	sp, #20
 800eed0:	af02      	add	r7, sp, #8
 800eed2:	6039      	str	r1, [r7, #0]
 800eed4:	0011      	movs	r1, r2
 800eed6:	1dfb      	adds	r3, r7, #7
 800eed8:	1c02      	adds	r2, r0, #0
 800eeda:	701a      	strb	r2, [r3, #0]
 800eedc:	1d3b      	adds	r3, r7, #4
 800eede:	1c0a      	adds	r2, r1, #0
 800eee0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800eee2:	1dfb      	adds	r3, r7, #7
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	18db      	adds	r3, r3, r3
 800eeea:	b299      	uxth	r1, r3
 800eeec:	1d3b      	adds	r3, r7, #4
 800eeee:	881b      	ldrh	r3, [r3, #0]
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	4805      	ldr	r0, [pc, #20]	@ (800ef08 <sensirion_i2c_hal_read+0x3c>)
 800eef4:	2464      	movs	r4, #100	@ 0x64
 800eef6:	9400      	str	r4, [sp, #0]
 800eef8:	f007 f920 	bl	801613c <HAL_I2C_Master_Receive>
 800eefc:	0003      	movs	r3, r0
 800eefe:	b25b      	sxtb	r3, r3
}
 800ef00:	0018      	movs	r0, r3
 800ef02:	46bd      	mov	sp, r7
 800ef04:	b003      	add	sp, #12
 800ef06:	bd90      	pop	{r4, r7, pc}
 800ef08:	20000f8c 	.word	0x20000f8c

0800ef0c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800ef0c:	b590      	push	{r4, r7, lr}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af02      	add	r7, sp, #8
 800ef12:	6039      	str	r1, [r7, #0]
 800ef14:	0011      	movs	r1, r2
 800ef16:	1dfb      	adds	r3, r7, #7
 800ef18:	1c02      	adds	r2, r0, #0
 800ef1a:	701a      	strb	r2, [r3, #0]
 800ef1c:	1d3b      	adds	r3, r7, #4
 800ef1e:	1c0a      	adds	r2, r1, #0
 800ef20:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800ef22:	1dfb      	adds	r3, r7, #7
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	18db      	adds	r3, r3, r3
 800ef2a:	b299      	uxth	r1, r3
 800ef2c:	1d3b      	adds	r3, r7, #4
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	683a      	ldr	r2, [r7, #0]
 800ef32:	4805      	ldr	r0, [pc, #20]	@ (800ef48 <sensirion_i2c_hal_write+0x3c>)
 800ef34:	2464      	movs	r4, #100	@ 0x64
 800ef36:	9400      	str	r4, [sp, #0]
 800ef38:	f006 fff8 	bl	8015f2c <HAL_I2C_Master_Transmit>
 800ef3c:	0003      	movs	r3, r0
 800ef3e:	b25b      	sxtb	r3, r3
}
 800ef40:	0018      	movs	r0, r3
 800ef42:	46bd      	mov	sp, r7
 800ef44:	b003      	add	sp, #12
 800ef46:	bd90      	pop	{r4, r7, pc}
 800ef48:	20000f8c 	.word	0x20000f8c

0800ef4c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	22fa      	movs	r2, #250	@ 0xfa
 800ef58:	0091      	lsls	r1, r2, #2
 800ef5a:	0018      	movs	r0, r3
 800ef5c:	f7f1 f922 	bl	80001a4 <__udivsi3>
 800ef60:	0003      	movs	r3, r0
 800ef62:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	22fa      	movs	r2, #250	@ 0xfa
 800ef68:	0091      	lsls	r1, r2, #2
 800ef6a:	0018      	movs	r0, r3
 800ef6c:	f7f1 f9a0 	bl	80002b0 <__aeabi_uidivmod>
 800ef70:	1e0b      	subs	r3, r1, #0
 800ef72:	d002      	beq.n	800ef7a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3301      	adds	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	0018      	movs	r0, r3
 800ef7e:	f005 fca9 	bl	80148d4 <HAL_Delay>
}
 800ef82:	46c0      	nop			@ (mov r8, r8)
 800ef84:	46bd      	mov	sp, r7
 800ef86:	b004      	add	sp, #16
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800ef92:	1d3b      	adds	r3, r7, #4
 800ef94:	0018      	movs	r0, r3
 800ef96:	f000 fd2b 	bl	800f9f0 <sen5x_read_device_status>
 800ef9a:	0003      	movs	r3, r0
 800ef9c:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a2c      	ldr	r2, [pc, #176]	@ (800f054 <sen5x_check_for_errors+0xc8>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d107      	bne.n	800efb6 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800efa6:	4a2c      	ldr	r2, [pc, #176]	@ (800f058 <sen5x_check_for_errors+0xcc>)
 800efa8:	4b2c      	ldr	r3, [pc, #176]	@ (800f05c <sen5x_check_for_errors+0xd0>)
 800efaa:	0019      	movs	r1, r3
 800efac:	2001      	movs	r0, #1
 800efae:	f004 fefb 	bl	8013da8 <CreateLine>
    return true;
 800efb2:	2301      	movs	r3, #1
 800efb4:	e049      	b.n	800f04a <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <sen5x_check_for_errors+0x34>
    return false;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e044      	b.n	800f04a <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	2380      	movs	r3, #128	@ 0x80
 800efc4:	039b      	lsls	r3, r3, #14
 800efc6:	4013      	ands	r3, r2
 800efc8:	d005      	beq.n	800efd6 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800efca:	4a25      	ldr	r2, [pc, #148]	@ (800f060 <sen5x_check_for_errors+0xd4>)
 800efcc:	4b25      	ldr	r3, [pc, #148]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800efce:	0019      	movs	r1, r3
 800efd0:	2003      	movs	r0, #3
 800efd2:	f004 fee9 	bl	8013da8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	2380      	movs	r3, #128	@ 0x80
 800efda:	031b      	lsls	r3, r3, #12
 800efdc:	4013      	ands	r3, r2
 800efde:	d005      	beq.n	800efec <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800efe0:	4a21      	ldr	r2, [pc, #132]	@ (800f068 <sen5x_check_for_errors+0xdc>)
 800efe2:	4b20      	ldr	r3, [pc, #128]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800efe4:	0019      	movs	r1, r3
 800efe6:	2003      	movs	r0, #3
 800efe8:	f004 fede 	bl	8013da8 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2280      	movs	r2, #128	@ 0x80
 800eff0:	4013      	ands	r3, r2
 800eff2:	d005      	beq.n	800f000 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800eff4:	4a1d      	ldr	r2, [pc, #116]	@ (800f06c <sen5x_check_for_errors+0xe0>)
 800eff6:	4b1b      	ldr	r3, [pc, #108]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800eff8:	0019      	movs	r1, r3
 800effa:	2003      	movs	r0, #3
 800effc:	f004 fed4 	bl	8013da8 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2240      	movs	r2, #64	@ 0x40
 800f004:	4013      	ands	r3, r2
 800f006:	d005      	beq.n	800f014 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f008:	4a19      	ldr	r2, [pc, #100]	@ (800f070 <sen5x_check_for_errors+0xe4>)
 800f00a:	4b16      	ldr	r3, [pc, #88]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800f00c:	0019      	movs	r1, r3
 800f00e:	2003      	movs	r0, #3
 800f010:	f004 feca 	bl	8013da8 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2220      	movs	r2, #32
 800f018:	4013      	ands	r3, r2
 800f01a:	d005      	beq.n	800f028 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f01c:	4a15      	ldr	r2, [pc, #84]	@ (800f074 <sen5x_check_for_errors+0xe8>)
 800f01e:	4b11      	ldr	r3, [pc, #68]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800f020:	0019      	movs	r1, r3
 800f022:	2003      	movs	r0, #3
 800f024:	f004 fec0 	bl	8013da8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2210      	movs	r2, #16
 800f02c:	4013      	ands	r3, r2
 800f02e:	d005      	beq.n	800f03c <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f030:	4a11      	ldr	r2, [pc, #68]	@ (800f078 <sen5x_check_for_errors+0xec>)
 800f032:	4b0c      	ldr	r3, [pc, #48]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800f034:	0019      	movs	r1, r3
 800f036:	2003      	movs	r0, #3
 800f038:	f004 feb6 	bl	8013da8 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a0f      	ldr	r2, [pc, #60]	@ (800f07c <sen5x_check_for_errors+0xf0>)
 800f040:	4908      	ldr	r1, [pc, #32]	@ (800f064 <sen5x_check_for_errors+0xd8>)
 800f042:	2003      	movs	r0, #3
 800f044:	f004 feb0 	bl	8013da8 <CreateLine>
  return true;
 800f048:	2301      	movs	r3, #1
}
 800f04a:	0018      	movs	r0, r3
 800f04c:	46bd      	mov	sp, r7
 800f04e:	b002      	add	sp, #8
 800f050:	bd80      	pop	{r7, pc}
 800f052:	46c0      	nop			@ (mov r8, r8)
 800f054:	0000d206 	.word	0x0000d206
 800f058:	0802d558 	.word	0x0802d558
 800f05c:	0802d0fc 	.word	0x0802d0fc
 800f060:	0802d598 	.word	0x0802d598
 800f064:	0802d0d0 	.word	0x0802d0d0
 800f068:	0802d5b8 	.word	0x0802d5b8
 800f06c:	0802d5d4 	.word	0x0802d5d4
 800f070:	0802d5f8 	.word	0x0802d5f8
 800f074:	0802d618 	.word	0x0802d618
 800f078:	0802d62c 	.word	0x0802d62c
 800f07c:	0802d668 	.word	0x0802d668

0800f080 <set_light_on_state>:

void set_light_on_state(void) {
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f084:	4b15      	ldr	r3, [pc, #84]	@ (800f0dc <set_light_on_state+0x5c>)
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	2201      	movs	r2, #1
 800f08a:	4053      	eors	r3, r2
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d008      	beq.n	800f0a4 <set_light_on_state+0x24>
    sen5x_Power_On();
 800f092:	f7ff faf5 	bl	800e680 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f096:	4a12      	ldr	r2, [pc, #72]	@ (800f0e0 <set_light_on_state+0x60>)
 800f098:	4b12      	ldr	r3, [pc, #72]	@ (800f0e4 <set_light_on_state+0x64>)
 800f09a:	0019      	movs	r1, r3
 800f09c:	2003      	movs	r0, #3
 800f09e:	f004 fe83 	bl	8013da8 <CreateLine>
 800f0a2:	e00a      	b.n	800f0ba <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f0a4:	f005 fc0c 	bl	80148c0 <HAL_GetTick>
 800f0a8:	0002      	movs	r2, r0
 800f0aa:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e8 <set_light_on_state+0x68>)
 800f0ac:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f0ae:	4a0f      	ldr	r2, [pc, #60]	@ (800f0ec <set_light_on_state+0x6c>)
 800f0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e4 <set_light_on_state+0x64>)
 800f0b2:	0019      	movs	r1, r3
 800f0b4:	2003      	movs	r0, #3
 800f0b6:	f004 fe77 	bl	8013da8 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f0ba:	f7ff fc75 	bl	800e9a8 <sen5x_lightup_measurement>
 800f0be:	1e03      	subs	r3, r0, #0
 800f0c0:	d005      	beq.n	800f0ce <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f0c2:	4a0b      	ldr	r2, [pc, #44]	@ (800f0f0 <set_light_on_state+0x70>)
 800f0c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f0f4 <set_light_on_state+0x74>)
 800f0c6:	0019      	movs	r1, r3
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f004 fe6d 	bl	8013da8 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f0f8 <set_light_on_state+0x78>)
 800f0d0:	2203      	movs	r2, #3
 800f0d2:	701a      	strb	r2, [r3, #0]
}
 800f0d4:	46c0      	nop			@ (mov r8, r8)
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	46c0      	nop			@ (mov r8, r8)
 800f0dc:	200011bd 	.word	0x200011bd
 800f0e0:	0802d698 	.word	0x0802d698
 800f0e4:	0802d0d0 	.word	0x0802d0d0
 800f0e8:	200011cc 	.word	0x200011cc
 800f0ec:	0802d6b8 	.word	0x0802d6b8
 800f0f0:	0802d6d0 	.word	0x0802d6d0
 800f0f4:	0802d0fc 	.word	0x0802d0fc
 800f0f8:	200000aa 	.word	0x200000aa

0800f0fc <sen5x_statemachine>:

void sen5x_statemachine() {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f102:	1dfb      	adds	r3, r7, #7
 800f104:	2200      	movs	r2, #0
 800f106:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f108:	4b92      	ldr	r3, [pc, #584]	@ (800f354 <sen5x_statemachine+0x258>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	0018      	movs	r0, r3
 800f10e:	f004 fdf5 	bl	8013cfc <TimestampIsReached>
 800f112:	1e03      	subs	r3, r0, #0
 800f114:	d100      	bne.n	800f118 <sen5x_statemachine+0x1c>
 800f116:	e118      	b.n	800f34a <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f118:	4b8f      	ldr	r3, [pc, #572]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	2b05      	cmp	r3, #5
 800f11e:	d900      	bls.n	800f122 <sen5x_statemachine+0x26>
 800f120:	e113      	b.n	800f34a <sen5x_statemachine+0x24e>
 800f122:	009a      	lsls	r2, r3, #2
 800f124:	4b8d      	ldr	r3, [pc, #564]	@ (800f35c <sen5x_statemachine+0x260>)
 800f126:	18d3      	adds	r3, r2, r3
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f12c:	4a8c      	ldr	r2, [pc, #560]	@ (800f360 <sen5x_statemachine+0x264>)
 800f12e:	4b8d      	ldr	r3, [pc, #564]	@ (800f364 <sen5x_statemachine+0x268>)
 800f130:	0019      	movs	r1, r3
 800f132:	2001      	movs	r0, #1
 800f134:	f004 fe38 	bl	8013da8 <CreateLine>
      SetPMSensorStatus(false);
 800f138:	2000      	movs	r0, #0
 800f13a:	f7fe f9fb 	bl	800d534 <SetPMSensorStatus>
      DisablePMSensor();
 800f13e:	f7fe f97d 	bl	800d43c <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f142:	f005 fbbd 	bl	80148c0 <HAL_GetTick>
 800f146:	0003      	movs	r3, r0
 800f148:	4a87      	ldr	r2, [pc, #540]	@ (800f368 <sen5x_statemachine+0x26c>)
 800f14a:	189a      	adds	r2, r3, r2
 800f14c:	4b81      	ldr	r3, [pc, #516]	@ (800f354 <sen5x_statemachine+0x258>)
 800f14e:	601a      	str	r2, [r3, #0]
      break;
 800f150:	e0fb      	b.n	800f34a <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f152:	f005 fbb5 	bl	80148c0 <HAL_GetTick>
 800f156:	0003      	movs	r3, r0
 800f158:	4a84      	ldr	r2, [pc, #528]	@ (800f36c <sen5x_statemachine+0x270>)
 800f15a:	189a      	adds	r2, r3, r2
 800f15c:	4b7d      	ldr	r3, [pc, #500]	@ (800f354 <sen5x_statemachine+0x258>)
 800f15e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f160:	f7ff ff8e 	bl	800f080 <set_light_on_state>
      break;
 800f164:	e0f1      	b.n	800f34a <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f166:	4b7c      	ldr	r3, [pc, #496]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f168:	2202      	movs	r2, #2
 800f16a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f16c:	4b80      	ldr	r3, [pc, #512]	@ (800f370 <sen5x_statemachine+0x274>)
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	2b05      	cmp	r3, #5
 800f172:	d905      	bls.n	800f180 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f174:	4b78      	ldr	r3, [pc, #480]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f176:	2200      	movs	r2, #0
 800f178:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f17a:	f7ff fab1 	bl	800e6e0 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f17e:	e0e1      	b.n	800f344 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f180:	f7ff ff04 	bl	800ef8c <sen5x_check_for_errors>
 800f184:	1e03      	subs	r3, r0, #0
 800f186:	d028      	beq.n	800f1da <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f188:	f000 fc84 	bl	800fa94 <sen5x_device_reset>
 800f18c:	1e03      	subs	r3, r0, #0
 800f18e:	d018      	beq.n	800f1c2 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f190:	4a78      	ldr	r2, [pc, #480]	@ (800f374 <sen5x_statemachine+0x278>)
 800f192:	4b74      	ldr	r3, [pc, #464]	@ (800f364 <sen5x_statemachine+0x268>)
 800f194:	0019      	movs	r1, r3
 800f196:	2001      	movs	r0, #1
 800f198:	f004 fe06 	bl	8013da8 <CreateLine>
            sen5xErrors++;
 800f19c:	4b74      	ldr	r3, [pc, #464]	@ (800f370 <sen5x_statemachine+0x274>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	4b72      	ldr	r3, [pc, #456]	@ (800f370 <sen5x_statemachine+0x274>)
 800f1a6:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f1a8:	f7ff fa9a 	bl	800e6e0 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f1ac:	f005 fb88 	bl	80148c0 <HAL_GetTick>
 800f1b0:	0003      	movs	r3, r0
 800f1b2:	4a6e      	ldr	r2, [pc, #440]	@ (800f36c <sen5x_statemachine+0x270>)
 800f1b4:	189a      	adds	r2, r3, r2
 800f1b6:	4b67      	ldr	r3, [pc, #412]	@ (800f354 <sen5x_statemachine+0x258>)
 800f1b8:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f1ba:	4b67      	ldr	r3, [pc, #412]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f1bc:	2205      	movs	r2, #5
 800f1be:	701a      	strb	r2, [r3, #0]
 800f1c0:	e005      	b.n	800f1ce <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f1c2:	4a6d      	ldr	r2, [pc, #436]	@ (800f378 <sen5x_statemachine+0x27c>)
 800f1c4:	4b6d      	ldr	r3, [pc, #436]	@ (800f37c <sen5x_statemachine+0x280>)
 800f1c6:	0019      	movs	r1, r3
 800f1c8:	2002      	movs	r0, #2
 800f1ca:	f004 fded 	bl	8013da8 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f1ce:	f005 fb77 	bl	80148c0 <HAL_GetTick>
 800f1d2:	0002      	movs	r2, r0
 800f1d4:	4b5f      	ldr	r3, [pc, #380]	@ (800f354 <sen5x_statemachine+0x258>)
 800f1d6:	601a      	str	r2, [r3, #0]
      break;
 800f1d8:	e0b4      	b.n	800f344 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f1da:	4b65      	ldr	r3, [pc, #404]	@ (800f370 <sen5x_statemachine+0x274>)
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d100      	bne.n	800f1e4 <sen5x_statemachine+0xe8>
 800f1e2:	e0af      	b.n	800f344 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f1e4:	4b62      	ldr	r3, [pc, #392]	@ (800f370 <sen5x_statemachine+0x274>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f1ea:	4a65      	ldr	r2, [pc, #404]	@ (800f380 <sen5x_statemachine+0x284>)
 800f1ec:	4b65      	ldr	r3, [pc, #404]	@ (800f384 <sen5x_statemachine+0x288>)
 800f1ee:	0019      	movs	r1, r3
 800f1f0:	2003      	movs	r0, #3
 800f1f2:	f004 fdd9 	bl	8013da8 <CreateLine>
      break;
 800f1f6:	e0a5      	b.n	800f344 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f1f8:	1dfb      	adds	r3, r7, #7
 800f1fa:	0018      	movs	r0, r3
 800f1fc:	f000 f966 	bl	800f4cc <sen5x_read_data_ready>
      if (data_ready) {
 800f200:	1dfb      	adds	r3, r7, #7
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d038      	beq.n	800f27a <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f208:	f003 fbe0 	bl	80129cc <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f20c:	4b5e      	ldr	r3, [pc, #376]	@ (800f388 <sen5x_statemachine+0x28c>)
 800f20e:	0018      	movs	r0, r3
 800f210:	f7ff fc70 	bl	800eaf4 <sen5x_read_measurement>
 800f214:	1e03      	subs	r3, r0, #0
 800f216:	d017      	beq.n	800f248 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f218:	4a5c      	ldr	r2, [pc, #368]	@ (800f38c <sen5x_statemachine+0x290>)
 800f21a:	4b52      	ldr	r3, [pc, #328]	@ (800f364 <sen5x_statemachine+0x268>)
 800f21c:	0019      	movs	r1, r3
 800f21e:	2001      	movs	r0, #1
 800f220:	f004 fdc2 	bl	8013da8 <CreateLine>
          sen5xErrors++;
 800f224:	4b52      	ldr	r3, [pc, #328]	@ (800f370 <sen5x_statemachine+0x274>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	3301      	adds	r3, #1
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	4b50      	ldr	r3, [pc, #320]	@ (800f370 <sen5x_statemachine+0x274>)
 800f22e:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f230:	f7ff fa56 	bl	800e6e0 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f234:	f005 fb44 	bl	80148c0 <HAL_GetTick>
 800f238:	0003      	movs	r3, r0
 800f23a:	4a4c      	ldr	r2, [pc, #304]	@ (800f36c <sen5x_statemachine+0x270>)
 800f23c:	189a      	adds	r2, r3, r2
 800f23e:	4b45      	ldr	r3, [pc, #276]	@ (800f354 <sen5x_statemachine+0x258>)
 800f240:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f242:	4b45      	ldr	r3, [pc, #276]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f244:	2205      	movs	r2, #5
 800f246:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f248:	4b51      	ldr	r3, [pc, #324]	@ (800f390 <sen5x_statemachine+0x294>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	4b4f      	ldr	r3, [pc, #316]	@ (800f390 <sen5x_statemachine+0x294>)
 800f252:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f254:	4b4e      	ldr	r3, [pc, #312]	@ (800f390 <sen5x_statemachine+0x294>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b1f      	cmp	r3, #31
 800f25a:	d102      	bne.n	800f262 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f25c:	4b4c      	ldr	r3, [pc, #304]	@ (800f390 <sen5x_statemachine+0x294>)
 800f25e:	2200      	movs	r2, #0
 800f260:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f262:	4b4b      	ldr	r3, [pc, #300]	@ (800f390 <sen5x_statemachine+0x294>)
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	2b01      	cmp	r3, #1
 800f268:	d901      	bls.n	800f26e <sen5x_statemachine+0x172>
          sen5xStore();
 800f26a:	f7ff fd9d 	bl	800eda8 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f26e:	4b48      	ldr	r3, [pc, #288]	@ (800f390 <sen5x_statemachine+0x294>)
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	2b02      	cmp	r3, #2
 800f274:	d101      	bne.n	800f27a <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f276:	f7ff fc99 	bl	800ebac <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f27a:	4b46      	ldr	r3, [pc, #280]	@ (800f394 <sen5x_statemachine+0x298>)
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d103      	bne.n	800f28a <sen5x_statemachine+0x18e>
 800f282:	4b43      	ldr	r3, [pc, #268]	@ (800f390 <sen5x_statemachine+0x294>)
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b01      	cmp	r3, #1
 800f288:	d95e      	bls.n	800f348 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f28a:	4b33      	ldr	r3, [pc, #204]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f28c:	2204      	movs	r2, #4
 800f28e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f290:	e05a      	b.n	800f348 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f292:	4b41      	ldr	r3, [pc, #260]	@ (800f398 <sen5x_statemachine+0x29c>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d11e      	bne.n	800f2d8 <sen5x_statemachine+0x1dc>
 800f29a:	4b40      	ldr	r3, [pc, #256]	@ (800f39c <sen5x_statemachine+0x2a0>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d11a      	bne.n	800f2d8 <sen5x_statemachine+0x1dc>
 800f2a2:	4b3f      	ldr	r3, [pc, #252]	@ (800f3a0 <sen5x_statemachine+0x2a4>)
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	4053      	eors	r3, r2
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d013      	beq.n	800f2d8 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f2b0:	f000 f9f2 	bl	800f698 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f2b4:	4a3b      	ldr	r2, [pc, #236]	@ (800f3a4 <sen5x_statemachine+0x2a8>)
 800f2b6:	4b31      	ldr	r3, [pc, #196]	@ (800f37c <sen5x_statemachine+0x280>)
 800f2b8:	0019      	movs	r1, r3
 800f2ba:	2002      	movs	r0, #2
 800f2bc:	f004 fd74 	bl	8013da8 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f2c0:	f005 fafe 	bl	80148c0 <HAL_GetTick>
 800f2c4:	0003      	movs	r3, r0
 800f2c6:	4a38      	ldr	r2, [pc, #224]	@ (800f3a8 <sen5x_statemachine+0x2ac>)
 800f2c8:	189a      	adds	r2, r3, r2
 800f2ca:	4b22      	ldr	r3, [pc, #136]	@ (800f354 <sen5x_statemachine+0x258>)
 800f2cc:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f2ce:	4b34      	ldr	r3, [pc, #208]	@ (800f3a0 <sen5x_statemachine+0x2a4>)
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f2d4:	f7ff fb68 	bl	800e9a8 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f2d8:	4b1f      	ldr	r3, [pc, #124]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f2da:	2205      	movs	r2, #5
 800f2dc:	701a      	strb	r2, [r3, #0]
      break;
 800f2de:	e034      	b.n	800f34a <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f2e0:	4b2c      	ldr	r3, [pc, #176]	@ (800f394 <sen5x_statemachine+0x298>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	4053      	eors	r3, r2
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d01c      	beq.n	800f328 <sen5x_statemachine+0x22c>
 800f2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800f3ac <sen5x_statemachine+0x2b0>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	4053      	eors	r3, r2
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d015      	beq.n	800f328 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f2fc:	f7ff fba0 	bl	800ea40 <sen5x_extinguish_measurement>
 800f300:	1e03      	subs	r3, r0, #0
 800f302:	d005      	beq.n	800f310 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f304:	4a2a      	ldr	r2, [pc, #168]	@ (800f3b0 <sen5x_statemachine+0x2b4>)
 800f306:	4b17      	ldr	r3, [pc, #92]	@ (800f364 <sen5x_statemachine+0x268>)
 800f308:	0019      	movs	r1, r3
 800f30a:	2001      	movs	r0, #1
 800f30c:	f004 fd4c 	bl	8013da8 <CreateLine>
        }
        sen5xSamples = 0;
 800f310:	4b1f      	ldr	r3, [pc, #124]	@ (800f390 <sen5x_statemachine+0x294>)
 800f312:	2200      	movs	r2, #0
 800f314:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f316:	f7ff f9e3 	bl	800e6e0 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f31a:	2000      	movs	r0, #0
 800f31c:	f7fe f90a 	bl	800d534 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f320:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f322:	2201      	movs	r2, #1
 800f324:	701a      	strb	r2, [r3, #0]
 800f326:	e002      	b.n	800f32e <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f328:	4b0b      	ldr	r3, [pc, #44]	@ (800f358 <sen5x_statemachine+0x25c>)
 800f32a:	2203      	movs	r2, #3
 800f32c:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f32e:	f003 fb6d 	bl	8012a0c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f332:	f005 fac5 	bl	80148c0 <HAL_GetTick>
 800f336:	0003      	movs	r3, r0
 800f338:	22fa      	movs	r2, #250	@ 0xfa
 800f33a:	0092      	lsls	r2, r2, #2
 800f33c:	189a      	adds	r2, r3, r2
 800f33e:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <sen5x_statemachine+0x258>)
 800f340:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f342:	e002      	b.n	800f34a <sen5x_statemachine+0x24e>
      break;
 800f344:	46c0      	nop			@ (mov r8, r8)
 800f346:	e000      	b.n	800f34a <sen5x_statemachine+0x24e>
      break;
 800f348:	46c0      	nop			@ (mov r8, r8)
}
 800f34a:	46c0      	nop			@ (mov r8, r8)
 800f34c:	46bd      	mov	sp, r7
 800f34e:	b002      	add	sp, #8
 800f350:	bd80      	pop	{r7, pc}
 800f352:	46c0      	nop			@ (mov r8, r8)
 800f354:	200011cc 	.word	0x200011cc
 800f358:	200000aa 	.word	0x200000aa
 800f35c:	0802e530 	.word	0x0802e530
 800f360:	0802d6fc 	.word	0x0802d6fc
 800f364:	0802d0fc 	.word	0x0802d0fc
 800f368:	0004cb2f 	.word	0x0004cb2f
 800f36c:	00005910 	.word	0x00005910
 800f370:	200011c9 	.word	0x200011c9
 800f374:	0802d72c 	.word	0x0802d72c
 800f378:	0802d744 	.word	0x0802d744
 800f37c:	0802d090 	.word	0x0802d090
 800f380:	0802d75c 	.word	0x0802d75c
 800f384:	0802d0d0 	.word	0x0802d0d0
 800f388:	200011d0 	.word	0x200011d0
 800f38c:	0802d770 	.word	0x0802d770
 800f390:	200011c8 	.word	0x200011c8
 800f394:	2000214d 	.word	0x2000214d
 800f398:	20000e43 	.word	0x20000e43
 800f39c:	20000e42 	.word	0x20000e42
 800f3a0:	200011bc 	.word	0x200011bc
 800f3a4:	0802d7a0 	.word	0x0802d7a0
 800f3a8:	00002710 	.word	0x00002710
 800f3ac:	2000214e 	.word	0x2000214e
 800f3b0:	0802d7b8 	.word	0x0802d7b8

0800f3b4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f3b4:	b590      	push	{r4, r7, lr}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f3ba:	1dbb      	adds	r3, r7, #6
 800f3bc:	2200      	movs	r2, #0
 800f3be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f3c0:	1dbc      	adds	r4, r7, #6
 800f3c2:	1dbb      	adds	r3, r7, #6
 800f3c4:	8819      	ldrh	r1, [r3, #0]
 800f3c6:	003b      	movs	r3, r7
 800f3c8:	2221      	movs	r2, #33	@ 0x21
 800f3ca:	0018      	movs	r0, r3
 800f3cc:	f001 fb57 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f3d0:	0003      	movs	r3, r0
 800f3d2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f3d4:	1d3c      	adds	r4, r7, #4
 800f3d6:	1dbb      	adds	r3, r7, #6
 800f3d8:	881a      	ldrh	r2, [r3, #0]
 800f3da:	003b      	movs	r3, r7
 800f3dc:	0019      	movs	r1, r3
 800f3de:	2069      	movs	r0, #105	@ 0x69
 800f3e0:	f001 fbd1 	bl	8010b86 <sensirion_i2c_write_data>
 800f3e4:	0003      	movs	r3, r0
 800f3e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f3e8:	1d3b      	adds	r3, r7, #4
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	5e9b      	ldrsh	r3, [r3, r2]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d003      	beq.n	800f3fa <sen5x_start_measurement+0x46>
        return error;
 800f3f2:	1d3b      	adds	r3, r7, #4
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	5e9b      	ldrsh	r3, [r3, r2]
 800f3f8:	e004      	b.n	800f404 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f3fa:	4b04      	ldr	r3, [pc, #16]	@ (800f40c <sen5x_start_measurement+0x58>)
 800f3fc:	0018      	movs	r0, r3
 800f3fe:	f7ff fda5 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f402:	2300      	movs	r3, #0
}
 800f404:	0018      	movs	r0, r3
 800f406:	46bd      	mov	sp, r7
 800f408:	b003      	add	sp, #12
 800f40a:	bd90      	pop	{r4, r7, pc}
 800f40c:	0000c350 	.word	0x0000c350

0800f410 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f410:	b590      	push	{r4, r7, lr}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f416:	1dbb      	adds	r3, r7, #6
 800f418:	2200      	movs	r2, #0
 800f41a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f41c:	1dbc      	adds	r4, r7, #6
 800f41e:	1dbb      	adds	r3, r7, #6
 800f420:	8819      	ldrh	r1, [r3, #0]
 800f422:	003b      	movs	r3, r7
 800f424:	2237      	movs	r2, #55	@ 0x37
 800f426:	0018      	movs	r0, r3
 800f428:	f001 fb29 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f42c:	0003      	movs	r3, r0
 800f42e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f430:	1d3c      	adds	r4, r7, #4
 800f432:	1dbb      	adds	r3, r7, #6
 800f434:	881a      	ldrh	r2, [r3, #0]
 800f436:	003b      	movs	r3, r7
 800f438:	0019      	movs	r1, r3
 800f43a:	2069      	movs	r0, #105	@ 0x69
 800f43c:	f001 fba3 	bl	8010b86 <sensirion_i2c_write_data>
 800f440:	0003      	movs	r3, r0
 800f442:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f444:	1d3b      	adds	r3, r7, #4
 800f446:	2200      	movs	r2, #0
 800f448:	5e9b      	ldrsh	r3, [r3, r2]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d003      	beq.n	800f456 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f44e:	1d3b      	adds	r3, r7, #4
 800f450:	2200      	movs	r2, #0
 800f452:	5e9b      	ldrsh	r3, [r3, r2]
 800f454:	e004      	b.n	800f460 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f456:	4b04      	ldr	r3, [pc, #16]	@ (800f468 <sen5x_start_measurement_without_pm+0x58>)
 800f458:	0018      	movs	r0, r3
 800f45a:	f7ff fd77 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	0018      	movs	r0, r3
 800f462:	46bd      	mov	sp, r7
 800f464:	b003      	add	sp, #12
 800f466:	bd90      	pop	{r4, r7, pc}
 800f468:	0000c350 	.word	0x0000c350

0800f46c <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f46c:	b590      	push	{r4, r7, lr}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f472:	1dbb      	adds	r3, r7, #6
 800f474:	2200      	movs	r2, #0
 800f476:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f478:	1dbc      	adds	r4, r7, #6
 800f47a:	2382      	movs	r3, #130	@ 0x82
 800f47c:	005a      	lsls	r2, r3, #1
 800f47e:	1dbb      	adds	r3, r7, #6
 800f480:	8819      	ldrh	r1, [r3, #0]
 800f482:	003b      	movs	r3, r7
 800f484:	0018      	movs	r0, r3
 800f486:	f001 fafa 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f48a:	0003      	movs	r3, r0
 800f48c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f48e:	1d3c      	adds	r4, r7, #4
 800f490:	1dbb      	adds	r3, r7, #6
 800f492:	881a      	ldrh	r2, [r3, #0]
 800f494:	003b      	movs	r3, r7
 800f496:	0019      	movs	r1, r3
 800f498:	2069      	movs	r0, #105	@ 0x69
 800f49a:	f001 fb74 	bl	8010b86 <sensirion_i2c_write_data>
 800f49e:	0003      	movs	r3, r0
 800f4a0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4a2:	1d3b      	adds	r3, r7, #4
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	5e9b      	ldrsh	r3, [r3, r2]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d003      	beq.n	800f4b4 <sen5x_stop_measurement+0x48>
        return error;
 800f4ac:	1d3b      	adds	r3, r7, #4
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	5e9b      	ldrsh	r3, [r3, r2]
 800f4b2:	e004      	b.n	800f4be <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f4b4:	4b04      	ldr	r3, [pc, #16]	@ (800f4c8 <sen5x_stop_measurement+0x5c>)
 800f4b6:	0018      	movs	r0, r3
 800f4b8:	f7ff fd48 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	0018      	movs	r0, r3
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	b003      	add	sp, #12
 800f4c4:	bd90      	pop	{r4, r7, pc}
 800f4c6:	46c0      	nop			@ (mov r8, r8)
 800f4c8:	00030d40 	.word	0x00030d40

0800f4cc <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f4d4:	250e      	movs	r5, #14
 800f4d6:	197b      	adds	r3, r7, r5
 800f4d8:	2200      	movs	r2, #0
 800f4da:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f4dc:	197c      	adds	r4, r7, r5
 800f4de:	4a22      	ldr	r2, [pc, #136]	@ (800f568 <sen5x_read_data_ready+0x9c>)
 800f4e0:	197b      	adds	r3, r7, r5
 800f4e2:	8819      	ldrh	r1, [r3, #0]
 800f4e4:	2308      	movs	r3, #8
 800f4e6:	18fb      	adds	r3, r7, r3
 800f4e8:	0018      	movs	r0, r3
 800f4ea:	f001 fac8 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f4ee:	0003      	movs	r3, r0
 800f4f0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4f2:	260c      	movs	r6, #12
 800f4f4:	19bc      	adds	r4, r7, r6
 800f4f6:	197b      	adds	r3, r7, r5
 800f4f8:	881a      	ldrh	r2, [r3, #0]
 800f4fa:	2308      	movs	r3, #8
 800f4fc:	18fb      	adds	r3, r7, r3
 800f4fe:	0019      	movs	r1, r3
 800f500:	2069      	movs	r0, #105	@ 0x69
 800f502:	f001 fb40 	bl	8010b86 <sensirion_i2c_write_data>
 800f506:	0003      	movs	r3, r0
 800f508:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f50a:	19bb      	adds	r3, r7, r6
 800f50c:	2200      	movs	r2, #0
 800f50e:	5e9b      	ldrsh	r3, [r3, r2]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d003      	beq.n	800f51c <sen5x_read_data_ready+0x50>
        return error;
 800f514:	19bb      	adds	r3, r7, r6
 800f516:	2200      	movs	r2, #0
 800f518:	5e9b      	ldrsh	r3, [r3, r2]
 800f51a:	e020      	b.n	800f55e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f51c:	4b13      	ldr	r3, [pc, #76]	@ (800f56c <sen5x_read_data_ready+0xa0>)
 800f51e:	0018      	movs	r0, r3
 800f520:	f7ff fd14 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f524:	250c      	movs	r5, #12
 800f526:	197c      	adds	r4, r7, r5
 800f528:	2308      	movs	r3, #8
 800f52a:	18fb      	adds	r3, r7, r3
 800f52c:	2202      	movs	r2, #2
 800f52e:	0019      	movs	r1, r3
 800f530:	2069      	movs	r0, #105	@ 0x69
 800f532:	f001 fb40 	bl	8010bb6 <sensirion_i2c_read_data_inplace>
 800f536:	0003      	movs	r3, r0
 800f538:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f53a:	197b      	adds	r3, r7, r5
 800f53c:	2200      	movs	r2, #0
 800f53e:	5e9b      	ldrsh	r3, [r3, r2]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d003      	beq.n	800f54c <sen5x_read_data_ready+0x80>
        return error;
 800f544:	197b      	adds	r3, r7, r5
 800f546:	2200      	movs	r2, #0
 800f548:	5e9b      	ldrsh	r3, [r3, r2]
 800f54a:	e008      	b.n	800f55e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f54c:	2308      	movs	r3, #8
 800f54e:	18fb      	adds	r3, r7, r3
 800f550:	785b      	ldrb	r3, [r3, #1]
 800f552:	1e5a      	subs	r2, r3, #1
 800f554:	4193      	sbcs	r3, r2
 800f556:	b2da      	uxtb	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	0018      	movs	r0, r3
 800f560:	46bd      	mov	sp, r7
 800f562:	b005      	add	sp, #20
 800f564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f566:	46c0      	nop			@ (mov r8, r8)
 800f568:	00000202 	.word	0x00000202
 800f56c:	00004e20 	.word	0x00004e20

0800f570 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f572:	b08d      	sub	sp, #52	@ 0x34
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f57e:	252e      	movs	r5, #46	@ 0x2e
 800f580:	197b      	adds	r3, r7, r5
 800f582:	2200      	movs	r2, #0
 800f584:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f586:	197c      	adds	r4, r7, r5
 800f588:	23f1      	movs	r3, #241	@ 0xf1
 800f58a:	009a      	lsls	r2, r3, #2
 800f58c:	197b      	adds	r3, r7, r5
 800f58e:	8819      	ldrh	r1, [r3, #0]
 800f590:	2314      	movs	r3, #20
 800f592:	18fb      	adds	r3, r7, r3
 800f594:	0018      	movs	r0, r3
 800f596:	f001 fa72 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f59a:	0003      	movs	r3, r0
 800f59c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f59e:	262c      	movs	r6, #44	@ 0x2c
 800f5a0:	19bc      	adds	r4, r7, r6
 800f5a2:	197b      	adds	r3, r7, r5
 800f5a4:	881a      	ldrh	r2, [r3, #0]
 800f5a6:	2314      	movs	r3, #20
 800f5a8:	18fb      	adds	r3, r7, r3
 800f5aa:	0019      	movs	r1, r3
 800f5ac:	2069      	movs	r0, #105	@ 0x69
 800f5ae:	f001 faea 	bl	8010b86 <sensirion_i2c_write_data>
 800f5b2:	0003      	movs	r3, r0
 800f5b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5b6:	19bb      	adds	r3, r7, r6
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	5e9b      	ldrsh	r3, [r3, r2]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <sen5x_read_measured_values+0x58>
        return error;
 800f5c0:	19bb      	adds	r3, r7, r6
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f5c6:	e060      	b.n	800f68a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f5c8:	4b32      	ldr	r3, [pc, #200]	@ (800f694 <sen5x_read_measured_values+0x124>)
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	f7ff fcbe 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f5d0:	252c      	movs	r5, #44	@ 0x2c
 800f5d2:	197c      	adds	r4, r7, r5
 800f5d4:	2314      	movs	r3, #20
 800f5d6:	18fb      	adds	r3, r7, r3
 800f5d8:	2210      	movs	r2, #16
 800f5da:	0019      	movs	r1, r3
 800f5dc:	2069      	movs	r0, #105	@ 0x69
 800f5de:	f001 faea 	bl	8010bb6 <sensirion_i2c_read_data_inplace>
 800f5e2:	0003      	movs	r3, r0
 800f5e4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5e6:	197b      	adds	r3, r7, r5
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	5e9b      	ldrsh	r3, [r3, r2]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d003      	beq.n	800f5f8 <sen5x_read_measured_values+0x88>
        return error;
 800f5f0:	197b      	adds	r3, r7, r5
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	5e9b      	ldrsh	r3, [r3, r2]
 800f5f6:	e048      	b.n	800f68a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f5f8:	2414      	movs	r4, #20
 800f5fa:	193b      	adds	r3, r7, r4
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	f000 fa79 	bl	800faf4 <sensirion_common_bytes_to_uint16_t>
 800f602:	0003      	movs	r3, r0
 800f604:	001a      	movs	r2, r3
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f60a:	193b      	adds	r3, r7, r4
 800f60c:	3302      	adds	r3, #2
 800f60e:	0018      	movs	r0, r3
 800f610:	f000 fa70 	bl	800faf4 <sensirion_common_bytes_to_uint16_t>
 800f614:	0003      	movs	r3, r0
 800f616:	001a      	movs	r2, r3
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f61c:	193b      	adds	r3, r7, r4
 800f61e:	3304      	adds	r3, #4
 800f620:	0018      	movs	r0, r3
 800f622:	f000 fa67 	bl	800faf4 <sensirion_common_bytes_to_uint16_t>
 800f626:	0003      	movs	r3, r0
 800f628:	001a      	movs	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f62e:	193b      	adds	r3, r7, r4
 800f630:	3306      	adds	r3, #6
 800f632:	0018      	movs	r0, r3
 800f634:	f000 fa5e 	bl	800faf4 <sensirion_common_bytes_to_uint16_t>
 800f638:	0003      	movs	r3, r0
 800f63a:	001a      	movs	r2, r3
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f640:	193b      	adds	r3, r7, r4
 800f642:	3308      	adds	r3, #8
 800f644:	0018      	movs	r0, r3
 800f646:	f000 fa82 	bl	800fb4e <sensirion_common_bytes_to_int16_t>
 800f64a:	0003      	movs	r3, r0
 800f64c:	001a      	movs	r2, r3
 800f64e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f650:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f652:	193b      	adds	r3, r7, r4
 800f654:	330a      	adds	r3, #10
 800f656:	0018      	movs	r0, r3
 800f658:	f000 fa79 	bl	800fb4e <sensirion_common_bytes_to_int16_t>
 800f65c:	0003      	movs	r3, r0
 800f65e:	001a      	movs	r2, r3
 800f660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f662:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f664:	193b      	adds	r3, r7, r4
 800f666:	330c      	adds	r3, #12
 800f668:	0018      	movs	r0, r3
 800f66a:	f000 fa70 	bl	800fb4e <sensirion_common_bytes_to_int16_t>
 800f66e:	0003      	movs	r3, r0
 800f670:	001a      	movs	r2, r3
 800f672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f674:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f676:	193b      	adds	r3, r7, r4
 800f678:	330e      	adds	r3, #14
 800f67a:	0018      	movs	r0, r3
 800f67c:	f000 fa67 	bl	800fb4e <sensirion_common_bytes_to_int16_t>
 800f680:	0003      	movs	r3, r0
 800f682:	001a      	movs	r2, r3
 800f684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f686:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	0018      	movs	r0, r3
 800f68c:	46bd      	mov	sp, r7
 800f68e:	b00d      	add	sp, #52	@ 0x34
 800f690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f692:	46c0      	nop			@ (mov r8, r8)
 800f694:	00004e20 	.word	0x00004e20

0800f698 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f698:	b590      	push	{r4, r7, lr}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f69e:	1dbb      	adds	r3, r7, #6
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f6a4:	1dbc      	adds	r4, r7, #6
 800f6a6:	4a12      	ldr	r2, [pc, #72]	@ (800f6f0 <sen5x_start_fan_cleaning+0x58>)
 800f6a8:	1dbb      	adds	r3, r7, #6
 800f6aa:	8819      	ldrh	r1, [r3, #0]
 800f6ac:	003b      	movs	r3, r7
 800f6ae:	0018      	movs	r0, r3
 800f6b0:	f001 f9e5 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f6b4:	0003      	movs	r3, r0
 800f6b6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6b8:	1d3c      	adds	r4, r7, #4
 800f6ba:	1dbb      	adds	r3, r7, #6
 800f6bc:	881a      	ldrh	r2, [r3, #0]
 800f6be:	003b      	movs	r3, r7
 800f6c0:	0019      	movs	r1, r3
 800f6c2:	2069      	movs	r0, #105	@ 0x69
 800f6c4:	f001 fa5f 	bl	8010b86 <sensirion_i2c_write_data>
 800f6c8:	0003      	movs	r3, r0
 800f6ca:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6cc:	1d3b      	adds	r3, r7, #4
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	5e9b      	ldrsh	r3, [r3, r2]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d003      	beq.n	800f6de <sen5x_start_fan_cleaning+0x46>
        return error;
 800f6d6:	1d3b      	adds	r3, r7, #4
 800f6d8:	2200      	movs	r2, #0
 800f6da:	5e9b      	ldrsh	r3, [r3, r2]
 800f6dc:	e004      	b.n	800f6e8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f6de:	4b05      	ldr	r3, [pc, #20]	@ (800f6f4 <sen5x_start_fan_cleaning+0x5c>)
 800f6e0:	0018      	movs	r0, r3
 800f6e2:	f7ff fc33 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	b003      	add	sp, #12
 800f6ee:	bd90      	pop	{r4, r7, pc}
 800f6f0:	00005607 	.word	0x00005607
 800f6f4:	00004e20 	.word	0x00004e20

0800f6f8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fa:	b087      	sub	sp, #28
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	0004      	movs	r4, r0
 800f700:	0008      	movs	r0, r1
 800f702:	0011      	movs	r1, r2
 800f704:	1dbb      	adds	r3, r7, #6
 800f706:	1c22      	adds	r2, r4, #0
 800f708:	801a      	strh	r2, [r3, #0]
 800f70a:	1d3b      	adds	r3, r7, #4
 800f70c:	1c02      	adds	r2, r0, #0
 800f70e:	801a      	strh	r2, [r3, #0]
 800f710:	1cbb      	adds	r3, r7, #2
 800f712:	1c0a      	adds	r2, r1, #0
 800f714:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f716:	2516      	movs	r5, #22
 800f718:	197b      	adds	r3, r7, r5
 800f71a:	2200      	movs	r2, #0
 800f71c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f71e:	197c      	adds	r4, r7, r5
 800f720:	4a25      	ldr	r2, [pc, #148]	@ (800f7b8 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f722:	197b      	adds	r3, r7, r5
 800f724:	8819      	ldrh	r1, [r3, #0]
 800f726:	2608      	movs	r6, #8
 800f728:	19bb      	adds	r3, r7, r6
 800f72a:	0018      	movs	r0, r3
 800f72c:	f001 f9a7 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f730:	0003      	movs	r3, r0
 800f732:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f734:	197c      	adds	r4, r7, r5
 800f736:	1dbb      	adds	r3, r7, #6
 800f738:	2200      	movs	r2, #0
 800f73a:	5e9a      	ldrsh	r2, [r3, r2]
 800f73c:	197b      	adds	r3, r7, r5
 800f73e:	8819      	ldrh	r1, [r3, #0]
 800f740:	19bb      	adds	r3, r7, r6
 800f742:	0018      	movs	r0, r3
 800f744:	f001 fa06 	bl	8010b54 <sensirion_i2c_add_int16_t_to_buffer>
 800f748:	0003      	movs	r3, r0
 800f74a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f74c:	197c      	adds	r4, r7, r5
 800f74e:	1d3b      	adds	r3, r7, #4
 800f750:	2200      	movs	r2, #0
 800f752:	5e9a      	ldrsh	r2, [r3, r2]
 800f754:	197b      	adds	r3, r7, r5
 800f756:	8819      	ldrh	r1, [r3, #0]
 800f758:	19bb      	adds	r3, r7, r6
 800f75a:	0018      	movs	r0, r3
 800f75c:	f001 f9fa 	bl	8010b54 <sensirion_i2c_add_int16_t_to_buffer>
 800f760:	0003      	movs	r3, r0
 800f762:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f764:	197c      	adds	r4, r7, r5
 800f766:	1cbb      	adds	r3, r7, #2
 800f768:	881a      	ldrh	r2, [r3, #0]
 800f76a:	197b      	adds	r3, r7, r5
 800f76c:	8819      	ldrh	r1, [r3, #0]
 800f76e:	19bb      	adds	r3, r7, r6
 800f770:	0018      	movs	r0, r3
 800f772:	f001 f9b0 	bl	8010ad6 <sensirion_i2c_add_uint16_t_to_buffer>
 800f776:	0003      	movs	r3, r0
 800f778:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f77a:	2214      	movs	r2, #20
 800f77c:	18bc      	adds	r4, r7, r2
 800f77e:	197b      	adds	r3, r7, r5
 800f780:	881a      	ldrh	r2, [r3, #0]
 800f782:	19bb      	adds	r3, r7, r6
 800f784:	0019      	movs	r1, r3
 800f786:	2069      	movs	r0, #105	@ 0x69
 800f788:	f001 f9fd 	bl	8010b86 <sensirion_i2c_write_data>
 800f78c:	0003      	movs	r3, r0
 800f78e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f790:	2214      	movs	r2, #20
 800f792:	18bb      	adds	r3, r7, r2
 800f794:	2100      	movs	r1, #0
 800f796:	5e5b      	ldrsh	r3, [r3, r1]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d003      	beq.n	800f7a4 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f79c:	18bb      	adds	r3, r7, r2
 800f79e:	2200      	movs	r2, #0
 800f7a0:	5e9b      	ldrsh	r3, [r3, r2]
 800f7a2:	e004      	b.n	800f7ae <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f7a4:	4b05      	ldr	r3, [pc, #20]	@ (800f7bc <sen5x_set_temperature_offset_parameters+0xc4>)
 800f7a6:	0018      	movs	r0, r3
 800f7a8:	f7ff fbd0 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	0018      	movs	r0, r3
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	b007      	add	sp, #28
 800f7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7b6:	46c0      	nop			@ (mov r8, r8)
 800f7b8:	000060b2 	.word	0x000060b2
 800f7bc:	00004e20 	.word	0x00004e20

0800f7c0 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c2:	b091      	sub	sp, #68	@ 0x44
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	000a      	movs	r2, r1
 800f7ca:	1cfb      	adds	r3, r7, #3
 800f7cc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f7ce:	253e      	movs	r5, #62	@ 0x3e
 800f7d0:	197b      	adds	r3, r7, r5
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f7d6:	197c      	adds	r4, r7, r5
 800f7d8:	4a22      	ldr	r2, [pc, #136]	@ (800f864 <sen5x_get_product_name+0xa4>)
 800f7da:	197b      	adds	r3, r7, r5
 800f7dc:	8819      	ldrh	r1, [r3, #0]
 800f7de:	230c      	movs	r3, #12
 800f7e0:	18fb      	adds	r3, r7, r3
 800f7e2:	0018      	movs	r0, r3
 800f7e4:	f001 f94b 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f7e8:	0003      	movs	r3, r0
 800f7ea:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7ec:	263c      	movs	r6, #60	@ 0x3c
 800f7ee:	19bc      	adds	r4, r7, r6
 800f7f0:	197b      	adds	r3, r7, r5
 800f7f2:	881a      	ldrh	r2, [r3, #0]
 800f7f4:	230c      	movs	r3, #12
 800f7f6:	18fb      	adds	r3, r7, r3
 800f7f8:	0019      	movs	r1, r3
 800f7fa:	2069      	movs	r0, #105	@ 0x69
 800f7fc:	f001 f9c3 	bl	8010b86 <sensirion_i2c_write_data>
 800f800:	0003      	movs	r3, r0
 800f802:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f804:	19bb      	adds	r3, r7, r6
 800f806:	2200      	movs	r2, #0
 800f808:	5e9b      	ldrsh	r3, [r3, r2]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d003      	beq.n	800f816 <sen5x_get_product_name+0x56>
        return error;
 800f80e:	19bb      	adds	r3, r7, r6
 800f810:	2200      	movs	r2, #0
 800f812:	5e9b      	ldrsh	r3, [r3, r2]
 800f814:	e021      	b.n	800f85a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f816:	4b14      	ldr	r3, [pc, #80]	@ (800f868 <sen5x_get_product_name+0xa8>)
 800f818:	0018      	movs	r0, r3
 800f81a:	f7ff fb97 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f81e:	253c      	movs	r5, #60	@ 0x3c
 800f820:	197c      	adds	r4, r7, r5
 800f822:	230c      	movs	r3, #12
 800f824:	18fb      	adds	r3, r7, r3
 800f826:	2220      	movs	r2, #32
 800f828:	0019      	movs	r1, r3
 800f82a:	2069      	movs	r0, #105	@ 0x69
 800f82c:	f001 f9c3 	bl	8010bb6 <sensirion_i2c_read_data_inplace>
 800f830:	0003      	movs	r3, r0
 800f832:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f834:	197b      	adds	r3, r7, r5
 800f836:	2200      	movs	r2, #0
 800f838:	5e9b      	ldrsh	r3, [r3, r2]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d003      	beq.n	800f846 <sen5x_get_product_name+0x86>
        return error;
 800f83e:	197b      	adds	r3, r7, r5
 800f840:	2200      	movs	r2, #0
 800f842:	5e9b      	ldrsh	r3, [r3, r2]
 800f844:	e009      	b.n	800f85a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f846:	1cfb      	adds	r3, r7, #3
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	6879      	ldr	r1, [r7, #4]
 800f84e:	230c      	movs	r3, #12
 800f850:	18fb      	adds	r3, r7, r3
 800f852:	0018      	movs	r0, r3
 800f854:	f000 f989 	bl	800fb6a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	0018      	movs	r0, r3
 800f85c:	46bd      	mov	sp, r7
 800f85e:	b011      	add	sp, #68	@ 0x44
 800f860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f862:	46c0      	nop			@ (mov r8, r8)
 800f864:	0000d014 	.word	0x0000d014
 800f868:	0000c350 	.word	0x0000c350

0800f86c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86e:	b091      	sub	sp, #68	@ 0x44
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	000a      	movs	r2, r1
 800f876:	1cfb      	adds	r3, r7, #3
 800f878:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f87a:	253e      	movs	r5, #62	@ 0x3e
 800f87c:	197b      	adds	r3, r7, r5
 800f87e:	2200      	movs	r2, #0
 800f880:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f882:	197c      	adds	r4, r7, r5
 800f884:	4a22      	ldr	r2, [pc, #136]	@ (800f910 <sen5x_get_serial_number+0xa4>)
 800f886:	197b      	adds	r3, r7, r5
 800f888:	8819      	ldrh	r1, [r3, #0]
 800f88a:	230c      	movs	r3, #12
 800f88c:	18fb      	adds	r3, r7, r3
 800f88e:	0018      	movs	r0, r3
 800f890:	f001 f8f5 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f894:	0003      	movs	r3, r0
 800f896:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f898:	263c      	movs	r6, #60	@ 0x3c
 800f89a:	19bc      	adds	r4, r7, r6
 800f89c:	197b      	adds	r3, r7, r5
 800f89e:	881a      	ldrh	r2, [r3, #0]
 800f8a0:	230c      	movs	r3, #12
 800f8a2:	18fb      	adds	r3, r7, r3
 800f8a4:	0019      	movs	r1, r3
 800f8a6:	2069      	movs	r0, #105	@ 0x69
 800f8a8:	f001 f96d 	bl	8010b86 <sensirion_i2c_write_data>
 800f8ac:	0003      	movs	r3, r0
 800f8ae:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8b0:	19bb      	adds	r3, r7, r6
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	5e9b      	ldrsh	r3, [r3, r2]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <sen5x_get_serial_number+0x56>
        return error;
 800f8ba:	19bb      	adds	r3, r7, r6
 800f8bc:	2200      	movs	r2, #0
 800f8be:	5e9b      	ldrsh	r3, [r3, r2]
 800f8c0:	e021      	b.n	800f906 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f8c2:	4b14      	ldr	r3, [pc, #80]	@ (800f914 <sen5x_get_serial_number+0xa8>)
 800f8c4:	0018      	movs	r0, r3
 800f8c6:	f7ff fb41 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f8ca:	253c      	movs	r5, #60	@ 0x3c
 800f8cc:	197c      	adds	r4, r7, r5
 800f8ce:	230c      	movs	r3, #12
 800f8d0:	18fb      	adds	r3, r7, r3
 800f8d2:	2220      	movs	r2, #32
 800f8d4:	0019      	movs	r1, r3
 800f8d6:	2069      	movs	r0, #105	@ 0x69
 800f8d8:	f001 f96d 	bl	8010bb6 <sensirion_i2c_read_data_inplace>
 800f8dc:	0003      	movs	r3, r0
 800f8de:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8e0:	197b      	adds	r3, r7, r5
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	5e9b      	ldrsh	r3, [r3, r2]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d003      	beq.n	800f8f2 <sen5x_get_serial_number+0x86>
        return error;
 800f8ea:	197b      	adds	r3, r7, r5
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	5e9b      	ldrsh	r3, [r3, r2]
 800f8f0:	e009      	b.n	800f906 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f8f2:	1cfb      	adds	r3, r7, #3
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	b29a      	uxth	r2, r3
 800f8f8:	6879      	ldr	r1, [r7, #4]
 800f8fa:	230c      	movs	r3, #12
 800f8fc:	18fb      	adds	r3, r7, r3
 800f8fe:	0018      	movs	r0, r3
 800f900:	f000 f933 	bl	800fb6a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f904:	2300      	movs	r3, #0
}
 800f906:	0018      	movs	r0, r3
 800f908:	46bd      	mov	sp, r7
 800f90a:	b011      	add	sp, #68	@ 0x44
 800f90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f90e:	46c0      	nop			@ (mov r8, r8)
 800f910:	0000d033 	.word	0x0000d033
 800f914:	0000c350 	.word	0x0000c350

0800f918 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f91a:	b089      	sub	sp, #36	@ 0x24
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	607a      	str	r2, [r7, #4]
 800f924:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f926:	251e      	movs	r5, #30
 800f928:	197b      	adds	r3, r7, r5
 800f92a:	2200      	movs	r2, #0
 800f92c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f92e:	197c      	adds	r4, r7, r5
 800f930:	23d1      	movs	r3, #209	@ 0xd1
 800f932:	021a      	lsls	r2, r3, #8
 800f934:	197b      	adds	r3, r7, r5
 800f936:	8819      	ldrh	r1, [r3, #0]
 800f938:	2310      	movs	r3, #16
 800f93a:	18fb      	adds	r3, r7, r3
 800f93c:	0018      	movs	r0, r3
 800f93e:	f001 f89e 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800f942:	0003      	movs	r3, r0
 800f944:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f946:	261c      	movs	r6, #28
 800f948:	19bc      	adds	r4, r7, r6
 800f94a:	197b      	adds	r3, r7, r5
 800f94c:	881a      	ldrh	r2, [r3, #0]
 800f94e:	2310      	movs	r3, #16
 800f950:	18fb      	adds	r3, r7, r3
 800f952:	0019      	movs	r1, r3
 800f954:	2069      	movs	r0, #105	@ 0x69
 800f956:	f001 f916 	bl	8010b86 <sensirion_i2c_write_data>
 800f95a:	0003      	movs	r3, r0
 800f95c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f95e:	19bb      	adds	r3, r7, r6
 800f960:	2200      	movs	r2, #0
 800f962:	5e9b      	ldrsh	r3, [r3, r2]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d003      	beq.n	800f970 <sen5x_get_version+0x58>
        return error;
 800f968:	19bb      	adds	r3, r7, r6
 800f96a:	2200      	movs	r2, #0
 800f96c:	5e9b      	ldrsh	r3, [r3, r2]
 800f96e:	e038      	b.n	800f9e2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f970:	4b1e      	ldr	r3, [pc, #120]	@ (800f9ec <sen5x_get_version+0xd4>)
 800f972:	0018      	movs	r0, r3
 800f974:	f7ff faea 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f978:	251c      	movs	r5, #28
 800f97a:	197c      	adds	r4, r7, r5
 800f97c:	2310      	movs	r3, #16
 800f97e:	18fb      	adds	r3, r7, r3
 800f980:	2208      	movs	r2, #8
 800f982:	0019      	movs	r1, r3
 800f984:	2069      	movs	r0, #105	@ 0x69
 800f986:	f001 f916 	bl	8010bb6 <sensirion_i2c_read_data_inplace>
 800f98a:	0003      	movs	r3, r0
 800f98c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f98e:	197b      	adds	r3, r7, r5
 800f990:	2200      	movs	r2, #0
 800f992:	5e9b      	ldrsh	r3, [r3, r2]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d003      	beq.n	800f9a0 <sen5x_get_version+0x88>
        return error;
 800f998:	197b      	adds	r3, r7, r5
 800f99a:	2200      	movs	r2, #0
 800f99c:	5e9b      	ldrsh	r3, [r3, r2]
 800f99e:	e020      	b.n	800f9e2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f9a0:	2110      	movs	r1, #16
 800f9a2:	187b      	adds	r3, r7, r1
 800f9a4:	781a      	ldrb	r2, [r3, #0]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f9aa:	187b      	adds	r3, r7, r1
 800f9ac:	785a      	ldrb	r2, [r3, #1]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f9b2:	187b      	adds	r3, r7, r1
 800f9b4:	789b      	ldrb	r3, [r3, #2]
 800f9b6:	1e5a      	subs	r2, r3, #1
 800f9b8:	4193      	sbcs	r3, r2
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f9c0:	187b      	adds	r3, r7, r1
 800f9c2:	78da      	ldrb	r2, [r3, #3]
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f9c8:	187b      	adds	r3, r7, r1
 800f9ca:	791a      	ldrb	r2, [r3, #4]
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ce:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f9d0:	187b      	adds	r3, r7, r1
 800f9d2:	795a      	ldrb	r2, [r3, #5]
 800f9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9d6:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800f9d8:	187b      	adds	r3, r7, r1
 800f9da:	799a      	ldrb	r2, [r3, #6]
 800f9dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9de:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	0018      	movs	r0, r3
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	b009      	add	sp, #36	@ 0x24
 800f9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ea:	46c0      	nop			@ (mov r8, r8)
 800f9ec:	00004e20 	.word	0x00004e20

0800f9f0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9f2:	b087      	sub	sp, #28
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800f9f8:	2516      	movs	r5, #22
 800f9fa:	197b      	adds	r3, r7, r5
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fa00:	197c      	adds	r4, r7, r5
 800fa02:	4a21      	ldr	r2, [pc, #132]	@ (800fa88 <sen5x_read_device_status+0x98>)
 800fa04:	197b      	adds	r3, r7, r5
 800fa06:	8819      	ldrh	r1, [r3, #0]
 800fa08:	260c      	movs	r6, #12
 800fa0a:	19bb      	adds	r3, r7, r6
 800fa0c:	0018      	movs	r0, r3
 800fa0e:	f001 f836 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800fa12:	0003      	movs	r3, r0
 800fa14:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa16:	2314      	movs	r3, #20
 800fa18:	18fc      	adds	r4, r7, r3
 800fa1a:	197b      	adds	r3, r7, r5
 800fa1c:	881a      	ldrh	r2, [r3, #0]
 800fa1e:	19bb      	adds	r3, r7, r6
 800fa20:	0019      	movs	r1, r3
 800fa22:	2069      	movs	r0, #105	@ 0x69
 800fa24:	f001 f8af 	bl	8010b86 <sensirion_i2c_write_data>
 800fa28:	0003      	movs	r3, r0
 800fa2a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa2c:	2314      	movs	r3, #20
 800fa2e:	18fb      	adds	r3, r7, r3
 800fa30:	2200      	movs	r2, #0
 800fa32:	5e9b      	ldrsh	r3, [r3, r2]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fa38:	4b14      	ldr	r3, [pc, #80]	@ (800fa8c <sen5x_read_device_status+0x9c>)
 800fa3a:	e020      	b.n	800fa7e <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa3c:	4b14      	ldr	r3, [pc, #80]	@ (800fa90 <sen5x_read_device_status+0xa0>)
 800fa3e:	0018      	movs	r0, r3
 800fa40:	f7ff fa84 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fa44:	2514      	movs	r5, #20
 800fa46:	197c      	adds	r4, r7, r5
 800fa48:	230c      	movs	r3, #12
 800fa4a:	18fb      	adds	r3, r7, r3
 800fa4c:	2204      	movs	r2, #4
 800fa4e:	0019      	movs	r1, r3
 800fa50:	2069      	movs	r0, #105	@ 0x69
 800fa52:	f001 f8b0 	bl	8010bb6 <sensirion_i2c_read_data_inplace>
 800fa56:	0003      	movs	r3, r0
 800fa58:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa5a:	197b      	adds	r3, r7, r5
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	5e9b      	ldrsh	r3, [r3, r2]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d003      	beq.n	800fa6c <sen5x_read_device_status+0x7c>
        return error;
 800fa64:	197b      	adds	r3, r7, r5
 800fa66:	2200      	movs	r2, #0
 800fa68:	5e9b      	ldrsh	r3, [r3, r2]
 800fa6a:	e008      	b.n	800fa7e <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fa6c:	230c      	movs	r3, #12
 800fa6e:	18fb      	adds	r3, r7, r3
 800fa70:	0018      	movs	r0, r3
 800fa72:	f000 f853 	bl	800fb1c <sensirion_common_bytes_to_uint32_t>
 800fa76:	0002      	movs	r2, r0
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	0018      	movs	r0, r3
 800fa80:	46bd      	mov	sp, r7
 800fa82:	b007      	add	sp, #28
 800fa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa86:	46c0      	nop			@ (mov r8, r8)
 800fa88:	0000d206 	.word	0x0000d206
 800fa8c:	ffffd206 	.word	0xffffd206
 800fa90:	00004e20 	.word	0x00004e20

0800fa94 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fa94:	b590      	push	{r4, r7, lr}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fa9a:	1dbb      	adds	r3, r7, #6
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800faa0:	1dbc      	adds	r4, r7, #6
 800faa2:	4a12      	ldr	r2, [pc, #72]	@ (800faec <sen5x_device_reset+0x58>)
 800faa4:	1dbb      	adds	r3, r7, #6
 800faa6:	8819      	ldrh	r1, [r3, #0]
 800faa8:	003b      	movs	r3, r7
 800faaa:	0018      	movs	r0, r3
 800faac:	f000 ffe7 	bl	8010a7e <sensirion_i2c_add_command_to_buffer>
 800fab0:	0003      	movs	r3, r0
 800fab2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fab4:	1d3c      	adds	r4, r7, #4
 800fab6:	1dbb      	adds	r3, r7, #6
 800fab8:	881a      	ldrh	r2, [r3, #0]
 800faba:	003b      	movs	r3, r7
 800fabc:	0019      	movs	r1, r3
 800fabe:	2069      	movs	r0, #105	@ 0x69
 800fac0:	f001 f861 	bl	8010b86 <sensirion_i2c_write_data>
 800fac4:	0003      	movs	r3, r0
 800fac6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fac8:	1d3b      	adds	r3, r7, #4
 800faca:	2200      	movs	r2, #0
 800facc:	5e9b      	ldrsh	r3, [r3, r2]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d003      	beq.n	800fada <sen5x_device_reset+0x46>
        return error;
 800fad2:	1d3b      	adds	r3, r7, #4
 800fad4:	2200      	movs	r2, #0
 800fad6:	5e9b      	ldrsh	r3, [r3, r2]
 800fad8:	e004      	b.n	800fae4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fada:	4b05      	ldr	r3, [pc, #20]	@ (800faf0 <sen5x_device_reset+0x5c>)
 800fadc:	0018      	movs	r0, r3
 800fade:	f7ff fa35 	bl	800ef4c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	0018      	movs	r0, r3
 800fae6:	46bd      	mov	sp, r7
 800fae8:	b003      	add	sp, #12
 800faea:	bd90      	pop	{r4, r7, pc}
 800faec:	0000d304 	.word	0x0000d304
 800faf0:	00030d40 	.word	0x00030d40

0800faf4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	b21b      	sxth	r3, r3
 800fb02:	021b      	lsls	r3, r3, #8
 800fb04:	b21a      	sxth	r2, r3
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	b21b      	sxth	r3, r3
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	b21b      	sxth	r3, r3
 800fb12:	b29b      	uxth	r3, r3
}
 800fb14:	0018      	movs	r0, r3
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b002      	add	sp, #8
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	061a      	lsls	r2, r3, #24
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	041b      	lsls	r3, r3, #16
 800fb32:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3302      	adds	r3, #2
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb3c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	3203      	adds	r2, #3
 800fb42:	7812      	ldrb	r2, [r2, #0]
 800fb44:	4313      	orrs	r3, r2
}
 800fb46:	0018      	movs	r0, r3
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	b002      	add	sp, #8
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b082      	sub	sp, #8
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	0018      	movs	r0, r3
 800fb5a:	f7ff ffcb 	bl	800faf4 <sensirion_common_bytes_to_uint16_t>
 800fb5e:	0003      	movs	r3, r0
 800fb60:	b21b      	sxth	r3, r3
}
 800fb62:	0018      	movs	r0, r3
 800fb64:	46bd      	mov	sp, r7
 800fb66:	b002      	add	sp, #8
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b086      	sub	sp, #24
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	60f8      	str	r0, [r7, #12]
 800fb72:	60b9      	str	r1, [r7, #8]
 800fb74:	1dbb      	adds	r3, r7, #6
 800fb76:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fb78:	2316      	movs	r3, #22
 800fb7a:	18fb      	adds	r3, r7, r3
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	801a      	strh	r2, [r3, #0]
 800fb80:	e00f      	b.n	800fba2 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fb82:	2016      	movs	r0, #22
 800fb84:	183b      	adds	r3, r7, r0
 800fb86:	881b      	ldrh	r3, [r3, #0]
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	18d2      	adds	r2, r2, r3
 800fb8c:	183b      	adds	r3, r7, r0
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	68b9      	ldr	r1, [r7, #8]
 800fb92:	18cb      	adds	r3, r1, r3
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fb98:	183b      	adds	r3, r7, r0
 800fb9a:	881a      	ldrh	r2, [r3, #0]
 800fb9c:	183b      	adds	r3, r7, r0
 800fb9e:	3201      	adds	r2, #1
 800fba0:	801a      	strh	r2, [r3, #0]
 800fba2:	2316      	movs	r3, #22
 800fba4:	18fa      	adds	r2, r7, r3
 800fba6:	1dbb      	adds	r3, r7, #6
 800fba8:	8812      	ldrh	r2, [r2, #0]
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d3e8      	bcc.n	800fb82 <sensirion_common_copy_bytes+0x18>
    }
}
 800fbb0:	46c0      	nop			@ (mov r8, r8)
 800fbb2:	46c0      	nop			@ (mov r8, r8)
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	b006      	add	sp, #24
 800fbb8:	bd80      	pop	{r7, pc}
	...

0800fbbc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	60b9      	str	r1, [r7, #8]
 800fbc6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d113      	bne.n	800fc02 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	22fe      	movs	r2, #254	@ 0xfe
 800fbde:	0592      	lsls	r2, r2, #22
 800fbe0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4a1a      	ldr	r2, [pc, #104]	@ (800fc50 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fbe6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	4a1a      	ldr	r2, [pc, #104]	@ (800fc54 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fbec:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	4a19      	ldr	r2, [pc, #100]	@ (800fc58 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fbf2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	4a19      	ldr	r2, [pc, #100]	@ (800fc5c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fbf8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	4a18      	ldr	r2, [pc, #96]	@ (800fc60 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fbfe:	61da      	str	r2, [r3, #28]
 800fc00:	e011      	b.n	800fc26 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	4a17      	ldr	r2, [pc, #92]	@ (800fc64 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fc06:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	4a17      	ldr	r2, [pc, #92]	@ (800fc68 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fc0c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	4a16      	ldr	r2, [pc, #88]	@ (800fc6c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fc12:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4a16      	ldr	r2, [pc, #88]	@ (800fc70 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fc18:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	4a15      	ldr	r2, [pc, #84]	@ (800fc74 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fc1e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	4a15      	ldr	r2, [pc, #84]	@ (800fc78 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fc24:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	4a14      	ldr	r2, [pc, #80]	@ (800fc7c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fc2a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4a14      	ldr	r2, [pc, #80]	@ (800fc80 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc30:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4a12      	ldr	r2, [pc, #72]	@ (800fc80 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc36:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4a12      	ldr	r2, [pc, #72]	@ (800fc84 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fc3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	0018      	movs	r0, r3
 800fc42:	f000 f831 	bl	800fca8 <GasIndexAlgorithm_reset>
}
 800fc46:	46c0      	nop			@ (mov r8, r8)
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	b004      	add	sp, #16
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	46c0      	nop			@ (mov r8, r8)
 800fc50:	00002710 	.word	0x00002710
 800fc54:	44340000 	.word	0x44340000
 800fc58:	46859800 	.word	0x46859800
 800fc5c:	46a05000 	.word	0x46a05000
 800fc60:	41f00000 	.word	0x41f00000
 800fc64:	42c80000 	.word	0x42c80000
 800fc68:	00004e20 	.word	0x00004e20
 800fc6c:	43340000 	.word	0x43340000
 800fc70:	4528c000 	.word	0x4528c000
 800fc74:	45a32000 	.word	0x45a32000
 800fc78:	43aa0000 	.word	0x43aa0000
 800fc7c:	43660000 	.word	0x43660000
 800fc80:	41400000 	.word	0x41400000
 800fc84:	42480000 	.word	0x42480000

0800fc88 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fc92:	22fe      	movs	r2, #254	@ 0xfe
 800fc94:	0592      	lsls	r2, r2, #22
 800fc96:	6839      	ldr	r1, [r7, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	0018      	movs	r0, r3
 800fc9c:	f7ff ff8e 	bl	800fbbc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fca0:	46c0      	nop			@ (mov r8, r8)
 800fca2:	46bd      	mov	sp, r7
 800fca4:	b002      	add	sp, #8
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	0018      	movs	r0, r3
 800fcc6:	f000 f805 	bl	800fcd4 <GasIndexAlgorithm__init_instances>
}
 800fcca:	46c0      	nop			@ (mov r8, r8)
 800fccc:	46bd      	mov	sp, r7
 800fcce:	b002      	add	sp, #8
 800fcd0:	bd80      	pop	{r7, pc}
	...

0800fcd4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fcd4:	b590      	push	{r4, r7, lr}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	0018      	movs	r0, r3
 800fce0:	f000 f8e8 	bl	800feb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	0018      	movs	r0, r3
 800fce8:	f000 f9a6 	bl	8010038 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fcec:	1c04      	adds	r4, r0, #0
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	0018      	movs	r0, r3
 800fcf2:	f000 f9ab 	bl	801004c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fcf6:	1c02      	adds	r2, r0, #0
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	1c21      	adds	r1, r4, #0
 800fcfc:	0018      	movs	r0, r3
 800fcfe:	f000 fc3b 	bl	8010578 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d107      	bne.n	800fd1a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd0a:	23fe      	movs	r3, #254	@ 0xfe
 800fd0c:	059b      	lsls	r3, r3, #22
 800fd0e:	4a0a      	ldr	r2, [pc, #40]	@ (800fd38 <GasIndexAlgorithm__init_instances+0x64>)
 800fd10:	490a      	ldr	r1, [pc, #40]	@ (800fd3c <GasIndexAlgorithm__init_instances+0x68>)
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fc86 	bl	8010624 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fd18:	e005      	b.n	800fd26 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fd1a:	4b09      	ldr	r3, [pc, #36]	@ (800fd40 <GasIndexAlgorithm__init_instances+0x6c>)
 800fd1c:	4a09      	ldr	r2, [pc, #36]	@ (800fd44 <GasIndexAlgorithm__init_instances+0x70>)
 800fd1e:	490a      	ldr	r1, [pc, #40]	@ (800fd48 <GasIndexAlgorithm__init_instances+0x74>)
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fc7f 	bl	8010624 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	0018      	movs	r0, r3
 800fd2a:	f000 fd35 	bl	8010798 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fd2e:	46c0      	nop			@ (mov r8, r8)
 800fd30:	46bd      	mov	sp, r7
 800fd32:	b003      	add	sp, #12
 800fd34:	bd90      	pop	{r4, r7, pc}
 800fd36:	46c0      	nop			@ (mov r8, r8)
 800fd38:	bc257a78 	.word	0xbc257a78
 800fd3c:	44198000 	.word	0x44198000
 800fd40:	42c80000 	.word	0x42c80000
 800fd44:	bbd4fdf4 	.word	0xbbd4fdf4
 800fd48:	43550000 	.word	0x43550000

0800fd4c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fd4c:	b590      	push	{r4, r7, lr}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd5c:	4952      	ldr	r1, [pc, #328]	@ (800fea8 <GasIndexAlgorithm_process+0x15c>)
 800fd5e:	1c18      	adds	r0, r3, #0
 800fd60:	f7f0 fbf0 	bl	8000544 <__aeabi_fcmple>
 800fd64:	1e03      	subs	r3, r0, #0
 800fd66:	d00c      	beq.n	800fd82 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	1c19      	adds	r1, r3, #0
 800fd72:	1c10      	adds	r0, r2, #0
 800fd74:	f7f0 fda4 	bl	80008c0 <__aeabi_fadd>
 800fd78:	1c03      	adds	r3, r0, #0
 800fd7a:	1c1a      	adds	r2, r3, #0
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd80:	e080      	b.n	800fe84 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	dd25      	ble.n	800fdd4 <GasIndexAlgorithm_process+0x88>
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	4a48      	ldr	r2, [pc, #288]	@ (800feac <GasIndexAlgorithm_process+0x160>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	dc21      	bgt.n	800fdd4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	dc04      	bgt.n	800fda4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	60bb      	str	r3, [r7, #8]
 800fda2:	e00d      	b.n	800fdc0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	4a41      	ldr	r2, [pc, #260]	@ (800feb0 <GasIndexAlgorithm_process+0x164>)
 800fdaa:	4694      	mov	ip, r2
 800fdac:	4463      	add	r3, ip
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	dd05      	ble.n	800fdc0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	4a3d      	ldr	r2, [pc, #244]	@ (800feb0 <GasIndexAlgorithm_process+0x164>)
 800fdba:	4694      	mov	ip, r2
 800fdbc:	4463      	add	r3, ip
 800fdbe:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	0018      	movs	r0, r3
 800fdca:	f7f1 fd2d 	bl	8001828 <__aeabi_i2f>
 800fdce:	1c02      	adds	r2, r0, #0
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d005      	beq.n	800fde8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	0018      	movs	r0, r3
 800fde0:	f000 f945 	bl	801006e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fde4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fde6:	d014      	beq.n	800fe12 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	1c11      	adds	r1, r2, #0
 800fdf0:	0018      	movs	r0, r3
 800fdf2:	f000 fbd1 	bl	8010598 <GasIndexAlgorithm__mox_model__process>
 800fdf6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	1c11      	adds	r1, r2, #0
 800fe04:	0018      	movs	r0, r3
 800fe06:	f000 fc25 	bl	8010654 <GasIndexAlgorithm__sigmoid_scaled__process>
 800fe0a:	1c02      	adds	r2, r0, #0
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe10:	e003      	b.n	800fe1a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	689a      	ldr	r2, [r3, #8]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	1c11      	adds	r1, r2, #0
 800fe22:	0018      	movs	r0, r3
 800fe24:	f000 fcec 	bl	8010800 <GasIndexAlgorithm__adaptive_lowpass__process>
 800fe28:	1c02      	adds	r2, r0, #0
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe32:	21fc      	movs	r1, #252	@ 0xfc
 800fe34:	0589      	lsls	r1, r1, #22
 800fe36:	1c18      	adds	r0, r3, #0
 800fe38:	f7f0 fb7a 	bl	8000530 <__aeabi_fcmplt>
 800fe3c:	1e03      	subs	r3, r0, #0
 800fe3e:	d003      	beq.n	800fe48 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	22fc      	movs	r2, #252	@ 0xfc
 800fe44:	0592      	lsls	r2, r2, #22
 800fe46:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	1c18      	adds	r0, r3, #0
 800fe50:	f7f0 fb82 	bl	8000558 <__aeabi_fcmpgt>
 800fe54:	1e03      	subs	r3, r0, #0
 800fe56:	d015      	beq.n	800fe84 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	1c11      	adds	r1, r2, #0
 800fe60:	0018      	movs	r0, r3
 800fe62:	f000 fa4f 	bl	8010304 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	0018      	movs	r0, r3
 800fe6a:	f000 f8e5 	bl	8010038 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fe6e:	1c04      	adds	r4, r0, #0
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	0018      	movs	r0, r3
 800fe74:	f000 f8ea 	bl	801004c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fe78:	1c02      	adds	r2, r0, #0
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	1c21      	adds	r1, r4, #0
 800fe7e:	0018      	movs	r0, r3
 800fe80:	f000 fb7a 	bl	8010578 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe88:	21fc      	movs	r1, #252	@ 0xfc
 800fe8a:	0589      	lsls	r1, r1, #22
 800fe8c:	1c18      	adds	r0, r3, #0
 800fe8e:	f7f0 fd17 	bl	80008c0 <__aeabi_fadd>
 800fe92:	1c03      	adds	r3, r0, #0
 800fe94:	1c18      	adds	r0, r3, #0
 800fe96:	f7f1 fca7 	bl	80017e8 <__aeabi_f2iz>
 800fe9a:	0002      	movs	r2, r0
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	601a      	str	r2, [r3, #0]
    return;
 800fea0:	46c0      	nop			@ (mov r8, r8)
}
 800fea2:	46bd      	mov	sp, r7
 800fea4:	b005      	add	sp, #20
 800fea6:	bd90      	pop	{r4, r7, pc}
 800fea8:	42340000 	.word	0x42340000
 800feac:	0000fde7 	.word	0x0000fde7
 800feb0:	00007fff 	.word	0x00007fff

0800feb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800feb4:	b5b0      	push	{r4, r5, r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	223c      	movs	r2, #60	@ 0x3c
 800fec0:	2100      	movs	r1, #0
 800fec2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	4952      	ldr	r1, [pc, #328]	@ (8010028 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fede:	1c18      	adds	r0, r3, #0
 800fee0:	f7f0 fee0 	bl	8000ca4 <__aeabi_fdiv>
 800fee4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800fee6:	2188      	movs	r1, #136	@ 0x88
 800fee8:	05c9      	lsls	r1, r1, #23
 800feea:	1c18      	adds	r0, r3, #0
 800feec:	f7f1 f8a8 	bl	8001040 <__aeabi_fmul>
 800fef0:	1c03      	adds	r3, r0, #0
 800fef2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	494a      	ldr	r1, [pc, #296]	@ (8010028 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fefe:	1c18      	adds	r0, r3, #0
 800ff00:	f7f0 fed0 	bl	8000ca4 <__aeabi_fdiv>
 800ff04:	1c03      	adds	r3, r0, #0
 800ff06:	1c19      	adds	r1, r3, #0
 800ff08:	1c20      	adds	r0, r4, #0
 800ff0a:	f7f0 fcd9 	bl	80008c0 <__aeabi_fadd>
 800ff0e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff10:	1c19      	adds	r1, r3, #0
 800ff12:	1c28      	adds	r0, r5, #0
 800ff14:	f7f0 fec6 	bl	8000ca4 <__aeabi_fdiv>
 800ff18:	1c03      	adds	r3, r0, #0
 800ff1a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	4940      	ldr	r1, [pc, #256]	@ (8010028 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff26:	1c18      	adds	r0, r3, #0
 800ff28:	f7f0 febc 	bl	8000ca4 <__aeabi_fdiv>
 800ff2c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ff2e:	2185      	movs	r1, #133	@ 0x85
 800ff30:	05c9      	lsls	r1, r1, #23
 800ff32:	1c18      	adds	r0, r3, #0
 800ff34:	f7f1 f884 	bl	8001040 <__aeabi_fmul>
 800ff38:	1c03      	adds	r3, r0, #0
 800ff3a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	4938      	ldr	r1, [pc, #224]	@ (8010028 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff46:	1c18      	adds	r0, r3, #0
 800ff48:	f7f0 feac 	bl	8000ca4 <__aeabi_fdiv>
 800ff4c:	1c03      	adds	r3, r0, #0
 800ff4e:	1c19      	adds	r1, r3, #0
 800ff50:	1c20      	adds	r0, r4, #0
 800ff52:	f7f0 fcb5 	bl	80008c0 <__aeabi_fadd>
 800ff56:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff58:	1c19      	adds	r1, r3, #0
 800ff5a:	1c28      	adds	r0, r5, #0
 800ff5c:	f7f0 fea2 	bl	8000ca4 <__aeabi_fdiv>
 800ff60:	1c03      	adds	r3, r0, #0
 800ff62:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d118      	bne.n	800ffa2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff74:	2188      	movs	r1, #136	@ 0x88
 800ff76:	05c9      	lsls	r1, r1, #23
 800ff78:	1c18      	adds	r0, r3, #0
 800ff7a:	f7f1 f861 	bl	8001040 <__aeabi_fmul>
 800ff7e:	1c03      	adds	r3, r0, #0
 800ff80:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800ff86:	4929      	ldr	r1, [pc, #164]	@ (801002c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ff88:	1c18      	adds	r0, r3, #0
 800ff8a:	f7f0 fc99 	bl	80008c0 <__aeabi_fadd>
 800ff8e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ff90:	1c19      	adds	r1, r3, #0
 800ff92:	1c20      	adds	r0, r4, #0
 800ff94:	f7f0 fe86 	bl	8000ca4 <__aeabi_fdiv>
 800ff98:	1c03      	adds	r3, r0, #0
 800ff9a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	655a      	str	r2, [r3, #84]	@ 0x54
 800ffa0:	e017      	b.n	800ffd2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ffa6:	2188      	movs	r1, #136	@ 0x88
 800ffa8:	05c9      	lsls	r1, r1, #23
 800ffaa:	1c18      	adds	r0, r3, #0
 800ffac:	f7f1 f848 	bl	8001040 <__aeabi_fmul>
 800ffb0:	1c03      	adds	r3, r0, #0
 800ffb2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ffb8:	491d      	ldr	r1, [pc, #116]	@ (8010030 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ffba:	1c18      	adds	r0, r3, #0
 800ffbc:	f7f0 fc80 	bl	80008c0 <__aeabi_fadd>
 800ffc0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ffc2:	1c19      	adds	r1, r3, #0
 800ffc4:	1c20      	adds	r0, r4, #0
 800ffc6:	f7f0 fe6d 	bl	8000ca4 <__aeabi_fdiv>
 800ffca:	1c03      	adds	r3, r0, #0
 800ffcc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ffd6:	2185      	movs	r1, #133	@ 0x85
 800ffd8:	05c9      	lsls	r1, r1, #23
 800ffda:	1c18      	adds	r0, r3, #0
 800ffdc:	f7f1 f830 	bl	8001040 <__aeabi_fmul>
 800ffe0:	1c03      	adds	r3, r0, #0
 800ffe2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	4912      	ldr	r1, [pc, #72]	@ (8010034 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800ffea:	1c18      	adds	r0, r3, #0
 800ffec:	f7f0 fc68 	bl	80008c0 <__aeabi_fadd>
 800fff0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800fff2:	1c19      	adds	r1, r3, #0
 800fff4:	1c20      	adds	r0, r4, #0
 800fff6:	f7f0 fe55 	bl	8000ca4 <__aeabi_fdiv>
 800fffa:	1c03      	adds	r3, r0, #0
 800fffc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2200      	movs	r2, #0
 8010006:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8010020:	46c0      	nop			@ (mov r8, r8)
 8010022:	46bd      	mov	sp, r7
 8010024:	b002      	add	sp, #8
 8010026:	bdb0      	pop	{r4, r5, r7, pc}
 8010028:	45610000 	.word	0x45610000
 801002c:	44960000 	.word	0x44960000
 8010030:	41a00000 	.word	0x41a00000
 8010034:	451c4000 	.word	0x451c4000

08010038 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8010044:	1c18      	adds	r0, r3, #0
 8010046:	46bd      	mov	sp, r7
 8010048:	b002      	add	sp, #8
 801004a:	bd80      	pop	{r7, pc}

0801004c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 801005c:	1c19      	adds	r1, r3, #0
 801005e:	1c10      	adds	r0, r2, #0
 8010060:	f7f0 fc2e 	bl	80008c0 <__aeabi_fadd>
 8010064:	1c03      	adds	r3, r0, #0
}
 8010066:	1c18      	adds	r0, r3, #0
 8010068:	46bd      	mov	sp, r7
 801006a:	b002      	add	sp, #8
 801006c:	bd80      	pop	{r7, pc}

0801006e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	223c      	movs	r2, #60	@ 0x3c
 801007a:	5c9b      	ldrb	r3, [r3, r2]
}
 801007c:	0018      	movs	r0, r3
 801007e:	46bd      	mov	sp, r7
 8010080:	b002      	add	sp, #8
 8010082:	bd80      	pop	{r7, pc}

08010084 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8010084:	b5b0      	push	{r4, r5, r7, lr}
 8010086:	b08c      	sub	sp, #48	@ 0x30
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8010090:	1c19      	adds	r1, r3, #0
 8010092:	4895      	ldr	r0, [pc, #596]	@ (80102e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8010094:	f7f1 f92e 	bl	80012f4 <__aeabi_fsub>
 8010098:	1c03      	adds	r3, r0, #0
 801009a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100a0:	1c19      	adds	r1, r3, #0
 80100a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100a4:	f7f0 fa58 	bl	8000558 <__aeabi_fcmpgt>
 80100a8:	1e03      	subs	r3, r0, #0
 80100aa:	d00b      	beq.n	80100c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80100b4:	1c19      	adds	r1, r3, #0
 80100b6:	1c10      	adds	r0, r2, #0
 80100b8:	f7f0 fc02 	bl	80008c0 <__aeabi_fadd>
 80100bc:	1c03      	adds	r3, r0, #0
 80100be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100c8:	1c19      	adds	r1, r3, #0
 80100ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100cc:	f7f0 fa44 	bl	8000558 <__aeabi_fcmpgt>
 80100d0:	1e03      	subs	r3, r0, #0
 80100d2:	d00b      	beq.n	80100ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100dc:	1c19      	adds	r1, r3, #0
 80100de:	1c10      	adds	r0, r2, #0
 80100e0:	f7f0 fbee 	bl	80008c0 <__aeabi_fadd>
 80100e4:	1c03      	adds	r3, r0, #0
 80100e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6959      	ldr	r1, [r3, #20]
 80100f0:	4a7e      	ldr	r2, [pc, #504]	@ (80102ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	0018      	movs	r0, r3
 80100f6:	f000 f9f1 	bl	80104dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	1c11      	adds	r1, r2, #0
 8010102:	0018      	movs	r0, r3
 8010104:	f000 f9fa 	bl	80104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010108:	1c03      	adds	r3, r0, #0
 801010a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010118:	1c19      	adds	r1, r3, #0
 801011a:	1c10      	adds	r0, r2, #0
 801011c:	f7f1 f8ea 	bl	80012f4 <__aeabi_fsub>
 8010120:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010124:	1c18      	adds	r0, r3, #0
 8010126:	f7f0 ff8b 	bl	8001040 <__aeabi_fmul>
 801012a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 801012c:	1c19      	adds	r1, r3, #0
 801012e:	1c20      	adds	r0, r4, #0
 8010130:	f7f0 fbc6 	bl	80008c0 <__aeabi_fadd>
 8010134:	1c03      	adds	r3, r0, #0
 8010136:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010140:	1c19      	adds	r1, r3, #0
 8010142:	486b      	ldr	r0, [pc, #428]	@ (80102f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010144:	f7f1 f8d6 	bl	80012f4 <__aeabi_fsub>
 8010148:	1c03      	adds	r3, r0, #0
 801014a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	1c11      	adds	r1, r2, #0
 8010154:	0018      	movs	r0, r3
 8010156:	f000 f9d1 	bl	80104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801015a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 801015c:	1c19      	adds	r1, r3, #0
 801015e:	1c28      	adds	r0, r5, #0
 8010160:	f7f0 ff6e 	bl	8001040 <__aeabi_fmul>
 8010164:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8010166:	1c19      	adds	r1, r3, #0
 8010168:	1c20      	adds	r0, r4, #0
 801016a:	f7f0 fba9 	bl	80008c0 <__aeabi_fadd>
 801016e:	1c03      	adds	r3, r0, #0
 8010170:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010172:	4a60      	ldr	r2, [pc, #384]	@ (80102f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010174:	6a39      	ldr	r1, [r7, #32]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	0018      	movs	r0, r3
 801017a:	f000 f9af 	bl	80104dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	1c11      	adds	r1, r2, #0
 8010186:	0018      	movs	r0, r3
 8010188:	f000 f9b8 	bl	80104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801018c:	1c03      	adds	r3, r0, #0
 801018e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8010190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010192:	69f8      	ldr	r0, [r7, #28]
 8010194:	f7f0 ff54 	bl	8001040 <__aeabi_fmul>
 8010198:	1c03      	adds	r3, r0, #0
 801019a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6999      	ldr	r1, [r3, #24]
 80101a4:	4a51      	ldr	r2, [pc, #324]	@ (80102ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	0018      	movs	r0, r3
 80101aa:	f000 f997 	bl	80104dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	1c11      	adds	r1, r2, #0
 80101b6:	0018      	movs	r0, r3
 80101b8:	f000 f9a0 	bl	80104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101bc:	1c03      	adds	r3, r0, #0
 80101be:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80101cc:	1c19      	adds	r1, r3, #0
 80101ce:	1c10      	adds	r0, r2, #0
 80101d0:	f7f1 f890 	bl	80012f4 <__aeabi_fsub>
 80101d4:	1c03      	adds	r3, r0, #0
 80101d6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80101d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101da:	69b8      	ldr	r0, [r7, #24]
 80101dc:	f7f1 f88a 	bl	80012f4 <__aeabi_fsub>
 80101e0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80101e2:	1c19      	adds	r1, r3, #0
 80101e4:	1c28      	adds	r0, r5, #0
 80101e6:	f7f0 ff2b 	bl	8001040 <__aeabi_fmul>
 80101ea:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80101ec:	1c19      	adds	r1, r3, #0
 80101ee:	1c20      	adds	r0, r4, #0
 80101f0:	f7f0 fb66 	bl	80008c0 <__aeabi_fadd>
 80101f4:	1c03      	adds	r3, r0, #0
 80101f6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010200:	1c19      	adds	r1, r3, #0
 8010202:	483b      	ldr	r0, [pc, #236]	@ (80102f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010204:	f7f1 f876 	bl	80012f4 <__aeabi_fsub>
 8010208:	1c03      	adds	r3, r0, #0
 801020a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	1c11      	adds	r1, r2, #0
 8010214:	0018      	movs	r0, r3
 8010216:	f000 f971 	bl	80104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801021a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 801021c:	1c19      	adds	r1, r3, #0
 801021e:	1c28      	adds	r0, r5, #0
 8010220:	f7f0 ff0e 	bl	8001040 <__aeabi_fmul>
 8010224:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8010226:	1c19      	adds	r1, r3, #0
 8010228:	1c20      	adds	r0, r4, #0
 801022a:	f7f0 fb49 	bl	80008c0 <__aeabi_fadd>
 801022e:	1c03      	adds	r3, r0, #0
 8010230:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010232:	4a30      	ldr	r2, [pc, #192]	@ (80102f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010234:	6939      	ldr	r1, [r7, #16]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	0018      	movs	r0, r3
 801023a:	f000 f94f 	bl	80104dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	1c11      	adds	r1, r2, #0
 8010246:	0018      	movs	r0, r3
 8010248:	f000 f958 	bl	80104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801024c:	1c03      	adds	r3, r0, #0
 801024e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010250:	6979      	ldr	r1, [r7, #20]
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f7f0 fef4 	bl	8001040 <__aeabi_fmul>
 8010258:	1c03      	adds	r3, r0, #0
 801025a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	4923      	ldr	r1, [pc, #140]	@ (80102f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 801026a:	1c18      	adds	r0, r3, #0
 801026c:	f7f0 fd1a 	bl	8000ca4 <__aeabi_fdiv>
 8010270:	1c03      	adds	r3, r0, #0
 8010272:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8010274:	69f9      	ldr	r1, [r7, #28]
 8010276:	20fe      	movs	r0, #254	@ 0xfe
 8010278:	0580      	lsls	r0, r0, #22
 801027a:	f7f1 f83b 	bl	80012f4 <__aeabi_fsub>
 801027e:	1c03      	adds	r3, r0, #0
 8010280:	491e      	ldr	r1, [pc, #120]	@ (80102fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8010282:	1c18      	adds	r0, r3, #0
 8010284:	f7f0 fedc 	bl	8001040 <__aeabi_fmul>
 8010288:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 801028a:	491d      	ldr	r1, [pc, #116]	@ (8010300 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 801028c:	1c18      	adds	r0, r3, #0
 801028e:	f7f1 f831 	bl	80012f4 <__aeabi_fsub>
 8010292:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8010294:	1c19      	adds	r1, r3, #0
 8010296:	1c28      	adds	r0, r5, #0
 8010298:	f7f0 fed2 	bl	8001040 <__aeabi_fmul>
 801029c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 801029e:	1c19      	adds	r1, r3, #0
 80102a0:	1c20      	adds	r0, r4, #0
 80102a2:	f7f0 fb0d 	bl	80008c0 <__aeabi_fadd>
 80102a6:	1c03      	adds	r3, r0, #0
 80102a8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b2:	2100      	movs	r1, #0
 80102b4:	1c18      	adds	r0, r3, #0
 80102b6:	f7f0 f93b 	bl	8000530 <__aeabi_fcmplt>
 80102ba:	1e03      	subs	r3, r0, #0
 80102bc:	d002      	beq.n	80102c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80102cc:	1c19      	adds	r1, r3, #0
 80102ce:	1c10      	adds	r0, r2, #0
 80102d0:	f7f0 f942 	bl	8000558 <__aeabi_fcmpgt>
 80102d4:	1e03      	subs	r3, r0, #0
 80102d6:	d100      	bne.n	80102da <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80102d8:	e002      	b.n	80102e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80102e0:	46c0      	nop			@ (mov r8, r8)
 80102e2:	46bd      	mov	sp, r7
 80102e4:	b00c      	add	sp, #48	@ 0x30
 80102e6:	bdb0      	pop	{r4, r5, r7, pc}
 80102e8:	46fffe00 	.word	0x46fffe00
 80102ec:	3c23d70a 	.word	0x3c23d70a
 80102f0:	43ff0000 	.word	0x43ff0000
 80102f4:	3db851ec 	.word	0x3db851ec
 80102f8:	42700000 	.word	0x42700000
 80102fc:	3fa66666 	.word	0x3fa66666
 8010300:	3e99999a 	.word	0x3e99999a

08010304 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8010304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010306:	b087      	sub	sp, #28
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	223c      	movs	r2, #60	@ 0x3c
 8010312:	5c9b      	ldrb	r3, [r3, r2]
 8010314:	2201      	movs	r2, #1
 8010316:	4053      	eors	r3, r2
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	223c      	movs	r2, #60	@ 0x3c
 8010322:	2101      	movs	r1, #1
 8010324:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	683a      	ldr	r2, [r7, #0]
 801032a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8010332:	e0c8      	b.n	80104c6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010338:	4965      	ldr	r1, [pc, #404]	@ (80104d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 801033a:	1c18      	adds	r0, r3, #0
 801033c:	f7f0 f916 	bl	800056c <__aeabi_fcmpge>
 8010340:	1e03      	subs	r3, r0, #0
 8010342:	d107      	bne.n	8010354 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010348:	4962      	ldr	r1, [pc, #392]	@ (80104d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 801034a:	1c18      	adds	r0, r3, #0
 801034c:	f7f0 f8fa 	bl	8000544 <__aeabi_fcmple>
 8010350:	1e03      	subs	r3, r0, #0
 8010352:	d00e      	beq.n	8010372 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 801035c:	1c19      	adds	r1, r3, #0
 801035e:	1c10      	adds	r0, r2, #0
 8010360:	f7f0 faae 	bl	80008c0 <__aeabi_fadd>
 8010364:	1c03      	adds	r3, r0, #0
 8010366:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010376:	1c19      	adds	r1, r3, #0
 8010378:	6838      	ldr	r0, [r7, #0]
 801037a:	f7f0 ffbb 	bl	80012f4 <__aeabi_fsub>
 801037e:	1c03      	adds	r3, r0, #0
 8010380:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	0018      	movs	r0, r3
 8010386:	f7ff fe7d 	bl	8010084 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801038e:	1c19      	adds	r1, r3, #0
 8010390:	6838      	ldr	r0, [r7, #0]
 8010392:	f7f0 ffaf 	bl	80012f4 <__aeabi_fsub>
 8010396:	1c03      	adds	r3, r0, #0
 8010398:	2185      	movs	r1, #133	@ 0x85
 801039a:	05c9      	lsls	r1, r1, #23
 801039c:	1c18      	adds	r0, r3, #0
 801039e:	f7f0 fc81 	bl	8000ca4 <__aeabi_fdiv>
 80103a2:	1c03      	adds	r3, r0, #0
 80103a4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80103a6:	2100      	movs	r1, #0
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f7f0 f8c1 	bl	8000530 <__aeabi_fcmplt>
 80103ae:	1e03      	subs	r3, r0, #0
 80103b0:	d008      	beq.n	80103c4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103b6:	68f9      	ldr	r1, [r7, #12]
 80103b8:	1c18      	adds	r0, r3, #0
 80103ba:	f7f0 ff9b 	bl	80012f4 <__aeabi_fsub>
 80103be:	1c03      	adds	r3, r0, #0
 80103c0:	617b      	str	r3, [r7, #20]
 80103c2:	e007      	b.n	80103d4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103c8:	1c19      	adds	r1, r3, #0
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7f0 fa78 	bl	80008c0 <__aeabi_fadd>
 80103d0:	1c03      	adds	r3, r0, #0
 80103d2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80103d4:	23fe      	movs	r3, #254	@ 0xfe
 80103d6:	059b      	lsls	r3, r3, #22
 80103d8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80103da:	493f      	ldr	r1, [pc, #252]	@ (80104d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80103dc:	6978      	ldr	r0, [r7, #20]
 80103de:	f7f0 f8bb 	bl	8000558 <__aeabi_fcmpgt>
 80103e2:	1e03      	subs	r3, r0, #0
 80103e4:	d010      	beq.n	8010408 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80103e6:	493c      	ldr	r1, [pc, #240]	@ (80104d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80103e8:	6978      	ldr	r0, [r7, #20]
 80103ea:	f7f0 fc5b 	bl	8000ca4 <__aeabi_fdiv>
 80103ee:	1c03      	adds	r3, r0, #0
 80103f0:	1c1c      	adds	r4, r3, #0
 80103f2:	4939      	ldr	r1, [pc, #228]	@ (80104d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80103f4:	6978      	ldr	r0, [r7, #20]
 80103f6:	f7f0 fc55 	bl	8000ca4 <__aeabi_fdiv>
 80103fa:	1c03      	adds	r3, r0, #0
 80103fc:	1c19      	adds	r1, r3, #0
 80103fe:	1c20      	adds	r0, r4, #0
 8010400:	f7f0 fe1e 	bl	8001040 <__aeabi_fmul>
 8010404:	1c03      	adds	r3, r0, #0
 8010406:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 801040c:	1c19      	adds	r1, r3, #0
 801040e:	2085      	movs	r0, #133	@ 0x85
 8010410:	05c0      	lsls	r0, r0, #23
 8010412:	f7f0 ff6f 	bl	80012f4 <__aeabi_fsub>
 8010416:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8010418:	6939      	ldr	r1, [r7, #16]
 801041a:	1c18      	adds	r0, r3, #0
 801041c:	f7f0 fe10 	bl	8001040 <__aeabi_fmul>
 8010420:	1c03      	adds	r3, r0, #0
 8010422:	1c18      	adds	r0, r3, #0
 8010424:	f018 ff8c 	bl	8029340 <sqrtf>
 8010428:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8010432:	2185      	movs	r1, #133	@ 0x85
 8010434:	05c9      	lsls	r1, r1, #23
 8010436:	6938      	ldr	r0, [r7, #16]
 8010438:	f7f0 fe02 	bl	8001040 <__aeabi_fmul>
 801043c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 801043e:	1c19      	adds	r1, r3, #0
 8010440:	1c28      	adds	r0, r5, #0
 8010442:	f7f0 fc2f 	bl	8000ca4 <__aeabi_fdiv>
 8010446:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010448:	1c19      	adds	r1, r3, #0
 801044a:	1c20      	adds	r0, r4, #0
 801044c:	f7f0 fdf8 	bl	8001040 <__aeabi_fmul>
 8010450:	1c03      	adds	r3, r0, #0
 8010452:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010458:	68f9      	ldr	r1, [r7, #12]
 801045a:	1c18      	adds	r0, r3, #0
 801045c:	f7f0 fdf0 	bl	8001040 <__aeabi_fmul>
 8010460:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8010462:	6939      	ldr	r1, [r7, #16]
 8010464:	1c18      	adds	r0, r3, #0
 8010466:	f7f0 fc1d 	bl	8000ca4 <__aeabi_fdiv>
 801046a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 801046c:	68f9      	ldr	r1, [r7, #12]
 801046e:	1c18      	adds	r0, r3, #0
 8010470:	f7f0 fde6 	bl	8001040 <__aeabi_fmul>
 8010474:	1c03      	adds	r3, r0, #0
             sqrtf(
 8010476:	1c19      	adds	r1, r3, #0
 8010478:	1c20      	adds	r0, r4, #0
 801047a:	f7f0 fa21 	bl	80008c0 <__aeabi_fadd>
 801047e:	1c03      	adds	r3, r0, #0
 8010480:	1c18      	adds	r0, r3, #0
 8010482:	f018 ff5d 	bl	8029340 <sqrtf>
 8010486:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010488:	1c19      	adds	r1, r3, #0
 801048a:	1c30      	adds	r0, r6, #0
 801048c:	f7f0 fdd8 	bl	8001040 <__aeabi_fmul>
 8010490:	1c03      	adds	r3, r0, #0
 8010492:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104a0:	68f9      	ldr	r1, [r7, #12]
 80104a2:	1c18      	adds	r0, r3, #0
 80104a4:	f7f0 fdcc 	bl	8001040 <__aeabi_fmul>
 80104a8:	1c03      	adds	r3, r0, #0
 80104aa:	2182      	movs	r1, #130	@ 0x82
 80104ac:	05c9      	lsls	r1, r1, #23
 80104ae:	1c18      	adds	r0, r3, #0
 80104b0:	f7f0 fbf8 	bl	8000ca4 <__aeabi_fdiv>
 80104b4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80104b6:	1c19      	adds	r1, r3, #0
 80104b8:	1c20      	adds	r0, r4, #0
 80104ba:	f7f0 fa01 	bl	80008c0 <__aeabi_fadd>
 80104be:	1c03      	adds	r3, r0, #0
 80104c0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80104c6:	46c0      	nop			@ (mov r8, r8)
 80104c8:	46bd      	mov	sp, r7
 80104ca:	b007      	add	sp, #28
 80104cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ce:	46c0      	nop			@ (mov r8, r8)
 80104d0:	42c80000 	.word	0x42c80000
 80104d4:	c2c80000 	.word	0xc2c80000
 80104d8:	44b40000 	.word	0x44b40000

080104dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80104f4:	46c0      	nop			@ (mov r8, r8)
 80104f6:	46bd      	mov	sp, r7
 80104f8:	b004      	add	sp, #16
 80104fa:	bd80      	pop	{r7, pc}

080104fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80104fc:	b590      	push	{r4, r7, lr}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801050e:	1c19      	adds	r1, r3, #0
 8010510:	6838      	ldr	r0, [r7, #0]
 8010512:	f7f0 feef 	bl	80012f4 <__aeabi_fsub>
 8010516:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010518:	1c19      	adds	r1, r3, #0
 801051a:	1c20      	adds	r0, r4, #0
 801051c:	f7f0 fd90 	bl	8001040 <__aeabi_fmul>
 8010520:	1c03      	adds	r3, r0, #0
 8010522:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8010524:	4912      	ldr	r1, [pc, #72]	@ (8010570 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7f0 f802 	bl	8000530 <__aeabi_fcmplt>
 801052c:	1e03      	subs	r3, r0, #0
 801052e:	d002      	beq.n	8010536 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010530:	23fe      	movs	r3, #254	@ 0xfe
 8010532:	059b      	lsls	r3, r3, #22
 8010534:	e018      	b.n	8010568 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8010536:	490f      	ldr	r1, [pc, #60]	@ (8010574 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f7f0 f80d 	bl	8000558 <__aeabi_fcmpgt>
 801053e:	1e03      	subs	r3, r0, #0
 8010540:	d001      	beq.n	8010546 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8010542:	2300      	movs	r3, #0
 8010544:	e010      	b.n	8010568 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	1c18      	adds	r0, r3, #0
 801054a:	f018 fed1 	bl	80292f0 <expf>
 801054e:	1c03      	adds	r3, r0, #0
 8010550:	21fe      	movs	r1, #254	@ 0xfe
 8010552:	0589      	lsls	r1, r1, #22
 8010554:	1c18      	adds	r0, r3, #0
 8010556:	f7f0 f9b3 	bl	80008c0 <__aeabi_fadd>
 801055a:	1c03      	adds	r3, r0, #0
 801055c:	1c19      	adds	r1, r3, #0
 801055e:	20fe      	movs	r0, #254	@ 0xfe
 8010560:	0580      	lsls	r0, r0, #22
 8010562:	f7f0 fb9f 	bl	8000ca4 <__aeabi_fdiv>
 8010566:	1c03      	adds	r3, r0, #0
    }
}
 8010568:	1c18      	adds	r0, r3, #0
 801056a:	46bd      	mov	sp, r7
 801056c:	b005      	add	sp, #20
 801056e:	bd90      	pop	{r4, r7, pc}
 8010570:	c2480000 	.word	0xc2480000
 8010574:	42480000 	.word	0x42480000

08010578 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	68ba      	ldr	r2, [r7, #8]
 8010588:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010590:	46c0      	nop			@ (mov r8, r8)
 8010592:	46bd      	mov	sp, r7
 8010594:	b004      	add	sp, #16
 8010596:	bd80      	pop	{r7, pc}

08010598 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8010598:	b590      	push	{r4, r7, lr}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d114      	bne.n	80105d4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105ae:	1c19      	adds	r1, r3, #0
 80105b0:	6838      	ldr	r0, [r7, #0]
 80105b2:	f7f0 fe9f 	bl	80012f4 <__aeabi_fsub>
 80105b6:	1c03      	adds	r3, r0, #0
 80105b8:	4918      	ldr	r1, [pc, #96]	@ (801061c <GasIndexAlgorithm__mox_model__process+0x84>)
 80105ba:	1c18      	adds	r0, r3, #0
 80105bc:	f7f0 fb72 	bl	8000ca4 <__aeabi_fdiv>
 80105c0:	1c03      	adds	r3, r0, #0
 80105c2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80105c8:	1c19      	adds	r1, r3, #0
 80105ca:	1c10      	adds	r0, r2, #0
 80105cc:	f7f0 fd38 	bl	8001040 <__aeabi_fmul>
 80105d0:	1c03      	adds	r3, r0, #0
 80105d2:	e01f      	b.n	8010614 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105d8:	1c19      	adds	r1, r3, #0
 80105da:	6838      	ldr	r0, [r7, #0]
 80105dc:	f7f0 fe8a 	bl	80012f4 <__aeabi_fsub>
 80105e0:	1c03      	adds	r3, r0, #0
 80105e2:	1c1a      	adds	r2, r3, #0
 80105e4:	2380      	movs	r3, #128	@ 0x80
 80105e6:	061b      	lsls	r3, r3, #24
 80105e8:	4053      	eors	r3, r2
 80105ea:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105f0:	490b      	ldr	r1, [pc, #44]	@ (8010620 <GasIndexAlgorithm__mox_model__process+0x88>)
 80105f2:	1c18      	adds	r0, r3, #0
 80105f4:	f7f0 f964 	bl	80008c0 <__aeabi_fadd>
 80105f8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105fa:	1c19      	adds	r1, r3, #0
 80105fc:	1c20      	adds	r0, r4, #0
 80105fe:	f7f0 fb51 	bl	8000ca4 <__aeabi_fdiv>
 8010602:	1c03      	adds	r3, r0, #0
 8010604:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 801060a:	1c19      	adds	r1, r3, #0
 801060c:	1c10      	adds	r0, r2, #0
 801060e:	f7f0 fd17 	bl	8001040 <__aeabi_fmul>
 8010612:	1c03      	adds	r3, r0, #0
    }
}
 8010614:	1c18      	adds	r0, r3, #0
 8010616:	46bd      	mov	sp, r7
 8010618:	b003      	add	sp, #12
 801061a:	bd90      	pop	{r4, r7, pc}
 801061c:	44fa0000 	.word	0x44fa0000
 8010620:	435c0000 	.word	0x435c0000

08010624 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2180      	movs	r1, #128	@ 0x80
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2184      	movs	r1, #132	@ 0x84
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2188      	movs	r1, #136	@ 0x88
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	505a      	str	r2, [r3, r1]
}
 801064a:	46c0      	nop			@ (mov r8, r8)
 801064c:	46bd      	mov	sp, r7
 801064e:	b004      	add	sp, #16
 8010650:	bd80      	pop	{r7, pc}
	...

08010654 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010654:	b590      	push	{r4, r7, lr}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2280      	movs	r2, #128	@ 0x80
 8010662:	589c      	ldr	r4, [r3, r2]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2284      	movs	r2, #132	@ 0x84
 8010668:	589b      	ldr	r3, [r3, r2]
 801066a:	1c19      	adds	r1, r3, #0
 801066c:	6838      	ldr	r0, [r7, #0]
 801066e:	f7f0 fe41 	bl	80012f4 <__aeabi_fsub>
 8010672:	1c03      	adds	r3, r0, #0
 8010674:	1c19      	adds	r1, r3, #0
 8010676:	1c20      	adds	r0, r4, #0
 8010678:	f7f0 fce2 	bl	8001040 <__aeabi_fmul>
 801067c:	1c03      	adds	r3, r0, #0
 801067e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8010680:	4940      	ldr	r1, [pc, #256]	@ (8010784 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8010682:	68b8      	ldr	r0, [r7, #8]
 8010684:	f7ef ff54 	bl	8000530 <__aeabi_fcmplt>
 8010688:	1e03      	subs	r3, r0, #0
 801068a:	d001      	beq.n	8010690 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 801068c:	4b3e      	ldr	r3, [pc, #248]	@ (8010788 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801068e:	e075      	b.n	801077c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8010690:	493e      	ldr	r1, [pc, #248]	@ (801078c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8010692:	68b8      	ldr	r0, [r7, #8]
 8010694:	f7ef ff60 	bl	8000558 <__aeabi_fcmpgt>
 8010698:	1e03      	subs	r3, r0, #0
 801069a:	d001      	beq.n	80106a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 801069c:	2300      	movs	r3, #0
 801069e:	e06d      	b.n	801077c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80106a0:	2100      	movs	r1, #0
 80106a2:	6838      	ldr	r0, [r7, #0]
 80106a4:	f7ef ff62 	bl	800056c <__aeabi_fcmpge>
 80106a8:	1e03      	subs	r3, r0, #0
 80106aa:	d047      	beq.n	801073c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2288      	movs	r2, #136	@ 0x88
 80106b0:	589b      	ldr	r3, [r3, r2]
 80106b2:	21fe      	movs	r1, #254	@ 0xfe
 80106b4:	0589      	lsls	r1, r1, #22
 80106b6:	1c18      	adds	r0, r3, #0
 80106b8:	f7ef ff34 	bl	8000524 <__aeabi_fcmpeq>
 80106bc:	1e03      	subs	r3, r0, #0
 80106be:	d00e      	beq.n	80106de <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	1c19      	adds	r1, r3, #0
 80106c6:	20fe      	movs	r0, #254	@ 0xfe
 80106c8:	0580      	lsls	r0, r0, #22
 80106ca:	f7f0 fe13 	bl	80012f4 <__aeabi_fsub>
 80106ce:	1c03      	adds	r3, r0, #0
 80106d0:	492f      	ldr	r1, [pc, #188]	@ (8010790 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80106d2:	1c18      	adds	r0, r3, #0
 80106d4:	f7f0 fcb4 	bl	8001040 <__aeabi_fmul>
 80106d8:	1c03      	adds	r3, r0, #0
 80106da:	60fb      	str	r3, [r7, #12]
 80106dc:	e012      	b.n	8010704 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	492c      	ldr	r1, [pc, #176]	@ (8010794 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80106e4:	1c18      	adds	r0, r3, #0
 80106e6:	f7f0 fcab 	bl	8001040 <__aeabi_fmul>
 80106ea:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80106ec:	1c19      	adds	r1, r3, #0
 80106ee:	4826      	ldr	r0, [pc, #152]	@ (8010788 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80106f0:	f7f0 fe00 	bl	80012f4 <__aeabi_fsub>
 80106f4:	1c03      	adds	r3, r0, #0
 80106f6:	2181      	movs	r1, #129	@ 0x81
 80106f8:	05c9      	lsls	r1, r1, #23
 80106fa:	1c18      	adds	r0, r3, #0
 80106fc:	f7f0 fad2 	bl	8000ca4 <__aeabi_fdiv>
 8010700:	1c03      	adds	r3, r0, #0
 8010702:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8010704:	4920      	ldr	r1, [pc, #128]	@ (8010788 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7f0 f8da 	bl	80008c0 <__aeabi_fadd>
 801070c:	1c03      	adds	r3, r0, #0
 801070e:	1c1c      	adds	r4, r3, #0
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	1c18      	adds	r0, r3, #0
 8010714:	f018 fdec 	bl	80292f0 <expf>
 8010718:	1c03      	adds	r3, r0, #0
 801071a:	21fe      	movs	r1, #254	@ 0xfe
 801071c:	0589      	lsls	r1, r1, #22
 801071e:	1c18      	adds	r0, r3, #0
 8010720:	f7f0 f8ce 	bl	80008c0 <__aeabi_fadd>
 8010724:	1c03      	adds	r3, r0, #0
 8010726:	1c19      	adds	r1, r3, #0
 8010728:	1c20      	adds	r0, r4, #0
 801072a:	f7f0 fabb 	bl	8000ca4 <__aeabi_fdiv>
 801072e:	1c03      	adds	r3, r0, #0
 8010730:	68f9      	ldr	r1, [r7, #12]
 8010732:	1c18      	adds	r0, r3, #0
 8010734:	f7f0 fdde 	bl	80012f4 <__aeabi_fsub>
 8010738:	1c03      	adds	r3, r0, #0
 801073a:	e01f      	b.n	801077c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2188      	movs	r1, #136	@ 0x88
 8010744:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8010746:	1c19      	adds	r1, r3, #0
 8010748:	1c10      	adds	r0, r2, #0
 801074a:	f7f0 faab 	bl	8000ca4 <__aeabi_fdiv>
 801074e:	1c03      	adds	r3, r0, #0
 8010750:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	1c18      	adds	r0, r3, #0
 8010756:	f018 fdcb 	bl	80292f0 <expf>
 801075a:	1c03      	adds	r3, r0, #0
 801075c:	21fe      	movs	r1, #254	@ 0xfe
 801075e:	0589      	lsls	r1, r1, #22
 8010760:	1c18      	adds	r0, r3, #0
 8010762:	f7f0 f8ad 	bl	80008c0 <__aeabi_fadd>
 8010766:	1c03      	adds	r3, r0, #0
 8010768:	1c19      	adds	r1, r3, #0
 801076a:	4807      	ldr	r0, [pc, #28]	@ (8010788 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801076c:	f7f0 fa9a 	bl	8000ca4 <__aeabi_fdiv>
 8010770:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010772:	1c19      	adds	r1, r3, #0
 8010774:	1c20      	adds	r0, r4, #0
 8010776:	f7f0 fc63 	bl	8001040 <__aeabi_fmul>
 801077a:	1c03      	adds	r3, r0, #0
        }
    }
}
 801077c:	1c18      	adds	r0, r3, #0
 801077e:	46bd      	mov	sp, r7
 8010780:	b005      	add	sp, #20
 8010782:	bd90      	pop	{r4, r7, pc}
 8010784:	c2480000 	.word	0xc2480000
 8010788:	43fa0000 	.word	0x43fa0000
 801078c:	42480000 	.word	0x42480000
 8010790:	3f8041ab 	.word	0x3f8041ab
 8010794:	40a00000 	.word	0x40a00000

08010798 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8010798:	b590      	push	{r4, r7, lr}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	4913      	ldr	r1, [pc, #76]	@ (80107f8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80107aa:	1c18      	adds	r0, r3, #0
 80107ac:	f7f0 f888 	bl	80008c0 <__aeabi_fadd>
 80107b0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107b2:	1c19      	adds	r1, r3, #0
 80107b4:	1c20      	adds	r0, r4, #0
 80107b6:	f7f0 fa75 	bl	8000ca4 <__aeabi_fdiv>
 80107ba:	1c03      	adds	r3, r0, #0
 80107bc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	228c      	movs	r2, #140	@ 0x8c
 80107c2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	490b      	ldr	r1, [pc, #44]	@ (80107fc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80107ce:	1c18      	adds	r0, r3, #0
 80107d0:	f7f0 f876 	bl	80008c0 <__aeabi_fadd>
 80107d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107d6:	1c19      	adds	r1, r3, #0
 80107d8:	1c20      	adds	r0, r4, #0
 80107da:	f7f0 fa63 	bl	8000ca4 <__aeabi_fdiv>
 80107de:	1c03      	adds	r3, r0, #0
 80107e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2290      	movs	r2, #144	@ 0x90
 80107e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2294      	movs	r2, #148	@ 0x94
 80107ec:	2100      	movs	r1, #0
 80107ee:	5499      	strb	r1, [r3, r2]
}
 80107f0:	46c0      	nop			@ (mov r8, r8)
 80107f2:	46bd      	mov	sp, r7
 80107f4:	b003      	add	sp, #12
 80107f6:	bd90      	pop	{r4, r7, pc}
 80107f8:	41a00000 	.word	0x41a00000
 80107fc:	43fa0000 	.word	0x43fa0000

08010800 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010800:	b590      	push	{r4, r7, lr}
 8010802:	b087      	sub	sp, #28
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2294      	movs	r2, #148	@ 0x94
 801080e:	5c9b      	ldrb	r3, [r3, r2]
 8010810:	2201      	movs	r2, #1
 8010812:	4053      	eors	r3, r2
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00f      	beq.n	801083a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2198      	movs	r1, #152	@ 0x98
 801081e:	683a      	ldr	r2, [r7, #0]
 8010820:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	219c      	movs	r1, #156	@ 0x9c
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	21a0      	movs	r1, #160	@ 0xa0
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2294      	movs	r2, #148	@ 0x94
 8010836:	2101      	movs	r1, #1
 8010838:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	228c      	movs	r2, #140	@ 0x8c
 801083e:	589b      	ldr	r3, [r3, r2]
 8010840:	1c19      	adds	r1, r3, #0
 8010842:	20fe      	movs	r0, #254	@ 0xfe
 8010844:	0580      	lsls	r0, r0, #22
 8010846:	f7f0 fd55 	bl	80012f4 <__aeabi_fsub>
 801084a:	1c03      	adds	r3, r0, #0
 801084c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2298      	movs	r2, #152	@ 0x98
 8010852:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010854:	1c19      	adds	r1, r3, #0
 8010856:	f7f0 fbf3 	bl	8001040 <__aeabi_fmul>
 801085a:	1c03      	adds	r3, r0, #0
 801085c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	228c      	movs	r2, #140	@ 0x8c
 8010862:	589b      	ldr	r3, [r3, r2]
 8010864:	6839      	ldr	r1, [r7, #0]
 8010866:	1c18      	adds	r0, r3, #0
 8010868:	f7f0 fbea 	bl	8001040 <__aeabi_fmul>
 801086c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 801086e:	1c19      	adds	r1, r3, #0
 8010870:	1c20      	adds	r0, r4, #0
 8010872:	f7f0 f825 	bl	80008c0 <__aeabi_fadd>
 8010876:	1c03      	adds	r3, r0, #0
 8010878:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2298      	movs	r2, #152	@ 0x98
 801087e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2290      	movs	r2, #144	@ 0x90
 8010884:	589b      	ldr	r3, [r3, r2]
 8010886:	1c19      	adds	r1, r3, #0
 8010888:	20fe      	movs	r0, #254	@ 0xfe
 801088a:	0580      	lsls	r0, r0, #22
 801088c:	f7f0 fd32 	bl	80012f4 <__aeabi_fsub>
 8010890:	1c03      	adds	r3, r0, #0
 8010892:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	229c      	movs	r2, #156	@ 0x9c
 8010898:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 801089a:	1c19      	adds	r1, r3, #0
 801089c:	f7f0 fbd0 	bl	8001040 <__aeabi_fmul>
 80108a0:	1c03      	adds	r3, r0, #0
 80108a2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2290      	movs	r2, #144	@ 0x90
 80108a8:	589b      	ldr	r3, [r3, r2]
 80108aa:	6839      	ldr	r1, [r7, #0]
 80108ac:	1c18      	adds	r0, r3, #0
 80108ae:	f7f0 fbc7 	bl	8001040 <__aeabi_fmul>
 80108b2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80108b4:	1c19      	adds	r1, r3, #0
 80108b6:	1c20      	adds	r0, r4, #0
 80108b8:	f7f0 f802 	bl	80008c0 <__aeabi_fadd>
 80108bc:	1c03      	adds	r3, r0, #0
 80108be:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	229c      	movs	r2, #156	@ 0x9c
 80108c4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2298      	movs	r2, #152	@ 0x98
 80108ca:	589a      	ldr	r2, [r3, r2]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	219c      	movs	r1, #156	@ 0x9c
 80108d0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80108d2:	1c19      	adds	r1, r3, #0
 80108d4:	1c10      	adds	r0, r2, #0
 80108d6:	f7f0 fd0d 	bl	80012f4 <__aeabi_fsub>
 80108da:	1c03      	adds	r3, r0, #0
 80108dc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80108de:	2100      	movs	r1, #0
 80108e0:	6978      	ldr	r0, [r7, #20]
 80108e2:	f7ef fe25 	bl	8000530 <__aeabi_fcmplt>
 80108e6:	1e03      	subs	r3, r0, #0
 80108e8:	d004      	beq.n	80108f4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2280      	movs	r2, #128	@ 0x80
 80108ee:	0612      	lsls	r2, r2, #24
 80108f0:	4053      	eors	r3, r2
 80108f2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80108f4:	4923      	ldr	r1, [pc, #140]	@ (8010984 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80108f6:	6978      	ldr	r0, [r7, #20]
 80108f8:	f7f0 fba2 	bl	8001040 <__aeabi_fmul>
 80108fc:	1c03      	adds	r3, r0, #0
 80108fe:	1c18      	adds	r0, r3, #0
 8010900:	f018 fcf6 	bl	80292f0 <expf>
 8010904:	1c03      	adds	r3, r0, #0
 8010906:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8010908:	491f      	ldr	r1, [pc, #124]	@ (8010988 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 801090a:	6938      	ldr	r0, [r7, #16]
 801090c:	f7f0 fb98 	bl	8001040 <__aeabi_fmul>
 8010910:	1c03      	adds	r3, r0, #0
 8010912:	491e      	ldr	r1, [pc, #120]	@ (801098c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010914:	1c18      	adds	r0, r3, #0
 8010916:	f7ef ffd3 	bl	80008c0 <__aeabi_fadd>
 801091a:	1c03      	adds	r3, r0, #0
 801091c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	685c      	ldr	r4, [r3, #4]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	68f9      	ldr	r1, [r7, #12]
 8010928:	1c18      	adds	r0, r3, #0
 801092a:	f7ef ffc9 	bl	80008c0 <__aeabi_fadd>
 801092e:	1c03      	adds	r3, r0, #0
 8010930:	1c19      	adds	r1, r3, #0
 8010932:	1c20      	adds	r0, r4, #0
 8010934:	f7f0 f9b6 	bl	8000ca4 <__aeabi_fdiv>
 8010938:	1c03      	adds	r3, r0, #0
 801093a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 801093c:	68b9      	ldr	r1, [r7, #8]
 801093e:	20fe      	movs	r0, #254	@ 0xfe
 8010940:	0580      	lsls	r0, r0, #22
 8010942:	f7f0 fcd7 	bl	80012f4 <__aeabi_fsub>
 8010946:	1c03      	adds	r3, r0, #0
 8010948:	1c18      	adds	r0, r3, #0
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	22a0      	movs	r2, #160	@ 0xa0
 801094e:	589b      	ldr	r3, [r3, r2]
 8010950:	1c19      	adds	r1, r3, #0
 8010952:	f7f0 fb75 	bl	8001040 <__aeabi_fmul>
 8010956:	1c03      	adds	r3, r0, #0
 8010958:	1c1c      	adds	r4, r3, #0
 801095a:	6839      	ldr	r1, [r7, #0]
 801095c:	68b8      	ldr	r0, [r7, #8]
 801095e:	f7f0 fb6f 	bl	8001040 <__aeabi_fmul>
 8010962:	1c03      	adds	r3, r0, #0
 8010964:	1c19      	adds	r1, r3, #0
 8010966:	1c20      	adds	r0, r4, #0
 8010968:	f7ef ffaa 	bl	80008c0 <__aeabi_fadd>
 801096c:	1c03      	adds	r3, r0, #0
 801096e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	22a0      	movs	r2, #160	@ 0xa0
 8010974:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	22a0      	movs	r2, #160	@ 0xa0
 801097a:	589b      	ldr	r3, [r3, r2]
}
 801097c:	1c18      	adds	r0, r3, #0
 801097e:	46bd      	mov	sp, r7
 8010980:	b007      	add	sp, #28
 8010982:	bd90      	pop	{r4, r7, pc}
 8010984:	be4ccccd 	.word	0xbe4ccccd
 8010988:	43f00000 	.word	0x43f00000
 801098c:	41a00000 	.word	0x41a00000

08010990 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	000a      	movs	r2, r1
 801099a:	1cbb      	adds	r3, r7, #2
 801099c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 801099e:	230d      	movs	r3, #13
 80109a0:	18fb      	adds	r3, r7, r3
 80109a2:	22ff      	movs	r2, #255	@ 0xff
 80109a4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80109a6:	230e      	movs	r3, #14
 80109a8:	18fb      	adds	r3, r7, r3
 80109aa:	2200      	movs	r2, #0
 80109ac:	801a      	strh	r2, [r3, #0]
 80109ae:	e038      	b.n	8010a22 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80109b0:	230e      	movs	r3, #14
 80109b2:	18fb      	adds	r3, r7, r3
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	18d3      	adds	r3, r2, r3
 80109ba:	7819      	ldrb	r1, [r3, #0]
 80109bc:	220d      	movs	r2, #13
 80109be:	18bb      	adds	r3, r7, r2
 80109c0:	18ba      	adds	r2, r7, r2
 80109c2:	7812      	ldrb	r2, [r2, #0]
 80109c4:	404a      	eors	r2, r1
 80109c6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80109c8:	230c      	movs	r3, #12
 80109ca:	18fb      	adds	r3, r7, r3
 80109cc:	2208      	movs	r2, #8
 80109ce:	701a      	strb	r2, [r3, #0]
 80109d0:	e01c      	b.n	8010a0c <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80109d2:	210d      	movs	r1, #13
 80109d4:	187b      	adds	r3, r7, r1
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	b25b      	sxtb	r3, r3
 80109da:	2b00      	cmp	r3, #0
 80109dc:	da0a      	bge.n	80109f4 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80109de:	187b      	adds	r3, r7, r1
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	b25b      	sxtb	r3, r3
 80109e4:	18db      	adds	r3, r3, r3
 80109e6:	b25b      	sxtb	r3, r3
 80109e8:	2231      	movs	r2, #49	@ 0x31
 80109ea:	4053      	eors	r3, r2
 80109ec:	b25a      	sxtb	r2, r3
 80109ee:	187b      	adds	r3, r7, r1
 80109f0:	701a      	strb	r2, [r3, #0]
 80109f2:	e005      	b.n	8010a00 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80109f4:	230d      	movs	r3, #13
 80109f6:	18fa      	adds	r2, r7, r3
 80109f8:	18fb      	adds	r3, r7, r3
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	18db      	adds	r3, r3, r3
 80109fe:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010a00:	220c      	movs	r2, #12
 8010a02:	18bb      	adds	r3, r7, r2
 8010a04:	18ba      	adds	r2, r7, r2
 8010a06:	7812      	ldrb	r2, [r2, #0]
 8010a08:	3a01      	subs	r2, #1
 8010a0a:	701a      	strb	r2, [r3, #0]
 8010a0c:	230c      	movs	r3, #12
 8010a0e:	18fb      	adds	r3, r7, r3
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d1dd      	bne.n	80109d2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010a16:	220e      	movs	r2, #14
 8010a18:	18bb      	adds	r3, r7, r2
 8010a1a:	18ba      	adds	r2, r7, r2
 8010a1c:	8812      	ldrh	r2, [r2, #0]
 8010a1e:	3201      	adds	r2, #1
 8010a20:	801a      	strh	r2, [r3, #0]
 8010a22:	230e      	movs	r3, #14
 8010a24:	18fa      	adds	r2, r7, r3
 8010a26:	1cbb      	adds	r3, r7, #2
 8010a28:	8812      	ldrh	r2, [r2, #0]
 8010a2a:	881b      	ldrh	r3, [r3, #0]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d3bf      	bcc.n	80109b0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010a30:	230d      	movs	r3, #13
 8010a32:	18fb      	adds	r3, r7, r3
 8010a34:	781b      	ldrb	r3, [r3, #0]
}
 8010a36:	0018      	movs	r0, r3
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	b004      	add	sp, #16
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b082      	sub	sp, #8
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	0008      	movs	r0, r1
 8010a48:	0011      	movs	r1, r2
 8010a4a:	1cbb      	adds	r3, r7, #2
 8010a4c:	1c02      	adds	r2, r0, #0
 8010a4e:	801a      	strh	r2, [r3, #0]
 8010a50:	1c7b      	adds	r3, r7, #1
 8010a52:	1c0a      	adds	r2, r1, #0
 8010a54:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010a56:	1cbb      	adds	r3, r7, #2
 8010a58:	881a      	ldrh	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	0011      	movs	r1, r2
 8010a5e:	0018      	movs	r0, r3
 8010a60:	f7ff ff96 	bl	8010990 <sensirion_i2c_generate_crc>
 8010a64:	0003      	movs	r3, r0
 8010a66:	001a      	movs	r2, r3
 8010a68:	1c7b      	adds	r3, r7, #1
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d001      	beq.n	8010a74 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010a70:	2301      	movs	r3, #1
 8010a72:	e000      	b.n	8010a76 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	0018      	movs	r0, r3
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	b002      	add	sp, #8
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b082      	sub	sp, #8
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
 8010a86:	0008      	movs	r0, r1
 8010a88:	0011      	movs	r1, r2
 8010a8a:	1cbb      	adds	r3, r7, #2
 8010a8c:	1c02      	adds	r2, r0, #0
 8010a8e:	801a      	strh	r2, [r3, #0]
 8010a90:	003b      	movs	r3, r7
 8010a92:	1c0a      	adds	r2, r1, #0
 8010a94:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010a96:	003b      	movs	r3, r7
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	0a1b      	lsrs	r3, r3, #8
 8010a9c:	b299      	uxth	r1, r3
 8010a9e:	1cbb      	adds	r3, r7, #2
 8010aa0:	881b      	ldrh	r3, [r3, #0]
 8010aa2:	1cba      	adds	r2, r7, #2
 8010aa4:	1c58      	adds	r0, r3, #1
 8010aa6:	8010      	strh	r0, [r2, #0]
 8010aa8:	001a      	movs	r2, r3
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	189b      	adds	r3, r3, r2
 8010aae:	b2ca      	uxtb	r2, r1
 8010ab0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010ab2:	1cbb      	adds	r3, r7, #2
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	1cba      	adds	r2, r7, #2
 8010ab8:	1c59      	adds	r1, r3, #1
 8010aba:	8011      	strh	r1, [r2, #0]
 8010abc:	001a      	movs	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	189b      	adds	r3, r3, r2
 8010ac2:	003a      	movs	r2, r7
 8010ac4:	8812      	ldrh	r2, [r2, #0]
 8010ac6:	b2d2      	uxtb	r2, r2
 8010ac8:	701a      	strb	r2, [r3, #0]
    return offset;
 8010aca:	1cbb      	adds	r3, r7, #2
 8010acc:	881b      	ldrh	r3, [r3, #0]
}
 8010ace:	0018      	movs	r0, r3
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	b002      	add	sp, #8
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010ad6:	b590      	push	{r4, r7, lr}
 8010ad8:	b083      	sub	sp, #12
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	0008      	movs	r0, r1
 8010ae0:	0011      	movs	r1, r2
 8010ae2:	1cbb      	adds	r3, r7, #2
 8010ae4:	1c02      	adds	r2, r0, #0
 8010ae6:	801a      	strh	r2, [r3, #0]
 8010ae8:	003b      	movs	r3, r7
 8010aea:	1c0a      	adds	r2, r1, #0
 8010aec:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010aee:	003b      	movs	r3, r7
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	0a1b      	lsrs	r3, r3, #8
 8010af4:	b299      	uxth	r1, r3
 8010af6:	1cbb      	adds	r3, r7, #2
 8010af8:	881b      	ldrh	r3, [r3, #0]
 8010afa:	1cba      	adds	r2, r7, #2
 8010afc:	1c58      	adds	r0, r3, #1
 8010afe:	8010      	strh	r0, [r2, #0]
 8010b00:	001a      	movs	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	189b      	adds	r3, r3, r2
 8010b06:	b2ca      	uxtb	r2, r1
 8010b08:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010b0a:	1cbb      	adds	r3, r7, #2
 8010b0c:	881b      	ldrh	r3, [r3, #0]
 8010b0e:	1cba      	adds	r2, r7, #2
 8010b10:	1c59      	adds	r1, r3, #1
 8010b12:	8011      	strh	r1, [r2, #0]
 8010b14:	001a      	movs	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	189b      	adds	r3, r3, r2
 8010b1a:	003a      	movs	r2, r7
 8010b1c:	8812      	ldrh	r2, [r2, #0]
 8010b1e:	b2d2      	uxtb	r2, r2
 8010b20:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010b22:	1cbb      	adds	r3, r7, #2
 8010b24:	881b      	ldrh	r3, [r3, #0]
 8010b26:	3b02      	subs	r3, #2
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010b2c:	1cbb      	adds	r3, r7, #2
 8010b2e:	881b      	ldrh	r3, [r3, #0]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	18d4      	adds	r4, r2, r3
 8010b34:	2102      	movs	r1, #2
 8010b36:	f7ff ff2b 	bl	8010990 <sensirion_i2c_generate_crc>
 8010b3a:	0003      	movs	r3, r0
 8010b3c:	7023      	strb	r3, [r4, #0]
    offset++;
 8010b3e:	1cbb      	adds	r3, r7, #2
 8010b40:	881a      	ldrh	r2, [r3, #0]
 8010b42:	1cbb      	adds	r3, r7, #2
 8010b44:	3201      	adds	r2, #1
 8010b46:	801a      	strh	r2, [r3, #0]

    return offset;
 8010b48:	1cbb      	adds	r3, r7, #2
 8010b4a:	881b      	ldrh	r3, [r3, #0]
}
 8010b4c:	0018      	movs	r0, r3
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	b003      	add	sp, #12
 8010b52:	bd90      	pop	{r4, r7, pc}

08010b54 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	0008      	movs	r0, r1
 8010b5e:	0011      	movs	r1, r2
 8010b60:	1cbb      	adds	r3, r7, #2
 8010b62:	1c02      	adds	r2, r0, #0
 8010b64:	801a      	strh	r2, [r3, #0]
 8010b66:	003b      	movs	r3, r7
 8010b68:	1c0a      	adds	r2, r1, #0
 8010b6a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010b6c:	003b      	movs	r3, r7
 8010b6e:	881a      	ldrh	r2, [r3, #0]
 8010b70:	1cbb      	adds	r3, r7, #2
 8010b72:	8819      	ldrh	r1, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	0018      	movs	r0, r3
 8010b78:	f7ff ffad 	bl	8010ad6 <sensirion_i2c_add_uint16_t_to_buffer>
 8010b7c:	0003      	movs	r3, r0
}
 8010b7e:	0018      	movs	r0, r3
 8010b80:	46bd      	mov	sp, r7
 8010b82:	b002      	add	sp, #8
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b082      	sub	sp, #8
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6039      	str	r1, [r7, #0]
 8010b8e:	0011      	movs	r1, r2
 8010b90:	1dfb      	adds	r3, r7, #7
 8010b92:	1c02      	adds	r2, r0, #0
 8010b94:	701a      	strb	r2, [r3, #0]
 8010b96:	1d3b      	adds	r3, r7, #4
 8010b98:	1c0a      	adds	r2, r1, #0
 8010b9a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010b9c:	1d3b      	adds	r3, r7, #4
 8010b9e:	881a      	ldrh	r2, [r3, #0]
 8010ba0:	6839      	ldr	r1, [r7, #0]
 8010ba2:	1dfb      	adds	r3, r7, #7
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	0018      	movs	r0, r3
 8010ba8:	f7fe f9b0 	bl	800ef0c <sensirion_i2c_hal_write>
 8010bac:	0003      	movs	r3, r0
}
 8010bae:	0018      	movs	r0, r3
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	b002      	add	sp, #8
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010bb6:	b5b0      	push	{r4, r5, r7, lr}
 8010bb8:	b084      	sub	sp, #16
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6039      	str	r1, [r7, #0]
 8010bbe:	0011      	movs	r1, r2
 8010bc0:	1dfb      	adds	r3, r7, #7
 8010bc2:	1c02      	adds	r2, r0, #0
 8010bc4:	701a      	strb	r2, [r3, #0]
 8010bc6:	1d3b      	adds	r3, r7, #4
 8010bc8:	1c0a      	adds	r2, r1, #0
 8010bca:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010bcc:	1d3b      	adds	r3, r7, #4
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	085b      	lsrs	r3, r3, #1
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	220a      	movs	r2, #10
 8010bd6:	18ba      	adds	r2, r7, r2
 8010bd8:	1c19      	adds	r1, r3, #0
 8010bda:	1c0b      	adds	r3, r1, #0
 8010bdc:	18db      	adds	r3, r3, r3
 8010bde:	185b      	adds	r3, r3, r1
 8010be0:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010be2:	1d3b      	adds	r3, r7, #4
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	2201      	movs	r2, #1
 8010be8:	4013      	ands	r3, r2
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d001      	beq.n	8010bf4 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010bf0:	2304      	movs	r3, #4
 8010bf2:	e06b      	b.n	8010ccc <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010bf4:	230a      	movs	r3, #10
 8010bf6:	18fb      	adds	r3, r7, r3
 8010bf8:	881a      	ldrh	r2, [r3, #0]
 8010bfa:	6839      	ldr	r1, [r7, #0]
 8010bfc:	1dfb      	adds	r3, r7, #7
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	0018      	movs	r0, r3
 8010c02:	f7fe f963 	bl	800eecc <sensirion_i2c_hal_read>
 8010c06:	0003      	movs	r3, r0
 8010c08:	001a      	movs	r2, r3
 8010c0a:	2108      	movs	r1, #8
 8010c0c:	187b      	adds	r3, r7, r1
 8010c0e:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010c10:	000a      	movs	r2, r1
 8010c12:	18bb      	adds	r3, r7, r2
 8010c14:	2100      	movs	r1, #0
 8010c16:	5e5b      	ldrsh	r3, [r3, r1]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d003      	beq.n	8010c24 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010c1c:	18bb      	adds	r3, r7, r2
 8010c1e:	2200      	movs	r2, #0
 8010c20:	5e9b      	ldrsh	r3, [r3, r2]
 8010c22:	e053      	b.n	8010ccc <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010c24:	230e      	movs	r3, #14
 8010c26:	18fb      	adds	r3, r7, r3
 8010c28:	2200      	movs	r2, #0
 8010c2a:	801a      	strh	r2, [r3, #0]
 8010c2c:	230c      	movs	r3, #12
 8010c2e:	18fb      	adds	r3, r7, r3
 8010c30:	2200      	movs	r2, #0
 8010c32:	801a      	strh	r2, [r3, #0]
 8010c34:	e041      	b.n	8010cba <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c36:	210e      	movs	r1, #14
 8010c38:	187b      	adds	r3, r7, r1
 8010c3a:	881b      	ldrh	r3, [r3, #0]
 8010c3c:	683a      	ldr	r2, [r7, #0]
 8010c3e:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010c40:	187b      	adds	r3, r7, r1
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	3302      	adds	r3, #2
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	001a      	movs	r2, r3
 8010c4e:	2102      	movs	r1, #2
 8010c50:	f7ff fef5 	bl	8010a3e <sensirion_i2c_check_crc>
 8010c54:	0003      	movs	r3, r0
 8010c56:	001a      	movs	r2, r3
 8010c58:	2108      	movs	r1, #8
 8010c5a:	187b      	adds	r3, r7, r1
 8010c5c:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010c5e:	000a      	movs	r2, r1
 8010c60:	18bb      	adds	r3, r7, r2
 8010c62:	2100      	movs	r1, #0
 8010c64:	5e5b      	ldrsh	r3, [r3, r1]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010c6a:	18bb      	adds	r3, r7, r2
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	5e9b      	ldrsh	r3, [r3, r2]
 8010c70:	e02c      	b.n	8010ccc <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010c72:	240e      	movs	r4, #14
 8010c74:	193b      	adds	r3, r7, r4
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	683a      	ldr	r2, [r7, #0]
 8010c7a:	18d2      	adds	r2, r2, r3
 8010c7c:	250c      	movs	r5, #12
 8010c7e:	197b      	adds	r3, r7, r5
 8010c80:	881b      	ldrh	r3, [r3, #0]
 8010c82:	1979      	adds	r1, r7, r5
 8010c84:	1c58      	adds	r0, r3, #1
 8010c86:	8008      	strh	r0, [r1, #0]
 8010c88:	0019      	movs	r1, r3
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	185b      	adds	r3, r3, r1
 8010c8e:	7812      	ldrb	r2, [r2, #0]
 8010c90:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010c92:	193b      	adds	r3, r7, r4
 8010c94:	881b      	ldrh	r3, [r3, #0]
 8010c96:	3301      	adds	r3, #1
 8010c98:	683a      	ldr	r2, [r7, #0]
 8010c9a:	18d2      	adds	r2, r2, r3
 8010c9c:	197b      	adds	r3, r7, r5
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	1979      	adds	r1, r7, r5
 8010ca2:	1c58      	adds	r0, r3, #1
 8010ca4:	8008      	strh	r0, [r1, #0]
 8010ca6:	0019      	movs	r1, r3
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	185b      	adds	r3, r3, r1
 8010cac:	7812      	ldrb	r2, [r2, #0]
 8010cae:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010cb0:	193b      	adds	r3, r7, r4
 8010cb2:	193a      	adds	r2, r7, r4
 8010cb4:	8812      	ldrh	r2, [r2, #0]
 8010cb6:	3203      	adds	r2, #3
 8010cb8:	801a      	strh	r2, [r3, #0]
 8010cba:	230e      	movs	r3, #14
 8010cbc:	18fa      	adds	r2, r7, r3
 8010cbe:	230a      	movs	r3, #10
 8010cc0:	18fb      	adds	r3, r7, r3
 8010cc2:	8812      	ldrh	r2, [r2, #0]
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d3b5      	bcc.n	8010c36 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	0018      	movs	r0, r3
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	b004      	add	sp, #16
 8010cd2:	bdb0      	pop	{r4, r5, r7, pc}

08010cd4 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010cd4:	b590      	push	{r4, r7, lr}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6039      	str	r1, [r7, #0]
 8010cdc:	0011      	movs	r1, r2
 8010cde:	1dfb      	adds	r3, r7, #7
 8010ce0:	1c02      	adds	r2, r0, #0
 8010ce2:	701a      	strb	r2, [r3, #0]
 8010ce4:	1dbb      	adds	r3, r7, #6
 8010ce6:	1c0a      	adds	r2, r1, #0
 8010ce8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010cea:	4b08      	ldr	r3, [pc, #32]	@ (8010d0c <ReadRegister+0x38>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d008      	beq.n	8010d04 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010cf2:	4b06      	ldr	r3, [pc, #24]	@ (8010d0c <ReadRegister+0x38>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	1dba      	adds	r2, r7, #6
 8010cf8:	7814      	ldrb	r4, [r2, #0]
 8010cfa:	6839      	ldr	r1, [r7, #0]
 8010cfc:	1dfa      	adds	r2, r7, #7
 8010cfe:	7810      	ldrb	r0, [r2, #0]
 8010d00:	0022      	movs	r2, r4
 8010d02:	4798      	blx	r3
  }
}
 8010d04:	46c0      	nop			@ (mov r8, r8)
 8010d06:	46bd      	mov	sp, r7
 8010d08:	b003      	add	sp, #12
 8010d0a:	bd90      	pop	{r4, r7, pc}
 8010d0c:	200011e4 	.word	0x200011e4

08010d10 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6039      	str	r1, [r7, #0]
 8010d18:	0011      	movs	r1, r2
 8010d1a:	1dfb      	adds	r3, r7, #7
 8010d1c:	1c02      	adds	r2, r0, #0
 8010d1e:	701a      	strb	r2, [r3, #0]
 8010d20:	1dbb      	adds	r3, r7, #6
 8010d22:	1c0a      	adds	r2, r1, #0
 8010d24:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010d26:	4b08      	ldr	r3, [pc, #32]	@ (8010d48 <WriteRegister+0x38>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d008      	beq.n	8010d40 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010d2e:	4b06      	ldr	r3, [pc, #24]	@ (8010d48 <WriteRegister+0x38>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	1dba      	adds	r2, r7, #6
 8010d34:	7814      	ldrb	r4, [r2, #0]
 8010d36:	6839      	ldr	r1, [r7, #0]
 8010d38:	1dfa      	adds	r2, r7, #7
 8010d3a:	7810      	ldrb	r0, [r2, #0]
 8010d3c:	0022      	movs	r2, r4
 8010d3e:	4798      	blx	r3
  }
}
 8010d40:	46c0      	nop			@ (mov r8, r8)
 8010d42:	46bd      	mov	sp, r7
 8010d44:	b003      	add	sp, #12
 8010d46:	bd90      	pop	{r4, r7, pc}
 8010d48:	200011e8 	.word	0x200011e8

08010d4c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010d54:	f003 fdb4 	bl	80148c0 <HAL_GetTick>
 8010d58:	0002      	movs	r2, r0
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	18d2      	adds	r2, r2, r3
 8010d5e:	4b03      	ldr	r3, [pc, #12]	@ (8010d6c <setSGP40TimeStamp+0x20>)
 8010d60:	601a      	str	r2, [r3, #0]
}
 8010d62:	46c0      	nop			@ (mov r8, r8)
 8010d64:	46bd      	mov	sp, r7
 8010d66:	b002      	add	sp, #8
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	46c0      	nop			@ (mov r8, r8)
 8010d6c:	200011f8 	.word	0x200011f8

08010d70 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010d74:	4b02      	ldr	r3, [pc, #8]	@ (8010d80 <ResetSGP40samplecounter+0x10>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	701a      	strb	r2, [r3, #0]
}
 8010d7a:	46c0      	nop			@ (mov r8, r8)
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	200011f6 	.word	0x200011f6

08010d84 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010d8e:	4b07      	ldr	r3, [pc, #28]	@ (8010dac <SGP_Init+0x28>)
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010d94:	4b06      	ldr	r3, [pc, #24]	@ (8010db0 <SGP_Init+0x2c>)
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010d9a:	4b06      	ldr	r3, [pc, #24]	@ (8010db4 <SGP_Init+0x30>)
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	0018      	movs	r0, r3
 8010da0:	f7fe ff72 	bl	800fc88 <GasIndexAlgorithm_init>
}
 8010da4:	46c0      	nop			@ (mov r8, r8)
 8010da6:	46bd      	mov	sp, r7
 8010da8:	b002      	add	sp, #8
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	200011e4 	.word	0x200011e4
 8010db0:	200011e8 	.word	0x200011e8
 8010db4:	20001200 	.word	0x20001200

08010db8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010db8:	b580      	push	{r7, lr}
 8010dba:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010dbc:	4b07      	ldr	r3, [pc, #28]	@ (8010ddc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d004      	beq.n	8010dce <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010dc4:	4b06      	ldr	r3, [pc, #24]	@ (8010de0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010dc6:	22fe      	movs	r2, #254	@ 0xfe
 8010dc8:	0592      	lsls	r2, r2, #22
 8010dca:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010dcc:	e002      	b.n	8010dd4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010dce:	4b04      	ldr	r3, [pc, #16]	@ (8010de0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010dd0:	4a04      	ldr	r2, [pc, #16]	@ (8010de4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010dd2:	605a      	str	r2, [r3, #4]
}
 8010dd4:	46c0      	nop			@ (mov r8, r8)
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	46c0      	nop			@ (mov r8, r8)
 8010ddc:	2000214d 	.word	0x2000214d
 8010de0:	20001200 	.word	0x20001200
 8010de4:	44610000 	.word	0x44610000

08010de8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010de8:	b580      	push	{r7, lr}
 8010dea:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010dec:	4b13      	ldr	r3, [pc, #76]	@ (8010e3c <SGP_StartMeasurement+0x54>)
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00d      	beq.n	8010e10 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010df4:	4b12      	ldr	r3, [pc, #72]	@ (8010e40 <SGP_StartMeasurement+0x58>)
 8010df6:	2208      	movs	r2, #8
 8010df8:	0019      	movs	r1, r3
 8010dfa:	2059      	movs	r0, #89	@ 0x59
 8010dfc:	f7ff ff88 	bl	8010d10 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010e00:	f003 fd5e 	bl	80148c0 <HAL_GetTick>
 8010e04:	0003      	movs	r3, r0
 8010e06:	331e      	adds	r3, #30
 8010e08:	001a      	movs	r2, r3
 8010e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8010e44 <SGP_StartMeasurement+0x5c>)
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	e00c      	b.n	8010e2a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010e10:	4b0d      	ldr	r3, [pc, #52]	@ (8010e48 <SGP_StartMeasurement+0x60>)
 8010e12:	2208      	movs	r2, #8
 8010e14:	0019      	movs	r1, r3
 8010e16:	2059      	movs	r0, #89	@ 0x59
 8010e18:	f7ff ff7a 	bl	8010d10 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010e1c:	f003 fd50 	bl	80148c0 <HAL_GetTick>
 8010e20:	0003      	movs	r3, r0
 8010e22:	33aa      	adds	r3, #170	@ 0xaa
 8010e24:	001a      	movs	r2, r3
 8010e26:	4b09      	ldr	r3, [pc, #36]	@ (8010e4c <SGP_StartMeasurement+0x64>)
 8010e28:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010e2a:	4b09      	ldr	r3, [pc, #36]	@ (8010e50 <SGP_StartMeasurement+0x68>)
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010e30:	4b08      	ldr	r3, [pc, #32]	@ (8010e54 <SGP_StartMeasurement+0x6c>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	701a      	strb	r2, [r3, #0]
}
 8010e36:	46c0      	nop			@ (mov r8, r8)
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	200012a8 	.word	0x200012a8
 8010e40:	200000bc 	.word	0x200000bc
 8010e44:	200000d0 	.word	0x200000d0
 8010e48:	200000b4 	.word	0x200000b4
 8010e4c:	200000c8 	.word	0x200000c8
 8010e50:	200011fc 	.word	0x200011fc
 8010e54:	200011fd 	.word	0x200011fd

08010e58 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010e5c:	4b04      	ldr	r3, [pc, #16]	@ (8010e70 <SGP_HeatedUp+0x18>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	0018      	movs	r0, r3
 8010e62:	f002 ff4b 	bl	8013cfc <TimestampIsReached>
 8010e66:	0003      	movs	r3, r0
}
 8010e68:	0018      	movs	r0, r3
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	46c0      	nop			@ (mov r8, r8)
 8010e70:	200000c8 	.word	0x200000c8

08010e74 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010e74:	b580      	push	{r7, lr}
 8010e76:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010e78:	4b04      	ldr	r3, [pc, #16]	@ (8010e8c <SGP_MeasurementReady+0x18>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	0018      	movs	r0, r3
 8010e7e:	f002 ff3d 	bl	8013cfc <TimestampIsReached>
 8010e82:	0003      	movs	r3, r0
}
 8010e84:	0018      	movs	r0, r3
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	46c0      	nop			@ (mov r8, r8)
 8010e8c:	200000d0 	.word	0x200000d0

08010e90 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010e90:	b580      	push	{r7, lr}
 8010e92:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010e94:	4b04      	ldr	r3, [pc, #16]	@ (8010ea8 <SGP_MeasurementDone+0x18>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	0018      	movs	r0, r3
 8010e9a:	f002 ff2f 	bl	8013cfc <TimestampIsReached>
 8010e9e:	0003      	movs	r3, r0
}
 8010ea0:	0018      	movs	r0, r3
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	46c0      	nop			@ (mov r8, r8)
 8010ea8:	200000cc 	.word	0x200000cc

08010eac <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010eac:	b580      	push	{r7, lr}
 8010eae:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010eb0:	4b04      	ldr	r3, [pc, #16]	@ (8010ec4 <SGP_TurnHeaterOff+0x18>)
 8010eb2:	2202      	movs	r2, #2
 8010eb4:	0019      	movs	r1, r3
 8010eb6:	2059      	movs	r0, #89	@ 0x59
 8010eb8:	f7ff ff2a 	bl	8010d10 <WriteRegister>
}
 8010ebc:	46c0      	nop			@ (mov r8, r8)
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	46c0      	nop			@ (mov r8, r8)
 8010ec4:	200000ac 	.word	0x200000ac

08010ec8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010ec8:	b590      	push	{r4, r7, lr}
 8010eca:	b087      	sub	sp, #28
 8010ecc:	af02      	add	r7, sp, #8
 8010ece:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010ed0:	f7ff ffc2 	bl	8010e58 <SGP_HeatedUp>
 8010ed4:	1e03      	subs	r3, r0, #0
 8010ed6:	d032      	beq.n	8010f3e <SGP_GetMeasurementValues+0x76>
 8010ed8:	4b80      	ldr	r3, [pc, #512]	@ (80110dc <SGP_GetMeasurementValues+0x214>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2201      	movs	r2, #1
 8010ede:	4053      	eors	r3, r2
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d02b      	beq.n	8010f3e <SGP_GetMeasurementValues+0x76>
 8010ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80110e0 <SGP_GetMeasurementValues+0x218>)
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	2201      	movs	r2, #1
 8010eec:	4053      	eors	r3, r2
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d024      	beq.n	8010f3e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010ef4:	4b79      	ldr	r3, [pc, #484]	@ (80110dc <SGP_GetMeasurementValues+0x214>)
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010efa:	4b7a      	ldr	r3, [pc, #488]	@ (80110e4 <SGP_GetMeasurementValues+0x21c>)
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d00d      	beq.n	8010f1e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f02:	4b79      	ldr	r3, [pc, #484]	@ (80110e8 <SGP_GetMeasurementValues+0x220>)
 8010f04:	2208      	movs	r2, #8
 8010f06:	0019      	movs	r1, r3
 8010f08:	2059      	movs	r0, #89	@ 0x59
 8010f0a:	f7ff ff01 	bl	8010d10 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f0e:	f003 fcd7 	bl	80148c0 <HAL_GetTick>
 8010f12:	0003      	movs	r3, r0
 8010f14:	331e      	adds	r3, #30
 8010f16:	001a      	movs	r2, r3
 8010f18:	4b74      	ldr	r3, [pc, #464]	@ (80110ec <SGP_GetMeasurementValues+0x224>)
 8010f1a:	601a      	str	r2, [r3, #0]
 8010f1c:	e00c      	b.n	8010f38 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f1e:	4b74      	ldr	r3, [pc, #464]	@ (80110f0 <SGP_GetMeasurementValues+0x228>)
 8010f20:	2208      	movs	r2, #8
 8010f22:	0019      	movs	r1, r3
 8010f24:	2059      	movs	r0, #89	@ 0x59
 8010f26:	f7ff fef3 	bl	8010d10 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f2a:	f003 fcc9 	bl	80148c0 <HAL_GetTick>
 8010f2e:	0003      	movs	r3, r0
 8010f30:	331e      	adds	r3, #30
 8010f32:	001a      	movs	r2, r3
 8010f34:	4b6d      	ldr	r3, [pc, #436]	@ (80110ec <SGP_GetMeasurementValues+0x224>)
 8010f36:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010f38:	4b69      	ldr	r3, [pc, #420]	@ (80110e0 <SGP_GetMeasurementValues+0x218>)
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010f3e:	4b67      	ldr	r3, [pc, #412]	@ (80110dc <SGP_GetMeasurementValues+0x214>)
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d100      	bne.n	8010f48 <SGP_GetMeasurementValues+0x80>
 8010f46:	e0ac      	b.n	80110a2 <SGP_GetMeasurementValues+0x1da>
 8010f48:	f7ff ff94 	bl	8010e74 <SGP_MeasurementReady>
 8010f4c:	1e03      	subs	r3, r0, #0
 8010f4e:	d100      	bne.n	8010f52 <SGP_GetMeasurementValues+0x8a>
 8010f50:	e0a7      	b.n	80110a2 <SGP_GetMeasurementValues+0x1da>
 8010f52:	4b68      	ldr	r3, [pc, #416]	@ (80110f4 <SGP_GetMeasurementValues+0x22c>)
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	2201      	movs	r2, #1
 8010f58:	4053      	eors	r3, r2
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d100      	bne.n	8010f62 <SGP_GetMeasurementValues+0x9a>
 8010f60:	e09f      	b.n	80110a2 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010f62:	4b64      	ldr	r3, [pc, #400]	@ (80110f4 <SGP_GetMeasurementValues+0x22c>)
 8010f64:	2201      	movs	r2, #1
 8010f66:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010f68:	4b63      	ldr	r3, [pc, #396]	@ (80110f8 <SGP_GetMeasurementValues+0x230>)
 8010f6a:	2203      	movs	r2, #3
 8010f6c:	0019      	movs	r1, r3
 8010f6e:	2059      	movs	r0, #89	@ 0x59
 8010f70:	f7ff feb0 	bl	8010cd4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010f74:	4b60      	ldr	r3, [pc, #384]	@ (80110f8 <SGP_GetMeasurementValues+0x230>)
 8010f76:	2203      	movs	r2, #3
 8010f78:	2103      	movs	r1, #3
 8010f7a:	0018      	movs	r0, r3
 8010f7c:	f000 f91a 	bl	80111b4 <CheckCRC>
 8010f80:	0003      	movs	r3, r0
 8010f82:	001a      	movs	r2, r3
 8010f84:	2301      	movs	r3, #1
 8010f86:	4053      	eors	r3, r2
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d02a      	beq.n	8010fe4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80110fc <SGP_GetMeasurementValues+0x234>)
 8010f90:	4b5b      	ldr	r3, [pc, #364]	@ (8011100 <SGP_GetMeasurementValues+0x238>)
 8010f92:	0019      	movs	r1, r3
 8010f94:	2001      	movs	r0, #1
 8010f96:	f002 ff07 	bl	8013da8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8011104 <SGP_GetMeasurementValues+0x23c>)
 8010f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8011108 <SGP_GetMeasurementValues+0x240>)
 8010f9e:	0019      	movs	r1, r3
 8010fa0:	2002      	movs	r0, #2
 8010fa2:	f002 ff01 	bl	8013da8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010fa6:	230f      	movs	r3, #15
 8010fa8:	18fb      	adds	r3, r7, r3
 8010faa:	2200      	movs	r2, #0
 8010fac:	701a      	strb	r2, [r3, #0]
 8010fae:	e012      	b.n	8010fd6 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010fb0:	240f      	movs	r4, #15
 8010fb2:	193b      	adds	r3, r7, r4
 8010fb4:	7818      	ldrb	r0, [r3, #0]
 8010fb6:	193b      	adds	r3, r7, r4
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	4a4f      	ldr	r2, [pc, #316]	@ (80110f8 <SGP_GetMeasurementValues+0x230>)
 8010fbc:	5cd3      	ldrb	r3, [r2, r3]
 8010fbe:	4a53      	ldr	r2, [pc, #332]	@ (801110c <SGP_GetMeasurementValues+0x244>)
 8010fc0:	4953      	ldr	r1, [pc, #332]	@ (8011110 <SGP_GetMeasurementValues+0x248>)
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	0003      	movs	r3, r0
 8010fc6:	2003      	movs	r0, #3
 8010fc8:	f002 feee 	bl	8013da8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010fcc:	193b      	adds	r3, r7, r4
 8010fce:	781a      	ldrb	r2, [r3, #0]
 8010fd0:	193b      	adds	r3, r7, r4
 8010fd2:	3201      	adds	r2, #1
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	230f      	movs	r3, #15
 8010fd8:	18fb      	adds	r3, r7, r3
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d9e7      	bls.n	8010fb0 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	e076      	b.n	80110d2 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8010fe4:	f003 fc6c 	bl	80148c0 <HAL_GetTick>
 8010fe8:	0003      	movs	r3, r0
 8010fea:	22fa      	movs	r2, #250	@ 0xfa
 8010fec:	0092      	lsls	r2, r2, #2
 8010fee:	189a      	adds	r2, r3, r2
 8010ff0:	4b48      	ldr	r3, [pc, #288]	@ (8011114 <SGP_GetMeasurementValues+0x24c>)
 8010ff2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8010ff4:	f7ff ff5a 	bl	8010eac <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8010ff8:	4b47      	ldr	r3, [pc, #284]	@ (8011118 <SGP_GetMeasurementValues+0x250>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	b2da      	uxtb	r2, r3
 8011000:	4b45      	ldr	r3, [pc, #276]	@ (8011118 <SGP_GetMeasurementValues+0x250>)
 8011002:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8011004:	4b44      	ldr	r3, [pc, #272]	@ (8011118 <SGP_GetMeasurementValues+0x250>)
 8011006:	781a      	ldrb	r2, [r3, #0]
 8011008:	4b44      	ldr	r3, [pc, #272]	@ (801111c <SGP_GetMeasurementValues+0x254>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	429a      	cmp	r2, r3
 801100e:	d348      	bcc.n	80110a2 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8011010:	4b39      	ldr	r3, [pc, #228]	@ (80110f8 <SGP_GetMeasurementValues+0x230>)
 8011012:	785b      	ldrb	r3, [r3, #1]
 8011014:	b21b      	sxth	r3, r3
 8011016:	021b      	lsls	r3, r3, #8
 8011018:	b21a      	sxth	r2, r3
 801101a:	4b37      	ldr	r3, [pc, #220]	@ (80110f8 <SGP_GetMeasurementValues+0x230>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	b21b      	sxth	r3, r3
 8011020:	4313      	orrs	r3, r2
 8011022:	b21a      	sxth	r2, r3
 8011024:	240c      	movs	r4, #12
 8011026:	193b      	adds	r3, r7, r4
 8011028:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 801102e:	193b      	adds	r3, r7, r4
 8011030:	8819      	ldrh	r1, [r3, #0]
 8011032:	2308      	movs	r3, #8
 8011034:	18fa      	adds	r2, r7, r3
 8011036:	4b3a      	ldr	r3, [pc, #232]	@ (8011120 <SGP_GetMeasurementValues+0x258>)
 8011038:	0018      	movs	r0, r3
 801103a:	f7fe fe87 	bl	800fd4c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8011044:	4b37      	ldr	r3, [pc, #220]	@ (8011124 <SGP_GetMeasurementValues+0x25c>)
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	3301      	adds	r3, #1
 801104a:	b2da      	uxtb	r2, r3
 801104c:	4b35      	ldr	r3, [pc, #212]	@ (8011124 <SGP_GetMeasurementValues+0x25c>)
 801104e:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011050:	4b34      	ldr	r3, [pc, #208]	@ (8011124 <SGP_GetMeasurementValues+0x25c>)
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	2b01      	cmp	r3, #1
 8011056:	d10d      	bne.n	8011074 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8011058:	193b      	adds	r3, r7, r4
 801105a:	881b      	ldrh	r3, [r3, #0]
 801105c:	4a32      	ldr	r2, [pc, #200]	@ (8011128 <SGP_GetMeasurementValues+0x260>)
 801105e:	492c      	ldr	r1, [pc, #176]	@ (8011110 <SGP_GetMeasurementValues+0x248>)
 8011060:	2003      	movs	r0, #3
 8011062:	f002 fea1 	bl	8013da8 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	4a30      	ldr	r2, [pc, #192]	@ (801112c <SGP_GetMeasurementValues+0x264>)
 801106a:	4929      	ldr	r1, [pc, #164]	@ (8011110 <SGP_GetMeasurementValues+0x248>)
 801106c:	2003      	movs	r0, #3
 801106e:	f002 fe9b 	bl	8013da8 <CreateLine>
 8011072:	e006      	b.n	8011082 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8011074:	4b2b      	ldr	r3, [pc, #172]	@ (8011124 <SGP_GetMeasurementValues+0x25c>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b0b      	cmp	r3, #11
 801107a:	d102      	bne.n	8011082 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 801107c:	4b29      	ldr	r3, [pc, #164]	@ (8011124 <SGP_GetMeasurementValues+0x25c>)
 801107e:	2200      	movs	r2, #0
 8011080:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	b29b      	uxth	r3, r3
 8011086:	0018      	movs	r0, r3
 8011088:	f001 fdf2 	bl	8012c70 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 801108c:	4b22      	ldr	r3, [pc, #136]	@ (8011118 <SGP_GetMeasurementValues+0x250>)
 801108e:	2200      	movs	r2, #0
 8011090:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 8011092:	4b14      	ldr	r3, [pc, #80]	@ (80110e4 <SGP_GetMeasurementValues+0x21c>)
 8011094:	2200      	movs	r2, #0
 8011096:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8011098:	4b11      	ldr	r3, [pc, #68]	@ (80110e0 <SGP_GetMeasurementValues+0x218>)
 801109a:	2200      	movs	r2, #0
 801109c:	701a      	strb	r2, [r3, #0]
      return true;
 801109e:	2301      	movs	r3, #1
 80110a0:	e017      	b.n	80110d2 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80110a2:	f7ff fef5 	bl	8010e90 <SGP_MeasurementDone>
 80110a6:	1e03      	subs	r3, r0, #0
 80110a8:	d012      	beq.n	80110d0 <SGP_GetMeasurementValues+0x208>
 80110aa:	4b0c      	ldr	r3, [pc, #48]	@ (80110dc <SGP_GetMeasurementValues+0x214>)
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d00e      	beq.n	80110d0 <SGP_GetMeasurementValues+0x208>
 80110b2:	4b10      	ldr	r3, [pc, #64]	@ (80110f4 <SGP_GetMeasurementValues+0x22c>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00a      	beq.n	80110d0 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80110ba:	4a1d      	ldr	r2, [pc, #116]	@ (8011130 <SGP_GetMeasurementValues+0x268>)
 80110bc:	4b14      	ldr	r3, [pc, #80]	@ (8011110 <SGP_GetMeasurementValues+0x248>)
 80110be:	0019      	movs	r1, r3
 80110c0:	2003      	movs	r0, #3
 80110c2:	f002 fe71 	bl	8013da8 <CreateLine>
    SGP_StartMeasurement();
 80110c6:	f7ff fe8f 	bl	8010de8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80110ca:	4b05      	ldr	r3, [pc, #20]	@ (80110e0 <SGP_GetMeasurementValues+0x218>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	0018      	movs	r0, r3
 80110d4:	46bd      	mov	sp, r7
 80110d6:	b005      	add	sp, #20
 80110d8:	bd90      	pop	{r4, r7, pc}
 80110da:	46c0      	nop			@ (mov r8, r8)
 80110dc:	200011fc 	.word	0x200011fc
 80110e0:	200012a9 	.word	0x200012a9
 80110e4:	200012a8 	.word	0x200012a8
 80110e8:	200000bc 	.word	0x200000bc
 80110ec:	200000d0 	.word	0x200000d0
 80110f0:	200000b4 	.word	0x200000b4
 80110f4:	200011fd 	.word	0x200011fd
 80110f8:	200011ec 	.word	0x200011ec
 80110fc:	0802d7e8 	.word	0x0802d7e8
 8011100:	0802d810 	.word	0x0802d810
 8011104:	0802d814 	.word	0x0802d814
 8011108:	0802d834 	.word	0x0802d834
 801110c:	0802d838 	.word	0x0802d838
 8011110:	0802d858 	.word	0x0802d858
 8011114:	200000cc 	.word	0x200000cc
 8011118:	200011f5 	.word	0x200011f5
 801111c:	200000c6 	.word	0x200000c6
 8011120:	20001200 	.word	0x20001200
 8011124:	200011f6 	.word	0x200011f6
 8011128:	0802d85c 	.word	0x0802d85c
 801112c:	0802d878 	.word	0x0802d878
 8011130:	0802d894 	.word	0x0802d894

08011134 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801113a:	4b1a      	ldr	r3, [pc, #104]	@ (80111a4 <SGP_DeviceConnected+0x70>)
 801113c:	2202      	movs	r2, #2
 801113e:	0019      	movs	r1, r3
 8011140:	2059      	movs	r0, #89	@ 0x59
 8011142:	f7ff fde5 	bl	8010d10 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8011146:	2001      	movs	r0, #1
 8011148:	f003 fbc4 	bl	80148d4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 801114c:	4b16      	ldr	r3, [pc, #88]	@ (80111a8 <SGP_DeviceConnected+0x74>)
 801114e:	2209      	movs	r2, #9
 8011150:	0019      	movs	r1, r3
 8011152:	2059      	movs	r0, #89	@ 0x59
 8011154:	f7ff fdbe 	bl	8010cd4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011158:	1dfb      	adds	r3, r7, #7
 801115a:	2200      	movs	r2, #0
 801115c:	701a      	strb	r2, [r3, #0]
 801115e:	e011      	b.n	8011184 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8011160:	1dfb      	adds	r3, r7, #7
 8011162:	7818      	ldrb	r0, [r3, #0]
 8011164:	1dfb      	adds	r3, r7, #7
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	4a0f      	ldr	r2, [pc, #60]	@ (80111a8 <SGP_DeviceConnected+0x74>)
 801116a:	5cd3      	ldrb	r3, [r2, r3]
 801116c:	4a0f      	ldr	r2, [pc, #60]	@ (80111ac <SGP_DeviceConnected+0x78>)
 801116e:	4910      	ldr	r1, [pc, #64]	@ (80111b0 <SGP_DeviceConnected+0x7c>)
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	0003      	movs	r3, r0
 8011174:	2002      	movs	r0, #2
 8011176:	f002 fe17 	bl	8013da8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801117a:	1dfb      	adds	r3, r7, #7
 801117c:	781a      	ldrb	r2, [r3, #0]
 801117e:	1dfb      	adds	r3, r7, #7
 8011180:	3201      	adds	r2, #1
 8011182:	701a      	strb	r2, [r3, #0]
 8011184:	1dfb      	adds	r3, r7, #7
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b08      	cmp	r3, #8
 801118a:	d9e9      	bls.n	8011160 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 801118c:	4b06      	ldr	r3, [pc, #24]	@ (80111a8 <SGP_DeviceConnected+0x74>)
 801118e:	2203      	movs	r2, #3
 8011190:	2109      	movs	r1, #9
 8011192:	0018      	movs	r0, r3
 8011194:	f000 f80e 	bl	80111b4 <CheckCRC>
 8011198:	0003      	movs	r3, r0
}
 801119a:	0018      	movs	r0, r3
 801119c:	46bd      	mov	sp, r7
 801119e:	b002      	add	sp, #8
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	46c0      	nop			@ (mov r8, r8)
 80111a4:	200000b0 	.word	0x200000b0
 80111a8:	200011ec 	.word	0x200011ec
 80111ac:	0802d8b4 	.word	0x0802d8b4
 80111b0:	0802d834 	.word	0x0802d834

080111b4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80111b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111b6:	b08f      	sub	sp, #60	@ 0x3c
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80111bc:	0008      	movs	r0, r1
 80111be:	0011      	movs	r1, r2
 80111c0:	2323      	movs	r3, #35	@ 0x23
 80111c2:	18fb      	adds	r3, r7, r3
 80111c4:	1c02      	adds	r2, r0, #0
 80111c6:	701a      	strb	r2, [r3, #0]
 80111c8:	2322      	movs	r3, #34	@ 0x22
 80111ca:	18fb      	adds	r3, r7, r3
 80111cc:	1c0a      	adds	r2, r1, #0
 80111ce:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80111d0:	2317      	movs	r3, #23
 80111d2:	2220      	movs	r2, #32
 80111d4:	189b      	adds	r3, r3, r2
 80111d6:	19db      	adds	r3, r3, r7
 80111d8:	2200      	movs	r2, #0
 80111da:	701a      	strb	r2, [r3, #0]
 80111dc:	e09f      	b.n	801131e <CheckCRC+0x16a>
 80111de:	466b      	mov	r3, sp
 80111e0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80111e2:	2322      	movs	r3, #34	@ 0x22
 80111e4:	18fb      	adds	r3, r7, r3
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	001a      	movs	r2, r3
 80111ea:	3a01      	subs	r2, #1
 80111ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80111ee:	60bb      	str	r3, [r7, #8]
 80111f0:	2200      	movs	r2, #0
 80111f2:	60fa      	str	r2, [r7, #12]
 80111f4:	68b8      	ldr	r0, [r7, #8]
 80111f6:	68f9      	ldr	r1, [r7, #12]
 80111f8:	0002      	movs	r2, r0
 80111fa:	0f52      	lsrs	r2, r2, #29
 80111fc:	000c      	movs	r4, r1
 80111fe:	00e4      	lsls	r4, r4, #3
 8011200:	61fc      	str	r4, [r7, #28]
 8011202:	69fc      	ldr	r4, [r7, #28]
 8011204:	4314      	orrs	r4, r2
 8011206:	61fc      	str	r4, [r7, #28]
 8011208:	0002      	movs	r2, r0
 801120a:	00d2      	lsls	r2, r2, #3
 801120c:	61ba      	str	r2, [r7, #24]
 801120e:	603b      	str	r3, [r7, #0]
 8011210:	2200      	movs	r2, #0
 8011212:	607a      	str	r2, [r7, #4]
 8011214:	6838      	ldr	r0, [r7, #0]
 8011216:	6879      	ldr	r1, [r7, #4]
 8011218:	0002      	movs	r2, r0
 801121a:	0f52      	lsrs	r2, r2, #29
 801121c:	000c      	movs	r4, r1
 801121e:	00e4      	lsls	r4, r4, #3
 8011220:	617c      	str	r4, [r7, #20]
 8011222:	697c      	ldr	r4, [r7, #20]
 8011224:	4314      	orrs	r4, r2
 8011226:	617c      	str	r4, [r7, #20]
 8011228:	0002      	movs	r2, r0
 801122a:	00d2      	lsls	r2, r2, #3
 801122c:	613a      	str	r2, [r7, #16]
 801122e:	3307      	adds	r3, #7
 8011230:	08db      	lsrs	r3, r3, #3
 8011232:	00db      	lsls	r3, r3, #3
 8011234:	466a      	mov	r2, sp
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	469d      	mov	sp, r3
 801123a:	466b      	mov	r3, sp
 801123c:	3300      	adds	r3, #0
 801123e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011240:	2316      	movs	r3, #22
 8011242:	2220      	movs	r2, #32
 8011244:	189b      	adds	r3, r3, r2
 8011246:	19db      	adds	r3, r3, r7
 8011248:	2200      	movs	r2, #0
 801124a:	701a      	strb	r2, [r3, #0]
 801124c:	e01e      	b.n	801128c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801124e:	2317      	movs	r3, #23
 8011250:	2220      	movs	r2, #32
 8011252:	189b      	adds	r3, r3, r2
 8011254:	19db      	adds	r3, r3, r7
 8011256:	781a      	ldrb	r2, [r3, #0]
 8011258:	2116      	movs	r1, #22
 801125a:	2320      	movs	r3, #32
 801125c:	18cb      	adds	r3, r1, r3
 801125e:	19db      	adds	r3, r3, r7
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	18d3      	adds	r3, r2, r3
 8011264:	001a      	movs	r2, r3
 8011266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011268:	189a      	adds	r2, r3, r2
 801126a:	0008      	movs	r0, r1
 801126c:	2320      	movs	r3, #32
 801126e:	18cb      	adds	r3, r1, r3
 8011270:	19db      	adds	r3, r3, r7
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	7811      	ldrb	r1, [r2, #0]
 8011276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011278:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801127a:	2320      	movs	r3, #32
 801127c:	18c3      	adds	r3, r0, r3
 801127e:	19db      	adds	r3, r3, r7
 8011280:	781a      	ldrb	r2, [r3, #0]
 8011282:	2320      	movs	r3, #32
 8011284:	18c3      	adds	r3, r0, r3
 8011286:	19db      	adds	r3, r3, r7
 8011288:	3201      	adds	r2, #1
 801128a:	701a      	strb	r2, [r3, #0]
 801128c:	2316      	movs	r3, #22
 801128e:	2220      	movs	r2, #32
 8011290:	189b      	adds	r3, r3, r2
 8011292:	19da      	adds	r2, r3, r7
 8011294:	2322      	movs	r3, #34	@ 0x22
 8011296:	18fb      	adds	r3, r7, r3
 8011298:	7812      	ldrb	r2, [r2, #0]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	429a      	cmp	r2, r3
 801129e:	d3d6      	bcc.n	801124e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80112a0:	2417      	movs	r4, #23
 80112a2:	2320      	movs	r3, #32
 80112a4:	18e3      	adds	r3, r4, r3
 80112a6:	19db      	adds	r3, r3, r7
 80112a8:	781a      	ldrb	r2, [r3, #0]
 80112aa:	2322      	movs	r3, #34	@ 0x22
 80112ac:	18fb      	adds	r3, r7, r3
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	18d3      	adds	r3, r2, r3
 80112b2:	3b01      	subs	r3, #1
 80112b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112b6:	18d2      	adds	r2, r2, r3
 80112b8:	250b      	movs	r5, #11
 80112ba:	2320      	movs	r3, #32
 80112bc:	18eb      	adds	r3, r5, r3
 80112be:	19db      	adds	r3, r3, r7
 80112c0:	7812      	ldrb	r2, [r2, #0]
 80112c2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80112c4:	2322      	movs	r3, #34	@ 0x22
 80112c6:	18fb      	adds	r3, r7, r3
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	3b01      	subs	r3, #1
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d0:	0011      	movs	r1, r2
 80112d2:	0018      	movs	r0, r3
 80112d4:	f000 f838 	bl	8011348 <CalculateCRC>
 80112d8:	0003      	movs	r3, r0
 80112da:	001a      	movs	r2, r3
 80112dc:	2320      	movs	r3, #32
 80112de:	18eb      	adds	r3, r5, r3
 80112e0:	19db      	adds	r3, r3, r7
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d00c      	beq.n	8011302 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80112e8:	2320      	movs	r3, #32
 80112ea:	18e3      	adds	r3, r4, r3
 80112ec:	19db      	adds	r3, r3, r7
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	3301      	adds	r3, #1
 80112f2:	4a13      	ldr	r2, [pc, #76]	@ (8011340 <CheckCRC+0x18c>)
 80112f4:	4913      	ldr	r1, [pc, #76]	@ (8011344 <CheckCRC+0x190>)
 80112f6:	2001      	movs	r0, #1
 80112f8:	f002 fd56 	bl	8013da8 <CreateLine>
      return false;
 80112fc:	2300      	movs	r3, #0
 80112fe:	46b5      	mov	sp, r6
 8011300:	e019      	b.n	8011336 <CheckCRC+0x182>
 8011302:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8011304:	2217      	movs	r2, #23
 8011306:	2320      	movs	r3, #32
 8011308:	18d3      	adds	r3, r2, r3
 801130a:	19db      	adds	r3, r3, r7
 801130c:	2120      	movs	r1, #32
 801130e:	1852      	adds	r2, r2, r1
 8011310:	19d1      	adds	r1, r2, r7
 8011312:	2222      	movs	r2, #34	@ 0x22
 8011314:	18ba      	adds	r2, r7, r2
 8011316:	7809      	ldrb	r1, [r1, #0]
 8011318:	7812      	ldrb	r2, [r2, #0]
 801131a:	188a      	adds	r2, r1, r2
 801131c:	701a      	strb	r2, [r3, #0]
 801131e:	2317      	movs	r3, #23
 8011320:	2220      	movs	r2, #32
 8011322:	189b      	adds	r3, r3, r2
 8011324:	19da      	adds	r2, r3, r7
 8011326:	2323      	movs	r3, #35	@ 0x23
 8011328:	18fb      	adds	r3, r7, r3
 801132a:	7812      	ldrb	r2, [r2, #0]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d200      	bcs.n	8011334 <CheckCRC+0x180>
 8011332:	e754      	b.n	80111de <CheckCRC+0x2a>
    }
  }
  return true;
 8011334:	2301      	movs	r3, #1
}
 8011336:	0018      	movs	r0, r3
 8011338:	46bd      	mov	sp, r7
 801133a:	b00f      	add	sp, #60	@ 0x3c
 801133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801133e:	46c0      	nop			@ (mov r8, r8)
 8011340:	0802d8d4 	.word	0x0802d8d4
 8011344:	0802d810 	.word	0x0802d810

08011348 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	000a      	movs	r2, r1
 8011352:	1cfb      	adds	r3, r7, #3
 8011354:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8011356:	230f      	movs	r3, #15
 8011358:	18fb      	adds	r3, r7, r3
 801135a:	22ff      	movs	r2, #255	@ 0xff
 801135c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801135e:	230e      	movs	r3, #14
 8011360:	18fb      	adds	r3, r7, r3
 8011362:	2200      	movs	r2, #0
 8011364:	701a      	strb	r2, [r3, #0]
 8011366:	e038      	b.n	80113da <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011368:	230e      	movs	r3, #14
 801136a:	18fb      	adds	r3, r7, r3
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	18d3      	adds	r3, r2, r3
 8011372:	7819      	ldrb	r1, [r3, #0]
 8011374:	220f      	movs	r2, #15
 8011376:	18bb      	adds	r3, r7, r2
 8011378:	18ba      	adds	r2, r7, r2
 801137a:	7812      	ldrb	r2, [r2, #0]
 801137c:	404a      	eors	r2, r1
 801137e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011380:	230d      	movs	r3, #13
 8011382:	18fb      	adds	r3, r7, r3
 8011384:	2200      	movs	r2, #0
 8011386:	701a      	strb	r2, [r3, #0]
 8011388:	e01c      	b.n	80113c4 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 801138a:	210f      	movs	r1, #15
 801138c:	187b      	adds	r3, r7, r1
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	b25b      	sxtb	r3, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	da0a      	bge.n	80113ac <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8011396:	187b      	adds	r3, r7, r1
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	b25b      	sxtb	r3, r3
 801139c:	18db      	adds	r3, r3, r3
 801139e:	b25b      	sxtb	r3, r3
 80113a0:	2231      	movs	r2, #49	@ 0x31
 80113a2:	4053      	eors	r3, r2
 80113a4:	b25a      	sxtb	r2, r3
 80113a6:	187b      	adds	r3, r7, r1
 80113a8:	701a      	strb	r2, [r3, #0]
 80113aa:	e005      	b.n	80113b8 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80113ac:	230f      	movs	r3, #15
 80113ae:	18fa      	adds	r2, r7, r3
 80113b0:	18fb      	adds	r3, r7, r3
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	18db      	adds	r3, r3, r3
 80113b6:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80113b8:	210d      	movs	r1, #13
 80113ba:	187b      	adds	r3, r7, r1
 80113bc:	781a      	ldrb	r2, [r3, #0]
 80113be:	187b      	adds	r3, r7, r1
 80113c0:	3201      	adds	r2, #1
 80113c2:	701a      	strb	r2, [r3, #0]
 80113c4:	230d      	movs	r3, #13
 80113c6:	18fb      	adds	r3, r7, r3
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	2b07      	cmp	r3, #7
 80113cc:	d9dd      	bls.n	801138a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80113ce:	210e      	movs	r1, #14
 80113d0:	187b      	adds	r3, r7, r1
 80113d2:	781a      	ldrb	r2, [r3, #0]
 80113d4:	187b      	adds	r3, r7, r1
 80113d6:	3201      	adds	r2, #1
 80113d8:	701a      	strb	r2, [r3, #0]
 80113da:	230e      	movs	r3, #14
 80113dc:	18fa      	adds	r2, r7, r3
 80113de:	1cfb      	adds	r3, r7, #3
 80113e0:	7812      	ldrb	r2, [r2, #0]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d3bf      	bcc.n	8011368 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80113e8:	230f      	movs	r3, #15
 80113ea:	18fb      	adds	r3, r7, r3
 80113ec:	781b      	ldrb	r3, [r3, #0]
}
 80113ee:	0018      	movs	r0, r3
 80113f0:	46bd      	mov	sp, r7
 80113f2:	b004      	add	sp, #16
 80113f4:	bd80      	pop	{r7, pc}
	...

080113f8 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4936      	ldr	r1, [pc, #216]	@ (80114e0 <SGP_SetHT+0xe8>)
 8011408:	1c18      	adds	r0, r3, #0
 801140a:	f7ef fa59 	bl	80008c0 <__aeabi_fadd>
 801140e:	1c03      	adds	r3, r0, #0
 8011410:	4934      	ldr	r1, [pc, #208]	@ (80114e4 <SGP_SetHT+0xec>)
 8011412:	1c18      	adds	r0, r3, #0
 8011414:	f7ef fc46 	bl	8000ca4 <__aeabi_fdiv>
 8011418:	1c03      	adds	r3, r0, #0
 801141a:	4933      	ldr	r1, [pc, #204]	@ (80114e8 <SGP_SetHT+0xf0>)
 801141c:	1c18      	adds	r0, r3, #0
 801141e:	f7ef fe0f 	bl	8001040 <__aeabi_fmul>
 8011422:	1c03      	adds	r3, r0, #0
 8011424:	1c18      	adds	r0, r3, #0
 8011426:	f7ef f8f9 	bl	800061c <__aeabi_f2uiz>
 801142a:	0003      	movs	r3, r0
 801142c:	b29a      	uxth	r2, r3
 801142e:	4b2f      	ldr	r3, [pc, #188]	@ (80114ec <SGP_SetHT+0xf4>)
 8011430:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	492e      	ldr	r1, [pc, #184]	@ (80114f0 <SGP_SetHT+0xf8>)
 8011438:	1c18      	adds	r0, r3, #0
 801143a:	f7ef fc33 	bl	8000ca4 <__aeabi_fdiv>
 801143e:	1c03      	adds	r3, r0, #0
 8011440:	4929      	ldr	r1, [pc, #164]	@ (80114e8 <SGP_SetHT+0xf0>)
 8011442:	1c18      	adds	r0, r3, #0
 8011444:	f7ef fdfc 	bl	8001040 <__aeabi_fmul>
 8011448:	1c03      	adds	r3, r0, #0
 801144a:	1c18      	adds	r0, r3, #0
 801144c:	f7ef f8e6 	bl	800061c <__aeabi_f2uiz>
 8011450:	0003      	movs	r3, r0
 8011452:	b29a      	uxth	r2, r3
 8011454:	4b27      	ldr	r3, [pc, #156]	@ (80114f4 <SGP_SetHT+0xfc>)
 8011456:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011458:	4b26      	ldr	r3, [pc, #152]	@ (80114f4 <SGP_SetHT+0xfc>)
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	0a1b      	lsrs	r3, r3, #8
 801145e:	b29b      	uxth	r3, r3
 8011460:	b2da      	uxtb	r2, r3
 8011462:	4b25      	ldr	r3, [pc, #148]	@ (80114f8 <SGP_SetHT+0x100>)
 8011464:	709a      	strb	r2, [r3, #2]
 8011466:	4b24      	ldr	r3, [pc, #144]	@ (80114f8 <SGP_SetHT+0x100>)
 8011468:	789a      	ldrb	r2, [r3, #2]
 801146a:	210c      	movs	r1, #12
 801146c:	187b      	adds	r3, r7, r1
 801146e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011470:	4b20      	ldr	r3, [pc, #128]	@ (80114f4 <SGP_SetHT+0xfc>)
 8011472:	881b      	ldrh	r3, [r3, #0]
 8011474:	b2da      	uxtb	r2, r3
 8011476:	4b20      	ldr	r3, [pc, #128]	@ (80114f8 <SGP_SetHT+0x100>)
 8011478:	70da      	strb	r2, [r3, #3]
 801147a:	4b1f      	ldr	r3, [pc, #124]	@ (80114f8 <SGP_SetHT+0x100>)
 801147c:	78da      	ldrb	r2, [r3, #3]
 801147e:	187b      	adds	r3, r7, r1
 8011480:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8011482:	187b      	adds	r3, r7, r1
 8011484:	2102      	movs	r1, #2
 8011486:	0018      	movs	r0, r3
 8011488:	f7ff ff5e 	bl	8011348 <CalculateCRC>
 801148c:	0003      	movs	r3, r0
 801148e:	001a      	movs	r2, r3
 8011490:	4b19      	ldr	r3, [pc, #100]	@ (80114f8 <SGP_SetHT+0x100>)
 8011492:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8011494:	4b15      	ldr	r3, [pc, #84]	@ (80114ec <SGP_SetHT+0xf4>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	0a1b      	lsrs	r3, r3, #8
 801149a:	b29b      	uxth	r3, r3
 801149c:	b2da      	uxtb	r2, r3
 801149e:	4b16      	ldr	r3, [pc, #88]	@ (80114f8 <SGP_SetHT+0x100>)
 80114a0:	715a      	strb	r2, [r3, #5]
 80114a2:	4b15      	ldr	r3, [pc, #84]	@ (80114f8 <SGP_SetHT+0x100>)
 80114a4:	795a      	ldrb	r2, [r3, #5]
 80114a6:	2108      	movs	r1, #8
 80114a8:	187b      	adds	r3, r7, r1
 80114aa:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80114ac:	4b0f      	ldr	r3, [pc, #60]	@ (80114ec <SGP_SetHT+0xf4>)
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	4b11      	ldr	r3, [pc, #68]	@ (80114f8 <SGP_SetHT+0x100>)
 80114b4:	719a      	strb	r2, [r3, #6]
 80114b6:	4b10      	ldr	r3, [pc, #64]	@ (80114f8 <SGP_SetHT+0x100>)
 80114b8:	799a      	ldrb	r2, [r3, #6]
 80114ba:	187b      	adds	r3, r7, r1
 80114bc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80114be:	187b      	adds	r3, r7, r1
 80114c0:	2102      	movs	r1, #2
 80114c2:	0018      	movs	r0, r3
 80114c4:	f7ff ff40 	bl	8011348 <CalculateCRC>
 80114c8:	0003      	movs	r3, r0
 80114ca:	001a      	movs	r2, r3
 80114cc:	4b0a      	ldr	r3, [pc, #40]	@ (80114f8 <SGP_SetHT+0x100>)
 80114ce:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80114d0:	4b0a      	ldr	r3, [pc, #40]	@ (80114fc <SGP_SetHT+0x104>)
 80114d2:	2201      	movs	r2, #1
 80114d4:	701a      	strb	r2, [r3, #0]
}
 80114d6:	46c0      	nop			@ (mov r8, r8)
 80114d8:	46bd      	mov	sp, r7
 80114da:	b004      	add	sp, #16
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	46c0      	nop			@ (mov r8, r8)
 80114e0:	42340000 	.word	0x42340000
 80114e4:	432f0000 	.word	0x432f0000
 80114e8:	477fff00 	.word	0x477fff00
 80114ec:	200012a6 	.word	0x200012a6
 80114f0:	42c80000 	.word	0x42c80000
 80114f4:	200012a4 	.word	0x200012a4
 80114f8:	200000bc 	.word	0x200000bc
 80114fc:	200012a8 	.word	0x200012a8

08011500 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8011500:	b580      	push	{r7, lr}
 8011502:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8011504:	4a09      	ldr	r2, [pc, #36]	@ (801152c <SGP_SoftReset+0x2c>)
 8011506:	4b0a      	ldr	r3, [pc, #40]	@ (8011530 <SGP_SoftReset+0x30>)
 8011508:	0019      	movs	r1, r3
 801150a:	2003      	movs	r0, #3
 801150c:	f002 fc4c 	bl	8013da8 <CreateLine>
  SGP_TurnHeaterOff();
 8011510:	f7ff fccc 	bl	8010eac <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8011514:	200a      	movs	r0, #10
 8011516:	f003 f9dd 	bl	80148d4 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801151a:	4b06      	ldr	r3, [pc, #24]	@ (8011534 <SGP_SoftReset+0x34>)
 801151c:	2202      	movs	r2, #2
 801151e:	0019      	movs	r1, r3
 8011520:	2059      	movs	r0, #89	@ 0x59
 8011522:	f7ff fbf5 	bl	8010d10 <WriteRegister>
}
 8011526:	46c0      	nop			@ (mov r8, r8)
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	0802d97c 	.word	0x0802d97c
 8011530:	0802d858 	.word	0x0802d858
 8011534:	200000c4 	.word	0x200000c4

08011538 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011538:	b580      	push	{r7, lr}
 801153a:	af00      	add	r7, sp, #0
  vocIndex = 0;
 801153c:	4b02      	ldr	r3, [pc, #8]	@ (8011548 <ResetVOCresult+0x10>)
 801153e:	2200      	movs	r2, #0
 8011540:	601a      	str	r2, [r3, #0]
}
 8011542:	46c0      	nop			@ (mov r8, r8)
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	200012ac 	.word	0x200012ac

0801154c <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011550:	4b4b      	ldr	r3, [pc, #300]	@ (8011680 <SGP_Upkeep+0x134>)
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	2b07      	cmp	r3, #7
 8011556:	d900      	bls.n	801155a <SGP_Upkeep+0xe>
 8011558:	e07a      	b.n	8011650 <SGP_Upkeep+0x104>
 801155a:	009a      	lsls	r2, r3, #2
 801155c:	4b49      	ldr	r3, [pc, #292]	@ (8011684 <SGP_Upkeep+0x138>)
 801155e:	18d3      	adds	r3, r2, r3
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011564:	4a48      	ldr	r2, [pc, #288]	@ (8011688 <SGP_Upkeep+0x13c>)
 8011566:	4b49      	ldr	r3, [pc, #292]	@ (801168c <SGP_Upkeep+0x140>)
 8011568:	0019      	movs	r1, r3
 801156a:	2003      	movs	r0, #3
 801156c:	f002 fc1c 	bl	8013da8 <CreateLine>
    break;
 8011570:	e081      	b.n	8011676 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8011572:	f7ff ffe1 	bl	8011538 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8011576:	4b42      	ldr	r3, [pc, #264]	@ (8011680 <SGP_Upkeep+0x134>)
 8011578:	2201      	movs	r2, #1
 801157a:	701a      	strb	r2, [r3, #0]
    break;
 801157c:	e07b      	b.n	8011676 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 801157e:	f7fc fc2d 	bl	800dddc <getSensorLock>
 8011582:	1e03      	subs	r3, r0, #0
 8011584:	d000      	beq.n	8011588 <SGP_Upkeep+0x3c>
 8011586:	e06f      	b.n	8011668 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8011588:	2005      	movs	r0, #5
 801158a:	f7fc fc13 	bl	800ddb4 <setSensorLock>
    SetMeasurementIndicator();
 801158e:	f001 f989 	bl	80128a4 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 8011592:	f7ff fc29 	bl	8010de8 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8011596:	200a      	movs	r0, #10
 8011598:	f003 f99c 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 801159c:	2000      	movs	r0, #0
 801159e:	f7fc fc09 	bl	800ddb4 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80115a2:	4b37      	ldr	r3, [pc, #220]	@ (8011680 <SGP_Upkeep+0x134>)
 80115a4:	2202      	movs	r2, #2
 80115a6:	701a      	strb	r2, [r3, #0]
    break;
 80115a8:	e065      	b.n	8011676 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80115aa:	f7fc fc17 	bl	800dddc <getSensorLock>
 80115ae:	1e03      	subs	r3, r0, #0
 80115b0:	d15c      	bne.n	801166c <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80115b2:	2005      	movs	r0, #5
 80115b4:	f7fc fbfe 	bl	800ddb4 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80115b8:	4b35      	ldr	r3, [pc, #212]	@ (8011690 <SGP_Upkeep+0x144>)
 80115ba:	0018      	movs	r0, r3
 80115bc:	f7ff fc84 	bl	8010ec8 <SGP_GetMeasurementValues>
 80115c0:	1e03      	subs	r3, r0, #0
 80115c2:	d002      	beq.n	80115ca <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80115c4:	4b2e      	ldr	r3, [pc, #184]	@ (8011680 <SGP_Upkeep+0x134>)
 80115c6:	2203      	movs	r2, #3
 80115c8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80115ca:	200a      	movs	r0, #10
 80115cc:	f003 f982 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 80115d0:	2000      	movs	r0, #0
 80115d2:	f7fc fbef 	bl	800ddb4 <setSensorLock>
    break;
 80115d6:	e04e      	b.n	8011676 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80115d8:	4b2d      	ldr	r3, [pc, #180]	@ (8011690 <SGP_Upkeep+0x144>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	0018      	movs	r0, r3
 80115e0:	f7f3 fa68 	bl	8004ab4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80115e4:	4b26      	ldr	r3, [pc, #152]	@ (8011680 <SGP_Upkeep+0x134>)
 80115e6:	2206      	movs	r2, #6
 80115e8:	701a      	strb	r2, [r3, #0]
    break;
 80115ea:	e044      	b.n	8011676 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80115ec:	4b24      	ldr	r3, [pc, #144]	@ (8011680 <SGP_Upkeep+0x134>)
 80115ee:	2207      	movs	r2, #7
 80115f0:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 80115f2:	4b28      	ldr	r3, [pc, #160]	@ (8011694 <SGP_Upkeep+0x148>)
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	2b03      	cmp	r3, #3
 80115f8:	d912      	bls.n	8011620 <SGP_Upkeep+0xd4>
 80115fa:	4b27      	ldr	r3, [pc, #156]	@ (8011698 <SGP_Upkeep+0x14c>)
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2201      	movs	r2, #1
 8011600:	4053      	eors	r3, r2
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b00      	cmp	r3, #0
 8011606:	d00b      	beq.n	8011620 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8011608:	4b24      	ldr	r3, [pc, #144]	@ (801169c <SGP_Upkeep+0x150>)
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d004      	beq.n	801161a <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8011610:	f7ff ff76 	bl	8011500 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8011614:	2000      	movs	r0, #0
 8011616:	f7fb ff77 	bl	800d508 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 801161a:	4b20      	ldr	r3, [pc, #128]	@ (801169c <SGP_Upkeep+0x150>)
 801161c:	2201      	movs	r2, #1
 801161e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8011620:	f003 f94e 	bl	80148c0 <HAL_GetTick>
 8011624:	0003      	movs	r3, r0
 8011626:	22c8      	movs	r2, #200	@ 0xc8
 8011628:	0092      	lsls	r2, r2, #2
 801162a:	189a      	adds	r2, r3, r2
 801162c:	4b1c      	ldr	r3, [pc, #112]	@ (80116a0 <SGP_Upkeep+0x154>)
 801162e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011630:	f001 f94a 	bl	80128c8 <ResetMeasurementIndicator>
  break;
 8011634:	e01f      	b.n	8011676 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8011636:	4b1a      	ldr	r3, [pc, #104]	@ (80116a0 <SGP_Upkeep+0x154>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	0018      	movs	r0, r3
 801163c:	f002 fb5e 	bl	8013cfc <TimestampIsReached>
 8011640:	1e03      	subs	r3, r0, #0
 8011642:	d015      	beq.n	8011670 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011644:	f7ff fbb8 	bl	8010db8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011648:	4b0d      	ldr	r3, [pc, #52]	@ (8011680 <SGP_Upkeep+0x134>)
 801164a:	2200      	movs	r2, #0
 801164c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801164e:	e00f      	b.n	8011670 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011650:	4b0b      	ldr	r3, [pc, #44]	@ (8011680 <SGP_Upkeep+0x134>)
 8011652:	2200      	movs	r2, #0
 8011654:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8011656:	f7fc fbc1 	bl	800dddc <getSensorLock>
 801165a:	0003      	movs	r3, r0
 801165c:	2b05      	cmp	r3, #5
 801165e:	d109      	bne.n	8011674 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011660:	2000      	movs	r0, #0
 8011662:	f7fc fba7 	bl	800ddb4 <setSensorLock>
    }
    break;
 8011666:	e005      	b.n	8011674 <SGP_Upkeep+0x128>
      break;
 8011668:	46c0      	nop			@ (mov r8, r8)
 801166a:	e004      	b.n	8011676 <SGP_Upkeep+0x12a>
      break;
 801166c:	46c0      	nop			@ (mov r8, r8)
 801166e:	e002      	b.n	8011676 <SGP_Upkeep+0x12a>
    break;
 8011670:	46c0      	nop			@ (mov r8, r8)
 8011672:	e000      	b.n	8011676 <SGP_Upkeep+0x12a>
    break;
 8011674:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8011676:	4b02      	ldr	r3, [pc, #8]	@ (8011680 <SGP_Upkeep+0x134>)
 8011678:	781b      	ldrb	r3, [r3, #0]
}
 801167a:	0018      	movs	r0, r3
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	200012b0 	.word	0x200012b0
 8011684:	0802e548 	.word	0x0802e548
 8011688:	0802d994 	.word	0x0802d994
 801168c:	0802d858 	.word	0x0802d858
 8011690:	200012ac 	.word	0x200012ac
 8011694:	200011f6 	.word	0x200011f6
 8011698:	2000214d 	.word	0x2000214d
 801169c:	200011e0 	.word	0x200011e0
 80116a0:	200011f8 	.word	0x200011f8

080116a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	0002      	movs	r2, r0
 80116ac:	1dfb      	adds	r3, r7, #7
 80116ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80116b0:	1dfb      	adds	r3, r7, #7
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80116b6:	d809      	bhi.n	80116cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116b8:	1dfb      	adds	r3, r7, #7
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	001a      	movs	r2, r3
 80116be:	231f      	movs	r3, #31
 80116c0:	401a      	ands	r2, r3
 80116c2:	4b04      	ldr	r3, [pc, #16]	@ (80116d4 <__NVIC_EnableIRQ+0x30>)
 80116c4:	2101      	movs	r1, #1
 80116c6:	4091      	lsls	r1, r2
 80116c8:	000a      	movs	r2, r1
 80116ca:	601a      	str	r2, [r3, #0]
  }
}
 80116cc:	46c0      	nop			@ (mov r8, r8)
 80116ce:	46bd      	mov	sp, r7
 80116d0:	b002      	add	sp, #8
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	e000e100 	.word	0xe000e100

080116d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	0002      	movs	r2, r0
 80116e0:	1dfb      	adds	r3, r7, #7
 80116e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80116e4:	1dfb      	adds	r3, r7, #7
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80116ea:	d810      	bhi.n	801170e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116ec:	1dfb      	adds	r3, r7, #7
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	001a      	movs	r2, r3
 80116f2:	231f      	movs	r3, #31
 80116f4:	4013      	ands	r3, r2
 80116f6:	4908      	ldr	r1, [pc, #32]	@ (8011718 <__NVIC_DisableIRQ+0x40>)
 80116f8:	2201      	movs	r2, #1
 80116fa:	409a      	lsls	r2, r3
 80116fc:	0013      	movs	r3, r2
 80116fe:	2280      	movs	r2, #128	@ 0x80
 8011700:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011702:	f3bf 8f4f 	dsb	sy
}
 8011706:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011708:	f3bf 8f6f 	isb	sy
}
 801170c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 801170e:	46c0      	nop			@ (mov r8, r8)
 8011710:	46bd      	mov	sp, r7
 8011712:	b002      	add	sp, #8
 8011714:	bd80      	pop	{r7, pc}
 8011716:	46c0      	nop			@ (mov r8, r8)
 8011718:	e000e100 	.word	0xe000e100

0801171c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 801171c:	b5b0      	push	{r4, r5, r7, lr}
 801171e:	b088      	sub	sp, #32
 8011720:	af02      	add	r7, sp, #8
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	0008      	movs	r0, r1
 8011726:	0011      	movs	r1, r2
 8011728:	1cfb      	adds	r3, r7, #3
 801172a:	1c02      	adds	r2, r0, #0
 801172c:	701a      	strb	r2, [r3, #0]
 801172e:	1cbb      	adds	r3, r7, #2
 8011730:	1c0a      	adds	r2, r1, #0
 8011732:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011734:	4b5b      	ldr	r3, [pc, #364]	@ (80118a4 <getSoundData+0x188>)
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2201      	movs	r2, #1
 801173c:	4053      	eors	r3, r2
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2b00      	cmp	r3, #0
 8011742:	d107      	bne.n	8011754 <getSoundData+0x38>
 8011744:	4b58      	ldr	r3, [pc, #352]	@ (80118a8 <getSoundData+0x18c>)
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	b2db      	uxtb	r3, r3
 801174a:	2201      	movs	r2, #1
 801174c:	4053      	eors	r3, r2
 801174e:	b2db      	uxtb	r3, r3
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <getSoundData+0x3c>
    {
        return false;
 8011754:	2300      	movs	r3, #0
 8011756:	e0a0      	b.n	801189a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011758:	4b54      	ldr	r3, [pc, #336]	@ (80118ac <getSoundData+0x190>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d005      	beq.n	801176e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011762:	4b53      	ldr	r3, [pc, #332]	@ (80118b0 <getSoundData+0x194>)
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	b25b      	sxtb	r3, r3
 8011768:	0018      	movs	r0, r3
 801176a:	f7ff ffb5 	bl	80116d8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801176e:	f3bf 8f4f 	dsb	sy
}
 8011772:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011774:	f3bf 8f6f 	isb	sy
}
 8011778:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 801177a:	1cfb      	adds	r3, r7, #3
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d04c      	beq.n	801181c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8011782:	4b4c      	ldr	r3, [pc, #304]	@ (80118b4 <getSoundData+0x198>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d11b      	bne.n	80117c2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2200      	movs	r2, #0
 801178e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011796:	2300      	movs	r3, #0
 8011798:	617b      	str	r3, [r7, #20]
 801179a:	e00e      	b.n	80117ba <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	18d3      	adds	r3, r2, r3
 80117a2:	3302      	adds	r3, #2
 80117a4:	2200      	movs	r2, #0
 80117a6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	18d3      	adds	r3, r2, r3
 80117ae:	3308      	adds	r3, #8
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	3301      	adds	r3, #1
 80117b8:	617b      	str	r3, [r7, #20]
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	2b05      	cmp	r3, #5
 80117be:	d9ed      	bls.n	801179c <getSoundData+0x80>
 80117c0:	e02c      	b.n	801181c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	1c59      	adds	r1, r3, #1
 80117c8:	4b3b      	ldr	r3, [pc, #236]	@ (80118b8 <getSoundData+0x19c>)
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	4b3b      	ldr	r3, [pc, #236]	@ (80118bc <getSoundData+0x1a0>)
 80117ce:	681c      	ldr	r4, [r3, #0]
 80117d0:	4b38      	ldr	r3, [pc, #224]	@ (80118b4 <getSoundData+0x198>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	0023      	movs	r3, r4
 80117d8:	f000 fde4 	bl	80123a4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117dc:	2300      	movs	r3, #0
 80117de:	613b      	str	r3, [r7, #16]
 80117e0:	e019      	b.n	8011816 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	18d3      	adds	r3, r2, r3
 80117e8:	1c98      	adds	r0, r3, #2
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	3308      	adds	r3, #8
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 80117f2:	4b33      	ldr	r3, [pc, #204]	@ (80118c0 <getSoundData+0x1a4>)
 80117f4:	693a      	ldr	r2, [r7, #16]
 80117f6:	0092      	lsls	r2, r2, #2
 80117f8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 80117fa:	4b32      	ldr	r3, [pc, #200]	@ (80118c4 <getSoundData+0x1a8>)
 80117fc:	693a      	ldr	r2, [r7, #16]
 80117fe:	0092      	lsls	r2, r2, #2
 8011800:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011802:	4b2c      	ldr	r3, [pc, #176]	@ (80118b4 <getSoundData+0x198>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	0013      	movs	r3, r2
 801180a:	0022      	movs	r2, r4
 801180c:	f000 fdca 	bl	80123a4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	3301      	adds	r3, #1
 8011814:	613b      	str	r3, [r7, #16]
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	2b05      	cmp	r3, #5
 801181a:	d9e2      	bls.n	80117e2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 801181c:	1cbb      	adds	r3, r7, #2
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d028      	beq.n	8011876 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011824:	240e      	movs	r4, #14
 8011826:	193b      	adds	r3, r7, r4
 8011828:	2200      	movs	r2, #0
 801182a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 801182c:	250d      	movs	r5, #13
 801182e:	197b      	adds	r3, r7, r5
 8011830:	2200      	movs	r2, #0
 8011832:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011834:	4b24      	ldr	r3, [pc, #144]	@ (80118c8 <getSoundData+0x1ac>)
 8011836:	6818      	ldr	r0, [r3, #0]
 8011838:	4924      	ldr	r1, [pc, #144]	@ (80118cc <getSoundData+0x1b0>)
 801183a:	197b      	adds	r3, r7, r5
 801183c:	193a      	adds	r2, r7, r4
 801183e:	f000 fe55 	bl	80124ec <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011842:	193b      	adds	r3, r7, r4
 8011844:	881a      	ldrh	r2, [r3, #0]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	21ff      	movs	r1, #255	@ 0xff
 801184a:	4011      	ands	r1, r2
 801184c:	000c      	movs	r4, r1
 801184e:	7b99      	ldrb	r1, [r3, #14]
 8011850:	2000      	movs	r0, #0
 8011852:	4001      	ands	r1, r0
 8011854:	1c08      	adds	r0, r1, #0
 8011856:	1c21      	adds	r1, r4, #0
 8011858:	4301      	orrs	r1, r0
 801185a:	7399      	strb	r1, [r3, #14]
 801185c:	0a12      	lsrs	r2, r2, #8
 801185e:	b290      	uxth	r0, r2
 8011860:	7bda      	ldrb	r2, [r3, #15]
 8011862:	2100      	movs	r1, #0
 8011864:	400a      	ands	r2, r1
 8011866:	1c11      	adds	r1, r2, #0
 8011868:	1c02      	adds	r2, r0, #0
 801186a:	430a      	orrs	r2, r1
 801186c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801186e:	197b      	adds	r3, r7, r5
 8011870:	781a      	ldrb	r2, [r3, #0]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011876:	f000 f869 	bl	801194c <micSettlingComplete>
 801187a:	0003      	movs	r3, r0
 801187c:	001a      	movs	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8011882:	4b0a      	ldr	r3, [pc, #40]	@ (80118ac <getSoundData+0x190>)
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b00      	cmp	r3, #0
 801188a:	d005      	beq.n	8011898 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 801188c:	4b08      	ldr	r3, [pc, #32]	@ (80118b0 <getSoundData+0x194>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	b25b      	sxtb	r3, r3
 8011892:	0018      	movs	r0, r3
 8011894:	f7ff ff06 	bl	80116a4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8011898:	2301      	movs	r3, #1
}
 801189a:	0018      	movs	r0, r3
 801189c:	46bd      	mov	sp, r7
 801189e:	b006      	add	sp, #24
 80118a0:	bdb0      	pop	{r4, r5, r7, pc}
 80118a2:	46c0      	nop			@ (mov r8, r8)
 80118a4:	200012b2 	.word	0x200012b2
 80118a8:	200012b5 	.word	0x200012b5
 80118ac:	200012b4 	.word	0x200012b4
 80118b0:	20001d04 	.word	0x20001d04
 80118b4:	20001d40 	.word	0x20001d40
 80118b8:	20001d08 	.word	0x20001d08
 80118bc:	20001d0c 	.word	0x20001d0c
 80118c0:	20001d10 	.word	0x20001d10
 80118c4:	20001d28 	.word	0x20001d28
 80118c8:	200012bc 	.word	0x200012bc
 80118cc:	3b5c7333 	.word	0x3b5c7333

080118d0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
 80118dc:	001a      	movs	r2, r3
 80118de:	1cfb      	adds	r3, r7, #3
 80118e0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80118e2:	4b07      	ldr	r3, [pc, #28]	@ (8011900 <soundInit+0x30>)
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80118e8:	4b06      	ldr	r3, [pc, #24]	@ (8011904 <soundInit+0x34>)
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80118ee:	4b06      	ldr	r3, [pc, #24]	@ (8011908 <soundInit+0x38>)
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	601a      	str	r2, [r3, #0]
//    DMA_Channel_IRQn = DMAChIRQn;
    return true;
 80118f4:	2301      	movs	r3, #1
}
 80118f6:	0018      	movs	r0, r3
 80118f8:	46bd      	mov	sp, r7
 80118fa:	b004      	add	sp, #16
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	46c0      	nop			@ (mov r8, r8)
 8011900:	20001cfc 	.word	0x20001cfc
 8011904:	20001cf8 	.word	0x20001cf8
 8011908:	20001d00 	.word	0x20001d00

0801190c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011910:	4b02      	ldr	r3, [pc, #8]	@ (801191c <clearMaximumAmplitude+0x10>)
 8011912:	2200      	movs	r2, #0
 8011914:	601a      	str	r2, [r3, #0]
}
 8011916:	46c0      	nop			@ (mov r8, r8)
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	200012bc 	.word	0x200012bc

08011920 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011924:	4b08      	ldr	r3, [pc, #32]	@ (8011948 <startMicSettlingPeriod+0x28>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2200      	movs	r2, #0
 801192c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 801192e:	4b06      	ldr	r3, [pc, #24]	@ (8011948 <startMicSettlingPeriod+0x28>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	0018      	movs	r0, r3
 8011934:	f00b f902 	bl	801cb3c <HAL_TIM_Base_Start>
 8011938:	1e03      	subs	r3, r0, #0
 801193a:	d001      	beq.n	8011940 <startMicSettlingPeriod+0x20>
    {
        return false;
 801193c:	2300      	movs	r3, #0
 801193e:	e000      	b.n	8011942 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011940:	2301      	movs	r3, #1
}
 8011942:	0018      	movs	r0, r3
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	20001cf8 	.word	0x20001cf8

0801194c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011952:	4b0e      	ldr	r3, [pc, #56]	@ (801198c <micSettlingComplete+0x40>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	2201      	movs	r2, #1
 801195c:	401a      	ands	r2, r3
 801195e:	1dfb      	adds	r3, r7, #7
 8011960:	3a01      	subs	r2, #1
 8011962:	4251      	negs	r1, r2
 8011964:	414a      	adcs	r2, r1
 8011966:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011968:	1dfb      	adds	r3, r7, #7
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d007      	beq.n	8011980 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011970:	4b06      	ldr	r3, [pc, #24]	@ (801198c <micSettlingComplete+0x40>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	0018      	movs	r0, r3
 8011976:	f00b f92b 	bl	801cbd0 <HAL_TIM_Base_Stop>
      DataReady = true;
 801197a:	4b05      	ldr	r3, [pc, #20]	@ (8011990 <micSettlingComplete+0x44>)
 801197c:	2201      	movs	r2, #1
 801197e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8011980:	1dfb      	adds	r3, r7, #7
 8011982:	781b      	ldrb	r3, [r3, #0]
}
 8011984:	0018      	movs	r0, r3
 8011986:	46bd      	mov	sp, r7
 8011988:	b002      	add	sp, #8
 801198a:	bd80      	pop	{r7, pc}
 801198c:	20001cf8 	.word	0x20001cf8
 8011990:	200012b1 	.word	0x200012b1

08011994 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	0002      	movs	r2, r0
 801199c:	1dfb      	adds	r3, r7, #7
 801199e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80119a0:	4b29      	ldr	r3, [pc, #164]	@ (8011a48 <enableMicrophone+0xb4>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	1dfa      	adds	r2, r7, #7
 80119a8:	7812      	ldrb	r2, [r2, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d101      	bne.n	80119b2 <enableMicrophone+0x1e>
    {
        return true;
 80119ae:	2301      	movs	r3, #1
 80119b0:	e045      	b.n	8011a3e <enableMicrophone+0xaa>
    }
    if (bEnable)
 80119b2:	1dfb      	adds	r3, r7, #7
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d025      	beq.n	8011a06 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80119ba:	f7ff ffb1 	bl	8011920 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80119be:	4b23      	ldr	r3, [pc, #140]	@ (8011a4c <enableMicrophone+0xb8>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2280      	movs	r2, #128	@ 0x80
 80119c4:	0092      	lsls	r2, r2, #2
 80119c6:	4922      	ldr	r1, [pc, #136]	@ (8011a50 <enableMicrophone+0xbc>)
 80119c8:	0018      	movs	r0, r3
 80119ca:	f007 fb19 	bl	8019000 <HAL_I2S_Receive_DMA>
 80119ce:	1e03      	subs	r3, r0, #0
 80119d0:	d001      	beq.n	80119d6 <enableMicrophone+0x42>
        {
            return false;
 80119d2:	2300      	movs	r3, #0
 80119d4:	e033      	b.n	8011a3e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80119d6:	f7ff ff99 	bl	801190c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 80119da:	4b1e      	ldr	r3, [pc, #120]	@ (8011a54 <enableMicrophone+0xc0>)
 80119dc:	2200      	movs	r2, #0
 80119de:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80119e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011a58 <enableMicrophone+0xc4>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	b25b      	sxtb	r3, r3
 80119e6:	0018      	movs	r0, r3
 80119e8:	f7ff fe5c 	bl	80116a4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 80119ec:	4b1b      	ldr	r3, [pc, #108]	@ (8011a5c <enableMicrophone+0xc8>)
 80119ee:	2201      	movs	r2, #1
 80119f0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 80119f2:	4b15      	ldr	r3, [pc, #84]	@ (8011a48 <enableMicrophone+0xb4>)
 80119f4:	2201      	movs	r2, #1
 80119f6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80119f8:	4b19      	ldr	r3, [pc, #100]	@ (8011a60 <enableMicrophone+0xcc>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80119fe:	4b19      	ldr	r3, [pc, #100]	@ (8011a64 <enableMicrophone+0xd0>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	701a      	strb	r2, [r3, #0]
 8011a04:	e01a      	b.n	8011a3c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011a06:	4b14      	ldr	r3, [pc, #80]	@ (8011a58 <enableMicrophone+0xc4>)
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	b25b      	sxtb	r3, r3
 8011a0c:	0018      	movs	r0, r3
 8011a0e:	f7ff fe63 	bl	80116d8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011a12:	4b12      	ldr	r3, [pc, #72]	@ (8011a5c <enableMicrophone+0xc8>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011a18:	4b11      	ldr	r3, [pc, #68]	@ (8011a60 <enableMicrophone+0xcc>)
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011a1e:	4b11      	ldr	r3, [pc, #68]	@ (8011a64 <enableMicrophone+0xd0>)
 8011a20:	2200      	movs	r2, #0
 8011a22:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011a24:	4b09      	ldr	r3, [pc, #36]	@ (8011a4c <enableMicrophone+0xb8>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	0018      	movs	r0, r3
 8011a2a:	f007 fbab 	bl	8019184 <HAL_I2S_DMAStop>
 8011a2e:	1e03      	subs	r3, r0, #0
 8011a30:	d001      	beq.n	8011a36 <enableMicrophone+0xa2>
        {
            return false;
 8011a32:	2300      	movs	r3, #0
 8011a34:	e003      	b.n	8011a3e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011a36:	4b04      	ldr	r3, [pc, #16]	@ (8011a48 <enableMicrophone+0xb4>)
 8011a38:	2200      	movs	r2, #0
 8011a3a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011a3c:	2301      	movs	r3, #1
}
 8011a3e:	0018      	movs	r0, r3
 8011a40:	46bd      	mov	sp, r7
 8011a42:	b002      	add	sp, #8
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	46c0      	nop			@ (mov r8, r8)
 8011a48:	200012b2 	.word	0x200012b2
 8011a4c:	20001cfc 	.word	0x20001cfc
 8011a50:	200012f8 	.word	0x200012f8
 8011a54:	200012b8 	.word	0x200012b8
 8011a58:	20001d04 	.word	0x20001d04
 8011a5c:	200012b4 	.word	0x200012b4
 8011a60:	200012b3 	.word	0x200012b3
 8011a64:	200012b5 	.word	0x200012b5

08011a68 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8011aa0 <startSPLcalculation+0x38>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2201      	movs	r2, #1
 8011a74:	4053      	eors	r3, r2
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d001      	beq.n	8011a80 <startSPLcalculation+0x18>
    {
        return false;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e00c      	b.n	8011a9a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011a80:	4b08      	ldr	r3, [pc, #32]	@ (8011aa4 <startSPLcalculation+0x3c>)
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d001      	beq.n	8011a8e <startSPLcalculation+0x26>
    {
        return true;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	e005      	b.n	8011a9a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011a8e:	f000 fb65 	bl	801215c <resetSPLstate>
    SPLcalcEnabled = true;
 8011a92:	4b04      	ldr	r3, [pc, #16]	@ (8011aa4 <startSPLcalculation+0x3c>)
 8011a94:	2201      	movs	r2, #1
 8011a96:	701a      	strb	r2, [r3, #0]
    return true;
 8011a98:	2301      	movs	r3, #1
}
 8011a9a:	0018      	movs	r0, r3
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	200012b2 	.word	0x200012b2
 8011aa4:	200012b3 	.word	0x200012b3

08011aa8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ab0:	4b05      	ldr	r3, [pc, #20]	@ (8011ac8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d102      	bne.n	8011ac0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011aba:	2000      	movs	r0, #0
 8011abc:	f000 f81a 	bl	8011af4 <processHalfDMAbuffer>
  }
}
 8011ac0:	46c0      	nop			@ (mov r8, r8)
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	b002      	add	sp, #8
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	20001cfc 	.word	0x20001cfc

08011acc <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011ad4:	4b06      	ldr	r3, [pc, #24]	@ (8011af0 <HAL_I2S_RxCpltCallback+0x24>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d104      	bne.n	8011ae8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011ade:	2380      	movs	r3, #128	@ 0x80
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	0018      	movs	r0, r3
 8011ae4:	f000 f806 	bl	8011af4 <processHalfDMAbuffer>
  }
}
 8011ae8:	46c0      	nop			@ (mov r8, r8)
 8011aea:	46bd      	mov	sp, r7
 8011aec:	b002      	add	sp, #8
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	20001cfc 	.word	0x20001cfc

08011af4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	005a      	lsls	r2, r3, #1
 8011b00:	4b15      	ldr	r3, [pc, #84]	@ (8011b58 <processHalfDMAbuffer+0x64>)
 8011b02:	18d3      	adds	r3, r2, r3
 8011b04:	4a15      	ldr	r2, [pc, #84]	@ (8011b5c <processHalfDMAbuffer+0x68>)
 8011b06:	2180      	movs	r1, #128	@ 0x80
 8011b08:	0089      	lsls	r1, r1, #2
 8011b0a:	0018      	movs	r0, r3
 8011b0c:	f000 fd37 	bl	801257e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011b10:	4b13      	ldr	r3, [pc, #76]	@ (8011b60 <processHalfDMAbuffer+0x6c>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	425a      	negs	r2, r3
 8011b16:	4153      	adcs	r3, r2
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	4b11      	ldr	r3, [pc, #68]	@ (8011b60 <processHalfDMAbuffer+0x6c>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2109      	movs	r1, #9
 8011b20:	4299      	cmp	r1, r3
 8011b22:	419b      	sbcs	r3, r3
 8011b24:	425b      	negs	r3, r3
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	480c      	ldr	r0, [pc, #48]	@ (8011b5c <processHalfDMAbuffer+0x68>)
 8011b2a:	2180      	movs	r1, #128	@ 0x80
 8011b2c:	f000 fb48 	bl	80121c0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011b30:	4b0b      	ldr	r3, [pc, #44]	@ (8011b60 <processHalfDMAbuffer+0x6c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b09      	cmp	r3, #9
 8011b36:	d804      	bhi.n	8011b42 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011b38:	4b09      	ldr	r3, [pc, #36]	@ (8011b60 <processHalfDMAbuffer+0x6c>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	1c5a      	adds	r2, r3, #1
 8011b3e:	4b08      	ldr	r3, [pc, #32]	@ (8011b60 <processHalfDMAbuffer+0x6c>)
 8011b40:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011b42:	4b08      	ldr	r3, [pc, #32]	@ (8011b64 <processHalfDMAbuffer+0x70>)
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011b4c:	f000 f828 	bl	8011ba0 <calculateSPLQ31>
    }
}
 8011b50:	46c0      	nop			@ (mov r8, r8)
 8011b52:	46bd      	mov	sp, r7
 8011b54:	b002      	add	sp, #8
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	200012f8 	.word	0x200012f8
 8011b5c:	20001af8 	.word	0x20001af8
 8011b60:	200012b8 	.word	0x200012b8
 8011b64:	200012b3 	.word	0x200012b3

08011b68 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011b70:	4b08      	ldr	r3, [pc, #32]	@ (8011b94 <HAL_I2S_ErrorCallback+0x2c>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d107      	bne.n	8011b8a <HAL_I2S_ErrorCallback+0x22>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011b7a:	4a07      	ldr	r2, [pc, #28]	@ (8011b98 <HAL_I2S_ErrorCallback+0x30>)
 8011b7c:	233c      	movs	r3, #60	@ 0x3c
 8011b7e:	33ff      	adds	r3, #255	@ 0xff
 8011b80:	0019      	movs	r1, r3
 8011b82:	4b06      	ldr	r3, [pc, #24]	@ (8011b9c <HAL_I2S_ErrorCallback+0x34>)
 8011b84:	0018      	movs	r0, r3
 8011b86:	f002 fa0b 	bl	8013fa0 <errorHandler>
  }
}
 8011b8a:	46c0      	nop			@ (mov r8, r8)
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	b002      	add	sp, #8
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	46c0      	nop			@ (mov r8, r8)
 8011b94:	20001cfc 	.word	0x20001cfc
 8011b98:	0802d9bc 	.word	0x0802d9bc
 8011b9c:	0802e638 	.word	0x0802e638

08011ba0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ba2:	b0b3      	sub	sp, #204	@ 0xcc
 8011ba4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011ba6:	4ae2      	ldr	r2, [pc, #904]	@ (8011f30 <calculateSPLQ31+0x390>)
 8011ba8:	2338      	movs	r3, #56	@ 0x38
 8011baa:	2030      	movs	r0, #48	@ 0x30
 8011bac:	181b      	adds	r3, r3, r0
 8011bae:	19d9      	adds	r1, r3, r7
 8011bb0:	2334      	movs	r3, #52	@ 0x34
 8011bb2:	181b      	adds	r3, r3, r0
 8011bb4:	19d8      	adds	r0, r3, r7
 8011bb6:	2380      	movs	r3, #128	@ 0x80
 8011bb8:	f000 fc36 	bl	8012428 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	da00      	bge.n	8011bc4 <calculateSPLQ31+0x24>
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	105b      	asrs	r3, r3, #1
 8011bc6:	001a      	movs	r2, r3
 8011bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	da00      	bge.n	8011bd0 <calculateSPLQ31+0x30>
 8011bce:	3301      	adds	r3, #1
 8011bd0:	105b      	asrs	r3, r3, #1
 8011bd2:	18d3      	adds	r3, r2, r3
 8011bd4:	2188      	movs	r1, #136	@ 0x88
 8011bd6:	187a      	adds	r2, r7, r1
 8011bd8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011bda:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011bdc:	187b      	adds	r3, r7, r1
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	1ad3      	subs	r3, r2, r3
 8011be2:	3304      	adds	r3, #4
 8011be4:	2284      	movs	r2, #132	@ 0x84
 8011be6:	18b9      	adds	r1, r7, r2
 8011be8:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011bea:	18bb      	adds	r3, r7, r2
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4ad1      	ldr	r2, [pc, #836]	@ (8011f34 <calculateSPLQ31+0x394>)
 8011bf0:	0019      	movs	r1, r3
 8011bf2:	0010      	movs	r0, r2
 8011bf4:	f000 fc58 	bl	80124a8 <getPo2factor>
 8011bf8:	0003      	movs	r3, r0
 8011bfa:	2280      	movs	r2, #128	@ 0x80
 8011bfc:	18ba      	adds	r2, r7, r2
 8011bfe:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	2284      	movs	r2, #132	@ 0x84
 8011c04:	2130      	movs	r1, #48	@ 0x30
 8011c06:	1852      	adds	r2, r2, r1
 8011c08:	19d2      	adds	r2, r2, r7
 8011c0a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	2280      	movs	r2, #128	@ 0x80
 8011c10:	1852      	adds	r2, r2, r1
 8011c12:	19d2      	adds	r2, r2, r7
 8011c14:	6013      	str	r3, [r2, #0]
 8011c16:	e032      	b.n	8011c7e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011c18:	4ac5      	ldr	r2, [pc, #788]	@ (8011f30 <calculateSPLQ31+0x390>)
 8011c1a:	2680      	movs	r6, #128	@ 0x80
 8011c1c:	2330      	movs	r3, #48	@ 0x30
 8011c1e:	18f1      	adds	r1, r6, r3
 8011c20:	19cb      	adds	r3, r1, r7
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	589a      	ldr	r2, [r3, r2]
 8011c28:	2188      	movs	r1, #136	@ 0x88
 8011c2a:	1879      	adds	r1, r7, r1
 8011c2c:	680b      	ldr	r3, [r1, #0]
 8011c2e:	1ad2      	subs	r2, r2, r3
 8011c30:	2180      	movs	r1, #128	@ 0x80
 8011c32:	1879      	adds	r1, r7, r1
 8011c34:	680b      	ldr	r3, [r1, #0]
 8011c36:	409a      	lsls	r2, r3
 8011c38:	0011      	movs	r1, r2
 8011c3a:	4abf      	ldr	r2, [pc, #764]	@ (8011f38 <calculateSPLQ31+0x398>)
 8011c3c:	2084      	movs	r0, #132	@ 0x84
 8011c3e:	2330      	movs	r3, #48	@ 0x30
 8011c40:	18c3      	adds	r3, r0, r3
 8011c42:	19db      	adds	r3, r3, r7
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011c4a:	2230      	movs	r2, #48	@ 0x30
 8011c4c:	1883      	adds	r3, r0, r2
 8011c4e:	19db      	adds	r3, r3, r7
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	3301      	adds	r3, #1
 8011c54:	49b8      	ldr	r1, [pc, #736]	@ (8011f38 <calculateSPLQ31+0x398>)
 8011c56:	009a      	lsls	r2, r3, #2
 8011c58:	2300      	movs	r3, #0
 8011c5a:	5053      	str	r3, [r2, r1]
        count += 2;
 8011c5c:	2230      	movs	r2, #48	@ 0x30
 8011c5e:	1883      	adds	r3, r0, r2
 8011c60:	19db      	adds	r3, r3, r7
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	3302      	adds	r3, #2
 8011c66:	0011      	movs	r1, r2
 8011c68:	1882      	adds	r2, r0, r2
 8011c6a:	19d2      	adds	r2, r2, r7
 8011c6c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c6e:	000a      	movs	r2, r1
 8011c70:	18b3      	adds	r3, r6, r2
 8011c72:	19db      	adds	r3, r3, r7
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	3301      	adds	r3, #1
 8011c78:	18b2      	adds	r2, r6, r2
 8011c7a:	19d2      	adds	r2, r2, r7
 8011c7c:	6013      	str	r3, [r2, #0]
 8011c7e:	2380      	movs	r3, #128	@ 0x80
 8011c80:	2630      	movs	r6, #48	@ 0x30
 8011c82:	199b      	adds	r3, r3, r6
 8011c84:	19db      	adds	r3, r3, r7
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8011c8a:	d9c5      	bls.n	8011c18 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011c8c:	4bab      	ldr	r3, [pc, #684]	@ (8011f3c <calculateSPLQ31+0x39c>)
 8011c8e:	6818      	ldr	r0, [r3, #0]
 8011c90:	49a9      	ldr	r1, [pc, #676]	@ (8011f38 <calculateSPLQ31+0x398>)
 8011c92:	2301      	movs	r3, #1
 8011c94:	2200      	movs	r2, #0
 8011c96:	f012 f91b 	bl	8023ed0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011c9a:	4aa9      	ldr	r2, [pc, #676]	@ (8011f40 <calculateSPLQ31+0x3a0>)
 8011c9c:	2338      	movs	r3, #56	@ 0x38
 8011c9e:	199b      	adds	r3, r3, r6
 8011ca0:	19d9      	adds	r1, r3, r7
 8011ca2:	2334      	movs	r3, #52	@ 0x34
 8011ca4:	199b      	adds	r3, r3, r6
 8011ca6:	19d8      	adds	r0, r3, r7
 8011ca8:	237e      	movs	r3, #126	@ 0x7e
 8011caa:	f000 fbbd 	bl	8012428 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011cae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011cb0:	2380      	movs	r3, #128	@ 0x80
 8011cb2:	061b      	lsls	r3, r3, #24
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d101      	bne.n	8011cbc <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011cb8:	4b9e      	ldr	r3, [pc, #632]	@ (8011f34 <calculateSPLQ31+0x394>)
 8011cba:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011cbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011cbe:	2380      	movs	r3, #128	@ 0x80
 8011cc0:	061b      	lsls	r3, r3, #24
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d101      	bne.n	8011cca <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011cc6:	4b9b      	ldr	r3, [pc, #620]	@ (8011f34 <calculateSPLQ31+0x394>)
 8011cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ccc:	17da      	asrs	r2, r3, #31
 8011cce:	189b      	adds	r3, r3, r2
 8011cd0:	4053      	eors	r3, r2
 8011cd2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cd6:	17da      	asrs	r2, r3, #31
 8011cd8:	189b      	adds	r3, r3, r2
 8011cda:	4053      	eors	r3, r2
 8011cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011cde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	dd01      	ble.n	8011cea <calculateSPLQ31+0x14a>
    {
        max = min;
 8011ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011cea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cec:	3304      	adds	r3, #4
 8011cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011cf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011cf2:	4a90      	ldr	r2, [pc, #576]	@ (8011f34 <calculateSPLQ31+0x394>)
 8011cf4:	0019      	movs	r1, r3
 8011cf6:	0010      	movs	r0, r2
 8011cf8:	f000 fbd6 	bl	80124a8 <getPo2factor>
 8011cfc:	0003      	movs	r3, r0
 8011cfe:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d00:	2302      	movs	r3, #2
 8011d02:	22ac      	movs	r2, #172	@ 0xac
 8011d04:	18ba      	adds	r2, r7, r2
 8011d06:	6013      	str	r3, [r2, #0]
 8011d08:	e012      	b.n	8011d30 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011d0a:	4a8b      	ldr	r2, [pc, #556]	@ (8011f38 <calculateSPLQ31+0x398>)
 8011d0c:	20ac      	movs	r0, #172	@ 0xac
 8011d0e:	183b      	adds	r3, r7, r0
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	589a      	ldr	r2, [r3, r2]
 8011d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d18:	409a      	lsls	r2, r3
 8011d1a:	0011      	movs	r1, r2
 8011d1c:	4a86      	ldr	r2, [pc, #536]	@ (8011f38 <calculateSPLQ31+0x398>)
 8011d1e:	183b      	adds	r3, r7, r0
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011d26:	183b      	adds	r3, r7, r0
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	183a      	adds	r2, r7, r0
 8011d2e:	6013      	str	r3, [r2, #0]
 8011d30:	23ac      	movs	r3, #172	@ 0xac
 8011d32:	18fb      	adds	r3, r7, r3
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d38:	d9e7      	bls.n	8011d0a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8011f30 <calculateSPLQ31+0x390>)
 8011d3c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011d3e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011d40:	4b7d      	ldr	r3, [pc, #500]	@ (8011f38 <calculateSPLQ31+0x398>)
 8011d42:	2240      	movs	r2, #64	@ 0x40
 8011d44:	0018      	movs	r0, r3
 8011d46:	f012 fe6d 	bl	8024a24 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011d4a:	2330      	movs	r3, #48	@ 0x30
 8011d4c:	18fb      	adds	r3, r7, r3
 8011d4e:	0018      	movs	r0, r3
 8011d50:	2330      	movs	r3, #48	@ 0x30
 8011d52:	001a      	movs	r2, r3
 8011d54:	2100      	movs	r1, #0
 8011d56:	f014 fc97 	bl	8026688 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	21a0      	movs	r1, #160	@ 0xa0
 8011d60:	1879      	adds	r1, r7, r1
 8011d62:	600a      	str	r2, [r1, #0]
 8011d64:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011d66:	2301      	movs	r3, #1
 8011d68:	229c      	movs	r2, #156	@ 0x9c
 8011d6a:	18ba      	adds	r2, r7, r2
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	e05b      	b.n	8011e28 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011d70:	269c      	movs	r6, #156	@ 0x9c
 8011d72:	19bb      	adds	r3, r7, r6
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	009a      	lsls	r2, r3, #2
 8011d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011d7a:	189b      	adds	r3, r3, r2
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	613b      	str	r3, [r7, #16]
 8011d80:	17db      	asrs	r3, r3, #31
 8011d82:	617b      	str	r3, [r7, #20]
 8011d84:	4b6f      	ldr	r3, [pc, #444]	@ (8011f44 <calculateSPLQ31+0x3a4>)
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	19bb      	adds	r3, r7, r6
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	18d3      	adds	r3, r2, r3
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	60bb      	str	r3, [r7, #8]
 8011d94:	2300      	movs	r3, #0
 8011d96:	60fb      	str	r3, [r7, #12]
 8011d98:	68ba      	ldr	r2, [r7, #8]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6938      	ldr	r0, [r7, #16]
 8011d9e:	6979      	ldr	r1, [r7, #20]
 8011da0:	f7ee fc0e 	bl	80005c0 <__aeabi_lmul>
 8011da4:	0002      	movs	r2, r0
 8011da6:	000b      	movs	r3, r1
 8011da8:	0010      	movs	r0, r2
 8011daa:	0019      	movs	r1, r3
 8011dac:	23a0      	movs	r3, #160	@ 0xa0
 8011dae:	18fa      	adds	r2, r7, r3
 8011db0:	6853      	ldr	r3, [r2, #4]
 8011db2:	6812      	ldr	r2, [r2, #0]
 8011db4:	1812      	adds	r2, r2, r0
 8011db6:	414b      	adcs	r3, r1
 8011db8:	21a0      	movs	r1, #160	@ 0xa0
 8011dba:	1879      	adds	r1, r7, r1
 8011dbc:	600a      	str	r2, [r1, #0]
 8011dbe:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011dc0:	4b61      	ldr	r3, [pc, #388]	@ (8011f48 <calculateSPLQ31+0x3a8>)
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	19bb      	adds	r3, r7, r6
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	18d3      	adds	r3, r2, r3
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b06      	cmp	r3, #6
 8011dce:	d025      	beq.n	8011e1c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011dd0:	4b5d      	ldr	r3, [pc, #372]	@ (8011f48 <calculateSPLQ31+0x3a8>)
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	19bb      	adds	r3, r7, r6
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	18d3      	adds	r3, r2, r3
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	2230      	movs	r2, #48	@ 0x30
 8011dde:	18ba      	adds	r2, r7, r2
 8011de0:	00db      	lsls	r3, r3, #3
 8011de2:	18d3      	adds	r3, r2, r3
 8011de4:	6818      	ldr	r0, [r3, #0]
 8011de6:	6859      	ldr	r1, [r3, #4]
 8011de8:	19bb      	adds	r3, r7, r6
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	009a      	lsls	r2, r3, #2
 8011dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011df0:	189b      	adds	r3, r3, r2
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	603b      	str	r3, [r7, #0]
 8011df6:	17db      	asrs	r3, r3, #31
 8011df8:	607b      	str	r3, [r7, #4]
 8011dfa:	4b53      	ldr	r3, [pc, #332]	@ (8011f48 <calculateSPLQ31+0x3a8>)
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	19be      	adds	r6, r7, r6
 8011e00:	6833      	ldr	r3, [r6, #0]
 8011e02:	18d3      	adds	r3, r2, r3
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	001e      	movs	r6, r3
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	1880      	adds	r0, r0, r2
 8011e0e:	4159      	adcs	r1, r3
 8011e10:	2330      	movs	r3, #48	@ 0x30
 8011e12:	18fa      	adds	r2, r7, r3
 8011e14:	00f3      	lsls	r3, r6, #3
 8011e16:	18d3      	adds	r3, r2, r3
 8011e18:	6018      	str	r0, [r3, #0]
 8011e1a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011e1c:	229c      	movs	r2, #156	@ 0x9c
 8011e1e:	18bb      	adds	r3, r7, r2
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	3301      	adds	r3, #1
 8011e24:	18ba      	adds	r2, r7, r2
 8011e26:	6013      	str	r3, [r2, #0]
 8011e28:	239c      	movs	r3, #156	@ 0x9c
 8011e2a:	18fb      	adds	r3, r7, r3
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e30:	d99e      	bls.n	8011d70 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011e32:	2380      	movs	r3, #128	@ 0x80
 8011e34:	18fb      	adds	r3, r7, r3
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	001a      	movs	r2, r3
 8011e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	18d3      	adds	r3, r2, r3
 8011e42:	3b22      	subs	r3, #34	@ 0x22
 8011e44:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e48:	17da      	asrs	r2, r3, #31
 8011e4a:	189b      	adds	r3, r3, r2
 8011e4c:	4053      	eors	r3, r2
 8011e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011e50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	da62      	bge.n	8011f1c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e58:	3b20      	subs	r3, #32
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	db05      	blt.n	8011e6a <calculateSPLQ31+0x2ca>
 8011e5e:	22a0      	movs	r2, #160	@ 0xa0
 8011e60:	18ba      	adds	r2, r7, r2
 8011e62:	6812      	ldr	r2, [r2, #0]
 8011e64:	409a      	lsls	r2, r3
 8011e66:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e68:	e010      	b.n	8011e8c <calculateSPLQ31+0x2ec>
 8011e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e6c:	2220      	movs	r2, #32
 8011e6e:	1ad3      	subs	r3, r2, r3
 8011e70:	22a0      	movs	r2, #160	@ 0xa0
 8011e72:	18ba      	adds	r2, r7, r2
 8011e74:	6812      	ldr	r2, [r2, #0]
 8011e76:	40da      	lsrs	r2, r3
 8011e78:	0013      	movs	r3, r2
 8011e7a:	22a4      	movs	r2, #164	@ 0xa4
 8011e7c:	18ba      	adds	r2, r7, r2
 8011e7e:	6811      	ldr	r1, [r2, #0]
 8011e80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011e82:	4091      	lsls	r1, r2
 8011e84:	6279      	str	r1, [r7, #36]	@ 0x24
 8011e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e88:	431a      	orrs	r2, r3
 8011e8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e8c:	21a0      	movs	r1, #160	@ 0xa0
 8011e8e:	187b      	adds	r3, r7, r1
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e94:	409a      	lsls	r2, r3
 8011e96:	623a      	str	r2, [r7, #32]
 8011e98:	6a3b      	ldr	r3, [r7, #32]
 8011e9a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011e9c:	187a      	adds	r2, r7, r1
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	2298      	movs	r2, #152	@ 0x98
 8011ea6:	18ba      	adds	r2, r7, r2
 8011ea8:	6013      	str	r3, [r2, #0]
 8011eaa:	e031      	b.n	8011f10 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011eac:	2330      	movs	r3, #48	@ 0x30
 8011eae:	18fa      	adds	r2, r7, r3
 8011eb0:	2398      	movs	r3, #152	@ 0x98
 8011eb2:	18fb      	adds	r3, r7, r3
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	18d3      	adds	r3, r2, r3
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ec0:	3920      	subs	r1, #32
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	db03      	blt.n	8011ece <calculateSPLQ31+0x32e>
 8011ec6:	0010      	movs	r0, r2
 8011ec8:	4088      	lsls	r0, r1
 8011eca:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ecc:	e00c      	b.n	8011ee8 <calculateSPLQ31+0x348>
 8011ece:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ed0:	2020      	movs	r0, #32
 8011ed2:	1a41      	subs	r1, r0, r1
 8011ed4:	0010      	movs	r0, r2
 8011ed6:	40c8      	lsrs	r0, r1
 8011ed8:	0001      	movs	r1, r0
 8011eda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011edc:	001c      	movs	r4, r3
 8011ede:	4084      	lsls	r4, r0
 8011ee0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011ee2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ee4:	4308      	orrs	r0, r1
 8011ee6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ee8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011eea:	0013      	movs	r3, r2
 8011eec:	408b      	lsls	r3, r1
 8011eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ef0:	2330      	movs	r3, #48	@ 0x30
 8011ef2:	18fa      	adds	r2, r7, r3
 8011ef4:	2098      	movs	r0, #152	@ 0x98
 8011ef6:	183b      	adds	r3, r7, r0
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	18d3      	adds	r3, r2, r3
 8011efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f02:	6019      	str	r1, [r3, #0]
 8011f04:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f06:	183b      	adds	r3, r7, r0
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	183a      	adds	r2, r7, r0
 8011f0e:	6013      	str	r3, [r2, #0]
 8011f10:	2398      	movs	r3, #152	@ 0x98
 8011f12:	18fb      	adds	r3, r7, r3
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2b05      	cmp	r3, #5
 8011f18:	d9c8      	bls.n	8011eac <calculateSPLQ31+0x30c>
 8011f1a:	e06b      	b.n	8011ff4 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f1e:	3b20      	subs	r3, #32
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	db13      	blt.n	8011f4c <calculateSPLQ31+0x3ac>
 8011f24:	22a4      	movs	r2, #164	@ 0xa4
 8011f26:	18ba      	adds	r2, r7, r2
 8011f28:	6812      	ldr	r2, [r2, #0]
 8011f2a:	40da      	lsrs	r2, r3
 8011f2c:	61ba      	str	r2, [r7, #24]
 8011f2e:	e01e      	b.n	8011f6e <calculateSPLQ31+0x3ce>
 8011f30:	20001af8 	.word	0x20001af8
 8011f34:	7fffffff 	.word	0x7fffffff
 8011f38:	20001d44 	.word	0x20001d44
 8011f3c:	200000d4 	.word	0x200000d4
 8011f40:	20001d4c 	.word	0x20001d4c
 8011f44:	200000d8 	.word	0x200000d8
 8011f48:	200000e4 	.word	0x200000e4
 8011f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f4e:	2220      	movs	r2, #32
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	22a4      	movs	r2, #164	@ 0xa4
 8011f54:	18ba      	adds	r2, r7, r2
 8011f56:	6812      	ldr	r2, [r2, #0]
 8011f58:	409a      	lsls	r2, r3
 8011f5a:	0013      	movs	r3, r2
 8011f5c:	22a0      	movs	r2, #160	@ 0xa0
 8011f5e:	18ba      	adds	r2, r7, r2
 8011f60:	6811      	ldr	r1, [r2, #0]
 8011f62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f64:	40d1      	lsrs	r1, r2
 8011f66:	61b9      	str	r1, [r7, #24]
 8011f68:	69ba      	ldr	r2, [r7, #24]
 8011f6a:	431a      	orrs	r2, r3
 8011f6c:	61ba      	str	r2, [r7, #24]
 8011f6e:	23a4      	movs	r3, #164	@ 0xa4
 8011f70:	18fb      	adds	r3, r7, r3
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f76:	40da      	lsrs	r2, r3
 8011f78:	61fa      	str	r2, [r7, #28]
 8011f7a:	69ba      	ldr	r2, [r7, #24]
 8011f7c:	69fb      	ldr	r3, [r7, #28]
 8011f7e:	21a0      	movs	r1, #160	@ 0xa0
 8011f80:	1879      	adds	r1, r7, r1
 8011f82:	600a      	str	r2, [r1, #0]
 8011f84:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f86:	2300      	movs	r3, #0
 8011f88:	2294      	movs	r2, #148	@ 0x94
 8011f8a:	18ba      	adds	r2, r7, r2
 8011f8c:	6013      	str	r3, [r2, #0]
 8011f8e:	e02c      	b.n	8011fea <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011f90:	2330      	movs	r3, #48	@ 0x30
 8011f92:	18fa      	adds	r2, r7, r3
 8011f94:	2394      	movs	r3, #148	@ 0x94
 8011f96:	18fb      	adds	r3, r7, r3
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	00db      	lsls	r3, r3, #3
 8011f9c:	18d3      	adds	r3, r2, r3
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fa4:	3920      	subs	r1, #32
 8011fa6:	2900      	cmp	r1, #0
 8011fa8:	db03      	blt.n	8011fb2 <calculateSPLQ31+0x412>
 8011faa:	0018      	movs	r0, r3
 8011fac:	40c8      	lsrs	r0, r1
 8011fae:	0004      	movs	r4, r0
 8011fb0:	e00a      	b.n	8011fc8 <calculateSPLQ31+0x428>
 8011fb2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fb4:	2020      	movs	r0, #32
 8011fb6:	1a41      	subs	r1, r0, r1
 8011fb8:	0018      	movs	r0, r3
 8011fba:	4088      	lsls	r0, r1
 8011fbc:	0001      	movs	r1, r0
 8011fbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011fc0:	0016      	movs	r6, r2
 8011fc2:	40c6      	lsrs	r6, r0
 8011fc4:	0034      	movs	r4, r6
 8011fc6:	430c      	orrs	r4, r1
 8011fc8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fca:	40cb      	lsrs	r3, r1
 8011fcc:	001d      	movs	r5, r3
 8011fce:	2330      	movs	r3, #48	@ 0x30
 8011fd0:	18fa      	adds	r2, r7, r3
 8011fd2:	2194      	movs	r1, #148	@ 0x94
 8011fd4:	187b      	adds	r3, r7, r1
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	18d3      	adds	r3, r2, r3
 8011fdc:	601c      	str	r4, [r3, #0]
 8011fde:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011fe0:	187b      	adds	r3, r7, r1
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	187a      	adds	r2, r7, r1
 8011fe8:	6013      	str	r3, [r2, #0]
 8011fea:	2394      	movs	r3, #148	@ 0x94
 8011fec:	18fb      	adds	r3, r7, r3
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b05      	cmp	r3, #5
 8011ff2:	d9cd      	bls.n	8011f90 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8011ff4:	230f      	movs	r3, #15
 8011ff6:	425d      	negs	r5, r3
 8011ff8:	2305      	movs	r3, #5
 8011ffa:	425e      	negs	r6, r3
 8011ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8012128 <calculateSPLQ31+0x588>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	4b4a      	ldr	r3, [pc, #296]	@ (801212c <calculateSPLQ31+0x58c>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	21a0      	movs	r1, #160	@ 0xa0
 801200a:	1879      	adds	r1, r7, r1
 801200c:	6808      	ldr	r0, [r1, #0]
 801200e:	6849      	ldr	r1, [r1, #4]
 8012010:	4c47      	ldr	r4, [pc, #284]	@ (8012130 <calculateSPLQ31+0x590>)
 8012012:	9403      	str	r4, [sp, #12]
 8012014:	4c47      	ldr	r4, [pc, #284]	@ (8012134 <calculateSPLQ31+0x594>)
 8012016:	9402      	str	r4, [sp, #8]
 8012018:	9301      	str	r3, [sp, #4]
 801201a:	9200      	str	r2, [sp, #0]
 801201c:	0033      	movs	r3, r6
 801201e:	002a      	movs	r2, r5
 8012020:	f000 fa86 	bl	8012530 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012024:	2300      	movs	r3, #0
 8012026:	2290      	movs	r2, #144	@ 0x90
 8012028:	18ba      	adds	r2, r7, r2
 801202a:	6013      	str	r3, [r2, #0]
 801202c:	e026      	b.n	801207c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801202e:	2330      	movs	r3, #48	@ 0x30
 8012030:	18fa      	adds	r2, r7, r3
 8012032:	2490      	movs	r4, #144	@ 0x90
 8012034:	193b      	adds	r3, r7, r4
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	18d3      	adds	r3, r2, r3
 801203c:	6818      	ldr	r0, [r3, #0]
 801203e:	6859      	ldr	r1, [r3, #4]
 8012040:	230f      	movs	r3, #15
 8012042:	425d      	negs	r5, r3
 8012044:	2305      	movs	r3, #5
 8012046:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012048:	193b      	adds	r3, r7, r4
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	009a      	lsls	r2, r3, #2
 801204e:	4b3a      	ldr	r3, [pc, #232]	@ (8012138 <calculateSPLQ31+0x598>)
 8012050:	18d3      	adds	r3, r2, r3
 8012052:	193a      	adds	r2, r7, r4
 8012054:	6812      	ldr	r2, [r2, #0]
 8012056:	0094      	lsls	r4, r2, #2
 8012058:	4a38      	ldr	r2, [pc, #224]	@ (801213c <calculateSPLQ31+0x59c>)
 801205a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801205c:	9203      	str	r2, [sp, #12]
 801205e:	9302      	str	r3, [sp, #8]
 8012060:	2300      	movs	r3, #0
 8012062:	9301      	str	r3, [sp, #4]
 8012064:	2300      	movs	r3, #0
 8012066:	9300      	str	r3, [sp, #0]
 8012068:	0033      	movs	r3, r6
 801206a:	002a      	movs	r2, r5
 801206c:	f000 fa60 	bl	8012530 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012070:	2490      	movs	r4, #144	@ 0x90
 8012072:	193b      	adds	r3, r7, r4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	3301      	adds	r3, #1
 8012078:	193a      	adds	r2, r7, r4
 801207a:	6013      	str	r3, [r2, #0]
 801207c:	2390      	movs	r3, #144	@ 0x90
 801207e:	18fb      	adds	r3, r7, r3
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b05      	cmp	r3, #5
 8012084:	d9d3      	bls.n	801202e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8012086:	4b2b      	ldr	r3, [pc, #172]	@ (8012134 <calculateSPLQ31+0x594>)
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	4b2d      	ldr	r3, [pc, #180]	@ (8012140 <calculateSPLQ31+0x5a0>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	18d2      	adds	r2, r2, r3
 8012090:	4b2b      	ldr	r3, [pc, #172]	@ (8012140 <calculateSPLQ31+0x5a0>)
 8012092:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8012094:	4b26      	ldr	r3, [pc, #152]	@ (8012130 <calculateSPLQ31+0x590>)
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	4b2a      	ldr	r3, [pc, #168]	@ (8012144 <calculateSPLQ31+0x5a4>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	18d2      	adds	r2, r2, r3
 801209e:	4b29      	ldr	r3, [pc, #164]	@ (8012144 <calculateSPLQ31+0x5a4>)
 80120a0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120a2:	2300      	movs	r3, #0
 80120a4:	228c      	movs	r2, #140	@ 0x8c
 80120a6:	18ba      	adds	r2, r7, r2
 80120a8:	6013      	str	r3, [r2, #0]
 80120aa:	e025      	b.n	80120f8 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80120ac:	4b22      	ldr	r3, [pc, #136]	@ (8012138 <calculateSPLQ31+0x598>)
 80120ae:	208c      	movs	r0, #140	@ 0x8c
 80120b0:	183a      	adds	r2, r7, r0
 80120b2:	6812      	ldr	r2, [r2, #0]
 80120b4:	0092      	lsls	r2, r2, #2
 80120b6:	58d2      	ldr	r2, [r2, r3]
 80120b8:	4b23      	ldr	r3, [pc, #140]	@ (8012148 <calculateSPLQ31+0x5a8>)
 80120ba:	1839      	adds	r1, r7, r0
 80120bc:	6809      	ldr	r1, [r1, #0]
 80120be:	0089      	lsls	r1, r1, #2
 80120c0:	58cb      	ldr	r3, [r1, r3]
 80120c2:	18d1      	adds	r1, r2, r3
 80120c4:	4b20      	ldr	r3, [pc, #128]	@ (8012148 <calculateSPLQ31+0x5a8>)
 80120c6:	183a      	adds	r2, r7, r0
 80120c8:	6812      	ldr	r2, [r2, #0]
 80120ca:	0092      	lsls	r2, r2, #2
 80120cc:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80120ce:	4b1b      	ldr	r3, [pc, #108]	@ (801213c <calculateSPLQ31+0x59c>)
 80120d0:	183a      	adds	r2, r7, r0
 80120d2:	6812      	ldr	r2, [r2, #0]
 80120d4:	0092      	lsls	r2, r2, #2
 80120d6:	58d2      	ldr	r2, [r2, r3]
 80120d8:	4b1c      	ldr	r3, [pc, #112]	@ (801214c <calculateSPLQ31+0x5ac>)
 80120da:	1839      	adds	r1, r7, r0
 80120dc:	6809      	ldr	r1, [r1, #0]
 80120de:	0089      	lsls	r1, r1, #2
 80120e0:	58cb      	ldr	r3, [r1, r3]
 80120e2:	18d1      	adds	r1, r2, r3
 80120e4:	4b19      	ldr	r3, [pc, #100]	@ (801214c <calculateSPLQ31+0x5ac>)
 80120e6:	183a      	adds	r2, r7, r0
 80120e8:	6812      	ldr	r2, [r2, #0]
 80120ea:	0092      	lsls	r2, r2, #2
 80120ec:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120ee:	183b      	adds	r3, r7, r0
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3301      	adds	r3, #1
 80120f4:	183a      	adds	r2, r7, r0
 80120f6:	6013      	str	r3, [r2, #0]
 80120f8:	238c      	movs	r3, #140	@ 0x8c
 80120fa:	18fb      	adds	r3, r7, r3
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2b05      	cmp	r3, #5
 8012100:	d9d4      	bls.n	80120ac <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8012102:	4b13      	ldr	r3, [pc, #76]	@ (8012150 <calculateSPLQ31+0x5b0>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	1c5a      	adds	r2, r3, #1
 8012108:	4b11      	ldr	r3, [pc, #68]	@ (8012150 <calculateSPLQ31+0x5b0>)
 801210a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 801210c:	4b10      	ldr	r3, [pc, #64]	@ (8012150 <calculateSPLQ31+0x5b0>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b0f      	cmp	r3, #15
 8012112:	d905      	bls.n	8012120 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012114:	4b0f      	ldr	r3, [pc, #60]	@ (8012154 <calculateSPLQ31+0x5b4>)
 8012116:	2201      	movs	r2, #1
 8012118:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 801211a:	4b0f      	ldr	r3, [pc, #60]	@ (8012158 <calculateSPLQ31+0x5b8>)
 801211c:	2200      	movs	r2, #0
 801211e:	701a      	strb	r2, [r3, #0]
    }
}
 8012120:	46c0      	nop			@ (mov r8, r8)
 8012122:	46bd      	mov	sp, r7
 8012124:	b02f      	add	sp, #188	@ 0xbc
 8012126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012128:	200000dc 	.word	0x200000dc
 801212c:	200000e0 	.word	0x200000e0
 8012130:	200012c4 	.word	0x200012c4
 8012134:	200012c0 	.word	0x200012c0
 8012138:	200012c8 	.word	0x200012c8
 801213c:	200012e0 	.word	0x200012e0
 8012140:	20001d08 	.word	0x20001d08
 8012144:	20001d0c 	.word	0x20001d0c
 8012148:	20001d10 	.word	0x20001d10
 801214c:	20001d28 	.word	0x20001d28
 8012150:	20001d40 	.word	0x20001d40
 8012154:	200012b5 	.word	0x200012b5
 8012158:	200012b3 	.word	0x200012b3

0801215c <resetSPLstate>:

static void resetSPLstate(void)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8012162:	4b11      	ldr	r3, [pc, #68]	@ (80121a8 <resetSPLstate+0x4c>)
 8012164:	2200      	movs	r2, #0
 8012166:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8012168:	4b10      	ldr	r3, [pc, #64]	@ (80121ac <resetSPLstate+0x50>)
 801216a:	2200      	movs	r2, #0
 801216c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801216e:	4b10      	ldr	r3, [pc, #64]	@ (80121b0 <resetSPLstate+0x54>)
 8012170:	2200      	movs	r2, #0
 8012172:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012174:	2300      	movs	r3, #0
 8012176:	607b      	str	r3, [r7, #4]
 8012178:	e00c      	b.n	8012194 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801217a:	4b0e      	ldr	r3, [pc, #56]	@ (80121b4 <resetSPLstate+0x58>)
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	0092      	lsls	r2, r2, #2
 8012180:	2100      	movs	r1, #0
 8012182:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8012184:	4b0c      	ldr	r3, [pc, #48]	@ (80121b8 <resetSPLstate+0x5c>)
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	0092      	lsls	r2, r2, #2
 801218a:	2100      	movs	r1, #0
 801218c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	3301      	adds	r3, #1
 8012192:	607b      	str	r3, [r7, #4]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2b05      	cmp	r3, #5
 8012198:	d9ef      	bls.n	801217a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 801219a:	4b08      	ldr	r3, [pc, #32]	@ (80121bc <resetSPLstate+0x60>)
 801219c:	2200      	movs	r2, #0
 801219e:	701a      	strb	r2, [r3, #0]
}
 80121a0:	46c0      	nop			@ (mov r8, r8)
 80121a2:	46bd      	mov	sp, r7
 80121a4:	b002      	add	sp, #8
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	20001d08 	.word	0x20001d08
 80121ac:	20001d0c 	.word	0x20001d0c
 80121b0:	20001d40 	.word	0x20001d40
 80121b4:	20001d10 	.word	0x20001d10
 80121b8:	20001d28 	.word	0x20001d28
 80121bc:	200012b5 	.word	0x200012b5

080121c0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80121c0:	b5b0      	push	{r4, r5, r7, lr}
 80121c2:	b090      	sub	sp, #64	@ 0x40
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	0019      	movs	r1, r3
 80121cc:	1dfb      	adds	r3, r7, #7
 80121ce:	701a      	strb	r2, [r3, #0]
 80121d0:	1dbb      	adds	r3, r7, #6
 80121d2:	1c0a      	adds	r2, r1, #0
 80121d4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80121d6:	1dfb      	adds	r3, r7, #7
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d005      	beq.n	80121ea <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80121de:	4b3b      	ldr	r3, [pc, #236]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 80121e0:	2200      	movs	r2, #0
 80121e2:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80121e4:	4b3a      	ldr	r3, [pc, #232]	@ (80122d0 <getFilteredMaxAmplitudeQ31+0x110>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80121ea:	2300      	movs	r3, #0
 80121ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80121f2:	2305      	movs	r3, #5
 80121f4:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80121f6:	2300      	movs	r3, #0
 80121f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80121fa:	e040      	b.n	801227e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80121fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	68fa      	ldr	r2, [r7, #12]
 8012202:	18d3      	adds	r3, r2, r3
 8012204:	681a      	ldr	r2, [r3, #0]
 8012206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012208:	409a      	lsls	r2, r3
 801220a:	0013      	movs	r3, r2
 801220c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801220e:	4b30      	ldr	r3, [pc, #192]	@ (80122d0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	425a      	negs	r2, r3
 8012214:	4b2e      	ldr	r3, [pc, #184]	@ (80122d0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012216:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8012218:	2418      	movs	r4, #24
 801221a:	193a      	adds	r2, r7, r4
 801221c:	492c      	ldr	r1, [pc, #176]	@ (80122d0 <getFilteredMaxAmplitudeQ31+0x110>)
 801221e:	231c      	movs	r3, #28
 8012220:	18f8      	adds	r0, r7, r3
 8012222:	2301      	movs	r3, #1
 8012224:	f012 fc56 	bl	8024ad4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012228:	2514      	movs	r5, #20
 801222a:	197a      	adds	r2, r7, r5
 801222c:	1939      	adds	r1, r7, r4
 801222e:	4829      	ldr	r0, [pc, #164]	@ (80122d4 <getFilteredMaxAmplitudeQ31+0x114>)
 8012230:	2301      	movs	r3, #1
 8012232:	f012 fc1d 	bl	8024a70 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012236:	2410      	movs	r4, #16
 8012238:	193a      	adds	r2, r7, r4
 801223a:	4924      	ldr	r1, [pc, #144]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 801223c:	4826      	ldr	r0, [pc, #152]	@ (80122d8 <getFilteredMaxAmplitudeQ31+0x118>)
 801223e:	2301      	movs	r3, #1
 8012240:	f012 fc16 	bl	8024a70 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012244:	4a21      	ldr	r2, [pc, #132]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012246:	1939      	adds	r1, r7, r4
 8012248:	1978      	adds	r0, r7, r5
 801224a:	2301      	movs	r3, #1
 801224c:	f012 fc42 	bl	8024ad4 <arm_add_q31>

        lastData = fx;
 8012250:	69fa      	ldr	r2, [r7, #28]
 8012252:	4b1f      	ldr	r3, [pc, #124]	@ (80122d0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012254:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8012256:	4b1d      	ldr	r3, [pc, #116]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801225c:	429a      	cmp	r2, r3
 801225e:	da03      	bge.n	8012268 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8012260:	4b1a      	ldr	r3, [pc, #104]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012266:	e007      	b.n	8012278 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8012268:	4b18      	ldr	r3, [pc, #96]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801226e:	429a      	cmp	r2, r3
 8012270:	dd02      	ble.n	8012278 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8012272:	4b16      	ldr	r3, [pc, #88]	@ (80122cc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8012278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801227a:	3301      	adds	r3, #1
 801227c:	637b      	str	r3, [r7, #52]	@ 0x34
 801227e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	429a      	cmp	r2, r3
 8012284:	d3ba      	bcc.n	80121fc <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8012286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012288:	17da      	asrs	r2, r3, #31
 801228a:	189b      	adds	r3, r3, r2
 801228c:	4053      	eors	r3, r2
 801228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8012290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012292:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8012294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012298:	4293      	cmp	r3, r2
 801229a:	d200      	bcs.n	801229e <getFilteredMaxAmplitudeQ31+0xde>
 801229c:	0013      	movs	r3, r2
 801229e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80122a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a4:	40da      	lsrs	r2, r3
 80122a6:	0013      	movs	r3, r2
 80122a8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80122aa:	1dbb      	adds	r3, r7, #6
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d007      	beq.n	80122c2 <getFilteredMaxAmplitudeQ31+0x102>
 80122b2:	4b0a      	ldr	r3, [pc, #40]	@ (80122dc <getFilteredMaxAmplitudeQ31+0x11c>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6a3a      	ldr	r2, [r7, #32]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d902      	bls.n	80122c2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80122bc:	4b07      	ldr	r3, [pc, #28]	@ (80122dc <getFilteredMaxAmplitudeQ31+0x11c>)
 80122be:	6a3a      	ldr	r2, [r7, #32]
 80122c0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80122c2:	6a3b      	ldr	r3, [r7, #32]
}
 80122c4:	0018      	movs	r0, r3
 80122c6:	46bd      	mov	sp, r7
 80122c8:	b010      	add	sp, #64	@ 0x40
 80122ca:	bdb0      	pop	{r4, r5, r7, pc}
 80122cc:	20002144 	.word	0x20002144
 80122d0:	20002148 	.word	0x20002148
 80122d4:	0802e630 	.word	0x0802e630
 80122d8:	0802e634 	.word	0x0802e634
 80122dc:	200012bc 	.word	0x200012bc

080122e0 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b086      	sub	sp, #24
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80122ec:	4913      	ldr	r1, [pc, #76]	@ (801233c <floatToIntAndFrac2dp+0x5c>)
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f7ee fea6 	bl	8001040 <__aeabi_fmul>
 80122f4:	1c03      	adds	r3, r0, #0
 80122f6:	1c18      	adds	r0, r3, #0
 80122f8:	f017 f8c4 	bl	8029484 <roundf>
 80122fc:	1c03      	adds	r3, r0, #0
 80122fe:	1c18      	adds	r0, r3, #0
 8012300:	f7ee f98c 	bl	800061c <__aeabi_f2uiz>
 8012304:	0003      	movs	r3, r0
 8012306:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	2164      	movs	r1, #100	@ 0x64
 801230c:	0018      	movs	r0, r3
 801230e:	f7ed ff49 	bl	80001a4 <__udivsi3>
 8012312:	0003      	movs	r3, r0
 8012314:	001a      	movs	r2, r3
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	b2da      	uxtb	r2, r3
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	b2db      	uxtb	r3, r3
 8012324:	2164      	movs	r1, #100	@ 0x64
 8012326:	434b      	muls	r3, r1
 8012328:	b2db      	uxtb	r3, r3
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	b2da      	uxtb	r2, r3
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	701a      	strb	r2, [r3, #0]
}
 8012332:	46c0      	nop			@ (mov r8, r8)
 8012334:	46bd      	mov	sp, r7
 8012336:	b006      	add	sp, #24
 8012338:	bd80      	pop	{r7, pc}
 801233a:	46c0      	nop			@ (mov r8, r8)
 801233c:	42c80000 	.word	0x42c80000

08012340 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 801234c:	4914      	ldr	r1, [pc, #80]	@ (80123a0 <floatToIntAndFrac1dp+0x60>)
 801234e:	68f8      	ldr	r0, [r7, #12]
 8012350:	f7ee fe76 	bl	8001040 <__aeabi_fmul>
 8012354:	1c03      	adds	r3, r0, #0
 8012356:	1c18      	adds	r0, r3, #0
 8012358:	f017 f894 	bl	8029484 <roundf>
 801235c:	1c03      	adds	r3, r0, #0
 801235e:	1c18      	adds	r0, r3, #0
 8012360:	f7ee f95c 	bl	800061c <__aeabi_f2uiz>
 8012364:	0003      	movs	r3, r0
 8012366:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	210a      	movs	r1, #10
 801236c:	0018      	movs	r0, r3
 801236e:	f7ed ff19 	bl	80001a4 <__udivsi3>
 8012372:	0003      	movs	r3, r0
 8012374:	001a      	movs	r2, r3
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	b2da      	uxtb	r2, r3
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	b2db      	uxtb	r3, r3
 8012384:	1c19      	adds	r1, r3, #0
 8012386:	0089      	lsls	r1, r1, #2
 8012388:	18cb      	adds	r3, r1, r3
 801238a:	18db      	adds	r3, r3, r3
 801238c:	b2db      	uxtb	r3, r3
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	b2da      	uxtb	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	701a      	strb	r2, [r3, #0]
}
 8012396:	46c0      	nop			@ (mov r8, r8)
 8012398:	46bd      	mov	sp, r7
 801239a:	b006      	add	sp, #24
 801239c:	bd80      	pop	{r7, pc}
 801239e:	46c0      	nop			@ (mov r8, r8)
 80123a0:	41200000 	.word	0x41200000

080123a4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80123a4:	b590      	push	{r4, r7, lr}
 80123a6:	b087      	sub	sp, #28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	607a      	str	r2, [r7, #4]
 80123b0:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ef fa38 	bl	8001828 <__aeabi_i2f>
 80123b8:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123ba:	6838      	ldr	r0, [r7, #0]
 80123bc:	f7ef fa34 	bl	8001828 <__aeabi_i2f>
 80123c0:	1c03      	adds	r3, r0, #0
 80123c2:	4918      	ldr	r1, [pc, #96]	@ (8012424 <sumToIntAverage+0x80>)
 80123c4:	1c18      	adds	r0, r3, #0
 80123c6:	f7ee fc6d 	bl	8000ca4 <__aeabi_fdiv>
 80123ca:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123cc:	1c19      	adds	r1, r3, #0
 80123ce:	1c20      	adds	r0, r4, #0
 80123d0:	f7ee fa76 	bl	80008c0 <__aeabi_fadd>
 80123d4:	1c03      	adds	r3, r0, #0
 80123d6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123da:	f7ef fa75 	bl	80018c8 <__aeabi_ui2f>
 80123de:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123e0:	1c19      	adds	r1, r3, #0
 80123e2:	1c20      	adds	r0, r4, #0
 80123e4:	f7ee fc5e 	bl	8000ca4 <__aeabi_fdiv>
 80123e8:	1c03      	adds	r3, r0, #0
 80123ea:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80123ec:	2300      	movs	r3, #0
 80123ee:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	2310      	movs	r3, #16
 80123f4:	18f9      	adds	r1, r7, r3
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	1c18      	adds	r0, r3, #0
 80123fa:	f7ff ffa1 	bl	8012340 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	2bff      	cmp	r3, #255	@ 0xff
 8012402:	d906      	bls.n	8012412 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	22ff      	movs	r2, #255	@ 0xff
 8012408:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2209      	movs	r2, #9
 801240e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8012410:	e003      	b.n	801241a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	b2da      	uxtb	r2, r3
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	701a      	strb	r2, [r3, #0]
}
 801241a:	46c0      	nop			@ (mov r8, r8)
 801241c:	46bd      	mov	sp, r7
 801241e:	b007      	add	sp, #28
 8012420:	bd90      	pop	{r4, r7, pc}
 8012422:	46c0      	nop			@ (mov r8, r8)
 8012424:	41200000 	.word	0x41200000

08012428 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	607a      	str	r2, [r7, #4]
 8012434:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	2280      	movs	r2, #128	@ 0x80
 801243a:	0612      	lsls	r2, r2, #24
 801243c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	4a18      	ldr	r2, [pc, #96]	@ (80124a4 <findMinMax+0x7c>)
 8012442:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012444:	2300      	movs	r3, #0
 8012446:	617b      	str	r3, [r7, #20]
 8012448:	e022      	b.n	8012490 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	18d3      	adds	r3, r2, r3
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	429a      	cmp	r2, r3
 801245a:	da06      	bge.n	801246a <findMinMax+0x42>
        {
            min[0] = array[i];
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	18d3      	adds	r3, r2, r3
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	009b      	lsls	r3, r3, #2
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	18d3      	adds	r3, r2, r3
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	429a      	cmp	r2, r3
 801247a:	dd06      	ble.n	801248a <findMinMax+0x62>
        {
            max[0] = array[i];
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	18d3      	adds	r3, r2, r3
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	3301      	adds	r3, #1
 801248e:	617b      	str	r3, [r7, #20]
 8012490:	697a      	ldr	r2, [r7, #20]
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	429a      	cmp	r2, r3
 8012496:	d3d8      	bcc.n	801244a <findMinMax+0x22>
        }
    }
}
 8012498:	46c0      	nop			@ (mov r8, r8)
 801249a:	46c0      	nop			@ (mov r8, r8)
 801249c:	46bd      	mov	sp, r7
 801249e:	b006      	add	sp, #24
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	46c0      	nop			@ (mov r8, r8)
 80124a4:	7fffffff 	.word	0x7fffffff

080124a8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d302      	bcc.n	80124c4 <getPo2factor+0x1c>
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d107      	bne.n	80124d4 <getPo2factor+0x2c>
    {
        return 0;
 80124c4:	2300      	movs	r3, #0
 80124c6:	e00d      	b.n	80124e4 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	085b      	lsrs	r3, r3, #1
 80124cc:	607b      	str	r3, [r7, #4]
        bitShift++;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	3301      	adds	r3, #1
 80124d2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d2f5      	bcs.n	80124c8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	3b01      	subs	r3, #1
 80124e0:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80124e2:	68fb      	ldr	r3, [r7, #12]
}
 80124e4:	0018      	movs	r0, r3
 80124e6:	46bd      	mov	sp, r7
 80124e8:	b004      	add	sp, #16
 80124ea:	bd80      	pop	{r7, pc}

080124ec <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ef f9e4 	bl	80018c8 <__aeabi_ui2f>
 8012500:	1c03      	adds	r3, r0, #0
 8012502:	1c19      	adds	r1, r3, #0
 8012504:	68b8      	ldr	r0, [r7, #8]
 8012506:	f7ee fd9b 	bl	8001040 <__aeabi_fmul>
 801250a:	1c03      	adds	r3, r0, #0
 801250c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801250e:	2300      	movs	r3, #0
 8012510:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8012512:	683a      	ldr	r2, [r7, #0]
 8012514:	2310      	movs	r3, #16
 8012516:	18f9      	adds	r1, r7, r3
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	1c18      	adds	r0, r3, #0
 801251c:	f7ff fee0 	bl	80122e0 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	b29a      	uxth	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	801a      	strh	r2, [r3, #0]
}
 8012528:	46c0      	nop			@ (mov r8, r8)
 801252a:	46bd      	mov	sp, r7
 801252c:	b006      	add	sp, #24
 801252e:	bd80      	pop	{r7, pc}

08012530 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	60b8      	str	r0, [r7, #8]
 8012538:	60f9      	str	r1, [r7, #12]
 801253a:	607a      	str	r2, [r7, #4]
 801253c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012540:	6a3a      	ldr	r2, [r7, #32]
 8012542:	68b8      	ldr	r0, [r7, #8]
 8012544:	68f9      	ldr	r1, [r7, #12]
 8012546:	f7f9 fe41 	bl	800c1cc <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801254a:	6a3b      	ldr	r3, [r7, #32]
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	18d2      	adds	r2, r2, r3
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	18d2      	adds	r2, r2, r3
 8012556:	6a3b      	ldr	r3, [r7, #32]
 8012558:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	18d2      	adds	r2, r2, r3
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	18d2      	adds	r2, r2, r3
 8012566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012568:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801256c:	6a3b      	ldr	r3, [r7, #32]
 801256e:	0011      	movs	r1, r2
 8012570:	0018      	movs	r0, r3
 8012572:	f7f9 febb 	bl	800c2ec <correctIntFracNumber>
}
 8012576:	46c0      	nop			@ (mov r8, r8)
 8012578:	46bd      	mov	sp, r7
 801257a:	b004      	add	sp, #16
 801257c:	bd80      	pop	{r7, pc}

0801257e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b086      	sub	sp, #24
 8012582:	af00      	add	r7, sp, #0
 8012584:	60f8      	str	r0, [r7, #12]
 8012586:	60b9      	str	r1, [r7, #8]
 8012588:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801258e:	2300      	movs	r3, #0
 8012590:	613b      	str	r3, [r7, #16]
 8012592:	e019      	b.n	80125c8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	005b      	lsls	r3, r3, #1
 8012598:	68fa      	ldr	r2, [r7, #12]
 801259a:	18d3      	adds	r3, r2, r3
 801259c:	881b      	ldrh	r3, [r3, #0]
 801259e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125a0:	693a      	ldr	r2, [r7, #16]
 80125a2:	3201      	adds	r2, #1
 80125a4:	0052      	lsls	r2, r2, #1
 80125a6:	68f9      	ldr	r1, [r7, #12]
 80125a8:	188a      	adds	r2, r1, r2
 80125aa:	8812      	ldrh	r2, [r2, #0]
 80125ac:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125ae:	0019      	movs	r1, r3
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80125b8:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80125ba:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	3301      	adds	r3, #1
 80125c0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	3304      	adds	r3, #4
 80125c6:	613b      	str	r3, [r7, #16]
 80125c8:	693a      	ldr	r2, [r7, #16]
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d3e1      	bcc.n	8012594 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80125d0:	46c0      	nop			@ (mov r8, r8)
 80125d2:	46c0      	nop			@ (mov r8, r8)
 80125d4:	46bd      	mov	sp, r7
 80125d6:	b006      	add	sp, #24
 80125d8:	bd80      	pop	{r7, pc}
	...

080125dc <InitDone>:
float batteryCharge = 0.0;
uint8_t batteryChargeMode;
Battery_Status batteryStatus;


void InitDone(){
 80125dc:	b580      	push	{r7, lr}
 80125de:	af00      	add	r7, sp, #0
  init = false;
 80125e0:	4b02      	ldr	r3, [pc, #8]	@ (80125ec <InitDone+0x10>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	701a      	strb	r2, [r3, #0]
}
 80125e6:	46c0      	nop			@ (mov r8, r8)
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	200000e8 	.word	0x200000e8

080125f0 <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the battery voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V
  Above values with standard battery
 */

void batteryChargeCheck(){
 80125f0:	b5b0      	push	{r4, r5, r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af04      	add	r7, sp, #16
  batteryCharge = ReadBatteryVoltage();
 80125f6:	f7f7 fa3d 	bl	8009a74 <ReadBatteryVoltage>
 80125fa:	1c02      	adds	r2, r0, #0
 80125fc:	4b2e      	ldr	r3, [pc, #184]	@ (80126b8 <batteryChargeCheck+0xc8>)
 80125fe:	601a      	str	r2, [r3, #0]
  Debug("battery: %.02fV, solar: %dmV", batteryCharge, ReadSolarVoltage());
 8012600:	4b2d      	ldr	r3, [pc, #180]	@ (80126b8 <batteryChargeCheck+0xc8>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	1c18      	adds	r0, r3, #0
 8012606:	f7f1 f945 	bl	8003894 <__aeabi_f2d>
 801260a:	0004      	movs	r4, r0
 801260c:	000d      	movs	r5, r1
 801260e:	f7f7 fa93 	bl	8009b38 <ReadSolarVoltage>
 8012612:	0003      	movs	r3, r0
 8012614:	0019      	movs	r1, r3
 8012616:	4a29      	ldr	r2, [pc, #164]	@ (80126bc <batteryChargeCheck+0xcc>)
 8012618:	4b29      	ldr	r3, [pc, #164]	@ (80126c0 <batteryChargeCheck+0xd0>)
 801261a:	9102      	str	r1, [sp, #8]
 801261c:	9400      	str	r4, [sp, #0]
 801261e:	9501      	str	r5, [sp, #4]
 8012620:	0019      	movs	r1, r3
 8012622:	2003      	movs	r0, #3
 8012624:	f001 fbc0 	bl	8013da8 <CreateLine>
#ifdef LARGEBATTERY
  if (batteryCharge < 3.50) {
#else
  if (batteryCharge < 3.75) {
 8012628:	4b23      	ldr	r3, [pc, #140]	@ (80126b8 <batteryChargeCheck+0xc8>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	4925      	ldr	r1, [pc, #148]	@ (80126c4 <batteryChargeCheck+0xd4>)
 801262e:	1c18      	adds	r0, r3, #0
 8012630:	f7ed ff7e 	bl	8000530 <__aeabi_fcmplt>
 8012634:	1e03      	subs	r3, r0, #0
 8012636:	d002      	beq.n	801263e <batteryChargeCheck+0x4e>
#endif
    batteryStatus = BATTERY_CRITICAL;
 8012638:	4b23      	ldr	r3, [pc, #140]	@ (80126c8 <batteryChargeCheck+0xd8>)
 801263a:	2200      	movs	r2, #0
 801263c:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.50 && batteryCharge < 3.69) {
#else
  if (batteryCharge >= 3.75 && batteryCharge < 3.85) {
 801263e:	4b1e      	ldr	r3, [pc, #120]	@ (80126b8 <batteryChargeCheck+0xc8>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	4920      	ldr	r1, [pc, #128]	@ (80126c4 <batteryChargeCheck+0xd4>)
 8012644:	1c18      	adds	r0, r3, #0
 8012646:	f7ed ff91 	bl	800056c <__aeabi_fcmpge>
 801264a:	1e03      	subs	r3, r0, #0
 801264c:	d00d      	beq.n	801266a <batteryChargeCheck+0x7a>
 801264e:	4b1a      	ldr	r3, [pc, #104]	@ (80126b8 <batteryChargeCheck+0xc8>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	1c18      	adds	r0, r3, #0
 8012654:	f7f1 f91e 	bl	8003894 <__aeabi_f2d>
 8012658:	4a1c      	ldr	r2, [pc, #112]	@ (80126cc <batteryChargeCheck+0xdc>)
 801265a:	4b1d      	ldr	r3, [pc, #116]	@ (80126d0 <batteryChargeCheck+0xe0>)
 801265c:	f7ed ff2e 	bl	80004bc <__aeabi_dcmplt>
 8012660:	1e03      	subs	r3, r0, #0
 8012662:	d002      	beq.n	801266a <batteryChargeCheck+0x7a>
#endif
    batteryStatus = BATTERY_LOW;
 8012664:	4b18      	ldr	r3, [pc, #96]	@ (80126c8 <batteryChargeCheck+0xd8>)
 8012666:	2201      	movs	r2, #1
 8012668:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.69 && batteryCharge < 3.98) {
#else
    if (batteryCharge >= 3.85 && batteryCharge < 4.00) {
 801266a:	4b13      	ldr	r3, [pc, #76]	@ (80126b8 <batteryChargeCheck+0xc8>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	1c18      	adds	r0, r3, #0
 8012670:	f7f1 f910 	bl	8003894 <__aeabi_f2d>
 8012674:	4a15      	ldr	r2, [pc, #84]	@ (80126cc <batteryChargeCheck+0xdc>)
 8012676:	4b16      	ldr	r3, [pc, #88]	@ (80126d0 <batteryChargeCheck+0xe0>)
 8012678:	f7ed ff3e 	bl	80004f8 <__aeabi_dcmpge>
 801267c:	1e03      	subs	r3, r0, #0
 801267e:	d00b      	beq.n	8012698 <batteryChargeCheck+0xa8>
 8012680:	4b0d      	ldr	r3, [pc, #52]	@ (80126b8 <batteryChargeCheck+0xc8>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	2181      	movs	r1, #129	@ 0x81
 8012686:	05c9      	lsls	r1, r1, #23
 8012688:	1c18      	adds	r0, r3, #0
 801268a:	f7ed ff51 	bl	8000530 <__aeabi_fcmplt>
 801268e:	1e03      	subs	r3, r0, #0
 8012690:	d002      	beq.n	8012698 <batteryChargeCheck+0xa8>
#endif
    batteryStatus = BATTERY_GOOD;
 8012692:	4b0d      	ldr	r3, [pc, #52]	@ (80126c8 <batteryChargeCheck+0xd8>)
 8012694:	2202      	movs	r2, #2
 8012696:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.98) {
#else
  if (batteryCharge >= 4.00) {
 8012698:	4b07      	ldr	r3, [pc, #28]	@ (80126b8 <batteryChargeCheck+0xc8>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2181      	movs	r1, #129	@ 0x81
 801269e:	05c9      	lsls	r1, r1, #23
 80126a0:	1c18      	adds	r0, r3, #0
 80126a2:	f7ed ff63 	bl	800056c <__aeabi_fcmpge>
 80126a6:	1e03      	subs	r3, r0, #0
 80126a8:	d100      	bne.n	80126ac <batteryChargeCheck+0xbc>
#endif
    batteryStatus = BATTERY_FULL;
  }
}
 80126aa:	e002      	b.n	80126b2 <batteryChargeCheck+0xc2>
    batteryStatus = BATTERY_FULL;
 80126ac:	4b06      	ldr	r3, [pc, #24]	@ (80126c8 <batteryChargeCheck+0xd8>)
 80126ae:	2203      	movs	r2, #3
 80126b0:	701a      	strb	r2, [r3, #0]
}
 80126b2:	46c0      	nop			@ (mov r8, r8)
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bdb0      	pop	{r4, r5, r7, pc}
 80126b8:	20002158 	.word	0x20002158
 80126bc:	0802d9dc 	.word	0x0802d9dc
 80126c0:	0802d9fc 	.word	0x0802d9fc
 80126c4:	40700000 	.word	0x40700000
 80126c8:	2000215d 	.word	0x2000215d
 80126cc:	cccccccd 	.word	0xcccccccd
 80126d0:	400ecccc 	.word	0x400ecccc

080126d4 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80126d4:	b5b0      	push	{r4, r5, r7, lr}
 80126d6:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80126d8:	f7f7 fa2e 	bl	8009b38 <ReadSolarVoltage>
 80126dc:	0003      	movs	r3, r0
 80126de:	001a      	movs	r2, r3
 80126e0:	4b1a      	ldr	r3, [pc, #104]	@ (801274c <Calculate_LED_ON+0x78>)
 80126e2:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 80126e4:	4b19      	ldr	r3, [pc, #100]	@ (801274c <Calculate_LED_ON+0x78>)
 80126e6:	881b      	ldrh	r3, [r3, #0]
 80126e8:	4a19      	ldr	r2, [pc, #100]	@ (8012750 <Calculate_LED_ON+0x7c>)
 80126ea:	4293      	cmp	r3, r2
 80126ec:	d802      	bhi.n	80126f4 <Calculate_LED_ON+0x20>
    solmV = 2900;
 80126ee:	4b17      	ldr	r3, [pc, #92]	@ (801274c <Calculate_LED_ON+0x78>)
 80126f0:	4a18      	ldr	r2, [pc, #96]	@ (8012754 <Calculate_LED_ON+0x80>)
 80126f2:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 80126f4:	4b15      	ldr	r3, [pc, #84]	@ (801274c <Calculate_LED_ON+0x78>)
 80126f6:	881b      	ldrh	r3, [r3, #0]
 80126f8:	4a17      	ldr	r2, [pc, #92]	@ (8012758 <Calculate_LED_ON+0x84>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	d902      	bls.n	8012704 <Calculate_LED_ON+0x30>
    solmV = 4700;
 80126fe:	4b13      	ldr	r3, [pc, #76]	@ (801274c <Calculate_LED_ON+0x78>)
 8012700:	4a15      	ldr	r2, [pc, #84]	@ (8012758 <Calculate_LED_ON+0x84>)
 8012702:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012704:	4b11      	ldr	r3, [pc, #68]	@ (801274c <Calculate_LED_ON+0x78>)
 8012706:	881b      	ldrh	r3, [r3, #0]
 8012708:	0018      	movs	r0, r3
 801270a:	f7f1 f871 	bl	80037f0 <__aeabi_i2d>
 801270e:	0004      	movs	r4, r0
 8012710:	000d      	movs	r5, r1
 8012712:	4b0e      	ldr	r3, [pc, #56]	@ (801274c <Calculate_LED_ON+0x78>)
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	001a      	movs	r2, r3
 8012718:	4b10      	ldr	r3, [pc, #64]	@ (801275c <Calculate_LED_ON+0x88>)
 801271a:	1a9b      	subs	r3, r3, r2
 801271c:	0018      	movs	r0, r3
 801271e:	f7f1 f867 	bl	80037f0 <__aeabi_i2d>
 8012722:	2200      	movs	r2, #0
 8012724:	4b0e      	ldr	r3, [pc, #56]	@ (8012760 <Calculate_LED_ON+0x8c>)
 8012726:	f7f0 f915 	bl	8002954 <__aeabi_dmul>
 801272a:	0002      	movs	r2, r0
 801272c:	000b      	movs	r3, r1
 801272e:	0020      	movs	r0, r4
 8012730:	0029      	movs	r1, r5
 8012732:	f7ef f90f 	bl	8001954 <__aeabi_dadd>
 8012736:	0002      	movs	r2, r0
 8012738:	000b      	movs	r3, r1
 801273a:	0010      	movs	r0, r2
 801273c:	0019      	movs	r1, r3
 801273e:	f7ed ff85 	bl	800064c <__aeabi_d2uiz>
 8012742:	0003      	movs	r3, r0
 8012744:	b29b      	uxth	r3, r3
}
 8012746:	0018      	movs	r0, r3
 8012748:	46bd      	mov	sp, r7
 801274a:	bdb0      	pop	{r4, r5, r7, pc}
 801274c:	2000215e 	.word	0x2000215e
 8012750:	00000b53 	.word	0x00000b53
 8012754:	00000b54 	.word	0x00000b54
 8012758:	0000125c 	.word	0x0000125c
 801275c:	00000dee 	.word	0x00000dee
 8012760:	3ff80000 	.word	0x3ff80000

08012764 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012764:	b590      	push	{r4, r7, lr}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	0004      	movs	r4, r0
 801276c:	0008      	movs	r0, r1
 801276e:	0011      	movs	r1, r2
 8012770:	1dbb      	adds	r3, r7, #6
 8012772:	1c22      	adds	r2, r4, #0
 8012774:	801a      	strh	r2, [r3, #0]
 8012776:	1d3b      	adds	r3, r7, #4
 8012778:	1c02      	adds	r2, r0, #0
 801277a:	801a      	strh	r2, [r3, #0]
 801277c:	1cbb      	adds	r3, r7, #2
 801277e:	1c0a      	adds	r2, r1, #0
 8012780:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 8012782:	4b0d      	ldr	r3, [pc, #52]	@ (80127b8 <SetStatusLED+0x54>)
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d103      	bne.n	8012792 <SetStatusLED+0x2e>
 801278a:	4b0c      	ldr	r3, [pc, #48]	@ (80127bc <SetStatusLED+0x58>)
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d00e      	beq.n	80127b0 <SetStatusLED+0x4c>
    TIM2 -> CCR1 = red;
 8012792:	2380      	movs	r3, #128	@ 0x80
 8012794:	05db      	lsls	r3, r3, #23
 8012796:	1dba      	adds	r2, r7, #6
 8012798:	8812      	ldrh	r2, [r2, #0]
 801279a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 801279c:	2380      	movs	r3, #128	@ 0x80
 801279e:	05db      	lsls	r3, r3, #23
 80127a0:	1d3a      	adds	r2, r7, #4
 80127a2:	8812      	ldrh	r2, [r2, #0]
 80127a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80127a6:	2380      	movs	r3, #128	@ 0x80
 80127a8:	05db      	lsls	r3, r3, #23
 80127aa:	1cba      	adds	r2, r7, #2
 80127ac:	8812      	ldrh	r2, [r2, #0]
 80127ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80127b0:	46c0      	nop			@ (mov r8, r8)
 80127b2:	46bd      	mov	sp, r7
 80127b4:	b003      	add	sp, #12
 80127b6:	bd90      	pop	{r4, r7, pc}
 80127b8:	200000e8 	.word	0x200000e8
 80127bc:	2000214e 	.word	0x2000214e

080127c0 <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80127c0:	b590      	push	{r4, r7, lr}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	0004      	movs	r4, r0
 80127c8:	0008      	movs	r0, r1
 80127ca:	0011      	movs	r1, r2
 80127cc:	1dfb      	adds	r3, r7, #7
 80127ce:	1c22      	adds	r2, r4, #0
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	1dbb      	adds	r3, r7, #6
 80127d4:	1c02      	adds	r2, r0, #0
 80127d6:	701a      	strb	r2, [r3, #0]
 80127d8:	1d7b      	adds	r3, r7, #5
 80127da:	1c0a      	adds	r2, r1, #0
 80127dc:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(init || userToggle){
 80127de:	4b17      	ldr	r3, [pc, #92]	@ (801283c <SetDBLED+0x7c>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d103      	bne.n	80127ee <SetDBLED+0x2e>
 80127e6:	4b16      	ldr	r3, [pc, #88]	@ (8012840 <SetDBLED+0x80>)
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d022      	beq.n	8012834 <SetDBLED+0x74>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80127ee:	1dfb      	adds	r3, r7, #7
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2201      	movs	r2, #1
 80127f4:	4053      	eors	r3, r2
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	001a      	movs	r2, r3
 80127fa:	4b12      	ldr	r3, [pc, #72]	@ (8012844 <SetDBLED+0x84>)
 80127fc:	2101      	movs	r1, #1
 80127fe:	0018      	movs	r0, r3
 8012800:	f003 fac5 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012804:	1dbb      	adds	r3, r7, #6
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	2201      	movs	r2, #1
 801280a:	4053      	eors	r3, r2
 801280c:	b2db      	uxtb	r3, r3
 801280e:	001a      	movs	r2, r3
 8012810:	2380      	movs	r3, #128	@ 0x80
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	480b      	ldr	r0, [pc, #44]	@ (8012844 <SetDBLED+0x84>)
 8012816:	0019      	movs	r1, r3
 8012818:	f003 fab9 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 801281c:	1d7b      	adds	r3, r7, #5
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	2201      	movs	r2, #1
 8012822:	4053      	eors	r3, r2
 8012824:	b2db      	uxtb	r3, r3
 8012826:	001a      	movs	r2, r3
 8012828:	2380      	movs	r3, #128	@ 0x80
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	4805      	ldr	r0, [pc, #20]	@ (8012844 <SetDBLED+0x84>)
 801282e:	0019      	movs	r1, r3
 8012830:	f003 faad 	bl	8015d8e <HAL_GPIO_WritePin>
  }
}
 8012834:	46c0      	nop			@ (mov r8, r8)
 8012836:	46bd      	mov	sp, r7
 8012838:	b003      	add	sp, #12
 801283a:	bd90      	pop	{r4, r7, pc}
 801283c:	200000e8 	.word	0x200000e8
 8012840:	2000214e 	.word	0x2000214e
 8012844:	50000400 	.word	0x50000400

08012848 <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012848:	b590      	push	{r4, r7, lr}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	0004      	movs	r4, r0
 8012850:	0008      	movs	r0, r1
 8012852:	0011      	movs	r1, r2
 8012854:	1dbb      	adds	r3, r7, #6
 8012856:	1c22      	adds	r2, r4, #0
 8012858:	801a      	strh	r2, [r3, #0]
 801285a:	1d3b      	adds	r3, r7, #4
 801285c:	1c02      	adds	r2, r0, #0
 801285e:	801a      	strh	r2, [r3, #0]
 8012860:	1cbb      	adds	r3, r7, #2
 8012862:	1c0a      	adds	r2, r1, #0
 8012864:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 8012866:	4b0c      	ldr	r3, [pc, #48]	@ (8012898 <SetVocLED+0x50>)
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d103      	bne.n	8012876 <SetVocLED+0x2e>
 801286e:	4b0b      	ldr	r3, [pc, #44]	@ (801289c <SetVocLED+0x54>)
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00b      	beq.n	801288e <SetVocLED+0x46>
    TIM3 -> CCR1 = red;
 8012876:	4b0a      	ldr	r3, [pc, #40]	@ (80128a0 <SetVocLED+0x58>)
 8012878:	1dba      	adds	r2, r7, #6
 801287a:	8812      	ldrh	r2, [r2, #0]
 801287c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 801287e:	4b08      	ldr	r3, [pc, #32]	@ (80128a0 <SetVocLED+0x58>)
 8012880:	1d3a      	adds	r2, r7, #4
 8012882:	8812      	ldrh	r2, [r2, #0]
 8012884:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8012886:	4b06      	ldr	r3, [pc, #24]	@ (80128a0 <SetVocLED+0x58>)
 8012888:	1cba      	adds	r2, r7, #2
 801288a:	8812      	ldrh	r2, [r2, #0]
 801288c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801288e:	46c0      	nop			@ (mov r8, r8)
 8012890:	46bd      	mov	sp, r7
 8012892:	b003      	add	sp, #12
 8012894:	bd90      	pop	{r4, r7, pc}
 8012896:	46c0      	nop			@ (mov r8, r8)
 8012898:	200000e8 	.word	0x200000e8
 801289c:	2000214e 	.word	0x2000214e
 80128a0:	40000400 	.word	0x40000400

080128a4 <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 80128a4:	b580      	push	{r7, lr}
 80128a6:	af00      	add	r7, sp, #0
  if(userToggle){
 80128a8:	4b06      	ldr	r3, [pc, #24]	@ (80128c4 <SetMeasurementIndicator+0x20>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d006      	beq.n	80128be <SetMeasurementIndicator+0x1a>
    TIM2 -> CCR3 = Calculate_LED_ON();
 80128b0:	f7ff ff10 	bl	80126d4 <Calculate_LED_ON>
 80128b4:	0003      	movs	r3, r0
 80128b6:	001a      	movs	r2, r3
 80128b8:	2380      	movs	r3, #128	@ 0x80
 80128ba:	05db      	lsls	r3, r3, #23
 80128bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128be:	46c0      	nop			@ (mov r8, r8)
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	2000214e 	.word	0x2000214e

080128c8 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80128c8:	b580      	push	{r7, lr}
 80128ca:	af00      	add	r7, sp, #0
  if(userToggle){
 80128cc:	4b05      	ldr	r3, [pc, #20]	@ (80128e4 <ResetMeasurementIndicator+0x1c>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d004      	beq.n	80128de <ResetMeasurementIndicator+0x16>
    TIM2 -> CCR3 = LED_OFF;
 80128d4:	2380      	movs	r3, #128	@ 0x80
 80128d6:	05db      	lsls	r3, r3, #23
 80128d8:	22fa      	movs	r2, #250	@ 0xfa
 80128da:	0112      	lsls	r2, r2, #4
 80128dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128de:	46c0      	nop			@ (mov r8, r8)
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	2000214e 	.word	0x2000214e

080128e8 <SetChargeIndicator>:

void SetChargeIndicator(){
 80128e8:	b580      	push	{r7, lr}
 80128ea:	af00      	add	r7, sp, #0
  if(usbPluggedIn){
 80128ec:	4b19      	ldr	r3, [pc, #100]	@ (8012954 <SetChargeIndicator+0x6c>)
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d011      	beq.n	8012918 <SetChargeIndicator+0x30>
    if (batteryChargeMode == CHARGING_ON) {
 80128f4:	4b18      	ldr	r3, [pc, #96]	@ (8012958 <SetChargeIndicator+0x70>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d10d      	bne.n	8012918 <SetChargeIndicator+0x30>
      TIM2 -> CCR1 = Calculate_LED_ON();  // red
 80128fc:	f7ff feea 	bl	80126d4 <Calculate_LED_ON>
 8012900:	0003      	movs	r3, r0
 8012902:	001a      	movs	r2, r3
 8012904:	2380      	movs	r3, #128	@ 0x80
 8012906:	05db      	lsls	r3, r3, #23
 8012908:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = Calculate_LED_ON();  //green, create yellow statusled
 801290a:	f7ff fee3 	bl	80126d4 <Calculate_LED_ON>
 801290e:	0003      	movs	r3, r0
 8012910:	001a      	movs	r2, r3
 8012912:	2380      	movs	r3, #128	@ 0x80
 8012914:	05db      	lsls	r3, r3, #23
 8012916:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }
  // in case of not charging or full only one color is active.
  if (batteryCharge > 3.7) {
 8012918:	4b10      	ldr	r3, [pc, #64]	@ (801295c <SetChargeIndicator+0x74>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	1c18      	adds	r0, r3, #0
 801291e:	f7f0 ffb9 	bl	8003894 <__aeabi_f2d>
 8012922:	4a0f      	ldr	r2, [pc, #60]	@ (8012960 <SetChargeIndicator+0x78>)
 8012924:	4b0f      	ldr	r3, [pc, #60]	@ (8012964 <SetChargeIndicator+0x7c>)
 8012926:	f7ed fddd 	bl	80004e4 <__aeabi_dcmpgt>
 801292a:	1e03      	subs	r3, r0, #0
 801292c:	d007      	beq.n	801293e <SetChargeIndicator+0x56>
    TIM2 -> CCR3 = Calculate_LED_ON();  // green
 801292e:	f7ff fed1 	bl	80126d4 <Calculate_LED_ON>
 8012932:	0003      	movs	r3, r0
 8012934:	001a      	movs	r2, r3
 8012936:	2380      	movs	r3, #128	@ 0x80
 8012938:	05db      	lsls	r3, r3, #23
 801293a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  else {
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
  }
}
 801293c:	e006      	b.n	801294c <SetChargeIndicator+0x64>
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
 801293e:	f7ff fec9 	bl	80126d4 <Calculate_LED_ON>
 8012942:	0003      	movs	r3, r0
 8012944:	001a      	movs	r2, r3
 8012946:	2380      	movs	r3, #128	@ 0x80
 8012948:	05db      	lsls	r3, r3, #23
 801294a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801294c:	46c0      	nop			@ (mov r8, r8)
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	46c0      	nop			@ (mov r8, r8)
 8012954:	2000214d 	.word	0x2000214d
 8012958:	2000215c 	.word	0x2000215c
 801295c:	20002158 	.word	0x20002158
 8012960:	9999999a 	.word	0x9999999a
 8012964:	400d9999 	.word	0x400d9999

08012968 <ResetChargeIndicator>:

void ResetChargeIndicator(){
 8012968:	b580      	push	{r7, lr}
 801296a:	af00      	add	r7, sp, #0
      TIM2 -> CCR3 = LED_OFF;
 801296c:	2380      	movs	r3, #128	@ 0x80
 801296e:	05db      	lsls	r3, r3, #23
 8012970:	22fa      	movs	r2, #250	@ 0xfa
 8012972:	0112      	lsls	r2, r2, #4
 8012974:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR1 = LED_OFF;
 8012976:	2380      	movs	r3, #128	@ 0x80
 8012978:	05db      	lsls	r3, r3, #23
 801297a:	22fa      	movs	r2, #250	@ 0xfa
 801297c:	0112      	lsls	r2, r2, #4
 801297e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012980:	46c0      	nop			@ (mov r8, r8)
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
	...

08012988 <SetESPIndicator>:

void SetESPIndicator(){
 8012988:	b580      	push	{r7, lr}
 801298a:	af00      	add	r7, sp, #0
  if(userToggle){
 801298c:	4b06      	ldr	r3, [pc, #24]	@ (80129a8 <SetESPIndicator+0x20>)
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d006      	beq.n	80129a2 <SetESPIndicator+0x1a>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012994:	f7ff fe9e 	bl	80126d4 <Calculate_LED_ON>
 8012998:	0003      	movs	r3, r0
 801299a:	001a      	movs	r2, r3
 801299c:	2380      	movs	r3, #128	@ 0x80
 801299e:	05db      	lsls	r3, r3, #23
 80129a0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129a2:	46c0      	nop			@ (mov r8, r8)
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}
 80129a8:	2000214e 	.word	0x2000214e

080129ac <ResetESPIndicator>:
void ResetESPIndicator(){
 80129ac:	b580      	push	{r7, lr}
 80129ae:	af00      	add	r7, sp, #0
  if(userToggle){
 80129b0:	4b05      	ldr	r3, [pc, #20]	@ (80129c8 <ResetESPIndicator+0x1c>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d004      	beq.n	80129c2 <ResetESPIndicator+0x16>
    TIM2 -> CCR4 = LED_OFF;
 80129b8:	2380      	movs	r3, #128	@ 0x80
 80129ba:	05db      	lsls	r3, r3, #23
 80129bc:	22fa      	movs	r2, #250	@ 0xfa
 80129be:	0112      	lsls	r2, r2, #4
 80129c0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129c2:	46c0      	nop			@ (mov r8, r8)
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	2000214e 	.word	0x2000214e

080129cc <SetPMIndicator>:

void SetPMIndicator() {
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
  if(userToggle){
 80129d0:	4b0d      	ldr	r3, [pc, #52]	@ (8012a08 <SetPMIndicator+0x3c>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d014      	beq.n	8012a02 <SetPMIndicator+0x36>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80129d8:	f7ff fe7c 	bl	80126d4 <Calculate_LED_ON>
 80129dc:	0003      	movs	r3, r0
 80129de:	001a      	movs	r2, r3
 80129e0:	2380      	movs	r3, #128	@ 0x80
 80129e2:	05db      	lsls	r3, r3, #23
 80129e4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 80129e6:	f7ff fe75 	bl	80126d4 <Calculate_LED_ON>
 80129ea:	0003      	movs	r3, r0
 80129ec:	001a      	movs	r2, r3
 80129ee:	2380      	movs	r3, #128	@ 0x80
 80129f0:	05db      	lsls	r3, r3, #23
 80129f2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 80129f4:	f7ff fe6e 	bl	80126d4 <Calculate_LED_ON>
 80129f8:	0003      	movs	r3, r0
 80129fa:	001a      	movs	r2, r3
 80129fc:	2380      	movs	r3, #128	@ 0x80
 80129fe:	05db      	lsls	r3, r3, #23
 8012a00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a02:	46c0      	nop			@ (mov r8, r8)
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	2000214e 	.word	0x2000214e

08012a0c <ResetPMIndicator>:

void ResetPMIndicator() {
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	af00      	add	r7, sp, #0
  if(userToggle){
 8012a10:	4b0a      	ldr	r3, [pc, #40]	@ (8012a3c <ResetPMIndicator+0x30>)
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d00e      	beq.n	8012a36 <ResetPMIndicator+0x2a>
    TIM2 -> CCR4 = LED_OFF;
 8012a18:	2380      	movs	r3, #128	@ 0x80
 8012a1a:	05db      	lsls	r3, r3, #23
 8012a1c:	22fa      	movs	r2, #250	@ 0xfa
 8012a1e:	0112      	lsls	r2, r2, #4
 8012a20:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012a22:	2380      	movs	r3, #128	@ 0x80
 8012a24:	05db      	lsls	r3, r3, #23
 8012a26:	22fa      	movs	r2, #250	@ 0xfa
 8012a28:	0112      	lsls	r2, r2, #4
 8012a2a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012a2c:	2380      	movs	r3, #128	@ 0x80
 8012a2e:	05db      	lsls	r3, r3, #23
 8012a30:	22fa      	movs	r2, #250	@ 0xfa
 8012a32:	0112      	lsls	r2, r2, #4
 8012a34:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a36:	46c0      	nop			@ (mov r8, r8)
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	2000214e 	.word	0x2000214e

08012a40 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012a44:	23fa      	movs	r3, #250	@ 0xfa
 8012a46:	011a      	lsls	r2, r3, #4
 8012a48:	23fa      	movs	r3, #250	@ 0xfa
 8012a4a:	0119      	lsls	r1, r3, #4
 8012a4c:	23fa      	movs	r3, #250	@ 0xfa
 8012a4e:	011b      	lsls	r3, r3, #4
 8012a50:	0018      	movs	r0, r3
 8012a52:	f7ff fe87 	bl	8012764 <SetStatusLED>
  SetDBLED(false,false,false);
 8012a56:	2200      	movs	r2, #0
 8012a58:	2100      	movs	r1, #0
 8012a5a:	2000      	movs	r0, #0
 8012a5c:	f7ff feb0 	bl	80127c0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012a60:	23fa      	movs	r3, #250	@ 0xfa
 8012a62:	011a      	lsls	r2, r3, #4
 8012a64:	23fa      	movs	r3, #250	@ 0xfa
 8012a66:	0119      	lsls	r1, r3, #4
 8012a68:	23fa      	movs	r3, #250	@ 0xfa
 8012a6a:	011b      	lsls	r3, r3, #4
 8012a6c:	0018      	movs	r0, r3
 8012a6e:	f7ff feeb 	bl	8012848 <SetVocLED>
return;
 8012a72:	46c0      	nop			@ (mov r8, r8)
}
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <SetAllREDLED>:

void SetAllREDLED() {
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012a7c:	f7ff ffe0 	bl	8012a40 <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012a80:	2380      	movs	r3, #128	@ 0x80
 8012a82:	05db      	lsls	r3, r3, #23
 8012a84:	4a20      	ldr	r2, [pc, #128]	@ (8012b08 <SetAllREDLED+0x90>)
 8012a86:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012a88:	2380      	movs	r3, #128	@ 0x80
 8012a8a:	05db      	lsls	r3, r3, #23
 8012a8c:	22fa      	movs	r2, #250	@ 0xfa
 8012a8e:	0112      	lsls	r2, r2, #4
 8012a90:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012a92:	2380      	movs	r3, #128	@ 0x80
 8012a94:	05db      	lsls	r3, r3, #23
 8012a96:	22fa      	movs	r2, #250	@ 0xfa
 8012a98:	0112      	lsls	r2, r2, #4
 8012a9a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8012b0c <SetAllREDLED+0x94>)
 8012a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8012b08 <SetAllREDLED+0x90>)
 8012aa0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8012b0c <SetAllREDLED+0x94>)
 8012aa4:	22fa      	movs	r2, #250	@ 0xfa
 8012aa6:	0112      	lsls	r2, r2, #4
 8012aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012aaa:	4b18      	ldr	r3, [pc, #96]	@ (8012b0c <SetAllREDLED+0x94>)
 8012aac:	22fa      	movs	r2, #250	@ 0xfa
 8012aae:	0112      	lsls	r2, r2, #4
 8012ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012ab2:	4b17      	ldr	r3, [pc, #92]	@ (8012b10 <SetAllREDLED+0x98>)
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	2101      	movs	r1, #1
 8012ab8:	0018      	movs	r0, r3
 8012aba:	f003 f968 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012abe:	2380      	movs	r3, #128	@ 0x80
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	4813      	ldr	r0, [pc, #76]	@ (8012b10 <SetAllREDLED+0x98>)
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	0019      	movs	r1, r3
 8012ac8:	f003 f961 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012acc:	2380      	movs	r3, #128	@ 0x80
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	480f      	ldr	r0, [pc, #60]	@ (8012b10 <SetAllREDLED+0x98>)
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	0019      	movs	r1, r3
 8012ad6:	f003 f95a 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012ada:	23fa      	movs	r3, #250	@ 0xfa
 8012adc:	005b      	lsls	r3, r3, #1
 8012ade:	0018      	movs	r0, r3
 8012ae0:	f001 fef8 	bl	80148d4 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012ae4:	2380      	movs	r3, #128	@ 0x80
 8012ae6:	05db      	lsls	r3, r3, #23
 8012ae8:	22fa      	movs	r2, #250	@ 0xfa
 8012aea:	0112      	lsls	r2, r2, #4
 8012aec:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012aee:	4b07      	ldr	r3, [pc, #28]	@ (8012b0c <SetAllREDLED+0x94>)
 8012af0:	22fa      	movs	r2, #250	@ 0xfa
 8012af2:	0112      	lsls	r2, r2, #4
 8012af4:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012af6:	4b06      	ldr	r3, [pc, #24]	@ (8012b10 <SetAllREDLED+0x98>)
 8012af8:	2201      	movs	r2, #1
 8012afa:	2101      	movs	r1, #1
 8012afc:	0018      	movs	r0, r3
 8012afe:	f003 f946 	bl	8015d8e <HAL_GPIO_WritePin>
}
 8012b02:	46c0      	nop			@ (mov r8, r8)
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	00000bb8 	.word	0x00000bb8
 8012b0c:	40000400 	.word	0x40000400
 8012b10:	50000400 	.word	0x50000400

08012b14 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b18:	f7ff ff92 	bl	8012a40 <SetLEDsOff>
  HAL_Delay(100);
 8012b1c:	2064      	movs	r0, #100	@ 0x64
 8012b1e:	f001 fed9 	bl	80148d4 <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012b22:	4b24      	ldr	r3, [pc, #144]	@ (8012bb4 <WalkAllRedLED+0xa0>)
 8012b24:	4a24      	ldr	r2, [pc, #144]	@ (8012bb8 <WalkAllRedLED+0xa4>)
 8012b26:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012b28:	4b22      	ldr	r3, [pc, #136]	@ (8012bb4 <WalkAllRedLED+0xa0>)
 8012b2a:	22fa      	movs	r2, #250	@ 0xfa
 8012b2c:	0112      	lsls	r2, r2, #4
 8012b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012b30:	4b20      	ldr	r3, [pc, #128]	@ (8012bb4 <WalkAllRedLED+0xa0>)
 8012b32:	22fa      	movs	r2, #250	@ 0xfa
 8012b34:	0112      	lsls	r2, r2, #4
 8012b36:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012b38:	2064      	movs	r0, #100	@ 0x64
 8012b3a:	f001 fecb 	bl	80148d4 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8012bb4 <WalkAllRedLED+0xa0>)
 8012b40:	22fa      	movs	r2, #250	@ 0xfa
 8012b42:	0112      	lsls	r2, r2, #4
 8012b44:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012b46:	4b1d      	ldr	r3, [pc, #116]	@ (8012bbc <WalkAllRedLED+0xa8>)
 8012b48:	2200      	movs	r2, #0
 8012b4a:	2101      	movs	r1, #1
 8012b4c:	0018      	movs	r0, r3
 8012b4e:	f003 f91e 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012b52:	2380      	movs	r3, #128	@ 0x80
 8012b54:	005b      	lsls	r3, r3, #1
 8012b56:	4819      	ldr	r0, [pc, #100]	@ (8012bbc <WalkAllRedLED+0xa8>)
 8012b58:	2201      	movs	r2, #1
 8012b5a:	0019      	movs	r1, r3
 8012b5c:	f003 f917 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012b60:	2380      	movs	r3, #128	@ 0x80
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	4815      	ldr	r0, [pc, #84]	@ (8012bbc <WalkAllRedLED+0xa8>)
 8012b66:	2201      	movs	r2, #1
 8012b68:	0019      	movs	r1, r3
 8012b6a:	f003 f910 	bl	8015d8e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012b6e:	2064      	movs	r0, #100	@ 0x64
 8012b70:	f001 feb0 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012b74:	4b11      	ldr	r3, [pc, #68]	@ (8012bbc <WalkAllRedLED+0xa8>)
 8012b76:	2201      	movs	r2, #1
 8012b78:	2101      	movs	r1, #1
 8012b7a:	0018      	movs	r0, r3
 8012b7c:	f003 f907 	bl	8015d8e <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012b80:	2380      	movs	r3, #128	@ 0x80
 8012b82:	05db      	lsls	r3, r3, #23
 8012b84:	4a0c      	ldr	r2, [pc, #48]	@ (8012bb8 <WalkAllRedLED+0xa4>)
 8012b86:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012b88:	2380      	movs	r3, #128	@ 0x80
 8012b8a:	05db      	lsls	r3, r3, #23
 8012b8c:	22fa      	movs	r2, #250	@ 0xfa
 8012b8e:	0112      	lsls	r2, r2, #4
 8012b90:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012b92:	2380      	movs	r3, #128	@ 0x80
 8012b94:	05db      	lsls	r3, r3, #23
 8012b96:	22fa      	movs	r2, #250	@ 0xfa
 8012b98:	0112      	lsls	r2, r2, #4
 8012b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012b9c:	2064      	movs	r0, #100	@ 0x64
 8012b9e:	f001 fe99 	bl	80148d4 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012ba2:	2380      	movs	r3, #128	@ 0x80
 8012ba4:	05db      	lsls	r3, r3, #23
 8012ba6:	22fa      	movs	r2, #250	@ 0xfa
 8012ba8:	0112      	lsls	r2, r2, #4
 8012baa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012bac:	46c0      	nop			@ (mov r8, r8)
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	46c0      	nop			@ (mov r8, r8)
 8012bb4:	40000400 	.word	0x40000400
 8012bb8:	00000bb8 	.word	0x00000bb8
 8012bbc:	50000400 	.word	0x50000400

08012bc0 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012bc6:	1dfb      	adds	r3, r7, #7
 8012bc8:	2200      	movs	r2, #0
 8012bca:	701a      	strb	r2, [r3, #0]
 8012bcc:	e040      	b.n	8012c50 <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012bce:	2380      	movs	r3, #128	@ 0x80
 8012bd0:	05db      	lsls	r3, r3, #23
 8012bd2:	22fa      	movs	r2, #250	@ 0xfa
 8012bd4:	0112      	lsls	r2, r2, #4
 8012bd6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012bd8:	2380      	movs	r3, #128	@ 0x80
 8012bda:	05db      	lsls	r3, r3, #23
 8012bdc:	22fa      	movs	r2, #250	@ 0xfa
 8012bde:	0112      	lsls	r2, r2, #4
 8012be0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012be2:	2380      	movs	r3, #128	@ 0x80
 8012be4:	05db      	lsls	r3, r3, #23
 8012be6:	4a1f      	ldr	r2, [pc, #124]	@ (8012c64 <SetAllBlueLED+0xa4>)
 8012be8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012bea:	4b1f      	ldr	r3, [pc, #124]	@ (8012c68 <SetAllBlueLED+0xa8>)
 8012bec:	22fa      	movs	r2, #250	@ 0xfa
 8012bee:	0112      	lsls	r2, r2, #4
 8012bf0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8012c68 <SetAllBlueLED+0xa8>)
 8012bf4:	22fa      	movs	r2, #250	@ 0xfa
 8012bf6:	0112      	lsls	r2, r2, #4
 8012bf8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8012c68 <SetAllBlueLED+0xa8>)
 8012bfc:	4a19      	ldr	r2, [pc, #100]	@ (8012c64 <SetAllBlueLED+0xa4>)
 8012bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012c00:	4b1a      	ldr	r3, [pc, #104]	@ (8012c6c <SetAllBlueLED+0xac>)
 8012c02:	2201      	movs	r2, #1
 8012c04:	2101      	movs	r1, #1
 8012c06:	0018      	movs	r0, r3
 8012c08:	f003 f8c1 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012c0c:	2380      	movs	r3, #128	@ 0x80
 8012c0e:	005b      	lsls	r3, r3, #1
 8012c10:	4816      	ldr	r0, [pc, #88]	@ (8012c6c <SetAllBlueLED+0xac>)
 8012c12:	2201      	movs	r2, #1
 8012c14:	0019      	movs	r1, r3
 8012c16:	f003 f8ba 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012c1a:	2380      	movs	r3, #128	@ 0x80
 8012c1c:	009b      	lsls	r3, r3, #2
 8012c1e:	4813      	ldr	r0, [pc, #76]	@ (8012c6c <SetAllBlueLED+0xac>)
 8012c20:	2200      	movs	r2, #0
 8012c22:	0019      	movs	r1, r3
 8012c24:	f003 f8b3 	bl	8015d8e <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012c28:	20fa      	movs	r0, #250	@ 0xfa
 8012c2a:	f001 fe53 	bl	80148d4 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012c2e:	2380      	movs	r3, #128	@ 0x80
 8012c30:	05db      	lsls	r3, r3, #23
 8012c32:	22fa      	movs	r2, #250	@ 0xfa
 8012c34:	0112      	lsls	r2, r2, #4
 8012c36:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012c38:	2380      	movs	r3, #128	@ 0x80
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	480b      	ldr	r0, [pc, #44]	@ (8012c6c <SetAllBlueLED+0xac>)
 8012c3e:	2201      	movs	r2, #1
 8012c40:	0019      	movs	r1, r3
 8012c42:	f003 f8a4 	bl	8015d8e <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012c46:	1dfb      	adds	r3, r7, #7
 8012c48:	781a      	ldrb	r2, [r3, #0]
 8012c4a:	1dfb      	adds	r3, r7, #7
 8012c4c:	3201      	adds	r2, #1
 8012c4e:	701a      	strb	r2, [r3, #0]
 8012c50:	1dfb      	adds	r3, r7, #7
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	d9ba      	bls.n	8012bce <SetAllBlueLED+0xe>
  }
}
 8012c58:	46c0      	nop			@ (mov r8, r8)
 8012c5a:	46c0      	nop			@ (mov r8, r8)
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	b002      	add	sp, #8
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	46c0      	nop			@ (mov r8, r8)
 8012c64:	00000bb8 	.word	0x00000bb8
 8012c68:	40000400 	.word	0x40000400
 8012c6c:	50000400 	.word	0x50000400

08012c70 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012c70:	b5b0      	push	{r4, r5, r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	0002      	movs	r2, r0
 8012c78:	1dbb      	adds	r3, r7, #6
 8012c7a:	801a      	strh	r2, [r3, #0]
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012c7c:	1dbb      	adds	r3, r7, #6
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d05a      	beq.n	8012d3a <SetVOCindicator+0xca>
 8012c84:	1dbb      	adds	r3, r7, #6
 8012c86:	881b      	ldrh	r3, [r3, #0]
 8012c88:	2b64      	cmp	r3, #100	@ 0x64
 8012c8a:	d856      	bhi.n	8012d3a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012c8c:	1dbb      	adds	r3, r7, #6
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	0018      	movs	r0, r3
 8012c92:	f7f0 fdad 	bl	80037f0 <__aeabi_i2d>
 8012c96:	2200      	movs	r2, #0
 8012c98:	4b5f      	ldr	r3, [pc, #380]	@ (8012e18 <SetVOCindicator+0x1a8>)
 8012c9a:	f7ef fa21 	bl	80020e0 <__aeabi_ddiv>
 8012c9e:	0002      	movs	r2, r0
 8012ca0:	000b      	movs	r3, r1
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	495d      	ldr	r1, [pc, #372]	@ (8012e1c <SetVOCindicator+0x1ac>)
 8012ca6:	f7f0 f93b 	bl	8002f20 <__aeabi_dsub>
 8012caa:	0002      	movs	r2, r0
 8012cac:	000b      	movs	r3, r1
 8012cae:	0014      	movs	r4, r2
 8012cb0:	001d      	movs	r5, r3
 8012cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8012e20 <SetVOCindicator+0x1b0>)
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	0018      	movs	r0, r3
 8012cb8:	f7f0 fd9a 	bl	80037f0 <__aeabi_i2d>
 8012cbc:	0002      	movs	r2, r0
 8012cbe:	000b      	movs	r3, r1
 8012cc0:	0020      	movs	r0, r4
 8012cc2:	0029      	movs	r1, r5
 8012cc4:	f7ef fe46 	bl	8002954 <__aeabi_dmul>
 8012cc8:	0002      	movs	r2, r0
 8012cca:	000b      	movs	r3, r1
 8012ccc:	0010      	movs	r0, r2
 8012cce:	0019      	movs	r1, r3
 8012cd0:	f7ed fcbc 	bl	800064c <__aeabi_d2uiz>
 8012cd4:	0003      	movs	r3, r0
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	4b52      	ldr	r3, [pc, #328]	@ (8012e24 <SetVOCindicator+0x1b4>)
 8012cda:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012cdc:	1dbb      	adds	r3, r7, #6
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	0018      	movs	r0, r3
 8012ce2:	f7f0 fd85 	bl	80037f0 <__aeabi_i2d>
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8012e18 <SetVOCindicator+0x1a8>)
 8012cea:	f7ef f9f9 	bl	80020e0 <__aeabi_ddiv>
 8012cee:	0002      	movs	r2, r0
 8012cf0:	000b      	movs	r3, r1
 8012cf2:	0014      	movs	r4, r2
 8012cf4:	001d      	movs	r5, r3
 8012cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8012e20 <SetVOCindicator+0x1b0>)
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	0018      	movs	r0, r3
 8012cfc:	f7f0 fd78 	bl	80037f0 <__aeabi_i2d>
 8012d00:	0002      	movs	r2, r0
 8012d02:	000b      	movs	r3, r1
 8012d04:	0020      	movs	r0, r4
 8012d06:	0029      	movs	r1, r5
 8012d08:	f7ef fe24 	bl	8002954 <__aeabi_dmul>
 8012d0c:	0002      	movs	r2, r0
 8012d0e:	000b      	movs	r3, r1
 8012d10:	0010      	movs	r0, r2
 8012d12:	0019      	movs	r1, r3
 8012d14:	f7ed fc9a 	bl	800064c <__aeabi_d2uiz>
 8012d18:	0003      	movs	r3, r0
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	4b42      	ldr	r3, [pc, #264]	@ (8012e28 <SetVOCindicator+0x1b8>)
 8012d1e:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012d20:	4b3f      	ldr	r3, [pc, #252]	@ (8012e20 <SetVOCindicator+0x1b0>)
 8012d22:	881a      	ldrh	r2, [r3, #0]
 8012d24:	4b41      	ldr	r3, [pc, #260]	@ (8012e2c <SetVOCindicator+0x1bc>)
 8012d26:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012d28:	4b40      	ldr	r3, [pc, #256]	@ (8012e2c <SetVOCindicator+0x1bc>)
 8012d2a:	8818      	ldrh	r0, [r3, #0]
 8012d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8012e24 <SetVOCindicator+0x1b4>)
 8012d2e:	8819      	ldrh	r1, [r3, #0]
 8012d30:	4b3d      	ldr	r3, [pc, #244]	@ (8012e28 <SetVOCindicator+0x1b8>)
 8012d32:	881b      	ldrh	r3, [r3, #0]
 8012d34:	001a      	movs	r2, r3
 8012d36:	f7ff fd87 	bl	8012848 <SetVocLED>
  }
  if(VOCi > 100){
 8012d3a:	1dbb      	adds	r3, r7, #6
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	2b64      	cmp	r3, #100	@ 0x64
 8012d40:	d966      	bls.n	8012e10 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012d42:	1dbb      	adds	r3, r7, #6
 8012d44:	881b      	ldrh	r3, [r3, #0]
 8012d46:	0018      	movs	r0, r3
 8012d48:	f7f0 fd52 	bl	80037f0 <__aeabi_i2d>
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	4b32      	ldr	r3, [pc, #200]	@ (8012e18 <SetVOCindicator+0x1a8>)
 8012d50:	f7f0 f8e6 	bl	8002f20 <__aeabi_dsub>
 8012d54:	0002      	movs	r2, r0
 8012d56:	000b      	movs	r3, r1
 8012d58:	0010      	movs	r0, r2
 8012d5a:	0019      	movs	r1, r3
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	4b34      	ldr	r3, [pc, #208]	@ (8012e30 <SetVOCindicator+0x1c0>)
 8012d60:	f7ef f9be 	bl	80020e0 <__aeabi_ddiv>
 8012d64:	0002      	movs	r2, r0
 8012d66:	000b      	movs	r3, r1
 8012d68:	0014      	movs	r4, r2
 8012d6a:	001d      	movs	r5, r3
 8012d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8012e20 <SetVOCindicator+0x1b0>)
 8012d6e:	881b      	ldrh	r3, [r3, #0]
 8012d70:	0018      	movs	r0, r3
 8012d72:	f7f0 fd3d 	bl	80037f0 <__aeabi_i2d>
 8012d76:	0002      	movs	r2, r0
 8012d78:	000b      	movs	r3, r1
 8012d7a:	0020      	movs	r0, r4
 8012d7c:	0029      	movs	r1, r5
 8012d7e:	f7ef fde9 	bl	8002954 <__aeabi_dmul>
 8012d82:	0002      	movs	r2, r0
 8012d84:	000b      	movs	r3, r1
 8012d86:	0010      	movs	r0, r2
 8012d88:	0019      	movs	r1, r3
 8012d8a:	f7ed fc5f 	bl	800064c <__aeabi_d2uiz>
 8012d8e:	0003      	movs	r3, r0
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	4b24      	ldr	r3, [pc, #144]	@ (8012e24 <SetVOCindicator+0x1b4>)
 8012d94:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012d96:	1dbb      	adds	r3, r7, #6
 8012d98:	881b      	ldrh	r3, [r3, #0]
 8012d9a:	0018      	movs	r0, r3
 8012d9c:	f7f0 fd28 	bl	80037f0 <__aeabi_i2d>
 8012da0:	2200      	movs	r2, #0
 8012da2:	4b1d      	ldr	r3, [pc, #116]	@ (8012e18 <SetVOCindicator+0x1a8>)
 8012da4:	f7f0 f8bc 	bl	8002f20 <__aeabi_dsub>
 8012da8:	0002      	movs	r2, r0
 8012daa:	000b      	movs	r3, r1
 8012dac:	0010      	movs	r0, r2
 8012dae:	0019      	movs	r1, r3
 8012db0:	2200      	movs	r2, #0
 8012db2:	4b1f      	ldr	r3, [pc, #124]	@ (8012e30 <SetVOCindicator+0x1c0>)
 8012db4:	f7ef f994 	bl	80020e0 <__aeabi_ddiv>
 8012db8:	0002      	movs	r2, r0
 8012dba:	000b      	movs	r3, r1
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	4917      	ldr	r1, [pc, #92]	@ (8012e1c <SetVOCindicator+0x1ac>)
 8012dc0:	f7f0 f8ae 	bl	8002f20 <__aeabi_dsub>
 8012dc4:	0002      	movs	r2, r0
 8012dc6:	000b      	movs	r3, r1
 8012dc8:	0014      	movs	r4, r2
 8012dca:	001d      	movs	r5, r3
 8012dcc:	4b14      	ldr	r3, [pc, #80]	@ (8012e20 <SetVOCindicator+0x1b0>)
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	0018      	movs	r0, r3
 8012dd2:	f7f0 fd0d 	bl	80037f0 <__aeabi_i2d>
 8012dd6:	0002      	movs	r2, r0
 8012dd8:	000b      	movs	r3, r1
 8012dda:	0020      	movs	r0, r4
 8012ddc:	0029      	movs	r1, r5
 8012dde:	f7ef fdb9 	bl	8002954 <__aeabi_dmul>
 8012de2:	0002      	movs	r2, r0
 8012de4:	000b      	movs	r3, r1
 8012de6:	0010      	movs	r0, r2
 8012de8:	0019      	movs	r1, r3
 8012dea:	f7ed fc2f 	bl	800064c <__aeabi_d2uiz>
 8012dee:	0003      	movs	r3, r0
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	4b0e      	ldr	r3, [pc, #56]	@ (8012e2c <SetVOCindicator+0x1bc>)
 8012df4:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012df6:	4b0a      	ldr	r3, [pc, #40]	@ (8012e20 <SetVOCindicator+0x1b0>)
 8012df8:	881a      	ldrh	r2, [r3, #0]
 8012dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8012e28 <SetVOCindicator+0x1b8>)
 8012dfc:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8012e2c <SetVOCindicator+0x1bc>)
 8012e00:	8818      	ldrh	r0, [r3, #0]
 8012e02:	4b08      	ldr	r3, [pc, #32]	@ (8012e24 <SetVOCindicator+0x1b4>)
 8012e04:	8819      	ldrh	r1, [r3, #0]
 8012e06:	4b08      	ldr	r3, [pc, #32]	@ (8012e28 <SetVOCindicator+0x1b8>)
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	001a      	movs	r2, r3
 8012e0c:	f7ff fd1c 	bl	8012848 <SetVocLED>
  }

}
 8012e10:	46c0      	nop			@ (mov r8, r8)
 8012e12:	46bd      	mov	sp, r7
 8012e14:	b002      	add	sp, #8
 8012e16:	bdb0      	pop	{r4, r5, r7, pc}
 8012e18:	40590000 	.word	0x40590000
 8012e1c:	3ff00000 	.word	0x3ff00000
 8012e20:	200000ea 	.word	0x200000ea
 8012e24:	20002160 	.word	0x20002160
 8012e28:	20002162 	.word	0x20002162
 8012e2c:	20002164 	.word	0x20002164
 8012e30:	40790000 	.word	0x40790000

08012e34 <powerCheck>:

void powerCheck(){
 8012e34:	b580      	push	{r7, lr}
 8012e36:	af00      	add	r7, sp, #0
  batteryChargeCheck();
 8012e38:	f7ff fbda 	bl	80125f0 <batteryChargeCheck>
  if(Check_USB_PowerOn()){
 8012e3c:	f7f6 fed0 	bl	8009be0 <Check_USB_PowerOn>
 8012e40:	1e03      	subs	r3, r0, #0
 8012e42:	d002      	beq.n	8012e4a <powerCheck+0x16>
    batteryStatus = USB_PLUGGED_IN;
 8012e44:	4b02      	ldr	r3, [pc, #8]	@ (8012e50 <powerCheck+0x1c>)
 8012e46:	2204      	movs	r2, #4
 8012e48:	701a      	strb	r2, [r3, #0]
  }
}
 8012e4a:	46c0      	nop			@ (mov r8, r8)
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	2000215d 	.word	0x2000215d

08012e54 <powerDisplay>:

void powerDisplay(){
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af02      	add	r7, sp, #8
  if(batteryStatus == USB_PLUGGED_IN){
 8012e5a:	4b32      	ldr	r3, [pc, #200]	@ (8012f24 <powerDisplay+0xd0>)
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	2b04      	cmp	r3, #4
 8012e60:	d10f      	bne.n	8012e82 <powerDisplay+0x2e>
    Debug("USB power detected, battery: %.03fV", ReadBatteryVoltage());
 8012e62:	f7f6 fe07 	bl	8009a74 <ReadBatteryVoltage>
 8012e66:	1c03      	adds	r3, r0, #0
 8012e68:	1c18      	adds	r0, r3, #0
 8012e6a:	f7f0 fd13 	bl	8003894 <__aeabi_f2d>
 8012e6e:	0002      	movs	r2, r0
 8012e70:	000b      	movs	r3, r1
 8012e72:	482d      	ldr	r0, [pc, #180]	@ (8012f28 <powerDisplay+0xd4>)
 8012e74:	492d      	ldr	r1, [pc, #180]	@ (8012f2c <powerDisplay+0xd8>)
 8012e76:	9200      	str	r2, [sp, #0]
 8012e78:	9301      	str	r3, [sp, #4]
 8012e7a:	0002      	movs	r2, r0
 8012e7c:	2003      	movs	r0, #3
 8012e7e:	f000 ff93 	bl	8013da8 <CreateLine>
  }
  if(batteryStatus == BATTERY_FULL){
 8012e82:	4b28      	ldr	r3, [pc, #160]	@ (8012f24 <powerDisplay+0xd0>)
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d105      	bne.n	8012e96 <powerDisplay+0x42>
    Debug("Battery fully charged");
 8012e8a:	4a29      	ldr	r2, [pc, #164]	@ (8012f30 <powerDisplay+0xdc>)
 8012e8c:	4b27      	ldr	r3, [pc, #156]	@ (8012f2c <powerDisplay+0xd8>)
 8012e8e:	0019      	movs	r1, r3
 8012e90:	2003      	movs	r0, #3
 8012e92:	f000 ff89 	bl	8013da8 <CreateLine>
  }
  if(batteryStatus == BATTERY_GOOD){
 8012e96:	4b23      	ldr	r3, [pc, #140]	@ (8012f24 <powerDisplay+0xd0>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	2b02      	cmp	r3, #2
 8012e9c:	d105      	bne.n	8012eaa <powerDisplay+0x56>
    Debug("Battery status good");
 8012e9e:	4a25      	ldr	r2, [pc, #148]	@ (8012f34 <powerDisplay+0xe0>)
 8012ea0:	4b22      	ldr	r3, [pc, #136]	@ (8012f2c <powerDisplay+0xd8>)
 8012ea2:	0019      	movs	r1, r3
 8012ea4:	2003      	movs	r0, #3
 8012ea6:	f000 ff7f 	bl	8013da8 <CreateLine>
  }
  if(batteryStatus == BATTERY_LOW){
 8012eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8012f24 <powerDisplay+0xd0>)
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2b01      	cmp	r3, #1
 8012eb0:	d105      	bne.n	8012ebe <powerDisplay+0x6a>
    Debug("Battery status low");
 8012eb2:	4a21      	ldr	r2, [pc, #132]	@ (8012f38 <powerDisplay+0xe4>)
 8012eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8012f2c <powerDisplay+0xd8>)
 8012eb6:	0019      	movs	r1, r3
 8012eb8:	2003      	movs	r0, #3
 8012eba:	f000 ff75 	bl	8013da8 <CreateLine>
  }
  if(batteryStatus == BATTERY_CRITICAL){
 8012ebe:	4b19      	ldr	r3, [pc, #100]	@ (8012f24 <powerDisplay+0xd0>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d105      	bne.n	8012ed2 <powerDisplay+0x7e>
    Debug("Battery is critical, stop processes");
 8012ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8012f3c <powerDisplay+0xe8>)
 8012ec8:	4b18      	ldr	r3, [pc, #96]	@ (8012f2c <powerDisplay+0xd8>)
 8012eca:	0019      	movs	r1, r3
 8012ecc:	2003      	movs	r0, #3
 8012ece:	f000 ff6b 	bl	8013da8 <CreateLine>
  }
  batteryChargeMode = Read_Charge_Status();
 8012ed2:	f7f6 fea3 	bl	8009c1c <Read_Charge_Status>
 8012ed6:	0003      	movs	r3, r0
 8012ed8:	001a      	movs	r2, r3
 8012eda:	4b19      	ldr	r3, [pc, #100]	@ (8012f40 <powerDisplay+0xec>)
 8012edc:	701a      	strb	r2, [r3, #0]
  switch (batteryChargeMode) {
 8012ede:	4b18      	ldr	r3, [pc, #96]	@ (8012f40 <powerDisplay+0xec>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d013      	beq.n	8012f0e <powerDisplay+0xba>
 8012ee6:	dc19      	bgt.n	8012f1c <powerDisplay+0xc8>
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d002      	beq.n	8012ef2 <powerDisplay+0x9e>
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d007      	beq.n	8012f00 <powerDisplay+0xac>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012ef0:	e014      	b.n	8012f1c <powerDisplay+0xc8>
    Debug("Battery charging off");
 8012ef2:	4a14      	ldr	r2, [pc, #80]	@ (8012f44 <powerDisplay+0xf0>)
 8012ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8012f2c <powerDisplay+0xd8>)
 8012ef6:	0019      	movs	r1, r3
 8012ef8:	2003      	movs	r0, #3
 8012efa:	f000 ff55 	bl	8013da8 <CreateLine>
    break;
 8012efe:	e00d      	b.n	8012f1c <powerDisplay+0xc8>
    Debug("Battery is charging");
 8012f00:	4a11      	ldr	r2, [pc, #68]	@ (8012f48 <powerDisplay+0xf4>)
 8012f02:	4b0a      	ldr	r3, [pc, #40]	@ (8012f2c <powerDisplay+0xd8>)
 8012f04:	0019      	movs	r1, r3
 8012f06:	2003      	movs	r0, #3
 8012f08:	f000 ff4e 	bl	8013da8 <CreateLine>
    break;
 8012f0c:	e006      	b.n	8012f1c <powerDisplay+0xc8>
    Debug("Battery full, charging off");
 8012f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8012f4c <powerDisplay+0xf8>)
 8012f10:	4b06      	ldr	r3, [pc, #24]	@ (8012f2c <powerDisplay+0xd8>)
 8012f12:	0019      	movs	r1, r3
 8012f14:	2003      	movs	r0, #3
 8012f16:	f000 ff47 	bl	8013da8 <CreateLine>
    break;
 8012f1a:	46c0      	nop			@ (mov r8, r8)
}
 8012f1c:	46c0      	nop			@ (mov r8, r8)
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	46c0      	nop			@ (mov r8, r8)
 8012f24:	2000215d 	.word	0x2000215d
 8012f28:	0802da00 	.word	0x0802da00
 8012f2c:	0802d9fc 	.word	0x0802d9fc
 8012f30:	0802da24 	.word	0x0802da24
 8012f34:	0802da3c 	.word	0x0802da3c
 8012f38:	0802da50 	.word	0x0802da50
 8012f3c:	0802da64 	.word	0x0802da64
 8012f40:	2000215c 	.word	0x2000215c
 8012f44:	0802da88 	.word	0x0802da88
 8012f48:	0802daa0 	.word	0x0802daa0
 8012f4c:	0802dab4 	.word	0x0802dab4

08012f50 <configCheck>:

void configCheck(){
 8012f50:	b590      	push	{r4, r7, lr}
 8012f52:	b083      	sub	sp, #12
 8012f54:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8012f56:	f7f6 febd 	bl	8009cd4 <BootButton_Pressed>
 8012f5a:	1e03      	subs	r3, r0, #0
 8012f5c:	d007      	beq.n	8012f6e <configCheck+0x1e>
 8012f5e:	f7f6 fecb 	bl	8009cf8 <UserButton_Pressed>
 8012f62:	1e03      	subs	r3, r0, #0
 8012f64:	d003      	beq.n	8012f6e <configCheck+0x1e>
    configSet = true;
 8012f66:	4bb5      	ldr	r3, [pc, #724]	@ (801323c <configCheck+0x2ec>)
 8012f68:	2201      	movs	r2, #1
 8012f6a:	701a      	strb	r2, [r3, #0]
 8012f6c:	e00a      	b.n	8012f84 <configCheck+0x34>
  }
  else{
    configSet = false;
 8012f6e:	4bb3      	ldr	r3, [pc, #716]	@ (801323c <configCheck+0x2ec>)
 8012f70:	2200      	movs	r2, #0
 8012f72:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8012f74:	f001 fca4 	bl	80148c0 <HAL_GetTick>
 8012f78:	0003      	movs	r3, r0
 8012f7a:	22fa      	movs	r2, #250	@ 0xfa
 8012f7c:	00d2      	lsls	r2, r2, #3
 8012f7e:	189a      	adds	r2, r3, r2
 8012f80:	4baf      	ldr	r3, [pc, #700]	@ (8013240 <configCheck+0x2f0>)
 8012f82:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8012f84:	4bad      	ldr	r3, [pc, #692]	@ (801323c <configCheck+0x2ec>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00d      	beq.n	8012fa8 <configCheck+0x58>
 8012f8c:	4bac      	ldr	r3, [pc, #688]	@ (8013240 <configCheck+0x2f0>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	0018      	movs	r0, r3
 8012f92:	f000 feb3 	bl	8013cfc <TimestampIsReached>
 8012f96:	1e03      	subs	r3, r0, #0
 8012f98:	d006      	beq.n	8012fa8 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8012f9a:	f7f1 ff25 	bl	8004de8 <SetConfigMode>
    SetDBLED(true, true, true);
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	2101      	movs	r1, #1
 8012fa2:	2001      	movs	r0, #1
 8012fa4:	f7ff fc0c 	bl	80127c0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8012fa8:	f7f6 fe94 	bl	8009cd4 <BootButton_Pressed>
 8012fac:	0003      	movs	r3, r0
 8012fae:	001a      	movs	r2, r3
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	4053      	eors	r3, r2
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d05a      	beq.n	8013070 <configCheck+0x120>
 8012fba:	f7f6 fe9d 	bl	8009cf8 <UserButton_Pressed>
 8012fbe:	1e03      	subs	r3, r0, #0
 8012fc0:	d056      	beq.n	8013070 <configCheck+0x120>
 8012fc2:	4ba0      	ldr	r3, [pc, #640]	@ (8013244 <configCheck+0x2f4>)
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	4053      	eors	r3, r2
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d04f      	beq.n	8013070 <configCheck+0x120>
 8012fd0:	f7f1 ff2a 	bl	8004e28 <GetReconfigMode>
 8012fd4:	0003      	movs	r3, r0
 8012fd6:	001a      	movs	r2, r3
 8012fd8:	2301      	movs	r3, #1
 8012fda:	4053      	eors	r3, r2
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d046      	beq.n	8013070 <configCheck+0x120>
    SetLEDsOff();
 8012fe2:	f7ff fd2d 	bl	8012a40 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8012fe6:	4a98      	ldr	r2, [pc, #608]	@ (8013248 <configCheck+0x2f8>)
 8012fe8:	4997      	ldr	r1, [pc, #604]	@ (8013248 <configCheck+0x2f8>)
 8012fea:	4b97      	ldr	r3, [pc, #604]	@ (8013248 <configCheck+0x2f8>)
 8012fec:	0018      	movs	r0, r3
 8012fee:	f7ff fc2b 	bl	8012848 <SetVocLED>
    HAL_Delay(1500);
 8012ff2:	4b96      	ldr	r3, [pc, #600]	@ (801324c <configCheck+0x2fc>)
 8012ff4:	0018      	movs	r0, r3
 8012ff6:	f001 fc6d 	bl	80148d4 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8012ffa:	23fa      	movs	r3, #250	@ 0xfa
 8012ffc:	011a      	lsls	r2, r3, #4
 8012ffe:	23fa      	movs	r3, #250	@ 0xfa
 8013000:	0119      	lsls	r1, r3, #4
 8013002:	23fa      	movs	r3, #250	@ 0xfa
 8013004:	011b      	lsls	r3, r3, #4
 8013006:	0018      	movs	r0, r3
 8013008:	f7ff fc1e 	bl	8012848 <SetVocLED>
    userToggle = !userToggle;
 801300c:	4b90      	ldr	r3, [pc, #576]	@ (8013250 <configCheck+0x300>)
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	1e5a      	subs	r2, r3, #1
 8013012:	4193      	sbcs	r3, r2
 8013014:	b2db      	uxtb	r3, r3
 8013016:	2201      	movs	r2, #1
 8013018:	4053      	eors	r3, r2
 801301a:	b2db      	uxtb	r3, r3
 801301c:	1c1a      	adds	r2, r3, #0
 801301e:	2301      	movs	r3, #1
 8013020:	4013      	ands	r3, r2
 8013022:	b2da      	uxtb	r2, r3
 8013024:	4b8a      	ldr	r3, [pc, #552]	@ (8013250 <configCheck+0x300>)
 8013026:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013028:	4b89      	ldr	r3, [pc, #548]	@ (8013250 <configCheck+0x300>)
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <configCheck+0xe6>
      EnabledConnectedDevices();
 8013030:	f7fa fe3c 	bl	800dcac <EnabledConnectedDevices>
 8013034:	e004      	b.n	8013040 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8013036:	f001 fc43 	bl	80148c0 <HAL_GetTick>
 801303a:	0002      	movs	r2, r0
 801303c:	4b85      	ldr	r3, [pc, #532]	@ (8013254 <configCheck+0x304>)
 801303e:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8013040:	4b83      	ldr	r3, [pc, #524]	@ (8013250 <configCheck+0x300>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d001      	beq.n	801304c <configCheck+0xfc>
 8013048:	4b83      	ldr	r3, [pc, #524]	@ (8013258 <configCheck+0x308>)
 801304a:	e000      	b.n	801304e <configCheck+0xfe>
 801304c:	4b83      	ldr	r3, [pc, #524]	@ (801325c <configCheck+0x30c>)
 801304e:	4a84      	ldr	r2, [pc, #528]	@ (8013260 <configCheck+0x310>)
 8013050:	4984      	ldr	r1, [pc, #528]	@ (8013264 <configCheck+0x314>)
 8013052:	2003      	movs	r0, #3
 8013054:	f000 fea8 	bl	8013da8 <CreateLine>
    userbuttonHeld = true;
 8013058:	4b7a      	ldr	r3, [pc, #488]	@ (8013244 <configCheck+0x2f4>)
 801305a:	2201      	movs	r2, #1
 801305c:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 801305e:	f001 fc2f 	bl	80148c0 <HAL_GetTick>
 8013062:	0003      	movs	r3, r0
 8013064:	22fa      	movs	r2, #250	@ 0xfa
 8013066:	00d2      	lsls	r2, r2, #3
 8013068:	189a      	adds	r2, r3, r2
 801306a:	4b7f      	ldr	r3, [pc, #508]	@ (8013268 <configCheck+0x318>)
 801306c:	601a      	str	r2, [r3, #0]
 801306e:	e002      	b.n	8013076 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8013070:	4b74      	ldr	r3, [pc, #464]	@ (8013244 <configCheck+0x2f4>)
 8013072:	2200      	movs	r2, #0
 8013074:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8013076:	f7f6 fe2d 	bl	8009cd4 <BootButton_Pressed>
 801307a:	0003      	movs	r3, r0
 801307c:	001a      	movs	r2, r3
 801307e:	2301      	movs	r3, #1
 8013080:	4053      	eors	r3, r2
 8013082:	b2db      	uxtb	r3, r3
 8013084:	2b00      	cmp	r3, #0
 8013086:	d100      	bne.n	801308a <configCheck+0x13a>
 8013088:	e0a4      	b.n	80131d4 <configCheck+0x284>
 801308a:	4b6e      	ldr	r3, [pc, #440]	@ (8013244 <configCheck+0x2f4>)
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d100      	bne.n	8013094 <configCheck+0x144>
 8013092:	e09f      	b.n	80131d4 <configCheck+0x284>
 8013094:	4b74      	ldr	r3, [pc, #464]	@ (8013268 <configCheck+0x318>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	0018      	movs	r0, r3
 801309a:	f000 fe2f 	bl	8013cfc <TimestampIsReached>
 801309e:	1e03      	subs	r3, r0, #0
 80130a0:	d100      	bne.n	80130a4 <configCheck+0x154>
 80130a2:	e097      	b.n	80131d4 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80130a4:	f7fa f9c0 	bl	800d428 <GetPMSensorPresence>
 80130a8:	1e03      	subs	r3, r0, #0
 80130aa:	d100      	bne.n	80130ae <configCheck+0x15e>
 80130ac:	e082      	b.n	80131b4 <configCheck+0x264>
 80130ae:	4b6f      	ldr	r3, [pc, #444]	@ (801326c <configCheck+0x31c>)
 80130b0:	791b      	ldrb	r3, [r3, #4]
 80130b2:	2b34      	cmp	r3, #52	@ 0x34
 80130b4:	d004      	beq.n	80130c0 <configCheck+0x170>
 80130b6:	4b6d      	ldr	r3, [pc, #436]	@ (801326c <configCheck+0x31c>)
 80130b8:	791b      	ldrb	r3, [r3, #4]
 80130ba:	2b35      	cmp	r3, #53	@ 0x35
 80130bc:	d000      	beq.n	80130c0 <configCheck+0x170>
 80130be:	e079      	b.n	80131b4 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80130c0:	4b6b      	ldr	r3, [pc, #428]	@ (8013270 <configCheck+0x320>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	1e5a      	subs	r2, r3, #1
 80130c6:	4193      	sbcs	r3, r2
 80130c8:	b2db      	uxtb	r3, r3
 80130ca:	2201      	movs	r2, #1
 80130cc:	4053      	eors	r3, r2
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	1c1a      	adds	r2, r3, #0
 80130d2:	2301      	movs	r3, #1
 80130d4:	4013      	ands	r3, r2
 80130d6:	b2da      	uxtb	r2, r3
 80130d8:	4b65      	ldr	r3, [pc, #404]	@ (8013270 <configCheck+0x320>)
 80130da:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80130dc:	4b64      	ldr	r3, [pc, #400]	@ (8013270 <configCheck+0x320>)
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d005      	beq.n	80130f0 <configCheck+0x1a0>
 80130e4:	1dbc      	adds	r4, r7, #6
 80130e6:	f7ff faf5 	bl	80126d4 <Calculate_LED_ON>
 80130ea:	0003      	movs	r3, r0
 80130ec:	8023      	strh	r3, [r4, #0]
 80130ee:	e003      	b.n	80130f8 <configCheck+0x1a8>
        else color = 4000;
 80130f0:	1dbb      	adds	r3, r7, #6
 80130f2:	22fa      	movs	r2, #250	@ 0xfa
 80130f4:	0112      	lsls	r2, r2, #4
 80130f6:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 80130f8:	4b5d      	ldr	r3, [pc, #372]	@ (8013270 <configCheck+0x320>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <configCheck+0x1b4>
 8013100:	4b55      	ldr	r3, [pc, #340]	@ (8013258 <configCheck+0x308>)
 8013102:	e000      	b.n	8013106 <configCheck+0x1b6>
 8013104:	4b55      	ldr	r3, [pc, #340]	@ (801325c <configCheck+0x30c>)
 8013106:	4a5b      	ldr	r2, [pc, #364]	@ (8013274 <configCheck+0x324>)
 8013108:	495b      	ldr	r1, [pc, #364]	@ (8013278 <configCheck+0x328>)
 801310a:	2002      	movs	r0, #2
 801310c:	f000 fe4c 	bl	8013da8 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8013110:	1d7b      	adds	r3, r7, #5
 8013112:	2200      	movs	r2, #0
 8013114:	701a      	strb	r2, [r3, #0]
 8013116:	e028      	b.n	801316a <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8013118:	f7ff fadc 	bl	80126d4 <Calculate_LED_ON>
 801311c:	0003      	movs	r3, r0
 801311e:	001a      	movs	r2, r3
 8013120:	4b56      	ldr	r3, [pc, #344]	@ (801327c <configCheck+0x32c>)
 8013122:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013124:	4b55      	ldr	r3, [pc, #340]	@ (801327c <configCheck+0x32c>)
 8013126:	1dba      	adds	r2, r7, #6
 8013128:	8812      	ldrh	r2, [r2, #0]
 801312a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 801312c:	4b53      	ldr	r3, [pc, #332]	@ (801327c <configCheck+0x32c>)
 801312e:	1dba      	adds	r2, r7, #6
 8013130:	8812      	ldrh	r2, [r2, #0]
 8013132:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013134:	23c8      	movs	r3, #200	@ 0xc8
 8013136:	005b      	lsls	r3, r3, #1
 8013138:	0018      	movs	r0, r3
 801313a:	f001 fbcb 	bl	80148d4 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801313e:	4b4f      	ldr	r3, [pc, #316]	@ (801327c <configCheck+0x32c>)
 8013140:	22fa      	movs	r2, #250	@ 0xfa
 8013142:	0112      	lsls	r2, r2, #4
 8013144:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8013146:	4b4d      	ldr	r3, [pc, #308]	@ (801327c <configCheck+0x32c>)
 8013148:	22fa      	movs	r2, #250	@ 0xfa
 801314a:	0112      	lsls	r2, r2, #4
 801314c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 801314e:	4b4b      	ldr	r3, [pc, #300]	@ (801327c <configCheck+0x32c>)
 8013150:	22fa      	movs	r2, #250	@ 0xfa
 8013152:	0112      	lsls	r2, r2, #4
 8013154:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013156:	23c8      	movs	r3, #200	@ 0xc8
 8013158:	005b      	lsls	r3, r3, #1
 801315a:	0018      	movs	r0, r3
 801315c:	f001 fbba 	bl	80148d4 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8013160:	1d7b      	adds	r3, r7, #5
 8013162:	781a      	ldrb	r2, [r3, #0]
 8013164:	1d7b      	adds	r3, r7, #5
 8013166:	3201      	adds	r2, #1
 8013168:	701a      	strb	r2, [r3, #0]
 801316a:	1d7b      	adds	r3, r7, #5
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d9d2      	bls.n	8013118 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8013172:	4b37      	ldr	r3, [pc, #220]	@ (8013250 <configCheck+0x300>)
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	1e5a      	subs	r2, r3, #1
 8013178:	4193      	sbcs	r3, r2
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2201      	movs	r2, #1
 801317e:	4053      	eors	r3, r2
 8013180:	b2db      	uxtb	r3, r3
 8013182:	1c1a      	adds	r2, r3, #0
 8013184:	2301      	movs	r3, #1
 8013186:	4013      	ands	r3, r2
 8013188:	b2da      	uxtb	r2, r3
 801318a:	4b31      	ldr	r3, [pc, #196]	@ (8013250 <configCheck+0x300>)
 801318c:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 801318e:	4b30      	ldr	r3, [pc, #192]	@ (8013250 <configCheck+0x300>)
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d001      	beq.n	801319a <configCheck+0x24a>
 8013196:	4b30      	ldr	r3, [pc, #192]	@ (8013258 <configCheck+0x308>)
 8013198:	e000      	b.n	801319c <configCheck+0x24c>
 801319a:	4b30      	ldr	r3, [pc, #192]	@ (801325c <configCheck+0x30c>)
 801319c:	4a38      	ldr	r2, [pc, #224]	@ (8013280 <configCheck+0x330>)
 801319e:	4936      	ldr	r1, [pc, #216]	@ (8013278 <configCheck+0x328>)
 80131a0:	2002      	movs	r0, #2
 80131a2:	f000 fe01 	bl	8013da8 <CreateLine>
      if (usbPluggedIn) {
 80131a6:	4b37      	ldr	r3, [pc, #220]	@ (8013284 <configCheck+0x334>)
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d009      	beq.n	80131c2 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 80131ae:	f7fb ff67 	bl	800f080 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80131b2:	e006      	b.n	80131c2 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80131b4:	4a34      	ldr	r2, [pc, #208]	@ (8013288 <configCheck+0x338>)
 80131b6:	4b30      	ldr	r3, [pc, #192]	@ (8013278 <configCheck+0x328>)
 80131b8:	0019      	movs	r1, r3
 80131ba:	2002      	movs	r0, #2
 80131bc:	f000 fdf4 	bl	8013da8 <CreateLine>
 80131c0:	e000      	b.n	80131c4 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80131c2:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80131c4:	46c0      	nop			@ (mov r8, r8)
 80131c6:	f7f6 fd97 	bl	8009cf8 <UserButton_Pressed>
 80131ca:	1e03      	subs	r3, r0, #0
 80131cc:	d1fb      	bne.n	80131c6 <configCheck+0x276>
    }
    userbuttonHeld = false;
 80131ce:	4b1d      	ldr	r3, [pc, #116]	@ (8013244 <configCheck+0x2f4>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80131d4:	f7f6 fd7e 	bl	8009cd4 <BootButton_Pressed>
 80131d8:	0003      	movs	r3, r0
 80131da:	001a      	movs	r2, r3
 80131dc:	2301      	movs	r3, #1
 80131de:	4053      	eors	r3, r2
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d00b      	beq.n	80131fe <configCheck+0x2ae>
 80131e6:	f7f6 fd87 	bl	8009cf8 <UserButton_Pressed>
 80131ea:	0003      	movs	r3, r0
 80131ec:	001a      	movs	r2, r3
 80131ee:	2301      	movs	r3, #1
 80131f0:	4053      	eors	r3, r2
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d002      	beq.n	80131fe <configCheck+0x2ae>
    userbuttonHeld = false;
 80131f8:	4b12      	ldr	r3, [pc, #72]	@ (8013244 <configCheck+0x2f4>)
 80131fa:	2200      	movs	r2, #0
 80131fc:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80131fe:	f7f6 fcef 	bl	8009be0 <Check_USB_PowerOn>
 8013202:	1e03      	subs	r3, r0, #0
 8013204:	d003      	beq.n	801320e <configCheck+0x2be>
    usbPluggedIn = true;
 8013206:	4b1f      	ldr	r3, [pc, #124]	@ (8013284 <configCheck+0x334>)
 8013208:	2201      	movs	r2, #1
 801320a:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 801320c:	e012      	b.n	8013234 <configCheck+0x2e4>
    if(!userToggle && !init){
 801320e:	4b10      	ldr	r3, [pc, #64]	@ (8013250 <configCheck+0x300>)
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	2201      	movs	r2, #1
 8013214:	4053      	eors	r3, r2
 8013216:	b2db      	uxtb	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	d008      	beq.n	801322e <configCheck+0x2de>
 801321c:	4b1b      	ldr	r3, [pc, #108]	@ (801328c <configCheck+0x33c>)
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	2201      	movs	r2, #1
 8013222:	4053      	eors	r3, r2
 8013224:	b2db      	uxtb	r3, r3
 8013226:	2b00      	cmp	r3, #0
 8013228:	d001      	beq.n	801322e <configCheck+0x2de>
      SetLEDsOff();
 801322a:	f7ff fc09 	bl	8012a40 <SetLEDsOff>
    usbPluggedIn = false;
 801322e:	4b15      	ldr	r3, [pc, #84]	@ (8013284 <configCheck+0x334>)
 8013230:	2200      	movs	r2, #0
 8013232:	701a      	strb	r2, [r3, #0]
}
 8013234:	46c0      	nop			@ (mov r8, r8)
 8013236:	46bd      	mov	sp, r7
 8013238:	b003      	add	sp, #12
 801323a:	bd90      	pop	{r4, r7, pc}
 801323c:	2000214c 	.word	0x2000214c
 8013240:	20002150 	.word	0x20002150
 8013244:	2000214f 	.word	0x2000214f
 8013248:	00000bb8 	.word	0x00000bb8
 801324c:	000005dc 	.word	0x000005dc
 8013250:	2000214e 	.word	0x2000214e
 8013254:	20001114 	.word	0x20001114
 8013258:	0802dad0 	.word	0x0802dad0
 801325c:	0802dad4 	.word	0x0802dad4
 8013260:	0802dad8 	.word	0x0802dad8
 8013264:	0802d9fc 	.word	0x0802d9fc
 8013268:	20002154 	.word	0x20002154
 801326c:	200011c0 	.word	0x200011c0
 8013270:	200011be 	.word	0x200011be
 8013274:	0802daf8 	.word	0x0802daf8
 8013278:	0802db20 	.word	0x0802db20
 801327c:	40000400 	.word	0x40000400
 8013280:	0802db24 	.word	0x0802db24
 8013284:	2000214d 	.word	0x2000214d
 8013288:	0802db44 	.word	0x0802db44
 801328c:	200000e8 	.word	0x200000e8

08013290 <Battery_Upkeep>:

void Battery_Upkeep(){
 8013290:	b580      	push	{r7, lr}
 8013292:	af00      	add	r7, sp, #0
  powerCheck();
 8013294:	f7ff fdce 	bl	8012e34 <powerCheck>
  powerDisplay();  // output LEDs are okay
 8013298:	f7ff fddc 	bl	8012e54 <powerDisplay>
}
 801329c:	46c0      	nop			@ (mov r8, r8)
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
	...

080132a4 <setuserToggle>:

void setuserToggle(void) {
 80132a4:	b580      	push	{r7, lr}
 80132a6:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 80132a8:	f7f6 fc9a 	bl	8009be0 <Check_USB_PowerOn>
 80132ac:	0003      	movs	r3, r0
 80132ae:	001a      	movs	r2, r3
 80132b0:	2301      	movs	r3, #1
 80132b2:	4053      	eors	r3, r2
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d004      	beq.n	80132c4 <setuserToggle+0x20>
    userToggle = true;
 80132ba:	4b04      	ldr	r3, [pc, #16]	@ (80132cc <setuserToggle+0x28>)
 80132bc:	2201      	movs	r2, #1
 80132be:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80132c0:	f7fa fcf4 	bl	800dcac <EnabledConnectedDevices>
  }
}
 80132c4:	46c0      	nop			@ (mov r8, r8)
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	46c0      	nop			@ (mov r8, r8)
 80132cc:	2000214e 	.word	0x2000214e

080132d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80132d4:	4b07      	ldr	r3, [pc, #28]	@ (80132f4 <HAL_MspInit+0x24>)
 80132d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80132d8:	4b06      	ldr	r3, [pc, #24]	@ (80132f4 <HAL_MspInit+0x24>)
 80132da:	2101      	movs	r1, #1
 80132dc:	430a      	orrs	r2, r1
 80132de:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80132e0:	4b04      	ldr	r3, [pc, #16]	@ (80132f4 <HAL_MspInit+0x24>)
 80132e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80132e4:	4b03      	ldr	r3, [pc, #12]	@ (80132f4 <HAL_MspInit+0x24>)
 80132e6:	2180      	movs	r1, #128	@ 0x80
 80132e8:	0549      	lsls	r1, r1, #21
 80132ea:	430a      	orrs	r2, r1
 80132ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80132ee:	46c0      	nop			@ (mov r8, r8)
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	40021000 	.word	0x40021000

080132f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80132fc:	46c0      	nop			@ (mov r8, r8)
 80132fe:	e7fd      	b.n	80132fc <NMI_Handler+0x4>

08013300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013304:	46c0      	nop			@ (mov r8, r8)
 8013306:	e7fd      	b.n	8013304 <HardFault_Handler+0x4>

08013308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 801330c:	46c0      	nop			@ (mov r8, r8)
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013312:	b580      	push	{r7, lr}
 8013314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013316:	46c0      	nop			@ (mov r8, r8)
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013320:	f001 fabc 	bl	801489c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013324:	46c0      	nop			@ (mov r8, r8)
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
	...

0801332c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8013330:	4b03      	ldr	r3, [pc, #12]	@ (8013340 <RTC_IRQHandler+0x14>)
 8013332:	0018      	movs	r0, r3
 8013334:	f009 fb5c 	bl	801c9f0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8013338:	46c0      	nop			@ (mov r8, r8)
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	46c0      	nop			@ (mov r8, r8)
 8013340:	20001198 	.word	0x20001198

08013344 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8013348:	2380      	movs	r3, #128	@ 0x80
 801334a:	021b      	lsls	r3, r3, #8
 801334c:	0018      	movs	r0, r3
 801334e:	f002 fd3b 	bl	8015dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8013352:	46c0      	nop			@ (mov r8, r8)
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 801335c:	4b05      	ldr	r3, [pc, #20]	@ (8013374 <DMA1_Channel2_3_IRQHandler+0x1c>)
 801335e:	0018      	movs	r0, r3
 8013360:	f002 f8b9 	bl	80154d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013364:	4b04      	ldr	r3, [pc, #16]	@ (8013378 <DMA1_Channel2_3_IRQHandler+0x20>)
 8013366:	0018      	movs	r0, r3
 8013368:	f002 f8b5 	bl	80154d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 801336c:	46c0      	nop			@ (mov r8, r8)
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	46c0      	nop			@ (mov r8, r8)
 8013374:	20001028 	.word	0x20001028
 8013378:	20000fe0 	.word	0x20000fe0

0801337c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8013380:	4b07      	ldr	r3, [pc, #28]	@ (80133a0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8013382:	0018      	movs	r0, r3
 8013384:	f002 f8a7 	bl	80154d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8013388:	4b06      	ldr	r3, [pc, #24]	@ (80133a4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 801338a:	0018      	movs	r0, r3
 801338c:	f002 f8a3 	bl	80154d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8013390:	4b05      	ldr	r3, [pc, #20]	@ (80133a8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8013392:	0018      	movs	r0, r3
 8013394:	f002 f89f 	bl	80154d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8013398:	46c0      	nop			@ (mov r8, r8)
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	46c0      	nop			@ (mov r8, r8)
 80133a0:	200010ac 	.word	0x200010ac
 80133a4:	20002454 	.word	0x20002454
 80133a8:	2000249c 	.word	0x2000249c

080133ac <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80133b0:	4b03      	ldr	r3, [pc, #12]	@ (80133c0 <USART4_5_IRQHandler+0x14>)
 80133b2:	0018      	movs	r0, r3
 80133b4:	f00a fb0c 	bl	801d9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80133b8:	46c0      	nop			@ (mov r8, r8)
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	46c0      	nop			@ (mov r8, r8)
 80133c0:	2000239c 	.word	0x2000239c

080133c4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80133c8:	4b09      	ldr	r3, [pc, #36]	@ (80133f0 <I2C1_IRQHandler+0x2c>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	699a      	ldr	r2, [r3, #24]
 80133ce:	23e0      	movs	r3, #224	@ 0xe0
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	4013      	ands	r3, r2
 80133d4:	d004      	beq.n	80133e0 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80133d6:	4b06      	ldr	r3, [pc, #24]	@ (80133f0 <I2C1_IRQHandler+0x2c>)
 80133d8:	0018      	movs	r0, r3
 80133da:	f003 fc3f 	bl	8016c5c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80133de:	e003      	b.n	80133e8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80133e0:	4b03      	ldr	r3, [pc, #12]	@ (80133f0 <I2C1_IRQHandler+0x2c>)
 80133e2:	0018      	movs	r0, r3
 80133e4:	f003 fc20 	bl	8016c28 <HAL_I2C_EV_IRQHandler>
}
 80133e8:	46c0      	nop			@ (mov r8, r8)
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	46c0      	nop			@ (mov r8, r8)
 80133f0:	20000f38 	.word	0x20000f38

080133f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80133f8:	4b03      	ldr	r3, [pc, #12]	@ (8013408 <USART1_IRQHandler+0x14>)
 80133fa:	0018      	movs	r0, r3
 80133fc:	f00a fae8 	bl	801d9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013400:	46c0      	nop			@ (mov r8, r8)
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	46c0      	nop			@ (mov r8, r8)
 8013408:	200022e4 	.word	0x200022e4

0801340c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8013410:	4b03      	ldr	r3, [pc, #12]	@ (8013420 <USB_IRQHandler+0x14>)
 8013412:	0018      	movs	r0, r3
 8013414:	f006 f93a 	bl	801968c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8013418:	46c0      	nop			@ (mov r8, r8)
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	46c0      	nop			@ (mov r8, r8)
 8013420:	200032b8 	.word	0x200032b8

08013424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	af00      	add	r7, sp, #0
  return 1;
 8013428:	2301      	movs	r3, #1
}
 801342a:	0018      	movs	r0, r3
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <_kill>:

int _kill(int pid, int sig)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801343a:	f013 f9c9 	bl	80267d0 <__errno>
 801343e:	0003      	movs	r3, r0
 8013440:	2216      	movs	r2, #22
 8013442:	601a      	str	r2, [r3, #0]
  return -1;
 8013444:	2301      	movs	r3, #1
 8013446:	425b      	negs	r3, r3
}
 8013448:	0018      	movs	r0, r3
 801344a:	46bd      	mov	sp, r7
 801344c:	b002      	add	sp, #8
 801344e:	bd80      	pop	{r7, pc}

08013450 <_exit>:

void _exit (int status)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013458:	2301      	movs	r3, #1
 801345a:	425a      	negs	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	0011      	movs	r1, r2
 8013460:	0018      	movs	r0, r3
 8013462:	f7ff ffe5 	bl	8013430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8013466:	46c0      	nop			@ (mov r8, r8)
 8013468:	e7fd      	b.n	8013466 <_exit+0x16>

0801346a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801346a:	b580      	push	{r7, lr}
 801346c:	b086      	sub	sp, #24
 801346e:	af00      	add	r7, sp, #0
 8013470:	60f8      	str	r0, [r7, #12]
 8013472:	60b9      	str	r1, [r7, #8]
 8013474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013476:	2300      	movs	r3, #0
 8013478:	617b      	str	r3, [r7, #20]
 801347a:	e00a      	b.n	8013492 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801347c:	e000      	b.n	8013480 <_read+0x16>
 801347e:	bf00      	nop
 8013480:	0001      	movs	r1, r0
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	1c5a      	adds	r2, r3, #1
 8013486:	60ba      	str	r2, [r7, #8]
 8013488:	b2ca      	uxtb	r2, r1
 801348a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	3301      	adds	r3, #1
 8013490:	617b      	str	r3, [r7, #20]
 8013492:	697a      	ldr	r2, [r7, #20]
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	429a      	cmp	r2, r3
 8013498:	dbf0      	blt.n	801347c <_read+0x12>
  }

  return len;
 801349a:	687b      	ldr	r3, [r7, #4]
}
 801349c:	0018      	movs	r0, r3
 801349e:	46bd      	mov	sp, r7
 80134a0:	b006      	add	sp, #24
 80134a2:	bd80      	pop	{r7, pc}

080134a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80134ac:	2301      	movs	r3, #1
 80134ae:	425b      	negs	r3, r3
}
 80134b0:	0018      	movs	r0, r3
 80134b2:	46bd      	mov	sp, r7
 80134b4:	b002      	add	sp, #8
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	2280      	movs	r2, #128	@ 0x80
 80134c6:	0192      	lsls	r2, r2, #6
 80134c8:	605a      	str	r2, [r3, #4]
  return 0;
 80134ca:	2300      	movs	r3, #0
}
 80134cc:	0018      	movs	r0, r3
 80134ce:	46bd      	mov	sp, r7
 80134d0:	b002      	add	sp, #8
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <_isatty>:

int _isatty(int file)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80134dc:	2301      	movs	r3, #1
}
 80134de:	0018      	movs	r0, r3
 80134e0:	46bd      	mov	sp, r7
 80134e2:	b002      	add	sp, #8
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b084      	sub	sp, #16
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	60f8      	str	r0, [r7, #12]
 80134ee:	60b9      	str	r1, [r7, #8]
 80134f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80134f2:	2300      	movs	r3, #0
}
 80134f4:	0018      	movs	r0, r3
 80134f6:	46bd      	mov	sp, r7
 80134f8:	b004      	add	sp, #16
 80134fa:	bd80      	pop	{r7, pc}

080134fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b086      	sub	sp, #24
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013504:	4a14      	ldr	r2, [pc, #80]	@ (8013558 <_sbrk+0x5c>)
 8013506:	4b15      	ldr	r3, [pc, #84]	@ (801355c <_sbrk+0x60>)
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013510:	4b13      	ldr	r3, [pc, #76]	@ (8013560 <_sbrk+0x64>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d102      	bne.n	801351e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013518:	4b11      	ldr	r3, [pc, #68]	@ (8013560 <_sbrk+0x64>)
 801351a:	4a12      	ldr	r2, [pc, #72]	@ (8013564 <_sbrk+0x68>)
 801351c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801351e:	4b10      	ldr	r3, [pc, #64]	@ (8013560 <_sbrk+0x64>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	18d3      	adds	r3, r2, r3
 8013526:	693a      	ldr	r2, [r7, #16]
 8013528:	429a      	cmp	r2, r3
 801352a:	d207      	bcs.n	801353c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801352c:	f013 f950 	bl	80267d0 <__errno>
 8013530:	0003      	movs	r3, r0
 8013532:	220c      	movs	r2, #12
 8013534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013536:	2301      	movs	r3, #1
 8013538:	425b      	negs	r3, r3
 801353a:	e009      	b.n	8013550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801353c:	4b08      	ldr	r3, [pc, #32]	@ (8013560 <_sbrk+0x64>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013542:	4b07      	ldr	r3, [pc, #28]	@ (8013560 <_sbrk+0x64>)
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	18d2      	adds	r2, r2, r3
 801354a:	4b05      	ldr	r3, [pc, #20]	@ (8013560 <_sbrk+0x64>)
 801354c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 801354e:	68fb      	ldr	r3, [r7, #12]
}
 8013550:	0018      	movs	r0, r3
 8013552:	46bd      	mov	sp, r7
 8013554:	b006      	add	sp, #24
 8013556:	bd80      	pop	{r7, pc}
 8013558:	20005000 	.word	0x20005000
 801355c:	00000400 	.word	0x00000400
 8013560:	20002168 	.word	0x20002168
 8013564:	20003918 	.word	0x20003918

08013568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801356c:	46c0      	nop			@ (mov r8, r8)
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
	...

08013574 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b086      	sub	sp, #24
 8013578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801357a:	2310      	movs	r3, #16
 801357c:	18fb      	adds	r3, r7, r3
 801357e:	0018      	movs	r0, r3
 8013580:	2308      	movs	r3, #8
 8013582:	001a      	movs	r2, r3
 8013584:	2100      	movs	r1, #0
 8013586:	f013 f87f 	bl	8026688 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801358a:	003b      	movs	r3, r7
 801358c:	0018      	movs	r0, r3
 801358e:	2310      	movs	r3, #16
 8013590:	001a      	movs	r2, r3
 8013592:	2100      	movs	r1, #0
 8013594:	f013 f878 	bl	8026688 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013598:	4b2e      	ldr	r3, [pc, #184]	@ (8013654 <MX_TIM2_Init+0xe0>)
 801359a:	2280      	movs	r2, #128	@ 0x80
 801359c:	05d2      	lsls	r2, r2, #23
 801359e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80135a0:	4b2c      	ldr	r3, [pc, #176]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135a2:	2200      	movs	r2, #0
 80135a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80135a6:	4b2b      	ldr	r3, [pc, #172]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80135ac:	4b29      	ldr	r3, [pc, #164]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135ae:	4a2a      	ldr	r2, [pc, #168]	@ (8013658 <MX_TIM2_Init+0xe4>)
 80135b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80135b2:	4b28      	ldr	r3, [pc, #160]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135b4:	2200      	movs	r2, #0
 80135b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80135b8:	4b26      	ldr	r3, [pc, #152]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80135be:	4b25      	ldr	r3, [pc, #148]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135c0:	0018      	movs	r0, r3
 80135c2:	f009 fb23 	bl	801cc0c <HAL_TIM_PWM_Init>
 80135c6:	1e03      	subs	r3, r0, #0
 80135c8:	d001      	beq.n	80135ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80135ca:	f7f9 fedb 	bl	800d384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80135ce:	2110      	movs	r1, #16
 80135d0:	187b      	adds	r3, r7, r1
 80135d2:	2200      	movs	r2, #0
 80135d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80135d6:	187b      	adds	r3, r7, r1
 80135d8:	2200      	movs	r2, #0
 80135da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80135dc:	187a      	adds	r2, r7, r1
 80135de:	4b1d      	ldr	r3, [pc, #116]	@ (8013654 <MX_TIM2_Init+0xe0>)
 80135e0:	0011      	movs	r1, r2
 80135e2:	0018      	movs	r0, r3
 80135e4:	f009 fe30 	bl	801d248 <HAL_TIMEx_MasterConfigSynchronization>
 80135e8:	1e03      	subs	r3, r0, #0
 80135ea:	d001      	beq.n	80135f0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80135ec:	f7f9 feca 	bl	800d384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80135f0:	003b      	movs	r3, r7
 80135f2:	2260      	movs	r2, #96	@ 0x60
 80135f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80135f6:	003b      	movs	r3, r7
 80135f8:	2200      	movs	r2, #0
 80135fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80135fc:	003b      	movs	r3, r7
 80135fe:	2200      	movs	r2, #0
 8013600:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013602:	003b      	movs	r3, r7
 8013604:	2200      	movs	r2, #0
 8013606:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013608:	0039      	movs	r1, r7
 801360a:	4b12      	ldr	r3, [pc, #72]	@ (8013654 <MX_TIM2_Init+0xe0>)
 801360c:	2200      	movs	r2, #0
 801360e:	0018      	movs	r0, r3
 8013610:	f009 fbce 	bl	801cdb0 <HAL_TIM_PWM_ConfigChannel>
 8013614:	1e03      	subs	r3, r0, #0
 8013616:	d001      	beq.n	801361c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8013618:	f7f9 feb4 	bl	800d384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801361c:	0039      	movs	r1, r7
 801361e:	4b0d      	ldr	r3, [pc, #52]	@ (8013654 <MX_TIM2_Init+0xe0>)
 8013620:	2208      	movs	r2, #8
 8013622:	0018      	movs	r0, r3
 8013624:	f009 fbc4 	bl	801cdb0 <HAL_TIM_PWM_ConfigChannel>
 8013628:	1e03      	subs	r3, r0, #0
 801362a:	d001      	beq.n	8013630 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 801362c:	f7f9 feaa 	bl	800d384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013630:	0039      	movs	r1, r7
 8013632:	4b08      	ldr	r3, [pc, #32]	@ (8013654 <MX_TIM2_Init+0xe0>)
 8013634:	220c      	movs	r2, #12
 8013636:	0018      	movs	r0, r3
 8013638:	f009 fbba 	bl	801cdb0 <HAL_TIM_PWM_ConfigChannel>
 801363c:	1e03      	subs	r3, r0, #0
 801363e:	d001      	beq.n	8013644 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8013640:	f7f9 fea0 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013644:	4b03      	ldr	r3, [pc, #12]	@ (8013654 <MX_TIM2_Init+0xe0>)
 8013646:	0018      	movs	r0, r3
 8013648:	f000 f8fe 	bl	8013848 <HAL_TIM_MspPostInit>

}
 801364c:	46c0      	nop			@ (mov r8, r8)
 801364e:	46bd      	mov	sp, r7
 8013650:	b006      	add	sp, #24
 8013652:	bd80      	pop	{r7, pc}
 8013654:	2000216c 	.word	0x2000216c
 8013658:	0000ffff 	.word	0x0000ffff

0801365c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013662:	2310      	movs	r3, #16
 8013664:	18fb      	adds	r3, r7, r3
 8013666:	0018      	movs	r0, r3
 8013668:	2308      	movs	r3, #8
 801366a:	001a      	movs	r2, r3
 801366c:	2100      	movs	r1, #0
 801366e:	f013 f80b 	bl	8026688 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013672:	003b      	movs	r3, r7
 8013674:	0018      	movs	r0, r3
 8013676:	2310      	movs	r3, #16
 8013678:	001a      	movs	r2, r3
 801367a:	2100      	movs	r1, #0
 801367c:	f013 f804 	bl	8026688 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013680:	4b32      	ldr	r3, [pc, #200]	@ (801374c <MX_TIM3_Init+0xf0>)
 8013682:	4a33      	ldr	r2, [pc, #204]	@ (8013750 <MX_TIM3_Init+0xf4>)
 8013684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013686:	4b31      	ldr	r3, [pc, #196]	@ (801374c <MX_TIM3_Init+0xf0>)
 8013688:	2200      	movs	r2, #0
 801368a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801368c:	4b2f      	ldr	r3, [pc, #188]	@ (801374c <MX_TIM3_Init+0xf0>)
 801368e:	2200      	movs	r2, #0
 8013690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8013692:	4b2e      	ldr	r3, [pc, #184]	@ (801374c <MX_TIM3_Init+0xf0>)
 8013694:	4a2f      	ldr	r2, [pc, #188]	@ (8013754 <MX_TIM3_Init+0xf8>)
 8013696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013698:	4b2c      	ldr	r3, [pc, #176]	@ (801374c <MX_TIM3_Init+0xf0>)
 801369a:	2200      	movs	r2, #0
 801369c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801369e:	4b2b      	ldr	r3, [pc, #172]	@ (801374c <MX_TIM3_Init+0xf0>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80136a4:	4b29      	ldr	r3, [pc, #164]	@ (801374c <MX_TIM3_Init+0xf0>)
 80136a6:	0018      	movs	r0, r3
 80136a8:	f009 fab0 	bl	801cc0c <HAL_TIM_PWM_Init>
 80136ac:	1e03      	subs	r3, r0, #0
 80136ae:	d001      	beq.n	80136b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80136b0:	f7f9 fe68 	bl	800d384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80136b4:	2110      	movs	r1, #16
 80136b6:	187b      	adds	r3, r7, r1
 80136b8:	2200      	movs	r2, #0
 80136ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80136bc:	187b      	adds	r3, r7, r1
 80136be:	2200      	movs	r2, #0
 80136c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80136c2:	187a      	adds	r2, r7, r1
 80136c4:	4b21      	ldr	r3, [pc, #132]	@ (801374c <MX_TIM3_Init+0xf0>)
 80136c6:	0011      	movs	r1, r2
 80136c8:	0018      	movs	r0, r3
 80136ca:	f009 fdbd 	bl	801d248 <HAL_TIMEx_MasterConfigSynchronization>
 80136ce:	1e03      	subs	r3, r0, #0
 80136d0:	d001      	beq.n	80136d6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80136d2:	f7f9 fe57 	bl	800d384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80136d6:	003b      	movs	r3, r7
 80136d8:	2260      	movs	r2, #96	@ 0x60
 80136da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80136dc:	003b      	movs	r3, r7
 80136de:	2200      	movs	r2, #0
 80136e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80136e2:	003b      	movs	r3, r7
 80136e4:	2200      	movs	r2, #0
 80136e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80136e8:	003b      	movs	r3, r7
 80136ea:	2200      	movs	r2, #0
 80136ec:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80136ee:	0039      	movs	r1, r7
 80136f0:	4b16      	ldr	r3, [pc, #88]	@ (801374c <MX_TIM3_Init+0xf0>)
 80136f2:	2200      	movs	r2, #0
 80136f4:	0018      	movs	r0, r3
 80136f6:	f009 fb5b 	bl	801cdb0 <HAL_TIM_PWM_ConfigChannel>
 80136fa:	1e03      	subs	r3, r0, #0
 80136fc:	d001      	beq.n	8013702 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80136fe:	f7f9 fe41 	bl	800d384 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8013702:	4b12      	ldr	r3, [pc, #72]	@ (801374c <MX_TIM3_Init+0xf0>)
 8013704:	2104      	movs	r1, #4
 8013706:	0018      	movs	r0, r3
 8013708:	f009 fdfc 	bl	801d304 <HAL_TIMEx_RemapConfig>
 801370c:	1e03      	subs	r3, r0, #0
 801370e:	d001      	beq.n	8013714 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8013710:	f7f9 fe38 	bl	800d384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013714:	0039      	movs	r1, r7
 8013716:	4b0d      	ldr	r3, [pc, #52]	@ (801374c <MX_TIM3_Init+0xf0>)
 8013718:	2204      	movs	r2, #4
 801371a:	0018      	movs	r0, r3
 801371c:	f009 fb48 	bl	801cdb0 <HAL_TIM_PWM_ConfigChannel>
 8013720:	1e03      	subs	r3, r0, #0
 8013722:	d001      	beq.n	8013728 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013724:	f7f9 fe2e 	bl	800d384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013728:	0039      	movs	r1, r7
 801372a:	4b08      	ldr	r3, [pc, #32]	@ (801374c <MX_TIM3_Init+0xf0>)
 801372c:	2208      	movs	r2, #8
 801372e:	0018      	movs	r0, r3
 8013730:	f009 fb3e 	bl	801cdb0 <HAL_TIM_PWM_ConfigChannel>
 8013734:	1e03      	subs	r3, r0, #0
 8013736:	d001      	beq.n	801373c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013738:	f7f9 fe24 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801373c:	4b03      	ldr	r3, [pc, #12]	@ (801374c <MX_TIM3_Init+0xf0>)
 801373e:	0018      	movs	r0, r3
 8013740:	f000 f882 	bl	8013848 <HAL_TIM_MspPostInit>

}
 8013744:	46c0      	nop			@ (mov r8, r8)
 8013746:	46bd      	mov	sp, r7
 8013748:	b006      	add	sp, #24
 801374a:	bd80      	pop	{r7, pc}
 801374c:	200021ac 	.word	0x200021ac
 8013750:	40000400 	.word	0x40000400
 8013754:	0000ffff 	.word	0x0000ffff

08013758 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801375e:	003b      	movs	r3, r7
 8013760:	0018      	movs	r0, r3
 8013762:	2308      	movs	r3, #8
 8013764:	001a      	movs	r2, r3
 8013766:	2100      	movs	r1, #0
 8013768:	f012 ff8e 	bl	8026688 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801376c:	4b15      	ldr	r3, [pc, #84]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 801376e:	4a16      	ldr	r2, [pc, #88]	@ (80137c8 <MX_TIM6_Init+0x70>)
 8013770:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8013772:	4b14      	ldr	r3, [pc, #80]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 8013774:	220a      	movs	r2, #10
 8013776:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013778:	4b12      	ldr	r3, [pc, #72]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 801377a:	2200      	movs	r2, #0
 801377c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801377e:	4b11      	ldr	r3, [pc, #68]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 8013780:	4a12      	ldr	r2, [pc, #72]	@ (80137cc <MX_TIM6_Init+0x74>)
 8013782:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013784:	4b0f      	ldr	r3, [pc, #60]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 8013786:	2200      	movs	r2, #0
 8013788:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801378a:	4b0e      	ldr	r3, [pc, #56]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 801378c:	0018      	movs	r0, r3
 801378e:	f009 f995 	bl	801cabc <HAL_TIM_Base_Init>
 8013792:	1e03      	subs	r3, r0, #0
 8013794:	d001      	beq.n	801379a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013796:	f7f9 fdf5 	bl	800d384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801379a:	003b      	movs	r3, r7
 801379c:	2200      	movs	r2, #0
 801379e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80137a0:	003b      	movs	r3, r7
 80137a2:	2200      	movs	r2, #0
 80137a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80137a6:	003a      	movs	r2, r7
 80137a8:	4b06      	ldr	r3, [pc, #24]	@ (80137c4 <MX_TIM6_Init+0x6c>)
 80137aa:	0011      	movs	r1, r2
 80137ac:	0018      	movs	r0, r3
 80137ae:	f009 fd4b 	bl	801d248 <HAL_TIMEx_MasterConfigSynchronization>
 80137b2:	1e03      	subs	r3, r0, #0
 80137b4:	d001      	beq.n	80137ba <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80137b6:	f7f9 fde5 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80137ba:	46c0      	nop			@ (mov r8, r8)
 80137bc:	46bd      	mov	sp, r7
 80137be:	b002      	add	sp, #8
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	46c0      	nop			@ (mov r8, r8)
 80137c4:	200021ec 	.word	0x200021ec
 80137c8:	40001000 	.word	0x40001000
 80137cc:	0000ffff 	.word	0x0000ffff

080137d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	2380      	movs	r3, #128	@ 0x80
 80137de:	05db      	lsls	r3, r3, #23
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d106      	bne.n	80137f2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80137e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013810 <HAL_TIM_PWM_MspInit+0x40>)
 80137e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137e8:	4b09      	ldr	r3, [pc, #36]	@ (8013810 <HAL_TIM_PWM_MspInit+0x40>)
 80137ea:	2101      	movs	r1, #1
 80137ec:	430a      	orrs	r2, r1
 80137ee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80137f0:	e00a      	b.n	8013808 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4a07      	ldr	r2, [pc, #28]	@ (8013814 <HAL_TIM_PWM_MspInit+0x44>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d105      	bne.n	8013808 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80137fc:	4b04      	ldr	r3, [pc, #16]	@ (8013810 <HAL_TIM_PWM_MspInit+0x40>)
 80137fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013800:	4b03      	ldr	r3, [pc, #12]	@ (8013810 <HAL_TIM_PWM_MspInit+0x40>)
 8013802:	2102      	movs	r1, #2
 8013804:	430a      	orrs	r2, r1
 8013806:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013808:	46c0      	nop			@ (mov r8, r8)
 801380a:	46bd      	mov	sp, r7
 801380c:	b002      	add	sp, #8
 801380e:	bd80      	pop	{r7, pc}
 8013810:	40021000 	.word	0x40021000
 8013814:	40000400 	.word	0x40000400

08013818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	4a06      	ldr	r2, [pc, #24]	@ (8013840 <HAL_TIM_Base_MspInit+0x28>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d105      	bne.n	8013836 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801382a:	4b06      	ldr	r3, [pc, #24]	@ (8013844 <HAL_TIM_Base_MspInit+0x2c>)
 801382c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801382e:	4b05      	ldr	r3, [pc, #20]	@ (8013844 <HAL_TIM_Base_MspInit+0x2c>)
 8013830:	2110      	movs	r1, #16
 8013832:	430a      	orrs	r2, r1
 8013834:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013836:	46c0      	nop			@ (mov r8, r8)
 8013838:	46bd      	mov	sp, r7
 801383a:	b002      	add	sp, #8
 801383c:	bd80      	pop	{r7, pc}
 801383e:	46c0      	nop			@ (mov r8, r8)
 8013840:	40001000 	.word	0x40001000
 8013844:	40021000 	.word	0x40021000

08013848 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013848:	b590      	push	{r4, r7, lr}
 801384a:	b08b      	sub	sp, #44	@ 0x2c
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013850:	2414      	movs	r4, #20
 8013852:	193b      	adds	r3, r7, r4
 8013854:	0018      	movs	r0, r3
 8013856:	2314      	movs	r3, #20
 8013858:	001a      	movs	r2, r3
 801385a:	2100      	movs	r1, #0
 801385c:	f012 ff14 	bl	8026688 <memset>
  if(timHandle->Instance==TIM2)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	2380      	movs	r3, #128	@ 0x80
 8013866:	05db      	lsls	r3, r3, #23
 8013868:	429a      	cmp	r2, r3
 801386a:	d123      	bne.n	80138b4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801386c:	4b27      	ldr	r3, [pc, #156]	@ (801390c <HAL_TIM_MspPostInit+0xc4>)
 801386e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013870:	4b26      	ldr	r3, [pc, #152]	@ (801390c <HAL_TIM_MspPostInit+0xc4>)
 8013872:	2101      	movs	r1, #1
 8013874:	430a      	orrs	r2, r1
 8013876:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013878:	4b24      	ldr	r3, [pc, #144]	@ (801390c <HAL_TIM_MspPostInit+0xc4>)
 801387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801387c:	2201      	movs	r2, #1
 801387e:	4013      	ands	r3, r2
 8013880:	613b      	str	r3, [r7, #16]
 8013882:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8013884:	0021      	movs	r1, r4
 8013886:	187b      	adds	r3, r7, r1
 8013888:	220d      	movs	r2, #13
 801388a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801388c:	187b      	adds	r3, r7, r1
 801388e:	2202      	movs	r2, #2
 8013890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013892:	187b      	adds	r3, r7, r1
 8013894:	2200      	movs	r2, #0
 8013896:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013898:	187b      	adds	r3, r7, r1
 801389a:	2200      	movs	r2, #0
 801389c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801389e:	187b      	adds	r3, r7, r1
 80138a0:	2202      	movs	r2, #2
 80138a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80138a4:	187a      	adds	r2, r7, r1
 80138a6:	23a0      	movs	r3, #160	@ 0xa0
 80138a8:	05db      	lsls	r3, r3, #23
 80138aa:	0011      	movs	r1, r2
 80138ac:	0018      	movs	r0, r3
 80138ae:	f002 f8d3 	bl	8015a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80138b2:	e027      	b.n	8013904 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	4a15      	ldr	r2, [pc, #84]	@ (8013910 <HAL_TIM_MspPostInit+0xc8>)
 80138ba:	4293      	cmp	r3, r2
 80138bc:	d122      	bne.n	8013904 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80138be:	4b13      	ldr	r3, [pc, #76]	@ (801390c <HAL_TIM_MspPostInit+0xc4>)
 80138c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138c2:	4b12      	ldr	r3, [pc, #72]	@ (801390c <HAL_TIM_MspPostInit+0xc4>)
 80138c4:	2104      	movs	r1, #4
 80138c6:	430a      	orrs	r2, r1
 80138c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80138ca:	4b10      	ldr	r3, [pc, #64]	@ (801390c <HAL_TIM_MspPostInit+0xc4>)
 80138cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ce:	2204      	movs	r2, #4
 80138d0:	4013      	ands	r3, r2
 80138d2:	60fb      	str	r3, [r7, #12]
 80138d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80138d6:	2114      	movs	r1, #20
 80138d8:	187b      	adds	r3, r7, r1
 80138da:	22e0      	movs	r2, #224	@ 0xe0
 80138dc:	0052      	lsls	r2, r2, #1
 80138de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138e0:	187b      	adds	r3, r7, r1
 80138e2:	2202      	movs	r2, #2
 80138e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138e6:	187b      	adds	r3, r7, r1
 80138e8:	2200      	movs	r2, #0
 80138ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80138ec:	187b      	adds	r3, r7, r1
 80138ee:	2200      	movs	r2, #0
 80138f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80138f2:	187b      	adds	r3, r7, r1
 80138f4:	2202      	movs	r2, #2
 80138f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80138f8:	187b      	adds	r3, r7, r1
 80138fa:	4a06      	ldr	r2, [pc, #24]	@ (8013914 <HAL_TIM_MspPostInit+0xcc>)
 80138fc:	0019      	movs	r1, r3
 80138fe:	0010      	movs	r0, r2
 8013900:	f002 f8aa 	bl	8015a58 <HAL_GPIO_Init>
}
 8013904:	46c0      	nop			@ (mov r8, r8)
 8013906:	46bd      	mov	sp, r7
 8013908:	b00b      	add	sp, #44	@ 0x2c
 801390a:	bd90      	pop	{r4, r7, pc}
 801390c:	40021000 	.word	0x40021000
 8013910:	40000400 	.word	0x40000400
 8013914:	50000800 	.word	0x50000800

08013918 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 801391c:	4b17      	ldr	r3, [pc, #92]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 801391e:	4a18      	ldr	r2, [pc, #96]	@ (8013980 <MX_LPUART1_UART_Init+0x68>)
 8013920:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013922:	4b16      	ldr	r3, [pc, #88]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013924:	22e1      	movs	r2, #225	@ 0xe1
 8013926:	0252      	lsls	r2, r2, #9
 8013928:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801392a:	4b14      	ldr	r3, [pc, #80]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 801392c:	2200      	movs	r2, #0
 801392e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013930:	4b12      	ldr	r3, [pc, #72]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013932:	2200      	movs	r2, #0
 8013934:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013936:	4b11      	ldr	r3, [pc, #68]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013938:	2200      	movs	r2, #0
 801393a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801393c:	4b0f      	ldr	r3, [pc, #60]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 801393e:	220c      	movs	r2, #12
 8013940:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013942:	4b0e      	ldr	r3, [pc, #56]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013944:	2200      	movs	r2, #0
 8013946:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013948:	4b0c      	ldr	r3, [pc, #48]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 801394a:	2200      	movs	r2, #0
 801394c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 801394e:	4b0b      	ldr	r3, [pc, #44]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013950:	2218      	movs	r2, #24
 8013952:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013954:	4b09      	ldr	r3, [pc, #36]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013956:	2280      	movs	r2, #128	@ 0x80
 8013958:	0212      	lsls	r2, r2, #8
 801395a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 801395c:	4b07      	ldr	r3, [pc, #28]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 801395e:	2280      	movs	r2, #128	@ 0x80
 8013960:	0152      	lsls	r2, r2, #5
 8013962:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013964:	4b05      	ldr	r3, [pc, #20]	@ (801397c <MX_LPUART1_UART_Init+0x64>)
 8013966:	0018      	movs	r0, r3
 8013968:	f009 fcea 	bl	801d340 <HAL_UART_Init>
 801396c:	1e03      	subs	r3, r0, #0
 801396e:	d001      	beq.n	8013974 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013970:	f7f9 fd08 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013974:	46c0      	nop			@ (mov r8, r8)
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	46c0      	nop			@ (mov r8, r8)
 801397c:	2000222c 	.word	0x2000222c
 8013980:	40004800 	.word	0x40004800

08013984 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013988:	4b14      	ldr	r3, [pc, #80]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 801398a:	4a15      	ldr	r2, [pc, #84]	@ (80139e0 <MX_USART1_UART_Init+0x5c>)
 801398c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801398e:	4b13      	ldr	r3, [pc, #76]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 8013990:	22e1      	movs	r2, #225	@ 0xe1
 8013992:	0252      	lsls	r2, r2, #9
 8013994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013996:	4b11      	ldr	r3, [pc, #68]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 8013998:	2200      	movs	r2, #0
 801399a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801399c:	4b0f      	ldr	r3, [pc, #60]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 801399e:	2200      	movs	r2, #0
 80139a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80139a2:	4b0e      	ldr	r3, [pc, #56]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80139a8:	4b0c      	ldr	r3, [pc, #48]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139aa:	220c      	movs	r2, #12
 80139ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80139ae:	4b0b      	ldr	r3, [pc, #44]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80139b4:	4b09      	ldr	r3, [pc, #36]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80139ba:	4b08      	ldr	r3, [pc, #32]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139bc:	2200      	movs	r2, #0
 80139be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80139c0:	4b06      	ldr	r3, [pc, #24]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80139c6:	4b05      	ldr	r3, [pc, #20]	@ (80139dc <MX_USART1_UART_Init+0x58>)
 80139c8:	0018      	movs	r0, r3
 80139ca:	f009 fcb9 	bl	801d340 <HAL_UART_Init>
 80139ce:	1e03      	subs	r3, r0, #0
 80139d0:	d001      	beq.n	80139d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80139d2:	f7f9 fcd7 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80139d6:	46c0      	nop			@ (mov r8, r8)
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	200022e4 	.word	0x200022e4
 80139e0:	40013800 	.word	0x40013800

080139e4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_Init 0 */

  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PCE);
 80139e8:	4b24      	ldr	r3, [pc, #144]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	681a      	ldr	r2, [r3, #0]
 80139ee:	4b23      	ldr	r3, [pc, #140]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	4923      	ldr	r1, [pc, #140]	@ (8013a80 <MX_USART4_UART_Init+0x9c>)
 80139f4:	400a      	ands	r2, r1
 80139f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PEIE);
 80139f8:	4b20      	ldr	r3, [pc, #128]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	4b1f      	ldr	r3, [pc, #124]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4920      	ldr	r1, [pc, #128]	@ (8013a84 <MX_USART4_UART_Init+0xa0>)
 8013a04:	400a      	ands	r2, r1
 8013a06:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013a08:	4b1c      	ldr	r3, [pc, #112]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8013a88 <MX_USART4_UART_Init+0xa4>)
 8013a0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a10:	22e1      	movs	r2, #225	@ 0xe1
 8013a12:	0252      	lsls	r2, r2, #9
 8013a14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013a16:	4b19      	ldr	r3, [pc, #100]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013a1c:	4b17      	ldr	r3, [pc, #92]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a1e:	2200      	movs	r2, #0
 8013a20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013a22:	4b16      	ldr	r3, [pc, #88]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a24:	2200      	movs	r2, #0
 8013a26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013a28:	4b14      	ldr	r3, [pc, #80]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a2a:	220c      	movs	r2, #12
 8013a2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a2e:	4b13      	ldr	r3, [pc, #76]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a34:	4b11      	ldr	r3, [pc, #68]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a3a:	4b10      	ldr	r3, [pc, #64]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013a40:	4b0e      	ldr	r3, [pc, #56]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a42:	2200      	movs	r2, #0
 8013a44:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PCE);
 8013a46:	4b0d      	ldr	r3, [pc, #52]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	490b      	ldr	r1, [pc, #44]	@ (8013a80 <MX_USART4_UART_Init+0x9c>)
 8013a52:	400a      	ands	r2, r1
 8013a54:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PEIE);
 8013a56:	4b09      	ldr	r3, [pc, #36]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	4b07      	ldr	r3, [pc, #28]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	4908      	ldr	r1, [pc, #32]	@ (8013a84 <MX_USART4_UART_Init+0xa0>)
 8013a62:	400a      	ands	r2, r1
 8013a64:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013a66:	4b05      	ldr	r3, [pc, #20]	@ (8013a7c <MX_USART4_UART_Init+0x98>)
 8013a68:	0018      	movs	r0, r3
 8013a6a:	f009 fc69 	bl	801d340 <HAL_UART_Init>
 8013a6e:	1e03      	subs	r3, r0, #0
 8013a70:	d001      	beq.n	8013a76 <MX_USART4_UART_Init+0x92>
  {
    Error_Handler();
 8013a72:	f7f9 fc87 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013a76:	46c0      	nop			@ (mov r8, r8)
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	2000239c 	.word	0x2000239c
 8013a80:	fffffbff 	.word	0xfffffbff
 8013a84:	fffffeff 	.word	0xfffffeff
 8013a88:	40004c00 	.word	0x40004c00

08013a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013a8c:	b590      	push	{r4, r7, lr}
 8013a8e:	b08d      	sub	sp, #52	@ 0x34
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a94:	241c      	movs	r4, #28
 8013a96:	193b      	adds	r3, r7, r4
 8013a98:	0018      	movs	r0, r3
 8013a9a:	2314      	movs	r3, #20
 8013a9c:	001a      	movs	r2, r3
 8013a9e:	2100      	movs	r1, #0
 8013aa0:	f012 fdf2 	bl	8026688 <memset>
  if(uartHandle->Instance==LPUART1)
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	4a8b      	ldr	r2, [pc, #556]	@ (8013cd8 <HAL_UART_MspInit+0x24c>)
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d129      	bne.n	8013b02 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013aae:	4b8b      	ldr	r3, [pc, #556]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013ab4:	2180      	movs	r1, #128	@ 0x80
 8013ab6:	02c9      	lsls	r1, r1, #11
 8013ab8:	430a      	orrs	r2, r1
 8013aba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013abc:	4b87      	ldr	r3, [pc, #540]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ac0:	4b86      	ldr	r3, [pc, #536]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013ac2:	2104      	movs	r1, #4
 8013ac4:	430a      	orrs	r2, r1
 8013ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013ac8:	4b84      	ldr	r3, [pc, #528]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013acc:	2204      	movs	r2, #4
 8013ace:	4013      	ands	r3, r2
 8013ad0:	61bb      	str	r3, [r7, #24]
 8013ad2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013ad4:	0021      	movs	r1, r4
 8013ad6:	187b      	adds	r3, r7, r1
 8013ad8:	2203      	movs	r2, #3
 8013ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013adc:	187b      	adds	r3, r7, r1
 8013ade:	2202      	movs	r2, #2
 8013ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ae2:	187b      	adds	r3, r7, r1
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ae8:	187b      	adds	r3, r7, r1
 8013aea:	2203      	movs	r2, #3
 8013aec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013aee:	187b      	adds	r3, r7, r1
 8013af0:	2206      	movs	r2, #6
 8013af2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013af4:	187b      	adds	r3, r7, r1
 8013af6:	4a7a      	ldr	r2, [pc, #488]	@ (8013ce0 <HAL_UART_MspInit+0x254>)
 8013af8:	0019      	movs	r1, r3
 8013afa:	0010      	movs	r0, r2
 8013afc:	f001 ffac 	bl	8015a58 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013b00:	e0e5      	b.n	8013cce <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4a77      	ldr	r2, [pc, #476]	@ (8013ce4 <HAL_UART_MspInit+0x258>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d133      	bne.n	8013b74 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013b0c:	4b73      	ldr	r3, [pc, #460]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b10:	4b72      	ldr	r3, [pc, #456]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b12:	2180      	movs	r1, #128	@ 0x80
 8013b14:	01c9      	lsls	r1, r1, #7
 8013b16:	430a      	orrs	r2, r1
 8013b18:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b1a:	4b70      	ldr	r3, [pc, #448]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b20:	2101      	movs	r1, #1
 8013b22:	430a      	orrs	r2, r1
 8013b24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b26:	4b6d      	ldr	r3, [pc, #436]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	4013      	ands	r3, r2
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013b32:	211c      	movs	r1, #28
 8013b34:	187b      	adds	r3, r7, r1
 8013b36:	22c0      	movs	r2, #192	@ 0xc0
 8013b38:	00d2      	lsls	r2, r2, #3
 8013b3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b3c:	187b      	adds	r3, r7, r1
 8013b3e:	2202      	movs	r2, #2
 8013b40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b42:	187b      	adds	r3, r7, r1
 8013b44:	2200      	movs	r2, #0
 8013b46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b48:	187b      	adds	r3, r7, r1
 8013b4a:	2203      	movs	r2, #3
 8013b4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013b4e:	187b      	adds	r3, r7, r1
 8013b50:	2204      	movs	r2, #4
 8013b52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b54:	187a      	adds	r2, r7, r1
 8013b56:	23a0      	movs	r3, #160	@ 0xa0
 8013b58:	05db      	lsls	r3, r3, #23
 8013b5a:	0011      	movs	r1, r2
 8013b5c:	0018      	movs	r0, r3
 8013b5e:	f001 ff7b 	bl	8015a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013b62:	2200      	movs	r2, #0
 8013b64:	2100      	movs	r1, #0
 8013b66:	201b      	movs	r0, #27
 8013b68:	f001 fb1e 	bl	80151a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013b6c:	201b      	movs	r0, #27
 8013b6e:	f001 fb30 	bl	80151d2 <HAL_NVIC_EnableIRQ>
}
 8013b72:	e0ac      	b.n	8013cce <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4a5b      	ldr	r2, [pc, #364]	@ (8013ce8 <HAL_UART_MspInit+0x25c>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d000      	beq.n	8013b80 <HAL_UART_MspInit+0xf4>
 8013b7e:	e0a6      	b.n	8013cce <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013b80:	4b56      	ldr	r3, [pc, #344]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b84:	4b55      	ldr	r3, [pc, #340]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b86:	2180      	movs	r1, #128	@ 0x80
 8013b88:	0309      	lsls	r1, r1, #12
 8013b8a:	430a      	orrs	r2, r1
 8013b8c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b8e:	4b53      	ldr	r3, [pc, #332]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b92:	4b52      	ldr	r3, [pc, #328]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b94:	2101      	movs	r1, #1
 8013b96:	430a      	orrs	r2, r1
 8013b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b9a:	4b50      	ldr	r3, [pc, #320]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	4013      	ands	r3, r2
 8013ba2:	613b      	str	r3, [r7, #16]
 8013ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013baa:	4b4c      	ldr	r3, [pc, #304]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013bac:	2104      	movs	r1, #4
 8013bae:	430a      	orrs	r2, r1
 8013bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8013cdc <HAL_UART_MspInit+0x250>)
 8013bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb6:	2204      	movs	r2, #4
 8013bb8:	4013      	ands	r3, r2
 8013bba:	60fb      	str	r3, [r7, #12]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013bbe:	241c      	movs	r4, #28
 8013bc0:	193b      	adds	r3, r7, r4
 8013bc2:	2202      	movs	r2, #2
 8013bc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bc6:	193b      	adds	r3, r7, r4
 8013bc8:	2202      	movs	r2, #2
 8013bca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bcc:	193b      	adds	r3, r7, r4
 8013bce:	2200      	movs	r2, #0
 8013bd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bd2:	193b      	adds	r3, r7, r4
 8013bd4:	2203      	movs	r2, #3
 8013bd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013bd8:	193b      	adds	r3, r7, r4
 8013bda:	2206      	movs	r2, #6
 8013bdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013bde:	193a      	adds	r2, r7, r4
 8013be0:	23a0      	movs	r3, #160	@ 0xa0
 8013be2:	05db      	lsls	r3, r3, #23
 8013be4:	0011      	movs	r1, r2
 8013be6:	0018      	movs	r0, r3
 8013be8:	f001 ff36 	bl	8015a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013bec:	0021      	movs	r1, r4
 8013bee:	187b      	adds	r3, r7, r1
 8013bf0:	2280      	movs	r2, #128	@ 0x80
 8013bf2:	00d2      	lsls	r2, r2, #3
 8013bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bf6:	187b      	adds	r3, r7, r1
 8013bf8:	2202      	movs	r2, #2
 8013bfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bfc:	187b      	adds	r3, r7, r1
 8013bfe:	2200      	movs	r2, #0
 8013c00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c02:	187b      	adds	r3, r7, r1
 8013c04:	2203      	movs	r2, #3
 8013c06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c08:	187b      	adds	r3, r7, r1
 8013c0a:	2206      	movs	r2, #6
 8013c0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c0e:	187b      	adds	r3, r7, r1
 8013c10:	4a33      	ldr	r2, [pc, #204]	@ (8013ce0 <HAL_UART_MspInit+0x254>)
 8013c12:	0019      	movs	r1, r3
 8013c14:	0010      	movs	r0, r2
 8013c16:	f001 ff1f 	bl	8015a58 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013c1a:	4b34      	ldr	r3, [pc, #208]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c1c:	4a34      	ldr	r2, [pc, #208]	@ (8013cf0 <HAL_UART_MspInit+0x264>)
 8013c1e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013c20:	4b32      	ldr	r3, [pc, #200]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c22:	220c      	movs	r2, #12
 8013c24:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013c26:	4b31      	ldr	r3, [pc, #196]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c28:	2200      	movs	r2, #0
 8013c2a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013c32:	4b2e      	ldr	r3, [pc, #184]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c34:	2280      	movs	r2, #128	@ 0x80
 8013c36:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013c38:	4b2c      	ldr	r3, [pc, #176]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c40:	2200      	movs	r2, #0
 8013c42:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013c44:	4b29      	ldr	r3, [pc, #164]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c46:	2220      	movs	r2, #32
 8013c48:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013c4a:	4b28      	ldr	r3, [pc, #160]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013c50:	4b26      	ldr	r3, [pc, #152]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c52:	0018      	movs	r0, r3
 8013c54:	f001 fada 	bl	801520c <HAL_DMA_Init>
 8013c58:	1e03      	subs	r3, r0, #0
 8013c5a:	d001      	beq.n	8013c60 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013c5c:	f7f9 fb92 	bl	800d384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	4a22      	ldr	r2, [pc, #136]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c64:	675a      	str	r2, [r3, #116]	@ 0x74
 8013c66:	4b21      	ldr	r3, [pc, #132]	@ (8013cec <HAL_UART_MspInit+0x260>)
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013c6c:	4b21      	ldr	r3, [pc, #132]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c6e:	4a22      	ldr	r2, [pc, #136]	@ (8013cf8 <HAL_UART_MspInit+0x26c>)
 8013c70:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013c72:	4b20      	ldr	r3, [pc, #128]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c74:	220c      	movs	r2, #12
 8013c76:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013c78:	4b1e      	ldr	r3, [pc, #120]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c7a:	2210      	movs	r2, #16
 8013c7c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c80:	2200      	movs	r2, #0
 8013c82:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013c84:	4b1b      	ldr	r3, [pc, #108]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c86:	2280      	movs	r2, #128	@ 0x80
 8013c88:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013c90:	4b18      	ldr	r3, [pc, #96]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013c96:	4b17      	ldr	r3, [pc, #92]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013c9c:	4b15      	ldr	r3, [pc, #84]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013ca2:	4b14      	ldr	r3, [pc, #80]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013ca4:	0018      	movs	r0, r3
 8013ca6:	f001 fab1 	bl	801520c <HAL_DMA_Init>
 8013caa:	1e03      	subs	r3, r0, #0
 8013cac:	d001      	beq.n	8013cb2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013cae:	f7f9 fb69 	bl	800d384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013cb6:	671a      	str	r2, [r3, #112]	@ 0x70
 8013cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8013cf4 <HAL_UART_MspInit+0x268>)
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	200e      	movs	r0, #14
 8013cc4:	f001 fa70 	bl	80151a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013cc8:	200e      	movs	r0, #14
 8013cca:	f001 fa82 	bl	80151d2 <HAL_NVIC_EnableIRQ>
}
 8013cce:	46c0      	nop			@ (mov r8, r8)
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	b00d      	add	sp, #52	@ 0x34
 8013cd4:	bd90      	pop	{r4, r7, pc}
 8013cd6:	46c0      	nop			@ (mov r8, r8)
 8013cd8:	40004800 	.word	0x40004800
 8013cdc:	40021000 	.word	0x40021000
 8013ce0:	50000800 	.word	0x50000800
 8013ce4:	40013800 	.word	0x40013800
 8013ce8:	40004c00 	.word	0x40004c00
 8013cec:	20002454 	.word	0x20002454
 8013cf0:	4002006c 	.word	0x4002006c
 8013cf4:	2000249c 	.word	0x2000249c
 8013cf8:	40020080 	.word	0x40020080

08013cfc <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b086      	sub	sp, #24
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013d04:	f000 fddc 	bl	80148c0 <HAL_GetTick>
 8013d08:	0003      	movs	r3, r0
 8013d0a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8013d80 <TimestampIsReached+0x84>)
 8013d0e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013d10:	697a      	ldr	r2, [r7, #20]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d307      	bcc.n	8013d28 <TimestampIsReached+0x2c>
 8013d18:	697a      	ldr	r2, [r7, #20]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	693a      	ldr	r2, [r7, #16]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d901      	bls.n	8013d28 <TimestampIsReached+0x2c>
 8013d24:	2201      	movs	r2, #1
 8013d26:	e000      	b.n	8013d2a <TimestampIsReached+0x2e>
 8013d28:	2200      	movs	r2, #0
 8013d2a:	230f      	movs	r3, #15
 8013d2c:	18fb      	adds	r3, r7, r3
 8013d2e:	701a      	strb	r2, [r3, #0]
 8013d30:	781a      	ldrb	r2, [r3, #0]
 8013d32:	2101      	movs	r1, #1
 8013d34:	400a      	ands	r2, r1
 8013d36:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d207      	bcs.n	8013d50 <TimestampIsReached+0x54>
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	1ad3      	subs	r3, r2, r3
 8013d46:	693a      	ldr	r2, [r7, #16]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d201      	bcs.n	8013d50 <TimestampIsReached+0x54>
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	e000      	b.n	8013d52 <TimestampIsReached+0x56>
 8013d50:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013d52:	200e      	movs	r0, #14
 8013d54:	183b      	adds	r3, r7, r0
 8013d56:	701a      	strb	r2, [r3, #0]
 8013d58:	781a      	ldrb	r2, [r3, #0]
 8013d5a:	2101      	movs	r1, #1
 8013d5c:	400a      	ands	r2, r1
 8013d5e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013d60:	230f      	movs	r3, #15
 8013d62:	18fb      	adds	r3, r7, r3
 8013d64:	781b      	ldrb	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d103      	bne.n	8013d72 <TimestampIsReached+0x76>
 8013d6a:	183b      	adds	r3, r7, r0
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d001      	beq.n	8013d76 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e000      	b.n	8013d78 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013d76:	2300      	movs	r3, #0
}
 8013d78:	0018      	movs	r0, r3
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	b006      	add	sp, #24
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	7fffffff 	.word	0x7fffffff

08013d84 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013d8c:	f000 fd98 	bl	80148c0 <HAL_GetTick>
 8013d90:	0002      	movs	r2, r0
 8013d92:	4904      	ldr	r1, [pc, #16]	@ (8013da4 <AddTimestamp+0x20>)
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	0018      	movs	r0, r3
 8013d98:	f012 fb2e 	bl	80263f8 <siprintf>
}
 8013d9c:	46c0      	nop			@ (mov r8, r8)
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	b002      	add	sp, #8
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	0802db78 	.word	0x0802db78

08013da8 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013da8:	b40c      	push	{r2, r3}
 8013daa:	b5b0      	push	{r4, r5, r7, lr}
 8013dac:	b0b4      	sub	sp, #208	@ 0xd0
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	0002      	movs	r2, r0
 8013db2:	6039      	str	r1, [r7, #0]
 8013db4:	1dfb      	adds	r3, r7, #7
 8013db6:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013db8:	4b2a      	ldr	r3, [pc, #168]	@ (8013e64 <CreateLine+0xbc>)
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	1dfa      	adds	r2, r7, #7
 8013dbe:	7812      	ldrb	r2, [r2, #0]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d848      	bhi.n	8013e56 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	4928      	ldr	r1, [pc, #160]	@ (8013e68 <CreateLine+0xc0>)
 8013dc8:	240c      	movs	r4, #12
 8013dca:	193b      	adds	r3, r7, r4
 8013dcc:	0018      	movs	r0, r3
 8013dce:	f012 fb13 	bl	80263f8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013dd2:	4b24      	ldr	r3, [pc, #144]	@ (8013e64 <CreateLine+0xbc>)
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d909      	bls.n	8013dee <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013dda:	193b      	adds	r3, r7, r4
 8013ddc:	0018      	movs	r0, r3
 8013dde:	f7ec f9c5 	bl	800016c <strlen>
 8013de2:	0002      	movs	r2, r0
 8013de4:	193b      	adds	r3, r7, r4
 8013de6:	189b      	adds	r3, r3, r2
 8013de8:	0018      	movs	r0, r3
 8013dea:	f7ff ffcb 	bl	8013d84 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013dee:	240c      	movs	r4, #12
 8013df0:	193b      	adds	r3, r7, r4
 8013df2:	0018      	movs	r0, r3
 8013df4:	f7ec f9ba 	bl	800016c <strlen>
 8013df8:	0003      	movs	r3, r0
 8013dfa:	21cc      	movs	r1, #204	@ 0xcc
 8013dfc:	187a      	adds	r2, r7, r1
 8013dfe:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013e00:	23dc      	movs	r3, #220	@ 0xdc
 8013e02:	2508      	movs	r5, #8
 8013e04:	195b      	adds	r3, r3, r5
 8013e06:	19db      	adds	r3, r3, r7
 8013e08:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013e0a:	193a      	adds	r2, r7, r4
 8013e0c:	187b      	adds	r3, r7, r1
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	18d0      	adds	r0, r2, r3
 8013e12:	187b      	adds	r3, r7, r1
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	22be      	movs	r2, #190	@ 0xbe
 8013e18:	1ad3      	subs	r3, r2, r3
 8013e1a:	0019      	movs	r1, r3
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	22d8      	movs	r2, #216	@ 0xd8
 8013e20:	1952      	adds	r2, r2, r5
 8013e22:	19d2      	adds	r2, r2, r7
 8013e24:	6812      	ldr	r2, [r2, #0]
 8013e26:	f012 fb83 	bl	8026530 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013e2a:	4b10      	ldr	r3, [pc, #64]	@ (8013e6c <CreateLine+0xc4>)
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d009      	beq.n	8013e46 <CreateLine+0x9e>
 8013e32:	f7f5 fed5 	bl	8009be0 <Check_USB_PowerOn>
 8013e36:	1e03      	subs	r3, r0, #0
 8013e38:	d005      	beq.n	8013e46 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013e3a:	193a      	adds	r2, r7, r4
 8013e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e70 <CreateLine+0xc8>)
 8013e3e:	0011      	movs	r1, r2
 8013e40:	0018      	movs	r0, r3
 8013e42:	f7f4 fe13 	bl	8008a6c <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013e46:	230c      	movs	r3, #12
 8013e48:	18fa      	adds	r2, r7, r3
 8013e4a:	4b09      	ldr	r3, [pc, #36]	@ (8013e70 <CreateLine+0xc8>)
 8013e4c:	0011      	movs	r1, r2
 8013e4e:	0018      	movs	r0, r3
 8013e50:	f012 fa62 	bl	8026318 <iprintf>
 8013e54:	e000      	b.n	8013e58 <CreateLine+0xb0>
    return;
 8013e56:	46c0      	nop			@ (mov r8, r8)
}
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	b034      	add	sp, #208	@ 0xd0
 8013e5c:	bcb0      	pop	{r4, r5, r7}
 8013e5e:	bc08      	pop	{r3}
 8013e60:	b002      	add	sp, #8
 8013e62:	4718      	bx	r3
 8013e64:	200000f0 	.word	0x200000f0
 8013e68:	0802db84 	.word	0x0802db84
 8013e6c:	200010f7 	.word	0x200010f7
 8013e70:	0802db88 	.word	0x0802db88

08013e74 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	b29a      	uxth	r2, r3
 8013e84:	68b9      	ldr	r1, [r7, #8]
 8013e86:	4804      	ldr	r0, [pc, #16]	@ (8013e98 <_write+0x24>)
 8013e88:	2364      	movs	r3, #100	@ 0x64
 8013e8a:	f009 fabf 	bl	801d40c <HAL_UART_Transmit>
  return count;
 8013e8e:	687b      	ldr	r3, [r7, #4]
}
 8013e90:	0018      	movs	r0, r3
 8013e92:	46bd      	mov	sp, r7
 8013e94:	b004      	add	sp, #16
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	200022e4 	.word	0x200022e4

08013e9c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	0002      	movs	r2, r0
 8013ea4:	1dfb      	adds	r3, r7, #7
 8013ea6:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013ea8:	4b03      	ldr	r3, [pc, #12]	@ (8013eb8 <SetVerboseLevel+0x1c>)
 8013eaa:	1dfa      	adds	r2, r7, #7
 8013eac:	7812      	ldrb	r2, [r2, #0]
 8013eae:	701a      	strb	r2, [r3, #0]
}
 8013eb0:	46c0      	nop			@ (mov r8, r8)
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	b002      	add	sp, #8
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	200000f0 	.word	0x200000f0

08013ebc <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013ec0:	4b02      	ldr	r3, [pc, #8]	@ (8013ecc <GetVerboseLevel+0x10>)
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	0018      	movs	r0, r3
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	46c0      	nop			@ (mov r8, r8)
 8013ecc:	200000f0 	.word	0x200000f0

08013ed0 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b08c      	sub	sp, #48	@ 0x30
 8013ed4:	af00      	add	r7, sp, #0
  char msgout[42];
#else
  char msgout[56];
#endif
#ifdef IGNORE_PARITY_ERRORS
  sprintf(msgout,"Build ignores parity errors from ESP32");
 8013ed6:	4a27      	ldr	r2, [pc, #156]	@ (8013f74 <BinaryReleaseInfo+0xa4>)
 8013ed8:	1d3b      	adds	r3, r7, #4
 8013eda:	0011      	movs	r1, r2
 8013edc:	0018      	movs	r0, r3
 8013ede:	f012 fa8b 	bl	80263f8 <siprintf>
  if (!usblog) {
 8013ee2:	4b25      	ldr	r3, [pc, #148]	@ (8013f78 <BinaryReleaseInfo+0xa8>)
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	2201      	movs	r2, #1
 8013ee8:	4053      	eors	r3, r2
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d005      	beq.n	8013efc <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013ef0:	1d3a      	adds	r2, r7, #4
 8013ef2:	4b22      	ldr	r3, [pc, #136]	@ (8013f7c <BinaryReleaseInfo+0xac>)
 8013ef4:	0011      	movs	r1, r2
 8013ef6:	0018      	movs	r0, r3
 8013ef8:	f7f4 fdb8 	bl	8008a6c <printf_USB>
  }
#endif
#ifdef DEBUG
  #ifndef LARGEBATTERY
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013efc:	4a20      	ldr	r2, [pc, #128]	@ (8013f80 <BinaryReleaseInfo+0xb0>)
 8013efe:	4921      	ldr	r1, [pc, #132]	@ (8013f84 <BinaryReleaseInfo+0xb4>)
 8013f00:	1d3b      	adds	r3, r7, #4
 8013f02:	0018      	movs	r0, r3
 8013f04:	f012 fa78 	bl	80263f8 <siprintf>
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
  #else
  sprintf(msgout,"Software version: %s Large Battery, Release build", SRC_VERSION);
  #endif
#endif
  if (!usblog) {
 8013f08:	4b1b      	ldr	r3, [pc, #108]	@ (8013f78 <BinaryReleaseInfo+0xa8>)
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	4053      	eors	r3, r2
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d005      	beq.n	8013f22 <BinaryReleaseInfo+0x52>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013f16:	1d3a      	adds	r2, r7, #4
 8013f18:	4b18      	ldr	r3, [pc, #96]	@ (8013f7c <BinaryReleaseInfo+0xac>)
 8013f1a:	0011      	movs	r1, r2
 8013f1c:	0018      	movs	r0, r3
 8013f1e:	f7f4 fda5 	bl	8008a6c <printf_USB>
  }
  Info(msgout);
 8013f22:	1d3a      	adds	r2, r7, #4
 8013f24:	4b18      	ldr	r3, [pc, #96]	@ (8013f88 <BinaryReleaseInfo+0xb8>)
 8013f26:	0019      	movs	r1, r3
 8013f28:	2002      	movs	r0, #2
 8013f2a:	f7ff ff3d 	bl	8013da8 <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8013f2e:	4b17      	ldr	r3, [pc, #92]	@ (8013f8c <BinaryReleaseInfo+0xbc>)
 8013f30:	4a17      	ldr	r2, [pc, #92]	@ (8013f90 <BinaryReleaseInfo+0xc0>)
 8013f32:	4918      	ldr	r1, [pc, #96]	@ (8013f94 <BinaryReleaseInfo+0xc4>)
 8013f34:	1d38      	adds	r0, r7, #4
 8013f36:	f012 fa5f 	bl	80263f8 <siprintf>
  if (!usblog) {
 8013f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8013f78 <BinaryReleaseInfo+0xa8>)
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	2201      	movs	r2, #1
 8013f40:	4053      	eors	r3, r2
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d005      	beq.n	8013f54 <BinaryReleaseInfo+0x84>
    printf_USB("%s\r\n", msgout);  // always forced shown even if usb logging is off
 8013f48:	1d3a      	adds	r2, r7, #4
 8013f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8013f7c <BinaryReleaseInfo+0xac>)
 8013f4c:	0011      	movs	r1, r2
 8013f4e:	0018      	movs	r0, r3
 8013f50:	f7f4 fd8c 	bl	8008a6c <printf_USB>
  }
  Info(msgout);
 8013f54:	1d3a      	adds	r2, r7, #4
 8013f56:	4b0c      	ldr	r3, [pc, #48]	@ (8013f88 <BinaryReleaseInfo+0xb8>)
 8013f58:	0019      	movs	r1, r3
 8013f5a:	2002      	movs	r0, #2
 8013f5c:	f7ff ff24 	bl	8013da8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013f60:	4b0d      	ldr	r3, [pc, #52]	@ (8013f98 <BinaryReleaseInfo+0xc8>)
 8013f62:	4a0e      	ldr	r2, [pc, #56]	@ (8013f9c <BinaryReleaseInfo+0xcc>)
 8013f64:	4908      	ldr	r1, [pc, #32]	@ (8013f88 <BinaryReleaseInfo+0xb8>)
 8013f66:	2002      	movs	r0, #2
 8013f68:	f7ff ff1e 	bl	8013da8 <CreateLine>
}
 8013f6c:	46c0      	nop			@ (mov r8, r8)
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	b00c      	add	sp, #48	@ 0x30
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	0802db90 	.word	0x0802db90
 8013f78:	200010f7 	.word	0x200010f7
 8013f7c:	0802db88 	.word	0x0802db88
 8013f80:	0802dbb8 	.word	0x0802dbb8
 8013f84:	0802dbc0 	.word	0x0802dbc0
 8013f88:	0802dbe4 	.word	0x0802dbe4
 8013f8c:	0802dbe8 	.word	0x0802dbe8
 8013f90:	0802dbf4 	.word	0x0802dbf4
 8013f94:	0802dc00 	.word	0x0802dc00
 8013f98:	0802dc14 	.word	0x0802dc14
 8013f9c:	0802dc20 	.word	0x0802dc20

08013fa0 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af02      	add	r7, sp, #8
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	4a07      	ldr	r2, [pc, #28]	@ (8013fcc <errorHandler+0x2c>)
 8013fb0:	4907      	ldr	r1, [pc, #28]	@ (8013fd0 <errorHandler+0x30>)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	0003      	movs	r3, r0
 8013fbc:	2001      	movs	r0, #1
 8013fbe:	f7ff fef3 	bl	8013da8 <CreateLine>
//    while (true)
//    {
//    }
}
 8013fc2:	46c0      	nop			@ (mov r8, r8)
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	b004      	add	sp, #16
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	46c0      	nop			@ (mov r8, r8)
 8013fcc:	0802dc28 	.word	0x0802dc28
 8013fd0:	0802dc50 	.word	0x0802dc50

08013fd4 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013fd4:	b590      	push	{r4, r7, lr}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6039      	str	r1, [r7, #0]
 8013fdc:	0011      	movs	r1, r2
 8013fde:	1dfb      	adds	r3, r7, #7
 8013fe0:	1c02      	adds	r2, r0, #0
 8013fe2:	701a      	strb	r2, [r3, #0]
 8013fe4:	1dbb      	adds	r3, r7, #6
 8013fe6:	1c0a      	adds	r2, r1, #0
 8013fe8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8013fea:	4b0a      	ldr	r3, [pc, #40]	@ (8014014 <ReadRegister+0x40>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00a      	beq.n	8014008 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8013ff2:	4b08      	ldr	r3, [pc, #32]	@ (8014014 <ReadRegister+0x40>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	1dba      	adds	r2, r7, #6
 8013ff8:	7814      	ldrb	r4, [r2, #0]
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	1dfa      	adds	r2, r7, #7
 8013ffe:	7810      	ldrb	r0, [r2, #0]
 8014000:	0022      	movs	r2, r4
 8014002:	4798      	blx	r3
 8014004:	0003      	movs	r3, r0
 8014006:	e000      	b.n	801400a <ReadRegister+0x36>
	}
	return false;
 8014008:	2300      	movs	r3, #0
}
 801400a:	0018      	movs	r0, r3
 801400c:	46bd      	mov	sp, r7
 801400e:	b003      	add	sp, #12
 8014010:	bd90      	pop	{r4, r7, pc}
 8014012:	46c0      	nop			@ (mov r8, r8)
 8014014:	200024ec 	.word	0x200024ec

08014018 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014018:	b590      	push	{r4, r7, lr}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6039      	str	r1, [r7, #0]
 8014020:	0011      	movs	r1, r2
 8014022:	1dfb      	adds	r3, r7, #7
 8014024:	1c02      	adds	r2, r0, #0
 8014026:	701a      	strb	r2, [r3, #0]
 8014028:	1dbb      	adds	r3, r7, #6
 801402a:	1c0a      	adds	r2, r1, #0
 801402c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801402e:	4b0a      	ldr	r3, [pc, #40]	@ (8014058 <WriteRegister+0x40>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00a      	beq.n	801404c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8014036:	4b08      	ldr	r3, [pc, #32]	@ (8014058 <WriteRegister+0x40>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	1dba      	adds	r2, r7, #6
 801403c:	7814      	ldrb	r4, [r2, #0]
 801403e:	6839      	ldr	r1, [r7, #0]
 8014040:	1dfa      	adds	r2, r7, #7
 8014042:	7810      	ldrb	r0, [r2, #0]
 8014044:	0022      	movs	r2, r4
 8014046:	4798      	blx	r3
 8014048:	0003      	movs	r3, r0
 801404a:	e000      	b.n	801404e <WriteRegister+0x36>
  }
  return false;
 801404c:	2300      	movs	r3, #0
}
 801404e:	0018      	movs	r0, r3
 8014050:	46bd      	mov	sp, r7
 8014052:	b003      	add	sp, #12
 8014054:	bd90      	pop	{r4, r7, pc}
 8014056:	46c0      	nop			@ (mov r8, r8)
 8014058:	200024f0 	.word	0x200024f0

0801405c <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 801405c:	b580      	push	{r7, lr}
 801405e:	b084      	sub	sp, #16
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	000a      	movs	r2, r1
 8014066:	1cfb      	adds	r3, r7, #3
 8014068:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801406a:	230f      	movs	r3, #15
 801406c:	18fb      	adds	r3, r7, r3
 801406e:	22ff      	movs	r2, #255	@ 0xff
 8014070:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8014072:	230e      	movs	r3, #14
 8014074:	18fb      	adds	r3, r7, r3
 8014076:	2200      	movs	r2, #0
 8014078:	701a      	strb	r2, [r3, #0]
 801407a:	e038      	b.n	80140ee <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 801407c:	230e      	movs	r3, #14
 801407e:	18fb      	adds	r3, r7, r3
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	18d3      	adds	r3, r2, r3
 8014086:	7819      	ldrb	r1, [r3, #0]
 8014088:	220f      	movs	r2, #15
 801408a:	18bb      	adds	r3, r7, r2
 801408c:	18ba      	adds	r2, r7, r2
 801408e:	7812      	ldrb	r2, [r2, #0]
 8014090:	404a      	eors	r2, r1
 8014092:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8014094:	230d      	movs	r3, #13
 8014096:	18fb      	adds	r3, r7, r3
 8014098:	2200      	movs	r2, #0
 801409a:	701a      	strb	r2, [r3, #0]
 801409c:	e01c      	b.n	80140d8 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 801409e:	210f      	movs	r1, #15
 80140a0:	187b      	adds	r3, r7, r1
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	b25b      	sxtb	r3, r3
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	da0a      	bge.n	80140c0 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80140aa:	187b      	adds	r3, r7, r1
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	b25b      	sxtb	r3, r3
 80140b0:	18db      	adds	r3, r3, r3
 80140b2:	b25b      	sxtb	r3, r3
 80140b4:	2231      	movs	r2, #49	@ 0x31
 80140b6:	4053      	eors	r3, r2
 80140b8:	b25a      	sxtb	r2, r3
 80140ba:	187b      	adds	r3, r7, r1
 80140bc:	701a      	strb	r2, [r3, #0]
 80140be:	e005      	b.n	80140cc <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 80140c0:	230f      	movs	r3, #15
 80140c2:	18fa      	adds	r2, r7, r3
 80140c4:	18fb      	adds	r3, r7, r3
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	18db      	adds	r3, r3, r3
 80140ca:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80140cc:	210d      	movs	r1, #13
 80140ce:	187b      	adds	r3, r7, r1
 80140d0:	781a      	ldrb	r2, [r3, #0]
 80140d2:	187b      	adds	r3, r7, r1
 80140d4:	3201      	adds	r2, #1
 80140d6:	701a      	strb	r2, [r3, #0]
 80140d8:	230d      	movs	r3, #13
 80140da:	18fb      	adds	r3, r7, r3
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	2b07      	cmp	r3, #7
 80140e0:	d9dd      	bls.n	801409e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80140e2:	210e      	movs	r1, #14
 80140e4:	187b      	adds	r3, r7, r1
 80140e6:	781a      	ldrb	r2, [r3, #0]
 80140e8:	187b      	adds	r3, r7, r1
 80140ea:	3201      	adds	r2, #1
 80140ec:	701a      	strb	r2, [r3, #0]
 80140ee:	230e      	movs	r3, #14
 80140f0:	18fa      	adds	r2, r7, r3
 80140f2:	1cfb      	adds	r3, r7, #3
 80140f4:	7812      	ldrb	r2, [r2, #0]
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d3bf      	bcc.n	801407c <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80140fc:	230f      	movs	r3, #15
 80140fe:	18fb      	adds	r3, r7, r3
 8014100:	781b      	ldrb	r3, [r3, #0]
}
 8014102:	0018      	movs	r0, r3
 8014104:	46bd      	mov	sp, r7
 8014106:	b004      	add	sp, #16
 8014108:	bd80      	pop	{r7, pc}
	...

0801410c <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 801410c:	b5b0      	push	{r4, r5, r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	1c18      	adds	r0, r3, #0
 801411c:	f7ef fbba 	bl	8003894 <__aeabi_f2d>
 8014120:	4a2e      	ldr	r2, [pc, #184]	@ (80141dc <HIDS_DewPointCalculation+0xd0>)
 8014122:	4b2f      	ldr	r3, [pc, #188]	@ (80141e0 <HIDS_DewPointCalculation+0xd4>)
 8014124:	f7ee fc16 	bl	8002954 <__aeabi_dmul>
 8014128:	0002      	movs	r2, r0
 801412a:	000b      	movs	r3, r1
 801412c:	0014      	movs	r4, r2
 801412e:	001d      	movs	r5, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	1c18      	adds	r0, r3, #0
 8014136:	f7ef fbad 	bl	8003894 <__aeabi_f2d>
 801413a:	4a2a      	ldr	r2, [pc, #168]	@ (80141e4 <HIDS_DewPointCalculation+0xd8>)
 801413c:	4b2a      	ldr	r3, [pc, #168]	@ (80141e8 <HIDS_DewPointCalculation+0xdc>)
 801413e:	f7ed fc09 	bl	8001954 <__aeabi_dadd>
 8014142:	0002      	movs	r2, r0
 8014144:	000b      	movs	r3, r1
 8014146:	0020      	movs	r0, r4
 8014148:	0029      	movs	r1, r5
 801414a:	f7ed ffc9 	bl	80020e0 <__aeabi_ddiv>
 801414e:	0002      	movs	r2, r0
 8014150:	000b      	movs	r3, r1
 8014152:	0014      	movs	r4, r2
 8014154:	001d      	movs	r5, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	1c18      	adds	r0, r3, #0
 801415c:	f7ef fb9a 	bl	8003894 <__aeabi_f2d>
 8014160:	2200      	movs	r2, #0
 8014162:	4b22      	ldr	r3, [pc, #136]	@ (80141ec <HIDS_DewPointCalculation+0xe0>)
 8014164:	f7ed ffbc 	bl	80020e0 <__aeabi_ddiv>
 8014168:	0002      	movs	r2, r0
 801416a:	000b      	movs	r3, r1
 801416c:	0010      	movs	r0, r2
 801416e:	0019      	movs	r1, r3
 8014170:	f015 f81a 	bl	80291a8 <log>
 8014174:	0002      	movs	r2, r0
 8014176:	000b      	movs	r3, r1
 8014178:	0020      	movs	r0, r4
 801417a:	0029      	movs	r1, r5
 801417c:	f7ed fbea 	bl	8001954 <__aeabi_dadd>
 8014180:	0002      	movs	r2, r0
 8014182:	000b      	movs	r3, r1
 8014184:	0010      	movs	r0, r2
 8014186:	0019      	movs	r1, r3
 8014188:	f7ef fbcc 	bl	8003924 <__aeabi_d2f>
 801418c:	1c03      	adds	r3, r0, #0
 801418e:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f7ef fb7f 	bl	8003894 <__aeabi_f2d>
 8014196:	4a13      	ldr	r2, [pc, #76]	@ (80141e4 <HIDS_DewPointCalculation+0xd8>)
 8014198:	4b13      	ldr	r3, [pc, #76]	@ (80141e8 <HIDS_DewPointCalculation+0xdc>)
 801419a:	f7ee fbdb 	bl	8002954 <__aeabi_dmul>
 801419e:	0002      	movs	r2, r0
 80141a0:	000b      	movs	r3, r1
 80141a2:	0014      	movs	r4, r2
 80141a4:	001d      	movs	r5, r3
 80141a6:	68f8      	ldr	r0, [r7, #12]
 80141a8:	f7ef fb74 	bl	8003894 <__aeabi_f2d>
 80141ac:	0002      	movs	r2, r0
 80141ae:	000b      	movs	r3, r1
 80141b0:	480a      	ldr	r0, [pc, #40]	@ (80141dc <HIDS_DewPointCalculation+0xd0>)
 80141b2:	490b      	ldr	r1, [pc, #44]	@ (80141e0 <HIDS_DewPointCalculation+0xd4>)
 80141b4:	f7ee feb4 	bl	8002f20 <__aeabi_dsub>
 80141b8:	0002      	movs	r2, r0
 80141ba:	000b      	movs	r3, r1
 80141bc:	0020      	movs	r0, r4
 80141be:	0029      	movs	r1, r5
 80141c0:	f7ed ff8e 	bl	80020e0 <__aeabi_ddiv>
 80141c4:	0002      	movs	r2, r0
 80141c6:	000b      	movs	r3, r1
 80141c8:	0010      	movs	r0, r2
 80141ca:	0019      	movs	r1, r3
 80141cc:	f7ef fbaa 	bl	8003924 <__aeabi_d2f>
 80141d0:	1c03      	adds	r3, r0, #0
}
 80141d2:	1c18      	adds	r0, r3, #0
 80141d4:	46bd      	mov	sp, r7
 80141d6:	b004      	add	sp, #16
 80141d8:	bdb0      	pop	{r4, r5, r7, pc}
 80141da:	46c0      	nop			@ (mov r8, r8)
 80141dc:	b851eb85 	.word	0xb851eb85
 80141e0:	4031451e 	.word	0x4031451e
 80141e4:	66666666 	.word	0x66666666
 80141e8:	406db666 	.word	0x406db666
 80141ec:	40590000 	.word	0x40590000

080141f0 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80141f6:	4b0d      	ldr	r3, [pc, #52]	@ (801422c <HIDS_EnableHeater+0x3c>)
 80141f8:	781a      	ldrb	r2, [r3, #0]
 80141fa:	1dfb      	adds	r3, r7, #7
 80141fc:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80141fe:	1dfb      	adds	r3, r7, #7
 8014200:	2201      	movs	r2, #1
 8014202:	0019      	movs	r1, r3
 8014204:	2044      	movs	r0, #68	@ 0x44
 8014206:	f7ff ff07 	bl	8014018 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 801420a:	1dfb      	adds	r3, r7, #7
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	4a08      	ldr	r2, [pc, #32]	@ (8014230 <HIDS_EnableHeater+0x40>)
 8014210:	4908      	ldr	r1, [pc, #32]	@ (8014234 <HIDS_EnableHeater+0x44>)
 8014212:	2002      	movs	r0, #2
 8014214:	f7ff fdc8 	bl	8013da8 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8014218:	f7f6 f984 	bl	800a524 <getPosixTime>
 801421c:	0002      	movs	r2, r0
 801421e:	4b06      	ldr	r3, [pc, #24]	@ (8014238 <HIDS_EnableHeater+0x48>)
 8014220:	601a      	str	r2, [r3, #0]
}
 8014222:	46c0      	nop			@ (mov r8, r8)
 8014224:	46bd      	mov	sp, r7
 8014226:	b002      	add	sp, #8
 8014228:	bd80      	pop	{r7, pc}
 801422a:	46c0      	nop			@ (mov r8, r8)
 801422c:	200000f1 	.word	0x200000f1
 8014230:	0802dc54 	.word	0x0802dc54
 8014234:	0802dc74 	.word	0x0802dc74
 8014238:	20002504 	.word	0x20002504

0801423c <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8014246:	4b0a      	ldr	r3, [pc, #40]	@ (8014270 <HIDS_Init+0x34>)
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 801424c:	4b09      	ldr	r3, [pc, #36]	@ (8014274 <HIDS_Init+0x38>)
 801424e:	683a      	ldr	r2, [r7, #0]
 8014250:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8014252:	4b09      	ldr	r3, [pc, #36]	@ (8014278 <HIDS_Init+0x3c>)
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	0018      	movs	r0, r3
 8014258:	f000 f840 	bl	80142dc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 801425c:	4b07      	ldr	r3, [pc, #28]	@ (801427c <HIDS_Init+0x40>)
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	0018      	movs	r0, r3
 8014262:	f000 f82b 	bl	80142bc <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8014266:	46c0      	nop			@ (mov r8, r8)
 8014268:	46bd      	mov	sp, r7
 801426a:	b002      	add	sp, #8
 801426c:	bd80      	pop	{r7, pc}
 801426e:	46c0      	nop			@ (mov r8, r8)
 8014270:	200024ec 	.word	0x200024ec
 8014274:	200024f0 	.word	0x200024f0
 8014278:	200000f2 	.word	0x200000f2
 801427c:	200000f1 	.word	0x200000f1

08014280 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014280:	b580      	push	{r7, lr}
 8014282:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8014284:	f000 fb1c 	bl	80148c0 <HAL_GetTick>
 8014288:	0002      	movs	r2, r0
 801428a:	4b08      	ldr	r3, [pc, #32]	@ (80142ac <HIDS_StartMeasurement+0x2c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	18d2      	adds	r2, r2, r3
 8014290:	4b07      	ldr	r3, [pc, #28]	@ (80142b0 <HIDS_StartMeasurement+0x30>)
 8014292:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8014294:	4b07      	ldr	r3, [pc, #28]	@ (80142b4 <HIDS_StartMeasurement+0x34>)
 8014296:	2201      	movs	r2, #1
 8014298:	0019      	movs	r1, r3
 801429a:	2044      	movs	r0, #68	@ 0x44
 801429c:	f7ff febc 	bl	8014018 <WriteRegister>
  MeasurementDone = false;
 80142a0:	4b05      	ldr	r3, [pc, #20]	@ (80142b8 <HIDS_StartMeasurement+0x38>)
 80142a2:	2200      	movs	r2, #0
 80142a4:	701a      	strb	r2, [r3, #0]
}
 80142a6:	46c0      	nop			@ (mov r8, r8)
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	200000f8 	.word	0x200000f8
 80142b0:	200000f4 	.word	0x200000f4
 80142b4:	200000f2 	.word	0x200000f2
 80142b8:	20002508 	.word	0x20002508

080142bc <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	0002      	movs	r2, r0
 80142c4:	1dfb      	adds	r3, r7, #7
 80142c6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80142c8:	4b03      	ldr	r3, [pc, #12]	@ (80142d8 <HIDS_SetHeaterMode+0x1c>)
 80142ca:	1dfa      	adds	r2, r7, #7
 80142cc:	7812      	ldrb	r2, [r2, #0]
 80142ce:	701a      	strb	r2, [r3, #0]
}
 80142d0:	46c0      	nop			@ (mov r8, r8)
 80142d2:	46bd      	mov	sp, r7
 80142d4:	b002      	add	sp, #8
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	200000f1 	.word	0x200000f1

080142dc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	0002      	movs	r2, r0
 80142e4:	1dfb      	adds	r3, r7, #7
 80142e6:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80142e8:	4b03      	ldr	r3, [pc, #12]	@ (80142f8 <HIDS_SetMeasurementMode+0x1c>)
 80142ea:	1dfa      	adds	r2, r7, #7
 80142ec:	7812      	ldrb	r2, [r2, #0]
 80142ee:	701a      	strb	r2, [r3, #0]
}
 80142f0:	46c0      	nop			@ (mov r8, r8)
 80142f2:	46bd      	mov	sp, r7
 80142f4:	b002      	add	sp, #8
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	200000f2 	.word	0x200000f2

080142fc <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8014304:	f000 fadc 	bl	80148c0 <HAL_GetTick>
 8014308:	0002      	movs	r2, r0
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	18d2      	adds	r2, r2, r3
 801430e:	4b03      	ldr	r3, [pc, #12]	@ (801431c <setHIDSTimeStamp+0x20>)
 8014310:	601a      	str	r2, [r3, #0]
}
 8014312:	46c0      	nop			@ (mov r8, r8)
 8014314:	46bd      	mov	sp, r7
 8014316:	b002      	add	sp, #8
 8014318:	bd80      	pop	{r7, pc}
 801431a:	46c0      	nop			@ (mov r8, r8)
 801431c:	2000250c 	.word	0x2000250c

08014320 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8014320:	b590      	push	{r4, r7, lr}
 8014322:	b085      	sub	sp, #20
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	781a      	ldrb	r2, [r3, #0]
 801432c:	210c      	movs	r1, #12
 801432e:	187b      	adds	r3, r7, r1
 8014330:	701a      	strb	r2, [r3, #0]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	785a      	ldrb	r2, [r3, #1]
 8014336:	187b      	adds	r3, r7, r1
 8014338:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801433a:	240f      	movs	r4, #15
 801433c:	193b      	adds	r3, r7, r4
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	7892      	ldrb	r2, [r2, #2]
 8014342:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8014344:	187b      	adds	r3, r7, r1
 8014346:	2102      	movs	r1, #2
 8014348:	0018      	movs	r0, r3
 801434a:	f7ff fe87 	bl	801405c <CalculateCRC>
 801434e:	0003      	movs	r3, r0
 8014350:	001a      	movs	r2, r3
 8014352:	193b      	adds	r3, r7, r4
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	4293      	cmp	r3, r2
 8014358:	d007      	beq.n	801436a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801435a:	4a1a      	ldr	r2, [pc, #104]	@ (80143c4 <CheckCRC+0xa4>)
 801435c:	4b1a      	ldr	r3, [pc, #104]	@ (80143c8 <CheckCRC+0xa8>)
 801435e:	0019      	movs	r1, r3
 8014360:	2001      	movs	r0, #1
 8014362:	f7ff fd21 	bl	8013da8 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8014366:	2300      	movs	r3, #0
 8014368:	e027      	b.n	80143ba <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	78da      	ldrb	r2, [r3, #3]
 801436e:	2108      	movs	r1, #8
 8014370:	187b      	adds	r3, r7, r1
 8014372:	701a      	strb	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	791a      	ldrb	r2, [r3, #4]
 8014378:	187b      	adds	r3, r7, r1
 801437a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 801437c:	240e      	movs	r4, #14
 801437e:	193b      	adds	r3, r7, r4
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	7952      	ldrb	r2, [r2, #5]
 8014384:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8014386:	187b      	adds	r3, r7, r1
 8014388:	2102      	movs	r1, #2
 801438a:	0018      	movs	r0, r3
 801438c:	f7ff fe66 	bl	801405c <CalculateCRC>
 8014390:	0003      	movs	r3, r0
 8014392:	001a      	movs	r2, r3
 8014394:	193b      	adds	r3, r7, r4
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	4293      	cmp	r3, r2
 801439a:	d00d      	beq.n	80143b8 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 801439c:	4a0b      	ldr	r2, [pc, #44]	@ (80143cc <CheckCRC+0xac>)
 801439e:	4b0a      	ldr	r3, [pc, #40]	@ (80143c8 <CheckCRC+0xa8>)
 80143a0:	0019      	movs	r1, r3
 80143a2:	2001      	movs	r0, #1
 80143a4:	f7ff fd00 	bl	8013da8 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80143a8:	4a09      	ldr	r2, [pc, #36]	@ (80143d0 <CheckCRC+0xb0>)
 80143aa:	4b0a      	ldr	r3, [pc, #40]	@ (80143d4 <CheckCRC+0xb4>)
 80143ac:	2185      	movs	r1, #133	@ 0x85
 80143ae:	0018      	movs	r0, r3
 80143b0:	f7ff fdf6 	bl	8013fa0 <errorHandler>
		return false;
 80143b4:	2300      	movs	r3, #0
 80143b6:	e000      	b.n	80143ba <CheckCRC+0x9a>
	}
	return true;
 80143b8:	2301      	movs	r3, #1
}
 80143ba:	0018      	movs	r0, r3
 80143bc:	46bd      	mov	sp, r7
 80143be:	b005      	add	sp, #20
 80143c0:	bd90      	pop	{r4, r7, pc}
 80143c2:	46c0      	nop			@ (mov r8, r8)
 80143c4:	0802dc78 	.word	0x0802dc78
 80143c8:	0802dca0 	.word	0x0802dca0
 80143cc:	0802dca4 	.word	0x0802dca4
 80143d0:	0802dcd0 	.word	0x0802dcd0
 80143d4:	0802e690 	.word	0x0802e690

080143d8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80143de:	1dbb      	adds	r3, r7, #6
 80143e0:	2289      	movs	r2, #137	@ 0x89
 80143e2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80143e4:	1dbb      	adds	r3, r7, #6
 80143e6:	2201      	movs	r2, #1
 80143e8:	0019      	movs	r1, r3
 80143ea:	2044      	movs	r0, #68	@ 0x44
 80143ec:	f7ff fe14 	bl	8014018 <WriteRegister>
	HAL_Delay(30);
 80143f0:	201e      	movs	r0, #30
 80143f2:	f000 fa6f 	bl	80148d4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80143f6:	4b14      	ldr	r3, [pc, #80]	@ (8014448 <HIDS_DeviceConnected+0x70>)
 80143f8:	2206      	movs	r2, #6
 80143fa:	0019      	movs	r1, r3
 80143fc:	2044      	movs	r0, #68	@ 0x44
 80143fe:	f7ff fde9 	bl	8013fd4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014402:	1dfb      	adds	r3, r7, #7
 8014404:	2200      	movs	r2, #0
 8014406:	701a      	strb	r2, [r3, #0]
 8014408:	e011      	b.n	801442e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 801440a:	1dfb      	adds	r3, r7, #7
 801440c:	7818      	ldrb	r0, [r3, #0]
 801440e:	1dfb      	adds	r3, r7, #7
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	4a0d      	ldr	r2, [pc, #52]	@ (8014448 <HIDS_DeviceConnected+0x70>)
 8014414:	5cd3      	ldrb	r3, [r2, r3]
 8014416:	4a0d      	ldr	r2, [pc, #52]	@ (801444c <HIDS_DeviceConnected+0x74>)
 8014418:	490d      	ldr	r1, [pc, #52]	@ (8014450 <HIDS_DeviceConnected+0x78>)
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	0003      	movs	r3, r0
 801441e:	2002      	movs	r0, #2
 8014420:	f7ff fcc2 	bl	8013da8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014424:	1dfb      	adds	r3, r7, #7
 8014426:	781a      	ldrb	r2, [r3, #0]
 8014428:	1dfb      	adds	r3, r7, #7
 801442a:	3201      	adds	r2, #1
 801442c:	701a      	strb	r2, [r3, #0]
 801442e:	1dfb      	adds	r3, r7, #7
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	2b05      	cmp	r3, #5
 8014434:	d9e9      	bls.n	801440a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8014436:	4b04      	ldr	r3, [pc, #16]	@ (8014448 <HIDS_DeviceConnected+0x70>)
 8014438:	0018      	movs	r0, r3
 801443a:	f7ff ff71 	bl	8014320 <CheckCRC>
 801443e:	0003      	movs	r3, r0
}
 8014440:	0018      	movs	r0, r3
 8014442:	46bd      	mov	sp, r7
 8014444:	b002      	add	sp, #8
 8014446:	bd80      	pop	{r7, pc}
 8014448:	200024f4 	.word	0x200024f4
 801444c:	0802dce8 	.word	0x0802dce8
 8014450:	0802dc74 	.word	0x0802dc74

08014454 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8014454:	b580      	push	{r7, lr}
 8014456:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8014458:	4b04      	ldr	r3, [pc, #16]	@ (801446c <HIDS_MeasurementReady+0x18>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	0018      	movs	r0, r3
 801445e:	f7ff fc4d 	bl	8013cfc <TimestampIsReached>
 8014462:	0003      	movs	r3, r0
}
 8014464:	0018      	movs	r0, r3
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	46c0      	nop			@ (mov r8, r8)
 801446c:	200000f4 	.word	0x200000f4

08014470 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801447a:	4b41      	ldr	r3, [pc, #260]	@ (8014580 <HIDS_GetMeasurementValues+0x110>)
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d001      	beq.n	8014486 <HIDS_GetMeasurementValues+0x16>
 8014482:	2301      	movs	r3, #1
 8014484:	e077      	b.n	8014576 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8014486:	f7ff ffe5 	bl	8014454 <HIDS_MeasurementReady>
 801448a:	0003      	movs	r3, r0
 801448c:	001a      	movs	r2, r3
 801448e:	2301      	movs	r3, #1
 8014490:	4053      	eors	r3, r2
 8014492:	b2db      	uxtb	r3, r3
 8014494:	2b00      	cmp	r3, #0
 8014496:	d001      	beq.n	801449c <HIDS_GetMeasurementValues+0x2c>
 8014498:	2300      	movs	r3, #0
 801449a:	e06c      	b.n	8014576 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 801449c:	4b39      	ldr	r3, [pc, #228]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 801449e:	2206      	movs	r2, #6
 80144a0:	0019      	movs	r1, r3
 80144a2:	2044      	movs	r0, #68	@ 0x44
 80144a4:	f7ff fd96 	bl	8013fd4 <ReadRegister>
 80144a8:	0003      	movs	r3, r0
 80144aa:	001a      	movs	r2, r3
 80144ac:	2301      	movs	r3, #1
 80144ae:	4053      	eors	r3, r2
 80144b0:	b2db      	uxtb	r3, r3
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d005      	beq.n	80144c2 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 80144b6:	4a34      	ldr	r2, [pc, #208]	@ (8014588 <HIDS_GetMeasurementValues+0x118>)
 80144b8:	4b34      	ldr	r3, [pc, #208]	@ (801458c <HIDS_GetMeasurementValues+0x11c>)
 80144ba:	0019      	movs	r1, r3
 80144bc:	2001      	movs	r0, #1
 80144be:	f7ff fc73 	bl	8013da8 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 80144c2:	4b30      	ldr	r3, [pc, #192]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 80144c4:	0018      	movs	r0, r3
 80144c6:	f7ff ff2b 	bl	8014320 <CheckCRC>
 80144ca:	0003      	movs	r3, r0
 80144cc:	001a      	movs	r2, r3
 80144ce:	2301      	movs	r3, #1
 80144d0:	4053      	eors	r3, r2
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80144d8:	2300      	movs	r3, #0
 80144da:	e04c      	b.n	8014576 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80144dc:	4b29      	ldr	r3, [pc, #164]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	021b      	lsls	r3, r3, #8
 80144e2:	4a28      	ldr	r2, [pc, #160]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 80144e4:	7852      	ldrb	r2, [r2, #1]
 80144e6:	4313      	orrs	r3, r2
 80144e8:	22af      	movs	r2, #175	@ 0xaf
 80144ea:	4353      	muls	r3, r2
 80144ec:	0018      	movs	r0, r3
 80144ee:	f7ef f97f 	bl	80037f0 <__aeabi_i2d>
 80144f2:	2200      	movs	r2, #0
 80144f4:	4b26      	ldr	r3, [pc, #152]	@ (8014590 <HIDS_GetMeasurementValues+0x120>)
 80144f6:	f7ed fdf3 	bl	80020e0 <__aeabi_ddiv>
 80144fa:	0002      	movs	r2, r0
 80144fc:	000b      	movs	r3, r1
 80144fe:	0010      	movs	r0, r2
 8014500:	0019      	movs	r1, r3
 8014502:	f7ef fa0f 	bl	8003924 <__aeabi_d2f>
 8014506:	1c03      	adds	r3, r0, #0
 8014508:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 801450a:	4922      	ldr	r1, [pc, #136]	@ (8014594 <HIDS_GetMeasurementValues+0x124>)
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f7ec fef1 	bl	80012f4 <__aeabi_fsub>
 8014512:	1c03      	adds	r3, r0, #0
 8014514:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8014516:	4b1b      	ldr	r3, [pc, #108]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 8014518:	78db      	ldrb	r3, [r3, #3]
 801451a:	021b      	lsls	r3, r3, #8
 801451c:	4a19      	ldr	r2, [pc, #100]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 801451e:	7912      	ldrb	r2, [r2, #4]
 8014520:	431a      	orrs	r2, r3
 8014522:	0013      	movs	r3, r2
 8014524:	015b      	lsls	r3, r3, #5
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	189b      	adds	r3, r3, r2
 801452c:	0018      	movs	r0, r3
 801452e:	f7ef f95f 	bl	80037f0 <__aeabi_i2d>
 8014532:	2200      	movs	r2, #0
 8014534:	4b16      	ldr	r3, [pc, #88]	@ (8014590 <HIDS_GetMeasurementValues+0x120>)
 8014536:	f7ed fdd3 	bl	80020e0 <__aeabi_ddiv>
 801453a:	0002      	movs	r2, r0
 801453c:	000b      	movs	r3, r1
 801453e:	0010      	movs	r0, r2
 8014540:	0019      	movs	r1, r3
 8014542:	f7ef f9ef 	bl	8003924 <__aeabi_d2f>
 8014546:	1c03      	adds	r3, r0, #0
 8014548:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801454a:	4913      	ldr	r1, [pc, #76]	@ (8014598 <HIDS_GetMeasurementValues+0x128>)
 801454c:	68b8      	ldr	r0, [r7, #8]
 801454e:	f7ec fed1 	bl	80012f4 <__aeabi_fsub>
 8014552:	1c03      	adds	r3, r0, #0
 8014554:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	0011      	movs	r1, r2
 8014568:	0018      	movs	r0, r3
 801456a:	f7fc ff45 	bl	80113f8 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 801456e:	4b04      	ldr	r3, [pc, #16]	@ (8014580 <HIDS_GetMeasurementValues+0x110>)
 8014570:	2201      	movs	r2, #1
 8014572:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8014574:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8014576:	0018      	movs	r0, r3
 8014578:	46bd      	mov	sp, r7
 801457a:	b004      	add	sp, #16
 801457c:	bd80      	pop	{r7, pc}
 801457e:	46c0      	nop			@ (mov r8, r8)
 8014580:	20002508 	.word	0x20002508
 8014584:	200024fc 	.word	0x200024fc
 8014588:	0802dd08 	.word	0x0802dd08
 801458c:	0802dca0 	.word	0x0802dca0
 8014590:	40efffe0 	.word	0x40efffe0
 8014594:	42340000 	.word	0x42340000
 8014598:	40c00000 	.word	0x40c00000

0801459c <ResetHIDSresults>:

void ResetHIDSresults() {
 801459c:	b580      	push	{r7, lr}
 801459e:	af00      	add	r7, sp, #0
  humid = 0.0;
 80145a0:	4b04      	ldr	r3, [pc, #16]	@ (80145b4 <ResetHIDSresults+0x18>)
 80145a2:	2200      	movs	r2, #0
 80145a4:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 80145a6:	4b04      	ldr	r3, [pc, #16]	@ (80145b8 <ResetHIDSresults+0x1c>)
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
}
 80145ac:	46c0      	nop			@ (mov r8, r8)
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	46c0      	nop			@ (mov r8, r8)
 80145b4:	200024e4 	.word	0x200024e4
 80145b8:	200024e8 	.word	0x200024e8

080145bc <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 80145bc:	b5b0      	push	{r4, r5, r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 80145c2:	4b69      	ldr	r3, [pc, #420]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	2b06      	cmp	r3, #6
 80145c8:	d900      	bls.n	80145cc <HIDS_Upkeep+0x10>
 80145ca:	e0bd      	b.n	8014748 <HIDS_Upkeep+0x18c>
 80145cc:	009a      	lsls	r2, r3, #2
 80145ce:	4b67      	ldr	r3, [pc, #412]	@ (801476c <HIDS_Upkeep+0x1b0>)
 80145d0:	18d3      	adds	r3, r2, r3
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80145d6:	4a66      	ldr	r2, [pc, #408]	@ (8014770 <HIDS_Upkeep+0x1b4>)
 80145d8:	4b66      	ldr	r3, [pc, #408]	@ (8014774 <HIDS_Upkeep+0x1b8>)
 80145da:	0019      	movs	r1, r3
 80145dc:	2003      	movs	r0, #3
 80145de:	f7ff fbe3 	bl	8013da8 <CreateLine>
      break;
 80145e2:	e0bc      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80145e4:	f7ff ffda 	bl	801459c <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80145e8:	4b5f      	ldr	r3, [pc, #380]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 80145ea:	2201      	movs	r2, #1
 80145ec:	701a      	strb	r2, [r3, #0]
      break;
 80145ee:	e0b6      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80145f0:	f7f9 fbf4 	bl	800dddc <getSensorLock>
 80145f4:	1e03      	subs	r3, r0, #0
 80145f6:	d000      	beq.n	80145fa <HIDS_Upkeep+0x3e>
 80145f8:	e0aa      	b.n	8014750 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80145fa:	2001      	movs	r0, #1
 80145fc:	f7f9 fbda 	bl	800ddb4 <setSensorLock>
      SetMeasurementIndicator();
 8014600:	f7fe f950 	bl	80128a4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8014604:	f7ff fe3c 	bl	8014280 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014608:	200a      	movs	r0, #10
 801460a:	f000 f963 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 801460e:	2000      	movs	r0, #0
 8014610:	f7f9 fbd0 	bl	800ddb4 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8014614:	4b54      	ldr	r3, [pc, #336]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 8014616:	2202      	movs	r2, #2
 8014618:	701a      	strb	r2, [r3, #0]
      break;
 801461a:	e0a0      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 801461c:	f7f9 fbde 	bl	800dddc <getSensorLock>
 8014620:	1e03      	subs	r3, r0, #0
 8014622:	d000      	beq.n	8014626 <HIDS_Upkeep+0x6a>
 8014624:	e096      	b.n	8014754 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 8014626:	2001      	movs	r0, #1
 8014628:	f7f9 fbc4 	bl	800ddb4 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 801462c:	4a52      	ldr	r2, [pc, #328]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 801462e:	4b53      	ldr	r3, [pc, #332]	@ (801477c <HIDS_Upkeep+0x1c0>)
 8014630:	0011      	movs	r1, r2
 8014632:	0018      	movs	r0, r3
 8014634:	f7ff ff1c 	bl	8014470 <HIDS_GetMeasurementValues>
 8014638:	1e03      	subs	r3, r0, #0
 801463a:	d002      	beq.n	8014642 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 801463c:	4b4a      	ldr	r3, [pc, #296]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 801463e:	2203      	movs	r2, #3
 8014640:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8014642:	200a      	movs	r0, #10
 8014644:	f000 f946 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8014648:	2000      	movs	r0, #0
 801464a:	f7f9 fbb3 	bl	800ddb4 <setSensorLock>
      break;
 801464e:	e086      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8014650:	4b4a      	ldr	r3, [pc, #296]	@ (801477c <HIDS_Upkeep+0x1c0>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	1c18      	adds	r0, r3, #0
 8014656:	f7ef f91d 	bl	8003894 <__aeabi_f2d>
 801465a:	0004      	movs	r4, r0
 801465c:	000d      	movs	r5, r1
 801465e:	4b46      	ldr	r3, [pc, #280]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	1c18      	adds	r0, r3, #0
 8014664:	f7ef f916 	bl	8003894 <__aeabi_f2d>
 8014668:	0002      	movs	r2, r0
 801466a:	000b      	movs	r3, r1
 801466c:	4844      	ldr	r0, [pc, #272]	@ (8014780 <HIDS_Upkeep+0x1c4>)
 801466e:	4945      	ldr	r1, [pc, #276]	@ (8014784 <HIDS_Upkeep+0x1c8>)
 8014670:	9202      	str	r2, [sp, #8]
 8014672:	9303      	str	r3, [sp, #12]
 8014674:	9400      	str	r4, [sp, #0]
 8014676:	9501      	str	r5, [sp, #4]
 8014678:	0002      	movs	r2, r0
 801467a:	2002      	movs	r0, #2
 801467c:	f7ff fb94 	bl	8013da8 <CreateLine>
      setHIDS(temp, humid);
 8014680:	4b3d      	ldr	r3, [pc, #244]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	4b3d      	ldr	r3, [pc, #244]	@ (801477c <HIDS_Upkeep+0x1c0>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	1c19      	adds	r1, r3, #0
 801468a:	1c10      	adds	r0, r2, #0
 801468c:	f7f0 fa00 	bl	8004a90 <setHIDS>
      ResetMeasurementIndicator();
 8014690:	f7fe f91a 	bl	80128c8 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014694:	4b38      	ldr	r3, [pc, #224]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 8014696:	681c      	ldr	r4, [r3, #0]
 8014698:	4a37      	ldr	r2, [pc, #220]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 801469a:	4b38      	ldr	r3, [pc, #224]	@ (801477c <HIDS_Upkeep+0x1c0>)
 801469c:	0011      	movs	r1, r2
 801469e:	0018      	movs	r0, r3
 80146a0:	f7ff fd34 	bl	801410c <HIDS_DewPointCalculation>
 80146a4:	1c03      	adds	r3, r0, #0
 80146a6:	1c19      	adds	r1, r3, #0
 80146a8:	1c20      	adds	r0, r4, #0
 80146aa:	f7ec fe23 	bl	80012f4 <__aeabi_fsub>
 80146ae:	1c03      	adds	r3, r0, #0
 80146b0:	21fe      	movs	r1, #254	@ 0xfe
 80146b2:	0589      	lsls	r1, r1, #22
 80146b4:	1c18      	adds	r0, r3, #0
 80146b6:	f7eb ff3b 	bl	8000530 <__aeabi_fcmplt>
 80146ba:	1e03      	subs	r3, r0, #0
 80146bc:	d023      	beq.n	8014706 <HIDS_Upkeep+0x14a>
 80146be:	f7f5 ff31 	bl	800a524 <getPosixTime>
 80146c2:	0002      	movs	r2, r0
 80146c4:	4b30      	ldr	r3, [pc, #192]	@ (8014788 <HIDS_Upkeep+0x1cc>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	1ad2      	subs	r2, r2, r3
 80146ca:	23e1      	movs	r3, #225	@ 0xe1
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d919      	bls.n	8014706 <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 80146d2:	4a2e      	ldr	r2, [pc, #184]	@ (801478c <HIDS_Upkeep+0x1d0>)
 80146d4:	4b2b      	ldr	r3, [pc, #172]	@ (8014784 <HIDS_Upkeep+0x1c8>)
 80146d6:	0019      	movs	r1, r3
 80146d8:	2002      	movs	r0, #2
 80146da:	f7ff fb65 	bl	8013da8 <CreateLine>
        if (getSensorLock() != FREE) {
 80146de:	f7f9 fb7d 	bl	800dddc <getSensorLock>
 80146e2:	1e03      	subs	r3, r0, #0
 80146e4:	d138      	bne.n	8014758 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 80146e6:	f7ff fd83 	bl	80141f0 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 80146ea:	200a      	movs	r0, #10
 80146ec:	f000 f8f2 	bl	80148d4 <HAL_Delay>
        setSensorLock(FREE);
 80146f0:	2000      	movs	r0, #0
 80146f2:	f7f9 fb5f 	bl	800ddb4 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80146f6:	f000 f8e3 	bl	80148c0 <HAL_GetTick>
 80146fa:	0003      	movs	r3, r0
 80146fc:	4a24      	ldr	r2, [pc, #144]	@ (8014790 <HIDS_Upkeep+0x1d4>)
 80146fe:	189a      	adds	r2, r3, r2
 8014700:	4b24      	ldr	r3, [pc, #144]	@ (8014794 <HIDS_Upkeep+0x1d8>)
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	e011      	b.n	801472a <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8014706:	f000 f8db 	bl	80148c0 <HAL_GetTick>
 801470a:	0004      	movs	r4, r0
 801470c:	f7f5 fa68 	bl	8009be0 <Check_USB_PowerOn>
 8014710:	1e03      	subs	r3, r0, #0
 8014712:	d103      	bne.n	801471c <HIDS_Upkeep+0x160>
 8014714:	4b20      	ldr	r3, [pc, #128]	@ (8014798 <HIDS_Upkeep+0x1dc>)
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <HIDS_Upkeep+0x164>
 801471c:	4b1f      	ldr	r3, [pc, #124]	@ (801479c <HIDS_Upkeep+0x1e0>)
 801471e:	e001      	b.n	8014724 <HIDS_Upkeep+0x168>
 8014720:	23fa      	movs	r3, #250	@ 0xfa
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	191a      	adds	r2, r3, r4
 8014726:	4b1b      	ldr	r3, [pc, #108]	@ (8014794 <HIDS_Upkeep+0x1d8>)
 8014728:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 801472a:	4b0f      	ldr	r3, [pc, #60]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 801472c:	2206      	movs	r2, #6
 801472e:	701a      	strb	r2, [r3, #0]
      break;
 8014730:	e015      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8014732:	4b18      	ldr	r3, [pc, #96]	@ (8014794 <HIDS_Upkeep+0x1d8>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	0018      	movs	r0, r3
 8014738:	f7ff fae0 	bl	8013cfc <TimestampIsReached>
 801473c:	1e03      	subs	r3, r0, #0
 801473e:	d00d      	beq.n	801475c <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8014740:	4b09      	ldr	r3, [pc, #36]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 8014742:	2200      	movs	r2, #0
 8014744:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014746:	e009      	b.n	801475c <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8014748:	4b07      	ldr	r3, [pc, #28]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 801474a:	2200      	movs	r2, #0
 801474c:	701a      	strb	r2, [r3, #0]
      break;
 801474e:	e006      	b.n	801475e <HIDS_Upkeep+0x1a2>
        break;
 8014750:	46c0      	nop			@ (mov r8, r8)
 8014752:	e004      	b.n	801475e <HIDS_Upkeep+0x1a2>
        break;
 8014754:	46c0      	nop			@ (mov r8, r8)
 8014756:	e002      	b.n	801475e <HIDS_Upkeep+0x1a2>
          break;
 8014758:	46c0      	nop			@ (mov r8, r8)
 801475a:	e000      	b.n	801475e <HIDS_Upkeep+0x1a2>
      break;
 801475c:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 801475e:	4b02      	ldr	r3, [pc, #8]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 8014760:	781b      	ldrb	r3, [r3, #0]
}
 8014762:	0018      	movs	r0, r3
 8014764:	46bd      	mov	sp, r7
 8014766:	bdb0      	pop	{r4, r5, r7, pc}
 8014768:	20002510 	.word	0x20002510
 801476c:	0802e674 	.word	0x0802e674
 8014770:	0802dd3c 	.word	0x0802dd3c
 8014774:	0802dd70 	.word	0x0802dd70
 8014778:	200024e8 	.word	0x200024e8
 801477c:	200024e4 	.word	0x200024e4
 8014780:	0802dd74 	.word	0x0802dd74
 8014784:	0802dc74 	.word	0x0802dc74
 8014788:	20002504 	.word	0x20002504
 801478c:	0802dda8 	.word	0x0802dda8
 8014790:	00002ee0 	.word	0x00002ee0
 8014794:	2000250c 	.word	0x2000250c
 8014798:	2000214e 	.word	0x2000214e
 801479c:	00002710 	.word	0x00002710

080147a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80147a0:	480d      	ldr	r0, [pc, #52]	@ (80147d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80147a2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80147a4:	f7fe fee0 	bl	8013568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80147a8:	480c      	ldr	r0, [pc, #48]	@ (80147dc <LoopForever+0x6>)
  ldr r1, =_edata
 80147aa:	490d      	ldr	r1, [pc, #52]	@ (80147e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80147ac:	4a0d      	ldr	r2, [pc, #52]	@ (80147e4 <LoopForever+0xe>)
  movs r3, #0
 80147ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80147b0:	e002      	b.n	80147b8 <LoopCopyDataInit>

080147b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80147b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80147b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80147b6:	3304      	adds	r3, #4

080147b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80147b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80147ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80147bc:	d3f9      	bcc.n	80147b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80147be:	4a0a      	ldr	r2, [pc, #40]	@ (80147e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80147c0:	4c0a      	ldr	r4, [pc, #40]	@ (80147ec <LoopForever+0x16>)
  movs r3, #0
 80147c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80147c4:	e001      	b.n	80147ca <LoopFillZerobss>

080147c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80147c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80147c8:	3204      	adds	r2, #4

080147ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80147ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80147cc:	d3fb      	bcc.n	80147c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80147ce:	f012 f805 	bl	80267dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80147d2:	f7f8 f98d 	bl	800caf0 <main>

080147d6 <LoopForever>:

LoopForever:
    b LoopForever
 80147d6:	e7fe      	b.n	80147d6 <LoopForever>
   ldr   r0, =_estack
 80147d8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80147dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80147e0:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80147e4:	0802f058 	.word	0x0802f058
  ldr r2, =_sbss
 80147e8:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80147ec:	20003918 	.word	0x20003918

080147f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80147f0:	e7fe      	b.n	80147f0 <ADC1_COMP_IRQHandler>
	...

080147f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80147fa:	1dfb      	adds	r3, r7, #7
 80147fc:	2200      	movs	r2, #0
 80147fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8014800:	4b0b      	ldr	r3, [pc, #44]	@ (8014830 <HAL_Init+0x3c>)
 8014802:	681a      	ldr	r2, [r3, #0]
 8014804:	4b0a      	ldr	r3, [pc, #40]	@ (8014830 <HAL_Init+0x3c>)
 8014806:	2140      	movs	r1, #64	@ 0x40
 8014808:	430a      	orrs	r2, r1
 801480a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801480c:	2003      	movs	r0, #3
 801480e:	f000 f811 	bl	8014834 <HAL_InitTick>
 8014812:	1e03      	subs	r3, r0, #0
 8014814:	d003      	beq.n	801481e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8014816:	1dfb      	adds	r3, r7, #7
 8014818:	2201      	movs	r2, #1
 801481a:	701a      	strb	r2, [r3, #0]
 801481c:	e001      	b.n	8014822 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801481e:	f7fe fd57 	bl	80132d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8014822:	1dfb      	adds	r3, r7, #7
 8014824:	781b      	ldrb	r3, [r3, #0]
}
 8014826:	0018      	movs	r0, r3
 8014828:	46bd      	mov	sp, r7
 801482a:	b002      	add	sp, #8
 801482c:	bd80      	pop	{r7, pc}
 801482e:	46c0      	nop			@ (mov r8, r8)
 8014830:	40022000 	.word	0x40022000

08014834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014834:	b590      	push	{r4, r7, lr}
 8014836:	b083      	sub	sp, #12
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801483c:	4b14      	ldr	r3, [pc, #80]	@ (8014890 <HAL_InitTick+0x5c>)
 801483e:	681c      	ldr	r4, [r3, #0]
 8014840:	4b14      	ldr	r3, [pc, #80]	@ (8014894 <HAL_InitTick+0x60>)
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	0019      	movs	r1, r3
 8014846:	23fa      	movs	r3, #250	@ 0xfa
 8014848:	0098      	lsls	r0, r3, #2
 801484a:	f7eb fcab 	bl	80001a4 <__udivsi3>
 801484e:	0003      	movs	r3, r0
 8014850:	0019      	movs	r1, r3
 8014852:	0020      	movs	r0, r4
 8014854:	f7eb fca6 	bl	80001a4 <__udivsi3>
 8014858:	0003      	movs	r3, r0
 801485a:	0018      	movs	r0, r3
 801485c:	f000 fcc9 	bl	80151f2 <HAL_SYSTICK_Config>
 8014860:	1e03      	subs	r3, r0, #0
 8014862:	d001      	beq.n	8014868 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8014864:	2301      	movs	r3, #1
 8014866:	e00f      	b.n	8014888 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b03      	cmp	r3, #3
 801486c:	d80b      	bhi.n	8014886 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801486e:	6879      	ldr	r1, [r7, #4]
 8014870:	2301      	movs	r3, #1
 8014872:	425b      	negs	r3, r3
 8014874:	2200      	movs	r2, #0
 8014876:	0018      	movs	r0, r3
 8014878:	f000 fc96 	bl	80151a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801487c:	4b06      	ldr	r3, [pc, #24]	@ (8014898 <HAL_InitTick+0x64>)
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	e000      	b.n	8014888 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8014886:	2301      	movs	r3, #1
}
 8014888:	0018      	movs	r0, r3
 801488a:	46bd      	mov	sp, r7
 801488c:	b003      	add	sp, #12
 801488e:	bd90      	pop	{r4, r7, pc}
 8014890:	200000ec 	.word	0x200000ec
 8014894:	20000100 	.word	0x20000100
 8014898:	200000fc 	.word	0x200000fc

0801489c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80148a0:	4b05      	ldr	r3, [pc, #20]	@ (80148b8 <HAL_IncTick+0x1c>)
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	001a      	movs	r2, r3
 80148a6:	4b05      	ldr	r3, [pc, #20]	@ (80148bc <HAL_IncTick+0x20>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	18d2      	adds	r2, r2, r3
 80148ac:	4b03      	ldr	r3, [pc, #12]	@ (80148bc <HAL_IncTick+0x20>)
 80148ae:	601a      	str	r2, [r3, #0]
}
 80148b0:	46c0      	nop			@ (mov r8, r8)
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	46c0      	nop			@ (mov r8, r8)
 80148b8:	20000100 	.word	0x20000100
 80148bc:	20002514 	.word	0x20002514

080148c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	af00      	add	r7, sp, #0
  return uwTick;
 80148c4:	4b02      	ldr	r3, [pc, #8]	@ (80148d0 <HAL_GetTick+0x10>)
 80148c6:	681b      	ldr	r3, [r3, #0]
}
 80148c8:	0018      	movs	r0, r3
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	46c0      	nop			@ (mov r8, r8)
 80148d0:	20002514 	.word	0x20002514

080148d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80148dc:	f7ff fff0 	bl	80148c0 <HAL_GetTick>
 80148e0:	0003      	movs	r3, r0
 80148e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	3301      	adds	r3, #1
 80148ec:	d005      	beq.n	80148fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80148ee:	4b0a      	ldr	r3, [pc, #40]	@ (8014918 <HAL_Delay+0x44>)
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	001a      	movs	r2, r3
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	189b      	adds	r3, r3, r2
 80148f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80148fa:	46c0      	nop			@ (mov r8, r8)
 80148fc:	f7ff ffe0 	bl	80148c0 <HAL_GetTick>
 8014900:	0002      	movs	r2, r0
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	1ad3      	subs	r3, r2, r3
 8014906:	68fa      	ldr	r2, [r7, #12]
 8014908:	429a      	cmp	r2, r3
 801490a:	d8f7      	bhi.n	80148fc <HAL_Delay+0x28>
  {
  }
}
 801490c:	46c0      	nop			@ (mov r8, r8)
 801490e:	46c0      	nop			@ (mov r8, r8)
 8014910:	46bd      	mov	sp, r7
 8014912:	b004      	add	sp, #16
 8014914:	bd80      	pop	{r7, pc}
 8014916:	46c0      	nop			@ (mov r8, r8)
 8014918:	20000100 	.word	0x20000100

0801491c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8014920:	4b04      	ldr	r3, [pc, #16]	@ (8014934 <HAL_SuspendTick+0x18>)
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	4b03      	ldr	r3, [pc, #12]	@ (8014934 <HAL_SuspendTick+0x18>)
 8014926:	2102      	movs	r1, #2
 8014928:	438a      	bics	r2, r1
 801492a:	601a      	str	r2, [r3, #0]
}
 801492c:	46c0      	nop			@ (mov r8, r8)
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	46c0      	nop			@ (mov r8, r8)
 8014934:	e000e010 	.word	0xe000e010

08014938 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 801493c:	4b04      	ldr	r3, [pc, #16]	@ (8014950 <HAL_ResumeTick+0x18>)
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	4b03      	ldr	r3, [pc, #12]	@ (8014950 <HAL_ResumeTick+0x18>)
 8014942:	2102      	movs	r1, #2
 8014944:	430a      	orrs	r2, r1
 8014946:	601a      	str	r2, [r3, #0]
}
 8014948:	46c0      	nop			@ (mov r8, r8)
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	46c0      	nop			@ (mov r8, r8)
 8014950:	e000e010 	.word	0xe000e010

08014954 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d101      	bne.n	8014966 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014962:	2301      	movs	r3, #1
 8014964:	e159      	b.n	8014c1a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10a      	bne.n	8014984 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2200      	movs	r2, #0
 8014972:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2250      	movs	r2, #80	@ 0x50
 8014978:	2100      	movs	r1, #0
 801497a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	0018      	movs	r0, r3
 8014980:	f7f6 f9b2 	bl	800ace8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014988:	2210      	movs	r2, #16
 801498a:	4013      	ands	r3, r2
 801498c:	2b10      	cmp	r3, #16
 801498e:	d005      	beq.n	801499c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	689b      	ldr	r3, [r3, #8]
 8014996:	2204      	movs	r2, #4
 8014998:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801499a:	d00b      	beq.n	80149b4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149a0:	2210      	movs	r2, #16
 80149a2:	431a      	orrs	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2250      	movs	r2, #80	@ 0x50
 80149ac:	2100      	movs	r1, #0
 80149ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80149b0:	2301      	movs	r3, #1
 80149b2:	e132      	b.n	8014c1a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149b8:	4a9a      	ldr	r2, [pc, #616]	@ (8014c24 <HAL_ADC_Init+0x2d0>)
 80149ba:	4013      	ands	r3, r2
 80149bc:	2202      	movs	r2, #2
 80149be:	431a      	orrs	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	689b      	ldr	r3, [r3, #8]
 80149ca:	2203      	movs	r2, #3
 80149cc:	4013      	ands	r3, r2
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d108      	bne.n	80149e4 <HAL_ADC_Init+0x90>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2201      	movs	r2, #1
 80149da:	4013      	ands	r3, r2
 80149dc:	2b01      	cmp	r3, #1
 80149de:	d101      	bne.n	80149e4 <HAL_ADC_Init+0x90>
 80149e0:	2301      	movs	r3, #1
 80149e2:	e000      	b.n	80149e6 <HAL_ADC_Init+0x92>
 80149e4:	2300      	movs	r3, #0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d149      	bne.n	8014a7e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	685a      	ldr	r2, [r3, #4]
 80149ee:	23c0      	movs	r3, #192	@ 0xc0
 80149f0:	061b      	lsls	r3, r3, #24
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d00b      	beq.n	8014a0e <HAL_ADC_Init+0xba>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685a      	ldr	r2, [r3, #4]
 80149fa:	2380      	movs	r3, #128	@ 0x80
 80149fc:	05db      	lsls	r3, r3, #23
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d005      	beq.n	8014a0e <HAL_ADC_Init+0xba>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	685a      	ldr	r2, [r3, #4]
 8014a06:	2380      	movs	r3, #128	@ 0x80
 8014a08:	061b      	lsls	r3, r3, #24
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d111      	bne.n	8014a32 <HAL_ADC_Init+0xde>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	691a      	ldr	r2, [r3, #16]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	0092      	lsls	r2, r2, #2
 8014a1a:	0892      	lsrs	r2, r2, #2
 8014a1c:	611a      	str	r2, [r3, #16]
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	6919      	ldr	r1, [r3, #16]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	685a      	ldr	r2, [r3, #4]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	430a      	orrs	r2, r1
 8014a2e:	611a      	str	r2, [r3, #16]
 8014a30:	e014      	b.n	8014a5c <HAL_ADC_Init+0x108>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	691a      	ldr	r2, [r3, #16]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	0092      	lsls	r2, r2, #2
 8014a3e:	0892      	lsrs	r2, r2, #2
 8014a40:	611a      	str	r2, [r3, #16]
 8014a42:	4b79      	ldr	r3, [pc, #484]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a44:	681a      	ldr	r2, [r3, #0]
 8014a46:	4b78      	ldr	r3, [pc, #480]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a48:	4978      	ldr	r1, [pc, #480]	@ (8014c2c <HAL_ADC_Init+0x2d8>)
 8014a4a:	400a      	ands	r2, r1
 8014a4c:	601a      	str	r2, [r3, #0]
 8014a4e:	4b76      	ldr	r3, [pc, #472]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a50:	6819      	ldr	r1, [r3, #0]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	685a      	ldr	r2, [r3, #4]
 8014a56:	4b74      	ldr	r3, [pc, #464]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a58:	430a      	orrs	r2, r1
 8014a5a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	68da      	ldr	r2, [r3, #12]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	2118      	movs	r1, #24
 8014a68:	438a      	bics	r2, r1
 8014a6a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	68d9      	ldr	r1, [r3, #12]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	689a      	ldr	r2, [r3, #8]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	430a      	orrs	r2, r1
 8014a7c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	4b69      	ldr	r3, [pc, #420]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a84:	496a      	ldr	r1, [pc, #424]	@ (8014c30 <HAL_ADC_Init+0x2dc>)
 8014a86:	400a      	ands	r2, r1
 8014a88:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014a8a:	4b67      	ldr	r3, [pc, #412]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a8c:	6819      	ldr	r1, [r3, #0]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a92:	065a      	lsls	r2, r3, #25
 8014a94:	4b64      	ldr	r3, [pc, #400]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a96:	430a      	orrs	r2, r1
 8014a98:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	689a      	ldr	r2, [r3, #8]
 8014aa0:	2380      	movs	r3, #128	@ 0x80
 8014aa2:	055b      	lsls	r3, r3, #21
 8014aa4:	4013      	ands	r3, r2
 8014aa6:	d108      	bne.n	8014aba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	689a      	ldr	r2, [r3, #8]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2180      	movs	r1, #128	@ 0x80
 8014ab4:	0549      	lsls	r1, r1, #21
 8014ab6:	430a      	orrs	r2, r1
 8014ab8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	68da      	ldr	r2, [r3, #12]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	495b      	ldr	r1, [pc, #364]	@ (8014c34 <HAL_ADC_Init+0x2e0>)
 8014ac6:	400a      	ands	r2, r1
 8014ac8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	68d9      	ldr	r1, [r3, #12]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	691b      	ldr	r3, [r3, #16]
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d101      	bne.n	8014ae0 <HAL_ADC_Init+0x18c>
 8014adc:	2304      	movs	r3, #4
 8014ade:	e000      	b.n	8014ae2 <HAL_ADC_Init+0x18e>
 8014ae0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014ae2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2020      	movs	r0, #32
 8014ae8:	5c1b      	ldrb	r3, [r3, r0]
 8014aea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014aec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	202c      	movs	r0, #44	@ 0x2c
 8014af2:	5c1b      	ldrb	r3, [r3, r0]
 8014af4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014af6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014afc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	699b      	ldr	r3, [r3, #24]
 8014b02:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014b04:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	69db      	ldr	r3, [r3, #28]
 8014b0a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014b0c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	430a      	orrs	r2, r1
 8014b14:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b1a:	23c2      	movs	r3, #194	@ 0xc2
 8014b1c:	33ff      	adds	r3, #255	@ 0xff
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d00b      	beq.n	8014b3a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	68d9      	ldr	r1, [r3, #12]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b30:	431a      	orrs	r2, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	430a      	orrs	r2, r1
 8014b38:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2221      	movs	r2, #33	@ 0x21
 8014b3e:	5c9b      	ldrb	r3, [r3, r2]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d11a      	bne.n	8014b7a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2220      	movs	r2, #32
 8014b48:	5c9b      	ldrb	r3, [r3, r2]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d109      	bne.n	8014b62 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68da      	ldr	r2, [r3, #12]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2180      	movs	r1, #128	@ 0x80
 8014b5a:	0249      	lsls	r1, r1, #9
 8014b5c:	430a      	orrs	r2, r1
 8014b5e:	60da      	str	r2, [r3, #12]
 8014b60:	e00b      	b.n	8014b7a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b66:	2220      	movs	r2, #32
 8014b68:	431a      	orrs	r2, r3
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b72:	2201      	movs	r2, #1
 8014b74:	431a      	orrs	r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d11f      	bne.n	8014bc2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	691a      	ldr	r2, [r3, #16]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	492a      	ldr	r1, [pc, #168]	@ (8014c38 <HAL_ADC_Init+0x2e4>)
 8014b8e:	400a      	ands	r2, r1
 8014b90:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	6919      	ldr	r1, [r3, #16]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ba0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014ba6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	430a      	orrs	r2, r1
 8014bae:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	691a      	ldr	r2, [r3, #16]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2101      	movs	r1, #1
 8014bbc:	430a      	orrs	r2, r1
 8014bbe:	611a      	str	r2, [r3, #16]
 8014bc0:	e00e      	b.n	8014be0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	691b      	ldr	r3, [r3, #16]
 8014bc8:	2201      	movs	r2, #1
 8014bca:	4013      	ands	r3, r2
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d107      	bne.n	8014be0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	691a      	ldr	r2, [r3, #16]
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	2101      	movs	r1, #1
 8014bdc:	438a      	bics	r2, r1
 8014bde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	695a      	ldr	r2, [r3, #20]
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2107      	movs	r1, #7
 8014bec:	438a      	bics	r2, r1
 8014bee:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	6959      	ldr	r1, [r3, #20]
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	430a      	orrs	r2, r1
 8014c00:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2200      	movs	r2, #0
 8014c06:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c0c:	2203      	movs	r2, #3
 8014c0e:	4393      	bics	r3, r2
 8014c10:	2201      	movs	r2, #1
 8014c12:	431a      	orrs	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	0018      	movs	r0, r3
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	b002      	add	sp, #8
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	46c0      	nop			@ (mov r8, r8)
 8014c24:	fffffefd 	.word	0xfffffefd
 8014c28:	40012708 	.word	0x40012708
 8014c2c:	ffc3ffff 	.word	0xffc3ffff
 8014c30:	fdffffff 	.word	0xfdffffff
 8014c34:	fffe0219 	.word	0xfffe0219
 8014c38:	fffffc03 	.word	0xfffffc03

08014c3c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b085      	sub	sp, #20
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014c44:	230f      	movs	r3, #15
 8014c46:	18fb      	adds	r3, r7, r3
 8014c48:	2200      	movs	r2, #0
 8014c4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	689b      	ldr	r3, [r3, #8]
 8014c52:	2204      	movs	r2, #4
 8014c54:	4013      	ands	r3, r2
 8014c56:	d138      	bne.n	8014cca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2250      	movs	r2, #80	@ 0x50
 8014c5c:	5c9b      	ldrb	r3, [r3, r2]
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d101      	bne.n	8014c66 <HAL_ADC_Start+0x2a>
 8014c62:	2302      	movs	r3, #2
 8014c64:	e038      	b.n	8014cd8 <HAL_ADC_Start+0x9c>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2250      	movs	r2, #80	@ 0x50
 8014c6a:	2101      	movs	r1, #1
 8014c6c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	69db      	ldr	r3, [r3, #28]
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d007      	beq.n	8014c86 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014c76:	230f      	movs	r3, #15
 8014c78:	18fc      	adds	r4, r7, r3
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	0018      	movs	r0, r3
 8014c7e:	f000 f95f 	bl	8014f40 <ADC_Enable>
 8014c82:	0003      	movs	r3, r0
 8014c84:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014c86:	230f      	movs	r3, #15
 8014c88:	18fb      	adds	r3, r7, r3
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d120      	bne.n	8014cd2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c94:	4a12      	ldr	r2, [pc, #72]	@ (8014ce0 <HAL_ADC_Start+0xa4>)
 8014c96:	4013      	ands	r3, r2
 8014c98:	2280      	movs	r2, #128	@ 0x80
 8014c9a:	0052      	lsls	r2, r2, #1
 8014c9c:	431a      	orrs	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2250      	movs	r2, #80	@ 0x50
 8014cac:	2100      	movs	r1, #0
 8014cae:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	221c      	movs	r2, #28
 8014cb6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	689a      	ldr	r2, [r3, #8]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	2104      	movs	r1, #4
 8014cc4:	430a      	orrs	r2, r1
 8014cc6:	609a      	str	r2, [r3, #8]
 8014cc8:	e003      	b.n	8014cd2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014cca:	230f      	movs	r3, #15
 8014ccc:	18fb      	adds	r3, r7, r3
 8014cce:	2202      	movs	r2, #2
 8014cd0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014cd2:	230f      	movs	r3, #15
 8014cd4:	18fb      	adds	r3, r7, r3
 8014cd6:	781b      	ldrb	r3, [r3, #0]
}
 8014cd8:	0018      	movs	r0, r3
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	b005      	add	sp, #20
 8014cde:	bd90      	pop	{r4, r7, pc}
 8014ce0:	fffff0fe 	.word	0xfffff0fe

08014ce4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	695b      	ldr	r3, [r3, #20]
 8014cfa:	2b08      	cmp	r3, #8
 8014cfc:	d102      	bne.n	8014d04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014cfe:	2308      	movs	r3, #8
 8014d00:	60fb      	str	r3, [r7, #12]
 8014d02:	e014      	b.n	8014d2e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	68db      	ldr	r3, [r3, #12]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	4013      	ands	r3, r2
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d10b      	bne.n	8014d2a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d16:	2220      	movs	r2, #32
 8014d18:	431a      	orrs	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2250      	movs	r2, #80	@ 0x50
 8014d22:	2100      	movs	r1, #0
 8014d24:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014d26:	2301      	movs	r3, #1
 8014d28:	e072      	b.n	8014e10 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014d2a:	230c      	movs	r3, #12
 8014d2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014d2e:	f7ff fdc7 	bl	80148c0 <HAL_GetTick>
 8014d32:	0003      	movs	r3, r0
 8014d34:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d36:	e01f      	b.n	8014d78 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	d01c      	beq.n	8014d78 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d007      	beq.n	8014d54 <HAL_ADC_PollForConversion+0x70>
 8014d44:	f7ff fdbc 	bl	80148c0 <HAL_GetTick>
 8014d48:	0002      	movs	r2, r0
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d211      	bcs.n	8014d78 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	68fa      	ldr	r2, [r7, #12]
 8014d5c:	4013      	ands	r3, r2
 8014d5e:	d10b      	bne.n	8014d78 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d64:	2204      	movs	r2, #4
 8014d66:	431a      	orrs	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2250      	movs	r2, #80	@ 0x50
 8014d70:	2100      	movs	r1, #0
 8014d72:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014d74:	2303      	movs	r3, #3
 8014d76:	e04b      	b.n	8014e10 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	4013      	ands	r3, r2
 8014d82:	d0d9      	beq.n	8014d38 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d88:	2280      	movs	r2, #128	@ 0x80
 8014d8a:	0092      	lsls	r2, r2, #2
 8014d8c:	431a      	orrs	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	68da      	ldr	r2, [r3, #12]
 8014d98:	23c0      	movs	r3, #192	@ 0xc0
 8014d9a:	011b      	lsls	r3, r3, #4
 8014d9c:	4013      	ands	r3, r2
 8014d9e:	d12e      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2220      	movs	r2, #32
 8014da4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d129      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2208      	movs	r2, #8
 8014db2:	4013      	ands	r3, r2
 8014db4:	2b08      	cmp	r3, #8
 8014db6:	d122      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	689b      	ldr	r3, [r3, #8]
 8014dbe:	2204      	movs	r2, #4
 8014dc0:	4013      	ands	r3, r2
 8014dc2:	d110      	bne.n	8014de6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	210c      	movs	r1, #12
 8014dd0:	438a      	bics	r2, r1
 8014dd2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8014e18 <HAL_ADC_PollForConversion+0x134>)
 8014dda:	4013      	ands	r3, r2
 8014ddc:	2201      	movs	r2, #1
 8014dde:	431a      	orrs	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8014de4:	e00b      	b.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dea:	2220      	movs	r2, #32
 8014dec:	431a      	orrs	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014df6:	2201      	movs	r2, #1
 8014df8:	431a      	orrs	r2, r3
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	699b      	ldr	r3, [r3, #24]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d103      	bne.n	8014e0e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	220c      	movs	r2, #12
 8014e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e0e:	2300      	movs	r3, #0
}
 8014e10:	0018      	movs	r0, r3
 8014e12:	46bd      	mov	sp, r7
 8014e14:	b004      	add	sp, #16
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	fffffefe 	.word	0xfffffefe

08014e1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014e2a:	0018      	movs	r0, r3
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	b002      	add	sp, #8
 8014e30:	bd80      	pop	{r7, pc}
	...

08014e34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2250      	movs	r2, #80	@ 0x50
 8014e42:	5c9b      	ldrb	r3, [r3, r2]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d101      	bne.n	8014e4c <HAL_ADC_ConfigChannel+0x18>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	e06c      	b.n	8014f26 <HAL_ADC_ConfigChannel+0xf2>
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2250      	movs	r2, #80	@ 0x50
 8014e50:	2101      	movs	r1, #1
 8014e52:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	2204      	movs	r2, #4
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	d00b      	beq.n	8014e78 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e64:	2220      	movs	r2, #32
 8014e66:	431a      	orrs	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2250      	movs	r2, #80	@ 0x50
 8014e70:	2100      	movs	r1, #0
 8014e72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014e74:	2301      	movs	r3, #1
 8014e76:	e056      	b.n	8014f26 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8014f30 <HAL_ADC_ConfigChannel+0xfc>)
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d028      	beq.n	8014ed4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	035b      	lsls	r3, r3, #13
 8014e8e:	0b5a      	lsrs	r2, r3, #13
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	430a      	orrs	r2, r1
 8014e96:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	2380      	movs	r3, #128	@ 0x80
 8014e9e:	02db      	lsls	r3, r3, #11
 8014ea0:	4013      	ands	r3, r2
 8014ea2:	d009      	beq.n	8014eb8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014ea4:	4b23      	ldr	r3, [pc, #140]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	4b22      	ldr	r3, [pc, #136]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014eaa:	2180      	movs	r1, #128	@ 0x80
 8014eac:	0409      	lsls	r1, r1, #16
 8014eae:	430a      	orrs	r2, r1
 8014eb0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014eb2:	200a      	movs	r0, #10
 8014eb4:	f000 f8ac 	bl	8015010 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	2380      	movs	r3, #128	@ 0x80
 8014ebe:	029b      	lsls	r3, r3, #10
 8014ec0:	4013      	ands	r3, r2
 8014ec2:	d02b      	beq.n	8014f1c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014eca:	2180      	movs	r1, #128	@ 0x80
 8014ecc:	03c9      	lsls	r1, r1, #15
 8014ece:	430a      	orrs	r2, r1
 8014ed0:	601a      	str	r2, [r3, #0]
 8014ed2:	e023      	b.n	8014f1c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	035b      	lsls	r3, r3, #13
 8014ee0:	0b5b      	lsrs	r3, r3, #13
 8014ee2:	43d9      	mvns	r1, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	400a      	ands	r2, r1
 8014eea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	681a      	ldr	r2, [r3, #0]
 8014ef0:	2380      	movs	r3, #128	@ 0x80
 8014ef2:	02db      	lsls	r3, r3, #11
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	d005      	beq.n	8014f04 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	4b0d      	ldr	r3, [pc, #52]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014efe:	490e      	ldr	r1, [pc, #56]	@ (8014f38 <HAL_ADC_ConfigChannel+0x104>)
 8014f00:	400a      	ands	r2, r1
 8014f02:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	2380      	movs	r3, #128	@ 0x80
 8014f0a:	029b      	lsls	r3, r3, #10
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	d005      	beq.n	8014f1c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014f10:	4b08      	ldr	r3, [pc, #32]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	4b07      	ldr	r3, [pc, #28]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014f16:	4909      	ldr	r1, [pc, #36]	@ (8014f3c <HAL_ADC_ConfigChannel+0x108>)
 8014f18:	400a      	ands	r2, r1
 8014f1a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2250      	movs	r2, #80	@ 0x50
 8014f20:	2100      	movs	r1, #0
 8014f22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	0018      	movs	r0, r3
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	b002      	add	sp, #8
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	46c0      	nop			@ (mov r8, r8)
 8014f30:	00001001 	.word	0x00001001
 8014f34:	40012708 	.word	0x40012708
 8014f38:	ff7fffff 	.word	0xff7fffff
 8014f3c:	ffbfffff 	.word	0xffbfffff

08014f40 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	2203      	movs	r2, #3
 8014f54:	4013      	ands	r3, r2
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d108      	bne.n	8014f6c <ADC_Enable+0x2c>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2201      	movs	r2, #1
 8014f62:	4013      	ands	r3, r2
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d101      	bne.n	8014f6c <ADC_Enable+0x2c>
 8014f68:	2301      	movs	r3, #1
 8014f6a:	e000      	b.n	8014f6e <ADC_Enable+0x2e>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d146      	bne.n	8015000 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	4a24      	ldr	r2, [pc, #144]	@ (801500c <ADC_Enable+0xcc>)
 8014f7a:	4013      	ands	r3, r2
 8014f7c:	d00d      	beq.n	8014f9a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f82:	2210      	movs	r2, #16
 8014f84:	431a      	orrs	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014f8e:	2201      	movs	r2, #1
 8014f90:	431a      	orrs	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014f96:	2301      	movs	r3, #1
 8014f98:	e033      	b.n	8015002 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	689a      	ldr	r2, [r3, #8]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2101      	movs	r1, #1
 8014fa6:	430a      	orrs	r2, r1
 8014fa8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8014faa:	2001      	movs	r0, #1
 8014fac:	f000 f830 	bl	8015010 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8014fb0:	f7ff fc86 	bl	80148c0 <HAL_GetTick>
 8014fb4:	0003      	movs	r3, r0
 8014fb6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014fb8:	e01b      	b.n	8014ff2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014fba:	f7ff fc81 	bl	80148c0 <HAL_GetTick>
 8014fbe:	0002      	movs	r2, r0
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	1ad3      	subs	r3, r2, r3
 8014fc4:	2b0a      	cmp	r3, #10
 8014fc6:	d914      	bls.n	8014ff2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	4013      	ands	r3, r2
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d00d      	beq.n	8014ff2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fda:	2210      	movs	r2, #16
 8014fdc:	431a      	orrs	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	431a      	orrs	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e007      	b.n	8015002 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	4013      	ands	r3, r2
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d1dc      	bne.n	8014fba <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8015000:	2300      	movs	r3, #0
}
 8015002:	0018      	movs	r0, r3
 8015004:	46bd      	mov	sp, r7
 8015006:	b004      	add	sp, #16
 8015008:	bd80      	pop	{r7, pc}
 801500a:	46c0      	nop			@ (mov r8, r8)
 801500c:	80000017 	.word	0x80000017

08015010 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8015018:	4b0b      	ldr	r3, [pc, #44]	@ (8015048 <ADC_DelayMicroSecond+0x38>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	490b      	ldr	r1, [pc, #44]	@ (801504c <ADC_DelayMicroSecond+0x3c>)
 801501e:	0018      	movs	r0, r3
 8015020:	f7eb f8c0 	bl	80001a4 <__udivsi3>
 8015024:	0003      	movs	r3, r0
 8015026:	001a      	movs	r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	4353      	muls	r3, r2
 801502c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801502e:	e002      	b.n	8015036 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3b01      	subs	r3, #1
 8015034:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1f9      	bne.n	8015030 <ADC_DelayMicroSecond+0x20>
  }
}
 801503c:	46c0      	nop			@ (mov r8, r8)
 801503e:	46c0      	nop			@ (mov r8, r8)
 8015040:	46bd      	mov	sp, r7
 8015042:	b004      	add	sp, #16
 8015044:	bd80      	pop	{r7, pc}
 8015046:	46c0      	nop			@ (mov r8, r8)
 8015048:	200000ec 	.word	0x200000ec
 801504c:	000f4240 	.word	0x000f4240

08015050 <__NVIC_EnableIRQ>:
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	0002      	movs	r2, r0
 8015058:	1dfb      	adds	r3, r7, #7
 801505a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801505c:	1dfb      	adds	r3, r7, #7
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	2b7f      	cmp	r3, #127	@ 0x7f
 8015062:	d809      	bhi.n	8015078 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015064:	1dfb      	adds	r3, r7, #7
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	001a      	movs	r2, r3
 801506a:	231f      	movs	r3, #31
 801506c:	401a      	ands	r2, r3
 801506e:	4b04      	ldr	r3, [pc, #16]	@ (8015080 <__NVIC_EnableIRQ+0x30>)
 8015070:	2101      	movs	r1, #1
 8015072:	4091      	lsls	r1, r2
 8015074:	000a      	movs	r2, r1
 8015076:	601a      	str	r2, [r3, #0]
}
 8015078:	46c0      	nop			@ (mov r8, r8)
 801507a:	46bd      	mov	sp, r7
 801507c:	b002      	add	sp, #8
 801507e:	bd80      	pop	{r7, pc}
 8015080:	e000e100 	.word	0xe000e100

08015084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015084:	b590      	push	{r4, r7, lr}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	0002      	movs	r2, r0
 801508c:	6039      	str	r1, [r7, #0]
 801508e:	1dfb      	adds	r3, r7, #7
 8015090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015092:	1dfb      	adds	r3, r7, #7
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	2b7f      	cmp	r3, #127	@ 0x7f
 8015098:	d828      	bhi.n	80150ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801509a:	4a2f      	ldr	r2, [pc, #188]	@ (8015158 <__NVIC_SetPriority+0xd4>)
 801509c:	1dfb      	adds	r3, r7, #7
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	b25b      	sxtb	r3, r3
 80150a2:	089b      	lsrs	r3, r3, #2
 80150a4:	33c0      	adds	r3, #192	@ 0xc0
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	589b      	ldr	r3, [r3, r2]
 80150aa:	1dfa      	adds	r2, r7, #7
 80150ac:	7812      	ldrb	r2, [r2, #0]
 80150ae:	0011      	movs	r1, r2
 80150b0:	2203      	movs	r2, #3
 80150b2:	400a      	ands	r2, r1
 80150b4:	00d2      	lsls	r2, r2, #3
 80150b6:	21ff      	movs	r1, #255	@ 0xff
 80150b8:	4091      	lsls	r1, r2
 80150ba:	000a      	movs	r2, r1
 80150bc:	43d2      	mvns	r2, r2
 80150be:	401a      	ands	r2, r3
 80150c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	019b      	lsls	r3, r3, #6
 80150c6:	22ff      	movs	r2, #255	@ 0xff
 80150c8:	401a      	ands	r2, r3
 80150ca:	1dfb      	adds	r3, r7, #7
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	0018      	movs	r0, r3
 80150d0:	2303      	movs	r3, #3
 80150d2:	4003      	ands	r3, r0
 80150d4:	00db      	lsls	r3, r3, #3
 80150d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150d8:	481f      	ldr	r0, [pc, #124]	@ (8015158 <__NVIC_SetPriority+0xd4>)
 80150da:	1dfb      	adds	r3, r7, #7
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	b25b      	sxtb	r3, r3
 80150e0:	089b      	lsrs	r3, r3, #2
 80150e2:	430a      	orrs	r2, r1
 80150e4:	33c0      	adds	r3, #192	@ 0xc0
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80150ea:	e031      	b.n	8015150 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150ec:	4a1b      	ldr	r2, [pc, #108]	@ (801515c <__NVIC_SetPriority+0xd8>)
 80150ee:	1dfb      	adds	r3, r7, #7
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	0019      	movs	r1, r3
 80150f4:	230f      	movs	r3, #15
 80150f6:	400b      	ands	r3, r1
 80150f8:	3b08      	subs	r3, #8
 80150fa:	089b      	lsrs	r3, r3, #2
 80150fc:	3306      	adds	r3, #6
 80150fe:	009b      	lsls	r3, r3, #2
 8015100:	18d3      	adds	r3, r2, r3
 8015102:	3304      	adds	r3, #4
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	1dfa      	adds	r2, r7, #7
 8015108:	7812      	ldrb	r2, [r2, #0]
 801510a:	0011      	movs	r1, r2
 801510c:	2203      	movs	r2, #3
 801510e:	400a      	ands	r2, r1
 8015110:	00d2      	lsls	r2, r2, #3
 8015112:	21ff      	movs	r1, #255	@ 0xff
 8015114:	4091      	lsls	r1, r2
 8015116:	000a      	movs	r2, r1
 8015118:	43d2      	mvns	r2, r2
 801511a:	401a      	ands	r2, r3
 801511c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	019b      	lsls	r3, r3, #6
 8015122:	22ff      	movs	r2, #255	@ 0xff
 8015124:	401a      	ands	r2, r3
 8015126:	1dfb      	adds	r3, r7, #7
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	0018      	movs	r0, r3
 801512c:	2303      	movs	r3, #3
 801512e:	4003      	ands	r3, r0
 8015130:	00db      	lsls	r3, r3, #3
 8015132:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015134:	4809      	ldr	r0, [pc, #36]	@ (801515c <__NVIC_SetPriority+0xd8>)
 8015136:	1dfb      	adds	r3, r7, #7
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	001c      	movs	r4, r3
 801513c:	230f      	movs	r3, #15
 801513e:	4023      	ands	r3, r4
 8015140:	3b08      	subs	r3, #8
 8015142:	089b      	lsrs	r3, r3, #2
 8015144:	430a      	orrs	r2, r1
 8015146:	3306      	adds	r3, #6
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	18c3      	adds	r3, r0, r3
 801514c:	3304      	adds	r3, #4
 801514e:	601a      	str	r2, [r3, #0]
}
 8015150:	46c0      	nop			@ (mov r8, r8)
 8015152:	46bd      	mov	sp, r7
 8015154:	b003      	add	sp, #12
 8015156:	bd90      	pop	{r4, r7, pc}
 8015158:	e000e100 	.word	0xe000e100
 801515c:	e000ed00 	.word	0xe000ed00

08015160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	1e5a      	subs	r2, r3, #1
 801516c:	2380      	movs	r3, #128	@ 0x80
 801516e:	045b      	lsls	r3, r3, #17
 8015170:	429a      	cmp	r2, r3
 8015172:	d301      	bcc.n	8015178 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015174:	2301      	movs	r3, #1
 8015176:	e010      	b.n	801519a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015178:	4b0a      	ldr	r3, [pc, #40]	@ (80151a4 <SysTick_Config+0x44>)
 801517a:	687a      	ldr	r2, [r7, #4]
 801517c:	3a01      	subs	r2, #1
 801517e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015180:	2301      	movs	r3, #1
 8015182:	425b      	negs	r3, r3
 8015184:	2103      	movs	r1, #3
 8015186:	0018      	movs	r0, r3
 8015188:	f7ff ff7c 	bl	8015084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801518c:	4b05      	ldr	r3, [pc, #20]	@ (80151a4 <SysTick_Config+0x44>)
 801518e:	2200      	movs	r2, #0
 8015190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015192:	4b04      	ldr	r3, [pc, #16]	@ (80151a4 <SysTick_Config+0x44>)
 8015194:	2207      	movs	r2, #7
 8015196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015198:	2300      	movs	r3, #0
}
 801519a:	0018      	movs	r0, r3
 801519c:	46bd      	mov	sp, r7
 801519e:	b002      	add	sp, #8
 80151a0:	bd80      	pop	{r7, pc}
 80151a2:	46c0      	nop			@ (mov r8, r8)
 80151a4:	e000e010 	.word	0xe000e010

080151a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	60b9      	str	r1, [r7, #8]
 80151b0:	607a      	str	r2, [r7, #4]
 80151b2:	210f      	movs	r1, #15
 80151b4:	187b      	adds	r3, r7, r1
 80151b6:	1c02      	adds	r2, r0, #0
 80151b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80151ba:	68ba      	ldr	r2, [r7, #8]
 80151bc:	187b      	adds	r3, r7, r1
 80151be:	781b      	ldrb	r3, [r3, #0]
 80151c0:	b25b      	sxtb	r3, r3
 80151c2:	0011      	movs	r1, r2
 80151c4:	0018      	movs	r0, r3
 80151c6:	f7ff ff5d 	bl	8015084 <__NVIC_SetPriority>
}
 80151ca:	46c0      	nop			@ (mov r8, r8)
 80151cc:	46bd      	mov	sp, r7
 80151ce:	b004      	add	sp, #16
 80151d0:	bd80      	pop	{r7, pc}

080151d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80151d2:	b580      	push	{r7, lr}
 80151d4:	b082      	sub	sp, #8
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	0002      	movs	r2, r0
 80151da:	1dfb      	adds	r3, r7, #7
 80151dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80151de:	1dfb      	adds	r3, r7, #7
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	b25b      	sxtb	r3, r3
 80151e4:	0018      	movs	r0, r3
 80151e6:	f7ff ff33 	bl	8015050 <__NVIC_EnableIRQ>
}
 80151ea:	46c0      	nop			@ (mov r8, r8)
 80151ec:	46bd      	mov	sp, r7
 80151ee:	b002      	add	sp, #8
 80151f0:	bd80      	pop	{r7, pc}

080151f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b082      	sub	sp, #8
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	0018      	movs	r0, r3
 80151fe:	f7ff ffaf 	bl	8015160 <SysTick_Config>
 8015202:	0003      	movs	r3, r0
}
 8015204:	0018      	movs	r0, r3
 8015206:	46bd      	mov	sp, r7
 8015208:	b002      	add	sp, #8
 801520a:	bd80      	pop	{r7, pc}

0801520c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b084      	sub	sp, #16
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d101      	bne.n	801521e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801521a:	2301      	movs	r3, #1
 801521c:	e061      	b.n	80152e2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	4a32      	ldr	r2, [pc, #200]	@ (80152ec <HAL_DMA_Init+0xe0>)
 8015224:	4694      	mov	ip, r2
 8015226:	4463      	add	r3, ip
 8015228:	2114      	movs	r1, #20
 801522a:	0018      	movs	r0, r3
 801522c:	f7ea ffba 	bl	80001a4 <__udivsi3>
 8015230:	0003      	movs	r3, r0
 8015232:	009a      	lsls	r2, r3, #2
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	4a2d      	ldr	r2, [pc, #180]	@ (80152f0 <HAL_DMA_Init+0xe4>)
 801523c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2225      	movs	r2, #37	@ 0x25
 8015242:	2102      	movs	r1, #2
 8015244:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	4a28      	ldr	r2, [pc, #160]	@ (80152f4 <HAL_DMA_Init+0xe8>)
 8015252:	4013      	ands	r3, r2
 8015254:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801525e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	691b      	ldr	r3, [r3, #16]
 8015264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801526a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	699b      	ldr	r3, [r3, #24]
 8015270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6a1b      	ldr	r3, [r3, #32]
 801527c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801527e:	68fa      	ldr	r2, [r7, #12]
 8015280:	4313      	orrs	r3, r2
 8015282:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	68fa      	ldr	r2, [r7, #12]
 801528a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	689a      	ldr	r2, [r3, #8]
 8015290:	2380      	movs	r3, #128	@ 0x80
 8015292:	01db      	lsls	r3, r3, #7
 8015294:	429a      	cmp	r2, r3
 8015296:	d018      	beq.n	80152ca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8015298:	4b17      	ldr	r3, [pc, #92]	@ (80152f8 <HAL_DMA_Init+0xec>)
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152a0:	211c      	movs	r1, #28
 80152a2:	400b      	ands	r3, r1
 80152a4:	210f      	movs	r1, #15
 80152a6:	4099      	lsls	r1, r3
 80152a8:	000b      	movs	r3, r1
 80152aa:	43d9      	mvns	r1, r3
 80152ac:	4b12      	ldr	r3, [pc, #72]	@ (80152f8 <HAL_DMA_Init+0xec>)
 80152ae:	400a      	ands	r2, r1
 80152b0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80152b2:	4b11      	ldr	r3, [pc, #68]	@ (80152f8 <HAL_DMA_Init+0xec>)
 80152b4:	6819      	ldr	r1, [r3, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	685a      	ldr	r2, [r3, #4]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152be:	201c      	movs	r0, #28
 80152c0:	4003      	ands	r3, r0
 80152c2:	409a      	lsls	r2, r3
 80152c4:	4b0c      	ldr	r3, [pc, #48]	@ (80152f8 <HAL_DMA_Init+0xec>)
 80152c6:	430a      	orrs	r2, r1
 80152c8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2200      	movs	r2, #0
 80152ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2225      	movs	r2, #37	@ 0x25
 80152d4:	2101      	movs	r1, #1
 80152d6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2224      	movs	r2, #36	@ 0x24
 80152dc:	2100      	movs	r1, #0
 80152de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80152e0:	2300      	movs	r3, #0
}
 80152e2:	0018      	movs	r0, r3
 80152e4:	46bd      	mov	sp, r7
 80152e6:	b004      	add	sp, #16
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	46c0      	nop			@ (mov r8, r8)
 80152ec:	bffdfff8 	.word	0xbffdfff8
 80152f0:	40020000 	.word	0x40020000
 80152f4:	ffff800f 	.word	0xffff800f
 80152f8:	400200a8 	.word	0x400200a8

080152fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b086      	sub	sp, #24
 8015300:	af00      	add	r7, sp, #0
 8015302:	60f8      	str	r0, [r7, #12]
 8015304:	60b9      	str	r1, [r7, #8]
 8015306:	607a      	str	r2, [r7, #4]
 8015308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801530a:	2317      	movs	r3, #23
 801530c:	18fb      	adds	r3, r7, r3
 801530e:	2200      	movs	r2, #0
 8015310:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2224      	movs	r2, #36	@ 0x24
 8015316:	5c9b      	ldrb	r3, [r3, r2]
 8015318:	2b01      	cmp	r3, #1
 801531a:	d101      	bne.n	8015320 <HAL_DMA_Start_IT+0x24>
 801531c:	2302      	movs	r3, #2
 801531e:	e04f      	b.n	80153c0 <HAL_DMA_Start_IT+0xc4>
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2224      	movs	r2, #36	@ 0x24
 8015324:	2101      	movs	r1, #1
 8015326:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2225      	movs	r2, #37	@ 0x25
 801532c:	5c9b      	ldrb	r3, [r3, r2]
 801532e:	b2db      	uxtb	r3, r3
 8015330:	2b01      	cmp	r3, #1
 8015332:	d13a      	bne.n	80153aa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2225      	movs	r2, #37	@ 0x25
 8015338:	2102      	movs	r1, #2
 801533a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2200      	movs	r2, #0
 8015340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	2101      	movs	r1, #1
 801534e:	438a      	bics	r2, r1
 8015350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	687a      	ldr	r2, [r7, #4]
 8015356:	68b9      	ldr	r1, [r7, #8]
 8015358:	68f8      	ldr	r0, [r7, #12]
 801535a:	f000 f980 	bl	801565e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015362:	2b00      	cmp	r3, #0
 8015364:	d008      	beq.n	8015378 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	210e      	movs	r1, #14
 8015372:	430a      	orrs	r2, r1
 8015374:	601a      	str	r2, [r3, #0]
 8015376:	e00f      	b.n	8015398 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	681a      	ldr	r2, [r3, #0]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2104      	movs	r1, #4
 8015384:	438a      	bics	r2, r1
 8015386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	681a      	ldr	r2, [r3, #0]
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	210a      	movs	r1, #10
 8015394:	430a      	orrs	r2, r1
 8015396:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2101      	movs	r1, #1
 80153a4:	430a      	orrs	r2, r1
 80153a6:	601a      	str	r2, [r3, #0]
 80153a8:	e007      	b.n	80153ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2224      	movs	r2, #36	@ 0x24
 80153ae:	2100      	movs	r1, #0
 80153b0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80153b2:	2317      	movs	r3, #23
 80153b4:	18fb      	adds	r3, r7, r3
 80153b6:	2202      	movs	r2, #2
 80153b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80153ba:	2317      	movs	r3, #23
 80153bc:	18fb      	adds	r3, r7, r3
 80153be:	781b      	ldrb	r3, [r3, #0]
}
 80153c0:	0018      	movs	r0, r3
 80153c2:	46bd      	mov	sp, r7
 80153c4:	b006      	add	sp, #24
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b084      	sub	sp, #16
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80153d0:	230f      	movs	r3, #15
 80153d2:	18fb      	adds	r3, r7, r3
 80153d4:	2200      	movs	r2, #0
 80153d6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2225      	movs	r2, #37	@ 0x25
 80153dc:	5c9b      	ldrb	r3, [r3, r2]
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	2b02      	cmp	r3, #2
 80153e2:	d008      	beq.n	80153f6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2204      	movs	r2, #4
 80153e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2224      	movs	r2, #36	@ 0x24
 80153ee:	2100      	movs	r1, #0
 80153f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80153f2:	2301      	movs	r3, #1
 80153f4:	e024      	b.n	8015440 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	210e      	movs	r1, #14
 8015402:	438a      	bics	r2, r1
 8015404:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2101      	movs	r1, #1
 8015412:	438a      	bics	r2, r1
 8015414:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801541a:	221c      	movs	r2, #28
 801541c:	401a      	ands	r2, r3
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015422:	2101      	movs	r1, #1
 8015424:	4091      	lsls	r1, r2
 8015426:	000a      	movs	r2, r1
 8015428:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2225      	movs	r2, #37	@ 0x25
 801542e:	2101      	movs	r1, #1
 8015430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2224      	movs	r2, #36	@ 0x24
 8015436:	2100      	movs	r1, #0
 8015438:	5499      	strb	r1, [r3, r2]

    return status;
 801543a:	230f      	movs	r3, #15
 801543c:	18fb      	adds	r3, r7, r3
 801543e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015440:	0018      	movs	r0, r3
 8015442:	46bd      	mov	sp, r7
 8015444:	b004      	add	sp, #16
 8015446:	bd80      	pop	{r7, pc}

08015448 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015450:	210f      	movs	r1, #15
 8015452:	187b      	adds	r3, r7, r1
 8015454:	2200      	movs	r2, #0
 8015456:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2225      	movs	r2, #37	@ 0x25
 801545c:	5c9b      	ldrb	r3, [r3, r2]
 801545e:	b2db      	uxtb	r3, r3
 8015460:	2b02      	cmp	r3, #2
 8015462:	d006      	beq.n	8015472 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2204      	movs	r2, #4
 8015468:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801546a:	187b      	adds	r3, r7, r1
 801546c:	2201      	movs	r2, #1
 801546e:	701a      	strb	r2, [r3, #0]
 8015470:	e02a      	b.n	80154c8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	210e      	movs	r1, #14
 801547e:	438a      	bics	r2, r1
 8015480:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	2101      	movs	r1, #1
 801548e:	438a      	bics	r2, r1
 8015490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015496:	221c      	movs	r2, #28
 8015498:	401a      	ands	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801549e:	2101      	movs	r1, #1
 80154a0:	4091      	lsls	r1, r2
 80154a2:	000a      	movs	r2, r1
 80154a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2225      	movs	r2, #37	@ 0x25
 80154aa:	2101      	movs	r1, #1
 80154ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2224      	movs	r2, #36	@ 0x24
 80154b2:	2100      	movs	r1, #0
 80154b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d004      	beq.n	80154c8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	0010      	movs	r0, r2
 80154c6:	4798      	blx	r3
    }
  }
  return status;
 80154c8:	230f      	movs	r3, #15
 80154ca:	18fb      	adds	r3, r7, r3
 80154cc:	781b      	ldrb	r3, [r3, #0]
}
 80154ce:	0018      	movs	r0, r3
 80154d0:	46bd      	mov	sp, r7
 80154d2:	b004      	add	sp, #16
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	b084      	sub	sp, #16
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154f2:	221c      	movs	r2, #28
 80154f4:	4013      	ands	r3, r2
 80154f6:	2204      	movs	r2, #4
 80154f8:	409a      	lsls	r2, r3
 80154fa:	0013      	movs	r3, r2
 80154fc:	68fa      	ldr	r2, [r7, #12]
 80154fe:	4013      	ands	r3, r2
 8015500:	d026      	beq.n	8015550 <HAL_DMA_IRQHandler+0x7a>
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	2204      	movs	r2, #4
 8015506:	4013      	ands	r3, r2
 8015508:	d022      	beq.n	8015550 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2220      	movs	r2, #32
 8015512:	4013      	ands	r3, r2
 8015514:	d107      	bne.n	8015526 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	681a      	ldr	r2, [r3, #0]
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2104      	movs	r1, #4
 8015522:	438a      	bics	r2, r1
 8015524:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801552a:	221c      	movs	r2, #28
 801552c:	401a      	ands	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015532:	2104      	movs	r1, #4
 8015534:	4091      	lsls	r1, r2
 8015536:	000a      	movs	r2, r1
 8015538:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801553e:	2b00      	cmp	r3, #0
 8015540:	d100      	bne.n	8015544 <HAL_DMA_IRQHandler+0x6e>
 8015542:	e071      	b.n	8015628 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015548:	687a      	ldr	r2, [r7, #4]
 801554a:	0010      	movs	r0, r2
 801554c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801554e:	e06b      	b.n	8015628 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015554:	221c      	movs	r2, #28
 8015556:	4013      	ands	r3, r2
 8015558:	2202      	movs	r2, #2
 801555a:	409a      	lsls	r2, r3
 801555c:	0013      	movs	r3, r2
 801555e:	68fa      	ldr	r2, [r7, #12]
 8015560:	4013      	ands	r3, r2
 8015562:	d02d      	beq.n	80155c0 <HAL_DMA_IRQHandler+0xea>
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	2202      	movs	r2, #2
 8015568:	4013      	ands	r3, r2
 801556a:	d029      	beq.n	80155c0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2220      	movs	r2, #32
 8015574:	4013      	ands	r3, r2
 8015576:	d10b      	bne.n	8015590 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	210a      	movs	r1, #10
 8015584:	438a      	bics	r2, r1
 8015586:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2225      	movs	r2, #37	@ 0x25
 801558c:	2101      	movs	r1, #1
 801558e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015594:	221c      	movs	r2, #28
 8015596:	401a      	ands	r2, r3
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801559c:	2102      	movs	r1, #2
 801559e:	4091      	lsls	r1, r2
 80155a0:	000a      	movs	r2, r1
 80155a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2224      	movs	r2, #36	@ 0x24
 80155a8:	2100      	movs	r1, #0
 80155aa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d039      	beq.n	8015628 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	0010      	movs	r0, r2
 80155bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80155be:	e033      	b.n	8015628 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155c4:	221c      	movs	r2, #28
 80155c6:	4013      	ands	r3, r2
 80155c8:	2208      	movs	r2, #8
 80155ca:	409a      	lsls	r2, r3
 80155cc:	0013      	movs	r3, r2
 80155ce:	68fa      	ldr	r2, [r7, #12]
 80155d0:	4013      	ands	r3, r2
 80155d2:	d02a      	beq.n	801562a <HAL_DMA_IRQHandler+0x154>
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	2208      	movs	r2, #8
 80155d8:	4013      	ands	r3, r2
 80155da:	d026      	beq.n	801562a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	210e      	movs	r1, #14
 80155e8:	438a      	bics	r2, r1
 80155ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155f0:	221c      	movs	r2, #28
 80155f2:	401a      	ands	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155f8:	2101      	movs	r1, #1
 80155fa:	4091      	lsls	r1, r2
 80155fc:	000a      	movs	r2, r1
 80155fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2201      	movs	r2, #1
 8015604:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2225      	movs	r2, #37	@ 0x25
 801560a:	2101      	movs	r1, #1
 801560c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	2224      	movs	r2, #36	@ 0x24
 8015612:	2100      	movs	r1, #0
 8015614:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801561a:	2b00      	cmp	r3, #0
 801561c:	d005      	beq.n	801562a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015622:	687a      	ldr	r2, [r7, #4]
 8015624:	0010      	movs	r0, r2
 8015626:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8015628:	46c0      	nop			@ (mov r8, r8)
 801562a:	46c0      	nop			@ (mov r8, r8)
}
 801562c:	46bd      	mov	sp, r7
 801562e:	b004      	add	sp, #16
 8015630:	bd80      	pop	{r7, pc}

08015632 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b082      	sub	sp, #8
 8015636:	af00      	add	r7, sp, #0
 8015638:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2225      	movs	r2, #37	@ 0x25
 801563e:	5c9b      	ldrb	r3, [r3, r2]
 8015640:	b2db      	uxtb	r3, r3
}
 8015642:	0018      	movs	r0, r3
 8015644:	46bd      	mov	sp, r7
 8015646:	b002      	add	sp, #8
 8015648:	bd80      	pop	{r7, pc}

0801564a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b082      	sub	sp, #8
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8015656:	0018      	movs	r0, r3
 8015658:	46bd      	mov	sp, r7
 801565a:	b002      	add	sp, #8
 801565c:	bd80      	pop	{r7, pc}

0801565e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801565e:	b580      	push	{r7, lr}
 8015660:	b084      	sub	sp, #16
 8015662:	af00      	add	r7, sp, #0
 8015664:	60f8      	str	r0, [r7, #12]
 8015666:	60b9      	str	r1, [r7, #8]
 8015668:	607a      	str	r2, [r7, #4]
 801566a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015670:	221c      	movs	r2, #28
 8015672:	401a      	ands	r2, r3
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015678:	2101      	movs	r1, #1
 801567a:	4091      	lsls	r1, r2
 801567c:	000a      	movs	r2, r1
 801567e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	683a      	ldr	r2, [r7, #0]
 8015686:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	689b      	ldr	r3, [r3, #8]
 801568c:	2b10      	cmp	r3, #16
 801568e:	d108      	bne.n	80156a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80156a0:	e007      	b.n	80156b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	68ba      	ldr	r2, [r7, #8]
 80156a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	687a      	ldr	r2, [r7, #4]
 80156b0:	60da      	str	r2, [r3, #12]
}
 80156b2:	46c0      	nop			@ (mov r8, r8)
 80156b4:	46bd      	mov	sp, r7
 80156b6:	b004      	add	sp, #16
 80156b8:	bd80      	pop	{r7, pc}
	...

080156bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80156c4:	f7ff f8fc 	bl	80148c0 <HAL_GetTick>
 80156c8:	0003      	movs	r3, r0
 80156ca:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80156cc:	e00f      	b.n	80156ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	3301      	adds	r3, #1
 80156d2:	d00c      	beq.n	80156ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d007      	beq.n	80156ea <FLASH_WaitForLastOperation+0x2e>
 80156da:	f7ff f8f1 	bl	80148c0 <HAL_GetTick>
 80156de:	0002      	movs	r2, r0
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d201      	bcs.n	80156ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80156ea:	2303      	movs	r3, #3
 80156ec:	e052      	b.n	8015794 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80156ee:	4b2b      	ldr	r3, [pc, #172]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 80156f0:	699b      	ldr	r3, [r3, #24]
 80156f2:	2201      	movs	r2, #1
 80156f4:	4013      	ands	r3, r2
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	d0e9      	beq.n	80156ce <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80156fa:	4b28      	ldr	r3, [pc, #160]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 80156fc:	699b      	ldr	r3, [r3, #24]
 80156fe:	2202      	movs	r2, #2
 8015700:	4013      	ands	r3, r2
 8015702:	2b02      	cmp	r3, #2
 8015704:	d102      	bne.n	801570c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8015706:	4b25      	ldr	r3, [pc, #148]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 8015708:	2202      	movs	r2, #2
 801570a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 801570c:	4b23      	ldr	r3, [pc, #140]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 801570e:	699a      	ldr	r2, [r3, #24]
 8015710:	2380      	movs	r3, #128	@ 0x80
 8015712:	005b      	lsls	r3, r3, #1
 8015714:	401a      	ands	r2, r3
 8015716:	2380      	movs	r3, #128	@ 0x80
 8015718:	005b      	lsls	r3, r3, #1
 801571a:	429a      	cmp	r2, r3
 801571c:	d035      	beq.n	801578a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801571e:	4b1f      	ldr	r3, [pc, #124]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 8015720:	699a      	ldr	r2, [r3, #24]
 8015722:	2380      	movs	r3, #128	@ 0x80
 8015724:	009b      	lsls	r3, r3, #2
 8015726:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015728:	2380      	movs	r3, #128	@ 0x80
 801572a:	009b      	lsls	r3, r3, #2
 801572c:	429a      	cmp	r2, r3
 801572e:	d02c      	beq.n	801578a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015730:	4b1a      	ldr	r3, [pc, #104]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 8015732:	699a      	ldr	r2, [r3, #24]
 8015734:	2380      	movs	r3, #128	@ 0x80
 8015736:	00db      	lsls	r3, r3, #3
 8015738:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801573a:	2380      	movs	r3, #128	@ 0x80
 801573c:	00db      	lsls	r3, r3, #3
 801573e:	429a      	cmp	r2, r3
 8015740:	d023      	beq.n	801578a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015742:	4b16      	ldr	r3, [pc, #88]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 8015744:	699a      	ldr	r2, [r3, #24]
 8015746:	2380      	movs	r3, #128	@ 0x80
 8015748:	011b      	lsls	r3, r3, #4
 801574a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801574c:	2380      	movs	r3, #128	@ 0x80
 801574e:	011b      	lsls	r3, r3, #4
 8015750:	429a      	cmp	r2, r3
 8015752:	d01a      	beq.n	801578a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015754:	4b11      	ldr	r3, [pc, #68]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 8015756:	699a      	ldr	r2, [r3, #24]
 8015758:	2380      	movs	r3, #128	@ 0x80
 801575a:	019b      	lsls	r3, r3, #6
 801575c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801575e:	2380      	movs	r3, #128	@ 0x80
 8015760:	019b      	lsls	r3, r3, #6
 8015762:	429a      	cmp	r2, r3
 8015764:	d011      	beq.n	801578a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015766:	4b0d      	ldr	r3, [pc, #52]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 8015768:	699a      	ldr	r2, [r3, #24]
 801576a:	2380      	movs	r3, #128	@ 0x80
 801576c:	029b      	lsls	r3, r3, #10
 801576e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015770:	2380      	movs	r3, #128	@ 0x80
 8015772:	029b      	lsls	r3, r3, #10
 8015774:	429a      	cmp	r2, r3
 8015776:	d008      	beq.n	801578a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015778:	4b08      	ldr	r3, [pc, #32]	@ (801579c <FLASH_WaitForLastOperation+0xe0>)
 801577a:	699a      	ldr	r2, [r3, #24]
 801577c:	2380      	movs	r3, #128	@ 0x80
 801577e:	025b      	lsls	r3, r3, #9
 8015780:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015782:	2380      	movs	r3, #128	@ 0x80
 8015784:	025b      	lsls	r3, r3, #9
 8015786:	429a      	cmp	r2, r3
 8015788:	d103      	bne.n	8015792 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801578a:	f000 f809 	bl	80157a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801578e:	2301      	movs	r3, #1
 8015790:	e000      	b.n	8015794 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015792:	2300      	movs	r3, #0
}
 8015794:	0018      	movs	r0, r3
 8015796:	46bd      	mov	sp, r7
 8015798:	b004      	add	sp, #16
 801579a:	bd80      	pop	{r7, pc}
 801579c:	40022000 	.word	0x40022000

080157a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80157a6:	2300      	movs	r3, #0
 80157a8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80157aa:	4b49      	ldr	r3, [pc, #292]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 80157ac:	699a      	ldr	r2, [r3, #24]
 80157ae:	2380      	movs	r3, #128	@ 0x80
 80157b0:	005b      	lsls	r3, r3, #1
 80157b2:	401a      	ands	r2, r3
 80157b4:	2380      	movs	r3, #128	@ 0x80
 80157b6:	005b      	lsls	r3, r3, #1
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d10a      	bne.n	80157d2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80157bc:	4b45      	ldr	r3, [pc, #276]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 80157be:	695b      	ldr	r3, [r3, #20]
 80157c0:	2202      	movs	r2, #2
 80157c2:	431a      	orrs	r2, r3
 80157c4:	4b43      	ldr	r3, [pc, #268]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 80157c6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2280      	movs	r2, #128	@ 0x80
 80157cc:	0052      	lsls	r2, r2, #1
 80157ce:	4313      	orrs	r3, r2
 80157d0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80157d2:	4b3f      	ldr	r3, [pc, #252]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 80157d4:	699a      	ldr	r2, [r3, #24]
 80157d6:	2380      	movs	r3, #128	@ 0x80
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	401a      	ands	r2, r3
 80157dc:	2380      	movs	r3, #128	@ 0x80
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d10a      	bne.n	80157fa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80157e4:	4b3b      	ldr	r3, [pc, #236]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 80157e6:	695b      	ldr	r3, [r3, #20]
 80157e8:	2201      	movs	r2, #1
 80157ea:	431a      	orrs	r2, r3
 80157ec:	4b39      	ldr	r3, [pc, #228]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 80157ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2280      	movs	r2, #128	@ 0x80
 80157f4:	0092      	lsls	r2, r2, #2
 80157f6:	4313      	orrs	r3, r2
 80157f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80157fa:	4b35      	ldr	r3, [pc, #212]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 80157fc:	699a      	ldr	r2, [r3, #24]
 80157fe:	2380      	movs	r3, #128	@ 0x80
 8015800:	00db      	lsls	r3, r3, #3
 8015802:	401a      	ands	r2, r3
 8015804:	2380      	movs	r3, #128	@ 0x80
 8015806:	00db      	lsls	r3, r3, #3
 8015808:	429a      	cmp	r2, r3
 801580a:	d10a      	bne.n	8015822 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 801580c:	4b31      	ldr	r3, [pc, #196]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 801580e:	695b      	ldr	r3, [r3, #20]
 8015810:	2208      	movs	r2, #8
 8015812:	431a      	orrs	r2, r3
 8015814:	4b2f      	ldr	r3, [pc, #188]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 8015816:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2280      	movs	r2, #128	@ 0x80
 801581c:	00d2      	lsls	r2, r2, #3
 801581e:	4313      	orrs	r3, r2
 8015820:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8015822:	4b2b      	ldr	r3, [pc, #172]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 8015824:	699a      	ldr	r2, [r3, #24]
 8015826:	2380      	movs	r3, #128	@ 0x80
 8015828:	011b      	lsls	r3, r3, #4
 801582a:	401a      	ands	r2, r3
 801582c:	2380      	movs	r3, #128	@ 0x80
 801582e:	011b      	lsls	r3, r3, #4
 8015830:	429a      	cmp	r2, r3
 8015832:	d10a      	bne.n	801584a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8015834:	4b27      	ldr	r3, [pc, #156]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 8015836:	695b      	ldr	r3, [r3, #20]
 8015838:	2204      	movs	r2, #4
 801583a:	431a      	orrs	r2, r3
 801583c:	4b25      	ldr	r3, [pc, #148]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 801583e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2280      	movs	r2, #128	@ 0x80
 8015844:	0112      	lsls	r2, r2, #4
 8015846:	4313      	orrs	r3, r2
 8015848:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801584a:	4b21      	ldr	r3, [pc, #132]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 801584c:	699a      	ldr	r2, [r3, #24]
 801584e:	2380      	movs	r3, #128	@ 0x80
 8015850:	019b      	lsls	r3, r3, #6
 8015852:	401a      	ands	r2, r3
 8015854:	2380      	movs	r3, #128	@ 0x80
 8015856:	019b      	lsls	r3, r3, #6
 8015858:	429a      	cmp	r2, r3
 801585a:	d10a      	bne.n	8015872 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801585c:	4b1d      	ldr	r3, [pc, #116]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 801585e:	695b      	ldr	r3, [r3, #20]
 8015860:	2210      	movs	r2, #16
 8015862:	431a      	orrs	r2, r3
 8015864:	4b1b      	ldr	r3, [pc, #108]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 8015866:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2280      	movs	r2, #128	@ 0x80
 801586c:	0192      	lsls	r2, r2, #6
 801586e:	4313      	orrs	r3, r2
 8015870:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8015872:	4b17      	ldr	r3, [pc, #92]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 8015874:	699a      	ldr	r2, [r3, #24]
 8015876:	2380      	movs	r3, #128	@ 0x80
 8015878:	029b      	lsls	r3, r3, #10
 801587a:	401a      	ands	r2, r3
 801587c:	2380      	movs	r3, #128	@ 0x80
 801587e:	029b      	lsls	r3, r3, #10
 8015880:	429a      	cmp	r2, r3
 8015882:	d109      	bne.n	8015898 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015884:	4b13      	ldr	r3, [pc, #76]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 8015886:	695b      	ldr	r3, [r3, #20]
 8015888:	2220      	movs	r2, #32
 801588a:	431a      	orrs	r2, r3
 801588c:	4b11      	ldr	r3, [pc, #68]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 801588e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2220      	movs	r2, #32
 8015894:	4313      	orrs	r3, r2
 8015896:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015898:	4b0d      	ldr	r3, [pc, #52]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 801589a:	699a      	ldr	r2, [r3, #24]
 801589c:	2380      	movs	r3, #128	@ 0x80
 801589e:	025b      	lsls	r3, r3, #9
 80158a0:	401a      	ands	r2, r3
 80158a2:	2380      	movs	r3, #128	@ 0x80
 80158a4:	025b      	lsls	r3, r3, #9
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d10a      	bne.n	80158c0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80158aa:	4b0a      	ldr	r3, [pc, #40]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 80158ac:	695b      	ldr	r3, [r3, #20]
 80158ae:	2240      	movs	r2, #64	@ 0x40
 80158b0:	431a      	orrs	r2, r3
 80158b2:	4b08      	ldr	r3, [pc, #32]	@ (80158d4 <FLASH_SetErrorCode+0x134>)
 80158b4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2280      	movs	r2, #128	@ 0x80
 80158ba:	0252      	lsls	r2, r2, #9
 80158bc:	4313      	orrs	r3, r2
 80158be:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80158c0:	4b03      	ldr	r3, [pc, #12]	@ (80158d0 <FLASH_SetErrorCode+0x130>)
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	619a      	str	r2, [r3, #24]
}  
 80158c6:	46c0      	nop			@ (mov r8, r8)
 80158c8:	46bd      	mov	sp, r7
 80158ca:	b002      	add	sp, #8
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	46c0      	nop			@ (mov r8, r8)
 80158d0:	40022000 	.word	0x40022000
 80158d4:	20002518 	.word	0x20002518

080158d8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80158de:	4b12      	ldr	r3, [pc, #72]	@ (8015928 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	2201      	movs	r2, #1
 80158e4:	4013      	ands	r3, r2
 80158e6:	d019      	beq.n	801591c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158e8:	f3ef 8310 	mrs	r3, PRIMASK
 80158ec:	607b      	str	r3, [r7, #4]
  return(result);
 80158ee:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80158f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80158f2:	b672      	cpsid	i
}
 80158f4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80158f6:	4b0c      	ldr	r3, [pc, #48]	@ (8015928 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158f8:	4a0c      	ldr	r2, [pc, #48]	@ (801592c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80158fa:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80158fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015928 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158fe:	4a0c      	ldr	r2, [pc, #48]	@ (8015930 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015900:	60da      	str	r2, [r3, #12]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	f383 8810 	msr	PRIMASK, r3
}
 801590c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801590e:	4b06      	ldr	r3, [pc, #24]	@ (8015928 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	2201      	movs	r2, #1
 8015914:	4013      	ands	r3, r2
 8015916:	d001      	beq.n	801591c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015918:	2301      	movs	r3, #1
 801591a:	e000      	b.n	801591e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 801591c:	2300      	movs	r3, #0
}
 801591e:	0018      	movs	r0, r3
 8015920:	46bd      	mov	sp, r7
 8015922:	b004      	add	sp, #16
 8015924:	bd80      	pop	{r7, pc}
 8015926:	46c0      	nop			@ (mov r8, r8)
 8015928:	40022000 	.word	0x40022000
 801592c:	89abcdef 	.word	0x89abcdef
 8015930:	02030405 	.word	0x02030405

08015934 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015938:	4b04      	ldr	r3, [pc, #16]	@ (801594c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801593a:	685a      	ldr	r2, [r3, #4]
 801593c:	4b03      	ldr	r3, [pc, #12]	@ (801594c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801593e:	2101      	movs	r1, #1
 8015940:	430a      	orrs	r2, r1
 8015942:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015944:	2300      	movs	r3, #0
}
 8015946:	0018      	movs	r0, r3
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	40022000 	.word	0x40022000

08015950 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015950:	b5b0      	push	{r4, r5, r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015958:	250f      	movs	r5, #15
 801595a:	197b      	adds	r3, r7, r5
 801595c:	2200      	movs	r2, #0
 801595e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015960:	197c      	adds	r4, r7, r5
 8015962:	4b0f      	ldr	r3, [pc, #60]	@ (80159a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015964:	0018      	movs	r0, r3
 8015966:	f7ff fea9 	bl	80156bc <FLASH_WaitForLastOperation>
 801596a:	0003      	movs	r3, r0
 801596c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801596e:	0029      	movs	r1, r5
 8015970:	187b      	adds	r3, r7, r1
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d10c      	bne.n	8015992 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015978:	4b0a      	ldr	r3, [pc, #40]	@ (80159a4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801597a:	2200      	movs	r2, #0
 801597c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2200      	movs	r2, #0
 8015982:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015984:	187c      	adds	r4, r7, r1
 8015986:	4b06      	ldr	r3, [pc, #24]	@ (80159a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015988:	0018      	movs	r0, r3
 801598a:	f7ff fe97 	bl	80156bc <FLASH_WaitForLastOperation>
 801598e:	0003      	movs	r3, r0
 8015990:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015992:	230f      	movs	r3, #15
 8015994:	18fb      	adds	r3, r7, r3
 8015996:	781b      	ldrb	r3, [r3, #0]
}  
 8015998:	0018      	movs	r0, r3
 801599a:	46bd      	mov	sp, r7
 801599c:	b004      	add	sp, #16
 801599e:	bdb0      	pop	{r4, r5, r7, pc}
 80159a0:	0000c350 	.word	0x0000c350
 80159a4:	20002518 	.word	0x20002518

080159a8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80159a8:	b5b0      	push	{r4, r5, r7, lr}
 80159aa:	b086      	sub	sp, #24
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80159b4:	2317      	movs	r3, #23
 80159b6:	18fb      	adds	r3, r7, r3
 80159b8:	2201      	movs	r2, #1
 80159ba:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80159bc:	4b24      	ldr	r3, [pc, #144]	@ (8015a50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80159be:	7c1b      	ldrb	r3, [r3, #16]
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	d101      	bne.n	80159c8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80159c4:	2302      	movs	r3, #2
 80159c6:	e03e      	b.n	8015a46 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80159c8:	4b21      	ldr	r3, [pc, #132]	@ (8015a50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80159ca:	2201      	movs	r2, #1
 80159cc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80159ce:	2517      	movs	r5, #23
 80159d0:	197c      	adds	r4, r7, r5
 80159d2:	4b20      	ldr	r3, [pc, #128]	@ (8015a54 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80159d4:	0018      	movs	r0, r3
 80159d6:	f7ff fe71 	bl	80156bc <FLASH_WaitForLastOperation>
 80159da:	0003      	movs	r3, r0
 80159dc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80159de:	197b      	adds	r3, r7, r5
 80159e0:	781b      	ldrb	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d129      	bne.n	8015a3a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80159e6:	4b1a      	ldr	r3, [pc, #104]	@ (8015a50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80159e8:	2200      	movs	r2, #0
 80159ea:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	2b02      	cmp	r3, #2
 80159f0:	d103      	bne.n	80159fa <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	687a      	ldr	r2, [r7, #4]
 80159f6:	601a      	str	r2, [r3, #0]
 80159f8:	e013      	b.n	8015a22 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	2b01      	cmp	r3, #1
 80159fe:	d104      	bne.n	8015a0a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	b292      	uxth	r2, r2
 8015a06:	801a      	strh	r2, [r3, #0]
 8015a08:	e00b      	b.n	8015a22 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d104      	bne.n	8015a1a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	b2d2      	uxtb	r2, r2
 8015a16:	701a      	strb	r2, [r3, #0]
 8015a18:	e003      	b.n	8015a22 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015a1a:	2317      	movs	r3, #23
 8015a1c:	18fb      	adds	r3, r7, r3
 8015a1e:	2201      	movs	r2, #1
 8015a20:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015a22:	2217      	movs	r2, #23
 8015a24:	18bb      	adds	r3, r7, r2
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d106      	bne.n	8015a3a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a2c:	18bc      	adds	r4, r7, r2
 8015a2e:	4b09      	ldr	r3, [pc, #36]	@ (8015a54 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015a30:	0018      	movs	r0, r3
 8015a32:	f7ff fe43 	bl	80156bc <FLASH_WaitForLastOperation>
 8015a36:	0003      	movs	r3, r0
 8015a38:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015a3a:	4b05      	ldr	r3, [pc, #20]	@ (8015a50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	741a      	strb	r2, [r3, #16]

  return status;
 8015a40:	2317      	movs	r3, #23
 8015a42:	18fb      	adds	r3, r7, r3
 8015a44:	781b      	ldrb	r3, [r3, #0]
}
 8015a46:	0018      	movs	r0, r3
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	b006      	add	sp, #24
 8015a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a4e:	46c0      	nop			@ (mov r8, r8)
 8015a50:	20002518 	.word	0x20002518
 8015a54:	0000c350 	.word	0x0000c350

08015a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b086      	sub	sp, #24
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015a62:	2300      	movs	r3, #0
 8015a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015a66:	2300      	movs	r3, #0
 8015a68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015a6e:	e155      	b.n	8015d1c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2101      	movs	r1, #1
 8015a76:	697a      	ldr	r2, [r7, #20]
 8015a78:	4091      	lsls	r1, r2
 8015a7a:	000a      	movs	r2, r1
 8015a7c:	4013      	ands	r3, r2
 8015a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d100      	bne.n	8015a88 <HAL_GPIO_Init+0x30>
 8015a86:	e146      	b.n	8015d16 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	2203      	movs	r2, #3
 8015a8e:	4013      	ands	r3, r2
 8015a90:	2b01      	cmp	r3, #1
 8015a92:	d005      	beq.n	8015aa0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	2203      	movs	r2, #3
 8015a9a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015a9c:	2b02      	cmp	r3, #2
 8015a9e:	d130      	bne.n	8015b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	689b      	ldr	r3, [r3, #8]
 8015aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	005b      	lsls	r3, r3, #1
 8015aaa:	2203      	movs	r2, #3
 8015aac:	409a      	lsls	r2, r3
 8015aae:	0013      	movs	r3, r2
 8015ab0:	43da      	mvns	r2, r3
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	4013      	ands	r3, r2
 8015ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	68da      	ldr	r2, [r3, #12]
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	005b      	lsls	r3, r3, #1
 8015ac0:	409a      	lsls	r2, r3
 8015ac2:	0013      	movs	r3, r2
 8015ac4:	693a      	ldr	r2, [r7, #16]
 8015ac6:	4313      	orrs	r3, r2
 8015ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	693a      	ldr	r2, [r7, #16]
 8015ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015ad6:	2201      	movs	r2, #1
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	409a      	lsls	r2, r3
 8015adc:	0013      	movs	r3, r2
 8015ade:	43da      	mvns	r2, r3
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	4013      	ands	r3, r2
 8015ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	685b      	ldr	r3, [r3, #4]
 8015aea:	091b      	lsrs	r3, r3, #4
 8015aec:	2201      	movs	r2, #1
 8015aee:	401a      	ands	r2, r3
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	409a      	lsls	r2, r3
 8015af4:	0013      	movs	r3, r2
 8015af6:	693a      	ldr	r2, [r7, #16]
 8015af8:	4313      	orrs	r3, r2
 8015afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	693a      	ldr	r2, [r7, #16]
 8015b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	685b      	ldr	r3, [r3, #4]
 8015b06:	2203      	movs	r2, #3
 8015b08:	4013      	ands	r3, r2
 8015b0a:	2b03      	cmp	r3, #3
 8015b0c:	d017      	beq.n	8015b3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	68db      	ldr	r3, [r3, #12]
 8015b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	005b      	lsls	r3, r3, #1
 8015b18:	2203      	movs	r2, #3
 8015b1a:	409a      	lsls	r2, r3
 8015b1c:	0013      	movs	r3, r2
 8015b1e:	43da      	mvns	r2, r3
 8015b20:	693b      	ldr	r3, [r7, #16]
 8015b22:	4013      	ands	r3, r2
 8015b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	689a      	ldr	r2, [r3, #8]
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	409a      	lsls	r2, r3
 8015b30:	0013      	movs	r3, r2
 8015b32:	693a      	ldr	r2, [r7, #16]
 8015b34:	4313      	orrs	r3, r2
 8015b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	693a      	ldr	r2, [r7, #16]
 8015b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	2203      	movs	r2, #3
 8015b44:	4013      	ands	r3, r2
 8015b46:	2b02      	cmp	r3, #2
 8015b48:	d123      	bne.n	8015b92 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	08da      	lsrs	r2, r3, #3
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3208      	adds	r2, #8
 8015b52:	0092      	lsls	r2, r2, #2
 8015b54:	58d3      	ldr	r3, [r2, r3]
 8015b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	2207      	movs	r2, #7
 8015b5c:	4013      	ands	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	220f      	movs	r2, #15
 8015b62:	409a      	lsls	r2, r3
 8015b64:	0013      	movs	r3, r2
 8015b66:	43da      	mvns	r2, r3
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	4013      	ands	r3, r2
 8015b6c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	691a      	ldr	r2, [r3, #16]
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	2107      	movs	r1, #7
 8015b76:	400b      	ands	r3, r1
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	409a      	lsls	r2, r3
 8015b7c:	0013      	movs	r3, r2
 8015b7e:	693a      	ldr	r2, [r7, #16]
 8015b80:	4313      	orrs	r3, r2
 8015b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	08da      	lsrs	r2, r3, #3
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	3208      	adds	r2, #8
 8015b8c:	0092      	lsls	r2, r2, #2
 8015b8e:	6939      	ldr	r1, [r7, #16]
 8015b90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	005b      	lsls	r3, r3, #1
 8015b9c:	2203      	movs	r2, #3
 8015b9e:	409a      	lsls	r2, r3
 8015ba0:	0013      	movs	r3, r2
 8015ba2:	43da      	mvns	r2, r3
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	4013      	ands	r3, r2
 8015ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	2203      	movs	r2, #3
 8015bb0:	401a      	ands	r2, r3
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	409a      	lsls	r2, r3
 8015bb8:	0013      	movs	r3, r2
 8015bba:	693a      	ldr	r2, [r7, #16]
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	693a      	ldr	r2, [r7, #16]
 8015bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	685a      	ldr	r2, [r3, #4]
 8015bca:	23c0      	movs	r3, #192	@ 0xc0
 8015bcc:	029b      	lsls	r3, r3, #10
 8015bce:	4013      	ands	r3, r2
 8015bd0:	d100      	bne.n	8015bd4 <HAL_GPIO_Init+0x17c>
 8015bd2:	e0a0      	b.n	8015d16 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015bd4:	4b57      	ldr	r3, [pc, #348]	@ (8015d34 <HAL_GPIO_Init+0x2dc>)
 8015bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015bd8:	4b56      	ldr	r3, [pc, #344]	@ (8015d34 <HAL_GPIO_Init+0x2dc>)
 8015bda:	2101      	movs	r1, #1
 8015bdc:	430a      	orrs	r2, r1
 8015bde:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015be0:	4a55      	ldr	r2, [pc, #340]	@ (8015d38 <HAL_GPIO_Init+0x2e0>)
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	089b      	lsrs	r3, r3, #2
 8015be6:	3302      	adds	r3, #2
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	589b      	ldr	r3, [r3, r2]
 8015bec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	2203      	movs	r2, #3
 8015bf2:	4013      	ands	r3, r2
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	220f      	movs	r2, #15
 8015bf8:	409a      	lsls	r2, r3
 8015bfa:	0013      	movs	r3, r2
 8015bfc:	43da      	mvns	r2, r3
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	4013      	ands	r3, r2
 8015c02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	23a0      	movs	r3, #160	@ 0xa0
 8015c08:	05db      	lsls	r3, r3, #23
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d01f      	beq.n	8015c4e <HAL_GPIO_Init+0x1f6>
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	4a4a      	ldr	r2, [pc, #296]	@ (8015d3c <HAL_GPIO_Init+0x2e4>)
 8015c12:	4293      	cmp	r3, r2
 8015c14:	d019      	beq.n	8015c4a <HAL_GPIO_Init+0x1f2>
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	4a49      	ldr	r2, [pc, #292]	@ (8015d40 <HAL_GPIO_Init+0x2e8>)
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	d013      	beq.n	8015c46 <HAL_GPIO_Init+0x1ee>
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	4a48      	ldr	r2, [pc, #288]	@ (8015d44 <HAL_GPIO_Init+0x2ec>)
 8015c22:	4293      	cmp	r3, r2
 8015c24:	d00d      	beq.n	8015c42 <HAL_GPIO_Init+0x1ea>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4a47      	ldr	r2, [pc, #284]	@ (8015d48 <HAL_GPIO_Init+0x2f0>)
 8015c2a:	4293      	cmp	r3, r2
 8015c2c:	d007      	beq.n	8015c3e <HAL_GPIO_Init+0x1e6>
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	4a46      	ldr	r2, [pc, #280]	@ (8015d4c <HAL_GPIO_Init+0x2f4>)
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d101      	bne.n	8015c3a <HAL_GPIO_Init+0x1e2>
 8015c36:	2305      	movs	r3, #5
 8015c38:	e00a      	b.n	8015c50 <HAL_GPIO_Init+0x1f8>
 8015c3a:	2306      	movs	r3, #6
 8015c3c:	e008      	b.n	8015c50 <HAL_GPIO_Init+0x1f8>
 8015c3e:	2304      	movs	r3, #4
 8015c40:	e006      	b.n	8015c50 <HAL_GPIO_Init+0x1f8>
 8015c42:	2303      	movs	r3, #3
 8015c44:	e004      	b.n	8015c50 <HAL_GPIO_Init+0x1f8>
 8015c46:	2302      	movs	r3, #2
 8015c48:	e002      	b.n	8015c50 <HAL_GPIO_Init+0x1f8>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	e000      	b.n	8015c50 <HAL_GPIO_Init+0x1f8>
 8015c4e:	2300      	movs	r3, #0
 8015c50:	697a      	ldr	r2, [r7, #20]
 8015c52:	2103      	movs	r1, #3
 8015c54:	400a      	ands	r2, r1
 8015c56:	0092      	lsls	r2, r2, #2
 8015c58:	4093      	lsls	r3, r2
 8015c5a:	693a      	ldr	r2, [r7, #16]
 8015c5c:	4313      	orrs	r3, r2
 8015c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015c60:	4935      	ldr	r1, [pc, #212]	@ (8015d38 <HAL_GPIO_Init+0x2e0>)
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	089b      	lsrs	r3, r3, #2
 8015c66:	3302      	adds	r3, #2
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	693a      	ldr	r2, [r7, #16]
 8015c6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015c6e:	4b38      	ldr	r3, [pc, #224]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015c70:	689b      	ldr	r3, [r3, #8]
 8015c72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	43da      	mvns	r2, r3
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	685a      	ldr	r2, [r3, #4]
 8015c82:	2380      	movs	r3, #128	@ 0x80
 8015c84:	035b      	lsls	r3, r3, #13
 8015c86:	4013      	ands	r3, r2
 8015c88:	d003      	beq.n	8015c92 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015c8a:	693a      	ldr	r2, [r7, #16]
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015c92:	4b2f      	ldr	r3, [pc, #188]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015c94:	693a      	ldr	r2, [r7, #16]
 8015c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015c98:	4b2d      	ldr	r3, [pc, #180]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015c9a:	68db      	ldr	r3, [r3, #12]
 8015c9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	43da      	mvns	r2, r3
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	4013      	ands	r3, r2
 8015ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	685a      	ldr	r2, [r3, #4]
 8015cac:	2380      	movs	r3, #128	@ 0x80
 8015cae:	039b      	lsls	r3, r3, #14
 8015cb0:	4013      	ands	r3, r2
 8015cb2:	d003      	beq.n	8015cbc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015cb4:	693a      	ldr	r2, [r7, #16]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	4313      	orrs	r3, r2
 8015cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015cbc:	4b24      	ldr	r3, [pc, #144]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015cbe:	693a      	ldr	r2, [r7, #16]
 8015cc0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015cc2:	4b23      	ldr	r3, [pc, #140]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	43da      	mvns	r2, r3
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	4013      	ands	r3, r2
 8015cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	685a      	ldr	r2, [r3, #4]
 8015cd6:	2380      	movs	r3, #128	@ 0x80
 8015cd8:	029b      	lsls	r3, r3, #10
 8015cda:	4013      	ands	r3, r2
 8015cdc:	d003      	beq.n	8015ce6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015cde:	693a      	ldr	r2, [r7, #16]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	4313      	orrs	r3, r2
 8015ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015ce8:	693a      	ldr	r2, [r7, #16]
 8015cea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015cec:	4b18      	ldr	r3, [pc, #96]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	43da      	mvns	r2, r3
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	4013      	ands	r3, r2
 8015cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	685a      	ldr	r2, [r3, #4]
 8015d00:	2380      	movs	r3, #128	@ 0x80
 8015d02:	025b      	lsls	r3, r3, #9
 8015d04:	4013      	ands	r3, r2
 8015d06:	d003      	beq.n	8015d10 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015d08:	693a      	ldr	r2, [r7, #16]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	4313      	orrs	r3, r2
 8015d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015d10:	4b0f      	ldr	r3, [pc, #60]	@ (8015d50 <HAL_GPIO_Init+0x2f8>)
 8015d12:	693a      	ldr	r2, [r7, #16]
 8015d14:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	681a      	ldr	r2, [r3, #0]
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	40da      	lsrs	r2, r3
 8015d24:	1e13      	subs	r3, r2, #0
 8015d26:	d000      	beq.n	8015d2a <HAL_GPIO_Init+0x2d2>
 8015d28:	e6a2      	b.n	8015a70 <HAL_GPIO_Init+0x18>
  }
}
 8015d2a:	46c0      	nop			@ (mov r8, r8)
 8015d2c:	46c0      	nop			@ (mov r8, r8)
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	b006      	add	sp, #24
 8015d32:	bd80      	pop	{r7, pc}
 8015d34:	40021000 	.word	0x40021000
 8015d38:	40010000 	.word	0x40010000
 8015d3c:	50000400 	.word	0x50000400
 8015d40:	50000800 	.word	0x50000800
 8015d44:	50000c00 	.word	0x50000c00
 8015d48:	50001000 	.word	0x50001000
 8015d4c:	50001c00 	.word	0x50001c00
 8015d50:	40010400 	.word	0x40010400

08015d54 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b084      	sub	sp, #16
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	000a      	movs	r2, r1
 8015d5e:	1cbb      	adds	r3, r7, #2
 8015d60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	691b      	ldr	r3, [r3, #16]
 8015d66:	1cba      	adds	r2, r7, #2
 8015d68:	8812      	ldrh	r2, [r2, #0]
 8015d6a:	4013      	ands	r3, r2
 8015d6c:	d004      	beq.n	8015d78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015d6e:	230f      	movs	r3, #15
 8015d70:	18fb      	adds	r3, r7, r3
 8015d72:	2201      	movs	r2, #1
 8015d74:	701a      	strb	r2, [r3, #0]
 8015d76:	e003      	b.n	8015d80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015d78:	230f      	movs	r3, #15
 8015d7a:	18fb      	adds	r3, r7, r3
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015d80:	230f      	movs	r3, #15
 8015d82:	18fb      	adds	r3, r7, r3
 8015d84:	781b      	ldrb	r3, [r3, #0]
}
 8015d86:	0018      	movs	r0, r3
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	b004      	add	sp, #16
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b082      	sub	sp, #8
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
 8015d96:	0008      	movs	r0, r1
 8015d98:	0011      	movs	r1, r2
 8015d9a:	1cbb      	adds	r3, r7, #2
 8015d9c:	1c02      	adds	r2, r0, #0
 8015d9e:	801a      	strh	r2, [r3, #0]
 8015da0:	1c7b      	adds	r3, r7, #1
 8015da2:	1c0a      	adds	r2, r1, #0
 8015da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015da6:	1c7b      	adds	r3, r7, #1
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d004      	beq.n	8015db8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015dae:	1cbb      	adds	r3, r7, #2
 8015db0:	881a      	ldrh	r2, [r3, #0]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015db6:	e003      	b.n	8015dc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015db8:	1cbb      	adds	r3, r7, #2
 8015dba:	881a      	ldrh	r2, [r3, #0]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015dc0:	46c0      	nop			@ (mov r8, r8)
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	b002      	add	sp, #8
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	0002      	movs	r2, r0
 8015dd0:	1dbb      	adds	r3, r7, #6
 8015dd2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015dd4:	4b09      	ldr	r3, [pc, #36]	@ (8015dfc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015dd6:	695b      	ldr	r3, [r3, #20]
 8015dd8:	1dba      	adds	r2, r7, #6
 8015dda:	8812      	ldrh	r2, [r2, #0]
 8015ddc:	4013      	ands	r3, r2
 8015dde:	d008      	beq.n	8015df2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015de0:	4b06      	ldr	r3, [pc, #24]	@ (8015dfc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015de2:	1dba      	adds	r2, r7, #6
 8015de4:	8812      	ldrh	r2, [r2, #0]
 8015de6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015de8:	1dbb      	adds	r3, r7, #6
 8015dea:	881b      	ldrh	r3, [r3, #0]
 8015dec:	0018      	movs	r0, r3
 8015dee:	f7f7 faab 	bl	800d348 <HAL_GPIO_EXTI_Callback>
  }
}
 8015df2:	46c0      	nop			@ (mov r8, r8)
 8015df4:	46bd      	mov	sp, r7
 8015df6:	b002      	add	sp, #8
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	46c0      	nop			@ (mov r8, r8)
 8015dfc:	40010400 	.word	0x40010400

08015e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b082      	sub	sp, #8
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d101      	bne.n	8015e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	e082      	b.n	8015f18 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2241      	movs	r2, #65	@ 0x41
 8015e16:	5c9b      	ldrb	r3, [r3, r2]
 8015e18:	b2db      	uxtb	r3, r3
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d107      	bne.n	8015e2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2240      	movs	r2, #64	@ 0x40
 8015e22:	2100      	movs	r1, #0
 8015e24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	0018      	movs	r0, r3
 8015e2a:	f7f6 fcad 	bl	800c788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2241      	movs	r2, #65	@ 0x41
 8015e32:	2124      	movs	r1, #36	@ 0x24
 8015e34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2101      	movs	r1, #1
 8015e42:	438a      	bics	r2, r1
 8015e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	685a      	ldr	r2, [r3, #4]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	4934      	ldr	r1, [pc, #208]	@ (8015f20 <HAL_I2C_Init+0x120>)
 8015e50:	400a      	ands	r2, r1
 8015e52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	689a      	ldr	r2, [r3, #8]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	4931      	ldr	r1, [pc, #196]	@ (8015f24 <HAL_I2C_Init+0x124>)
 8015e60:	400a      	ands	r2, r1
 8015e62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	d108      	bne.n	8015e7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	689a      	ldr	r2, [r3, #8]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2180      	movs	r1, #128	@ 0x80
 8015e76:	0209      	lsls	r1, r1, #8
 8015e78:	430a      	orrs	r2, r1
 8015e7a:	609a      	str	r2, [r3, #8]
 8015e7c:	e007      	b.n	8015e8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	689a      	ldr	r2, [r3, #8]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	2184      	movs	r1, #132	@ 0x84
 8015e88:	0209      	lsls	r1, r1, #8
 8015e8a:	430a      	orrs	r2, r1
 8015e8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	2b02      	cmp	r3, #2
 8015e94:	d104      	bne.n	8015ea0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2280      	movs	r2, #128	@ 0x80
 8015e9c:	0112      	lsls	r2, r2, #4
 8015e9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	685a      	ldr	r2, [r3, #4]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	491f      	ldr	r1, [pc, #124]	@ (8015f28 <HAL_I2C_Init+0x128>)
 8015eac:	430a      	orrs	r2, r1
 8015eae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	68da      	ldr	r2, [r3, #12]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	491a      	ldr	r1, [pc, #104]	@ (8015f24 <HAL_I2C_Init+0x124>)
 8015ebc:	400a      	ands	r2, r1
 8015ebe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	691a      	ldr	r2, [r3, #16]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	695b      	ldr	r3, [r3, #20]
 8015ec8:	431a      	orrs	r2, r3
 8015eca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	699b      	ldr	r3, [r3, #24]
 8015ed0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	430a      	orrs	r2, r1
 8015ed8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	69d9      	ldr	r1, [r3, #28]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6a1a      	ldr	r2, [r3, #32]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	430a      	orrs	r2, r1
 8015ee8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	681a      	ldr	r2, [r3, #0]
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	430a      	orrs	r2, r1
 8015ef8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2241      	movs	r2, #65	@ 0x41
 8015f04:	2120      	movs	r1, #32
 8015f06:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2242      	movs	r2, #66	@ 0x42
 8015f12:	2100      	movs	r1, #0
 8015f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015f16:	2300      	movs	r3, #0
}
 8015f18:	0018      	movs	r0, r3
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	b002      	add	sp, #8
 8015f1e:	bd80      	pop	{r7, pc}
 8015f20:	f0ffffff 	.word	0xf0ffffff
 8015f24:	ffff7fff 	.word	0xffff7fff
 8015f28:	02008000 	.word	0x02008000

08015f2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015f2c:	b590      	push	{r4, r7, lr}
 8015f2e:	b089      	sub	sp, #36	@ 0x24
 8015f30:	af02      	add	r7, sp, #8
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	0008      	movs	r0, r1
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	0019      	movs	r1, r3
 8015f3a:	230a      	movs	r3, #10
 8015f3c:	18fb      	adds	r3, r7, r3
 8015f3e:	1c02      	adds	r2, r0, #0
 8015f40:	801a      	strh	r2, [r3, #0]
 8015f42:	2308      	movs	r3, #8
 8015f44:	18fb      	adds	r3, r7, r3
 8015f46:	1c0a      	adds	r2, r1, #0
 8015f48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	2241      	movs	r2, #65	@ 0x41
 8015f4e:	5c9b      	ldrb	r3, [r3, r2]
 8015f50:	b2db      	uxtb	r3, r3
 8015f52:	2b20      	cmp	r3, #32
 8015f54:	d000      	beq.n	8015f58 <HAL_I2C_Master_Transmit+0x2c>
 8015f56:	e0e7      	b.n	8016128 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	2240      	movs	r2, #64	@ 0x40
 8015f5c:	5c9b      	ldrb	r3, [r3, r2]
 8015f5e:	2b01      	cmp	r3, #1
 8015f60:	d101      	bne.n	8015f66 <HAL_I2C_Master_Transmit+0x3a>
 8015f62:	2302      	movs	r3, #2
 8015f64:	e0e1      	b.n	801612a <HAL_I2C_Master_Transmit+0x1fe>
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2240      	movs	r2, #64	@ 0x40
 8015f6a:	2101      	movs	r1, #1
 8015f6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f6e:	f7fe fca7 	bl	80148c0 <HAL_GetTick>
 8015f72:	0003      	movs	r3, r0
 8015f74:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f76:	2380      	movs	r3, #128	@ 0x80
 8015f78:	0219      	lsls	r1, r3, #8
 8015f7a:	68f8      	ldr	r0, [r7, #12]
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	2319      	movs	r3, #25
 8015f82:	2201      	movs	r2, #1
 8015f84:	f002 fb34 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8015f88:	1e03      	subs	r3, r0, #0
 8015f8a:	d001      	beq.n	8015f90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e0cc      	b.n	801612a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2241      	movs	r2, #65	@ 0x41
 8015f94:	2121      	movs	r1, #33	@ 0x21
 8015f96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	2242      	movs	r2, #66	@ 0x42
 8015f9c:	2110      	movs	r1, #16
 8015f9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	2208      	movs	r2, #8
 8015fb0:	18ba      	adds	r2, r7, r2
 8015fb2:	8812      	ldrh	r2, [r2, #0]
 8015fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	2bff      	cmp	r3, #255	@ 0xff
 8015fc4:	d911      	bls.n	8015fea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	22ff      	movs	r2, #255	@ 0xff
 8015fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	2380      	movs	r3, #128	@ 0x80
 8015fd4:	045c      	lsls	r4, r3, #17
 8015fd6:	230a      	movs	r3, #10
 8015fd8:	18fb      	adds	r3, r7, r3
 8015fda:	8819      	ldrh	r1, [r3, #0]
 8015fdc:	68f8      	ldr	r0, [r7, #12]
 8015fde:	4b55      	ldr	r3, [pc, #340]	@ (8016134 <HAL_I2C_Master_Transmit+0x208>)
 8015fe0:	9300      	str	r3, [sp, #0]
 8015fe2:	0023      	movs	r3, r4
 8015fe4:	f002 fd56 	bl	8018a94 <I2C_TransferConfig>
 8015fe8:	e075      	b.n	80160d6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fee:	b29a      	uxth	r2, r3
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ff8:	b2da      	uxtb	r2, r3
 8015ffa:	2380      	movs	r3, #128	@ 0x80
 8015ffc:	049c      	lsls	r4, r3, #18
 8015ffe:	230a      	movs	r3, #10
 8016000:	18fb      	adds	r3, r7, r3
 8016002:	8819      	ldrh	r1, [r3, #0]
 8016004:	68f8      	ldr	r0, [r7, #12]
 8016006:	4b4b      	ldr	r3, [pc, #300]	@ (8016134 <HAL_I2C_Master_Transmit+0x208>)
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	0023      	movs	r3, r4
 801600c:	f002 fd42 	bl	8018a94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016010:	e061      	b.n	80160d6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016012:	697a      	ldr	r2, [r7, #20]
 8016014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	0018      	movs	r0, r3
 801601a:	f002 fb37 	bl	801868c <I2C_WaitOnTXISFlagUntilTimeout>
 801601e:	1e03      	subs	r3, r0, #0
 8016020:	d001      	beq.n	8016026 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8016022:	2301      	movs	r3, #1
 8016024:	e081      	b.n	801612a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801602a:	781a      	ldrb	r2, [r3, #0]
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016036:	1c5a      	adds	r2, r3, #1
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016040:	b29b      	uxth	r3, r3
 8016042:	3b01      	subs	r3, #1
 8016044:	b29a      	uxth	r2, r3
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801604e:	3b01      	subs	r3, #1
 8016050:	b29a      	uxth	r2, r3
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801605a:	b29b      	uxth	r3, r3
 801605c:	2b00      	cmp	r3, #0
 801605e:	d03a      	beq.n	80160d6 <HAL_I2C_Master_Transmit+0x1aa>
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016064:	2b00      	cmp	r3, #0
 8016066:	d136      	bne.n	80160d6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	0013      	movs	r3, r2
 8016072:	2200      	movs	r2, #0
 8016074:	2180      	movs	r1, #128	@ 0x80
 8016076:	f002 fabb 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 801607a:	1e03      	subs	r3, r0, #0
 801607c:	d001      	beq.n	8016082 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801607e:	2301      	movs	r3, #1
 8016080:	e053      	b.n	801612a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016086:	b29b      	uxth	r3, r3
 8016088:	2bff      	cmp	r3, #255	@ 0xff
 801608a:	d911      	bls.n	80160b0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	22ff      	movs	r2, #255	@ 0xff
 8016090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016096:	b2da      	uxtb	r2, r3
 8016098:	2380      	movs	r3, #128	@ 0x80
 801609a:	045c      	lsls	r4, r3, #17
 801609c:	230a      	movs	r3, #10
 801609e:	18fb      	adds	r3, r7, r3
 80160a0:	8819      	ldrh	r1, [r3, #0]
 80160a2:	68f8      	ldr	r0, [r7, #12]
 80160a4:	2300      	movs	r3, #0
 80160a6:	9300      	str	r3, [sp, #0]
 80160a8:	0023      	movs	r3, r4
 80160aa:	f002 fcf3 	bl	8018a94 <I2C_TransferConfig>
 80160ae:	e012      	b.n	80160d6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160be:	b2da      	uxtb	r2, r3
 80160c0:	2380      	movs	r3, #128	@ 0x80
 80160c2:	049c      	lsls	r4, r3, #18
 80160c4:	230a      	movs	r3, #10
 80160c6:	18fb      	adds	r3, r7, r3
 80160c8:	8819      	ldrh	r1, [r3, #0]
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	2300      	movs	r3, #0
 80160ce:	9300      	str	r3, [sp, #0]
 80160d0:	0023      	movs	r3, r4
 80160d2:	f002 fcdf 	bl	8018a94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160da:	b29b      	uxth	r3, r3
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d198      	bne.n	8016012 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80160e0:	697a      	ldr	r2, [r7, #20]
 80160e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	0018      	movs	r0, r3
 80160e8:	f002 fb16 	bl	8018718 <I2C_WaitOnSTOPFlagUntilTimeout>
 80160ec:	1e03      	subs	r3, r0, #0
 80160ee:	d001      	beq.n	80160f4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80160f0:	2301      	movs	r3, #1
 80160f2:	e01a      	b.n	801612a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	2220      	movs	r2, #32
 80160fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	685a      	ldr	r2, [r3, #4]
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	490c      	ldr	r1, [pc, #48]	@ (8016138 <HAL_I2C_Master_Transmit+0x20c>)
 8016108:	400a      	ands	r2, r1
 801610a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	2241      	movs	r2, #65	@ 0x41
 8016110:	2120      	movs	r1, #32
 8016112:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	2242      	movs	r2, #66	@ 0x42
 8016118:	2100      	movs	r1, #0
 801611a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2240      	movs	r2, #64	@ 0x40
 8016120:	2100      	movs	r1, #0
 8016122:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016124:	2300      	movs	r3, #0
 8016126:	e000      	b.n	801612a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8016128:	2302      	movs	r3, #2
  }
}
 801612a:	0018      	movs	r0, r3
 801612c:	46bd      	mov	sp, r7
 801612e:	b007      	add	sp, #28
 8016130:	bd90      	pop	{r4, r7, pc}
 8016132:	46c0      	nop			@ (mov r8, r8)
 8016134:	80002000 	.word	0x80002000
 8016138:	fe00e800 	.word	0xfe00e800

0801613c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801613c:	b590      	push	{r4, r7, lr}
 801613e:	b089      	sub	sp, #36	@ 0x24
 8016140:	af02      	add	r7, sp, #8
 8016142:	60f8      	str	r0, [r7, #12]
 8016144:	0008      	movs	r0, r1
 8016146:	607a      	str	r2, [r7, #4]
 8016148:	0019      	movs	r1, r3
 801614a:	230a      	movs	r3, #10
 801614c:	18fb      	adds	r3, r7, r3
 801614e:	1c02      	adds	r2, r0, #0
 8016150:	801a      	strh	r2, [r3, #0]
 8016152:	2308      	movs	r3, #8
 8016154:	18fb      	adds	r3, r7, r3
 8016156:	1c0a      	adds	r2, r1, #0
 8016158:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	2241      	movs	r2, #65	@ 0x41
 801615e:	5c9b      	ldrb	r3, [r3, r2]
 8016160:	b2db      	uxtb	r3, r3
 8016162:	2b20      	cmp	r3, #32
 8016164:	d000      	beq.n	8016168 <HAL_I2C_Master_Receive+0x2c>
 8016166:	e0e8      	b.n	801633a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	2240      	movs	r2, #64	@ 0x40
 801616c:	5c9b      	ldrb	r3, [r3, r2]
 801616e:	2b01      	cmp	r3, #1
 8016170:	d101      	bne.n	8016176 <HAL_I2C_Master_Receive+0x3a>
 8016172:	2302      	movs	r3, #2
 8016174:	e0e2      	b.n	801633c <HAL_I2C_Master_Receive+0x200>
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2240      	movs	r2, #64	@ 0x40
 801617a:	2101      	movs	r1, #1
 801617c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801617e:	f7fe fb9f 	bl	80148c0 <HAL_GetTick>
 8016182:	0003      	movs	r3, r0
 8016184:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016186:	2380      	movs	r3, #128	@ 0x80
 8016188:	0219      	lsls	r1, r3, #8
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	2319      	movs	r3, #25
 8016192:	2201      	movs	r2, #1
 8016194:	f002 fa2c 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8016198:	1e03      	subs	r3, r0, #0
 801619a:	d001      	beq.n	80161a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 801619c:	2301      	movs	r3, #1
 801619e:	e0cd      	b.n	801633c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2241      	movs	r2, #65	@ 0x41
 80161a4:	2122      	movs	r1, #34	@ 0x22
 80161a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2242      	movs	r2, #66	@ 0x42
 80161ac:	2110      	movs	r1, #16
 80161ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	2200      	movs	r2, #0
 80161b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2208      	movs	r2, #8
 80161c0:	18ba      	adds	r2, r7, r2
 80161c2:	8812      	ldrh	r2, [r2, #0]
 80161c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2200      	movs	r2, #0
 80161ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	2bff      	cmp	r3, #255	@ 0xff
 80161d4:	d911      	bls.n	80161fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	22ff      	movs	r2, #255	@ 0xff
 80161da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161e0:	b2da      	uxtb	r2, r3
 80161e2:	2380      	movs	r3, #128	@ 0x80
 80161e4:	045c      	lsls	r4, r3, #17
 80161e6:	230a      	movs	r3, #10
 80161e8:	18fb      	adds	r3, r7, r3
 80161ea:	8819      	ldrh	r1, [r3, #0]
 80161ec:	68f8      	ldr	r0, [r7, #12]
 80161ee:	4b55      	ldr	r3, [pc, #340]	@ (8016344 <HAL_I2C_Master_Receive+0x208>)
 80161f0:	9300      	str	r3, [sp, #0]
 80161f2:	0023      	movs	r3, r4
 80161f4:	f002 fc4e 	bl	8018a94 <I2C_TransferConfig>
 80161f8:	e076      	b.n	80162e8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161fe:	b29a      	uxth	r2, r3
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016208:	b2da      	uxtb	r2, r3
 801620a:	2380      	movs	r3, #128	@ 0x80
 801620c:	049c      	lsls	r4, r3, #18
 801620e:	230a      	movs	r3, #10
 8016210:	18fb      	adds	r3, r7, r3
 8016212:	8819      	ldrh	r1, [r3, #0]
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	4b4b      	ldr	r3, [pc, #300]	@ (8016344 <HAL_I2C_Master_Receive+0x208>)
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	0023      	movs	r3, r4
 801621c:	f002 fc3a 	bl	8018a94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016220:	e062      	b.n	80162e8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016222:	697a      	ldr	r2, [r7, #20]
 8016224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	0018      	movs	r0, r3
 801622a:	f002 fab9 	bl	80187a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 801622e:	1e03      	subs	r3, r0, #0
 8016230:	d001      	beq.n	8016236 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8016232:	2301      	movs	r3, #1
 8016234:	e082      	b.n	801633c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016240:	b2d2      	uxtb	r2, r2
 8016242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016248:	1c5a      	adds	r2, r3, #1
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016252:	3b01      	subs	r3, #1
 8016254:	b29a      	uxth	r2, r3
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801625e:	b29b      	uxth	r3, r3
 8016260:	3b01      	subs	r3, #1
 8016262:	b29a      	uxth	r2, r3
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801626c:	b29b      	uxth	r3, r3
 801626e:	2b00      	cmp	r3, #0
 8016270:	d03a      	beq.n	80162e8 <HAL_I2C_Master_Receive+0x1ac>
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016276:	2b00      	cmp	r3, #0
 8016278:	d136      	bne.n	80162e8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801627a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801627c:	68f8      	ldr	r0, [r7, #12]
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	9300      	str	r3, [sp, #0]
 8016282:	0013      	movs	r3, r2
 8016284:	2200      	movs	r2, #0
 8016286:	2180      	movs	r1, #128	@ 0x80
 8016288:	f002 f9b2 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 801628c:	1e03      	subs	r3, r0, #0
 801628e:	d001      	beq.n	8016294 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8016290:	2301      	movs	r3, #1
 8016292:	e053      	b.n	801633c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016298:	b29b      	uxth	r3, r3
 801629a:	2bff      	cmp	r3, #255	@ 0xff
 801629c:	d911      	bls.n	80162c2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	22ff      	movs	r2, #255	@ 0xff
 80162a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162a8:	b2da      	uxtb	r2, r3
 80162aa:	2380      	movs	r3, #128	@ 0x80
 80162ac:	045c      	lsls	r4, r3, #17
 80162ae:	230a      	movs	r3, #10
 80162b0:	18fb      	adds	r3, r7, r3
 80162b2:	8819      	ldrh	r1, [r3, #0]
 80162b4:	68f8      	ldr	r0, [r7, #12]
 80162b6:	2300      	movs	r3, #0
 80162b8:	9300      	str	r3, [sp, #0]
 80162ba:	0023      	movs	r3, r4
 80162bc:	f002 fbea 	bl	8018a94 <I2C_TransferConfig>
 80162c0:	e012      	b.n	80162e8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162c6:	b29a      	uxth	r2, r3
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162d0:	b2da      	uxtb	r2, r3
 80162d2:	2380      	movs	r3, #128	@ 0x80
 80162d4:	049c      	lsls	r4, r3, #18
 80162d6:	230a      	movs	r3, #10
 80162d8:	18fb      	adds	r3, r7, r3
 80162da:	8819      	ldrh	r1, [r3, #0]
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	2300      	movs	r3, #0
 80162e0:	9300      	str	r3, [sp, #0]
 80162e2:	0023      	movs	r3, r4
 80162e4:	f002 fbd6 	bl	8018a94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d197      	bne.n	8016222 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80162f2:	697a      	ldr	r2, [r7, #20]
 80162f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	0018      	movs	r0, r3
 80162fa:	f002 fa0d 	bl	8018718 <I2C_WaitOnSTOPFlagUntilTimeout>
 80162fe:	1e03      	subs	r3, r0, #0
 8016300:	d001      	beq.n	8016306 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8016302:	2301      	movs	r3, #1
 8016304:	e01a      	b.n	801633c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	2220      	movs	r2, #32
 801630c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	685a      	ldr	r2, [r3, #4]
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	490b      	ldr	r1, [pc, #44]	@ (8016348 <HAL_I2C_Master_Receive+0x20c>)
 801631a:	400a      	ands	r2, r1
 801631c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	2241      	movs	r2, #65	@ 0x41
 8016322:	2120      	movs	r1, #32
 8016324:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2242      	movs	r2, #66	@ 0x42
 801632a:	2100      	movs	r1, #0
 801632c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2240      	movs	r2, #64	@ 0x40
 8016332:	2100      	movs	r1, #0
 8016334:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016336:	2300      	movs	r3, #0
 8016338:	e000      	b.n	801633c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801633a:	2302      	movs	r3, #2
  }
}
 801633c:	0018      	movs	r0, r3
 801633e:	46bd      	mov	sp, r7
 8016340:	b007      	add	sp, #28
 8016342:	bd90      	pop	{r4, r7, pc}
 8016344:	80002400 	.word	0x80002400
 8016348:	fe00e800 	.word	0xfe00e800

0801634c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801634c:	b5b0      	push	{r4, r5, r7, lr}
 801634e:	b088      	sub	sp, #32
 8016350:	af02      	add	r7, sp, #8
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	0008      	movs	r0, r1
 8016356:	607a      	str	r2, [r7, #4]
 8016358:	0019      	movs	r1, r3
 801635a:	230a      	movs	r3, #10
 801635c:	18fb      	adds	r3, r7, r3
 801635e:	1c02      	adds	r2, r0, #0
 8016360:	801a      	strh	r2, [r3, #0]
 8016362:	2308      	movs	r3, #8
 8016364:	18fb      	adds	r3, r7, r3
 8016366:	1c0a      	adds	r2, r1, #0
 8016368:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2241      	movs	r2, #65	@ 0x41
 801636e:	5c9b      	ldrb	r3, [r3, r2]
 8016370:	b2db      	uxtb	r3, r3
 8016372:	2b20      	cmp	r3, #32
 8016374:	d000      	beq.n	8016378 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8016376:	e0dd      	b.n	8016534 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	699a      	ldr	r2, [r3, #24]
 801637e:	2380      	movs	r3, #128	@ 0x80
 8016380:	021b      	lsls	r3, r3, #8
 8016382:	401a      	ands	r2, r3
 8016384:	2380      	movs	r3, #128	@ 0x80
 8016386:	021b      	lsls	r3, r3, #8
 8016388:	429a      	cmp	r2, r3
 801638a:	d101      	bne.n	8016390 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 801638c:	2302      	movs	r3, #2
 801638e:	e0d2      	b.n	8016536 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	2240      	movs	r2, #64	@ 0x40
 8016394:	5c9b      	ldrb	r3, [r3, r2]
 8016396:	2b01      	cmp	r3, #1
 8016398:	d101      	bne.n	801639e <HAL_I2C_Master_Transmit_DMA+0x52>
 801639a:	2302      	movs	r3, #2
 801639c:	e0cb      	b.n	8016536 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	2240      	movs	r2, #64	@ 0x40
 80163a2:	2101      	movs	r1, #1
 80163a4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2241      	movs	r2, #65	@ 0x41
 80163aa:	2121      	movs	r1, #33	@ 0x21
 80163ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	2242      	movs	r2, #66	@ 0x42
 80163b2:	2110      	movs	r1, #16
 80163b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	2200      	movs	r2, #0
 80163ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	2208      	movs	r2, #8
 80163c6:	18ba      	adds	r2, r7, r2
 80163c8:	8812      	ldrh	r2, [r2, #0]
 80163ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	4a5c      	ldr	r2, [pc, #368]	@ (8016540 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80163d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	4a5b      	ldr	r2, [pc, #364]	@ (8016544 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80163d6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163dc:	b29b      	uxth	r3, r3
 80163de:	2bff      	cmp	r3, #255	@ 0xff
 80163e0:	d906      	bls.n	80163f0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	22ff      	movs	r2, #255	@ 0xff
 80163e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80163e8:	2380      	movs	r3, #128	@ 0x80
 80163ea:	045b      	lsls	r3, r3, #17
 80163ec:	617b      	str	r3, [r7, #20]
 80163ee:	e007      	b.n	8016400 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80163fa:	2380      	movs	r3, #128	@ 0x80
 80163fc:	049b      	lsls	r3, r3, #18
 80163fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016404:	2b00      	cmp	r3, #0
 8016406:	d100      	bne.n	801640a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8016408:	e078      	b.n	80164fc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801640e:	2b00      	cmp	r3, #0
 8016410:	d023      	beq.n	801645a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016416:	4a4c      	ldr	r2, [pc, #304]	@ (8016548 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8016418:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801641e:	4a4b      	ldr	r2, [pc, #300]	@ (801654c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8016420:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016426:	2200      	movs	r2, #0
 8016428:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801642e:	2200      	movs	r2, #0
 8016430:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016436:	6879      	ldr	r1, [r7, #4]
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	3328      	adds	r3, #40	@ 0x28
 801643e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016444:	2513      	movs	r5, #19
 8016446:	197c      	adds	r4, r7, r5
 8016448:	f7fe ff58 	bl	80152fc <HAL_DMA_Start_IT>
 801644c:	0003      	movs	r3, r0
 801644e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016450:	197b      	adds	r3, r7, r5
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d13d      	bne.n	80164d4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8016458:	e013      	b.n	8016482 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	2241      	movs	r2, #65	@ 0x41
 801645e:	2120      	movs	r1, #32
 8016460:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2242      	movs	r2, #66	@ 0x42
 8016466:	2100      	movs	r1, #0
 8016468:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801646e:	2280      	movs	r2, #128	@ 0x80
 8016470:	431a      	orrs	r2, r3
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	2240      	movs	r2, #64	@ 0x40
 801647a:	2100      	movs	r1, #0
 801647c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801647e:	2301      	movs	r3, #1
 8016480:	e059      	b.n	8016536 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016486:	b2da      	uxtb	r2, r3
 8016488:	697c      	ldr	r4, [r7, #20]
 801648a:	230a      	movs	r3, #10
 801648c:	18fb      	adds	r3, r7, r3
 801648e:	8819      	ldrh	r1, [r3, #0]
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	4b2f      	ldr	r3, [pc, #188]	@ (8016550 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016494:	9300      	str	r3, [sp, #0]
 8016496:	0023      	movs	r3, r4
 8016498:	f002 fafc 	bl	8018a94 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164a0:	b29a      	uxth	r2, r3
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164a6:	1ad3      	subs	r3, r2, r3
 80164a8:	b29a      	uxth	r2, r3
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2240      	movs	r2, #64	@ 0x40
 80164b2:	2100      	movs	r1, #0
 80164b4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	2110      	movs	r1, #16
 80164ba:	0018      	movs	r0, r3
 80164bc:	f002 fb24 	bl	8018b08 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	2180      	movs	r1, #128	@ 0x80
 80164cc:	01c9      	lsls	r1, r1, #7
 80164ce:	430a      	orrs	r2, r1
 80164d0:	601a      	str	r2, [r3, #0]
 80164d2:	e02d      	b.n	8016530 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2241      	movs	r2, #65	@ 0x41
 80164d8:	2120      	movs	r1, #32
 80164da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	2242      	movs	r2, #66	@ 0x42
 80164e0:	2100      	movs	r1, #0
 80164e2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164e8:	2210      	movs	r2, #16
 80164ea:	431a      	orrs	r2, r3
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2240      	movs	r2, #64	@ 0x40
 80164f4:	2100      	movs	r1, #0
 80164f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80164f8:	2301      	movs	r3, #1
 80164fa:	e01c      	b.n	8016536 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	4a15      	ldr	r2, [pc, #84]	@ (8016554 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8016500:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016506:	b2da      	uxtb	r2, r3
 8016508:	2380      	movs	r3, #128	@ 0x80
 801650a:	049c      	lsls	r4, r3, #18
 801650c:	230a      	movs	r3, #10
 801650e:	18fb      	adds	r3, r7, r3
 8016510:	8819      	ldrh	r1, [r3, #0]
 8016512:	68f8      	ldr	r0, [r7, #12]
 8016514:	4b0e      	ldr	r3, [pc, #56]	@ (8016550 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016516:	9300      	str	r3, [sp, #0]
 8016518:	0023      	movs	r3, r4
 801651a:	f002 fabb 	bl	8018a94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2240      	movs	r2, #64	@ 0x40
 8016522:	2100      	movs	r1, #0
 8016524:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2101      	movs	r1, #1
 801652a:	0018      	movs	r0, r3
 801652c:	f002 faec 	bl	8018b08 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016530:	2300      	movs	r3, #0
 8016532:	e000      	b.n	8016536 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016534:	2302      	movs	r3, #2
  }
}
 8016536:	0018      	movs	r0, r3
 8016538:	46bd      	mov	sp, r7
 801653a:	b006      	add	sp, #24
 801653c:	bdb0      	pop	{r4, r5, r7, pc}
 801653e:	46c0      	nop			@ (mov r8, r8)
 8016540:	ffff0000 	.word	0xffff0000
 8016544:	0801727d 	.word	0x0801727d
 8016548:	08018441 	.word	0x08018441
 801654c:	08018581 	.word	0x08018581
 8016550:	80002000 	.word	0x80002000
 8016554:	08016dd1 	.word	0x08016dd1

08016558 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8016558:	b5b0      	push	{r4, r5, r7, lr}
 801655a:	b088      	sub	sp, #32
 801655c:	af02      	add	r7, sp, #8
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	0008      	movs	r0, r1
 8016562:	607a      	str	r2, [r7, #4]
 8016564:	0019      	movs	r1, r3
 8016566:	230a      	movs	r3, #10
 8016568:	18fb      	adds	r3, r7, r3
 801656a:	1c02      	adds	r2, r0, #0
 801656c:	801a      	strh	r2, [r3, #0]
 801656e:	2308      	movs	r3, #8
 8016570:	18fb      	adds	r3, r7, r3
 8016572:	1c0a      	adds	r2, r1, #0
 8016574:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	2241      	movs	r2, #65	@ 0x41
 801657a:	5c9b      	ldrb	r3, [r3, r2]
 801657c:	b2db      	uxtb	r3, r3
 801657e:	2b20      	cmp	r3, #32
 8016580:	d000      	beq.n	8016584 <HAL_I2C_Master_Receive_DMA+0x2c>
 8016582:	e0dd      	b.n	8016740 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	699a      	ldr	r2, [r3, #24]
 801658a:	2380      	movs	r3, #128	@ 0x80
 801658c:	021b      	lsls	r3, r3, #8
 801658e:	401a      	ands	r2, r3
 8016590:	2380      	movs	r3, #128	@ 0x80
 8016592:	021b      	lsls	r3, r3, #8
 8016594:	429a      	cmp	r2, r3
 8016596:	d101      	bne.n	801659c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016598:	2302      	movs	r3, #2
 801659a:	e0d2      	b.n	8016742 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2240      	movs	r2, #64	@ 0x40
 80165a0:	5c9b      	ldrb	r3, [r3, r2]
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	d101      	bne.n	80165aa <HAL_I2C_Master_Receive_DMA+0x52>
 80165a6:	2302      	movs	r3, #2
 80165a8:	e0cb      	b.n	8016742 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2240      	movs	r2, #64	@ 0x40
 80165ae:	2101      	movs	r1, #1
 80165b0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	2241      	movs	r2, #65	@ 0x41
 80165b6:	2122      	movs	r1, #34	@ 0x22
 80165b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	2242      	movs	r2, #66	@ 0x42
 80165be:	2110      	movs	r1, #16
 80165c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	2200      	movs	r2, #0
 80165c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	2208      	movs	r2, #8
 80165d2:	18ba      	adds	r2, r7, r2
 80165d4:	8812      	ldrh	r2, [r2, #0]
 80165d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	4a5c      	ldr	r2, [pc, #368]	@ (801674c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80165dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	4a5b      	ldr	r2, [pc, #364]	@ (8016750 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80165e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	2bff      	cmp	r3, #255	@ 0xff
 80165ec:	d906      	bls.n	80165fc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	22ff      	movs	r2, #255	@ 0xff
 80165f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80165f4:	2380      	movs	r3, #128	@ 0x80
 80165f6:	045b      	lsls	r3, r3, #17
 80165f8:	617b      	str	r3, [r7, #20]
 80165fa:	e007      	b.n	801660c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016600:	b29a      	uxth	r2, r3
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8016606:	2380      	movs	r3, #128	@ 0x80
 8016608:	049b      	lsls	r3, r3, #18
 801660a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016610:	2b00      	cmp	r3, #0
 8016612:	d100      	bne.n	8016616 <HAL_I2C_Master_Receive_DMA+0xbe>
 8016614:	e078      	b.n	8016708 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801661a:	2b00      	cmp	r3, #0
 801661c:	d023      	beq.n	8016666 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016622:	4a4c      	ldr	r2, [pc, #304]	@ (8016754 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8016624:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801662a:	4a4b      	ldr	r2, [pc, #300]	@ (8016758 <HAL_I2C_Master_Receive_DMA+0x200>)
 801662c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016632:	2200      	movs	r2, #0
 8016634:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801663a:	2200      	movs	r2, #0
 801663c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	3324      	adds	r3, #36	@ 0x24
 8016648:	0019      	movs	r1, r3
 801664a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016650:	2513      	movs	r5, #19
 8016652:	197c      	adds	r4, r7, r5
 8016654:	f7fe fe52 	bl	80152fc <HAL_DMA_Start_IT>
 8016658:	0003      	movs	r3, r0
 801665a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801665c:	197b      	adds	r3, r7, r5
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d13d      	bne.n	80166e0 <HAL_I2C_Master_Receive_DMA+0x188>
 8016664:	e013      	b.n	801668e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2241      	movs	r2, #65	@ 0x41
 801666a:	2120      	movs	r1, #32
 801666c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2242      	movs	r2, #66	@ 0x42
 8016672:	2100      	movs	r1, #0
 8016674:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801667a:	2280      	movs	r2, #128	@ 0x80
 801667c:	431a      	orrs	r2, r3
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	2240      	movs	r2, #64	@ 0x40
 8016686:	2100      	movs	r1, #0
 8016688:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801668a:	2301      	movs	r3, #1
 801668c:	e059      	b.n	8016742 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016692:	b2da      	uxtb	r2, r3
 8016694:	697c      	ldr	r4, [r7, #20]
 8016696:	230a      	movs	r3, #10
 8016698:	18fb      	adds	r3, r7, r3
 801669a:	8819      	ldrh	r1, [r3, #0]
 801669c:	68f8      	ldr	r0, [r7, #12]
 801669e:	4b2f      	ldr	r3, [pc, #188]	@ (801675c <HAL_I2C_Master_Receive_DMA+0x204>)
 80166a0:	9300      	str	r3, [sp, #0]
 80166a2:	0023      	movs	r3, r4
 80166a4:	f002 f9f6 	bl	8018a94 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166ac:	b29a      	uxth	r2, r3
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	2240      	movs	r2, #64	@ 0x40
 80166be:	2100      	movs	r1, #0
 80166c0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	2110      	movs	r1, #16
 80166c6:	0018      	movs	r0, r3
 80166c8:	f002 fa1e 	bl	8018b08 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	2180      	movs	r1, #128	@ 0x80
 80166d8:	0209      	lsls	r1, r1, #8
 80166da:	430a      	orrs	r2, r1
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	e02d      	b.n	801673c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	2241      	movs	r2, #65	@ 0x41
 80166e4:	2120      	movs	r1, #32
 80166e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	2242      	movs	r2, #66	@ 0x42
 80166ec:	2100      	movs	r1, #0
 80166ee:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166f4:	2210      	movs	r2, #16
 80166f6:	431a      	orrs	r2, r3
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	2240      	movs	r2, #64	@ 0x40
 8016700:	2100      	movs	r1, #0
 8016702:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016704:	2301      	movs	r3, #1
 8016706:	e01c      	b.n	8016742 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	4a15      	ldr	r2, [pc, #84]	@ (8016760 <HAL_I2C_Master_Receive_DMA+0x208>)
 801670c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016712:	b2da      	uxtb	r2, r3
 8016714:	2380      	movs	r3, #128	@ 0x80
 8016716:	049c      	lsls	r4, r3, #18
 8016718:	230a      	movs	r3, #10
 801671a:	18fb      	adds	r3, r7, r3
 801671c:	8819      	ldrh	r1, [r3, #0]
 801671e:	68f8      	ldr	r0, [r7, #12]
 8016720:	4b0e      	ldr	r3, [pc, #56]	@ (801675c <HAL_I2C_Master_Receive_DMA+0x204>)
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	0023      	movs	r3, r4
 8016726:	f002 f9b5 	bl	8018a94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	2240      	movs	r2, #64	@ 0x40
 801672e:	2100      	movs	r1, #0
 8016730:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	2101      	movs	r1, #1
 8016736:	0018      	movs	r0, r3
 8016738:	f002 f9e6 	bl	8018b08 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801673c:	2300      	movs	r3, #0
 801673e:	e000      	b.n	8016742 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016740:	2302      	movs	r3, #2
  }
}
 8016742:	0018      	movs	r0, r3
 8016744:	46bd      	mov	sp, r7
 8016746:	b006      	add	sp, #24
 8016748:	bdb0      	pop	{r4, r5, r7, pc}
 801674a:	46c0      	nop			@ (mov r8, r8)
 801674c:	ffff0000 	.word	0xffff0000
 8016750:	0801727d 	.word	0x0801727d
 8016754:	080184e1 	.word	0x080184e1
 8016758:	08018581 	.word	0x08018581
 801675c:	80002400 	.word	0x80002400
 8016760:	08016dd1 	.word	0x08016dd1

08016764 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016764:	b590      	push	{r4, r7, lr}
 8016766:	b089      	sub	sp, #36	@ 0x24
 8016768:	af02      	add	r7, sp, #8
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	000c      	movs	r4, r1
 801676e:	0010      	movs	r0, r2
 8016770:	0019      	movs	r1, r3
 8016772:	230a      	movs	r3, #10
 8016774:	18fb      	adds	r3, r7, r3
 8016776:	1c22      	adds	r2, r4, #0
 8016778:	801a      	strh	r2, [r3, #0]
 801677a:	2308      	movs	r3, #8
 801677c:	18fb      	adds	r3, r7, r3
 801677e:	1c02      	adds	r2, r0, #0
 8016780:	801a      	strh	r2, [r3, #0]
 8016782:	1dbb      	adds	r3, r7, #6
 8016784:	1c0a      	adds	r2, r1, #0
 8016786:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	2241      	movs	r2, #65	@ 0x41
 801678c:	5c9b      	ldrb	r3, [r3, r2]
 801678e:	b2db      	uxtb	r3, r3
 8016790:	2b20      	cmp	r3, #32
 8016792:	d000      	beq.n	8016796 <HAL_I2C_Mem_Write+0x32>
 8016794:	e10c      	b.n	80169b0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016798:	2b00      	cmp	r3, #0
 801679a:	d004      	beq.n	80167a6 <HAL_I2C_Mem_Write+0x42>
 801679c:	232c      	movs	r3, #44	@ 0x2c
 801679e:	18fb      	adds	r3, r7, r3
 80167a0:	881b      	ldrh	r3, [r3, #0]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d105      	bne.n	80167b2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2280      	movs	r2, #128	@ 0x80
 80167aa:	0092      	lsls	r2, r2, #2
 80167ac:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80167ae:	2301      	movs	r3, #1
 80167b0:	e0ff      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	2240      	movs	r2, #64	@ 0x40
 80167b6:	5c9b      	ldrb	r3, [r3, r2]
 80167b8:	2b01      	cmp	r3, #1
 80167ba:	d101      	bne.n	80167c0 <HAL_I2C_Mem_Write+0x5c>
 80167bc:	2302      	movs	r3, #2
 80167be:	e0f8      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	2240      	movs	r2, #64	@ 0x40
 80167c4:	2101      	movs	r1, #1
 80167c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80167c8:	f7fe f87a 	bl	80148c0 <HAL_GetTick>
 80167cc:	0003      	movs	r3, r0
 80167ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80167d0:	2380      	movs	r3, #128	@ 0x80
 80167d2:	0219      	lsls	r1, r3, #8
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	9300      	str	r3, [sp, #0]
 80167da:	2319      	movs	r3, #25
 80167dc:	2201      	movs	r2, #1
 80167de:	f001 ff07 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 80167e2:	1e03      	subs	r3, r0, #0
 80167e4:	d001      	beq.n	80167ea <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80167e6:	2301      	movs	r3, #1
 80167e8:	e0e3      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	2241      	movs	r2, #65	@ 0x41
 80167ee:	2121      	movs	r1, #33	@ 0x21
 80167f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	2242      	movs	r2, #66	@ 0x42
 80167f6:	2140      	movs	r1, #64	@ 0x40
 80167f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2200      	movs	r2, #0
 80167fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	222c      	movs	r2, #44	@ 0x2c
 801680a:	18ba      	adds	r2, r7, r2
 801680c:	8812      	ldrh	r2, [r2, #0]
 801680e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2200      	movs	r2, #0
 8016814:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016816:	1dbb      	adds	r3, r7, #6
 8016818:	881c      	ldrh	r4, [r3, #0]
 801681a:	2308      	movs	r3, #8
 801681c:	18fb      	adds	r3, r7, r3
 801681e:	881a      	ldrh	r2, [r3, #0]
 8016820:	230a      	movs	r3, #10
 8016822:	18fb      	adds	r3, r7, r3
 8016824:	8819      	ldrh	r1, [r3, #0]
 8016826:	68f8      	ldr	r0, [r7, #12]
 8016828:	697b      	ldr	r3, [r7, #20]
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801682e:	9300      	str	r3, [sp, #0]
 8016830:	0023      	movs	r3, r4
 8016832:	f001 f855 	bl	80178e0 <I2C_RequestMemoryWrite>
 8016836:	1e03      	subs	r3, r0, #0
 8016838:	d005      	beq.n	8016846 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2240      	movs	r2, #64	@ 0x40
 801683e:	2100      	movs	r1, #0
 8016840:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016842:	2301      	movs	r3, #1
 8016844:	e0b5      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801684a:	b29b      	uxth	r3, r3
 801684c:	2bff      	cmp	r3, #255	@ 0xff
 801684e:	d911      	bls.n	8016874 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	22ff      	movs	r2, #255	@ 0xff
 8016854:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801685a:	b2da      	uxtb	r2, r3
 801685c:	2380      	movs	r3, #128	@ 0x80
 801685e:	045c      	lsls	r4, r3, #17
 8016860:	230a      	movs	r3, #10
 8016862:	18fb      	adds	r3, r7, r3
 8016864:	8819      	ldrh	r1, [r3, #0]
 8016866:	68f8      	ldr	r0, [r7, #12]
 8016868:	2300      	movs	r3, #0
 801686a:	9300      	str	r3, [sp, #0]
 801686c:	0023      	movs	r3, r4
 801686e:	f002 f911 	bl	8018a94 <I2C_TransferConfig>
 8016872:	e012      	b.n	801689a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016878:	b29a      	uxth	r2, r3
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016882:	b2da      	uxtb	r2, r3
 8016884:	2380      	movs	r3, #128	@ 0x80
 8016886:	049c      	lsls	r4, r3, #18
 8016888:	230a      	movs	r3, #10
 801688a:	18fb      	adds	r3, r7, r3
 801688c:	8819      	ldrh	r1, [r3, #0]
 801688e:	68f8      	ldr	r0, [r7, #12]
 8016890:	2300      	movs	r3, #0
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	0023      	movs	r3, r4
 8016896:	f002 f8fd 	bl	8018a94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801689a:	697a      	ldr	r2, [r7, #20]
 801689c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	0018      	movs	r0, r3
 80168a2:	f001 fef3 	bl	801868c <I2C_WaitOnTXISFlagUntilTimeout>
 80168a6:	1e03      	subs	r3, r0, #0
 80168a8:	d001      	beq.n	80168ae <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	e081      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168b2:	781a      	ldrb	r2, [r3, #0]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168be:	1c5a      	adds	r2, r3, #1
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168c8:	b29b      	uxth	r3, r3
 80168ca:	3b01      	subs	r3, #1
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168d6:	3b01      	subs	r3, #1
 80168d8:	b29a      	uxth	r2, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d03a      	beq.n	801695e <HAL_I2C_Mem_Write+0x1fa>
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d136      	bne.n	801695e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80168f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	9300      	str	r3, [sp, #0]
 80168f8:	0013      	movs	r3, r2
 80168fa:	2200      	movs	r2, #0
 80168fc:	2180      	movs	r1, #128	@ 0x80
 80168fe:	f001 fe77 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8016902:	1e03      	subs	r3, r0, #0
 8016904:	d001      	beq.n	801690a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8016906:	2301      	movs	r3, #1
 8016908:	e053      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801690e:	b29b      	uxth	r3, r3
 8016910:	2bff      	cmp	r3, #255	@ 0xff
 8016912:	d911      	bls.n	8016938 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	22ff      	movs	r2, #255	@ 0xff
 8016918:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801691e:	b2da      	uxtb	r2, r3
 8016920:	2380      	movs	r3, #128	@ 0x80
 8016922:	045c      	lsls	r4, r3, #17
 8016924:	230a      	movs	r3, #10
 8016926:	18fb      	adds	r3, r7, r3
 8016928:	8819      	ldrh	r1, [r3, #0]
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	2300      	movs	r3, #0
 801692e:	9300      	str	r3, [sp, #0]
 8016930:	0023      	movs	r3, r4
 8016932:	f002 f8af 	bl	8018a94 <I2C_TransferConfig>
 8016936:	e012      	b.n	801695e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801693c:	b29a      	uxth	r2, r3
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016946:	b2da      	uxtb	r2, r3
 8016948:	2380      	movs	r3, #128	@ 0x80
 801694a:	049c      	lsls	r4, r3, #18
 801694c:	230a      	movs	r3, #10
 801694e:	18fb      	adds	r3, r7, r3
 8016950:	8819      	ldrh	r1, [r3, #0]
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	2300      	movs	r3, #0
 8016956:	9300      	str	r3, [sp, #0]
 8016958:	0023      	movs	r3, r4
 801695a:	f002 f89b 	bl	8018a94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016962:	b29b      	uxth	r3, r3
 8016964:	2b00      	cmp	r3, #0
 8016966:	d198      	bne.n	801689a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016968:	697a      	ldr	r2, [r7, #20]
 801696a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	0018      	movs	r0, r3
 8016970:	f001 fed2 	bl	8018718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016974:	1e03      	subs	r3, r0, #0
 8016976:	d001      	beq.n	801697c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8016978:	2301      	movs	r3, #1
 801697a:	e01a      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	2220      	movs	r2, #32
 8016982:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	685a      	ldr	r2, [r3, #4]
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	490b      	ldr	r1, [pc, #44]	@ (80169bc <HAL_I2C_Mem_Write+0x258>)
 8016990:	400a      	ands	r2, r1
 8016992:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2241      	movs	r2, #65	@ 0x41
 8016998:	2120      	movs	r1, #32
 801699a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2242      	movs	r2, #66	@ 0x42
 80169a0:	2100      	movs	r1, #0
 80169a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2240      	movs	r2, #64	@ 0x40
 80169a8:	2100      	movs	r1, #0
 80169aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80169ac:	2300      	movs	r3, #0
 80169ae:	e000      	b.n	80169b2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80169b0:	2302      	movs	r3, #2
  }
}
 80169b2:	0018      	movs	r0, r3
 80169b4:	46bd      	mov	sp, r7
 80169b6:	b007      	add	sp, #28
 80169b8:	bd90      	pop	{r4, r7, pc}
 80169ba:	46c0      	nop			@ (mov r8, r8)
 80169bc:	fe00e800 	.word	0xfe00e800

080169c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80169c0:	b590      	push	{r4, r7, lr}
 80169c2:	b089      	sub	sp, #36	@ 0x24
 80169c4:	af02      	add	r7, sp, #8
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	000c      	movs	r4, r1
 80169ca:	0010      	movs	r0, r2
 80169cc:	0019      	movs	r1, r3
 80169ce:	230a      	movs	r3, #10
 80169d0:	18fb      	adds	r3, r7, r3
 80169d2:	1c22      	adds	r2, r4, #0
 80169d4:	801a      	strh	r2, [r3, #0]
 80169d6:	2308      	movs	r3, #8
 80169d8:	18fb      	adds	r3, r7, r3
 80169da:	1c02      	adds	r2, r0, #0
 80169dc:	801a      	strh	r2, [r3, #0]
 80169de:	1dbb      	adds	r3, r7, #6
 80169e0:	1c0a      	adds	r2, r1, #0
 80169e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2241      	movs	r2, #65	@ 0x41
 80169e8:	5c9b      	ldrb	r3, [r3, r2]
 80169ea:	b2db      	uxtb	r3, r3
 80169ec:	2b20      	cmp	r3, #32
 80169ee:	d000      	beq.n	80169f2 <HAL_I2C_Mem_Read+0x32>
 80169f0:	e110      	b.n	8016c14 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80169f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d004      	beq.n	8016a02 <HAL_I2C_Mem_Read+0x42>
 80169f8:	232c      	movs	r3, #44	@ 0x2c
 80169fa:	18fb      	adds	r3, r7, r3
 80169fc:	881b      	ldrh	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d105      	bne.n	8016a0e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2280      	movs	r2, #128	@ 0x80
 8016a06:	0092      	lsls	r2, r2, #2
 8016a08:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	e103      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	2240      	movs	r2, #64	@ 0x40
 8016a12:	5c9b      	ldrb	r3, [r3, r2]
 8016a14:	2b01      	cmp	r3, #1
 8016a16:	d101      	bne.n	8016a1c <HAL_I2C_Mem_Read+0x5c>
 8016a18:	2302      	movs	r3, #2
 8016a1a:	e0fc      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2240      	movs	r2, #64	@ 0x40
 8016a20:	2101      	movs	r1, #1
 8016a22:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016a24:	f7fd ff4c 	bl	80148c0 <HAL_GetTick>
 8016a28:	0003      	movs	r3, r0
 8016a2a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016a2c:	2380      	movs	r3, #128	@ 0x80
 8016a2e:	0219      	lsls	r1, r3, #8
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	9300      	str	r3, [sp, #0]
 8016a36:	2319      	movs	r3, #25
 8016a38:	2201      	movs	r2, #1
 8016a3a:	f001 fdd9 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8016a3e:	1e03      	subs	r3, r0, #0
 8016a40:	d001      	beq.n	8016a46 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016a42:	2301      	movs	r3, #1
 8016a44:	e0e7      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2241      	movs	r2, #65	@ 0x41
 8016a4a:	2122      	movs	r1, #34	@ 0x22
 8016a4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2242      	movs	r2, #66	@ 0x42
 8016a52:	2140      	movs	r1, #64	@ 0x40
 8016a54:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	222c      	movs	r2, #44	@ 0x2c
 8016a66:	18ba      	adds	r2, r7, r2
 8016a68:	8812      	ldrh	r2, [r2, #0]
 8016a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016a72:	1dbb      	adds	r3, r7, #6
 8016a74:	881c      	ldrh	r4, [r3, #0]
 8016a76:	2308      	movs	r3, #8
 8016a78:	18fb      	adds	r3, r7, r3
 8016a7a:	881a      	ldrh	r2, [r3, #0]
 8016a7c:	230a      	movs	r3, #10
 8016a7e:	18fb      	adds	r3, r7, r3
 8016a80:	8819      	ldrh	r1, [r3, #0]
 8016a82:	68f8      	ldr	r0, [r7, #12]
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	9301      	str	r3, [sp, #4]
 8016a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	0023      	movs	r3, r4
 8016a8e:	f000 ff8b 	bl	80179a8 <I2C_RequestMemoryRead>
 8016a92:	1e03      	subs	r3, r0, #0
 8016a94:	d005      	beq.n	8016aa2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	2240      	movs	r2, #64	@ 0x40
 8016a9a:	2100      	movs	r1, #0
 8016a9c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	e0b9      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	2bff      	cmp	r3, #255	@ 0xff
 8016aaa:	d911      	bls.n	8016ad0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	22ff      	movs	r2, #255	@ 0xff
 8016ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ab6:	b2da      	uxtb	r2, r3
 8016ab8:	2380      	movs	r3, #128	@ 0x80
 8016aba:	045c      	lsls	r4, r3, #17
 8016abc:	230a      	movs	r3, #10
 8016abe:	18fb      	adds	r3, r7, r3
 8016ac0:	8819      	ldrh	r1, [r3, #0]
 8016ac2:	68f8      	ldr	r0, [r7, #12]
 8016ac4:	4b56      	ldr	r3, [pc, #344]	@ (8016c20 <HAL_I2C_Mem_Read+0x260>)
 8016ac6:	9300      	str	r3, [sp, #0]
 8016ac8:	0023      	movs	r3, r4
 8016aca:	f001 ffe3 	bl	8018a94 <I2C_TransferConfig>
 8016ace:	e012      	b.n	8016af6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ad4:	b29a      	uxth	r2, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ade:	b2da      	uxtb	r2, r3
 8016ae0:	2380      	movs	r3, #128	@ 0x80
 8016ae2:	049c      	lsls	r4, r3, #18
 8016ae4:	230a      	movs	r3, #10
 8016ae6:	18fb      	adds	r3, r7, r3
 8016ae8:	8819      	ldrh	r1, [r3, #0]
 8016aea:	68f8      	ldr	r0, [r7, #12]
 8016aec:	4b4c      	ldr	r3, [pc, #304]	@ (8016c20 <HAL_I2C_Mem_Read+0x260>)
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	0023      	movs	r3, r4
 8016af2:	f001 ffcf 	bl	8018a94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016af8:	68f8      	ldr	r0, [r7, #12]
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	0013      	movs	r3, r2
 8016b00:	2200      	movs	r2, #0
 8016b02:	2104      	movs	r1, #4
 8016b04:	f001 fd74 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8016b08:	1e03      	subs	r3, r0, #0
 8016b0a:	d001      	beq.n	8016b10 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	e082      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b1a:	b2d2      	uxtb	r2, r2
 8016b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b22:	1c5a      	adds	r2, r3, #1
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	b29a      	uxth	r2, r3
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b46:	b29b      	uxth	r3, r3
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d03a      	beq.n	8016bc2 <HAL_I2C_Mem_Read+0x202>
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d136      	bne.n	8016bc2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	9300      	str	r3, [sp, #0]
 8016b5c:	0013      	movs	r3, r2
 8016b5e:	2200      	movs	r2, #0
 8016b60:	2180      	movs	r1, #128	@ 0x80
 8016b62:	f001 fd45 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8016b66:	1e03      	subs	r3, r0, #0
 8016b68:	d001      	beq.n	8016b6e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	e053      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	2bff      	cmp	r3, #255	@ 0xff
 8016b76:	d911      	bls.n	8016b9c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	22ff      	movs	r2, #255	@ 0xff
 8016b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b82:	b2da      	uxtb	r2, r3
 8016b84:	2380      	movs	r3, #128	@ 0x80
 8016b86:	045c      	lsls	r4, r3, #17
 8016b88:	230a      	movs	r3, #10
 8016b8a:	18fb      	adds	r3, r7, r3
 8016b8c:	8819      	ldrh	r1, [r3, #0]
 8016b8e:	68f8      	ldr	r0, [r7, #12]
 8016b90:	2300      	movs	r3, #0
 8016b92:	9300      	str	r3, [sp, #0]
 8016b94:	0023      	movs	r3, r4
 8016b96:	f001 ff7d 	bl	8018a94 <I2C_TransferConfig>
 8016b9a:	e012      	b.n	8016bc2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ba0:	b29a      	uxth	r2, r3
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016baa:	b2da      	uxtb	r2, r3
 8016bac:	2380      	movs	r3, #128	@ 0x80
 8016bae:	049c      	lsls	r4, r3, #18
 8016bb0:	230a      	movs	r3, #10
 8016bb2:	18fb      	adds	r3, r7, r3
 8016bb4:	8819      	ldrh	r1, [r3, #0]
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	2300      	movs	r3, #0
 8016bba:	9300      	str	r3, [sp, #0]
 8016bbc:	0023      	movs	r3, r4
 8016bbe:	f001 ff69 	bl	8018a94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d194      	bne.n	8016af6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016bcc:	697a      	ldr	r2, [r7, #20]
 8016bce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	0018      	movs	r0, r3
 8016bd4:	f001 fda0 	bl	8018718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016bd8:	1e03      	subs	r3, r0, #0
 8016bda:	d001      	beq.n	8016be0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016bdc:	2301      	movs	r3, #1
 8016bde:	e01a      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	2220      	movs	r2, #32
 8016be6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	685a      	ldr	r2, [r3, #4]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	490c      	ldr	r1, [pc, #48]	@ (8016c24 <HAL_I2C_Mem_Read+0x264>)
 8016bf4:	400a      	ands	r2, r1
 8016bf6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	2241      	movs	r2, #65	@ 0x41
 8016bfc:	2120      	movs	r1, #32
 8016bfe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	2242      	movs	r2, #66	@ 0x42
 8016c04:	2100      	movs	r1, #0
 8016c06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2240      	movs	r2, #64	@ 0x40
 8016c0c:	2100      	movs	r1, #0
 8016c0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016c10:	2300      	movs	r3, #0
 8016c12:	e000      	b.n	8016c16 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016c14:	2302      	movs	r3, #2
  }
}
 8016c16:	0018      	movs	r0, r3
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	b007      	add	sp, #28
 8016c1c:	bd90      	pop	{r4, r7, pc}
 8016c1e:	46c0      	nop			@ (mov r8, r8)
 8016c20:	80002400 	.word	0x80002400
 8016c24:	fe00e800 	.word	0xfe00e800

08016c28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b084      	sub	sp, #16
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	699b      	ldr	r3, [r3, #24]
 8016c36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d005      	beq.n	8016c54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c4c:	68ba      	ldr	r2, [r7, #8]
 8016c4e:	68f9      	ldr	r1, [r7, #12]
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	4798      	blx	r3
  }
}
 8016c54:	46c0      	nop			@ (mov r8, r8)
 8016c56:	46bd      	mov	sp, r7
 8016c58:	b004      	add	sp, #16
 8016c5a:	bd80      	pop	{r7, pc}

08016c5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b086      	sub	sp, #24
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	699b      	ldr	r3, [r3, #24]
 8016c6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016c74:	697b      	ldr	r3, [r7, #20]
 8016c76:	0a1b      	lsrs	r3, r3, #8
 8016c78:	001a      	movs	r2, r3
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	4013      	ands	r3, r2
 8016c7e:	d010      	beq.n	8016ca2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	09db      	lsrs	r3, r3, #7
 8016c84:	001a      	movs	r2, r3
 8016c86:	2301      	movs	r3, #1
 8016c88:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016c8a:	d00a      	beq.n	8016ca2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c90:	2201      	movs	r2, #1
 8016c92:	431a      	orrs	r2, r3
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	2280      	movs	r2, #128	@ 0x80
 8016c9e:	0052      	lsls	r2, r2, #1
 8016ca0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	0a9b      	lsrs	r3, r3, #10
 8016ca6:	001a      	movs	r2, r3
 8016ca8:	2301      	movs	r3, #1
 8016caa:	4013      	ands	r3, r2
 8016cac:	d010      	beq.n	8016cd0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	09db      	lsrs	r3, r3, #7
 8016cb2:	001a      	movs	r2, r3
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016cb8:	d00a      	beq.n	8016cd0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cbe:	2208      	movs	r2, #8
 8016cc0:	431a      	orrs	r2, r3
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2280      	movs	r2, #128	@ 0x80
 8016ccc:	00d2      	lsls	r2, r2, #3
 8016cce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	0a5b      	lsrs	r3, r3, #9
 8016cd4:	001a      	movs	r2, r3
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	4013      	ands	r3, r2
 8016cda:	d010      	beq.n	8016cfe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	09db      	lsrs	r3, r3, #7
 8016ce0:	001a      	movs	r2, r3
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016ce6:	d00a      	beq.n	8016cfe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cec:	2202      	movs	r2, #2
 8016cee:	431a      	orrs	r2, r3
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	2280      	movs	r2, #128	@ 0x80
 8016cfa:	0092      	lsls	r2, r2, #2
 8016cfc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d02:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	220b      	movs	r2, #11
 8016d08:	4013      	ands	r3, r2
 8016d0a:	d005      	beq.n	8016d18 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016d0c:	68fa      	ldr	r2, [r7, #12]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	0011      	movs	r1, r2
 8016d12:	0018      	movs	r0, r3
 8016d14:	f001 fa46 	bl	80181a4 <I2C_ITError>
  }
}
 8016d18:	46c0      	nop			@ (mov r8, r8)
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	b006      	add	sp, #24
 8016d1e:	bd80      	pop	{r7, pc}

08016d20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016d28:	46c0      	nop			@ (mov r8, r8)
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	b002      	add	sp, #8
 8016d2e:	bd80      	pop	{r7, pc}

08016d30 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b082      	sub	sp, #8
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016d38:	46c0      	nop			@ (mov r8, r8)
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	b002      	add	sp, #8
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016d48:	46c0      	nop			@ (mov r8, r8)
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	b002      	add	sp, #8
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016d58:	46c0      	nop			@ (mov r8, r8)
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	b002      	add	sp, #8
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
 8016d68:	0008      	movs	r0, r1
 8016d6a:	0011      	movs	r1, r2
 8016d6c:	1cfb      	adds	r3, r7, #3
 8016d6e:	1c02      	adds	r2, r0, #0
 8016d70:	701a      	strb	r2, [r3, #0]
 8016d72:	003b      	movs	r3, r7
 8016d74:	1c0a      	adds	r2, r1, #0
 8016d76:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016d78:	46c0      	nop			@ (mov r8, r8)
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	b002      	add	sp, #8
 8016d7e:	bd80      	pop	{r7, pc}

08016d80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016d88:	46c0      	nop			@ (mov r8, r8)
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	b002      	add	sp, #8
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016d98:	46c0      	nop			@ (mov r8, r8)
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	b002      	add	sp, #8
 8016d9e:	bd80      	pop	{r7, pc}

08016da0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016da8:	46c0      	nop			@ (mov r8, r8)
 8016daa:	46bd      	mov	sp, r7
 8016dac:	b002      	add	sp, #8
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016db8:	46c0      	nop			@ (mov r8, r8)
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	b002      	add	sp, #8
 8016dbe:	bd80      	pop	{r7, pc}

08016dc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b082      	sub	sp, #8
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016dc8:	46c0      	nop			@ (mov r8, r8)
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	b002      	add	sp, #8
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016dd0:	b590      	push	{r4, r7, lr}
 8016dd2:	b089      	sub	sp, #36	@ 0x24
 8016dd4:	af02      	add	r7, sp, #8
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	2240      	movs	r2, #64	@ 0x40
 8016de4:	5c9b      	ldrb	r3, [r3, r2]
 8016de6:	2b01      	cmp	r3, #1
 8016de8:	d101      	bne.n	8016dee <I2C_Master_ISR_IT+0x1e>
 8016dea:	2302      	movs	r3, #2
 8016dec:	e12b      	b.n	8017046 <I2C_Master_ISR_IT+0x276>
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	2240      	movs	r2, #64	@ 0x40
 8016df2:	2101      	movs	r1, #1
 8016df4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	091b      	lsrs	r3, r3, #4
 8016dfa:	001a      	movs	r2, r3
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	4013      	ands	r3, r2
 8016e00:	d014      	beq.n	8016e2c <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	091b      	lsrs	r3, r3, #4
 8016e06:	001a      	movs	r2, r3
 8016e08:	2301      	movs	r3, #1
 8016e0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e0c:	d00e      	beq.n	8016e2c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	2210      	movs	r2, #16
 8016e14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e1a:	2204      	movs	r2, #4
 8016e1c:	431a      	orrs	r2, r3
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	0018      	movs	r0, r3
 8016e26:	f001 fae8 	bl	80183fa <I2C_Flush_TXDR>
 8016e2a:	e0f5      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	089b      	lsrs	r3, r3, #2
 8016e30:	001a      	movs	r2, r3
 8016e32:	2301      	movs	r3, #1
 8016e34:	4013      	ands	r3, r2
 8016e36:	d023      	beq.n	8016e80 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	089b      	lsrs	r3, r3, #2
 8016e3c:	001a      	movs	r2, r3
 8016e3e:	2301      	movs	r3, #1
 8016e40:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016e42:	d01d      	beq.n	8016e80 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	2204      	movs	r2, #4
 8016e48:	4393      	bics	r3, r2
 8016e4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e56:	b2d2      	uxtb	r2, r2
 8016e58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e5e:	1c5a      	adds	r2, r3, #1
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e68:	3b01      	subs	r3, #1
 8016e6a:	b29a      	uxth	r2, r3
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	3b01      	subs	r3, #1
 8016e78:	b29a      	uxth	r2, r3
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016e7e:	e0cb      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e80:	697b      	ldr	r3, [r7, #20]
 8016e82:	085b      	lsrs	r3, r3, #1
 8016e84:	001a      	movs	r2, r3
 8016e86:	2301      	movs	r3, #1
 8016e88:	4013      	ands	r3, r2
 8016e8a:	d01e      	beq.n	8016eca <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	085b      	lsrs	r3, r3, #1
 8016e90:	001a      	movs	r2, r3
 8016e92:	2301      	movs	r3, #1
 8016e94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e96:	d018      	beq.n	8016eca <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e9c:	781a      	ldrb	r2, [r3, #0]
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ea8:	1c5a      	adds	r2, r3, #1
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016eb2:	3b01      	subs	r3, #1
 8016eb4:	b29a      	uxth	r2, r3
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	3b01      	subs	r3, #1
 8016ec2:	b29a      	uxth	r2, r3
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016ec8:	e0a6      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	09db      	lsrs	r3, r3, #7
 8016ece:	001a      	movs	r2, r3
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	4013      	ands	r3, r2
 8016ed4:	d100      	bne.n	8016ed8 <I2C_Master_ISR_IT+0x108>
 8016ed6:	e06b      	b.n	8016fb0 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	099b      	lsrs	r3, r3, #6
 8016edc:	001a      	movs	r2, r3
 8016ede:	2301      	movs	r3, #1
 8016ee0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016ee2:	d065      	beq.n	8016fb0 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d04a      	beq.n	8016f84 <I2C_Master_ISR_IT+0x1b4>
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d146      	bne.n	8016f84 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	2112      	movs	r1, #18
 8016f00:	187b      	adds	r3, r7, r1
 8016f02:	0592      	lsls	r2, r2, #22
 8016f04:	0d92      	lsrs	r2, r2, #22
 8016f06:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f0c:	b29b      	uxth	r3, r3
 8016f0e:	2bff      	cmp	r3, #255	@ 0xff
 8016f10:	d910      	bls.n	8016f34 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	22ff      	movs	r2, #255	@ 0xff
 8016f16:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f1c:	b2da      	uxtb	r2, r3
 8016f1e:	2380      	movs	r3, #128	@ 0x80
 8016f20:	045c      	lsls	r4, r3, #17
 8016f22:	187b      	adds	r3, r7, r1
 8016f24:	8819      	ldrh	r1, [r3, #0]
 8016f26:	68f8      	ldr	r0, [r7, #12]
 8016f28:	2300      	movs	r3, #0
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	0023      	movs	r3, r4
 8016f2e:	f001 fdb1 	bl	8018a94 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f32:	e03c      	b.n	8016fae <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f42:	4a43      	ldr	r2, [pc, #268]	@ (8017050 <I2C_Master_ISR_IT+0x280>)
 8016f44:	4293      	cmp	r3, r2
 8016f46:	d00e      	beq.n	8016f66 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f4c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f52:	2312      	movs	r3, #18
 8016f54:	18fb      	adds	r3, r7, r3
 8016f56:	8819      	ldrh	r1, [r3, #0]
 8016f58:	68f8      	ldr	r0, [r7, #12]
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	9300      	str	r3, [sp, #0]
 8016f5e:	0023      	movs	r3, r4
 8016f60:	f001 fd98 	bl	8018a94 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f64:	e023      	b.n	8016fae <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f6a:	b2da      	uxtb	r2, r3
 8016f6c:	2380      	movs	r3, #128	@ 0x80
 8016f6e:	049c      	lsls	r4, r3, #18
 8016f70:	2312      	movs	r3, #18
 8016f72:	18fb      	adds	r3, r7, r3
 8016f74:	8819      	ldrh	r1, [r3, #0]
 8016f76:	68f8      	ldr	r0, [r7, #12]
 8016f78:	2300      	movs	r3, #0
 8016f7a:	9300      	str	r3, [sp, #0]
 8016f7c:	0023      	movs	r3, r4
 8016f7e:	f001 fd89 	bl	8018a94 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f82:	e014      	b.n	8016fae <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	685a      	ldr	r2, [r3, #4]
 8016f8a:	2380      	movs	r3, #128	@ 0x80
 8016f8c:	049b      	lsls	r3, r3, #18
 8016f8e:	401a      	ands	r2, r3
 8016f90:	2380      	movs	r3, #128	@ 0x80
 8016f92:	049b      	lsls	r3, r3, #18
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d004      	beq.n	8016fa2 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	0018      	movs	r0, r3
 8016f9c:	f000 fe0a 	bl	8017bb4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016fa0:	e03a      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2140      	movs	r1, #64	@ 0x40
 8016fa6:	0018      	movs	r0, r3
 8016fa8:	f001 f8fc 	bl	80181a4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016fac:	e034      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
 8016fae:	e033      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	099b      	lsrs	r3, r3, #6
 8016fb4:	001a      	movs	r2, r3
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	4013      	ands	r3, r2
 8016fba:	d02d      	beq.n	8017018 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	099b      	lsrs	r3, r3, #6
 8016fc0:	001a      	movs	r2, r3
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016fc6:	d027      	beq.n	8017018 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d11d      	bne.n	801700e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	685a      	ldr	r2, [r3, #4]
 8016fd8:	2380      	movs	r3, #128	@ 0x80
 8016fda:	049b      	lsls	r3, r3, #18
 8016fdc:	401a      	ands	r2, r3
 8016fde:	2380      	movs	r3, #128	@ 0x80
 8016fe0:	049b      	lsls	r3, r3, #18
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d018      	beq.n	8017018 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fea:	4a19      	ldr	r2, [pc, #100]	@ (8017050 <I2C_Master_ISR_IT+0x280>)
 8016fec:	4293      	cmp	r3, r2
 8016fee:	d109      	bne.n	8017004 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	685a      	ldr	r2, [r3, #4]
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	2180      	movs	r1, #128	@ 0x80
 8016ffc:	01c9      	lsls	r1, r1, #7
 8016ffe:	430a      	orrs	r2, r1
 8017000:	605a      	str	r2, [r3, #4]
 8017002:	e009      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	0018      	movs	r0, r3
 8017008:	f000 fdd4 	bl	8017bb4 <I2C_ITMasterSeqCplt>
 801700c:	e004      	b.n	8017018 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2140      	movs	r1, #64	@ 0x40
 8017012:	0018      	movs	r0, r3
 8017014:	f001 f8c6 	bl	80181a4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	095b      	lsrs	r3, r3, #5
 801701c:	001a      	movs	r2, r3
 801701e:	2301      	movs	r3, #1
 8017020:	4013      	ands	r3, r2
 8017022:	d00b      	beq.n	801703c <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	095b      	lsrs	r3, r3, #5
 8017028:	001a      	movs	r2, r3
 801702a:	2301      	movs	r3, #1
 801702c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801702e:	d005      	beq.n	801703c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8017030:	697a      	ldr	r2, [r7, #20]
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	0011      	movs	r1, r2
 8017036:	0018      	movs	r0, r3
 8017038:	f000 fe64 	bl	8017d04 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2240      	movs	r2, #64	@ 0x40
 8017040:	2100      	movs	r1, #0
 8017042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017044:	2300      	movs	r3, #0
}
 8017046:	0018      	movs	r0, r3
 8017048:	46bd      	mov	sp, r7
 801704a:	b007      	add	sp, #28
 801704c:	bd90      	pop	{r4, r7, pc}
 801704e:	46c0      	nop			@ (mov r8, r8)
 8017050:	ffff0000 	.word	0xffff0000

08017054 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b086      	sub	sp, #24
 8017058:	af00      	add	r7, sp, #0
 801705a:	60f8      	str	r0, [r7, #12]
 801705c:	60b9      	str	r1, [r7, #8]
 801705e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017064:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	2240      	movs	r2, #64	@ 0x40
 801706e:	5c9b      	ldrb	r3, [r3, r2]
 8017070:	2b01      	cmp	r3, #1
 8017072:	d101      	bne.n	8017078 <I2C_Slave_ISR_IT+0x24>
 8017074:	2302      	movs	r3, #2
 8017076:	e0fa      	b.n	801726e <I2C_Slave_ISR_IT+0x21a>
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	2240      	movs	r2, #64	@ 0x40
 801707c:	2101      	movs	r1, #1
 801707e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017080:	693b      	ldr	r3, [r7, #16]
 8017082:	095b      	lsrs	r3, r3, #5
 8017084:	001a      	movs	r2, r3
 8017086:	2301      	movs	r3, #1
 8017088:	4013      	ands	r3, r2
 801708a:	d00b      	beq.n	80170a4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	095b      	lsrs	r3, r3, #5
 8017090:	001a      	movs	r2, r3
 8017092:	2301      	movs	r3, #1
 8017094:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017096:	d005      	beq.n	80170a4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8017098:	693a      	ldr	r2, [r7, #16]
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	0011      	movs	r1, r2
 801709e:	0018      	movs	r0, r3
 80170a0:	f000 ff02 	bl	8017ea8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	091b      	lsrs	r3, r3, #4
 80170a8:	001a      	movs	r2, r3
 80170aa:	2301      	movs	r3, #1
 80170ac:	4013      	ands	r3, r2
 80170ae:	d054      	beq.n	801715a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	091b      	lsrs	r3, r3, #4
 80170b4:	001a      	movs	r2, r3
 80170b6:	2301      	movs	r3, #1
 80170b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80170ba:	d04e      	beq.n	801715a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d12d      	bne.n	8017122 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	2241      	movs	r2, #65	@ 0x41
 80170ca:	5c9b      	ldrb	r3, [r3, r2]
 80170cc:	b2db      	uxtb	r3, r3
 80170ce:	2b28      	cmp	r3, #40	@ 0x28
 80170d0:	d10b      	bne.n	80170ea <I2C_Slave_ISR_IT+0x96>
 80170d2:	697a      	ldr	r2, [r7, #20]
 80170d4:	2380      	movs	r3, #128	@ 0x80
 80170d6:	049b      	lsls	r3, r3, #18
 80170d8:	429a      	cmp	r2, r3
 80170da:	d106      	bne.n	80170ea <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80170dc:	693a      	ldr	r2, [r7, #16]
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	0011      	movs	r1, r2
 80170e2:	0018      	movs	r0, r3
 80170e4:	f001 f804 	bl	80180f0 <I2C_ITListenCplt>
 80170e8:	e036      	b.n	8017158 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2241      	movs	r2, #65	@ 0x41
 80170ee:	5c9b      	ldrb	r3, [r3, r2]
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	2b29      	cmp	r3, #41	@ 0x29
 80170f4:	d110      	bne.n	8017118 <I2C_Slave_ISR_IT+0xc4>
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	4a5f      	ldr	r2, [pc, #380]	@ (8017278 <I2C_Slave_ISR_IT+0x224>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d00c      	beq.n	8017118 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	2210      	movs	r2, #16
 8017104:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	0018      	movs	r0, r3
 801710a:	f001 f976 	bl	80183fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	0018      	movs	r0, r3
 8017112:	f000 fd91 	bl	8017c38 <I2C_ITSlaveSeqCplt>
 8017116:	e01f      	b.n	8017158 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	2210      	movs	r2, #16
 801711e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8017120:	e09d      	b.n	801725e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	2210      	movs	r2, #16
 8017128:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801712e:	2204      	movs	r2, #4
 8017130:	431a      	orrs	r2, r3
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d005      	beq.n	8017148 <I2C_Slave_ISR_IT+0xf4>
 801713c:	697a      	ldr	r2, [r7, #20]
 801713e:	2380      	movs	r3, #128	@ 0x80
 8017140:	045b      	lsls	r3, r3, #17
 8017142:	429a      	cmp	r2, r3
 8017144:	d000      	beq.n	8017148 <I2C_Slave_ISR_IT+0xf4>
 8017146:	e08a      	b.n	801725e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	0011      	movs	r1, r2
 8017150:	0018      	movs	r0, r3
 8017152:	f001 f827 	bl	80181a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017156:	e082      	b.n	801725e <I2C_Slave_ISR_IT+0x20a>
 8017158:	e081      	b.n	801725e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	089b      	lsrs	r3, r3, #2
 801715e:	001a      	movs	r2, r3
 8017160:	2301      	movs	r3, #1
 8017162:	4013      	ands	r3, r2
 8017164:	d031      	beq.n	80171ca <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	089b      	lsrs	r3, r3, #2
 801716a:	001a      	movs	r2, r3
 801716c:	2301      	movs	r3, #1
 801716e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017170:	d02b      	beq.n	80171ca <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017176:	b29b      	uxth	r3, r3
 8017178:	2b00      	cmp	r3, #0
 801717a:	d018      	beq.n	80171ae <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017186:	b2d2      	uxtb	r2, r2
 8017188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801718e:	1c5a      	adds	r2, r3, #1
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017198:	3b01      	subs	r3, #1
 801719a:	b29a      	uxth	r2, r3
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	3b01      	subs	r3, #1
 80171a8:	b29a      	uxth	r2, r3
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d154      	bne.n	8017262 <I2C_Slave_ISR_IT+0x20e>
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	4a2f      	ldr	r2, [pc, #188]	@ (8017278 <I2C_Slave_ISR_IT+0x224>)
 80171bc:	4293      	cmp	r3, r2
 80171be:	d050      	beq.n	8017262 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	0018      	movs	r0, r3
 80171c4:	f000 fd38 	bl	8017c38 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80171c8:	e04b      	b.n	8017262 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	08db      	lsrs	r3, r3, #3
 80171ce:	001a      	movs	r2, r3
 80171d0:	2301      	movs	r3, #1
 80171d2:	4013      	ands	r3, r2
 80171d4:	d00c      	beq.n	80171f0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	08db      	lsrs	r3, r3, #3
 80171da:	001a      	movs	r2, r3
 80171dc:	2301      	movs	r3, #1
 80171de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80171e0:	d006      	beq.n	80171f0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80171e2:	693a      	ldr	r2, [r7, #16]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	0011      	movs	r1, r2
 80171e8:	0018      	movs	r0, r3
 80171ea:	f000 fc3f 	bl	8017a6c <I2C_ITAddrCplt>
 80171ee:	e039      	b.n	8017264 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	085b      	lsrs	r3, r3, #1
 80171f4:	001a      	movs	r2, r3
 80171f6:	2301      	movs	r3, #1
 80171f8:	4013      	ands	r3, r2
 80171fa:	d033      	beq.n	8017264 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	085b      	lsrs	r3, r3, #1
 8017200:	001a      	movs	r2, r3
 8017202:	2301      	movs	r3, #1
 8017204:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017206:	d02d      	beq.n	8017264 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801720c:	b29b      	uxth	r3, r3
 801720e:	2b00      	cmp	r3, #0
 8017210:	d018      	beq.n	8017244 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017216:	781a      	ldrb	r2, [r3, #0]
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017222:	1c5a      	adds	r2, r3, #1
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801722c:	b29b      	uxth	r3, r3
 801722e:	3b01      	subs	r3, #1
 8017230:	b29a      	uxth	r2, r3
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801723a:	3b01      	subs	r3, #1
 801723c:	b29a      	uxth	r2, r3
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017242:	e00f      	b.n	8017264 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8017244:	697a      	ldr	r2, [r7, #20]
 8017246:	2380      	movs	r3, #128	@ 0x80
 8017248:	045b      	lsls	r3, r3, #17
 801724a:	429a      	cmp	r2, r3
 801724c:	d002      	beq.n	8017254 <I2C_Slave_ISR_IT+0x200>
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d107      	bne.n	8017264 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	0018      	movs	r0, r3
 8017258:	f000 fcee 	bl	8017c38 <I2C_ITSlaveSeqCplt>
 801725c:	e002      	b.n	8017264 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 801725e:	46c0      	nop			@ (mov r8, r8)
 8017260:	e000      	b.n	8017264 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8017262:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2240      	movs	r2, #64	@ 0x40
 8017268:	2100      	movs	r1, #0
 801726a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801726c:	2300      	movs	r3, #0
}
 801726e:	0018      	movs	r0, r3
 8017270:	46bd      	mov	sp, r7
 8017272:	b006      	add	sp, #24
 8017274:	bd80      	pop	{r7, pc}
 8017276:	46c0      	nop			@ (mov r8, r8)
 8017278:	ffff0000 	.word	0xffff0000

0801727c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801727c:	b590      	push	{r4, r7, lr}
 801727e:	b089      	sub	sp, #36	@ 0x24
 8017280:	af02      	add	r7, sp, #8
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	60b9      	str	r1, [r7, #8]
 8017286:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	2240      	movs	r2, #64	@ 0x40
 801728c:	5c9b      	ldrb	r3, [r3, r2]
 801728e:	2b01      	cmp	r3, #1
 8017290:	d101      	bne.n	8017296 <I2C_Master_ISR_DMA+0x1a>
 8017292:	2302      	movs	r3, #2
 8017294:	e0f7      	b.n	8017486 <I2C_Master_ISR_DMA+0x20a>
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2240      	movs	r2, #64	@ 0x40
 801729a:	2101      	movs	r1, #1
 801729c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	091b      	lsrs	r3, r3, #4
 80172a2:	001a      	movs	r2, r3
 80172a4:	2301      	movs	r3, #1
 80172a6:	4013      	ands	r3, r2
 80172a8:	d019      	beq.n	80172de <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	091b      	lsrs	r3, r3, #4
 80172ae:	001a      	movs	r2, r3
 80172b0:	2301      	movs	r3, #1
 80172b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80172b4:	d013      	beq.n	80172de <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	2210      	movs	r2, #16
 80172bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80172c2:	2204      	movs	r2, #4
 80172c4:	431a      	orrs	r2, r3
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	2120      	movs	r1, #32
 80172ce:	0018      	movs	r0, r3
 80172d0:	f001 fc1a 	bl	8018b08 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	0018      	movs	r0, r3
 80172d8:	f001 f88f 	bl	80183fa <I2C_Flush_TXDR>
 80172dc:	e0ce      	b.n	801747c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	09db      	lsrs	r3, r3, #7
 80172e2:	001a      	movs	r2, r3
 80172e4:	2301      	movs	r3, #1
 80172e6:	4013      	ands	r3, r2
 80172e8:	d100      	bne.n	80172ec <I2C_Master_ISR_DMA+0x70>
 80172ea:	e07e      	b.n	80173ea <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	099b      	lsrs	r3, r3, #6
 80172f0:	001a      	movs	r2, r3
 80172f2:	2301      	movs	r3, #1
 80172f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80172f6:	d100      	bne.n	80172fa <I2C_Master_ISR_DMA+0x7e>
 80172f8:	e077      	b.n	80173ea <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	2140      	movs	r1, #64	@ 0x40
 8017306:	438a      	bics	r2, r1
 8017308:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801730e:	b29b      	uxth	r3, r3
 8017310:	2b00      	cmp	r3, #0
 8017312:	d055      	beq.n	80173c0 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	b29a      	uxth	r2, r3
 801731c:	2312      	movs	r3, #18
 801731e:	18fb      	adds	r3, r7, r3
 8017320:	0592      	lsls	r2, r2, #22
 8017322:	0d92      	lsrs	r2, r2, #22
 8017324:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801732a:	b29b      	uxth	r3, r3
 801732c:	2bff      	cmp	r3, #255	@ 0xff
 801732e:	d906      	bls.n	801733e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	22ff      	movs	r2, #255	@ 0xff
 8017334:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8017336:	2380      	movs	r3, #128	@ 0x80
 8017338:	045b      	lsls	r3, r3, #17
 801733a:	617b      	str	r3, [r7, #20]
 801733c:	e010      	b.n	8017360 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017342:	b29a      	uxth	r2, r3
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801734c:	4a50      	ldr	r2, [pc, #320]	@ (8017490 <I2C_Master_ISR_DMA+0x214>)
 801734e:	4293      	cmp	r3, r2
 8017350:	d003      	beq.n	801735a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017356:	617b      	str	r3, [r7, #20]
 8017358:	e002      	b.n	8017360 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801735a:	2380      	movs	r3, #128	@ 0x80
 801735c:	049b      	lsls	r3, r3, #18
 801735e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017364:	b2da      	uxtb	r2, r3
 8017366:	697c      	ldr	r4, [r7, #20]
 8017368:	2312      	movs	r3, #18
 801736a:	18fb      	adds	r3, r7, r3
 801736c:	8819      	ldrh	r1, [r3, #0]
 801736e:	68f8      	ldr	r0, [r7, #12]
 8017370:	2300      	movs	r3, #0
 8017372:	9300      	str	r3, [sp, #0]
 8017374:	0023      	movs	r3, r4
 8017376:	f001 fb8d 	bl	8018a94 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801737e:	b29a      	uxth	r2, r3
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017384:	1ad3      	subs	r3, r2, r3
 8017386:	b29a      	uxth	r2, r3
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	2241      	movs	r2, #65	@ 0x41
 8017390:	5c9b      	ldrb	r3, [r3, r2]
 8017392:	b2db      	uxtb	r3, r3
 8017394:	2b22      	cmp	r3, #34	@ 0x22
 8017396:	d109      	bne.n	80173ac <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	2180      	movs	r1, #128	@ 0x80
 80173a4:	0209      	lsls	r1, r1, #8
 80173a6:	430a      	orrs	r2, r1
 80173a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80173aa:	e067      	b.n	801747c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	2180      	movs	r1, #128	@ 0x80
 80173b8:	01c9      	lsls	r1, r1, #7
 80173ba:	430a      	orrs	r2, r1
 80173bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80173be:	e05d      	b.n	801747c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	685a      	ldr	r2, [r3, #4]
 80173c6:	2380      	movs	r3, #128	@ 0x80
 80173c8:	049b      	lsls	r3, r3, #18
 80173ca:	401a      	ands	r2, r3
 80173cc:	2380      	movs	r3, #128	@ 0x80
 80173ce:	049b      	lsls	r3, r3, #18
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d004      	beq.n	80173de <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	0018      	movs	r0, r3
 80173d8:	f000 fbec 	bl	8017bb4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80173dc:	e04e      	b.n	801747c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	2140      	movs	r1, #64	@ 0x40
 80173e2:	0018      	movs	r0, r3
 80173e4:	f000 fede 	bl	80181a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80173e8:	e048      	b.n	801747c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	099b      	lsrs	r3, r3, #6
 80173ee:	001a      	movs	r2, r3
 80173f0:	2301      	movs	r3, #1
 80173f2:	4013      	ands	r3, r2
 80173f4:	d02e      	beq.n	8017454 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	099b      	lsrs	r3, r3, #6
 80173fa:	001a      	movs	r2, r3
 80173fc:	2301      	movs	r3, #1
 80173fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017400:	d028      	beq.n	8017454 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017406:	b29b      	uxth	r3, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	d11d      	bne.n	8017448 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	685a      	ldr	r2, [r3, #4]
 8017412:	2380      	movs	r3, #128	@ 0x80
 8017414:	049b      	lsls	r3, r3, #18
 8017416:	401a      	ands	r2, r3
 8017418:	2380      	movs	r3, #128	@ 0x80
 801741a:	049b      	lsls	r3, r3, #18
 801741c:	429a      	cmp	r2, r3
 801741e:	d02c      	beq.n	801747a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017424:	4a1a      	ldr	r2, [pc, #104]	@ (8017490 <I2C_Master_ISR_DMA+0x214>)
 8017426:	4293      	cmp	r3, r2
 8017428:	d109      	bne.n	801743e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	685a      	ldr	r2, [r3, #4]
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	2180      	movs	r1, #128	@ 0x80
 8017436:	01c9      	lsls	r1, r1, #7
 8017438:	430a      	orrs	r2, r1
 801743a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801743c:	e01d      	b.n	801747a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	0018      	movs	r0, r3
 8017442:	f000 fbb7 	bl	8017bb4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8017446:	e018      	b.n	801747a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	2140      	movs	r1, #64	@ 0x40
 801744c:	0018      	movs	r0, r3
 801744e:	f000 fea9 	bl	80181a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017452:	e012      	b.n	801747a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	095b      	lsrs	r3, r3, #5
 8017458:	001a      	movs	r2, r3
 801745a:	2301      	movs	r3, #1
 801745c:	4013      	ands	r3, r2
 801745e:	d00d      	beq.n	801747c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	095b      	lsrs	r3, r3, #5
 8017464:	001a      	movs	r2, r3
 8017466:	2301      	movs	r3, #1
 8017468:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801746a:	d007      	beq.n	801747c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801746c:	68ba      	ldr	r2, [r7, #8]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	0011      	movs	r1, r2
 8017472:	0018      	movs	r0, r3
 8017474:	f000 fc46 	bl	8017d04 <I2C_ITMasterCplt>
 8017478:	e000      	b.n	801747c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 801747a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	2240      	movs	r2, #64	@ 0x40
 8017480:	2100      	movs	r1, #0
 8017482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017484:	2300      	movs	r3, #0
}
 8017486:	0018      	movs	r0, r3
 8017488:	46bd      	mov	sp, r7
 801748a:	b007      	add	sp, #28
 801748c:	bd90      	pop	{r4, r7, pc}
 801748e:	46c0      	nop			@ (mov r8, r8)
 8017490:	ffff0000 	.word	0xffff0000

08017494 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8017494:	b590      	push	{r4, r7, lr}
 8017496:	b089      	sub	sp, #36	@ 0x24
 8017498:	af02      	add	r7, sp, #8
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80174a0:	4b92      	ldr	r3, [pc, #584]	@ (80176ec <I2C_Mem_ISR_DMA+0x258>)
 80174a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	2240      	movs	r2, #64	@ 0x40
 80174a8:	5c9b      	ldrb	r3, [r3, r2]
 80174aa:	2b01      	cmp	r3, #1
 80174ac:	d101      	bne.n	80174b2 <I2C_Mem_ISR_DMA+0x1e>
 80174ae:	2302      	movs	r3, #2
 80174b0:	e118      	b.n	80176e4 <I2C_Mem_ISR_DMA+0x250>
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	2240      	movs	r2, #64	@ 0x40
 80174b6:	2101      	movs	r1, #1
 80174b8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	091b      	lsrs	r3, r3, #4
 80174be:	001a      	movs	r2, r3
 80174c0:	2301      	movs	r3, #1
 80174c2:	4013      	ands	r3, r2
 80174c4:	d019      	beq.n	80174fa <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	091b      	lsrs	r3, r3, #4
 80174ca:	001a      	movs	r2, r3
 80174cc:	2301      	movs	r3, #1
 80174ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80174d0:	d013      	beq.n	80174fa <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	2210      	movs	r2, #16
 80174d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174de:	2204      	movs	r2, #4
 80174e0:	431a      	orrs	r2, r3
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	2120      	movs	r1, #32
 80174ea:	0018      	movs	r0, r3
 80174ec:	f001 fb0c 	bl	8018b08 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	0018      	movs	r0, r3
 80174f4:	f000 ff81 	bl	80183fa <I2C_Flush_TXDR>
 80174f8:	e0ef      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	085b      	lsrs	r3, r3, #1
 80174fe:	001a      	movs	r2, r3
 8017500:	2301      	movs	r3, #1
 8017502:	4013      	ands	r3, r2
 8017504:	d00f      	beq.n	8017526 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	085b      	lsrs	r3, r3, #1
 801750a:	001a      	movs	r2, r3
 801750c:	2301      	movs	r3, #1
 801750e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017510:	d009      	beq.n	8017526 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	68fa      	ldr	r2, [r7, #12]
 8017518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801751a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2201      	movs	r2, #1
 8017520:	4252      	negs	r2, r2
 8017522:	651a      	str	r2, [r3, #80]	@ 0x50
 8017524:	e0d9      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	09db      	lsrs	r3, r3, #7
 801752a:	001a      	movs	r2, r3
 801752c:	2301      	movs	r3, #1
 801752e:	4013      	ands	r3, r2
 8017530:	d060      	beq.n	80175f4 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	099b      	lsrs	r3, r3, #6
 8017536:	001a      	movs	r2, r3
 8017538:	2301      	movs	r3, #1
 801753a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801753c:	d05a      	beq.n	80175f4 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	2110      	movs	r1, #16
 8017542:	0018      	movs	r0, r3
 8017544:	f001 fae0 	bl	8018b08 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801754c:	b29b      	uxth	r3, r3
 801754e:	2b00      	cmp	r3, #0
 8017550:	d04a      	beq.n	80175e8 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017556:	b29b      	uxth	r3, r3
 8017558:	2bff      	cmp	r3, #255	@ 0xff
 801755a:	d910      	bls.n	801757e <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	22ff      	movs	r2, #255	@ 0xff
 8017560:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017566:	b299      	uxth	r1, r3
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801756c:	b2da      	uxtb	r2, r3
 801756e:	2380      	movs	r3, #128	@ 0x80
 8017570:	045b      	lsls	r3, r3, #17
 8017572:	68f8      	ldr	r0, [r7, #12]
 8017574:	2400      	movs	r4, #0
 8017576:	9400      	str	r4, [sp, #0]
 8017578:	f001 fa8c 	bl	8018a94 <I2C_TransferConfig>
 801757c:	e011      	b.n	80175a2 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017582:	b29a      	uxth	r2, r3
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801758c:	b299      	uxth	r1, r3
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017592:	b2da      	uxtb	r2, r3
 8017594:	2380      	movs	r3, #128	@ 0x80
 8017596:	049b      	lsls	r3, r3, #18
 8017598:	68f8      	ldr	r0, [r7, #12]
 801759a:	2400      	movs	r4, #0
 801759c:	9400      	str	r4, [sp, #0]
 801759e:	f001 fa79 	bl	8018a94 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175a6:	b29a      	uxth	r2, r3
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175ac:	1ad3      	subs	r3, r2, r3
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2241      	movs	r2, #65	@ 0x41
 80175b8:	5c9b      	ldrb	r3, [r3, r2]
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	2b22      	cmp	r3, #34	@ 0x22
 80175be:	d109      	bne.n	80175d4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	681a      	ldr	r2, [r3, #0]
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	2180      	movs	r1, #128	@ 0x80
 80175cc:	0209      	lsls	r1, r1, #8
 80175ce:	430a      	orrs	r2, r1
 80175d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80175d2:	e082      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	681a      	ldr	r2, [r3, #0]
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	2180      	movs	r1, #128	@ 0x80
 80175e0:	01c9      	lsls	r1, r1, #7
 80175e2:	430a      	orrs	r2, r1
 80175e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80175e6:	e078      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	2140      	movs	r1, #64	@ 0x40
 80175ec:	0018      	movs	r0, r3
 80175ee:	f000 fdd9 	bl	80181a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80175f2:	e072      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	099b      	lsrs	r3, r3, #6
 80175f8:	001a      	movs	r2, r3
 80175fa:	2301      	movs	r3, #1
 80175fc:	4013      	ands	r3, r2
 80175fe:	d05a      	beq.n	80176b6 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	099b      	lsrs	r3, r3, #6
 8017604:	001a      	movs	r2, r3
 8017606:	2301      	movs	r3, #1
 8017608:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801760a:	d054      	beq.n	80176b6 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	2241      	movs	r2, #65	@ 0x41
 8017610:	5c9b      	ldrb	r3, [r3, r2]
 8017612:	b2db      	uxtb	r3, r3
 8017614:	2b22      	cmp	r3, #34	@ 0x22
 8017616:	d101      	bne.n	801761c <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8017618:	4b35      	ldr	r3, [pc, #212]	@ (80176f0 <I2C_Mem_ISR_DMA+0x25c>)
 801761a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017620:	b29b      	uxth	r3, r3
 8017622:	2bff      	cmp	r3, #255	@ 0xff
 8017624:	d911      	bls.n	801764a <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	22ff      	movs	r2, #255	@ 0xff
 801762a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017630:	b299      	uxth	r1, r3
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017636:	b2da      	uxtb	r2, r3
 8017638:	2380      	movs	r3, #128	@ 0x80
 801763a:	045c      	lsls	r4, r3, #17
 801763c:	68f8      	ldr	r0, [r7, #12]
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	9300      	str	r3, [sp, #0]
 8017642:	0023      	movs	r3, r4
 8017644:	f001 fa26 	bl	8018a94 <I2C_TransferConfig>
 8017648:	e012      	b.n	8017670 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801764e:	b29a      	uxth	r2, r3
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017658:	b299      	uxth	r1, r3
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801765e:	b2da      	uxtb	r2, r3
 8017660:	2380      	movs	r3, #128	@ 0x80
 8017662:	049c      	lsls	r4, r3, #18
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	0023      	movs	r3, r4
 801766c:	f001 fa12 	bl	8018a94 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017674:	b29a      	uxth	r2, r3
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801767a:	1ad3      	subs	r3, r2, r3
 801767c:	b29a      	uxth	r2, r3
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	2241      	movs	r2, #65	@ 0x41
 8017686:	5c9b      	ldrb	r3, [r3, r2]
 8017688:	b2db      	uxtb	r3, r3
 801768a:	2b22      	cmp	r3, #34	@ 0x22
 801768c:	d109      	bne.n	80176a2 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	681a      	ldr	r2, [r3, #0]
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2180      	movs	r1, #128	@ 0x80
 801769a:	0209      	lsls	r1, r1, #8
 801769c:	430a      	orrs	r2, r1
 801769e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176a0:	e01b      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	681a      	ldr	r2, [r3, #0]
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	2180      	movs	r1, #128	@ 0x80
 80176ae:	01c9      	lsls	r1, r1, #7
 80176b0:	430a      	orrs	r2, r1
 80176b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176b4:	e011      	b.n	80176da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	095b      	lsrs	r3, r3, #5
 80176ba:	001a      	movs	r2, r3
 80176bc:	2301      	movs	r3, #1
 80176be:	4013      	ands	r3, r2
 80176c0:	d00b      	beq.n	80176da <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	095b      	lsrs	r3, r3, #5
 80176c6:	001a      	movs	r2, r3
 80176c8:	2301      	movs	r3, #1
 80176ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176cc:	d005      	beq.n	80176da <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80176ce:	68ba      	ldr	r2, [r7, #8]
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	0011      	movs	r1, r2
 80176d4:	0018      	movs	r0, r3
 80176d6:	f000 fb15 	bl	8017d04 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	2240      	movs	r2, #64	@ 0x40
 80176de:	2100      	movs	r1, #0
 80176e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80176e2:	2300      	movs	r3, #0
}
 80176e4:	0018      	movs	r0, r3
 80176e6:	46bd      	mov	sp, r7
 80176e8:	b007      	add	sp, #28
 80176ea:	bd90      	pop	{r4, r7, pc}
 80176ec:	80002000 	.word	0x80002000
 80176f0:	80002400 	.word	0x80002400

080176f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b088      	sub	sp, #32
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	60f8      	str	r0, [r7, #12]
 80176fc:	60b9      	str	r1, [r7, #8]
 80176fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017704:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8017706:	2300      	movs	r3, #0
 8017708:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	2240      	movs	r2, #64	@ 0x40
 801770e:	5c9b      	ldrb	r3, [r3, r2]
 8017710:	2b01      	cmp	r3, #1
 8017712:	d101      	bne.n	8017718 <I2C_Slave_ISR_DMA+0x24>
 8017714:	2302      	movs	r3, #2
 8017716:	e0dd      	b.n	80178d4 <I2C_Slave_ISR_DMA+0x1e0>
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	2240      	movs	r2, #64	@ 0x40
 801771c:	2101      	movs	r1, #1
 801771e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	095b      	lsrs	r3, r3, #5
 8017724:	001a      	movs	r2, r3
 8017726:	2301      	movs	r3, #1
 8017728:	4013      	ands	r3, r2
 801772a:	d00b      	beq.n	8017744 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	095b      	lsrs	r3, r3, #5
 8017730:	001a      	movs	r2, r3
 8017732:	2301      	movs	r3, #1
 8017734:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017736:	d005      	beq.n	8017744 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8017738:	68ba      	ldr	r2, [r7, #8]
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	0011      	movs	r1, r2
 801773e:	0018      	movs	r0, r3
 8017740:	f000 fbb2 	bl	8017ea8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017744:	68bb      	ldr	r3, [r7, #8]
 8017746:	091b      	lsrs	r3, r3, #4
 8017748:	001a      	movs	r2, r3
 801774a:	2301      	movs	r3, #1
 801774c:	4013      	ands	r3, r2
 801774e:	d100      	bne.n	8017752 <I2C_Slave_ISR_DMA+0x5e>
 8017750:	e0a9      	b.n	80178a6 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	091b      	lsrs	r3, r3, #4
 8017756:	001a      	movs	r2, r3
 8017758:	2301      	movs	r3, #1
 801775a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801775c:	d100      	bne.n	8017760 <I2C_Slave_ISR_DMA+0x6c>
 801775e:	e0a2      	b.n	80178a6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	0b9b      	lsrs	r3, r3, #14
 8017764:	001a      	movs	r2, r3
 8017766:	2301      	movs	r3, #1
 8017768:	4013      	ands	r3, r2
 801776a:	d106      	bne.n	801777a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	0bdb      	lsrs	r3, r3, #15
 8017770:	001a      	movs	r2, r3
 8017772:	2301      	movs	r3, #1
 8017774:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017776:	d100      	bne.n	801777a <I2C_Slave_ISR_DMA+0x86>
 8017778:	e08e      	b.n	8017898 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801777e:	2b00      	cmp	r3, #0
 8017780:	d00d      	beq.n	801779e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	0bdb      	lsrs	r3, r3, #15
 8017786:	001a      	movs	r2, r3
 8017788:	2301      	movs	r3, #1
 801778a:	4013      	ands	r3, r2
 801778c:	d007      	beq.n	801779e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d101      	bne.n	801779e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 801779a:	2301      	movs	r3, #1
 801779c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d00d      	beq.n	80177c2 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	0b9b      	lsrs	r3, r3, #14
 80177aa:	001a      	movs	r2, r3
 80177ac:	2301      	movs	r3, #1
 80177ae:	4013      	ands	r3, r2
 80177b0:	d007      	beq.n	80177c2 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d101      	bne.n	80177c2 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80177be:	2301      	movs	r3, #1
 80177c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	2b01      	cmp	r3, #1
 80177c6:	d12d      	bne.n	8017824 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	2241      	movs	r2, #65	@ 0x41
 80177cc:	5c9b      	ldrb	r3, [r3, r2]
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	2b28      	cmp	r3, #40	@ 0x28
 80177d2:	d10b      	bne.n	80177ec <I2C_Slave_ISR_DMA+0xf8>
 80177d4:	69ba      	ldr	r2, [r7, #24]
 80177d6:	2380      	movs	r3, #128	@ 0x80
 80177d8:	049b      	lsls	r3, r3, #18
 80177da:	429a      	cmp	r2, r3
 80177dc:	d106      	bne.n	80177ec <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80177de:	68ba      	ldr	r2, [r7, #8]
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	0011      	movs	r1, r2
 80177e4:	0018      	movs	r0, r3
 80177e6:	f000 fc83 	bl	80180f0 <I2C_ITListenCplt>
 80177ea:	e054      	b.n	8017896 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2241      	movs	r2, #65	@ 0x41
 80177f0:	5c9b      	ldrb	r3, [r3, r2]
 80177f2:	b2db      	uxtb	r3, r3
 80177f4:	2b29      	cmp	r3, #41	@ 0x29
 80177f6:	d110      	bne.n	801781a <I2C_Slave_ISR_DMA+0x126>
 80177f8:	69bb      	ldr	r3, [r7, #24]
 80177fa:	4a38      	ldr	r2, [pc, #224]	@ (80178dc <I2C_Slave_ISR_DMA+0x1e8>)
 80177fc:	4293      	cmp	r3, r2
 80177fe:	d00c      	beq.n	801781a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	2210      	movs	r2, #16
 8017806:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	0018      	movs	r0, r3
 801780c:	f000 fdf5 	bl	80183fa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	0018      	movs	r0, r3
 8017814:	f000 fa10 	bl	8017c38 <I2C_ITSlaveSeqCplt>
 8017818:	e03d      	b.n	8017896 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2210      	movs	r2, #16
 8017820:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8017822:	e03e      	b.n	80178a2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	2210      	movs	r2, #16
 801782a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017830:	2204      	movs	r2, #4
 8017832:	431a      	orrs	r2, r3
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017838:	2317      	movs	r3, #23
 801783a:	18fb      	adds	r3, r7, r3
 801783c:	68fa      	ldr	r2, [r7, #12]
 801783e:	2141      	movs	r1, #65	@ 0x41
 8017840:	5c52      	ldrb	r2, [r2, r1]
 8017842:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017844:	69bb      	ldr	r3, [r7, #24]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d004      	beq.n	8017854 <I2C_Slave_ISR_DMA+0x160>
 801784a:	69ba      	ldr	r2, [r7, #24]
 801784c:	2380      	movs	r3, #128	@ 0x80
 801784e:	045b      	lsls	r3, r3, #17
 8017850:	429a      	cmp	r2, r3
 8017852:	d126      	bne.n	80178a2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017854:	2217      	movs	r2, #23
 8017856:	18bb      	adds	r3, r7, r2
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	2b21      	cmp	r3, #33	@ 0x21
 801785c:	d003      	beq.n	8017866 <I2C_Slave_ISR_DMA+0x172>
 801785e:	18bb      	adds	r3, r7, r2
 8017860:	781b      	ldrb	r3, [r3, #0]
 8017862:	2b29      	cmp	r3, #41	@ 0x29
 8017864:	d103      	bne.n	801786e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	2221      	movs	r2, #33	@ 0x21
 801786a:	631a      	str	r2, [r3, #48]	@ 0x30
 801786c:	e00b      	b.n	8017886 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801786e:	2217      	movs	r2, #23
 8017870:	18bb      	adds	r3, r7, r2
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	2b22      	cmp	r3, #34	@ 0x22
 8017876:	d003      	beq.n	8017880 <I2C_Slave_ISR_DMA+0x18c>
 8017878:	18bb      	adds	r3, r7, r2
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	2b2a      	cmp	r3, #42	@ 0x2a
 801787e:	d102      	bne.n	8017886 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	2222      	movs	r2, #34	@ 0x22
 8017884:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	0011      	movs	r1, r2
 801788e:	0018      	movs	r0, r3
 8017890:	f000 fc88 	bl	80181a4 <I2C_ITError>
      if (treatdmanack == 1U)
 8017894:	e005      	b.n	80178a2 <I2C_Slave_ISR_DMA+0x1ae>
 8017896:	e004      	b.n	80178a2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2210      	movs	r2, #16
 801789e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80178a0:	e013      	b.n	80178ca <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 80178a2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80178a4:	e011      	b.n	80178ca <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	08db      	lsrs	r3, r3, #3
 80178aa:	001a      	movs	r2, r3
 80178ac:	2301      	movs	r3, #1
 80178ae:	4013      	ands	r3, r2
 80178b0:	d00b      	beq.n	80178ca <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	08db      	lsrs	r3, r3, #3
 80178b6:	001a      	movs	r2, r3
 80178b8:	2301      	movs	r3, #1
 80178ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80178bc:	d005      	beq.n	80178ca <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80178be:	68ba      	ldr	r2, [r7, #8]
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	0011      	movs	r1, r2
 80178c4:	0018      	movs	r0, r3
 80178c6:	f000 f8d1 	bl	8017a6c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	2240      	movs	r2, #64	@ 0x40
 80178ce:	2100      	movs	r1, #0
 80178d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80178d2:	2300      	movs	r3, #0
}
 80178d4:	0018      	movs	r0, r3
 80178d6:	46bd      	mov	sp, r7
 80178d8:	b008      	add	sp, #32
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	ffff0000 	.word	0xffff0000

080178e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80178e0:	b5b0      	push	{r4, r5, r7, lr}
 80178e2:	b086      	sub	sp, #24
 80178e4:	af02      	add	r7, sp, #8
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	000c      	movs	r4, r1
 80178ea:	0010      	movs	r0, r2
 80178ec:	0019      	movs	r1, r3
 80178ee:	250a      	movs	r5, #10
 80178f0:	197b      	adds	r3, r7, r5
 80178f2:	1c22      	adds	r2, r4, #0
 80178f4:	801a      	strh	r2, [r3, #0]
 80178f6:	2308      	movs	r3, #8
 80178f8:	18fb      	adds	r3, r7, r3
 80178fa:	1c02      	adds	r2, r0, #0
 80178fc:	801a      	strh	r2, [r3, #0]
 80178fe:	1dbb      	adds	r3, r7, #6
 8017900:	1c0a      	adds	r2, r1, #0
 8017902:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8017904:	1dbb      	adds	r3, r7, #6
 8017906:	881b      	ldrh	r3, [r3, #0]
 8017908:	b2da      	uxtb	r2, r3
 801790a:	2380      	movs	r3, #128	@ 0x80
 801790c:	045c      	lsls	r4, r3, #17
 801790e:	197b      	adds	r3, r7, r5
 8017910:	8819      	ldrh	r1, [r3, #0]
 8017912:	68f8      	ldr	r0, [r7, #12]
 8017914:	4b23      	ldr	r3, [pc, #140]	@ (80179a4 <I2C_RequestMemoryWrite+0xc4>)
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	0023      	movs	r3, r4
 801791a:	f001 f8bb 	bl	8018a94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801791e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017920:	6a39      	ldr	r1, [r7, #32]
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	0018      	movs	r0, r3
 8017926:	f000 feb1 	bl	801868c <I2C_WaitOnTXISFlagUntilTimeout>
 801792a:	1e03      	subs	r3, r0, #0
 801792c:	d001      	beq.n	8017932 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 801792e:	2301      	movs	r3, #1
 8017930:	e033      	b.n	801799a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017932:	1dbb      	adds	r3, r7, #6
 8017934:	881b      	ldrh	r3, [r3, #0]
 8017936:	2b01      	cmp	r3, #1
 8017938:	d107      	bne.n	801794a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801793a:	2308      	movs	r3, #8
 801793c:	18fb      	adds	r3, r7, r3
 801793e:	881b      	ldrh	r3, [r3, #0]
 8017940:	b2da      	uxtb	r2, r3
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	629a      	str	r2, [r3, #40]	@ 0x28
 8017948:	e019      	b.n	801797e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801794a:	2308      	movs	r3, #8
 801794c:	18fb      	adds	r3, r7, r3
 801794e:	881b      	ldrh	r3, [r3, #0]
 8017950:	0a1b      	lsrs	r3, r3, #8
 8017952:	b29b      	uxth	r3, r3
 8017954:	b2da      	uxtb	r2, r3
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801795c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801795e:	6a39      	ldr	r1, [r7, #32]
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	0018      	movs	r0, r3
 8017964:	f000 fe92 	bl	801868c <I2C_WaitOnTXISFlagUntilTimeout>
 8017968:	1e03      	subs	r3, r0, #0
 801796a:	d001      	beq.n	8017970 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 801796c:	2301      	movs	r3, #1
 801796e:	e014      	b.n	801799a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017970:	2308      	movs	r3, #8
 8017972:	18fb      	adds	r3, r7, r3
 8017974:	881b      	ldrh	r3, [r3, #0]
 8017976:	b2da      	uxtb	r2, r3
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801797e:	6a3a      	ldr	r2, [r7, #32]
 8017980:	68f8      	ldr	r0, [r7, #12]
 8017982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017984:	9300      	str	r3, [sp, #0]
 8017986:	0013      	movs	r3, r2
 8017988:	2200      	movs	r2, #0
 801798a:	2180      	movs	r1, #128	@ 0x80
 801798c:	f000 fe30 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8017990:	1e03      	subs	r3, r0, #0
 8017992:	d001      	beq.n	8017998 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8017994:	2301      	movs	r3, #1
 8017996:	e000      	b.n	801799a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8017998:	2300      	movs	r3, #0
}
 801799a:	0018      	movs	r0, r3
 801799c:	46bd      	mov	sp, r7
 801799e:	b004      	add	sp, #16
 80179a0:	bdb0      	pop	{r4, r5, r7, pc}
 80179a2:	46c0      	nop			@ (mov r8, r8)
 80179a4:	80002000 	.word	0x80002000

080179a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80179a8:	b5b0      	push	{r4, r5, r7, lr}
 80179aa:	b086      	sub	sp, #24
 80179ac:	af02      	add	r7, sp, #8
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	000c      	movs	r4, r1
 80179b2:	0010      	movs	r0, r2
 80179b4:	0019      	movs	r1, r3
 80179b6:	250a      	movs	r5, #10
 80179b8:	197b      	adds	r3, r7, r5
 80179ba:	1c22      	adds	r2, r4, #0
 80179bc:	801a      	strh	r2, [r3, #0]
 80179be:	2308      	movs	r3, #8
 80179c0:	18fb      	adds	r3, r7, r3
 80179c2:	1c02      	adds	r2, r0, #0
 80179c4:	801a      	strh	r2, [r3, #0]
 80179c6:	1dbb      	adds	r3, r7, #6
 80179c8:	1c0a      	adds	r2, r1, #0
 80179ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80179cc:	1dbb      	adds	r3, r7, #6
 80179ce:	881b      	ldrh	r3, [r3, #0]
 80179d0:	b2da      	uxtb	r2, r3
 80179d2:	197b      	adds	r3, r7, r5
 80179d4:	8819      	ldrh	r1, [r3, #0]
 80179d6:	68f8      	ldr	r0, [r7, #12]
 80179d8:	4b23      	ldr	r3, [pc, #140]	@ (8017a68 <I2C_RequestMemoryRead+0xc0>)
 80179da:	9300      	str	r3, [sp, #0]
 80179dc:	2300      	movs	r3, #0
 80179de:	f001 f859 	bl	8018a94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179e4:	6a39      	ldr	r1, [r7, #32]
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	0018      	movs	r0, r3
 80179ea:	f000 fe4f 	bl	801868c <I2C_WaitOnTXISFlagUntilTimeout>
 80179ee:	1e03      	subs	r3, r0, #0
 80179f0:	d001      	beq.n	80179f6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80179f2:	2301      	movs	r3, #1
 80179f4:	e033      	b.n	8017a5e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80179f6:	1dbb      	adds	r3, r7, #6
 80179f8:	881b      	ldrh	r3, [r3, #0]
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d107      	bne.n	8017a0e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80179fe:	2308      	movs	r3, #8
 8017a00:	18fb      	adds	r3, r7, r3
 8017a02:	881b      	ldrh	r3, [r3, #0]
 8017a04:	b2da      	uxtb	r2, r3
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8017a0c:	e019      	b.n	8017a42 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017a0e:	2308      	movs	r3, #8
 8017a10:	18fb      	adds	r3, r7, r3
 8017a12:	881b      	ldrh	r3, [r3, #0]
 8017a14:	0a1b      	lsrs	r3, r3, #8
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a22:	6a39      	ldr	r1, [r7, #32]
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	0018      	movs	r0, r3
 8017a28:	f000 fe30 	bl	801868c <I2C_WaitOnTXISFlagUntilTimeout>
 8017a2c:	1e03      	subs	r3, r0, #0
 8017a2e:	d001      	beq.n	8017a34 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017a30:	2301      	movs	r3, #1
 8017a32:	e014      	b.n	8017a5e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a34:	2308      	movs	r3, #8
 8017a36:	18fb      	adds	r3, r7, r3
 8017a38:	881b      	ldrh	r3, [r3, #0]
 8017a3a:	b2da      	uxtb	r2, r3
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017a42:	6a3a      	ldr	r2, [r7, #32]
 8017a44:	68f8      	ldr	r0, [r7, #12]
 8017a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a48:	9300      	str	r3, [sp, #0]
 8017a4a:	0013      	movs	r3, r2
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	2140      	movs	r1, #64	@ 0x40
 8017a50:	f000 fdce 	bl	80185f0 <I2C_WaitOnFlagUntilTimeout>
 8017a54:	1e03      	subs	r3, r0, #0
 8017a56:	d001      	beq.n	8017a5c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	e000      	b.n	8017a5e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017a5c:	2300      	movs	r3, #0
}
 8017a5e:	0018      	movs	r0, r3
 8017a60:	46bd      	mov	sp, r7
 8017a62:	b004      	add	sp, #16
 8017a64:	bdb0      	pop	{r4, r5, r7, pc}
 8017a66:	46c0      	nop			@ (mov r8, r8)
 8017a68:	80002000 	.word	0x80002000

08017a6c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017a6c:	b5b0      	push	{r4, r5, r7, lr}
 8017a6e:	b084      	sub	sp, #16
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
 8017a74:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2241      	movs	r2, #65	@ 0x41
 8017a7a:	5c9b      	ldrb	r3, [r3, r2]
 8017a7c:	b2db      	uxtb	r3, r3
 8017a7e:	001a      	movs	r2, r3
 8017a80:	2328      	movs	r3, #40	@ 0x28
 8017a82:	4013      	ands	r3, r2
 8017a84:	2b28      	cmp	r3, #40	@ 0x28
 8017a86:	d000      	beq.n	8017a8a <I2C_ITAddrCplt+0x1e>
 8017a88:	e088      	b.n	8017b9c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	699b      	ldr	r3, [r3, #24]
 8017a90:	0c1b      	lsrs	r3, r3, #16
 8017a92:	b2da      	uxtb	r2, r3
 8017a94:	250f      	movs	r5, #15
 8017a96:	197b      	adds	r3, r7, r5
 8017a98:	2101      	movs	r1, #1
 8017a9a:	400a      	ands	r2, r1
 8017a9c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	699b      	ldr	r3, [r3, #24]
 8017aa4:	0c1b      	lsrs	r3, r3, #16
 8017aa6:	b29a      	uxth	r2, r3
 8017aa8:	200c      	movs	r0, #12
 8017aaa:	183b      	adds	r3, r7, r0
 8017aac:	21fe      	movs	r1, #254	@ 0xfe
 8017aae:	400a      	ands	r2, r1
 8017ab0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	689b      	ldr	r3, [r3, #8]
 8017ab8:	b29a      	uxth	r2, r3
 8017aba:	240a      	movs	r4, #10
 8017abc:	193b      	adds	r3, r7, r4
 8017abe:	0592      	lsls	r2, r2, #22
 8017ac0:	0d92      	lsrs	r2, r2, #22
 8017ac2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	68db      	ldr	r3, [r3, #12]
 8017aca:	b29a      	uxth	r2, r3
 8017acc:	2308      	movs	r3, #8
 8017ace:	18fb      	adds	r3, r7, r3
 8017ad0:	21fe      	movs	r1, #254	@ 0xfe
 8017ad2:	400a      	ands	r2, r1
 8017ad4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	2b02      	cmp	r3, #2
 8017adc:	d148      	bne.n	8017b70 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017ade:	0021      	movs	r1, r4
 8017ae0:	187b      	adds	r3, r7, r1
 8017ae2:	881b      	ldrh	r3, [r3, #0]
 8017ae4:	09db      	lsrs	r3, r3, #7
 8017ae6:	b29a      	uxth	r2, r3
 8017ae8:	183b      	adds	r3, r7, r0
 8017aea:	881b      	ldrh	r3, [r3, #0]
 8017aec:	4053      	eors	r3, r2
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	001a      	movs	r2, r3
 8017af2:	2306      	movs	r3, #6
 8017af4:	4013      	ands	r3, r2
 8017af6:	d120      	bne.n	8017b3a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017af8:	183b      	adds	r3, r7, r0
 8017afa:	187a      	adds	r2, r7, r1
 8017afc:	8812      	ldrh	r2, [r2, #0]
 8017afe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b04:	1c5a      	adds	r2, r3, #1
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b0e:	2b02      	cmp	r3, #2
 8017b10:	d14c      	bne.n	8017bac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	2200      	movs	r2, #0
 8017b16:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2208      	movs	r2, #8
 8017b1e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	2240      	movs	r2, #64	@ 0x40
 8017b24:	2100      	movs	r1, #0
 8017b26:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b28:	183b      	adds	r3, r7, r0
 8017b2a:	881a      	ldrh	r2, [r3, #0]
 8017b2c:	197b      	adds	r3, r7, r5
 8017b2e:	7819      	ldrb	r1, [r3, #0]
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	0018      	movs	r0, r3
 8017b34:	f7ff f914 	bl	8016d60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017b38:	e038      	b.n	8017bac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017b3a:	240c      	movs	r4, #12
 8017b3c:	193b      	adds	r3, r7, r4
 8017b3e:	2208      	movs	r2, #8
 8017b40:	18ba      	adds	r2, r7, r2
 8017b42:	8812      	ldrh	r2, [r2, #0]
 8017b44:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017b46:	2380      	movs	r3, #128	@ 0x80
 8017b48:	021a      	lsls	r2, r3, #8
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	0011      	movs	r1, r2
 8017b4e:	0018      	movs	r0, r3
 8017b50:	f001 f868 	bl	8018c24 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2240      	movs	r2, #64	@ 0x40
 8017b58:	2100      	movs	r1, #0
 8017b5a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b5c:	193b      	adds	r3, r7, r4
 8017b5e:	881a      	ldrh	r2, [r3, #0]
 8017b60:	230f      	movs	r3, #15
 8017b62:	18fb      	adds	r3, r7, r3
 8017b64:	7819      	ldrb	r1, [r3, #0]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	0018      	movs	r0, r3
 8017b6a:	f7ff f8f9 	bl	8016d60 <HAL_I2C_AddrCallback>
}
 8017b6e:	e01d      	b.n	8017bac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017b70:	2380      	movs	r3, #128	@ 0x80
 8017b72:	021a      	lsls	r2, r3, #8
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	0011      	movs	r1, r2
 8017b78:	0018      	movs	r0, r3
 8017b7a:	f001 f853 	bl	8018c24 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2240      	movs	r2, #64	@ 0x40
 8017b82:	2100      	movs	r1, #0
 8017b84:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b86:	230c      	movs	r3, #12
 8017b88:	18fb      	adds	r3, r7, r3
 8017b8a:	881a      	ldrh	r2, [r3, #0]
 8017b8c:	230f      	movs	r3, #15
 8017b8e:	18fb      	adds	r3, r7, r3
 8017b90:	7819      	ldrb	r1, [r3, #0]
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	0018      	movs	r0, r3
 8017b96:	f7ff f8e3 	bl	8016d60 <HAL_I2C_AddrCallback>
}
 8017b9a:	e007      	b.n	8017bac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2208      	movs	r2, #8
 8017ba2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2240      	movs	r2, #64	@ 0x40
 8017ba8:	2100      	movs	r1, #0
 8017baa:	5499      	strb	r1, [r3, r2]
}
 8017bac:	46c0      	nop			@ (mov r8, r8)
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	b004      	add	sp, #16
 8017bb2:	bdb0      	pop	{r4, r5, r7, pc}

08017bb4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2242      	movs	r2, #66	@ 0x42
 8017bc0:	2100      	movs	r1, #0
 8017bc2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2241      	movs	r2, #65	@ 0x41
 8017bc8:	5c9b      	ldrb	r3, [r3, r2]
 8017bca:	b2db      	uxtb	r3, r3
 8017bcc:	2b21      	cmp	r3, #33	@ 0x21
 8017bce:	d117      	bne.n	8017c00 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	2241      	movs	r2, #65	@ 0x41
 8017bd4:	2120      	movs	r1, #32
 8017bd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2211      	movs	r2, #17
 8017bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2200      	movs	r2, #0
 8017be2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	2101      	movs	r1, #1
 8017be8:	0018      	movs	r0, r3
 8017bea:	f001 f81b 	bl	8018c24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2240      	movs	r2, #64	@ 0x40
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	0018      	movs	r0, r3
 8017bfa:	f7ff f891 	bl	8016d20 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017bfe:	e016      	b.n	8017c2e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2241      	movs	r2, #65	@ 0x41
 8017c04:	2120      	movs	r1, #32
 8017c06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	2212      	movs	r2, #18
 8017c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	2200      	movs	r2, #0
 8017c12:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	2102      	movs	r1, #2
 8017c18:	0018      	movs	r0, r3
 8017c1a:	f001 f803 	bl	8018c24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2240      	movs	r2, #64	@ 0x40
 8017c22:	2100      	movs	r1, #0
 8017c24:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	0018      	movs	r0, r3
 8017c2a:	f7ff f881 	bl	8016d30 <HAL_I2C_MasterRxCpltCallback>
}
 8017c2e:	46c0      	nop			@ (mov r8, r8)
 8017c30:	46bd      	mov	sp, r7
 8017c32:	b002      	add	sp, #8
 8017c34:	bd80      	pop	{r7, pc}
	...

08017c38 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b084      	sub	sp, #16
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2242      	movs	r2, #66	@ 0x42
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	0b9b      	lsrs	r3, r3, #14
 8017c54:	001a      	movs	r2, r3
 8017c56:	2301      	movs	r3, #1
 8017c58:	4013      	ands	r3, r2
 8017c5a:	d008      	beq.n	8017c6e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	681a      	ldr	r2, [r3, #0]
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4925      	ldr	r1, [pc, #148]	@ (8017cfc <I2C_ITSlaveSeqCplt+0xc4>)
 8017c68:	400a      	ands	r2, r1
 8017c6a:	601a      	str	r2, [r3, #0]
 8017c6c:	e00d      	b.n	8017c8a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	0bdb      	lsrs	r3, r3, #15
 8017c72:	001a      	movs	r2, r3
 8017c74:	2301      	movs	r3, #1
 8017c76:	4013      	ands	r3, r2
 8017c78:	d007      	beq.n	8017c8a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	491e      	ldr	r1, [pc, #120]	@ (8017d00 <I2C_ITSlaveSeqCplt+0xc8>)
 8017c86:	400a      	ands	r2, r1
 8017c88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	2241      	movs	r2, #65	@ 0x41
 8017c8e:	5c9b      	ldrb	r3, [r3, r2]
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	2b29      	cmp	r3, #41	@ 0x29
 8017c94:	d114      	bne.n	8017cc0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2241      	movs	r2, #65	@ 0x41
 8017c9a:	2128      	movs	r1, #40	@ 0x28
 8017c9c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2221      	movs	r2, #33	@ 0x21
 8017ca2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2101      	movs	r1, #1
 8017ca8:	0018      	movs	r0, r3
 8017caa:	f000 ffbb 	bl	8018c24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	2240      	movs	r2, #64	@ 0x40
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	0018      	movs	r0, r3
 8017cba:	f7ff f841 	bl	8016d40 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017cbe:	e019      	b.n	8017cf4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2241      	movs	r2, #65	@ 0x41
 8017cc4:	5c9b      	ldrb	r3, [r3, r2]
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017cca:	d113      	bne.n	8017cf4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2241      	movs	r2, #65	@ 0x41
 8017cd0:	2128      	movs	r1, #40	@ 0x28
 8017cd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2222      	movs	r2, #34	@ 0x22
 8017cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	2102      	movs	r1, #2
 8017cde:	0018      	movs	r0, r3
 8017ce0:	f000 ffa0 	bl	8018c24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	2240      	movs	r2, #64	@ 0x40
 8017ce8:	2100      	movs	r1, #0
 8017cea:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	0018      	movs	r0, r3
 8017cf0:	f7ff f82e 	bl	8016d50 <HAL_I2C_SlaveRxCpltCallback>
}
 8017cf4:	46c0      	nop			@ (mov r8, r8)
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	b004      	add	sp, #16
 8017cfa:	bd80      	pop	{r7, pc}
 8017cfc:	ffffbfff 	.word	0xffffbfff
 8017d00:	ffff7fff 	.word	0xffff7fff

08017d04 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017d0e:	683b      	ldr	r3, [r7, #0]
 8017d10:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2220      	movs	r2, #32
 8017d18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2241      	movs	r2, #65	@ 0x41
 8017d1e:	5c9b      	ldrb	r3, [r3, r2]
 8017d20:	b2db      	uxtb	r3, r3
 8017d22:	2b21      	cmp	r3, #33	@ 0x21
 8017d24:	d108      	bne.n	8017d38 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2101      	movs	r1, #1
 8017d2a:	0018      	movs	r0, r3
 8017d2c:	f000 ff7a 	bl	8018c24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2211      	movs	r2, #17
 8017d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8017d36:	e00d      	b.n	8017d54 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2241      	movs	r2, #65	@ 0x41
 8017d3c:	5c9b      	ldrb	r3, [r3, r2]
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	2b22      	cmp	r3, #34	@ 0x22
 8017d42:	d107      	bne.n	8017d54 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	2102      	movs	r1, #2
 8017d48:	0018      	movs	r0, r3
 8017d4a:	f000 ff6b 	bl	8018c24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2212      	movs	r2, #18
 8017d52:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	685a      	ldr	r2, [r3, #4]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	4950      	ldr	r1, [pc, #320]	@ (8017ea0 <I2C_ITMasterCplt+0x19c>)
 8017d60:	400a      	ands	r2, r1
 8017d62:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2200      	movs	r2, #0
 8017d68:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4a4d      	ldr	r2, [pc, #308]	@ (8017ea4 <I2C_ITMasterCplt+0x1a0>)
 8017d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017d70:	697b      	ldr	r3, [r7, #20]
 8017d72:	091b      	lsrs	r3, r3, #4
 8017d74:	001a      	movs	r2, r3
 8017d76:	2301      	movs	r3, #1
 8017d78:	4013      	ands	r3, r2
 8017d7a:	d009      	beq.n	8017d90 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	2210      	movs	r2, #16
 8017d82:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d88:	2204      	movs	r2, #4
 8017d8a:	431a      	orrs	r2, r3
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2241      	movs	r2, #65	@ 0x41
 8017d94:	5c9b      	ldrb	r3, [r3, r2]
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	2b60      	cmp	r3, #96	@ 0x60
 8017d9a:	d10b      	bne.n	8017db4 <I2C_ITMasterCplt+0xb0>
 8017d9c:	697b      	ldr	r3, [r7, #20]
 8017d9e:	089b      	lsrs	r3, r3, #2
 8017da0:	001a      	movs	r2, r3
 8017da2:	2301      	movs	r3, #1
 8017da4:	4013      	ands	r3, r2
 8017da6:	d005      	beq.n	8017db4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dae:	b2db      	uxtb	r3, r3
 8017db0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017db2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	0018      	movs	r0, r3
 8017db8:	f000 fb1f 	bl	80183fa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017dc0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2241      	movs	r2, #65	@ 0x41
 8017dc6:	5c9b      	ldrb	r3, [r3, r2]
 8017dc8:	b2db      	uxtb	r3, r3
 8017dca:	2b60      	cmp	r3, #96	@ 0x60
 8017dcc:	d002      	beq.n	8017dd4 <I2C_ITMasterCplt+0xd0>
 8017dce:	693b      	ldr	r3, [r7, #16]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d007      	beq.n	8017de4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	0011      	movs	r1, r2
 8017ddc:	0018      	movs	r0, r3
 8017dde:	f000 f9e1 	bl	80181a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017de2:	e058      	b.n	8017e96 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2241      	movs	r2, #65	@ 0x41
 8017de8:	5c9b      	ldrb	r3, [r3, r2]
 8017dea:	b2db      	uxtb	r3, r3
 8017dec:	2b21      	cmp	r3, #33	@ 0x21
 8017dee:	d126      	bne.n	8017e3e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2241      	movs	r2, #65	@ 0x41
 8017df4:	2120      	movs	r1, #32
 8017df6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2242      	movs	r2, #66	@ 0x42
 8017e02:	5c9b      	ldrb	r3, [r3, r2]
 8017e04:	b2db      	uxtb	r3, r3
 8017e06:	2b40      	cmp	r3, #64	@ 0x40
 8017e08:	d10c      	bne.n	8017e24 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2242      	movs	r2, #66	@ 0x42
 8017e0e:	2100      	movs	r1, #0
 8017e10:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	2240      	movs	r2, #64	@ 0x40
 8017e16:	2100      	movs	r1, #0
 8017e18:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	0018      	movs	r0, r3
 8017e1e:	f7fe ffb7 	bl	8016d90 <HAL_I2C_MemTxCpltCallback>
}
 8017e22:	e038      	b.n	8017e96 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2242      	movs	r2, #66	@ 0x42
 8017e28:	2100      	movs	r1, #0
 8017e2a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2240      	movs	r2, #64	@ 0x40
 8017e30:	2100      	movs	r1, #0
 8017e32:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	0018      	movs	r0, r3
 8017e38:	f7fe ff72 	bl	8016d20 <HAL_I2C_MasterTxCpltCallback>
}
 8017e3c:	e02b      	b.n	8017e96 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2241      	movs	r2, #65	@ 0x41
 8017e42:	5c9b      	ldrb	r3, [r3, r2]
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	2b22      	cmp	r3, #34	@ 0x22
 8017e48:	d125      	bne.n	8017e96 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2241      	movs	r2, #65	@ 0x41
 8017e4e:	2120      	movs	r1, #32
 8017e50:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	2200      	movs	r2, #0
 8017e56:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2242      	movs	r2, #66	@ 0x42
 8017e5c:	5c9b      	ldrb	r3, [r3, r2]
 8017e5e:	b2db      	uxtb	r3, r3
 8017e60:	2b40      	cmp	r3, #64	@ 0x40
 8017e62:	d10c      	bne.n	8017e7e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2242      	movs	r2, #66	@ 0x42
 8017e68:	2100      	movs	r1, #0
 8017e6a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	2240      	movs	r2, #64	@ 0x40
 8017e70:	2100      	movs	r1, #0
 8017e72:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	0018      	movs	r0, r3
 8017e78:	f7fe ff92 	bl	8016da0 <HAL_I2C_MemRxCpltCallback>
}
 8017e7c:	e00b      	b.n	8017e96 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2242      	movs	r2, #66	@ 0x42
 8017e82:	2100      	movs	r1, #0
 8017e84:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2240      	movs	r2, #64	@ 0x40
 8017e8a:	2100      	movs	r1, #0
 8017e8c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	0018      	movs	r0, r3
 8017e92:	f7fe ff4d 	bl	8016d30 <HAL_I2C_MasterRxCpltCallback>
}
 8017e96:	46c0      	nop			@ (mov r8, r8)
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	b006      	add	sp, #24
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	46c0      	nop			@ (mov r8, r8)
 8017ea0:	fe00e800 	.word	0xfe00e800
 8017ea4:	ffff0000 	.word	0xffff0000

08017ea8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b086      	sub	sp, #24
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
 8017eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017ebe:	200f      	movs	r0, #15
 8017ec0:	183b      	adds	r3, r7, r0
 8017ec2:	687a      	ldr	r2, [r7, #4]
 8017ec4:	2141      	movs	r1, #65	@ 0x41
 8017ec6:	5c52      	ldrb	r2, [r2, r1]
 8017ec8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	2220      	movs	r2, #32
 8017ed0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017ed2:	183b      	adds	r3, r7, r0
 8017ed4:	781b      	ldrb	r3, [r3, #0]
 8017ed6:	2b21      	cmp	r3, #33	@ 0x21
 8017ed8:	d003      	beq.n	8017ee2 <I2C_ITSlaveCplt+0x3a>
 8017eda:	183b      	adds	r3, r7, r0
 8017edc:	781b      	ldrb	r3, [r3, #0]
 8017ede:	2b29      	cmp	r3, #41	@ 0x29
 8017ee0:	d109      	bne.n	8017ef6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80180d8 <I2C_ITSlaveCplt+0x230>)
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	0011      	movs	r1, r2
 8017ee8:	0018      	movs	r0, r3
 8017eea:	f000 fe9b 	bl	8018c24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2221      	movs	r2, #33	@ 0x21
 8017ef2:	631a      	str	r2, [r3, #48]	@ 0x30
 8017ef4:	e011      	b.n	8017f1a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017ef6:	220f      	movs	r2, #15
 8017ef8:	18bb      	adds	r3, r7, r2
 8017efa:	781b      	ldrb	r3, [r3, #0]
 8017efc:	2b22      	cmp	r3, #34	@ 0x22
 8017efe:	d003      	beq.n	8017f08 <I2C_ITSlaveCplt+0x60>
 8017f00:	18bb      	adds	r3, r7, r2
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f06:	d108      	bne.n	8017f1a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017f08:	4a74      	ldr	r2, [pc, #464]	@ (80180dc <I2C_ITSlaveCplt+0x234>)
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	0011      	movs	r1, r2
 8017f0e:	0018      	movs	r0, r3
 8017f10:	f000 fe88 	bl	8018c24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	2222      	movs	r2, #34	@ 0x22
 8017f18:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	685a      	ldr	r2, [r3, #4]
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	2180      	movs	r1, #128	@ 0x80
 8017f26:	0209      	lsls	r1, r1, #8
 8017f28:	430a      	orrs	r2, r1
 8017f2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	685a      	ldr	r2, [r3, #4]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	496a      	ldr	r1, [pc, #424]	@ (80180e0 <I2C_ITSlaveCplt+0x238>)
 8017f38:	400a      	ands	r2, r1
 8017f3a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	0018      	movs	r0, r3
 8017f40:	f000 fa5b 	bl	80183fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	0b9b      	lsrs	r3, r3, #14
 8017f48:	001a      	movs	r2, r3
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	4013      	ands	r3, r2
 8017f4e:	d013      	beq.n	8017f78 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	681a      	ldr	r2, [r3, #0]
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	4962      	ldr	r1, [pc, #392]	@ (80180e4 <I2C_ITSlaveCplt+0x23c>)
 8017f5c:	400a      	ands	r2, r1
 8017f5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d020      	beq.n	8017faa <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	b29a      	uxth	r2, r3
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017f76:	e018      	b.n	8017faa <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	0bdb      	lsrs	r3, r3, #15
 8017f7c:	001a      	movs	r2, r3
 8017f7e:	2301      	movs	r3, #1
 8017f80:	4013      	ands	r3, r2
 8017f82:	d012      	beq.n	8017faa <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	681a      	ldr	r2, [r3, #0]
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	4956      	ldr	r1, [pc, #344]	@ (80180e8 <I2C_ITSlaveCplt+0x240>)
 8017f90:	400a      	ands	r2, r1
 8017f92:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d006      	beq.n	8017faa <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	685b      	ldr	r3, [r3, #4]
 8017fa4:	b29a      	uxth	r2, r3
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	089b      	lsrs	r3, r3, #2
 8017fae:	001a      	movs	r2, r3
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	4013      	ands	r3, r2
 8017fb4:	d020      	beq.n	8017ff8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017fb6:	697b      	ldr	r3, [r7, #20]
 8017fb8:	2204      	movs	r2, #4
 8017fba:	4393      	bics	r3, r2
 8017fbc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fc8:	b2d2      	uxtb	r2, r2
 8017fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fd0:	1c5a      	adds	r2, r3, #1
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d00c      	beq.n	8017ff8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fe2:	3b01      	subs	r3, #1
 8017fe4:	b29a      	uxth	r2, r3
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017fee:	b29b      	uxth	r3, r3
 8017ff0:	3b01      	subs	r3, #1
 8017ff2:	b29a      	uxth	r2, r3
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d005      	beq.n	801800e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018006:	2204      	movs	r2, #4
 8018008:	431a      	orrs	r2, r3
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2242      	movs	r2, #66	@ 0x42
 8018012:	2100      	movs	r1, #0
 8018014:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2200      	movs	r2, #0
 801801a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018020:	2b00      	cmp	r3, #0
 8018022:	d013      	beq.n	801804c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	0011      	movs	r1, r2
 801802c:	0018      	movs	r0, r3
 801802e:	f000 f8b9 	bl	80181a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2241      	movs	r2, #65	@ 0x41
 8018036:	5c9b      	ldrb	r3, [r3, r2]
 8018038:	b2db      	uxtb	r3, r3
 801803a:	2b28      	cmp	r3, #40	@ 0x28
 801803c:	d147      	bne.n	80180ce <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801803e:	697a      	ldr	r2, [r7, #20]
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	0011      	movs	r1, r2
 8018044:	0018      	movs	r0, r3
 8018046:	f000 f853 	bl	80180f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801804a:	e040      	b.n	80180ce <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018050:	4a26      	ldr	r2, [pc, #152]	@ (80180ec <I2C_ITSlaveCplt+0x244>)
 8018052:	4293      	cmp	r3, r2
 8018054:	d016      	beq.n	8018084 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	0018      	movs	r0, r3
 801805a:	f7ff fded 	bl	8017c38 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	4a22      	ldr	r2, [pc, #136]	@ (80180ec <I2C_ITSlaveCplt+0x244>)
 8018062:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2241      	movs	r2, #65	@ 0x41
 8018068:	2120      	movs	r1, #32
 801806a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	2200      	movs	r2, #0
 8018070:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	2240      	movs	r2, #64	@ 0x40
 8018076:	2100      	movs	r1, #0
 8018078:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	0018      	movs	r0, r3
 801807e:	f7fe fe7f 	bl	8016d80 <HAL_I2C_ListenCpltCallback>
}
 8018082:	e024      	b.n	80180ce <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2241      	movs	r2, #65	@ 0x41
 8018088:	5c9b      	ldrb	r3, [r3, r2]
 801808a:	b2db      	uxtb	r3, r3
 801808c:	2b22      	cmp	r3, #34	@ 0x22
 801808e:	d10f      	bne.n	80180b0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2241      	movs	r2, #65	@ 0x41
 8018094:	2120      	movs	r1, #32
 8018096:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2200      	movs	r2, #0
 801809c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	2240      	movs	r2, #64	@ 0x40
 80180a2:	2100      	movs	r1, #0
 80180a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	0018      	movs	r0, r3
 80180aa:	f7fe fe51 	bl	8016d50 <HAL_I2C_SlaveRxCpltCallback>
}
 80180ae:	e00e      	b.n	80180ce <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2241      	movs	r2, #65	@ 0x41
 80180b4:	2120      	movs	r1, #32
 80180b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2200      	movs	r2, #0
 80180bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2240      	movs	r2, #64	@ 0x40
 80180c2:	2100      	movs	r1, #0
 80180c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	0018      	movs	r0, r3
 80180ca:	f7fe fe39 	bl	8016d40 <HAL_I2C_SlaveTxCpltCallback>
}
 80180ce:	46c0      	nop			@ (mov r8, r8)
 80180d0:	46bd      	mov	sp, r7
 80180d2:	b006      	add	sp, #24
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	46c0      	nop			@ (mov r8, r8)
 80180d8:	00008001 	.word	0x00008001
 80180dc:	00008002 	.word	0x00008002
 80180e0:	fe00e800 	.word	0xfe00e800
 80180e4:	ffffbfff 	.word	0xffffbfff
 80180e8:	ffff7fff 	.word	0xffff7fff
 80180ec:	ffff0000 	.word	0xffff0000

080180f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	4a27      	ldr	r2, [pc, #156]	@ (801819c <I2C_ITListenCplt+0xac>)
 80180fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2200      	movs	r2, #0
 8018104:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	2241      	movs	r2, #65	@ 0x41
 801810a:	2120      	movs	r1, #32
 801810c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	2242      	movs	r2, #66	@ 0x42
 8018112:	2100      	movs	r1, #0
 8018114:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	2200      	movs	r2, #0
 801811a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801811c:	683b      	ldr	r3, [r7, #0]
 801811e:	089b      	lsrs	r3, r3, #2
 8018120:	001a      	movs	r2, r3
 8018122:	2301      	movs	r3, #1
 8018124:	4013      	ands	r3, r2
 8018126:	d022      	beq.n	801816e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018132:	b2d2      	uxtb	r2, r2
 8018134:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018144:	2b00      	cmp	r3, #0
 8018146:	d012      	beq.n	801816e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801814c:	3b01      	subs	r3, #1
 801814e:	b29a      	uxth	r2, r3
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018158:	b29b      	uxth	r3, r3
 801815a:	3b01      	subs	r3, #1
 801815c:	b29a      	uxth	r2, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018166:	2204      	movs	r2, #4
 8018168:	431a      	orrs	r2, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801816e:	4a0c      	ldr	r2, [pc, #48]	@ (80181a0 <I2C_ITListenCplt+0xb0>)
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	0011      	movs	r1, r2
 8018174:	0018      	movs	r0, r3
 8018176:	f000 fd55 	bl	8018c24 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2210      	movs	r2, #16
 8018180:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	2240      	movs	r2, #64	@ 0x40
 8018186:	2100      	movs	r1, #0
 8018188:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	0018      	movs	r0, r3
 801818e:	f7fe fdf7 	bl	8016d80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8018192:	46c0      	nop			@ (mov r8, r8)
 8018194:	46bd      	mov	sp, r7
 8018196:	b002      	add	sp, #8
 8018198:	bd80      	pop	{r7, pc}
 801819a:	46c0      	nop			@ (mov r8, r8)
 801819c:	ffff0000 	.word	0xffff0000
 80181a0:	00008003 	.word	0x00008003

080181a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
 80181ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80181ae:	200f      	movs	r0, #15
 80181b0:	183b      	adds	r3, r7, r0
 80181b2:	687a      	ldr	r2, [r7, #4]
 80181b4:	2141      	movs	r1, #65	@ 0x41
 80181b6:	5c52      	ldrb	r2, [r2, r1]
 80181b8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	2242      	movs	r2, #66	@ 0x42
 80181be:	2100      	movs	r1, #0
 80181c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	4a72      	ldr	r2, [pc, #456]	@ (8018390 <I2C_ITError+0x1ec>)
 80181c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	2200      	movs	r2, #0
 80181cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	431a      	orrs	r2, r3
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80181da:	183b      	adds	r3, r7, r0
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	2b28      	cmp	r3, #40	@ 0x28
 80181e0:	d007      	beq.n	80181f2 <I2C_ITError+0x4e>
 80181e2:	183b      	adds	r3, r7, r0
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	2b29      	cmp	r3, #41	@ 0x29
 80181e8:	d003      	beq.n	80181f2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80181ea:	183b      	adds	r3, r7, r0
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80181f0:	d10c      	bne.n	801820c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2103      	movs	r1, #3
 80181f6:	0018      	movs	r0, r3
 80181f8:	f000 fd14 	bl	8018c24 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2241      	movs	r2, #65	@ 0x41
 8018200:	2128      	movs	r1, #40	@ 0x28
 8018202:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	4a63      	ldr	r2, [pc, #396]	@ (8018394 <I2C_ITError+0x1f0>)
 8018208:	635a      	str	r2, [r3, #52]	@ 0x34
 801820a:	e032      	b.n	8018272 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801820c:	4a62      	ldr	r2, [pc, #392]	@ (8018398 <I2C_ITError+0x1f4>)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	0011      	movs	r1, r2
 8018212:	0018      	movs	r0, r3
 8018214:	f000 fd06 	bl	8018c24 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	0018      	movs	r0, r3
 801821c:	f000 f8ed 	bl	80183fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2241      	movs	r2, #65	@ 0x41
 8018224:	5c9b      	ldrb	r3, [r3, r2]
 8018226:	b2db      	uxtb	r3, r3
 8018228:	2b60      	cmp	r3, #96	@ 0x60
 801822a:	d01f      	beq.n	801826c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2241      	movs	r2, #65	@ 0x41
 8018230:	2120      	movs	r1, #32
 8018232:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	699b      	ldr	r3, [r3, #24]
 801823a:	2220      	movs	r2, #32
 801823c:	4013      	ands	r3, r2
 801823e:	2b20      	cmp	r3, #32
 8018240:	d114      	bne.n	801826c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	699b      	ldr	r3, [r3, #24]
 8018248:	2210      	movs	r2, #16
 801824a:	4013      	ands	r3, r2
 801824c:	2b10      	cmp	r3, #16
 801824e:	d109      	bne.n	8018264 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2210      	movs	r2, #16
 8018256:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801825c:	2204      	movs	r2, #4
 801825e:	431a      	orrs	r2, r3
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	2220      	movs	r2, #32
 801826a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2200      	movs	r2, #0
 8018270:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018276:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801827c:	2b00      	cmp	r3, #0
 801827e:	d03b      	beq.n	80182f8 <I2C_ITError+0x154>
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	2b11      	cmp	r3, #17
 8018284:	d002      	beq.n	801828c <I2C_ITError+0xe8>
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	2b21      	cmp	r3, #33	@ 0x21
 801828a:	d135      	bne.n	80182f8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	681a      	ldr	r2, [r3, #0]
 8018292:	2380      	movs	r3, #128	@ 0x80
 8018294:	01db      	lsls	r3, r3, #7
 8018296:	401a      	ands	r2, r3
 8018298:	2380      	movs	r3, #128	@ 0x80
 801829a:	01db      	lsls	r3, r3, #7
 801829c:	429a      	cmp	r2, r3
 801829e:	d107      	bne.n	80182b0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	681a      	ldr	r2, [r3, #0]
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	493c      	ldr	r1, [pc, #240]	@ (801839c <I2C_ITError+0x1f8>)
 80182ac:	400a      	ands	r2, r1
 80182ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182b4:	0018      	movs	r0, r3
 80182b6:	f7fd f9bc 	bl	8015632 <HAL_DMA_GetState>
 80182ba:	0003      	movs	r3, r0
 80182bc:	2b01      	cmp	r3, #1
 80182be:	d016      	beq.n	80182ee <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182c4:	4a36      	ldr	r2, [pc, #216]	@ (80183a0 <I2C_ITError+0x1fc>)
 80182c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2240      	movs	r2, #64	@ 0x40
 80182cc:	2100      	movs	r1, #0
 80182ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182d4:	0018      	movs	r0, r3
 80182d6:	f7fd f8b7 	bl	8015448 <HAL_DMA_Abort_IT>
 80182da:	1e03      	subs	r3, r0, #0
 80182dc:	d051      	beq.n	8018382 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182e8:	0018      	movs	r0, r3
 80182ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80182ec:	e049      	b.n	8018382 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	0018      	movs	r0, r3
 80182f2:	f000 f859 	bl	80183a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80182f6:	e044      	b.n	8018382 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d03b      	beq.n	8018378 <I2C_ITError+0x1d4>
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	2b12      	cmp	r3, #18
 8018304:	d002      	beq.n	801830c <I2C_ITError+0x168>
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	2b22      	cmp	r3, #34	@ 0x22
 801830a:	d135      	bne.n	8018378 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	681a      	ldr	r2, [r3, #0]
 8018312:	2380      	movs	r3, #128	@ 0x80
 8018314:	021b      	lsls	r3, r3, #8
 8018316:	401a      	ands	r2, r3
 8018318:	2380      	movs	r3, #128	@ 0x80
 801831a:	021b      	lsls	r3, r3, #8
 801831c:	429a      	cmp	r2, r3
 801831e:	d107      	bne.n	8018330 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	681a      	ldr	r2, [r3, #0]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	491e      	ldr	r1, [pc, #120]	@ (80183a4 <I2C_ITError+0x200>)
 801832c:	400a      	ands	r2, r1
 801832e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018334:	0018      	movs	r0, r3
 8018336:	f7fd f97c 	bl	8015632 <HAL_DMA_GetState>
 801833a:	0003      	movs	r3, r0
 801833c:	2b01      	cmp	r3, #1
 801833e:	d016      	beq.n	801836e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018344:	4a16      	ldr	r2, [pc, #88]	@ (80183a0 <I2C_ITError+0x1fc>)
 8018346:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	2240      	movs	r2, #64	@ 0x40
 801834c:	2100      	movs	r1, #0
 801834e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018354:	0018      	movs	r0, r3
 8018356:	f7fd f877 	bl	8015448 <HAL_DMA_Abort_IT>
 801835a:	1e03      	subs	r3, r0, #0
 801835c:	d013      	beq.n	8018386 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018368:	0018      	movs	r0, r3
 801836a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801836c:	e00b      	b.n	8018386 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	0018      	movs	r0, r3
 8018372:	f000 f819 	bl	80183a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018376:	e006      	b.n	8018386 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	0018      	movs	r0, r3
 801837c:	f000 f814 	bl	80183a8 <I2C_TreatErrorCallback>
  }
}
 8018380:	e002      	b.n	8018388 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018382:	46c0      	nop			@ (mov r8, r8)
 8018384:	e000      	b.n	8018388 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018386:	46c0      	nop			@ (mov r8, r8)
}
 8018388:	46c0      	nop			@ (mov r8, r8)
 801838a:	46bd      	mov	sp, r7
 801838c:	b004      	add	sp, #16
 801838e:	bd80      	pop	{r7, pc}
 8018390:	ffff0000 	.word	0xffff0000
 8018394:	08017055 	.word	0x08017055
 8018398:	00008003 	.word	0x00008003
 801839c:	ffffbfff 	.word	0xffffbfff
 80183a0:	080185b3 	.word	0x080185b3
 80183a4:	ffff7fff 	.word	0xffff7fff

080183a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b082      	sub	sp, #8
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2241      	movs	r2, #65	@ 0x41
 80183b4:	5c9b      	ldrb	r3, [r3, r2]
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	2b60      	cmp	r3, #96	@ 0x60
 80183ba:	d10f      	bne.n	80183dc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2241      	movs	r2, #65	@ 0x41
 80183c0:	2120      	movs	r1, #32
 80183c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	2200      	movs	r2, #0
 80183c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	2240      	movs	r2, #64	@ 0x40
 80183ce:	2100      	movs	r1, #0
 80183d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	0018      	movs	r0, r3
 80183d6:	f7fe fcf3 	bl	8016dc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80183da:	e00a      	b.n	80183f2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2200      	movs	r2, #0
 80183e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2240      	movs	r2, #64	@ 0x40
 80183e6:	2100      	movs	r1, #0
 80183e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	0018      	movs	r0, r3
 80183ee:	f7fe fcdf 	bl	8016db0 <HAL_I2C_ErrorCallback>
}
 80183f2:	46c0      	nop			@ (mov r8, r8)
 80183f4:	46bd      	mov	sp, r7
 80183f6:	b002      	add	sp, #8
 80183f8:	bd80      	pop	{r7, pc}

080183fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80183fa:	b580      	push	{r7, lr}
 80183fc:	b082      	sub	sp, #8
 80183fe:	af00      	add	r7, sp, #0
 8018400:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	699b      	ldr	r3, [r3, #24]
 8018408:	2202      	movs	r2, #2
 801840a:	4013      	ands	r3, r2
 801840c:	2b02      	cmp	r3, #2
 801840e:	d103      	bne.n	8018418 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2200      	movs	r2, #0
 8018416:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	699b      	ldr	r3, [r3, #24]
 801841e:	2201      	movs	r2, #1
 8018420:	4013      	ands	r3, r2
 8018422:	2b01      	cmp	r3, #1
 8018424:	d007      	beq.n	8018436 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	699a      	ldr	r2, [r3, #24]
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	2101      	movs	r1, #1
 8018432:	430a      	orrs	r2, r1
 8018434:	619a      	str	r2, [r3, #24]
  }
}
 8018436:	46c0      	nop			@ (mov r8, r8)
 8018438:	46bd      	mov	sp, r7
 801843a:	b002      	add	sp, #8
 801843c:	bd80      	pop	{r7, pc}
	...

08018440 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801844c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	681a      	ldr	r2, [r3, #0]
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4920      	ldr	r1, [pc, #128]	@ (80184dc <I2C_DMAMasterTransmitCplt+0x9c>)
 801845a:	400a      	ands	r2, r1
 801845c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018462:	b29b      	uxth	r3, r3
 8018464:	2b00      	cmp	r3, #0
 8018466:	d105      	bne.n	8018474 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	2120      	movs	r1, #32
 801846c:	0018      	movs	r0, r3
 801846e:	f000 fb4b 	bl	8018b08 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018472:	e02e      	b.n	80184d2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018478:	68fa      	ldr	r2, [r7, #12]
 801847a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801847c:	189a      	adds	r2, r3, r2
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018486:	b29b      	uxth	r3, r3
 8018488:	2bff      	cmp	r3, #255	@ 0xff
 801848a:	d903      	bls.n	8018494 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	22ff      	movs	r2, #255	@ 0xff
 8018490:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018492:	e004      	b.n	801849e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018498:	b29a      	uxth	r2, r3
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184a6:	0019      	movs	r1, r3
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	3328      	adds	r3, #40	@ 0x28
 80184ae:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80184b4:	f7fc ff22 	bl	80152fc <HAL_DMA_Start_IT>
 80184b8:	1e03      	subs	r3, r0, #0
 80184ba:	d005      	beq.n	80184c8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2110      	movs	r1, #16
 80184c0:	0018      	movs	r0, r3
 80184c2:	f7ff fe6f 	bl	80181a4 <I2C_ITError>
}
 80184c6:	e004      	b.n	80184d2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	2140      	movs	r1, #64	@ 0x40
 80184cc:	0018      	movs	r0, r3
 80184ce:	f000 fb1b 	bl	8018b08 <I2C_Enable_IRQ>
}
 80184d2:	46c0      	nop			@ (mov r8, r8)
 80184d4:	46bd      	mov	sp, r7
 80184d6:	b004      	add	sp, #16
 80184d8:	bd80      	pop	{r7, pc}
 80184da:	46c0      	nop			@ (mov r8, r8)
 80184dc:	ffffbfff 	.word	0xffffbfff

080184e0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184ec:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	681a      	ldr	r2, [r3, #0]
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4920      	ldr	r1, [pc, #128]	@ (801857c <I2C_DMAMasterReceiveCplt+0x9c>)
 80184fa:	400a      	ands	r2, r1
 80184fc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018502:	b29b      	uxth	r3, r3
 8018504:	2b00      	cmp	r3, #0
 8018506:	d105      	bne.n	8018514 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	2120      	movs	r1, #32
 801850c:	0018      	movs	r0, r3
 801850e:	f000 fafb 	bl	8018b08 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018512:	e02e      	b.n	8018572 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018518:	68fa      	ldr	r2, [r7, #12]
 801851a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801851c:	189a      	adds	r2, r3, r2
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018526:	b29b      	uxth	r3, r3
 8018528:	2bff      	cmp	r3, #255	@ 0xff
 801852a:	d903      	bls.n	8018534 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	22ff      	movs	r2, #255	@ 0xff
 8018530:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018532:	e004      	b.n	801853e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018538:	b29a      	uxth	r2, r3
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	3324      	adds	r3, #36	@ 0x24
 8018548:	0019      	movs	r1, r3
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801854e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018554:	f7fc fed2 	bl	80152fc <HAL_DMA_Start_IT>
 8018558:	1e03      	subs	r3, r0, #0
 801855a:	d005      	beq.n	8018568 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2110      	movs	r1, #16
 8018560:	0018      	movs	r0, r3
 8018562:	f7ff fe1f 	bl	80181a4 <I2C_ITError>
}
 8018566:	e004      	b.n	8018572 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	2140      	movs	r1, #64	@ 0x40
 801856c:	0018      	movs	r0, r3
 801856e:	f000 facb 	bl	8018b08 <I2C_Enable_IRQ>
}
 8018572:	46c0      	nop			@ (mov r8, r8)
 8018574:	46bd      	mov	sp, r7
 8018576:	b004      	add	sp, #16
 8018578:	bd80      	pop	{r7, pc}
 801857a:	46c0      	nop			@ (mov r8, r8)
 801857c:	ffff7fff 	.word	0xffff7fff

08018580 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801858c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	685a      	ldr	r2, [r3, #4]
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	2180      	movs	r1, #128	@ 0x80
 801859a:	0209      	lsls	r1, r1, #8
 801859c:	430a      	orrs	r2, r1
 801859e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	2110      	movs	r1, #16
 80185a4:	0018      	movs	r0, r3
 80185a6:	f7ff fdfd 	bl	80181a4 <I2C_ITError>
}
 80185aa:	46c0      	nop			@ (mov r8, r8)
 80185ac:	46bd      	mov	sp, r7
 80185ae:	b004      	add	sp, #16
 80185b0:	bd80      	pop	{r7, pc}

080185b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80185b2:	b580      	push	{r7, lr}
 80185b4:	b084      	sub	sp, #16
 80185b6:	af00      	add	r7, sp, #0
 80185b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d003      	beq.n	80185d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185cc:	2200      	movs	r2, #0
 80185ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d003      	beq.n	80185e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185dc:	2200      	movs	r2, #0
 80185de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	0018      	movs	r0, r3
 80185e4:	f7ff fee0 	bl	80183a8 <I2C_TreatErrorCallback>
}
 80185e8:	46c0      	nop			@ (mov r8, r8)
 80185ea:	46bd      	mov	sp, r7
 80185ec:	b004      	add	sp, #16
 80185ee:	bd80      	pop	{r7, pc}

080185f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	60b9      	str	r1, [r7, #8]
 80185fa:	603b      	str	r3, [r7, #0]
 80185fc:	1dfb      	adds	r3, r7, #7
 80185fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018600:	e030      	b.n	8018664 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	3301      	adds	r3, #1
 8018606:	d02d      	beq.n	8018664 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018608:	f7fc f95a 	bl	80148c0 <HAL_GetTick>
 801860c:	0002      	movs	r2, r0
 801860e:	69bb      	ldr	r3, [r7, #24]
 8018610:	1ad3      	subs	r3, r2, r3
 8018612:	683a      	ldr	r2, [r7, #0]
 8018614:	429a      	cmp	r2, r3
 8018616:	d302      	bcc.n	801861e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d122      	bne.n	8018664 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	699b      	ldr	r3, [r3, #24]
 8018624:	68ba      	ldr	r2, [r7, #8]
 8018626:	4013      	ands	r3, r2
 8018628:	68ba      	ldr	r2, [r7, #8]
 801862a:	1ad3      	subs	r3, r2, r3
 801862c:	425a      	negs	r2, r3
 801862e:	4153      	adcs	r3, r2
 8018630:	b2db      	uxtb	r3, r3
 8018632:	001a      	movs	r2, r3
 8018634:	1dfb      	adds	r3, r7, #7
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	429a      	cmp	r2, r3
 801863a:	d113      	bne.n	8018664 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018640:	2220      	movs	r2, #32
 8018642:	431a      	orrs	r2, r3
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	2241      	movs	r2, #65	@ 0x41
 801864c:	2120      	movs	r1, #32
 801864e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2242      	movs	r2, #66	@ 0x42
 8018654:	2100      	movs	r1, #0
 8018656:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	2240      	movs	r2, #64	@ 0x40
 801865c:	2100      	movs	r1, #0
 801865e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8018660:	2301      	movs	r3, #1
 8018662:	e00f      	b.n	8018684 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	699b      	ldr	r3, [r3, #24]
 801866a:	68ba      	ldr	r2, [r7, #8]
 801866c:	4013      	ands	r3, r2
 801866e:	68ba      	ldr	r2, [r7, #8]
 8018670:	1ad3      	subs	r3, r2, r3
 8018672:	425a      	negs	r2, r3
 8018674:	4153      	adcs	r3, r2
 8018676:	b2db      	uxtb	r3, r3
 8018678:	001a      	movs	r2, r3
 801867a:	1dfb      	adds	r3, r7, #7
 801867c:	781b      	ldrb	r3, [r3, #0]
 801867e:	429a      	cmp	r2, r3
 8018680:	d0bf      	beq.n	8018602 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018682:	2300      	movs	r3, #0
}
 8018684:	0018      	movs	r0, r3
 8018686:	46bd      	mov	sp, r7
 8018688:	b004      	add	sp, #16
 801868a:	bd80      	pop	{r7, pc}

0801868c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b084      	sub	sp, #16
 8018690:	af00      	add	r7, sp, #0
 8018692:	60f8      	str	r0, [r7, #12]
 8018694:	60b9      	str	r1, [r7, #8]
 8018696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018698:	e032      	b.n	8018700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	68b9      	ldr	r1, [r7, #8]
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	0018      	movs	r0, r3
 80186a2:	f000 f8ff 	bl	80188a4 <I2C_IsErrorOccurred>
 80186a6:	1e03      	subs	r3, r0, #0
 80186a8:	d001      	beq.n	80186ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80186aa:	2301      	movs	r3, #1
 80186ac:	e030      	b.n	8018710 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	3301      	adds	r3, #1
 80186b2:	d025      	beq.n	8018700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80186b4:	f7fc f904 	bl	80148c0 <HAL_GetTick>
 80186b8:	0002      	movs	r2, r0
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	1ad3      	subs	r3, r2, r3
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d302      	bcc.n	80186ca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d11a      	bne.n	8018700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	699b      	ldr	r3, [r3, #24]
 80186d0:	2202      	movs	r2, #2
 80186d2:	4013      	ands	r3, r2
 80186d4:	2b02      	cmp	r3, #2
 80186d6:	d013      	beq.n	8018700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186dc:	2220      	movs	r2, #32
 80186de:	431a      	orrs	r2, r3
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	2241      	movs	r2, #65	@ 0x41
 80186e8:	2120      	movs	r1, #32
 80186ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	2242      	movs	r2, #66	@ 0x42
 80186f0:	2100      	movs	r1, #0
 80186f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	2240      	movs	r2, #64	@ 0x40
 80186f8:	2100      	movs	r1, #0
 80186fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80186fc:	2301      	movs	r3, #1
 80186fe:	e007      	b.n	8018710 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	699b      	ldr	r3, [r3, #24]
 8018706:	2202      	movs	r2, #2
 8018708:	4013      	ands	r3, r2
 801870a:	2b02      	cmp	r3, #2
 801870c:	d1c5      	bne.n	801869a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801870e:	2300      	movs	r3, #0
}
 8018710:	0018      	movs	r0, r3
 8018712:	46bd      	mov	sp, r7
 8018714:	b004      	add	sp, #16
 8018716:	bd80      	pop	{r7, pc}

08018718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b084      	sub	sp, #16
 801871c:	af00      	add	r7, sp, #0
 801871e:	60f8      	str	r0, [r7, #12]
 8018720:	60b9      	str	r1, [r7, #8]
 8018722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018724:	e02f      	b.n	8018786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	68b9      	ldr	r1, [r7, #8]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	0018      	movs	r0, r3
 801872e:	f000 f8b9 	bl	80188a4 <I2C_IsErrorOccurred>
 8018732:	1e03      	subs	r3, r0, #0
 8018734:	d001      	beq.n	801873a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018736:	2301      	movs	r3, #1
 8018738:	e02d      	b.n	8018796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801873a:	f7fc f8c1 	bl	80148c0 <HAL_GetTick>
 801873e:	0002      	movs	r2, r0
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	1ad3      	subs	r3, r2, r3
 8018744:	68ba      	ldr	r2, [r7, #8]
 8018746:	429a      	cmp	r2, r3
 8018748:	d302      	bcc.n	8018750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801874a:	68bb      	ldr	r3, [r7, #8]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d11a      	bne.n	8018786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	699b      	ldr	r3, [r3, #24]
 8018756:	2220      	movs	r2, #32
 8018758:	4013      	ands	r3, r2
 801875a:	2b20      	cmp	r3, #32
 801875c:	d013      	beq.n	8018786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018762:	2220      	movs	r2, #32
 8018764:	431a      	orrs	r2, r3
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2241      	movs	r2, #65	@ 0x41
 801876e:	2120      	movs	r1, #32
 8018770:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2242      	movs	r2, #66	@ 0x42
 8018776:	2100      	movs	r1, #0
 8018778:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2240      	movs	r2, #64	@ 0x40
 801877e:	2100      	movs	r1, #0
 8018780:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018782:	2301      	movs	r3, #1
 8018784:	e007      	b.n	8018796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	699b      	ldr	r3, [r3, #24]
 801878c:	2220      	movs	r2, #32
 801878e:	4013      	ands	r3, r2
 8018790:	2b20      	cmp	r3, #32
 8018792:	d1c8      	bne.n	8018726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018794:	2300      	movs	r3, #0
}
 8018796:	0018      	movs	r0, r3
 8018798:	46bd      	mov	sp, r7
 801879a:	b004      	add	sp, #16
 801879c:	bd80      	pop	{r7, pc}
	...

080187a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	60f8      	str	r0, [r7, #12]
 80187a8:	60b9      	str	r1, [r7, #8]
 80187aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80187ac:	e06b      	b.n	8018886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80187ae:	687a      	ldr	r2, [r7, #4]
 80187b0:	68b9      	ldr	r1, [r7, #8]
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	0018      	movs	r0, r3
 80187b6:	f000 f875 	bl	80188a4 <I2C_IsErrorOccurred>
 80187ba:	1e03      	subs	r3, r0, #0
 80187bc:	d001      	beq.n	80187c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187be:	2301      	movs	r3, #1
 80187c0:	e069      	b.n	8018896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	699b      	ldr	r3, [r3, #24]
 80187c8:	2220      	movs	r2, #32
 80187ca:	4013      	ands	r3, r2
 80187cc:	2b20      	cmp	r3, #32
 80187ce:	d138      	bne.n	8018842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	699b      	ldr	r3, [r3, #24]
 80187d6:	2204      	movs	r2, #4
 80187d8:	4013      	ands	r3, r2
 80187da:	2b04      	cmp	r3, #4
 80187dc:	d105      	bne.n	80187ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d001      	beq.n	80187ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80187e6:	2300      	movs	r3, #0
 80187e8:	e055      	b.n	8018896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	699b      	ldr	r3, [r3, #24]
 80187f0:	2210      	movs	r2, #16
 80187f2:	4013      	ands	r3, r2
 80187f4:	2b10      	cmp	r3, #16
 80187f6:	d107      	bne.n	8018808 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	2210      	movs	r2, #16
 80187fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2204      	movs	r2, #4
 8018804:	645a      	str	r2, [r3, #68]	@ 0x44
 8018806:	e002      	b.n	801880e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	2200      	movs	r2, #0
 801880c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2220      	movs	r2, #32
 8018814:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	685a      	ldr	r2, [r3, #4]
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	491f      	ldr	r1, [pc, #124]	@ (80188a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8018822:	400a      	ands	r2, r1
 8018824:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	2241      	movs	r2, #65	@ 0x41
 801882a:	2120      	movs	r1, #32
 801882c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	2242      	movs	r2, #66	@ 0x42
 8018832:	2100      	movs	r1, #0
 8018834:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	2240      	movs	r2, #64	@ 0x40
 801883a:	2100      	movs	r1, #0
 801883c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801883e:	2301      	movs	r3, #1
 8018840:	e029      	b.n	8018896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018842:	f7fc f83d 	bl	80148c0 <HAL_GetTick>
 8018846:	0002      	movs	r2, r0
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	1ad3      	subs	r3, r2, r3
 801884c:	68ba      	ldr	r2, [r7, #8]
 801884e:	429a      	cmp	r2, r3
 8018850:	d302      	bcc.n	8018858 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d116      	bne.n	8018886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	699b      	ldr	r3, [r3, #24]
 801885e:	2204      	movs	r2, #4
 8018860:	4013      	ands	r3, r2
 8018862:	2b04      	cmp	r3, #4
 8018864:	d00f      	beq.n	8018886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801886a:	2220      	movs	r2, #32
 801886c:	431a      	orrs	r2, r3
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	2241      	movs	r2, #65	@ 0x41
 8018876:	2120      	movs	r1, #32
 8018878:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	2240      	movs	r2, #64	@ 0x40
 801887e:	2100      	movs	r1, #0
 8018880:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018882:	2301      	movs	r3, #1
 8018884:	e007      	b.n	8018896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	699b      	ldr	r3, [r3, #24]
 801888c:	2204      	movs	r2, #4
 801888e:	4013      	ands	r3, r2
 8018890:	2b04      	cmp	r3, #4
 8018892:	d18c      	bne.n	80187ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018894:	2300      	movs	r3, #0
}
 8018896:	0018      	movs	r0, r3
 8018898:	46bd      	mov	sp, r7
 801889a:	b004      	add	sp, #16
 801889c:	bd80      	pop	{r7, pc}
 801889e:	46c0      	nop			@ (mov r8, r8)
 80188a0:	fe00e800 	.word	0xfe00e800

080188a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b08a      	sub	sp, #40	@ 0x28
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	60f8      	str	r0, [r7, #12]
 80188ac:	60b9      	str	r1, [r7, #8]
 80188ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80188b0:	2327      	movs	r3, #39	@ 0x27
 80188b2:	18fb      	adds	r3, r7, r3
 80188b4:	2200      	movs	r2, #0
 80188b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	699b      	ldr	r3, [r3, #24]
 80188be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80188c0:	2300      	movs	r3, #0
 80188c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80188c8:	69bb      	ldr	r3, [r7, #24]
 80188ca:	2210      	movs	r2, #16
 80188cc:	4013      	ands	r3, r2
 80188ce:	d100      	bne.n	80188d2 <I2C_IsErrorOccurred+0x2e>
 80188d0:	e079      	b.n	80189c6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	2210      	movs	r2, #16
 80188d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80188da:	e057      	b.n	801898c <I2C_IsErrorOccurred+0xe8>
 80188dc:	2227      	movs	r2, #39	@ 0x27
 80188de:	18bb      	adds	r3, r7, r2
 80188e0:	18ba      	adds	r2, r7, r2
 80188e2:	7812      	ldrb	r2, [r2, #0]
 80188e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80188e6:	68bb      	ldr	r3, [r7, #8]
 80188e8:	3301      	adds	r3, #1
 80188ea:	d04f      	beq.n	801898c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80188ec:	f7fb ffe8 	bl	80148c0 <HAL_GetTick>
 80188f0:	0002      	movs	r2, r0
 80188f2:	69fb      	ldr	r3, [r7, #28]
 80188f4:	1ad3      	subs	r3, r2, r3
 80188f6:	68ba      	ldr	r2, [r7, #8]
 80188f8:	429a      	cmp	r2, r3
 80188fa:	d302      	bcc.n	8018902 <I2C_IsErrorOccurred+0x5e>
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d144      	bne.n	801898c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	685a      	ldr	r2, [r3, #4]
 8018908:	2380      	movs	r3, #128	@ 0x80
 801890a:	01db      	lsls	r3, r3, #7
 801890c:	4013      	ands	r3, r2
 801890e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018910:	2013      	movs	r0, #19
 8018912:	183b      	adds	r3, r7, r0
 8018914:	68fa      	ldr	r2, [r7, #12]
 8018916:	2142      	movs	r1, #66	@ 0x42
 8018918:	5c52      	ldrb	r2, [r2, r1]
 801891a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	699a      	ldr	r2, [r3, #24]
 8018922:	2380      	movs	r3, #128	@ 0x80
 8018924:	021b      	lsls	r3, r3, #8
 8018926:	401a      	ands	r2, r3
 8018928:	2380      	movs	r3, #128	@ 0x80
 801892a:	021b      	lsls	r3, r3, #8
 801892c:	429a      	cmp	r2, r3
 801892e:	d126      	bne.n	801897e <I2C_IsErrorOccurred+0xda>
 8018930:	697a      	ldr	r2, [r7, #20]
 8018932:	2380      	movs	r3, #128	@ 0x80
 8018934:	01db      	lsls	r3, r3, #7
 8018936:	429a      	cmp	r2, r3
 8018938:	d021      	beq.n	801897e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 801893a:	183b      	adds	r3, r7, r0
 801893c:	781b      	ldrb	r3, [r3, #0]
 801893e:	2b20      	cmp	r3, #32
 8018940:	d01d      	beq.n	801897e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	685a      	ldr	r2, [r3, #4]
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	2180      	movs	r1, #128	@ 0x80
 801894e:	01c9      	lsls	r1, r1, #7
 8018950:	430a      	orrs	r2, r1
 8018952:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018954:	f7fb ffb4 	bl	80148c0 <HAL_GetTick>
 8018958:	0003      	movs	r3, r0
 801895a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801895c:	e00f      	b.n	801897e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801895e:	f7fb ffaf 	bl	80148c0 <HAL_GetTick>
 8018962:	0002      	movs	r2, r0
 8018964:	69fb      	ldr	r3, [r7, #28]
 8018966:	1ad3      	subs	r3, r2, r3
 8018968:	2b19      	cmp	r3, #25
 801896a:	d908      	bls.n	801897e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801896c:	6a3b      	ldr	r3, [r7, #32]
 801896e:	2220      	movs	r2, #32
 8018970:	4313      	orrs	r3, r2
 8018972:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018974:	2327      	movs	r3, #39	@ 0x27
 8018976:	18fb      	adds	r3, r7, r3
 8018978:	2201      	movs	r2, #1
 801897a:	701a      	strb	r2, [r3, #0]

              break;
 801897c:	e006      	b.n	801898c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	699b      	ldr	r3, [r3, #24]
 8018984:	2220      	movs	r2, #32
 8018986:	4013      	ands	r3, r2
 8018988:	2b20      	cmp	r3, #32
 801898a:	d1e8      	bne.n	801895e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	699b      	ldr	r3, [r3, #24]
 8018992:	2220      	movs	r2, #32
 8018994:	4013      	ands	r3, r2
 8018996:	2b20      	cmp	r3, #32
 8018998:	d004      	beq.n	80189a4 <I2C_IsErrorOccurred+0x100>
 801899a:	2327      	movs	r3, #39	@ 0x27
 801899c:	18fb      	adds	r3, r7, r3
 801899e:	781b      	ldrb	r3, [r3, #0]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d09b      	beq.n	80188dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80189a4:	2327      	movs	r3, #39	@ 0x27
 80189a6:	18fb      	adds	r3, r7, r3
 80189a8:	781b      	ldrb	r3, [r3, #0]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d103      	bne.n	80189b6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2220      	movs	r2, #32
 80189b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80189b6:	6a3b      	ldr	r3, [r7, #32]
 80189b8:	2204      	movs	r2, #4
 80189ba:	4313      	orrs	r3, r2
 80189bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80189be:	2327      	movs	r3, #39	@ 0x27
 80189c0:	18fb      	adds	r3, r7, r3
 80189c2:	2201      	movs	r2, #1
 80189c4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	699b      	ldr	r3, [r3, #24]
 80189cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80189ce:	69ba      	ldr	r2, [r7, #24]
 80189d0:	2380      	movs	r3, #128	@ 0x80
 80189d2:	005b      	lsls	r3, r3, #1
 80189d4:	4013      	ands	r3, r2
 80189d6:	d00c      	beq.n	80189f2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80189d8:	6a3b      	ldr	r3, [r7, #32]
 80189da:	2201      	movs	r2, #1
 80189dc:	4313      	orrs	r3, r2
 80189de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	2280      	movs	r2, #128	@ 0x80
 80189e6:	0052      	lsls	r2, r2, #1
 80189e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189ea:	2327      	movs	r3, #39	@ 0x27
 80189ec:	18fb      	adds	r3, r7, r3
 80189ee:	2201      	movs	r2, #1
 80189f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80189f2:	69ba      	ldr	r2, [r7, #24]
 80189f4:	2380      	movs	r3, #128	@ 0x80
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	4013      	ands	r3, r2
 80189fa:	d00c      	beq.n	8018a16 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80189fc:	6a3b      	ldr	r3, [r7, #32]
 80189fe:	2208      	movs	r2, #8
 8018a00:	4313      	orrs	r3, r2
 8018a02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	2280      	movs	r2, #128	@ 0x80
 8018a0a:	00d2      	lsls	r2, r2, #3
 8018a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a0e:	2327      	movs	r3, #39	@ 0x27
 8018a10:	18fb      	adds	r3, r7, r3
 8018a12:	2201      	movs	r2, #1
 8018a14:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018a16:	69ba      	ldr	r2, [r7, #24]
 8018a18:	2380      	movs	r3, #128	@ 0x80
 8018a1a:	009b      	lsls	r3, r3, #2
 8018a1c:	4013      	ands	r3, r2
 8018a1e:	d00c      	beq.n	8018a3a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018a20:	6a3b      	ldr	r3, [r7, #32]
 8018a22:	2202      	movs	r2, #2
 8018a24:	4313      	orrs	r3, r2
 8018a26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	2280      	movs	r2, #128	@ 0x80
 8018a2e:	0092      	lsls	r2, r2, #2
 8018a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a32:	2327      	movs	r3, #39	@ 0x27
 8018a34:	18fb      	adds	r3, r7, r3
 8018a36:	2201      	movs	r2, #1
 8018a38:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018a3a:	2327      	movs	r3, #39	@ 0x27
 8018a3c:	18fb      	adds	r3, r7, r3
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d01d      	beq.n	8018a80 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	0018      	movs	r0, r3
 8018a48:	f7ff fcd7 	bl	80183fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	685a      	ldr	r2, [r3, #4]
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	490e      	ldr	r1, [pc, #56]	@ (8018a90 <I2C_IsErrorOccurred+0x1ec>)
 8018a58:	400a      	ands	r2, r1
 8018a5a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018a60:	6a3b      	ldr	r3, [r7, #32]
 8018a62:	431a      	orrs	r2, r3
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	2241      	movs	r2, #65	@ 0x41
 8018a6c:	2120      	movs	r1, #32
 8018a6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	2242      	movs	r2, #66	@ 0x42
 8018a74:	2100      	movs	r1, #0
 8018a76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	2240      	movs	r2, #64	@ 0x40
 8018a7c:	2100      	movs	r1, #0
 8018a7e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018a80:	2327      	movs	r3, #39	@ 0x27
 8018a82:	18fb      	adds	r3, r7, r3
 8018a84:	781b      	ldrb	r3, [r3, #0]
}
 8018a86:	0018      	movs	r0, r3
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	b00a      	add	sp, #40	@ 0x28
 8018a8c:	bd80      	pop	{r7, pc}
 8018a8e:	46c0      	nop			@ (mov r8, r8)
 8018a90:	fe00e800 	.word	0xfe00e800

08018a94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018a94:	b590      	push	{r4, r7, lr}
 8018a96:	b087      	sub	sp, #28
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	0008      	movs	r0, r1
 8018a9e:	0011      	movs	r1, r2
 8018aa0:	607b      	str	r3, [r7, #4]
 8018aa2:	240a      	movs	r4, #10
 8018aa4:	193b      	adds	r3, r7, r4
 8018aa6:	1c02      	adds	r2, r0, #0
 8018aa8:	801a      	strh	r2, [r3, #0]
 8018aaa:	2009      	movs	r0, #9
 8018aac:	183b      	adds	r3, r7, r0
 8018aae:	1c0a      	adds	r2, r1, #0
 8018ab0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ab2:	193b      	adds	r3, r7, r4
 8018ab4:	881b      	ldrh	r3, [r3, #0]
 8018ab6:	059b      	lsls	r3, r3, #22
 8018ab8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018aba:	183b      	adds	r3, r7, r0
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	0419      	lsls	r1, r3, #16
 8018ac0:	23ff      	movs	r3, #255	@ 0xff
 8018ac2:	041b      	lsls	r3, r3, #16
 8018ac4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ac6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ace:	4313      	orrs	r3, r2
 8018ad0:	005b      	lsls	r3, r3, #1
 8018ad2:	085b      	lsrs	r3, r3, #1
 8018ad4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	685b      	ldr	r3, [r3, #4]
 8018adc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ade:	0d51      	lsrs	r1, r2, #21
 8018ae0:	2280      	movs	r2, #128	@ 0x80
 8018ae2:	00d2      	lsls	r2, r2, #3
 8018ae4:	400a      	ands	r2, r1
 8018ae6:	4907      	ldr	r1, [pc, #28]	@ (8018b04 <I2C_TransferConfig+0x70>)
 8018ae8:	430a      	orrs	r2, r1
 8018aea:	43d2      	mvns	r2, r2
 8018aec:	401a      	ands	r2, r3
 8018aee:	0011      	movs	r1, r2
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	697a      	ldr	r2, [r7, #20]
 8018af6:	430a      	orrs	r2, r1
 8018af8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018afa:	46c0      	nop			@ (mov r8, r8)
 8018afc:	46bd      	mov	sp, r7
 8018afe:	b007      	add	sp, #28
 8018b00:	bd90      	pop	{r4, r7, pc}
 8018b02:	46c0      	nop			@ (mov r8, r8)
 8018b04:	03ff63ff 	.word	0x03ff63ff

08018b08 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b084      	sub	sp, #16
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	000a      	movs	r2, r1
 8018b12:	1cbb      	adds	r3, r7, #2
 8018b14:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018b16:	2300      	movs	r3, #0
 8018b18:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8018c18 <I2C_Enable_IRQ+0x110>)
 8018b20:	429a      	cmp	r2, r3
 8018b22:	d035      	beq.n	8018b90 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b28:	4b3c      	ldr	r3, [pc, #240]	@ (8018c1c <I2C_Enable_IRQ+0x114>)
 8018b2a:	429a      	cmp	r2, r3
 8018b2c:	d030      	beq.n	8018b90 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018b32:	4b3b      	ldr	r3, [pc, #236]	@ (8018c20 <I2C_Enable_IRQ+0x118>)
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d02b      	beq.n	8018b90 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018b38:	1cbb      	adds	r3, r7, #2
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	5e9b      	ldrsh	r3, [r3, r2]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	da03      	bge.n	8018b4a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	22b8      	movs	r2, #184	@ 0xb8
 8018b46:	4313      	orrs	r3, r2
 8018b48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018b4a:	1cbb      	adds	r3, r7, #2
 8018b4c:	881b      	ldrh	r3, [r3, #0]
 8018b4e:	2201      	movs	r2, #1
 8018b50:	4013      	ands	r3, r2
 8018b52:	d003      	beq.n	8018b5c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	22f2      	movs	r2, #242	@ 0xf2
 8018b58:	4313      	orrs	r3, r2
 8018b5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018b5c:	1cbb      	adds	r3, r7, #2
 8018b5e:	881b      	ldrh	r3, [r3, #0]
 8018b60:	2202      	movs	r2, #2
 8018b62:	4013      	ands	r3, r2
 8018b64:	d003      	beq.n	8018b6e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	22f4      	movs	r2, #244	@ 0xf4
 8018b6a:	4313      	orrs	r3, r2
 8018b6c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018b6e:	1cbb      	adds	r3, r7, #2
 8018b70:	881b      	ldrh	r3, [r3, #0]
 8018b72:	2b10      	cmp	r3, #16
 8018b74:	d103      	bne.n	8018b7e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2290      	movs	r2, #144	@ 0x90
 8018b7a:	4313      	orrs	r3, r2
 8018b7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018b7e:	1cbb      	adds	r3, r7, #2
 8018b80:	881b      	ldrh	r3, [r3, #0]
 8018b82:	2b20      	cmp	r3, #32
 8018b84:	d13c      	bne.n	8018c00 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	2220      	movs	r2, #32
 8018b8a:	4313      	orrs	r3, r2
 8018b8c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018b8e:	e037      	b.n	8018c00 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018b90:	1cbb      	adds	r3, r7, #2
 8018b92:	2200      	movs	r2, #0
 8018b94:	5e9b      	ldrsh	r3, [r3, r2]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	da03      	bge.n	8018ba2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	22b8      	movs	r2, #184	@ 0xb8
 8018b9e:	4313      	orrs	r3, r2
 8018ba0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018ba2:	1cbb      	adds	r3, r7, #2
 8018ba4:	881b      	ldrh	r3, [r3, #0]
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	4013      	ands	r3, r2
 8018baa:	d003      	beq.n	8018bb4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	22f2      	movs	r2, #242	@ 0xf2
 8018bb0:	4313      	orrs	r3, r2
 8018bb2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018bb4:	1cbb      	adds	r3, r7, #2
 8018bb6:	881b      	ldrh	r3, [r3, #0]
 8018bb8:	2202      	movs	r2, #2
 8018bba:	4013      	ands	r3, r2
 8018bbc:	d003      	beq.n	8018bc6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	22f4      	movs	r2, #244	@ 0xf4
 8018bc2:	4313      	orrs	r3, r2
 8018bc4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018bc6:	1cbb      	adds	r3, r7, #2
 8018bc8:	881b      	ldrh	r3, [r3, #0]
 8018bca:	2b10      	cmp	r3, #16
 8018bcc:	d103      	bne.n	8018bd6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	2290      	movs	r2, #144	@ 0x90
 8018bd2:	4313      	orrs	r3, r2
 8018bd4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018bd6:	1cbb      	adds	r3, r7, #2
 8018bd8:	881b      	ldrh	r3, [r3, #0]
 8018bda:	2b20      	cmp	r3, #32
 8018bdc:	d103      	bne.n	8018be6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2260      	movs	r2, #96	@ 0x60
 8018be2:	4313      	orrs	r3, r2
 8018be4:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018bea:	4b0d      	ldr	r3, [pc, #52]	@ (8018c20 <I2C_Enable_IRQ+0x118>)
 8018bec:	429a      	cmp	r2, r3
 8018bee:	d007      	beq.n	8018c00 <I2C_Enable_IRQ+0xf8>
 8018bf0:	1cbb      	adds	r3, r7, #2
 8018bf2:	881b      	ldrh	r3, [r3, #0]
 8018bf4:	2b40      	cmp	r3, #64	@ 0x40
 8018bf6:	d103      	bne.n	8018c00 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	2240      	movs	r2, #64	@ 0x40
 8018bfc:	4313      	orrs	r3, r2
 8018bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	6819      	ldr	r1, [r3, #0]
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	68fa      	ldr	r2, [r7, #12]
 8018c0c:	430a      	orrs	r2, r1
 8018c0e:	601a      	str	r2, [r3, #0]
}
 8018c10:	46c0      	nop			@ (mov r8, r8)
 8018c12:	46bd      	mov	sp, r7
 8018c14:	b004      	add	sp, #16
 8018c16:	bd80      	pop	{r7, pc}
 8018c18:	0801727d 	.word	0x0801727d
 8018c1c:	080176f5 	.word	0x080176f5
 8018c20:	08017495 	.word	0x08017495

08018c24 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b084      	sub	sp, #16
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	000a      	movs	r2, r1
 8018c2e:	1cbb      	adds	r3, r7, #2
 8018c30:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018c32:	2300      	movs	r3, #0
 8018c34:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c36:	1cbb      	adds	r3, r7, #2
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	2201      	movs	r2, #1
 8018c3c:	4013      	ands	r3, r2
 8018c3e:	d010      	beq.n	8018c62 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	2242      	movs	r2, #66	@ 0x42
 8018c44:	4313      	orrs	r3, r2
 8018c46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2241      	movs	r2, #65	@ 0x41
 8018c4c:	5c9b      	ldrb	r3, [r3, r2]
 8018c4e:	b2db      	uxtb	r3, r3
 8018c50:	001a      	movs	r2, r3
 8018c52:	2328      	movs	r3, #40	@ 0x28
 8018c54:	4013      	ands	r3, r2
 8018c56:	2b28      	cmp	r3, #40	@ 0x28
 8018c58:	d003      	beq.n	8018c62 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	22b0      	movs	r2, #176	@ 0xb0
 8018c5e:	4313      	orrs	r3, r2
 8018c60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c62:	1cbb      	adds	r3, r7, #2
 8018c64:	881b      	ldrh	r3, [r3, #0]
 8018c66:	2202      	movs	r2, #2
 8018c68:	4013      	ands	r3, r2
 8018c6a:	d010      	beq.n	8018c8e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	2244      	movs	r2, #68	@ 0x44
 8018c70:	4313      	orrs	r3, r2
 8018c72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2241      	movs	r2, #65	@ 0x41
 8018c78:	5c9b      	ldrb	r3, [r3, r2]
 8018c7a:	b2db      	uxtb	r3, r3
 8018c7c:	001a      	movs	r2, r3
 8018c7e:	2328      	movs	r3, #40	@ 0x28
 8018c80:	4013      	ands	r3, r2
 8018c82:	2b28      	cmp	r3, #40	@ 0x28
 8018c84:	d003      	beq.n	8018c8e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	22b0      	movs	r2, #176	@ 0xb0
 8018c8a:	4313      	orrs	r3, r2
 8018c8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c8e:	1cbb      	adds	r3, r7, #2
 8018c90:	2200      	movs	r2, #0
 8018c92:	5e9b      	ldrsh	r3, [r3, r2]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	da03      	bge.n	8018ca0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	22b8      	movs	r2, #184	@ 0xb8
 8018c9c:	4313      	orrs	r3, r2
 8018c9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018ca0:	1cbb      	adds	r3, r7, #2
 8018ca2:	881b      	ldrh	r3, [r3, #0]
 8018ca4:	2b10      	cmp	r3, #16
 8018ca6:	d103      	bne.n	8018cb0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	2290      	movs	r2, #144	@ 0x90
 8018cac:	4313      	orrs	r3, r2
 8018cae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018cb0:	1cbb      	adds	r3, r7, #2
 8018cb2:	881b      	ldrh	r3, [r3, #0]
 8018cb4:	2b20      	cmp	r3, #32
 8018cb6:	d103      	bne.n	8018cc0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	2220      	movs	r2, #32
 8018cbc:	4313      	orrs	r3, r2
 8018cbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018cc0:	1cbb      	adds	r3, r7, #2
 8018cc2:	881b      	ldrh	r3, [r3, #0]
 8018cc4:	2b40      	cmp	r3, #64	@ 0x40
 8018cc6:	d103      	bne.n	8018cd0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	2240      	movs	r2, #64	@ 0x40
 8018ccc:	4313      	orrs	r3, r2
 8018cce:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	43d9      	mvns	r1, r3
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	400a      	ands	r2, r1
 8018ce0:	601a      	str	r2, [r3, #0]
}
 8018ce2:	46c0      	nop			@ (mov r8, r8)
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	b004      	add	sp, #16
 8018ce8:	bd80      	pop	{r7, pc}
	...

08018cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b082      	sub	sp, #8
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	2241      	movs	r2, #65	@ 0x41
 8018cfa:	5c9b      	ldrb	r3, [r3, r2]
 8018cfc:	b2db      	uxtb	r3, r3
 8018cfe:	2b20      	cmp	r3, #32
 8018d00:	d138      	bne.n	8018d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2240      	movs	r2, #64	@ 0x40
 8018d06:	5c9b      	ldrb	r3, [r3, r2]
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d101      	bne.n	8018d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018d0c:	2302      	movs	r3, #2
 8018d0e:	e032      	b.n	8018d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2240      	movs	r2, #64	@ 0x40
 8018d14:	2101      	movs	r1, #1
 8018d16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2241      	movs	r2, #65	@ 0x41
 8018d1c:	2124      	movs	r1, #36	@ 0x24
 8018d1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	681a      	ldr	r2, [r3, #0]
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	2101      	movs	r1, #1
 8018d2c:	438a      	bics	r2, r1
 8018d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	681a      	ldr	r2, [r3, #0]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	4911      	ldr	r1, [pc, #68]	@ (8018d80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018d3c:	400a      	ands	r2, r1
 8018d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	6819      	ldr	r1, [r3, #0]
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	683a      	ldr	r2, [r7, #0]
 8018d4c:	430a      	orrs	r2, r1
 8018d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	681a      	ldr	r2, [r3, #0]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	2101      	movs	r1, #1
 8018d5c:	430a      	orrs	r2, r1
 8018d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2241      	movs	r2, #65	@ 0x41
 8018d64:	2120      	movs	r1, #32
 8018d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	2240      	movs	r2, #64	@ 0x40
 8018d6c:	2100      	movs	r1, #0
 8018d6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018d70:	2300      	movs	r3, #0
 8018d72:	e000      	b.n	8018d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018d74:	2302      	movs	r3, #2
  }
}
 8018d76:	0018      	movs	r0, r3
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	b002      	add	sp, #8
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	46c0      	nop			@ (mov r8, r8)
 8018d80:	ffffefff 	.word	0xffffefff

08018d84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b084      	sub	sp, #16
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
 8018d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2241      	movs	r2, #65	@ 0x41
 8018d92:	5c9b      	ldrb	r3, [r3, r2]
 8018d94:	b2db      	uxtb	r3, r3
 8018d96:	2b20      	cmp	r3, #32
 8018d98:	d139      	bne.n	8018e0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	2240      	movs	r2, #64	@ 0x40
 8018d9e:	5c9b      	ldrb	r3, [r3, r2]
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d101      	bne.n	8018da8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018da4:	2302      	movs	r3, #2
 8018da6:	e033      	b.n	8018e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	2240      	movs	r2, #64	@ 0x40
 8018dac:	2101      	movs	r1, #1
 8018dae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2241      	movs	r2, #65	@ 0x41
 8018db4:	2124      	movs	r1, #36	@ 0x24
 8018db6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	681a      	ldr	r2, [r3, #0]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	2101      	movs	r1, #1
 8018dc4:	438a      	bics	r2, r1
 8018dc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	4a11      	ldr	r2, [pc, #68]	@ (8018e18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018dd4:	4013      	ands	r3, r2
 8018dd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	021b      	lsls	r3, r3, #8
 8018ddc:	68fa      	ldr	r2, [r7, #12]
 8018dde:	4313      	orrs	r3, r2
 8018de0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	68fa      	ldr	r2, [r7, #12]
 8018de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	681a      	ldr	r2, [r3, #0]
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	2101      	movs	r1, #1
 8018df6:	430a      	orrs	r2, r1
 8018df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2241      	movs	r2, #65	@ 0x41
 8018dfe:	2120      	movs	r1, #32
 8018e00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2240      	movs	r2, #64	@ 0x40
 8018e06:	2100      	movs	r1, #0
 8018e08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	e000      	b.n	8018e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018e0e:	2302      	movs	r3, #2
  }
}
 8018e10:	0018      	movs	r0, r3
 8018e12:	46bd      	mov	sp, r7
 8018e14:	b004      	add	sp, #16
 8018e16:	bd80      	pop	{r7, pc}
 8018e18:	fffff0ff 	.word	0xfffff0ff

08018e1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b088      	sub	sp, #32
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d101      	bne.n	8018e2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	e0e1      	b.n	8018ff2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	2235      	movs	r2, #53	@ 0x35
 8018e32:	5c9b      	ldrb	r3, [r3, r2]
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d107      	bne.n	8018e4a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2234      	movs	r2, #52	@ 0x34
 8018e3e:	2100      	movs	r1, #0
 8018e40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	0018      	movs	r0, r3
 8018e46:	f7f3 fda1 	bl	800c98c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	2235      	movs	r2, #53	@ 0x35
 8018e4e:	2102      	movs	r1, #2
 8018e50:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	69da      	ldr	r2, [r3, #28]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4967      	ldr	r1, [pc, #412]	@ (8018ffc <HAL_I2S_Init+0x1e0>)
 8018e5e:	400a      	ands	r2, r1
 8018e60:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	2202      	movs	r2, #2
 8018e68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	695b      	ldr	r3, [r3, #20]
 8018e6e:	2b02      	cmp	r3, #2
 8018e70:	d073      	beq.n	8018f5a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d102      	bne.n	8018e80 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018e7a:	2310      	movs	r3, #16
 8018e7c:	617b      	str	r3, [r7, #20]
 8018e7e:	e001      	b.n	8018e84 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018e80:	2320      	movs	r3, #32
 8018e82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	689b      	ldr	r3, [r3, #8]
 8018e88:	2b20      	cmp	r3, #32
 8018e8a:	d802      	bhi.n	8018e92 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	005b      	lsls	r3, r3, #1
 8018e90:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018e92:	f002 febd 	bl	801bc10 <HAL_RCC_GetSysClockFreq>
 8018e96:	0003      	movs	r3, r0
 8018e98:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	691a      	ldr	r2, [r3, #16]
 8018e9e:	2380      	movs	r3, #128	@ 0x80
 8018ea0:	009b      	lsls	r3, r3, #2
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d131      	bne.n	8018f0a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d016      	beq.n	8018edc <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	0019      	movs	r1, r3
 8018eb4:	68f8      	ldr	r0, [r7, #12]
 8018eb6:	f7e7 f975 	bl	80001a4 <__udivsi3>
 8018eba:	0003      	movs	r3, r0
 8018ebc:	001a      	movs	r2, r3
 8018ebe:	0013      	movs	r3, r2
 8018ec0:	009b      	lsls	r3, r3, #2
 8018ec2:	189b      	adds	r3, r3, r2
 8018ec4:	005b      	lsls	r3, r3, #1
 8018ec6:	001a      	movs	r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	695b      	ldr	r3, [r3, #20]
 8018ecc:	0019      	movs	r1, r3
 8018ece:	0010      	movs	r0, r2
 8018ed0:	f7e7 f968 	bl	80001a4 <__udivsi3>
 8018ed4:	0003      	movs	r3, r0
 8018ed6:	3305      	adds	r3, #5
 8018ed8:	613b      	str	r3, [r7, #16]
 8018eda:	e02a      	b.n	8018f32 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	00db      	lsls	r3, r3, #3
 8018ee0:	0019      	movs	r1, r3
 8018ee2:	68f8      	ldr	r0, [r7, #12]
 8018ee4:	f7e7 f95e 	bl	80001a4 <__udivsi3>
 8018ee8:	0003      	movs	r3, r0
 8018eea:	001a      	movs	r2, r3
 8018eec:	0013      	movs	r3, r2
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	189b      	adds	r3, r3, r2
 8018ef2:	005b      	lsls	r3, r3, #1
 8018ef4:	001a      	movs	r2, r3
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	695b      	ldr	r3, [r3, #20]
 8018efa:	0019      	movs	r1, r3
 8018efc:	0010      	movs	r0, r2
 8018efe:	f7e7 f951 	bl	80001a4 <__udivsi3>
 8018f02:	0003      	movs	r3, r0
 8018f04:	3305      	adds	r3, #5
 8018f06:	613b      	str	r3, [r7, #16]
 8018f08:	e013      	b.n	8018f32 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f0a:	6979      	ldr	r1, [r7, #20]
 8018f0c:	68f8      	ldr	r0, [r7, #12]
 8018f0e:	f7e7 f949 	bl	80001a4 <__udivsi3>
 8018f12:	0003      	movs	r3, r0
 8018f14:	001a      	movs	r2, r3
 8018f16:	0013      	movs	r3, r2
 8018f18:	009b      	lsls	r3, r3, #2
 8018f1a:	189b      	adds	r3, r3, r2
 8018f1c:	005b      	lsls	r3, r3, #1
 8018f1e:	001a      	movs	r2, r3
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	695b      	ldr	r3, [r3, #20]
 8018f24:	0019      	movs	r1, r3
 8018f26:	0010      	movs	r0, r2
 8018f28:	f7e7 f93c 	bl	80001a4 <__udivsi3>
 8018f2c:	0003      	movs	r3, r0
 8018f2e:	3305      	adds	r3, #5
 8018f30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018f32:	693b      	ldr	r3, [r7, #16]
 8018f34:	210a      	movs	r1, #10
 8018f36:	0018      	movs	r0, r3
 8018f38:	f7e7 f934 	bl	80001a4 <__udivsi3>
 8018f3c:	0003      	movs	r3, r0
 8018f3e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	2201      	movs	r2, #1
 8018f44:	4013      	ands	r3, r2
 8018f46:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018f48:	693a      	ldr	r2, [r7, #16]
 8018f4a:	69bb      	ldr	r3, [r7, #24]
 8018f4c:	1ad3      	subs	r3, r2, r3
 8018f4e:	085b      	lsrs	r3, r3, #1
 8018f50:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	021b      	lsls	r3, r3, #8
 8018f56:	61bb      	str	r3, [r7, #24]
 8018f58:	e003      	b.n	8018f62 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018f5a:	2302      	movs	r3, #2
 8018f5c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8018f62:	69fb      	ldr	r3, [r7, #28]
 8018f64:	2b01      	cmp	r3, #1
 8018f66:	d902      	bls.n	8018f6e <HAL_I2S_Init+0x152>
 8018f68:	69fb      	ldr	r3, [r7, #28]
 8018f6a:	2bff      	cmp	r3, #255	@ 0xff
 8018f6c:	d907      	bls.n	8018f7e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f72:	2210      	movs	r2, #16
 8018f74:	431a      	orrs	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	e039      	b.n	8018ff2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	691a      	ldr	r2, [r3, #16]
 8018f82:	69bb      	ldr	r3, [r7, #24]
 8018f84:	431a      	orrs	r2, r3
 8018f86:	0011      	movs	r1, r2
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	69fa      	ldr	r2, [r7, #28]
 8018f8e:	430a      	orrs	r2, r1
 8018f90:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	69db      	ldr	r3, [r3, #28]
 8018f98:	4a18      	ldr	r2, [pc, #96]	@ (8018ffc <HAL_I2S_Init+0x1e0>)
 8018f9a:	401a      	ands	r2, r3
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6859      	ldr	r1, [r3, #4]
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	689b      	ldr	r3, [r3, #8]
 8018fa4:	4319      	orrs	r1, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	68db      	ldr	r3, [r3, #12]
 8018faa:	4319      	orrs	r1, r3
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	699b      	ldr	r3, [r3, #24]
 8018fb0:	430b      	orrs	r3, r1
 8018fb2:	431a      	orrs	r2, r3
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	2180      	movs	r1, #128	@ 0x80
 8018fba:	0109      	lsls	r1, r1, #4
 8018fbc:	430a      	orrs	r2, r1
 8018fbe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	689b      	ldr	r3, [r3, #8]
 8018fc4:	2b30      	cmp	r3, #48	@ 0x30
 8018fc6:	d003      	beq.n	8018fd0 <HAL_I2S_Init+0x1b4>
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	689b      	ldr	r3, [r3, #8]
 8018fcc:	2bb0      	cmp	r3, #176	@ 0xb0
 8018fce:	d108      	bne.n	8018fe2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	69da      	ldr	r2, [r3, #28]
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	2180      	movs	r1, #128	@ 0x80
 8018fdc:	0149      	lsls	r1, r1, #5
 8018fde:	430a      	orrs	r2, r1
 8018fe0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2235      	movs	r2, #53	@ 0x35
 8018fec:	2101      	movs	r1, #1
 8018fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018ff0:	2300      	movs	r3, #0
}
 8018ff2:	0018      	movs	r0, r3
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	b008      	add	sp, #32
 8018ff8:	bd80      	pop	{r7, pc}
 8018ffa:	46c0      	nop			@ (mov r8, r8)
 8018ffc:	fffff040 	.word	0xfffff040

08019000 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b086      	sub	sp, #24
 8019004:	af00      	add	r7, sp, #0
 8019006:	60f8      	str	r0, [r7, #12]
 8019008:	60b9      	str	r1, [r7, #8]
 801900a:	1dbb      	adds	r3, r7, #6
 801900c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d003      	beq.n	801901c <HAL_I2S_Receive_DMA+0x1c>
 8019014:	1dbb      	adds	r3, r7, #6
 8019016:	881b      	ldrh	r3, [r3, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d101      	bne.n	8019020 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801901c:	2301      	movs	r3, #1
 801901e:	e0a6      	b.n	801916e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	2234      	movs	r2, #52	@ 0x34
 8019024:	5c9b      	ldrb	r3, [r3, r2]
 8019026:	b2db      	uxtb	r3, r3
 8019028:	2b01      	cmp	r3, #1
 801902a:	d101      	bne.n	8019030 <HAL_I2S_Receive_DMA+0x30>
 801902c:	2302      	movs	r3, #2
 801902e:	e09e      	b.n	801916e <HAL_I2S_Receive_DMA+0x16e>
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	2234      	movs	r2, #52	@ 0x34
 8019034:	2101      	movs	r1, #1
 8019036:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	2235      	movs	r2, #53	@ 0x35
 801903c:	5c9b      	ldrb	r3, [r3, r2]
 801903e:	b2db      	uxtb	r3, r3
 8019040:	2b01      	cmp	r3, #1
 8019042:	d005      	beq.n	8019050 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	2234      	movs	r2, #52	@ 0x34
 8019048:	2100      	movs	r1, #0
 801904a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 801904c:	2302      	movs	r3, #2
 801904e:	e08e      	b.n	801916e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	2235      	movs	r2, #53	@ 0x35
 8019054:	2104      	movs	r1, #4
 8019056:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	2200      	movs	r2, #0
 801905c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	68ba      	ldr	r2, [r7, #8]
 8019062:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	69db      	ldr	r3, [r3, #28]
 801906a:	2207      	movs	r2, #7
 801906c:	4013      	ands	r3, r2
 801906e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8019070:	697b      	ldr	r3, [r7, #20]
 8019072:	2b03      	cmp	r3, #3
 8019074:	d002      	beq.n	801907c <HAL_I2S_Receive_DMA+0x7c>
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	2b05      	cmp	r3, #5
 801907a:	d10c      	bne.n	8019096 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 801907c:	1dbb      	adds	r3, r7, #6
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	18db      	adds	r3, r3, r3
 8019082:	b29a      	uxth	r2, r3
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8019088:	1dbb      	adds	r3, r7, #6
 801908a:	881b      	ldrh	r3, [r3, #0]
 801908c:	18db      	adds	r3, r3, r3
 801908e:	b29a      	uxth	r2, r3
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8019094:	e007      	b.n	80190a6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	1dba      	adds	r2, r7, #6
 801909a:	8812      	ldrh	r2, [r2, #0]
 801909c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	1dba      	adds	r2, r7, #6
 80190a2:	8812      	ldrh	r2, [r2, #0]
 80190a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190aa:	4a33      	ldr	r2, [pc, #204]	@ (8019178 <HAL_I2S_Receive_DMA+0x178>)
 80190ac:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190b2:	4a32      	ldr	r2, [pc, #200]	@ (801917c <HAL_I2S_Receive_DMA+0x17c>)
 80190b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190ba:	4a31      	ldr	r2, [pc, #196]	@ (8019180 <HAL_I2S_Receive_DMA+0x180>)
 80190bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	69da      	ldr	r2, [r3, #28]
 80190c4:	23c0      	movs	r3, #192	@ 0xc0
 80190c6:	009b      	lsls	r3, r3, #2
 80190c8:	401a      	ands	r2, r3
 80190ca:	23c0      	movs	r3, #192	@ 0xc0
 80190cc:	009b      	lsls	r3, r3, #2
 80190ce:	429a      	cmp	r2, r3
 80190d0:	d10a      	bne.n	80190e8 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80190d2:	2300      	movs	r3, #0
 80190d4:	613b      	str	r3, [r7, #16]
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	68db      	ldr	r3, [r3, #12]
 80190dc:	613b      	str	r3, [r7, #16]
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	689b      	ldr	r3, [r3, #8]
 80190e4:	613b      	str	r3, [r7, #16]
 80190e6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	330c      	adds	r3, #12
 80190f2:	0019      	movs	r1, r3
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190f8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80190fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019100:	f7fc f8fc 	bl	80152fc <HAL_DMA_Start_IT>
 8019104:	1e03      	subs	r3, r0, #0
 8019106:	d00f      	beq.n	8019128 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801910c:	2208      	movs	r2, #8
 801910e:	431a      	orrs	r2, r3
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	2235      	movs	r2, #53	@ 0x35
 8019118:	2101      	movs	r1, #1
 801911a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	2234      	movs	r2, #52	@ 0x34
 8019120:	2100      	movs	r1, #0
 8019122:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8019124:	2301      	movs	r3, #1
 8019126:	e022      	b.n	801916e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	69da      	ldr	r2, [r3, #28]
 801912e:	2380      	movs	r3, #128	@ 0x80
 8019130:	00db      	lsls	r3, r3, #3
 8019132:	4013      	ands	r3, r2
 8019134:	d108      	bne.n	8019148 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	69da      	ldr	r2, [r3, #28]
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2180      	movs	r1, #128	@ 0x80
 8019142:	00c9      	lsls	r1, r1, #3
 8019144:	430a      	orrs	r2, r1
 8019146:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	2201      	movs	r2, #1
 8019150:	4013      	ands	r3, r2
 8019152:	d107      	bne.n	8019164 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	685a      	ldr	r2, [r3, #4]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	2101      	movs	r1, #1
 8019160:	430a      	orrs	r2, r1
 8019162:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	2234      	movs	r2, #52	@ 0x34
 8019168:	2100      	movs	r1, #0
 801916a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 801916c:	2300      	movs	r3, #0
}
 801916e:	0018      	movs	r0, r3
 8019170:	46bd      	mov	sp, r7
 8019172:	b006      	add	sp, #24
 8019174:	bd80      	pop	{r7, pc}
 8019176:	46c0      	nop			@ (mov r8, r8)
 8019178:	08019361 	.word	0x08019361
 801917c:	0801931d 	.word	0x0801931d
 8019180:	0801937f 	.word	0x0801937f

08019184 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b086      	sub	sp, #24
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801918c:	2317      	movs	r3, #23
 801918e:	18fb      	adds	r3, r7, r3
 8019190:	2200      	movs	r2, #0
 8019192:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	685a      	ldr	r2, [r3, #4]
 8019198:	2380      	movs	r3, #128	@ 0x80
 801919a:	009b      	lsls	r3, r3, #2
 801919c:	429a      	cmp	r2, r3
 801919e:	d003      	beq.n	80191a8 <HAL_I2S_DMAStop+0x24>
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d158      	bne.n	801925a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d010      	beq.n	80191d2 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80191b4:	0018      	movs	r0, r3
 80191b6:	f7fc f907 	bl	80153c8 <HAL_DMA_Abort>
 80191ba:	1e03      	subs	r3, r0, #0
 80191bc:	d009      	beq.n	80191d2 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191c2:	2208      	movs	r2, #8
 80191c4:	431a      	orrs	r2, r3
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80191ca:	2317      	movs	r3, #23
 80191cc:	18fb      	adds	r3, r7, r3
 80191ce:	2201      	movs	r2, #1
 80191d0:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80191d2:	6878      	ldr	r0, [r7, #4]
 80191d4:	2364      	movs	r3, #100	@ 0x64
 80191d6:	2201      	movs	r2, #1
 80191d8:	2102      	movs	r1, #2
 80191da:	f000 f8f7 	bl	80193cc <I2S_WaitFlagStateUntilTimeout>
 80191de:	1e03      	subs	r3, r0, #0
 80191e0:	d00d      	beq.n	80191fe <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191e6:	2201      	movs	r2, #1
 80191e8:	431a      	orrs	r2, r3
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2235      	movs	r2, #53	@ 0x35
 80191f2:	2101      	movs	r1, #1
 80191f4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80191f6:	2317      	movs	r3, #23
 80191f8:	18fb      	adds	r3, r7, r3
 80191fa:	2201      	movs	r2, #1
 80191fc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80191fe:	6878      	ldr	r0, [r7, #4]
 8019200:	2364      	movs	r3, #100	@ 0x64
 8019202:	2200      	movs	r2, #0
 8019204:	2180      	movs	r1, #128	@ 0x80
 8019206:	f000 f8e1 	bl	80193cc <I2S_WaitFlagStateUntilTimeout>
 801920a:	1e03      	subs	r3, r0, #0
 801920c:	d00d      	beq.n	801922a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019212:	2201      	movs	r2, #1
 8019214:	431a      	orrs	r2, r3
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2235      	movs	r2, #53	@ 0x35
 801921e:	2101      	movs	r1, #1
 8019220:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8019222:	2317      	movs	r3, #23
 8019224:	18fb      	adds	r3, r7, r3
 8019226:	2201      	movs	r2, #1
 8019228:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	69da      	ldr	r2, [r3, #28]
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4938      	ldr	r1, [pc, #224]	@ (8019318 <HAL_I2S_DMAStop+0x194>)
 8019236:	400a      	ands	r2, r1
 8019238:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801923a:	2300      	movs	r3, #0
 801923c:	613b      	str	r3, [r7, #16]
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	689b      	ldr	r3, [r3, #8]
 8019244:	613b      	str	r3, [r7, #16]
 8019246:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	685a      	ldr	r2, [r3, #4]
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	2102      	movs	r1, #2
 8019254:	438a      	bics	r2, r1
 8019256:	605a      	str	r2, [r3, #4]
 8019258:	e053      	b.n	8019302 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	685a      	ldr	r2, [r3, #4]
 801925e:	23c0      	movs	r3, #192	@ 0xc0
 8019260:	009b      	lsls	r3, r3, #2
 8019262:	429a      	cmp	r2, r3
 8019264:	d005      	beq.n	8019272 <HAL_I2S_DMAStop+0xee>
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	685a      	ldr	r2, [r3, #4]
 801926a:	2380      	movs	r3, #128	@ 0x80
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	429a      	cmp	r2, r3
 8019270:	d147      	bne.n	8019302 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019276:	2b00      	cmp	r3, #0
 8019278:	d010      	beq.n	801929c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801927e:	0018      	movs	r0, r3
 8019280:	f7fc f8a2 	bl	80153c8 <HAL_DMA_Abort>
 8019284:	1e03      	subs	r3, r0, #0
 8019286:	d009      	beq.n	801929c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801928c:	2208      	movs	r2, #8
 801928e:	431a      	orrs	r2, r3
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019294:	2317      	movs	r3, #23
 8019296:	18fb      	adds	r3, r7, r3
 8019298:	2201      	movs	r2, #1
 801929a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	69da      	ldr	r2, [r3, #28]
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	491c      	ldr	r1, [pc, #112]	@ (8019318 <HAL_I2S_DMAStop+0x194>)
 80192a8:	400a      	ands	r2, r1
 80192aa:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80192ac:	2300      	movs	r3, #0
 80192ae:	60fb      	str	r3, [r7, #12]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	68db      	ldr	r3, [r3, #12]
 80192b6:	60fb      	str	r3, [r7, #12]
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	689b      	ldr	r3, [r3, #8]
 80192be:	60fb      	str	r3, [r7, #12]
 80192c0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	685a      	ldr	r2, [r3, #4]
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	2101      	movs	r1, #1
 80192ce:	438a      	bics	r2, r1
 80192d0:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	685a      	ldr	r2, [r3, #4]
 80192d6:	2380      	movs	r3, #128	@ 0x80
 80192d8:	005b      	lsls	r3, r3, #1
 80192da:	429a      	cmp	r2, r3
 80192dc:	d10e      	bne.n	80192fc <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192e2:	2240      	movs	r2, #64	@ 0x40
 80192e4:	431a      	orrs	r2, r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	2235      	movs	r2, #53	@ 0x35
 80192ee:	2101      	movs	r1, #1
 80192f0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80192f2:	2317      	movs	r3, #23
 80192f4:	18fb      	adds	r3, r7, r3
 80192f6:	2201      	movs	r2, #1
 80192f8:	701a      	strb	r2, [r3, #0]
 80192fa:	e002      	b.n	8019302 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	2235      	movs	r2, #53	@ 0x35
 8019306:	2101      	movs	r1, #1
 8019308:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801930a:	2317      	movs	r3, #23
 801930c:	18fb      	adds	r3, r7, r3
 801930e:	781b      	ldrb	r3, [r3, #0]
}
 8019310:	0018      	movs	r0, r3
 8019312:	46bd      	mov	sp, r7
 8019314:	b006      	add	sp, #24
 8019316:	bd80      	pop	{r7, pc}
 8019318:	fffffbff 	.word	0xfffffbff

0801931c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b084      	sub	sp, #16
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019328:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	69db      	ldr	r3, [r3, #28]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d10e      	bne.n	8019350 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	685a      	ldr	r2, [r3, #4]
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	2101      	movs	r1, #1
 801933e:	438a      	bics	r2, r1
 8019340:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	2200      	movs	r2, #0
 8019346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	2235      	movs	r2, #53	@ 0x35
 801934c:	2101      	movs	r1, #1
 801934e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	0018      	movs	r0, r3
 8019354:	f7f8 fbba 	bl	8011acc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019358:	46c0      	nop			@ (mov r8, r8)
 801935a:	46bd      	mov	sp, r7
 801935c:	b004      	add	sp, #16
 801935e:	bd80      	pop	{r7, pc}

08019360 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801936c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	0018      	movs	r0, r3
 8019372:	f7f8 fb99 	bl	8011aa8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019376:	46c0      	nop			@ (mov r8, r8)
 8019378:	46bd      	mov	sp, r7
 801937a:	b004      	add	sp, #16
 801937c:	bd80      	pop	{r7, pc}

0801937e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801937e:	b580      	push	{r7, lr}
 8019380:	b084      	sub	sp, #16
 8019382:	af00      	add	r7, sp, #0
 8019384:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801938a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	685a      	ldr	r2, [r3, #4]
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	2103      	movs	r1, #3
 8019398:	438a      	bics	r2, r1
 801939a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	2200      	movs	r2, #0
 80193a0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	2200      	movs	r2, #0
 80193a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	2235      	movs	r2, #53	@ 0x35
 80193ac:	2101      	movs	r1, #1
 80193ae:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193b4:	2208      	movs	r2, #8
 80193b6:	431a      	orrs	r2, r3
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	0018      	movs	r0, r3
 80193c0:	f7f8 fbd2 	bl	8011b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80193c4:	46c0      	nop			@ (mov r8, r8)
 80193c6:	46bd      	mov	sp, r7
 80193c8:	b004      	add	sp, #16
 80193ca:	bd80      	pop	{r7, pc}

080193cc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b086      	sub	sp, #24
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	60f8      	str	r0, [r7, #12]
 80193d4:	60b9      	str	r1, [r7, #8]
 80193d6:	603b      	str	r3, [r7, #0]
 80193d8:	1dfb      	adds	r3, r7, #7
 80193da:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80193dc:	f7fb fa70 	bl	80148c0 <HAL_GetTick>
 80193e0:	0003      	movs	r3, r0
 80193e2:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80193e4:	e017      	b.n	8019416 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	3301      	adds	r3, #1
 80193ea:	d014      	beq.n	8019416 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80193ec:	f7fb fa68 	bl	80148c0 <HAL_GetTick>
 80193f0:	0002      	movs	r2, r0
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	1ad3      	subs	r3, r2, r3
 80193f6:	683a      	ldr	r2, [r7, #0]
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d902      	bls.n	8019402 <I2S_WaitFlagStateUntilTimeout+0x36>
 80193fc:	683b      	ldr	r3, [r7, #0]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d109      	bne.n	8019416 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	2235      	movs	r2, #53	@ 0x35
 8019406:	2101      	movs	r1, #1
 8019408:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	2234      	movs	r2, #52	@ 0x34
 801940e:	2100      	movs	r1, #0
 8019410:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019412:	2303      	movs	r3, #3
 8019414:	e00f      	b.n	8019436 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	689b      	ldr	r3, [r3, #8]
 801941c:	68ba      	ldr	r2, [r7, #8]
 801941e:	4013      	ands	r3, r2
 8019420:	68ba      	ldr	r2, [r7, #8]
 8019422:	1ad3      	subs	r3, r2, r3
 8019424:	425a      	negs	r2, r3
 8019426:	4153      	adcs	r3, r2
 8019428:	b2db      	uxtb	r3, r3
 801942a:	001a      	movs	r2, r3
 801942c:	1dfb      	adds	r3, r7, #7
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	429a      	cmp	r2, r3
 8019432:	d1d8      	bne.n	80193e6 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8019434:	2300      	movs	r3, #0
}
 8019436:	0018      	movs	r0, r3
 8019438:	46bd      	mov	sp, r7
 801943a:	b006      	add	sp, #24
 801943c:	bd80      	pop	{r7, pc}
	...

08019440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019442:	b08b      	sub	sp, #44	@ 0x2c
 8019444:	af06      	add	r7, sp, #24
 8019446:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d101      	bne.n	8019452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801944e:	2301      	movs	r3, #1
 8019450:	e0f0      	b.n	8019634 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	4a79      	ldr	r2, [pc, #484]	@ (801963c <HAL_PCD_Init+0x1fc>)
 8019456:	5c9b      	ldrb	r3, [r3, r2]
 8019458:	b2db      	uxtb	r3, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	d108      	bne.n	8019470 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	23aa      	movs	r3, #170	@ 0xaa
 8019462:	009b      	lsls	r3, r3, #2
 8019464:	2100      	movs	r1, #0
 8019466:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	0018      	movs	r0, r3
 801946c:	f00a f856 	bl	802351c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	4a72      	ldr	r2, [pc, #456]	@ (801963c <HAL_PCD_Init+0x1fc>)
 8019474:	2103      	movs	r1, #3
 8019476:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	0018      	movs	r0, r3
 801947e:	f005 fffb 	bl	801f478 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019482:	230f      	movs	r3, #15
 8019484:	18fb      	adds	r3, r7, r3
 8019486:	2200      	movs	r2, #0
 8019488:	701a      	strb	r2, [r3, #0]
 801948a:	e049      	b.n	8019520 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801948c:	200f      	movs	r0, #15
 801948e:	183b      	adds	r3, r7, r0
 8019490:	781b      	ldrb	r3, [r3, #0]
 8019492:	6879      	ldr	r1, [r7, #4]
 8019494:	1c5a      	adds	r2, r3, #1
 8019496:	0013      	movs	r3, r2
 8019498:	009b      	lsls	r3, r3, #2
 801949a:	189b      	adds	r3, r3, r2
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	18cb      	adds	r3, r1, r3
 80194a0:	3301      	adds	r3, #1
 80194a2:	2201      	movs	r2, #1
 80194a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80194a6:	183b      	adds	r3, r7, r0
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	6879      	ldr	r1, [r7, #4]
 80194ac:	1c5a      	adds	r2, r3, #1
 80194ae:	0013      	movs	r3, r2
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	189b      	adds	r3, r3, r2
 80194b4:	00db      	lsls	r3, r3, #3
 80194b6:	183a      	adds	r2, r7, r0
 80194b8:	7812      	ldrb	r2, [r2, #0]
 80194ba:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80194bc:	183b      	adds	r3, r7, r0
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	6879      	ldr	r1, [r7, #4]
 80194c2:	1c5a      	adds	r2, r3, #1
 80194c4:	0013      	movs	r3, r2
 80194c6:	009b      	lsls	r3, r3, #2
 80194c8:	189b      	adds	r3, r3, r2
 80194ca:	00db      	lsls	r3, r3, #3
 80194cc:	18cb      	adds	r3, r1, r3
 80194ce:	3303      	adds	r3, #3
 80194d0:	2200      	movs	r2, #0
 80194d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80194d4:	183b      	adds	r3, r7, r0
 80194d6:	781a      	ldrb	r2, [r3, #0]
 80194d8:	6879      	ldr	r1, [r7, #4]
 80194da:	0013      	movs	r3, r2
 80194dc:	009b      	lsls	r3, r3, #2
 80194de:	189b      	adds	r3, r3, r2
 80194e0:	00db      	lsls	r3, r3, #3
 80194e2:	18cb      	adds	r3, r1, r3
 80194e4:	3338      	adds	r3, #56	@ 0x38
 80194e6:	2200      	movs	r2, #0
 80194e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80194ea:	183b      	adds	r3, r7, r0
 80194ec:	781a      	ldrb	r2, [r3, #0]
 80194ee:	6879      	ldr	r1, [r7, #4]
 80194f0:	0013      	movs	r3, r2
 80194f2:	009b      	lsls	r3, r3, #2
 80194f4:	189b      	adds	r3, r3, r2
 80194f6:	00db      	lsls	r3, r3, #3
 80194f8:	18cb      	adds	r3, r1, r3
 80194fa:	333c      	adds	r3, #60	@ 0x3c
 80194fc:	2200      	movs	r2, #0
 80194fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019500:	183b      	adds	r3, r7, r0
 8019502:	781a      	ldrb	r2, [r3, #0]
 8019504:	6879      	ldr	r1, [r7, #4]
 8019506:	0013      	movs	r3, r2
 8019508:	009b      	lsls	r3, r3, #2
 801950a:	189b      	adds	r3, r3, r2
 801950c:	00db      	lsls	r3, r3, #3
 801950e:	18cb      	adds	r3, r1, r3
 8019510:	3340      	adds	r3, #64	@ 0x40
 8019512:	2200      	movs	r2, #0
 8019514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019516:	183b      	adds	r3, r7, r0
 8019518:	781a      	ldrb	r2, [r3, #0]
 801951a:	183b      	adds	r3, r7, r0
 801951c:	3201      	adds	r2, #1
 801951e:	701a      	strb	r2, [r3, #0]
 8019520:	210f      	movs	r1, #15
 8019522:	187b      	adds	r3, r7, r1
 8019524:	781a      	ldrb	r2, [r3, #0]
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	429a      	cmp	r2, r3
 801952c:	d3ae      	bcc.n	801948c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801952e:	187b      	adds	r3, r7, r1
 8019530:	2200      	movs	r2, #0
 8019532:	701a      	strb	r2, [r3, #0]
 8019534:	e056      	b.n	80195e4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019536:	240f      	movs	r4, #15
 8019538:	193b      	adds	r3, r7, r4
 801953a:	781a      	ldrb	r2, [r3, #0]
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	236a      	movs	r3, #106	@ 0x6a
 8019540:	33ff      	adds	r3, #255	@ 0xff
 8019542:	0019      	movs	r1, r3
 8019544:	0013      	movs	r3, r2
 8019546:	009b      	lsls	r3, r3, #2
 8019548:	189b      	adds	r3, r3, r2
 801954a:	00db      	lsls	r3, r3, #3
 801954c:	18c3      	adds	r3, r0, r3
 801954e:	185b      	adds	r3, r3, r1
 8019550:	2200      	movs	r2, #0
 8019552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019554:	193b      	adds	r3, r7, r4
 8019556:	781a      	ldrb	r2, [r3, #0]
 8019558:	6878      	ldr	r0, [r7, #4]
 801955a:	23b4      	movs	r3, #180	@ 0xb4
 801955c:	0059      	lsls	r1, r3, #1
 801955e:	0013      	movs	r3, r2
 8019560:	009b      	lsls	r3, r3, #2
 8019562:	189b      	adds	r3, r3, r2
 8019564:	00db      	lsls	r3, r3, #3
 8019566:	18c3      	adds	r3, r0, r3
 8019568:	185b      	adds	r3, r3, r1
 801956a:	193a      	adds	r2, r7, r4
 801956c:	7812      	ldrb	r2, [r2, #0]
 801956e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019570:	193b      	adds	r3, r7, r4
 8019572:	781a      	ldrb	r2, [r3, #0]
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	236c      	movs	r3, #108	@ 0x6c
 8019578:	33ff      	adds	r3, #255	@ 0xff
 801957a:	0019      	movs	r1, r3
 801957c:	0013      	movs	r3, r2
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	189b      	adds	r3, r3, r2
 8019582:	00db      	lsls	r3, r3, #3
 8019584:	18c3      	adds	r3, r0, r3
 8019586:	185b      	adds	r3, r3, r1
 8019588:	2200      	movs	r2, #0
 801958a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801958c:	193b      	adds	r3, r7, r4
 801958e:	781a      	ldrb	r2, [r3, #0]
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	23bc      	movs	r3, #188	@ 0xbc
 8019594:	0059      	lsls	r1, r3, #1
 8019596:	0013      	movs	r3, r2
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	189b      	adds	r3, r3, r2
 801959c:	00db      	lsls	r3, r3, #3
 801959e:	18c3      	adds	r3, r0, r3
 80195a0:	185b      	adds	r3, r3, r1
 80195a2:	2200      	movs	r2, #0
 80195a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80195a6:	193b      	adds	r3, r7, r4
 80195a8:	781a      	ldrb	r2, [r3, #0]
 80195aa:	6878      	ldr	r0, [r7, #4]
 80195ac:	23be      	movs	r3, #190	@ 0xbe
 80195ae:	0059      	lsls	r1, r3, #1
 80195b0:	0013      	movs	r3, r2
 80195b2:	009b      	lsls	r3, r3, #2
 80195b4:	189b      	adds	r3, r3, r2
 80195b6:	00db      	lsls	r3, r3, #3
 80195b8:	18c3      	adds	r3, r0, r3
 80195ba:	185b      	adds	r3, r3, r1
 80195bc:	2200      	movs	r2, #0
 80195be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80195c0:	193b      	adds	r3, r7, r4
 80195c2:	781a      	ldrb	r2, [r3, #0]
 80195c4:	6878      	ldr	r0, [r7, #4]
 80195c6:	23c0      	movs	r3, #192	@ 0xc0
 80195c8:	0059      	lsls	r1, r3, #1
 80195ca:	0013      	movs	r3, r2
 80195cc:	009b      	lsls	r3, r3, #2
 80195ce:	189b      	adds	r3, r3, r2
 80195d0:	00db      	lsls	r3, r3, #3
 80195d2:	18c3      	adds	r3, r0, r3
 80195d4:	185b      	adds	r3, r3, r1
 80195d6:	2200      	movs	r2, #0
 80195d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195da:	193b      	adds	r3, r7, r4
 80195dc:	781a      	ldrb	r2, [r3, #0]
 80195de:	193b      	adds	r3, r7, r4
 80195e0:	3201      	adds	r2, #1
 80195e2:	701a      	strb	r2, [r3, #0]
 80195e4:	230f      	movs	r3, #15
 80195e6:	18fb      	adds	r3, r7, r3
 80195e8:	781a      	ldrb	r2, [r3, #0]
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	685b      	ldr	r3, [r3, #4]
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d3a1      	bcc.n	8019536 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	6818      	ldr	r0, [r3, #0]
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	466a      	mov	r2, sp
 80195fa:	0011      	movs	r1, r2
 80195fc:	001a      	movs	r2, r3
 80195fe:	3210      	adds	r2, #16
 8019600:	ca70      	ldmia	r2!, {r4, r5, r6}
 8019602:	c170      	stmia	r1!, {r4, r5, r6}
 8019604:	ca30      	ldmia	r2!, {r4, r5}
 8019606:	c130      	stmia	r1!, {r4, r5}
 8019608:	6859      	ldr	r1, [r3, #4]
 801960a:	689a      	ldr	r2, [r3, #8]
 801960c:	68db      	ldr	r3, [r3, #12]
 801960e:	f005 ff4d 	bl	801f4ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2224      	movs	r2, #36	@ 0x24
 8019616:	2100      	movs	r1, #0
 8019618:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	4a07      	ldr	r2, [pc, #28]	@ (801963c <HAL_PCD_Init+0x1fc>)
 801961e:	2101      	movs	r1, #1
 8019620:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	69db      	ldr	r3, [r3, #28]
 8019626:	2b01      	cmp	r3, #1
 8019628:	d103      	bne.n	8019632 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	0018      	movs	r0, r3
 801962e:	f001 fd23 	bl	801b078 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8019632:	2300      	movs	r3, #0
}
 8019634:	0018      	movs	r0, r3
 8019636:	46bd      	mov	sp, r7
 8019638:	b005      	add	sp, #20
 801963a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801963c:	000002a9 	.word	0x000002a9

08019640 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b082      	sub	sp, #8
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019648:	687a      	ldr	r2, [r7, #4]
 801964a:	23aa      	movs	r3, #170	@ 0xaa
 801964c:	009b      	lsls	r3, r3, #2
 801964e:	5cd3      	ldrb	r3, [r2, r3]
 8019650:	2b01      	cmp	r3, #1
 8019652:	d101      	bne.n	8019658 <HAL_PCD_Start+0x18>
 8019654:	2302      	movs	r3, #2
 8019656:	e014      	b.n	8019682 <HAL_PCD_Start+0x42>
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	23aa      	movs	r3, #170	@ 0xaa
 801965c:	009b      	lsls	r3, r3, #2
 801965e:	2101      	movs	r1, #1
 8019660:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	0018      	movs	r0, r3
 8019668:	f005 fef0 	bl	801f44c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	0018      	movs	r0, r3
 8019672:	f007 fef3 	bl	802145c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019676:	687a      	ldr	r2, [r7, #4]
 8019678:	23aa      	movs	r3, #170	@ 0xaa
 801967a:	009b      	lsls	r3, r3, #2
 801967c:	2100      	movs	r1, #0
 801967e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019680:	2300      	movs	r3, #0
}
 8019682:	0018      	movs	r0, r3
 8019684:	46bd      	mov	sp, r7
 8019686:	b002      	add	sp, #8
 8019688:	bd80      	pop	{r7, pc}
	...

0801968c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b084      	sub	sp, #16
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	0018      	movs	r0, r3
 801969a:	f007 fef5 	bl	8021488 <USB_ReadInterrupts>
 801969e:	0003      	movs	r3, r0
 80196a0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	2380      	movs	r3, #128	@ 0x80
 80196a6:	021b      	lsls	r3, r3, #8
 80196a8:	4013      	ands	r3, r2
 80196aa:	d004      	beq.n	80196b6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	0018      	movs	r0, r3
 80196b0:	f000 fb62 	bl	8019d78 <PCD_EP_ISR_Handler>

    return;
 80196b4:	e11d      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80196b6:	68fa      	ldr	r2, [r7, #12]
 80196b8:	2380      	movs	r3, #128	@ 0x80
 80196ba:	00db      	lsls	r3, r3, #3
 80196bc:	4013      	ands	r3, r2
 80196be:	d015      	beq.n	80196ec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	2244      	movs	r2, #68	@ 0x44
 80196c6:	5a9b      	ldrh	r3, [r3, r2]
 80196c8:	b29a      	uxth	r2, r3
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	498a      	ldr	r1, [pc, #552]	@ (80198f8 <HAL_PCD_IRQHandler+0x26c>)
 80196d0:	400a      	ands	r2, r1
 80196d2:	b291      	uxth	r1, r2
 80196d4:	2244      	movs	r2, #68	@ 0x44
 80196d6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	0018      	movs	r0, r3
 80196dc:	f009 ffa1 	bl	8023622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2100      	movs	r1, #0
 80196e4:	0018      	movs	r0, r3
 80196e6:	f000 f915 	bl	8019914 <HAL_PCD_SetAddress>

    return;
 80196ea:	e102      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80196ec:	68fa      	ldr	r2, [r7, #12]
 80196ee:	2380      	movs	r3, #128	@ 0x80
 80196f0:	01db      	lsls	r3, r3, #7
 80196f2:	4013      	ands	r3, r2
 80196f4:	d00c      	beq.n	8019710 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	2244      	movs	r2, #68	@ 0x44
 80196fc:	5a9b      	ldrh	r3, [r3, r2]
 80196fe:	b29a      	uxth	r2, r3
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	497d      	ldr	r1, [pc, #500]	@ (80198fc <HAL_PCD_IRQHandler+0x270>)
 8019706:	400a      	ands	r2, r1
 8019708:	b291      	uxth	r1, r2
 801970a:	2244      	movs	r2, #68	@ 0x44
 801970c:	5299      	strh	r1, [r3, r2]

    return;
 801970e:	e0f0      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8019710:	68fa      	ldr	r2, [r7, #12]
 8019712:	2380      	movs	r3, #128	@ 0x80
 8019714:	019b      	lsls	r3, r3, #6
 8019716:	4013      	ands	r3, r2
 8019718:	d00c      	beq.n	8019734 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	2244      	movs	r2, #68	@ 0x44
 8019720:	5a9b      	ldrh	r3, [r3, r2]
 8019722:	b29a      	uxth	r2, r3
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	4975      	ldr	r1, [pc, #468]	@ (8019900 <HAL_PCD_IRQHandler+0x274>)
 801972a:	400a      	ands	r2, r1
 801972c:	b291      	uxth	r1, r2
 801972e:	2244      	movs	r2, #68	@ 0x44
 8019730:	5299      	strh	r1, [r3, r2]

    return;
 8019732:	e0de      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8019734:	68fa      	ldr	r2, [r7, #12]
 8019736:	2380      	movs	r3, #128	@ 0x80
 8019738:	015b      	lsls	r3, r3, #5
 801973a:	4013      	ands	r3, r2
 801973c:	d038      	beq.n	80197b0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	2240      	movs	r2, #64	@ 0x40
 8019744:	5a9b      	ldrh	r3, [r3, r2]
 8019746:	b29a      	uxth	r2, r3
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	2104      	movs	r1, #4
 801974e:	438a      	bics	r2, r1
 8019750:	b291      	uxth	r1, r2
 8019752:	2240      	movs	r2, #64	@ 0x40
 8019754:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	2240      	movs	r2, #64	@ 0x40
 801975c:	5a9b      	ldrh	r3, [r3, r2]
 801975e:	b29a      	uxth	r2, r3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	2108      	movs	r1, #8
 8019766:	438a      	bics	r2, r1
 8019768:	b291      	uxth	r1, r2
 801976a:	2240      	movs	r2, #64	@ 0x40
 801976c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801976e:	687a      	ldr	r2, [r7, #4]
 8019770:	23b8      	movs	r3, #184	@ 0xb8
 8019772:	009b      	lsls	r3, r3, #2
 8019774:	5cd3      	ldrb	r3, [r2, r3]
 8019776:	2b01      	cmp	r3, #1
 8019778:	d109      	bne.n	801978e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801977a:	687a      	ldr	r2, [r7, #4]
 801977c:	23b8      	movs	r3, #184	@ 0xb8
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	2100      	movs	r1, #0
 8019782:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2100      	movs	r1, #0
 8019788:	0018      	movs	r0, r3
 801978a:	f001 fc9f 	bl	801b0cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	0018      	movs	r0, r3
 8019792:	f009 ff87 	bl	80236a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	2244      	movs	r2, #68	@ 0x44
 801979c:	5a9b      	ldrh	r3, [r3, r2]
 801979e:	b29a      	uxth	r2, r3
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	4957      	ldr	r1, [pc, #348]	@ (8019904 <HAL_PCD_IRQHandler+0x278>)
 80197a6:	400a      	ands	r2, r1
 80197a8:	b291      	uxth	r1, r2
 80197aa:	2244      	movs	r2, #68	@ 0x44
 80197ac:	5299      	strh	r1, [r3, r2]

    return;
 80197ae:	e0a0      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80197b0:	68fa      	ldr	r2, [r7, #12]
 80197b2:	2380      	movs	r3, #128	@ 0x80
 80197b4:	011b      	lsls	r3, r3, #4
 80197b6:	4013      	ands	r3, r2
 80197b8:	d028      	beq.n	801980c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	2240      	movs	r2, #64	@ 0x40
 80197c0:	5a9b      	ldrh	r3, [r3, r2]
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	2108      	movs	r1, #8
 80197ca:	430a      	orrs	r2, r1
 80197cc:	b291      	uxth	r1, r2
 80197ce:	2240      	movs	r2, #64	@ 0x40
 80197d0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	2244      	movs	r2, #68	@ 0x44
 80197d8:	5a9b      	ldrh	r3, [r3, r2]
 80197da:	b29a      	uxth	r2, r3
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	4949      	ldr	r1, [pc, #292]	@ (8019908 <HAL_PCD_IRQHandler+0x27c>)
 80197e2:	400a      	ands	r2, r1
 80197e4:	b291      	uxth	r1, r2
 80197e6:	2244      	movs	r2, #68	@ 0x44
 80197e8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	2240      	movs	r2, #64	@ 0x40
 80197f0:	5a9b      	ldrh	r3, [r3, r2]
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	2104      	movs	r1, #4
 80197fa:	430a      	orrs	r2, r1
 80197fc:	b291      	uxth	r1, r2
 80197fe:	2240      	movs	r2, #64	@ 0x40
 8019800:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	0018      	movs	r0, r3
 8019806:	f009 ff31 	bl	802366c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801980a:	e072      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	2280      	movs	r2, #128	@ 0x80
 8019810:	4013      	ands	r3, r2
 8019812:	d046      	beq.n	80198a2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	2244      	movs	r2, #68	@ 0x44
 801981a:	5a9b      	ldrh	r3, [r3, r2]
 801981c:	b29a      	uxth	r2, r3
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	2180      	movs	r1, #128	@ 0x80
 8019824:	438a      	bics	r2, r1
 8019826:	b291      	uxth	r1, r2
 8019828:	2244      	movs	r2, #68	@ 0x44
 801982a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801982c:	687a      	ldr	r2, [r7, #4]
 801982e:	23b8      	movs	r3, #184	@ 0xb8
 8019830:	009b      	lsls	r3, r3, #2
 8019832:	5cd3      	ldrb	r3, [r2, r3]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d12f      	bne.n	8019898 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2240      	movs	r2, #64	@ 0x40
 801983e:	5a9b      	ldrh	r3, [r3, r2]
 8019840:	b29a      	uxth	r2, r3
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	2104      	movs	r1, #4
 8019848:	430a      	orrs	r2, r1
 801984a:	b291      	uxth	r1, r2
 801984c:	2240      	movs	r2, #64	@ 0x40
 801984e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	2240      	movs	r2, #64	@ 0x40
 8019856:	5a9b      	ldrh	r3, [r3, r2]
 8019858:	b29a      	uxth	r2, r3
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2108      	movs	r1, #8
 8019860:	430a      	orrs	r2, r1
 8019862:	b291      	uxth	r1, r2
 8019864:	2240      	movs	r2, #64	@ 0x40
 8019866:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	23b8      	movs	r3, #184	@ 0xb8
 801986c:	009b      	lsls	r3, r3, #2
 801986e:	2101      	movs	r1, #1
 8019870:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	2254      	movs	r2, #84	@ 0x54
 8019878:	5a9b      	ldrh	r3, [r3, r2]
 801987a:	b29b      	uxth	r3, r3
 801987c:	089b      	lsrs	r3, r3, #2
 801987e:	223c      	movs	r2, #60	@ 0x3c
 8019880:	4013      	ands	r3, r2
 8019882:	0019      	movs	r1, r3
 8019884:	687a      	ldr	r2, [r7, #4]
 8019886:	23b9      	movs	r3, #185	@ 0xb9
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	2101      	movs	r1, #1
 8019890:	0018      	movs	r0, r3
 8019892:	f001 fc1b 	bl	801b0cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8019896:	e02c      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	0018      	movs	r0, r3
 801989c:	f009 fee6 	bl	802366c <HAL_PCD_SuspendCallback>
    return;
 80198a0:	e027      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80198a2:	68fa      	ldr	r2, [r7, #12]
 80198a4:	2380      	movs	r3, #128	@ 0x80
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	4013      	ands	r3, r2
 80198aa:	d010      	beq.n	80198ce <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	2244      	movs	r2, #68	@ 0x44
 80198b2:	5a9b      	ldrh	r3, [r3, r2]
 80198b4:	b29a      	uxth	r2, r3
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	4914      	ldr	r1, [pc, #80]	@ (801990c <HAL_PCD_IRQHandler+0x280>)
 80198bc:	400a      	ands	r2, r1
 80198be:	b291      	uxth	r1, r2
 80198c0:	2244      	movs	r2, #68	@ 0x44
 80198c2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	0018      	movs	r0, r3
 80198c8:	f009 fe9c 	bl	8023604 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80198cc:	e011      	b.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80198ce:	68fa      	ldr	r2, [r7, #12]
 80198d0:	2380      	movs	r3, #128	@ 0x80
 80198d2:	005b      	lsls	r3, r3, #1
 80198d4:	4013      	ands	r3, r2
 80198d6:	d00c      	beq.n	80198f2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	2244      	movs	r2, #68	@ 0x44
 80198de:	5a9b      	ldrh	r3, [r3, r2]
 80198e0:	b29a      	uxth	r2, r3
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	490a      	ldr	r1, [pc, #40]	@ (8019910 <HAL_PCD_IRQHandler+0x284>)
 80198e8:	400a      	ands	r2, r1
 80198ea:	b291      	uxth	r1, r2
 80198ec:	2244      	movs	r2, #68	@ 0x44
 80198ee:	5299      	strh	r1, [r3, r2]

    return;
 80198f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80198f2:	46bd      	mov	sp, r7
 80198f4:	b004      	add	sp, #16
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	fffffbff 	.word	0xfffffbff
 80198fc:	ffffbfff 	.word	0xffffbfff
 8019900:	ffffdfff 	.word	0xffffdfff
 8019904:	ffffefff 	.word	0xffffefff
 8019908:	fffff7ff 	.word	0xfffff7ff
 801990c:	fffffdff 	.word	0xfffffdff
 8019910:	fffffeff 	.word	0xfffffeff

08019914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b082      	sub	sp, #8
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	000a      	movs	r2, r1
 801991e:	1cfb      	adds	r3, r7, #3
 8019920:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	23aa      	movs	r3, #170	@ 0xaa
 8019926:	009b      	lsls	r3, r3, #2
 8019928:	5cd3      	ldrb	r3, [r2, r3]
 801992a:	2b01      	cmp	r3, #1
 801992c:	d101      	bne.n	8019932 <HAL_PCD_SetAddress+0x1e>
 801992e:	2302      	movs	r3, #2
 8019930:	e017      	b.n	8019962 <HAL_PCD_SetAddress+0x4e>
 8019932:	687a      	ldr	r2, [r7, #4]
 8019934:	23aa      	movs	r3, #170	@ 0xaa
 8019936:	009b      	lsls	r3, r3, #2
 8019938:	2101      	movs	r1, #1
 801993a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	1cfa      	adds	r2, r7, #3
 8019940:	2124      	movs	r1, #36	@ 0x24
 8019942:	7812      	ldrb	r2, [r2, #0]
 8019944:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	681a      	ldr	r2, [r3, #0]
 801994a:	1cfb      	adds	r3, r7, #3
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	0019      	movs	r1, r3
 8019950:	0010      	movs	r0, r2
 8019952:	f007 fd6f 	bl	8021434 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	23aa      	movs	r3, #170	@ 0xaa
 801995a:	009b      	lsls	r3, r3, #2
 801995c:	2100      	movs	r1, #0
 801995e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019960:	2300      	movs	r3, #0
}
 8019962:	0018      	movs	r0, r3
 8019964:	46bd      	mov	sp, r7
 8019966:	b002      	add	sp, #8
 8019968:	bd80      	pop	{r7, pc}

0801996a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801996a:	b590      	push	{r4, r7, lr}
 801996c:	b085      	sub	sp, #20
 801996e:	af00      	add	r7, sp, #0
 8019970:	6078      	str	r0, [r7, #4]
 8019972:	000c      	movs	r4, r1
 8019974:	0010      	movs	r0, r2
 8019976:	0019      	movs	r1, r3
 8019978:	1cfb      	adds	r3, r7, #3
 801997a:	1c22      	adds	r2, r4, #0
 801997c:	701a      	strb	r2, [r3, #0]
 801997e:	003b      	movs	r3, r7
 8019980:	1c02      	adds	r2, r0, #0
 8019982:	801a      	strh	r2, [r3, #0]
 8019984:	1cbb      	adds	r3, r7, #2
 8019986:	1c0a      	adds	r2, r1, #0
 8019988:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801998a:	230b      	movs	r3, #11
 801998c:	18fb      	adds	r3, r7, r3
 801998e:	2200      	movs	r2, #0
 8019990:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019992:	1cfb      	adds	r3, r7, #3
 8019994:	781b      	ldrb	r3, [r3, #0]
 8019996:	b25b      	sxtb	r3, r3
 8019998:	2b00      	cmp	r3, #0
 801999a:	da0f      	bge.n	80199bc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801999c:	1cfb      	adds	r3, r7, #3
 801999e:	781b      	ldrb	r3, [r3, #0]
 80199a0:	2207      	movs	r2, #7
 80199a2:	4013      	ands	r3, r2
 80199a4:	1c5a      	adds	r2, r3, #1
 80199a6:	0013      	movs	r3, r2
 80199a8:	009b      	lsls	r3, r3, #2
 80199aa:	189b      	adds	r3, r3, r2
 80199ac:	00db      	lsls	r3, r3, #3
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	18d3      	adds	r3, r2, r3
 80199b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	2201      	movs	r2, #1
 80199b8:	705a      	strb	r2, [r3, #1]
 80199ba:	e00f      	b.n	80199dc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80199bc:	1cfb      	adds	r3, r7, #3
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	2207      	movs	r2, #7
 80199c2:	401a      	ands	r2, r3
 80199c4:	0013      	movs	r3, r2
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	189b      	adds	r3, r3, r2
 80199ca:	00db      	lsls	r3, r3, #3
 80199cc:	3369      	adds	r3, #105	@ 0x69
 80199ce:	33ff      	adds	r3, #255	@ 0xff
 80199d0:	687a      	ldr	r2, [r7, #4]
 80199d2:	18d3      	adds	r3, r2, r3
 80199d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	2200      	movs	r2, #0
 80199da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80199dc:	1cfb      	adds	r3, r7, #3
 80199de:	781b      	ldrb	r3, [r3, #0]
 80199e0:	2207      	movs	r2, #7
 80199e2:	4013      	ands	r3, r2
 80199e4:	b2da      	uxtb	r2, r3
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80199ea:	003b      	movs	r3, r7
 80199ec:	881a      	ldrh	r2, [r3, #0]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	1cba      	adds	r2, r7, #2
 80199f6:	7812      	ldrb	r2, [r2, #0]
 80199f8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80199fa:	1cbb      	adds	r3, r7, #2
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	2b02      	cmp	r3, #2
 8019a00:	d102      	bne.n	8019a08 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	2200      	movs	r2, #0
 8019a06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019a08:	687a      	ldr	r2, [r7, #4]
 8019a0a:	23aa      	movs	r3, #170	@ 0xaa
 8019a0c:	009b      	lsls	r3, r3, #2
 8019a0e:	5cd3      	ldrb	r3, [r2, r3]
 8019a10:	2b01      	cmp	r3, #1
 8019a12:	d101      	bne.n	8019a18 <HAL_PCD_EP_Open+0xae>
 8019a14:	2302      	movs	r3, #2
 8019a16:	e013      	b.n	8019a40 <HAL_PCD_EP_Open+0xd6>
 8019a18:	687a      	ldr	r2, [r7, #4]
 8019a1a:	23aa      	movs	r3, #170	@ 0xaa
 8019a1c:	009b      	lsls	r3, r3, #2
 8019a1e:	2101      	movs	r1, #1
 8019a20:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	68fa      	ldr	r2, [r7, #12]
 8019a28:	0011      	movs	r1, r2
 8019a2a:	0018      	movs	r0, r3
 8019a2c:	f005 fd66 	bl	801f4fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019a30:	687a      	ldr	r2, [r7, #4]
 8019a32:	23aa      	movs	r3, #170	@ 0xaa
 8019a34:	009b      	lsls	r3, r3, #2
 8019a36:	2100      	movs	r1, #0
 8019a38:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019a3a:	230b      	movs	r3, #11
 8019a3c:	18fb      	adds	r3, r7, r3
 8019a3e:	781b      	ldrb	r3, [r3, #0]
}
 8019a40:	0018      	movs	r0, r3
 8019a42:	46bd      	mov	sp, r7
 8019a44:	b005      	add	sp, #20
 8019a46:	bd90      	pop	{r4, r7, pc}

08019a48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
 8019a50:	000a      	movs	r2, r1
 8019a52:	1cfb      	adds	r3, r7, #3
 8019a54:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a56:	1cfb      	adds	r3, r7, #3
 8019a58:	781b      	ldrb	r3, [r3, #0]
 8019a5a:	b25b      	sxtb	r3, r3
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	da0f      	bge.n	8019a80 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a60:	1cfb      	adds	r3, r7, #3
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	2207      	movs	r2, #7
 8019a66:	4013      	ands	r3, r2
 8019a68:	1c5a      	adds	r2, r3, #1
 8019a6a:	0013      	movs	r3, r2
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	189b      	adds	r3, r3, r2
 8019a70:	00db      	lsls	r3, r3, #3
 8019a72:	687a      	ldr	r2, [r7, #4]
 8019a74:	18d3      	adds	r3, r2, r3
 8019a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	2201      	movs	r2, #1
 8019a7c:	705a      	strb	r2, [r3, #1]
 8019a7e:	e00f      	b.n	8019aa0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019a80:	1cfb      	adds	r3, r7, #3
 8019a82:	781b      	ldrb	r3, [r3, #0]
 8019a84:	2207      	movs	r2, #7
 8019a86:	401a      	ands	r2, r3
 8019a88:	0013      	movs	r3, r2
 8019a8a:	009b      	lsls	r3, r3, #2
 8019a8c:	189b      	adds	r3, r3, r2
 8019a8e:	00db      	lsls	r3, r3, #3
 8019a90:	3369      	adds	r3, #105	@ 0x69
 8019a92:	33ff      	adds	r3, #255	@ 0xff
 8019a94:	687a      	ldr	r2, [r7, #4]
 8019a96:	18d3      	adds	r3, r2, r3
 8019a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019aa0:	1cfb      	adds	r3, r7, #3
 8019aa2:	781b      	ldrb	r3, [r3, #0]
 8019aa4:	2207      	movs	r2, #7
 8019aa6:	4013      	ands	r3, r2
 8019aa8:	b2da      	uxtb	r2, r3
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019aae:	687a      	ldr	r2, [r7, #4]
 8019ab0:	23aa      	movs	r3, #170	@ 0xaa
 8019ab2:	009b      	lsls	r3, r3, #2
 8019ab4:	5cd3      	ldrb	r3, [r2, r3]
 8019ab6:	2b01      	cmp	r3, #1
 8019ab8:	d101      	bne.n	8019abe <HAL_PCD_EP_Close+0x76>
 8019aba:	2302      	movs	r3, #2
 8019abc:	e011      	b.n	8019ae2 <HAL_PCD_EP_Close+0x9a>
 8019abe:	687a      	ldr	r2, [r7, #4]
 8019ac0:	23aa      	movs	r3, #170	@ 0xaa
 8019ac2:	009b      	lsls	r3, r3, #2
 8019ac4:	2101      	movs	r1, #1
 8019ac6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	68fa      	ldr	r2, [r7, #12]
 8019ace:	0011      	movs	r1, r2
 8019ad0:	0018      	movs	r0, r3
 8019ad2:	f006 f8b5 	bl	801fc40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	23aa      	movs	r3, #170	@ 0xaa
 8019ada:	009b      	lsls	r3, r3, #2
 8019adc:	2100      	movs	r1, #0
 8019ade:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019ae0:	2300      	movs	r3, #0
}
 8019ae2:	0018      	movs	r0, r3
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	b004      	add	sp, #16
 8019ae8:	bd80      	pop	{r7, pc}

08019aea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019aea:	b580      	push	{r7, lr}
 8019aec:	b086      	sub	sp, #24
 8019aee:	af00      	add	r7, sp, #0
 8019af0:	60f8      	str	r0, [r7, #12]
 8019af2:	607a      	str	r2, [r7, #4]
 8019af4:	603b      	str	r3, [r7, #0]
 8019af6:	200b      	movs	r0, #11
 8019af8:	183b      	adds	r3, r7, r0
 8019afa:	1c0a      	adds	r2, r1, #0
 8019afc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019afe:	0001      	movs	r1, r0
 8019b00:	187b      	adds	r3, r7, r1
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	2207      	movs	r2, #7
 8019b06:	401a      	ands	r2, r3
 8019b08:	0013      	movs	r3, r2
 8019b0a:	009b      	lsls	r3, r3, #2
 8019b0c:	189b      	adds	r3, r3, r2
 8019b0e:	00db      	lsls	r3, r3, #3
 8019b10:	3369      	adds	r3, #105	@ 0x69
 8019b12:	33ff      	adds	r3, #255	@ 0xff
 8019b14:	68fa      	ldr	r2, [r7, #12]
 8019b16:	18d3      	adds	r3, r2, r3
 8019b18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019b1a:	697b      	ldr	r3, [r7, #20]
 8019b1c:	687a      	ldr	r2, [r7, #4]
 8019b1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	683a      	ldr	r2, [r7, #0]
 8019b24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	2200      	movs	r2, #0
 8019b2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019b2c:	697b      	ldr	r3, [r7, #20]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019b32:	187b      	adds	r3, r7, r1
 8019b34:	781b      	ldrb	r3, [r3, #0]
 8019b36:	2207      	movs	r2, #7
 8019b38:	4013      	ands	r3, r2
 8019b3a:	b2da      	uxtb	r2, r3
 8019b3c:	697b      	ldr	r3, [r7, #20]
 8019b3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	697a      	ldr	r2, [r7, #20]
 8019b46:	0011      	movs	r1, r2
 8019b48:	0018      	movs	r0, r3
 8019b4a:	f006 fa39 	bl	801ffc0 <USB_EPStartXfer>

  return HAL_OK;
 8019b4e:	2300      	movs	r3, #0
}
 8019b50:	0018      	movs	r0, r3
 8019b52:	46bd      	mov	sp, r7
 8019b54:	b006      	add	sp, #24
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	000a      	movs	r2, r1
 8019b62:	1cfb      	adds	r3, r7, #3
 8019b64:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019b66:	1cfb      	adds	r3, r7, #3
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	2207      	movs	r2, #7
 8019b6c:	401a      	ands	r2, r3
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	23c2      	movs	r3, #194	@ 0xc2
 8019b72:	0059      	lsls	r1, r3, #1
 8019b74:	0013      	movs	r3, r2
 8019b76:	009b      	lsls	r3, r3, #2
 8019b78:	189b      	adds	r3, r3, r2
 8019b7a:	00db      	lsls	r3, r3, #3
 8019b7c:	18c3      	adds	r3, r0, r3
 8019b7e:	185b      	adds	r3, r3, r1
 8019b80:	681b      	ldr	r3, [r3, #0]
}
 8019b82:	0018      	movs	r0, r3
 8019b84:	46bd      	mov	sp, r7
 8019b86:	b002      	add	sp, #8
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019b8a:	b580      	push	{r7, lr}
 8019b8c:	b086      	sub	sp, #24
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	60f8      	str	r0, [r7, #12]
 8019b92:	607a      	str	r2, [r7, #4]
 8019b94:	603b      	str	r3, [r7, #0]
 8019b96:	200b      	movs	r0, #11
 8019b98:	183b      	adds	r3, r7, r0
 8019b9a:	1c0a      	adds	r2, r1, #0
 8019b9c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019b9e:	183b      	adds	r3, r7, r0
 8019ba0:	781b      	ldrb	r3, [r3, #0]
 8019ba2:	2207      	movs	r2, #7
 8019ba4:	4013      	ands	r3, r2
 8019ba6:	1c5a      	adds	r2, r3, #1
 8019ba8:	0013      	movs	r3, r2
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	189b      	adds	r3, r3, r2
 8019bae:	00db      	lsls	r3, r3, #3
 8019bb0:	68fa      	ldr	r2, [r7, #12]
 8019bb2:	18d3      	adds	r3, r2, r3
 8019bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019bb6:	697b      	ldr	r3, [r7, #20]
 8019bb8:	687a      	ldr	r2, [r7, #4]
 8019bba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019bbc:	697b      	ldr	r3, [r7, #20]
 8019bbe:	683a      	ldr	r2, [r7, #0]
 8019bc0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	2224      	movs	r2, #36	@ 0x24
 8019bc6:	2101      	movs	r1, #1
 8019bc8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019bca:	697b      	ldr	r3, [r7, #20]
 8019bcc:	683a      	ldr	r2, [r7, #0]
 8019bce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019bd0:	697b      	ldr	r3, [r7, #20]
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	2201      	movs	r2, #1
 8019bda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019bdc:	183b      	adds	r3, r7, r0
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	2207      	movs	r2, #7
 8019be2:	4013      	ands	r3, r2
 8019be4:	b2da      	uxtb	r2, r3
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	697a      	ldr	r2, [r7, #20]
 8019bf0:	0011      	movs	r1, r2
 8019bf2:	0018      	movs	r0, r3
 8019bf4:	f006 f9e4 	bl	801ffc0 <USB_EPStartXfer>

  return HAL_OK;
 8019bf8:	2300      	movs	r3, #0
}
 8019bfa:	0018      	movs	r0, r3
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	b006      	add	sp, #24
 8019c00:	bd80      	pop	{r7, pc}

08019c02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c02:	b580      	push	{r7, lr}
 8019c04:	b084      	sub	sp, #16
 8019c06:	af00      	add	r7, sp, #0
 8019c08:	6078      	str	r0, [r7, #4]
 8019c0a:	000a      	movs	r2, r1
 8019c0c:	1cfb      	adds	r3, r7, #3
 8019c0e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019c10:	1cfb      	adds	r3, r7, #3
 8019c12:	781b      	ldrb	r3, [r3, #0]
 8019c14:	2207      	movs	r2, #7
 8019c16:	401a      	ands	r2, r3
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	d901      	bls.n	8019c24 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019c20:	2301      	movs	r3, #1
 8019c22:	e046      	b.n	8019cb2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019c24:	1cfb      	adds	r3, r7, #3
 8019c26:	781b      	ldrb	r3, [r3, #0]
 8019c28:	b25b      	sxtb	r3, r3
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	da0f      	bge.n	8019c4e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c2e:	1cfb      	adds	r3, r7, #3
 8019c30:	781b      	ldrb	r3, [r3, #0]
 8019c32:	2207      	movs	r2, #7
 8019c34:	4013      	ands	r3, r2
 8019c36:	1c5a      	adds	r2, r3, #1
 8019c38:	0013      	movs	r3, r2
 8019c3a:	009b      	lsls	r3, r3, #2
 8019c3c:	189b      	adds	r3, r3, r2
 8019c3e:	00db      	lsls	r3, r3, #3
 8019c40:	687a      	ldr	r2, [r7, #4]
 8019c42:	18d3      	adds	r3, r2, r3
 8019c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	2201      	movs	r2, #1
 8019c4a:	705a      	strb	r2, [r3, #1]
 8019c4c:	e00d      	b.n	8019c6a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019c4e:	1cfb      	adds	r3, r7, #3
 8019c50:	781a      	ldrb	r2, [r3, #0]
 8019c52:	0013      	movs	r3, r2
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	189b      	adds	r3, r3, r2
 8019c58:	00db      	lsls	r3, r3, #3
 8019c5a:	3369      	adds	r3, #105	@ 0x69
 8019c5c:	33ff      	adds	r3, #255	@ 0xff
 8019c5e:	687a      	ldr	r2, [r7, #4]
 8019c60:	18d3      	adds	r3, r2, r3
 8019c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	2200      	movs	r2, #0
 8019c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2201      	movs	r2, #1
 8019c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c70:	1cfb      	adds	r3, r7, #3
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	2207      	movs	r2, #7
 8019c76:	4013      	ands	r3, r2
 8019c78:	b2da      	uxtb	r2, r3
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019c7e:	687a      	ldr	r2, [r7, #4]
 8019c80:	23aa      	movs	r3, #170	@ 0xaa
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	5cd3      	ldrb	r3, [r2, r3]
 8019c86:	2b01      	cmp	r3, #1
 8019c88:	d101      	bne.n	8019c8e <HAL_PCD_EP_SetStall+0x8c>
 8019c8a:	2302      	movs	r3, #2
 8019c8c:	e011      	b.n	8019cb2 <HAL_PCD_EP_SetStall+0xb0>
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	23aa      	movs	r3, #170	@ 0xaa
 8019c92:	009b      	lsls	r3, r3, #2
 8019c94:	2101      	movs	r1, #1
 8019c96:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	68fa      	ldr	r2, [r7, #12]
 8019c9e:	0011      	movs	r1, r2
 8019ca0:	0018      	movs	r0, r3
 8019ca2:	f007 fac5 	bl	8021230 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019ca6:	687a      	ldr	r2, [r7, #4]
 8019ca8:	23aa      	movs	r3, #170	@ 0xaa
 8019caa:	009b      	lsls	r3, r3, #2
 8019cac:	2100      	movs	r1, #0
 8019cae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019cb0:	2300      	movs	r3, #0
}
 8019cb2:	0018      	movs	r0, r3
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	b004      	add	sp, #16
 8019cb8:	bd80      	pop	{r7, pc}

08019cba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019cba:	b580      	push	{r7, lr}
 8019cbc:	b084      	sub	sp, #16
 8019cbe:	af00      	add	r7, sp, #0
 8019cc0:	6078      	str	r0, [r7, #4]
 8019cc2:	000a      	movs	r2, r1
 8019cc4:	1cfb      	adds	r3, r7, #3
 8019cc6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019cc8:	1cfb      	adds	r3, r7, #3
 8019cca:	781b      	ldrb	r3, [r3, #0]
 8019ccc:	220f      	movs	r2, #15
 8019cce:	401a      	ands	r2, r3
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	685b      	ldr	r3, [r3, #4]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	d901      	bls.n	8019cdc <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019cd8:	2301      	movs	r3, #1
 8019cda:	e048      	b.n	8019d6e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019cdc:	1cfb      	adds	r3, r7, #3
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	b25b      	sxtb	r3, r3
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	da0f      	bge.n	8019d06 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019ce6:	1cfb      	adds	r3, r7, #3
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	2207      	movs	r2, #7
 8019cec:	4013      	ands	r3, r2
 8019cee:	1c5a      	adds	r2, r3, #1
 8019cf0:	0013      	movs	r3, r2
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	189b      	adds	r3, r3, r2
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	687a      	ldr	r2, [r7, #4]
 8019cfa:	18d3      	adds	r3, r2, r3
 8019cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	2201      	movs	r2, #1
 8019d02:	705a      	strb	r2, [r3, #1]
 8019d04:	e00f      	b.n	8019d26 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019d06:	1cfb      	adds	r3, r7, #3
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	2207      	movs	r2, #7
 8019d0c:	401a      	ands	r2, r3
 8019d0e:	0013      	movs	r3, r2
 8019d10:	009b      	lsls	r3, r3, #2
 8019d12:	189b      	adds	r3, r3, r2
 8019d14:	00db      	lsls	r3, r3, #3
 8019d16:	3369      	adds	r3, #105	@ 0x69
 8019d18:	33ff      	adds	r3, #255	@ 0xff
 8019d1a:	687a      	ldr	r2, [r7, #4]
 8019d1c:	18d3      	adds	r3, r2, r3
 8019d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	2200      	movs	r2, #0
 8019d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	2200      	movs	r2, #0
 8019d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019d2c:	1cfb      	adds	r3, r7, #3
 8019d2e:	781b      	ldrb	r3, [r3, #0]
 8019d30:	2207      	movs	r2, #7
 8019d32:	4013      	ands	r3, r2
 8019d34:	b2da      	uxtb	r2, r3
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019d3a:	687a      	ldr	r2, [r7, #4]
 8019d3c:	23aa      	movs	r3, #170	@ 0xaa
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	5cd3      	ldrb	r3, [r2, r3]
 8019d42:	2b01      	cmp	r3, #1
 8019d44:	d101      	bne.n	8019d4a <HAL_PCD_EP_ClrStall+0x90>
 8019d46:	2302      	movs	r3, #2
 8019d48:	e011      	b.n	8019d6e <HAL_PCD_EP_ClrStall+0xb4>
 8019d4a:	687a      	ldr	r2, [r7, #4]
 8019d4c:	23aa      	movs	r3, #170	@ 0xaa
 8019d4e:	009b      	lsls	r3, r3, #2
 8019d50:	2101      	movs	r1, #1
 8019d52:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	68fa      	ldr	r2, [r7, #12]
 8019d5a:	0011      	movs	r1, r2
 8019d5c:	0018      	movs	r0, r3
 8019d5e:	f007 fab7 	bl	80212d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	23aa      	movs	r3, #170	@ 0xaa
 8019d66:	009b      	lsls	r3, r3, #2
 8019d68:	2100      	movs	r1, #0
 8019d6a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019d6c:	2300      	movs	r3, #0
}
 8019d6e:	0018      	movs	r0, r3
 8019d70:	46bd      	mov	sp, r7
 8019d72:	b004      	add	sp, #16
 8019d74:	bd80      	pop	{r7, pc}
	...

08019d78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019d78:	b5b0      	push	{r4, r5, r7, lr}
 8019d7a:	b096      	sub	sp, #88	@ 0x58
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019d80:	f000 fbec 	bl	801a55c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681a      	ldr	r2, [r3, #0]
 8019d88:	204e      	movs	r0, #78	@ 0x4e
 8019d8a:	183b      	adds	r3, r7, r0
 8019d8c:	2144      	movs	r1, #68	@ 0x44
 8019d8e:	5a52      	ldrh	r2, [r2, r1]
 8019d90:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019d92:	183b      	adds	r3, r7, r0
 8019d94:	881b      	ldrh	r3, [r3, #0]
 8019d96:	b2da      	uxtb	r2, r3
 8019d98:	244d      	movs	r4, #77	@ 0x4d
 8019d9a:	193b      	adds	r3, r7, r4
 8019d9c:	210f      	movs	r1, #15
 8019d9e:	400a      	ands	r2, r1
 8019da0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019da2:	193b      	adds	r3, r7, r4
 8019da4:	781b      	ldrb	r3, [r3, #0]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d000      	beq.n	8019dac <PCD_EP_ISR_Handler+0x34>
 8019daa:	e18f      	b.n	801a0cc <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019dac:	183b      	adds	r3, r7, r0
 8019dae:	881b      	ldrh	r3, [r3, #0]
 8019db0:	2210      	movs	r2, #16
 8019db2:	4013      	ands	r3, r2
 8019db4:	d155      	bne.n	8019e62 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	881b      	ldrh	r3, [r3, #0]
 8019dbc:	b29a      	uxth	r2, r3
 8019dbe:	200e      	movs	r0, #14
 8019dc0:	183b      	adds	r3, r7, r0
 8019dc2:	49bb      	ldr	r1, [pc, #748]	@ (801a0b0 <PCD_EP_ISR_Handler+0x338>)
 8019dc4:	400a      	ands	r2, r1
 8019dc6:	801a      	strh	r2, [r3, #0]
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	183a      	adds	r2, r7, r0
 8019dce:	8812      	ldrh	r2, [r2, #0]
 8019dd0:	49b8      	ldr	r1, [pc, #736]	@ (801a0b4 <PCD_EP_ISR_Handler+0x33c>)
 8019dd2:	430a      	orrs	r2, r1
 8019dd4:	b292      	uxth	r2, r2
 8019dd6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	3328      	adds	r3, #40	@ 0x28
 8019ddc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	2250      	movs	r2, #80	@ 0x50
 8019de4:	5a9b      	ldrh	r3, [r3, r2]
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	001a      	movs	r2, r3
 8019dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dec:	781b      	ldrb	r3, [r3, #0]
 8019dee:	00db      	lsls	r3, r3, #3
 8019df0:	18d2      	adds	r2, r2, r3
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	18d3      	adds	r3, r2, r3
 8019df8:	4aaf      	ldr	r2, [pc, #700]	@ (801a0b8 <PCD_EP_ISR_Handler+0x340>)
 8019dfa:	4694      	mov	ip, r2
 8019dfc:	4463      	add	r3, ip
 8019dfe:	881b      	ldrh	r3, [r3, #0]
 8019e00:	059b      	lsls	r3, r3, #22
 8019e02:	0d9a      	lsrs	r2, r3, #22
 8019e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e0a:	695a      	ldr	r2, [r3, #20]
 8019e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e0e:	69db      	ldr	r3, [r3, #28]
 8019e10:	18d2      	adds	r2, r2, r3
 8019e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e14:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	2100      	movs	r1, #0
 8019e1a:	0018      	movs	r0, r3
 8019e1c:	f009 fbd4 	bl	80235c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	2224      	movs	r2, #36	@ 0x24
 8019e24:	5c9b      	ldrb	r3, [r3, r2]
 8019e26:	b2db      	uxtb	r3, r3
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d101      	bne.n	8019e30 <PCD_EP_ISR_Handler+0xb8>
 8019e2c:	f000 fb96 	bl	801a55c <PCD_EP_ISR_Handler+0x7e4>
 8019e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e32:	699b      	ldr	r3, [r3, #24]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d001      	beq.n	8019e3c <PCD_EP_ISR_Handler+0xc4>
 8019e38:	f000 fb90 	bl	801a55c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	2224      	movs	r2, #36	@ 0x24
 8019e40:	5c9b      	ldrb	r3, [r3, r2]
 8019e42:	b2db      	uxtb	r3, r3
 8019e44:	2280      	movs	r2, #128	@ 0x80
 8019e46:	4252      	negs	r2, r2
 8019e48:	4313      	orrs	r3, r2
 8019e4a:	b2da      	uxtb	r2, r3
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	0011      	movs	r1, r2
 8019e52:	224c      	movs	r2, #76	@ 0x4c
 8019e54:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	2224      	movs	r2, #36	@ 0x24
 8019e5a:	2100      	movs	r1, #0
 8019e5c:	5499      	strb	r1, [r3, r2]
 8019e5e:	f000 fb7d 	bl	801a55c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	3369      	adds	r3, #105	@ 0x69
 8019e66:	33ff      	adds	r3, #255	@ 0xff
 8019e68:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681a      	ldr	r2, [r3, #0]
 8019e6e:	214a      	movs	r1, #74	@ 0x4a
 8019e70:	187b      	adds	r3, r7, r1
 8019e72:	8812      	ldrh	r2, [r2, #0]
 8019e74:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019e76:	187b      	adds	r3, r7, r1
 8019e78:	881a      	ldrh	r2, [r3, #0]
 8019e7a:	2380      	movs	r3, #128	@ 0x80
 8019e7c:	011b      	lsls	r3, r3, #4
 8019e7e:	4013      	ands	r3, r2
 8019e80:	d037      	beq.n	8019ef2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	2250      	movs	r2, #80	@ 0x50
 8019e88:	5a9b      	ldrh	r3, [r3, r2]
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	001a      	movs	r2, r3
 8019e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	00db      	lsls	r3, r3, #3
 8019e94:	18d2      	adds	r2, r2, r3
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	18d3      	adds	r3, r2, r3
 8019e9c:	4a87      	ldr	r2, [pc, #540]	@ (801a0bc <PCD_EP_ISR_Handler+0x344>)
 8019e9e:	4694      	mov	ip, r2
 8019ea0:	4463      	add	r3, ip
 8019ea2:	881b      	ldrh	r3, [r3, #0]
 8019ea4:	059b      	lsls	r3, r3, #22
 8019ea6:	0d9a      	lsrs	r2, r3, #22
 8019ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eaa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	6818      	ldr	r0, [r3, #0]
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	22ac      	movs	r2, #172	@ 0xac
 8019eb4:	0092      	lsls	r2, r2, #2
 8019eb6:	1899      	adds	r1, r3, r2
 8019eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ebe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	f007 fb39 	bl	8021538 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	881b      	ldrh	r3, [r3, #0]
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	2010      	movs	r0, #16
 8019ed0:	183b      	adds	r3, r7, r0
 8019ed2:	497b      	ldr	r1, [pc, #492]	@ (801a0c0 <PCD_EP_ISR_Handler+0x348>)
 8019ed4:	400a      	ands	r2, r1
 8019ed6:	801a      	strh	r2, [r3, #0]
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	183a      	adds	r2, r7, r0
 8019ede:	8812      	ldrh	r2, [r2, #0]
 8019ee0:	2180      	movs	r1, #128	@ 0x80
 8019ee2:	430a      	orrs	r2, r1
 8019ee4:	b292      	uxth	r2, r2
 8019ee6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	0018      	movs	r0, r3
 8019eec:	f009 fb36 	bl	802355c <HAL_PCD_SetupStageCallback>
 8019ef0:	e334      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019ef2:	234a      	movs	r3, #74	@ 0x4a
 8019ef4:	18fb      	adds	r3, r7, r3
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	5e9b      	ldrsh	r3, [r3, r2]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	db00      	blt.n	8019f00 <PCD_EP_ISR_Handler+0x188>
 8019efe:	e32d      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	881b      	ldrh	r3, [r3, #0]
 8019f06:	b29a      	uxth	r2, r3
 8019f08:	201e      	movs	r0, #30
 8019f0a:	183b      	adds	r3, r7, r0
 8019f0c:	496c      	ldr	r1, [pc, #432]	@ (801a0c0 <PCD_EP_ISR_Handler+0x348>)
 8019f0e:	400a      	ands	r2, r1
 8019f10:	801a      	strh	r2, [r3, #0]
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	183a      	adds	r2, r7, r0
 8019f18:	8812      	ldrh	r2, [r2, #0]
 8019f1a:	2180      	movs	r1, #128	@ 0x80
 8019f1c:	430a      	orrs	r2, r1
 8019f1e:	b292      	uxth	r2, r2
 8019f20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	2250      	movs	r2, #80	@ 0x50
 8019f28:	5a9b      	ldrh	r3, [r3, r2]
 8019f2a:	b29b      	uxth	r3, r3
 8019f2c:	001a      	movs	r2, r3
 8019f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f30:	781b      	ldrb	r3, [r3, #0]
 8019f32:	00db      	lsls	r3, r3, #3
 8019f34:	18d2      	adds	r2, r2, r3
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	18d3      	adds	r3, r2, r3
 8019f3c:	4a5f      	ldr	r2, [pc, #380]	@ (801a0bc <PCD_EP_ISR_Handler+0x344>)
 8019f3e:	4694      	mov	ip, r2
 8019f40:	4463      	add	r3, ip
 8019f42:	881b      	ldrh	r3, [r3, #0]
 8019f44:	059b      	lsls	r3, r3, #22
 8019f46:	0d9a      	lsrs	r2, r3, #22
 8019f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f4e:	69db      	ldr	r3, [r3, #28]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d01a      	beq.n	8019f8a <PCD_EP_ISR_Handler+0x212>
 8019f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f56:	695b      	ldr	r3, [r3, #20]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d016      	beq.n	8019f8a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	6818      	ldr	r0, [r3, #0]
 8019f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f62:	6959      	ldr	r1, [r3, #20]
 8019f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019f6c:	b29b      	uxth	r3, r3
 8019f6e:	f007 fae3 	bl	8021538 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8019f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f74:	695a      	ldr	r2, [r3, #20]
 8019f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f78:	69db      	ldr	r3, [r3, #28]
 8019f7a:	18d2      	adds	r2, r2, r3
 8019f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2100      	movs	r1, #0
 8019f84:	0018      	movs	r0, r3
 8019f86:	f009 fafe 	bl	8023586 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681a      	ldr	r2, [r3, #0]
 8019f8e:	214a      	movs	r1, #74	@ 0x4a
 8019f90:	187b      	adds	r3, r7, r1
 8019f92:	8812      	ldrh	r2, [r2, #0]
 8019f94:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8019f96:	187b      	adds	r3, r7, r1
 8019f98:	881a      	ldrh	r2, [r3, #0]
 8019f9a:	2380      	movs	r3, #128	@ 0x80
 8019f9c:	011b      	lsls	r3, r3, #4
 8019f9e:	4013      	ands	r3, r2
 8019fa0:	d000      	beq.n	8019fa4 <PCD_EP_ISR_Handler+0x22c>
 8019fa2:	e2db      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
 8019fa4:	187b      	adds	r3, r7, r1
 8019fa6:	881a      	ldrh	r2, [r3, #0]
 8019fa8:	23c0      	movs	r3, #192	@ 0xc0
 8019faa:	019b      	lsls	r3, r3, #6
 8019fac:	401a      	ands	r2, r3
 8019fae:	23c0      	movs	r3, #192	@ 0xc0
 8019fb0:	019b      	lsls	r3, r3, #6
 8019fb2:	429a      	cmp	r2, r3
 8019fb4:	d100      	bne.n	8019fb8 <PCD_EP_ISR_Handler+0x240>
 8019fb6:	e2d1      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	61bb      	str	r3, [r7, #24]
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	2250      	movs	r2, #80	@ 0x50
 8019fc4:	5a9b      	ldrh	r3, [r3, r2]
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	001a      	movs	r2, r3
 8019fca:	69bb      	ldr	r3, [r7, #24]
 8019fcc:	189b      	adds	r3, r3, r2
 8019fce:	61bb      	str	r3, [r7, #24]
 8019fd0:	69bb      	ldr	r3, [r7, #24]
 8019fd2:	4a3a      	ldr	r2, [pc, #232]	@ (801a0bc <PCD_EP_ISR_Handler+0x344>)
 8019fd4:	4694      	mov	ip, r2
 8019fd6:	4463      	add	r3, ip
 8019fd8:	617b      	str	r3, [r7, #20]
 8019fda:	697b      	ldr	r3, [r7, #20]
 8019fdc:	881b      	ldrh	r3, [r3, #0]
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	059b      	lsls	r3, r3, #22
 8019fe2:	0d9b      	lsrs	r3, r3, #22
 8019fe4:	b29a      	uxth	r2, r3
 8019fe6:	697b      	ldr	r3, [r7, #20]
 8019fe8:	801a      	strh	r2, [r3, #0]
 8019fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fec:	691b      	ldr	r3, [r3, #16]
 8019fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ff0:	d91a      	bls.n	801a028 <PCD_EP_ISR_Handler+0x2b0>
 8019ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ff4:	691b      	ldr	r3, [r3, #16]
 8019ff6:	095b      	lsrs	r3, r3, #5
 8019ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8019ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ffc:	691b      	ldr	r3, [r3, #16]
 8019ffe:	221f      	movs	r2, #31
 801a000:	4013      	ands	r3, r2
 801a002:	d102      	bne.n	801a00a <PCD_EP_ISR_Handler+0x292>
 801a004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a006:	3b01      	subs	r3, #1
 801a008:	647b      	str	r3, [r7, #68]	@ 0x44
 801a00a:	697b      	ldr	r3, [r7, #20]
 801a00c:	881b      	ldrh	r3, [r3, #0]
 801a00e:	b29a      	uxth	r2, r3
 801a010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a012:	b29b      	uxth	r3, r3
 801a014:	029b      	lsls	r3, r3, #10
 801a016:	b29b      	uxth	r3, r3
 801a018:	4313      	orrs	r3, r2
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	4a25      	ldr	r2, [pc, #148]	@ (801a0b4 <PCD_EP_ISR_Handler+0x33c>)
 801a01e:	4313      	orrs	r3, r2
 801a020:	b29a      	uxth	r2, r3
 801a022:	697b      	ldr	r3, [r7, #20]
 801a024:	801a      	strh	r2, [r3, #0]
 801a026:	e023      	b.n	801a070 <PCD_EP_ISR_Handler+0x2f8>
 801a028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a02a:	691b      	ldr	r3, [r3, #16]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d108      	bne.n	801a042 <PCD_EP_ISR_Handler+0x2ca>
 801a030:	697b      	ldr	r3, [r7, #20]
 801a032:	881b      	ldrh	r3, [r3, #0]
 801a034:	b29b      	uxth	r3, r3
 801a036:	4a1f      	ldr	r2, [pc, #124]	@ (801a0b4 <PCD_EP_ISR_Handler+0x33c>)
 801a038:	4313      	orrs	r3, r2
 801a03a:	b29a      	uxth	r2, r3
 801a03c:	697b      	ldr	r3, [r7, #20]
 801a03e:	801a      	strh	r2, [r3, #0]
 801a040:	e016      	b.n	801a070 <PCD_EP_ISR_Handler+0x2f8>
 801a042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a044:	691b      	ldr	r3, [r3, #16]
 801a046:	085b      	lsrs	r3, r3, #1
 801a048:	647b      	str	r3, [r7, #68]	@ 0x44
 801a04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a04c:	691b      	ldr	r3, [r3, #16]
 801a04e:	2201      	movs	r2, #1
 801a050:	4013      	ands	r3, r2
 801a052:	d002      	beq.n	801a05a <PCD_EP_ISR_Handler+0x2e2>
 801a054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a056:	3301      	adds	r3, #1
 801a058:	647b      	str	r3, [r7, #68]	@ 0x44
 801a05a:	697b      	ldr	r3, [r7, #20]
 801a05c:	881b      	ldrh	r3, [r3, #0]
 801a05e:	b29a      	uxth	r2, r3
 801a060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a062:	b29b      	uxth	r3, r3
 801a064:	029b      	lsls	r3, r3, #10
 801a066:	b29b      	uxth	r3, r3
 801a068:	4313      	orrs	r3, r2
 801a06a:	b29a      	uxth	r2, r3
 801a06c:	697b      	ldr	r3, [r7, #20]
 801a06e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	881b      	ldrh	r3, [r3, #0]
 801a076:	b29a      	uxth	r2, r3
 801a078:	2012      	movs	r0, #18
 801a07a:	183b      	adds	r3, r7, r0
 801a07c:	4911      	ldr	r1, [pc, #68]	@ (801a0c4 <PCD_EP_ISR_Handler+0x34c>)
 801a07e:	400a      	ands	r2, r1
 801a080:	801a      	strh	r2, [r3, #0]
 801a082:	183b      	adds	r3, r7, r0
 801a084:	183a      	adds	r2, r7, r0
 801a086:	8812      	ldrh	r2, [r2, #0]
 801a088:	2180      	movs	r1, #128	@ 0x80
 801a08a:	0149      	lsls	r1, r1, #5
 801a08c:	404a      	eors	r2, r1
 801a08e:	801a      	strh	r2, [r3, #0]
 801a090:	183b      	adds	r3, r7, r0
 801a092:	183a      	adds	r2, r7, r0
 801a094:	8812      	ldrh	r2, [r2, #0]
 801a096:	2180      	movs	r1, #128	@ 0x80
 801a098:	0189      	lsls	r1, r1, #6
 801a09a:	404a      	eors	r2, r1
 801a09c:	801a      	strh	r2, [r3, #0]
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	183a      	adds	r2, r7, r0
 801a0a4:	8812      	ldrh	r2, [r2, #0]
 801a0a6:	4908      	ldr	r1, [pc, #32]	@ (801a0c8 <PCD_EP_ISR_Handler+0x350>)
 801a0a8:	430a      	orrs	r2, r1
 801a0aa:	b292      	uxth	r2, r2
 801a0ac:	801a      	strh	r2, [r3, #0]
 801a0ae:	e255      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
 801a0b0:	ffff8f0f 	.word	0xffff8f0f
 801a0b4:	ffff8000 	.word	0xffff8000
 801a0b8:	00000402 	.word	0x00000402
 801a0bc:	00000406 	.word	0x00000406
 801a0c0:	00000f8f 	.word	0x00000f8f
 801a0c4:	ffffbf8f 	.word	0xffffbf8f
 801a0c8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	001a      	movs	r2, r3
 801a0d2:	204d      	movs	r0, #77	@ 0x4d
 801a0d4:	183b      	adds	r3, r7, r0
 801a0d6:	781b      	ldrb	r3, [r3, #0]
 801a0d8:	009b      	lsls	r3, r3, #2
 801a0da:	18d2      	adds	r2, r2, r3
 801a0dc:	214a      	movs	r1, #74	@ 0x4a
 801a0de:	187b      	adds	r3, r7, r1
 801a0e0:	8812      	ldrh	r2, [r2, #0]
 801a0e2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a0e4:	187b      	adds	r3, r7, r1
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	5e9b      	ldrsh	r3, [r3, r2]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	db00      	blt.n	801a0f0 <PCD_EP_ISR_Handler+0x378>
 801a0ee:	e0fa      	b.n	801a2e6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	001a      	movs	r2, r3
 801a0f6:	183b      	adds	r3, r7, r0
 801a0f8:	781b      	ldrb	r3, [r3, #0]
 801a0fa:	009b      	lsls	r3, r3, #2
 801a0fc:	18d3      	adds	r3, r2, r3
 801a0fe:	881b      	ldrh	r3, [r3, #0]
 801a100:	b29a      	uxth	r2, r3
 801a102:	2448      	movs	r4, #72	@ 0x48
 801a104:	193b      	adds	r3, r7, r4
 801a106:	49d1      	ldr	r1, [pc, #836]	@ (801a44c <PCD_EP_ISR_Handler+0x6d4>)
 801a108:	400a      	ands	r2, r1
 801a10a:	801a      	strh	r2, [r3, #0]
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	001a      	movs	r2, r3
 801a112:	183b      	adds	r3, r7, r0
 801a114:	781b      	ldrb	r3, [r3, #0]
 801a116:	009b      	lsls	r3, r3, #2
 801a118:	18d3      	adds	r3, r2, r3
 801a11a:	193a      	adds	r2, r7, r4
 801a11c:	8812      	ldrh	r2, [r2, #0]
 801a11e:	2180      	movs	r1, #128	@ 0x80
 801a120:	430a      	orrs	r2, r1
 801a122:	b292      	uxth	r2, r2
 801a124:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a126:	183b      	adds	r3, r7, r0
 801a128:	781a      	ldrb	r2, [r3, #0]
 801a12a:	0013      	movs	r3, r2
 801a12c:	009b      	lsls	r3, r3, #2
 801a12e:	189b      	adds	r3, r3, r2
 801a130:	00db      	lsls	r3, r3, #3
 801a132:	3369      	adds	r3, #105	@ 0x69
 801a134:	33ff      	adds	r3, #255	@ 0xff
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	18d3      	adds	r3, r2, r3
 801a13a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a13c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a13e:	7b1b      	ldrb	r3, [r3, #12]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d125      	bne.n	801a190 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	2250      	movs	r2, #80	@ 0x50
 801a14a:	5a9b      	ldrh	r3, [r3, r2]
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	001a      	movs	r2, r3
 801a150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a152:	781b      	ldrb	r3, [r3, #0]
 801a154:	00db      	lsls	r3, r3, #3
 801a156:	18d2      	adds	r2, r2, r3
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	18d3      	adds	r3, r2, r3
 801a15e:	4abc      	ldr	r2, [pc, #752]	@ (801a450 <PCD_EP_ISR_Handler+0x6d8>)
 801a160:	4694      	mov	ip, r2
 801a162:	4463      	add	r3, ip
 801a164:	881a      	ldrh	r2, [r3, #0]
 801a166:	2450      	movs	r4, #80	@ 0x50
 801a168:	193b      	adds	r3, r7, r4
 801a16a:	0592      	lsls	r2, r2, #22
 801a16c:	0d92      	lsrs	r2, r2, #22
 801a16e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a170:	193b      	adds	r3, r7, r4
 801a172:	881b      	ldrh	r3, [r3, #0]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d100      	bne.n	801a17a <PCD_EP_ISR_Handler+0x402>
 801a178:	e08d      	b.n	801a296 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	6818      	ldr	r0, [r3, #0]
 801a17e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a180:	6959      	ldr	r1, [r3, #20]
 801a182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a184:	88da      	ldrh	r2, [r3, #6]
 801a186:	193b      	adds	r3, r7, r4
 801a188:	881b      	ldrh	r3, [r3, #0]
 801a18a:	f007 f9d5 	bl	8021538 <USB_ReadPMA>
 801a18e:	e082      	b.n	801a296 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a192:	78db      	ldrb	r3, [r3, #3]
 801a194:	2b02      	cmp	r3, #2
 801a196:	d10c      	bne.n	801a1b2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a198:	2350      	movs	r3, #80	@ 0x50
 801a19a:	18fc      	adds	r4, r7, r3
 801a19c:	234a      	movs	r3, #74	@ 0x4a
 801a19e:	18fb      	adds	r3, r7, r3
 801a1a0:	881a      	ldrh	r2, [r3, #0]
 801a1a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	0018      	movs	r0, r3
 801a1a8:	f000 f9ec 	bl	801a584 <HAL_PCD_EP_DB_Receive>
 801a1ac:	0003      	movs	r3, r0
 801a1ae:	8023      	strh	r3, [r4, #0]
 801a1b0:	e071      	b.n	801a296 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	001a      	movs	r2, r3
 801a1b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1ba:	781b      	ldrb	r3, [r3, #0]
 801a1bc:	009b      	lsls	r3, r3, #2
 801a1be:	18d3      	adds	r3, r2, r3
 801a1c0:	881b      	ldrh	r3, [r3, #0]
 801a1c2:	b29a      	uxth	r2, r3
 801a1c4:	2052      	movs	r0, #82	@ 0x52
 801a1c6:	183b      	adds	r3, r7, r0
 801a1c8:	49a2      	ldr	r1, [pc, #648]	@ (801a454 <PCD_EP_ISR_Handler+0x6dc>)
 801a1ca:	400a      	ands	r2, r1
 801a1cc:	801a      	strh	r2, [r3, #0]
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	001a      	movs	r2, r3
 801a1d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1d6:	781b      	ldrb	r3, [r3, #0]
 801a1d8:	009b      	lsls	r3, r3, #2
 801a1da:	18d3      	adds	r3, r2, r3
 801a1dc:	183a      	adds	r2, r7, r0
 801a1de:	8812      	ldrh	r2, [r2, #0]
 801a1e0:	499d      	ldr	r1, [pc, #628]	@ (801a458 <PCD_EP_ISR_Handler+0x6e0>)
 801a1e2:	430a      	orrs	r2, r1
 801a1e4:	b292      	uxth	r2, r2
 801a1e6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	001a      	movs	r2, r3
 801a1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1f0:	781b      	ldrb	r3, [r3, #0]
 801a1f2:	009b      	lsls	r3, r3, #2
 801a1f4:	18d3      	adds	r3, r2, r3
 801a1f6:	881b      	ldrh	r3, [r3, #0]
 801a1f8:	b29b      	uxth	r3, r3
 801a1fa:	001a      	movs	r2, r3
 801a1fc:	2380      	movs	r3, #128	@ 0x80
 801a1fe:	01db      	lsls	r3, r3, #7
 801a200:	4013      	ands	r3, r2
 801a202:	d024      	beq.n	801a24e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	2250      	movs	r2, #80	@ 0x50
 801a20a:	5a9b      	ldrh	r3, [r3, r2]
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	001a      	movs	r2, r3
 801a210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a212:	781b      	ldrb	r3, [r3, #0]
 801a214:	00db      	lsls	r3, r3, #3
 801a216:	18d2      	adds	r2, r2, r3
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	18d3      	adds	r3, r2, r3
 801a21e:	4a8f      	ldr	r2, [pc, #572]	@ (801a45c <PCD_EP_ISR_Handler+0x6e4>)
 801a220:	4694      	mov	ip, r2
 801a222:	4463      	add	r3, ip
 801a224:	881a      	ldrh	r2, [r3, #0]
 801a226:	2450      	movs	r4, #80	@ 0x50
 801a228:	193b      	adds	r3, r7, r4
 801a22a:	0592      	lsls	r2, r2, #22
 801a22c:	0d92      	lsrs	r2, r2, #22
 801a22e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a230:	193b      	adds	r3, r7, r4
 801a232:	881b      	ldrh	r3, [r3, #0]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d02e      	beq.n	801a296 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	6818      	ldr	r0, [r3, #0]
 801a23c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a23e:	6959      	ldr	r1, [r3, #20]
 801a240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a242:	891a      	ldrh	r2, [r3, #8]
 801a244:	193b      	adds	r3, r7, r4
 801a246:	881b      	ldrh	r3, [r3, #0]
 801a248:	f007 f976 	bl	8021538 <USB_ReadPMA>
 801a24c:	e023      	b.n	801a296 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2250      	movs	r2, #80	@ 0x50
 801a254:	5a9b      	ldrh	r3, [r3, r2]
 801a256:	b29b      	uxth	r3, r3
 801a258:	001a      	movs	r2, r3
 801a25a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a25c:	781b      	ldrb	r3, [r3, #0]
 801a25e:	00db      	lsls	r3, r3, #3
 801a260:	18d2      	adds	r2, r2, r3
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	18d3      	adds	r3, r2, r3
 801a268:	4a79      	ldr	r2, [pc, #484]	@ (801a450 <PCD_EP_ISR_Handler+0x6d8>)
 801a26a:	4694      	mov	ip, r2
 801a26c:	4463      	add	r3, ip
 801a26e:	881a      	ldrh	r2, [r3, #0]
 801a270:	2450      	movs	r4, #80	@ 0x50
 801a272:	193b      	adds	r3, r7, r4
 801a274:	0592      	lsls	r2, r2, #22
 801a276:	0d92      	lsrs	r2, r2, #22
 801a278:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a27a:	193b      	adds	r3, r7, r4
 801a27c:	881b      	ldrh	r3, [r3, #0]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d009      	beq.n	801a296 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	6818      	ldr	r0, [r3, #0]
 801a286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a288:	6959      	ldr	r1, [r3, #20]
 801a28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a28c:	895a      	ldrh	r2, [r3, #10]
 801a28e:	193b      	adds	r3, r7, r4
 801a290:	881b      	ldrh	r3, [r3, #0]
 801a292:	f007 f951 	bl	8021538 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a298:	69da      	ldr	r2, [r3, #28]
 801a29a:	2150      	movs	r1, #80	@ 0x50
 801a29c:	187b      	adds	r3, r7, r1
 801a29e:	881b      	ldrh	r3, [r3, #0]
 801a2a0:	18d2      	adds	r2, r2, r3
 801a2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a2a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2a8:	695a      	ldr	r2, [r3, #20]
 801a2aa:	187b      	adds	r3, r7, r1
 801a2ac:	881b      	ldrh	r3, [r3, #0]
 801a2ae:	18d2      	adds	r2, r2, r3
 801a2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a2b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b6:	699b      	ldr	r3, [r3, #24]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d005      	beq.n	801a2c8 <PCD_EP_ISR_Handler+0x550>
 801a2bc:	187b      	adds	r3, r7, r1
 801a2be:	881a      	ldrh	r2, [r3, #0]
 801a2c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c2:	691b      	ldr	r3, [r3, #16]
 801a2c4:	429a      	cmp	r2, r3
 801a2c6:	d207      	bcs.n	801a2d8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a2c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ca:	781a      	ldrb	r2, [r3, #0]
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	0011      	movs	r1, r2
 801a2d0:	0018      	movs	r0, r3
 801a2d2:	f009 f958 	bl	8023586 <HAL_PCD_DataOutStageCallback>
 801a2d6:	e006      	b.n	801a2e6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2de:	0011      	movs	r1, r2
 801a2e0:	0018      	movs	r0, r3
 801a2e2:	f005 fe6d 	bl	801ffc0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a2e6:	244a      	movs	r4, #74	@ 0x4a
 801a2e8:	193b      	adds	r3, r7, r4
 801a2ea:	881b      	ldrh	r3, [r3, #0]
 801a2ec:	2280      	movs	r2, #128	@ 0x80
 801a2ee:	4013      	ands	r3, r2
 801a2f0:	d100      	bne.n	801a2f4 <PCD_EP_ISR_Handler+0x57c>
 801a2f2:	e133      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a2f4:	204d      	movs	r0, #77	@ 0x4d
 801a2f6:	183b      	adds	r3, r7, r0
 801a2f8:	781b      	ldrb	r3, [r3, #0]
 801a2fa:	1c5a      	adds	r2, r3, #1
 801a2fc:	0013      	movs	r3, r2
 801a2fe:	009b      	lsls	r3, r3, #2
 801a300:	189b      	adds	r3, r3, r2
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	687a      	ldr	r2, [r7, #4]
 801a306:	18d3      	adds	r3, r2, r3
 801a308:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	001a      	movs	r2, r3
 801a310:	183b      	adds	r3, r7, r0
 801a312:	781b      	ldrb	r3, [r3, #0]
 801a314:	009b      	lsls	r3, r3, #2
 801a316:	18d3      	adds	r3, r2, r3
 801a318:	881b      	ldrh	r3, [r3, #0]
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	2542      	movs	r5, #66	@ 0x42
 801a31e:	197b      	adds	r3, r7, r5
 801a320:	494f      	ldr	r1, [pc, #316]	@ (801a460 <PCD_EP_ISR_Handler+0x6e8>)
 801a322:	400a      	ands	r2, r1
 801a324:	801a      	strh	r2, [r3, #0]
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	001a      	movs	r2, r3
 801a32c:	183b      	adds	r3, r7, r0
 801a32e:	781b      	ldrb	r3, [r3, #0]
 801a330:	009b      	lsls	r3, r3, #2
 801a332:	18d3      	adds	r3, r2, r3
 801a334:	197a      	adds	r2, r7, r5
 801a336:	8812      	ldrh	r2, [r2, #0]
 801a338:	494a      	ldr	r1, [pc, #296]	@ (801a464 <PCD_EP_ISR_Handler+0x6ec>)
 801a33a:	430a      	orrs	r2, r1
 801a33c:	b292      	uxth	r2, r2
 801a33e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a342:	78db      	ldrb	r3, [r3, #3]
 801a344:	2b01      	cmp	r3, #1
 801a346:	d000      	beq.n	801a34a <PCD_EP_ISR_Handler+0x5d2>
 801a348:	e0af      	b.n	801a4aa <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a34a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a34c:	2200      	movs	r2, #0
 801a34e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a352:	7b1b      	ldrb	r3, [r3, #12]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d100      	bne.n	801a35a <PCD_EP_ISR_Handler+0x5e2>
 801a358:	e09f      	b.n	801a49a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a35a:	193b      	adds	r3, r7, r4
 801a35c:	881b      	ldrh	r3, [r3, #0]
 801a35e:	2240      	movs	r2, #64	@ 0x40
 801a360:	4013      	ands	r3, r2
 801a362:	d046      	beq.n	801a3f2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a366:	785b      	ldrb	r3, [r3, #1]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d125      	bne.n	801a3b8 <PCD_EP_ISR_Handler+0x640>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	627b      	str	r3, [r7, #36]	@ 0x24
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	2250      	movs	r2, #80	@ 0x50
 801a378:	5a9b      	ldrh	r3, [r3, r2]
 801a37a:	b29b      	uxth	r3, r3
 801a37c:	001a      	movs	r2, r3
 801a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a380:	189b      	adds	r3, r3, r2
 801a382:	627b      	str	r3, [r7, #36]	@ 0x24
 801a384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	00da      	lsls	r2, r3, #3
 801a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a38c:	18d3      	adds	r3, r2, r3
 801a38e:	4a33      	ldr	r2, [pc, #204]	@ (801a45c <PCD_EP_ISR_Handler+0x6e4>)
 801a390:	4694      	mov	ip, r2
 801a392:	4463      	add	r3, ip
 801a394:	623b      	str	r3, [r7, #32]
 801a396:	6a3b      	ldr	r3, [r7, #32]
 801a398:	881b      	ldrh	r3, [r3, #0]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	059b      	lsls	r3, r3, #22
 801a39e:	0d9b      	lsrs	r3, r3, #22
 801a3a0:	b29a      	uxth	r2, r3
 801a3a2:	6a3b      	ldr	r3, [r7, #32]
 801a3a4:	801a      	strh	r2, [r3, #0]
 801a3a6:	6a3b      	ldr	r3, [r7, #32]
 801a3a8:	881b      	ldrh	r3, [r3, #0]
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	4a2d      	ldr	r2, [pc, #180]	@ (801a464 <PCD_EP_ISR_Handler+0x6ec>)
 801a3ae:	4313      	orrs	r3, r2
 801a3b0:	b29a      	uxth	r2, r3
 801a3b2:	6a3b      	ldr	r3, [r7, #32]
 801a3b4:	801a      	strh	r2, [r3, #0]
 801a3b6:	e070      	b.n	801a49a <PCD_EP_ISR_Handler+0x722>
 801a3b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3ba:	785b      	ldrb	r3, [r3, #1]
 801a3bc:	2b01      	cmp	r3, #1
 801a3be:	d16c      	bne.n	801a49a <PCD_EP_ISR_Handler+0x722>
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	2250      	movs	r2, #80	@ 0x50
 801a3cc:	5a9b      	ldrh	r3, [r3, r2]
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	001a      	movs	r2, r3
 801a3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3d4:	189b      	adds	r3, r3, r2
 801a3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3da:	781b      	ldrb	r3, [r3, #0]
 801a3dc:	00da      	lsls	r2, r3, #3
 801a3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e0:	18d3      	adds	r3, r2, r3
 801a3e2:	4a1e      	ldr	r2, [pc, #120]	@ (801a45c <PCD_EP_ISR_Handler+0x6e4>)
 801a3e4:	4694      	mov	ip, r2
 801a3e6:	4463      	add	r3, ip
 801a3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	801a      	strh	r2, [r3, #0]
 801a3f0:	e053      	b.n	801a49a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3fa:	785b      	ldrb	r3, [r3, #1]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d133      	bne.n	801a468 <PCD_EP_ISR_Handler+0x6f0>
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	637b      	str	r3, [r7, #52]	@ 0x34
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2250      	movs	r2, #80	@ 0x50
 801a40c:	5a9b      	ldrh	r3, [r3, r2]
 801a40e:	b29b      	uxth	r3, r3
 801a410:	001a      	movs	r2, r3
 801a412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a414:	189b      	adds	r3, r3, r2
 801a416:	637b      	str	r3, [r7, #52]	@ 0x34
 801a418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a41a:	781b      	ldrb	r3, [r3, #0]
 801a41c:	00da      	lsls	r2, r3, #3
 801a41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a420:	18d3      	adds	r3, r2, r3
 801a422:	4a0b      	ldr	r2, [pc, #44]	@ (801a450 <PCD_EP_ISR_Handler+0x6d8>)
 801a424:	4694      	mov	ip, r2
 801a426:	4463      	add	r3, ip
 801a428:	633b      	str	r3, [r7, #48]	@ 0x30
 801a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a42c:	881b      	ldrh	r3, [r3, #0]
 801a42e:	b29b      	uxth	r3, r3
 801a430:	059b      	lsls	r3, r3, #22
 801a432:	0d9b      	lsrs	r3, r3, #22
 801a434:	b29a      	uxth	r2, r3
 801a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a438:	801a      	strh	r2, [r3, #0]
 801a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a43c:	881b      	ldrh	r3, [r3, #0]
 801a43e:	b29b      	uxth	r3, r3
 801a440:	4a08      	ldr	r2, [pc, #32]	@ (801a464 <PCD_EP_ISR_Handler+0x6ec>)
 801a442:	4313      	orrs	r3, r2
 801a444:	b29a      	uxth	r2, r3
 801a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a448:	801a      	strh	r2, [r3, #0]
 801a44a:	e026      	b.n	801a49a <PCD_EP_ISR_Handler+0x722>
 801a44c:	00000f8f 	.word	0x00000f8f
 801a450:	00000406 	.word	0x00000406
 801a454:	ffff8f8f 	.word	0xffff8f8f
 801a458:	ffff80c0 	.word	0xffff80c0
 801a45c:	00000402 	.word	0x00000402
 801a460:	ffff8f0f 	.word	0xffff8f0f
 801a464:	ffff8000 	.word	0xffff8000
 801a468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a46a:	785b      	ldrb	r3, [r3, #1]
 801a46c:	2b01      	cmp	r3, #1
 801a46e:	d114      	bne.n	801a49a <PCD_EP_ISR_Handler+0x722>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	2250      	movs	r2, #80	@ 0x50
 801a476:	5a9b      	ldrh	r3, [r3, r2]
 801a478:	b29b      	uxth	r3, r3
 801a47a:	001a      	movs	r2, r3
 801a47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a47e:	189b      	adds	r3, r3, r2
 801a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a484:	781b      	ldrb	r3, [r3, #0]
 801a486:	00da      	lsls	r2, r3, #3
 801a488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a48a:	18d3      	adds	r3, r2, r3
 801a48c:	4a3b      	ldr	r2, [pc, #236]	@ (801a57c <PCD_EP_ISR_Handler+0x804>)
 801a48e:	4694      	mov	ip, r2
 801a490:	4463      	add	r3, ip
 801a492:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a496:	2200      	movs	r2, #0
 801a498:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a49c:	781a      	ldrb	r2, [r3, #0]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	0011      	movs	r1, r2
 801a4a2:	0018      	movs	r0, r3
 801a4a4:	f009 f890 	bl	80235c8 <HAL_PCD_DataInStageCallback>
 801a4a8:	e058      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a4aa:	234a      	movs	r3, #74	@ 0x4a
 801a4ac:	18fb      	adds	r3, r7, r3
 801a4ae:	881a      	ldrh	r2, [r3, #0]
 801a4b0:	2380      	movs	r3, #128	@ 0x80
 801a4b2:	005b      	lsls	r3, r3, #1
 801a4b4:	4013      	ands	r3, r2
 801a4b6:	d149      	bne.n	801a54c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	2250      	movs	r2, #80	@ 0x50
 801a4be:	5a9b      	ldrh	r3, [r3, r2]
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	001a      	movs	r2, r3
 801a4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4c6:	781b      	ldrb	r3, [r3, #0]
 801a4c8:	00db      	lsls	r3, r3, #3
 801a4ca:	18d2      	adds	r2, r2, r3
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	18d3      	adds	r3, r2, r3
 801a4d2:	4a2b      	ldr	r2, [pc, #172]	@ (801a580 <PCD_EP_ISR_Handler+0x808>)
 801a4d4:	4694      	mov	ip, r2
 801a4d6:	4463      	add	r3, ip
 801a4d8:	881a      	ldrh	r2, [r3, #0]
 801a4da:	2140      	movs	r1, #64	@ 0x40
 801a4dc:	187b      	adds	r3, r7, r1
 801a4de:	0592      	lsls	r2, r2, #22
 801a4e0:	0d92      	lsrs	r2, r2, #22
 801a4e2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a4e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4e6:	699a      	ldr	r2, [r3, #24]
 801a4e8:	187b      	adds	r3, r7, r1
 801a4ea:	881b      	ldrh	r3, [r3, #0]
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d907      	bls.n	801a500 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4f2:	699a      	ldr	r2, [r3, #24]
 801a4f4:	187b      	adds	r3, r7, r1
 801a4f6:	881b      	ldrh	r3, [r3, #0]
 801a4f8:	1ad2      	subs	r2, r2, r3
 801a4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4fc:	619a      	str	r2, [r3, #24]
 801a4fe:	e002      	b.n	801a506 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a502:	2200      	movs	r2, #0
 801a504:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a508:	699b      	ldr	r3, [r3, #24]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d107      	bne.n	801a51e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a510:	781a      	ldrb	r2, [r3, #0]
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	0011      	movs	r1, r2
 801a516:	0018      	movs	r0, r3
 801a518:	f009 f856 	bl	80235c8 <HAL_PCD_DataInStageCallback>
 801a51c:	e01e      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a520:	695a      	ldr	r2, [r3, #20]
 801a522:	2140      	movs	r1, #64	@ 0x40
 801a524:	187b      	adds	r3, r7, r1
 801a526:	881b      	ldrh	r3, [r3, #0]
 801a528:	18d2      	adds	r2, r2, r3
 801a52a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a52c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a52e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a530:	69da      	ldr	r2, [r3, #28]
 801a532:	187b      	adds	r3, r7, r1
 801a534:	881b      	ldrh	r3, [r3, #0]
 801a536:	18d2      	adds	r2, r2, r3
 801a538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a53a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a542:	0011      	movs	r1, r2
 801a544:	0018      	movs	r0, r3
 801a546:	f005 fd3b 	bl	801ffc0 <USB_EPStartXfer>
 801a54a:	e007      	b.n	801a55c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a54c:	234a      	movs	r3, #74	@ 0x4a
 801a54e:	18fb      	adds	r3, r7, r3
 801a550:	881a      	ldrh	r2, [r3, #0]
 801a552:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	0018      	movs	r0, r3
 801a558:	f000 f930 	bl	801a7bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	2244      	movs	r2, #68	@ 0x44
 801a562:	5a9b      	ldrh	r3, [r3, r2]
 801a564:	b29b      	uxth	r3, r3
 801a566:	b21b      	sxth	r3, r3
 801a568:	2b00      	cmp	r3, #0
 801a56a:	da01      	bge.n	801a570 <PCD_EP_ISR_Handler+0x7f8>
 801a56c:	f7ff fc0a 	bl	8019d84 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a570:	2300      	movs	r3, #0
}
 801a572:	0018      	movs	r0, r3
 801a574:	46bd      	mov	sp, r7
 801a576:	b016      	add	sp, #88	@ 0x58
 801a578:	bdb0      	pop	{r4, r5, r7, pc}
 801a57a:	46c0      	nop			@ (mov r8, r8)
 801a57c:	00000406 	.word	0x00000406
 801a580:	00000402 	.word	0x00000402

0801a584 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a584:	b590      	push	{r4, r7, lr}
 801a586:	b089      	sub	sp, #36	@ 0x24
 801a588:	af00      	add	r7, sp, #0
 801a58a:	60f8      	str	r0, [r7, #12]
 801a58c:	60b9      	str	r1, [r7, #8]
 801a58e:	1dbb      	adds	r3, r7, #6
 801a590:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a592:	1dbb      	adds	r3, r7, #6
 801a594:	881a      	ldrh	r2, [r3, #0]
 801a596:	2380      	movs	r3, #128	@ 0x80
 801a598:	01db      	lsls	r3, r3, #7
 801a59a:	4013      	ands	r3, r2
 801a59c:	d100      	bne.n	801a5a0 <HAL_PCD_EP_DB_Receive+0x1c>
 801a59e:	e07d      	b.n	801a69c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2250      	movs	r2, #80	@ 0x50
 801a5a6:	5a9b      	ldrh	r3, [r3, r2]
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	001a      	movs	r2, r3
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	781b      	ldrb	r3, [r3, #0]
 801a5b0:	00db      	lsls	r3, r3, #3
 801a5b2:	18d2      	adds	r2, r2, r3
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	18d3      	adds	r3, r2, r3
 801a5ba:	4a7a      	ldr	r2, [pc, #488]	@ (801a7a4 <HAL_PCD_EP_DB_Receive+0x220>)
 801a5bc:	4694      	mov	ip, r2
 801a5be:	4463      	add	r3, ip
 801a5c0:	881a      	ldrh	r2, [r3, #0]
 801a5c2:	211a      	movs	r1, #26
 801a5c4:	187b      	adds	r3, r7, r1
 801a5c6:	0592      	lsls	r2, r2, #22
 801a5c8:	0d92      	lsrs	r2, r2, #22
 801a5ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	699a      	ldr	r2, [r3, #24]
 801a5d0:	187b      	adds	r3, r7, r1
 801a5d2:	881b      	ldrh	r3, [r3, #0]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d307      	bcc.n	801a5e8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	699a      	ldr	r2, [r3, #24]
 801a5dc:	187b      	adds	r3, r7, r1
 801a5de:	881b      	ldrh	r3, [r3, #0]
 801a5e0:	1ad2      	subs	r2, r2, r3
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	619a      	str	r2, [r3, #24]
 801a5e6:	e002      	b.n	801a5ee <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a5e8:	68bb      	ldr	r3, [r7, #8]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a5ee:	68bb      	ldr	r3, [r7, #8]
 801a5f0:	699b      	ldr	r3, [r3, #24]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d121      	bne.n	801a63a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	001a      	movs	r2, r3
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	781b      	ldrb	r3, [r3, #0]
 801a600:	009b      	lsls	r3, r3, #2
 801a602:	18d3      	adds	r3, r2, r3
 801a604:	881b      	ldrh	r3, [r3, #0]
 801a606:	b29a      	uxth	r2, r3
 801a608:	2018      	movs	r0, #24
 801a60a:	183b      	adds	r3, r7, r0
 801a60c:	4966      	ldr	r1, [pc, #408]	@ (801a7a8 <HAL_PCD_EP_DB_Receive+0x224>)
 801a60e:	400a      	ands	r2, r1
 801a610:	801a      	strh	r2, [r3, #0]
 801a612:	183b      	adds	r3, r7, r0
 801a614:	183a      	adds	r2, r7, r0
 801a616:	8812      	ldrh	r2, [r2, #0]
 801a618:	2180      	movs	r1, #128	@ 0x80
 801a61a:	0189      	lsls	r1, r1, #6
 801a61c:	404a      	eors	r2, r1
 801a61e:	801a      	strh	r2, [r3, #0]
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	001a      	movs	r2, r3
 801a626:	68bb      	ldr	r3, [r7, #8]
 801a628:	781b      	ldrb	r3, [r3, #0]
 801a62a:	009b      	lsls	r3, r3, #2
 801a62c:	18d3      	adds	r3, r2, r3
 801a62e:	183a      	adds	r2, r7, r0
 801a630:	8812      	ldrh	r2, [r2, #0]
 801a632:	495e      	ldr	r1, [pc, #376]	@ (801a7ac <HAL_PCD_EP_DB_Receive+0x228>)
 801a634:	430a      	orrs	r2, r1
 801a636:	b292      	uxth	r2, r2
 801a638:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a63a:	1dbb      	adds	r3, r7, #6
 801a63c:	881b      	ldrh	r3, [r3, #0]
 801a63e:	2240      	movs	r2, #64	@ 0x40
 801a640:	4013      	ands	r3, r2
 801a642:	d01a      	beq.n	801a67a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	001a      	movs	r2, r3
 801a64a:	68bb      	ldr	r3, [r7, #8]
 801a64c:	781b      	ldrb	r3, [r3, #0]
 801a64e:	009b      	lsls	r3, r3, #2
 801a650:	18d3      	adds	r3, r2, r3
 801a652:	881b      	ldrh	r3, [r3, #0]
 801a654:	b29a      	uxth	r2, r3
 801a656:	2016      	movs	r0, #22
 801a658:	183b      	adds	r3, r7, r0
 801a65a:	4955      	ldr	r1, [pc, #340]	@ (801a7b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a65c:	400a      	ands	r2, r1
 801a65e:	801a      	strh	r2, [r3, #0]
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	001a      	movs	r2, r3
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	781b      	ldrb	r3, [r3, #0]
 801a66a:	009b      	lsls	r3, r3, #2
 801a66c:	18d3      	adds	r3, r2, r3
 801a66e:	183a      	adds	r2, r7, r0
 801a670:	8812      	ldrh	r2, [r2, #0]
 801a672:	4950      	ldr	r1, [pc, #320]	@ (801a7b4 <HAL_PCD_EP_DB_Receive+0x230>)
 801a674:	430a      	orrs	r2, r1
 801a676:	b292      	uxth	r2, r2
 801a678:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a67a:	241a      	movs	r4, #26
 801a67c:	193b      	adds	r3, r7, r4
 801a67e:	881b      	ldrh	r3, [r3, #0]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d100      	bne.n	801a686 <HAL_PCD_EP_DB_Receive+0x102>
 801a684:	e086      	b.n	801a794 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	6818      	ldr	r0, [r3, #0]
 801a68a:	68bb      	ldr	r3, [r7, #8]
 801a68c:	6959      	ldr	r1, [r3, #20]
 801a68e:	68bb      	ldr	r3, [r7, #8]
 801a690:	891a      	ldrh	r2, [r3, #8]
 801a692:	193b      	adds	r3, r7, r4
 801a694:	881b      	ldrh	r3, [r3, #0]
 801a696:	f006 ff4f 	bl	8021538 <USB_ReadPMA>
 801a69a:	e07b      	b.n	801a794 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	2250      	movs	r2, #80	@ 0x50
 801a6a2:	5a9b      	ldrh	r3, [r3, r2]
 801a6a4:	b29b      	uxth	r3, r3
 801a6a6:	001a      	movs	r2, r3
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	781b      	ldrb	r3, [r3, #0]
 801a6ac:	00db      	lsls	r3, r3, #3
 801a6ae:	18d2      	adds	r2, r2, r3
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	18d3      	adds	r3, r2, r3
 801a6b6:	4a40      	ldr	r2, [pc, #256]	@ (801a7b8 <HAL_PCD_EP_DB_Receive+0x234>)
 801a6b8:	4694      	mov	ip, r2
 801a6ba:	4463      	add	r3, ip
 801a6bc:	881a      	ldrh	r2, [r3, #0]
 801a6be:	211a      	movs	r1, #26
 801a6c0:	187b      	adds	r3, r7, r1
 801a6c2:	0592      	lsls	r2, r2, #22
 801a6c4:	0d92      	lsrs	r2, r2, #22
 801a6c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	699a      	ldr	r2, [r3, #24]
 801a6cc:	187b      	adds	r3, r7, r1
 801a6ce:	881b      	ldrh	r3, [r3, #0]
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d307      	bcc.n	801a6e4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a6d4:	68bb      	ldr	r3, [r7, #8]
 801a6d6:	699a      	ldr	r2, [r3, #24]
 801a6d8:	187b      	adds	r3, r7, r1
 801a6da:	881b      	ldrh	r3, [r3, #0]
 801a6dc:	1ad2      	subs	r2, r2, r3
 801a6de:	68bb      	ldr	r3, [r7, #8]
 801a6e0:	619a      	str	r2, [r3, #24]
 801a6e2:	e002      	b.n	801a6ea <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	699b      	ldr	r3, [r3, #24]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d121      	bne.n	801a736 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	001a      	movs	r2, r3
 801a6f8:	68bb      	ldr	r3, [r7, #8]
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	009b      	lsls	r3, r3, #2
 801a6fe:	18d3      	adds	r3, r2, r3
 801a700:	881b      	ldrh	r3, [r3, #0]
 801a702:	b29a      	uxth	r2, r3
 801a704:	201e      	movs	r0, #30
 801a706:	183b      	adds	r3, r7, r0
 801a708:	4927      	ldr	r1, [pc, #156]	@ (801a7a8 <HAL_PCD_EP_DB_Receive+0x224>)
 801a70a:	400a      	ands	r2, r1
 801a70c:	801a      	strh	r2, [r3, #0]
 801a70e:	183b      	adds	r3, r7, r0
 801a710:	183a      	adds	r2, r7, r0
 801a712:	8812      	ldrh	r2, [r2, #0]
 801a714:	2180      	movs	r1, #128	@ 0x80
 801a716:	0189      	lsls	r1, r1, #6
 801a718:	404a      	eors	r2, r1
 801a71a:	801a      	strh	r2, [r3, #0]
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	001a      	movs	r2, r3
 801a722:	68bb      	ldr	r3, [r7, #8]
 801a724:	781b      	ldrb	r3, [r3, #0]
 801a726:	009b      	lsls	r3, r3, #2
 801a728:	18d3      	adds	r3, r2, r3
 801a72a:	183a      	adds	r2, r7, r0
 801a72c:	8812      	ldrh	r2, [r2, #0]
 801a72e:	491f      	ldr	r1, [pc, #124]	@ (801a7ac <HAL_PCD_EP_DB_Receive+0x228>)
 801a730:	430a      	orrs	r2, r1
 801a732:	b292      	uxth	r2, r2
 801a734:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a736:	1dbb      	adds	r3, r7, #6
 801a738:	881b      	ldrh	r3, [r3, #0]
 801a73a:	2240      	movs	r2, #64	@ 0x40
 801a73c:	4013      	ands	r3, r2
 801a73e:	d11a      	bne.n	801a776 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	001a      	movs	r2, r3
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	781b      	ldrb	r3, [r3, #0]
 801a74a:	009b      	lsls	r3, r3, #2
 801a74c:	18d3      	adds	r3, r2, r3
 801a74e:	881b      	ldrh	r3, [r3, #0]
 801a750:	b29a      	uxth	r2, r3
 801a752:	201c      	movs	r0, #28
 801a754:	183b      	adds	r3, r7, r0
 801a756:	4916      	ldr	r1, [pc, #88]	@ (801a7b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a758:	400a      	ands	r2, r1
 801a75a:	801a      	strh	r2, [r3, #0]
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	001a      	movs	r2, r3
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	781b      	ldrb	r3, [r3, #0]
 801a766:	009b      	lsls	r3, r3, #2
 801a768:	18d3      	adds	r3, r2, r3
 801a76a:	183a      	adds	r2, r7, r0
 801a76c:	8812      	ldrh	r2, [r2, #0]
 801a76e:	4911      	ldr	r1, [pc, #68]	@ (801a7b4 <HAL_PCD_EP_DB_Receive+0x230>)
 801a770:	430a      	orrs	r2, r1
 801a772:	b292      	uxth	r2, r2
 801a774:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a776:	241a      	movs	r4, #26
 801a778:	193b      	adds	r3, r7, r4
 801a77a:	881b      	ldrh	r3, [r3, #0]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d009      	beq.n	801a794 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	6818      	ldr	r0, [r3, #0]
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	6959      	ldr	r1, [r3, #20]
 801a788:	68bb      	ldr	r3, [r7, #8]
 801a78a:	895a      	ldrh	r2, [r3, #10]
 801a78c:	193b      	adds	r3, r7, r4
 801a78e:	881b      	ldrh	r3, [r3, #0]
 801a790:	f006 fed2 	bl	8021538 <USB_ReadPMA>
    }
  }

  return count;
 801a794:	231a      	movs	r3, #26
 801a796:	18fb      	adds	r3, r7, r3
 801a798:	881b      	ldrh	r3, [r3, #0]
}
 801a79a:	0018      	movs	r0, r3
 801a79c:	46bd      	mov	sp, r7
 801a79e:	b009      	add	sp, #36	@ 0x24
 801a7a0:	bd90      	pop	{r4, r7, pc}
 801a7a2:	46c0      	nop			@ (mov r8, r8)
 801a7a4:	00000402 	.word	0x00000402
 801a7a8:	ffffbf8f 	.word	0xffffbf8f
 801a7ac:	ffff8080 	.word	0xffff8080
 801a7b0:	ffff8f8f 	.word	0xffff8f8f
 801a7b4:	ffff80c0 	.word	0xffff80c0
 801a7b8:	00000406 	.word	0x00000406

0801a7bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b0a4      	sub	sp, #144	@ 0x90
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	60f8      	str	r0, [r7, #12]
 801a7c4:	60b9      	str	r1, [r7, #8]
 801a7c6:	1dbb      	adds	r3, r7, #6
 801a7c8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a7ca:	1dbb      	adds	r3, r7, #6
 801a7cc:	881b      	ldrh	r3, [r3, #0]
 801a7ce:	2240      	movs	r2, #64	@ 0x40
 801a7d0:	4013      	ands	r3, r2
 801a7d2:	d100      	bne.n	801a7d6 <HAL_PCD_EP_DB_Transmit+0x1a>
 801a7d4:	e1e4      	b.n	801aba0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	2250      	movs	r2, #80	@ 0x50
 801a7dc:	5a9b      	ldrh	r3, [r3, r2]
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	001a      	movs	r2, r3
 801a7e2:	68bb      	ldr	r3, [r7, #8]
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	00db      	lsls	r3, r3, #3
 801a7e8:	18d2      	adds	r2, r2, r3
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	18d3      	adds	r3, r2, r3
 801a7f0:	4ad0      	ldr	r2, [pc, #832]	@ (801ab34 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a7f2:	4694      	mov	ip, r2
 801a7f4:	4463      	add	r3, ip
 801a7f6:	881a      	ldrh	r2, [r3, #0]
 801a7f8:	2186      	movs	r1, #134	@ 0x86
 801a7fa:	187b      	adds	r3, r7, r1
 801a7fc:	0592      	lsls	r2, r2, #22
 801a7fe:	0d92      	lsrs	r2, r2, #22
 801a800:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	699a      	ldr	r2, [r3, #24]
 801a806:	187b      	adds	r3, r7, r1
 801a808:	881b      	ldrh	r3, [r3, #0]
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d907      	bls.n	801a81e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a80e:	68bb      	ldr	r3, [r7, #8]
 801a810:	699a      	ldr	r2, [r3, #24]
 801a812:	187b      	adds	r3, r7, r1
 801a814:	881b      	ldrh	r3, [r3, #0]
 801a816:	1ad2      	subs	r2, r2, r3
 801a818:	68bb      	ldr	r3, [r7, #8]
 801a81a:	619a      	str	r2, [r3, #24]
 801a81c:	e002      	b.n	801a824 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	2200      	movs	r2, #0
 801a822:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	699b      	ldr	r3, [r3, #24]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d000      	beq.n	801a82e <HAL_PCD_EP_DB_Transmit+0x72>
 801a82c:	e0b5      	b.n	801a99a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a82e:	68bb      	ldr	r3, [r7, #8]
 801a830:	785b      	ldrb	r3, [r3, #1]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d125      	bne.n	801a882 <HAL_PCD_EP_DB_Transmit+0xc6>
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2250      	movs	r2, #80	@ 0x50
 801a842:	5a9b      	ldrh	r3, [r3, r2]
 801a844:	b29b      	uxth	r3, r3
 801a846:	001a      	movs	r2, r3
 801a848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a84a:	189b      	adds	r3, r3, r2
 801a84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	781b      	ldrb	r3, [r3, #0]
 801a852:	00da      	lsls	r2, r3, #3
 801a854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a856:	18d3      	adds	r3, r2, r3
 801a858:	4ab6      	ldr	r2, [pc, #728]	@ (801ab34 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a85a:	4694      	mov	ip, r2
 801a85c:	4463      	add	r3, ip
 801a85e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a862:	881b      	ldrh	r3, [r3, #0]
 801a864:	b29b      	uxth	r3, r3
 801a866:	059b      	lsls	r3, r3, #22
 801a868:	0d9b      	lsrs	r3, r3, #22
 801a86a:	b29a      	uxth	r2, r3
 801a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a86e:	801a      	strh	r2, [r3, #0]
 801a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a872:	881b      	ldrh	r3, [r3, #0]
 801a874:	b29b      	uxth	r3, r3
 801a876:	4ab0      	ldr	r2, [pc, #704]	@ (801ab38 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a878:	4313      	orrs	r3, r2
 801a87a:	b29a      	uxth	r2, r3
 801a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a87e:	801a      	strh	r2, [r3, #0]
 801a880:	e01b      	b.n	801a8ba <HAL_PCD_EP_DB_Transmit+0xfe>
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	785b      	ldrb	r3, [r3, #1]
 801a886:	2b01      	cmp	r3, #1
 801a888:	d117      	bne.n	801a8ba <HAL_PCD_EP_DB_Transmit+0xfe>
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	2250      	movs	r2, #80	@ 0x50
 801a896:	5a9b      	ldrh	r3, [r3, r2]
 801a898:	b29b      	uxth	r3, r3
 801a89a:	001a      	movs	r2, r3
 801a89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a89e:	189b      	adds	r3, r3, r2
 801a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	781b      	ldrb	r3, [r3, #0]
 801a8a6:	00da      	lsls	r2, r3, #3
 801a8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8aa:	18d3      	adds	r3, r2, r3
 801a8ac:	4aa1      	ldr	r2, [pc, #644]	@ (801ab34 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a8ae:	4694      	mov	ip, r2
 801a8b0:	4463      	add	r3, ip
 801a8b2:	633b      	str	r3, [r7, #48]	@ 0x30
 801a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	627b      	str	r3, [r7, #36]	@ 0x24
 801a8c0:	68bb      	ldr	r3, [r7, #8]
 801a8c2:	785b      	ldrb	r3, [r3, #1]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d125      	bne.n	801a914 <HAL_PCD_EP_DB_Transmit+0x158>
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	61fb      	str	r3, [r7, #28]
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2250      	movs	r2, #80	@ 0x50
 801a8d4:	5a9b      	ldrh	r3, [r3, r2]
 801a8d6:	b29b      	uxth	r3, r3
 801a8d8:	001a      	movs	r2, r3
 801a8da:	69fb      	ldr	r3, [r7, #28]
 801a8dc:	189b      	adds	r3, r3, r2
 801a8de:	61fb      	str	r3, [r7, #28]
 801a8e0:	68bb      	ldr	r3, [r7, #8]
 801a8e2:	781b      	ldrb	r3, [r3, #0]
 801a8e4:	00da      	lsls	r2, r3, #3
 801a8e6:	69fb      	ldr	r3, [r7, #28]
 801a8e8:	18d3      	adds	r3, r2, r3
 801a8ea:	4a94      	ldr	r2, [pc, #592]	@ (801ab3c <HAL_PCD_EP_DB_Transmit+0x380>)
 801a8ec:	4694      	mov	ip, r2
 801a8ee:	4463      	add	r3, ip
 801a8f0:	61bb      	str	r3, [r7, #24]
 801a8f2:	69bb      	ldr	r3, [r7, #24]
 801a8f4:	881b      	ldrh	r3, [r3, #0]
 801a8f6:	b29b      	uxth	r3, r3
 801a8f8:	059b      	lsls	r3, r3, #22
 801a8fa:	0d9b      	lsrs	r3, r3, #22
 801a8fc:	b29a      	uxth	r2, r3
 801a8fe:	69bb      	ldr	r3, [r7, #24]
 801a900:	801a      	strh	r2, [r3, #0]
 801a902:	69bb      	ldr	r3, [r7, #24]
 801a904:	881b      	ldrh	r3, [r3, #0]
 801a906:	b29b      	uxth	r3, r3
 801a908:	4a8b      	ldr	r2, [pc, #556]	@ (801ab38 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a90a:	4313      	orrs	r3, r2
 801a90c:	b29a      	uxth	r2, r3
 801a90e:	69bb      	ldr	r3, [r7, #24]
 801a910:	801a      	strh	r2, [r3, #0]
 801a912:	e018      	b.n	801a946 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	785b      	ldrb	r3, [r3, #1]
 801a918:	2b01      	cmp	r3, #1
 801a91a:	d114      	bne.n	801a946 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	2250      	movs	r2, #80	@ 0x50
 801a922:	5a9b      	ldrh	r3, [r3, r2]
 801a924:	b29b      	uxth	r3, r3
 801a926:	001a      	movs	r2, r3
 801a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a92a:	189b      	adds	r3, r3, r2
 801a92c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a92e:	68bb      	ldr	r3, [r7, #8]
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	00da      	lsls	r2, r3, #3
 801a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a936:	18d3      	adds	r3, r2, r3
 801a938:	4a80      	ldr	r2, [pc, #512]	@ (801ab3c <HAL_PCD_EP_DB_Transmit+0x380>)
 801a93a:	4694      	mov	ip, r2
 801a93c:	4463      	add	r3, ip
 801a93e:	623b      	str	r3, [r7, #32]
 801a940:	6a3b      	ldr	r3, [r7, #32]
 801a942:	2200      	movs	r2, #0
 801a944:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a946:	68bb      	ldr	r3, [r7, #8]
 801a948:	781a      	ldrb	r2, [r3, #0]
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	0011      	movs	r1, r2
 801a94e:	0018      	movs	r0, r3
 801a950:	f008 fe3a 	bl	80235c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a954:	1dbb      	adds	r3, r7, #6
 801a956:	881a      	ldrh	r2, [r3, #0]
 801a958:	2380      	movs	r3, #128	@ 0x80
 801a95a:	01db      	lsls	r3, r3, #7
 801a95c:	4013      	ands	r3, r2
 801a95e:	d100      	bne.n	801a962 <HAL_PCD_EP_DB_Transmit+0x1a6>
 801a960:	e309      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	001a      	movs	r2, r3
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	781b      	ldrb	r3, [r3, #0]
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	18d3      	adds	r3, r2, r3
 801a970:	881b      	ldrh	r3, [r3, #0]
 801a972:	b29a      	uxth	r2, r3
 801a974:	2016      	movs	r0, #22
 801a976:	183b      	adds	r3, r7, r0
 801a978:	4971      	ldr	r1, [pc, #452]	@ (801ab40 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a97a:	400a      	ands	r2, r1
 801a97c:	801a      	strh	r2, [r3, #0]
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	001a      	movs	r2, r3
 801a984:	68bb      	ldr	r3, [r7, #8]
 801a986:	781b      	ldrb	r3, [r3, #0]
 801a988:	009b      	lsls	r3, r3, #2
 801a98a:	18d3      	adds	r3, r2, r3
 801a98c:	183a      	adds	r2, r7, r0
 801a98e:	8812      	ldrh	r2, [r2, #0]
 801a990:	496c      	ldr	r1, [pc, #432]	@ (801ab44 <HAL_PCD_EP_DB_Transmit+0x388>)
 801a992:	430a      	orrs	r2, r1
 801a994:	b292      	uxth	r2, r2
 801a996:	801a      	strh	r2, [r3, #0]
 801a998:	e2ed      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a99a:	1dbb      	adds	r3, r7, #6
 801a99c:	881a      	ldrh	r2, [r3, #0]
 801a99e:	2380      	movs	r3, #128	@ 0x80
 801a9a0:	01db      	lsls	r3, r3, #7
 801a9a2:	4013      	ands	r3, r2
 801a9a4:	d01a      	beq.n	801a9dc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	001a      	movs	r2, r3
 801a9ac:	68bb      	ldr	r3, [r7, #8]
 801a9ae:	781b      	ldrb	r3, [r3, #0]
 801a9b0:	009b      	lsls	r3, r3, #2
 801a9b2:	18d3      	adds	r3, r2, r3
 801a9b4:	881b      	ldrh	r3, [r3, #0]
 801a9b6:	b29a      	uxth	r2, r3
 801a9b8:	208a      	movs	r0, #138	@ 0x8a
 801a9ba:	183b      	adds	r3, r7, r0
 801a9bc:	4960      	ldr	r1, [pc, #384]	@ (801ab40 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a9be:	400a      	ands	r2, r1
 801a9c0:	801a      	strh	r2, [r3, #0]
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	001a      	movs	r2, r3
 801a9c8:	68bb      	ldr	r3, [r7, #8]
 801a9ca:	781b      	ldrb	r3, [r3, #0]
 801a9cc:	009b      	lsls	r3, r3, #2
 801a9ce:	18d3      	adds	r3, r2, r3
 801a9d0:	183a      	adds	r2, r7, r0
 801a9d2:	8812      	ldrh	r2, [r2, #0]
 801a9d4:	495b      	ldr	r1, [pc, #364]	@ (801ab44 <HAL_PCD_EP_DB_Transmit+0x388>)
 801a9d6:	430a      	orrs	r2, r1
 801a9d8:	b292      	uxth	r2, r2
 801a9da:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	2224      	movs	r2, #36	@ 0x24
 801a9e0:	5c9b      	ldrb	r3, [r3, r2]
 801a9e2:	2b01      	cmp	r3, #1
 801a9e4:	d000      	beq.n	801a9e8 <HAL_PCD_EP_DB_Transmit+0x22c>
 801a9e6:	e2c6      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	695a      	ldr	r2, [r3, #20]
 801a9ec:	2186      	movs	r1, #134	@ 0x86
 801a9ee:	187b      	adds	r3, r7, r1
 801a9f0:	881b      	ldrh	r3, [r3, #0]
 801a9f2:	18d2      	adds	r2, r2, r3
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	69da      	ldr	r2, [r3, #28]
 801a9fc:	187b      	adds	r3, r7, r1
 801a9fe:	881b      	ldrh	r3, [r3, #0]
 801aa00:	18d2      	adds	r2, r2, r3
 801aa02:	68bb      	ldr	r3, [r7, #8]
 801aa04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aa06:	68bb      	ldr	r3, [r7, #8]
 801aa08:	6a1a      	ldr	r2, [r3, #32]
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	691b      	ldr	r3, [r3, #16]
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d30c      	bcc.n	801aa2c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	691b      	ldr	r3, [r3, #16]
 801aa16:	218c      	movs	r1, #140	@ 0x8c
 801aa18:	187a      	adds	r2, r7, r1
 801aa1a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	6a1a      	ldr	r2, [r3, #32]
 801aa20:	187b      	adds	r3, r7, r1
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	1ad2      	subs	r2, r2, r3
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	621a      	str	r2, [r3, #32]
 801aa2a:	e01a      	b.n	801aa62 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	6a1b      	ldr	r3, [r3, #32]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d10a      	bne.n	801aa4a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801aa34:	2386      	movs	r3, #134	@ 0x86
 801aa36:	18fb      	adds	r3, r7, r3
 801aa38:	881b      	ldrh	r3, [r3, #0]
 801aa3a:	228c      	movs	r2, #140	@ 0x8c
 801aa3c:	18ba      	adds	r2, r7, r2
 801aa3e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801aa40:	68bb      	ldr	r3, [r7, #8]
 801aa42:	2224      	movs	r2, #36	@ 0x24
 801aa44:	2100      	movs	r1, #0
 801aa46:	5499      	strb	r1, [r3, r2]
 801aa48:	e00b      	b.n	801aa62 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	2224      	movs	r2, #36	@ 0x24
 801aa4e:	2100      	movs	r1, #0
 801aa50:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801aa52:	68bb      	ldr	r3, [r7, #8]
 801aa54:	6a1b      	ldr	r3, [r3, #32]
 801aa56:	228c      	movs	r2, #140	@ 0x8c
 801aa58:	18ba      	adds	r2, r7, r2
 801aa5a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aa62:	68bb      	ldr	r3, [r7, #8]
 801aa64:	785b      	ldrb	r3, [r3, #1]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d000      	beq.n	801aa6c <HAL_PCD_EP_DB_Transmit+0x2b0>
 801aa6a:	e06d      	b.n	801ab48 <HAL_PCD_EP_DB_Transmit+0x38c>
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	2250      	movs	r2, #80	@ 0x50
 801aa78:	5a9b      	ldrh	r3, [r3, r2]
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	001a      	movs	r2, r3
 801aa7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa80:	189b      	adds	r3, r3, r2
 801aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	781b      	ldrb	r3, [r3, #0]
 801aa88:	00da      	lsls	r2, r3, #3
 801aa8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa8c:	18d3      	adds	r3, r2, r3
 801aa8e:	4a29      	ldr	r2, [pc, #164]	@ (801ab34 <HAL_PCD_EP_DB_Transmit+0x378>)
 801aa90:	4694      	mov	ip, r2
 801aa92:	4463      	add	r3, ip
 801aa94:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa98:	881b      	ldrh	r3, [r3, #0]
 801aa9a:	b29b      	uxth	r3, r3
 801aa9c:	059b      	lsls	r3, r3, #22
 801aa9e:	0d9b      	lsrs	r3, r3, #22
 801aaa0:	b29a      	uxth	r2, r3
 801aaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaa4:	801a      	strh	r2, [r3, #0]
 801aaa6:	228c      	movs	r2, #140	@ 0x8c
 801aaa8:	18bb      	adds	r3, r7, r2
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2b3e      	cmp	r3, #62	@ 0x3e
 801aaae:	d91a      	bls.n	801aae6 <HAL_PCD_EP_DB_Transmit+0x32a>
 801aab0:	18bb      	adds	r3, r7, r2
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	095b      	lsrs	r3, r3, #5
 801aab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aab8:	18bb      	adds	r3, r7, r2
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	221f      	movs	r2, #31
 801aabe:	4013      	ands	r3, r2
 801aac0:	d102      	bne.n	801aac8 <HAL_PCD_EP_DB_Transmit+0x30c>
 801aac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aac4:	3b01      	subs	r3, #1
 801aac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaca:	881b      	ldrh	r3, [r3, #0]
 801aacc:	b29a      	uxth	r2, r3
 801aace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aad0:	b29b      	uxth	r3, r3
 801aad2:	029b      	lsls	r3, r3, #10
 801aad4:	b29b      	uxth	r3, r3
 801aad6:	4313      	orrs	r3, r2
 801aad8:	b29b      	uxth	r3, r3
 801aada:	4a17      	ldr	r2, [pc, #92]	@ (801ab38 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aadc:	4313      	orrs	r3, r2
 801aade:	b29a      	uxth	r2, r3
 801aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aae2:	801a      	strh	r2, [r3, #0]
 801aae4:	e04f      	b.n	801ab86 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801aae6:	238c      	movs	r3, #140	@ 0x8c
 801aae8:	18fb      	adds	r3, r7, r3
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d108      	bne.n	801ab02 <HAL_PCD_EP_DB_Transmit+0x346>
 801aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aaf2:	881b      	ldrh	r3, [r3, #0]
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	4a10      	ldr	r2, [pc, #64]	@ (801ab38 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aaf8:	4313      	orrs	r3, r2
 801aafa:	b29a      	uxth	r2, r3
 801aafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aafe:	801a      	strh	r2, [r3, #0]
 801ab00:	e041      	b.n	801ab86 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab02:	228c      	movs	r2, #140	@ 0x8c
 801ab04:	18bb      	adds	r3, r7, r2
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	085b      	lsrs	r3, r3, #1
 801ab0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab0c:	18bb      	adds	r3, r7, r2
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	2201      	movs	r2, #1
 801ab12:	4013      	ands	r3, r2
 801ab14:	d002      	beq.n	801ab1c <HAL_PCD_EP_DB_Transmit+0x360>
 801ab16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab18:	3301      	adds	r3, #1
 801ab1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab1e:	881b      	ldrh	r3, [r3, #0]
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	029b      	lsls	r3, r3, #10
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	4313      	orrs	r3, r2
 801ab2c:	b29a      	uxth	r2, r3
 801ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab30:	801a      	strh	r2, [r3, #0]
 801ab32:	e028      	b.n	801ab86 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab34:	00000402 	.word	0x00000402
 801ab38:	ffff8000 	.word	0xffff8000
 801ab3c:	00000406 	.word	0x00000406
 801ab40:	ffff8f8f 	.word	0xffff8f8f
 801ab44:	ffffc080 	.word	0xffffc080
 801ab48:	68bb      	ldr	r3, [r7, #8]
 801ab4a:	785b      	ldrb	r3, [r3, #1]
 801ab4c:	2b01      	cmp	r3, #1
 801ab4e:	d11a      	bne.n	801ab86 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	2250      	movs	r2, #80	@ 0x50
 801ab5c:	5a9b      	ldrh	r3, [r3, r2]
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	001a      	movs	r2, r3
 801ab62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab64:	189b      	adds	r3, r3, r2
 801ab66:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	781b      	ldrb	r3, [r3, #0]
 801ab6c:	00da      	lsls	r2, r3, #3
 801ab6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab70:	18d3      	adds	r3, r2, r3
 801ab72:	4adb      	ldr	r2, [pc, #876]	@ (801aee0 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ab74:	4694      	mov	ip, r2
 801ab76:	4463      	add	r3, ip
 801ab78:	643b      	str	r3, [r7, #64]	@ 0x40
 801ab7a:	238c      	movs	r3, #140	@ 0x8c
 801ab7c:	18fb      	adds	r3, r7, r3
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	b29a      	uxth	r2, r3
 801ab82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	6818      	ldr	r0, [r3, #0]
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	6959      	ldr	r1, [r3, #20]
 801ab8e:	68bb      	ldr	r3, [r7, #8]
 801ab90:	891a      	ldrh	r2, [r3, #8]
 801ab92:	238c      	movs	r3, #140	@ 0x8c
 801ab94:	18fb      	adds	r3, r7, r3
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	b29b      	uxth	r3, r3
 801ab9a:	f006 fc83 	bl	80214a4 <USB_WritePMA>
 801ab9e:	e1ea      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2250      	movs	r2, #80	@ 0x50
 801aba6:	5a9b      	ldrh	r3, [r3, r2]
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	001a      	movs	r2, r3
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	781b      	ldrb	r3, [r3, #0]
 801abb0:	00db      	lsls	r3, r3, #3
 801abb2:	18d2      	adds	r2, r2, r3
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	18d3      	adds	r3, r2, r3
 801abba:	4aca      	ldr	r2, [pc, #808]	@ (801aee4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801abbc:	4694      	mov	ip, r2
 801abbe:	4463      	add	r3, ip
 801abc0:	881a      	ldrh	r2, [r3, #0]
 801abc2:	2186      	movs	r1, #134	@ 0x86
 801abc4:	187b      	adds	r3, r7, r1
 801abc6:	0592      	lsls	r2, r2, #22
 801abc8:	0d92      	lsrs	r2, r2, #22
 801abca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801abcc:	68bb      	ldr	r3, [r7, #8]
 801abce:	699a      	ldr	r2, [r3, #24]
 801abd0:	187b      	adds	r3, r7, r1
 801abd2:	881b      	ldrh	r3, [r3, #0]
 801abd4:	429a      	cmp	r2, r3
 801abd6:	d307      	bcc.n	801abe8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	699a      	ldr	r2, [r3, #24]
 801abdc:	187b      	adds	r3, r7, r1
 801abde:	881b      	ldrh	r3, [r3, #0]
 801abe0:	1ad2      	subs	r2, r2, r3
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	619a      	str	r2, [r3, #24]
 801abe6:	e002      	b.n	801abee <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	2200      	movs	r2, #0
 801abec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	699b      	ldr	r3, [r3, #24]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d000      	beq.n	801abf8 <HAL_PCD_EP_DB_Transmit+0x43c>
 801abf6:	e0bb      	b.n	801ad70 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	785b      	ldrb	r3, [r3, #1]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d125      	bne.n	801ac4c <HAL_PCD_EP_DB_Transmit+0x490>
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	2250      	movs	r2, #80	@ 0x50
 801ac0c:	5a9b      	ldrh	r3, [r3, r2]
 801ac0e:	b29b      	uxth	r3, r3
 801ac10:	001a      	movs	r2, r3
 801ac12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac14:	189b      	adds	r3, r3, r2
 801ac16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	781b      	ldrb	r3, [r3, #0]
 801ac1c:	00da      	lsls	r2, r3, #3
 801ac1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac20:	18d3      	adds	r3, r2, r3
 801ac22:	4aaf      	ldr	r2, [pc, #700]	@ (801aee0 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac24:	4694      	mov	ip, r2
 801ac26:	4463      	add	r3, ip
 801ac28:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ac2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac2c:	881b      	ldrh	r3, [r3, #0]
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	059b      	lsls	r3, r3, #22
 801ac32:	0d9b      	lsrs	r3, r3, #22
 801ac34:	b29a      	uxth	r2, r3
 801ac36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac38:	801a      	strh	r2, [r3, #0]
 801ac3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac3c:	881b      	ldrh	r3, [r3, #0]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	4aa9      	ldr	r2, [pc, #676]	@ (801aee8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ac42:	4313      	orrs	r3, r2
 801ac44:	b29a      	uxth	r2, r3
 801ac46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac48:	801a      	strh	r2, [r3, #0]
 801ac4a:	e01b      	b.n	801ac84 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ac4c:	68bb      	ldr	r3, [r7, #8]
 801ac4e:	785b      	ldrb	r3, [r3, #1]
 801ac50:	2b01      	cmp	r3, #1
 801ac52:	d117      	bne.n	801ac84 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	2250      	movs	r2, #80	@ 0x50
 801ac60:	5a9b      	ldrh	r3, [r3, r2]
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	001a      	movs	r2, r3
 801ac66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ac68:	189b      	adds	r3, r3, r2
 801ac6a:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	00da      	lsls	r2, r3, #3
 801ac72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ac74:	18d3      	adds	r3, r2, r3
 801ac76:	4a9a      	ldr	r2, [pc, #616]	@ (801aee0 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac78:	4694      	mov	ip, r2
 801ac7a:	4463      	add	r3, ip
 801ac7c:	663b      	str	r3, [r7, #96]	@ 0x60
 801ac7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ac80:	2200      	movs	r2, #0
 801ac82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	677b      	str	r3, [r7, #116]	@ 0x74
 801ac8a:	68bb      	ldr	r3, [r7, #8]
 801ac8c:	785b      	ldrb	r3, [r3, #1]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d12b      	bne.n	801acea <HAL_PCD_EP_DB_Transmit+0x52e>
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	2250      	movs	r2, #80	@ 0x50
 801ac9e:	5a9b      	ldrh	r3, [r3, r2]
 801aca0:	b29b      	uxth	r3, r3
 801aca2:	001a      	movs	r2, r3
 801aca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aca6:	189b      	adds	r3, r3, r2
 801aca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	00da      	lsls	r2, r3, #3
 801acb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acb2:	18d3      	adds	r3, r2, r3
 801acb4:	4a8b      	ldr	r2, [pc, #556]	@ (801aee4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801acb6:	4694      	mov	ip, r2
 801acb8:	4463      	add	r3, ip
 801acba:	2180      	movs	r1, #128	@ 0x80
 801acbc:	187a      	adds	r2, r7, r1
 801acbe:	6013      	str	r3, [r2, #0]
 801acc0:	187b      	adds	r3, r7, r1
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	881b      	ldrh	r3, [r3, #0]
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	059b      	lsls	r3, r3, #22
 801acca:	0d9b      	lsrs	r3, r3, #22
 801accc:	b29a      	uxth	r2, r3
 801acce:	187b      	adds	r3, r7, r1
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	801a      	strh	r2, [r3, #0]
 801acd4:	187b      	adds	r3, r7, r1
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	881b      	ldrh	r3, [r3, #0]
 801acda:	b29b      	uxth	r3, r3
 801acdc:	4a82      	ldr	r2, [pc, #520]	@ (801aee8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801acde:	4313      	orrs	r3, r2
 801ace0:	b29a      	uxth	r2, r3
 801ace2:	187b      	adds	r3, r7, r1
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	801a      	strh	r2, [r3, #0]
 801ace8:	e018      	b.n	801ad1c <HAL_PCD_EP_DB_Transmit+0x560>
 801acea:	68bb      	ldr	r3, [r7, #8]
 801acec:	785b      	ldrb	r3, [r3, #1]
 801acee:	2b01      	cmp	r3, #1
 801acf0:	d114      	bne.n	801ad1c <HAL_PCD_EP_DB_Transmit+0x560>
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	2250      	movs	r2, #80	@ 0x50
 801acf8:	5a9b      	ldrh	r3, [r3, r2]
 801acfa:	b29b      	uxth	r3, r3
 801acfc:	001a      	movs	r2, r3
 801acfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad00:	189b      	adds	r3, r3, r2
 801ad02:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	781b      	ldrb	r3, [r3, #0]
 801ad08:	00da      	lsls	r2, r3, #3
 801ad0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad0c:	18d3      	adds	r3, r2, r3
 801ad0e:	4a75      	ldr	r2, [pc, #468]	@ (801aee4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad10:	4694      	mov	ip, r2
 801ad12:	4463      	add	r3, ip
 801ad14:	673b      	str	r3, [r7, #112]	@ 0x70
 801ad16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ad18:	2200      	movs	r2, #0
 801ad1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ad1c:	68bb      	ldr	r3, [r7, #8]
 801ad1e:	781a      	ldrb	r2, [r3, #0]
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	0011      	movs	r1, r2
 801ad24:	0018      	movs	r0, r3
 801ad26:	f008 fc4f 	bl	80235c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ad2a:	1dbb      	adds	r3, r7, #6
 801ad2c:	881a      	ldrh	r2, [r3, #0]
 801ad2e:	2380      	movs	r3, #128	@ 0x80
 801ad30:	01db      	lsls	r3, r3, #7
 801ad32:	4013      	ands	r3, r2
 801ad34:	d000      	beq.n	801ad38 <HAL_PCD_EP_DB_Transmit+0x57c>
 801ad36:	e11e      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	001a      	movs	r2, r3
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	781b      	ldrb	r3, [r3, #0]
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	18d3      	adds	r3, r2, r3
 801ad46:	881b      	ldrh	r3, [r3, #0]
 801ad48:	b29a      	uxth	r2, r3
 801ad4a:	2088      	movs	r0, #136	@ 0x88
 801ad4c:	183b      	adds	r3, r7, r0
 801ad4e:	4967      	ldr	r1, [pc, #412]	@ (801aeec <HAL_PCD_EP_DB_Transmit+0x730>)
 801ad50:	400a      	ands	r2, r1
 801ad52:	801a      	strh	r2, [r3, #0]
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	001a      	movs	r2, r3
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	781b      	ldrb	r3, [r3, #0]
 801ad5e:	009b      	lsls	r3, r3, #2
 801ad60:	18d3      	adds	r3, r2, r3
 801ad62:	183a      	adds	r2, r7, r0
 801ad64:	8812      	ldrh	r2, [r2, #0]
 801ad66:	4962      	ldr	r1, [pc, #392]	@ (801aef0 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ad68:	430a      	orrs	r2, r1
 801ad6a:	b292      	uxth	r2, r2
 801ad6c:	801a      	strh	r2, [r3, #0]
 801ad6e:	e102      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ad70:	1dbb      	adds	r3, r7, #6
 801ad72:	881a      	ldrh	r2, [r3, #0]
 801ad74:	2380      	movs	r3, #128	@ 0x80
 801ad76:	01db      	lsls	r3, r3, #7
 801ad78:	4013      	ands	r3, r2
 801ad7a:	d11a      	bne.n	801adb2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	001a      	movs	r2, r3
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	18d3      	adds	r3, r2, r3
 801ad8a:	881b      	ldrh	r3, [r3, #0]
 801ad8c:	b29a      	uxth	r2, r3
 801ad8e:	204e      	movs	r0, #78	@ 0x4e
 801ad90:	183b      	adds	r3, r7, r0
 801ad92:	4956      	ldr	r1, [pc, #344]	@ (801aeec <HAL_PCD_EP_DB_Transmit+0x730>)
 801ad94:	400a      	ands	r2, r1
 801ad96:	801a      	strh	r2, [r3, #0]
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	001a      	movs	r2, r3
 801ad9e:	68bb      	ldr	r3, [r7, #8]
 801ada0:	781b      	ldrb	r3, [r3, #0]
 801ada2:	009b      	lsls	r3, r3, #2
 801ada4:	18d3      	adds	r3, r2, r3
 801ada6:	183a      	adds	r2, r7, r0
 801ada8:	8812      	ldrh	r2, [r2, #0]
 801adaa:	4951      	ldr	r1, [pc, #324]	@ (801aef0 <HAL_PCD_EP_DB_Transmit+0x734>)
 801adac:	430a      	orrs	r2, r1
 801adae:	b292      	uxth	r2, r2
 801adb0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801adb2:	68bb      	ldr	r3, [r7, #8]
 801adb4:	2224      	movs	r2, #36	@ 0x24
 801adb6:	5c9b      	ldrb	r3, [r3, r2]
 801adb8:	2b01      	cmp	r3, #1
 801adba:	d000      	beq.n	801adbe <HAL_PCD_EP_DB_Transmit+0x602>
 801adbc:	e0db      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801adbe:	68bb      	ldr	r3, [r7, #8]
 801adc0:	695a      	ldr	r2, [r3, #20]
 801adc2:	2186      	movs	r1, #134	@ 0x86
 801adc4:	187b      	adds	r3, r7, r1
 801adc6:	881b      	ldrh	r3, [r3, #0]
 801adc8:	18d2      	adds	r2, r2, r3
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	69da      	ldr	r2, [r3, #28]
 801add2:	187b      	adds	r3, r7, r1
 801add4:	881b      	ldrh	r3, [r3, #0]
 801add6:	18d2      	adds	r2, r2, r3
 801add8:	68bb      	ldr	r3, [r7, #8]
 801adda:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	6a1a      	ldr	r2, [r3, #32]
 801ade0:	68bb      	ldr	r3, [r7, #8]
 801ade2:	691b      	ldr	r3, [r3, #16]
 801ade4:	429a      	cmp	r2, r3
 801ade6:	d30c      	bcc.n	801ae02 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801ade8:	68bb      	ldr	r3, [r7, #8]
 801adea:	691b      	ldr	r3, [r3, #16]
 801adec:	218c      	movs	r1, #140	@ 0x8c
 801adee:	187a      	adds	r2, r7, r1
 801adf0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801adf2:	68bb      	ldr	r3, [r7, #8]
 801adf4:	6a1a      	ldr	r2, [r3, #32]
 801adf6:	187b      	adds	r3, r7, r1
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	1ad2      	subs	r2, r2, r3
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	621a      	str	r2, [r3, #32]
 801ae00:	e01a      	b.n	801ae38 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801ae02:	68bb      	ldr	r3, [r7, #8]
 801ae04:	6a1b      	ldr	r3, [r3, #32]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d10a      	bne.n	801ae20 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801ae0a:	2386      	movs	r3, #134	@ 0x86
 801ae0c:	18fb      	adds	r3, r7, r3
 801ae0e:	881b      	ldrh	r3, [r3, #0]
 801ae10:	228c      	movs	r2, #140	@ 0x8c
 801ae12:	18ba      	adds	r2, r7, r2
 801ae14:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ae16:	68bb      	ldr	r3, [r7, #8]
 801ae18:	2224      	movs	r2, #36	@ 0x24
 801ae1a:	2100      	movs	r1, #0
 801ae1c:	5499      	strb	r1, [r3, r2]
 801ae1e:	e00b      	b.n	801ae38 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	6a1b      	ldr	r3, [r3, #32]
 801ae24:	228c      	movs	r2, #140	@ 0x8c
 801ae26:	18ba      	adds	r2, r7, r2
 801ae28:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ae2a:	68bb      	ldr	r3, [r7, #8]
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801ae30:	68bb      	ldr	r3, [r7, #8]
 801ae32:	2224      	movs	r2, #36	@ 0x24
 801ae34:	2100      	movs	r1, #0
 801ae36:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	657b      	str	r3, [r7, #84]	@ 0x54
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	785b      	ldrb	r3, [r3, #1]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d000      	beq.n	801ae48 <HAL_PCD_EP_DB_Transmit+0x68c>
 801ae46:	e06e      	b.n	801af26 <HAL_PCD_EP_DB_Transmit+0x76a>
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	2250      	movs	r2, #80	@ 0x50
 801ae54:	5a9b      	ldrh	r3, [r3, r2]
 801ae56:	b29b      	uxth	r3, r3
 801ae58:	001a      	movs	r2, r3
 801ae5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ae5c:	189b      	adds	r3, r3, r2
 801ae5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ae60:	68bb      	ldr	r3, [r7, #8]
 801ae62:	781b      	ldrb	r3, [r3, #0]
 801ae64:	00da      	lsls	r2, r3, #3
 801ae66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ae68:	18d3      	adds	r3, r2, r3
 801ae6a:	4a1e      	ldr	r2, [pc, #120]	@ (801aee4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801ae6c:	4694      	mov	ip, r2
 801ae6e:	4463      	add	r3, ip
 801ae70:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ae72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae74:	881b      	ldrh	r3, [r3, #0]
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	059b      	lsls	r3, r3, #22
 801ae7a:	0d9b      	lsrs	r3, r3, #22
 801ae7c:	b29a      	uxth	r2, r3
 801ae7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae80:	801a      	strh	r2, [r3, #0]
 801ae82:	228c      	movs	r2, #140	@ 0x8c
 801ae84:	18bb      	adds	r3, r7, r2
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	2b3e      	cmp	r3, #62	@ 0x3e
 801ae8a:	d91a      	bls.n	801aec2 <HAL_PCD_EP_DB_Transmit+0x706>
 801ae8c:	18bb      	adds	r3, r7, r2
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	095b      	lsrs	r3, r3, #5
 801ae92:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ae94:	18bb      	adds	r3, r7, r2
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	221f      	movs	r2, #31
 801ae9a:	4013      	ands	r3, r2
 801ae9c:	d102      	bne.n	801aea4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801ae9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aea0:	3b01      	subs	r3, #1
 801aea2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aea6:	881b      	ldrh	r3, [r3, #0]
 801aea8:	b29a      	uxth	r2, r3
 801aeaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	029b      	lsls	r3, r3, #10
 801aeb0:	b29b      	uxth	r3, r3
 801aeb2:	4313      	orrs	r3, r2
 801aeb4:	b29b      	uxth	r3, r3
 801aeb6:	4a0c      	ldr	r2, [pc, #48]	@ (801aee8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aeb8:	4313      	orrs	r3, r2
 801aeba:	b29a      	uxth	r2, r3
 801aebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aebe:	801a      	strh	r2, [r3, #0]
 801aec0:	e04d      	b.n	801af5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aec2:	238c      	movs	r3, #140	@ 0x8c
 801aec4:	18fb      	adds	r3, r7, r3
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d113      	bne.n	801aef4 <HAL_PCD_EP_DB_Transmit+0x738>
 801aecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aece:	881b      	ldrh	r3, [r3, #0]
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	4a05      	ldr	r2, [pc, #20]	@ (801aee8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aed4:	4313      	orrs	r3, r2
 801aed6:	b29a      	uxth	r2, r3
 801aed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aeda:	801a      	strh	r2, [r3, #0]
 801aedc:	e03f      	b.n	801af5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aede:	46c0      	nop			@ (mov r8, r8)
 801aee0:	00000402 	.word	0x00000402
 801aee4:	00000406 	.word	0x00000406
 801aee8:	ffff8000 	.word	0xffff8000
 801aeec:	ffff8f8f 	.word	0xffff8f8f
 801aef0:	ffffc080 	.word	0xffffc080
 801aef4:	228c      	movs	r2, #140	@ 0x8c
 801aef6:	18bb      	adds	r3, r7, r2
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	085b      	lsrs	r3, r3, #1
 801aefc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aefe:	18bb      	adds	r3, r7, r2
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	2201      	movs	r2, #1
 801af04:	4013      	ands	r3, r2
 801af06:	d002      	beq.n	801af0e <HAL_PCD_EP_DB_Transmit+0x752>
 801af08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af0a:	3301      	adds	r3, #1
 801af0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af10:	881b      	ldrh	r3, [r3, #0]
 801af12:	b29a      	uxth	r2, r3
 801af14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af16:	b29b      	uxth	r3, r3
 801af18:	029b      	lsls	r3, r3, #10
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	4313      	orrs	r3, r2
 801af1e:	b29a      	uxth	r2, r3
 801af20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af22:	801a      	strh	r2, [r3, #0]
 801af24:	e01b      	b.n	801af5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af26:	68bb      	ldr	r3, [r7, #8]
 801af28:	785b      	ldrb	r3, [r3, #1]
 801af2a:	2b01      	cmp	r3, #1
 801af2c:	d117      	bne.n	801af5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	2250      	movs	r2, #80	@ 0x50
 801af34:	5a9b      	ldrh	r3, [r3, r2]
 801af36:	b29b      	uxth	r3, r3
 801af38:	001a      	movs	r2, r3
 801af3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af3c:	189b      	adds	r3, r3, r2
 801af3e:	657b      	str	r3, [r7, #84]	@ 0x54
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	00da      	lsls	r2, r3, #3
 801af46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af48:	18d3      	adds	r3, r2, r3
 801af4a:	4a21      	ldr	r2, [pc, #132]	@ (801afd0 <HAL_PCD_EP_DB_Transmit+0x814>)
 801af4c:	4694      	mov	ip, r2
 801af4e:	4463      	add	r3, ip
 801af50:	653b      	str	r3, [r7, #80]	@ 0x50
 801af52:	238c      	movs	r3, #140	@ 0x8c
 801af54:	18fb      	adds	r3, r7, r3
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	b29a      	uxth	r2, r3
 801af5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801af5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	6818      	ldr	r0, [r3, #0]
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	6959      	ldr	r1, [r3, #20]
 801af66:	68bb      	ldr	r3, [r7, #8]
 801af68:	895a      	ldrh	r2, [r3, #10]
 801af6a:	238c      	movs	r3, #140	@ 0x8c
 801af6c:	18fb      	adds	r3, r7, r3
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	b29b      	uxth	r3, r3
 801af72:	f006 fa97 	bl	80214a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	001a      	movs	r2, r3
 801af7c:	68bb      	ldr	r3, [r7, #8]
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	009b      	lsls	r3, r3, #2
 801af82:	18d3      	adds	r3, r2, r3
 801af84:	881b      	ldrh	r3, [r3, #0]
 801af86:	b29a      	uxth	r2, r3
 801af88:	2014      	movs	r0, #20
 801af8a:	183b      	adds	r3, r7, r0
 801af8c:	4911      	ldr	r1, [pc, #68]	@ (801afd4 <HAL_PCD_EP_DB_Transmit+0x818>)
 801af8e:	400a      	ands	r2, r1
 801af90:	801a      	strh	r2, [r3, #0]
 801af92:	183b      	adds	r3, r7, r0
 801af94:	183a      	adds	r2, r7, r0
 801af96:	8812      	ldrh	r2, [r2, #0]
 801af98:	2110      	movs	r1, #16
 801af9a:	404a      	eors	r2, r1
 801af9c:	801a      	strh	r2, [r3, #0]
 801af9e:	183b      	adds	r3, r7, r0
 801afa0:	183a      	adds	r2, r7, r0
 801afa2:	8812      	ldrh	r2, [r2, #0]
 801afa4:	2120      	movs	r1, #32
 801afa6:	404a      	eors	r2, r1
 801afa8:	801a      	strh	r2, [r3, #0]
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	001a      	movs	r2, r3
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	781b      	ldrb	r3, [r3, #0]
 801afb4:	009b      	lsls	r3, r3, #2
 801afb6:	18d3      	adds	r3, r2, r3
 801afb8:	183a      	adds	r2, r7, r0
 801afba:	8812      	ldrh	r2, [r2, #0]
 801afbc:	4906      	ldr	r1, [pc, #24]	@ (801afd8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801afbe:	430a      	orrs	r2, r1
 801afc0:	b292      	uxth	r2, r2
 801afc2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801afc4:	2300      	movs	r3, #0
}
 801afc6:	0018      	movs	r0, r3
 801afc8:	46bd      	mov	sp, r7
 801afca:	b024      	add	sp, #144	@ 0x90
 801afcc:	bd80      	pop	{r7, pc}
 801afce:	46c0      	nop			@ (mov r8, r8)
 801afd0:	00000406 	.word	0x00000406
 801afd4:	ffff8fbf 	.word	0xffff8fbf
 801afd8:	ffff8080 	.word	0xffff8080

0801afdc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801afdc:	b590      	push	{r4, r7, lr}
 801afde:	b087      	sub	sp, #28
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	60f8      	str	r0, [r7, #12]
 801afe4:	0008      	movs	r0, r1
 801afe6:	0011      	movs	r1, r2
 801afe8:	607b      	str	r3, [r7, #4]
 801afea:	240a      	movs	r4, #10
 801afec:	193b      	adds	r3, r7, r4
 801afee:	1c02      	adds	r2, r0, #0
 801aff0:	801a      	strh	r2, [r3, #0]
 801aff2:	2308      	movs	r3, #8
 801aff4:	18fb      	adds	r3, r7, r3
 801aff6:	1c0a      	adds	r2, r1, #0
 801aff8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801affa:	0021      	movs	r1, r4
 801affc:	187b      	adds	r3, r7, r1
 801affe:	881b      	ldrh	r3, [r3, #0]
 801b000:	2280      	movs	r2, #128	@ 0x80
 801b002:	4013      	ands	r3, r2
 801b004:	b29b      	uxth	r3, r3
 801b006:	2b00      	cmp	r3, #0
 801b008:	d00c      	beq.n	801b024 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b00a:	187b      	adds	r3, r7, r1
 801b00c:	881b      	ldrh	r3, [r3, #0]
 801b00e:	2207      	movs	r2, #7
 801b010:	4013      	ands	r3, r2
 801b012:	1c5a      	adds	r2, r3, #1
 801b014:	0013      	movs	r3, r2
 801b016:	009b      	lsls	r3, r3, #2
 801b018:	189b      	adds	r3, r3, r2
 801b01a:	00db      	lsls	r3, r3, #3
 801b01c:	68fa      	ldr	r2, [r7, #12]
 801b01e:	18d3      	adds	r3, r2, r3
 801b020:	617b      	str	r3, [r7, #20]
 801b022:	e00b      	b.n	801b03c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b024:	230a      	movs	r3, #10
 801b026:	18fb      	adds	r3, r7, r3
 801b028:	881a      	ldrh	r2, [r3, #0]
 801b02a:	0013      	movs	r3, r2
 801b02c:	009b      	lsls	r3, r3, #2
 801b02e:	189b      	adds	r3, r3, r2
 801b030:	00db      	lsls	r3, r3, #3
 801b032:	3369      	adds	r3, #105	@ 0x69
 801b034:	33ff      	adds	r3, #255	@ 0xff
 801b036:	68fa      	ldr	r2, [r7, #12]
 801b038:	18d3      	adds	r3, r2, r3
 801b03a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b03c:	2308      	movs	r3, #8
 801b03e:	18fb      	adds	r3, r7, r3
 801b040:	881b      	ldrh	r3, [r3, #0]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d107      	bne.n	801b056 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b046:	697b      	ldr	r3, [r7, #20]
 801b048:	2200      	movs	r2, #0
 801b04a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	b29a      	uxth	r2, r3
 801b050:	697b      	ldr	r3, [r7, #20]
 801b052:	80da      	strh	r2, [r3, #6]
 801b054:	e00b      	b.n	801b06e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b056:	697b      	ldr	r3, [r7, #20]
 801b058:	2201      	movs	r2, #1
 801b05a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	b29a      	uxth	r2, r3
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	0c1b      	lsrs	r3, r3, #16
 801b068:	b29a      	uxth	r2, r3
 801b06a:	697b      	ldr	r3, [r7, #20]
 801b06c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b06e:	2300      	movs	r3, #0
}
 801b070:	0018      	movs	r0, r3
 801b072:	46bd      	mov	sp, r7
 801b074:	b007      	add	sp, #28
 801b076:	bd90      	pop	{r4, r7, pc}

0801b078 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b084      	sub	sp, #16
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b086:	687a      	ldr	r2, [r7, #4]
 801b088:	23ba      	movs	r3, #186	@ 0xba
 801b08a:	009b      	lsls	r3, r3, #2
 801b08c:	2101      	movs	r1, #1
 801b08e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	23b8      	movs	r3, #184	@ 0xb8
 801b094:	009b      	lsls	r3, r3, #2
 801b096:	2100      	movs	r1, #0
 801b098:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	2254      	movs	r2, #84	@ 0x54
 801b09e:	5a9b      	ldrh	r3, [r3, r2]
 801b0a0:	b29b      	uxth	r3, r3
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	4313      	orrs	r3, r2
 801b0a6:	b299      	uxth	r1, r3
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	2254      	movs	r2, #84	@ 0x54
 801b0ac:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	2254      	movs	r2, #84	@ 0x54
 801b0b2:	5a9b      	ldrh	r3, [r3, r2]
 801b0b4:	b29b      	uxth	r3, r3
 801b0b6:	2202      	movs	r2, #2
 801b0b8:	4313      	orrs	r3, r2
 801b0ba:	b299      	uxth	r1, r3
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	2254      	movs	r2, #84	@ 0x54
 801b0c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b0c2:	2300      	movs	r3, #0
}
 801b0c4:	0018      	movs	r0, r3
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	b004      	add	sp, #16
 801b0ca:	bd80      	pop	{r7, pc}

0801b0cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b082      	sub	sp, #8
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	000a      	movs	r2, r1
 801b0d6:	1cfb      	adds	r3, r7, #3
 801b0d8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b0da:	46c0      	nop			@ (mov r8, r8)
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	b002      	add	sp, #8
 801b0e0:	bd80      	pop	{r7, pc}
	...

0801b0e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b0e8:	4b04      	ldr	r3, [pc, #16]	@ (801b0fc <HAL_PWR_EnableBkUpAccess+0x18>)
 801b0ea:	681a      	ldr	r2, [r3, #0]
 801b0ec:	4b03      	ldr	r3, [pc, #12]	@ (801b0fc <HAL_PWR_EnableBkUpAccess+0x18>)
 801b0ee:	2180      	movs	r1, #128	@ 0x80
 801b0f0:	0049      	lsls	r1, r1, #1
 801b0f2:	430a      	orrs	r2, r1
 801b0f4:	601a      	str	r2, [r3, #0]
}
 801b0f6:	46c0      	nop			@ (mov r8, r8)
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	40007000 	.word	0x40007000

0801b100 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b100:	b580      	push	{r7, lr}
 801b102:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b104:	4b04      	ldr	r3, [pc, #16]	@ (801b118 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b106:	681a      	ldr	r2, [r3, #0]
 801b108:	4b03      	ldr	r3, [pc, #12]	@ (801b118 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b10a:	4904      	ldr	r1, [pc, #16]	@ (801b11c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b10c:	400a      	ands	r2, r1
 801b10e:	601a      	str	r2, [r3, #0]
}
 801b110:	46c0      	nop			@ (mov r8, r8)
 801b112:	46bd      	mov	sp, r7
 801b114:	bd80      	pop	{r7, pc}
 801b116:	46c0      	nop			@ (mov r8, r8)
 801b118:	40007000 	.word	0x40007000
 801b11c:	fffffeff 	.word	0xfffffeff

0801b120 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b086      	sub	sp, #24
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
 801b128:	000a      	movs	r2, r1
 801b12a:	1cfb      	adds	r3, r7, #3
 801b12c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b12e:	2300      	movs	r3, #0
 801b130:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b132:	4b25      	ldr	r3, [pc, #148]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b134:	681a      	ldr	r2, [r3, #0]
 801b136:	2380      	movs	r3, #128	@ 0x80
 801b138:	009b      	lsls	r3, r3, #2
 801b13a:	4013      	ands	r3, r2
 801b13c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b13e:	4b23      	ldr	r3, [pc, #140]	@ (801b1cc <HAL_PWR_EnterSTOPMode+0xac>)
 801b140:	6a1b      	ldr	r3, [r3, #32]
 801b142:	2201      	movs	r2, #1
 801b144:	4013      	ands	r3, r2
 801b146:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b148:	693b      	ldr	r3, [r7, #16]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d008      	beq.n	801b160 <HAL_PWR_EnterSTOPMode+0x40>
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d005      	beq.n	801b160 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b154:	4b1c      	ldr	r3, [pc, #112]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b156:	681a      	ldr	r2, [r3, #0]
 801b158:	4b1b      	ldr	r3, [pc, #108]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b15a:	491d      	ldr	r1, [pc, #116]	@ (801b1d0 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b15c:	400a      	ands	r2, r1
 801b15e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b160:	4b19      	ldr	r3, [pc, #100]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b166:	697b      	ldr	r3, [r7, #20]
 801b168:	2203      	movs	r2, #3
 801b16a:	4393      	bics	r3, r2
 801b16c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b16e:	697a      	ldr	r2, [r7, #20]
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	4313      	orrs	r3, r2
 801b174:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b176:	4b14      	ldr	r3, [pc, #80]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b178:	697a      	ldr	r2, [r7, #20]
 801b17a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b17c:	4b15      	ldr	r3, [pc, #84]	@ (801b1d4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b17e:	691a      	ldr	r2, [r3, #16]
 801b180:	4b14      	ldr	r3, [pc, #80]	@ (801b1d4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b182:	2104      	movs	r1, #4
 801b184:	430a      	orrs	r2, r1
 801b186:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b188:	1cfb      	adds	r3, r7, #3
 801b18a:	781b      	ldrb	r3, [r3, #0]
 801b18c:	2b01      	cmp	r3, #1
 801b18e:	d101      	bne.n	801b194 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b190:	bf30      	wfi
 801b192:	e002      	b.n	801b19a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b194:	bf40      	sev
    __WFE();
 801b196:	bf20      	wfe
    __WFE();
 801b198:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b19a:	4b0e      	ldr	r3, [pc, #56]	@ (801b1d4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b19c:	691a      	ldr	r2, [r3, #16]
 801b19e:	4b0d      	ldr	r3, [pc, #52]	@ (801b1d4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801b1a0:	2104      	movs	r1, #4
 801b1a2:	438a      	bics	r2, r1
 801b1a4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b1a6:	693b      	ldr	r3, [r7, #16]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d009      	beq.n	801b1c0 <HAL_PWR_EnterSTOPMode+0xa0>
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d006      	beq.n	801b1c0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b1b2:	4b05      	ldr	r3, [pc, #20]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1b4:	681a      	ldr	r2, [r3, #0]
 801b1b6:	4b04      	ldr	r3, [pc, #16]	@ (801b1c8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1b8:	2180      	movs	r1, #128	@ 0x80
 801b1ba:	0089      	lsls	r1, r1, #2
 801b1bc:	430a      	orrs	r2, r1
 801b1be:	601a      	str	r2, [r3, #0]
  }
}
 801b1c0:	46c0      	nop			@ (mov r8, r8)
 801b1c2:	46bd      	mov	sp, r7
 801b1c4:	b006      	add	sp, #24
 801b1c6:	bd80      	pop	{r7, pc}
 801b1c8:	40007000 	.word	0x40007000
 801b1cc:	40010000 	.word	0x40010000
 801b1d0:	fffffdff 	.word	0xfffffdff
 801b1d4:	e000ed00 	.word	0xe000ed00

0801b1d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b1d8:	b5b0      	push	{r4, r5, r7, lr}
 801b1da:	b08a      	sub	sp, #40	@ 0x28
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d102      	bne.n	801b1ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b1e6:	2301      	movs	r3, #1
 801b1e8:	f000 fbbf 	bl	801b96a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b1ec:	4bc9      	ldr	r3, [pc, #804]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b1ee:	68db      	ldr	r3, [r3, #12]
 801b1f0:	220c      	movs	r2, #12
 801b1f2:	4013      	ands	r3, r2
 801b1f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b1f6:	4bc7      	ldr	r3, [pc, #796]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b1f8:	68da      	ldr	r2, [r3, #12]
 801b1fa:	2380      	movs	r3, #128	@ 0x80
 801b1fc:	025b      	lsls	r3, r3, #9
 801b1fe:	4013      	ands	r3, r2
 801b200:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	2201      	movs	r2, #1
 801b208:	4013      	ands	r3, r2
 801b20a:	d100      	bne.n	801b20e <HAL_RCC_OscConfig+0x36>
 801b20c:	e07e      	b.n	801b30c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b20e:	69fb      	ldr	r3, [r7, #28]
 801b210:	2b08      	cmp	r3, #8
 801b212:	d007      	beq.n	801b224 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b214:	69fb      	ldr	r3, [r7, #28]
 801b216:	2b0c      	cmp	r3, #12
 801b218:	d112      	bne.n	801b240 <HAL_RCC_OscConfig+0x68>
 801b21a:	69ba      	ldr	r2, [r7, #24]
 801b21c:	2380      	movs	r3, #128	@ 0x80
 801b21e:	025b      	lsls	r3, r3, #9
 801b220:	429a      	cmp	r2, r3
 801b222:	d10d      	bne.n	801b240 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b224:	4bbb      	ldr	r3, [pc, #748]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	2380      	movs	r3, #128	@ 0x80
 801b22a:	029b      	lsls	r3, r3, #10
 801b22c:	4013      	ands	r3, r2
 801b22e:	d100      	bne.n	801b232 <HAL_RCC_OscConfig+0x5a>
 801b230:	e06b      	b.n	801b30a <HAL_RCC_OscConfig+0x132>
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	685b      	ldr	r3, [r3, #4]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d167      	bne.n	801b30a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b23a:	2301      	movs	r3, #1
 801b23c:	f000 fb95 	bl	801b96a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	685a      	ldr	r2, [r3, #4]
 801b244:	2380      	movs	r3, #128	@ 0x80
 801b246:	025b      	lsls	r3, r3, #9
 801b248:	429a      	cmp	r2, r3
 801b24a:	d107      	bne.n	801b25c <HAL_RCC_OscConfig+0x84>
 801b24c:	4bb1      	ldr	r3, [pc, #708]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b24e:	681a      	ldr	r2, [r3, #0]
 801b250:	4bb0      	ldr	r3, [pc, #704]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b252:	2180      	movs	r1, #128	@ 0x80
 801b254:	0249      	lsls	r1, r1, #9
 801b256:	430a      	orrs	r2, r1
 801b258:	601a      	str	r2, [r3, #0]
 801b25a:	e027      	b.n	801b2ac <HAL_RCC_OscConfig+0xd4>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	685a      	ldr	r2, [r3, #4]
 801b260:	23a0      	movs	r3, #160	@ 0xa0
 801b262:	02db      	lsls	r3, r3, #11
 801b264:	429a      	cmp	r2, r3
 801b266:	d10e      	bne.n	801b286 <HAL_RCC_OscConfig+0xae>
 801b268:	4baa      	ldr	r3, [pc, #680]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b26a:	681a      	ldr	r2, [r3, #0]
 801b26c:	4ba9      	ldr	r3, [pc, #676]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b26e:	2180      	movs	r1, #128	@ 0x80
 801b270:	02c9      	lsls	r1, r1, #11
 801b272:	430a      	orrs	r2, r1
 801b274:	601a      	str	r2, [r3, #0]
 801b276:	4ba7      	ldr	r3, [pc, #668]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b278:	681a      	ldr	r2, [r3, #0]
 801b27a:	4ba6      	ldr	r3, [pc, #664]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b27c:	2180      	movs	r1, #128	@ 0x80
 801b27e:	0249      	lsls	r1, r1, #9
 801b280:	430a      	orrs	r2, r1
 801b282:	601a      	str	r2, [r3, #0]
 801b284:	e012      	b.n	801b2ac <HAL_RCC_OscConfig+0xd4>
 801b286:	4ba3      	ldr	r3, [pc, #652]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b288:	681a      	ldr	r2, [r3, #0]
 801b28a:	4ba2      	ldr	r3, [pc, #648]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b28c:	49a2      	ldr	r1, [pc, #648]	@ (801b518 <HAL_RCC_OscConfig+0x340>)
 801b28e:	400a      	ands	r2, r1
 801b290:	601a      	str	r2, [r3, #0]
 801b292:	4ba0      	ldr	r3, [pc, #640]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b294:	681a      	ldr	r2, [r3, #0]
 801b296:	2380      	movs	r3, #128	@ 0x80
 801b298:	025b      	lsls	r3, r3, #9
 801b29a:	4013      	ands	r3, r2
 801b29c:	60fb      	str	r3, [r7, #12]
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	4b9c      	ldr	r3, [pc, #624]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b2a2:	681a      	ldr	r2, [r3, #0]
 801b2a4:	4b9b      	ldr	r3, [pc, #620]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b2a6:	499d      	ldr	r1, [pc, #628]	@ (801b51c <HAL_RCC_OscConfig+0x344>)
 801b2a8:	400a      	ands	r2, r1
 801b2aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	685b      	ldr	r3, [r3, #4]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d015      	beq.n	801b2e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b2b4:	f7f9 fb04 	bl	80148c0 <HAL_GetTick>
 801b2b8:	0003      	movs	r3, r0
 801b2ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b2bc:	e009      	b.n	801b2d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b2be:	f7f9 faff 	bl	80148c0 <HAL_GetTick>
 801b2c2:	0002      	movs	r2, r0
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	1ad3      	subs	r3, r2, r3
 801b2c8:	2b64      	cmp	r3, #100	@ 0x64
 801b2ca:	d902      	bls.n	801b2d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b2cc:	2303      	movs	r3, #3
 801b2ce:	f000 fb4c 	bl	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b2d2:	4b90      	ldr	r3, [pc, #576]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b2d4:	681a      	ldr	r2, [r3, #0]
 801b2d6:	2380      	movs	r3, #128	@ 0x80
 801b2d8:	029b      	lsls	r3, r3, #10
 801b2da:	4013      	ands	r3, r2
 801b2dc:	d0ef      	beq.n	801b2be <HAL_RCC_OscConfig+0xe6>
 801b2de:	e015      	b.n	801b30c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b2e0:	f7f9 faee 	bl	80148c0 <HAL_GetTick>
 801b2e4:	0003      	movs	r3, r0
 801b2e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b2e8:	e008      	b.n	801b2fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b2ea:	f7f9 fae9 	bl	80148c0 <HAL_GetTick>
 801b2ee:	0002      	movs	r2, r0
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	1ad3      	subs	r3, r2, r3
 801b2f4:	2b64      	cmp	r3, #100	@ 0x64
 801b2f6:	d901      	bls.n	801b2fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b2f8:	2303      	movs	r3, #3
 801b2fa:	e336      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b2fc:	4b85      	ldr	r3, [pc, #532]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b2fe:	681a      	ldr	r2, [r3, #0]
 801b300:	2380      	movs	r3, #128	@ 0x80
 801b302:	029b      	lsls	r3, r3, #10
 801b304:	4013      	ands	r3, r2
 801b306:	d1f0      	bne.n	801b2ea <HAL_RCC_OscConfig+0x112>
 801b308:	e000      	b.n	801b30c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b30a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	2202      	movs	r2, #2
 801b312:	4013      	ands	r3, r2
 801b314:	d100      	bne.n	801b318 <HAL_RCC_OscConfig+0x140>
 801b316:	e099      	b.n	801b44c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	68db      	ldr	r3, [r3, #12]
 801b31c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b320:	2220      	movs	r2, #32
 801b322:	4013      	ands	r3, r2
 801b324:	d009      	beq.n	801b33a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b326:	4b7b      	ldr	r3, [pc, #492]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b328:	681a      	ldr	r2, [r3, #0]
 801b32a:	4b7a      	ldr	r3, [pc, #488]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b32c:	2120      	movs	r1, #32
 801b32e:	430a      	orrs	r2, r1
 801b330:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b334:	2220      	movs	r2, #32
 801b336:	4393      	bics	r3, r2
 801b338:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b33a:	69fb      	ldr	r3, [r7, #28]
 801b33c:	2b04      	cmp	r3, #4
 801b33e:	d005      	beq.n	801b34c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b340:	69fb      	ldr	r3, [r7, #28]
 801b342:	2b0c      	cmp	r3, #12
 801b344:	d13e      	bne.n	801b3c4 <HAL_RCC_OscConfig+0x1ec>
 801b346:	69bb      	ldr	r3, [r7, #24]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d13b      	bne.n	801b3c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b34c:	4b71      	ldr	r3, [pc, #452]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	2204      	movs	r2, #4
 801b352:	4013      	ands	r3, r2
 801b354:	d004      	beq.n	801b360 <HAL_RCC_OscConfig+0x188>
 801b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d101      	bne.n	801b360 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b35c:	2301      	movs	r3, #1
 801b35e:	e304      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b360:	4b6c      	ldr	r3, [pc, #432]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b362:	685b      	ldr	r3, [r3, #4]
 801b364:	4a6e      	ldr	r2, [pc, #440]	@ (801b520 <HAL_RCC_OscConfig+0x348>)
 801b366:	4013      	ands	r3, r2
 801b368:	0019      	movs	r1, r3
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	691b      	ldr	r3, [r3, #16]
 801b36e:	021a      	lsls	r2, r3, #8
 801b370:	4b68      	ldr	r3, [pc, #416]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b372:	430a      	orrs	r2, r1
 801b374:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b376:	4b67      	ldr	r3, [pc, #412]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	2209      	movs	r2, #9
 801b37c:	4393      	bics	r3, r2
 801b37e:	0019      	movs	r1, r3
 801b380:	4b64      	ldr	r3, [pc, #400]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b384:	430a      	orrs	r2, r1
 801b386:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b388:	f000 fc42 	bl	801bc10 <HAL_RCC_GetSysClockFreq>
 801b38c:	0001      	movs	r1, r0
 801b38e:	4b61      	ldr	r3, [pc, #388]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b390:	68db      	ldr	r3, [r3, #12]
 801b392:	091b      	lsrs	r3, r3, #4
 801b394:	220f      	movs	r2, #15
 801b396:	4013      	ands	r3, r2
 801b398:	4a62      	ldr	r2, [pc, #392]	@ (801b524 <HAL_RCC_OscConfig+0x34c>)
 801b39a:	5cd3      	ldrb	r3, [r2, r3]
 801b39c:	000a      	movs	r2, r1
 801b39e:	40da      	lsrs	r2, r3
 801b3a0:	4b61      	ldr	r3, [pc, #388]	@ (801b528 <HAL_RCC_OscConfig+0x350>)
 801b3a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b3a4:	4b61      	ldr	r3, [pc, #388]	@ (801b52c <HAL_RCC_OscConfig+0x354>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	2513      	movs	r5, #19
 801b3aa:	197c      	adds	r4, r7, r5
 801b3ac:	0018      	movs	r0, r3
 801b3ae:	f7f9 fa41 	bl	8014834 <HAL_InitTick>
 801b3b2:	0003      	movs	r3, r0
 801b3b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b3b6:	197b      	adds	r3, r7, r5
 801b3b8:	781b      	ldrb	r3, [r3, #0]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d046      	beq.n	801b44c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b3be:	197b      	adds	r3, r7, r5
 801b3c0:	781b      	ldrb	r3, [r3, #0]
 801b3c2:	e2d2      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d027      	beq.n	801b41a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b3ca:	4b52      	ldr	r3, [pc, #328]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	2209      	movs	r2, #9
 801b3d0:	4393      	bics	r3, r2
 801b3d2:	0019      	movs	r1, r3
 801b3d4:	4b4f      	ldr	r3, [pc, #316]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b3d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b3d8:	430a      	orrs	r2, r1
 801b3da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3dc:	f7f9 fa70 	bl	80148c0 <HAL_GetTick>
 801b3e0:	0003      	movs	r3, r0
 801b3e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b3e4:	e008      	b.n	801b3f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b3e6:	f7f9 fa6b 	bl	80148c0 <HAL_GetTick>
 801b3ea:	0002      	movs	r2, r0
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	1ad3      	subs	r3, r2, r3
 801b3f0:	2b02      	cmp	r3, #2
 801b3f2:	d901      	bls.n	801b3f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b3f4:	2303      	movs	r3, #3
 801b3f6:	e2b8      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b3f8:	4b46      	ldr	r3, [pc, #280]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	2204      	movs	r2, #4
 801b3fe:	4013      	ands	r3, r2
 801b400:	d0f1      	beq.n	801b3e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b402:	4b44      	ldr	r3, [pc, #272]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	4a46      	ldr	r2, [pc, #280]	@ (801b520 <HAL_RCC_OscConfig+0x348>)
 801b408:	4013      	ands	r3, r2
 801b40a:	0019      	movs	r1, r3
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	691b      	ldr	r3, [r3, #16]
 801b410:	021a      	lsls	r2, r3, #8
 801b412:	4b40      	ldr	r3, [pc, #256]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b414:	430a      	orrs	r2, r1
 801b416:	605a      	str	r2, [r3, #4]
 801b418:	e018      	b.n	801b44c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b41a:	4b3e      	ldr	r3, [pc, #248]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b41c:	681a      	ldr	r2, [r3, #0]
 801b41e:	4b3d      	ldr	r3, [pc, #244]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b420:	2101      	movs	r1, #1
 801b422:	438a      	bics	r2, r1
 801b424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b426:	f7f9 fa4b 	bl	80148c0 <HAL_GetTick>
 801b42a:	0003      	movs	r3, r0
 801b42c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b42e:	e008      	b.n	801b442 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b430:	f7f9 fa46 	bl	80148c0 <HAL_GetTick>
 801b434:	0002      	movs	r2, r0
 801b436:	697b      	ldr	r3, [r7, #20]
 801b438:	1ad3      	subs	r3, r2, r3
 801b43a:	2b02      	cmp	r3, #2
 801b43c:	d901      	bls.n	801b442 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b43e:	2303      	movs	r3, #3
 801b440:	e293      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b442:	4b34      	ldr	r3, [pc, #208]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	2204      	movs	r2, #4
 801b448:	4013      	ands	r3, r2
 801b44a:	d1f1      	bne.n	801b430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	2210      	movs	r2, #16
 801b452:	4013      	ands	r3, r2
 801b454:	d100      	bne.n	801b458 <HAL_RCC_OscConfig+0x280>
 801b456:	e0a2      	b.n	801b59e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b458:	69fb      	ldr	r3, [r7, #28]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d140      	bne.n	801b4e0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b45e:	4b2d      	ldr	r3, [pc, #180]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b460:	681a      	ldr	r2, [r3, #0]
 801b462:	2380      	movs	r3, #128	@ 0x80
 801b464:	009b      	lsls	r3, r3, #2
 801b466:	4013      	ands	r3, r2
 801b468:	d005      	beq.n	801b476 <HAL_RCC_OscConfig+0x29e>
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	69db      	ldr	r3, [r3, #28]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d101      	bne.n	801b476 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b472:	2301      	movs	r3, #1
 801b474:	e279      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b476:	4b27      	ldr	r3, [pc, #156]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b478:	685b      	ldr	r3, [r3, #4]
 801b47a:	4a2d      	ldr	r2, [pc, #180]	@ (801b530 <HAL_RCC_OscConfig+0x358>)
 801b47c:	4013      	ands	r3, r2
 801b47e:	0019      	movs	r1, r3
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b484:	4b23      	ldr	r3, [pc, #140]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b486:	430a      	orrs	r2, r1
 801b488:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b48a:	4b22      	ldr	r3, [pc, #136]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b48c:	685b      	ldr	r3, [r3, #4]
 801b48e:	021b      	lsls	r3, r3, #8
 801b490:	0a19      	lsrs	r1, r3, #8
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	6a1b      	ldr	r3, [r3, #32]
 801b496:	061a      	lsls	r2, r3, #24
 801b498:	4b1e      	ldr	r3, [pc, #120]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b49a:	430a      	orrs	r2, r1
 801b49c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4a2:	0b5b      	lsrs	r3, r3, #13
 801b4a4:	3301      	adds	r3, #1
 801b4a6:	2280      	movs	r2, #128	@ 0x80
 801b4a8:	0212      	lsls	r2, r2, #8
 801b4aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b4ac:	4b19      	ldr	r3, [pc, #100]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	091b      	lsrs	r3, r3, #4
 801b4b2:	210f      	movs	r1, #15
 801b4b4:	400b      	ands	r3, r1
 801b4b6:	491b      	ldr	r1, [pc, #108]	@ (801b524 <HAL_RCC_OscConfig+0x34c>)
 801b4b8:	5ccb      	ldrb	r3, [r1, r3]
 801b4ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b4bc:	4b1a      	ldr	r3, [pc, #104]	@ (801b528 <HAL_RCC_OscConfig+0x350>)
 801b4be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b4c0:	4b1a      	ldr	r3, [pc, #104]	@ (801b52c <HAL_RCC_OscConfig+0x354>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2513      	movs	r5, #19
 801b4c6:	197c      	adds	r4, r7, r5
 801b4c8:	0018      	movs	r0, r3
 801b4ca:	f7f9 f9b3 	bl	8014834 <HAL_InitTick>
 801b4ce:	0003      	movs	r3, r0
 801b4d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b4d2:	197b      	adds	r3, r7, r5
 801b4d4:	781b      	ldrb	r3, [r3, #0]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d061      	beq.n	801b59e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b4da:	197b      	adds	r3, r7, r5
 801b4dc:	781b      	ldrb	r3, [r3, #0]
 801b4de:	e244      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	69db      	ldr	r3, [r3, #28]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d040      	beq.n	801b56a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b4e8:	4b0a      	ldr	r3, [pc, #40]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	4b09      	ldr	r3, [pc, #36]	@ (801b514 <HAL_RCC_OscConfig+0x33c>)
 801b4ee:	2180      	movs	r1, #128	@ 0x80
 801b4f0:	0049      	lsls	r1, r1, #1
 801b4f2:	430a      	orrs	r2, r1
 801b4f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4f6:	f7f9 f9e3 	bl	80148c0 <HAL_GetTick>
 801b4fa:	0003      	movs	r3, r0
 801b4fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b4fe:	e019      	b.n	801b534 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b500:	f7f9 f9de 	bl	80148c0 <HAL_GetTick>
 801b504:	0002      	movs	r2, r0
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	1ad3      	subs	r3, r2, r3
 801b50a:	2b02      	cmp	r3, #2
 801b50c:	d912      	bls.n	801b534 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b50e:	2303      	movs	r3, #3
 801b510:	e22b      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
 801b512:	46c0      	nop			@ (mov r8, r8)
 801b514:	40021000 	.word	0x40021000
 801b518:	fffeffff 	.word	0xfffeffff
 801b51c:	fffbffff 	.word	0xfffbffff
 801b520:	ffffe0ff 	.word	0xffffe0ff
 801b524:	0802e650 	.word	0x0802e650
 801b528:	200000ec 	.word	0x200000ec
 801b52c:	200000fc 	.word	0x200000fc
 801b530:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b534:	4bca      	ldr	r3, [pc, #808]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b536:	681a      	ldr	r2, [r3, #0]
 801b538:	2380      	movs	r3, #128	@ 0x80
 801b53a:	009b      	lsls	r3, r3, #2
 801b53c:	4013      	ands	r3, r2
 801b53e:	d0df      	beq.n	801b500 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b540:	4bc7      	ldr	r3, [pc, #796]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b542:	685b      	ldr	r3, [r3, #4]
 801b544:	4ac7      	ldr	r2, [pc, #796]	@ (801b864 <HAL_RCC_OscConfig+0x68c>)
 801b546:	4013      	ands	r3, r2
 801b548:	0019      	movs	r1, r3
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b54e:	4bc4      	ldr	r3, [pc, #784]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b550:	430a      	orrs	r2, r1
 801b552:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b554:	4bc2      	ldr	r3, [pc, #776]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b556:	685b      	ldr	r3, [r3, #4]
 801b558:	021b      	lsls	r3, r3, #8
 801b55a:	0a19      	lsrs	r1, r3, #8
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	6a1b      	ldr	r3, [r3, #32]
 801b560:	061a      	lsls	r2, r3, #24
 801b562:	4bbf      	ldr	r3, [pc, #764]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b564:	430a      	orrs	r2, r1
 801b566:	605a      	str	r2, [r3, #4]
 801b568:	e019      	b.n	801b59e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b56a:	4bbd      	ldr	r3, [pc, #756]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b56c:	681a      	ldr	r2, [r3, #0]
 801b56e:	4bbc      	ldr	r3, [pc, #752]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b570:	49bd      	ldr	r1, [pc, #756]	@ (801b868 <HAL_RCC_OscConfig+0x690>)
 801b572:	400a      	ands	r2, r1
 801b574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b576:	f7f9 f9a3 	bl	80148c0 <HAL_GetTick>
 801b57a:	0003      	movs	r3, r0
 801b57c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b57e:	e008      	b.n	801b592 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b580:	f7f9 f99e 	bl	80148c0 <HAL_GetTick>
 801b584:	0002      	movs	r2, r0
 801b586:	697b      	ldr	r3, [r7, #20]
 801b588:	1ad3      	subs	r3, r2, r3
 801b58a:	2b02      	cmp	r3, #2
 801b58c:	d901      	bls.n	801b592 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b58e:	2303      	movs	r3, #3
 801b590:	e1eb      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b592:	4bb3      	ldr	r3, [pc, #716]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b594:	681a      	ldr	r2, [r3, #0]
 801b596:	2380      	movs	r3, #128	@ 0x80
 801b598:	009b      	lsls	r3, r3, #2
 801b59a:	4013      	ands	r3, r2
 801b59c:	d1f0      	bne.n	801b580 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	2208      	movs	r2, #8
 801b5a4:	4013      	ands	r3, r2
 801b5a6:	d036      	beq.n	801b616 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	695b      	ldr	r3, [r3, #20]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d019      	beq.n	801b5e4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b5b0:	4bab      	ldr	r3, [pc, #684]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b5b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b5b4:	4baa      	ldr	r3, [pc, #680]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b5b6:	2101      	movs	r1, #1
 801b5b8:	430a      	orrs	r2, r1
 801b5ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b5bc:	f7f9 f980 	bl	80148c0 <HAL_GetTick>
 801b5c0:	0003      	movs	r3, r0
 801b5c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b5c4:	e008      	b.n	801b5d8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b5c6:	f7f9 f97b 	bl	80148c0 <HAL_GetTick>
 801b5ca:	0002      	movs	r2, r0
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	1ad3      	subs	r3, r2, r3
 801b5d0:	2b02      	cmp	r3, #2
 801b5d2:	d901      	bls.n	801b5d8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b5d4:	2303      	movs	r3, #3
 801b5d6:	e1c8      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b5d8:	4ba1      	ldr	r3, [pc, #644]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b5dc:	2202      	movs	r2, #2
 801b5de:	4013      	ands	r3, r2
 801b5e0:	d0f1      	beq.n	801b5c6 <HAL_RCC_OscConfig+0x3ee>
 801b5e2:	e018      	b.n	801b616 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b5e4:	4b9e      	ldr	r3, [pc, #632]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b5e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b5e8:	4b9d      	ldr	r3, [pc, #628]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b5ea:	2101      	movs	r1, #1
 801b5ec:	438a      	bics	r2, r1
 801b5ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b5f0:	f7f9 f966 	bl	80148c0 <HAL_GetTick>
 801b5f4:	0003      	movs	r3, r0
 801b5f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b5f8:	e008      	b.n	801b60c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b5fa:	f7f9 f961 	bl	80148c0 <HAL_GetTick>
 801b5fe:	0002      	movs	r2, r0
 801b600:	697b      	ldr	r3, [r7, #20]
 801b602:	1ad3      	subs	r3, r2, r3
 801b604:	2b02      	cmp	r3, #2
 801b606:	d901      	bls.n	801b60c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b608:	2303      	movs	r3, #3
 801b60a:	e1ae      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b60c:	4b94      	ldr	r3, [pc, #592]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b60e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b610:	2202      	movs	r2, #2
 801b612:	4013      	ands	r3, r2
 801b614:	d1f1      	bne.n	801b5fa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	2204      	movs	r2, #4
 801b61c:	4013      	ands	r3, r2
 801b61e:	d100      	bne.n	801b622 <HAL_RCC_OscConfig+0x44a>
 801b620:	e0ae      	b.n	801b780 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b622:	2023      	movs	r0, #35	@ 0x23
 801b624:	183b      	adds	r3, r7, r0
 801b626:	2200      	movs	r2, #0
 801b628:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b62a:	4b8d      	ldr	r3, [pc, #564]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b62c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b62e:	2380      	movs	r3, #128	@ 0x80
 801b630:	055b      	lsls	r3, r3, #21
 801b632:	4013      	ands	r3, r2
 801b634:	d109      	bne.n	801b64a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b636:	4b8a      	ldr	r3, [pc, #552]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b63a:	4b89      	ldr	r3, [pc, #548]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b63c:	2180      	movs	r1, #128	@ 0x80
 801b63e:	0549      	lsls	r1, r1, #21
 801b640:	430a      	orrs	r2, r1
 801b642:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b644:	183b      	adds	r3, r7, r0
 801b646:	2201      	movs	r2, #1
 801b648:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b64a:	4b88      	ldr	r3, [pc, #544]	@ (801b86c <HAL_RCC_OscConfig+0x694>)
 801b64c:	681a      	ldr	r2, [r3, #0]
 801b64e:	2380      	movs	r3, #128	@ 0x80
 801b650:	005b      	lsls	r3, r3, #1
 801b652:	4013      	ands	r3, r2
 801b654:	d11a      	bne.n	801b68c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b656:	4b85      	ldr	r3, [pc, #532]	@ (801b86c <HAL_RCC_OscConfig+0x694>)
 801b658:	681a      	ldr	r2, [r3, #0]
 801b65a:	4b84      	ldr	r3, [pc, #528]	@ (801b86c <HAL_RCC_OscConfig+0x694>)
 801b65c:	2180      	movs	r1, #128	@ 0x80
 801b65e:	0049      	lsls	r1, r1, #1
 801b660:	430a      	orrs	r2, r1
 801b662:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b664:	f7f9 f92c 	bl	80148c0 <HAL_GetTick>
 801b668:	0003      	movs	r3, r0
 801b66a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b66c:	e008      	b.n	801b680 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b66e:	f7f9 f927 	bl	80148c0 <HAL_GetTick>
 801b672:	0002      	movs	r2, r0
 801b674:	697b      	ldr	r3, [r7, #20]
 801b676:	1ad3      	subs	r3, r2, r3
 801b678:	2b64      	cmp	r3, #100	@ 0x64
 801b67a:	d901      	bls.n	801b680 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b67c:	2303      	movs	r3, #3
 801b67e:	e174      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b680:	4b7a      	ldr	r3, [pc, #488]	@ (801b86c <HAL_RCC_OscConfig+0x694>)
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	2380      	movs	r3, #128	@ 0x80
 801b686:	005b      	lsls	r3, r3, #1
 801b688:	4013      	ands	r3, r2
 801b68a:	d0f0      	beq.n	801b66e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	689a      	ldr	r2, [r3, #8]
 801b690:	2380      	movs	r3, #128	@ 0x80
 801b692:	005b      	lsls	r3, r3, #1
 801b694:	429a      	cmp	r2, r3
 801b696:	d107      	bne.n	801b6a8 <HAL_RCC_OscConfig+0x4d0>
 801b698:	4b71      	ldr	r3, [pc, #452]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b69a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b69c:	4b70      	ldr	r3, [pc, #448]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b69e:	2180      	movs	r1, #128	@ 0x80
 801b6a0:	0049      	lsls	r1, r1, #1
 801b6a2:	430a      	orrs	r2, r1
 801b6a4:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6a6:	e031      	b.n	801b70c <HAL_RCC_OscConfig+0x534>
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	689b      	ldr	r3, [r3, #8]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d10c      	bne.n	801b6ca <HAL_RCC_OscConfig+0x4f2>
 801b6b0:	4b6b      	ldr	r3, [pc, #428]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6b4:	4b6a      	ldr	r3, [pc, #424]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6b6:	496c      	ldr	r1, [pc, #432]	@ (801b868 <HAL_RCC_OscConfig+0x690>)
 801b6b8:	400a      	ands	r2, r1
 801b6ba:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6bc:	4b68      	ldr	r3, [pc, #416]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6c0:	4b67      	ldr	r3, [pc, #412]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6c2:	496b      	ldr	r1, [pc, #428]	@ (801b870 <HAL_RCC_OscConfig+0x698>)
 801b6c4:	400a      	ands	r2, r1
 801b6c6:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6c8:	e020      	b.n	801b70c <HAL_RCC_OscConfig+0x534>
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	689a      	ldr	r2, [r3, #8]
 801b6ce:	23a0      	movs	r3, #160	@ 0xa0
 801b6d0:	00db      	lsls	r3, r3, #3
 801b6d2:	429a      	cmp	r2, r3
 801b6d4:	d10e      	bne.n	801b6f4 <HAL_RCC_OscConfig+0x51c>
 801b6d6:	4b62      	ldr	r3, [pc, #392]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6da:	4b61      	ldr	r3, [pc, #388]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6dc:	2180      	movs	r1, #128	@ 0x80
 801b6de:	00c9      	lsls	r1, r1, #3
 801b6e0:	430a      	orrs	r2, r1
 801b6e2:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6e4:	4b5e      	ldr	r3, [pc, #376]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6e8:	4b5d      	ldr	r3, [pc, #372]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6ea:	2180      	movs	r1, #128	@ 0x80
 801b6ec:	0049      	lsls	r1, r1, #1
 801b6ee:	430a      	orrs	r2, r1
 801b6f0:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6f2:	e00b      	b.n	801b70c <HAL_RCC_OscConfig+0x534>
 801b6f4:	4b5a      	ldr	r3, [pc, #360]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6f8:	4b59      	ldr	r3, [pc, #356]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b6fa:	495b      	ldr	r1, [pc, #364]	@ (801b868 <HAL_RCC_OscConfig+0x690>)
 801b6fc:	400a      	ands	r2, r1
 801b6fe:	651a      	str	r2, [r3, #80]	@ 0x50
 801b700:	4b57      	ldr	r3, [pc, #348]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b702:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b704:	4b56      	ldr	r3, [pc, #344]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b706:	495a      	ldr	r1, [pc, #360]	@ (801b870 <HAL_RCC_OscConfig+0x698>)
 801b708:	400a      	ands	r2, r1
 801b70a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	689b      	ldr	r3, [r3, #8]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d015      	beq.n	801b740 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b714:	f7f9 f8d4 	bl	80148c0 <HAL_GetTick>
 801b718:	0003      	movs	r3, r0
 801b71a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b71c:	e009      	b.n	801b732 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b71e:	f7f9 f8cf 	bl	80148c0 <HAL_GetTick>
 801b722:	0002      	movs	r2, r0
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	1ad3      	subs	r3, r2, r3
 801b728:	4a52      	ldr	r2, [pc, #328]	@ (801b874 <HAL_RCC_OscConfig+0x69c>)
 801b72a:	4293      	cmp	r3, r2
 801b72c:	d901      	bls.n	801b732 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b72e:	2303      	movs	r3, #3
 801b730:	e11b      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b732:	4b4b      	ldr	r3, [pc, #300]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b736:	2380      	movs	r3, #128	@ 0x80
 801b738:	009b      	lsls	r3, r3, #2
 801b73a:	4013      	ands	r3, r2
 801b73c:	d0ef      	beq.n	801b71e <HAL_RCC_OscConfig+0x546>
 801b73e:	e014      	b.n	801b76a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b740:	f7f9 f8be 	bl	80148c0 <HAL_GetTick>
 801b744:	0003      	movs	r3, r0
 801b746:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b748:	e009      	b.n	801b75e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b74a:	f7f9 f8b9 	bl	80148c0 <HAL_GetTick>
 801b74e:	0002      	movs	r2, r0
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	1ad3      	subs	r3, r2, r3
 801b754:	4a47      	ldr	r2, [pc, #284]	@ (801b874 <HAL_RCC_OscConfig+0x69c>)
 801b756:	4293      	cmp	r3, r2
 801b758:	d901      	bls.n	801b75e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b75a:	2303      	movs	r3, #3
 801b75c:	e105      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b75e:	4b40      	ldr	r3, [pc, #256]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b760:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b762:	2380      	movs	r3, #128	@ 0x80
 801b764:	009b      	lsls	r3, r3, #2
 801b766:	4013      	ands	r3, r2
 801b768:	d1ef      	bne.n	801b74a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b76a:	2323      	movs	r3, #35	@ 0x23
 801b76c:	18fb      	adds	r3, r7, r3
 801b76e:	781b      	ldrb	r3, [r3, #0]
 801b770:	2b01      	cmp	r3, #1
 801b772:	d105      	bne.n	801b780 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b774:	4b3a      	ldr	r3, [pc, #232]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b778:	4b39      	ldr	r3, [pc, #228]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b77a:	493f      	ldr	r1, [pc, #252]	@ (801b878 <HAL_RCC_OscConfig+0x6a0>)
 801b77c:	400a      	ands	r2, r1
 801b77e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	2220      	movs	r2, #32
 801b786:	4013      	ands	r3, r2
 801b788:	d049      	beq.n	801b81e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	699b      	ldr	r3, [r3, #24]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d026      	beq.n	801b7e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b792:	4b33      	ldr	r3, [pc, #204]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b794:	689a      	ldr	r2, [r3, #8]
 801b796:	4b32      	ldr	r3, [pc, #200]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b798:	2101      	movs	r1, #1
 801b79a:	430a      	orrs	r2, r1
 801b79c:	609a      	str	r2, [r3, #8]
 801b79e:	4b30      	ldr	r3, [pc, #192]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b7a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b7a2:	4b2f      	ldr	r3, [pc, #188]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b7a4:	2101      	movs	r1, #1
 801b7a6:	430a      	orrs	r2, r1
 801b7a8:	635a      	str	r2, [r3, #52]	@ 0x34
 801b7aa:	4b34      	ldr	r3, [pc, #208]	@ (801b87c <HAL_RCC_OscConfig+0x6a4>)
 801b7ac:	6a1a      	ldr	r2, [r3, #32]
 801b7ae:	4b33      	ldr	r3, [pc, #204]	@ (801b87c <HAL_RCC_OscConfig+0x6a4>)
 801b7b0:	2180      	movs	r1, #128	@ 0x80
 801b7b2:	0189      	lsls	r1, r1, #6
 801b7b4:	430a      	orrs	r2, r1
 801b7b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b7b8:	f7f9 f882 	bl	80148c0 <HAL_GetTick>
 801b7bc:	0003      	movs	r3, r0
 801b7be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b7c0:	e008      	b.n	801b7d4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b7c2:	f7f9 f87d 	bl	80148c0 <HAL_GetTick>
 801b7c6:	0002      	movs	r2, r0
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	1ad3      	subs	r3, r2, r3
 801b7cc:	2b02      	cmp	r3, #2
 801b7ce:	d901      	bls.n	801b7d4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b7d0:	2303      	movs	r3, #3
 801b7d2:	e0ca      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b7d4:	4b22      	ldr	r3, [pc, #136]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b7d6:	689b      	ldr	r3, [r3, #8]
 801b7d8:	2202      	movs	r2, #2
 801b7da:	4013      	ands	r3, r2
 801b7dc:	d0f1      	beq.n	801b7c2 <HAL_RCC_OscConfig+0x5ea>
 801b7de:	e01e      	b.n	801b81e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b7e0:	4b1f      	ldr	r3, [pc, #124]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b7e2:	689a      	ldr	r2, [r3, #8]
 801b7e4:	4b1e      	ldr	r3, [pc, #120]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b7e6:	2101      	movs	r1, #1
 801b7e8:	438a      	bics	r2, r1
 801b7ea:	609a      	str	r2, [r3, #8]
 801b7ec:	4b23      	ldr	r3, [pc, #140]	@ (801b87c <HAL_RCC_OscConfig+0x6a4>)
 801b7ee:	6a1a      	ldr	r2, [r3, #32]
 801b7f0:	4b22      	ldr	r3, [pc, #136]	@ (801b87c <HAL_RCC_OscConfig+0x6a4>)
 801b7f2:	4923      	ldr	r1, [pc, #140]	@ (801b880 <HAL_RCC_OscConfig+0x6a8>)
 801b7f4:	400a      	ands	r2, r1
 801b7f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b7f8:	f7f9 f862 	bl	80148c0 <HAL_GetTick>
 801b7fc:	0003      	movs	r3, r0
 801b7fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b800:	e008      	b.n	801b814 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b802:	f7f9 f85d 	bl	80148c0 <HAL_GetTick>
 801b806:	0002      	movs	r2, r0
 801b808:	697b      	ldr	r3, [r7, #20]
 801b80a:	1ad3      	subs	r3, r2, r3
 801b80c:	2b02      	cmp	r3, #2
 801b80e:	d901      	bls.n	801b814 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b810:	2303      	movs	r3, #3
 801b812:	e0aa      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b814:	4b12      	ldr	r3, [pc, #72]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b816:	689b      	ldr	r3, [r3, #8]
 801b818:	2202      	movs	r2, #2
 801b81a:	4013      	ands	r3, r2
 801b81c:	d1f1      	bne.n	801b802 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b822:	2b00      	cmp	r3, #0
 801b824:	d100      	bne.n	801b828 <HAL_RCC_OscConfig+0x650>
 801b826:	e09f      	b.n	801b968 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b828:	69fb      	ldr	r3, [r7, #28]
 801b82a:	2b0c      	cmp	r3, #12
 801b82c:	d100      	bne.n	801b830 <HAL_RCC_OscConfig+0x658>
 801b82e:	e078      	b.n	801b922 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b834:	2b02      	cmp	r3, #2
 801b836:	d159      	bne.n	801b8ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b838:	4b09      	ldr	r3, [pc, #36]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b83a:	681a      	ldr	r2, [r3, #0]
 801b83c:	4b08      	ldr	r3, [pc, #32]	@ (801b860 <HAL_RCC_OscConfig+0x688>)
 801b83e:	4911      	ldr	r1, [pc, #68]	@ (801b884 <HAL_RCC_OscConfig+0x6ac>)
 801b840:	400a      	ands	r2, r1
 801b842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b844:	f7f9 f83c 	bl	80148c0 <HAL_GetTick>
 801b848:	0003      	movs	r3, r0
 801b84a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b84c:	e01c      	b.n	801b888 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b84e:	f7f9 f837 	bl	80148c0 <HAL_GetTick>
 801b852:	0002      	movs	r2, r0
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	1ad3      	subs	r3, r2, r3
 801b858:	2b02      	cmp	r3, #2
 801b85a:	d915      	bls.n	801b888 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b85c:	2303      	movs	r3, #3
 801b85e:	e084      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
 801b860:	40021000 	.word	0x40021000
 801b864:	ffff1fff 	.word	0xffff1fff
 801b868:	fffffeff 	.word	0xfffffeff
 801b86c:	40007000 	.word	0x40007000
 801b870:	fffffbff 	.word	0xfffffbff
 801b874:	00001388 	.word	0x00001388
 801b878:	efffffff 	.word	0xefffffff
 801b87c:	40010000 	.word	0x40010000
 801b880:	ffffdfff 	.word	0xffffdfff
 801b884:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b888:	4b3a      	ldr	r3, [pc, #232]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b88a:	681a      	ldr	r2, [r3, #0]
 801b88c:	2380      	movs	r3, #128	@ 0x80
 801b88e:	049b      	lsls	r3, r3, #18
 801b890:	4013      	ands	r3, r2
 801b892:	d1dc      	bne.n	801b84e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b894:	4b37      	ldr	r3, [pc, #220]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b896:	68db      	ldr	r3, [r3, #12]
 801b898:	4a37      	ldr	r2, [pc, #220]	@ (801b978 <HAL_RCC_OscConfig+0x7a0>)
 801b89a:	4013      	ands	r3, r2
 801b89c:	0019      	movs	r1, r3
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b8a6:	431a      	orrs	r2, r3
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8ac:	431a      	orrs	r2, r3
 801b8ae:	4b31      	ldr	r3, [pc, #196]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b8b0:	430a      	orrs	r2, r1
 801b8b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b8b4:	4b2f      	ldr	r3, [pc, #188]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b8b6:	681a      	ldr	r2, [r3, #0]
 801b8b8:	4b2e      	ldr	r3, [pc, #184]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b8ba:	2180      	movs	r1, #128	@ 0x80
 801b8bc:	0449      	lsls	r1, r1, #17
 801b8be:	430a      	orrs	r2, r1
 801b8c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8c2:	f7f8 fffd 	bl	80148c0 <HAL_GetTick>
 801b8c6:	0003      	movs	r3, r0
 801b8c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b8ca:	e008      	b.n	801b8de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b8cc:	f7f8 fff8 	bl	80148c0 <HAL_GetTick>
 801b8d0:	0002      	movs	r2, r0
 801b8d2:	697b      	ldr	r3, [r7, #20]
 801b8d4:	1ad3      	subs	r3, r2, r3
 801b8d6:	2b02      	cmp	r3, #2
 801b8d8:	d901      	bls.n	801b8de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b8da:	2303      	movs	r3, #3
 801b8dc:	e045      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b8de:	4b25      	ldr	r3, [pc, #148]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b8e0:	681a      	ldr	r2, [r3, #0]
 801b8e2:	2380      	movs	r3, #128	@ 0x80
 801b8e4:	049b      	lsls	r3, r3, #18
 801b8e6:	4013      	ands	r3, r2
 801b8e8:	d0f0      	beq.n	801b8cc <HAL_RCC_OscConfig+0x6f4>
 801b8ea:	e03d      	b.n	801b968 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b8ec:	4b21      	ldr	r3, [pc, #132]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b8ee:	681a      	ldr	r2, [r3, #0]
 801b8f0:	4b20      	ldr	r3, [pc, #128]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b8f2:	4922      	ldr	r1, [pc, #136]	@ (801b97c <HAL_RCC_OscConfig+0x7a4>)
 801b8f4:	400a      	ands	r2, r1
 801b8f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8f8:	f7f8 ffe2 	bl	80148c0 <HAL_GetTick>
 801b8fc:	0003      	movs	r3, r0
 801b8fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b900:	e008      	b.n	801b914 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b902:	f7f8 ffdd 	bl	80148c0 <HAL_GetTick>
 801b906:	0002      	movs	r2, r0
 801b908:	697b      	ldr	r3, [r7, #20]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	2b02      	cmp	r3, #2
 801b90e:	d901      	bls.n	801b914 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b910:	2303      	movs	r3, #3
 801b912:	e02a      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b914:	4b17      	ldr	r3, [pc, #92]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b916:	681a      	ldr	r2, [r3, #0]
 801b918:	2380      	movs	r3, #128	@ 0x80
 801b91a:	049b      	lsls	r3, r3, #18
 801b91c:	4013      	ands	r3, r2
 801b91e:	d1f0      	bne.n	801b902 <HAL_RCC_OscConfig+0x72a>
 801b920:	e022      	b.n	801b968 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b926:	2b01      	cmp	r3, #1
 801b928:	d101      	bne.n	801b92e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b92a:	2301      	movs	r3, #1
 801b92c:	e01d      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801b92e:	4b11      	ldr	r3, [pc, #68]	@ (801b974 <HAL_RCC_OscConfig+0x79c>)
 801b930:	68db      	ldr	r3, [r3, #12]
 801b932:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b934:	69ba      	ldr	r2, [r7, #24]
 801b936:	2380      	movs	r3, #128	@ 0x80
 801b938:	025b      	lsls	r3, r3, #9
 801b93a:	401a      	ands	r2, r3
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b940:	429a      	cmp	r2, r3
 801b942:	d10f      	bne.n	801b964 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b944:	69ba      	ldr	r2, [r7, #24]
 801b946:	23f0      	movs	r3, #240	@ 0xf0
 801b948:	039b      	lsls	r3, r3, #14
 801b94a:	401a      	ands	r2, r3
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b950:	429a      	cmp	r2, r3
 801b952:	d107      	bne.n	801b964 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801b954:	69ba      	ldr	r2, [r7, #24]
 801b956:	23c0      	movs	r3, #192	@ 0xc0
 801b958:	041b      	lsls	r3, r3, #16
 801b95a:	401a      	ands	r2, r3
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b960:	429a      	cmp	r2, r3
 801b962:	d001      	beq.n	801b968 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801b964:	2301      	movs	r3, #1
 801b966:	e000      	b.n	801b96a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801b968:	2300      	movs	r3, #0
}
 801b96a:	0018      	movs	r0, r3
 801b96c:	46bd      	mov	sp, r7
 801b96e:	b00a      	add	sp, #40	@ 0x28
 801b970:	bdb0      	pop	{r4, r5, r7, pc}
 801b972:	46c0      	nop			@ (mov r8, r8)
 801b974:	40021000 	.word	0x40021000
 801b978:	ff02ffff 	.word	0xff02ffff
 801b97c:	feffffff 	.word	0xfeffffff

0801b980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b980:	b5b0      	push	{r4, r5, r7, lr}
 801b982:	b084      	sub	sp, #16
 801b984:	af00      	add	r7, sp, #0
 801b986:	6078      	str	r0, [r7, #4]
 801b988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d101      	bne.n	801b994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b990:	2301      	movs	r3, #1
 801b992:	e128      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b994:	4b96      	ldr	r3, [pc, #600]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	2201      	movs	r2, #1
 801b99a:	4013      	ands	r3, r2
 801b99c:	683a      	ldr	r2, [r7, #0]
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d91e      	bls.n	801b9e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b9a2:	4b93      	ldr	r3, [pc, #588]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	2201      	movs	r2, #1
 801b9a8:	4393      	bics	r3, r2
 801b9aa:	0019      	movs	r1, r3
 801b9ac:	4b90      	ldr	r3, [pc, #576]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801b9ae:	683a      	ldr	r2, [r7, #0]
 801b9b0:	430a      	orrs	r2, r1
 801b9b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b9b4:	f7f8 ff84 	bl	80148c0 <HAL_GetTick>
 801b9b8:	0003      	movs	r3, r0
 801b9ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b9bc:	e009      	b.n	801b9d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b9be:	f7f8 ff7f 	bl	80148c0 <HAL_GetTick>
 801b9c2:	0002      	movs	r2, r0
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	1ad3      	subs	r3, r2, r3
 801b9c8:	4a8a      	ldr	r2, [pc, #552]	@ (801bbf4 <HAL_RCC_ClockConfig+0x274>)
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	d901      	bls.n	801b9d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801b9ce:	2303      	movs	r3, #3
 801b9d0:	e109      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b9d2:	4b87      	ldr	r3, [pc, #540]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	2201      	movs	r2, #1
 801b9d8:	4013      	ands	r3, r2
 801b9da:	683a      	ldr	r2, [r7, #0]
 801b9dc:	429a      	cmp	r2, r3
 801b9de:	d1ee      	bne.n	801b9be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	2202      	movs	r2, #2
 801b9e6:	4013      	ands	r3, r2
 801b9e8:	d009      	beq.n	801b9fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b9ea:	4b83      	ldr	r3, [pc, #524]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801b9ec:	68db      	ldr	r3, [r3, #12]
 801b9ee:	22f0      	movs	r2, #240	@ 0xf0
 801b9f0:	4393      	bics	r3, r2
 801b9f2:	0019      	movs	r1, r3
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	689a      	ldr	r2, [r3, #8]
 801b9f8:	4b7f      	ldr	r3, [pc, #508]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801b9fa:	430a      	orrs	r2, r1
 801b9fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	2201      	movs	r2, #1
 801ba04:	4013      	ands	r3, r2
 801ba06:	d100      	bne.n	801ba0a <HAL_RCC_ClockConfig+0x8a>
 801ba08:	e089      	b.n	801bb1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	685b      	ldr	r3, [r3, #4]
 801ba0e:	2b02      	cmp	r3, #2
 801ba10:	d107      	bne.n	801ba22 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ba12:	4b79      	ldr	r3, [pc, #484]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba14:	681a      	ldr	r2, [r3, #0]
 801ba16:	2380      	movs	r3, #128	@ 0x80
 801ba18:	029b      	lsls	r3, r3, #10
 801ba1a:	4013      	ands	r3, r2
 801ba1c:	d120      	bne.n	801ba60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba1e:	2301      	movs	r3, #1
 801ba20:	e0e1      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	685b      	ldr	r3, [r3, #4]
 801ba26:	2b03      	cmp	r3, #3
 801ba28:	d107      	bne.n	801ba3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ba2a:	4b73      	ldr	r3, [pc, #460]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba2c:	681a      	ldr	r2, [r3, #0]
 801ba2e:	2380      	movs	r3, #128	@ 0x80
 801ba30:	049b      	lsls	r3, r3, #18
 801ba32:	4013      	ands	r3, r2
 801ba34:	d114      	bne.n	801ba60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba36:	2301      	movs	r3, #1
 801ba38:	e0d5      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	2b01      	cmp	r3, #1
 801ba40:	d106      	bne.n	801ba50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ba42:	4b6d      	ldr	r3, [pc, #436]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	2204      	movs	r2, #4
 801ba48:	4013      	ands	r3, r2
 801ba4a:	d109      	bne.n	801ba60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	e0ca      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ba50:	4b69      	ldr	r3, [pc, #420]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba52:	681a      	ldr	r2, [r3, #0]
 801ba54:	2380      	movs	r3, #128	@ 0x80
 801ba56:	009b      	lsls	r3, r3, #2
 801ba58:	4013      	ands	r3, r2
 801ba5a:	d101      	bne.n	801ba60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	e0c2      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ba60:	4b65      	ldr	r3, [pc, #404]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba62:	68db      	ldr	r3, [r3, #12]
 801ba64:	2203      	movs	r2, #3
 801ba66:	4393      	bics	r3, r2
 801ba68:	0019      	movs	r1, r3
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	685a      	ldr	r2, [r3, #4]
 801ba6e:	4b62      	ldr	r3, [pc, #392]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba70:	430a      	orrs	r2, r1
 801ba72:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801ba74:	f7f8 ff24 	bl	80148c0 <HAL_GetTick>
 801ba78:	0003      	movs	r3, r0
 801ba7a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	685b      	ldr	r3, [r3, #4]
 801ba80:	2b02      	cmp	r3, #2
 801ba82:	d111      	bne.n	801baa8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ba84:	e009      	b.n	801ba9a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba86:	f7f8 ff1b 	bl	80148c0 <HAL_GetTick>
 801ba8a:	0002      	movs	r2, r0
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	1ad3      	subs	r3, r2, r3
 801ba90:	4a58      	ldr	r2, [pc, #352]	@ (801bbf4 <HAL_RCC_ClockConfig+0x274>)
 801ba92:	4293      	cmp	r3, r2
 801ba94:	d901      	bls.n	801ba9a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801ba96:	2303      	movs	r3, #3
 801ba98:	e0a5      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ba9a:	4b57      	ldr	r3, [pc, #348]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801ba9c:	68db      	ldr	r3, [r3, #12]
 801ba9e:	220c      	movs	r2, #12
 801baa0:	4013      	ands	r3, r2
 801baa2:	2b08      	cmp	r3, #8
 801baa4:	d1ef      	bne.n	801ba86 <HAL_RCC_ClockConfig+0x106>
 801baa6:	e03a      	b.n	801bb1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	685b      	ldr	r3, [r3, #4]
 801baac:	2b03      	cmp	r3, #3
 801baae:	d111      	bne.n	801bad4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bab0:	e009      	b.n	801bac6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bab2:	f7f8 ff05 	bl	80148c0 <HAL_GetTick>
 801bab6:	0002      	movs	r2, r0
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	1ad3      	subs	r3, r2, r3
 801babc:	4a4d      	ldr	r2, [pc, #308]	@ (801bbf4 <HAL_RCC_ClockConfig+0x274>)
 801babe:	4293      	cmp	r3, r2
 801bac0:	d901      	bls.n	801bac6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bac2:	2303      	movs	r3, #3
 801bac4:	e08f      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bac6:	4b4c      	ldr	r3, [pc, #304]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bac8:	68db      	ldr	r3, [r3, #12]
 801baca:	220c      	movs	r2, #12
 801bacc:	4013      	ands	r3, r2
 801bace:	2b0c      	cmp	r3, #12
 801bad0:	d1ef      	bne.n	801bab2 <HAL_RCC_ClockConfig+0x132>
 801bad2:	e024      	b.n	801bb1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	685b      	ldr	r3, [r3, #4]
 801bad8:	2b01      	cmp	r3, #1
 801bada:	d11b      	bne.n	801bb14 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801badc:	e009      	b.n	801baf2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bade:	f7f8 feef 	bl	80148c0 <HAL_GetTick>
 801bae2:	0002      	movs	r2, r0
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	1ad3      	subs	r3, r2, r3
 801bae8:	4a42      	ldr	r2, [pc, #264]	@ (801bbf4 <HAL_RCC_ClockConfig+0x274>)
 801baea:	4293      	cmp	r3, r2
 801baec:	d901      	bls.n	801baf2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801baee:	2303      	movs	r3, #3
 801baf0:	e079      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801baf2:	4b41      	ldr	r3, [pc, #260]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801baf4:	68db      	ldr	r3, [r3, #12]
 801baf6:	220c      	movs	r2, #12
 801baf8:	4013      	ands	r3, r2
 801bafa:	2b04      	cmp	r3, #4
 801bafc:	d1ef      	bne.n	801bade <HAL_RCC_ClockConfig+0x15e>
 801bafe:	e00e      	b.n	801bb1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb00:	f7f8 fede 	bl	80148c0 <HAL_GetTick>
 801bb04:	0002      	movs	r2, r0
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	1ad3      	subs	r3, r2, r3
 801bb0a:	4a3a      	ldr	r2, [pc, #232]	@ (801bbf4 <HAL_RCC_ClockConfig+0x274>)
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	d901      	bls.n	801bb14 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bb10:	2303      	movs	r3, #3
 801bb12:	e068      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bb14:	4b38      	ldr	r3, [pc, #224]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bb16:	68db      	ldr	r3, [r3, #12]
 801bb18:	220c      	movs	r2, #12
 801bb1a:	4013      	ands	r3, r2
 801bb1c:	d1f0      	bne.n	801bb00 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bb1e:	4b34      	ldr	r3, [pc, #208]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	2201      	movs	r2, #1
 801bb24:	4013      	ands	r3, r2
 801bb26:	683a      	ldr	r2, [r7, #0]
 801bb28:	429a      	cmp	r2, r3
 801bb2a:	d21e      	bcs.n	801bb6a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb2c:	4b30      	ldr	r3, [pc, #192]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	2201      	movs	r2, #1
 801bb32:	4393      	bics	r3, r2
 801bb34:	0019      	movs	r1, r3
 801bb36:	4b2e      	ldr	r3, [pc, #184]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801bb38:	683a      	ldr	r2, [r7, #0]
 801bb3a:	430a      	orrs	r2, r1
 801bb3c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bb3e:	f7f8 febf 	bl	80148c0 <HAL_GetTick>
 801bb42:	0003      	movs	r3, r0
 801bb44:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb46:	e009      	b.n	801bb5c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb48:	f7f8 feba 	bl	80148c0 <HAL_GetTick>
 801bb4c:	0002      	movs	r2, r0
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	1ad3      	subs	r3, r2, r3
 801bb52:	4a28      	ldr	r2, [pc, #160]	@ (801bbf4 <HAL_RCC_ClockConfig+0x274>)
 801bb54:	4293      	cmp	r3, r2
 801bb56:	d901      	bls.n	801bb5c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bb58:	2303      	movs	r3, #3
 801bb5a:	e044      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb5c:	4b24      	ldr	r3, [pc, #144]	@ (801bbf0 <HAL_RCC_ClockConfig+0x270>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	2201      	movs	r2, #1
 801bb62:	4013      	ands	r3, r2
 801bb64:	683a      	ldr	r2, [r7, #0]
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d1ee      	bne.n	801bb48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	2204      	movs	r2, #4
 801bb70:	4013      	ands	r3, r2
 801bb72:	d009      	beq.n	801bb88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bb74:	4b20      	ldr	r3, [pc, #128]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bb76:	68db      	ldr	r3, [r3, #12]
 801bb78:	4a20      	ldr	r2, [pc, #128]	@ (801bbfc <HAL_RCC_ClockConfig+0x27c>)
 801bb7a:	4013      	ands	r3, r2
 801bb7c:	0019      	movs	r1, r3
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	68da      	ldr	r2, [r3, #12]
 801bb82:	4b1d      	ldr	r3, [pc, #116]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bb84:	430a      	orrs	r2, r1
 801bb86:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	2208      	movs	r2, #8
 801bb8e:	4013      	ands	r3, r2
 801bb90:	d00a      	beq.n	801bba8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bb92:	4b19      	ldr	r3, [pc, #100]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bb94:	68db      	ldr	r3, [r3, #12]
 801bb96:	4a1a      	ldr	r2, [pc, #104]	@ (801bc00 <HAL_RCC_ClockConfig+0x280>)
 801bb98:	4013      	ands	r3, r2
 801bb9a:	0019      	movs	r1, r3
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	691b      	ldr	r3, [r3, #16]
 801bba0:	00da      	lsls	r2, r3, #3
 801bba2:	4b15      	ldr	r3, [pc, #84]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bba4:	430a      	orrs	r2, r1
 801bba6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bba8:	f000 f832 	bl	801bc10 <HAL_RCC_GetSysClockFreq>
 801bbac:	0001      	movs	r1, r0
 801bbae:	4b12      	ldr	r3, [pc, #72]	@ (801bbf8 <HAL_RCC_ClockConfig+0x278>)
 801bbb0:	68db      	ldr	r3, [r3, #12]
 801bbb2:	091b      	lsrs	r3, r3, #4
 801bbb4:	220f      	movs	r2, #15
 801bbb6:	4013      	ands	r3, r2
 801bbb8:	4a12      	ldr	r2, [pc, #72]	@ (801bc04 <HAL_RCC_ClockConfig+0x284>)
 801bbba:	5cd3      	ldrb	r3, [r2, r3]
 801bbbc:	000a      	movs	r2, r1
 801bbbe:	40da      	lsrs	r2, r3
 801bbc0:	4b11      	ldr	r3, [pc, #68]	@ (801bc08 <HAL_RCC_ClockConfig+0x288>)
 801bbc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bbc4:	4b11      	ldr	r3, [pc, #68]	@ (801bc0c <HAL_RCC_ClockConfig+0x28c>)
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	250b      	movs	r5, #11
 801bbca:	197c      	adds	r4, r7, r5
 801bbcc:	0018      	movs	r0, r3
 801bbce:	f7f8 fe31 	bl	8014834 <HAL_InitTick>
 801bbd2:	0003      	movs	r3, r0
 801bbd4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bbd6:	197b      	adds	r3, r7, r5
 801bbd8:	781b      	ldrb	r3, [r3, #0]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d002      	beq.n	801bbe4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bbde:	197b      	adds	r3, r7, r5
 801bbe0:	781b      	ldrb	r3, [r3, #0]
 801bbe2:	e000      	b.n	801bbe6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bbe4:	2300      	movs	r3, #0
}
 801bbe6:	0018      	movs	r0, r3
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	b004      	add	sp, #16
 801bbec:	bdb0      	pop	{r4, r5, r7, pc}
 801bbee:	46c0      	nop			@ (mov r8, r8)
 801bbf0:	40022000 	.word	0x40022000
 801bbf4:	00001388 	.word	0x00001388
 801bbf8:	40021000 	.word	0x40021000
 801bbfc:	fffff8ff 	.word	0xfffff8ff
 801bc00:	ffffc7ff 	.word	0xffffc7ff
 801bc04:	0802e650 	.word	0x0802e650
 801bc08:	200000ec 	.word	0x200000ec
 801bc0c:	200000fc 	.word	0x200000fc

0801bc10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bc10:	b5b0      	push	{r4, r5, r7, lr}
 801bc12:	b08e      	sub	sp, #56	@ 0x38
 801bc14:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bc16:	4b4c      	ldr	r3, [pc, #304]	@ (801bd48 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc18:	68db      	ldr	r3, [r3, #12]
 801bc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bc1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bc1e:	230c      	movs	r3, #12
 801bc20:	4013      	ands	r3, r2
 801bc22:	2b0c      	cmp	r3, #12
 801bc24:	d014      	beq.n	801bc50 <HAL_RCC_GetSysClockFreq+0x40>
 801bc26:	d900      	bls.n	801bc2a <HAL_RCC_GetSysClockFreq+0x1a>
 801bc28:	e07b      	b.n	801bd22 <HAL_RCC_GetSysClockFreq+0x112>
 801bc2a:	2b04      	cmp	r3, #4
 801bc2c:	d002      	beq.n	801bc34 <HAL_RCC_GetSysClockFreq+0x24>
 801bc2e:	2b08      	cmp	r3, #8
 801bc30:	d00b      	beq.n	801bc4a <HAL_RCC_GetSysClockFreq+0x3a>
 801bc32:	e076      	b.n	801bd22 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bc34:	4b44      	ldr	r3, [pc, #272]	@ (801bd48 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	2210      	movs	r2, #16
 801bc3a:	4013      	ands	r3, r2
 801bc3c:	d002      	beq.n	801bc44 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bc3e:	4b43      	ldr	r3, [pc, #268]	@ (801bd4c <HAL_RCC_GetSysClockFreq+0x13c>)
 801bc40:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bc42:	e07c      	b.n	801bd3e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bc44:	4b42      	ldr	r3, [pc, #264]	@ (801bd50 <HAL_RCC_GetSysClockFreq+0x140>)
 801bc46:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bc48:	e079      	b.n	801bd3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bc4a:	4b42      	ldr	r3, [pc, #264]	@ (801bd54 <HAL_RCC_GetSysClockFreq+0x144>)
 801bc4c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bc4e:	e076      	b.n	801bd3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc52:	0c9a      	lsrs	r2, r3, #18
 801bc54:	230f      	movs	r3, #15
 801bc56:	401a      	ands	r2, r3
 801bc58:	4b3f      	ldr	r3, [pc, #252]	@ (801bd58 <HAL_RCC_GetSysClockFreq+0x148>)
 801bc5a:	5c9b      	ldrb	r3, [r3, r2]
 801bc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc60:	0d9a      	lsrs	r2, r3, #22
 801bc62:	2303      	movs	r3, #3
 801bc64:	4013      	ands	r3, r2
 801bc66:	3301      	adds	r3, #1
 801bc68:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bc6a:	4b37      	ldr	r3, [pc, #220]	@ (801bd48 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc6c:	68da      	ldr	r2, [r3, #12]
 801bc6e:	2380      	movs	r3, #128	@ 0x80
 801bc70:	025b      	lsls	r3, r3, #9
 801bc72:	4013      	ands	r3, r2
 801bc74:	d01a      	beq.n	801bcac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc78:	61bb      	str	r3, [r7, #24]
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	61fb      	str	r3, [r7, #28]
 801bc7e:	4a35      	ldr	r2, [pc, #212]	@ (801bd54 <HAL_RCC_GetSysClockFreq+0x144>)
 801bc80:	2300      	movs	r3, #0
 801bc82:	69b8      	ldr	r0, [r7, #24]
 801bc84:	69f9      	ldr	r1, [r7, #28]
 801bc86:	f7e4 fc9b 	bl	80005c0 <__aeabi_lmul>
 801bc8a:	0002      	movs	r2, r0
 801bc8c:	000b      	movs	r3, r1
 801bc8e:	0010      	movs	r0, r2
 801bc90:	0019      	movs	r1, r3
 801bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc94:	613b      	str	r3, [r7, #16]
 801bc96:	2300      	movs	r3, #0
 801bc98:	617b      	str	r3, [r7, #20]
 801bc9a:	693a      	ldr	r2, [r7, #16]
 801bc9c:	697b      	ldr	r3, [r7, #20]
 801bc9e:	f7e4 fc6f 	bl	8000580 <__aeabi_uldivmod>
 801bca2:	0002      	movs	r2, r0
 801bca4:	000b      	movs	r3, r1
 801bca6:	0013      	movs	r3, r2
 801bca8:	637b      	str	r3, [r7, #52]	@ 0x34
 801bcaa:	e037      	b.n	801bd1c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bcac:	4b26      	ldr	r3, [pc, #152]	@ (801bd48 <HAL_RCC_GetSysClockFreq+0x138>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	2210      	movs	r2, #16
 801bcb2:	4013      	ands	r3, r2
 801bcb4:	d01a      	beq.n	801bcec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcb8:	60bb      	str	r3, [r7, #8]
 801bcba:	2300      	movs	r3, #0
 801bcbc:	60fb      	str	r3, [r7, #12]
 801bcbe:	4a23      	ldr	r2, [pc, #140]	@ (801bd4c <HAL_RCC_GetSysClockFreq+0x13c>)
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	68b8      	ldr	r0, [r7, #8]
 801bcc4:	68f9      	ldr	r1, [r7, #12]
 801bcc6:	f7e4 fc7b 	bl	80005c0 <__aeabi_lmul>
 801bcca:	0002      	movs	r2, r0
 801bccc:	000b      	movs	r3, r1
 801bcce:	0010      	movs	r0, r2
 801bcd0:	0019      	movs	r1, r3
 801bcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcd4:	603b      	str	r3, [r7, #0]
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	607b      	str	r3, [r7, #4]
 801bcda:	683a      	ldr	r2, [r7, #0]
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	f7e4 fc4f 	bl	8000580 <__aeabi_uldivmod>
 801bce2:	0002      	movs	r2, r0
 801bce4:	000b      	movs	r3, r1
 801bce6:	0013      	movs	r3, r2
 801bce8:	637b      	str	r3, [r7, #52]	@ 0x34
 801bcea:	e017      	b.n	801bd1c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcee:	0018      	movs	r0, r3
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	0019      	movs	r1, r3
 801bcf4:	4a16      	ldr	r2, [pc, #88]	@ (801bd50 <HAL_RCC_GetSysClockFreq+0x140>)
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	f7e4 fc62 	bl	80005c0 <__aeabi_lmul>
 801bcfc:	0002      	movs	r2, r0
 801bcfe:	000b      	movs	r3, r1
 801bd00:	0010      	movs	r0, r2
 801bd02:	0019      	movs	r1, r3
 801bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd06:	001c      	movs	r4, r3
 801bd08:	2300      	movs	r3, #0
 801bd0a:	001d      	movs	r5, r3
 801bd0c:	0022      	movs	r2, r4
 801bd0e:	002b      	movs	r3, r5
 801bd10:	f7e4 fc36 	bl	8000580 <__aeabi_uldivmod>
 801bd14:	0002      	movs	r2, r0
 801bd16:	000b      	movs	r3, r1
 801bd18:	0013      	movs	r3, r2
 801bd1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd1e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd20:	e00d      	b.n	801bd3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bd22:	4b09      	ldr	r3, [pc, #36]	@ (801bd48 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	0b5b      	lsrs	r3, r3, #13
 801bd28:	2207      	movs	r2, #7
 801bd2a:	4013      	ands	r3, r2
 801bd2c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801bd2e:	6a3b      	ldr	r3, [r7, #32]
 801bd30:	3301      	adds	r3, #1
 801bd32:	2280      	movs	r2, #128	@ 0x80
 801bd34:	0212      	lsls	r2, r2, #8
 801bd36:	409a      	lsls	r2, r3
 801bd38:	0013      	movs	r3, r2
 801bd3a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd3c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801bd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801bd40:	0018      	movs	r0, r3
 801bd42:	46bd      	mov	sp, r7
 801bd44:	b00e      	add	sp, #56	@ 0x38
 801bd46:	bdb0      	pop	{r4, r5, r7, pc}
 801bd48:	40021000 	.word	0x40021000
 801bd4c:	003d0900 	.word	0x003d0900
 801bd50:	00f42400 	.word	0x00f42400
 801bd54:	007a1200 	.word	0x007a1200
 801bd58:	0802e668 	.word	0x0802e668

0801bd5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bd60:	4b02      	ldr	r3, [pc, #8]	@ (801bd6c <HAL_RCC_GetHCLKFreq+0x10>)
 801bd62:	681b      	ldr	r3, [r3, #0]
}
 801bd64:	0018      	movs	r0, r3
 801bd66:	46bd      	mov	sp, r7
 801bd68:	bd80      	pop	{r7, pc}
 801bd6a:	46c0      	nop			@ (mov r8, r8)
 801bd6c:	200000ec 	.word	0x200000ec

0801bd70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801bd74:	f7ff fff2 	bl	801bd5c <HAL_RCC_GetHCLKFreq>
 801bd78:	0001      	movs	r1, r0
 801bd7a:	4b06      	ldr	r3, [pc, #24]	@ (801bd94 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bd7c:	68db      	ldr	r3, [r3, #12]
 801bd7e:	0a1b      	lsrs	r3, r3, #8
 801bd80:	2207      	movs	r2, #7
 801bd82:	4013      	ands	r3, r2
 801bd84:	4a04      	ldr	r2, [pc, #16]	@ (801bd98 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bd86:	5cd3      	ldrb	r3, [r2, r3]
 801bd88:	40d9      	lsrs	r1, r3
 801bd8a:	000b      	movs	r3, r1
}
 801bd8c:	0018      	movs	r0, r3
 801bd8e:	46bd      	mov	sp, r7
 801bd90:	bd80      	pop	{r7, pc}
 801bd92:	46c0      	nop			@ (mov r8, r8)
 801bd94:	40021000 	.word	0x40021000
 801bd98:	0802e660 	.word	0x0802e660

0801bd9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801bda0:	f7ff ffdc 	bl	801bd5c <HAL_RCC_GetHCLKFreq>
 801bda4:	0001      	movs	r1, r0
 801bda6:	4b06      	ldr	r3, [pc, #24]	@ (801bdc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bda8:	68db      	ldr	r3, [r3, #12]
 801bdaa:	0adb      	lsrs	r3, r3, #11
 801bdac:	2207      	movs	r2, #7
 801bdae:	4013      	ands	r3, r2
 801bdb0:	4a04      	ldr	r2, [pc, #16]	@ (801bdc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bdb2:	5cd3      	ldrb	r3, [r2, r3]
 801bdb4:	40d9      	lsrs	r1, r3
 801bdb6:	000b      	movs	r3, r1
}
 801bdb8:	0018      	movs	r0, r3
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	bd80      	pop	{r7, pc}
 801bdbe:	46c0      	nop			@ (mov r8, r8)
 801bdc0:	40021000 	.word	0x40021000
 801bdc4:	0802e660 	.word	0x0802e660

0801bdc8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b086      	sub	sp, #24
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801bdd0:	2017      	movs	r0, #23
 801bdd2:	183b      	adds	r3, r7, r0
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	2220      	movs	r2, #32
 801bdde:	4013      	ands	r3, r2
 801bde0:	d100      	bne.n	801bde4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801bde2:	e0c7      	b.n	801bf74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bde4:	4b9b      	ldr	r3, [pc, #620]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bde6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bde8:	2380      	movs	r3, #128	@ 0x80
 801bdea:	055b      	lsls	r3, r3, #21
 801bdec:	4013      	ands	r3, r2
 801bdee:	d109      	bne.n	801be04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bdf0:	4b98      	ldr	r3, [pc, #608]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bdf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bdf4:	4b97      	ldr	r3, [pc, #604]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bdf6:	2180      	movs	r1, #128	@ 0x80
 801bdf8:	0549      	lsls	r1, r1, #21
 801bdfa:	430a      	orrs	r2, r1
 801bdfc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801bdfe:	183b      	adds	r3, r7, r0
 801be00:	2201      	movs	r2, #1
 801be02:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be04:	4b94      	ldr	r3, [pc, #592]	@ (801c058 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be06:	681a      	ldr	r2, [r3, #0]
 801be08:	2380      	movs	r3, #128	@ 0x80
 801be0a:	005b      	lsls	r3, r3, #1
 801be0c:	4013      	ands	r3, r2
 801be0e:	d11a      	bne.n	801be46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be10:	4b91      	ldr	r3, [pc, #580]	@ (801c058 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be12:	681a      	ldr	r2, [r3, #0]
 801be14:	4b90      	ldr	r3, [pc, #576]	@ (801c058 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be16:	2180      	movs	r1, #128	@ 0x80
 801be18:	0049      	lsls	r1, r1, #1
 801be1a:	430a      	orrs	r2, r1
 801be1c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801be1e:	f7f8 fd4f 	bl	80148c0 <HAL_GetTick>
 801be22:	0003      	movs	r3, r0
 801be24:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be26:	e008      	b.n	801be3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801be28:	f7f8 fd4a 	bl	80148c0 <HAL_GetTick>
 801be2c:	0002      	movs	r2, r0
 801be2e:	693b      	ldr	r3, [r7, #16]
 801be30:	1ad3      	subs	r3, r2, r3
 801be32:	2b64      	cmp	r3, #100	@ 0x64
 801be34:	d901      	bls.n	801be3a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801be36:	2303      	movs	r3, #3
 801be38:	e107      	b.n	801c04a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be3a:	4b87      	ldr	r3, [pc, #540]	@ (801c058 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be3c:	681a      	ldr	r2, [r3, #0]
 801be3e:	2380      	movs	r3, #128	@ 0x80
 801be40:	005b      	lsls	r3, r3, #1
 801be42:	4013      	ands	r3, r2
 801be44:	d0f0      	beq.n	801be28 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801be46:	4b83      	ldr	r3, [pc, #524]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	23c0      	movs	r3, #192	@ 0xc0
 801be4c:	039b      	lsls	r3, r3, #14
 801be4e:	4013      	ands	r3, r2
 801be50:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	685a      	ldr	r2, [r3, #4]
 801be56:	23c0      	movs	r3, #192	@ 0xc0
 801be58:	039b      	lsls	r3, r3, #14
 801be5a:	4013      	ands	r3, r2
 801be5c:	68fa      	ldr	r2, [r7, #12]
 801be5e:	429a      	cmp	r2, r3
 801be60:	d013      	beq.n	801be8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	685a      	ldr	r2, [r3, #4]
 801be66:	23c0      	movs	r3, #192	@ 0xc0
 801be68:	029b      	lsls	r3, r3, #10
 801be6a:	401a      	ands	r2, r3
 801be6c:	23c0      	movs	r3, #192	@ 0xc0
 801be6e:	029b      	lsls	r3, r3, #10
 801be70:	429a      	cmp	r2, r3
 801be72:	d10a      	bne.n	801be8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801be74:	4b77      	ldr	r3, [pc, #476]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be76:	681a      	ldr	r2, [r3, #0]
 801be78:	2380      	movs	r3, #128	@ 0x80
 801be7a:	029b      	lsls	r3, r3, #10
 801be7c:	401a      	ands	r2, r3
 801be7e:	2380      	movs	r3, #128	@ 0x80
 801be80:	029b      	lsls	r3, r3, #10
 801be82:	429a      	cmp	r2, r3
 801be84:	d101      	bne.n	801be8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801be86:	2301      	movs	r3, #1
 801be88:	e0df      	b.n	801c04a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801be8a:	4b72      	ldr	r3, [pc, #456]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801be8e:	23c0      	movs	r3, #192	@ 0xc0
 801be90:	029b      	lsls	r3, r3, #10
 801be92:	4013      	ands	r3, r2
 801be94:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d03b      	beq.n	801bf14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	685a      	ldr	r2, [r3, #4]
 801bea0:	23c0      	movs	r3, #192	@ 0xc0
 801bea2:	029b      	lsls	r3, r3, #10
 801bea4:	4013      	ands	r3, r2
 801bea6:	68fa      	ldr	r2, [r7, #12]
 801bea8:	429a      	cmp	r2, r3
 801beaa:	d033      	beq.n	801bf14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	2220      	movs	r2, #32
 801beb2:	4013      	ands	r3, r2
 801beb4:	d02e      	beq.n	801bf14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801beb6:	4b67      	ldr	r3, [pc, #412]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801beba:	4a68      	ldr	r2, [pc, #416]	@ (801c05c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bebc:	4013      	ands	r3, r2
 801bebe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801bec0:	4b64      	ldr	r3, [pc, #400]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bec2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bec4:	4b63      	ldr	r3, [pc, #396]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bec6:	2180      	movs	r1, #128	@ 0x80
 801bec8:	0309      	lsls	r1, r1, #12
 801beca:	430a      	orrs	r2, r1
 801becc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801bece:	4b61      	ldr	r3, [pc, #388]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bed2:	4b60      	ldr	r3, [pc, #384]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bed4:	4962      	ldr	r1, [pc, #392]	@ (801c060 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bed6:	400a      	ands	r2, r1
 801bed8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801beda:	4b5e      	ldr	r3, [pc, #376]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bedc:	68fa      	ldr	r2, [r7, #12]
 801bede:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bee0:	68fa      	ldr	r2, [r7, #12]
 801bee2:	2380      	movs	r3, #128	@ 0x80
 801bee4:	005b      	lsls	r3, r3, #1
 801bee6:	4013      	ands	r3, r2
 801bee8:	d014      	beq.n	801bf14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801beea:	f7f8 fce9 	bl	80148c0 <HAL_GetTick>
 801beee:	0003      	movs	r3, r0
 801bef0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bef2:	e009      	b.n	801bf08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bef4:	f7f8 fce4 	bl	80148c0 <HAL_GetTick>
 801bef8:	0002      	movs	r2, r0
 801befa:	693b      	ldr	r3, [r7, #16]
 801befc:	1ad3      	subs	r3, r2, r3
 801befe:	4a59      	ldr	r2, [pc, #356]	@ (801c064 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801bf00:	4293      	cmp	r3, r2
 801bf02:	d901      	bls.n	801bf08 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bf04:	2303      	movs	r3, #3
 801bf06:	e0a0      	b.n	801c04a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf08:	4b52      	ldr	r3, [pc, #328]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf0c:	2380      	movs	r3, #128	@ 0x80
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	4013      	ands	r3, r2
 801bf12:	d0ef      	beq.n	801bef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	2220      	movs	r2, #32
 801bf1a:	4013      	ands	r3, r2
 801bf1c:	d01f      	beq.n	801bf5e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	685a      	ldr	r2, [r3, #4]
 801bf22:	23c0      	movs	r3, #192	@ 0xc0
 801bf24:	029b      	lsls	r3, r3, #10
 801bf26:	401a      	ands	r2, r3
 801bf28:	23c0      	movs	r3, #192	@ 0xc0
 801bf2a:	029b      	lsls	r3, r3, #10
 801bf2c:	429a      	cmp	r2, r3
 801bf2e:	d10c      	bne.n	801bf4a <HAL_RCCEx_PeriphCLKConfig+0x182>
 801bf30:	4b48      	ldr	r3, [pc, #288]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	4a4c      	ldr	r2, [pc, #304]	@ (801c068 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801bf36:	4013      	ands	r3, r2
 801bf38:	0019      	movs	r1, r3
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	685a      	ldr	r2, [r3, #4]
 801bf3e:	23c0      	movs	r3, #192	@ 0xc0
 801bf40:	039b      	lsls	r3, r3, #14
 801bf42:	401a      	ands	r2, r3
 801bf44:	4b43      	ldr	r3, [pc, #268]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf46:	430a      	orrs	r2, r1
 801bf48:	601a      	str	r2, [r3, #0]
 801bf4a:	4b42      	ldr	r3, [pc, #264]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	685a      	ldr	r2, [r3, #4]
 801bf52:	23c0      	movs	r3, #192	@ 0xc0
 801bf54:	029b      	lsls	r3, r3, #10
 801bf56:	401a      	ands	r2, r3
 801bf58:	4b3e      	ldr	r3, [pc, #248]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf5a:	430a      	orrs	r2, r1
 801bf5c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bf5e:	2317      	movs	r3, #23
 801bf60:	18fb      	adds	r3, r7, r3
 801bf62:	781b      	ldrb	r3, [r3, #0]
 801bf64:	2b01      	cmp	r3, #1
 801bf66:	d105      	bne.n	801bf74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bf68:	4b3a      	ldr	r3, [pc, #232]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bf6c:	4b39      	ldr	r3, [pc, #228]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf6e:	493f      	ldr	r1, [pc, #252]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801bf70:	400a      	ands	r2, r1
 801bf72:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	2201      	movs	r2, #1
 801bf7a:	4013      	ands	r3, r2
 801bf7c:	d009      	beq.n	801bf92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bf7e:	4b35      	ldr	r3, [pc, #212]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf82:	2203      	movs	r2, #3
 801bf84:	4393      	bics	r3, r2
 801bf86:	0019      	movs	r1, r3
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	689a      	ldr	r2, [r3, #8]
 801bf8c:	4b31      	ldr	r3, [pc, #196]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf8e:	430a      	orrs	r2, r1
 801bf90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	2202      	movs	r2, #2
 801bf98:	4013      	ands	r3, r2
 801bf9a:	d009      	beq.n	801bfb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bf9c:	4b2d      	ldr	r3, [pc, #180]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfa0:	220c      	movs	r2, #12
 801bfa2:	4393      	bics	r3, r2
 801bfa4:	0019      	movs	r1, r3
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	68da      	ldr	r2, [r3, #12]
 801bfaa:	4b2a      	ldr	r3, [pc, #168]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfac:	430a      	orrs	r2, r1
 801bfae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	2204      	movs	r2, #4
 801bfb6:	4013      	ands	r3, r2
 801bfb8:	d009      	beq.n	801bfce <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bfba:	4b26      	ldr	r3, [pc, #152]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfbe:	4a2c      	ldr	r2, [pc, #176]	@ (801c070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801bfc0:	4013      	ands	r3, r2
 801bfc2:	0019      	movs	r1, r3
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	691a      	ldr	r2, [r3, #16]
 801bfc8:	4b22      	ldr	r3, [pc, #136]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfca:	430a      	orrs	r2, r1
 801bfcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	2208      	movs	r2, #8
 801bfd4:	4013      	ands	r3, r2
 801bfd6:	d009      	beq.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bfd8:	4b1e      	ldr	r3, [pc, #120]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfdc:	4a25      	ldr	r2, [pc, #148]	@ (801c074 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801bfde:	4013      	ands	r3, r2
 801bfe0:	0019      	movs	r1, r3
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	695a      	ldr	r2, [r3, #20]
 801bfe6:	4b1b      	ldr	r3, [pc, #108]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfe8:	430a      	orrs	r2, r1
 801bfea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	681a      	ldr	r2, [r3, #0]
 801bff0:	2380      	movs	r3, #128	@ 0x80
 801bff2:	005b      	lsls	r3, r3, #1
 801bff4:	4013      	ands	r3, r2
 801bff6:	d009      	beq.n	801c00c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801bff8:	4b16      	ldr	r3, [pc, #88]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bffc:	4a17      	ldr	r2, [pc, #92]	@ (801c05c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bffe:	4013      	ands	r3, r2
 801c000:	0019      	movs	r1, r3
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	699a      	ldr	r2, [r3, #24]
 801c006:	4b13      	ldr	r3, [pc, #76]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c008:	430a      	orrs	r2, r1
 801c00a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	2240      	movs	r2, #64	@ 0x40
 801c012:	4013      	ands	r3, r2
 801c014:	d009      	beq.n	801c02a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c016:	4b0f      	ldr	r3, [pc, #60]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c01a:	4a17      	ldr	r2, [pc, #92]	@ (801c078 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c01c:	4013      	ands	r3, r2
 801c01e:	0019      	movs	r1, r3
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	6a1a      	ldr	r2, [r3, #32]
 801c024:	4b0b      	ldr	r3, [pc, #44]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c026:	430a      	orrs	r2, r1
 801c028:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	2280      	movs	r2, #128	@ 0x80
 801c030:	4013      	ands	r3, r2
 801c032:	d009      	beq.n	801c048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c034:	4b07      	ldr	r3, [pc, #28]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c038:	4a10      	ldr	r2, [pc, #64]	@ (801c07c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c03a:	4013      	ands	r3, r2
 801c03c:	0019      	movs	r1, r3
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	69da      	ldr	r2, [r3, #28]
 801c042:	4b04      	ldr	r3, [pc, #16]	@ (801c054 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c044:	430a      	orrs	r2, r1
 801c046:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c048:	2300      	movs	r3, #0
}
 801c04a:	0018      	movs	r0, r3
 801c04c:	46bd      	mov	sp, r7
 801c04e:	b006      	add	sp, #24
 801c050:	bd80      	pop	{r7, pc}
 801c052:	46c0      	nop			@ (mov r8, r8)
 801c054:	40021000 	.word	0x40021000
 801c058:	40007000 	.word	0x40007000
 801c05c:	fffcffff 	.word	0xfffcffff
 801c060:	fff7ffff 	.word	0xfff7ffff
 801c064:	00001388 	.word	0x00001388
 801c068:	ffcfffff 	.word	0xffcfffff
 801c06c:	efffffff 	.word	0xefffffff
 801c070:	fffff3ff 	.word	0xfffff3ff
 801c074:	ffffcfff 	.word	0xffffcfff
 801c078:	fbffffff 	.word	0xfbffffff
 801c07c:	fff3ffff 	.word	0xfff3ffff

0801c080 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c080:	b5b0      	push	{r4, r5, r7, lr}
 801c082:	b084      	sub	sp, #16
 801c084:	af00      	add	r7, sp, #0
 801c086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c088:	230f      	movs	r3, #15
 801c08a:	18fb      	adds	r3, r7, r3
 801c08c:	2201      	movs	r2, #1
 801c08e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d101      	bne.n	801c09a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c096:	2301      	movs	r3, #1
 801c098:	e088      	b.n	801c1ac <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	2221      	movs	r2, #33	@ 0x21
 801c09e:	5c9b      	ldrb	r3, [r3, r2]
 801c0a0:	b2db      	uxtb	r3, r3
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d107      	bne.n	801c0b6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	2220      	movs	r2, #32
 801c0aa:	2100      	movs	r1, #0
 801c0ac:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	0018      	movs	r0, r3
 801c0b2:	f7f2 fa2d 	bl	800e510 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2221      	movs	r2, #33	@ 0x21
 801c0ba:	2102      	movs	r1, #2
 801c0bc:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	68db      	ldr	r3, [r3, #12]
 801c0c4:	2210      	movs	r2, #16
 801c0c6:	4013      	ands	r3, r2
 801c0c8:	2b10      	cmp	r3, #16
 801c0ca:	d05f      	beq.n	801c18c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	22ca      	movs	r2, #202	@ 0xca
 801c0d2:	625a      	str	r2, [r3, #36]	@ 0x24
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	2253      	movs	r2, #83	@ 0x53
 801c0da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c0dc:	250f      	movs	r5, #15
 801c0de:	197c      	adds	r4, r7, r5
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	0018      	movs	r0, r3
 801c0e4:	f000 fa99 	bl	801c61a <RTC_EnterInitMode>
 801c0e8:	0003      	movs	r3, r0
 801c0ea:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c0ec:	0028      	movs	r0, r5
 801c0ee:	183b      	adds	r3, r7, r0
 801c0f0:	781b      	ldrb	r3, [r3, #0]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d12c      	bne.n	801c150 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	689a      	ldr	r2, [r3, #8]
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	492c      	ldr	r1, [pc, #176]	@ (801c1b4 <HAL_RTC_Init+0x134>)
 801c102:	400a      	ands	r2, r1
 801c104:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	6899      	ldr	r1, [r3, #8]
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	685a      	ldr	r2, [r3, #4]
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	691b      	ldr	r3, [r3, #16]
 801c114:	431a      	orrs	r2, r3
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	699b      	ldr	r3, [r3, #24]
 801c11a:	431a      	orrs	r2, r3
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	430a      	orrs	r2, r1
 801c122:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	687a      	ldr	r2, [r7, #4]
 801c12a:	68d2      	ldr	r2, [r2, #12]
 801c12c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	6919      	ldr	r1, [r3, #16]
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	689b      	ldr	r3, [r3, #8]
 801c138:	041a      	lsls	r2, r3, #16
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	430a      	orrs	r2, r1
 801c140:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c142:	183c      	adds	r4, r7, r0
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	0018      	movs	r0, r3
 801c148:	f000 faab 	bl	801c6a2 <RTC_ExitInitMode>
 801c14c:	0003      	movs	r3, r0
 801c14e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c150:	230f      	movs	r3, #15
 801c152:	18fb      	adds	r3, r7, r3
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d113      	bne.n	801c182 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	2103      	movs	r1, #3
 801c166:	438a      	bics	r2, r1
 801c168:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	69da      	ldr	r2, [r3, #28]
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	695b      	ldr	r3, [r3, #20]
 801c178:	431a      	orrs	r2, r3
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	430a      	orrs	r2, r1
 801c180:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	22ff      	movs	r2, #255	@ 0xff
 801c188:	625a      	str	r2, [r3, #36]	@ 0x24
 801c18a:	e003      	b.n	801c194 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c18c:	230f      	movs	r3, #15
 801c18e:	18fb      	adds	r3, r7, r3
 801c190:	2200      	movs	r2, #0
 801c192:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c194:	230f      	movs	r3, #15
 801c196:	18fb      	adds	r3, r7, r3
 801c198:	781b      	ldrb	r3, [r3, #0]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d103      	bne.n	801c1a6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	2221      	movs	r2, #33	@ 0x21
 801c1a2:	2101      	movs	r1, #1
 801c1a4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c1a6:	230f      	movs	r3, #15
 801c1a8:	18fb      	adds	r3, r7, r3
 801c1aa:	781b      	ldrb	r3, [r3, #0]
}
 801c1ac:	0018      	movs	r0, r3
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	b004      	add	sp, #16
 801c1b2:	bdb0      	pop	{r4, r5, r7, pc}
 801c1b4:	ff8fffbf 	.word	0xff8fffbf

0801c1b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c1b8:	b5b0      	push	{r4, r5, r7, lr}
 801c1ba:	b086      	sub	sp, #24
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	60f8      	str	r0, [r7, #12]
 801c1c0:	60b9      	str	r1, [r7, #8]
 801c1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	2220      	movs	r2, #32
 801c1cc:	5c9b      	ldrb	r3, [r3, r2]
 801c1ce:	2b01      	cmp	r3, #1
 801c1d0:	d101      	bne.n	801c1d6 <HAL_RTC_SetTime+0x1e>
 801c1d2:	2302      	movs	r3, #2
 801c1d4:	e092      	b.n	801c2fc <HAL_RTC_SetTime+0x144>
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	2220      	movs	r2, #32
 801c1da:	2101      	movs	r1, #1
 801c1dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	2221      	movs	r2, #33	@ 0x21
 801c1e2:	2102      	movs	r1, #2
 801c1e4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d125      	bne.n	801c238 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	689b      	ldr	r3, [r3, #8]
 801c1f2:	2240      	movs	r2, #64	@ 0x40
 801c1f4:	4013      	ands	r3, r2
 801c1f6:	d102      	bne.n	801c1fe <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	781b      	ldrb	r3, [r3, #0]
 801c202:	0018      	movs	r0, r3
 801c204:	f000 fa77 	bl	801c6f6 <RTC_ByteToBcd2>
 801c208:	0003      	movs	r3, r0
 801c20a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c20c:	68bb      	ldr	r3, [r7, #8]
 801c20e:	785b      	ldrb	r3, [r3, #1]
 801c210:	0018      	movs	r0, r3
 801c212:	f000 fa70 	bl	801c6f6 <RTC_ByteToBcd2>
 801c216:	0003      	movs	r3, r0
 801c218:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c21a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c21c:	68bb      	ldr	r3, [r7, #8]
 801c21e:	789b      	ldrb	r3, [r3, #2]
 801c220:	0018      	movs	r0, r3
 801c222:	f000 fa68 	bl	801c6f6 <RTC_ByteToBcd2>
 801c226:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c228:	0022      	movs	r2, r4
 801c22a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c22c:	68bb      	ldr	r3, [r7, #8]
 801c22e:	78db      	ldrb	r3, [r3, #3]
 801c230:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c232:	4313      	orrs	r3, r2
 801c234:	617b      	str	r3, [r7, #20]
 801c236:	e017      	b.n	801c268 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	689b      	ldr	r3, [r3, #8]
 801c23e:	2240      	movs	r2, #64	@ 0x40
 801c240:	4013      	ands	r3, r2
 801c242:	d102      	bne.n	801c24a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	2200      	movs	r2, #0
 801c248:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c24a:	68bb      	ldr	r3, [r7, #8]
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c250:	68bb      	ldr	r3, [r7, #8]
 801c252:	785b      	ldrb	r3, [r3, #1]
 801c254:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c256:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c258:	68ba      	ldr	r2, [r7, #8]
 801c25a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c25c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c25e:	68bb      	ldr	r3, [r7, #8]
 801c260:	78db      	ldrb	r3, [r3, #3]
 801c262:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c264:	4313      	orrs	r3, r2
 801c266:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	22ca      	movs	r2, #202	@ 0xca
 801c26e:	625a      	str	r2, [r3, #36]	@ 0x24
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	2253      	movs	r2, #83	@ 0x53
 801c276:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c278:	2513      	movs	r5, #19
 801c27a:	197c      	adds	r4, r7, r5
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	0018      	movs	r0, r3
 801c280:	f000 f9cb 	bl	801c61a <RTC_EnterInitMode>
 801c284:	0003      	movs	r3, r0
 801c286:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c288:	0028      	movs	r0, r5
 801c28a:	183b      	adds	r3, r7, r0
 801c28c:	781b      	ldrb	r3, [r3, #0]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d120      	bne.n	801c2d4 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	697a      	ldr	r2, [r7, #20]
 801c298:	491a      	ldr	r1, [pc, #104]	@ (801c304 <HAL_RTC_SetTime+0x14c>)
 801c29a:	400a      	ands	r2, r1
 801c29c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	689a      	ldr	r2, [r3, #8]
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4917      	ldr	r1, [pc, #92]	@ (801c308 <HAL_RTC_SetTime+0x150>)
 801c2aa:	400a      	ands	r2, r1
 801c2ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	6899      	ldr	r1, [r3, #8]
 801c2b4:	68bb      	ldr	r3, [r7, #8]
 801c2b6:	68da      	ldr	r2, [r3, #12]
 801c2b8:	68bb      	ldr	r3, [r7, #8]
 801c2ba:	691b      	ldr	r3, [r3, #16]
 801c2bc:	431a      	orrs	r2, r3
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	430a      	orrs	r2, r1
 801c2c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c2c6:	183c      	adds	r4, r7, r0
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	0018      	movs	r0, r3
 801c2cc:	f000 f9e9 	bl	801c6a2 <RTC_ExitInitMode>
 801c2d0:	0003      	movs	r3, r0
 801c2d2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c2d4:	2313      	movs	r3, #19
 801c2d6:	18fb      	adds	r3, r7, r3
 801c2d8:	781b      	ldrb	r3, [r3, #0]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d103      	bne.n	801c2e6 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	2221      	movs	r2, #33	@ 0x21
 801c2e2:	2101      	movs	r1, #1
 801c2e4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	22ff      	movs	r2, #255	@ 0xff
 801c2ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	2220      	movs	r2, #32
 801c2f2:	2100      	movs	r1, #0
 801c2f4:	5499      	strb	r1, [r3, r2]

  return status;
 801c2f6:	2313      	movs	r3, #19
 801c2f8:	18fb      	adds	r3, r7, r3
 801c2fa:	781b      	ldrb	r3, [r3, #0]
}
 801c2fc:	0018      	movs	r0, r3
 801c2fe:	46bd      	mov	sp, r7
 801c300:	b006      	add	sp, #24
 801c302:	bdb0      	pop	{r4, r5, r7, pc}
 801c304:	007f7f7f 	.word	0x007f7f7f
 801c308:	fffbffff 	.word	0xfffbffff

0801c30c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c30c:	b580      	push	{r7, lr}
 801c30e:	b086      	sub	sp, #24
 801c310:	af00      	add	r7, sp, #0
 801c312:	60f8      	str	r0, [r7, #12]
 801c314:	60b9      	str	r1, [r7, #8]
 801c316:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c318:	2300      	movs	r3, #0
 801c31a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c322:	68bb      	ldr	r3, [r7, #8]
 801c324:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	691b      	ldr	r3, [r3, #16]
 801c32c:	045b      	lsls	r3, r3, #17
 801c32e:	0c5a      	lsrs	r2, r3, #17
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	4a22      	ldr	r2, [pc, #136]	@ (801c3c4 <HAL_RTC_GetTime+0xb8>)
 801c33c:	4013      	ands	r3, r2
 801c33e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c340:	697b      	ldr	r3, [r7, #20]
 801c342:	0c1b      	lsrs	r3, r3, #16
 801c344:	b2db      	uxtb	r3, r3
 801c346:	223f      	movs	r2, #63	@ 0x3f
 801c348:	4013      	ands	r3, r2
 801c34a:	b2da      	uxtb	r2, r3
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c350:	697b      	ldr	r3, [r7, #20]
 801c352:	0a1b      	lsrs	r3, r3, #8
 801c354:	b2db      	uxtb	r3, r3
 801c356:	227f      	movs	r2, #127	@ 0x7f
 801c358:	4013      	ands	r3, r2
 801c35a:	b2da      	uxtb	r2, r3
 801c35c:	68bb      	ldr	r3, [r7, #8]
 801c35e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c360:	697b      	ldr	r3, [r7, #20]
 801c362:	b2db      	uxtb	r3, r3
 801c364:	227f      	movs	r2, #127	@ 0x7f
 801c366:	4013      	ands	r3, r2
 801c368:	b2da      	uxtb	r2, r3
 801c36a:	68bb      	ldr	r3, [r7, #8]
 801c36c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c36e:	697b      	ldr	r3, [r7, #20]
 801c370:	0d9b      	lsrs	r3, r3, #22
 801c372:	b2db      	uxtb	r3, r3
 801c374:	2201      	movs	r2, #1
 801c376:	4013      	ands	r3, r2
 801c378:	b2da      	uxtb	r2, r3
 801c37a:	68bb      	ldr	r3, [r7, #8]
 801c37c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d11a      	bne.n	801c3ba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	781b      	ldrb	r3, [r3, #0]
 801c388:	0018      	movs	r0, r3
 801c38a:	f000 f9d5 	bl	801c738 <RTC_Bcd2ToByte>
 801c38e:	0003      	movs	r3, r0
 801c390:	001a      	movs	r2, r3
 801c392:	68bb      	ldr	r3, [r7, #8]
 801c394:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c396:	68bb      	ldr	r3, [r7, #8]
 801c398:	785b      	ldrb	r3, [r3, #1]
 801c39a:	0018      	movs	r0, r3
 801c39c:	f000 f9cc 	bl	801c738 <RTC_Bcd2ToByte>
 801c3a0:	0003      	movs	r3, r0
 801c3a2:	001a      	movs	r2, r3
 801c3a4:	68bb      	ldr	r3, [r7, #8]
 801c3a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c3a8:	68bb      	ldr	r3, [r7, #8]
 801c3aa:	789b      	ldrb	r3, [r3, #2]
 801c3ac:	0018      	movs	r0, r3
 801c3ae:	f000 f9c3 	bl	801c738 <RTC_Bcd2ToByte>
 801c3b2:	0003      	movs	r3, r0
 801c3b4:	001a      	movs	r2, r3
 801c3b6:	68bb      	ldr	r3, [r7, #8]
 801c3b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c3ba:	2300      	movs	r3, #0
}
 801c3bc:	0018      	movs	r0, r3
 801c3be:	46bd      	mov	sp, r7
 801c3c0:	b006      	add	sp, #24
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	007f7f7f 	.word	0x007f7f7f

0801c3c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c3c8:	b5b0      	push	{r4, r5, r7, lr}
 801c3ca:	b086      	sub	sp, #24
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	60f8      	str	r0, [r7, #12]
 801c3d0:	60b9      	str	r1, [r7, #8]
 801c3d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2220      	movs	r2, #32
 801c3dc:	5c9b      	ldrb	r3, [r3, r2]
 801c3de:	2b01      	cmp	r3, #1
 801c3e0:	d101      	bne.n	801c3e6 <HAL_RTC_SetDate+0x1e>
 801c3e2:	2302      	movs	r3, #2
 801c3e4:	e07e      	b.n	801c4e4 <HAL_RTC_SetDate+0x11c>
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	2220      	movs	r2, #32
 801c3ea:	2101      	movs	r1, #1
 801c3ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	2221      	movs	r2, #33	@ 0x21
 801c3f2:	2102      	movs	r1, #2
 801c3f4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d10e      	bne.n	801c41a <HAL_RTC_SetDate+0x52>
 801c3fc:	68bb      	ldr	r3, [r7, #8]
 801c3fe:	785b      	ldrb	r3, [r3, #1]
 801c400:	001a      	movs	r2, r3
 801c402:	2310      	movs	r3, #16
 801c404:	4013      	ands	r3, r2
 801c406:	d008      	beq.n	801c41a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c408:	68bb      	ldr	r3, [r7, #8]
 801c40a:	785b      	ldrb	r3, [r3, #1]
 801c40c:	2210      	movs	r2, #16
 801c40e:	4393      	bics	r3, r2
 801c410:	b2db      	uxtb	r3, r3
 801c412:	330a      	adds	r3, #10
 801c414:	b2da      	uxtb	r2, r3
 801c416:	68bb      	ldr	r3, [r7, #8]
 801c418:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d11c      	bne.n	801c45a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c420:	68bb      	ldr	r3, [r7, #8]
 801c422:	78db      	ldrb	r3, [r3, #3]
 801c424:	0018      	movs	r0, r3
 801c426:	f000 f966 	bl	801c6f6 <RTC_ByteToBcd2>
 801c42a:	0003      	movs	r3, r0
 801c42c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c42e:	68bb      	ldr	r3, [r7, #8]
 801c430:	785b      	ldrb	r3, [r3, #1]
 801c432:	0018      	movs	r0, r3
 801c434:	f000 f95f 	bl	801c6f6 <RTC_ByteToBcd2>
 801c438:	0003      	movs	r3, r0
 801c43a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c43c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c43e:	68bb      	ldr	r3, [r7, #8]
 801c440:	789b      	ldrb	r3, [r3, #2]
 801c442:	0018      	movs	r0, r3
 801c444:	f000 f957 	bl	801c6f6 <RTC_ByteToBcd2>
 801c448:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c44a:	0022      	movs	r2, r4
 801c44c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c44e:	68bb      	ldr	r3, [r7, #8]
 801c450:	781b      	ldrb	r3, [r3, #0]
 801c452:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c454:	4313      	orrs	r3, r2
 801c456:	617b      	str	r3, [r7, #20]
 801c458:	e00e      	b.n	801c478 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c45a:	68bb      	ldr	r3, [r7, #8]
 801c45c:	78db      	ldrb	r3, [r3, #3]
 801c45e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c460:	68bb      	ldr	r3, [r7, #8]
 801c462:	785b      	ldrb	r3, [r3, #1]
 801c464:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c466:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c468:	68ba      	ldr	r2, [r7, #8]
 801c46a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c46c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c46e:	68bb      	ldr	r3, [r7, #8]
 801c470:	781b      	ldrb	r3, [r3, #0]
 801c472:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c474:	4313      	orrs	r3, r2
 801c476:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	22ca      	movs	r2, #202	@ 0xca
 801c47e:	625a      	str	r2, [r3, #36]	@ 0x24
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	2253      	movs	r2, #83	@ 0x53
 801c486:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c488:	2513      	movs	r5, #19
 801c48a:	197c      	adds	r4, r7, r5
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	0018      	movs	r0, r3
 801c490:	f000 f8c3 	bl	801c61a <RTC_EnterInitMode>
 801c494:	0003      	movs	r3, r0
 801c496:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c498:	0028      	movs	r0, r5
 801c49a:	183b      	adds	r3, r7, r0
 801c49c:	781b      	ldrb	r3, [r3, #0]
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d10c      	bne.n	801c4bc <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	697a      	ldr	r2, [r7, #20]
 801c4a8:	4910      	ldr	r1, [pc, #64]	@ (801c4ec <HAL_RTC_SetDate+0x124>)
 801c4aa:	400a      	ands	r2, r1
 801c4ac:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c4ae:	183c      	adds	r4, r7, r0
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	f000 f8f5 	bl	801c6a2 <RTC_ExitInitMode>
 801c4b8:	0003      	movs	r3, r0
 801c4ba:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c4bc:	2313      	movs	r3, #19
 801c4be:	18fb      	adds	r3, r7, r3
 801c4c0:	781b      	ldrb	r3, [r3, #0]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d103      	bne.n	801c4ce <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	2221      	movs	r2, #33	@ 0x21
 801c4ca:	2101      	movs	r1, #1
 801c4cc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	22ff      	movs	r2, #255	@ 0xff
 801c4d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	2220      	movs	r2, #32
 801c4da:	2100      	movs	r1, #0
 801c4dc:	5499      	strb	r1, [r3, r2]

  return status;
 801c4de:	2313      	movs	r3, #19
 801c4e0:	18fb      	adds	r3, r7, r3
 801c4e2:	781b      	ldrb	r3, [r3, #0]
}
 801c4e4:	0018      	movs	r0, r3
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	b006      	add	sp, #24
 801c4ea:	bdb0      	pop	{r4, r5, r7, pc}
 801c4ec:	00ffff3f 	.word	0x00ffff3f

0801c4f0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b086      	sub	sp, #24
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	60f8      	str	r0, [r7, #12]
 801c4f8:	60b9      	str	r1, [r7, #8]
 801c4fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	685b      	ldr	r3, [r3, #4]
 801c506:	4a21      	ldr	r2, [pc, #132]	@ (801c58c <HAL_RTC_GetDate+0x9c>)
 801c508:	4013      	ands	r3, r2
 801c50a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c50c:	697b      	ldr	r3, [r7, #20]
 801c50e:	0c1b      	lsrs	r3, r3, #16
 801c510:	b2da      	uxtb	r2, r3
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c516:	697b      	ldr	r3, [r7, #20]
 801c518:	0a1b      	lsrs	r3, r3, #8
 801c51a:	b2db      	uxtb	r3, r3
 801c51c:	221f      	movs	r2, #31
 801c51e:	4013      	ands	r3, r2
 801c520:	b2da      	uxtb	r2, r3
 801c522:	68bb      	ldr	r3, [r7, #8]
 801c524:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c526:	697b      	ldr	r3, [r7, #20]
 801c528:	b2db      	uxtb	r3, r3
 801c52a:	223f      	movs	r2, #63	@ 0x3f
 801c52c:	4013      	ands	r3, r2
 801c52e:	b2da      	uxtb	r2, r3
 801c530:	68bb      	ldr	r3, [r7, #8]
 801c532:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c534:	697b      	ldr	r3, [r7, #20]
 801c536:	0b5b      	lsrs	r3, r3, #13
 801c538:	b2db      	uxtb	r3, r3
 801c53a:	2207      	movs	r2, #7
 801c53c:	4013      	ands	r3, r2
 801c53e:	b2da      	uxtb	r2, r3
 801c540:	68bb      	ldr	r3, [r7, #8]
 801c542:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d11a      	bne.n	801c580 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c54a:	68bb      	ldr	r3, [r7, #8]
 801c54c:	78db      	ldrb	r3, [r3, #3]
 801c54e:	0018      	movs	r0, r3
 801c550:	f000 f8f2 	bl	801c738 <RTC_Bcd2ToByte>
 801c554:	0003      	movs	r3, r0
 801c556:	001a      	movs	r2, r3
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c55c:	68bb      	ldr	r3, [r7, #8]
 801c55e:	785b      	ldrb	r3, [r3, #1]
 801c560:	0018      	movs	r0, r3
 801c562:	f000 f8e9 	bl	801c738 <RTC_Bcd2ToByte>
 801c566:	0003      	movs	r3, r0
 801c568:	001a      	movs	r2, r3
 801c56a:	68bb      	ldr	r3, [r7, #8]
 801c56c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c56e:	68bb      	ldr	r3, [r7, #8]
 801c570:	789b      	ldrb	r3, [r3, #2]
 801c572:	0018      	movs	r0, r3
 801c574:	f000 f8e0 	bl	801c738 <RTC_Bcd2ToByte>
 801c578:	0003      	movs	r3, r0
 801c57a:	001a      	movs	r2, r3
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c580:	2300      	movs	r3, #0
}
 801c582:	0018      	movs	r0, r3
 801c584:	46bd      	mov	sp, r7
 801c586:	b006      	add	sp, #24
 801c588:	bd80      	pop	{r7, pc}
 801c58a:	46c0      	nop			@ (mov r8, r8)
 801c58c:	00ffff3f 	.word	0x00ffff3f

0801c590 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b084      	sub	sp, #16
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c598:	2300      	movs	r3, #0
 801c59a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	4a0e      	ldr	r2, [pc, #56]	@ (801c5dc <HAL_RTC_WaitForSynchro+0x4c>)
 801c5a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c5a4:	f7f8 f98c 	bl	80148c0 <HAL_GetTick>
 801c5a8:	0003      	movs	r3, r0
 801c5aa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c5ac:	e00a      	b.n	801c5c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c5ae:	f7f8 f987 	bl	80148c0 <HAL_GetTick>
 801c5b2:	0002      	movs	r2, r0
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	1ad2      	subs	r2, r2, r3
 801c5b8:	23fa      	movs	r3, #250	@ 0xfa
 801c5ba:	009b      	lsls	r3, r3, #2
 801c5bc:	429a      	cmp	r2, r3
 801c5be:	d901      	bls.n	801c5c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c5c0:	2303      	movs	r3, #3
 801c5c2:	e006      	b.n	801c5d2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	68db      	ldr	r3, [r3, #12]
 801c5ca:	2220      	movs	r2, #32
 801c5cc:	4013      	ands	r3, r2
 801c5ce:	d0ee      	beq.n	801c5ae <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c5d0:	2300      	movs	r3, #0
}
 801c5d2:	0018      	movs	r0, r3
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	b004      	add	sp, #16
 801c5d8:	bd80      	pop	{r7, pc}
 801c5da:	46c0      	nop			@ (mov r8, r8)
 801c5dc:	0001ff5f 	.word	0x0001ff5f

0801c5e0 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b082      	sub	sp, #8
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	22ca      	movs	r2, #202	@ 0xca
 801c5ee:	625a      	str	r2, [r3, #36]	@ 0x24
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	2253      	movs	r2, #83	@ 0x53
 801c5f6:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	689a      	ldr	r2, [r3, #8]
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	2180      	movs	r1, #128	@ 0x80
 801c604:	0249      	lsls	r1, r1, #9
 801c606:	430a      	orrs	r2, r1
 801c608:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	22ff      	movs	r2, #255	@ 0xff
 801c610:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c612:	46c0      	nop			@ (mov r8, r8)
 801c614:	46bd      	mov	sp, r7
 801c616:	b002      	add	sp, #8
 801c618:	bd80      	pop	{r7, pc}

0801c61a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c61a:	b580      	push	{r7, lr}
 801c61c:	b084      	sub	sp, #16
 801c61e:	af00      	add	r7, sp, #0
 801c620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c622:	2300      	movs	r3, #0
 801c624:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c626:	230f      	movs	r3, #15
 801c628:	18fb      	adds	r3, r7, r3
 801c62a:	2200      	movs	r2, #0
 801c62c:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	68db      	ldr	r3, [r3, #12]
 801c634:	2240      	movs	r2, #64	@ 0x40
 801c636:	4013      	ands	r3, r2
 801c638:	d12c      	bne.n	801c694 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	68da      	ldr	r2, [r3, #12]
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	2180      	movs	r1, #128	@ 0x80
 801c646:	430a      	orrs	r2, r1
 801c648:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c64a:	f7f8 f939 	bl	80148c0 <HAL_GetTick>
 801c64e:	0003      	movs	r3, r0
 801c650:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c652:	e014      	b.n	801c67e <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c654:	f7f8 f934 	bl	80148c0 <HAL_GetTick>
 801c658:	0002      	movs	r2, r0
 801c65a:	68bb      	ldr	r3, [r7, #8]
 801c65c:	1ad2      	subs	r2, r2, r3
 801c65e:	200f      	movs	r0, #15
 801c660:	183b      	adds	r3, r7, r0
 801c662:	1839      	adds	r1, r7, r0
 801c664:	7809      	ldrb	r1, [r1, #0]
 801c666:	7019      	strb	r1, [r3, #0]
 801c668:	23fa      	movs	r3, #250	@ 0xfa
 801c66a:	009b      	lsls	r3, r3, #2
 801c66c:	429a      	cmp	r2, r3
 801c66e:	d906      	bls.n	801c67e <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2221      	movs	r2, #33	@ 0x21
 801c674:	2104      	movs	r1, #4
 801c676:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c678:	183b      	adds	r3, r7, r0
 801c67a:	2201      	movs	r2, #1
 801c67c:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	68db      	ldr	r3, [r3, #12]
 801c684:	2240      	movs	r2, #64	@ 0x40
 801c686:	4013      	ands	r3, r2
 801c688:	d104      	bne.n	801c694 <RTC_EnterInitMode+0x7a>
 801c68a:	230f      	movs	r3, #15
 801c68c:	18fb      	adds	r3, r7, r3
 801c68e:	781b      	ldrb	r3, [r3, #0]
 801c690:	2b01      	cmp	r3, #1
 801c692:	d1df      	bne.n	801c654 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c694:	230f      	movs	r3, #15
 801c696:	18fb      	adds	r3, r7, r3
 801c698:	781b      	ldrb	r3, [r3, #0]
}
 801c69a:	0018      	movs	r0, r3
 801c69c:	46bd      	mov	sp, r7
 801c69e:	b004      	add	sp, #16
 801c6a0:	bd80      	pop	{r7, pc}

0801c6a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c6a2:	b590      	push	{r4, r7, lr}
 801c6a4:	b085      	sub	sp, #20
 801c6a6:	af00      	add	r7, sp, #0
 801c6a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c6aa:	240f      	movs	r4, #15
 801c6ac:	193b      	adds	r3, r7, r4
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	68da      	ldr	r2, [r3, #12]
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	2180      	movs	r1, #128	@ 0x80
 801c6be:	438a      	bics	r2, r1
 801c6c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	689b      	ldr	r3, [r3, #8]
 801c6c8:	2220      	movs	r2, #32
 801c6ca:	4013      	ands	r3, r2
 801c6cc:	d10c      	bne.n	801c6e8 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f7ff ff5d 	bl	801c590 <HAL_RTC_WaitForSynchro>
 801c6d6:	1e03      	subs	r3, r0, #0
 801c6d8:	d006      	beq.n	801c6e8 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	2221      	movs	r2, #33	@ 0x21
 801c6de:	2104      	movs	r1, #4
 801c6e0:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c6e2:	193b      	adds	r3, r7, r4
 801c6e4:	2201      	movs	r2, #1
 801c6e6:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c6e8:	230f      	movs	r3, #15
 801c6ea:	18fb      	adds	r3, r7, r3
 801c6ec:	781b      	ldrb	r3, [r3, #0]
}
 801c6ee:	0018      	movs	r0, r3
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	b005      	add	sp, #20
 801c6f4:	bd90      	pop	{r4, r7, pc}

0801c6f6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c6f6:	b580      	push	{r7, lr}
 801c6f8:	b084      	sub	sp, #16
 801c6fa:	af00      	add	r7, sp, #0
 801c6fc:	0002      	movs	r2, r0
 801c6fe:	1dfb      	adds	r3, r7, #7
 801c700:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c702:	2300      	movs	r3, #0
 801c704:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c706:	e007      	b.n	801c718 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	3301      	adds	r3, #1
 801c70c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c70e:	1dfb      	adds	r3, r7, #7
 801c710:	1dfa      	adds	r2, r7, #7
 801c712:	7812      	ldrb	r2, [r2, #0]
 801c714:	3a0a      	subs	r2, #10
 801c716:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c718:	1dfb      	adds	r3, r7, #7
 801c71a:	781b      	ldrb	r3, [r3, #0]
 801c71c:	2b09      	cmp	r3, #9
 801c71e:	d8f3      	bhi.n	801c708 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	b2db      	uxtb	r3, r3
 801c724:	011b      	lsls	r3, r3, #4
 801c726:	b2da      	uxtb	r2, r3
 801c728:	1dfb      	adds	r3, r7, #7
 801c72a:	781b      	ldrb	r3, [r3, #0]
 801c72c:	4313      	orrs	r3, r2
 801c72e:	b2db      	uxtb	r3, r3
}
 801c730:	0018      	movs	r0, r3
 801c732:	46bd      	mov	sp, r7
 801c734:	b004      	add	sp, #16
 801c736:	bd80      	pop	{r7, pc}

0801c738 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c738:	b580      	push	{r7, lr}
 801c73a:	b084      	sub	sp, #16
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	0002      	movs	r2, r0
 801c740:	1dfb      	adds	r3, r7, #7
 801c742:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c744:	2300      	movs	r3, #0
 801c746:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c748:	1dfb      	adds	r3, r7, #7
 801c74a:	781b      	ldrb	r3, [r3, #0]
 801c74c:	091b      	lsrs	r3, r3, #4
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	001a      	movs	r2, r3
 801c752:	0013      	movs	r3, r2
 801c754:	009b      	lsls	r3, r3, #2
 801c756:	189b      	adds	r3, r3, r2
 801c758:	005b      	lsls	r3, r3, #1
 801c75a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	b2da      	uxtb	r2, r3
 801c760:	1dfb      	adds	r3, r7, #7
 801c762:	781b      	ldrb	r3, [r3, #0]
 801c764:	210f      	movs	r1, #15
 801c766:	400b      	ands	r3, r1
 801c768:	b2db      	uxtb	r3, r3
 801c76a:	18d3      	adds	r3, r2, r3
 801c76c:	b2db      	uxtb	r3, r3
}
 801c76e:	0018      	movs	r0, r3
 801c770:	46bd      	mov	sp, r7
 801c772:	b004      	add	sp, #16
 801c774:	bd80      	pop	{r7, pc}
	...

0801c778 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b086      	sub	sp, #24
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	60f8      	str	r0, [r7, #12]
 801c780:	60b9      	str	r1, [r7, #8]
 801c782:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c784:	4b64      	ldr	r3, [pc, #400]	@ (801c918 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	22fa      	movs	r2, #250	@ 0xfa
 801c78a:	01d1      	lsls	r1, r2, #7
 801c78c:	0018      	movs	r0, r3
 801c78e:	f7e3 fd09 	bl	80001a4 <__udivsi3>
 801c792:	0003      	movs	r3, r0
 801c794:	001a      	movs	r2, r3
 801c796:	0013      	movs	r3, r2
 801c798:	015b      	lsls	r3, r3, #5
 801c79a:	1a9b      	subs	r3, r3, r2
 801c79c:	009b      	lsls	r3, r3, #2
 801c79e:	189b      	adds	r3, r3, r2
 801c7a0:	00db      	lsls	r3, r3, #3
 801c7a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	2220      	movs	r2, #32
 801c7a8:	5c9b      	ldrb	r3, [r3, r2]
 801c7aa:	2b01      	cmp	r3, #1
 801c7ac:	d101      	bne.n	801c7b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c7ae:	2302      	movs	r3, #2
 801c7b0:	e0ad      	b.n	801c90e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	2220      	movs	r2, #32
 801c7b6:	2101      	movs	r1, #1
 801c7b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	2221      	movs	r2, #33	@ 0x21
 801c7be:	2102      	movs	r1, #2
 801c7c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	22ca      	movs	r2, #202	@ 0xca
 801c7c8:	625a      	str	r2, [r3, #36]	@ 0x24
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	2253      	movs	r2, #83	@ 0x53
 801c7d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	689a      	ldr	r2, [r3, #8]
 801c7d8:	2380      	movs	r3, #128	@ 0x80
 801c7da:	00db      	lsls	r3, r3, #3
 801c7dc:	4013      	ands	r3, r2
 801c7de:	d019      	beq.n	801c814 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	3b01      	subs	r3, #1
 801c7e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c7e6:	697b      	ldr	r3, [r7, #20]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d10d      	bne.n	801c808 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	22ff      	movs	r2, #255	@ 0xff
 801c7f2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	2221      	movs	r2, #33	@ 0x21
 801c7f8:	2103      	movs	r1, #3
 801c7fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	2220      	movs	r2, #32
 801c800:	2100      	movs	r1, #0
 801c802:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c804:	2303      	movs	r3, #3
 801c806:	e082      	b.n	801c90e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	68db      	ldr	r3, [r3, #12]
 801c80e:	2204      	movs	r2, #4
 801c810:	4013      	ands	r3, r2
 801c812:	d1e5      	bne.n	801c7e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	689a      	ldr	r2, [r3, #8]
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	493f      	ldr	r1, [pc, #252]	@ (801c91c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c820:	400a      	ands	r2, r1
 801c822:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	68db      	ldr	r3, [r3, #12]
 801c82a:	22ff      	movs	r2, #255	@ 0xff
 801c82c:	401a      	ands	r2, r3
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	493b      	ldr	r1, [pc, #236]	@ (801c920 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c834:	430a      	orrs	r2, r1
 801c836:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c838:	4b37      	ldr	r3, [pc, #220]	@ (801c918 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	22fa      	movs	r2, #250	@ 0xfa
 801c83e:	01d1      	lsls	r1, r2, #7
 801c840:	0018      	movs	r0, r3
 801c842:	f7e3 fcaf 	bl	80001a4 <__udivsi3>
 801c846:	0003      	movs	r3, r0
 801c848:	001a      	movs	r2, r3
 801c84a:	0013      	movs	r3, r2
 801c84c:	015b      	lsls	r3, r3, #5
 801c84e:	1a9b      	subs	r3, r3, r2
 801c850:	009b      	lsls	r3, r3, #2
 801c852:	189b      	adds	r3, r3, r2
 801c854:	00db      	lsls	r3, r3, #3
 801c856:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c858:	697b      	ldr	r3, [r7, #20]
 801c85a:	3b01      	subs	r3, #1
 801c85c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c85e:	697b      	ldr	r3, [r7, #20]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d10d      	bne.n	801c880 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	22ff      	movs	r2, #255	@ 0xff
 801c86a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	2221      	movs	r2, #33	@ 0x21
 801c870:	2103      	movs	r1, #3
 801c872:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	2220      	movs	r2, #32
 801c878:	2100      	movs	r1, #0
 801c87a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c87c:	2303      	movs	r3, #3
 801c87e:	e046      	b.n	801c90e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	68db      	ldr	r3, [r3, #12]
 801c886:	2204      	movs	r2, #4
 801c888:	4013      	ands	r3, r2
 801c88a:	d0e5      	beq.n	801c858 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	689a      	ldr	r2, [r3, #8]
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	2107      	movs	r1, #7
 801c898:	438a      	bics	r2, r1
 801c89a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	6899      	ldr	r1, [r3, #8]
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	687a      	ldr	r2, [r7, #4]
 801c8a8:	430a      	orrs	r2, r1
 801c8aa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	68ba      	ldr	r2, [r7, #8]
 801c8b2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c8b4:	4b1b      	ldr	r3, [pc, #108]	@ (801c924 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8b6:	681a      	ldr	r2, [r3, #0]
 801c8b8:	4b1a      	ldr	r3, [pc, #104]	@ (801c924 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8ba:	2180      	movs	r1, #128	@ 0x80
 801c8bc:	0349      	lsls	r1, r1, #13
 801c8be:	430a      	orrs	r2, r1
 801c8c0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c8c2:	4b18      	ldr	r3, [pc, #96]	@ (801c924 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8c4:	689a      	ldr	r2, [r3, #8]
 801c8c6:	4b17      	ldr	r3, [pc, #92]	@ (801c924 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8c8:	2180      	movs	r1, #128	@ 0x80
 801c8ca:	0349      	lsls	r1, r1, #13
 801c8cc:	430a      	orrs	r2, r1
 801c8ce:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	689a      	ldr	r2, [r3, #8]
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	2180      	movs	r1, #128	@ 0x80
 801c8dc:	01c9      	lsls	r1, r1, #7
 801c8de:	430a      	orrs	r2, r1
 801c8e0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	689a      	ldr	r2, [r3, #8]
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	2180      	movs	r1, #128	@ 0x80
 801c8ee:	00c9      	lsls	r1, r1, #3
 801c8f0:	430a      	orrs	r2, r1
 801c8f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	22ff      	movs	r2, #255	@ 0xff
 801c8fa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	2221      	movs	r2, #33	@ 0x21
 801c900:	2101      	movs	r1, #1
 801c902:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	2220      	movs	r2, #32
 801c908:	2100      	movs	r1, #0
 801c90a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c90c:	2300      	movs	r3, #0
}
 801c90e:	0018      	movs	r0, r3
 801c910:	46bd      	mov	sp, r7
 801c912:	b006      	add	sp, #24
 801c914:	bd80      	pop	{r7, pc}
 801c916:	46c0      	nop			@ (mov r8, r8)
 801c918:	200000ec 	.word	0x200000ec
 801c91c:	fffffbff 	.word	0xfffffbff
 801c920:	fffffb7f 	.word	0xfffffb7f
 801c924:	40010400 	.word	0x40010400

0801c928 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c928:	b580      	push	{r7, lr}
 801c92a:	b084      	sub	sp, #16
 801c92c:	af00      	add	r7, sp, #0
 801c92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c930:	2300      	movs	r3, #0
 801c932:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	2220      	movs	r2, #32
 801c938:	5c9b      	ldrb	r3, [r3, r2]
 801c93a:	2b01      	cmp	r3, #1
 801c93c:	d101      	bne.n	801c942 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801c93e:	2302      	movs	r3, #2
 801c940:	e04e      	b.n	801c9e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	2220      	movs	r2, #32
 801c946:	2101      	movs	r1, #1
 801c948:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	2221      	movs	r2, #33	@ 0x21
 801c94e:	2102      	movs	r1, #2
 801c950:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	22ca      	movs	r2, #202	@ 0xca
 801c958:	625a      	str	r2, [r3, #36]	@ 0x24
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	2253      	movs	r2, #83	@ 0x53
 801c960:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	689a      	ldr	r2, [r3, #8]
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	491e      	ldr	r1, [pc, #120]	@ (801c9e8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801c96e:	400a      	ands	r2, r1
 801c970:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	689a      	ldr	r2, [r3, #8]
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	491b      	ldr	r1, [pc, #108]	@ (801c9ec <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801c97e:	400a      	ands	r2, r1
 801c980:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c982:	f7f7 ff9d 	bl	80148c0 <HAL_GetTick>
 801c986:	0003      	movs	r3, r0
 801c988:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c98a:	e016      	b.n	801c9ba <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c98c:	f7f7 ff98 	bl	80148c0 <HAL_GetTick>
 801c990:	0002      	movs	r2, r0
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	1ad2      	subs	r2, r2, r3
 801c996:	23fa      	movs	r3, #250	@ 0xfa
 801c998:	009b      	lsls	r3, r3, #2
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d90d      	bls.n	801c9ba <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	22ff      	movs	r2, #255	@ 0xff
 801c9a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	2221      	movs	r2, #33	@ 0x21
 801c9aa:	2103      	movs	r1, #3
 801c9ac:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	2220      	movs	r2, #32
 801c9b2:	2100      	movs	r1, #0
 801c9b4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c9b6:	2303      	movs	r3, #3
 801c9b8:	e012      	b.n	801c9e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	68db      	ldr	r3, [r3, #12]
 801c9c0:	2204      	movs	r2, #4
 801c9c2:	4013      	ands	r3, r2
 801c9c4:	d0e2      	beq.n	801c98c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	22ff      	movs	r2, #255	@ 0xff
 801c9cc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	2221      	movs	r2, #33	@ 0x21
 801c9d2:	2101      	movs	r1, #1
 801c9d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	2220      	movs	r2, #32
 801c9da:	2100      	movs	r1, #0
 801c9dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c9de:	2300      	movs	r3, #0
}
 801c9e0:	0018      	movs	r0, r3
 801c9e2:	46bd      	mov	sp, r7
 801c9e4:	b004      	add	sp, #16
 801c9e6:	bd80      	pop	{r7, pc}
 801c9e8:	fffffbff 	.word	0xfffffbff
 801c9ec:	ffffbfff 	.word	0xffffbfff

0801c9f0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b082      	sub	sp, #8
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801c9f8:	4b13      	ldr	r3, [pc, #76]	@ (801ca48 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801c9fa:	2280      	movs	r2, #128	@ 0x80
 801c9fc:	0352      	lsls	r2, r2, #13
 801c9fe:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	689a      	ldr	r2, [r3, #8]
 801ca06:	2380      	movs	r3, #128	@ 0x80
 801ca08:	01db      	lsls	r3, r3, #7
 801ca0a:	4013      	ands	r3, r2
 801ca0c:	d014      	beq.n	801ca38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	68da      	ldr	r2, [r3, #12]
 801ca14:	2380      	movs	r3, #128	@ 0x80
 801ca16:	00db      	lsls	r3, r3, #3
 801ca18:	4013      	ands	r3, r2
 801ca1a:	d00d      	beq.n	801ca38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	68db      	ldr	r3, [r3, #12]
 801ca22:	22ff      	movs	r2, #255	@ 0xff
 801ca24:	401a      	ands	r2, r3
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	4908      	ldr	r1, [pc, #32]	@ (801ca4c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801ca2c:	430a      	orrs	r2, r1
 801ca2e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	0018      	movs	r0, r3
 801ca34:	f000 f80c 	bl	801ca50 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	2221      	movs	r2, #33	@ 0x21
 801ca3c:	2101      	movs	r1, #1
 801ca3e:	5499      	strb	r1, [r3, r2]
}
 801ca40:	46c0      	nop			@ (mov r8, r8)
 801ca42:	46bd      	mov	sp, r7
 801ca44:	b002      	add	sp, #8
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	40010400 	.word	0x40010400
 801ca4c:	fffffb7f 	.word	0xfffffb7f

0801ca50 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b082      	sub	sp, #8
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801ca58:	46c0      	nop			@ (mov r8, r8)
 801ca5a:	46bd      	mov	sp, r7
 801ca5c:	b002      	add	sp, #8
 801ca5e:	bd80      	pop	{r7, pc}

0801ca60 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b086      	sub	sp, #24
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	60f8      	str	r0, [r7, #12]
 801ca68:	60b9      	str	r1, [r7, #8]
 801ca6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	3350      	adds	r3, #80	@ 0x50
 801ca76:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	009b      	lsls	r3, r3, #2
 801ca7c:	697a      	ldr	r2, [r7, #20]
 801ca7e:	18d3      	adds	r3, r2, r3
 801ca80:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801ca82:	697b      	ldr	r3, [r7, #20]
 801ca84:	687a      	ldr	r2, [r7, #4]
 801ca86:	601a      	str	r2, [r3, #0]
}
 801ca88:	46c0      	nop			@ (mov r8, r8)
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	b006      	add	sp, #24
 801ca8e:	bd80      	pop	{r7, pc}

0801ca90 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b084      	sub	sp, #16
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	6078      	str	r0, [r7, #4]
 801ca98:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	3350      	adds	r3, #80	@ 0x50
 801caa4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801caa6:	683b      	ldr	r3, [r7, #0]
 801caa8:	009b      	lsls	r3, r3, #2
 801caaa:	68fa      	ldr	r2, [r7, #12]
 801caac:	18d3      	adds	r3, r2, r3
 801caae:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	681b      	ldr	r3, [r3, #0]
}
 801cab4:	0018      	movs	r0, r3
 801cab6:	46bd      	mov	sp, r7
 801cab8:	b004      	add	sp, #16
 801caba:	bd80      	pop	{r7, pc}

0801cabc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b082      	sub	sp, #8
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d101      	bne.n	801cace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801caca:	2301      	movs	r3, #1
 801cacc:	e032      	b.n	801cb34 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	2239      	movs	r2, #57	@ 0x39
 801cad2:	5c9b      	ldrb	r3, [r3, r2]
 801cad4:	b2db      	uxtb	r3, r3
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d107      	bne.n	801caea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	2238      	movs	r2, #56	@ 0x38
 801cade:	2100      	movs	r1, #0
 801cae0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	0018      	movs	r0, r3
 801cae6:	f7f6 fe97 	bl	8013818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	2239      	movs	r2, #57	@ 0x39
 801caee:	2102      	movs	r1, #2
 801caf0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	681a      	ldr	r2, [r3, #0]
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	3304      	adds	r3, #4
 801cafa:	0019      	movs	r1, r3
 801cafc:	0010      	movs	r0, r2
 801cafe:	f000 fa1d 	bl	801cf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	223e      	movs	r2, #62	@ 0x3e
 801cb06:	2101      	movs	r1, #1
 801cb08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	223a      	movs	r2, #58	@ 0x3a
 801cb0e:	2101      	movs	r1, #1
 801cb10:	5499      	strb	r1, [r3, r2]
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	223b      	movs	r2, #59	@ 0x3b
 801cb16:	2101      	movs	r1, #1
 801cb18:	5499      	strb	r1, [r3, r2]
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	223c      	movs	r2, #60	@ 0x3c
 801cb1e:	2101      	movs	r1, #1
 801cb20:	5499      	strb	r1, [r3, r2]
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	223d      	movs	r2, #61	@ 0x3d
 801cb26:	2101      	movs	r1, #1
 801cb28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	2239      	movs	r2, #57	@ 0x39
 801cb2e:	2101      	movs	r1, #1
 801cb30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cb32:	2300      	movs	r3, #0
}
 801cb34:	0018      	movs	r0, r3
 801cb36:	46bd      	mov	sp, r7
 801cb38:	b002      	add	sp, #8
 801cb3a:	bd80      	pop	{r7, pc}

0801cb3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cb3c:	b580      	push	{r7, lr}
 801cb3e:	b084      	sub	sp, #16
 801cb40:	af00      	add	r7, sp, #0
 801cb42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	2239      	movs	r2, #57	@ 0x39
 801cb48:	5c9b      	ldrb	r3, [r3, r2]
 801cb4a:	b2db      	uxtb	r3, r3
 801cb4c:	2b01      	cmp	r3, #1
 801cb4e:	d001      	beq.n	801cb54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cb50:	2301      	movs	r3, #1
 801cb52:	e033      	b.n	801cbbc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	2239      	movs	r2, #57	@ 0x39
 801cb58:	2102      	movs	r1, #2
 801cb5a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	681a      	ldr	r2, [r3, #0]
 801cb60:	2380      	movs	r3, #128	@ 0x80
 801cb62:	05db      	lsls	r3, r3, #23
 801cb64:	429a      	cmp	r2, r3
 801cb66:	d00e      	beq.n	801cb86 <HAL_TIM_Base_Start+0x4a>
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	4a15      	ldr	r2, [pc, #84]	@ (801cbc4 <HAL_TIM_Base_Start+0x88>)
 801cb6e:	4293      	cmp	r3, r2
 801cb70:	d009      	beq.n	801cb86 <HAL_TIM_Base_Start+0x4a>
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	4a14      	ldr	r2, [pc, #80]	@ (801cbc8 <HAL_TIM_Base_Start+0x8c>)
 801cb78:	4293      	cmp	r3, r2
 801cb7a:	d004      	beq.n	801cb86 <HAL_TIM_Base_Start+0x4a>
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	4a12      	ldr	r2, [pc, #72]	@ (801cbcc <HAL_TIM_Base_Start+0x90>)
 801cb82:	4293      	cmp	r3, r2
 801cb84:	d111      	bne.n	801cbaa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	689b      	ldr	r3, [r3, #8]
 801cb8c:	2207      	movs	r2, #7
 801cb8e:	4013      	ands	r3, r2
 801cb90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	2b06      	cmp	r3, #6
 801cb96:	d010      	beq.n	801cbba <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	681a      	ldr	r2, [r3, #0]
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	2101      	movs	r1, #1
 801cba4:	430a      	orrs	r2, r1
 801cba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cba8:	e007      	b.n	801cbba <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	681a      	ldr	r2, [r3, #0]
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	2101      	movs	r1, #1
 801cbb6:	430a      	orrs	r2, r1
 801cbb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cbba:	2300      	movs	r3, #0
}
 801cbbc:	0018      	movs	r0, r3
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	b004      	add	sp, #16
 801cbc2:	bd80      	pop	{r7, pc}
 801cbc4:	40000400 	.word	0x40000400
 801cbc8:	40010800 	.word	0x40010800
 801cbcc:	40011400 	.word	0x40011400

0801cbd0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b082      	sub	sp, #8
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	6a1b      	ldr	r3, [r3, #32]
 801cbde:	4a0a      	ldr	r2, [pc, #40]	@ (801cc08 <HAL_TIM_Base_Stop+0x38>)
 801cbe0:	4013      	ands	r3, r2
 801cbe2:	d107      	bne.n	801cbf4 <HAL_TIM_Base_Stop+0x24>
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	681a      	ldr	r2, [r3, #0]
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	2101      	movs	r1, #1
 801cbf0:	438a      	bics	r2, r1
 801cbf2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	2239      	movs	r2, #57	@ 0x39
 801cbf8:	2101      	movs	r1, #1
 801cbfa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cbfc:	2300      	movs	r3, #0
}
 801cbfe:	0018      	movs	r0, r3
 801cc00:	46bd      	mov	sp, r7
 801cc02:	b002      	add	sp, #8
 801cc04:	bd80      	pop	{r7, pc}
 801cc06:	46c0      	nop			@ (mov r8, r8)
 801cc08:	00001111 	.word	0x00001111

0801cc0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b082      	sub	sp, #8
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d101      	bne.n	801cc1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cc1a:	2301      	movs	r3, #1
 801cc1c:	e032      	b.n	801cc84 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	2239      	movs	r2, #57	@ 0x39
 801cc22:	5c9b      	ldrb	r3, [r3, r2]
 801cc24:	b2db      	uxtb	r3, r3
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d107      	bne.n	801cc3a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	2238      	movs	r2, #56	@ 0x38
 801cc2e:	2100      	movs	r1, #0
 801cc30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	0018      	movs	r0, r3
 801cc36:	f7f6 fdcb 	bl	80137d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	2239      	movs	r2, #57	@ 0x39
 801cc3e:	2102      	movs	r1, #2
 801cc40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	681a      	ldr	r2, [r3, #0]
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	3304      	adds	r3, #4
 801cc4a:	0019      	movs	r1, r3
 801cc4c:	0010      	movs	r0, r2
 801cc4e:	f000 f975 	bl	801cf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	223e      	movs	r2, #62	@ 0x3e
 801cc56:	2101      	movs	r1, #1
 801cc58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	223a      	movs	r2, #58	@ 0x3a
 801cc5e:	2101      	movs	r1, #1
 801cc60:	5499      	strb	r1, [r3, r2]
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	223b      	movs	r2, #59	@ 0x3b
 801cc66:	2101      	movs	r1, #1
 801cc68:	5499      	strb	r1, [r3, r2]
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	223c      	movs	r2, #60	@ 0x3c
 801cc6e:	2101      	movs	r1, #1
 801cc70:	5499      	strb	r1, [r3, r2]
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	223d      	movs	r2, #61	@ 0x3d
 801cc76:	2101      	movs	r1, #1
 801cc78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	2239      	movs	r2, #57	@ 0x39
 801cc7e:	2101      	movs	r1, #1
 801cc80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cc82:	2300      	movs	r3, #0
}
 801cc84:	0018      	movs	r0, r3
 801cc86:	46bd      	mov	sp, r7
 801cc88:	b002      	add	sp, #8
 801cc8a:	bd80      	pop	{r7, pc}

0801cc8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	b084      	sub	sp, #16
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	6078      	str	r0, [r7, #4]
 801cc94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cc96:	683b      	ldr	r3, [r7, #0]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d108      	bne.n	801ccae <HAL_TIM_PWM_Start+0x22>
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	223a      	movs	r2, #58	@ 0x3a
 801cca0:	5c9b      	ldrb	r3, [r3, r2]
 801cca2:	b2db      	uxtb	r3, r3
 801cca4:	3b01      	subs	r3, #1
 801cca6:	1e5a      	subs	r2, r3, #1
 801cca8:	4193      	sbcs	r3, r2
 801ccaa:	b2db      	uxtb	r3, r3
 801ccac:	e01f      	b.n	801ccee <HAL_TIM_PWM_Start+0x62>
 801ccae:	683b      	ldr	r3, [r7, #0]
 801ccb0:	2b04      	cmp	r3, #4
 801ccb2:	d108      	bne.n	801ccc6 <HAL_TIM_PWM_Start+0x3a>
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	223b      	movs	r2, #59	@ 0x3b
 801ccb8:	5c9b      	ldrb	r3, [r3, r2]
 801ccba:	b2db      	uxtb	r3, r3
 801ccbc:	3b01      	subs	r3, #1
 801ccbe:	1e5a      	subs	r2, r3, #1
 801ccc0:	4193      	sbcs	r3, r2
 801ccc2:	b2db      	uxtb	r3, r3
 801ccc4:	e013      	b.n	801ccee <HAL_TIM_PWM_Start+0x62>
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	2b08      	cmp	r3, #8
 801ccca:	d108      	bne.n	801ccde <HAL_TIM_PWM_Start+0x52>
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	223c      	movs	r2, #60	@ 0x3c
 801ccd0:	5c9b      	ldrb	r3, [r3, r2]
 801ccd2:	b2db      	uxtb	r3, r3
 801ccd4:	3b01      	subs	r3, #1
 801ccd6:	1e5a      	subs	r2, r3, #1
 801ccd8:	4193      	sbcs	r3, r2
 801ccda:	b2db      	uxtb	r3, r3
 801ccdc:	e007      	b.n	801ccee <HAL_TIM_PWM_Start+0x62>
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	223d      	movs	r2, #61	@ 0x3d
 801cce2:	5c9b      	ldrb	r3, [r3, r2]
 801cce4:	b2db      	uxtb	r3, r3
 801cce6:	3b01      	subs	r3, #1
 801cce8:	1e5a      	subs	r2, r3, #1
 801ccea:	4193      	sbcs	r3, r2
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d001      	beq.n	801ccf6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801ccf2:	2301      	movs	r3, #1
 801ccf4:	e052      	b.n	801cd9c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ccf6:	683b      	ldr	r3, [r7, #0]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d104      	bne.n	801cd06 <HAL_TIM_PWM_Start+0x7a>
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	223a      	movs	r2, #58	@ 0x3a
 801cd00:	2102      	movs	r1, #2
 801cd02:	5499      	strb	r1, [r3, r2]
 801cd04:	e013      	b.n	801cd2e <HAL_TIM_PWM_Start+0xa2>
 801cd06:	683b      	ldr	r3, [r7, #0]
 801cd08:	2b04      	cmp	r3, #4
 801cd0a:	d104      	bne.n	801cd16 <HAL_TIM_PWM_Start+0x8a>
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	223b      	movs	r2, #59	@ 0x3b
 801cd10:	2102      	movs	r1, #2
 801cd12:	5499      	strb	r1, [r3, r2]
 801cd14:	e00b      	b.n	801cd2e <HAL_TIM_PWM_Start+0xa2>
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	2b08      	cmp	r3, #8
 801cd1a:	d104      	bne.n	801cd26 <HAL_TIM_PWM_Start+0x9a>
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	223c      	movs	r2, #60	@ 0x3c
 801cd20:	2102      	movs	r1, #2
 801cd22:	5499      	strb	r1, [r3, r2]
 801cd24:	e003      	b.n	801cd2e <HAL_TIM_PWM_Start+0xa2>
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	223d      	movs	r2, #61	@ 0x3d
 801cd2a:	2102      	movs	r1, #2
 801cd2c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	6839      	ldr	r1, [r7, #0]
 801cd34:	2201      	movs	r2, #1
 801cd36:	0018      	movs	r0, r3
 801cd38:	f000 fa62 	bl	801d200 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	681a      	ldr	r2, [r3, #0]
 801cd40:	2380      	movs	r3, #128	@ 0x80
 801cd42:	05db      	lsls	r3, r3, #23
 801cd44:	429a      	cmp	r2, r3
 801cd46:	d00e      	beq.n	801cd66 <HAL_TIM_PWM_Start+0xda>
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	4a15      	ldr	r2, [pc, #84]	@ (801cda4 <HAL_TIM_PWM_Start+0x118>)
 801cd4e:	4293      	cmp	r3, r2
 801cd50:	d009      	beq.n	801cd66 <HAL_TIM_PWM_Start+0xda>
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	4a14      	ldr	r2, [pc, #80]	@ (801cda8 <HAL_TIM_PWM_Start+0x11c>)
 801cd58:	4293      	cmp	r3, r2
 801cd5a:	d004      	beq.n	801cd66 <HAL_TIM_PWM_Start+0xda>
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	4a12      	ldr	r2, [pc, #72]	@ (801cdac <HAL_TIM_PWM_Start+0x120>)
 801cd62:	4293      	cmp	r3, r2
 801cd64:	d111      	bne.n	801cd8a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	689b      	ldr	r3, [r3, #8]
 801cd6c:	2207      	movs	r2, #7
 801cd6e:	4013      	ands	r3, r2
 801cd70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	2b06      	cmp	r3, #6
 801cd76:	d010      	beq.n	801cd9a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	681a      	ldr	r2, [r3, #0]
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	2101      	movs	r1, #1
 801cd84:	430a      	orrs	r2, r1
 801cd86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd88:	e007      	b.n	801cd9a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	681a      	ldr	r2, [r3, #0]
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	2101      	movs	r1, #1
 801cd96:	430a      	orrs	r2, r1
 801cd98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cd9a:	2300      	movs	r3, #0
}
 801cd9c:	0018      	movs	r0, r3
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	b004      	add	sp, #16
 801cda2:	bd80      	pop	{r7, pc}
 801cda4:	40000400 	.word	0x40000400
 801cda8:	40010800 	.word	0x40010800
 801cdac:	40011400 	.word	0x40011400

0801cdb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	b086      	sub	sp, #24
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	60f8      	str	r0, [r7, #12]
 801cdb8:	60b9      	str	r1, [r7, #8]
 801cdba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cdbc:	2317      	movs	r3, #23
 801cdbe:	18fb      	adds	r3, r7, r3
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801cdc4:	68fb      	ldr	r3, [r7, #12]
 801cdc6:	2238      	movs	r2, #56	@ 0x38
 801cdc8:	5c9b      	ldrb	r3, [r3, r2]
 801cdca:	2b01      	cmp	r3, #1
 801cdcc:	d101      	bne.n	801cdd2 <HAL_TIM_PWM_ConfigChannel+0x22>
 801cdce:	2302      	movs	r3, #2
 801cdd0:	e0ad      	b.n	801cf2e <HAL_TIM_PWM_ConfigChannel+0x17e>
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	2238      	movs	r2, #56	@ 0x38
 801cdd6:	2101      	movs	r1, #1
 801cdd8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	2b0c      	cmp	r3, #12
 801cdde:	d100      	bne.n	801cde2 <HAL_TIM_PWM_ConfigChannel+0x32>
 801cde0:	e076      	b.n	801ced0 <HAL_TIM_PWM_ConfigChannel+0x120>
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	2b0c      	cmp	r3, #12
 801cde6:	d900      	bls.n	801cdea <HAL_TIM_PWM_ConfigChannel+0x3a>
 801cde8:	e095      	b.n	801cf16 <HAL_TIM_PWM_ConfigChannel+0x166>
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	2b08      	cmp	r3, #8
 801cdee:	d04e      	beq.n	801ce8e <HAL_TIM_PWM_ConfigChannel+0xde>
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	2b08      	cmp	r3, #8
 801cdf4:	d900      	bls.n	801cdf8 <HAL_TIM_PWM_ConfigChannel+0x48>
 801cdf6:	e08e      	b.n	801cf16 <HAL_TIM_PWM_ConfigChannel+0x166>
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d003      	beq.n	801ce06 <HAL_TIM_PWM_ConfigChannel+0x56>
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	2b04      	cmp	r3, #4
 801ce02:	d021      	beq.n	801ce48 <HAL_TIM_PWM_ConfigChannel+0x98>
 801ce04:	e087      	b.n	801cf16 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	68ba      	ldr	r2, [r7, #8]
 801ce0c:	0011      	movs	r1, r2
 801ce0e:	0018      	movs	r0, r3
 801ce10:	f000 f8f2 	bl	801cff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	699a      	ldr	r2, [r3, #24]
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	2108      	movs	r1, #8
 801ce20:	430a      	orrs	r2, r1
 801ce22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	699a      	ldr	r2, [r3, #24]
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	2104      	movs	r1, #4
 801ce30:	438a      	bics	r2, r1
 801ce32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	6999      	ldr	r1, [r3, #24]
 801ce3a:	68bb      	ldr	r3, [r7, #8]
 801ce3c:	68da      	ldr	r2, [r3, #12]
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	430a      	orrs	r2, r1
 801ce44:	619a      	str	r2, [r3, #24]
      break;
 801ce46:	e06b      	b.n	801cf20 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	68ba      	ldr	r2, [r7, #8]
 801ce4e:	0011      	movs	r1, r2
 801ce50:	0018      	movs	r0, r3
 801ce52:	f000 f90d 	bl	801d070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	699a      	ldr	r2, [r3, #24]
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	2180      	movs	r1, #128	@ 0x80
 801ce62:	0109      	lsls	r1, r1, #4
 801ce64:	430a      	orrs	r2, r1
 801ce66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	699a      	ldr	r2, [r3, #24]
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	4931      	ldr	r1, [pc, #196]	@ (801cf38 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801ce74:	400a      	ands	r2, r1
 801ce76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	6999      	ldr	r1, [r3, #24]
 801ce7e:	68bb      	ldr	r3, [r7, #8]
 801ce80:	68db      	ldr	r3, [r3, #12]
 801ce82:	021a      	lsls	r2, r3, #8
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	430a      	orrs	r2, r1
 801ce8a:	619a      	str	r2, [r3, #24]
      break;
 801ce8c:	e048      	b.n	801cf20 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ce8e:	68fb      	ldr	r3, [r7, #12]
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	68ba      	ldr	r2, [r7, #8]
 801ce94:	0011      	movs	r1, r2
 801ce96:	0018      	movs	r0, r3
 801ce98:	f000 f92c 	bl	801d0f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	69da      	ldr	r2, [r3, #28]
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	2108      	movs	r1, #8
 801cea8:	430a      	orrs	r2, r1
 801ceaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	69da      	ldr	r2, [r3, #28]
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	2104      	movs	r1, #4
 801ceb8:	438a      	bics	r2, r1
 801ceba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	69d9      	ldr	r1, [r3, #28]
 801cec2:	68bb      	ldr	r3, [r7, #8]
 801cec4:	68da      	ldr	r2, [r3, #12]
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	430a      	orrs	r2, r1
 801cecc:	61da      	str	r2, [r3, #28]
      break;
 801cece:	e027      	b.n	801cf20 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	68ba      	ldr	r2, [r7, #8]
 801ced6:	0011      	movs	r1, r2
 801ced8:	0018      	movs	r0, r3
 801ceda:	f000 f94b 	bl	801d174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	69da      	ldr	r2, [r3, #28]
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	2180      	movs	r1, #128	@ 0x80
 801ceea:	0109      	lsls	r1, r1, #4
 801ceec:	430a      	orrs	r2, r1
 801ceee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	69da      	ldr	r2, [r3, #28]
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	490f      	ldr	r1, [pc, #60]	@ (801cf38 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cefc:	400a      	ands	r2, r1
 801cefe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	69d9      	ldr	r1, [r3, #28]
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	68db      	ldr	r3, [r3, #12]
 801cf0a:	021a      	lsls	r2, r3, #8
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	430a      	orrs	r2, r1
 801cf12:	61da      	str	r2, [r3, #28]
      break;
 801cf14:	e004      	b.n	801cf20 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cf16:	2317      	movs	r3, #23
 801cf18:	18fb      	adds	r3, r7, r3
 801cf1a:	2201      	movs	r2, #1
 801cf1c:	701a      	strb	r2, [r3, #0]
      break;
 801cf1e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	2238      	movs	r2, #56	@ 0x38
 801cf24:	2100      	movs	r1, #0
 801cf26:	5499      	strb	r1, [r3, r2]

  return status;
 801cf28:	2317      	movs	r3, #23
 801cf2a:	18fb      	adds	r3, r7, r3
 801cf2c:	781b      	ldrb	r3, [r3, #0]
}
 801cf2e:	0018      	movs	r0, r3
 801cf30:	46bd      	mov	sp, r7
 801cf32:	b006      	add	sp, #24
 801cf34:	bd80      	pop	{r7, pc}
 801cf36:	46c0      	nop			@ (mov r8, r8)
 801cf38:	fffffbff 	.word	0xfffffbff

0801cf3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b084      	sub	sp, #16
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
 801cf44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801cf4c:	687a      	ldr	r2, [r7, #4]
 801cf4e:	2380      	movs	r3, #128	@ 0x80
 801cf50:	05db      	lsls	r3, r3, #23
 801cf52:	429a      	cmp	r2, r3
 801cf54:	d00b      	beq.n	801cf6e <TIM_Base_SetConfig+0x32>
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	4a23      	ldr	r2, [pc, #140]	@ (801cfe8 <TIM_Base_SetConfig+0xac>)
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	d007      	beq.n	801cf6e <TIM_Base_SetConfig+0x32>
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	4a22      	ldr	r2, [pc, #136]	@ (801cfec <TIM_Base_SetConfig+0xb0>)
 801cf62:	4293      	cmp	r3, r2
 801cf64:	d003      	beq.n	801cf6e <TIM_Base_SetConfig+0x32>
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	4a21      	ldr	r2, [pc, #132]	@ (801cff0 <TIM_Base_SetConfig+0xb4>)
 801cf6a:	4293      	cmp	r3, r2
 801cf6c:	d108      	bne.n	801cf80 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	2270      	movs	r2, #112	@ 0x70
 801cf72:	4393      	bics	r3, r2
 801cf74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801cf76:	683b      	ldr	r3, [r7, #0]
 801cf78:	685b      	ldr	r3, [r3, #4]
 801cf7a:	68fa      	ldr	r2, [r7, #12]
 801cf7c:	4313      	orrs	r3, r2
 801cf7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801cf80:	687a      	ldr	r2, [r7, #4]
 801cf82:	2380      	movs	r3, #128	@ 0x80
 801cf84:	05db      	lsls	r3, r3, #23
 801cf86:	429a      	cmp	r2, r3
 801cf88:	d00b      	beq.n	801cfa2 <TIM_Base_SetConfig+0x66>
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	4a16      	ldr	r2, [pc, #88]	@ (801cfe8 <TIM_Base_SetConfig+0xac>)
 801cf8e:	4293      	cmp	r3, r2
 801cf90:	d007      	beq.n	801cfa2 <TIM_Base_SetConfig+0x66>
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	4a15      	ldr	r2, [pc, #84]	@ (801cfec <TIM_Base_SetConfig+0xb0>)
 801cf96:	4293      	cmp	r3, r2
 801cf98:	d003      	beq.n	801cfa2 <TIM_Base_SetConfig+0x66>
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	4a14      	ldr	r2, [pc, #80]	@ (801cff0 <TIM_Base_SetConfig+0xb4>)
 801cf9e:	4293      	cmp	r3, r2
 801cfa0:	d108      	bne.n	801cfb4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	4a13      	ldr	r2, [pc, #76]	@ (801cff4 <TIM_Base_SetConfig+0xb8>)
 801cfa6:	4013      	ands	r3, r2
 801cfa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801cfaa:	683b      	ldr	r3, [r7, #0]
 801cfac:	68db      	ldr	r3, [r3, #12]
 801cfae:	68fa      	ldr	r2, [r7, #12]
 801cfb0:	4313      	orrs	r3, r2
 801cfb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	2280      	movs	r2, #128	@ 0x80
 801cfb8:	4393      	bics	r3, r2
 801cfba:	001a      	movs	r2, r3
 801cfbc:	683b      	ldr	r3, [r7, #0]
 801cfbe:	691b      	ldr	r3, [r3, #16]
 801cfc0:	4313      	orrs	r3, r2
 801cfc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	68fa      	ldr	r2, [r7, #12]
 801cfc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801cfca:	683b      	ldr	r3, [r7, #0]
 801cfcc:	689a      	ldr	r2, [r3, #8]
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	681a      	ldr	r2, [r3, #0]
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	2201      	movs	r2, #1
 801cfde:	615a      	str	r2, [r3, #20]
}
 801cfe0:	46c0      	nop			@ (mov r8, r8)
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	b004      	add	sp, #16
 801cfe6:	bd80      	pop	{r7, pc}
 801cfe8:	40000400 	.word	0x40000400
 801cfec:	40010800 	.word	0x40010800
 801cff0:	40011400 	.word	0x40011400
 801cff4:	fffffcff 	.word	0xfffffcff

0801cff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b086      	sub	sp, #24
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	6a1b      	ldr	r3, [r3, #32]
 801d006:	2201      	movs	r2, #1
 801d008:	4393      	bics	r3, r2
 801d00a:	001a      	movs	r2, r3
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	6a1b      	ldr	r3, [r3, #32]
 801d014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	699b      	ldr	r3, [r3, #24]
 801d020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	2270      	movs	r2, #112	@ 0x70
 801d026:	4393      	bics	r3, r2
 801d028:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	2203      	movs	r2, #3
 801d02e:	4393      	bics	r3, r2
 801d030:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d032:	683b      	ldr	r3, [r7, #0]
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	68fa      	ldr	r2, [r7, #12]
 801d038:	4313      	orrs	r3, r2
 801d03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d03c:	697b      	ldr	r3, [r7, #20]
 801d03e:	2202      	movs	r2, #2
 801d040:	4393      	bics	r3, r2
 801d042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d044:	683b      	ldr	r3, [r7, #0]
 801d046:	689b      	ldr	r3, [r3, #8]
 801d048:	697a      	ldr	r2, [r7, #20]
 801d04a:	4313      	orrs	r3, r2
 801d04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	693a      	ldr	r2, [r7, #16]
 801d052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	68fa      	ldr	r2, [r7, #12]
 801d058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d05a:	683b      	ldr	r3, [r7, #0]
 801d05c:	685a      	ldr	r2, [r3, #4]
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	697a      	ldr	r2, [r7, #20]
 801d066:	621a      	str	r2, [r3, #32]
}
 801d068:	46c0      	nop			@ (mov r8, r8)
 801d06a:	46bd      	mov	sp, r7
 801d06c:	b006      	add	sp, #24
 801d06e:	bd80      	pop	{r7, pc}

0801d070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b086      	sub	sp, #24
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
 801d078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	6a1b      	ldr	r3, [r3, #32]
 801d07e:	2210      	movs	r2, #16
 801d080:	4393      	bics	r3, r2
 801d082:	001a      	movs	r2, r3
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	6a1b      	ldr	r3, [r3, #32]
 801d08c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	685b      	ldr	r3, [r3, #4]
 801d092:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	699b      	ldr	r3, [r3, #24]
 801d098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	4a13      	ldr	r2, [pc, #76]	@ (801d0ec <TIM_OC2_SetConfig+0x7c>)
 801d09e:	4013      	ands	r3, r2
 801d0a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	4a12      	ldr	r2, [pc, #72]	@ (801d0f0 <TIM_OC2_SetConfig+0x80>)
 801d0a6:	4013      	ands	r3, r2
 801d0a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d0aa:	683b      	ldr	r3, [r7, #0]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	021b      	lsls	r3, r3, #8
 801d0b0:	68fa      	ldr	r2, [r7, #12]
 801d0b2:	4313      	orrs	r3, r2
 801d0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d0b6:	697b      	ldr	r3, [r7, #20]
 801d0b8:	2220      	movs	r2, #32
 801d0ba:	4393      	bics	r3, r2
 801d0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d0be:	683b      	ldr	r3, [r7, #0]
 801d0c0:	689b      	ldr	r3, [r3, #8]
 801d0c2:	011b      	lsls	r3, r3, #4
 801d0c4:	697a      	ldr	r2, [r7, #20]
 801d0c6:	4313      	orrs	r3, r2
 801d0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	693a      	ldr	r2, [r7, #16]
 801d0ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	68fa      	ldr	r2, [r7, #12]
 801d0d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d0d6:	683b      	ldr	r3, [r7, #0]
 801d0d8:	685a      	ldr	r2, [r3, #4]
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	697a      	ldr	r2, [r7, #20]
 801d0e2:	621a      	str	r2, [r3, #32]
}
 801d0e4:	46c0      	nop			@ (mov r8, r8)
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	b006      	add	sp, #24
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	ffff8fff 	.word	0xffff8fff
 801d0f0:	fffffcff 	.word	0xfffffcff

0801d0f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b086      	sub	sp, #24
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
 801d0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6a1b      	ldr	r3, [r3, #32]
 801d102:	4a1a      	ldr	r2, [pc, #104]	@ (801d16c <TIM_OC3_SetConfig+0x78>)
 801d104:	401a      	ands	r2, r3
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	6a1b      	ldr	r3, [r3, #32]
 801d10e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	685b      	ldr	r3, [r3, #4]
 801d114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	69db      	ldr	r3, [r3, #28]
 801d11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	2270      	movs	r2, #112	@ 0x70
 801d120:	4393      	bics	r3, r2
 801d122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	2203      	movs	r2, #3
 801d128:	4393      	bics	r3, r2
 801d12a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d12c:	683b      	ldr	r3, [r7, #0]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	68fa      	ldr	r2, [r7, #12]
 801d132:	4313      	orrs	r3, r2
 801d134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	4a0d      	ldr	r2, [pc, #52]	@ (801d170 <TIM_OC3_SetConfig+0x7c>)
 801d13a:	4013      	ands	r3, r2
 801d13c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	689b      	ldr	r3, [r3, #8]
 801d142:	021b      	lsls	r3, r3, #8
 801d144:	697a      	ldr	r2, [r7, #20]
 801d146:	4313      	orrs	r3, r2
 801d148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	693a      	ldr	r2, [r7, #16]
 801d14e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	68fa      	ldr	r2, [r7, #12]
 801d154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	685a      	ldr	r2, [r3, #4]
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	697a      	ldr	r2, [r7, #20]
 801d162:	621a      	str	r2, [r3, #32]
}
 801d164:	46c0      	nop			@ (mov r8, r8)
 801d166:	46bd      	mov	sp, r7
 801d168:	b006      	add	sp, #24
 801d16a:	bd80      	pop	{r7, pc}
 801d16c:	fffffeff 	.word	0xfffffeff
 801d170:	fffffdff 	.word	0xfffffdff

0801d174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d174:	b580      	push	{r7, lr}
 801d176:	b086      	sub	sp, #24
 801d178:	af00      	add	r7, sp, #0
 801d17a:	6078      	str	r0, [r7, #4]
 801d17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	6a1b      	ldr	r3, [r3, #32]
 801d182:	4a1b      	ldr	r2, [pc, #108]	@ (801d1f0 <TIM_OC4_SetConfig+0x7c>)
 801d184:	401a      	ands	r2, r3
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	6a1b      	ldr	r3, [r3, #32]
 801d18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	685b      	ldr	r3, [r3, #4]
 801d194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	69db      	ldr	r3, [r3, #28]
 801d19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	4a15      	ldr	r2, [pc, #84]	@ (801d1f4 <TIM_OC4_SetConfig+0x80>)
 801d1a0:	4013      	ands	r3, r2
 801d1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	4a14      	ldr	r2, [pc, #80]	@ (801d1f8 <TIM_OC4_SetConfig+0x84>)
 801d1a8:	4013      	ands	r3, r2
 801d1aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d1ac:	683b      	ldr	r3, [r7, #0]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	021b      	lsls	r3, r3, #8
 801d1b2:	68fa      	ldr	r2, [r7, #12]
 801d1b4:	4313      	orrs	r3, r2
 801d1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d1b8:	697b      	ldr	r3, [r7, #20]
 801d1ba:	4a10      	ldr	r2, [pc, #64]	@ (801d1fc <TIM_OC4_SetConfig+0x88>)
 801d1bc:	4013      	ands	r3, r2
 801d1be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d1c0:	683b      	ldr	r3, [r7, #0]
 801d1c2:	689b      	ldr	r3, [r3, #8]
 801d1c4:	031b      	lsls	r3, r3, #12
 801d1c6:	697a      	ldr	r2, [r7, #20]
 801d1c8:	4313      	orrs	r3, r2
 801d1ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	693a      	ldr	r2, [r7, #16]
 801d1d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	68fa      	ldr	r2, [r7, #12]
 801d1d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d1d8:	683b      	ldr	r3, [r7, #0]
 801d1da:	685a      	ldr	r2, [r3, #4]
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	697a      	ldr	r2, [r7, #20]
 801d1e4:	621a      	str	r2, [r3, #32]
}
 801d1e6:	46c0      	nop			@ (mov r8, r8)
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	b006      	add	sp, #24
 801d1ec:	bd80      	pop	{r7, pc}
 801d1ee:	46c0      	nop			@ (mov r8, r8)
 801d1f0:	ffffefff 	.word	0xffffefff
 801d1f4:	ffff8fff 	.word	0xffff8fff
 801d1f8:	fffffcff 	.word	0xfffffcff
 801d1fc:	ffffdfff 	.word	0xffffdfff

0801d200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d200:	b580      	push	{r7, lr}
 801d202:	b086      	sub	sp, #24
 801d204:	af00      	add	r7, sp, #0
 801d206:	60f8      	str	r0, [r7, #12]
 801d208:	60b9      	str	r1, [r7, #8]
 801d20a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	221f      	movs	r2, #31
 801d210:	4013      	ands	r3, r2
 801d212:	2201      	movs	r2, #1
 801d214:	409a      	lsls	r2, r3
 801d216:	0013      	movs	r3, r2
 801d218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	6a1b      	ldr	r3, [r3, #32]
 801d21e:	697a      	ldr	r2, [r7, #20]
 801d220:	43d2      	mvns	r2, r2
 801d222:	401a      	ands	r2, r3
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	6a1a      	ldr	r2, [r3, #32]
 801d22c:	68bb      	ldr	r3, [r7, #8]
 801d22e:	211f      	movs	r1, #31
 801d230:	400b      	ands	r3, r1
 801d232:	6879      	ldr	r1, [r7, #4]
 801d234:	4099      	lsls	r1, r3
 801d236:	000b      	movs	r3, r1
 801d238:	431a      	orrs	r2, r3
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	621a      	str	r2, [r3, #32]
}
 801d23e:	46c0      	nop			@ (mov r8, r8)
 801d240:	46bd      	mov	sp, r7
 801d242:	b006      	add	sp, #24
 801d244:	bd80      	pop	{r7, pc}
	...

0801d248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b084      	sub	sp, #16
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
 801d250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	2238      	movs	r2, #56	@ 0x38
 801d256:	5c9b      	ldrb	r3, [r3, r2]
 801d258:	2b01      	cmp	r3, #1
 801d25a:	d101      	bne.n	801d260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d25c:	2302      	movs	r3, #2
 801d25e:	e047      	b.n	801d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	2238      	movs	r2, #56	@ 0x38
 801d264:	2101      	movs	r1, #1
 801d266:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	2239      	movs	r2, #57	@ 0x39
 801d26c:	2102      	movs	r1, #2
 801d26e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	689b      	ldr	r3, [r3, #8]
 801d27e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	2270      	movs	r2, #112	@ 0x70
 801d284:	4393      	bics	r3, r2
 801d286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d288:	683b      	ldr	r3, [r7, #0]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	68fa      	ldr	r2, [r7, #12]
 801d28e:	4313      	orrs	r3, r2
 801d290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	68fa      	ldr	r2, [r7, #12]
 801d298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	681a      	ldr	r2, [r3, #0]
 801d29e:	2380      	movs	r3, #128	@ 0x80
 801d2a0:	05db      	lsls	r3, r3, #23
 801d2a2:	429a      	cmp	r2, r3
 801d2a4:	d00e      	beq.n	801d2c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	4a13      	ldr	r2, [pc, #76]	@ (801d2f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d2ac:	4293      	cmp	r3, r2
 801d2ae:	d009      	beq.n	801d2c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	4a11      	ldr	r2, [pc, #68]	@ (801d2fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d2b6:	4293      	cmp	r3, r2
 801d2b8:	d004      	beq.n	801d2c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	4a10      	ldr	r2, [pc, #64]	@ (801d300 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d2c0:	4293      	cmp	r3, r2
 801d2c2:	d10c      	bne.n	801d2de <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d2c4:	68bb      	ldr	r3, [r7, #8]
 801d2c6:	2280      	movs	r2, #128	@ 0x80
 801d2c8:	4393      	bics	r3, r2
 801d2ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d2cc:	683b      	ldr	r3, [r7, #0]
 801d2ce:	685b      	ldr	r3, [r3, #4]
 801d2d0:	68ba      	ldr	r2, [r7, #8]
 801d2d2:	4313      	orrs	r3, r2
 801d2d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	68ba      	ldr	r2, [r7, #8]
 801d2dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	2239      	movs	r2, #57	@ 0x39
 801d2e2:	2101      	movs	r1, #1
 801d2e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	2238      	movs	r2, #56	@ 0x38
 801d2ea:	2100      	movs	r1, #0
 801d2ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d2ee:	2300      	movs	r3, #0
}
 801d2f0:	0018      	movs	r0, r3
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	b004      	add	sp, #16
 801d2f6:	bd80      	pop	{r7, pc}
 801d2f8:	40000400 	.word	0x40000400
 801d2fc:	40010800 	.word	0x40010800
 801d300:	40011400 	.word	0x40011400

0801d304 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b082      	sub	sp, #8
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]
 801d30c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	2238      	movs	r2, #56	@ 0x38
 801d312:	5c9b      	ldrb	r3, [r3, r2]
 801d314:	2b01      	cmp	r3, #1
 801d316:	d101      	bne.n	801d31c <HAL_TIMEx_RemapConfig+0x18>
 801d318:	2302      	movs	r3, #2
 801d31a:	e00c      	b.n	801d336 <HAL_TIMEx_RemapConfig+0x32>
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	2238      	movs	r2, #56	@ 0x38
 801d320:	2101      	movs	r1, #1
 801d322:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	683a      	ldr	r2, [r7, #0]
 801d32a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	2238      	movs	r2, #56	@ 0x38
 801d330:	2100      	movs	r1, #0
 801d332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d334:	2300      	movs	r3, #0
}
 801d336:	0018      	movs	r0, r3
 801d338:	46bd      	mov	sp, r7
 801d33a:	b002      	add	sp, #8
 801d33c:	bd80      	pop	{r7, pc}
	...

0801d340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d340:	b580      	push	{r7, lr}
 801d342:	b082      	sub	sp, #8
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d101      	bne.n	801d352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d34e:	2301      	movs	r3, #1
 801d350:	e053      	b.n	801d3fa <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d356:	2b00      	cmp	r3, #0
 801d358:	d116      	bne.n	801d388 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	2278      	movs	r2, #120	@ 0x78
 801d35e:	2100      	movs	r1, #0
 801d360:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	0018      	movs	r0, r3
 801d366:	f000 fe5b 	bl	801e020 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	22b0      	movs	r2, #176	@ 0xb0
 801d36e:	589b      	ldr	r3, [r3, r2]
 801d370:	2b00      	cmp	r3, #0
 801d372:	d103      	bne.n	801d37c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	21b0      	movs	r1, #176	@ 0xb0
 801d378:	4a22      	ldr	r2, [pc, #136]	@ (801d404 <HAL_UART_Init+0xc4>)
 801d37a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	22b0      	movs	r2, #176	@ 0xb0
 801d380:	589b      	ldr	r3, [r3, r2]
 801d382:	687a      	ldr	r2, [r7, #4]
 801d384:	0010      	movs	r0, r2
 801d386:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	2224      	movs	r2, #36	@ 0x24
 801d38c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	681a      	ldr	r2, [r3, #0]
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	2101      	movs	r1, #1
 801d39a:	438a      	bics	r2, r1
 801d39c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	0018      	movs	r0, r3
 801d3a2:	f000 fe81 	bl	801e0a8 <UART_SetConfig>
 801d3a6:	0003      	movs	r3, r0
 801d3a8:	2b01      	cmp	r3, #1
 801d3aa:	d101      	bne.n	801d3b0 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d3ac:	2301      	movs	r3, #1
 801d3ae:	e024      	b.n	801d3fa <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d003      	beq.n	801d3c0 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	0018      	movs	r0, r3
 801d3bc:	f001 f912 	bl	801e5e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	685a      	ldr	r2, [r3, #4]
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	490f      	ldr	r1, [pc, #60]	@ (801d408 <HAL_UART_Init+0xc8>)
 801d3cc:	400a      	ands	r2, r1
 801d3ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	689a      	ldr	r2, [r3, #8]
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	212a      	movs	r1, #42	@ 0x2a
 801d3dc:	438a      	bics	r2, r1
 801d3de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	681a      	ldr	r2, [r3, #0]
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	2101      	movs	r1, #1
 801d3ec:	430a      	orrs	r2, r1
 801d3ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	0018      	movs	r0, r3
 801d3f4:	f001 f9aa 	bl	801e74c <UART_CheckIdleState>
 801d3f8:	0003      	movs	r3, r0
}
 801d3fa:	0018      	movs	r0, r3
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	b002      	add	sp, #8
 801d400:	bd80      	pop	{r7, pc}
 801d402:	46c0      	nop			@ (mov r8, r8)
 801d404:	08013a8d 	.word	0x08013a8d
 801d408:	ffffb7ff 	.word	0xffffb7ff

0801d40c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b08a      	sub	sp, #40	@ 0x28
 801d410:	af02      	add	r7, sp, #8
 801d412:	60f8      	str	r0, [r7, #12]
 801d414:	60b9      	str	r1, [r7, #8]
 801d416:	603b      	str	r3, [r7, #0]
 801d418:	1dbb      	adds	r3, r7, #6
 801d41a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d420:	2b20      	cmp	r3, #32
 801d422:	d000      	beq.n	801d426 <HAL_UART_Transmit+0x1a>
 801d424:	e08c      	b.n	801d540 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d426:	68bb      	ldr	r3, [r7, #8]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d003      	beq.n	801d434 <HAL_UART_Transmit+0x28>
 801d42c:	1dbb      	adds	r3, r7, #6
 801d42e:	881b      	ldrh	r3, [r3, #0]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d101      	bne.n	801d438 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d434:	2301      	movs	r3, #1
 801d436:	e084      	b.n	801d542 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	689a      	ldr	r2, [r3, #8]
 801d43c:	2380      	movs	r3, #128	@ 0x80
 801d43e:	015b      	lsls	r3, r3, #5
 801d440:	429a      	cmp	r2, r3
 801d442:	d109      	bne.n	801d458 <HAL_UART_Transmit+0x4c>
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	691b      	ldr	r3, [r3, #16]
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d105      	bne.n	801d458 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d44c:	68bb      	ldr	r3, [r7, #8]
 801d44e:	2201      	movs	r2, #1
 801d450:	4013      	ands	r3, r2
 801d452:	d001      	beq.n	801d458 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d454:	2301      	movs	r3, #1
 801d456:	e074      	b.n	801d542 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	2284      	movs	r2, #132	@ 0x84
 801d45c:	2100      	movs	r1, #0
 801d45e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	2221      	movs	r2, #33	@ 0x21
 801d464:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d466:	f7f7 fa2b 	bl	80148c0 <HAL_GetTick>
 801d46a:	0003      	movs	r3, r0
 801d46c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	1dba      	adds	r2, r7, #6
 801d472:	2150      	movs	r1, #80	@ 0x50
 801d474:	8812      	ldrh	r2, [r2, #0]
 801d476:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	1dba      	adds	r2, r7, #6
 801d47c:	2152      	movs	r1, #82	@ 0x52
 801d47e:	8812      	ldrh	r2, [r2, #0]
 801d480:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	689a      	ldr	r2, [r3, #8]
 801d486:	2380      	movs	r3, #128	@ 0x80
 801d488:	015b      	lsls	r3, r3, #5
 801d48a:	429a      	cmp	r2, r3
 801d48c:	d108      	bne.n	801d4a0 <HAL_UART_Transmit+0x94>
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	691b      	ldr	r3, [r3, #16]
 801d492:	2b00      	cmp	r3, #0
 801d494:	d104      	bne.n	801d4a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d496:	2300      	movs	r3, #0
 801d498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d49a:	68bb      	ldr	r3, [r7, #8]
 801d49c:	61bb      	str	r3, [r7, #24]
 801d49e:	e003      	b.n	801d4a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d4a0:	68bb      	ldr	r3, [r7, #8]
 801d4a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d4a4:	2300      	movs	r3, #0
 801d4a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d4a8:	e02f      	b.n	801d50a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d4aa:	697a      	ldr	r2, [r7, #20]
 801d4ac:	68f8      	ldr	r0, [r7, #12]
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	9300      	str	r3, [sp, #0]
 801d4b2:	0013      	movs	r3, r2
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	2180      	movs	r1, #128	@ 0x80
 801d4b8:	f001 f9f0 	bl	801e89c <UART_WaitOnFlagUntilTimeout>
 801d4bc:	1e03      	subs	r3, r0, #0
 801d4be:	d004      	beq.n	801d4ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	2220      	movs	r2, #32
 801d4c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d4c6:	2303      	movs	r3, #3
 801d4c8:	e03b      	b.n	801d542 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d4ca:	69fb      	ldr	r3, [r7, #28]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d10b      	bne.n	801d4e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d4d0:	69bb      	ldr	r3, [r7, #24]
 801d4d2:	881b      	ldrh	r3, [r3, #0]
 801d4d4:	001a      	movs	r2, r3
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	05d2      	lsls	r2, r2, #23
 801d4dc:	0dd2      	lsrs	r2, r2, #23
 801d4de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d4e0:	69bb      	ldr	r3, [r7, #24]
 801d4e2:	3302      	adds	r3, #2
 801d4e4:	61bb      	str	r3, [r7, #24]
 801d4e6:	e007      	b.n	801d4f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d4e8:	69fb      	ldr	r3, [r7, #28]
 801d4ea:	781a      	ldrb	r2, [r3, #0]
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d4f2:	69fb      	ldr	r3, [r7, #28]
 801d4f4:	3301      	adds	r3, #1
 801d4f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	2252      	movs	r2, #82	@ 0x52
 801d4fc:	5a9b      	ldrh	r3, [r3, r2]
 801d4fe:	b29b      	uxth	r3, r3
 801d500:	3b01      	subs	r3, #1
 801d502:	b299      	uxth	r1, r3
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	2252      	movs	r2, #82	@ 0x52
 801d508:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	2252      	movs	r2, #82	@ 0x52
 801d50e:	5a9b      	ldrh	r3, [r3, r2]
 801d510:	b29b      	uxth	r3, r3
 801d512:	2b00      	cmp	r3, #0
 801d514:	d1c9      	bne.n	801d4aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d516:	697a      	ldr	r2, [r7, #20]
 801d518:	68f8      	ldr	r0, [r7, #12]
 801d51a:	683b      	ldr	r3, [r7, #0]
 801d51c:	9300      	str	r3, [sp, #0]
 801d51e:	0013      	movs	r3, r2
 801d520:	2200      	movs	r2, #0
 801d522:	2140      	movs	r1, #64	@ 0x40
 801d524:	f001 f9ba 	bl	801e89c <UART_WaitOnFlagUntilTimeout>
 801d528:	1e03      	subs	r3, r0, #0
 801d52a:	d004      	beq.n	801d536 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	2220      	movs	r2, #32
 801d530:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d532:	2303      	movs	r3, #3
 801d534:	e005      	b.n	801d542 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	2220      	movs	r2, #32
 801d53a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d53c:	2300      	movs	r3, #0
 801d53e:	e000      	b.n	801d542 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d540:	2302      	movs	r3, #2
  }
}
 801d542:	0018      	movs	r0, r3
 801d544:	46bd      	mov	sp, r7
 801d546:	b008      	add	sp, #32
 801d548:	bd80      	pop	{r7, pc}
	...

0801d54c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b088      	sub	sp, #32
 801d550:	af00      	add	r7, sp, #0
 801d552:	60f8      	str	r0, [r7, #12]
 801d554:	60b9      	str	r1, [r7, #8]
 801d556:	1dbb      	adds	r3, r7, #6
 801d558:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	2280      	movs	r2, #128	@ 0x80
 801d55e:	589b      	ldr	r3, [r3, r2]
 801d560:	2b20      	cmp	r3, #32
 801d562:	d14a      	bne.n	801d5fa <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d564:	68bb      	ldr	r3, [r7, #8]
 801d566:	2b00      	cmp	r3, #0
 801d568:	d003      	beq.n	801d572 <HAL_UART_Receive_IT+0x26>
 801d56a:	1dbb      	adds	r3, r7, #6
 801d56c:	881b      	ldrh	r3, [r3, #0]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d101      	bne.n	801d576 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d572:	2301      	movs	r3, #1
 801d574:	e042      	b.n	801d5fc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	689a      	ldr	r2, [r3, #8]
 801d57a:	2380      	movs	r3, #128	@ 0x80
 801d57c:	015b      	lsls	r3, r3, #5
 801d57e:	429a      	cmp	r2, r3
 801d580:	d109      	bne.n	801d596 <HAL_UART_Receive_IT+0x4a>
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	691b      	ldr	r3, [r3, #16]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d105      	bne.n	801d596 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d58a:	68bb      	ldr	r3, [r7, #8]
 801d58c:	2201      	movs	r2, #1
 801d58e:	4013      	ands	r3, r2
 801d590:	d001      	beq.n	801d596 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d592:	2301      	movs	r3, #1
 801d594:	e032      	b.n	801d5fc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	2200      	movs	r2, #0
 801d59a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	4a18      	ldr	r2, [pc, #96]	@ (801d604 <HAL_UART_Receive_IT+0xb8>)
 801d5a2:	4293      	cmp	r3, r2
 801d5a4:	d020      	beq.n	801d5e8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	685a      	ldr	r2, [r3, #4]
 801d5ac:	2380      	movs	r3, #128	@ 0x80
 801d5ae:	041b      	lsls	r3, r3, #16
 801d5b0:	4013      	ands	r3, r2
 801d5b2:	d019      	beq.n	801d5e8 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5b4:	f3ef 8310 	mrs	r3, PRIMASK
 801d5b8:	613b      	str	r3, [r7, #16]
  return(result);
 801d5ba:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d5bc:	61fb      	str	r3, [r7, #28]
 801d5be:	2301      	movs	r3, #1
 801d5c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5c2:	697b      	ldr	r3, [r7, #20]
 801d5c4:	f383 8810 	msr	PRIMASK, r3
}
 801d5c8:	46c0      	nop			@ (mov r8, r8)
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	681a      	ldr	r2, [r3, #0]
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	2180      	movs	r1, #128	@ 0x80
 801d5d6:	04c9      	lsls	r1, r1, #19
 801d5d8:	430a      	orrs	r2, r1
 801d5da:	601a      	str	r2, [r3, #0]
 801d5dc:	69fb      	ldr	r3, [r7, #28]
 801d5de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5e0:	69bb      	ldr	r3, [r7, #24]
 801d5e2:	f383 8810 	msr	PRIMASK, r3
}
 801d5e6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d5e8:	1dbb      	adds	r3, r7, #6
 801d5ea:	881a      	ldrh	r2, [r3, #0]
 801d5ec:	68b9      	ldr	r1, [r7, #8]
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	0018      	movs	r0, r3
 801d5f2:	f001 f9bd 	bl	801e970 <UART_Start_Receive_IT>
 801d5f6:	0003      	movs	r3, r0
 801d5f8:	e000      	b.n	801d5fc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d5fa:	2302      	movs	r3, #2
  }
}
 801d5fc:	0018      	movs	r0, r3
 801d5fe:	46bd      	mov	sp, r7
 801d600:	b008      	add	sp, #32
 801d602:	bd80      	pop	{r7, pc}
 801d604:	40004800 	.word	0x40004800

0801d608 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b088      	sub	sp, #32
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	60f8      	str	r0, [r7, #12]
 801d610:	60b9      	str	r1, [r7, #8]
 801d612:	1dbb      	adds	r3, r7, #6
 801d614:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d61a:	2b20      	cmp	r3, #32
 801d61c:	d000      	beq.n	801d620 <HAL_UART_Transmit_DMA+0x18>
 801d61e:	e077      	b.n	801d710 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d620:	68bb      	ldr	r3, [r7, #8]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d003      	beq.n	801d62e <HAL_UART_Transmit_DMA+0x26>
 801d626:	1dbb      	adds	r3, r7, #6
 801d628:	881b      	ldrh	r3, [r3, #0]
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d101      	bne.n	801d632 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d62e:	2301      	movs	r3, #1
 801d630:	e06f      	b.n	801d712 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	689a      	ldr	r2, [r3, #8]
 801d636:	2380      	movs	r3, #128	@ 0x80
 801d638:	015b      	lsls	r3, r3, #5
 801d63a:	429a      	cmp	r2, r3
 801d63c:	d109      	bne.n	801d652 <HAL_UART_Transmit_DMA+0x4a>
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	691b      	ldr	r3, [r3, #16]
 801d642:	2b00      	cmp	r3, #0
 801d644:	d105      	bne.n	801d652 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d646:	68bb      	ldr	r3, [r7, #8]
 801d648:	2201      	movs	r2, #1
 801d64a:	4013      	ands	r3, r2
 801d64c:	d001      	beq.n	801d652 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d64e:	2301      	movs	r3, #1
 801d650:	e05f      	b.n	801d712 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	68ba      	ldr	r2, [r7, #8]
 801d656:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	1dba      	adds	r2, r7, #6
 801d65c:	2150      	movs	r1, #80	@ 0x50
 801d65e:	8812      	ldrh	r2, [r2, #0]
 801d660:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	1dba      	adds	r2, r7, #6
 801d666:	2152      	movs	r1, #82	@ 0x52
 801d668:	8812      	ldrh	r2, [r2, #0]
 801d66a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	2284      	movs	r2, #132	@ 0x84
 801d670:	2100      	movs	r1, #0
 801d672:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	2221      	movs	r2, #33	@ 0x21
 801d678:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d027      	beq.n	801d6d2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d682:	68fb      	ldr	r3, [r7, #12]
 801d684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d686:	4a25      	ldr	r2, [pc, #148]	@ (801d71c <HAL_UART_Transmit_DMA+0x114>)
 801d688:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d68e:	4a24      	ldr	r2, [pc, #144]	@ (801d720 <HAL_UART_Transmit_DMA+0x118>)
 801d690:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d696:	4a23      	ldr	r2, [pc, #140]	@ (801d724 <HAL_UART_Transmit_DMA+0x11c>)
 801d698:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d69e:	2200      	movs	r2, #0
 801d6a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d6aa:	0019      	movs	r1, r3
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	3328      	adds	r3, #40	@ 0x28
 801d6b2:	001a      	movs	r2, r3
 801d6b4:	1dbb      	adds	r3, r7, #6
 801d6b6:	881b      	ldrh	r3, [r3, #0]
 801d6b8:	f7f7 fe20 	bl	80152fc <HAL_DMA_Start_IT>
 801d6bc:	1e03      	subs	r3, r0, #0
 801d6be:	d008      	beq.n	801d6d2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	2284      	movs	r2, #132	@ 0x84
 801d6c4:	2110      	movs	r1, #16
 801d6c6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	2220      	movs	r2, #32
 801d6cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d6ce:	2301      	movs	r3, #1
 801d6d0:	e01f      	b.n	801d712 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	2240      	movs	r2, #64	@ 0x40
 801d6d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6da:	f3ef 8310 	mrs	r3, PRIMASK
 801d6de:	613b      	str	r3, [r7, #16]
  return(result);
 801d6e0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d6e2:	61fb      	str	r3, [r7, #28]
 801d6e4:	2301      	movs	r3, #1
 801d6e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6e8:	697b      	ldr	r3, [r7, #20]
 801d6ea:	f383 8810 	msr	PRIMASK, r3
}
 801d6ee:	46c0      	nop			@ (mov r8, r8)
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	689a      	ldr	r2, [r3, #8]
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	2180      	movs	r1, #128	@ 0x80
 801d6fc:	430a      	orrs	r2, r1
 801d6fe:	609a      	str	r2, [r3, #8]
 801d700:	69fb      	ldr	r3, [r7, #28]
 801d702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d704:	69bb      	ldr	r3, [r7, #24]
 801d706:	f383 8810 	msr	PRIMASK, r3
}
 801d70a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d70c:	2300      	movs	r3, #0
 801d70e:	e000      	b.n	801d712 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d710:	2302      	movs	r3, #2
  }
}
 801d712:	0018      	movs	r0, r3
 801d714:	46bd      	mov	sp, r7
 801d716:	b008      	add	sp, #32
 801d718:	bd80      	pop	{r7, pc}
 801d71a:	46c0      	nop			@ (mov r8, r8)
 801d71c:	0801ed55 	.word	0x0801ed55
 801d720:	0801edf1 	.word	0x0801edf1
 801d724:	0801ef91 	.word	0x0801ef91

0801d728 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d728:	b580      	push	{r7, lr}
 801d72a:	b088      	sub	sp, #32
 801d72c:	af00      	add	r7, sp, #0
 801d72e:	60f8      	str	r0, [r7, #12]
 801d730:	60b9      	str	r1, [r7, #8]
 801d732:	1dbb      	adds	r3, r7, #6
 801d734:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	2280      	movs	r2, #128	@ 0x80
 801d73a:	589b      	ldr	r3, [r3, r2]
 801d73c:	2b20      	cmp	r3, #32
 801d73e:	d14a      	bne.n	801d7d6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d740:	68bb      	ldr	r3, [r7, #8]
 801d742:	2b00      	cmp	r3, #0
 801d744:	d003      	beq.n	801d74e <HAL_UART_Receive_DMA+0x26>
 801d746:	1dbb      	adds	r3, r7, #6
 801d748:	881b      	ldrh	r3, [r3, #0]
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d101      	bne.n	801d752 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d74e:	2301      	movs	r3, #1
 801d750:	e042      	b.n	801d7d8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	689a      	ldr	r2, [r3, #8]
 801d756:	2380      	movs	r3, #128	@ 0x80
 801d758:	015b      	lsls	r3, r3, #5
 801d75a:	429a      	cmp	r2, r3
 801d75c:	d109      	bne.n	801d772 <HAL_UART_Receive_DMA+0x4a>
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	691b      	ldr	r3, [r3, #16]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d105      	bne.n	801d772 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	2201      	movs	r2, #1
 801d76a:	4013      	ands	r3, r2
 801d76c:	d001      	beq.n	801d772 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d76e:	2301      	movs	r3, #1
 801d770:	e032      	b.n	801d7d8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	2200      	movs	r2, #0
 801d776:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	681b      	ldr	r3, [r3, #0]
 801d77c:	4a18      	ldr	r2, [pc, #96]	@ (801d7e0 <HAL_UART_Receive_DMA+0xb8>)
 801d77e:	4293      	cmp	r3, r2
 801d780:	d020      	beq.n	801d7c4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	685a      	ldr	r2, [r3, #4]
 801d788:	2380      	movs	r3, #128	@ 0x80
 801d78a:	041b      	lsls	r3, r3, #16
 801d78c:	4013      	ands	r3, r2
 801d78e:	d019      	beq.n	801d7c4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d790:	f3ef 8310 	mrs	r3, PRIMASK
 801d794:	613b      	str	r3, [r7, #16]
  return(result);
 801d796:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d798:	61fb      	str	r3, [r7, #28]
 801d79a:	2301      	movs	r3, #1
 801d79c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d79e:	697b      	ldr	r3, [r7, #20]
 801d7a0:	f383 8810 	msr	PRIMASK, r3
}
 801d7a4:	46c0      	nop			@ (mov r8, r8)
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	681a      	ldr	r2, [r3, #0]
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	2180      	movs	r1, #128	@ 0x80
 801d7b2:	04c9      	lsls	r1, r1, #19
 801d7b4:	430a      	orrs	r2, r1
 801d7b6:	601a      	str	r2, [r3, #0]
 801d7b8:	69fb      	ldr	r3, [r7, #28]
 801d7ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7bc:	69bb      	ldr	r3, [r7, #24]
 801d7be:	f383 8810 	msr	PRIMASK, r3
}
 801d7c2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d7c4:	1dbb      	adds	r3, r7, #6
 801d7c6:	881a      	ldrh	r2, [r3, #0]
 801d7c8:	68b9      	ldr	r1, [r7, #8]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	0018      	movs	r0, r3
 801d7ce:	f001 f999 	bl	801eb04 <UART_Start_Receive_DMA>
 801d7d2:	0003      	movs	r3, r0
 801d7d4:	e000      	b.n	801d7d8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d7d6:	2302      	movs	r3, #2
  }
}
 801d7d8:	0018      	movs	r0, r3
 801d7da:	46bd      	mov	sp, r7
 801d7dc:	b008      	add	sp, #32
 801d7de:	bd80      	pop	{r7, pc}
 801d7e0:	40004800 	.word	0x40004800

0801d7e4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 801d7e4:	b580      	push	{r7, lr}
 801d7e6:	b096      	sub	sp, #88	@ 0x58
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7ec:	f3ef 8310 	mrs	r3, PRIMASK
 801d7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801d7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801d7f4:	657b      	str	r3, [r7, #84]	@ 0x54
 801d7f6:	2301      	movs	r3, #1
 801d7f8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7fc:	f383 8810 	msr	PRIMASK, r3
}
 801d800:	46c0      	nop			@ (mov r8, r8)
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	681a      	ldr	r2, [r3, #0]
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	496f      	ldr	r1, [pc, #444]	@ (801d9cc <HAL_UART_Abort+0x1e8>)
 801d80e:	400a      	ands	r2, r1
 801d810:	601a      	str	r2, [r3, #0]
 801d812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d814:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d818:	f383 8810 	msr	PRIMASK, r3
}
 801d81c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d81e:	f3ef 8310 	mrs	r3, PRIMASK
 801d822:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 801d824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d826:	653b      	str	r3, [r7, #80]	@ 0x50
 801d828:	2301      	movs	r3, #1
 801d82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d82e:	f383 8810 	msr	PRIMASK, r3
}
 801d832:	46c0      	nop			@ (mov r8, r8)
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	689a      	ldr	r2, [r3, #8]
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	2101      	movs	r1, #1
 801d840:	438a      	bics	r2, r1
 801d842:	609a      	str	r2, [r3, #8]
 801d844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d846:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d84a:	f383 8810 	msr	PRIMASK, r3
}
 801d84e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d854:	2b01      	cmp	r3, #1
 801d856:	d118      	bne.n	801d88a <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d858:	f3ef 8310 	mrs	r3, PRIMASK
 801d85c:	623b      	str	r3, [r7, #32]
  return(result);
 801d85e:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801d860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d862:	2301      	movs	r3, #1
 801d864:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d868:	f383 8810 	msr	PRIMASK, r3
}
 801d86c:	46c0      	nop			@ (mov r8, r8)
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	681a      	ldr	r2, [r3, #0]
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	2110      	movs	r1, #16
 801d87a:	438a      	bics	r2, r1
 801d87c:	601a      	str	r2, [r3, #0]
 801d87e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d880:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d884:	f383 8810 	msr	PRIMASK, r3
}
 801d888:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	689b      	ldr	r3, [r3, #8]
 801d890:	2280      	movs	r2, #128	@ 0x80
 801d892:	4013      	ands	r3, r2
 801d894:	2b80      	cmp	r3, #128	@ 0x80
 801d896:	d135      	bne.n	801d904 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d898:	f3ef 8310 	mrs	r3, PRIMASK
 801d89c:	617b      	str	r3, [r7, #20]
  return(result);
 801d89e:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d8a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d8a2:	2301      	movs	r3, #1
 801d8a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8a6:	69bb      	ldr	r3, [r7, #24]
 801d8a8:	f383 8810 	msr	PRIMASK, r3
}
 801d8ac:	46c0      	nop			@ (mov r8, r8)
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	689a      	ldr	r2, [r3, #8]
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	2180      	movs	r1, #128	@ 0x80
 801d8ba:	438a      	bics	r2, r1
 801d8bc:	609a      	str	r2, [r3, #8]
 801d8be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d8c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8c2:	69fb      	ldr	r3, [r7, #28]
 801d8c4:	f383 8810 	msr	PRIMASK, r3
}
 801d8c8:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d018      	beq.n	801d904 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8de:	0018      	movs	r0, r3
 801d8e0:	f7f7 fd72 	bl	80153c8 <HAL_DMA_Abort>
 801d8e4:	1e03      	subs	r3, r0, #0
 801d8e6:	d00d      	beq.n	801d904 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8ec:	0018      	movs	r0, r3
 801d8ee:	f7f7 feac 	bl	801564a <HAL_DMA_GetError>
 801d8f2:	0003      	movs	r3, r0
 801d8f4:	2b20      	cmp	r3, #32
 801d8f6:	d105      	bne.n	801d904 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	2284      	movs	r2, #132	@ 0x84
 801d8fc:	2110      	movs	r1, #16
 801d8fe:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d900:	2303      	movs	r3, #3
 801d902:	e05f      	b.n	801d9c4 <HAL_UART_Abort+0x1e0>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	689b      	ldr	r3, [r3, #8]
 801d90a:	2240      	movs	r2, #64	@ 0x40
 801d90c:	4013      	ands	r3, r2
 801d90e:	2b40      	cmp	r3, #64	@ 0x40
 801d910:	d135      	bne.n	801d97e <HAL_UART_Abort+0x19a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d912:	f3ef 8310 	mrs	r3, PRIMASK
 801d916:	60bb      	str	r3, [r7, #8]
  return(result);
 801d918:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d91a:	647b      	str	r3, [r7, #68]	@ 0x44
 801d91c:	2301      	movs	r3, #1
 801d91e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	f383 8810 	msr	PRIMASK, r3
}
 801d926:	46c0      	nop			@ (mov r8, r8)
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	689a      	ldr	r2, [r3, #8]
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	2140      	movs	r1, #64	@ 0x40
 801d934:	438a      	bics	r2, r1
 801d936:	609a      	str	r2, [r3, #8]
 801d938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d93c:	693b      	ldr	r3, [r7, #16]
 801d93e:	f383 8810 	msr	PRIMASK, r3
}
 801d942:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d018      	beq.n	801d97e <HAL_UART_Abort+0x19a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d950:	2200      	movs	r2, #0
 801d952:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d958:	0018      	movs	r0, r3
 801d95a:	f7f7 fd35 	bl	80153c8 <HAL_DMA_Abort>
 801d95e:	1e03      	subs	r3, r0, #0
 801d960:	d00d      	beq.n	801d97e <HAL_UART_Abort+0x19a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d966:	0018      	movs	r0, r3
 801d968:	f7f7 fe6f 	bl	801564a <HAL_DMA_GetError>
 801d96c:	0003      	movs	r3, r0
 801d96e:	2b20      	cmp	r3, #32
 801d970:	d105      	bne.n	801d97e <HAL_UART_Abort+0x19a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	2284      	movs	r2, #132	@ 0x84
 801d976:	2110      	movs	r1, #16
 801d978:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d97a:	2303      	movs	r3, #3
 801d97c:	e022      	b.n	801d9c4 <HAL_UART_Abort+0x1e0>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	2252      	movs	r2, #82	@ 0x52
 801d982:	2100      	movs	r1, #0
 801d984:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	225a      	movs	r2, #90	@ 0x5a
 801d98a:	2100      	movs	r1, #0
 801d98c:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	220f      	movs	r2, #15
 801d994:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	699a      	ldr	r2, [r3, #24]
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	2108      	movs	r1, #8
 801d9a2:	430a      	orrs	r2, r1
 801d9a4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	2220      	movs	r2, #32
 801d9aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	2280      	movs	r2, #128	@ 0x80
 801d9b0:	2120      	movs	r1, #32
 801d9b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	2284      	movs	r2, #132	@ 0x84
 801d9be:	2100      	movs	r1, #0
 801d9c0:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 801d9c2:	2300      	movs	r3, #0
}
 801d9c4:	0018      	movs	r0, r3
 801d9c6:	46bd      	mov	sp, r7
 801d9c8:	b016      	add	sp, #88	@ 0x58
 801d9ca:	bd80      	pop	{r7, pc}
 801d9cc:	fffffe1f 	.word	0xfffffe1f

0801d9d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d9d0:	b590      	push	{r4, r7, lr}
 801d9d2:	b0ab      	sub	sp, #172	@ 0xac
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	69db      	ldr	r3, [r3, #28]
 801d9de:	22a4      	movs	r2, #164	@ 0xa4
 801d9e0:	18b9      	adds	r1, r7, r2
 801d9e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	20a0      	movs	r0, #160	@ 0xa0
 801d9ec:	1839      	adds	r1, r7, r0
 801d9ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	689b      	ldr	r3, [r3, #8]
 801d9f6:	219c      	movs	r1, #156	@ 0x9c
 801d9f8:	1879      	adds	r1, r7, r1
 801d9fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d9fc:	0011      	movs	r1, r2
 801d9fe:	18bb      	adds	r3, r7, r2
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	4a9c      	ldr	r2, [pc, #624]	@ (801dc74 <HAL_UART_IRQHandler+0x2a4>)
 801da04:	4013      	ands	r3, r2
 801da06:	2298      	movs	r2, #152	@ 0x98
 801da08:	18bc      	adds	r4, r7, r2
 801da0a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801da0c:	18bb      	adds	r3, r7, r2
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d114      	bne.n	801da3e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801da14:	187b      	adds	r3, r7, r1
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	2220      	movs	r2, #32
 801da1a:	4013      	ands	r3, r2
 801da1c:	d00f      	beq.n	801da3e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801da1e:	183b      	adds	r3, r7, r0
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	2220      	movs	r2, #32
 801da24:	4013      	ands	r3, r2
 801da26:	d00a      	beq.n	801da3e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d100      	bne.n	801da32 <HAL_UART_IRQHandler+0x62>
 801da30:	e2aa      	b.n	801df88 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da36:	687a      	ldr	r2, [r7, #4]
 801da38:	0010      	movs	r0, r2
 801da3a:	4798      	blx	r3
      }
      return;
 801da3c:	e2a4      	b.n	801df88 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801da3e:	2398      	movs	r3, #152	@ 0x98
 801da40:	18fb      	adds	r3, r7, r3
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	2b00      	cmp	r3, #0
 801da46:	d100      	bne.n	801da4a <HAL_UART_IRQHandler+0x7a>
 801da48:	e11a      	b.n	801dc80 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801da4a:	239c      	movs	r3, #156	@ 0x9c
 801da4c:	18fb      	adds	r3, r7, r3
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	2201      	movs	r2, #1
 801da52:	4013      	ands	r3, r2
 801da54:	d106      	bne.n	801da64 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801da56:	23a0      	movs	r3, #160	@ 0xa0
 801da58:	18fb      	adds	r3, r7, r3
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	4a86      	ldr	r2, [pc, #536]	@ (801dc78 <HAL_UART_IRQHandler+0x2a8>)
 801da5e:	4013      	ands	r3, r2
 801da60:	d100      	bne.n	801da64 <HAL_UART_IRQHandler+0x94>
 801da62:	e10d      	b.n	801dc80 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801da64:	23a4      	movs	r3, #164	@ 0xa4
 801da66:	18fb      	adds	r3, r7, r3
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	2201      	movs	r2, #1
 801da6c:	4013      	ands	r3, r2
 801da6e:	d012      	beq.n	801da96 <HAL_UART_IRQHandler+0xc6>
 801da70:	23a0      	movs	r3, #160	@ 0xa0
 801da72:	18fb      	adds	r3, r7, r3
 801da74:	681a      	ldr	r2, [r3, #0]
 801da76:	2380      	movs	r3, #128	@ 0x80
 801da78:	005b      	lsls	r3, r3, #1
 801da7a:	4013      	ands	r3, r2
 801da7c:	d00b      	beq.n	801da96 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	2201      	movs	r2, #1
 801da84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	2284      	movs	r2, #132	@ 0x84
 801da8a:	589b      	ldr	r3, [r3, r2]
 801da8c:	2201      	movs	r2, #1
 801da8e:	431a      	orrs	r2, r3
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	2184      	movs	r1, #132	@ 0x84
 801da94:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801da96:	23a4      	movs	r3, #164	@ 0xa4
 801da98:	18fb      	adds	r3, r7, r3
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	2202      	movs	r2, #2
 801da9e:	4013      	ands	r3, r2
 801daa0:	d011      	beq.n	801dac6 <HAL_UART_IRQHandler+0xf6>
 801daa2:	239c      	movs	r3, #156	@ 0x9c
 801daa4:	18fb      	adds	r3, r7, r3
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	2201      	movs	r2, #1
 801daaa:	4013      	ands	r3, r2
 801daac:	d00b      	beq.n	801dac6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	2202      	movs	r2, #2
 801dab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	2284      	movs	r2, #132	@ 0x84
 801daba:	589b      	ldr	r3, [r3, r2]
 801dabc:	2204      	movs	r2, #4
 801dabe:	431a      	orrs	r2, r3
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	2184      	movs	r1, #132	@ 0x84
 801dac4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801dac6:	23a4      	movs	r3, #164	@ 0xa4
 801dac8:	18fb      	adds	r3, r7, r3
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	2204      	movs	r2, #4
 801dace:	4013      	ands	r3, r2
 801dad0:	d011      	beq.n	801daf6 <HAL_UART_IRQHandler+0x126>
 801dad2:	239c      	movs	r3, #156	@ 0x9c
 801dad4:	18fb      	adds	r3, r7, r3
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	2201      	movs	r2, #1
 801dada:	4013      	ands	r3, r2
 801dadc:	d00b      	beq.n	801daf6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	2204      	movs	r2, #4
 801dae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	2284      	movs	r2, #132	@ 0x84
 801daea:	589b      	ldr	r3, [r3, r2]
 801daec:	2202      	movs	r2, #2
 801daee:	431a      	orrs	r2, r3
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	2184      	movs	r1, #132	@ 0x84
 801daf4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801daf6:	23a4      	movs	r3, #164	@ 0xa4
 801daf8:	18fb      	adds	r3, r7, r3
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	2208      	movs	r2, #8
 801dafe:	4013      	ands	r3, r2
 801db00:	d017      	beq.n	801db32 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801db02:	23a0      	movs	r3, #160	@ 0xa0
 801db04:	18fb      	adds	r3, r7, r3
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	2220      	movs	r2, #32
 801db0a:	4013      	ands	r3, r2
 801db0c:	d105      	bne.n	801db1a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801db0e:	239c      	movs	r3, #156	@ 0x9c
 801db10:	18fb      	adds	r3, r7, r3
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	2201      	movs	r2, #1
 801db16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801db18:	d00b      	beq.n	801db32 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	2208      	movs	r2, #8
 801db20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	2284      	movs	r2, #132	@ 0x84
 801db26:	589b      	ldr	r3, [r3, r2]
 801db28:	2208      	movs	r2, #8
 801db2a:	431a      	orrs	r2, r3
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	2184      	movs	r1, #132	@ 0x84
 801db30:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801db32:	23a4      	movs	r3, #164	@ 0xa4
 801db34:	18fb      	adds	r3, r7, r3
 801db36:	681a      	ldr	r2, [r3, #0]
 801db38:	2380      	movs	r3, #128	@ 0x80
 801db3a:	011b      	lsls	r3, r3, #4
 801db3c:	4013      	ands	r3, r2
 801db3e:	d013      	beq.n	801db68 <HAL_UART_IRQHandler+0x198>
 801db40:	23a0      	movs	r3, #160	@ 0xa0
 801db42:	18fb      	adds	r3, r7, r3
 801db44:	681a      	ldr	r2, [r3, #0]
 801db46:	2380      	movs	r3, #128	@ 0x80
 801db48:	04db      	lsls	r3, r3, #19
 801db4a:	4013      	ands	r3, r2
 801db4c:	d00c      	beq.n	801db68 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	2280      	movs	r2, #128	@ 0x80
 801db54:	0112      	lsls	r2, r2, #4
 801db56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	2284      	movs	r2, #132	@ 0x84
 801db5c:	589b      	ldr	r3, [r3, r2]
 801db5e:	2220      	movs	r2, #32
 801db60:	431a      	orrs	r2, r3
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	2184      	movs	r1, #132	@ 0x84
 801db66:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	2284      	movs	r2, #132	@ 0x84
 801db6c:	589b      	ldr	r3, [r3, r2]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d100      	bne.n	801db74 <HAL_UART_IRQHandler+0x1a4>
 801db72:	e20b      	b.n	801df8c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801db74:	23a4      	movs	r3, #164	@ 0xa4
 801db76:	18fb      	adds	r3, r7, r3
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	2220      	movs	r2, #32
 801db7c:	4013      	ands	r3, r2
 801db7e:	d00e      	beq.n	801db9e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801db80:	23a0      	movs	r3, #160	@ 0xa0
 801db82:	18fb      	adds	r3, r7, r3
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	2220      	movs	r2, #32
 801db88:	4013      	ands	r3, r2
 801db8a:	d008      	beq.n	801db9e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db90:	2b00      	cmp	r3, #0
 801db92:	d004      	beq.n	801db9e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db98:	687a      	ldr	r2, [r7, #4]
 801db9a:	0010      	movs	r0, r2
 801db9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	2284      	movs	r2, #132	@ 0x84
 801dba2:	589b      	ldr	r3, [r3, r2]
 801dba4:	2194      	movs	r1, #148	@ 0x94
 801dba6:	187a      	adds	r2, r7, r1
 801dba8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	689b      	ldr	r3, [r3, #8]
 801dbb0:	2240      	movs	r2, #64	@ 0x40
 801dbb2:	4013      	ands	r3, r2
 801dbb4:	2b40      	cmp	r3, #64	@ 0x40
 801dbb6:	d004      	beq.n	801dbc2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801dbb8:	187b      	adds	r3, r7, r1
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	2228      	movs	r2, #40	@ 0x28
 801dbbe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dbc0:	d04b      	beq.n	801dc5a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	0018      	movs	r0, r3
 801dbc6:	f001 f861 	bl	801ec8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	689b      	ldr	r3, [r3, #8]
 801dbd0:	2240      	movs	r2, #64	@ 0x40
 801dbd2:	4013      	ands	r3, r2
 801dbd4:	2b40      	cmp	r3, #64	@ 0x40
 801dbd6:	d139      	bne.n	801dc4c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbd8:	f3ef 8310 	mrs	r3, PRIMASK
 801dbdc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801dbde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dbe0:	2090      	movs	r0, #144	@ 0x90
 801dbe2:	183a      	adds	r2, r7, r0
 801dbe4:	6013      	str	r3, [r2, #0]
 801dbe6:	2301      	movs	r3, #1
 801dbe8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbec:	f383 8810 	msr	PRIMASK, r3
}
 801dbf0:	46c0      	nop			@ (mov r8, r8)
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	681b      	ldr	r3, [r3, #0]
 801dbf6:	689a      	ldr	r2, [r3, #8]
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	2140      	movs	r1, #64	@ 0x40
 801dbfe:	438a      	bics	r2, r1
 801dc00:	609a      	str	r2, [r3, #8]
 801dc02:	183b      	adds	r3, r7, r0
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc0a:	f383 8810 	msr	PRIMASK, r3
}
 801dc0e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d012      	beq.n	801dc3e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc1c:	4a17      	ldr	r2, [pc, #92]	@ (801dc7c <HAL_UART_IRQHandler+0x2ac>)
 801dc1e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc24:	0018      	movs	r0, r3
 801dc26:	f7f7 fc0f 	bl	8015448 <HAL_DMA_Abort_IT>
 801dc2a:	1e03      	subs	r3, r0, #0
 801dc2c:	d020      	beq.n	801dc70 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc38:	0018      	movs	r0, r3
 801dc3a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc3c:	e018      	b.n	801dc70 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	2298      	movs	r2, #152	@ 0x98
 801dc42:	589b      	ldr	r3, [r3, r2]
 801dc44:	687a      	ldr	r2, [r7, #4]
 801dc46:	0010      	movs	r0, r2
 801dc48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc4a:	e011      	b.n	801dc70 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	2298      	movs	r2, #152	@ 0x98
 801dc50:	589b      	ldr	r3, [r3, r2]
 801dc52:	687a      	ldr	r2, [r7, #4]
 801dc54:	0010      	movs	r0, r2
 801dc56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc58:	e00a      	b.n	801dc70 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	2298      	movs	r2, #152	@ 0x98
 801dc5e:	589b      	ldr	r3, [r3, r2]
 801dc60:	687a      	ldr	r2, [r7, #4]
 801dc62:	0010      	movs	r0, r2
 801dc64:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	2284      	movs	r2, #132	@ 0x84
 801dc6a:	2100      	movs	r1, #0
 801dc6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801dc6e:	e18d      	b.n	801df8c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc70:	46c0      	nop			@ (mov r8, r8)
    return;
 801dc72:	e18b      	b.n	801df8c <HAL_UART_IRQHandler+0x5bc>
 801dc74:	0000080f 	.word	0x0000080f
 801dc78:	04000120 	.word	0x04000120
 801dc7c:	0801f019 	.word	0x0801f019

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc84:	2b01      	cmp	r3, #1
 801dc86:	d000      	beq.n	801dc8a <HAL_UART_IRQHandler+0x2ba>
 801dc88:	e13d      	b.n	801df06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801dc8a:	23a4      	movs	r3, #164	@ 0xa4
 801dc8c:	18fb      	adds	r3, r7, r3
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	2210      	movs	r2, #16
 801dc92:	4013      	ands	r3, r2
 801dc94:	d100      	bne.n	801dc98 <HAL_UART_IRQHandler+0x2c8>
 801dc96:	e136      	b.n	801df06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801dc98:	23a0      	movs	r3, #160	@ 0xa0
 801dc9a:	18fb      	adds	r3, r7, r3
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	2210      	movs	r2, #16
 801dca0:	4013      	ands	r3, r2
 801dca2:	d100      	bne.n	801dca6 <HAL_UART_IRQHandler+0x2d6>
 801dca4:	e12f      	b.n	801df06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	2210      	movs	r2, #16
 801dcac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	689b      	ldr	r3, [r3, #8]
 801dcb4:	2240      	movs	r2, #64	@ 0x40
 801dcb6:	4013      	ands	r3, r2
 801dcb8:	2b40      	cmp	r3, #64	@ 0x40
 801dcba:	d000      	beq.n	801dcbe <HAL_UART_IRQHandler+0x2ee>
 801dcbc:	e0a2      	b.n	801de04 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	685a      	ldr	r2, [r3, #4]
 801dcc6:	217e      	movs	r1, #126	@ 0x7e
 801dcc8:	187b      	adds	r3, r7, r1
 801dcca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801dccc:	187b      	adds	r3, r7, r1
 801dcce:	881b      	ldrh	r3, [r3, #0]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d100      	bne.n	801dcd6 <HAL_UART_IRQHandler+0x306>
 801dcd4:	e15c      	b.n	801df90 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	2258      	movs	r2, #88	@ 0x58
 801dcda:	5a9b      	ldrh	r3, [r3, r2]
 801dcdc:	187a      	adds	r2, r7, r1
 801dcde:	8812      	ldrh	r2, [r2, #0]
 801dce0:	429a      	cmp	r2, r3
 801dce2:	d300      	bcc.n	801dce6 <HAL_UART_IRQHandler+0x316>
 801dce4:	e154      	b.n	801df90 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	187a      	adds	r2, r7, r1
 801dcea:	215a      	movs	r1, #90	@ 0x5a
 801dcec:	8812      	ldrh	r2, [r2, #0]
 801dcee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	2220      	movs	r2, #32
 801dcfa:	4013      	ands	r3, r2
 801dcfc:	d16f      	bne.n	801ddde <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcfe:	f3ef 8310 	mrs	r3, PRIMASK
 801dd02:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801dd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dd06:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dd08:	2301      	movs	r3, #1
 801dd0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd0e:	f383 8810 	msr	PRIMASK, r3
}
 801dd12:	46c0      	nop			@ (mov r8, r8)
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	681a      	ldr	r2, [r3, #0]
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	49a0      	ldr	r1, [pc, #640]	@ (801dfa0 <HAL_UART_IRQHandler+0x5d0>)
 801dd20:	400a      	ands	r2, r1
 801dd22:	601a      	str	r2, [r3, #0]
 801dd24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd26:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd2a:	f383 8810 	msr	PRIMASK, r3
}
 801dd2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd30:	f3ef 8310 	mrs	r3, PRIMASK
 801dd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801dd36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dd38:	677b      	str	r3, [r7, #116]	@ 0x74
 801dd3a:	2301      	movs	r3, #1
 801dd3c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dd40:	f383 8810 	msr	PRIMASK, r3
}
 801dd44:	46c0      	nop			@ (mov r8, r8)
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	689a      	ldr	r2, [r3, #8]
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	2101      	movs	r1, #1
 801dd52:	438a      	bics	r2, r1
 801dd54:	609a      	str	r2, [r3, #8]
 801dd56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dd58:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dd5c:	f383 8810 	msr	PRIMASK, r3
}
 801dd60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd62:	f3ef 8310 	mrs	r3, PRIMASK
 801dd66:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801dd68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dd6a:	673b      	str	r3, [r7, #112]	@ 0x70
 801dd6c:	2301      	movs	r3, #1
 801dd6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dd72:	f383 8810 	msr	PRIMASK, r3
}
 801dd76:	46c0      	nop			@ (mov r8, r8)
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	689a      	ldr	r2, [r3, #8]
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	2140      	movs	r1, #64	@ 0x40
 801dd84:	438a      	bics	r2, r1
 801dd86:	609a      	str	r2, [r3, #8]
 801dd88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd8a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dd8e:	f383 8810 	msr	PRIMASK, r3
}
 801dd92:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	2280      	movs	r2, #128	@ 0x80
 801dd98:	2120      	movs	r1, #32
 801dd9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	2200      	movs	r2, #0
 801dda0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dda2:	f3ef 8310 	mrs	r3, PRIMASK
 801dda6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801dda8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ddaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ddac:	2301      	movs	r3, #1
 801ddae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ddb2:	f383 8810 	msr	PRIMASK, r3
}
 801ddb6:	46c0      	nop			@ (mov r8, r8)
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	681a      	ldr	r2, [r3, #0]
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	2110      	movs	r1, #16
 801ddc4:	438a      	bics	r2, r1
 801ddc6:	601a      	str	r2, [r3, #0]
 801ddc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ddca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ddce:	f383 8810 	msr	PRIMASK, r3
}
 801ddd2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddd8:	0018      	movs	r0, r3
 801ddda:	f7f7 faf5 	bl	80153c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	2202      	movs	r2, #2
 801dde2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	22ac      	movs	r2, #172	@ 0xac
 801dde8:	589b      	ldr	r3, [r3, r2]
 801ddea:	687a      	ldr	r2, [r7, #4]
 801ddec:	2158      	movs	r1, #88	@ 0x58
 801ddee:	5a51      	ldrh	r1, [r2, r1]
 801ddf0:	687a      	ldr	r2, [r7, #4]
 801ddf2:	205a      	movs	r0, #90	@ 0x5a
 801ddf4:	5a12      	ldrh	r2, [r2, r0]
 801ddf6:	b292      	uxth	r2, r2
 801ddf8:	1a8a      	subs	r2, r1, r2
 801ddfa:	b291      	uxth	r1, r2
 801ddfc:	687a      	ldr	r2, [r7, #4]
 801ddfe:	0010      	movs	r0, r2
 801de00:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801de02:	e0c5      	b.n	801df90 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	2258      	movs	r2, #88	@ 0x58
 801de08:	5a99      	ldrh	r1, [r3, r2]
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	225a      	movs	r2, #90	@ 0x5a
 801de0e:	5a9b      	ldrh	r3, [r3, r2]
 801de10:	b29a      	uxth	r2, r3
 801de12:	208e      	movs	r0, #142	@ 0x8e
 801de14:	183b      	adds	r3, r7, r0
 801de16:	1a8a      	subs	r2, r1, r2
 801de18:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	225a      	movs	r2, #90	@ 0x5a
 801de1e:	5a9b      	ldrh	r3, [r3, r2]
 801de20:	b29b      	uxth	r3, r3
 801de22:	2b00      	cmp	r3, #0
 801de24:	d100      	bne.n	801de28 <HAL_UART_IRQHandler+0x458>
 801de26:	e0b5      	b.n	801df94 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801de28:	183b      	adds	r3, r7, r0
 801de2a:	881b      	ldrh	r3, [r3, #0]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d100      	bne.n	801de32 <HAL_UART_IRQHandler+0x462>
 801de30:	e0b0      	b.n	801df94 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de32:	f3ef 8310 	mrs	r3, PRIMASK
 801de36:	60fb      	str	r3, [r7, #12]
  return(result);
 801de38:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801de3a:	2488      	movs	r4, #136	@ 0x88
 801de3c:	193a      	adds	r2, r7, r4
 801de3e:	6013      	str	r3, [r2, #0]
 801de40:	2301      	movs	r3, #1
 801de42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de44:	693b      	ldr	r3, [r7, #16]
 801de46:	f383 8810 	msr	PRIMASK, r3
}
 801de4a:	46c0      	nop			@ (mov r8, r8)
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	681a      	ldr	r2, [r3, #0]
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	4953      	ldr	r1, [pc, #332]	@ (801dfa4 <HAL_UART_IRQHandler+0x5d4>)
 801de58:	400a      	ands	r2, r1
 801de5a:	601a      	str	r2, [r3, #0]
 801de5c:	193b      	adds	r3, r7, r4
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de62:	697b      	ldr	r3, [r7, #20]
 801de64:	f383 8810 	msr	PRIMASK, r3
}
 801de68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de6a:	f3ef 8310 	mrs	r3, PRIMASK
 801de6e:	61bb      	str	r3, [r7, #24]
  return(result);
 801de70:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de72:	2484      	movs	r4, #132	@ 0x84
 801de74:	193a      	adds	r2, r7, r4
 801de76:	6013      	str	r3, [r2, #0]
 801de78:	2301      	movs	r3, #1
 801de7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de7c:	69fb      	ldr	r3, [r7, #28]
 801de7e:	f383 8810 	msr	PRIMASK, r3
}
 801de82:	46c0      	nop			@ (mov r8, r8)
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	689a      	ldr	r2, [r3, #8]
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	2101      	movs	r1, #1
 801de90:	438a      	bics	r2, r1
 801de92:	609a      	str	r2, [r3, #8]
 801de94:	193b      	adds	r3, r7, r4
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de9a:	6a3b      	ldr	r3, [r7, #32]
 801de9c:	f383 8810 	msr	PRIMASK, r3
}
 801dea0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	2280      	movs	r2, #128	@ 0x80
 801dea6:	2120      	movs	r1, #32
 801dea8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	2200      	movs	r2, #0
 801deae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	2200      	movs	r2, #0
 801deb4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801deb6:	f3ef 8310 	mrs	r3, PRIMASK
 801deba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801debc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801debe:	2480      	movs	r4, #128	@ 0x80
 801dec0:	193a      	adds	r2, r7, r4
 801dec2:	6013      	str	r3, [r2, #0]
 801dec4:	2301      	movs	r3, #1
 801dec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801deca:	f383 8810 	msr	PRIMASK, r3
}
 801dece:	46c0      	nop			@ (mov r8, r8)
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	681a      	ldr	r2, [r3, #0]
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	2110      	movs	r1, #16
 801dedc:	438a      	bics	r2, r1
 801dede:	601a      	str	r2, [r3, #0]
 801dee0:	193b      	adds	r3, r7, r4
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dee8:	f383 8810 	msr	PRIMASK, r3
}
 801deec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	2202      	movs	r2, #2
 801def2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	22ac      	movs	r2, #172	@ 0xac
 801def8:	589b      	ldr	r3, [r3, r2]
 801defa:	183a      	adds	r2, r7, r0
 801defc:	8811      	ldrh	r1, [r2, #0]
 801defe:	687a      	ldr	r2, [r7, #4]
 801df00:	0010      	movs	r0, r2
 801df02:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801df04:	e046      	b.n	801df94 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801df06:	23a4      	movs	r3, #164	@ 0xa4
 801df08:	18fb      	adds	r3, r7, r3
 801df0a:	681a      	ldr	r2, [r3, #0]
 801df0c:	2380      	movs	r3, #128	@ 0x80
 801df0e:	035b      	lsls	r3, r3, #13
 801df10:	4013      	ands	r3, r2
 801df12:	d012      	beq.n	801df3a <HAL_UART_IRQHandler+0x56a>
 801df14:	239c      	movs	r3, #156	@ 0x9c
 801df16:	18fb      	adds	r3, r7, r3
 801df18:	681a      	ldr	r2, [r3, #0]
 801df1a:	2380      	movs	r3, #128	@ 0x80
 801df1c:	03db      	lsls	r3, r3, #15
 801df1e:	4013      	ands	r3, r2
 801df20:	d00b      	beq.n	801df3a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	2280      	movs	r2, #128	@ 0x80
 801df28:	0352      	lsls	r2, r2, #13
 801df2a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	22a8      	movs	r2, #168	@ 0xa8
 801df30:	589b      	ldr	r3, [r3, r2]
 801df32:	687a      	ldr	r2, [r7, #4]
 801df34:	0010      	movs	r0, r2
 801df36:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801df38:	e02f      	b.n	801df9a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801df3a:	23a4      	movs	r3, #164	@ 0xa4
 801df3c:	18fb      	adds	r3, r7, r3
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	2280      	movs	r2, #128	@ 0x80
 801df42:	4013      	ands	r3, r2
 801df44:	d00f      	beq.n	801df66 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801df46:	23a0      	movs	r3, #160	@ 0xa0
 801df48:	18fb      	adds	r3, r7, r3
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	2280      	movs	r2, #128	@ 0x80
 801df4e:	4013      	ands	r3, r2
 801df50:	d009      	beq.n	801df66 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801df56:	2b00      	cmp	r3, #0
 801df58:	d01e      	beq.n	801df98 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801df5e:	687a      	ldr	r2, [r7, #4]
 801df60:	0010      	movs	r0, r2
 801df62:	4798      	blx	r3
    }
    return;
 801df64:	e018      	b.n	801df98 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801df66:	23a4      	movs	r3, #164	@ 0xa4
 801df68:	18fb      	adds	r3, r7, r3
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	2240      	movs	r2, #64	@ 0x40
 801df6e:	4013      	ands	r3, r2
 801df70:	d013      	beq.n	801df9a <HAL_UART_IRQHandler+0x5ca>
 801df72:	23a0      	movs	r3, #160	@ 0xa0
 801df74:	18fb      	adds	r3, r7, r3
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	2240      	movs	r2, #64	@ 0x40
 801df7a:	4013      	ands	r3, r2
 801df7c:	d00d      	beq.n	801df9a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	0018      	movs	r0, r3
 801df82:	f001 f862 	bl	801f04a <UART_EndTransmit_IT>
    return;
 801df86:	e008      	b.n	801df9a <HAL_UART_IRQHandler+0x5ca>
      return;
 801df88:	46c0      	nop			@ (mov r8, r8)
 801df8a:	e006      	b.n	801df9a <HAL_UART_IRQHandler+0x5ca>
    return;
 801df8c:	46c0      	nop			@ (mov r8, r8)
 801df8e:	e004      	b.n	801df9a <HAL_UART_IRQHandler+0x5ca>
      return;
 801df90:	46c0      	nop			@ (mov r8, r8)
 801df92:	e002      	b.n	801df9a <HAL_UART_IRQHandler+0x5ca>
      return;
 801df94:	46c0      	nop			@ (mov r8, r8)
 801df96:	e000      	b.n	801df9a <HAL_UART_IRQHandler+0x5ca>
    return;
 801df98:	46c0      	nop			@ (mov r8, r8)
  }

}
 801df9a:	46bd      	mov	sp, r7
 801df9c:	b02b      	add	sp, #172	@ 0xac
 801df9e:	bd90      	pop	{r4, r7, pc}
 801dfa0:	fffffeff 	.word	0xfffffeff
 801dfa4:	fffffedf 	.word	0xfffffedf

0801dfa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dfa8:	b580      	push	{r7, lr}
 801dfaa:	b082      	sub	sp, #8
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dfb0:	46c0      	nop			@ (mov r8, r8)
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	b002      	add	sp, #8
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b082      	sub	sp, #8
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801dfc0:	46c0      	nop			@ (mov r8, r8)
 801dfc2:	46bd      	mov	sp, r7
 801dfc4:	b002      	add	sp, #8
 801dfc6:	bd80      	pop	{r7, pc}

0801dfc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dfc8:	b580      	push	{r7, lr}
 801dfca:	b082      	sub	sp, #8
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801dfd0:	46c0      	nop			@ (mov r8, r8)
 801dfd2:	46bd      	mov	sp, r7
 801dfd4:	b002      	add	sp, #8
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801dfd8:	b580      	push	{r7, lr}
 801dfda:	b082      	sub	sp, #8
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801dfe0:	46c0      	nop			@ (mov r8, r8)
 801dfe2:	46bd      	mov	sp, r7
 801dfe4:	b002      	add	sp, #8
 801dfe6:	bd80      	pop	{r7, pc}

0801dfe8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801dfe8:	b580      	push	{r7, lr}
 801dfea:	b082      	sub	sp, #8
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801dff0:	46c0      	nop			@ (mov r8, r8)
 801dff2:	46bd      	mov	sp, r7
 801dff4:	b002      	add	sp, #8
 801dff6:	bd80      	pop	{r7, pc}

0801dff8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801dff8:	b580      	push	{r7, lr}
 801dffa:	b082      	sub	sp, #8
 801dffc:	af00      	add	r7, sp, #0
 801dffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801e000:	46c0      	nop			@ (mov r8, r8)
 801e002:	46bd      	mov	sp, r7
 801e004:	b002      	add	sp, #8
 801e006:	bd80      	pop	{r7, pc}

0801e008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801e008:	b580      	push	{r7, lr}
 801e00a:	b082      	sub	sp, #8
 801e00c:	af00      	add	r7, sp, #0
 801e00e:	6078      	str	r0, [r7, #4]
 801e010:	000a      	movs	r2, r1
 801e012:	1cbb      	adds	r3, r7, #2
 801e014:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801e016:	46c0      	nop			@ (mov r8, r8)
 801e018:	46bd      	mov	sp, r7
 801e01a:	b002      	add	sp, #8
 801e01c:	bd80      	pop	{r7, pc}
	...

0801e020 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801e020:	b580      	push	{r7, lr}
 801e022:	b082      	sub	sp, #8
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2188      	movs	r1, #136	@ 0x88
 801e02c:	4a14      	ldr	r2, [pc, #80]	@ (801e080 <UART_InitCallbacksToDefault+0x60>)
 801e02e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	218c      	movs	r1, #140	@ 0x8c
 801e034:	4a13      	ldr	r2, [pc, #76]	@ (801e084 <UART_InitCallbacksToDefault+0x64>)
 801e036:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2190      	movs	r1, #144	@ 0x90
 801e03c:	4a12      	ldr	r2, [pc, #72]	@ (801e088 <UART_InitCallbacksToDefault+0x68>)
 801e03e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	2194      	movs	r1, #148	@ 0x94
 801e044:	4a11      	ldr	r2, [pc, #68]	@ (801e08c <UART_InitCallbacksToDefault+0x6c>)
 801e046:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	2198      	movs	r1, #152	@ 0x98
 801e04c:	4a10      	ldr	r2, [pc, #64]	@ (801e090 <UART_InitCallbacksToDefault+0x70>)
 801e04e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	219c      	movs	r1, #156	@ 0x9c
 801e054:	4a0f      	ldr	r2, [pc, #60]	@ (801e094 <UART_InitCallbacksToDefault+0x74>)
 801e056:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	21a0      	movs	r1, #160	@ 0xa0
 801e05c:	4a0e      	ldr	r2, [pc, #56]	@ (801e098 <UART_InitCallbacksToDefault+0x78>)
 801e05e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	21a4      	movs	r1, #164	@ 0xa4
 801e064:	4a0d      	ldr	r2, [pc, #52]	@ (801e09c <UART_InitCallbacksToDefault+0x7c>)
 801e066:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	21a8      	movs	r1, #168	@ 0xa8
 801e06c:	4a0c      	ldr	r2, [pc, #48]	@ (801e0a0 <UART_InitCallbacksToDefault+0x80>)
 801e06e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	21ac      	movs	r1, #172	@ 0xac
 801e074:	4a0b      	ldr	r2, [pc, #44]	@ (801e0a4 <UART_InitCallbacksToDefault+0x84>)
 801e076:	505a      	str	r2, [r3, r1]

}
 801e078:	46c0      	nop			@ (mov r8, r8)
 801e07a:	46bd      	mov	sp, r7
 801e07c:	b002      	add	sp, #8
 801e07e:	bd80      	pop	{r7, pc}
 801e080:	0801dfb9 	.word	0x0801dfb9
 801e084:	0801dfa9 	.word	0x0801dfa9
 801e088:	0801dfc9 	.word	0x0801dfc9
 801e08c:	0800d319 	.word	0x0800d319
 801e090:	08005071 	.word	0x08005071
 801e094:	0801dfd9 	.word	0x0801dfd9
 801e098:	0801dfe9 	.word	0x0801dfe9
 801e09c:	0801dff9 	.word	0x0801dff9
 801e0a0:	0801f43d 	.word	0x0801f43d
 801e0a4:	0801e009 	.word	0x0801e009

0801e0a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e0a8:	b5b0      	push	{r4, r5, r7, lr}
 801e0aa:	b08e      	sub	sp, #56	@ 0x38
 801e0ac:	af00      	add	r7, sp, #0
 801e0ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e0b0:	231a      	movs	r3, #26
 801e0b2:	2218      	movs	r2, #24
 801e0b4:	189b      	adds	r3, r3, r2
 801e0b6:	19db      	adds	r3, r3, r7
 801e0b8:	2200      	movs	r2, #0
 801e0ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e0bc:	69fb      	ldr	r3, [r7, #28]
 801e0be:	689a      	ldr	r2, [r3, #8]
 801e0c0:	69fb      	ldr	r3, [r7, #28]
 801e0c2:	691b      	ldr	r3, [r3, #16]
 801e0c4:	431a      	orrs	r2, r3
 801e0c6:	69fb      	ldr	r3, [r7, #28]
 801e0c8:	695b      	ldr	r3, [r3, #20]
 801e0ca:	431a      	orrs	r2, r3
 801e0cc:	69fb      	ldr	r3, [r7, #28]
 801e0ce:	69db      	ldr	r3, [r3, #28]
 801e0d0:	4313      	orrs	r3, r2
 801e0d2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e0d4:	69fb      	ldr	r3, [r7, #28]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	4ac3      	ldr	r2, [pc, #780]	@ (801e3e8 <UART_SetConfig+0x340>)
 801e0dc:	4013      	ands	r3, r2
 801e0de:	0019      	movs	r1, r3
 801e0e0:	69fb      	ldr	r3, [r7, #28]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e0e6:	430a      	orrs	r2, r1
 801e0e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e0ea:	69fb      	ldr	r3, [r7, #28]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	685b      	ldr	r3, [r3, #4]
 801e0f0:	4abe      	ldr	r2, [pc, #760]	@ (801e3ec <UART_SetConfig+0x344>)
 801e0f2:	4013      	ands	r3, r2
 801e0f4:	0019      	movs	r1, r3
 801e0f6:	69fb      	ldr	r3, [r7, #28]
 801e0f8:	68da      	ldr	r2, [r3, #12]
 801e0fa:	69fb      	ldr	r3, [r7, #28]
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	430a      	orrs	r2, r1
 801e100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e102:	69fb      	ldr	r3, [r7, #28]
 801e104:	699b      	ldr	r3, [r3, #24]
 801e106:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e108:	69fb      	ldr	r3, [r7, #28]
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	4ab8      	ldr	r2, [pc, #736]	@ (801e3f0 <UART_SetConfig+0x348>)
 801e10e:	4293      	cmp	r3, r2
 801e110:	d004      	beq.n	801e11c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e112:	69fb      	ldr	r3, [r7, #28]
 801e114:	6a1b      	ldr	r3, [r3, #32]
 801e116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e118:	4313      	orrs	r3, r2
 801e11a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e11c:	69fb      	ldr	r3, [r7, #28]
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	689b      	ldr	r3, [r3, #8]
 801e122:	4ab4      	ldr	r2, [pc, #720]	@ (801e3f4 <UART_SetConfig+0x34c>)
 801e124:	4013      	ands	r3, r2
 801e126:	0019      	movs	r1, r3
 801e128:	69fb      	ldr	r3, [r7, #28]
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e12e:	430a      	orrs	r2, r1
 801e130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e132:	69fb      	ldr	r3, [r7, #28]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	4ab0      	ldr	r2, [pc, #704]	@ (801e3f8 <UART_SetConfig+0x350>)
 801e138:	4293      	cmp	r3, r2
 801e13a:	d131      	bne.n	801e1a0 <UART_SetConfig+0xf8>
 801e13c:	4baf      	ldr	r3, [pc, #700]	@ (801e3fc <UART_SetConfig+0x354>)
 801e13e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e140:	2203      	movs	r2, #3
 801e142:	4013      	ands	r3, r2
 801e144:	2b03      	cmp	r3, #3
 801e146:	d01d      	beq.n	801e184 <UART_SetConfig+0xdc>
 801e148:	d823      	bhi.n	801e192 <UART_SetConfig+0xea>
 801e14a:	2b02      	cmp	r3, #2
 801e14c:	d00c      	beq.n	801e168 <UART_SetConfig+0xc0>
 801e14e:	d820      	bhi.n	801e192 <UART_SetConfig+0xea>
 801e150:	2b00      	cmp	r3, #0
 801e152:	d002      	beq.n	801e15a <UART_SetConfig+0xb2>
 801e154:	2b01      	cmp	r3, #1
 801e156:	d00e      	beq.n	801e176 <UART_SetConfig+0xce>
 801e158:	e01b      	b.n	801e192 <UART_SetConfig+0xea>
 801e15a:	231b      	movs	r3, #27
 801e15c:	2218      	movs	r2, #24
 801e15e:	189b      	adds	r3, r3, r2
 801e160:	19db      	adds	r3, r3, r7
 801e162:	2201      	movs	r2, #1
 801e164:	701a      	strb	r2, [r3, #0]
 801e166:	e0b4      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e168:	231b      	movs	r3, #27
 801e16a:	2218      	movs	r2, #24
 801e16c:	189b      	adds	r3, r3, r2
 801e16e:	19db      	adds	r3, r3, r7
 801e170:	2202      	movs	r2, #2
 801e172:	701a      	strb	r2, [r3, #0]
 801e174:	e0ad      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e176:	231b      	movs	r3, #27
 801e178:	2218      	movs	r2, #24
 801e17a:	189b      	adds	r3, r3, r2
 801e17c:	19db      	adds	r3, r3, r7
 801e17e:	2204      	movs	r2, #4
 801e180:	701a      	strb	r2, [r3, #0]
 801e182:	e0a6      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e184:	231b      	movs	r3, #27
 801e186:	2218      	movs	r2, #24
 801e188:	189b      	adds	r3, r3, r2
 801e18a:	19db      	adds	r3, r3, r7
 801e18c:	2208      	movs	r2, #8
 801e18e:	701a      	strb	r2, [r3, #0]
 801e190:	e09f      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e192:	231b      	movs	r3, #27
 801e194:	2218      	movs	r2, #24
 801e196:	189b      	adds	r3, r3, r2
 801e198:	19db      	adds	r3, r3, r7
 801e19a:	2210      	movs	r2, #16
 801e19c:	701a      	strb	r2, [r3, #0]
 801e19e:	e098      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e1a0:	69fb      	ldr	r3, [r7, #28]
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	4a96      	ldr	r2, [pc, #600]	@ (801e400 <UART_SetConfig+0x358>)
 801e1a6:	4293      	cmp	r3, r2
 801e1a8:	d131      	bne.n	801e20e <UART_SetConfig+0x166>
 801e1aa:	4b94      	ldr	r3, [pc, #592]	@ (801e3fc <UART_SetConfig+0x354>)
 801e1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e1ae:	220c      	movs	r2, #12
 801e1b0:	4013      	ands	r3, r2
 801e1b2:	2b0c      	cmp	r3, #12
 801e1b4:	d01d      	beq.n	801e1f2 <UART_SetConfig+0x14a>
 801e1b6:	d823      	bhi.n	801e200 <UART_SetConfig+0x158>
 801e1b8:	2b08      	cmp	r3, #8
 801e1ba:	d00c      	beq.n	801e1d6 <UART_SetConfig+0x12e>
 801e1bc:	d820      	bhi.n	801e200 <UART_SetConfig+0x158>
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d002      	beq.n	801e1c8 <UART_SetConfig+0x120>
 801e1c2:	2b04      	cmp	r3, #4
 801e1c4:	d00e      	beq.n	801e1e4 <UART_SetConfig+0x13c>
 801e1c6:	e01b      	b.n	801e200 <UART_SetConfig+0x158>
 801e1c8:	231b      	movs	r3, #27
 801e1ca:	2218      	movs	r2, #24
 801e1cc:	189b      	adds	r3, r3, r2
 801e1ce:	19db      	adds	r3, r3, r7
 801e1d0:	2200      	movs	r2, #0
 801e1d2:	701a      	strb	r2, [r3, #0]
 801e1d4:	e07d      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e1d6:	231b      	movs	r3, #27
 801e1d8:	2218      	movs	r2, #24
 801e1da:	189b      	adds	r3, r3, r2
 801e1dc:	19db      	adds	r3, r3, r7
 801e1de:	2202      	movs	r2, #2
 801e1e0:	701a      	strb	r2, [r3, #0]
 801e1e2:	e076      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e1e4:	231b      	movs	r3, #27
 801e1e6:	2218      	movs	r2, #24
 801e1e8:	189b      	adds	r3, r3, r2
 801e1ea:	19db      	adds	r3, r3, r7
 801e1ec:	2204      	movs	r2, #4
 801e1ee:	701a      	strb	r2, [r3, #0]
 801e1f0:	e06f      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e1f2:	231b      	movs	r3, #27
 801e1f4:	2218      	movs	r2, #24
 801e1f6:	189b      	adds	r3, r3, r2
 801e1f8:	19db      	adds	r3, r3, r7
 801e1fa:	2208      	movs	r2, #8
 801e1fc:	701a      	strb	r2, [r3, #0]
 801e1fe:	e068      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e200:	231b      	movs	r3, #27
 801e202:	2218      	movs	r2, #24
 801e204:	189b      	adds	r3, r3, r2
 801e206:	19db      	adds	r3, r3, r7
 801e208:	2210      	movs	r2, #16
 801e20a:	701a      	strb	r2, [r3, #0]
 801e20c:	e061      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e20e:	69fb      	ldr	r3, [r7, #28]
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	4a7c      	ldr	r2, [pc, #496]	@ (801e404 <UART_SetConfig+0x35c>)
 801e214:	4293      	cmp	r3, r2
 801e216:	d106      	bne.n	801e226 <UART_SetConfig+0x17e>
 801e218:	231b      	movs	r3, #27
 801e21a:	2218      	movs	r2, #24
 801e21c:	189b      	adds	r3, r3, r2
 801e21e:	19db      	adds	r3, r3, r7
 801e220:	2200      	movs	r2, #0
 801e222:	701a      	strb	r2, [r3, #0]
 801e224:	e055      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e226:	69fb      	ldr	r3, [r7, #28]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	4a77      	ldr	r2, [pc, #476]	@ (801e408 <UART_SetConfig+0x360>)
 801e22c:	4293      	cmp	r3, r2
 801e22e:	d106      	bne.n	801e23e <UART_SetConfig+0x196>
 801e230:	231b      	movs	r3, #27
 801e232:	2218      	movs	r2, #24
 801e234:	189b      	adds	r3, r3, r2
 801e236:	19db      	adds	r3, r3, r7
 801e238:	2200      	movs	r2, #0
 801e23a:	701a      	strb	r2, [r3, #0]
 801e23c:	e049      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e23e:	69fb      	ldr	r3, [r7, #28]
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	4a6b      	ldr	r2, [pc, #428]	@ (801e3f0 <UART_SetConfig+0x348>)
 801e244:	4293      	cmp	r3, r2
 801e246:	d13e      	bne.n	801e2c6 <UART_SetConfig+0x21e>
 801e248:	4b6c      	ldr	r3, [pc, #432]	@ (801e3fc <UART_SetConfig+0x354>)
 801e24a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e24c:	23c0      	movs	r3, #192	@ 0xc0
 801e24e:	011b      	lsls	r3, r3, #4
 801e250:	4013      	ands	r3, r2
 801e252:	22c0      	movs	r2, #192	@ 0xc0
 801e254:	0112      	lsls	r2, r2, #4
 801e256:	4293      	cmp	r3, r2
 801e258:	d027      	beq.n	801e2aa <UART_SetConfig+0x202>
 801e25a:	22c0      	movs	r2, #192	@ 0xc0
 801e25c:	0112      	lsls	r2, r2, #4
 801e25e:	4293      	cmp	r3, r2
 801e260:	d82a      	bhi.n	801e2b8 <UART_SetConfig+0x210>
 801e262:	2280      	movs	r2, #128	@ 0x80
 801e264:	0112      	lsls	r2, r2, #4
 801e266:	4293      	cmp	r3, r2
 801e268:	d011      	beq.n	801e28e <UART_SetConfig+0x1e6>
 801e26a:	2280      	movs	r2, #128	@ 0x80
 801e26c:	0112      	lsls	r2, r2, #4
 801e26e:	4293      	cmp	r3, r2
 801e270:	d822      	bhi.n	801e2b8 <UART_SetConfig+0x210>
 801e272:	2b00      	cmp	r3, #0
 801e274:	d004      	beq.n	801e280 <UART_SetConfig+0x1d8>
 801e276:	2280      	movs	r2, #128	@ 0x80
 801e278:	00d2      	lsls	r2, r2, #3
 801e27a:	4293      	cmp	r3, r2
 801e27c:	d00e      	beq.n	801e29c <UART_SetConfig+0x1f4>
 801e27e:	e01b      	b.n	801e2b8 <UART_SetConfig+0x210>
 801e280:	231b      	movs	r3, #27
 801e282:	2218      	movs	r2, #24
 801e284:	189b      	adds	r3, r3, r2
 801e286:	19db      	adds	r3, r3, r7
 801e288:	2200      	movs	r2, #0
 801e28a:	701a      	strb	r2, [r3, #0]
 801e28c:	e021      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e28e:	231b      	movs	r3, #27
 801e290:	2218      	movs	r2, #24
 801e292:	189b      	adds	r3, r3, r2
 801e294:	19db      	adds	r3, r3, r7
 801e296:	2202      	movs	r2, #2
 801e298:	701a      	strb	r2, [r3, #0]
 801e29a:	e01a      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e29c:	231b      	movs	r3, #27
 801e29e:	2218      	movs	r2, #24
 801e2a0:	189b      	adds	r3, r3, r2
 801e2a2:	19db      	adds	r3, r3, r7
 801e2a4:	2204      	movs	r2, #4
 801e2a6:	701a      	strb	r2, [r3, #0]
 801e2a8:	e013      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e2aa:	231b      	movs	r3, #27
 801e2ac:	2218      	movs	r2, #24
 801e2ae:	189b      	adds	r3, r3, r2
 801e2b0:	19db      	adds	r3, r3, r7
 801e2b2:	2208      	movs	r2, #8
 801e2b4:	701a      	strb	r2, [r3, #0]
 801e2b6:	e00c      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e2b8:	231b      	movs	r3, #27
 801e2ba:	2218      	movs	r2, #24
 801e2bc:	189b      	adds	r3, r3, r2
 801e2be:	19db      	adds	r3, r3, r7
 801e2c0:	2210      	movs	r2, #16
 801e2c2:	701a      	strb	r2, [r3, #0]
 801e2c4:	e005      	b.n	801e2d2 <UART_SetConfig+0x22a>
 801e2c6:	231b      	movs	r3, #27
 801e2c8:	2218      	movs	r2, #24
 801e2ca:	189b      	adds	r3, r3, r2
 801e2cc:	19db      	adds	r3, r3, r7
 801e2ce:	2210      	movs	r2, #16
 801e2d0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e2d2:	69fb      	ldr	r3, [r7, #28]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	4a46      	ldr	r2, [pc, #280]	@ (801e3f0 <UART_SetConfig+0x348>)
 801e2d8:	4293      	cmp	r3, r2
 801e2da:	d000      	beq.n	801e2de <UART_SetConfig+0x236>
 801e2dc:	e09a      	b.n	801e414 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e2de:	231b      	movs	r3, #27
 801e2e0:	2218      	movs	r2, #24
 801e2e2:	189b      	adds	r3, r3, r2
 801e2e4:	19db      	adds	r3, r3, r7
 801e2e6:	781b      	ldrb	r3, [r3, #0]
 801e2e8:	2b08      	cmp	r3, #8
 801e2ea:	d01d      	beq.n	801e328 <UART_SetConfig+0x280>
 801e2ec:	dc20      	bgt.n	801e330 <UART_SetConfig+0x288>
 801e2ee:	2b04      	cmp	r3, #4
 801e2f0:	d015      	beq.n	801e31e <UART_SetConfig+0x276>
 801e2f2:	dc1d      	bgt.n	801e330 <UART_SetConfig+0x288>
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d002      	beq.n	801e2fe <UART_SetConfig+0x256>
 801e2f8:	2b02      	cmp	r3, #2
 801e2fa:	d005      	beq.n	801e308 <UART_SetConfig+0x260>
 801e2fc:	e018      	b.n	801e330 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e2fe:	f7fd fd37 	bl	801bd70 <HAL_RCC_GetPCLK1Freq>
 801e302:	0003      	movs	r3, r0
 801e304:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e306:	e01c      	b.n	801e342 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e308:	4b3c      	ldr	r3, [pc, #240]	@ (801e3fc <UART_SetConfig+0x354>)
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	2210      	movs	r2, #16
 801e30e:	4013      	ands	r3, r2
 801e310:	d002      	beq.n	801e318 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e312:	4b3e      	ldr	r3, [pc, #248]	@ (801e40c <UART_SetConfig+0x364>)
 801e314:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e316:	e014      	b.n	801e342 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e318:	4b3d      	ldr	r3, [pc, #244]	@ (801e410 <UART_SetConfig+0x368>)
 801e31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e31c:	e011      	b.n	801e342 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e31e:	f7fd fc77 	bl	801bc10 <HAL_RCC_GetSysClockFreq>
 801e322:	0003      	movs	r3, r0
 801e324:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e326:	e00c      	b.n	801e342 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e328:	2380      	movs	r3, #128	@ 0x80
 801e32a:	021b      	lsls	r3, r3, #8
 801e32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e32e:	e008      	b.n	801e342 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e330:	2300      	movs	r3, #0
 801e332:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e334:	231a      	movs	r3, #26
 801e336:	2218      	movs	r2, #24
 801e338:	189b      	adds	r3, r3, r2
 801e33a:	19db      	adds	r3, r3, r7
 801e33c:	2201      	movs	r2, #1
 801e33e:	701a      	strb	r2, [r3, #0]
        break;
 801e340:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e344:	2b00      	cmp	r3, #0
 801e346:	d100      	bne.n	801e34a <UART_SetConfig+0x2a2>
 801e348:	e133      	b.n	801e5b2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e34a:	69fb      	ldr	r3, [r7, #28]
 801e34c:	685a      	ldr	r2, [r3, #4]
 801e34e:	0013      	movs	r3, r2
 801e350:	005b      	lsls	r3, r3, #1
 801e352:	189b      	adds	r3, r3, r2
 801e354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e356:	429a      	cmp	r2, r3
 801e358:	d305      	bcc.n	801e366 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e35a:	69fb      	ldr	r3, [r7, #28]
 801e35c:	685b      	ldr	r3, [r3, #4]
 801e35e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e362:	429a      	cmp	r2, r3
 801e364:	d906      	bls.n	801e374 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e366:	231a      	movs	r3, #26
 801e368:	2218      	movs	r2, #24
 801e36a:	189b      	adds	r3, r3, r2
 801e36c:	19db      	adds	r3, r3, r7
 801e36e:	2201      	movs	r2, #1
 801e370:	701a      	strb	r2, [r3, #0]
 801e372:	e11e      	b.n	801e5b2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e376:	613b      	str	r3, [r7, #16]
 801e378:	2300      	movs	r3, #0
 801e37a:	617b      	str	r3, [r7, #20]
 801e37c:	6939      	ldr	r1, [r7, #16]
 801e37e:	697a      	ldr	r2, [r7, #20]
 801e380:	000b      	movs	r3, r1
 801e382:	0e1b      	lsrs	r3, r3, #24
 801e384:	0010      	movs	r0, r2
 801e386:	0205      	lsls	r5, r0, #8
 801e388:	431d      	orrs	r5, r3
 801e38a:	000b      	movs	r3, r1
 801e38c:	021c      	lsls	r4, r3, #8
 801e38e:	69fb      	ldr	r3, [r7, #28]
 801e390:	685b      	ldr	r3, [r3, #4]
 801e392:	085b      	lsrs	r3, r3, #1
 801e394:	60bb      	str	r3, [r7, #8]
 801e396:	2300      	movs	r3, #0
 801e398:	60fb      	str	r3, [r7, #12]
 801e39a:	68b8      	ldr	r0, [r7, #8]
 801e39c:	68f9      	ldr	r1, [r7, #12]
 801e39e:	1900      	adds	r0, r0, r4
 801e3a0:	4169      	adcs	r1, r5
 801e3a2:	69fb      	ldr	r3, [r7, #28]
 801e3a4:	685b      	ldr	r3, [r3, #4]
 801e3a6:	603b      	str	r3, [r7, #0]
 801e3a8:	2300      	movs	r3, #0
 801e3aa:	607b      	str	r3, [r7, #4]
 801e3ac:	683a      	ldr	r2, [r7, #0]
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	f7e2 f8e6 	bl	8000580 <__aeabi_uldivmod>
 801e3b4:	0002      	movs	r2, r0
 801e3b6:	000b      	movs	r3, r1
 801e3b8:	0013      	movs	r3, r2
 801e3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e3bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3be:	23c0      	movs	r3, #192	@ 0xc0
 801e3c0:	009b      	lsls	r3, r3, #2
 801e3c2:	429a      	cmp	r2, r3
 801e3c4:	d309      	bcc.n	801e3da <UART_SetConfig+0x332>
 801e3c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3c8:	2380      	movs	r3, #128	@ 0x80
 801e3ca:	035b      	lsls	r3, r3, #13
 801e3cc:	429a      	cmp	r2, r3
 801e3ce:	d204      	bcs.n	801e3da <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e3d0:	69fb      	ldr	r3, [r7, #28]
 801e3d2:	681b      	ldr	r3, [r3, #0]
 801e3d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3d6:	60da      	str	r2, [r3, #12]
 801e3d8:	e0eb      	b.n	801e5b2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e3da:	231a      	movs	r3, #26
 801e3dc:	2218      	movs	r2, #24
 801e3de:	189b      	adds	r3, r3, r2
 801e3e0:	19db      	adds	r3, r3, r7
 801e3e2:	2201      	movs	r2, #1
 801e3e4:	701a      	strb	r2, [r3, #0]
 801e3e6:	e0e4      	b.n	801e5b2 <UART_SetConfig+0x50a>
 801e3e8:	efff69f3 	.word	0xefff69f3
 801e3ec:	ffffcfff 	.word	0xffffcfff
 801e3f0:	40004800 	.word	0x40004800
 801e3f4:	fffff4ff 	.word	0xfffff4ff
 801e3f8:	40013800 	.word	0x40013800
 801e3fc:	40021000 	.word	0x40021000
 801e400:	40004400 	.word	0x40004400
 801e404:	40004c00 	.word	0x40004c00
 801e408:	40005000 	.word	0x40005000
 801e40c:	003d0900 	.word	0x003d0900
 801e410:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e414:	69fb      	ldr	r3, [r7, #28]
 801e416:	69da      	ldr	r2, [r3, #28]
 801e418:	2380      	movs	r3, #128	@ 0x80
 801e41a:	021b      	lsls	r3, r3, #8
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d000      	beq.n	801e422 <UART_SetConfig+0x37a>
 801e420:	e070      	b.n	801e504 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e422:	231b      	movs	r3, #27
 801e424:	2218      	movs	r2, #24
 801e426:	189b      	adds	r3, r3, r2
 801e428:	19db      	adds	r3, r3, r7
 801e42a:	781b      	ldrb	r3, [r3, #0]
 801e42c:	2b08      	cmp	r3, #8
 801e42e:	d822      	bhi.n	801e476 <UART_SetConfig+0x3ce>
 801e430:	009a      	lsls	r2, r3, #2
 801e432:	4b67      	ldr	r3, [pc, #412]	@ (801e5d0 <UART_SetConfig+0x528>)
 801e434:	18d3      	adds	r3, r2, r3
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e43a:	f7fd fc99 	bl	801bd70 <HAL_RCC_GetPCLK1Freq>
 801e43e:	0003      	movs	r3, r0
 801e440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e442:	e021      	b.n	801e488 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e444:	f7fd fcaa 	bl	801bd9c <HAL_RCC_GetPCLK2Freq>
 801e448:	0003      	movs	r3, r0
 801e44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e44c:	e01c      	b.n	801e488 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e44e:	4b61      	ldr	r3, [pc, #388]	@ (801e5d4 <UART_SetConfig+0x52c>)
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	2210      	movs	r2, #16
 801e454:	4013      	ands	r3, r2
 801e456:	d002      	beq.n	801e45e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e458:	4b5f      	ldr	r3, [pc, #380]	@ (801e5d8 <UART_SetConfig+0x530>)
 801e45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e45c:	e014      	b.n	801e488 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e45e:	4b5f      	ldr	r3, [pc, #380]	@ (801e5dc <UART_SetConfig+0x534>)
 801e460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e462:	e011      	b.n	801e488 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e464:	f7fd fbd4 	bl	801bc10 <HAL_RCC_GetSysClockFreq>
 801e468:	0003      	movs	r3, r0
 801e46a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e46c:	e00c      	b.n	801e488 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e46e:	2380      	movs	r3, #128	@ 0x80
 801e470:	021b      	lsls	r3, r3, #8
 801e472:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e474:	e008      	b.n	801e488 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e476:	2300      	movs	r3, #0
 801e478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e47a:	231a      	movs	r3, #26
 801e47c:	2218      	movs	r2, #24
 801e47e:	189b      	adds	r3, r3, r2
 801e480:	19db      	adds	r3, r3, r7
 801e482:	2201      	movs	r2, #1
 801e484:	701a      	strb	r2, [r3, #0]
        break;
 801e486:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d100      	bne.n	801e490 <UART_SetConfig+0x3e8>
 801e48e:	e090      	b.n	801e5b2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e492:	005a      	lsls	r2, r3, #1
 801e494:	69fb      	ldr	r3, [r7, #28]
 801e496:	685b      	ldr	r3, [r3, #4]
 801e498:	085b      	lsrs	r3, r3, #1
 801e49a:	18d2      	adds	r2, r2, r3
 801e49c:	69fb      	ldr	r3, [r7, #28]
 801e49e:	685b      	ldr	r3, [r3, #4]
 801e4a0:	0019      	movs	r1, r3
 801e4a2:	0010      	movs	r0, r2
 801e4a4:	f7e1 fe7e 	bl	80001a4 <__udivsi3>
 801e4a8:	0003      	movs	r3, r0
 801e4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4ae:	2b0f      	cmp	r3, #15
 801e4b0:	d921      	bls.n	801e4f6 <UART_SetConfig+0x44e>
 801e4b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e4b4:	2380      	movs	r3, #128	@ 0x80
 801e4b6:	025b      	lsls	r3, r3, #9
 801e4b8:	429a      	cmp	r2, r3
 801e4ba:	d21c      	bcs.n	801e4f6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4be:	b29a      	uxth	r2, r3
 801e4c0:	200e      	movs	r0, #14
 801e4c2:	2418      	movs	r4, #24
 801e4c4:	1903      	adds	r3, r0, r4
 801e4c6:	19db      	adds	r3, r3, r7
 801e4c8:	210f      	movs	r1, #15
 801e4ca:	438a      	bics	r2, r1
 801e4cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4d0:	085b      	lsrs	r3, r3, #1
 801e4d2:	b29b      	uxth	r3, r3
 801e4d4:	2207      	movs	r2, #7
 801e4d6:	4013      	ands	r3, r2
 801e4d8:	b299      	uxth	r1, r3
 801e4da:	1903      	adds	r3, r0, r4
 801e4dc:	19db      	adds	r3, r3, r7
 801e4de:	1902      	adds	r2, r0, r4
 801e4e0:	19d2      	adds	r2, r2, r7
 801e4e2:	8812      	ldrh	r2, [r2, #0]
 801e4e4:	430a      	orrs	r2, r1
 801e4e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e4e8:	69fb      	ldr	r3, [r7, #28]
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	1902      	adds	r2, r0, r4
 801e4ee:	19d2      	adds	r2, r2, r7
 801e4f0:	8812      	ldrh	r2, [r2, #0]
 801e4f2:	60da      	str	r2, [r3, #12]
 801e4f4:	e05d      	b.n	801e5b2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e4f6:	231a      	movs	r3, #26
 801e4f8:	2218      	movs	r2, #24
 801e4fa:	189b      	adds	r3, r3, r2
 801e4fc:	19db      	adds	r3, r3, r7
 801e4fe:	2201      	movs	r2, #1
 801e500:	701a      	strb	r2, [r3, #0]
 801e502:	e056      	b.n	801e5b2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e504:	231b      	movs	r3, #27
 801e506:	2218      	movs	r2, #24
 801e508:	189b      	adds	r3, r3, r2
 801e50a:	19db      	adds	r3, r3, r7
 801e50c:	781b      	ldrb	r3, [r3, #0]
 801e50e:	2b08      	cmp	r3, #8
 801e510:	d822      	bhi.n	801e558 <UART_SetConfig+0x4b0>
 801e512:	009a      	lsls	r2, r3, #2
 801e514:	4b32      	ldr	r3, [pc, #200]	@ (801e5e0 <UART_SetConfig+0x538>)
 801e516:	18d3      	adds	r3, r2, r3
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e51c:	f7fd fc28 	bl	801bd70 <HAL_RCC_GetPCLK1Freq>
 801e520:	0003      	movs	r3, r0
 801e522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e524:	e021      	b.n	801e56a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e526:	f7fd fc39 	bl	801bd9c <HAL_RCC_GetPCLK2Freq>
 801e52a:	0003      	movs	r3, r0
 801e52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e52e:	e01c      	b.n	801e56a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e530:	4b28      	ldr	r3, [pc, #160]	@ (801e5d4 <UART_SetConfig+0x52c>)
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	2210      	movs	r2, #16
 801e536:	4013      	ands	r3, r2
 801e538:	d002      	beq.n	801e540 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e53a:	4b27      	ldr	r3, [pc, #156]	@ (801e5d8 <UART_SetConfig+0x530>)
 801e53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e53e:	e014      	b.n	801e56a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e540:	4b26      	ldr	r3, [pc, #152]	@ (801e5dc <UART_SetConfig+0x534>)
 801e542:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e544:	e011      	b.n	801e56a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e546:	f7fd fb63 	bl	801bc10 <HAL_RCC_GetSysClockFreq>
 801e54a:	0003      	movs	r3, r0
 801e54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e54e:	e00c      	b.n	801e56a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e550:	2380      	movs	r3, #128	@ 0x80
 801e552:	021b      	lsls	r3, r3, #8
 801e554:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e556:	e008      	b.n	801e56a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e558:	2300      	movs	r3, #0
 801e55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e55c:	231a      	movs	r3, #26
 801e55e:	2218      	movs	r2, #24
 801e560:	189b      	adds	r3, r3, r2
 801e562:	19db      	adds	r3, r3, r7
 801e564:	2201      	movs	r2, #1
 801e566:	701a      	strb	r2, [r3, #0]
        break;
 801e568:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d020      	beq.n	801e5b2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e570:	69fb      	ldr	r3, [r7, #28]
 801e572:	685b      	ldr	r3, [r3, #4]
 801e574:	085a      	lsrs	r2, r3, #1
 801e576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e578:	18d2      	adds	r2, r2, r3
 801e57a:	69fb      	ldr	r3, [r7, #28]
 801e57c:	685b      	ldr	r3, [r3, #4]
 801e57e:	0019      	movs	r1, r3
 801e580:	0010      	movs	r0, r2
 801e582:	f7e1 fe0f 	bl	80001a4 <__udivsi3>
 801e586:	0003      	movs	r3, r0
 801e588:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e58c:	2b0f      	cmp	r3, #15
 801e58e:	d90a      	bls.n	801e5a6 <UART_SetConfig+0x4fe>
 801e590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e592:	2380      	movs	r3, #128	@ 0x80
 801e594:	025b      	lsls	r3, r3, #9
 801e596:	429a      	cmp	r2, r3
 801e598:	d205      	bcs.n	801e5a6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e59c:	b29a      	uxth	r2, r3
 801e59e:	69fb      	ldr	r3, [r7, #28]
 801e5a0:	681b      	ldr	r3, [r3, #0]
 801e5a2:	60da      	str	r2, [r3, #12]
 801e5a4:	e005      	b.n	801e5b2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e5a6:	231a      	movs	r3, #26
 801e5a8:	2218      	movs	r2, #24
 801e5aa:	189b      	adds	r3, r3, r2
 801e5ac:	19db      	adds	r3, r3, r7
 801e5ae:	2201      	movs	r2, #1
 801e5b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e5b2:	69fb      	ldr	r3, [r7, #28]
 801e5b4:	2200      	movs	r2, #0
 801e5b6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e5b8:	69fb      	ldr	r3, [r7, #28]
 801e5ba:	2200      	movs	r2, #0
 801e5bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e5be:	231a      	movs	r3, #26
 801e5c0:	2218      	movs	r2, #24
 801e5c2:	189b      	adds	r3, r3, r2
 801e5c4:	19db      	adds	r3, r3, r7
 801e5c6:	781b      	ldrb	r3, [r3, #0]
}
 801e5c8:	0018      	movs	r0, r3
 801e5ca:	46bd      	mov	sp, r7
 801e5cc:	b00e      	add	sp, #56	@ 0x38
 801e5ce:	bdb0      	pop	{r4, r5, r7, pc}
 801e5d0:	0802e69c 	.word	0x0802e69c
 801e5d4:	40021000 	.word	0x40021000
 801e5d8:	003d0900 	.word	0x003d0900
 801e5dc:	00f42400 	.word	0x00f42400
 801e5e0:	0802e6c0 	.word	0x0802e6c0

0801e5e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	b082      	sub	sp, #8
 801e5e8:	af00      	add	r7, sp, #0
 801e5ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e5f0:	2201      	movs	r2, #1
 801e5f2:	4013      	ands	r3, r2
 801e5f4:	d00b      	beq.n	801e60e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	685b      	ldr	r3, [r3, #4]
 801e5fc:	4a4a      	ldr	r2, [pc, #296]	@ (801e728 <UART_AdvFeatureConfig+0x144>)
 801e5fe:	4013      	ands	r3, r2
 801e600:	0019      	movs	r1, r3
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	430a      	orrs	r2, r1
 801e60c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e612:	2202      	movs	r2, #2
 801e614:	4013      	ands	r3, r2
 801e616:	d00b      	beq.n	801e630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	685b      	ldr	r3, [r3, #4]
 801e61e:	4a43      	ldr	r2, [pc, #268]	@ (801e72c <UART_AdvFeatureConfig+0x148>)
 801e620:	4013      	ands	r3, r2
 801e622:	0019      	movs	r1, r3
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	430a      	orrs	r2, r1
 801e62e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e634:	2204      	movs	r2, #4
 801e636:	4013      	ands	r3, r2
 801e638:	d00b      	beq.n	801e652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	685b      	ldr	r3, [r3, #4]
 801e640:	4a3b      	ldr	r2, [pc, #236]	@ (801e730 <UART_AdvFeatureConfig+0x14c>)
 801e642:	4013      	ands	r3, r2
 801e644:	0019      	movs	r1, r3
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	430a      	orrs	r2, r1
 801e650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e656:	2208      	movs	r2, #8
 801e658:	4013      	ands	r3, r2
 801e65a:	d00b      	beq.n	801e674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	685b      	ldr	r3, [r3, #4]
 801e662:	4a34      	ldr	r2, [pc, #208]	@ (801e734 <UART_AdvFeatureConfig+0x150>)
 801e664:	4013      	ands	r3, r2
 801e666:	0019      	movs	r1, r3
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	681b      	ldr	r3, [r3, #0]
 801e670:	430a      	orrs	r2, r1
 801e672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e678:	2210      	movs	r2, #16
 801e67a:	4013      	ands	r3, r2
 801e67c:	d00b      	beq.n	801e696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	689b      	ldr	r3, [r3, #8]
 801e684:	4a2c      	ldr	r2, [pc, #176]	@ (801e738 <UART_AdvFeatureConfig+0x154>)
 801e686:	4013      	ands	r3, r2
 801e688:	0019      	movs	r1, r3
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	430a      	orrs	r2, r1
 801e694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e69a:	2220      	movs	r2, #32
 801e69c:	4013      	ands	r3, r2
 801e69e:	d00b      	beq.n	801e6b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	689b      	ldr	r3, [r3, #8]
 801e6a6:	4a25      	ldr	r2, [pc, #148]	@ (801e73c <UART_AdvFeatureConfig+0x158>)
 801e6a8:	4013      	ands	r3, r2
 801e6aa:	0019      	movs	r1, r3
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	430a      	orrs	r2, r1
 801e6b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6bc:	2240      	movs	r2, #64	@ 0x40
 801e6be:	4013      	ands	r3, r2
 801e6c0:	d01d      	beq.n	801e6fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	685b      	ldr	r3, [r3, #4]
 801e6c8:	4a1d      	ldr	r2, [pc, #116]	@ (801e740 <UART_AdvFeatureConfig+0x15c>)
 801e6ca:	4013      	ands	r3, r2
 801e6cc:	0019      	movs	r1, r3
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	430a      	orrs	r2, r1
 801e6d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e6de:	2380      	movs	r3, #128	@ 0x80
 801e6e0:	035b      	lsls	r3, r3, #13
 801e6e2:	429a      	cmp	r2, r3
 801e6e4:	d10b      	bne.n	801e6fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	685b      	ldr	r3, [r3, #4]
 801e6ec:	4a15      	ldr	r2, [pc, #84]	@ (801e744 <UART_AdvFeatureConfig+0x160>)
 801e6ee:	4013      	ands	r3, r2
 801e6f0:	0019      	movs	r1, r3
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	430a      	orrs	r2, r1
 801e6fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e702:	2280      	movs	r2, #128	@ 0x80
 801e704:	4013      	ands	r3, r2
 801e706:	d00b      	beq.n	801e720 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	685b      	ldr	r3, [r3, #4]
 801e70e:	4a0e      	ldr	r2, [pc, #56]	@ (801e748 <UART_AdvFeatureConfig+0x164>)
 801e710:	4013      	ands	r3, r2
 801e712:	0019      	movs	r1, r3
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	430a      	orrs	r2, r1
 801e71e:	605a      	str	r2, [r3, #4]
  }
}
 801e720:	46c0      	nop			@ (mov r8, r8)
 801e722:	46bd      	mov	sp, r7
 801e724:	b002      	add	sp, #8
 801e726:	bd80      	pop	{r7, pc}
 801e728:	fffdffff 	.word	0xfffdffff
 801e72c:	fffeffff 	.word	0xfffeffff
 801e730:	fffbffff 	.word	0xfffbffff
 801e734:	ffff7fff 	.word	0xffff7fff
 801e738:	ffffefff 	.word	0xffffefff
 801e73c:	ffffdfff 	.word	0xffffdfff
 801e740:	ffefffff 	.word	0xffefffff
 801e744:	ff9fffff 	.word	0xff9fffff
 801e748:	fff7ffff 	.word	0xfff7ffff

0801e74c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b092      	sub	sp, #72	@ 0x48
 801e750:	af02      	add	r7, sp, #8
 801e752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	2284      	movs	r2, #132	@ 0x84
 801e758:	2100      	movs	r1, #0
 801e75a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e75c:	f7f6 f8b0 	bl	80148c0 <HAL_GetTick>
 801e760:	0003      	movs	r3, r0
 801e762:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	2208      	movs	r2, #8
 801e76c:	4013      	ands	r3, r2
 801e76e:	2b08      	cmp	r3, #8
 801e770:	d12c      	bne.n	801e7cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e774:	2280      	movs	r2, #128	@ 0x80
 801e776:	0391      	lsls	r1, r2, #14
 801e778:	6878      	ldr	r0, [r7, #4]
 801e77a:	4a46      	ldr	r2, [pc, #280]	@ (801e894 <UART_CheckIdleState+0x148>)
 801e77c:	9200      	str	r2, [sp, #0]
 801e77e:	2200      	movs	r2, #0
 801e780:	f000 f88c 	bl	801e89c <UART_WaitOnFlagUntilTimeout>
 801e784:	1e03      	subs	r3, r0, #0
 801e786:	d021      	beq.n	801e7cc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e788:	f3ef 8310 	mrs	r3, PRIMASK
 801e78c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e790:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e792:	2301      	movs	r3, #1
 801e794:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e798:	f383 8810 	msr	PRIMASK, r3
}
 801e79c:	46c0      	nop			@ (mov r8, r8)
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	681a      	ldr	r2, [r3, #0]
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	2180      	movs	r1, #128	@ 0x80
 801e7aa:	438a      	bics	r2, r1
 801e7ac:	601a      	str	r2, [r3, #0]
 801e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7b4:	f383 8810 	msr	PRIMASK, r3
}
 801e7b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	2220      	movs	r2, #32
 801e7be:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	2278      	movs	r2, #120	@ 0x78
 801e7c4:	2100      	movs	r1, #0
 801e7c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e7c8:	2303      	movs	r3, #3
 801e7ca:	e05f      	b.n	801e88c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	2204      	movs	r2, #4
 801e7d4:	4013      	ands	r3, r2
 801e7d6:	2b04      	cmp	r3, #4
 801e7d8:	d146      	bne.n	801e868 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7dc:	2280      	movs	r2, #128	@ 0x80
 801e7de:	03d1      	lsls	r1, r2, #15
 801e7e0:	6878      	ldr	r0, [r7, #4]
 801e7e2:	4a2c      	ldr	r2, [pc, #176]	@ (801e894 <UART_CheckIdleState+0x148>)
 801e7e4:	9200      	str	r2, [sp, #0]
 801e7e6:	2200      	movs	r2, #0
 801e7e8:	f000 f858 	bl	801e89c <UART_WaitOnFlagUntilTimeout>
 801e7ec:	1e03      	subs	r3, r0, #0
 801e7ee:	d03b      	beq.n	801e868 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7f0:	f3ef 8310 	mrs	r3, PRIMASK
 801e7f4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e7f8:	637b      	str	r3, [r7, #52]	@ 0x34
 801e7fa:	2301      	movs	r3, #1
 801e7fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7fe:	693b      	ldr	r3, [r7, #16]
 801e800:	f383 8810 	msr	PRIMASK, r3
}
 801e804:	46c0      	nop			@ (mov r8, r8)
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	681a      	ldr	r2, [r3, #0]
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	4921      	ldr	r1, [pc, #132]	@ (801e898 <UART_CheckIdleState+0x14c>)
 801e812:	400a      	ands	r2, r1
 801e814:	601a      	str	r2, [r3, #0]
 801e816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e81a:	697b      	ldr	r3, [r7, #20]
 801e81c:	f383 8810 	msr	PRIMASK, r3
}
 801e820:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e822:	f3ef 8310 	mrs	r3, PRIMASK
 801e826:	61bb      	str	r3, [r7, #24]
  return(result);
 801e828:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e82a:	633b      	str	r3, [r7, #48]	@ 0x30
 801e82c:	2301      	movs	r3, #1
 801e82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e830:	69fb      	ldr	r3, [r7, #28]
 801e832:	f383 8810 	msr	PRIMASK, r3
}
 801e836:	46c0      	nop			@ (mov r8, r8)
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	689a      	ldr	r2, [r3, #8]
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	2101      	movs	r1, #1
 801e844:	438a      	bics	r2, r1
 801e846:	609a      	str	r2, [r3, #8]
 801e848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e84a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e84c:	6a3b      	ldr	r3, [r7, #32]
 801e84e:	f383 8810 	msr	PRIMASK, r3
}
 801e852:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	2280      	movs	r2, #128	@ 0x80
 801e858:	2120      	movs	r1, #32
 801e85a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	2278      	movs	r2, #120	@ 0x78
 801e860:	2100      	movs	r1, #0
 801e862:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e864:	2303      	movs	r3, #3
 801e866:	e011      	b.n	801e88c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	2220      	movs	r2, #32
 801e86c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	2280      	movs	r2, #128	@ 0x80
 801e872:	2120      	movs	r1, #32
 801e874:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	2200      	movs	r2, #0
 801e87a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	2200      	movs	r2, #0
 801e880:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	2278      	movs	r2, #120	@ 0x78
 801e886:	2100      	movs	r1, #0
 801e888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e88a:	2300      	movs	r3, #0
}
 801e88c:	0018      	movs	r0, r3
 801e88e:	46bd      	mov	sp, r7
 801e890:	b010      	add	sp, #64	@ 0x40
 801e892:	bd80      	pop	{r7, pc}
 801e894:	01ffffff 	.word	0x01ffffff
 801e898:	fffffedf 	.word	0xfffffedf

0801e89c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e89c:	b580      	push	{r7, lr}
 801e89e:	b084      	sub	sp, #16
 801e8a0:	af00      	add	r7, sp, #0
 801e8a2:	60f8      	str	r0, [r7, #12]
 801e8a4:	60b9      	str	r1, [r7, #8]
 801e8a6:	603b      	str	r3, [r7, #0]
 801e8a8:	1dfb      	adds	r3, r7, #7
 801e8aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e8ac:	e04b      	b.n	801e946 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e8ae:	69bb      	ldr	r3, [r7, #24]
 801e8b0:	3301      	adds	r3, #1
 801e8b2:	d048      	beq.n	801e946 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e8b4:	f7f6 f804 	bl	80148c0 <HAL_GetTick>
 801e8b8:	0002      	movs	r2, r0
 801e8ba:	683b      	ldr	r3, [r7, #0]
 801e8bc:	1ad3      	subs	r3, r2, r3
 801e8be:	69ba      	ldr	r2, [r7, #24]
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	d302      	bcc.n	801e8ca <UART_WaitOnFlagUntilTimeout+0x2e>
 801e8c4:	69bb      	ldr	r3, [r7, #24]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d101      	bne.n	801e8ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e8ca:	2303      	movs	r3, #3
 801e8cc:	e04b      	b.n	801e966 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	2204      	movs	r2, #4
 801e8d6:	4013      	ands	r3, r2
 801e8d8:	d035      	beq.n	801e946 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	69db      	ldr	r3, [r3, #28]
 801e8e0:	2208      	movs	r2, #8
 801e8e2:	4013      	ands	r3, r2
 801e8e4:	2b08      	cmp	r3, #8
 801e8e6:	d111      	bne.n	801e90c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	2208      	movs	r2, #8
 801e8ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e8f0:	68fb      	ldr	r3, [r7, #12]
 801e8f2:	0018      	movs	r0, r3
 801e8f4:	f000 f9ca 	bl	801ec8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	2284      	movs	r2, #132	@ 0x84
 801e8fc:	2108      	movs	r1, #8
 801e8fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	2278      	movs	r2, #120	@ 0x78
 801e904:	2100      	movs	r1, #0
 801e906:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e908:	2301      	movs	r3, #1
 801e90a:	e02c      	b.n	801e966 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e90c:	68fb      	ldr	r3, [r7, #12]
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	69da      	ldr	r2, [r3, #28]
 801e912:	2380      	movs	r3, #128	@ 0x80
 801e914:	011b      	lsls	r3, r3, #4
 801e916:	401a      	ands	r2, r3
 801e918:	2380      	movs	r3, #128	@ 0x80
 801e91a:	011b      	lsls	r3, r3, #4
 801e91c:	429a      	cmp	r2, r3
 801e91e:	d112      	bne.n	801e946 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	2280      	movs	r2, #128	@ 0x80
 801e926:	0112      	lsls	r2, r2, #4
 801e928:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	0018      	movs	r0, r3
 801e92e:	f000 f9ad 	bl	801ec8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	2284      	movs	r2, #132	@ 0x84
 801e936:	2120      	movs	r1, #32
 801e938:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	2278      	movs	r2, #120	@ 0x78
 801e93e:	2100      	movs	r1, #0
 801e940:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e942:	2303      	movs	r3, #3
 801e944:	e00f      	b.n	801e966 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	69db      	ldr	r3, [r3, #28]
 801e94c:	68ba      	ldr	r2, [r7, #8]
 801e94e:	4013      	ands	r3, r2
 801e950:	68ba      	ldr	r2, [r7, #8]
 801e952:	1ad3      	subs	r3, r2, r3
 801e954:	425a      	negs	r2, r3
 801e956:	4153      	adcs	r3, r2
 801e958:	b2db      	uxtb	r3, r3
 801e95a:	001a      	movs	r2, r3
 801e95c:	1dfb      	adds	r3, r7, #7
 801e95e:	781b      	ldrb	r3, [r3, #0]
 801e960:	429a      	cmp	r2, r3
 801e962:	d0a4      	beq.n	801e8ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e964:	2300      	movs	r3, #0
}
 801e966:	0018      	movs	r0, r3
 801e968:	46bd      	mov	sp, r7
 801e96a:	b004      	add	sp, #16
 801e96c:	bd80      	pop	{r7, pc}
	...

0801e970 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e970:	b580      	push	{r7, lr}
 801e972:	b090      	sub	sp, #64	@ 0x40
 801e974:	af00      	add	r7, sp, #0
 801e976:	60f8      	str	r0, [r7, #12]
 801e978:	60b9      	str	r1, [r7, #8]
 801e97a:	1dbb      	adds	r3, r7, #6
 801e97c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	68ba      	ldr	r2, [r7, #8]
 801e982:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e984:	68fb      	ldr	r3, [r7, #12]
 801e986:	1dba      	adds	r2, r7, #6
 801e988:	2158      	movs	r1, #88	@ 0x58
 801e98a:	8812      	ldrh	r2, [r2, #0]
 801e98c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	1dba      	adds	r2, r7, #6
 801e992:	215a      	movs	r1, #90	@ 0x5a
 801e994:	8812      	ldrh	r2, [r2, #0]
 801e996:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	2200      	movs	r2, #0
 801e99c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	689a      	ldr	r2, [r3, #8]
 801e9a2:	2380      	movs	r3, #128	@ 0x80
 801e9a4:	015b      	lsls	r3, r3, #5
 801e9a6:	429a      	cmp	r2, r3
 801e9a8:	d10d      	bne.n	801e9c6 <UART_Start_Receive_IT+0x56>
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	691b      	ldr	r3, [r3, #16]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d104      	bne.n	801e9bc <UART_Start_Receive_IT+0x4c>
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	225c      	movs	r2, #92	@ 0x5c
 801e9b6:	4950      	ldr	r1, [pc, #320]	@ (801eaf8 <UART_Start_Receive_IT+0x188>)
 801e9b8:	5299      	strh	r1, [r3, r2]
 801e9ba:	e02e      	b.n	801ea1a <UART_Start_Receive_IT+0xaa>
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	225c      	movs	r2, #92	@ 0x5c
 801e9c0:	21ff      	movs	r1, #255	@ 0xff
 801e9c2:	5299      	strh	r1, [r3, r2]
 801e9c4:	e029      	b.n	801ea1a <UART_Start_Receive_IT+0xaa>
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	689b      	ldr	r3, [r3, #8]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d10d      	bne.n	801e9ea <UART_Start_Receive_IT+0x7a>
 801e9ce:	68fb      	ldr	r3, [r7, #12]
 801e9d0:	691b      	ldr	r3, [r3, #16]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d104      	bne.n	801e9e0 <UART_Start_Receive_IT+0x70>
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	225c      	movs	r2, #92	@ 0x5c
 801e9da:	21ff      	movs	r1, #255	@ 0xff
 801e9dc:	5299      	strh	r1, [r3, r2]
 801e9de:	e01c      	b.n	801ea1a <UART_Start_Receive_IT+0xaa>
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	225c      	movs	r2, #92	@ 0x5c
 801e9e4:	217f      	movs	r1, #127	@ 0x7f
 801e9e6:	5299      	strh	r1, [r3, r2]
 801e9e8:	e017      	b.n	801ea1a <UART_Start_Receive_IT+0xaa>
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	689a      	ldr	r2, [r3, #8]
 801e9ee:	2380      	movs	r3, #128	@ 0x80
 801e9f0:	055b      	lsls	r3, r3, #21
 801e9f2:	429a      	cmp	r2, r3
 801e9f4:	d10d      	bne.n	801ea12 <UART_Start_Receive_IT+0xa2>
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	691b      	ldr	r3, [r3, #16]
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	d104      	bne.n	801ea08 <UART_Start_Receive_IT+0x98>
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	225c      	movs	r2, #92	@ 0x5c
 801ea02:	217f      	movs	r1, #127	@ 0x7f
 801ea04:	5299      	strh	r1, [r3, r2]
 801ea06:	e008      	b.n	801ea1a <UART_Start_Receive_IT+0xaa>
 801ea08:	68fb      	ldr	r3, [r7, #12]
 801ea0a:	225c      	movs	r2, #92	@ 0x5c
 801ea0c:	213f      	movs	r1, #63	@ 0x3f
 801ea0e:	5299      	strh	r1, [r3, r2]
 801ea10:	e003      	b.n	801ea1a <UART_Start_Receive_IT+0xaa>
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	225c      	movs	r2, #92	@ 0x5c
 801ea16:	2100      	movs	r1, #0
 801ea18:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ea1a:	68fb      	ldr	r3, [r7, #12]
 801ea1c:	2284      	movs	r2, #132	@ 0x84
 801ea1e:	2100      	movs	r1, #0
 801ea20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ea22:	68fb      	ldr	r3, [r7, #12]
 801ea24:	2280      	movs	r2, #128	@ 0x80
 801ea26:	2122      	movs	r1, #34	@ 0x22
 801ea28:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea2a:	f3ef 8310 	mrs	r3, PRIMASK
 801ea2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ea30:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ea34:	2301      	movs	r3, #1
 801ea36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea3a:	f383 8810 	msr	PRIMASK, r3
}
 801ea3e:	46c0      	nop			@ (mov r8, r8)
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	681b      	ldr	r3, [r3, #0]
 801ea44:	689a      	ldr	r2, [r3, #8]
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	2101      	movs	r1, #1
 801ea4c:	430a      	orrs	r2, r1
 801ea4e:	609a      	str	r2, [r3, #8]
 801ea50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ea52:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea56:	f383 8810 	msr	PRIMASK, r3
}
 801ea5a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	689a      	ldr	r2, [r3, #8]
 801ea60:	2380      	movs	r3, #128	@ 0x80
 801ea62:	015b      	lsls	r3, r3, #5
 801ea64:	429a      	cmp	r2, r3
 801ea66:	d107      	bne.n	801ea78 <UART_Start_Receive_IT+0x108>
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	691b      	ldr	r3, [r3, #16]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d103      	bne.n	801ea78 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	4a22      	ldr	r2, [pc, #136]	@ (801eafc <UART_Start_Receive_IT+0x18c>)
 801ea74:	669a      	str	r2, [r3, #104]	@ 0x68
 801ea76:	e002      	b.n	801ea7e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	4a21      	ldr	r2, [pc, #132]	@ (801eb00 <UART_Start_Receive_IT+0x190>)
 801ea7c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ea7e:	68fb      	ldr	r3, [r7, #12]
 801ea80:	691b      	ldr	r3, [r3, #16]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d019      	beq.n	801eaba <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea86:	f3ef 8310 	mrs	r3, PRIMASK
 801ea8a:	61fb      	str	r3, [r7, #28]
  return(result);
 801ea8c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801ea8e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea90:	2301      	movs	r3, #1
 801ea92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea94:	6a3b      	ldr	r3, [r7, #32]
 801ea96:	f383 8810 	msr	PRIMASK, r3
}
 801ea9a:	46c0      	nop			@ (mov r8, r8)
 801ea9c:	68fb      	ldr	r3, [r7, #12]
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	681a      	ldr	r2, [r3, #0]
 801eaa2:	68fb      	ldr	r3, [r7, #12]
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	2190      	movs	r1, #144	@ 0x90
 801eaa8:	0049      	lsls	r1, r1, #1
 801eaaa:	430a      	orrs	r2, r1
 801eaac:	601a      	str	r2, [r3, #0]
 801eaae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eab0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eab4:	f383 8810 	msr	PRIMASK, r3
}
 801eab8:	e018      	b.n	801eaec <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eaba:	f3ef 8310 	mrs	r3, PRIMASK
 801eabe:	613b      	str	r3, [r7, #16]
  return(result);
 801eac0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801eac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801eac4:	2301      	movs	r3, #1
 801eac6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eac8:	697b      	ldr	r3, [r7, #20]
 801eaca:	f383 8810 	msr	PRIMASK, r3
}
 801eace:	46c0      	nop			@ (mov r8, r8)
 801ead0:	68fb      	ldr	r3, [r7, #12]
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	681a      	ldr	r2, [r3, #0]
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	2120      	movs	r1, #32
 801eadc:	430a      	orrs	r2, r1
 801eade:	601a      	str	r2, [r3, #0]
 801eae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eae2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eae4:	69bb      	ldr	r3, [r7, #24]
 801eae6:	f383 8810 	msr	PRIMASK, r3
}
 801eaea:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801eaec:	2300      	movs	r3, #0
}
 801eaee:	0018      	movs	r0, r3
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	b010      	add	sp, #64	@ 0x40
 801eaf4:	bd80      	pop	{r7, pc}
 801eaf6:	46c0      	nop			@ (mov r8, r8)
 801eaf8:	000001ff 	.word	0x000001ff
 801eafc:	0801f271 	.word	0x0801f271
 801eb00:	0801f0a5 	.word	0x0801f0a5

0801eb04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801eb04:	b580      	push	{r7, lr}
 801eb06:	b090      	sub	sp, #64	@ 0x40
 801eb08:	af00      	add	r7, sp, #0
 801eb0a:	60f8      	str	r0, [r7, #12]
 801eb0c:	60b9      	str	r1, [r7, #8]
 801eb0e:	1dbb      	adds	r3, r7, #6
 801eb10:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	68ba      	ldr	r2, [r7, #8]
 801eb16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	1dba      	adds	r2, r7, #6
 801eb1c:	2158      	movs	r1, #88	@ 0x58
 801eb1e:	8812      	ldrh	r2, [r2, #0]
 801eb20:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eb22:	68fb      	ldr	r3, [r7, #12]
 801eb24:	2284      	movs	r2, #132	@ 0x84
 801eb26:	2100      	movs	r1, #0
 801eb28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	2280      	movs	r2, #128	@ 0x80
 801eb2e:	2122      	movs	r1, #34	@ 0x22
 801eb30:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d028      	beq.n	801eb8c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb3e:	4a3e      	ldr	r2, [pc, #248]	@ (801ec38 <UART_Start_Receive_DMA+0x134>)
 801eb40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801eb42:	68fb      	ldr	r3, [r7, #12]
 801eb44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb46:	4a3d      	ldr	r2, [pc, #244]	@ (801ec3c <UART_Start_Receive_DMA+0x138>)
 801eb48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801eb4a:	68fb      	ldr	r3, [r7, #12]
 801eb4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb4e:	4a3c      	ldr	r2, [pc, #240]	@ (801ec40 <UART_Start_Receive_DMA+0x13c>)
 801eb50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb56:	2200      	movs	r2, #0
 801eb58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	681b      	ldr	r3, [r3, #0]
 801eb62:	3324      	adds	r3, #36	@ 0x24
 801eb64:	0019      	movs	r1, r3
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb6a:	001a      	movs	r2, r3
 801eb6c:	1dbb      	adds	r3, r7, #6
 801eb6e:	881b      	ldrh	r3, [r3, #0]
 801eb70:	f7f6 fbc4 	bl	80152fc <HAL_DMA_Start_IT>
 801eb74:	1e03      	subs	r3, r0, #0
 801eb76:	d009      	beq.n	801eb8c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	2284      	movs	r2, #132	@ 0x84
 801eb7c:	2110      	movs	r1, #16
 801eb7e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	2280      	movs	r2, #128	@ 0x80
 801eb84:	2120      	movs	r1, #32
 801eb86:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801eb88:	2301      	movs	r3, #1
 801eb8a:	e050      	b.n	801ec2e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	691b      	ldr	r3, [r3, #16]
 801eb90:	2b00      	cmp	r3, #0
 801eb92:	d019      	beq.n	801ebc8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb94:	f3ef 8310 	mrs	r3, PRIMASK
 801eb98:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801eb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801eb9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eb9e:	2301      	movs	r3, #1
 801eba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eba4:	f383 8810 	msr	PRIMASK, r3
}
 801eba8:	46c0      	nop			@ (mov r8, r8)
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	681a      	ldr	r2, [r3, #0]
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	2180      	movs	r1, #128	@ 0x80
 801ebb6:	0049      	lsls	r1, r1, #1
 801ebb8:	430a      	orrs	r2, r1
 801ebba:	601a      	str	r2, [r3, #0]
 801ebbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ebbe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebc2:	f383 8810 	msr	PRIMASK, r3
}
 801ebc6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebc8:	f3ef 8310 	mrs	r3, PRIMASK
 801ebcc:	613b      	str	r3, [r7, #16]
  return(result);
 801ebce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ebd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ebd2:	2301      	movs	r3, #1
 801ebd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	f383 8810 	msr	PRIMASK, r3
}
 801ebdc:	46c0      	nop			@ (mov r8, r8)
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	689a      	ldr	r2, [r3, #8]
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	2101      	movs	r1, #1
 801ebea:	430a      	orrs	r2, r1
 801ebec:	609a      	str	r2, [r3, #8]
 801ebee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ebf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebf2:	69bb      	ldr	r3, [r7, #24]
 801ebf4:	f383 8810 	msr	PRIMASK, r3
}
 801ebf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebfa:	f3ef 8310 	mrs	r3, PRIMASK
 801ebfe:	61fb      	str	r3, [r7, #28]
  return(result);
 801ec00:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ec02:	637b      	str	r3, [r7, #52]	@ 0x34
 801ec04:	2301      	movs	r3, #1
 801ec06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec08:	6a3b      	ldr	r3, [r7, #32]
 801ec0a:	f383 8810 	msr	PRIMASK, r3
}
 801ec0e:	46c0      	nop			@ (mov r8, r8)
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	681b      	ldr	r3, [r3, #0]
 801ec14:	689a      	ldr	r2, [r3, #8]
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	2140      	movs	r1, #64	@ 0x40
 801ec1c:	430a      	orrs	r2, r1
 801ec1e:	609a      	str	r2, [r3, #8]
 801ec20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec26:	f383 8810 	msr	PRIMASK, r3
}
 801ec2a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ec2c:	2300      	movs	r3, #0
}
 801ec2e:	0018      	movs	r0, r3
 801ec30:	46bd      	mov	sp, r7
 801ec32:	b010      	add	sp, #64	@ 0x40
 801ec34:	bd80      	pop	{r7, pc}
 801ec36:	46c0      	nop			@ (mov r8, r8)
 801ec38:	0801ee15 	.word	0x0801ee15
 801ec3c:	0801ef49 	.word	0x0801ef49
 801ec40:	0801ef91 	.word	0x0801ef91

0801ec44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ec44:	b580      	push	{r7, lr}
 801ec46:	b086      	sub	sp, #24
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec4c:	f3ef 8310 	mrs	r3, PRIMASK
 801ec50:	60bb      	str	r3, [r7, #8]
  return(result);
 801ec52:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ec54:	617b      	str	r3, [r7, #20]
 801ec56:	2301      	movs	r3, #1
 801ec58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	f383 8810 	msr	PRIMASK, r3
}
 801ec60:	46c0      	nop			@ (mov r8, r8)
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	681a      	ldr	r2, [r3, #0]
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	21c0      	movs	r1, #192	@ 0xc0
 801ec6e:	438a      	bics	r2, r1
 801ec70:	601a      	str	r2, [r3, #0]
 801ec72:	697b      	ldr	r3, [r7, #20]
 801ec74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec76:	693b      	ldr	r3, [r7, #16]
 801ec78:	f383 8810 	msr	PRIMASK, r3
}
 801ec7c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	2220      	movs	r2, #32
 801ec82:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ec84:	46c0      	nop			@ (mov r8, r8)
 801ec86:	46bd      	mov	sp, r7
 801ec88:	b006      	add	sp, #24
 801ec8a:	bd80      	pop	{r7, pc}

0801ec8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ec8c:	b580      	push	{r7, lr}
 801ec8e:	b08e      	sub	sp, #56	@ 0x38
 801ec90:	af00      	add	r7, sp, #0
 801ec92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec94:	f3ef 8310 	mrs	r3, PRIMASK
 801ec98:	617b      	str	r3, [r7, #20]
  return(result);
 801ec9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ec9c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ec9e:	2301      	movs	r3, #1
 801eca0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eca2:	69bb      	ldr	r3, [r7, #24]
 801eca4:	f383 8810 	msr	PRIMASK, r3
}
 801eca8:	46c0      	nop			@ (mov r8, r8)
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	681a      	ldr	r2, [r3, #0]
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	4926      	ldr	r1, [pc, #152]	@ (801ed50 <UART_EndRxTransfer+0xc4>)
 801ecb6:	400a      	ands	r2, r1
 801ecb8:	601a      	str	r2, [r3, #0]
 801ecba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ecbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecbe:	69fb      	ldr	r3, [r7, #28]
 801ecc0:	f383 8810 	msr	PRIMASK, r3
}
 801ecc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecc6:	f3ef 8310 	mrs	r3, PRIMASK
 801ecca:	623b      	str	r3, [r7, #32]
  return(result);
 801eccc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ecce:	633b      	str	r3, [r7, #48]	@ 0x30
 801ecd0:	2301      	movs	r3, #1
 801ecd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecd6:	f383 8810 	msr	PRIMASK, r3
}
 801ecda:	46c0      	nop			@ (mov r8, r8)
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	689a      	ldr	r2, [r3, #8]
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	2101      	movs	r1, #1
 801ece8:	438a      	bics	r2, r1
 801ecea:	609a      	str	r2, [r3, #8]
 801ecec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecf2:	f383 8810 	msr	PRIMASK, r3
}
 801ecf6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ecfc:	2b01      	cmp	r3, #1
 801ecfe:	d118      	bne.n	801ed32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed00:	f3ef 8310 	mrs	r3, PRIMASK
 801ed04:	60bb      	str	r3, [r7, #8]
  return(result);
 801ed06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ed08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ed0a:	2301      	movs	r3, #1
 801ed0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	f383 8810 	msr	PRIMASK, r3
}
 801ed14:	46c0      	nop			@ (mov r8, r8)
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	681a      	ldr	r2, [r3, #0]
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	2110      	movs	r1, #16
 801ed22:	438a      	bics	r2, r1
 801ed24:	601a      	str	r2, [r3, #0]
 801ed26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed2a:	693b      	ldr	r3, [r7, #16]
 801ed2c:	f383 8810 	msr	PRIMASK, r3
}
 801ed30:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	2280      	movs	r2, #128	@ 0x80
 801ed36:	2120      	movs	r1, #32
 801ed38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	2200      	movs	r2, #0
 801ed44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ed46:	46c0      	nop			@ (mov r8, r8)
 801ed48:	46bd      	mov	sp, r7
 801ed4a:	b00e      	add	sp, #56	@ 0x38
 801ed4c:	bd80      	pop	{r7, pc}
 801ed4e:	46c0      	nop			@ (mov r8, r8)
 801ed50:	fffffedf 	.word	0xfffffedf

0801ed54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b08c      	sub	sp, #48	@ 0x30
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	2220      	movs	r2, #32
 801ed6a:	4013      	ands	r3, r2
 801ed6c:	d135      	bne.n	801edda <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ed6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed70:	2252      	movs	r2, #82	@ 0x52
 801ed72:	2100      	movs	r1, #0
 801ed74:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed76:	f3ef 8310 	mrs	r3, PRIMASK
 801ed7a:	60fb      	str	r3, [r7, #12]
  return(result);
 801ed7c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ed7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ed80:	2301      	movs	r3, #1
 801ed82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed84:	693b      	ldr	r3, [r7, #16]
 801ed86:	f383 8810 	msr	PRIMASK, r3
}
 801ed8a:	46c0      	nop			@ (mov r8, r8)
 801ed8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	689a      	ldr	r2, [r3, #8]
 801ed92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	2180      	movs	r1, #128	@ 0x80
 801ed98:	438a      	bics	r2, r1
 801ed9a:	609a      	str	r2, [r3, #8]
 801ed9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eda0:	697b      	ldr	r3, [r7, #20]
 801eda2:	f383 8810 	msr	PRIMASK, r3
}
 801eda6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eda8:	f3ef 8310 	mrs	r3, PRIMASK
 801edac:	61bb      	str	r3, [r7, #24]
  return(result);
 801edae:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801edb0:	627b      	str	r3, [r7, #36]	@ 0x24
 801edb2:	2301      	movs	r3, #1
 801edb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edb6:	69fb      	ldr	r3, [r7, #28]
 801edb8:	f383 8810 	msr	PRIMASK, r3
}
 801edbc:	46c0      	nop			@ (mov r8, r8)
 801edbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	681a      	ldr	r2, [r3, #0]
 801edc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edc6:	681b      	ldr	r3, [r3, #0]
 801edc8:	2140      	movs	r1, #64	@ 0x40
 801edca:	430a      	orrs	r2, r1
 801edcc:	601a      	str	r2, [r3, #0]
 801edce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edd2:	6a3b      	ldr	r3, [r7, #32]
 801edd4:	f383 8810 	msr	PRIMASK, r3
}
 801edd8:	e006      	b.n	801ede8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801edda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eddc:	228c      	movs	r2, #140	@ 0x8c
 801edde:	589b      	ldr	r3, [r3, r2]
 801ede0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ede2:	0010      	movs	r0, r2
 801ede4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ede6:	46c0      	nop			@ (mov r8, r8)
 801ede8:	46c0      	nop			@ (mov r8, r8)
 801edea:	46bd      	mov	sp, r7
 801edec:	b00c      	add	sp, #48	@ 0x30
 801edee:	bd80      	pop	{r7, pc}

0801edf0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801edf0:	b580      	push	{r7, lr}
 801edf2:	b084      	sub	sp, #16
 801edf4:	af00      	add	r7, sp, #0
 801edf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801edfe:	68fb      	ldr	r3, [r7, #12]
 801ee00:	2288      	movs	r2, #136	@ 0x88
 801ee02:	589b      	ldr	r3, [r3, r2]
 801ee04:	68fa      	ldr	r2, [r7, #12]
 801ee06:	0010      	movs	r0, r2
 801ee08:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee0a:	46c0      	nop			@ (mov r8, r8)
 801ee0c:	46bd      	mov	sp, r7
 801ee0e:	b004      	add	sp, #16
 801ee10:	bd80      	pop	{r7, pc}
	...

0801ee14 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ee14:	b580      	push	{r7, lr}
 801ee16:	b094      	sub	sp, #80	@ 0x50
 801ee18:	af00      	add	r7, sp, #0
 801ee1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee20:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	681b      	ldr	r3, [r3, #0]
 801ee26:	681b      	ldr	r3, [r3, #0]
 801ee28:	2220      	movs	r2, #32
 801ee2a:	4013      	ands	r3, r2
 801ee2c:	d16f      	bne.n	801ef0e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ee2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee30:	225a      	movs	r2, #90	@ 0x5a
 801ee32:	2100      	movs	r1, #0
 801ee34:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee36:	f3ef 8310 	mrs	r3, PRIMASK
 801ee3a:	61bb      	str	r3, [r7, #24]
  return(result);
 801ee3c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ee3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ee40:	2301      	movs	r3, #1
 801ee42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee44:	69fb      	ldr	r3, [r7, #28]
 801ee46:	f383 8810 	msr	PRIMASK, r3
}
 801ee4a:	46c0      	nop			@ (mov r8, r8)
 801ee4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	681a      	ldr	r2, [r3, #0]
 801ee52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	493b      	ldr	r1, [pc, #236]	@ (801ef44 <UART_DMAReceiveCplt+0x130>)
 801ee58:	400a      	ands	r2, r1
 801ee5a:	601a      	str	r2, [r3, #0]
 801ee5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee60:	6a3b      	ldr	r3, [r7, #32]
 801ee62:	f383 8810 	msr	PRIMASK, r3
}
 801ee66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee68:	f3ef 8310 	mrs	r3, PRIMASK
 801ee6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ee6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ee70:	647b      	str	r3, [r7, #68]	@ 0x44
 801ee72:	2301      	movs	r3, #1
 801ee74:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee78:	f383 8810 	msr	PRIMASK, r3
}
 801ee7c:	46c0      	nop			@ (mov r8, r8)
 801ee7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee80:	681b      	ldr	r3, [r3, #0]
 801ee82:	689a      	ldr	r2, [r3, #8]
 801ee84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	2101      	movs	r1, #1
 801ee8a:	438a      	bics	r2, r1
 801ee8c:	609a      	str	r2, [r3, #8]
 801ee8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee94:	f383 8810 	msr	PRIMASK, r3
}
 801ee98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee9a:	f3ef 8310 	mrs	r3, PRIMASK
 801ee9e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801eea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801eea2:	643b      	str	r3, [r7, #64]	@ 0x40
 801eea4:	2301      	movs	r3, #1
 801eea6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eeaa:	f383 8810 	msr	PRIMASK, r3
}
 801eeae:	46c0      	nop			@ (mov r8, r8)
 801eeb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	689a      	ldr	r2, [r3, #8]
 801eeb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	2140      	movs	r1, #64	@ 0x40
 801eebc:	438a      	bics	r2, r1
 801eebe:	609a      	str	r2, [r3, #8]
 801eec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eec6:	f383 8810 	msr	PRIMASK, r3
}
 801eeca:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801eecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eece:	2280      	movs	r2, #128	@ 0x80
 801eed0:	2120      	movs	r1, #32
 801eed2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eed8:	2b01      	cmp	r3, #1
 801eeda:	d118      	bne.n	801ef0e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eedc:	f3ef 8310 	mrs	r3, PRIMASK
 801eee0:	60fb      	str	r3, [r7, #12]
  return(result);
 801eee2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eee6:	2301      	movs	r3, #1
 801eee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eeea:	693b      	ldr	r3, [r7, #16]
 801eeec:	f383 8810 	msr	PRIMASK, r3
}
 801eef0:	46c0      	nop			@ (mov r8, r8)
 801eef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	681a      	ldr	r2, [r3, #0]
 801eef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eefa:	681b      	ldr	r3, [r3, #0]
 801eefc:	2110      	movs	r1, #16
 801eefe:	438a      	bics	r2, r1
 801ef00:	601a      	str	r2, [r3, #0]
 801ef02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ef04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef06:	697b      	ldr	r3, [r7, #20]
 801ef08:	f383 8810 	msr	PRIMASK, r3
}
 801ef0c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ef0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef10:	2200      	movs	r2, #0
 801ef12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ef14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ef18:	2b01      	cmp	r3, #1
 801ef1a:	d109      	bne.n	801ef30 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801ef1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef1e:	22ac      	movs	r2, #172	@ 0xac
 801ef20:	589b      	ldr	r3, [r3, r2]
 801ef22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef24:	2158      	movs	r1, #88	@ 0x58
 801ef26:	5a51      	ldrh	r1, [r2, r1]
 801ef28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef2a:	0010      	movs	r0, r2
 801ef2c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ef2e:	e005      	b.n	801ef3c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801ef30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef32:	2294      	movs	r2, #148	@ 0x94
 801ef34:	589b      	ldr	r3, [r3, r2]
 801ef36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef38:	0010      	movs	r0, r2
 801ef3a:	4798      	blx	r3
}
 801ef3c:	46c0      	nop			@ (mov r8, r8)
 801ef3e:	46bd      	mov	sp, r7
 801ef40:	b014      	add	sp, #80	@ 0x50
 801ef42:	bd80      	pop	{r7, pc}
 801ef44:	fffffeff 	.word	0xfffffeff

0801ef48 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ef48:	b580      	push	{r7, lr}
 801ef4a:	b084      	sub	sp, #16
 801ef4c:	af00      	add	r7, sp, #0
 801ef4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	2201      	movs	r2, #1
 801ef5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ef60:	2b01      	cmp	r3, #1
 801ef62:	d10b      	bne.n	801ef7c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	22ac      	movs	r2, #172	@ 0xac
 801ef68:	589b      	ldr	r3, [r3, r2]
 801ef6a:	68fa      	ldr	r2, [r7, #12]
 801ef6c:	2158      	movs	r1, #88	@ 0x58
 801ef6e:	5a52      	ldrh	r2, [r2, r1]
 801ef70:	0852      	lsrs	r2, r2, #1
 801ef72:	b291      	uxth	r1, r2
 801ef74:	68fa      	ldr	r2, [r7, #12]
 801ef76:	0010      	movs	r0, r2
 801ef78:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ef7a:	e005      	b.n	801ef88 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	2290      	movs	r2, #144	@ 0x90
 801ef80:	589b      	ldr	r3, [r3, r2]
 801ef82:	68fa      	ldr	r2, [r7, #12]
 801ef84:	0010      	movs	r0, r2
 801ef86:	4798      	blx	r3
}
 801ef88:	46c0      	nop			@ (mov r8, r8)
 801ef8a:	46bd      	mov	sp, r7
 801ef8c:	b004      	add	sp, #16
 801ef8e:	bd80      	pop	{r7, pc}

0801ef90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ef90:	b580      	push	{r7, lr}
 801ef92:	b086      	sub	sp, #24
 801ef94:	af00      	add	r7, sp, #0
 801ef96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ef9e:	697b      	ldr	r3, [r7, #20]
 801efa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801efa2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801efa4:	697b      	ldr	r3, [r7, #20]
 801efa6:	2280      	movs	r2, #128	@ 0x80
 801efa8:	589b      	ldr	r3, [r3, r2]
 801efaa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801efac:	697b      	ldr	r3, [r7, #20]
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	689b      	ldr	r3, [r3, #8]
 801efb2:	2280      	movs	r2, #128	@ 0x80
 801efb4:	4013      	ands	r3, r2
 801efb6:	2b80      	cmp	r3, #128	@ 0x80
 801efb8:	d10a      	bne.n	801efd0 <UART_DMAError+0x40>
 801efba:	693b      	ldr	r3, [r7, #16]
 801efbc:	2b21      	cmp	r3, #33	@ 0x21
 801efbe:	d107      	bne.n	801efd0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801efc0:	697b      	ldr	r3, [r7, #20]
 801efc2:	2252      	movs	r2, #82	@ 0x52
 801efc4:	2100      	movs	r1, #0
 801efc6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801efc8:	697b      	ldr	r3, [r7, #20]
 801efca:	0018      	movs	r0, r3
 801efcc:	f7ff fe3a 	bl	801ec44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801efd0:	697b      	ldr	r3, [r7, #20]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	689b      	ldr	r3, [r3, #8]
 801efd6:	2240      	movs	r2, #64	@ 0x40
 801efd8:	4013      	ands	r3, r2
 801efda:	2b40      	cmp	r3, #64	@ 0x40
 801efdc:	d10a      	bne.n	801eff4 <UART_DMAError+0x64>
 801efde:	68fb      	ldr	r3, [r7, #12]
 801efe0:	2b22      	cmp	r3, #34	@ 0x22
 801efe2:	d107      	bne.n	801eff4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801efe4:	697b      	ldr	r3, [r7, #20]
 801efe6:	225a      	movs	r2, #90	@ 0x5a
 801efe8:	2100      	movs	r1, #0
 801efea:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801efec:	697b      	ldr	r3, [r7, #20]
 801efee:	0018      	movs	r0, r3
 801eff0:	f7ff fe4c 	bl	801ec8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801eff4:	697b      	ldr	r3, [r7, #20]
 801eff6:	2284      	movs	r2, #132	@ 0x84
 801eff8:	589b      	ldr	r3, [r3, r2]
 801effa:	2210      	movs	r2, #16
 801effc:	431a      	orrs	r2, r3
 801effe:	697b      	ldr	r3, [r7, #20]
 801f000:	2184      	movs	r1, #132	@ 0x84
 801f002:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f004:	697b      	ldr	r3, [r7, #20]
 801f006:	2298      	movs	r2, #152	@ 0x98
 801f008:	589b      	ldr	r3, [r3, r2]
 801f00a:	697a      	ldr	r2, [r7, #20]
 801f00c:	0010      	movs	r0, r2
 801f00e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f010:	46c0      	nop			@ (mov r8, r8)
 801f012:	46bd      	mov	sp, r7
 801f014:	b006      	add	sp, #24
 801f016:	bd80      	pop	{r7, pc}

0801f018 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b084      	sub	sp, #16
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	225a      	movs	r2, #90	@ 0x5a
 801f02a:	2100      	movs	r1, #0
 801f02c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801f02e:	68fb      	ldr	r3, [r7, #12]
 801f030:	2252      	movs	r2, #82	@ 0x52
 801f032:	2100      	movs	r1, #0
 801f034:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	2298      	movs	r2, #152	@ 0x98
 801f03a:	589b      	ldr	r3, [r3, r2]
 801f03c:	68fa      	ldr	r2, [r7, #12]
 801f03e:	0010      	movs	r0, r2
 801f040:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f042:	46c0      	nop			@ (mov r8, r8)
 801f044:	46bd      	mov	sp, r7
 801f046:	b004      	add	sp, #16
 801f048:	bd80      	pop	{r7, pc}

0801f04a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f04a:	b580      	push	{r7, lr}
 801f04c:	b086      	sub	sp, #24
 801f04e:	af00      	add	r7, sp, #0
 801f050:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f052:	f3ef 8310 	mrs	r3, PRIMASK
 801f056:	60bb      	str	r3, [r7, #8]
  return(result);
 801f058:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f05a:	617b      	str	r3, [r7, #20]
 801f05c:	2301      	movs	r3, #1
 801f05e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	f383 8810 	msr	PRIMASK, r3
}
 801f066:	46c0      	nop			@ (mov r8, r8)
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	681a      	ldr	r2, [r3, #0]
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	2140      	movs	r1, #64	@ 0x40
 801f074:	438a      	bics	r2, r1
 801f076:	601a      	str	r2, [r3, #0]
 801f078:	697b      	ldr	r3, [r7, #20]
 801f07a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f07c:	693b      	ldr	r3, [r7, #16]
 801f07e:	f383 8810 	msr	PRIMASK, r3
}
 801f082:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	2220      	movs	r2, #32
 801f088:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	2200      	movs	r2, #0
 801f08e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	228c      	movs	r2, #140	@ 0x8c
 801f094:	589b      	ldr	r3, [r3, r2]
 801f096:	687a      	ldr	r2, [r7, #4]
 801f098:	0010      	movs	r0, r2
 801f09a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f09c:	46c0      	nop			@ (mov r8, r8)
 801f09e:	46bd      	mov	sp, r7
 801f0a0:	b006      	add	sp, #24
 801f0a2:	bd80      	pop	{r7, pc}

0801f0a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f0a4:	b580      	push	{r7, lr}
 801f0a6:	b094      	sub	sp, #80	@ 0x50
 801f0a8:	af00      	add	r7, sp, #0
 801f0aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f0ac:	204e      	movs	r0, #78	@ 0x4e
 801f0ae:	183b      	adds	r3, r7, r0
 801f0b0:	687a      	ldr	r2, [r7, #4]
 801f0b2:	215c      	movs	r1, #92	@ 0x5c
 801f0b4:	5a52      	ldrh	r2, [r2, r1]
 801f0b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	2280      	movs	r2, #128	@ 0x80
 801f0bc:	589b      	ldr	r3, [r3, r2]
 801f0be:	2b22      	cmp	r3, #34	@ 0x22
 801f0c0:	d000      	beq.n	801f0c4 <UART_RxISR_8BIT+0x20>
 801f0c2:	e0c2      	b.n	801f24a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f0ca:	214c      	movs	r1, #76	@ 0x4c
 801f0cc:	187b      	adds	r3, r7, r1
 801f0ce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f0d0:	187b      	adds	r3, r7, r1
 801f0d2:	881b      	ldrh	r3, [r3, #0]
 801f0d4:	b2da      	uxtb	r2, r3
 801f0d6:	183b      	adds	r3, r7, r0
 801f0d8:	881b      	ldrh	r3, [r3, #0]
 801f0da:	b2d9      	uxtb	r1, r3
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0e0:	400a      	ands	r2, r1
 801f0e2:	b2d2      	uxtb	r2, r2
 801f0e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0ea:	1c5a      	adds	r2, r3, #1
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	225a      	movs	r2, #90	@ 0x5a
 801f0f4:	5a9b      	ldrh	r3, [r3, r2]
 801f0f6:	b29b      	uxth	r3, r3
 801f0f8:	3b01      	subs	r3, #1
 801f0fa:	b299      	uxth	r1, r3
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	225a      	movs	r2, #90	@ 0x5a
 801f100:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	225a      	movs	r2, #90	@ 0x5a
 801f106:	5a9b      	ldrh	r3, [r3, r2]
 801f108:	b29b      	uxth	r3, r3
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d000      	beq.n	801f110 <UART_RxISR_8BIT+0x6c>
 801f10e:	e0a4      	b.n	801f25a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f110:	f3ef 8310 	mrs	r3, PRIMASK
 801f114:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801f116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f118:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f11a:	2301      	movs	r3, #1
 801f11c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f120:	f383 8810 	msr	PRIMASK, r3
}
 801f124:	46c0      	nop			@ (mov r8, r8)
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	681a      	ldr	r2, [r3, #0]
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	494c      	ldr	r1, [pc, #304]	@ (801f264 <UART_RxISR_8BIT+0x1c0>)
 801f132:	400a      	ands	r2, r1
 801f134:	601a      	str	r2, [r3, #0]
 801f136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f13c:	f383 8810 	msr	PRIMASK, r3
}
 801f140:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f142:	f3ef 8310 	mrs	r3, PRIMASK
 801f146:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801f148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f14a:	647b      	str	r3, [r7, #68]	@ 0x44
 801f14c:	2301      	movs	r3, #1
 801f14e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f152:	f383 8810 	msr	PRIMASK, r3
}
 801f156:	46c0      	nop			@ (mov r8, r8)
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	689a      	ldr	r2, [r3, #8]
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	681b      	ldr	r3, [r3, #0]
 801f162:	2101      	movs	r1, #1
 801f164:	438a      	bics	r2, r1
 801f166:	609a      	str	r2, [r3, #8]
 801f168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f16a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f16e:	f383 8810 	msr	PRIMASK, r3
}
 801f172:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	2280      	movs	r2, #128	@ 0x80
 801f178:	2120      	movs	r1, #32
 801f17a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	2200      	movs	r2, #0
 801f180:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2200      	movs	r2, #0
 801f186:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	681b      	ldr	r3, [r3, #0]
 801f18c:	4a36      	ldr	r2, [pc, #216]	@ (801f268 <UART_RxISR_8BIT+0x1c4>)
 801f18e:	4293      	cmp	r3, r2
 801f190:	d01f      	beq.n	801f1d2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	681b      	ldr	r3, [r3, #0]
 801f196:	685a      	ldr	r2, [r3, #4]
 801f198:	2380      	movs	r3, #128	@ 0x80
 801f19a:	041b      	lsls	r3, r3, #16
 801f19c:	4013      	ands	r3, r2
 801f19e:	d018      	beq.n	801f1d2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1a0:	f3ef 8310 	mrs	r3, PRIMASK
 801f1a4:	61bb      	str	r3, [r7, #24]
  return(result);
 801f1a6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f1a8:	643b      	str	r3, [r7, #64]	@ 0x40
 801f1aa:	2301      	movs	r3, #1
 801f1ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1ae:	69fb      	ldr	r3, [r7, #28]
 801f1b0:	f383 8810 	msr	PRIMASK, r3
}
 801f1b4:	46c0      	nop			@ (mov r8, r8)
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	681b      	ldr	r3, [r3, #0]
 801f1ba:	681a      	ldr	r2, [r3, #0]
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	492a      	ldr	r1, [pc, #168]	@ (801f26c <UART_RxISR_8BIT+0x1c8>)
 801f1c2:	400a      	ands	r2, r1
 801f1c4:	601a      	str	r2, [r3, #0]
 801f1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f1c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1ca:	6a3b      	ldr	r3, [r7, #32]
 801f1cc:	f383 8810 	msr	PRIMASK, r3
}
 801f1d0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f1d6:	2b01      	cmp	r3, #1
 801f1d8:	d130      	bne.n	801f23c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	2200      	movs	r2, #0
 801f1de:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1e0:	f3ef 8310 	mrs	r3, PRIMASK
 801f1e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801f1e6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f1ea:	2301      	movs	r3, #1
 801f1ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1ee:	693b      	ldr	r3, [r7, #16]
 801f1f0:	f383 8810 	msr	PRIMASK, r3
}
 801f1f4:	46c0      	nop			@ (mov r8, r8)
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	681a      	ldr	r2, [r3, #0]
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	2110      	movs	r1, #16
 801f202:	438a      	bics	r2, r1
 801f204:	601a      	str	r2, [r3, #0]
 801f206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f20a:	697b      	ldr	r3, [r7, #20]
 801f20c:	f383 8810 	msr	PRIMASK, r3
}
 801f210:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	69db      	ldr	r3, [r3, #28]
 801f218:	2210      	movs	r2, #16
 801f21a:	4013      	ands	r3, r2
 801f21c:	2b10      	cmp	r3, #16
 801f21e:	d103      	bne.n	801f228 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	2210      	movs	r2, #16
 801f226:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	22ac      	movs	r2, #172	@ 0xac
 801f22c:	589b      	ldr	r3, [r3, r2]
 801f22e:	687a      	ldr	r2, [r7, #4]
 801f230:	2158      	movs	r1, #88	@ 0x58
 801f232:	5a51      	ldrh	r1, [r2, r1]
 801f234:	687a      	ldr	r2, [r7, #4]
 801f236:	0010      	movs	r0, r2
 801f238:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f23a:	e00e      	b.n	801f25a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	2294      	movs	r2, #148	@ 0x94
 801f240:	589b      	ldr	r3, [r3, r2]
 801f242:	687a      	ldr	r2, [r7, #4]
 801f244:	0010      	movs	r0, r2
 801f246:	4798      	blx	r3
}
 801f248:	e007      	b.n	801f25a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	699a      	ldr	r2, [r3, #24]
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	2108      	movs	r1, #8
 801f256:	430a      	orrs	r2, r1
 801f258:	619a      	str	r2, [r3, #24]
}
 801f25a:	46c0      	nop			@ (mov r8, r8)
 801f25c:	46bd      	mov	sp, r7
 801f25e:	b014      	add	sp, #80	@ 0x50
 801f260:	bd80      	pop	{r7, pc}
 801f262:	46c0      	nop			@ (mov r8, r8)
 801f264:	fffffedf 	.word	0xfffffedf
 801f268:	40004800 	.word	0x40004800
 801f26c:	fbffffff 	.word	0xfbffffff

0801f270 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f270:	b580      	push	{r7, lr}
 801f272:	b094      	sub	sp, #80	@ 0x50
 801f274:	af00      	add	r7, sp, #0
 801f276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f278:	204e      	movs	r0, #78	@ 0x4e
 801f27a:	183b      	adds	r3, r7, r0
 801f27c:	687a      	ldr	r2, [r7, #4]
 801f27e:	215c      	movs	r1, #92	@ 0x5c
 801f280:	5a52      	ldrh	r2, [r2, r1]
 801f282:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	2280      	movs	r2, #128	@ 0x80
 801f288:	589b      	ldr	r3, [r3, r2]
 801f28a:	2b22      	cmp	r3, #34	@ 0x22
 801f28c:	d000      	beq.n	801f290 <UART_RxISR_16BIT+0x20>
 801f28e:	e0c2      	b.n	801f416 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f296:	214c      	movs	r1, #76	@ 0x4c
 801f298:	187b      	adds	r3, r7, r1
 801f29a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f2a2:	187b      	adds	r3, r7, r1
 801f2a4:	183a      	adds	r2, r7, r0
 801f2a6:	881b      	ldrh	r3, [r3, #0]
 801f2a8:	8812      	ldrh	r2, [r2, #0]
 801f2aa:	4013      	ands	r3, r2
 801f2ac:	b29a      	uxth	r2, r3
 801f2ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f2b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f2b6:	1c9a      	adds	r2, r3, #2
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	225a      	movs	r2, #90	@ 0x5a
 801f2c0:	5a9b      	ldrh	r3, [r3, r2]
 801f2c2:	b29b      	uxth	r3, r3
 801f2c4:	3b01      	subs	r3, #1
 801f2c6:	b299      	uxth	r1, r3
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	225a      	movs	r2, #90	@ 0x5a
 801f2cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	225a      	movs	r2, #90	@ 0x5a
 801f2d2:	5a9b      	ldrh	r3, [r3, r2]
 801f2d4:	b29b      	uxth	r3, r3
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d000      	beq.n	801f2dc <UART_RxISR_16BIT+0x6c>
 801f2da:	e0a4      	b.n	801f426 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2dc:	f3ef 8310 	mrs	r3, PRIMASK
 801f2e0:	623b      	str	r3, [r7, #32]
  return(result);
 801f2e2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f2e4:	647b      	str	r3, [r7, #68]	@ 0x44
 801f2e6:	2301      	movs	r3, #1
 801f2e8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2ec:	f383 8810 	msr	PRIMASK, r3
}
 801f2f0:	46c0      	nop			@ (mov r8, r8)
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	681a      	ldr	r2, [r3, #0]
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	494c      	ldr	r1, [pc, #304]	@ (801f430 <UART_RxISR_16BIT+0x1c0>)
 801f2fe:	400a      	ands	r2, r1
 801f300:	601a      	str	r2, [r3, #0]
 801f302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f304:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f308:	f383 8810 	msr	PRIMASK, r3
}
 801f30c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f30e:	f3ef 8310 	mrs	r3, PRIMASK
 801f312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f316:	643b      	str	r3, [r7, #64]	@ 0x40
 801f318:	2301      	movs	r3, #1
 801f31a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f31e:	f383 8810 	msr	PRIMASK, r3
}
 801f322:	46c0      	nop			@ (mov r8, r8)
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	689a      	ldr	r2, [r3, #8]
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	2101      	movs	r1, #1
 801f330:	438a      	bics	r2, r1
 801f332:	609a      	str	r2, [r3, #8]
 801f334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f336:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f33a:	f383 8810 	msr	PRIMASK, r3
}
 801f33e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	2280      	movs	r2, #128	@ 0x80
 801f344:	2120      	movs	r1, #32
 801f346:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	2200      	movs	r2, #0
 801f34c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	2200      	movs	r2, #0
 801f352:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	4a36      	ldr	r2, [pc, #216]	@ (801f434 <UART_RxISR_16BIT+0x1c4>)
 801f35a:	4293      	cmp	r3, r2
 801f35c:	d01f      	beq.n	801f39e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	685a      	ldr	r2, [r3, #4]
 801f364:	2380      	movs	r3, #128	@ 0x80
 801f366:	041b      	lsls	r3, r3, #16
 801f368:	4013      	ands	r3, r2
 801f36a:	d018      	beq.n	801f39e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f36c:	f3ef 8310 	mrs	r3, PRIMASK
 801f370:	617b      	str	r3, [r7, #20]
  return(result);
 801f372:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f376:	2301      	movs	r3, #1
 801f378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f37a:	69bb      	ldr	r3, [r7, #24]
 801f37c:	f383 8810 	msr	PRIMASK, r3
}
 801f380:	46c0      	nop			@ (mov r8, r8)
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	681b      	ldr	r3, [r3, #0]
 801f386:	681a      	ldr	r2, [r3, #0]
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	492a      	ldr	r1, [pc, #168]	@ (801f438 <UART_RxISR_16BIT+0x1c8>)
 801f38e:	400a      	ands	r2, r1
 801f390:	601a      	str	r2, [r3, #0]
 801f392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f396:	69fb      	ldr	r3, [r7, #28]
 801f398:	f383 8810 	msr	PRIMASK, r3
}
 801f39c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f3a2:	2b01      	cmp	r3, #1
 801f3a4:	d130      	bne.n	801f408 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	2200      	movs	r2, #0
 801f3aa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f3ac:	f3ef 8310 	mrs	r3, PRIMASK
 801f3b0:	60bb      	str	r3, [r7, #8]
  return(result);
 801f3b2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f3b6:	2301      	movs	r3, #1
 801f3b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	f383 8810 	msr	PRIMASK, r3
}
 801f3c0:	46c0      	nop			@ (mov r8, r8)
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	681a      	ldr	r2, [r3, #0]
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	2110      	movs	r1, #16
 801f3ce:	438a      	bics	r2, r1
 801f3d0:	601a      	str	r2, [r3, #0]
 801f3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f3d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3d6:	693b      	ldr	r3, [r7, #16]
 801f3d8:	f383 8810 	msr	PRIMASK, r3
}
 801f3dc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	69db      	ldr	r3, [r3, #28]
 801f3e4:	2210      	movs	r2, #16
 801f3e6:	4013      	ands	r3, r2
 801f3e8:	2b10      	cmp	r3, #16
 801f3ea:	d103      	bne.n	801f3f4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	2210      	movs	r2, #16
 801f3f2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	22ac      	movs	r2, #172	@ 0xac
 801f3f8:	589b      	ldr	r3, [r3, r2]
 801f3fa:	687a      	ldr	r2, [r7, #4]
 801f3fc:	2158      	movs	r1, #88	@ 0x58
 801f3fe:	5a51      	ldrh	r1, [r2, r1]
 801f400:	687a      	ldr	r2, [r7, #4]
 801f402:	0010      	movs	r0, r2
 801f404:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f406:	e00e      	b.n	801f426 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	2294      	movs	r2, #148	@ 0x94
 801f40c:	589b      	ldr	r3, [r3, r2]
 801f40e:	687a      	ldr	r2, [r7, #4]
 801f410:	0010      	movs	r0, r2
 801f412:	4798      	blx	r3
}
 801f414:	e007      	b.n	801f426 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	699a      	ldr	r2, [r3, #24]
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	2108      	movs	r1, #8
 801f422:	430a      	orrs	r2, r1
 801f424:	619a      	str	r2, [r3, #24]
}
 801f426:	46c0      	nop			@ (mov r8, r8)
 801f428:	46bd      	mov	sp, r7
 801f42a:	b014      	add	sp, #80	@ 0x50
 801f42c:	bd80      	pop	{r7, pc}
 801f42e:	46c0      	nop			@ (mov r8, r8)
 801f430:	fffffedf 	.word	0xfffffedf
 801f434:	40004800 	.word	0x40004800
 801f438:	fbffffff 	.word	0xfbffffff

0801f43c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b082      	sub	sp, #8
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f444:	46c0      	nop			@ (mov r8, r8)
 801f446:	46bd      	mov	sp, r7
 801f448:	b002      	add	sp, #8
 801f44a:	bd80      	pop	{r7, pc}

0801f44c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f44c:	b580      	push	{r7, lr}
 801f44e:	b084      	sub	sp, #16
 801f450:	af00      	add	r7, sp, #0
 801f452:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	2244      	movs	r2, #68	@ 0x44
 801f458:	2100      	movs	r1, #0
 801f45a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f45c:	4b05      	ldr	r3, [pc, #20]	@ (801f474 <USB_EnableGlobalInt+0x28>)
 801f45e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	b299      	uxth	r1, r3
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	2240      	movs	r2, #64	@ 0x40
 801f468:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f46a:	2300      	movs	r3, #0
}
 801f46c:	0018      	movs	r0, r3
 801f46e:	46bd      	mov	sp, r7
 801f470:	b004      	add	sp, #16
 801f472:	bd80      	pop	{r7, pc}
 801f474:	0000bf80 	.word	0x0000bf80

0801f478 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f478:	b580      	push	{r7, lr}
 801f47a:	b084      	sub	sp, #16
 801f47c:	af00      	add	r7, sp, #0
 801f47e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f480:	4b09      	ldr	r3, [pc, #36]	@ (801f4a8 <USB_DisableGlobalInt+0x30>)
 801f482:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	2240      	movs	r2, #64	@ 0x40
 801f488:	5a9b      	ldrh	r3, [r3, r2]
 801f48a:	b29b      	uxth	r3, r3
 801f48c:	68fa      	ldr	r2, [r7, #12]
 801f48e:	b292      	uxth	r2, r2
 801f490:	43d2      	mvns	r2, r2
 801f492:	b292      	uxth	r2, r2
 801f494:	4013      	ands	r3, r2
 801f496:	b299      	uxth	r1, r3
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	2240      	movs	r2, #64	@ 0x40
 801f49c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f49e:	2300      	movs	r3, #0
}
 801f4a0:	0018      	movs	r0, r3
 801f4a2:	46bd      	mov	sp, r7
 801f4a4:	b004      	add	sp, #16
 801f4a6:	bd80      	pop	{r7, pc}
 801f4a8:	0000bf80 	.word	0x0000bf80

0801f4ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f4ac:	b084      	sub	sp, #16
 801f4ae:	b590      	push	{r4, r7, lr}
 801f4b0:	b083      	sub	sp, #12
 801f4b2:	af00      	add	r7, sp, #0
 801f4b4:	6078      	str	r0, [r7, #4]
 801f4b6:	2004      	movs	r0, #4
 801f4b8:	2410      	movs	r4, #16
 801f4ba:	1900      	adds	r0, r0, r4
 801f4bc:	2408      	movs	r4, #8
 801f4be:	46a4      	mov	ip, r4
 801f4c0:	44bc      	add	ip, r7
 801f4c2:	4460      	add	r0, ip
 801f4c4:	6001      	str	r1, [r0, #0]
 801f4c6:	6042      	str	r2, [r0, #4]
 801f4c8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	2240      	movs	r2, #64	@ 0x40
 801f4ce:	2101      	movs	r1, #1
 801f4d0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	2240      	movs	r2, #64	@ 0x40
 801f4d6:	2100      	movs	r1, #0
 801f4d8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	2244      	movs	r2, #68	@ 0x44
 801f4de:	2100      	movs	r1, #0
 801f4e0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	2250      	movs	r2, #80	@ 0x50
 801f4e6:	2100      	movs	r1, #0
 801f4e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f4ea:	2300      	movs	r3, #0
}
 801f4ec:	0018      	movs	r0, r3
 801f4ee:	46bd      	mov	sp, r7
 801f4f0:	b003      	add	sp, #12
 801f4f2:	bc90      	pop	{r4, r7}
 801f4f4:	bc08      	pop	{r3}
 801f4f6:	b004      	add	sp, #16
 801f4f8:	4718      	bx	r3
	...

0801f4fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b09c      	sub	sp, #112	@ 0x70
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
 801f504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f506:	236f      	movs	r3, #111	@ 0x6f
 801f508:	18fb      	adds	r3, r7, r3
 801f50a:	2200      	movs	r2, #0
 801f50c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f50e:	687a      	ldr	r2, [r7, #4]
 801f510:	683b      	ldr	r3, [r7, #0]
 801f512:	781b      	ldrb	r3, [r3, #0]
 801f514:	009b      	lsls	r3, r3, #2
 801f516:	18d3      	adds	r3, r2, r3
 801f518:	881b      	ldrh	r3, [r3, #0]
 801f51a:	b29a      	uxth	r2, r3
 801f51c:	236c      	movs	r3, #108	@ 0x6c
 801f51e:	18fb      	adds	r3, r7, r3
 801f520:	49a3      	ldr	r1, [pc, #652]	@ (801f7b0 <USB_ActivateEndpoint+0x2b4>)
 801f522:	400a      	ands	r2, r1
 801f524:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f526:	683b      	ldr	r3, [r7, #0]
 801f528:	78db      	ldrb	r3, [r3, #3]
 801f52a:	2b03      	cmp	r3, #3
 801f52c:	d017      	beq.n	801f55e <USB_ActivateEndpoint+0x62>
 801f52e:	dc28      	bgt.n	801f582 <USB_ActivateEndpoint+0x86>
 801f530:	2b02      	cmp	r3, #2
 801f532:	d00e      	beq.n	801f552 <USB_ActivateEndpoint+0x56>
 801f534:	dc25      	bgt.n	801f582 <USB_ActivateEndpoint+0x86>
 801f536:	2b00      	cmp	r3, #0
 801f538:	d002      	beq.n	801f540 <USB_ActivateEndpoint+0x44>
 801f53a:	2b01      	cmp	r3, #1
 801f53c:	d018      	beq.n	801f570 <USB_ActivateEndpoint+0x74>
 801f53e:	e020      	b.n	801f582 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f540:	226c      	movs	r2, #108	@ 0x6c
 801f542:	18bb      	adds	r3, r7, r2
 801f544:	18ba      	adds	r2, r7, r2
 801f546:	8812      	ldrh	r2, [r2, #0]
 801f548:	2180      	movs	r1, #128	@ 0x80
 801f54a:	0089      	lsls	r1, r1, #2
 801f54c:	430a      	orrs	r2, r1
 801f54e:	801a      	strh	r2, [r3, #0]
      break;
 801f550:	e01c      	b.n	801f58c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f552:	226c      	movs	r2, #108	@ 0x6c
 801f554:	18bb      	adds	r3, r7, r2
 801f556:	18ba      	adds	r2, r7, r2
 801f558:	8812      	ldrh	r2, [r2, #0]
 801f55a:	801a      	strh	r2, [r3, #0]
      break;
 801f55c:	e016      	b.n	801f58c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f55e:	226c      	movs	r2, #108	@ 0x6c
 801f560:	18bb      	adds	r3, r7, r2
 801f562:	18ba      	adds	r2, r7, r2
 801f564:	8812      	ldrh	r2, [r2, #0]
 801f566:	21c0      	movs	r1, #192	@ 0xc0
 801f568:	00c9      	lsls	r1, r1, #3
 801f56a:	430a      	orrs	r2, r1
 801f56c:	801a      	strh	r2, [r3, #0]
      break;
 801f56e:	e00d      	b.n	801f58c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f570:	226c      	movs	r2, #108	@ 0x6c
 801f572:	18bb      	adds	r3, r7, r2
 801f574:	18ba      	adds	r2, r7, r2
 801f576:	8812      	ldrh	r2, [r2, #0]
 801f578:	2180      	movs	r1, #128	@ 0x80
 801f57a:	00c9      	lsls	r1, r1, #3
 801f57c:	430a      	orrs	r2, r1
 801f57e:	801a      	strh	r2, [r3, #0]
      break;
 801f580:	e004      	b.n	801f58c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f582:	236f      	movs	r3, #111	@ 0x6f
 801f584:	18fb      	adds	r3, r7, r3
 801f586:	2201      	movs	r2, #1
 801f588:	701a      	strb	r2, [r3, #0]
      break;
 801f58a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f58c:	687a      	ldr	r2, [r7, #4]
 801f58e:	683b      	ldr	r3, [r7, #0]
 801f590:	781b      	ldrb	r3, [r3, #0]
 801f592:	009b      	lsls	r3, r3, #2
 801f594:	18d3      	adds	r3, r2, r3
 801f596:	226c      	movs	r2, #108	@ 0x6c
 801f598:	18ba      	adds	r2, r7, r2
 801f59a:	8812      	ldrh	r2, [r2, #0]
 801f59c:	4985      	ldr	r1, [pc, #532]	@ (801f7b4 <USB_ActivateEndpoint+0x2b8>)
 801f59e:	430a      	orrs	r2, r1
 801f5a0:	b292      	uxth	r2, r2
 801f5a2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f5a4:	687a      	ldr	r2, [r7, #4]
 801f5a6:	683b      	ldr	r3, [r7, #0]
 801f5a8:	781b      	ldrb	r3, [r3, #0]
 801f5aa:	009b      	lsls	r3, r3, #2
 801f5ac:	18d3      	adds	r3, r2, r3
 801f5ae:	881b      	ldrh	r3, [r3, #0]
 801f5b0:	b29b      	uxth	r3, r3
 801f5b2:	b21b      	sxth	r3, r3
 801f5b4:	4a80      	ldr	r2, [pc, #512]	@ (801f7b8 <USB_ActivateEndpoint+0x2bc>)
 801f5b6:	4013      	ands	r3, r2
 801f5b8:	b21a      	sxth	r2, r3
 801f5ba:	683b      	ldr	r3, [r7, #0]
 801f5bc:	781b      	ldrb	r3, [r3, #0]
 801f5be:	b21b      	sxth	r3, r3
 801f5c0:	4313      	orrs	r3, r2
 801f5c2:	b21a      	sxth	r2, r3
 801f5c4:	2166      	movs	r1, #102	@ 0x66
 801f5c6:	187b      	adds	r3, r7, r1
 801f5c8:	801a      	strh	r2, [r3, #0]
 801f5ca:	687a      	ldr	r2, [r7, #4]
 801f5cc:	683b      	ldr	r3, [r7, #0]
 801f5ce:	781b      	ldrb	r3, [r3, #0]
 801f5d0:	009b      	lsls	r3, r3, #2
 801f5d2:	18d3      	adds	r3, r2, r3
 801f5d4:	187a      	adds	r2, r7, r1
 801f5d6:	8812      	ldrh	r2, [r2, #0]
 801f5d8:	4976      	ldr	r1, [pc, #472]	@ (801f7b4 <USB_ActivateEndpoint+0x2b8>)
 801f5da:	430a      	orrs	r2, r1
 801f5dc:	b292      	uxth	r2, r2
 801f5de:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f5e0:	683b      	ldr	r3, [r7, #0]
 801f5e2:	7b1b      	ldrb	r3, [r3, #12]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d000      	beq.n	801f5ea <USB_ActivateEndpoint+0xee>
 801f5e8:	e178      	b.n	801f8dc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	785b      	ldrb	r3, [r3, #1]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d100      	bne.n	801f5f4 <USB_ActivateEndpoint+0xf8>
 801f5f2:	e07a      	b.n	801f6ea <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	61bb      	str	r3, [r7, #24]
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	2250      	movs	r2, #80	@ 0x50
 801f5fc:	5a9b      	ldrh	r3, [r3, r2]
 801f5fe:	b29b      	uxth	r3, r3
 801f600:	001a      	movs	r2, r3
 801f602:	69bb      	ldr	r3, [r7, #24]
 801f604:	189b      	adds	r3, r3, r2
 801f606:	61bb      	str	r3, [r7, #24]
 801f608:	683b      	ldr	r3, [r7, #0]
 801f60a:	781b      	ldrb	r3, [r3, #0]
 801f60c:	00da      	lsls	r2, r3, #3
 801f60e:	69bb      	ldr	r3, [r7, #24]
 801f610:	18d3      	adds	r3, r2, r3
 801f612:	2280      	movs	r2, #128	@ 0x80
 801f614:	00d2      	lsls	r2, r2, #3
 801f616:	4694      	mov	ip, r2
 801f618:	4463      	add	r3, ip
 801f61a:	617b      	str	r3, [r7, #20]
 801f61c:	683b      	ldr	r3, [r7, #0]
 801f61e:	88db      	ldrh	r3, [r3, #6]
 801f620:	085b      	lsrs	r3, r3, #1
 801f622:	b29b      	uxth	r3, r3
 801f624:	18db      	adds	r3, r3, r3
 801f626:	b29a      	uxth	r2, r3
 801f628:	697b      	ldr	r3, [r7, #20]
 801f62a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f62c:	687a      	ldr	r2, [r7, #4]
 801f62e:	683b      	ldr	r3, [r7, #0]
 801f630:	781b      	ldrb	r3, [r3, #0]
 801f632:	009b      	lsls	r3, r3, #2
 801f634:	18d2      	adds	r2, r2, r3
 801f636:	2112      	movs	r1, #18
 801f638:	187b      	adds	r3, r7, r1
 801f63a:	8812      	ldrh	r2, [r2, #0]
 801f63c:	801a      	strh	r2, [r3, #0]
 801f63e:	187b      	adds	r3, r7, r1
 801f640:	881b      	ldrh	r3, [r3, #0]
 801f642:	2240      	movs	r2, #64	@ 0x40
 801f644:	4013      	ands	r3, r2
 801f646:	d016      	beq.n	801f676 <USB_ActivateEndpoint+0x17a>
 801f648:	687a      	ldr	r2, [r7, #4]
 801f64a:	683b      	ldr	r3, [r7, #0]
 801f64c:	781b      	ldrb	r3, [r3, #0]
 801f64e:	009b      	lsls	r3, r3, #2
 801f650:	18d3      	adds	r3, r2, r3
 801f652:	881b      	ldrh	r3, [r3, #0]
 801f654:	b29a      	uxth	r2, r3
 801f656:	2010      	movs	r0, #16
 801f658:	183b      	adds	r3, r7, r0
 801f65a:	4957      	ldr	r1, [pc, #348]	@ (801f7b8 <USB_ActivateEndpoint+0x2bc>)
 801f65c:	400a      	ands	r2, r1
 801f65e:	801a      	strh	r2, [r3, #0]
 801f660:	687a      	ldr	r2, [r7, #4]
 801f662:	683b      	ldr	r3, [r7, #0]
 801f664:	781b      	ldrb	r3, [r3, #0]
 801f666:	009b      	lsls	r3, r3, #2
 801f668:	18d3      	adds	r3, r2, r3
 801f66a:	183a      	adds	r2, r7, r0
 801f66c:	8812      	ldrh	r2, [r2, #0]
 801f66e:	4953      	ldr	r1, [pc, #332]	@ (801f7bc <USB_ActivateEndpoint+0x2c0>)
 801f670:	430a      	orrs	r2, r1
 801f672:	b292      	uxth	r2, r2
 801f674:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f676:	683b      	ldr	r3, [r7, #0]
 801f678:	78db      	ldrb	r3, [r3, #3]
 801f67a:	2b01      	cmp	r3, #1
 801f67c:	d01d      	beq.n	801f6ba <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f67e:	687a      	ldr	r2, [r7, #4]
 801f680:	683b      	ldr	r3, [r7, #0]
 801f682:	781b      	ldrb	r3, [r3, #0]
 801f684:	009b      	lsls	r3, r3, #2
 801f686:	18d3      	adds	r3, r2, r3
 801f688:	881b      	ldrh	r3, [r3, #0]
 801f68a:	b29a      	uxth	r2, r3
 801f68c:	200c      	movs	r0, #12
 801f68e:	183b      	adds	r3, r7, r0
 801f690:	494b      	ldr	r1, [pc, #300]	@ (801f7c0 <USB_ActivateEndpoint+0x2c4>)
 801f692:	400a      	ands	r2, r1
 801f694:	801a      	strh	r2, [r3, #0]
 801f696:	183b      	adds	r3, r7, r0
 801f698:	183a      	adds	r2, r7, r0
 801f69a:	8812      	ldrh	r2, [r2, #0]
 801f69c:	2120      	movs	r1, #32
 801f69e:	404a      	eors	r2, r1
 801f6a0:	801a      	strh	r2, [r3, #0]
 801f6a2:	687a      	ldr	r2, [r7, #4]
 801f6a4:	683b      	ldr	r3, [r7, #0]
 801f6a6:	781b      	ldrb	r3, [r3, #0]
 801f6a8:	009b      	lsls	r3, r3, #2
 801f6aa:	18d3      	adds	r3, r2, r3
 801f6ac:	183a      	adds	r2, r7, r0
 801f6ae:	8812      	ldrh	r2, [r2, #0]
 801f6b0:	4940      	ldr	r1, [pc, #256]	@ (801f7b4 <USB_ActivateEndpoint+0x2b8>)
 801f6b2:	430a      	orrs	r2, r1
 801f6b4:	b292      	uxth	r2, r2
 801f6b6:	801a      	strh	r2, [r3, #0]
 801f6b8:	e2b4      	b.n	801fc24 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f6ba:	687a      	ldr	r2, [r7, #4]
 801f6bc:	683b      	ldr	r3, [r7, #0]
 801f6be:	781b      	ldrb	r3, [r3, #0]
 801f6c0:	009b      	lsls	r3, r3, #2
 801f6c2:	18d3      	adds	r3, r2, r3
 801f6c4:	881b      	ldrh	r3, [r3, #0]
 801f6c6:	b29a      	uxth	r2, r3
 801f6c8:	200e      	movs	r0, #14
 801f6ca:	183b      	adds	r3, r7, r0
 801f6cc:	493c      	ldr	r1, [pc, #240]	@ (801f7c0 <USB_ActivateEndpoint+0x2c4>)
 801f6ce:	400a      	ands	r2, r1
 801f6d0:	801a      	strh	r2, [r3, #0]
 801f6d2:	687a      	ldr	r2, [r7, #4]
 801f6d4:	683b      	ldr	r3, [r7, #0]
 801f6d6:	781b      	ldrb	r3, [r3, #0]
 801f6d8:	009b      	lsls	r3, r3, #2
 801f6da:	18d3      	adds	r3, r2, r3
 801f6dc:	183a      	adds	r2, r7, r0
 801f6de:	8812      	ldrh	r2, [r2, #0]
 801f6e0:	4934      	ldr	r1, [pc, #208]	@ (801f7b4 <USB_ActivateEndpoint+0x2b8>)
 801f6e2:	430a      	orrs	r2, r1
 801f6e4:	b292      	uxth	r2, r2
 801f6e6:	801a      	strh	r2, [r3, #0]
 801f6e8:	e29c      	b.n	801fc24 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	633b      	str	r3, [r7, #48]	@ 0x30
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2250      	movs	r2, #80	@ 0x50
 801f6f2:	5a9b      	ldrh	r3, [r3, r2]
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	001a      	movs	r2, r3
 801f6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f6fa:	189b      	adds	r3, r3, r2
 801f6fc:	633b      	str	r3, [r7, #48]	@ 0x30
 801f6fe:	683b      	ldr	r3, [r7, #0]
 801f700:	781b      	ldrb	r3, [r3, #0]
 801f702:	00da      	lsls	r2, r3, #3
 801f704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f706:	18d3      	adds	r3, r2, r3
 801f708:	4a2e      	ldr	r2, [pc, #184]	@ (801f7c4 <USB_ActivateEndpoint+0x2c8>)
 801f70a:	4694      	mov	ip, r2
 801f70c:	4463      	add	r3, ip
 801f70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f710:	683b      	ldr	r3, [r7, #0]
 801f712:	88db      	ldrh	r3, [r3, #6]
 801f714:	085b      	lsrs	r3, r3, #1
 801f716:	b29b      	uxth	r3, r3
 801f718:	18db      	adds	r3, r3, r3
 801f71a:	b29a      	uxth	r2, r3
 801f71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f71e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	2250      	movs	r2, #80	@ 0x50
 801f728:	5a9b      	ldrh	r3, [r3, r2]
 801f72a:	b29b      	uxth	r3, r3
 801f72c:	001a      	movs	r2, r3
 801f72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f730:	189b      	adds	r3, r3, r2
 801f732:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f734:	683b      	ldr	r3, [r7, #0]
 801f736:	781b      	ldrb	r3, [r3, #0]
 801f738:	00da      	lsls	r2, r3, #3
 801f73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f73c:	18d3      	adds	r3, r2, r3
 801f73e:	4a22      	ldr	r2, [pc, #136]	@ (801f7c8 <USB_ActivateEndpoint+0x2cc>)
 801f740:	4694      	mov	ip, r2
 801f742:	4463      	add	r3, ip
 801f744:	627b      	str	r3, [r7, #36]	@ 0x24
 801f746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f748:	881b      	ldrh	r3, [r3, #0]
 801f74a:	b29b      	uxth	r3, r3
 801f74c:	059b      	lsls	r3, r3, #22
 801f74e:	0d9b      	lsrs	r3, r3, #22
 801f750:	b29a      	uxth	r2, r3
 801f752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f754:	801a      	strh	r2, [r3, #0]
 801f756:	683b      	ldr	r3, [r7, #0]
 801f758:	691b      	ldr	r3, [r3, #16]
 801f75a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f75c:	d91a      	bls.n	801f794 <USB_ActivateEndpoint+0x298>
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	691b      	ldr	r3, [r3, #16]
 801f762:	095b      	lsrs	r3, r3, #5
 801f764:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f766:	683b      	ldr	r3, [r7, #0]
 801f768:	691b      	ldr	r3, [r3, #16]
 801f76a:	221f      	movs	r2, #31
 801f76c:	4013      	ands	r3, r2
 801f76e:	d102      	bne.n	801f776 <USB_ActivateEndpoint+0x27a>
 801f770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f772:	3b01      	subs	r3, #1
 801f774:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f778:	881b      	ldrh	r3, [r3, #0]
 801f77a:	b29a      	uxth	r2, r3
 801f77c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f77e:	b29b      	uxth	r3, r3
 801f780:	029b      	lsls	r3, r3, #10
 801f782:	b29b      	uxth	r3, r3
 801f784:	4313      	orrs	r3, r2
 801f786:	b29b      	uxth	r3, r3
 801f788:	4a10      	ldr	r2, [pc, #64]	@ (801f7cc <USB_ActivateEndpoint+0x2d0>)
 801f78a:	4313      	orrs	r3, r2
 801f78c:	b29a      	uxth	r2, r3
 801f78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f790:	801a      	strh	r2, [r3, #0]
 801f792:	e034      	b.n	801f7fe <USB_ActivateEndpoint+0x302>
 801f794:	683b      	ldr	r3, [r7, #0]
 801f796:	691b      	ldr	r3, [r3, #16]
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d119      	bne.n	801f7d0 <USB_ActivateEndpoint+0x2d4>
 801f79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f79e:	881b      	ldrh	r3, [r3, #0]
 801f7a0:	b29b      	uxth	r3, r3
 801f7a2:	4a0a      	ldr	r2, [pc, #40]	@ (801f7cc <USB_ActivateEndpoint+0x2d0>)
 801f7a4:	4313      	orrs	r3, r2
 801f7a6:	b29a      	uxth	r2, r3
 801f7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7aa:	801a      	strh	r2, [r3, #0]
 801f7ac:	e027      	b.n	801f7fe <USB_ActivateEndpoint+0x302>
 801f7ae:	46c0      	nop			@ (mov r8, r8)
 801f7b0:	ffff898f 	.word	0xffff898f
 801f7b4:	ffff8080 	.word	0xffff8080
 801f7b8:	ffff8f8f 	.word	0xffff8f8f
 801f7bc:	ffff80c0 	.word	0xffff80c0
 801f7c0:	ffff8fbf 	.word	0xffff8fbf
 801f7c4:	00000404 	.word	0x00000404
 801f7c8:	00000406 	.word	0x00000406
 801f7cc:	ffff8000 	.word	0xffff8000
 801f7d0:	683b      	ldr	r3, [r7, #0]
 801f7d2:	691b      	ldr	r3, [r3, #16]
 801f7d4:	085b      	lsrs	r3, r3, #1
 801f7d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f7d8:	683b      	ldr	r3, [r7, #0]
 801f7da:	691b      	ldr	r3, [r3, #16]
 801f7dc:	2201      	movs	r2, #1
 801f7de:	4013      	ands	r3, r2
 801f7e0:	d002      	beq.n	801f7e8 <USB_ActivateEndpoint+0x2ec>
 801f7e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f7e4:	3301      	adds	r3, #1
 801f7e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7ea:	881b      	ldrh	r3, [r3, #0]
 801f7ec:	b29a      	uxth	r2, r3
 801f7ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f7f0:	b29b      	uxth	r3, r3
 801f7f2:	029b      	lsls	r3, r3, #10
 801f7f4:	b29b      	uxth	r3, r3
 801f7f6:	4313      	orrs	r3, r2
 801f7f8:	b29a      	uxth	r2, r3
 801f7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f7fe:	687a      	ldr	r2, [r7, #4]
 801f800:	683b      	ldr	r3, [r7, #0]
 801f802:	781b      	ldrb	r3, [r3, #0]
 801f804:	009b      	lsls	r3, r3, #2
 801f806:	18d2      	adds	r2, r2, r3
 801f808:	2122      	movs	r1, #34	@ 0x22
 801f80a:	187b      	adds	r3, r7, r1
 801f80c:	8812      	ldrh	r2, [r2, #0]
 801f80e:	801a      	strh	r2, [r3, #0]
 801f810:	187b      	adds	r3, r7, r1
 801f812:	881a      	ldrh	r2, [r3, #0]
 801f814:	2380      	movs	r3, #128	@ 0x80
 801f816:	01db      	lsls	r3, r3, #7
 801f818:	4013      	ands	r3, r2
 801f81a:	d016      	beq.n	801f84a <USB_ActivateEndpoint+0x34e>
 801f81c:	687a      	ldr	r2, [r7, #4]
 801f81e:	683b      	ldr	r3, [r7, #0]
 801f820:	781b      	ldrb	r3, [r3, #0]
 801f822:	009b      	lsls	r3, r3, #2
 801f824:	18d3      	adds	r3, r2, r3
 801f826:	881b      	ldrh	r3, [r3, #0]
 801f828:	b29a      	uxth	r2, r3
 801f82a:	2020      	movs	r0, #32
 801f82c:	183b      	adds	r3, r7, r0
 801f82e:	49dd      	ldr	r1, [pc, #884]	@ (801fba4 <USB_ActivateEndpoint+0x6a8>)
 801f830:	400a      	ands	r2, r1
 801f832:	801a      	strh	r2, [r3, #0]
 801f834:	687a      	ldr	r2, [r7, #4]
 801f836:	683b      	ldr	r3, [r7, #0]
 801f838:	781b      	ldrb	r3, [r3, #0]
 801f83a:	009b      	lsls	r3, r3, #2
 801f83c:	18d3      	adds	r3, r2, r3
 801f83e:	183a      	adds	r2, r7, r0
 801f840:	8812      	ldrh	r2, [r2, #0]
 801f842:	49d9      	ldr	r1, [pc, #868]	@ (801fba8 <USB_ActivateEndpoint+0x6ac>)
 801f844:	430a      	orrs	r2, r1
 801f846:	b292      	uxth	r2, r2
 801f848:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f84a:	683b      	ldr	r3, [r7, #0]
 801f84c:	781b      	ldrb	r3, [r3, #0]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d125      	bne.n	801f89e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f852:	687a      	ldr	r2, [r7, #4]
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	781b      	ldrb	r3, [r3, #0]
 801f858:	009b      	lsls	r3, r3, #2
 801f85a:	18d3      	adds	r3, r2, r3
 801f85c:	881b      	ldrh	r3, [r3, #0]
 801f85e:	b29a      	uxth	r2, r3
 801f860:	201c      	movs	r0, #28
 801f862:	183b      	adds	r3, r7, r0
 801f864:	49d1      	ldr	r1, [pc, #836]	@ (801fbac <USB_ActivateEndpoint+0x6b0>)
 801f866:	400a      	ands	r2, r1
 801f868:	801a      	strh	r2, [r3, #0]
 801f86a:	183b      	adds	r3, r7, r0
 801f86c:	183a      	adds	r2, r7, r0
 801f86e:	8812      	ldrh	r2, [r2, #0]
 801f870:	2180      	movs	r1, #128	@ 0x80
 801f872:	0149      	lsls	r1, r1, #5
 801f874:	404a      	eors	r2, r1
 801f876:	801a      	strh	r2, [r3, #0]
 801f878:	183b      	adds	r3, r7, r0
 801f87a:	183a      	adds	r2, r7, r0
 801f87c:	8812      	ldrh	r2, [r2, #0]
 801f87e:	2180      	movs	r1, #128	@ 0x80
 801f880:	0189      	lsls	r1, r1, #6
 801f882:	404a      	eors	r2, r1
 801f884:	801a      	strh	r2, [r3, #0]
 801f886:	687a      	ldr	r2, [r7, #4]
 801f888:	683b      	ldr	r3, [r7, #0]
 801f88a:	781b      	ldrb	r3, [r3, #0]
 801f88c:	009b      	lsls	r3, r3, #2
 801f88e:	18d3      	adds	r3, r2, r3
 801f890:	183a      	adds	r2, r7, r0
 801f892:	8812      	ldrh	r2, [r2, #0]
 801f894:	49c6      	ldr	r1, [pc, #792]	@ (801fbb0 <USB_ActivateEndpoint+0x6b4>)
 801f896:	430a      	orrs	r2, r1
 801f898:	b292      	uxth	r2, r2
 801f89a:	801a      	strh	r2, [r3, #0]
 801f89c:	e1c2      	b.n	801fc24 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f89e:	687a      	ldr	r2, [r7, #4]
 801f8a0:	683b      	ldr	r3, [r7, #0]
 801f8a2:	781b      	ldrb	r3, [r3, #0]
 801f8a4:	009b      	lsls	r3, r3, #2
 801f8a6:	18d3      	adds	r3, r2, r3
 801f8a8:	881b      	ldrh	r3, [r3, #0]
 801f8aa:	b29a      	uxth	r2, r3
 801f8ac:	201e      	movs	r0, #30
 801f8ae:	183b      	adds	r3, r7, r0
 801f8b0:	49be      	ldr	r1, [pc, #760]	@ (801fbac <USB_ActivateEndpoint+0x6b0>)
 801f8b2:	400a      	ands	r2, r1
 801f8b4:	801a      	strh	r2, [r3, #0]
 801f8b6:	183b      	adds	r3, r7, r0
 801f8b8:	183a      	adds	r2, r7, r0
 801f8ba:	8812      	ldrh	r2, [r2, #0]
 801f8bc:	2180      	movs	r1, #128	@ 0x80
 801f8be:	0189      	lsls	r1, r1, #6
 801f8c0:	404a      	eors	r2, r1
 801f8c2:	801a      	strh	r2, [r3, #0]
 801f8c4:	687a      	ldr	r2, [r7, #4]
 801f8c6:	683b      	ldr	r3, [r7, #0]
 801f8c8:	781b      	ldrb	r3, [r3, #0]
 801f8ca:	009b      	lsls	r3, r3, #2
 801f8cc:	18d3      	adds	r3, r2, r3
 801f8ce:	183a      	adds	r2, r7, r0
 801f8d0:	8812      	ldrh	r2, [r2, #0]
 801f8d2:	49b7      	ldr	r1, [pc, #732]	@ (801fbb0 <USB_ActivateEndpoint+0x6b4>)
 801f8d4:	430a      	orrs	r2, r1
 801f8d6:	b292      	uxth	r2, r2
 801f8d8:	801a      	strh	r2, [r3, #0]
 801f8da:	e1a3      	b.n	801fc24 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f8dc:	683b      	ldr	r3, [r7, #0]
 801f8de:	78db      	ldrb	r3, [r3, #3]
 801f8e0:	2b02      	cmp	r3, #2
 801f8e2:	d117      	bne.n	801f914 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f8e4:	687a      	ldr	r2, [r7, #4]
 801f8e6:	683b      	ldr	r3, [r7, #0]
 801f8e8:	781b      	ldrb	r3, [r3, #0]
 801f8ea:	009b      	lsls	r3, r3, #2
 801f8ec:	18d3      	adds	r3, r2, r3
 801f8ee:	881b      	ldrh	r3, [r3, #0]
 801f8f0:	b29a      	uxth	r2, r3
 801f8f2:	2062      	movs	r0, #98	@ 0x62
 801f8f4:	183b      	adds	r3, r7, r0
 801f8f6:	49ab      	ldr	r1, [pc, #684]	@ (801fba4 <USB_ActivateEndpoint+0x6a8>)
 801f8f8:	400a      	ands	r2, r1
 801f8fa:	801a      	strh	r2, [r3, #0]
 801f8fc:	687a      	ldr	r2, [r7, #4]
 801f8fe:	683b      	ldr	r3, [r7, #0]
 801f900:	781b      	ldrb	r3, [r3, #0]
 801f902:	009b      	lsls	r3, r3, #2
 801f904:	18d3      	adds	r3, r2, r3
 801f906:	183a      	adds	r2, r7, r0
 801f908:	8812      	ldrh	r2, [r2, #0]
 801f90a:	49aa      	ldr	r1, [pc, #680]	@ (801fbb4 <USB_ActivateEndpoint+0x6b8>)
 801f90c:	430a      	orrs	r2, r1
 801f90e:	b292      	uxth	r2, r2
 801f910:	801a      	strh	r2, [r3, #0]
 801f912:	e016      	b.n	801f942 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f914:	687a      	ldr	r2, [r7, #4]
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	781b      	ldrb	r3, [r3, #0]
 801f91a:	009b      	lsls	r3, r3, #2
 801f91c:	18d3      	adds	r3, r2, r3
 801f91e:	881b      	ldrh	r3, [r3, #0]
 801f920:	b29a      	uxth	r2, r3
 801f922:	2064      	movs	r0, #100	@ 0x64
 801f924:	183b      	adds	r3, r7, r0
 801f926:	49a4      	ldr	r1, [pc, #656]	@ (801fbb8 <USB_ActivateEndpoint+0x6bc>)
 801f928:	400a      	ands	r2, r1
 801f92a:	801a      	strh	r2, [r3, #0]
 801f92c:	687a      	ldr	r2, [r7, #4]
 801f92e:	683b      	ldr	r3, [r7, #0]
 801f930:	781b      	ldrb	r3, [r3, #0]
 801f932:	009b      	lsls	r3, r3, #2
 801f934:	18d3      	adds	r3, r2, r3
 801f936:	183a      	adds	r2, r7, r0
 801f938:	8812      	ldrh	r2, [r2, #0]
 801f93a:	499d      	ldr	r1, [pc, #628]	@ (801fbb0 <USB_ActivateEndpoint+0x6b4>)
 801f93c:	430a      	orrs	r2, r1
 801f93e:	b292      	uxth	r2, r2
 801f940:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	2250      	movs	r2, #80	@ 0x50
 801f94a:	5a9b      	ldrh	r3, [r3, r2]
 801f94c:	b29b      	uxth	r3, r3
 801f94e:	001a      	movs	r2, r3
 801f950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f952:	189b      	adds	r3, r3, r2
 801f954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f956:	683b      	ldr	r3, [r7, #0]
 801f958:	781b      	ldrb	r3, [r3, #0]
 801f95a:	00da      	lsls	r2, r3, #3
 801f95c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f95e:	18d3      	adds	r3, r2, r3
 801f960:	2280      	movs	r2, #128	@ 0x80
 801f962:	00d2      	lsls	r2, r2, #3
 801f964:	4694      	mov	ip, r2
 801f966:	4463      	add	r3, ip
 801f968:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f96a:	683b      	ldr	r3, [r7, #0]
 801f96c:	891b      	ldrh	r3, [r3, #8]
 801f96e:	085b      	lsrs	r3, r3, #1
 801f970:	b29b      	uxth	r3, r3
 801f972:	18db      	adds	r3, r3, r3
 801f974:	b29a      	uxth	r2, r3
 801f976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f978:	801a      	strh	r2, [r3, #0]
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	2250      	movs	r2, #80	@ 0x50
 801f982:	5a9b      	ldrh	r3, [r3, r2]
 801f984:	b29b      	uxth	r3, r3
 801f986:	001a      	movs	r2, r3
 801f988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f98a:	189b      	adds	r3, r3, r2
 801f98c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f98e:	683b      	ldr	r3, [r7, #0]
 801f990:	781b      	ldrb	r3, [r3, #0]
 801f992:	00da      	lsls	r2, r3, #3
 801f994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f996:	18d3      	adds	r3, r2, r3
 801f998:	4a88      	ldr	r2, [pc, #544]	@ (801fbbc <USB_ActivateEndpoint+0x6c0>)
 801f99a:	4694      	mov	ip, r2
 801f99c:	4463      	add	r3, ip
 801f99e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f9a0:	683b      	ldr	r3, [r7, #0]
 801f9a2:	895b      	ldrh	r3, [r3, #10]
 801f9a4:	085b      	lsrs	r3, r3, #1
 801f9a6:	b29b      	uxth	r3, r3
 801f9a8:	18db      	adds	r3, r3, r3
 801f9aa:	b29a      	uxth	r2, r3
 801f9ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f9ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f9b0:	683b      	ldr	r3, [r7, #0]
 801f9b2:	785b      	ldrb	r3, [r3, #1]
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d000      	beq.n	801f9ba <USB_ActivateEndpoint+0x4be>
 801f9b8:	e087      	b.n	801faca <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f9ba:	687a      	ldr	r2, [r7, #4]
 801f9bc:	683b      	ldr	r3, [r7, #0]
 801f9be:	781b      	ldrb	r3, [r3, #0]
 801f9c0:	009b      	lsls	r3, r3, #2
 801f9c2:	18d2      	adds	r2, r2, r3
 801f9c4:	2140      	movs	r1, #64	@ 0x40
 801f9c6:	187b      	adds	r3, r7, r1
 801f9c8:	8812      	ldrh	r2, [r2, #0]
 801f9ca:	801a      	strh	r2, [r3, #0]
 801f9cc:	187b      	adds	r3, r7, r1
 801f9ce:	881a      	ldrh	r2, [r3, #0]
 801f9d0:	2380      	movs	r3, #128	@ 0x80
 801f9d2:	01db      	lsls	r3, r3, #7
 801f9d4:	4013      	ands	r3, r2
 801f9d6:	d016      	beq.n	801fa06 <USB_ActivateEndpoint+0x50a>
 801f9d8:	687a      	ldr	r2, [r7, #4]
 801f9da:	683b      	ldr	r3, [r7, #0]
 801f9dc:	781b      	ldrb	r3, [r3, #0]
 801f9de:	009b      	lsls	r3, r3, #2
 801f9e0:	18d3      	adds	r3, r2, r3
 801f9e2:	881b      	ldrh	r3, [r3, #0]
 801f9e4:	b29a      	uxth	r2, r3
 801f9e6:	203e      	movs	r0, #62	@ 0x3e
 801f9e8:	183b      	adds	r3, r7, r0
 801f9ea:	496e      	ldr	r1, [pc, #440]	@ (801fba4 <USB_ActivateEndpoint+0x6a8>)
 801f9ec:	400a      	ands	r2, r1
 801f9ee:	801a      	strh	r2, [r3, #0]
 801f9f0:	687a      	ldr	r2, [r7, #4]
 801f9f2:	683b      	ldr	r3, [r7, #0]
 801f9f4:	781b      	ldrb	r3, [r3, #0]
 801f9f6:	009b      	lsls	r3, r3, #2
 801f9f8:	18d3      	adds	r3, r2, r3
 801f9fa:	183a      	adds	r2, r7, r0
 801f9fc:	8812      	ldrh	r2, [r2, #0]
 801f9fe:	496a      	ldr	r1, [pc, #424]	@ (801fba8 <USB_ActivateEndpoint+0x6ac>)
 801fa00:	430a      	orrs	r2, r1
 801fa02:	b292      	uxth	r2, r2
 801fa04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fa06:	687a      	ldr	r2, [r7, #4]
 801fa08:	683b      	ldr	r3, [r7, #0]
 801fa0a:	781b      	ldrb	r3, [r3, #0]
 801fa0c:	009b      	lsls	r3, r3, #2
 801fa0e:	18d2      	adds	r2, r2, r3
 801fa10:	213c      	movs	r1, #60	@ 0x3c
 801fa12:	187b      	adds	r3, r7, r1
 801fa14:	8812      	ldrh	r2, [r2, #0]
 801fa16:	801a      	strh	r2, [r3, #0]
 801fa18:	187b      	adds	r3, r7, r1
 801fa1a:	881b      	ldrh	r3, [r3, #0]
 801fa1c:	2240      	movs	r2, #64	@ 0x40
 801fa1e:	4013      	ands	r3, r2
 801fa20:	d016      	beq.n	801fa50 <USB_ActivateEndpoint+0x554>
 801fa22:	687a      	ldr	r2, [r7, #4]
 801fa24:	683b      	ldr	r3, [r7, #0]
 801fa26:	781b      	ldrb	r3, [r3, #0]
 801fa28:	009b      	lsls	r3, r3, #2
 801fa2a:	18d3      	adds	r3, r2, r3
 801fa2c:	881b      	ldrh	r3, [r3, #0]
 801fa2e:	b29a      	uxth	r2, r3
 801fa30:	203a      	movs	r0, #58	@ 0x3a
 801fa32:	183b      	adds	r3, r7, r0
 801fa34:	495b      	ldr	r1, [pc, #364]	@ (801fba4 <USB_ActivateEndpoint+0x6a8>)
 801fa36:	400a      	ands	r2, r1
 801fa38:	801a      	strh	r2, [r3, #0]
 801fa3a:	687a      	ldr	r2, [r7, #4]
 801fa3c:	683b      	ldr	r3, [r7, #0]
 801fa3e:	781b      	ldrb	r3, [r3, #0]
 801fa40:	009b      	lsls	r3, r3, #2
 801fa42:	18d3      	adds	r3, r2, r3
 801fa44:	183a      	adds	r2, r7, r0
 801fa46:	8812      	ldrh	r2, [r2, #0]
 801fa48:	495d      	ldr	r1, [pc, #372]	@ (801fbc0 <USB_ActivateEndpoint+0x6c4>)
 801fa4a:	430a      	orrs	r2, r1
 801fa4c:	b292      	uxth	r2, r2
 801fa4e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fa50:	687a      	ldr	r2, [r7, #4]
 801fa52:	683b      	ldr	r3, [r7, #0]
 801fa54:	781b      	ldrb	r3, [r3, #0]
 801fa56:	009b      	lsls	r3, r3, #2
 801fa58:	18d3      	adds	r3, r2, r3
 801fa5a:	881b      	ldrh	r3, [r3, #0]
 801fa5c:	b29a      	uxth	r2, r3
 801fa5e:	2038      	movs	r0, #56	@ 0x38
 801fa60:	183b      	adds	r3, r7, r0
 801fa62:	4952      	ldr	r1, [pc, #328]	@ (801fbac <USB_ActivateEndpoint+0x6b0>)
 801fa64:	400a      	ands	r2, r1
 801fa66:	801a      	strh	r2, [r3, #0]
 801fa68:	183b      	adds	r3, r7, r0
 801fa6a:	183a      	adds	r2, r7, r0
 801fa6c:	8812      	ldrh	r2, [r2, #0]
 801fa6e:	2180      	movs	r1, #128	@ 0x80
 801fa70:	0149      	lsls	r1, r1, #5
 801fa72:	404a      	eors	r2, r1
 801fa74:	801a      	strh	r2, [r3, #0]
 801fa76:	183b      	adds	r3, r7, r0
 801fa78:	183a      	adds	r2, r7, r0
 801fa7a:	8812      	ldrh	r2, [r2, #0]
 801fa7c:	2180      	movs	r1, #128	@ 0x80
 801fa7e:	0189      	lsls	r1, r1, #6
 801fa80:	404a      	eors	r2, r1
 801fa82:	801a      	strh	r2, [r3, #0]
 801fa84:	687a      	ldr	r2, [r7, #4]
 801fa86:	683b      	ldr	r3, [r7, #0]
 801fa88:	781b      	ldrb	r3, [r3, #0]
 801fa8a:	009b      	lsls	r3, r3, #2
 801fa8c:	18d3      	adds	r3, r2, r3
 801fa8e:	183a      	adds	r2, r7, r0
 801fa90:	8812      	ldrh	r2, [r2, #0]
 801fa92:	4947      	ldr	r1, [pc, #284]	@ (801fbb0 <USB_ActivateEndpoint+0x6b4>)
 801fa94:	430a      	orrs	r2, r1
 801fa96:	b292      	uxth	r2, r2
 801fa98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fa9a:	687a      	ldr	r2, [r7, #4]
 801fa9c:	683b      	ldr	r3, [r7, #0]
 801fa9e:	781b      	ldrb	r3, [r3, #0]
 801faa0:	009b      	lsls	r3, r3, #2
 801faa2:	18d3      	adds	r3, r2, r3
 801faa4:	881b      	ldrh	r3, [r3, #0]
 801faa6:	b29a      	uxth	r2, r3
 801faa8:	2036      	movs	r0, #54	@ 0x36
 801faaa:	183b      	adds	r3, r7, r0
 801faac:	4945      	ldr	r1, [pc, #276]	@ (801fbc4 <USB_ActivateEndpoint+0x6c8>)
 801faae:	400a      	ands	r2, r1
 801fab0:	801a      	strh	r2, [r3, #0]
 801fab2:	687a      	ldr	r2, [r7, #4]
 801fab4:	683b      	ldr	r3, [r7, #0]
 801fab6:	781b      	ldrb	r3, [r3, #0]
 801fab8:	009b      	lsls	r3, r3, #2
 801faba:	18d3      	adds	r3, r2, r3
 801fabc:	183a      	adds	r2, r7, r0
 801fabe:	8812      	ldrh	r2, [r2, #0]
 801fac0:	493b      	ldr	r1, [pc, #236]	@ (801fbb0 <USB_ActivateEndpoint+0x6b4>)
 801fac2:	430a      	orrs	r2, r1
 801fac4:	b292      	uxth	r2, r2
 801fac6:	801a      	strh	r2, [r3, #0]
 801fac8:	e0ac      	b.n	801fc24 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801faca:	687a      	ldr	r2, [r7, #4]
 801facc:	683b      	ldr	r3, [r7, #0]
 801face:	781b      	ldrb	r3, [r3, #0]
 801fad0:	009b      	lsls	r3, r3, #2
 801fad2:	18d2      	adds	r2, r2, r3
 801fad4:	214e      	movs	r1, #78	@ 0x4e
 801fad6:	187b      	adds	r3, r7, r1
 801fad8:	8812      	ldrh	r2, [r2, #0]
 801fada:	801a      	strh	r2, [r3, #0]
 801fadc:	187b      	adds	r3, r7, r1
 801fade:	881a      	ldrh	r2, [r3, #0]
 801fae0:	2380      	movs	r3, #128	@ 0x80
 801fae2:	01db      	lsls	r3, r3, #7
 801fae4:	4013      	ands	r3, r2
 801fae6:	d016      	beq.n	801fb16 <USB_ActivateEndpoint+0x61a>
 801fae8:	687a      	ldr	r2, [r7, #4]
 801faea:	683b      	ldr	r3, [r7, #0]
 801faec:	781b      	ldrb	r3, [r3, #0]
 801faee:	009b      	lsls	r3, r3, #2
 801faf0:	18d3      	adds	r3, r2, r3
 801faf2:	881b      	ldrh	r3, [r3, #0]
 801faf4:	b29a      	uxth	r2, r3
 801faf6:	204c      	movs	r0, #76	@ 0x4c
 801faf8:	183b      	adds	r3, r7, r0
 801fafa:	492a      	ldr	r1, [pc, #168]	@ (801fba4 <USB_ActivateEndpoint+0x6a8>)
 801fafc:	400a      	ands	r2, r1
 801fafe:	801a      	strh	r2, [r3, #0]
 801fb00:	687a      	ldr	r2, [r7, #4]
 801fb02:	683b      	ldr	r3, [r7, #0]
 801fb04:	781b      	ldrb	r3, [r3, #0]
 801fb06:	009b      	lsls	r3, r3, #2
 801fb08:	18d3      	adds	r3, r2, r3
 801fb0a:	183a      	adds	r2, r7, r0
 801fb0c:	8812      	ldrh	r2, [r2, #0]
 801fb0e:	4926      	ldr	r1, [pc, #152]	@ (801fba8 <USB_ActivateEndpoint+0x6ac>)
 801fb10:	430a      	orrs	r2, r1
 801fb12:	b292      	uxth	r2, r2
 801fb14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fb16:	687a      	ldr	r2, [r7, #4]
 801fb18:	683b      	ldr	r3, [r7, #0]
 801fb1a:	781b      	ldrb	r3, [r3, #0]
 801fb1c:	009b      	lsls	r3, r3, #2
 801fb1e:	18d2      	adds	r2, r2, r3
 801fb20:	214a      	movs	r1, #74	@ 0x4a
 801fb22:	187b      	adds	r3, r7, r1
 801fb24:	8812      	ldrh	r2, [r2, #0]
 801fb26:	801a      	strh	r2, [r3, #0]
 801fb28:	187b      	adds	r3, r7, r1
 801fb2a:	881b      	ldrh	r3, [r3, #0]
 801fb2c:	2240      	movs	r2, #64	@ 0x40
 801fb2e:	4013      	ands	r3, r2
 801fb30:	d016      	beq.n	801fb60 <USB_ActivateEndpoint+0x664>
 801fb32:	687a      	ldr	r2, [r7, #4]
 801fb34:	683b      	ldr	r3, [r7, #0]
 801fb36:	781b      	ldrb	r3, [r3, #0]
 801fb38:	009b      	lsls	r3, r3, #2
 801fb3a:	18d3      	adds	r3, r2, r3
 801fb3c:	881b      	ldrh	r3, [r3, #0]
 801fb3e:	b29a      	uxth	r2, r3
 801fb40:	2048      	movs	r0, #72	@ 0x48
 801fb42:	183b      	adds	r3, r7, r0
 801fb44:	4917      	ldr	r1, [pc, #92]	@ (801fba4 <USB_ActivateEndpoint+0x6a8>)
 801fb46:	400a      	ands	r2, r1
 801fb48:	801a      	strh	r2, [r3, #0]
 801fb4a:	687a      	ldr	r2, [r7, #4]
 801fb4c:	683b      	ldr	r3, [r7, #0]
 801fb4e:	781b      	ldrb	r3, [r3, #0]
 801fb50:	009b      	lsls	r3, r3, #2
 801fb52:	18d3      	adds	r3, r2, r3
 801fb54:	183a      	adds	r2, r7, r0
 801fb56:	8812      	ldrh	r2, [r2, #0]
 801fb58:	4919      	ldr	r1, [pc, #100]	@ (801fbc0 <USB_ActivateEndpoint+0x6c4>)
 801fb5a:	430a      	orrs	r2, r1
 801fb5c:	b292      	uxth	r2, r2
 801fb5e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fb60:	683b      	ldr	r3, [r7, #0]
 801fb62:	78db      	ldrb	r3, [r3, #3]
 801fb64:	2b01      	cmp	r3, #1
 801fb66:	d02f      	beq.n	801fbc8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fb68:	687a      	ldr	r2, [r7, #4]
 801fb6a:	683b      	ldr	r3, [r7, #0]
 801fb6c:	781b      	ldrb	r3, [r3, #0]
 801fb6e:	009b      	lsls	r3, r3, #2
 801fb70:	18d3      	adds	r3, r2, r3
 801fb72:	881b      	ldrh	r3, [r3, #0]
 801fb74:	b29a      	uxth	r2, r3
 801fb76:	2044      	movs	r0, #68	@ 0x44
 801fb78:	183b      	adds	r3, r7, r0
 801fb7a:	4912      	ldr	r1, [pc, #72]	@ (801fbc4 <USB_ActivateEndpoint+0x6c8>)
 801fb7c:	400a      	ands	r2, r1
 801fb7e:	801a      	strh	r2, [r3, #0]
 801fb80:	183b      	adds	r3, r7, r0
 801fb82:	183a      	adds	r2, r7, r0
 801fb84:	8812      	ldrh	r2, [r2, #0]
 801fb86:	2120      	movs	r1, #32
 801fb88:	404a      	eors	r2, r1
 801fb8a:	801a      	strh	r2, [r3, #0]
 801fb8c:	687a      	ldr	r2, [r7, #4]
 801fb8e:	683b      	ldr	r3, [r7, #0]
 801fb90:	781b      	ldrb	r3, [r3, #0]
 801fb92:	009b      	lsls	r3, r3, #2
 801fb94:	18d3      	adds	r3, r2, r3
 801fb96:	183a      	adds	r2, r7, r0
 801fb98:	8812      	ldrh	r2, [r2, #0]
 801fb9a:	4905      	ldr	r1, [pc, #20]	@ (801fbb0 <USB_ActivateEndpoint+0x6b4>)
 801fb9c:	430a      	orrs	r2, r1
 801fb9e:	b292      	uxth	r2, r2
 801fba0:	801a      	strh	r2, [r3, #0]
 801fba2:	e028      	b.n	801fbf6 <USB_ActivateEndpoint+0x6fa>
 801fba4:	ffff8f8f 	.word	0xffff8f8f
 801fba8:	ffffc080 	.word	0xffffc080
 801fbac:	ffffbf8f 	.word	0xffffbf8f
 801fbb0:	ffff8080 	.word	0xffff8080
 801fbb4:	ffff8180 	.word	0xffff8180
 801fbb8:	ffff8e8f 	.word	0xffff8e8f
 801fbbc:	00000404 	.word	0x00000404
 801fbc0:	ffff80c0 	.word	0xffff80c0
 801fbc4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fbc8:	687a      	ldr	r2, [r7, #4]
 801fbca:	683b      	ldr	r3, [r7, #0]
 801fbcc:	781b      	ldrb	r3, [r3, #0]
 801fbce:	009b      	lsls	r3, r3, #2
 801fbd0:	18d3      	adds	r3, r2, r3
 801fbd2:	881b      	ldrh	r3, [r3, #0]
 801fbd4:	b29a      	uxth	r2, r3
 801fbd6:	2046      	movs	r0, #70	@ 0x46
 801fbd8:	183b      	adds	r3, r7, r0
 801fbda:	4916      	ldr	r1, [pc, #88]	@ (801fc34 <USB_ActivateEndpoint+0x738>)
 801fbdc:	400a      	ands	r2, r1
 801fbde:	801a      	strh	r2, [r3, #0]
 801fbe0:	687a      	ldr	r2, [r7, #4]
 801fbe2:	683b      	ldr	r3, [r7, #0]
 801fbe4:	781b      	ldrb	r3, [r3, #0]
 801fbe6:	009b      	lsls	r3, r3, #2
 801fbe8:	18d3      	adds	r3, r2, r3
 801fbea:	183a      	adds	r2, r7, r0
 801fbec:	8812      	ldrh	r2, [r2, #0]
 801fbee:	4912      	ldr	r1, [pc, #72]	@ (801fc38 <USB_ActivateEndpoint+0x73c>)
 801fbf0:	430a      	orrs	r2, r1
 801fbf2:	b292      	uxth	r2, r2
 801fbf4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fbf6:	687a      	ldr	r2, [r7, #4]
 801fbf8:	683b      	ldr	r3, [r7, #0]
 801fbfa:	781b      	ldrb	r3, [r3, #0]
 801fbfc:	009b      	lsls	r3, r3, #2
 801fbfe:	18d3      	adds	r3, r2, r3
 801fc00:	881b      	ldrh	r3, [r3, #0]
 801fc02:	b29a      	uxth	r2, r3
 801fc04:	2042      	movs	r0, #66	@ 0x42
 801fc06:	183b      	adds	r3, r7, r0
 801fc08:	490c      	ldr	r1, [pc, #48]	@ (801fc3c <USB_ActivateEndpoint+0x740>)
 801fc0a:	400a      	ands	r2, r1
 801fc0c:	801a      	strh	r2, [r3, #0]
 801fc0e:	687a      	ldr	r2, [r7, #4]
 801fc10:	683b      	ldr	r3, [r7, #0]
 801fc12:	781b      	ldrb	r3, [r3, #0]
 801fc14:	009b      	lsls	r3, r3, #2
 801fc16:	18d3      	adds	r3, r2, r3
 801fc18:	183a      	adds	r2, r7, r0
 801fc1a:	8812      	ldrh	r2, [r2, #0]
 801fc1c:	4906      	ldr	r1, [pc, #24]	@ (801fc38 <USB_ActivateEndpoint+0x73c>)
 801fc1e:	430a      	orrs	r2, r1
 801fc20:	b292      	uxth	r2, r2
 801fc22:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fc24:	236f      	movs	r3, #111	@ 0x6f
 801fc26:	18fb      	adds	r3, r7, r3
 801fc28:	781b      	ldrb	r3, [r3, #0]
}
 801fc2a:	0018      	movs	r0, r3
 801fc2c:	46bd      	mov	sp, r7
 801fc2e:	b01c      	add	sp, #112	@ 0x70
 801fc30:	bd80      	pop	{r7, pc}
 801fc32:	46c0      	nop			@ (mov r8, r8)
 801fc34:	ffff8fbf 	.word	0xffff8fbf
 801fc38:	ffff8080 	.word	0xffff8080
 801fc3c:	ffffbf8f 	.word	0xffffbf8f

0801fc40 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fc40:	b580      	push	{r7, lr}
 801fc42:	b08c      	sub	sp, #48	@ 0x30
 801fc44:	af00      	add	r7, sp, #0
 801fc46:	6078      	str	r0, [r7, #4]
 801fc48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fc4a:	683b      	ldr	r3, [r7, #0]
 801fc4c:	7b1b      	ldrb	r3, [r3, #12]
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	d000      	beq.n	801fc54 <USB_DeactivateEndpoint+0x14>
 801fc52:	e07e      	b.n	801fd52 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fc54:	683b      	ldr	r3, [r7, #0]
 801fc56:	785b      	ldrb	r3, [r3, #1]
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d03c      	beq.n	801fcd6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fc5c:	687a      	ldr	r2, [r7, #4]
 801fc5e:	683b      	ldr	r3, [r7, #0]
 801fc60:	781b      	ldrb	r3, [r3, #0]
 801fc62:	009b      	lsls	r3, r3, #2
 801fc64:	18d2      	adds	r2, r2, r3
 801fc66:	210c      	movs	r1, #12
 801fc68:	187b      	adds	r3, r7, r1
 801fc6a:	8812      	ldrh	r2, [r2, #0]
 801fc6c:	801a      	strh	r2, [r3, #0]
 801fc6e:	187b      	adds	r3, r7, r1
 801fc70:	881b      	ldrh	r3, [r3, #0]
 801fc72:	2240      	movs	r2, #64	@ 0x40
 801fc74:	4013      	ands	r3, r2
 801fc76:	d016      	beq.n	801fca6 <USB_DeactivateEndpoint+0x66>
 801fc78:	687a      	ldr	r2, [r7, #4]
 801fc7a:	683b      	ldr	r3, [r7, #0]
 801fc7c:	781b      	ldrb	r3, [r3, #0]
 801fc7e:	009b      	lsls	r3, r3, #2
 801fc80:	18d3      	adds	r3, r2, r3
 801fc82:	881b      	ldrh	r3, [r3, #0]
 801fc84:	b29a      	uxth	r2, r3
 801fc86:	200a      	movs	r0, #10
 801fc88:	183b      	adds	r3, r7, r0
 801fc8a:	49c7      	ldr	r1, [pc, #796]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801fc8c:	400a      	ands	r2, r1
 801fc8e:	801a      	strh	r2, [r3, #0]
 801fc90:	687a      	ldr	r2, [r7, #4]
 801fc92:	683b      	ldr	r3, [r7, #0]
 801fc94:	781b      	ldrb	r3, [r3, #0]
 801fc96:	009b      	lsls	r3, r3, #2
 801fc98:	18d3      	adds	r3, r2, r3
 801fc9a:	183a      	adds	r2, r7, r0
 801fc9c:	8812      	ldrh	r2, [r2, #0]
 801fc9e:	49c3      	ldr	r1, [pc, #780]	@ (801ffac <USB_DeactivateEndpoint+0x36c>)
 801fca0:	430a      	orrs	r2, r1
 801fca2:	b292      	uxth	r2, r2
 801fca4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fca6:	687a      	ldr	r2, [r7, #4]
 801fca8:	683b      	ldr	r3, [r7, #0]
 801fcaa:	781b      	ldrb	r3, [r3, #0]
 801fcac:	009b      	lsls	r3, r3, #2
 801fcae:	18d3      	adds	r3, r2, r3
 801fcb0:	881b      	ldrh	r3, [r3, #0]
 801fcb2:	b29a      	uxth	r2, r3
 801fcb4:	2008      	movs	r0, #8
 801fcb6:	183b      	adds	r3, r7, r0
 801fcb8:	49bd      	ldr	r1, [pc, #756]	@ (801ffb0 <USB_DeactivateEndpoint+0x370>)
 801fcba:	400a      	ands	r2, r1
 801fcbc:	801a      	strh	r2, [r3, #0]
 801fcbe:	687a      	ldr	r2, [r7, #4]
 801fcc0:	683b      	ldr	r3, [r7, #0]
 801fcc2:	781b      	ldrb	r3, [r3, #0]
 801fcc4:	009b      	lsls	r3, r3, #2
 801fcc6:	18d3      	adds	r3, r2, r3
 801fcc8:	183a      	adds	r2, r7, r0
 801fcca:	8812      	ldrh	r2, [r2, #0]
 801fccc:	49b9      	ldr	r1, [pc, #740]	@ (801ffb4 <USB_DeactivateEndpoint+0x374>)
 801fcce:	430a      	orrs	r2, r1
 801fcd0:	b292      	uxth	r2, r2
 801fcd2:	801a      	strh	r2, [r3, #0]
 801fcd4:	e163      	b.n	801ff9e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fcd6:	687a      	ldr	r2, [r7, #4]
 801fcd8:	683b      	ldr	r3, [r7, #0]
 801fcda:	781b      	ldrb	r3, [r3, #0]
 801fcdc:	009b      	lsls	r3, r3, #2
 801fcde:	18d2      	adds	r2, r2, r3
 801fce0:	2112      	movs	r1, #18
 801fce2:	187b      	adds	r3, r7, r1
 801fce4:	8812      	ldrh	r2, [r2, #0]
 801fce6:	801a      	strh	r2, [r3, #0]
 801fce8:	187b      	adds	r3, r7, r1
 801fcea:	881a      	ldrh	r2, [r3, #0]
 801fcec:	2380      	movs	r3, #128	@ 0x80
 801fcee:	01db      	lsls	r3, r3, #7
 801fcf0:	4013      	ands	r3, r2
 801fcf2:	d016      	beq.n	801fd22 <USB_DeactivateEndpoint+0xe2>
 801fcf4:	687a      	ldr	r2, [r7, #4]
 801fcf6:	683b      	ldr	r3, [r7, #0]
 801fcf8:	781b      	ldrb	r3, [r3, #0]
 801fcfa:	009b      	lsls	r3, r3, #2
 801fcfc:	18d3      	adds	r3, r2, r3
 801fcfe:	881b      	ldrh	r3, [r3, #0]
 801fd00:	b29a      	uxth	r2, r3
 801fd02:	2010      	movs	r0, #16
 801fd04:	183b      	adds	r3, r7, r0
 801fd06:	49a8      	ldr	r1, [pc, #672]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801fd08:	400a      	ands	r2, r1
 801fd0a:	801a      	strh	r2, [r3, #0]
 801fd0c:	687a      	ldr	r2, [r7, #4]
 801fd0e:	683b      	ldr	r3, [r7, #0]
 801fd10:	781b      	ldrb	r3, [r3, #0]
 801fd12:	009b      	lsls	r3, r3, #2
 801fd14:	18d3      	adds	r3, r2, r3
 801fd16:	183a      	adds	r2, r7, r0
 801fd18:	8812      	ldrh	r2, [r2, #0]
 801fd1a:	49a7      	ldr	r1, [pc, #668]	@ (801ffb8 <USB_DeactivateEndpoint+0x378>)
 801fd1c:	430a      	orrs	r2, r1
 801fd1e:	b292      	uxth	r2, r2
 801fd20:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fd22:	687a      	ldr	r2, [r7, #4]
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	781b      	ldrb	r3, [r3, #0]
 801fd28:	009b      	lsls	r3, r3, #2
 801fd2a:	18d3      	adds	r3, r2, r3
 801fd2c:	881b      	ldrh	r3, [r3, #0]
 801fd2e:	b29a      	uxth	r2, r3
 801fd30:	200e      	movs	r0, #14
 801fd32:	183b      	adds	r3, r7, r0
 801fd34:	49a1      	ldr	r1, [pc, #644]	@ (801ffbc <USB_DeactivateEndpoint+0x37c>)
 801fd36:	400a      	ands	r2, r1
 801fd38:	801a      	strh	r2, [r3, #0]
 801fd3a:	687a      	ldr	r2, [r7, #4]
 801fd3c:	683b      	ldr	r3, [r7, #0]
 801fd3e:	781b      	ldrb	r3, [r3, #0]
 801fd40:	009b      	lsls	r3, r3, #2
 801fd42:	18d3      	adds	r3, r2, r3
 801fd44:	183a      	adds	r2, r7, r0
 801fd46:	8812      	ldrh	r2, [r2, #0]
 801fd48:	499a      	ldr	r1, [pc, #616]	@ (801ffb4 <USB_DeactivateEndpoint+0x374>)
 801fd4a:	430a      	orrs	r2, r1
 801fd4c:	b292      	uxth	r2, r2
 801fd4e:	801a      	strh	r2, [r3, #0]
 801fd50:	e125      	b.n	801ff9e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fd52:	683b      	ldr	r3, [r7, #0]
 801fd54:	785b      	ldrb	r3, [r3, #1]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d000      	beq.n	801fd5c <USB_DeactivateEndpoint+0x11c>
 801fd5a:	e090      	b.n	801fe7e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fd5c:	687a      	ldr	r2, [r7, #4]
 801fd5e:	683b      	ldr	r3, [r7, #0]
 801fd60:	781b      	ldrb	r3, [r3, #0]
 801fd62:	009b      	lsls	r3, r3, #2
 801fd64:	18d2      	adds	r2, r2, r3
 801fd66:	2120      	movs	r1, #32
 801fd68:	187b      	adds	r3, r7, r1
 801fd6a:	8812      	ldrh	r2, [r2, #0]
 801fd6c:	801a      	strh	r2, [r3, #0]
 801fd6e:	187b      	adds	r3, r7, r1
 801fd70:	881a      	ldrh	r2, [r3, #0]
 801fd72:	2380      	movs	r3, #128	@ 0x80
 801fd74:	01db      	lsls	r3, r3, #7
 801fd76:	4013      	ands	r3, r2
 801fd78:	d016      	beq.n	801fda8 <USB_DeactivateEndpoint+0x168>
 801fd7a:	687a      	ldr	r2, [r7, #4]
 801fd7c:	683b      	ldr	r3, [r7, #0]
 801fd7e:	781b      	ldrb	r3, [r3, #0]
 801fd80:	009b      	lsls	r3, r3, #2
 801fd82:	18d3      	adds	r3, r2, r3
 801fd84:	881b      	ldrh	r3, [r3, #0]
 801fd86:	b29a      	uxth	r2, r3
 801fd88:	201e      	movs	r0, #30
 801fd8a:	183b      	adds	r3, r7, r0
 801fd8c:	4986      	ldr	r1, [pc, #536]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801fd8e:	400a      	ands	r2, r1
 801fd90:	801a      	strh	r2, [r3, #0]
 801fd92:	687a      	ldr	r2, [r7, #4]
 801fd94:	683b      	ldr	r3, [r7, #0]
 801fd96:	781b      	ldrb	r3, [r3, #0]
 801fd98:	009b      	lsls	r3, r3, #2
 801fd9a:	18d3      	adds	r3, r2, r3
 801fd9c:	183a      	adds	r2, r7, r0
 801fd9e:	8812      	ldrh	r2, [r2, #0]
 801fda0:	4985      	ldr	r1, [pc, #532]	@ (801ffb8 <USB_DeactivateEndpoint+0x378>)
 801fda2:	430a      	orrs	r2, r1
 801fda4:	b292      	uxth	r2, r2
 801fda6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fda8:	687a      	ldr	r2, [r7, #4]
 801fdaa:	683b      	ldr	r3, [r7, #0]
 801fdac:	781b      	ldrb	r3, [r3, #0]
 801fdae:	009b      	lsls	r3, r3, #2
 801fdb0:	18d2      	adds	r2, r2, r3
 801fdb2:	211c      	movs	r1, #28
 801fdb4:	187b      	adds	r3, r7, r1
 801fdb6:	8812      	ldrh	r2, [r2, #0]
 801fdb8:	801a      	strh	r2, [r3, #0]
 801fdba:	187b      	adds	r3, r7, r1
 801fdbc:	881b      	ldrh	r3, [r3, #0]
 801fdbe:	2240      	movs	r2, #64	@ 0x40
 801fdc0:	4013      	ands	r3, r2
 801fdc2:	d016      	beq.n	801fdf2 <USB_DeactivateEndpoint+0x1b2>
 801fdc4:	687a      	ldr	r2, [r7, #4]
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	009b      	lsls	r3, r3, #2
 801fdcc:	18d3      	adds	r3, r2, r3
 801fdce:	881b      	ldrh	r3, [r3, #0]
 801fdd0:	b29a      	uxth	r2, r3
 801fdd2:	201a      	movs	r0, #26
 801fdd4:	183b      	adds	r3, r7, r0
 801fdd6:	4974      	ldr	r1, [pc, #464]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801fdd8:	400a      	ands	r2, r1
 801fdda:	801a      	strh	r2, [r3, #0]
 801fddc:	687a      	ldr	r2, [r7, #4]
 801fdde:	683b      	ldr	r3, [r7, #0]
 801fde0:	781b      	ldrb	r3, [r3, #0]
 801fde2:	009b      	lsls	r3, r3, #2
 801fde4:	18d3      	adds	r3, r2, r3
 801fde6:	183a      	adds	r2, r7, r0
 801fde8:	8812      	ldrh	r2, [r2, #0]
 801fdea:	4970      	ldr	r1, [pc, #448]	@ (801ffac <USB_DeactivateEndpoint+0x36c>)
 801fdec:	430a      	orrs	r2, r1
 801fdee:	b292      	uxth	r2, r2
 801fdf0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fdf2:	687a      	ldr	r2, [r7, #4]
 801fdf4:	683b      	ldr	r3, [r7, #0]
 801fdf6:	781b      	ldrb	r3, [r3, #0]
 801fdf8:	009b      	lsls	r3, r3, #2
 801fdfa:	18d3      	adds	r3, r2, r3
 801fdfc:	881b      	ldrh	r3, [r3, #0]
 801fdfe:	b29a      	uxth	r2, r3
 801fe00:	2018      	movs	r0, #24
 801fe02:	183b      	adds	r3, r7, r0
 801fe04:	4968      	ldr	r1, [pc, #416]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801fe06:	400a      	ands	r2, r1
 801fe08:	801a      	strh	r2, [r3, #0]
 801fe0a:	687a      	ldr	r2, [r7, #4]
 801fe0c:	683b      	ldr	r3, [r7, #0]
 801fe0e:	781b      	ldrb	r3, [r3, #0]
 801fe10:	009b      	lsls	r3, r3, #2
 801fe12:	18d3      	adds	r3, r2, r3
 801fe14:	183a      	adds	r2, r7, r0
 801fe16:	8812      	ldrh	r2, [r2, #0]
 801fe18:	4964      	ldr	r1, [pc, #400]	@ (801ffac <USB_DeactivateEndpoint+0x36c>)
 801fe1a:	430a      	orrs	r2, r1
 801fe1c:	b292      	uxth	r2, r2
 801fe1e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fe20:	687a      	ldr	r2, [r7, #4]
 801fe22:	683b      	ldr	r3, [r7, #0]
 801fe24:	781b      	ldrb	r3, [r3, #0]
 801fe26:	009b      	lsls	r3, r3, #2
 801fe28:	18d3      	adds	r3, r2, r3
 801fe2a:	881b      	ldrh	r3, [r3, #0]
 801fe2c:	b29a      	uxth	r2, r3
 801fe2e:	2016      	movs	r0, #22
 801fe30:	183b      	adds	r3, r7, r0
 801fe32:	4962      	ldr	r1, [pc, #392]	@ (801ffbc <USB_DeactivateEndpoint+0x37c>)
 801fe34:	400a      	ands	r2, r1
 801fe36:	801a      	strh	r2, [r3, #0]
 801fe38:	687a      	ldr	r2, [r7, #4]
 801fe3a:	683b      	ldr	r3, [r7, #0]
 801fe3c:	781b      	ldrb	r3, [r3, #0]
 801fe3e:	009b      	lsls	r3, r3, #2
 801fe40:	18d3      	adds	r3, r2, r3
 801fe42:	183a      	adds	r2, r7, r0
 801fe44:	8812      	ldrh	r2, [r2, #0]
 801fe46:	495b      	ldr	r1, [pc, #364]	@ (801ffb4 <USB_DeactivateEndpoint+0x374>)
 801fe48:	430a      	orrs	r2, r1
 801fe4a:	b292      	uxth	r2, r2
 801fe4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fe4e:	687a      	ldr	r2, [r7, #4]
 801fe50:	683b      	ldr	r3, [r7, #0]
 801fe52:	781b      	ldrb	r3, [r3, #0]
 801fe54:	009b      	lsls	r3, r3, #2
 801fe56:	18d3      	adds	r3, r2, r3
 801fe58:	881b      	ldrh	r3, [r3, #0]
 801fe5a:	b29a      	uxth	r2, r3
 801fe5c:	2014      	movs	r0, #20
 801fe5e:	183b      	adds	r3, r7, r0
 801fe60:	4953      	ldr	r1, [pc, #332]	@ (801ffb0 <USB_DeactivateEndpoint+0x370>)
 801fe62:	400a      	ands	r2, r1
 801fe64:	801a      	strh	r2, [r3, #0]
 801fe66:	687a      	ldr	r2, [r7, #4]
 801fe68:	683b      	ldr	r3, [r7, #0]
 801fe6a:	781b      	ldrb	r3, [r3, #0]
 801fe6c:	009b      	lsls	r3, r3, #2
 801fe6e:	18d3      	adds	r3, r2, r3
 801fe70:	183a      	adds	r2, r7, r0
 801fe72:	8812      	ldrh	r2, [r2, #0]
 801fe74:	494f      	ldr	r1, [pc, #316]	@ (801ffb4 <USB_DeactivateEndpoint+0x374>)
 801fe76:	430a      	orrs	r2, r1
 801fe78:	b292      	uxth	r2, r2
 801fe7a:	801a      	strh	r2, [r3, #0]
 801fe7c:	e08f      	b.n	801ff9e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fe7e:	687a      	ldr	r2, [r7, #4]
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	781b      	ldrb	r3, [r3, #0]
 801fe84:	009b      	lsls	r3, r3, #2
 801fe86:	18d2      	adds	r2, r2, r3
 801fe88:	212e      	movs	r1, #46	@ 0x2e
 801fe8a:	187b      	adds	r3, r7, r1
 801fe8c:	8812      	ldrh	r2, [r2, #0]
 801fe8e:	801a      	strh	r2, [r3, #0]
 801fe90:	187b      	adds	r3, r7, r1
 801fe92:	881a      	ldrh	r2, [r3, #0]
 801fe94:	2380      	movs	r3, #128	@ 0x80
 801fe96:	01db      	lsls	r3, r3, #7
 801fe98:	4013      	ands	r3, r2
 801fe9a:	d016      	beq.n	801feca <USB_DeactivateEndpoint+0x28a>
 801fe9c:	687a      	ldr	r2, [r7, #4]
 801fe9e:	683b      	ldr	r3, [r7, #0]
 801fea0:	781b      	ldrb	r3, [r3, #0]
 801fea2:	009b      	lsls	r3, r3, #2
 801fea4:	18d3      	adds	r3, r2, r3
 801fea6:	881b      	ldrh	r3, [r3, #0]
 801fea8:	b29a      	uxth	r2, r3
 801feaa:	202c      	movs	r0, #44	@ 0x2c
 801feac:	183b      	adds	r3, r7, r0
 801feae:	493e      	ldr	r1, [pc, #248]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801feb0:	400a      	ands	r2, r1
 801feb2:	801a      	strh	r2, [r3, #0]
 801feb4:	687a      	ldr	r2, [r7, #4]
 801feb6:	683b      	ldr	r3, [r7, #0]
 801feb8:	781b      	ldrb	r3, [r3, #0]
 801feba:	009b      	lsls	r3, r3, #2
 801febc:	18d3      	adds	r3, r2, r3
 801febe:	183a      	adds	r2, r7, r0
 801fec0:	8812      	ldrh	r2, [r2, #0]
 801fec2:	493d      	ldr	r1, [pc, #244]	@ (801ffb8 <USB_DeactivateEndpoint+0x378>)
 801fec4:	430a      	orrs	r2, r1
 801fec6:	b292      	uxth	r2, r2
 801fec8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801feca:	687a      	ldr	r2, [r7, #4]
 801fecc:	683b      	ldr	r3, [r7, #0]
 801fece:	781b      	ldrb	r3, [r3, #0]
 801fed0:	009b      	lsls	r3, r3, #2
 801fed2:	18d2      	adds	r2, r2, r3
 801fed4:	212a      	movs	r1, #42	@ 0x2a
 801fed6:	187b      	adds	r3, r7, r1
 801fed8:	8812      	ldrh	r2, [r2, #0]
 801feda:	801a      	strh	r2, [r3, #0]
 801fedc:	187b      	adds	r3, r7, r1
 801fede:	881b      	ldrh	r3, [r3, #0]
 801fee0:	2240      	movs	r2, #64	@ 0x40
 801fee2:	4013      	ands	r3, r2
 801fee4:	d016      	beq.n	801ff14 <USB_DeactivateEndpoint+0x2d4>
 801fee6:	687a      	ldr	r2, [r7, #4]
 801fee8:	683b      	ldr	r3, [r7, #0]
 801feea:	781b      	ldrb	r3, [r3, #0]
 801feec:	009b      	lsls	r3, r3, #2
 801feee:	18d3      	adds	r3, r2, r3
 801fef0:	881b      	ldrh	r3, [r3, #0]
 801fef2:	b29a      	uxth	r2, r3
 801fef4:	2028      	movs	r0, #40	@ 0x28
 801fef6:	183b      	adds	r3, r7, r0
 801fef8:	492b      	ldr	r1, [pc, #172]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801fefa:	400a      	ands	r2, r1
 801fefc:	801a      	strh	r2, [r3, #0]
 801fefe:	687a      	ldr	r2, [r7, #4]
 801ff00:	683b      	ldr	r3, [r7, #0]
 801ff02:	781b      	ldrb	r3, [r3, #0]
 801ff04:	009b      	lsls	r3, r3, #2
 801ff06:	18d3      	adds	r3, r2, r3
 801ff08:	183a      	adds	r2, r7, r0
 801ff0a:	8812      	ldrh	r2, [r2, #0]
 801ff0c:	4927      	ldr	r1, [pc, #156]	@ (801ffac <USB_DeactivateEndpoint+0x36c>)
 801ff0e:	430a      	orrs	r2, r1
 801ff10:	b292      	uxth	r2, r2
 801ff12:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801ff14:	687a      	ldr	r2, [r7, #4]
 801ff16:	683b      	ldr	r3, [r7, #0]
 801ff18:	781b      	ldrb	r3, [r3, #0]
 801ff1a:	009b      	lsls	r3, r3, #2
 801ff1c:	18d3      	adds	r3, r2, r3
 801ff1e:	881b      	ldrh	r3, [r3, #0]
 801ff20:	b29a      	uxth	r2, r3
 801ff22:	2026      	movs	r0, #38	@ 0x26
 801ff24:	183b      	adds	r3, r7, r0
 801ff26:	4920      	ldr	r1, [pc, #128]	@ (801ffa8 <USB_DeactivateEndpoint+0x368>)
 801ff28:	400a      	ands	r2, r1
 801ff2a:	801a      	strh	r2, [r3, #0]
 801ff2c:	687a      	ldr	r2, [r7, #4]
 801ff2e:	683b      	ldr	r3, [r7, #0]
 801ff30:	781b      	ldrb	r3, [r3, #0]
 801ff32:	009b      	lsls	r3, r3, #2
 801ff34:	18d3      	adds	r3, r2, r3
 801ff36:	183a      	adds	r2, r7, r0
 801ff38:	8812      	ldrh	r2, [r2, #0]
 801ff3a:	491f      	ldr	r1, [pc, #124]	@ (801ffb8 <USB_DeactivateEndpoint+0x378>)
 801ff3c:	430a      	orrs	r2, r1
 801ff3e:	b292      	uxth	r2, r2
 801ff40:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ff42:	687a      	ldr	r2, [r7, #4]
 801ff44:	683b      	ldr	r3, [r7, #0]
 801ff46:	781b      	ldrb	r3, [r3, #0]
 801ff48:	009b      	lsls	r3, r3, #2
 801ff4a:	18d3      	adds	r3, r2, r3
 801ff4c:	881b      	ldrh	r3, [r3, #0]
 801ff4e:	b29a      	uxth	r2, r3
 801ff50:	2024      	movs	r0, #36	@ 0x24
 801ff52:	183b      	adds	r3, r7, r0
 801ff54:	4916      	ldr	r1, [pc, #88]	@ (801ffb0 <USB_DeactivateEndpoint+0x370>)
 801ff56:	400a      	ands	r2, r1
 801ff58:	801a      	strh	r2, [r3, #0]
 801ff5a:	687a      	ldr	r2, [r7, #4]
 801ff5c:	683b      	ldr	r3, [r7, #0]
 801ff5e:	781b      	ldrb	r3, [r3, #0]
 801ff60:	009b      	lsls	r3, r3, #2
 801ff62:	18d3      	adds	r3, r2, r3
 801ff64:	183a      	adds	r2, r7, r0
 801ff66:	8812      	ldrh	r2, [r2, #0]
 801ff68:	4912      	ldr	r1, [pc, #72]	@ (801ffb4 <USB_DeactivateEndpoint+0x374>)
 801ff6a:	430a      	orrs	r2, r1
 801ff6c:	b292      	uxth	r2, r2
 801ff6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ff70:	687a      	ldr	r2, [r7, #4]
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	781b      	ldrb	r3, [r3, #0]
 801ff76:	009b      	lsls	r3, r3, #2
 801ff78:	18d3      	adds	r3, r2, r3
 801ff7a:	881b      	ldrh	r3, [r3, #0]
 801ff7c:	b29a      	uxth	r2, r3
 801ff7e:	2022      	movs	r0, #34	@ 0x22
 801ff80:	183b      	adds	r3, r7, r0
 801ff82:	490e      	ldr	r1, [pc, #56]	@ (801ffbc <USB_DeactivateEndpoint+0x37c>)
 801ff84:	400a      	ands	r2, r1
 801ff86:	801a      	strh	r2, [r3, #0]
 801ff88:	687a      	ldr	r2, [r7, #4]
 801ff8a:	683b      	ldr	r3, [r7, #0]
 801ff8c:	781b      	ldrb	r3, [r3, #0]
 801ff8e:	009b      	lsls	r3, r3, #2
 801ff90:	18d3      	adds	r3, r2, r3
 801ff92:	183a      	adds	r2, r7, r0
 801ff94:	8812      	ldrh	r2, [r2, #0]
 801ff96:	4907      	ldr	r1, [pc, #28]	@ (801ffb4 <USB_DeactivateEndpoint+0x374>)
 801ff98:	430a      	orrs	r2, r1
 801ff9a:	b292      	uxth	r2, r2
 801ff9c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801ff9e:	2300      	movs	r3, #0
}
 801ffa0:	0018      	movs	r0, r3
 801ffa2:	46bd      	mov	sp, r7
 801ffa4:	b00c      	add	sp, #48	@ 0x30
 801ffa6:	bd80      	pop	{r7, pc}
 801ffa8:	ffff8f8f 	.word	0xffff8f8f
 801ffac:	ffff80c0 	.word	0xffff80c0
 801ffb0:	ffff8fbf 	.word	0xffff8fbf
 801ffb4:	ffff8080 	.word	0xffff8080
 801ffb8:	ffffc080 	.word	0xffffc080
 801ffbc:	ffffbf8f 	.word	0xffffbf8f

0801ffc0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ffc0:	b590      	push	{r4, r7, lr}
 801ffc2:	b0c3      	sub	sp, #268	@ 0x10c
 801ffc4:	af00      	add	r7, sp, #0
 801ffc6:	6078      	str	r0, [r7, #4]
 801ffc8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ffca:	683b      	ldr	r3, [r7, #0]
 801ffcc:	785b      	ldrb	r3, [r3, #1]
 801ffce:	2b01      	cmp	r3, #1
 801ffd0:	d001      	beq.n	801ffd6 <USB_EPStartXfer+0x16>
 801ffd2:	f000 fd2d 	bl	8020a30 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801ffd6:	683b      	ldr	r3, [r7, #0]
 801ffd8:	699a      	ldr	r2, [r3, #24]
 801ffda:	683b      	ldr	r3, [r7, #0]
 801ffdc:	691b      	ldr	r3, [r3, #16]
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d905      	bls.n	801ffee <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801ffe2:	683b      	ldr	r3, [r7, #0]
 801ffe4:	691b      	ldr	r3, [r3, #16]
 801ffe6:	1d7a      	adds	r2, r7, #5
 801ffe8:	32ff      	adds	r2, #255	@ 0xff
 801ffea:	6013      	str	r3, [r2, #0]
 801ffec:	e004      	b.n	801fff8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801ffee:	683b      	ldr	r3, [r7, #0]
 801fff0:	699b      	ldr	r3, [r3, #24]
 801fff2:	1d7a      	adds	r2, r7, #5
 801fff4:	32ff      	adds	r2, #255	@ 0xff
 801fff6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801fff8:	683b      	ldr	r3, [r7, #0]
 801fffa:	7b1b      	ldrb	r3, [r3, #12]
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	d125      	bne.n	802004c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8020000:	683b      	ldr	r3, [r7, #0]
 8020002:	6959      	ldr	r1, [r3, #20]
 8020004:	683b      	ldr	r3, [r7, #0]
 8020006:	88da      	ldrh	r2, [r3, #6]
 8020008:	1d7b      	adds	r3, r7, #5
 802000a:	33ff      	adds	r3, #255	@ 0xff
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	b29b      	uxth	r3, r3
 8020010:	6878      	ldr	r0, [r7, #4]
 8020012:	f001 fa47 	bl	80214a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	613b      	str	r3, [r7, #16]
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	2250      	movs	r2, #80	@ 0x50
 802001e:	5a9b      	ldrh	r3, [r3, r2]
 8020020:	b29b      	uxth	r3, r3
 8020022:	001a      	movs	r2, r3
 8020024:	693b      	ldr	r3, [r7, #16]
 8020026:	189b      	adds	r3, r3, r2
 8020028:	613b      	str	r3, [r7, #16]
 802002a:	683b      	ldr	r3, [r7, #0]
 802002c:	781b      	ldrb	r3, [r3, #0]
 802002e:	00da      	lsls	r2, r3, #3
 8020030:	693b      	ldr	r3, [r7, #16]
 8020032:	18d3      	adds	r3, r2, r3
 8020034:	4ad7      	ldr	r2, [pc, #860]	@ (8020394 <USB_EPStartXfer+0x3d4>)
 8020036:	4694      	mov	ip, r2
 8020038:	4463      	add	r3, ip
 802003a:	60fb      	str	r3, [r7, #12]
 802003c:	1d7b      	adds	r3, r7, #5
 802003e:	33ff      	adds	r3, #255	@ 0xff
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	b29a      	uxth	r2, r3
 8020044:	68fb      	ldr	r3, [r7, #12]
 8020046:	801a      	strh	r2, [r3, #0]
 8020048:	f000 fccd 	bl	80209e6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 802004c:	683b      	ldr	r3, [r7, #0]
 802004e:	78db      	ldrb	r3, [r3, #3]
 8020050:	2b02      	cmp	r3, #2
 8020052:	d000      	beq.n	8020056 <USB_EPStartXfer+0x96>
 8020054:	e362      	b.n	802071c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8020056:	683b      	ldr	r3, [r7, #0]
 8020058:	6a1a      	ldr	r2, [r3, #32]
 802005a:	683b      	ldr	r3, [r7, #0]
 802005c:	691b      	ldr	r3, [r3, #16]
 802005e:	429a      	cmp	r2, r3
 8020060:	d800      	bhi.n	8020064 <USB_EPStartXfer+0xa4>
 8020062:	e309      	b.n	8020678 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8020064:	687a      	ldr	r2, [r7, #4]
 8020066:	683b      	ldr	r3, [r7, #0]
 8020068:	781b      	ldrb	r3, [r3, #0]
 802006a:	009b      	lsls	r3, r3, #2
 802006c:	18d3      	adds	r3, r2, r3
 802006e:	881b      	ldrh	r3, [r3, #0]
 8020070:	b29a      	uxth	r2, r3
 8020072:	2056      	movs	r0, #86	@ 0x56
 8020074:	183b      	adds	r3, r7, r0
 8020076:	49c8      	ldr	r1, [pc, #800]	@ (8020398 <USB_EPStartXfer+0x3d8>)
 8020078:	400a      	ands	r2, r1
 802007a:	801a      	strh	r2, [r3, #0]
 802007c:	687a      	ldr	r2, [r7, #4]
 802007e:	683b      	ldr	r3, [r7, #0]
 8020080:	781b      	ldrb	r3, [r3, #0]
 8020082:	009b      	lsls	r3, r3, #2
 8020084:	18d3      	adds	r3, r2, r3
 8020086:	183a      	adds	r2, r7, r0
 8020088:	8812      	ldrh	r2, [r2, #0]
 802008a:	49c4      	ldr	r1, [pc, #784]	@ (802039c <USB_EPStartXfer+0x3dc>)
 802008c:	430a      	orrs	r2, r1
 802008e:	b292      	uxth	r2, r2
 8020090:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8020092:	683b      	ldr	r3, [r7, #0]
 8020094:	6a1a      	ldr	r2, [r3, #32]
 8020096:	1d7b      	adds	r3, r7, #5
 8020098:	33ff      	adds	r3, #255	@ 0xff
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	1ad2      	subs	r2, r2, r3
 802009e:	683b      	ldr	r3, [r7, #0]
 80200a0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80200a2:	687a      	ldr	r2, [r7, #4]
 80200a4:	683b      	ldr	r3, [r7, #0]
 80200a6:	781b      	ldrb	r3, [r3, #0]
 80200a8:	009b      	lsls	r3, r3, #2
 80200aa:	18d3      	adds	r3, r2, r3
 80200ac:	881b      	ldrh	r3, [r3, #0]
 80200ae:	b29b      	uxth	r3, r3
 80200b0:	001a      	movs	r2, r3
 80200b2:	2340      	movs	r3, #64	@ 0x40
 80200b4:	4013      	ands	r3, r2
 80200b6:	d100      	bne.n	80200ba <USB_EPStartXfer+0xfa>
 80200b8:	e176      	b.n	80203a8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80200be:	683b      	ldr	r3, [r7, #0]
 80200c0:	785b      	ldrb	r3, [r3, #1]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d000      	beq.n	80200c8 <USB_EPStartXfer+0x108>
 80200c6:	e074      	b.n	80201b2 <USB_EPStartXfer+0x1f2>
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	2250      	movs	r2, #80	@ 0x50
 80200d0:	5a9b      	ldrh	r3, [r3, r2]
 80200d2:	b29b      	uxth	r3, r3
 80200d4:	001a      	movs	r2, r3
 80200d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200d8:	189b      	adds	r3, r3, r2
 80200da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80200dc:	683b      	ldr	r3, [r7, #0]
 80200de:	781b      	ldrb	r3, [r3, #0]
 80200e0:	00da      	lsls	r2, r3, #3
 80200e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200e4:	18d3      	adds	r3, r2, r3
 80200e6:	4aae      	ldr	r2, [pc, #696]	@ (80203a0 <USB_EPStartXfer+0x3e0>)
 80200e8:	4694      	mov	ip, r2
 80200ea:	4463      	add	r3, ip
 80200ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80200ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200f0:	881b      	ldrh	r3, [r3, #0]
 80200f2:	b29b      	uxth	r3, r3
 80200f4:	059b      	lsls	r3, r3, #22
 80200f6:	0d9b      	lsrs	r3, r3, #22
 80200f8:	b29a      	uxth	r2, r3
 80200fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200fc:	801a      	strh	r2, [r3, #0]
 80200fe:	1d7b      	adds	r3, r7, #5
 8020100:	33ff      	adds	r3, #255	@ 0xff
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	2b3e      	cmp	r3, #62	@ 0x3e
 8020106:	d924      	bls.n	8020152 <USB_EPStartXfer+0x192>
 8020108:	1d7b      	adds	r3, r7, #5
 802010a:	33ff      	adds	r3, #255	@ 0xff
 802010c:	681b      	ldr	r3, [r3, #0]
 802010e:	095b      	lsrs	r3, r3, #5
 8020110:	1c7a      	adds	r2, r7, #1
 8020112:	32ff      	adds	r2, #255	@ 0xff
 8020114:	6013      	str	r3, [r2, #0]
 8020116:	1d7b      	adds	r3, r7, #5
 8020118:	33ff      	adds	r3, #255	@ 0xff
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	221f      	movs	r2, #31
 802011e:	4013      	ands	r3, r2
 8020120:	d106      	bne.n	8020130 <USB_EPStartXfer+0x170>
 8020122:	1c7b      	adds	r3, r7, #1
 8020124:	33ff      	adds	r3, #255	@ 0xff
 8020126:	681b      	ldr	r3, [r3, #0]
 8020128:	3b01      	subs	r3, #1
 802012a:	1c7a      	adds	r2, r7, #1
 802012c:	32ff      	adds	r2, #255	@ 0xff
 802012e:	6013      	str	r3, [r2, #0]
 8020130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020132:	881b      	ldrh	r3, [r3, #0]
 8020134:	b29a      	uxth	r2, r3
 8020136:	1c7b      	adds	r3, r7, #1
 8020138:	33ff      	adds	r3, #255	@ 0xff
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	b29b      	uxth	r3, r3
 802013e:	029b      	lsls	r3, r3, #10
 8020140:	b29b      	uxth	r3, r3
 8020142:	4313      	orrs	r3, r2
 8020144:	b29b      	uxth	r3, r3
 8020146:	4a97      	ldr	r2, [pc, #604]	@ (80203a4 <USB_EPStartXfer+0x3e4>)
 8020148:	4313      	orrs	r3, r2
 802014a:	b29a      	uxth	r2, r3
 802014c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802014e:	801a      	strh	r2, [r3, #0]
 8020150:	e04a      	b.n	80201e8 <USB_EPStartXfer+0x228>
 8020152:	1d7b      	adds	r3, r7, #5
 8020154:	33ff      	adds	r3, #255	@ 0xff
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	2b00      	cmp	r3, #0
 802015a:	d108      	bne.n	802016e <USB_EPStartXfer+0x1ae>
 802015c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802015e:	881b      	ldrh	r3, [r3, #0]
 8020160:	b29b      	uxth	r3, r3
 8020162:	4a90      	ldr	r2, [pc, #576]	@ (80203a4 <USB_EPStartXfer+0x3e4>)
 8020164:	4313      	orrs	r3, r2
 8020166:	b29a      	uxth	r2, r3
 8020168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802016a:	801a      	strh	r2, [r3, #0]
 802016c:	e03c      	b.n	80201e8 <USB_EPStartXfer+0x228>
 802016e:	1d7b      	adds	r3, r7, #5
 8020170:	33ff      	adds	r3, #255	@ 0xff
 8020172:	681b      	ldr	r3, [r3, #0]
 8020174:	085b      	lsrs	r3, r3, #1
 8020176:	1c7a      	adds	r2, r7, #1
 8020178:	32ff      	adds	r2, #255	@ 0xff
 802017a:	6013      	str	r3, [r2, #0]
 802017c:	1d7b      	adds	r3, r7, #5
 802017e:	33ff      	adds	r3, #255	@ 0xff
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	2201      	movs	r2, #1
 8020184:	4013      	ands	r3, r2
 8020186:	d006      	beq.n	8020196 <USB_EPStartXfer+0x1d6>
 8020188:	1c7b      	adds	r3, r7, #1
 802018a:	33ff      	adds	r3, #255	@ 0xff
 802018c:	681b      	ldr	r3, [r3, #0]
 802018e:	3301      	adds	r3, #1
 8020190:	1c7a      	adds	r2, r7, #1
 8020192:	32ff      	adds	r2, #255	@ 0xff
 8020194:	6013      	str	r3, [r2, #0]
 8020196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020198:	881b      	ldrh	r3, [r3, #0]
 802019a:	b29a      	uxth	r2, r3
 802019c:	1c7b      	adds	r3, r7, #1
 802019e:	33ff      	adds	r3, #255	@ 0xff
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	b29b      	uxth	r3, r3
 80201a4:	029b      	lsls	r3, r3, #10
 80201a6:	b29b      	uxth	r3, r3
 80201a8:	4313      	orrs	r3, r2
 80201aa:	b29a      	uxth	r2, r3
 80201ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201ae:	801a      	strh	r2, [r3, #0]
 80201b0:	e01a      	b.n	80201e8 <USB_EPStartXfer+0x228>
 80201b2:	683b      	ldr	r3, [r7, #0]
 80201b4:	785b      	ldrb	r3, [r3, #1]
 80201b6:	2b01      	cmp	r3, #1
 80201b8:	d116      	bne.n	80201e8 <USB_EPStartXfer+0x228>
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	2250      	movs	r2, #80	@ 0x50
 80201be:	5a9b      	ldrh	r3, [r3, r2]
 80201c0:	b29b      	uxth	r3, r3
 80201c2:	001a      	movs	r2, r3
 80201c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201c6:	189b      	adds	r3, r3, r2
 80201c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80201ca:	683b      	ldr	r3, [r7, #0]
 80201cc:	781b      	ldrb	r3, [r3, #0]
 80201ce:	00da      	lsls	r2, r3, #3
 80201d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201d2:	18d3      	adds	r3, r2, r3
 80201d4:	4a72      	ldr	r2, [pc, #456]	@ (80203a0 <USB_EPStartXfer+0x3e0>)
 80201d6:	4694      	mov	ip, r2
 80201d8:	4463      	add	r3, ip
 80201da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80201dc:	1d7b      	adds	r3, r7, #5
 80201de:	33ff      	adds	r3, #255	@ 0xff
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	b29a      	uxth	r2, r3
 80201e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80201e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80201e8:	2076      	movs	r0, #118	@ 0x76
 80201ea:	183b      	adds	r3, r7, r0
 80201ec:	683a      	ldr	r2, [r7, #0]
 80201ee:	8952      	ldrh	r2, [r2, #10]
 80201f0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80201f2:	683b      	ldr	r3, [r7, #0]
 80201f4:	6959      	ldr	r1, [r3, #20]
 80201f6:	1d7b      	adds	r3, r7, #5
 80201f8:	33ff      	adds	r3, #255	@ 0xff
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	b29c      	uxth	r4, r3
 80201fe:	183b      	adds	r3, r7, r0
 8020200:	881a      	ldrh	r2, [r3, #0]
 8020202:	6878      	ldr	r0, [r7, #4]
 8020204:	0023      	movs	r3, r4
 8020206:	f001 f94d 	bl	80214a4 <USB_WritePMA>
            ep->xfer_buff += len;
 802020a:	683b      	ldr	r3, [r7, #0]
 802020c:	695a      	ldr	r2, [r3, #20]
 802020e:	1d7b      	adds	r3, r7, #5
 8020210:	33ff      	adds	r3, #255	@ 0xff
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	18d2      	adds	r2, r2, r3
 8020216:	683b      	ldr	r3, [r7, #0]
 8020218:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 802021a:	683b      	ldr	r3, [r7, #0]
 802021c:	6a1a      	ldr	r2, [r3, #32]
 802021e:	683b      	ldr	r3, [r7, #0]
 8020220:	691b      	ldr	r3, [r3, #16]
 8020222:	429a      	cmp	r2, r3
 8020224:	d908      	bls.n	8020238 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8020226:	683b      	ldr	r3, [r7, #0]
 8020228:	6a1a      	ldr	r2, [r3, #32]
 802022a:	1d7b      	adds	r3, r7, #5
 802022c:	33ff      	adds	r3, #255	@ 0xff
 802022e:	681b      	ldr	r3, [r3, #0]
 8020230:	1ad2      	subs	r2, r2, r3
 8020232:	683b      	ldr	r3, [r7, #0]
 8020234:	621a      	str	r2, [r3, #32]
 8020236:	e007      	b.n	8020248 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8020238:	683b      	ldr	r3, [r7, #0]
 802023a:	6a1b      	ldr	r3, [r3, #32]
 802023c:	1d7a      	adds	r2, r7, #5
 802023e:	32ff      	adds	r2, #255	@ 0xff
 8020240:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020242:	683b      	ldr	r3, [r7, #0]
 8020244:	2200      	movs	r2, #0
 8020246:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020248:	683b      	ldr	r3, [r7, #0]
 802024a:	785b      	ldrb	r3, [r3, #1]
 802024c:	2b00      	cmp	r3, #0
 802024e:	d000      	beq.n	8020252 <USB_EPStartXfer+0x292>
 8020250:	e070      	b.n	8020334 <USB_EPStartXfer+0x374>
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	61bb      	str	r3, [r7, #24]
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	2250      	movs	r2, #80	@ 0x50
 802025a:	5a9b      	ldrh	r3, [r3, r2]
 802025c:	b29b      	uxth	r3, r3
 802025e:	001a      	movs	r2, r3
 8020260:	69bb      	ldr	r3, [r7, #24]
 8020262:	189b      	adds	r3, r3, r2
 8020264:	61bb      	str	r3, [r7, #24]
 8020266:	683b      	ldr	r3, [r7, #0]
 8020268:	781b      	ldrb	r3, [r3, #0]
 802026a:	00da      	lsls	r2, r3, #3
 802026c:	69bb      	ldr	r3, [r7, #24]
 802026e:	18d3      	adds	r3, r2, r3
 8020270:	4a48      	ldr	r2, [pc, #288]	@ (8020394 <USB_EPStartXfer+0x3d4>)
 8020272:	4694      	mov	ip, r2
 8020274:	4463      	add	r3, ip
 8020276:	617b      	str	r3, [r7, #20]
 8020278:	697b      	ldr	r3, [r7, #20]
 802027a:	881b      	ldrh	r3, [r3, #0]
 802027c:	b29b      	uxth	r3, r3
 802027e:	059b      	lsls	r3, r3, #22
 8020280:	0d9b      	lsrs	r3, r3, #22
 8020282:	b29a      	uxth	r2, r3
 8020284:	697b      	ldr	r3, [r7, #20]
 8020286:	801a      	strh	r2, [r3, #0]
 8020288:	1d7b      	adds	r3, r7, #5
 802028a:	33ff      	adds	r3, #255	@ 0xff
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020290:	d922      	bls.n	80202d8 <USB_EPStartXfer+0x318>
 8020292:	1d7b      	adds	r3, r7, #5
 8020294:	33ff      	adds	r3, #255	@ 0xff
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	095b      	lsrs	r3, r3, #5
 802029a:	21fc      	movs	r1, #252	@ 0xfc
 802029c:	187a      	adds	r2, r7, r1
 802029e:	6013      	str	r3, [r2, #0]
 80202a0:	1d7b      	adds	r3, r7, #5
 80202a2:	33ff      	adds	r3, #255	@ 0xff
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	221f      	movs	r2, #31
 80202a8:	4013      	ands	r3, r2
 80202aa:	d104      	bne.n	80202b6 <USB_EPStartXfer+0x2f6>
 80202ac:	187b      	adds	r3, r7, r1
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	3b01      	subs	r3, #1
 80202b2:	187a      	adds	r2, r7, r1
 80202b4:	6013      	str	r3, [r2, #0]
 80202b6:	697b      	ldr	r3, [r7, #20]
 80202b8:	881b      	ldrh	r3, [r3, #0]
 80202ba:	b29a      	uxth	r2, r3
 80202bc:	23fc      	movs	r3, #252	@ 0xfc
 80202be:	18fb      	adds	r3, r7, r3
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	029b      	lsls	r3, r3, #10
 80202c6:	b29b      	uxth	r3, r3
 80202c8:	4313      	orrs	r3, r2
 80202ca:	b29b      	uxth	r3, r3
 80202cc:	4a35      	ldr	r2, [pc, #212]	@ (80203a4 <USB_EPStartXfer+0x3e4>)
 80202ce:	4313      	orrs	r3, r2
 80202d0:	b29a      	uxth	r2, r3
 80202d2:	697b      	ldr	r3, [r7, #20]
 80202d4:	801a      	strh	r2, [r3, #0]
 80202d6:	e04a      	b.n	802036e <USB_EPStartXfer+0x3ae>
 80202d8:	1d7b      	adds	r3, r7, #5
 80202da:	33ff      	adds	r3, #255	@ 0xff
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d108      	bne.n	80202f4 <USB_EPStartXfer+0x334>
 80202e2:	697b      	ldr	r3, [r7, #20]
 80202e4:	881b      	ldrh	r3, [r3, #0]
 80202e6:	b29b      	uxth	r3, r3
 80202e8:	4a2e      	ldr	r2, [pc, #184]	@ (80203a4 <USB_EPStartXfer+0x3e4>)
 80202ea:	4313      	orrs	r3, r2
 80202ec:	b29a      	uxth	r2, r3
 80202ee:	697b      	ldr	r3, [r7, #20]
 80202f0:	801a      	strh	r2, [r3, #0]
 80202f2:	e03c      	b.n	802036e <USB_EPStartXfer+0x3ae>
 80202f4:	1d7b      	adds	r3, r7, #5
 80202f6:	33ff      	adds	r3, #255	@ 0xff
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	085b      	lsrs	r3, r3, #1
 80202fc:	21fc      	movs	r1, #252	@ 0xfc
 80202fe:	187a      	adds	r2, r7, r1
 8020300:	6013      	str	r3, [r2, #0]
 8020302:	1d7b      	adds	r3, r7, #5
 8020304:	33ff      	adds	r3, #255	@ 0xff
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	2201      	movs	r2, #1
 802030a:	4013      	ands	r3, r2
 802030c:	d004      	beq.n	8020318 <USB_EPStartXfer+0x358>
 802030e:	187b      	adds	r3, r7, r1
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	3301      	adds	r3, #1
 8020314:	187a      	adds	r2, r7, r1
 8020316:	6013      	str	r3, [r2, #0]
 8020318:	697b      	ldr	r3, [r7, #20]
 802031a:	881b      	ldrh	r3, [r3, #0]
 802031c:	b29a      	uxth	r2, r3
 802031e:	23fc      	movs	r3, #252	@ 0xfc
 8020320:	18fb      	adds	r3, r7, r3
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	b29b      	uxth	r3, r3
 8020326:	029b      	lsls	r3, r3, #10
 8020328:	b29b      	uxth	r3, r3
 802032a:	4313      	orrs	r3, r2
 802032c:	b29a      	uxth	r2, r3
 802032e:	697b      	ldr	r3, [r7, #20]
 8020330:	801a      	strh	r2, [r3, #0]
 8020332:	e01c      	b.n	802036e <USB_EPStartXfer+0x3ae>
 8020334:	683b      	ldr	r3, [r7, #0]
 8020336:	785b      	ldrb	r3, [r3, #1]
 8020338:	2b01      	cmp	r3, #1
 802033a:	d118      	bne.n	802036e <USB_EPStartXfer+0x3ae>
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	623b      	str	r3, [r7, #32]
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	2250      	movs	r2, #80	@ 0x50
 8020344:	5a9b      	ldrh	r3, [r3, r2]
 8020346:	b29b      	uxth	r3, r3
 8020348:	001a      	movs	r2, r3
 802034a:	6a3b      	ldr	r3, [r7, #32]
 802034c:	189b      	adds	r3, r3, r2
 802034e:	623b      	str	r3, [r7, #32]
 8020350:	683b      	ldr	r3, [r7, #0]
 8020352:	781b      	ldrb	r3, [r3, #0]
 8020354:	00da      	lsls	r2, r3, #3
 8020356:	6a3b      	ldr	r3, [r7, #32]
 8020358:	18d3      	adds	r3, r2, r3
 802035a:	4a0e      	ldr	r2, [pc, #56]	@ (8020394 <USB_EPStartXfer+0x3d4>)
 802035c:	4694      	mov	ip, r2
 802035e:	4463      	add	r3, ip
 8020360:	61fb      	str	r3, [r7, #28]
 8020362:	1d7b      	adds	r3, r7, #5
 8020364:	33ff      	adds	r3, #255	@ 0xff
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	b29a      	uxth	r2, r3
 802036a:	69fb      	ldr	r3, [r7, #28]
 802036c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 802036e:	2076      	movs	r0, #118	@ 0x76
 8020370:	183b      	adds	r3, r7, r0
 8020372:	683a      	ldr	r2, [r7, #0]
 8020374:	8912      	ldrh	r2, [r2, #8]
 8020376:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020378:	683b      	ldr	r3, [r7, #0]
 802037a:	6959      	ldr	r1, [r3, #20]
 802037c:	1d7b      	adds	r3, r7, #5
 802037e:	33ff      	adds	r3, #255	@ 0xff
 8020380:	681b      	ldr	r3, [r3, #0]
 8020382:	b29c      	uxth	r4, r3
 8020384:	183b      	adds	r3, r7, r0
 8020386:	881a      	ldrh	r2, [r3, #0]
 8020388:	6878      	ldr	r0, [r7, #4]
 802038a:	0023      	movs	r3, r4
 802038c:	f001 f88a 	bl	80214a4 <USB_WritePMA>
 8020390:	e329      	b.n	80209e6 <USB_EPStartXfer+0xa26>
 8020392:	46c0      	nop			@ (mov r8, r8)
 8020394:	00000402 	.word	0x00000402
 8020398:	ffff8f8f 	.word	0xffff8f8f
 802039c:	ffff8180 	.word	0xffff8180
 80203a0:	00000406 	.word	0x00000406
 80203a4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80203a8:	683b      	ldr	r3, [r7, #0]
 80203aa:	785b      	ldrb	r3, [r3, #1]
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	d000      	beq.n	80203b2 <USB_EPStartXfer+0x3f2>
 80203b0:	e070      	b.n	8020494 <USB_EPStartXfer+0x4d4>
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	2250      	movs	r2, #80	@ 0x50
 80203ba:	5a9b      	ldrh	r3, [r3, r2]
 80203bc:	b29b      	uxth	r3, r3
 80203be:	001a      	movs	r2, r3
 80203c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80203c2:	189b      	adds	r3, r3, r2
 80203c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80203c6:	683b      	ldr	r3, [r7, #0]
 80203c8:	781b      	ldrb	r3, [r3, #0]
 80203ca:	00da      	lsls	r2, r3, #3
 80203cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80203ce:	18d3      	adds	r3, r2, r3
 80203d0:	4acd      	ldr	r2, [pc, #820]	@ (8020708 <USB_EPStartXfer+0x748>)
 80203d2:	4694      	mov	ip, r2
 80203d4:	4463      	add	r3, ip
 80203d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80203d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80203da:	881b      	ldrh	r3, [r3, #0]
 80203dc:	b29b      	uxth	r3, r3
 80203de:	059b      	lsls	r3, r3, #22
 80203e0:	0d9b      	lsrs	r3, r3, #22
 80203e2:	b29a      	uxth	r2, r3
 80203e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80203e6:	801a      	strh	r2, [r3, #0]
 80203e8:	1d7b      	adds	r3, r7, #5
 80203ea:	33ff      	adds	r3, #255	@ 0xff
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80203f0:	d922      	bls.n	8020438 <USB_EPStartXfer+0x478>
 80203f2:	1d7b      	adds	r3, r7, #5
 80203f4:	33ff      	adds	r3, #255	@ 0xff
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	095b      	lsrs	r3, r3, #5
 80203fa:	21f8      	movs	r1, #248	@ 0xf8
 80203fc:	187a      	adds	r2, r7, r1
 80203fe:	6013      	str	r3, [r2, #0]
 8020400:	1d7b      	adds	r3, r7, #5
 8020402:	33ff      	adds	r3, #255	@ 0xff
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	221f      	movs	r2, #31
 8020408:	4013      	ands	r3, r2
 802040a:	d104      	bne.n	8020416 <USB_EPStartXfer+0x456>
 802040c:	187b      	adds	r3, r7, r1
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	3b01      	subs	r3, #1
 8020412:	187a      	adds	r2, r7, r1
 8020414:	6013      	str	r3, [r2, #0]
 8020416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020418:	881b      	ldrh	r3, [r3, #0]
 802041a:	b29a      	uxth	r2, r3
 802041c:	23f8      	movs	r3, #248	@ 0xf8
 802041e:	18fb      	adds	r3, r7, r3
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	b29b      	uxth	r3, r3
 8020424:	029b      	lsls	r3, r3, #10
 8020426:	b29b      	uxth	r3, r3
 8020428:	4313      	orrs	r3, r2
 802042a:	b29b      	uxth	r3, r3
 802042c:	4ab7      	ldr	r2, [pc, #732]	@ (802070c <USB_EPStartXfer+0x74c>)
 802042e:	4313      	orrs	r3, r2
 8020430:	b29a      	uxth	r2, r3
 8020432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020434:	801a      	strh	r2, [r3, #0]
 8020436:	e04a      	b.n	80204ce <USB_EPStartXfer+0x50e>
 8020438:	1d7b      	adds	r3, r7, #5
 802043a:	33ff      	adds	r3, #255	@ 0xff
 802043c:	681b      	ldr	r3, [r3, #0]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d108      	bne.n	8020454 <USB_EPStartXfer+0x494>
 8020442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020444:	881b      	ldrh	r3, [r3, #0]
 8020446:	b29b      	uxth	r3, r3
 8020448:	4ab0      	ldr	r2, [pc, #704]	@ (802070c <USB_EPStartXfer+0x74c>)
 802044a:	4313      	orrs	r3, r2
 802044c:	b29a      	uxth	r2, r3
 802044e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020450:	801a      	strh	r2, [r3, #0]
 8020452:	e03c      	b.n	80204ce <USB_EPStartXfer+0x50e>
 8020454:	1d7b      	adds	r3, r7, #5
 8020456:	33ff      	adds	r3, #255	@ 0xff
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	085b      	lsrs	r3, r3, #1
 802045c:	21f8      	movs	r1, #248	@ 0xf8
 802045e:	187a      	adds	r2, r7, r1
 8020460:	6013      	str	r3, [r2, #0]
 8020462:	1d7b      	adds	r3, r7, #5
 8020464:	33ff      	adds	r3, #255	@ 0xff
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	2201      	movs	r2, #1
 802046a:	4013      	ands	r3, r2
 802046c:	d004      	beq.n	8020478 <USB_EPStartXfer+0x4b8>
 802046e:	187b      	adds	r3, r7, r1
 8020470:	681b      	ldr	r3, [r3, #0]
 8020472:	3301      	adds	r3, #1
 8020474:	187a      	adds	r2, r7, r1
 8020476:	6013      	str	r3, [r2, #0]
 8020478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802047a:	881b      	ldrh	r3, [r3, #0]
 802047c:	b29a      	uxth	r2, r3
 802047e:	23f8      	movs	r3, #248	@ 0xf8
 8020480:	18fb      	adds	r3, r7, r3
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	b29b      	uxth	r3, r3
 8020486:	029b      	lsls	r3, r3, #10
 8020488:	b29b      	uxth	r3, r3
 802048a:	4313      	orrs	r3, r2
 802048c:	b29a      	uxth	r2, r3
 802048e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020490:	801a      	strh	r2, [r3, #0]
 8020492:	e01c      	b.n	80204ce <USB_EPStartXfer+0x50e>
 8020494:	683b      	ldr	r3, [r7, #0]
 8020496:	785b      	ldrb	r3, [r3, #1]
 8020498:	2b01      	cmp	r3, #1
 802049a:	d118      	bne.n	80204ce <USB_EPStartXfer+0x50e>
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	653b      	str	r3, [r7, #80]	@ 0x50
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	2250      	movs	r2, #80	@ 0x50
 80204a4:	5a9b      	ldrh	r3, [r3, r2]
 80204a6:	b29b      	uxth	r3, r3
 80204a8:	001a      	movs	r2, r3
 80204aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80204ac:	189b      	adds	r3, r3, r2
 80204ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80204b0:	683b      	ldr	r3, [r7, #0]
 80204b2:	781b      	ldrb	r3, [r3, #0]
 80204b4:	00da      	lsls	r2, r3, #3
 80204b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80204b8:	18d3      	adds	r3, r2, r3
 80204ba:	4a93      	ldr	r2, [pc, #588]	@ (8020708 <USB_EPStartXfer+0x748>)
 80204bc:	4694      	mov	ip, r2
 80204be:	4463      	add	r3, ip
 80204c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80204c2:	1d7b      	adds	r3, r7, #5
 80204c4:	33ff      	adds	r3, #255	@ 0xff
 80204c6:	681b      	ldr	r3, [r3, #0]
 80204c8:	b29a      	uxth	r2, r3
 80204ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80204cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80204ce:	2076      	movs	r0, #118	@ 0x76
 80204d0:	183b      	adds	r3, r7, r0
 80204d2:	683a      	ldr	r2, [r7, #0]
 80204d4:	8912      	ldrh	r2, [r2, #8]
 80204d6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80204d8:	683b      	ldr	r3, [r7, #0]
 80204da:	6959      	ldr	r1, [r3, #20]
 80204dc:	1d7b      	adds	r3, r7, #5
 80204de:	33ff      	adds	r3, #255	@ 0xff
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	b29c      	uxth	r4, r3
 80204e4:	183b      	adds	r3, r7, r0
 80204e6:	881a      	ldrh	r2, [r3, #0]
 80204e8:	6878      	ldr	r0, [r7, #4]
 80204ea:	0023      	movs	r3, r4
 80204ec:	f000 ffda 	bl	80214a4 <USB_WritePMA>
            ep->xfer_buff += len;
 80204f0:	683b      	ldr	r3, [r7, #0]
 80204f2:	695a      	ldr	r2, [r3, #20]
 80204f4:	1d7b      	adds	r3, r7, #5
 80204f6:	33ff      	adds	r3, #255	@ 0xff
 80204f8:	681b      	ldr	r3, [r3, #0]
 80204fa:	18d2      	adds	r2, r2, r3
 80204fc:	683b      	ldr	r3, [r7, #0]
 80204fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020500:	683b      	ldr	r3, [r7, #0]
 8020502:	6a1a      	ldr	r2, [r3, #32]
 8020504:	683b      	ldr	r3, [r7, #0]
 8020506:	691b      	ldr	r3, [r3, #16]
 8020508:	429a      	cmp	r2, r3
 802050a:	d908      	bls.n	802051e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 802050c:	683b      	ldr	r3, [r7, #0]
 802050e:	6a1a      	ldr	r2, [r3, #32]
 8020510:	1d7b      	adds	r3, r7, #5
 8020512:	33ff      	adds	r3, #255	@ 0xff
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	1ad2      	subs	r2, r2, r3
 8020518:	683b      	ldr	r3, [r7, #0]
 802051a:	621a      	str	r2, [r3, #32]
 802051c:	e007      	b.n	802052e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 802051e:	683b      	ldr	r3, [r7, #0]
 8020520:	6a1b      	ldr	r3, [r3, #32]
 8020522:	1d7a      	adds	r2, r7, #5
 8020524:	32ff      	adds	r2, #255	@ 0xff
 8020526:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020528:	683b      	ldr	r3, [r7, #0]
 802052a:	2200      	movs	r2, #0
 802052c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	643b      	str	r3, [r7, #64]	@ 0x40
 8020532:	683b      	ldr	r3, [r7, #0]
 8020534:	785b      	ldrb	r3, [r3, #1]
 8020536:	2b00      	cmp	r3, #0
 8020538:	d000      	beq.n	802053c <USB_EPStartXfer+0x57c>
 802053a:	e070      	b.n	802061e <USB_EPStartXfer+0x65e>
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	2250      	movs	r2, #80	@ 0x50
 8020544:	5a9b      	ldrh	r3, [r3, r2]
 8020546:	b29b      	uxth	r3, r3
 8020548:	001a      	movs	r2, r3
 802054a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802054c:	189b      	adds	r3, r3, r2
 802054e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020550:	683b      	ldr	r3, [r7, #0]
 8020552:	781b      	ldrb	r3, [r3, #0]
 8020554:	00da      	lsls	r2, r3, #3
 8020556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020558:	18d3      	adds	r3, r2, r3
 802055a:	4a6d      	ldr	r2, [pc, #436]	@ (8020710 <USB_EPStartXfer+0x750>)
 802055c:	4694      	mov	ip, r2
 802055e:	4463      	add	r3, ip
 8020560:	637b      	str	r3, [r7, #52]	@ 0x34
 8020562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020564:	881b      	ldrh	r3, [r3, #0]
 8020566:	b29b      	uxth	r3, r3
 8020568:	059b      	lsls	r3, r3, #22
 802056a:	0d9b      	lsrs	r3, r3, #22
 802056c:	b29a      	uxth	r2, r3
 802056e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020570:	801a      	strh	r2, [r3, #0]
 8020572:	1d7b      	adds	r3, r7, #5
 8020574:	33ff      	adds	r3, #255	@ 0xff
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	2b3e      	cmp	r3, #62	@ 0x3e
 802057a:	d922      	bls.n	80205c2 <USB_EPStartXfer+0x602>
 802057c:	1d7b      	adds	r3, r7, #5
 802057e:	33ff      	adds	r3, #255	@ 0xff
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	095b      	lsrs	r3, r3, #5
 8020584:	21f4      	movs	r1, #244	@ 0xf4
 8020586:	187a      	adds	r2, r7, r1
 8020588:	6013      	str	r3, [r2, #0]
 802058a:	1d7b      	adds	r3, r7, #5
 802058c:	33ff      	adds	r3, #255	@ 0xff
 802058e:	681b      	ldr	r3, [r3, #0]
 8020590:	221f      	movs	r2, #31
 8020592:	4013      	ands	r3, r2
 8020594:	d104      	bne.n	80205a0 <USB_EPStartXfer+0x5e0>
 8020596:	187b      	adds	r3, r7, r1
 8020598:	681b      	ldr	r3, [r3, #0]
 802059a:	3b01      	subs	r3, #1
 802059c:	187a      	adds	r2, r7, r1
 802059e:	6013      	str	r3, [r2, #0]
 80205a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205a2:	881b      	ldrh	r3, [r3, #0]
 80205a4:	b29a      	uxth	r2, r3
 80205a6:	23f4      	movs	r3, #244	@ 0xf4
 80205a8:	18fb      	adds	r3, r7, r3
 80205aa:	681b      	ldr	r3, [r3, #0]
 80205ac:	b29b      	uxth	r3, r3
 80205ae:	029b      	lsls	r3, r3, #10
 80205b0:	b29b      	uxth	r3, r3
 80205b2:	4313      	orrs	r3, r2
 80205b4:	b29b      	uxth	r3, r3
 80205b6:	4a55      	ldr	r2, [pc, #340]	@ (802070c <USB_EPStartXfer+0x74c>)
 80205b8:	4313      	orrs	r3, r2
 80205ba:	b29a      	uxth	r2, r3
 80205bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205be:	801a      	strh	r2, [r3, #0]
 80205c0:	e048      	b.n	8020654 <USB_EPStartXfer+0x694>
 80205c2:	1d7b      	adds	r3, r7, #5
 80205c4:	33ff      	adds	r3, #255	@ 0xff
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d108      	bne.n	80205de <USB_EPStartXfer+0x61e>
 80205cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205ce:	881b      	ldrh	r3, [r3, #0]
 80205d0:	b29b      	uxth	r3, r3
 80205d2:	4a4e      	ldr	r2, [pc, #312]	@ (802070c <USB_EPStartXfer+0x74c>)
 80205d4:	4313      	orrs	r3, r2
 80205d6:	b29a      	uxth	r2, r3
 80205d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205da:	801a      	strh	r2, [r3, #0]
 80205dc:	e03a      	b.n	8020654 <USB_EPStartXfer+0x694>
 80205de:	1d7b      	adds	r3, r7, #5
 80205e0:	33ff      	adds	r3, #255	@ 0xff
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	085b      	lsrs	r3, r3, #1
 80205e6:	21f4      	movs	r1, #244	@ 0xf4
 80205e8:	187a      	adds	r2, r7, r1
 80205ea:	6013      	str	r3, [r2, #0]
 80205ec:	1d7b      	adds	r3, r7, #5
 80205ee:	33ff      	adds	r3, #255	@ 0xff
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	2201      	movs	r2, #1
 80205f4:	4013      	ands	r3, r2
 80205f6:	d004      	beq.n	8020602 <USB_EPStartXfer+0x642>
 80205f8:	187b      	adds	r3, r7, r1
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	3301      	adds	r3, #1
 80205fe:	187a      	adds	r2, r7, r1
 8020600:	6013      	str	r3, [r2, #0]
 8020602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020604:	881b      	ldrh	r3, [r3, #0]
 8020606:	b29a      	uxth	r2, r3
 8020608:	23f4      	movs	r3, #244	@ 0xf4
 802060a:	18fb      	adds	r3, r7, r3
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	b29b      	uxth	r3, r3
 8020610:	029b      	lsls	r3, r3, #10
 8020612:	b29b      	uxth	r3, r3
 8020614:	4313      	orrs	r3, r2
 8020616:	b29a      	uxth	r2, r3
 8020618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802061a:	801a      	strh	r2, [r3, #0]
 802061c:	e01a      	b.n	8020654 <USB_EPStartXfer+0x694>
 802061e:	683b      	ldr	r3, [r7, #0]
 8020620:	785b      	ldrb	r3, [r3, #1]
 8020622:	2b01      	cmp	r3, #1
 8020624:	d116      	bne.n	8020654 <USB_EPStartXfer+0x694>
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	2250      	movs	r2, #80	@ 0x50
 802062a:	5a9b      	ldrh	r3, [r3, r2]
 802062c:	b29b      	uxth	r3, r3
 802062e:	001a      	movs	r2, r3
 8020630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020632:	189b      	adds	r3, r3, r2
 8020634:	643b      	str	r3, [r7, #64]	@ 0x40
 8020636:	683b      	ldr	r3, [r7, #0]
 8020638:	781b      	ldrb	r3, [r3, #0]
 802063a:	00da      	lsls	r2, r3, #3
 802063c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802063e:	18d3      	adds	r3, r2, r3
 8020640:	4a33      	ldr	r2, [pc, #204]	@ (8020710 <USB_EPStartXfer+0x750>)
 8020642:	4694      	mov	ip, r2
 8020644:	4463      	add	r3, ip
 8020646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020648:	1d7b      	adds	r3, r7, #5
 802064a:	33ff      	adds	r3, #255	@ 0xff
 802064c:	681b      	ldr	r3, [r3, #0]
 802064e:	b29a      	uxth	r2, r3
 8020650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020652:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020654:	2076      	movs	r0, #118	@ 0x76
 8020656:	183b      	adds	r3, r7, r0
 8020658:	683a      	ldr	r2, [r7, #0]
 802065a:	8952      	ldrh	r2, [r2, #10]
 802065c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802065e:	683b      	ldr	r3, [r7, #0]
 8020660:	6959      	ldr	r1, [r3, #20]
 8020662:	1d7b      	adds	r3, r7, #5
 8020664:	33ff      	adds	r3, #255	@ 0xff
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	b29c      	uxth	r4, r3
 802066a:	183b      	adds	r3, r7, r0
 802066c:	881a      	ldrh	r2, [r3, #0]
 802066e:	6878      	ldr	r0, [r7, #4]
 8020670:	0023      	movs	r3, r4
 8020672:	f000 ff17 	bl	80214a4 <USB_WritePMA>
 8020676:	e1b6      	b.n	80209e6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020678:	683b      	ldr	r3, [r7, #0]
 802067a:	6a1b      	ldr	r3, [r3, #32]
 802067c:	1d7a      	adds	r2, r7, #5
 802067e:	32ff      	adds	r2, #255	@ 0xff
 8020680:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8020682:	687a      	ldr	r2, [r7, #4]
 8020684:	683b      	ldr	r3, [r7, #0]
 8020686:	781b      	ldrb	r3, [r3, #0]
 8020688:	009b      	lsls	r3, r3, #2
 802068a:	18d3      	adds	r3, r2, r3
 802068c:	881b      	ldrh	r3, [r3, #0]
 802068e:	b29a      	uxth	r2, r3
 8020690:	2062      	movs	r0, #98	@ 0x62
 8020692:	183b      	adds	r3, r7, r0
 8020694:	491f      	ldr	r1, [pc, #124]	@ (8020714 <USB_EPStartXfer+0x754>)
 8020696:	400a      	ands	r2, r1
 8020698:	801a      	strh	r2, [r3, #0]
 802069a:	687a      	ldr	r2, [r7, #4]
 802069c:	683b      	ldr	r3, [r7, #0]
 802069e:	781b      	ldrb	r3, [r3, #0]
 80206a0:	009b      	lsls	r3, r3, #2
 80206a2:	18d3      	adds	r3, r2, r3
 80206a4:	183a      	adds	r2, r7, r0
 80206a6:	8812      	ldrh	r2, [r2, #0]
 80206a8:	491b      	ldr	r1, [pc, #108]	@ (8020718 <USB_EPStartXfer+0x758>)
 80206aa:	430a      	orrs	r2, r1
 80206ac:	b292      	uxth	r2, r2
 80206ae:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	2250      	movs	r2, #80	@ 0x50
 80206b8:	5a9b      	ldrh	r3, [r3, r2]
 80206ba:	b29b      	uxth	r3, r3
 80206bc:	001a      	movs	r2, r3
 80206be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80206c0:	189b      	adds	r3, r3, r2
 80206c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80206c4:	683b      	ldr	r3, [r7, #0]
 80206c6:	781b      	ldrb	r3, [r3, #0]
 80206c8:	00da      	lsls	r2, r3, #3
 80206ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80206cc:	18d3      	adds	r3, r2, r3
 80206ce:	4a0e      	ldr	r2, [pc, #56]	@ (8020708 <USB_EPStartXfer+0x748>)
 80206d0:	4694      	mov	ip, r2
 80206d2:	4463      	add	r3, ip
 80206d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80206d6:	1d7b      	adds	r3, r7, #5
 80206d8:	33ff      	adds	r3, #255	@ 0xff
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	b29a      	uxth	r2, r3
 80206de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80206e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80206e2:	2076      	movs	r0, #118	@ 0x76
 80206e4:	183b      	adds	r3, r7, r0
 80206e6:	683a      	ldr	r2, [r7, #0]
 80206e8:	8912      	ldrh	r2, [r2, #8]
 80206ea:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80206ec:	683b      	ldr	r3, [r7, #0]
 80206ee:	6959      	ldr	r1, [r3, #20]
 80206f0:	1d7b      	adds	r3, r7, #5
 80206f2:	33ff      	adds	r3, #255	@ 0xff
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	b29c      	uxth	r4, r3
 80206f8:	183b      	adds	r3, r7, r0
 80206fa:	881a      	ldrh	r2, [r3, #0]
 80206fc:	6878      	ldr	r0, [r7, #4]
 80206fe:	0023      	movs	r3, r4
 8020700:	f000 fed0 	bl	80214a4 <USB_WritePMA>
 8020704:	e16f      	b.n	80209e6 <USB_EPStartXfer+0xa26>
 8020706:	46c0      	nop			@ (mov r8, r8)
 8020708:	00000402 	.word	0x00000402
 802070c:	ffff8000 	.word	0xffff8000
 8020710:	00000406 	.word	0x00000406
 8020714:	ffff8e8f 	.word	0xffff8e8f
 8020718:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 802071c:	683b      	ldr	r3, [r7, #0]
 802071e:	6a1a      	ldr	r2, [r3, #32]
 8020720:	1d7b      	adds	r3, r7, #5
 8020722:	33ff      	adds	r3, #255	@ 0xff
 8020724:	681b      	ldr	r3, [r3, #0]
 8020726:	1ad2      	subs	r2, r2, r3
 8020728:	683b      	ldr	r3, [r7, #0]
 802072a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 802072c:	687a      	ldr	r2, [r7, #4]
 802072e:	683b      	ldr	r3, [r7, #0]
 8020730:	781b      	ldrb	r3, [r3, #0]
 8020732:	009b      	lsls	r3, r3, #2
 8020734:	18d3      	adds	r3, r2, r3
 8020736:	881b      	ldrh	r3, [r3, #0]
 8020738:	b29b      	uxth	r3, r3
 802073a:	001a      	movs	r2, r3
 802073c:	2340      	movs	r3, #64	@ 0x40
 802073e:	4013      	ands	r3, r2
 8020740:	d100      	bne.n	8020744 <USB_EPStartXfer+0x784>
 8020742:	e0a4      	b.n	802088e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	673b      	str	r3, [r7, #112]	@ 0x70
 8020748:	683b      	ldr	r3, [r7, #0]
 802074a:	785b      	ldrb	r3, [r3, #1]
 802074c:	2b00      	cmp	r3, #0
 802074e:	d000      	beq.n	8020752 <USB_EPStartXfer+0x792>
 8020750:	e070      	b.n	8020834 <USB_EPStartXfer+0x874>
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020756:	687b      	ldr	r3, [r7, #4]
 8020758:	2250      	movs	r2, #80	@ 0x50
 802075a:	5a9b      	ldrh	r3, [r3, r2]
 802075c:	b29b      	uxth	r3, r3
 802075e:	001a      	movs	r2, r3
 8020760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020762:	189b      	adds	r3, r3, r2
 8020764:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020766:	683b      	ldr	r3, [r7, #0]
 8020768:	781b      	ldrb	r3, [r3, #0]
 802076a:	00da      	lsls	r2, r3, #3
 802076c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802076e:	18d3      	adds	r3, r2, r3
 8020770:	4abc      	ldr	r2, [pc, #752]	@ (8020a64 <USB_EPStartXfer+0xaa4>)
 8020772:	4694      	mov	ip, r2
 8020774:	4463      	add	r3, ip
 8020776:	667b      	str	r3, [r7, #100]	@ 0x64
 8020778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802077a:	881b      	ldrh	r3, [r3, #0]
 802077c:	b29b      	uxth	r3, r3
 802077e:	059b      	lsls	r3, r3, #22
 8020780:	0d9b      	lsrs	r3, r3, #22
 8020782:	b29a      	uxth	r2, r3
 8020784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020786:	801a      	strh	r2, [r3, #0]
 8020788:	1d7b      	adds	r3, r7, #5
 802078a:	33ff      	adds	r3, #255	@ 0xff
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020790:	d922      	bls.n	80207d8 <USB_EPStartXfer+0x818>
 8020792:	1d7b      	adds	r3, r7, #5
 8020794:	33ff      	adds	r3, #255	@ 0xff
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	095b      	lsrs	r3, r3, #5
 802079a:	21f0      	movs	r1, #240	@ 0xf0
 802079c:	187a      	adds	r2, r7, r1
 802079e:	6013      	str	r3, [r2, #0]
 80207a0:	1d7b      	adds	r3, r7, #5
 80207a2:	33ff      	adds	r3, #255	@ 0xff
 80207a4:	681b      	ldr	r3, [r3, #0]
 80207a6:	221f      	movs	r2, #31
 80207a8:	4013      	ands	r3, r2
 80207aa:	d104      	bne.n	80207b6 <USB_EPStartXfer+0x7f6>
 80207ac:	187b      	adds	r3, r7, r1
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	3b01      	subs	r3, #1
 80207b2:	187a      	adds	r2, r7, r1
 80207b4:	6013      	str	r3, [r2, #0]
 80207b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207b8:	881b      	ldrh	r3, [r3, #0]
 80207ba:	b29a      	uxth	r2, r3
 80207bc:	23f0      	movs	r3, #240	@ 0xf0
 80207be:	18fb      	adds	r3, r7, r3
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	b29b      	uxth	r3, r3
 80207c4:	029b      	lsls	r3, r3, #10
 80207c6:	b29b      	uxth	r3, r3
 80207c8:	4313      	orrs	r3, r2
 80207ca:	b29b      	uxth	r3, r3
 80207cc:	4aa6      	ldr	r2, [pc, #664]	@ (8020a68 <USB_EPStartXfer+0xaa8>)
 80207ce:	4313      	orrs	r3, r2
 80207d0:	b29a      	uxth	r2, r3
 80207d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207d4:	801a      	strh	r2, [r3, #0]
 80207d6:	e048      	b.n	802086a <USB_EPStartXfer+0x8aa>
 80207d8:	1d7b      	adds	r3, r7, #5
 80207da:	33ff      	adds	r3, #255	@ 0xff
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	2b00      	cmp	r3, #0
 80207e0:	d108      	bne.n	80207f4 <USB_EPStartXfer+0x834>
 80207e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207e4:	881b      	ldrh	r3, [r3, #0]
 80207e6:	b29b      	uxth	r3, r3
 80207e8:	4a9f      	ldr	r2, [pc, #636]	@ (8020a68 <USB_EPStartXfer+0xaa8>)
 80207ea:	4313      	orrs	r3, r2
 80207ec:	b29a      	uxth	r2, r3
 80207ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207f0:	801a      	strh	r2, [r3, #0]
 80207f2:	e03a      	b.n	802086a <USB_EPStartXfer+0x8aa>
 80207f4:	1d7b      	adds	r3, r7, #5
 80207f6:	33ff      	adds	r3, #255	@ 0xff
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	085b      	lsrs	r3, r3, #1
 80207fc:	21f0      	movs	r1, #240	@ 0xf0
 80207fe:	187a      	adds	r2, r7, r1
 8020800:	6013      	str	r3, [r2, #0]
 8020802:	1d7b      	adds	r3, r7, #5
 8020804:	33ff      	adds	r3, #255	@ 0xff
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	2201      	movs	r2, #1
 802080a:	4013      	ands	r3, r2
 802080c:	d004      	beq.n	8020818 <USB_EPStartXfer+0x858>
 802080e:	187b      	adds	r3, r7, r1
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	3301      	adds	r3, #1
 8020814:	187a      	adds	r2, r7, r1
 8020816:	6013      	str	r3, [r2, #0]
 8020818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802081a:	881b      	ldrh	r3, [r3, #0]
 802081c:	b29a      	uxth	r2, r3
 802081e:	23f0      	movs	r3, #240	@ 0xf0
 8020820:	18fb      	adds	r3, r7, r3
 8020822:	681b      	ldr	r3, [r3, #0]
 8020824:	b29b      	uxth	r3, r3
 8020826:	029b      	lsls	r3, r3, #10
 8020828:	b29b      	uxth	r3, r3
 802082a:	4313      	orrs	r3, r2
 802082c:	b29a      	uxth	r2, r3
 802082e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020830:	801a      	strh	r2, [r3, #0]
 8020832:	e01a      	b.n	802086a <USB_EPStartXfer+0x8aa>
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	785b      	ldrb	r3, [r3, #1]
 8020838:	2b01      	cmp	r3, #1
 802083a:	d116      	bne.n	802086a <USB_EPStartXfer+0x8aa>
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	2250      	movs	r2, #80	@ 0x50
 8020840:	5a9b      	ldrh	r3, [r3, r2]
 8020842:	b29b      	uxth	r3, r3
 8020844:	001a      	movs	r2, r3
 8020846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020848:	189b      	adds	r3, r3, r2
 802084a:	673b      	str	r3, [r7, #112]	@ 0x70
 802084c:	683b      	ldr	r3, [r7, #0]
 802084e:	781b      	ldrb	r3, [r3, #0]
 8020850:	00da      	lsls	r2, r3, #3
 8020852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020854:	18d3      	adds	r3, r2, r3
 8020856:	4a83      	ldr	r2, [pc, #524]	@ (8020a64 <USB_EPStartXfer+0xaa4>)
 8020858:	4694      	mov	ip, r2
 802085a:	4463      	add	r3, ip
 802085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802085e:	1d7b      	adds	r3, r7, #5
 8020860:	33ff      	adds	r3, #255	@ 0xff
 8020862:	681b      	ldr	r3, [r3, #0]
 8020864:	b29a      	uxth	r2, r3
 8020866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020868:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 802086a:	2076      	movs	r0, #118	@ 0x76
 802086c:	183b      	adds	r3, r7, r0
 802086e:	683a      	ldr	r2, [r7, #0]
 8020870:	8952      	ldrh	r2, [r2, #10]
 8020872:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020874:	683b      	ldr	r3, [r7, #0]
 8020876:	6959      	ldr	r1, [r3, #20]
 8020878:	1d7b      	adds	r3, r7, #5
 802087a:	33ff      	adds	r3, #255	@ 0xff
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	b29c      	uxth	r4, r3
 8020880:	183b      	adds	r3, r7, r0
 8020882:	881a      	ldrh	r2, [r3, #0]
 8020884:	6878      	ldr	r0, [r7, #4]
 8020886:	0023      	movs	r3, r4
 8020888:	f000 fe0c 	bl	80214a4 <USB_WritePMA>
 802088c:	e0ab      	b.n	80209e6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802088e:	683b      	ldr	r3, [r7, #0]
 8020890:	785b      	ldrb	r3, [r3, #1]
 8020892:	2b00      	cmp	r3, #0
 8020894:	d000      	beq.n	8020898 <USB_EPStartXfer+0x8d8>
 8020896:	e070      	b.n	802097a <USB_EPStartXfer+0x9ba>
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	2250      	movs	r2, #80	@ 0x50
 80208a0:	5a9b      	ldrh	r3, [r3, r2]
 80208a2:	b29b      	uxth	r3, r3
 80208a4:	001a      	movs	r2, r3
 80208a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80208a8:	189b      	adds	r3, r3, r2
 80208aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80208ac:	683b      	ldr	r3, [r7, #0]
 80208ae:	781b      	ldrb	r3, [r3, #0]
 80208b0:	00da      	lsls	r2, r3, #3
 80208b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80208b4:	18d3      	adds	r3, r2, r3
 80208b6:	4a6d      	ldr	r2, [pc, #436]	@ (8020a6c <USB_EPStartXfer+0xaac>)
 80208b8:	4694      	mov	ip, r2
 80208ba:	4463      	add	r3, ip
 80208bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80208be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80208c0:	881b      	ldrh	r3, [r3, #0]
 80208c2:	b29b      	uxth	r3, r3
 80208c4:	059b      	lsls	r3, r3, #22
 80208c6:	0d9b      	lsrs	r3, r3, #22
 80208c8:	b29a      	uxth	r2, r3
 80208ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80208cc:	801a      	strh	r2, [r3, #0]
 80208ce:	1d7b      	adds	r3, r7, #5
 80208d0:	33ff      	adds	r3, #255	@ 0xff
 80208d2:	681b      	ldr	r3, [r3, #0]
 80208d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80208d6:	d922      	bls.n	802091e <USB_EPStartXfer+0x95e>
 80208d8:	1d7b      	adds	r3, r7, #5
 80208da:	33ff      	adds	r3, #255	@ 0xff
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	095b      	lsrs	r3, r3, #5
 80208e0:	21ec      	movs	r1, #236	@ 0xec
 80208e2:	187a      	adds	r2, r7, r1
 80208e4:	6013      	str	r3, [r2, #0]
 80208e6:	1d7b      	adds	r3, r7, #5
 80208e8:	33ff      	adds	r3, #255	@ 0xff
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	221f      	movs	r2, #31
 80208ee:	4013      	ands	r3, r2
 80208f0:	d104      	bne.n	80208fc <USB_EPStartXfer+0x93c>
 80208f2:	187b      	adds	r3, r7, r1
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	3b01      	subs	r3, #1
 80208f8:	187a      	adds	r2, r7, r1
 80208fa:	6013      	str	r3, [r2, #0]
 80208fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80208fe:	881b      	ldrh	r3, [r3, #0]
 8020900:	b29a      	uxth	r2, r3
 8020902:	23ec      	movs	r3, #236	@ 0xec
 8020904:	18fb      	adds	r3, r7, r3
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	b29b      	uxth	r3, r3
 802090a:	029b      	lsls	r3, r3, #10
 802090c:	b29b      	uxth	r3, r3
 802090e:	4313      	orrs	r3, r2
 8020910:	b29b      	uxth	r3, r3
 8020912:	4a55      	ldr	r2, [pc, #340]	@ (8020a68 <USB_EPStartXfer+0xaa8>)
 8020914:	4313      	orrs	r3, r2
 8020916:	b29a      	uxth	r2, r3
 8020918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802091a:	801a      	strh	r2, [r3, #0]
 802091c:	e052      	b.n	80209c4 <USB_EPStartXfer+0xa04>
 802091e:	1d7b      	adds	r3, r7, #5
 8020920:	33ff      	adds	r3, #255	@ 0xff
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	2b00      	cmp	r3, #0
 8020926:	d108      	bne.n	802093a <USB_EPStartXfer+0x97a>
 8020928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802092a:	881b      	ldrh	r3, [r3, #0]
 802092c:	b29b      	uxth	r3, r3
 802092e:	4a4e      	ldr	r2, [pc, #312]	@ (8020a68 <USB_EPStartXfer+0xaa8>)
 8020930:	4313      	orrs	r3, r2
 8020932:	b29a      	uxth	r2, r3
 8020934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020936:	801a      	strh	r2, [r3, #0]
 8020938:	e044      	b.n	80209c4 <USB_EPStartXfer+0xa04>
 802093a:	1d7b      	adds	r3, r7, #5
 802093c:	33ff      	adds	r3, #255	@ 0xff
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	085b      	lsrs	r3, r3, #1
 8020942:	21ec      	movs	r1, #236	@ 0xec
 8020944:	187a      	adds	r2, r7, r1
 8020946:	6013      	str	r3, [r2, #0]
 8020948:	1d7b      	adds	r3, r7, #5
 802094a:	33ff      	adds	r3, #255	@ 0xff
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	2201      	movs	r2, #1
 8020950:	4013      	ands	r3, r2
 8020952:	d004      	beq.n	802095e <USB_EPStartXfer+0x99e>
 8020954:	187b      	adds	r3, r7, r1
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	3301      	adds	r3, #1
 802095a:	187a      	adds	r2, r7, r1
 802095c:	6013      	str	r3, [r2, #0]
 802095e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020960:	881b      	ldrh	r3, [r3, #0]
 8020962:	b29a      	uxth	r2, r3
 8020964:	23ec      	movs	r3, #236	@ 0xec
 8020966:	18fb      	adds	r3, r7, r3
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	b29b      	uxth	r3, r3
 802096c:	029b      	lsls	r3, r3, #10
 802096e:	b29b      	uxth	r3, r3
 8020970:	4313      	orrs	r3, r2
 8020972:	b29a      	uxth	r2, r3
 8020974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020976:	801a      	strh	r2, [r3, #0]
 8020978:	e024      	b.n	80209c4 <USB_EPStartXfer+0xa04>
 802097a:	683b      	ldr	r3, [r7, #0]
 802097c:	785b      	ldrb	r3, [r3, #1]
 802097e:	2b01      	cmp	r3, #1
 8020980:	d120      	bne.n	80209c4 <USB_EPStartXfer+0xa04>
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	2184      	movs	r1, #132	@ 0x84
 8020986:	187a      	adds	r2, r7, r1
 8020988:	6013      	str	r3, [r2, #0]
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	2250      	movs	r2, #80	@ 0x50
 802098e:	5a9b      	ldrh	r3, [r3, r2]
 8020990:	b29b      	uxth	r3, r3
 8020992:	001a      	movs	r2, r3
 8020994:	187b      	adds	r3, r7, r1
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	189b      	adds	r3, r3, r2
 802099a:	187a      	adds	r2, r7, r1
 802099c:	6013      	str	r3, [r2, #0]
 802099e:	683b      	ldr	r3, [r7, #0]
 80209a0:	781b      	ldrb	r3, [r3, #0]
 80209a2:	00da      	lsls	r2, r3, #3
 80209a4:	187b      	adds	r3, r7, r1
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	18d3      	adds	r3, r2, r3
 80209aa:	4a30      	ldr	r2, [pc, #192]	@ (8020a6c <USB_EPStartXfer+0xaac>)
 80209ac:	4694      	mov	ip, r2
 80209ae:	4463      	add	r3, ip
 80209b0:	2180      	movs	r1, #128	@ 0x80
 80209b2:	187a      	adds	r2, r7, r1
 80209b4:	6013      	str	r3, [r2, #0]
 80209b6:	1d7b      	adds	r3, r7, #5
 80209b8:	33ff      	adds	r3, #255	@ 0xff
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	b29a      	uxth	r2, r3
 80209be:	187b      	adds	r3, r7, r1
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80209c4:	2076      	movs	r0, #118	@ 0x76
 80209c6:	183b      	adds	r3, r7, r0
 80209c8:	683a      	ldr	r2, [r7, #0]
 80209ca:	8912      	ldrh	r2, [r2, #8]
 80209cc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80209ce:	683b      	ldr	r3, [r7, #0]
 80209d0:	6959      	ldr	r1, [r3, #20]
 80209d2:	1d7b      	adds	r3, r7, #5
 80209d4:	33ff      	adds	r3, #255	@ 0xff
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	b29c      	uxth	r4, r3
 80209da:	183b      	adds	r3, r7, r0
 80209dc:	881a      	ldrh	r2, [r3, #0]
 80209de:	6878      	ldr	r0, [r7, #4]
 80209e0:	0023      	movs	r3, r4
 80209e2:	f000 fd5f 	bl	80214a4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80209e6:	687a      	ldr	r2, [r7, #4]
 80209e8:	683b      	ldr	r3, [r7, #0]
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	009b      	lsls	r3, r3, #2
 80209ee:	18d3      	adds	r3, r2, r3
 80209f0:	881b      	ldrh	r3, [r3, #0]
 80209f2:	b29a      	uxth	r2, r3
 80209f4:	200a      	movs	r0, #10
 80209f6:	183b      	adds	r3, r7, r0
 80209f8:	491d      	ldr	r1, [pc, #116]	@ (8020a70 <USB_EPStartXfer+0xab0>)
 80209fa:	400a      	ands	r2, r1
 80209fc:	801a      	strh	r2, [r3, #0]
 80209fe:	183b      	adds	r3, r7, r0
 8020a00:	183a      	adds	r2, r7, r0
 8020a02:	8812      	ldrh	r2, [r2, #0]
 8020a04:	2110      	movs	r1, #16
 8020a06:	404a      	eors	r2, r1
 8020a08:	801a      	strh	r2, [r3, #0]
 8020a0a:	183b      	adds	r3, r7, r0
 8020a0c:	183a      	adds	r2, r7, r0
 8020a0e:	8812      	ldrh	r2, [r2, #0]
 8020a10:	2120      	movs	r1, #32
 8020a12:	404a      	eors	r2, r1
 8020a14:	801a      	strh	r2, [r3, #0]
 8020a16:	687a      	ldr	r2, [r7, #4]
 8020a18:	683b      	ldr	r3, [r7, #0]
 8020a1a:	781b      	ldrb	r3, [r3, #0]
 8020a1c:	009b      	lsls	r3, r3, #2
 8020a1e:	18d3      	adds	r3, r2, r3
 8020a20:	183a      	adds	r2, r7, r0
 8020a22:	8812      	ldrh	r2, [r2, #0]
 8020a24:	4913      	ldr	r1, [pc, #76]	@ (8020a74 <USB_EPStartXfer+0xab4>)
 8020a26:	430a      	orrs	r2, r1
 8020a28:	b292      	uxth	r2, r2
 8020a2a:	801a      	strh	r2, [r3, #0]
 8020a2c:	f000 fbf4 	bl	8021218 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020a30:	683b      	ldr	r3, [r7, #0]
 8020a32:	7b1b      	ldrb	r3, [r3, #12]
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	d000      	beq.n	8020a3a <USB_EPStartXfer+0xa7a>
 8020a38:	e0a9      	b.n	8020b8e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8020a3a:	683b      	ldr	r3, [r7, #0]
 8020a3c:	699a      	ldr	r2, [r3, #24]
 8020a3e:	683b      	ldr	r3, [r7, #0]
 8020a40:	691b      	ldr	r3, [r3, #16]
 8020a42:	429a      	cmp	r2, r3
 8020a44:	d918      	bls.n	8020a78 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020a46:	683b      	ldr	r3, [r7, #0]
 8020a48:	691b      	ldr	r3, [r3, #16]
 8020a4a:	1d7a      	adds	r2, r7, #5
 8020a4c:	32ff      	adds	r2, #255	@ 0xff
 8020a4e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020a50:	683b      	ldr	r3, [r7, #0]
 8020a52:	699a      	ldr	r2, [r3, #24]
 8020a54:	1d7b      	adds	r3, r7, #5
 8020a56:	33ff      	adds	r3, #255	@ 0xff
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	1ad2      	subs	r2, r2, r3
 8020a5c:	683b      	ldr	r3, [r7, #0]
 8020a5e:	619a      	str	r2, [r3, #24]
 8020a60:	e012      	b.n	8020a88 <USB_EPStartXfer+0xac8>
 8020a62:	46c0      	nop			@ (mov r8, r8)
 8020a64:	00000406 	.word	0x00000406
 8020a68:	ffff8000 	.word	0xffff8000
 8020a6c:	00000402 	.word	0x00000402
 8020a70:	ffff8fbf 	.word	0xffff8fbf
 8020a74:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020a78:	683b      	ldr	r3, [r7, #0]
 8020a7a:	699b      	ldr	r3, [r3, #24]
 8020a7c:	1d7a      	adds	r2, r7, #5
 8020a7e:	32ff      	adds	r2, #255	@ 0xff
 8020a80:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020a82:	683b      	ldr	r3, [r7, #0]
 8020a84:	2200      	movs	r2, #0
 8020a86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	2190      	movs	r1, #144	@ 0x90
 8020a8c:	187a      	adds	r2, r7, r1
 8020a8e:	6013      	str	r3, [r2, #0]
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	2250      	movs	r2, #80	@ 0x50
 8020a94:	5a9b      	ldrh	r3, [r3, r2]
 8020a96:	b29b      	uxth	r3, r3
 8020a98:	001a      	movs	r2, r3
 8020a9a:	187b      	adds	r3, r7, r1
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	189b      	adds	r3, r3, r2
 8020aa0:	187a      	adds	r2, r7, r1
 8020aa2:	6013      	str	r3, [r2, #0]
 8020aa4:	683b      	ldr	r3, [r7, #0]
 8020aa6:	781b      	ldrb	r3, [r3, #0]
 8020aa8:	00da      	lsls	r2, r3, #3
 8020aaa:	187b      	adds	r3, r7, r1
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	18d3      	adds	r3, r2, r3
 8020ab0:	4acf      	ldr	r2, [pc, #828]	@ (8020df0 <USB_EPStartXfer+0xe30>)
 8020ab2:	4694      	mov	ip, r2
 8020ab4:	4463      	add	r3, ip
 8020ab6:	218c      	movs	r1, #140	@ 0x8c
 8020ab8:	187a      	adds	r2, r7, r1
 8020aba:	6013      	str	r3, [r2, #0]
 8020abc:	187b      	adds	r3, r7, r1
 8020abe:	681b      	ldr	r3, [r3, #0]
 8020ac0:	881b      	ldrh	r3, [r3, #0]
 8020ac2:	b29b      	uxth	r3, r3
 8020ac4:	059b      	lsls	r3, r3, #22
 8020ac6:	0d9b      	lsrs	r3, r3, #22
 8020ac8:	b29a      	uxth	r2, r3
 8020aca:	187b      	adds	r3, r7, r1
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	801a      	strh	r2, [r3, #0]
 8020ad0:	1d7b      	adds	r3, r7, #5
 8020ad2:	33ff      	adds	r3, #255	@ 0xff
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	2b3e      	cmp	r3, #62	@ 0x3e
 8020ad8:	d925      	bls.n	8020b26 <USB_EPStartXfer+0xb66>
 8020ada:	1d7b      	adds	r3, r7, #5
 8020adc:	33ff      	adds	r3, #255	@ 0xff
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	095b      	lsrs	r3, r3, #5
 8020ae2:	21e8      	movs	r1, #232	@ 0xe8
 8020ae4:	187a      	adds	r2, r7, r1
 8020ae6:	6013      	str	r3, [r2, #0]
 8020ae8:	1d7b      	adds	r3, r7, #5
 8020aea:	33ff      	adds	r3, #255	@ 0xff
 8020aec:	681b      	ldr	r3, [r3, #0]
 8020aee:	221f      	movs	r2, #31
 8020af0:	4013      	ands	r3, r2
 8020af2:	d104      	bne.n	8020afe <USB_EPStartXfer+0xb3e>
 8020af4:	187b      	adds	r3, r7, r1
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	3b01      	subs	r3, #1
 8020afa:	187a      	adds	r2, r7, r1
 8020afc:	6013      	str	r3, [r2, #0]
 8020afe:	218c      	movs	r1, #140	@ 0x8c
 8020b00:	187b      	adds	r3, r7, r1
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	881b      	ldrh	r3, [r3, #0]
 8020b06:	b29a      	uxth	r2, r3
 8020b08:	23e8      	movs	r3, #232	@ 0xe8
 8020b0a:	18fb      	adds	r3, r7, r3
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	b29b      	uxth	r3, r3
 8020b10:	029b      	lsls	r3, r3, #10
 8020b12:	b29b      	uxth	r3, r3
 8020b14:	4313      	orrs	r3, r2
 8020b16:	b29b      	uxth	r3, r3
 8020b18:	4ab6      	ldr	r2, [pc, #728]	@ (8020df4 <USB_EPStartXfer+0xe34>)
 8020b1a:	4313      	orrs	r3, r2
 8020b1c:	b29a      	uxth	r2, r3
 8020b1e:	187b      	adds	r3, r7, r1
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	801a      	strh	r2, [r3, #0]
 8020b24:	e353      	b.n	80211ce <USB_EPStartXfer+0x120e>
 8020b26:	1d7b      	adds	r3, r7, #5
 8020b28:	33ff      	adds	r3, #255	@ 0xff
 8020b2a:	681b      	ldr	r3, [r3, #0]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d10b      	bne.n	8020b48 <USB_EPStartXfer+0xb88>
 8020b30:	218c      	movs	r1, #140	@ 0x8c
 8020b32:	187b      	adds	r3, r7, r1
 8020b34:	681b      	ldr	r3, [r3, #0]
 8020b36:	881b      	ldrh	r3, [r3, #0]
 8020b38:	b29b      	uxth	r3, r3
 8020b3a:	4aae      	ldr	r2, [pc, #696]	@ (8020df4 <USB_EPStartXfer+0xe34>)
 8020b3c:	4313      	orrs	r3, r2
 8020b3e:	b29a      	uxth	r2, r3
 8020b40:	187b      	adds	r3, r7, r1
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	801a      	strh	r2, [r3, #0]
 8020b46:	e342      	b.n	80211ce <USB_EPStartXfer+0x120e>
 8020b48:	1d7b      	adds	r3, r7, #5
 8020b4a:	33ff      	adds	r3, #255	@ 0xff
 8020b4c:	681b      	ldr	r3, [r3, #0]
 8020b4e:	085b      	lsrs	r3, r3, #1
 8020b50:	21e8      	movs	r1, #232	@ 0xe8
 8020b52:	187a      	adds	r2, r7, r1
 8020b54:	6013      	str	r3, [r2, #0]
 8020b56:	1d7b      	adds	r3, r7, #5
 8020b58:	33ff      	adds	r3, #255	@ 0xff
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	2201      	movs	r2, #1
 8020b5e:	4013      	ands	r3, r2
 8020b60:	d004      	beq.n	8020b6c <USB_EPStartXfer+0xbac>
 8020b62:	187b      	adds	r3, r7, r1
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	3301      	adds	r3, #1
 8020b68:	187a      	adds	r2, r7, r1
 8020b6a:	6013      	str	r3, [r2, #0]
 8020b6c:	218c      	movs	r1, #140	@ 0x8c
 8020b6e:	187b      	adds	r3, r7, r1
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	881b      	ldrh	r3, [r3, #0]
 8020b74:	b29a      	uxth	r2, r3
 8020b76:	23e8      	movs	r3, #232	@ 0xe8
 8020b78:	18fb      	adds	r3, r7, r3
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	b29b      	uxth	r3, r3
 8020b7e:	029b      	lsls	r3, r3, #10
 8020b80:	b29b      	uxth	r3, r3
 8020b82:	4313      	orrs	r3, r2
 8020b84:	b29a      	uxth	r2, r3
 8020b86:	187b      	adds	r3, r7, r1
 8020b88:	681b      	ldr	r3, [r3, #0]
 8020b8a:	801a      	strh	r2, [r3, #0]
 8020b8c:	e31f      	b.n	80211ce <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020b8e:	683b      	ldr	r3, [r7, #0]
 8020b90:	78db      	ldrb	r3, [r3, #3]
 8020b92:	2b02      	cmp	r3, #2
 8020b94:	d000      	beq.n	8020b98 <USB_EPStartXfer+0xbd8>
 8020b96:	e191      	b.n	8020ebc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020b98:	683b      	ldr	r3, [r7, #0]
 8020b9a:	785b      	ldrb	r3, [r3, #1]
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d000      	beq.n	8020ba2 <USB_EPStartXfer+0xbe2>
 8020ba0:	e07c      	b.n	8020c9c <USB_EPStartXfer+0xcdc>
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	21ac      	movs	r1, #172	@ 0xac
 8020ba6:	187a      	adds	r2, r7, r1
 8020ba8:	6013      	str	r3, [r2, #0]
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	2250      	movs	r2, #80	@ 0x50
 8020bae:	5a9b      	ldrh	r3, [r3, r2]
 8020bb0:	b29b      	uxth	r3, r3
 8020bb2:	001a      	movs	r2, r3
 8020bb4:	187b      	adds	r3, r7, r1
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	189b      	adds	r3, r3, r2
 8020bba:	187a      	adds	r2, r7, r1
 8020bbc:	6013      	str	r3, [r2, #0]
 8020bbe:	683b      	ldr	r3, [r7, #0]
 8020bc0:	781b      	ldrb	r3, [r3, #0]
 8020bc2:	00da      	lsls	r2, r3, #3
 8020bc4:	187b      	adds	r3, r7, r1
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	18d3      	adds	r3, r2, r3
 8020bca:	4a8b      	ldr	r2, [pc, #556]	@ (8020df8 <USB_EPStartXfer+0xe38>)
 8020bcc:	4694      	mov	ip, r2
 8020bce:	4463      	add	r3, ip
 8020bd0:	21a8      	movs	r1, #168	@ 0xa8
 8020bd2:	187a      	adds	r2, r7, r1
 8020bd4:	6013      	str	r3, [r2, #0]
 8020bd6:	187b      	adds	r3, r7, r1
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	881b      	ldrh	r3, [r3, #0]
 8020bdc:	b29b      	uxth	r3, r3
 8020bde:	059b      	lsls	r3, r3, #22
 8020be0:	0d9b      	lsrs	r3, r3, #22
 8020be2:	b29a      	uxth	r2, r3
 8020be4:	187b      	adds	r3, r7, r1
 8020be6:	681b      	ldr	r3, [r3, #0]
 8020be8:	801a      	strh	r2, [r3, #0]
 8020bea:	683b      	ldr	r3, [r7, #0]
 8020bec:	691b      	ldr	r3, [r3, #16]
 8020bee:	2b3e      	cmp	r3, #62	@ 0x3e
 8020bf0:	d923      	bls.n	8020c3a <USB_EPStartXfer+0xc7a>
 8020bf2:	683b      	ldr	r3, [r7, #0]
 8020bf4:	691b      	ldr	r3, [r3, #16]
 8020bf6:	095b      	lsrs	r3, r3, #5
 8020bf8:	21e4      	movs	r1, #228	@ 0xe4
 8020bfa:	187a      	adds	r2, r7, r1
 8020bfc:	6013      	str	r3, [r2, #0]
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	691b      	ldr	r3, [r3, #16]
 8020c02:	221f      	movs	r2, #31
 8020c04:	4013      	ands	r3, r2
 8020c06:	d104      	bne.n	8020c12 <USB_EPStartXfer+0xc52>
 8020c08:	187b      	adds	r3, r7, r1
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	3b01      	subs	r3, #1
 8020c0e:	187a      	adds	r2, r7, r1
 8020c10:	6013      	str	r3, [r2, #0]
 8020c12:	21a8      	movs	r1, #168	@ 0xa8
 8020c14:	187b      	adds	r3, r7, r1
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	881b      	ldrh	r3, [r3, #0]
 8020c1a:	b29a      	uxth	r2, r3
 8020c1c:	23e4      	movs	r3, #228	@ 0xe4
 8020c1e:	18fb      	adds	r3, r7, r3
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	b29b      	uxth	r3, r3
 8020c24:	029b      	lsls	r3, r3, #10
 8020c26:	b29b      	uxth	r3, r3
 8020c28:	4313      	orrs	r3, r2
 8020c2a:	b29b      	uxth	r3, r3
 8020c2c:	4a71      	ldr	r2, [pc, #452]	@ (8020df4 <USB_EPStartXfer+0xe34>)
 8020c2e:	4313      	orrs	r3, r2
 8020c30:	b29a      	uxth	r2, r3
 8020c32:	187b      	adds	r3, r7, r1
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	801a      	strh	r2, [r3, #0]
 8020c38:	e054      	b.n	8020ce4 <USB_EPStartXfer+0xd24>
 8020c3a:	683b      	ldr	r3, [r7, #0]
 8020c3c:	691b      	ldr	r3, [r3, #16]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d10b      	bne.n	8020c5a <USB_EPStartXfer+0xc9a>
 8020c42:	21a8      	movs	r1, #168	@ 0xa8
 8020c44:	187b      	adds	r3, r7, r1
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	881b      	ldrh	r3, [r3, #0]
 8020c4a:	b29b      	uxth	r3, r3
 8020c4c:	4a69      	ldr	r2, [pc, #420]	@ (8020df4 <USB_EPStartXfer+0xe34>)
 8020c4e:	4313      	orrs	r3, r2
 8020c50:	b29a      	uxth	r2, r3
 8020c52:	187b      	adds	r3, r7, r1
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	801a      	strh	r2, [r3, #0]
 8020c58:	e044      	b.n	8020ce4 <USB_EPStartXfer+0xd24>
 8020c5a:	683b      	ldr	r3, [r7, #0]
 8020c5c:	691b      	ldr	r3, [r3, #16]
 8020c5e:	085b      	lsrs	r3, r3, #1
 8020c60:	21e4      	movs	r1, #228	@ 0xe4
 8020c62:	187a      	adds	r2, r7, r1
 8020c64:	6013      	str	r3, [r2, #0]
 8020c66:	683b      	ldr	r3, [r7, #0]
 8020c68:	691b      	ldr	r3, [r3, #16]
 8020c6a:	2201      	movs	r2, #1
 8020c6c:	4013      	ands	r3, r2
 8020c6e:	d004      	beq.n	8020c7a <USB_EPStartXfer+0xcba>
 8020c70:	187b      	adds	r3, r7, r1
 8020c72:	681b      	ldr	r3, [r3, #0]
 8020c74:	3301      	adds	r3, #1
 8020c76:	187a      	adds	r2, r7, r1
 8020c78:	6013      	str	r3, [r2, #0]
 8020c7a:	21a8      	movs	r1, #168	@ 0xa8
 8020c7c:	187b      	adds	r3, r7, r1
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	881b      	ldrh	r3, [r3, #0]
 8020c82:	b29a      	uxth	r2, r3
 8020c84:	23e4      	movs	r3, #228	@ 0xe4
 8020c86:	18fb      	adds	r3, r7, r3
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	b29b      	uxth	r3, r3
 8020c8c:	029b      	lsls	r3, r3, #10
 8020c8e:	b29b      	uxth	r3, r3
 8020c90:	4313      	orrs	r3, r2
 8020c92:	b29a      	uxth	r2, r3
 8020c94:	187b      	adds	r3, r7, r1
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	801a      	strh	r2, [r3, #0]
 8020c9a:	e023      	b.n	8020ce4 <USB_EPStartXfer+0xd24>
 8020c9c:	683b      	ldr	r3, [r7, #0]
 8020c9e:	785b      	ldrb	r3, [r3, #1]
 8020ca0:	2b01      	cmp	r3, #1
 8020ca2:	d11f      	bne.n	8020ce4 <USB_EPStartXfer+0xd24>
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	21b4      	movs	r1, #180	@ 0xb4
 8020ca8:	187a      	adds	r2, r7, r1
 8020caa:	6013      	str	r3, [r2, #0]
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	2250      	movs	r2, #80	@ 0x50
 8020cb0:	5a9b      	ldrh	r3, [r3, r2]
 8020cb2:	b29b      	uxth	r3, r3
 8020cb4:	001a      	movs	r2, r3
 8020cb6:	187b      	adds	r3, r7, r1
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	189b      	adds	r3, r3, r2
 8020cbc:	187a      	adds	r2, r7, r1
 8020cbe:	6013      	str	r3, [r2, #0]
 8020cc0:	683b      	ldr	r3, [r7, #0]
 8020cc2:	781b      	ldrb	r3, [r3, #0]
 8020cc4:	00da      	lsls	r2, r3, #3
 8020cc6:	187b      	adds	r3, r7, r1
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	18d3      	adds	r3, r2, r3
 8020ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8020df8 <USB_EPStartXfer+0xe38>)
 8020cce:	4694      	mov	ip, r2
 8020cd0:	4463      	add	r3, ip
 8020cd2:	21b0      	movs	r1, #176	@ 0xb0
 8020cd4:	187a      	adds	r2, r7, r1
 8020cd6:	6013      	str	r3, [r2, #0]
 8020cd8:	683b      	ldr	r3, [r7, #0]
 8020cda:	691b      	ldr	r3, [r3, #16]
 8020cdc:	b29a      	uxth	r2, r3
 8020cde:	187b      	adds	r3, r7, r1
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	801a      	strh	r2, [r3, #0]
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	22a4      	movs	r2, #164	@ 0xa4
 8020ce8:	18ba      	adds	r2, r7, r2
 8020cea:	6013      	str	r3, [r2, #0]
 8020cec:	683b      	ldr	r3, [r7, #0]
 8020cee:	785b      	ldrb	r3, [r3, #1]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d000      	beq.n	8020cf6 <USB_EPStartXfer+0xd36>
 8020cf4:	e082      	b.n	8020dfc <USB_EPStartXfer+0xe3c>
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	219c      	movs	r1, #156	@ 0x9c
 8020cfa:	187a      	adds	r2, r7, r1
 8020cfc:	6013      	str	r3, [r2, #0]
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	2250      	movs	r2, #80	@ 0x50
 8020d02:	5a9b      	ldrh	r3, [r3, r2]
 8020d04:	b29b      	uxth	r3, r3
 8020d06:	001a      	movs	r2, r3
 8020d08:	187b      	adds	r3, r7, r1
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	189b      	adds	r3, r3, r2
 8020d0e:	187a      	adds	r2, r7, r1
 8020d10:	6013      	str	r3, [r2, #0]
 8020d12:	683b      	ldr	r3, [r7, #0]
 8020d14:	781b      	ldrb	r3, [r3, #0]
 8020d16:	00da      	lsls	r2, r3, #3
 8020d18:	187b      	adds	r3, r7, r1
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	18d3      	adds	r3, r2, r3
 8020d1e:	4a34      	ldr	r2, [pc, #208]	@ (8020df0 <USB_EPStartXfer+0xe30>)
 8020d20:	4694      	mov	ip, r2
 8020d22:	4463      	add	r3, ip
 8020d24:	2198      	movs	r1, #152	@ 0x98
 8020d26:	187a      	adds	r2, r7, r1
 8020d28:	6013      	str	r3, [r2, #0]
 8020d2a:	187b      	adds	r3, r7, r1
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	881b      	ldrh	r3, [r3, #0]
 8020d30:	b29b      	uxth	r3, r3
 8020d32:	059b      	lsls	r3, r3, #22
 8020d34:	0d9b      	lsrs	r3, r3, #22
 8020d36:	b29a      	uxth	r2, r3
 8020d38:	187b      	adds	r3, r7, r1
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	801a      	strh	r2, [r3, #0]
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	691b      	ldr	r3, [r3, #16]
 8020d42:	2b3e      	cmp	r3, #62	@ 0x3e
 8020d44:	d923      	bls.n	8020d8e <USB_EPStartXfer+0xdce>
 8020d46:	683b      	ldr	r3, [r7, #0]
 8020d48:	691b      	ldr	r3, [r3, #16]
 8020d4a:	095b      	lsrs	r3, r3, #5
 8020d4c:	21e0      	movs	r1, #224	@ 0xe0
 8020d4e:	187a      	adds	r2, r7, r1
 8020d50:	6013      	str	r3, [r2, #0]
 8020d52:	683b      	ldr	r3, [r7, #0]
 8020d54:	691b      	ldr	r3, [r3, #16]
 8020d56:	221f      	movs	r2, #31
 8020d58:	4013      	ands	r3, r2
 8020d5a:	d104      	bne.n	8020d66 <USB_EPStartXfer+0xda6>
 8020d5c:	187b      	adds	r3, r7, r1
 8020d5e:	681b      	ldr	r3, [r3, #0]
 8020d60:	3b01      	subs	r3, #1
 8020d62:	187a      	adds	r2, r7, r1
 8020d64:	6013      	str	r3, [r2, #0]
 8020d66:	2198      	movs	r1, #152	@ 0x98
 8020d68:	187b      	adds	r3, r7, r1
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	881b      	ldrh	r3, [r3, #0]
 8020d6e:	b29a      	uxth	r2, r3
 8020d70:	23e0      	movs	r3, #224	@ 0xe0
 8020d72:	18fb      	adds	r3, r7, r3
 8020d74:	681b      	ldr	r3, [r3, #0]
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	029b      	lsls	r3, r3, #10
 8020d7a:	b29b      	uxth	r3, r3
 8020d7c:	4313      	orrs	r3, r2
 8020d7e:	b29b      	uxth	r3, r3
 8020d80:	4a1c      	ldr	r2, [pc, #112]	@ (8020df4 <USB_EPStartXfer+0xe34>)
 8020d82:	4313      	orrs	r3, r2
 8020d84:	b29a      	uxth	r2, r3
 8020d86:	187b      	adds	r3, r7, r1
 8020d88:	681b      	ldr	r3, [r3, #0]
 8020d8a:	801a      	strh	r2, [r3, #0]
 8020d8c:	e057      	b.n	8020e3e <USB_EPStartXfer+0xe7e>
 8020d8e:	683b      	ldr	r3, [r7, #0]
 8020d90:	691b      	ldr	r3, [r3, #16]
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	d10b      	bne.n	8020dae <USB_EPStartXfer+0xdee>
 8020d96:	2198      	movs	r1, #152	@ 0x98
 8020d98:	187b      	adds	r3, r7, r1
 8020d9a:	681b      	ldr	r3, [r3, #0]
 8020d9c:	881b      	ldrh	r3, [r3, #0]
 8020d9e:	b29b      	uxth	r3, r3
 8020da0:	4a14      	ldr	r2, [pc, #80]	@ (8020df4 <USB_EPStartXfer+0xe34>)
 8020da2:	4313      	orrs	r3, r2
 8020da4:	b29a      	uxth	r2, r3
 8020da6:	187b      	adds	r3, r7, r1
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	801a      	strh	r2, [r3, #0]
 8020dac:	e047      	b.n	8020e3e <USB_EPStartXfer+0xe7e>
 8020dae:	683b      	ldr	r3, [r7, #0]
 8020db0:	691b      	ldr	r3, [r3, #16]
 8020db2:	085b      	lsrs	r3, r3, #1
 8020db4:	21e0      	movs	r1, #224	@ 0xe0
 8020db6:	187a      	adds	r2, r7, r1
 8020db8:	6013      	str	r3, [r2, #0]
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	691b      	ldr	r3, [r3, #16]
 8020dbe:	2201      	movs	r2, #1
 8020dc0:	4013      	ands	r3, r2
 8020dc2:	d004      	beq.n	8020dce <USB_EPStartXfer+0xe0e>
 8020dc4:	187b      	adds	r3, r7, r1
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	3301      	adds	r3, #1
 8020dca:	187a      	adds	r2, r7, r1
 8020dcc:	6013      	str	r3, [r2, #0]
 8020dce:	2198      	movs	r1, #152	@ 0x98
 8020dd0:	187b      	adds	r3, r7, r1
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	881b      	ldrh	r3, [r3, #0]
 8020dd6:	b29a      	uxth	r2, r3
 8020dd8:	23e0      	movs	r3, #224	@ 0xe0
 8020dda:	18fb      	adds	r3, r7, r3
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	b29b      	uxth	r3, r3
 8020de0:	029b      	lsls	r3, r3, #10
 8020de2:	b29b      	uxth	r3, r3
 8020de4:	4313      	orrs	r3, r2
 8020de6:	b29a      	uxth	r2, r3
 8020de8:	187b      	adds	r3, r7, r1
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	801a      	strh	r2, [r3, #0]
 8020dee:	e026      	b.n	8020e3e <USB_EPStartXfer+0xe7e>
 8020df0:	00000406 	.word	0x00000406
 8020df4:	ffff8000 	.word	0xffff8000
 8020df8:	00000402 	.word	0x00000402
 8020dfc:	683b      	ldr	r3, [r7, #0]
 8020dfe:	785b      	ldrb	r3, [r3, #1]
 8020e00:	2b01      	cmp	r3, #1
 8020e02:	d11c      	bne.n	8020e3e <USB_EPStartXfer+0xe7e>
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	2250      	movs	r2, #80	@ 0x50
 8020e08:	5a9b      	ldrh	r3, [r3, r2]
 8020e0a:	b29b      	uxth	r3, r3
 8020e0c:	001a      	movs	r2, r3
 8020e0e:	21a4      	movs	r1, #164	@ 0xa4
 8020e10:	187b      	adds	r3, r7, r1
 8020e12:	681b      	ldr	r3, [r3, #0]
 8020e14:	189b      	adds	r3, r3, r2
 8020e16:	187a      	adds	r2, r7, r1
 8020e18:	6013      	str	r3, [r2, #0]
 8020e1a:	683b      	ldr	r3, [r7, #0]
 8020e1c:	781b      	ldrb	r3, [r3, #0]
 8020e1e:	00da      	lsls	r2, r3, #3
 8020e20:	187b      	adds	r3, r7, r1
 8020e22:	681b      	ldr	r3, [r3, #0]
 8020e24:	18d3      	adds	r3, r2, r3
 8020e26:	4ad2      	ldr	r2, [pc, #840]	@ (8021170 <USB_EPStartXfer+0x11b0>)
 8020e28:	4694      	mov	ip, r2
 8020e2a:	4463      	add	r3, ip
 8020e2c:	21a0      	movs	r1, #160	@ 0xa0
 8020e2e:	187a      	adds	r2, r7, r1
 8020e30:	6013      	str	r3, [r2, #0]
 8020e32:	683b      	ldr	r3, [r7, #0]
 8020e34:	691b      	ldr	r3, [r3, #16]
 8020e36:	b29a      	uxth	r2, r3
 8020e38:	187b      	adds	r3, r7, r1
 8020e3a:	681b      	ldr	r3, [r3, #0]
 8020e3c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020e3e:	683b      	ldr	r3, [r7, #0]
 8020e40:	69db      	ldr	r3, [r3, #28]
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d100      	bne.n	8020e48 <USB_EPStartXfer+0xe88>
 8020e46:	e1c2      	b.n	80211ce <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020e48:	687a      	ldr	r2, [r7, #4]
 8020e4a:	683b      	ldr	r3, [r7, #0]
 8020e4c:	781b      	ldrb	r3, [r3, #0]
 8020e4e:	009b      	lsls	r3, r3, #2
 8020e50:	18d2      	adds	r2, r2, r3
 8020e52:	2196      	movs	r1, #150	@ 0x96
 8020e54:	187b      	adds	r3, r7, r1
 8020e56:	8812      	ldrh	r2, [r2, #0]
 8020e58:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020e5a:	187b      	adds	r3, r7, r1
 8020e5c:	881a      	ldrh	r2, [r3, #0]
 8020e5e:	2380      	movs	r3, #128	@ 0x80
 8020e60:	01db      	lsls	r3, r3, #7
 8020e62:	4013      	ands	r3, r2
 8020e64:	d004      	beq.n	8020e70 <USB_EPStartXfer+0xeb0>
 8020e66:	187b      	adds	r3, r7, r1
 8020e68:	881b      	ldrh	r3, [r3, #0]
 8020e6a:	2240      	movs	r2, #64	@ 0x40
 8020e6c:	4013      	ands	r3, r2
 8020e6e:	d10d      	bne.n	8020e8c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020e70:	2196      	movs	r1, #150	@ 0x96
 8020e72:	187b      	adds	r3, r7, r1
 8020e74:	881a      	ldrh	r2, [r3, #0]
 8020e76:	2380      	movs	r3, #128	@ 0x80
 8020e78:	01db      	lsls	r3, r3, #7
 8020e7a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020e7c:	d000      	beq.n	8020e80 <USB_EPStartXfer+0xec0>
 8020e7e:	e1a6      	b.n	80211ce <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020e80:	187b      	adds	r3, r7, r1
 8020e82:	881b      	ldrh	r3, [r3, #0]
 8020e84:	2240      	movs	r2, #64	@ 0x40
 8020e86:	4013      	ands	r3, r2
 8020e88:	d000      	beq.n	8020e8c <USB_EPStartXfer+0xecc>
 8020e8a:	e1a0      	b.n	80211ce <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020e8c:	687a      	ldr	r2, [r7, #4]
 8020e8e:	683b      	ldr	r3, [r7, #0]
 8020e90:	781b      	ldrb	r3, [r3, #0]
 8020e92:	009b      	lsls	r3, r3, #2
 8020e94:	18d3      	adds	r3, r2, r3
 8020e96:	881b      	ldrh	r3, [r3, #0]
 8020e98:	b29a      	uxth	r2, r3
 8020e9a:	2094      	movs	r0, #148	@ 0x94
 8020e9c:	183b      	adds	r3, r7, r0
 8020e9e:	49b5      	ldr	r1, [pc, #724]	@ (8021174 <USB_EPStartXfer+0x11b4>)
 8020ea0:	400a      	ands	r2, r1
 8020ea2:	801a      	strh	r2, [r3, #0]
 8020ea4:	687a      	ldr	r2, [r7, #4]
 8020ea6:	683b      	ldr	r3, [r7, #0]
 8020ea8:	781b      	ldrb	r3, [r3, #0]
 8020eaa:	009b      	lsls	r3, r3, #2
 8020eac:	18d3      	adds	r3, r2, r3
 8020eae:	183a      	adds	r2, r7, r0
 8020eb0:	8812      	ldrh	r2, [r2, #0]
 8020eb2:	49b1      	ldr	r1, [pc, #708]	@ (8021178 <USB_EPStartXfer+0x11b8>)
 8020eb4:	430a      	orrs	r2, r1
 8020eb6:	b292      	uxth	r2, r2
 8020eb8:	801a      	strh	r2, [r3, #0]
 8020eba:	e188      	b.n	80211ce <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020ebc:	683b      	ldr	r3, [r7, #0]
 8020ebe:	78db      	ldrb	r3, [r3, #3]
 8020ec0:	2b01      	cmp	r3, #1
 8020ec2:	d000      	beq.n	8020ec6 <USB_EPStartXfer+0xf06>
 8020ec4:	e181      	b.n	80211ca <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020ec6:	683b      	ldr	r3, [r7, #0]
 8020ec8:	699a      	ldr	r2, [r3, #24]
 8020eca:	683b      	ldr	r3, [r7, #0]
 8020ecc:	691b      	ldr	r3, [r3, #16]
 8020ece:	429a      	cmp	r2, r3
 8020ed0:	d90d      	bls.n	8020eee <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020ed2:	683b      	ldr	r3, [r7, #0]
 8020ed4:	691b      	ldr	r3, [r3, #16]
 8020ed6:	1d7a      	adds	r2, r7, #5
 8020ed8:	32ff      	adds	r2, #255	@ 0xff
 8020eda:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020edc:	683b      	ldr	r3, [r7, #0]
 8020ede:	699a      	ldr	r2, [r3, #24]
 8020ee0:	1d7b      	adds	r3, r7, #5
 8020ee2:	33ff      	adds	r3, #255	@ 0xff
 8020ee4:	681b      	ldr	r3, [r3, #0]
 8020ee6:	1ad2      	subs	r2, r2, r3
 8020ee8:	683b      	ldr	r3, [r7, #0]
 8020eea:	619a      	str	r2, [r3, #24]
 8020eec:	e007      	b.n	8020efe <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020eee:	683b      	ldr	r3, [r7, #0]
 8020ef0:	699b      	ldr	r3, [r3, #24]
 8020ef2:	1d7a      	adds	r2, r7, #5
 8020ef4:	32ff      	adds	r2, #255	@ 0xff
 8020ef6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020ef8:	683b      	ldr	r3, [r7, #0]
 8020efa:	2200      	movs	r2, #0
 8020efc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020efe:	683b      	ldr	r3, [r7, #0]
 8020f00:	785b      	ldrb	r3, [r3, #1]
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d000      	beq.n	8020f08 <USB_EPStartXfer+0xf48>
 8020f06:	e082      	b.n	802100e <USB_EPStartXfer+0x104e>
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	21cc      	movs	r1, #204	@ 0xcc
 8020f0c:	187a      	adds	r2, r7, r1
 8020f0e:	6013      	str	r3, [r2, #0]
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	2250      	movs	r2, #80	@ 0x50
 8020f14:	5a9b      	ldrh	r3, [r3, r2]
 8020f16:	b29b      	uxth	r3, r3
 8020f18:	001a      	movs	r2, r3
 8020f1a:	187b      	adds	r3, r7, r1
 8020f1c:	681b      	ldr	r3, [r3, #0]
 8020f1e:	189b      	adds	r3, r3, r2
 8020f20:	187a      	adds	r2, r7, r1
 8020f22:	6013      	str	r3, [r2, #0]
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	781b      	ldrb	r3, [r3, #0]
 8020f28:	00da      	lsls	r2, r3, #3
 8020f2a:	187b      	adds	r3, r7, r1
 8020f2c:	681b      	ldr	r3, [r3, #0]
 8020f2e:	18d3      	adds	r3, r2, r3
 8020f30:	4a92      	ldr	r2, [pc, #584]	@ (802117c <USB_EPStartXfer+0x11bc>)
 8020f32:	4694      	mov	ip, r2
 8020f34:	4463      	add	r3, ip
 8020f36:	21c8      	movs	r1, #200	@ 0xc8
 8020f38:	187a      	adds	r2, r7, r1
 8020f3a:	6013      	str	r3, [r2, #0]
 8020f3c:	187b      	adds	r3, r7, r1
 8020f3e:	681b      	ldr	r3, [r3, #0]
 8020f40:	881b      	ldrh	r3, [r3, #0]
 8020f42:	b29b      	uxth	r3, r3
 8020f44:	059b      	lsls	r3, r3, #22
 8020f46:	0d9b      	lsrs	r3, r3, #22
 8020f48:	b29a      	uxth	r2, r3
 8020f4a:	187b      	adds	r3, r7, r1
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	801a      	strh	r2, [r3, #0]
 8020f50:	1d7b      	adds	r3, r7, #5
 8020f52:	33ff      	adds	r3, #255	@ 0xff
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	2b3e      	cmp	r3, #62	@ 0x3e
 8020f58:	d925      	bls.n	8020fa6 <USB_EPStartXfer+0xfe6>
 8020f5a:	1d7b      	adds	r3, r7, #5
 8020f5c:	33ff      	adds	r3, #255	@ 0xff
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	095b      	lsrs	r3, r3, #5
 8020f62:	21dc      	movs	r1, #220	@ 0xdc
 8020f64:	187a      	adds	r2, r7, r1
 8020f66:	6013      	str	r3, [r2, #0]
 8020f68:	1d7b      	adds	r3, r7, #5
 8020f6a:	33ff      	adds	r3, #255	@ 0xff
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	221f      	movs	r2, #31
 8020f70:	4013      	ands	r3, r2
 8020f72:	d104      	bne.n	8020f7e <USB_EPStartXfer+0xfbe>
 8020f74:	187b      	adds	r3, r7, r1
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	3b01      	subs	r3, #1
 8020f7a:	187a      	adds	r2, r7, r1
 8020f7c:	6013      	str	r3, [r2, #0]
 8020f7e:	21c8      	movs	r1, #200	@ 0xc8
 8020f80:	187b      	adds	r3, r7, r1
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	881b      	ldrh	r3, [r3, #0]
 8020f86:	b29a      	uxth	r2, r3
 8020f88:	23dc      	movs	r3, #220	@ 0xdc
 8020f8a:	18fb      	adds	r3, r7, r3
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	b29b      	uxth	r3, r3
 8020f90:	029b      	lsls	r3, r3, #10
 8020f92:	b29b      	uxth	r3, r3
 8020f94:	4313      	orrs	r3, r2
 8020f96:	b29b      	uxth	r3, r3
 8020f98:	4a79      	ldr	r2, [pc, #484]	@ (8021180 <USB_EPStartXfer+0x11c0>)
 8020f9a:	4313      	orrs	r3, r2
 8020f9c:	b29a      	uxth	r2, r3
 8020f9e:	187b      	adds	r3, r7, r1
 8020fa0:	681b      	ldr	r3, [r3, #0]
 8020fa2:	801a      	strh	r2, [r3, #0]
 8020fa4:	e058      	b.n	8021058 <USB_EPStartXfer+0x1098>
 8020fa6:	1d7b      	adds	r3, r7, #5
 8020fa8:	33ff      	adds	r3, #255	@ 0xff
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d10b      	bne.n	8020fc8 <USB_EPStartXfer+0x1008>
 8020fb0:	21c8      	movs	r1, #200	@ 0xc8
 8020fb2:	187b      	adds	r3, r7, r1
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	881b      	ldrh	r3, [r3, #0]
 8020fb8:	b29b      	uxth	r3, r3
 8020fba:	4a71      	ldr	r2, [pc, #452]	@ (8021180 <USB_EPStartXfer+0x11c0>)
 8020fbc:	4313      	orrs	r3, r2
 8020fbe:	b29a      	uxth	r2, r3
 8020fc0:	187b      	adds	r3, r7, r1
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	801a      	strh	r2, [r3, #0]
 8020fc6:	e047      	b.n	8021058 <USB_EPStartXfer+0x1098>
 8020fc8:	1d7b      	adds	r3, r7, #5
 8020fca:	33ff      	adds	r3, #255	@ 0xff
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	085b      	lsrs	r3, r3, #1
 8020fd0:	21dc      	movs	r1, #220	@ 0xdc
 8020fd2:	187a      	adds	r2, r7, r1
 8020fd4:	6013      	str	r3, [r2, #0]
 8020fd6:	1d7b      	adds	r3, r7, #5
 8020fd8:	33ff      	adds	r3, #255	@ 0xff
 8020fda:	681b      	ldr	r3, [r3, #0]
 8020fdc:	2201      	movs	r2, #1
 8020fde:	4013      	ands	r3, r2
 8020fe0:	d004      	beq.n	8020fec <USB_EPStartXfer+0x102c>
 8020fe2:	187b      	adds	r3, r7, r1
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	3301      	adds	r3, #1
 8020fe8:	187a      	adds	r2, r7, r1
 8020fea:	6013      	str	r3, [r2, #0]
 8020fec:	21c8      	movs	r1, #200	@ 0xc8
 8020fee:	187b      	adds	r3, r7, r1
 8020ff0:	681b      	ldr	r3, [r3, #0]
 8020ff2:	881b      	ldrh	r3, [r3, #0]
 8020ff4:	b29a      	uxth	r2, r3
 8020ff6:	23dc      	movs	r3, #220	@ 0xdc
 8020ff8:	18fb      	adds	r3, r7, r3
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	b29b      	uxth	r3, r3
 8020ffe:	029b      	lsls	r3, r3, #10
 8021000:	b29b      	uxth	r3, r3
 8021002:	4313      	orrs	r3, r2
 8021004:	b29a      	uxth	r2, r3
 8021006:	187b      	adds	r3, r7, r1
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	801a      	strh	r2, [r3, #0]
 802100c:	e024      	b.n	8021058 <USB_EPStartXfer+0x1098>
 802100e:	683b      	ldr	r3, [r7, #0]
 8021010:	785b      	ldrb	r3, [r3, #1]
 8021012:	2b01      	cmp	r3, #1
 8021014:	d120      	bne.n	8021058 <USB_EPStartXfer+0x1098>
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	21d4      	movs	r1, #212	@ 0xd4
 802101a:	187a      	adds	r2, r7, r1
 802101c:	6013      	str	r3, [r2, #0]
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	2250      	movs	r2, #80	@ 0x50
 8021022:	5a9b      	ldrh	r3, [r3, r2]
 8021024:	b29b      	uxth	r3, r3
 8021026:	001a      	movs	r2, r3
 8021028:	187b      	adds	r3, r7, r1
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	189b      	adds	r3, r3, r2
 802102e:	187a      	adds	r2, r7, r1
 8021030:	6013      	str	r3, [r2, #0]
 8021032:	683b      	ldr	r3, [r7, #0]
 8021034:	781b      	ldrb	r3, [r3, #0]
 8021036:	00da      	lsls	r2, r3, #3
 8021038:	187b      	adds	r3, r7, r1
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	18d3      	adds	r3, r2, r3
 802103e:	4a4f      	ldr	r2, [pc, #316]	@ (802117c <USB_EPStartXfer+0x11bc>)
 8021040:	4694      	mov	ip, r2
 8021042:	4463      	add	r3, ip
 8021044:	21d0      	movs	r1, #208	@ 0xd0
 8021046:	187a      	adds	r2, r7, r1
 8021048:	6013      	str	r3, [r2, #0]
 802104a:	1d7b      	adds	r3, r7, #5
 802104c:	33ff      	adds	r3, #255	@ 0xff
 802104e:	681b      	ldr	r3, [r3, #0]
 8021050:	b29a      	uxth	r2, r3
 8021052:	187b      	adds	r3, r7, r1
 8021054:	681b      	ldr	r3, [r3, #0]
 8021056:	801a      	strh	r2, [r3, #0]
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	22c4      	movs	r2, #196	@ 0xc4
 802105c:	18ba      	adds	r2, r7, r2
 802105e:	6013      	str	r3, [r2, #0]
 8021060:	683b      	ldr	r3, [r7, #0]
 8021062:	785b      	ldrb	r3, [r3, #1]
 8021064:	2b00      	cmp	r3, #0
 8021066:	d000      	beq.n	802106a <USB_EPStartXfer+0x10aa>
 8021068:	e08c      	b.n	8021184 <USB_EPStartXfer+0x11c4>
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	21bc      	movs	r1, #188	@ 0xbc
 802106e:	187a      	adds	r2, r7, r1
 8021070:	6013      	str	r3, [r2, #0]
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	2250      	movs	r2, #80	@ 0x50
 8021076:	5a9b      	ldrh	r3, [r3, r2]
 8021078:	b29b      	uxth	r3, r3
 802107a:	001a      	movs	r2, r3
 802107c:	187b      	adds	r3, r7, r1
 802107e:	681b      	ldr	r3, [r3, #0]
 8021080:	189b      	adds	r3, r3, r2
 8021082:	187a      	adds	r2, r7, r1
 8021084:	6013      	str	r3, [r2, #0]
 8021086:	683b      	ldr	r3, [r7, #0]
 8021088:	781b      	ldrb	r3, [r3, #0]
 802108a:	00da      	lsls	r2, r3, #3
 802108c:	187b      	adds	r3, r7, r1
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	18d3      	adds	r3, r2, r3
 8021092:	4a37      	ldr	r2, [pc, #220]	@ (8021170 <USB_EPStartXfer+0x11b0>)
 8021094:	4694      	mov	ip, r2
 8021096:	4463      	add	r3, ip
 8021098:	21b8      	movs	r1, #184	@ 0xb8
 802109a:	187a      	adds	r2, r7, r1
 802109c:	6013      	str	r3, [r2, #0]
 802109e:	187b      	adds	r3, r7, r1
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	881b      	ldrh	r3, [r3, #0]
 80210a4:	b29b      	uxth	r3, r3
 80210a6:	059b      	lsls	r3, r3, #22
 80210a8:	0d9b      	lsrs	r3, r3, #22
 80210aa:	b29a      	uxth	r2, r3
 80210ac:	187b      	adds	r3, r7, r1
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	801a      	strh	r2, [r3, #0]
 80210b2:	1d7b      	adds	r3, r7, #5
 80210b4:	33ff      	adds	r3, #255	@ 0xff
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80210ba:	d925      	bls.n	8021108 <USB_EPStartXfer+0x1148>
 80210bc:	1d7b      	adds	r3, r7, #5
 80210be:	33ff      	adds	r3, #255	@ 0xff
 80210c0:	681b      	ldr	r3, [r3, #0]
 80210c2:	095b      	lsrs	r3, r3, #5
 80210c4:	21d8      	movs	r1, #216	@ 0xd8
 80210c6:	187a      	adds	r2, r7, r1
 80210c8:	6013      	str	r3, [r2, #0]
 80210ca:	1d7b      	adds	r3, r7, #5
 80210cc:	33ff      	adds	r3, #255	@ 0xff
 80210ce:	681b      	ldr	r3, [r3, #0]
 80210d0:	221f      	movs	r2, #31
 80210d2:	4013      	ands	r3, r2
 80210d4:	d104      	bne.n	80210e0 <USB_EPStartXfer+0x1120>
 80210d6:	187b      	adds	r3, r7, r1
 80210d8:	681b      	ldr	r3, [r3, #0]
 80210da:	3b01      	subs	r3, #1
 80210dc:	187a      	adds	r2, r7, r1
 80210de:	6013      	str	r3, [r2, #0]
 80210e0:	21b8      	movs	r1, #184	@ 0xb8
 80210e2:	187b      	adds	r3, r7, r1
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	881b      	ldrh	r3, [r3, #0]
 80210e8:	b29a      	uxth	r2, r3
 80210ea:	23d8      	movs	r3, #216	@ 0xd8
 80210ec:	18fb      	adds	r3, r7, r3
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	b29b      	uxth	r3, r3
 80210f2:	029b      	lsls	r3, r3, #10
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	4313      	orrs	r3, r2
 80210f8:	b29b      	uxth	r3, r3
 80210fa:	4a21      	ldr	r2, [pc, #132]	@ (8021180 <USB_EPStartXfer+0x11c0>)
 80210fc:	4313      	orrs	r3, r2
 80210fe:	b29a      	uxth	r2, r3
 8021100:	187b      	adds	r3, r7, r1
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	801a      	strh	r2, [r3, #0]
 8021106:	e062      	b.n	80211ce <USB_EPStartXfer+0x120e>
 8021108:	1d7b      	adds	r3, r7, #5
 802110a:	33ff      	adds	r3, #255	@ 0xff
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	2b00      	cmp	r3, #0
 8021110:	d10b      	bne.n	802112a <USB_EPStartXfer+0x116a>
 8021112:	21b8      	movs	r1, #184	@ 0xb8
 8021114:	187b      	adds	r3, r7, r1
 8021116:	681b      	ldr	r3, [r3, #0]
 8021118:	881b      	ldrh	r3, [r3, #0]
 802111a:	b29b      	uxth	r3, r3
 802111c:	4a18      	ldr	r2, [pc, #96]	@ (8021180 <USB_EPStartXfer+0x11c0>)
 802111e:	4313      	orrs	r3, r2
 8021120:	b29a      	uxth	r2, r3
 8021122:	187b      	adds	r3, r7, r1
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	801a      	strh	r2, [r3, #0]
 8021128:	e051      	b.n	80211ce <USB_EPStartXfer+0x120e>
 802112a:	1d7b      	adds	r3, r7, #5
 802112c:	33ff      	adds	r3, #255	@ 0xff
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	085b      	lsrs	r3, r3, #1
 8021132:	21d8      	movs	r1, #216	@ 0xd8
 8021134:	187a      	adds	r2, r7, r1
 8021136:	6013      	str	r3, [r2, #0]
 8021138:	1d7b      	adds	r3, r7, #5
 802113a:	33ff      	adds	r3, #255	@ 0xff
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	2201      	movs	r2, #1
 8021140:	4013      	ands	r3, r2
 8021142:	d004      	beq.n	802114e <USB_EPStartXfer+0x118e>
 8021144:	187b      	adds	r3, r7, r1
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	3301      	adds	r3, #1
 802114a:	187a      	adds	r2, r7, r1
 802114c:	6013      	str	r3, [r2, #0]
 802114e:	21b8      	movs	r1, #184	@ 0xb8
 8021150:	187b      	adds	r3, r7, r1
 8021152:	681b      	ldr	r3, [r3, #0]
 8021154:	881b      	ldrh	r3, [r3, #0]
 8021156:	b29a      	uxth	r2, r3
 8021158:	23d8      	movs	r3, #216	@ 0xd8
 802115a:	18fb      	adds	r3, r7, r3
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	b29b      	uxth	r3, r3
 8021160:	029b      	lsls	r3, r3, #10
 8021162:	b29b      	uxth	r3, r3
 8021164:	4313      	orrs	r3, r2
 8021166:	b29a      	uxth	r2, r3
 8021168:	187b      	adds	r3, r7, r1
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	801a      	strh	r2, [r3, #0]
 802116e:	e02e      	b.n	80211ce <USB_EPStartXfer+0x120e>
 8021170:	00000406 	.word	0x00000406
 8021174:	ffff8f8f 	.word	0xffff8f8f
 8021178:	ffff80c0 	.word	0xffff80c0
 802117c:	00000402 	.word	0x00000402
 8021180:	ffff8000 	.word	0xffff8000
 8021184:	683b      	ldr	r3, [r7, #0]
 8021186:	785b      	ldrb	r3, [r3, #1]
 8021188:	2b01      	cmp	r3, #1
 802118a:	d120      	bne.n	80211ce <USB_EPStartXfer+0x120e>
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	2250      	movs	r2, #80	@ 0x50
 8021190:	5a9b      	ldrh	r3, [r3, r2]
 8021192:	b29b      	uxth	r3, r3
 8021194:	001a      	movs	r2, r3
 8021196:	21c4      	movs	r1, #196	@ 0xc4
 8021198:	187b      	adds	r3, r7, r1
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	189b      	adds	r3, r3, r2
 802119e:	187a      	adds	r2, r7, r1
 80211a0:	6013      	str	r3, [r2, #0]
 80211a2:	683b      	ldr	r3, [r7, #0]
 80211a4:	781b      	ldrb	r3, [r3, #0]
 80211a6:	00da      	lsls	r2, r3, #3
 80211a8:	187b      	adds	r3, r7, r1
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	18d3      	adds	r3, r2, r3
 80211ae:	4a1d      	ldr	r2, [pc, #116]	@ (8021224 <USB_EPStartXfer+0x1264>)
 80211b0:	4694      	mov	ip, r2
 80211b2:	4463      	add	r3, ip
 80211b4:	21c0      	movs	r1, #192	@ 0xc0
 80211b6:	187a      	adds	r2, r7, r1
 80211b8:	6013      	str	r3, [r2, #0]
 80211ba:	1d7b      	adds	r3, r7, #5
 80211bc:	33ff      	adds	r3, #255	@ 0xff
 80211be:	681b      	ldr	r3, [r3, #0]
 80211c0:	b29a      	uxth	r2, r3
 80211c2:	187b      	adds	r3, r7, r1
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	801a      	strh	r2, [r3, #0]
 80211c8:	e001      	b.n	80211ce <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80211ca:	2301      	movs	r3, #1
 80211cc:	e025      	b.n	802121a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80211ce:	687a      	ldr	r2, [r7, #4]
 80211d0:	683b      	ldr	r3, [r7, #0]
 80211d2:	781b      	ldrb	r3, [r3, #0]
 80211d4:	009b      	lsls	r3, r3, #2
 80211d6:	18d3      	adds	r3, r2, r3
 80211d8:	881b      	ldrh	r3, [r3, #0]
 80211da:	b29a      	uxth	r2, r3
 80211dc:	208a      	movs	r0, #138	@ 0x8a
 80211de:	183b      	adds	r3, r7, r0
 80211e0:	4911      	ldr	r1, [pc, #68]	@ (8021228 <USB_EPStartXfer+0x1268>)
 80211e2:	400a      	ands	r2, r1
 80211e4:	801a      	strh	r2, [r3, #0]
 80211e6:	183b      	adds	r3, r7, r0
 80211e8:	183a      	adds	r2, r7, r0
 80211ea:	8812      	ldrh	r2, [r2, #0]
 80211ec:	2180      	movs	r1, #128	@ 0x80
 80211ee:	0149      	lsls	r1, r1, #5
 80211f0:	404a      	eors	r2, r1
 80211f2:	801a      	strh	r2, [r3, #0]
 80211f4:	183b      	adds	r3, r7, r0
 80211f6:	183a      	adds	r2, r7, r0
 80211f8:	8812      	ldrh	r2, [r2, #0]
 80211fa:	2180      	movs	r1, #128	@ 0x80
 80211fc:	0189      	lsls	r1, r1, #6
 80211fe:	404a      	eors	r2, r1
 8021200:	801a      	strh	r2, [r3, #0]
 8021202:	687a      	ldr	r2, [r7, #4]
 8021204:	683b      	ldr	r3, [r7, #0]
 8021206:	781b      	ldrb	r3, [r3, #0]
 8021208:	009b      	lsls	r3, r3, #2
 802120a:	18d3      	adds	r3, r2, r3
 802120c:	183a      	adds	r2, r7, r0
 802120e:	8812      	ldrh	r2, [r2, #0]
 8021210:	4906      	ldr	r1, [pc, #24]	@ (802122c <USB_EPStartXfer+0x126c>)
 8021212:	430a      	orrs	r2, r1
 8021214:	b292      	uxth	r2, r2
 8021216:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8021218:	2300      	movs	r3, #0
}
 802121a:	0018      	movs	r0, r3
 802121c:	46bd      	mov	sp, r7
 802121e:	b043      	add	sp, #268	@ 0x10c
 8021220:	bd90      	pop	{r4, r7, pc}
 8021222:	46c0      	nop			@ (mov r8, r8)
 8021224:	00000406 	.word	0x00000406
 8021228:	ffffbf8f 	.word	0xffffbf8f
 802122c:	ffff8080 	.word	0xffff8080

08021230 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021230:	b580      	push	{r7, lr}
 8021232:	b084      	sub	sp, #16
 8021234:	af00      	add	r7, sp, #0
 8021236:	6078      	str	r0, [r7, #4]
 8021238:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 802123a:	683b      	ldr	r3, [r7, #0]
 802123c:	785b      	ldrb	r3, [r3, #1]
 802123e:	2b00      	cmp	r3, #0
 8021240:	d01d      	beq.n	802127e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8021242:	687a      	ldr	r2, [r7, #4]
 8021244:	683b      	ldr	r3, [r7, #0]
 8021246:	781b      	ldrb	r3, [r3, #0]
 8021248:	009b      	lsls	r3, r3, #2
 802124a:	18d3      	adds	r3, r2, r3
 802124c:	881b      	ldrh	r3, [r3, #0]
 802124e:	b29a      	uxth	r2, r3
 8021250:	200c      	movs	r0, #12
 8021252:	183b      	adds	r3, r7, r0
 8021254:	491b      	ldr	r1, [pc, #108]	@ (80212c4 <USB_EPSetStall+0x94>)
 8021256:	400a      	ands	r2, r1
 8021258:	801a      	strh	r2, [r3, #0]
 802125a:	183b      	adds	r3, r7, r0
 802125c:	183a      	adds	r2, r7, r0
 802125e:	8812      	ldrh	r2, [r2, #0]
 8021260:	2110      	movs	r1, #16
 8021262:	404a      	eors	r2, r1
 8021264:	801a      	strh	r2, [r3, #0]
 8021266:	687a      	ldr	r2, [r7, #4]
 8021268:	683b      	ldr	r3, [r7, #0]
 802126a:	781b      	ldrb	r3, [r3, #0]
 802126c:	009b      	lsls	r3, r3, #2
 802126e:	18d3      	adds	r3, r2, r3
 8021270:	183a      	adds	r2, r7, r0
 8021272:	8812      	ldrh	r2, [r2, #0]
 8021274:	4914      	ldr	r1, [pc, #80]	@ (80212c8 <USB_EPSetStall+0x98>)
 8021276:	430a      	orrs	r2, r1
 8021278:	b292      	uxth	r2, r2
 802127a:	801a      	strh	r2, [r3, #0]
 802127c:	e01d      	b.n	80212ba <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 802127e:	687a      	ldr	r2, [r7, #4]
 8021280:	683b      	ldr	r3, [r7, #0]
 8021282:	781b      	ldrb	r3, [r3, #0]
 8021284:	009b      	lsls	r3, r3, #2
 8021286:	18d3      	adds	r3, r2, r3
 8021288:	881b      	ldrh	r3, [r3, #0]
 802128a:	b29a      	uxth	r2, r3
 802128c:	200e      	movs	r0, #14
 802128e:	183b      	adds	r3, r7, r0
 8021290:	490e      	ldr	r1, [pc, #56]	@ (80212cc <USB_EPSetStall+0x9c>)
 8021292:	400a      	ands	r2, r1
 8021294:	801a      	strh	r2, [r3, #0]
 8021296:	183b      	adds	r3, r7, r0
 8021298:	183a      	adds	r2, r7, r0
 802129a:	8812      	ldrh	r2, [r2, #0]
 802129c:	2180      	movs	r1, #128	@ 0x80
 802129e:	0149      	lsls	r1, r1, #5
 80212a0:	404a      	eors	r2, r1
 80212a2:	801a      	strh	r2, [r3, #0]
 80212a4:	687a      	ldr	r2, [r7, #4]
 80212a6:	683b      	ldr	r3, [r7, #0]
 80212a8:	781b      	ldrb	r3, [r3, #0]
 80212aa:	009b      	lsls	r3, r3, #2
 80212ac:	18d3      	adds	r3, r2, r3
 80212ae:	183a      	adds	r2, r7, r0
 80212b0:	8812      	ldrh	r2, [r2, #0]
 80212b2:	4905      	ldr	r1, [pc, #20]	@ (80212c8 <USB_EPSetStall+0x98>)
 80212b4:	430a      	orrs	r2, r1
 80212b6:	b292      	uxth	r2, r2
 80212b8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80212ba:	2300      	movs	r3, #0
}
 80212bc:	0018      	movs	r0, r3
 80212be:	46bd      	mov	sp, r7
 80212c0:	b004      	add	sp, #16
 80212c2:	bd80      	pop	{r7, pc}
 80212c4:	ffff8fbf 	.word	0xffff8fbf
 80212c8:	ffff8080 	.word	0xffff8080
 80212cc:	ffffbf8f 	.word	0xffffbf8f

080212d0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80212d0:	b580      	push	{r7, lr}
 80212d2:	b086      	sub	sp, #24
 80212d4:	af00      	add	r7, sp, #0
 80212d6:	6078      	str	r0, [r7, #4]
 80212d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80212da:	683b      	ldr	r3, [r7, #0]
 80212dc:	7b1b      	ldrb	r3, [r3, #12]
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d000      	beq.n	80212e4 <USB_EPClearStall+0x14>
 80212e2:	e095      	b.n	8021410 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80212e4:	683b      	ldr	r3, [r7, #0]
 80212e6:	785b      	ldrb	r3, [r3, #1]
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d046      	beq.n	802137a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80212ec:	687a      	ldr	r2, [r7, #4]
 80212ee:	683b      	ldr	r3, [r7, #0]
 80212f0:	781b      	ldrb	r3, [r3, #0]
 80212f2:	009b      	lsls	r3, r3, #2
 80212f4:	18d2      	adds	r2, r2, r3
 80212f6:	2110      	movs	r1, #16
 80212f8:	187b      	adds	r3, r7, r1
 80212fa:	8812      	ldrh	r2, [r2, #0]
 80212fc:	801a      	strh	r2, [r3, #0]
 80212fe:	187b      	adds	r3, r7, r1
 8021300:	881b      	ldrh	r3, [r3, #0]
 8021302:	2240      	movs	r2, #64	@ 0x40
 8021304:	4013      	ands	r3, r2
 8021306:	d016      	beq.n	8021336 <USB_EPClearStall+0x66>
 8021308:	687a      	ldr	r2, [r7, #4]
 802130a:	683b      	ldr	r3, [r7, #0]
 802130c:	781b      	ldrb	r3, [r3, #0]
 802130e:	009b      	lsls	r3, r3, #2
 8021310:	18d3      	adds	r3, r2, r3
 8021312:	881b      	ldrh	r3, [r3, #0]
 8021314:	b29a      	uxth	r2, r3
 8021316:	200e      	movs	r0, #14
 8021318:	183b      	adds	r3, r7, r0
 802131a:	4940      	ldr	r1, [pc, #256]	@ (802141c <USB_EPClearStall+0x14c>)
 802131c:	400a      	ands	r2, r1
 802131e:	801a      	strh	r2, [r3, #0]
 8021320:	687a      	ldr	r2, [r7, #4]
 8021322:	683b      	ldr	r3, [r7, #0]
 8021324:	781b      	ldrb	r3, [r3, #0]
 8021326:	009b      	lsls	r3, r3, #2
 8021328:	18d3      	adds	r3, r2, r3
 802132a:	183a      	adds	r2, r7, r0
 802132c:	8812      	ldrh	r2, [r2, #0]
 802132e:	493c      	ldr	r1, [pc, #240]	@ (8021420 <USB_EPClearStall+0x150>)
 8021330:	430a      	orrs	r2, r1
 8021332:	b292      	uxth	r2, r2
 8021334:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8021336:	683b      	ldr	r3, [r7, #0]
 8021338:	78db      	ldrb	r3, [r3, #3]
 802133a:	2b01      	cmp	r3, #1
 802133c:	d068      	beq.n	8021410 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 802133e:	687a      	ldr	r2, [r7, #4]
 8021340:	683b      	ldr	r3, [r7, #0]
 8021342:	781b      	ldrb	r3, [r3, #0]
 8021344:	009b      	lsls	r3, r3, #2
 8021346:	18d3      	adds	r3, r2, r3
 8021348:	881b      	ldrh	r3, [r3, #0]
 802134a:	b29a      	uxth	r2, r3
 802134c:	200c      	movs	r0, #12
 802134e:	183b      	adds	r3, r7, r0
 8021350:	4934      	ldr	r1, [pc, #208]	@ (8021424 <USB_EPClearStall+0x154>)
 8021352:	400a      	ands	r2, r1
 8021354:	801a      	strh	r2, [r3, #0]
 8021356:	183b      	adds	r3, r7, r0
 8021358:	183a      	adds	r2, r7, r0
 802135a:	8812      	ldrh	r2, [r2, #0]
 802135c:	2120      	movs	r1, #32
 802135e:	404a      	eors	r2, r1
 8021360:	801a      	strh	r2, [r3, #0]
 8021362:	687a      	ldr	r2, [r7, #4]
 8021364:	683b      	ldr	r3, [r7, #0]
 8021366:	781b      	ldrb	r3, [r3, #0]
 8021368:	009b      	lsls	r3, r3, #2
 802136a:	18d3      	adds	r3, r2, r3
 802136c:	183a      	adds	r2, r7, r0
 802136e:	8812      	ldrh	r2, [r2, #0]
 8021370:	492d      	ldr	r1, [pc, #180]	@ (8021428 <USB_EPClearStall+0x158>)
 8021372:	430a      	orrs	r2, r1
 8021374:	b292      	uxth	r2, r2
 8021376:	801a      	strh	r2, [r3, #0]
 8021378:	e04a      	b.n	8021410 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802137a:	687a      	ldr	r2, [r7, #4]
 802137c:	683b      	ldr	r3, [r7, #0]
 802137e:	781b      	ldrb	r3, [r3, #0]
 8021380:	009b      	lsls	r3, r3, #2
 8021382:	18d2      	adds	r2, r2, r3
 8021384:	2116      	movs	r1, #22
 8021386:	187b      	adds	r3, r7, r1
 8021388:	8812      	ldrh	r2, [r2, #0]
 802138a:	801a      	strh	r2, [r3, #0]
 802138c:	187b      	adds	r3, r7, r1
 802138e:	881a      	ldrh	r2, [r3, #0]
 8021390:	2380      	movs	r3, #128	@ 0x80
 8021392:	01db      	lsls	r3, r3, #7
 8021394:	4013      	ands	r3, r2
 8021396:	d016      	beq.n	80213c6 <USB_EPClearStall+0xf6>
 8021398:	687a      	ldr	r2, [r7, #4]
 802139a:	683b      	ldr	r3, [r7, #0]
 802139c:	781b      	ldrb	r3, [r3, #0]
 802139e:	009b      	lsls	r3, r3, #2
 80213a0:	18d3      	adds	r3, r2, r3
 80213a2:	881b      	ldrh	r3, [r3, #0]
 80213a4:	b29a      	uxth	r2, r3
 80213a6:	2014      	movs	r0, #20
 80213a8:	183b      	adds	r3, r7, r0
 80213aa:	491c      	ldr	r1, [pc, #112]	@ (802141c <USB_EPClearStall+0x14c>)
 80213ac:	400a      	ands	r2, r1
 80213ae:	801a      	strh	r2, [r3, #0]
 80213b0:	687a      	ldr	r2, [r7, #4]
 80213b2:	683b      	ldr	r3, [r7, #0]
 80213b4:	781b      	ldrb	r3, [r3, #0]
 80213b6:	009b      	lsls	r3, r3, #2
 80213b8:	18d3      	adds	r3, r2, r3
 80213ba:	183a      	adds	r2, r7, r0
 80213bc:	8812      	ldrh	r2, [r2, #0]
 80213be:	491b      	ldr	r1, [pc, #108]	@ (802142c <USB_EPClearStall+0x15c>)
 80213c0:	430a      	orrs	r2, r1
 80213c2:	b292      	uxth	r2, r2
 80213c4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80213c6:	687a      	ldr	r2, [r7, #4]
 80213c8:	683b      	ldr	r3, [r7, #0]
 80213ca:	781b      	ldrb	r3, [r3, #0]
 80213cc:	009b      	lsls	r3, r3, #2
 80213ce:	18d3      	adds	r3, r2, r3
 80213d0:	881b      	ldrh	r3, [r3, #0]
 80213d2:	b29a      	uxth	r2, r3
 80213d4:	2012      	movs	r0, #18
 80213d6:	183b      	adds	r3, r7, r0
 80213d8:	4915      	ldr	r1, [pc, #84]	@ (8021430 <USB_EPClearStall+0x160>)
 80213da:	400a      	ands	r2, r1
 80213dc:	801a      	strh	r2, [r3, #0]
 80213de:	183b      	adds	r3, r7, r0
 80213e0:	183a      	adds	r2, r7, r0
 80213e2:	8812      	ldrh	r2, [r2, #0]
 80213e4:	2180      	movs	r1, #128	@ 0x80
 80213e6:	0149      	lsls	r1, r1, #5
 80213e8:	404a      	eors	r2, r1
 80213ea:	801a      	strh	r2, [r3, #0]
 80213ec:	183b      	adds	r3, r7, r0
 80213ee:	183a      	adds	r2, r7, r0
 80213f0:	8812      	ldrh	r2, [r2, #0]
 80213f2:	2180      	movs	r1, #128	@ 0x80
 80213f4:	0189      	lsls	r1, r1, #6
 80213f6:	404a      	eors	r2, r1
 80213f8:	801a      	strh	r2, [r3, #0]
 80213fa:	687a      	ldr	r2, [r7, #4]
 80213fc:	683b      	ldr	r3, [r7, #0]
 80213fe:	781b      	ldrb	r3, [r3, #0]
 8021400:	009b      	lsls	r3, r3, #2
 8021402:	18d3      	adds	r3, r2, r3
 8021404:	183a      	adds	r2, r7, r0
 8021406:	8812      	ldrh	r2, [r2, #0]
 8021408:	4907      	ldr	r1, [pc, #28]	@ (8021428 <USB_EPClearStall+0x158>)
 802140a:	430a      	orrs	r2, r1
 802140c:	b292      	uxth	r2, r2
 802140e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8021410:	2300      	movs	r3, #0
}
 8021412:	0018      	movs	r0, r3
 8021414:	46bd      	mov	sp, r7
 8021416:	b006      	add	sp, #24
 8021418:	bd80      	pop	{r7, pc}
 802141a:	46c0      	nop			@ (mov r8, r8)
 802141c:	ffff8f8f 	.word	0xffff8f8f
 8021420:	ffff80c0 	.word	0xffff80c0
 8021424:	ffff8fbf 	.word	0xffff8fbf
 8021428:	ffff8080 	.word	0xffff8080
 802142c:	ffffc080 	.word	0xffffc080
 8021430:	ffffbf8f 	.word	0xffffbf8f

08021434 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8021434:	b580      	push	{r7, lr}
 8021436:	b082      	sub	sp, #8
 8021438:	af00      	add	r7, sp, #0
 802143a:	6078      	str	r0, [r7, #4]
 802143c:	000a      	movs	r2, r1
 802143e:	1cfb      	adds	r3, r7, #3
 8021440:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8021442:	1cfb      	adds	r3, r7, #3
 8021444:	781b      	ldrb	r3, [r3, #0]
 8021446:	2b00      	cmp	r3, #0
 8021448:	d103      	bne.n	8021452 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 802144a:	687b      	ldr	r3, [r7, #4]
 802144c:	224c      	movs	r2, #76	@ 0x4c
 802144e:	2180      	movs	r1, #128	@ 0x80
 8021450:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8021452:	2300      	movs	r3, #0
}
 8021454:	0018      	movs	r0, r3
 8021456:	46bd      	mov	sp, r7
 8021458:	b002      	add	sp, #8
 802145a:	bd80      	pop	{r7, pc}

0802145c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 802145c:	b580      	push	{r7, lr}
 802145e:	b082      	sub	sp, #8
 8021460:	af00      	add	r7, sp, #0
 8021462:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	2258      	movs	r2, #88	@ 0x58
 8021468:	5a9b      	ldrh	r3, [r3, r2]
 802146a:	b29b      	uxth	r3, r3
 802146c:	4a05      	ldr	r2, [pc, #20]	@ (8021484 <USB_DevConnect+0x28>)
 802146e:	4313      	orrs	r3, r2
 8021470:	b299      	uxth	r1, r3
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	2258      	movs	r2, #88	@ 0x58
 8021476:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8021478:	2300      	movs	r3, #0
}
 802147a:	0018      	movs	r0, r3
 802147c:	46bd      	mov	sp, r7
 802147e:	b002      	add	sp, #8
 8021480:	bd80      	pop	{r7, pc}
 8021482:	46c0      	nop			@ (mov r8, r8)
 8021484:	ffff8000 	.word	0xffff8000

08021488 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8021488:	b580      	push	{r7, lr}
 802148a:	b084      	sub	sp, #16
 802148c:	af00      	add	r7, sp, #0
 802148e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	2244      	movs	r2, #68	@ 0x44
 8021494:	5a9b      	ldrh	r3, [r3, r2]
 8021496:	b29b      	uxth	r3, r3
 8021498:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 802149a:	68fb      	ldr	r3, [r7, #12]
}
 802149c:	0018      	movs	r0, r3
 802149e:	46bd      	mov	sp, r7
 80214a0:	b004      	add	sp, #16
 80214a2:	bd80      	pop	{r7, pc}

080214a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80214a4:	b580      	push	{r7, lr}
 80214a6:	b08a      	sub	sp, #40	@ 0x28
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	60f8      	str	r0, [r7, #12]
 80214ac:	60b9      	str	r1, [r7, #8]
 80214ae:	0019      	movs	r1, r3
 80214b0:	1dbb      	adds	r3, r7, #6
 80214b2:	801a      	strh	r2, [r3, #0]
 80214b4:	1d3b      	adds	r3, r7, #4
 80214b6:	1c0a      	adds	r2, r1, #0
 80214b8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80214ba:	1d3b      	adds	r3, r7, #4
 80214bc:	881b      	ldrh	r3, [r3, #0]
 80214be:	3301      	adds	r3, #1
 80214c0:	085b      	lsrs	r3, r3, #1
 80214c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80214c4:	68fb      	ldr	r3, [r7, #12]
 80214c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80214c8:	68bb      	ldr	r3, [r7, #8]
 80214ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80214cc:	1dbb      	adds	r3, r7, #6
 80214ce:	881a      	ldrh	r2, [r3, #0]
 80214d0:	697b      	ldr	r3, [r7, #20]
 80214d2:	18d3      	adds	r3, r2, r3
 80214d4:	2280      	movs	r2, #128	@ 0x80
 80214d6:	00d2      	lsls	r2, r2, #3
 80214d8:	4694      	mov	ip, r2
 80214da:	4463      	add	r3, ip
 80214dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80214de:	69bb      	ldr	r3, [r7, #24]
 80214e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80214e2:	e021      	b.n	8021528 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80214e4:	69fb      	ldr	r3, [r7, #28]
 80214e6:	781a      	ldrb	r2, [r3, #0]
 80214e8:	2112      	movs	r1, #18
 80214ea:	187b      	adds	r3, r7, r1
 80214ec:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80214ee:	69fb      	ldr	r3, [r7, #28]
 80214f0:	3301      	adds	r3, #1
 80214f2:	781b      	ldrb	r3, [r3, #0]
 80214f4:	b21b      	sxth	r3, r3
 80214f6:	021b      	lsls	r3, r3, #8
 80214f8:	b21a      	sxth	r2, r3
 80214fa:	187b      	adds	r3, r7, r1
 80214fc:	2000      	movs	r0, #0
 80214fe:	5e1b      	ldrsh	r3, [r3, r0]
 8021500:	4313      	orrs	r3, r2
 8021502:	b21a      	sxth	r2, r3
 8021504:	187b      	adds	r3, r7, r1
 8021506:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8021508:	6a3b      	ldr	r3, [r7, #32]
 802150a:	187a      	adds	r2, r7, r1
 802150c:	8812      	ldrh	r2, [r2, #0]
 802150e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8021510:	6a3b      	ldr	r3, [r7, #32]
 8021512:	3302      	adds	r3, #2
 8021514:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8021516:	69fb      	ldr	r3, [r7, #28]
 8021518:	3301      	adds	r3, #1
 802151a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 802151c:	69fb      	ldr	r3, [r7, #28]
 802151e:	3301      	adds	r3, #1
 8021520:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8021522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021524:	3b01      	subs	r3, #1
 8021526:	627b      	str	r3, [r7, #36]	@ 0x24
 8021528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802152a:	2b00      	cmp	r3, #0
 802152c:	d1da      	bne.n	80214e4 <USB_WritePMA+0x40>
  }
}
 802152e:	46c0      	nop			@ (mov r8, r8)
 8021530:	46c0      	nop			@ (mov r8, r8)
 8021532:	46bd      	mov	sp, r7
 8021534:	b00a      	add	sp, #40	@ 0x28
 8021536:	bd80      	pop	{r7, pc}

08021538 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021538:	b580      	push	{r7, lr}
 802153a:	b08a      	sub	sp, #40	@ 0x28
 802153c:	af00      	add	r7, sp, #0
 802153e:	60f8      	str	r0, [r7, #12]
 8021540:	60b9      	str	r1, [r7, #8]
 8021542:	0019      	movs	r1, r3
 8021544:	1dbb      	adds	r3, r7, #6
 8021546:	801a      	strh	r2, [r3, #0]
 8021548:	1d3b      	adds	r3, r7, #4
 802154a:	1c0a      	adds	r2, r1, #0
 802154c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 802154e:	1d3b      	adds	r3, r7, #4
 8021550:	881b      	ldrh	r3, [r3, #0]
 8021552:	085b      	lsrs	r3, r3, #1
 8021554:	b29b      	uxth	r3, r3
 8021556:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021560:	1dbb      	adds	r3, r7, #6
 8021562:	881a      	ldrh	r2, [r3, #0]
 8021564:	697b      	ldr	r3, [r7, #20]
 8021566:	18d3      	adds	r3, r2, r3
 8021568:	2280      	movs	r2, #128	@ 0x80
 802156a:	00d2      	lsls	r2, r2, #3
 802156c:	4694      	mov	ip, r2
 802156e:	4463      	add	r3, ip
 8021570:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8021572:	69bb      	ldr	r3, [r7, #24]
 8021574:	627b      	str	r3, [r7, #36]	@ 0x24
 8021576:	e018      	b.n	80215aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8021578:	6a3b      	ldr	r3, [r7, #32]
 802157a:	881b      	ldrh	r3, [r3, #0]
 802157c:	b29b      	uxth	r3, r3
 802157e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021580:	6a3b      	ldr	r3, [r7, #32]
 8021582:	3302      	adds	r3, #2
 8021584:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8021586:	693b      	ldr	r3, [r7, #16]
 8021588:	b2da      	uxtb	r2, r3
 802158a:	69fb      	ldr	r3, [r7, #28]
 802158c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802158e:	69fb      	ldr	r3, [r7, #28]
 8021590:	3301      	adds	r3, #1
 8021592:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8021594:	693b      	ldr	r3, [r7, #16]
 8021596:	0a1b      	lsrs	r3, r3, #8
 8021598:	b2da      	uxtb	r2, r3
 802159a:	69fb      	ldr	r3, [r7, #28]
 802159c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802159e:	69fb      	ldr	r3, [r7, #28]
 80215a0:	3301      	adds	r3, #1
 80215a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80215a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215a6:	3b01      	subs	r3, #1
 80215a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80215aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d1e3      	bne.n	8021578 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80215b0:	1d3b      	adds	r3, r7, #4
 80215b2:	881b      	ldrh	r3, [r3, #0]
 80215b4:	2201      	movs	r2, #1
 80215b6:	4013      	ands	r3, r2
 80215b8:	b29b      	uxth	r3, r3
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d007      	beq.n	80215ce <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80215be:	6a3b      	ldr	r3, [r7, #32]
 80215c0:	881b      	ldrh	r3, [r3, #0]
 80215c2:	b29b      	uxth	r3, r3
 80215c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80215c6:	693b      	ldr	r3, [r7, #16]
 80215c8:	b2da      	uxtb	r2, r3
 80215ca:	69fb      	ldr	r3, [r7, #28]
 80215cc:	701a      	strb	r2, [r3, #0]
  }
}
 80215ce:	46c0      	nop			@ (mov r8, r8)
 80215d0:	46bd      	mov	sp, r7
 80215d2:	b00a      	add	sp, #40	@ 0x28
 80215d4:	bd80      	pop	{r7, pc}

080215d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80215d6:	b580      	push	{r7, lr}
 80215d8:	b084      	sub	sp, #16
 80215da:	af00      	add	r7, sp, #0
 80215dc:	6078      	str	r0, [r7, #4]
 80215de:	000a      	movs	r2, r1
 80215e0:	1cfb      	adds	r3, r7, #3
 80215e2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80215e4:	230f      	movs	r3, #15
 80215e6:	18fb      	adds	r3, r7, r3
 80215e8:	2200      	movs	r2, #0
 80215ea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	7c1b      	ldrb	r3, [r3, #16]
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d116      	bne.n	8021622 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80215f4:	2380      	movs	r3, #128	@ 0x80
 80215f6:	009b      	lsls	r3, r3, #2
 80215f8:	6878      	ldr	r0, [r7, #4]
 80215fa:	2202      	movs	r2, #2
 80215fc:	2181      	movs	r1, #129	@ 0x81
 80215fe:	f002 f8f8 	bl	80237f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8021602:	687b      	ldr	r3, [r7, #4]
 8021604:	2201      	movs	r2, #1
 8021606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021608:	2380      	movs	r3, #128	@ 0x80
 802160a:	009b      	lsls	r3, r3, #2
 802160c:	6878      	ldr	r0, [r7, #4]
 802160e:	2202      	movs	r2, #2
 8021610:	2101      	movs	r1, #1
 8021612:	f002 f8ee 	bl	80237f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021616:	687a      	ldr	r2, [r7, #4]
 8021618:	23b6      	movs	r3, #182	@ 0xb6
 802161a:	005b      	lsls	r3, r3, #1
 802161c:	2101      	movs	r1, #1
 802161e:	50d1      	str	r1, [r2, r3]
 8021620:	e013      	b.n	802164a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8021622:	6878      	ldr	r0, [r7, #4]
 8021624:	2340      	movs	r3, #64	@ 0x40
 8021626:	2202      	movs	r2, #2
 8021628:	2181      	movs	r1, #129	@ 0x81
 802162a:	f002 f8e2 	bl	80237f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	2201      	movs	r2, #1
 8021632:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021634:	6878      	ldr	r0, [r7, #4]
 8021636:	2340      	movs	r3, #64	@ 0x40
 8021638:	2202      	movs	r2, #2
 802163a:	2101      	movs	r1, #1
 802163c:	f002 f8d9 	bl	80237f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021640:	687a      	ldr	r2, [r7, #4]
 8021642:	23b6      	movs	r3, #182	@ 0xb6
 8021644:	005b      	lsls	r3, r3, #1
 8021646:	2101      	movs	r1, #1
 8021648:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802164a:	6878      	ldr	r0, [r7, #4]
 802164c:	2308      	movs	r3, #8
 802164e:	2203      	movs	r2, #3
 8021650:	2182      	movs	r1, #130	@ 0x82
 8021652:	f002 f8ce 	bl	80237f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	2201      	movs	r2, #1
 802165a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802165c:	2387      	movs	r3, #135	@ 0x87
 802165e:	009b      	lsls	r3, r3, #2
 8021660:	0018      	movs	r0, r3
 8021662:	f002 fa5f 	bl	8023b24 <USBD_static_malloc>
 8021666:	0001      	movs	r1, r0
 8021668:	687a      	ldr	r2, [r7, #4]
 802166a:	23ae      	movs	r3, #174	@ 0xae
 802166c:	009b      	lsls	r3, r3, #2
 802166e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021670:	687a      	ldr	r2, [r7, #4]
 8021672:	23ae      	movs	r3, #174	@ 0xae
 8021674:	009b      	lsls	r3, r3, #2
 8021676:	58d3      	ldr	r3, [r2, r3]
 8021678:	2b00      	cmp	r3, #0
 802167a:	d104      	bne.n	8021686 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 802167c:	230f      	movs	r3, #15
 802167e:	18fb      	adds	r3, r7, r3
 8021680:	2201      	movs	r2, #1
 8021682:	701a      	strb	r2, [r3, #0]
 8021684:	e02c      	b.n	80216e0 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021686:	687a      	ldr	r2, [r7, #4]
 8021688:	23ae      	movs	r3, #174	@ 0xae
 802168a:	009b      	lsls	r3, r3, #2
 802168c:	58d3      	ldr	r3, [r2, r3]
 802168e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021690:	687a      	ldr	r2, [r7, #4]
 8021692:	23af      	movs	r3, #175	@ 0xaf
 8021694:	009b      	lsls	r3, r3, #2
 8021696:	58d3      	ldr	r3, [r2, r3]
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 802169c:	68ba      	ldr	r2, [r7, #8]
 802169e:	2385      	movs	r3, #133	@ 0x85
 80216a0:	009b      	lsls	r3, r3, #2
 80216a2:	2100      	movs	r1, #0
 80216a4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80216a6:	68ba      	ldr	r2, [r7, #8]
 80216a8:	2386      	movs	r3, #134	@ 0x86
 80216aa:	009b      	lsls	r3, r3, #2
 80216ac:	2100      	movs	r1, #0
 80216ae:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	7c1b      	ldrb	r3, [r3, #16]
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d10a      	bne.n	80216ce <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80216b8:	68ba      	ldr	r2, [r7, #8]
 80216ba:	2381      	movs	r3, #129	@ 0x81
 80216bc:	009b      	lsls	r3, r3, #2
 80216be:	58d2      	ldr	r2, [r2, r3]
 80216c0:	2380      	movs	r3, #128	@ 0x80
 80216c2:	009b      	lsls	r3, r3, #2
 80216c4:	6878      	ldr	r0, [r7, #4]
 80216c6:	2101      	movs	r1, #1
 80216c8:	f002 f9de 	bl	8023a88 <USBD_LL_PrepareReceive>
 80216cc:	e008      	b.n	80216e0 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80216ce:	68ba      	ldr	r2, [r7, #8]
 80216d0:	2381      	movs	r3, #129	@ 0x81
 80216d2:	009b      	lsls	r3, r3, #2
 80216d4:	58d2      	ldr	r2, [r2, r3]
 80216d6:	6878      	ldr	r0, [r7, #4]
 80216d8:	2340      	movs	r3, #64	@ 0x40
 80216da:	2101      	movs	r1, #1
 80216dc:	f002 f9d4 	bl	8023a88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80216e0:	230f      	movs	r3, #15
 80216e2:	18fb      	adds	r3, r7, r3
 80216e4:	781b      	ldrb	r3, [r3, #0]
}
 80216e6:	0018      	movs	r0, r3
 80216e8:	46bd      	mov	sp, r7
 80216ea:	b004      	add	sp, #16
 80216ec:	bd80      	pop	{r7, pc}

080216ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80216ee:	b580      	push	{r7, lr}
 80216f0:	b084      	sub	sp, #16
 80216f2:	af00      	add	r7, sp, #0
 80216f4:	6078      	str	r0, [r7, #4]
 80216f6:	000a      	movs	r2, r1
 80216f8:	1cfb      	adds	r3, r7, #3
 80216fa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80216fc:	230f      	movs	r3, #15
 80216fe:	18fb      	adds	r3, r7, r3
 8021700:	2200      	movs	r2, #0
 8021702:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	2181      	movs	r1, #129	@ 0x81
 8021708:	0018      	movs	r0, r3
 802170a:	f002 f8a9 	bl	8023860 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	2200      	movs	r2, #0
 8021712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	2101      	movs	r1, #1
 8021718:	0018      	movs	r0, r3
 802171a:	f002 f8a1 	bl	8023860 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802171e:	687a      	ldr	r2, [r7, #4]
 8021720:	23b6      	movs	r3, #182	@ 0xb6
 8021722:	005b      	lsls	r3, r3, #1
 8021724:	2100      	movs	r1, #0
 8021726:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	2182      	movs	r1, #130	@ 0x82
 802172c:	0018      	movs	r0, r3
 802172e:	f002 f897 	bl	8023860 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	2200      	movs	r2, #0
 8021736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8021738:	687a      	ldr	r2, [r7, #4]
 802173a:	23ae      	movs	r3, #174	@ 0xae
 802173c:	009b      	lsls	r3, r3, #2
 802173e:	58d3      	ldr	r3, [r2, r3]
 8021740:	2b00      	cmp	r3, #0
 8021742:	d011      	beq.n	8021768 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8021744:	687a      	ldr	r2, [r7, #4]
 8021746:	23af      	movs	r3, #175	@ 0xaf
 8021748:	009b      	lsls	r3, r3, #2
 802174a:	58d3      	ldr	r3, [r2, r3]
 802174c:	685b      	ldr	r3, [r3, #4]
 802174e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8021750:	687a      	ldr	r2, [r7, #4]
 8021752:	23ae      	movs	r3, #174	@ 0xae
 8021754:	009b      	lsls	r3, r3, #2
 8021756:	58d3      	ldr	r3, [r2, r3]
 8021758:	0018      	movs	r0, r3
 802175a:	f002 f9ef 	bl	8023b3c <USBD_static_free>
    pdev->pClassData = NULL;
 802175e:	687a      	ldr	r2, [r7, #4]
 8021760:	23ae      	movs	r3, #174	@ 0xae
 8021762:	009b      	lsls	r3, r3, #2
 8021764:	2100      	movs	r1, #0
 8021766:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021768:	230f      	movs	r3, #15
 802176a:	18fb      	adds	r3, r7, r3
 802176c:	781b      	ldrb	r3, [r3, #0]
}
 802176e:	0018      	movs	r0, r3
 8021770:	46bd      	mov	sp, r7
 8021772:	b004      	add	sp, #16
 8021774:	bd80      	pop	{r7, pc}
	...

08021778 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b086      	sub	sp, #24
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]
 8021780:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021782:	687a      	ldr	r2, [r7, #4]
 8021784:	23ae      	movs	r3, #174	@ 0xae
 8021786:	009b      	lsls	r3, r3, #2
 8021788:	58d3      	ldr	r3, [r2, r3]
 802178a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 802178c:	230f      	movs	r3, #15
 802178e:	18fb      	adds	r3, r7, r3
 8021790:	2200      	movs	r2, #0
 8021792:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8021794:	230c      	movs	r3, #12
 8021796:	18fb      	adds	r3, r7, r3
 8021798:	2200      	movs	r2, #0
 802179a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 802179c:	2317      	movs	r3, #23
 802179e:	18fb      	adds	r3, r7, r3
 80217a0:	2200      	movs	r2, #0
 80217a2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80217a4:	683b      	ldr	r3, [r7, #0]
 80217a6:	781b      	ldrb	r3, [r3, #0]
 80217a8:	001a      	movs	r2, r3
 80217aa:	2360      	movs	r3, #96	@ 0x60
 80217ac:	4013      	ands	r3, r2
 80217ae:	d03d      	beq.n	802182c <USBD_CDC_Setup+0xb4>
 80217b0:	2b20      	cmp	r3, #32
 80217b2:	d000      	beq.n	80217b6 <USBD_CDC_Setup+0x3e>
 80217b4:	e094      	b.n	80218e0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80217b6:	683b      	ldr	r3, [r7, #0]
 80217b8:	88db      	ldrh	r3, [r3, #6]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d02b      	beq.n	8021816 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80217be:	683b      	ldr	r3, [r7, #0]
 80217c0:	781b      	ldrb	r3, [r3, #0]
 80217c2:	b25b      	sxtb	r3, r3
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	da12      	bge.n	80217ee <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80217c8:	687a      	ldr	r2, [r7, #4]
 80217ca:	23af      	movs	r3, #175	@ 0xaf
 80217cc:	009b      	lsls	r3, r3, #2
 80217ce:	58d3      	ldr	r3, [r2, r3]
 80217d0:	689b      	ldr	r3, [r3, #8]
 80217d2:	683a      	ldr	r2, [r7, #0]
 80217d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80217d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80217d8:	683a      	ldr	r2, [r7, #0]
 80217da:	88d2      	ldrh	r2, [r2, #6]
 80217dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80217de:	6939      	ldr	r1, [r7, #16]
 80217e0:	683b      	ldr	r3, [r7, #0]
 80217e2:	88da      	ldrh	r2, [r3, #6]
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	0018      	movs	r0, r3
 80217e8:	f001 fbaf 	bl	8022f4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80217ec:	e083      	b.n	80218f6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80217ee:	683b      	ldr	r3, [r7, #0]
 80217f0:	7859      	ldrb	r1, [r3, #1]
 80217f2:	693a      	ldr	r2, [r7, #16]
 80217f4:	2380      	movs	r3, #128	@ 0x80
 80217f6:	009b      	lsls	r3, r3, #2
 80217f8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80217fa:	683b      	ldr	r3, [r7, #0]
 80217fc:	88db      	ldrh	r3, [r3, #6]
 80217fe:	b2d9      	uxtb	r1, r3
 8021800:	693b      	ldr	r3, [r7, #16]
 8021802:	4a40      	ldr	r2, [pc, #256]	@ (8021904 <USBD_CDC_Setup+0x18c>)
 8021804:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8021806:	6939      	ldr	r1, [r7, #16]
 8021808:	683b      	ldr	r3, [r7, #0]
 802180a:	88da      	ldrh	r2, [r3, #6]
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	0018      	movs	r0, r3
 8021810:	f001 fbce 	bl	8022fb0 <USBD_CtlPrepareRx>
      break;
 8021814:	e06f      	b.n	80218f6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021816:	687a      	ldr	r2, [r7, #4]
 8021818:	23af      	movs	r3, #175	@ 0xaf
 802181a:	009b      	lsls	r3, r3, #2
 802181c:	58d3      	ldr	r3, [r2, r3]
 802181e:	689b      	ldr	r3, [r3, #8]
 8021820:	683a      	ldr	r2, [r7, #0]
 8021822:	7850      	ldrb	r0, [r2, #1]
 8021824:	6839      	ldr	r1, [r7, #0]
 8021826:	2200      	movs	r2, #0
 8021828:	4798      	blx	r3
      break;
 802182a:	e064      	b.n	80218f6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802182c:	683b      	ldr	r3, [r7, #0]
 802182e:	785b      	ldrb	r3, [r3, #1]
 8021830:	2b0b      	cmp	r3, #11
 8021832:	d037      	beq.n	80218a4 <USBD_CDC_Setup+0x12c>
 8021834:	dc47      	bgt.n	80218c6 <USBD_CDC_Setup+0x14e>
 8021836:	2b00      	cmp	r3, #0
 8021838:	d002      	beq.n	8021840 <USBD_CDC_Setup+0xc8>
 802183a:	2b0a      	cmp	r3, #10
 802183c:	d019      	beq.n	8021872 <USBD_CDC_Setup+0xfa>
 802183e:	e042      	b.n	80218c6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021840:	687a      	ldr	r2, [r7, #4]
 8021842:	23a7      	movs	r3, #167	@ 0xa7
 8021844:	009b      	lsls	r3, r3, #2
 8021846:	5cd3      	ldrb	r3, [r2, r3]
 8021848:	2b03      	cmp	r3, #3
 802184a:	d107      	bne.n	802185c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 802184c:	230c      	movs	r3, #12
 802184e:	18f9      	adds	r1, r7, r3
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	2202      	movs	r2, #2
 8021854:	0018      	movs	r0, r3
 8021856:	f001 fb78 	bl	8022f4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802185a:	e040      	b.n	80218de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802185c:	683a      	ldr	r2, [r7, #0]
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	0011      	movs	r1, r2
 8021862:	0018      	movs	r0, r3
 8021864:	f001 faf3 	bl	8022e4e <USBD_CtlError>
            ret = USBD_FAIL;
 8021868:	2317      	movs	r3, #23
 802186a:	18fb      	adds	r3, r7, r3
 802186c:	2202      	movs	r2, #2
 802186e:	701a      	strb	r2, [r3, #0]
          break;
 8021870:	e035      	b.n	80218de <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021872:	687a      	ldr	r2, [r7, #4]
 8021874:	23a7      	movs	r3, #167	@ 0xa7
 8021876:	009b      	lsls	r3, r3, #2
 8021878:	5cd3      	ldrb	r3, [r2, r3]
 802187a:	2b03      	cmp	r3, #3
 802187c:	d107      	bne.n	802188e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 802187e:	230f      	movs	r3, #15
 8021880:	18f9      	adds	r1, r7, r3
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	2201      	movs	r2, #1
 8021886:	0018      	movs	r0, r3
 8021888:	f001 fb5f 	bl	8022f4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802188c:	e027      	b.n	80218de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802188e:	683a      	ldr	r2, [r7, #0]
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	0011      	movs	r1, r2
 8021894:	0018      	movs	r0, r3
 8021896:	f001 fada 	bl	8022e4e <USBD_CtlError>
            ret = USBD_FAIL;
 802189a:	2317      	movs	r3, #23
 802189c:	18fb      	adds	r3, r7, r3
 802189e:	2202      	movs	r2, #2
 80218a0:	701a      	strb	r2, [r3, #0]
          break;
 80218a2:	e01c      	b.n	80218de <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80218a4:	687a      	ldr	r2, [r7, #4]
 80218a6:	23a7      	movs	r3, #167	@ 0xa7
 80218a8:	009b      	lsls	r3, r3, #2
 80218aa:	5cd3      	ldrb	r3, [r2, r3]
 80218ac:	2b03      	cmp	r3, #3
 80218ae:	d015      	beq.n	80218dc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80218b0:	683a      	ldr	r2, [r7, #0]
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	0011      	movs	r1, r2
 80218b6:	0018      	movs	r0, r3
 80218b8:	f001 fac9 	bl	8022e4e <USBD_CtlError>
            ret = USBD_FAIL;
 80218bc:	2317      	movs	r3, #23
 80218be:	18fb      	adds	r3, r7, r3
 80218c0:	2202      	movs	r2, #2
 80218c2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80218c4:	e00a      	b.n	80218dc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80218c6:	683a      	ldr	r2, [r7, #0]
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	0011      	movs	r1, r2
 80218cc:	0018      	movs	r0, r3
 80218ce:	f001 fabe 	bl	8022e4e <USBD_CtlError>
          ret = USBD_FAIL;
 80218d2:	2317      	movs	r3, #23
 80218d4:	18fb      	adds	r3, r7, r3
 80218d6:	2202      	movs	r2, #2
 80218d8:	701a      	strb	r2, [r3, #0]
          break;
 80218da:	e000      	b.n	80218de <USBD_CDC_Setup+0x166>
          break;
 80218dc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80218de:	e00a      	b.n	80218f6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80218e0:	683a      	ldr	r2, [r7, #0]
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	0011      	movs	r1, r2
 80218e6:	0018      	movs	r0, r3
 80218e8:	f001 fab1 	bl	8022e4e <USBD_CtlError>
      ret = USBD_FAIL;
 80218ec:	2317      	movs	r3, #23
 80218ee:	18fb      	adds	r3, r7, r3
 80218f0:	2202      	movs	r2, #2
 80218f2:	701a      	strb	r2, [r3, #0]
      break;
 80218f4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80218f6:	2317      	movs	r3, #23
 80218f8:	18fb      	adds	r3, r7, r3
 80218fa:	781b      	ldrb	r3, [r3, #0]
}
 80218fc:	0018      	movs	r0, r3
 80218fe:	46bd      	mov	sp, r7
 8021900:	b006      	add	sp, #24
 8021902:	bd80      	pop	{r7, pc}
 8021904:	00000201 	.word	0x00000201

08021908 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021908:	b580      	push	{r7, lr}
 802190a:	b084      	sub	sp, #16
 802190c:	af00      	add	r7, sp, #0
 802190e:	6078      	str	r0, [r7, #4]
 8021910:	000a      	movs	r2, r1
 8021912:	1cfb      	adds	r3, r7, #3
 8021914:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8021916:	687a      	ldr	r2, [r7, #4]
 8021918:	23ae      	movs	r3, #174	@ 0xae
 802191a:	009b      	lsls	r3, r3, #2
 802191c:	58d3      	ldr	r3, [r2, r3]
 802191e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8021920:	687a      	ldr	r2, [r7, #4]
 8021922:	23b0      	movs	r3, #176	@ 0xb0
 8021924:	009b      	lsls	r3, r3, #2
 8021926:	58d3      	ldr	r3, [r2, r3]
 8021928:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 802192a:	687a      	ldr	r2, [r7, #4]
 802192c:	23ae      	movs	r3, #174	@ 0xae
 802192e:	009b      	lsls	r3, r3, #2
 8021930:	58d3      	ldr	r3, [r2, r3]
 8021932:	2b00      	cmp	r3, #0
 8021934:	d03e      	beq.n	80219b4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021936:	1cfb      	adds	r3, r7, #3
 8021938:	781a      	ldrb	r2, [r3, #0]
 802193a:	6879      	ldr	r1, [r7, #4]
 802193c:	0013      	movs	r3, r2
 802193e:	009b      	lsls	r3, r3, #2
 8021940:	189b      	adds	r3, r3, r2
 8021942:	009b      	lsls	r3, r3, #2
 8021944:	18cb      	adds	r3, r1, r3
 8021946:	331c      	adds	r3, #28
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	2b00      	cmp	r3, #0
 802194c:	d02b      	beq.n	80219a6 <USBD_CDC_DataIn+0x9e>
 802194e:	1cfb      	adds	r3, r7, #3
 8021950:	781a      	ldrb	r2, [r3, #0]
 8021952:	6879      	ldr	r1, [r7, #4]
 8021954:	0013      	movs	r3, r2
 8021956:	009b      	lsls	r3, r3, #2
 8021958:	189b      	adds	r3, r3, r2
 802195a:	009b      	lsls	r3, r3, #2
 802195c:	18cb      	adds	r3, r1, r3
 802195e:	331c      	adds	r3, #28
 8021960:	6818      	ldr	r0, [r3, #0]
 8021962:	1cfb      	adds	r3, r7, #3
 8021964:	781a      	ldrb	r2, [r3, #0]
 8021966:	68b9      	ldr	r1, [r7, #8]
 8021968:	0013      	movs	r3, r2
 802196a:	009b      	lsls	r3, r3, #2
 802196c:	189b      	adds	r3, r3, r2
 802196e:	00db      	lsls	r3, r3, #3
 8021970:	18cb      	adds	r3, r1, r3
 8021972:	3338      	adds	r3, #56	@ 0x38
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	0019      	movs	r1, r3
 8021978:	f7de fc9a 	bl	80002b0 <__aeabi_uidivmod>
 802197c:	1e0b      	subs	r3, r1, #0
 802197e:	d112      	bne.n	80219a6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021980:	1cfb      	adds	r3, r7, #3
 8021982:	781a      	ldrb	r2, [r3, #0]
 8021984:	6879      	ldr	r1, [r7, #4]
 8021986:	0013      	movs	r3, r2
 8021988:	009b      	lsls	r3, r3, #2
 802198a:	189b      	adds	r3, r3, r2
 802198c:	009b      	lsls	r3, r3, #2
 802198e:	18cb      	adds	r3, r1, r3
 8021990:	331c      	adds	r3, #28
 8021992:	2200      	movs	r2, #0
 8021994:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8021996:	1cfb      	adds	r3, r7, #3
 8021998:	7819      	ldrb	r1, [r3, #0]
 802199a:	6878      	ldr	r0, [r7, #4]
 802199c:	2300      	movs	r3, #0
 802199e:	2200      	movs	r2, #0
 80219a0:	f002 f83b 	bl	8023a1a <USBD_LL_Transmit>
 80219a4:	e004      	b.n	80219b0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80219a6:	68fa      	ldr	r2, [r7, #12]
 80219a8:	2385      	movs	r3, #133	@ 0x85
 80219aa:	009b      	lsls	r3, r3, #2
 80219ac:	2100      	movs	r1, #0
 80219ae:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80219b0:	2300      	movs	r3, #0
 80219b2:	e000      	b.n	80219b6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80219b4:	2302      	movs	r3, #2
  }
}
 80219b6:	0018      	movs	r0, r3
 80219b8:	46bd      	mov	sp, r7
 80219ba:	b004      	add	sp, #16
 80219bc:	bd80      	pop	{r7, pc}

080219be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80219be:	b580      	push	{r7, lr}
 80219c0:	b084      	sub	sp, #16
 80219c2:	af00      	add	r7, sp, #0
 80219c4:	6078      	str	r0, [r7, #4]
 80219c6:	000a      	movs	r2, r1
 80219c8:	1cfb      	adds	r3, r7, #3
 80219ca:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219cc:	687a      	ldr	r2, [r7, #4]
 80219ce:	23ae      	movs	r3, #174	@ 0xae
 80219d0:	009b      	lsls	r3, r3, #2
 80219d2:	58d3      	ldr	r3, [r2, r3]
 80219d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80219d6:	1cfb      	adds	r3, r7, #3
 80219d8:	781a      	ldrb	r2, [r3, #0]
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	0011      	movs	r1, r2
 80219de:	0018      	movs	r0, r3
 80219e0:	f002 f889 	bl	8023af6 <USBD_LL_GetRxDataSize>
 80219e4:	0001      	movs	r1, r0
 80219e6:	68fa      	ldr	r2, [r7, #12]
 80219e8:	2383      	movs	r3, #131	@ 0x83
 80219ea:	009b      	lsls	r3, r3, #2
 80219ec:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80219ee:	687a      	ldr	r2, [r7, #4]
 80219f0:	23ae      	movs	r3, #174	@ 0xae
 80219f2:	009b      	lsls	r3, r3, #2
 80219f4:	58d3      	ldr	r3, [r2, r3]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d011      	beq.n	8021a1e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80219fa:	687a      	ldr	r2, [r7, #4]
 80219fc:	23af      	movs	r3, #175	@ 0xaf
 80219fe:	009b      	lsls	r3, r3, #2
 8021a00:	58d3      	ldr	r3, [r2, r3]
 8021a02:	68da      	ldr	r2, [r3, #12]
 8021a04:	68f9      	ldr	r1, [r7, #12]
 8021a06:	2381      	movs	r3, #129	@ 0x81
 8021a08:	009b      	lsls	r3, r3, #2
 8021a0a:	58c8      	ldr	r0, [r1, r3]
 8021a0c:	68fb      	ldr	r3, [r7, #12]
 8021a0e:	2183      	movs	r1, #131	@ 0x83
 8021a10:	0089      	lsls	r1, r1, #2
 8021a12:	468c      	mov	ip, r1
 8021a14:	4463      	add	r3, ip
 8021a16:	0019      	movs	r1, r3
 8021a18:	4790      	blx	r2

    return USBD_OK;
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	e000      	b.n	8021a20 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8021a1e:	2302      	movs	r3, #2
  }
}
 8021a20:	0018      	movs	r0, r3
 8021a22:	46bd      	mov	sp, r7
 8021a24:	b004      	add	sp, #16
 8021a26:	bd80      	pop	{r7, pc}

08021a28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021a28:	b590      	push	{r4, r7, lr}
 8021a2a:	b085      	sub	sp, #20
 8021a2c:	af00      	add	r7, sp, #0
 8021a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a30:	687a      	ldr	r2, [r7, #4]
 8021a32:	23ae      	movs	r3, #174	@ 0xae
 8021a34:	009b      	lsls	r3, r3, #2
 8021a36:	58d3      	ldr	r3, [r2, r3]
 8021a38:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8021a3a:	687a      	ldr	r2, [r7, #4]
 8021a3c:	23af      	movs	r3, #175	@ 0xaf
 8021a3e:	009b      	lsls	r3, r3, #2
 8021a40:	58d3      	ldr	r3, [r2, r3]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d018      	beq.n	8021a78 <USBD_CDC_EP0_RxReady+0x50>
 8021a46:	68fa      	ldr	r2, [r7, #12]
 8021a48:	2380      	movs	r3, #128	@ 0x80
 8021a4a:	009b      	lsls	r3, r3, #2
 8021a4c:	5cd3      	ldrb	r3, [r2, r3]
 8021a4e:	2bff      	cmp	r3, #255	@ 0xff
 8021a50:	d012      	beq.n	8021a78 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021a52:	687a      	ldr	r2, [r7, #4]
 8021a54:	23af      	movs	r3, #175	@ 0xaf
 8021a56:	009b      	lsls	r3, r3, #2
 8021a58:	58d3      	ldr	r3, [r2, r3]
 8021a5a:	689b      	ldr	r3, [r3, #8]
 8021a5c:	68f9      	ldr	r1, [r7, #12]
 8021a5e:	2280      	movs	r2, #128	@ 0x80
 8021a60:	0092      	lsls	r2, r2, #2
 8021a62:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021a64:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021a66:	68fa      	ldr	r2, [r7, #12]
 8021a68:	4c06      	ldr	r4, [pc, #24]	@ (8021a84 <USBD_CDC_EP0_RxReady+0x5c>)
 8021a6a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021a6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8021a6e:	68fa      	ldr	r2, [r7, #12]
 8021a70:	2380      	movs	r3, #128	@ 0x80
 8021a72:	009b      	lsls	r3, r3, #2
 8021a74:	21ff      	movs	r1, #255	@ 0xff
 8021a76:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021a78:	2300      	movs	r3, #0
}
 8021a7a:	0018      	movs	r0, r3
 8021a7c:	46bd      	mov	sp, r7
 8021a7e:	b005      	add	sp, #20
 8021a80:	bd90      	pop	{r4, r7, pc}
 8021a82:	46c0      	nop			@ (mov r8, r8)
 8021a84:	00000201 	.word	0x00000201

08021a88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021a88:	b580      	push	{r7, lr}
 8021a8a:	b082      	sub	sp, #8
 8021a8c:	af00      	add	r7, sp, #0
 8021a8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021a90:	687b      	ldr	r3, [r7, #4]
 8021a92:	2243      	movs	r2, #67	@ 0x43
 8021a94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021a96:	4b02      	ldr	r3, [pc, #8]	@ (8021aa0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021a98:	0018      	movs	r0, r3
 8021a9a:	46bd      	mov	sp, r7
 8021a9c:	b002      	add	sp, #8
 8021a9e:	bd80      	pop	{r7, pc}
 8021aa0:	2000018c 	.word	0x2000018c

08021aa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	b082      	sub	sp, #8
 8021aa8:	af00      	add	r7, sp, #0
 8021aaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	2243      	movs	r2, #67	@ 0x43
 8021ab0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021ab2:	4b02      	ldr	r3, [pc, #8]	@ (8021abc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021ab4:	0018      	movs	r0, r3
 8021ab6:	46bd      	mov	sp, r7
 8021ab8:	b002      	add	sp, #8
 8021aba:	bd80      	pop	{r7, pc}
 8021abc:	20000148 	.word	0x20000148

08021ac0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	b082      	sub	sp, #8
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	2243      	movs	r2, #67	@ 0x43
 8021acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021ace:	4b02      	ldr	r3, [pc, #8]	@ (8021ad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021ad0:	0018      	movs	r0, r3
 8021ad2:	46bd      	mov	sp, r7
 8021ad4:	b002      	add	sp, #8
 8021ad6:	bd80      	pop	{r7, pc}
 8021ad8:	200001d0 	.word	0x200001d0

08021adc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	b082      	sub	sp, #8
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	220a      	movs	r2, #10
 8021ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021aea:	4b02      	ldr	r3, [pc, #8]	@ (8021af4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021aec:	0018      	movs	r0, r3
 8021aee:	46bd      	mov	sp, r7
 8021af0:	b002      	add	sp, #8
 8021af2:	bd80      	pop	{r7, pc}
 8021af4:	20000104 	.word	0x20000104

08021af8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b084      	sub	sp, #16
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
 8021b00:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021b02:	200f      	movs	r0, #15
 8021b04:	183b      	adds	r3, r7, r0
 8021b06:	2202      	movs	r2, #2
 8021b08:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8021b0a:	683b      	ldr	r3, [r7, #0]
 8021b0c:	2b00      	cmp	r3, #0
 8021b0e:	d007      	beq.n	8021b20 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021b10:	687a      	ldr	r2, [r7, #4]
 8021b12:	23af      	movs	r3, #175	@ 0xaf
 8021b14:	009b      	lsls	r3, r3, #2
 8021b16:	6839      	ldr	r1, [r7, #0]
 8021b18:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8021b1a:	183b      	adds	r3, r7, r0
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021b20:	230f      	movs	r3, #15
 8021b22:	18fb      	adds	r3, r7, r3
 8021b24:	781b      	ldrb	r3, [r3, #0]
}
 8021b26:	0018      	movs	r0, r3
 8021b28:	46bd      	mov	sp, r7
 8021b2a:	b004      	add	sp, #16
 8021b2c:	bd80      	pop	{r7, pc}

08021b2e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8021b2e:	b580      	push	{r7, lr}
 8021b30:	b086      	sub	sp, #24
 8021b32:	af00      	add	r7, sp, #0
 8021b34:	60f8      	str	r0, [r7, #12]
 8021b36:	60b9      	str	r1, [r7, #8]
 8021b38:	1dbb      	adds	r3, r7, #6
 8021b3a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b3c:	68fa      	ldr	r2, [r7, #12]
 8021b3e:	23ae      	movs	r3, #174	@ 0xae
 8021b40:	009b      	lsls	r3, r3, #2
 8021b42:	58d3      	ldr	r3, [r2, r3]
 8021b44:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021b46:	697a      	ldr	r2, [r7, #20]
 8021b48:	2382      	movs	r3, #130	@ 0x82
 8021b4a:	009b      	lsls	r3, r3, #2
 8021b4c:	68b9      	ldr	r1, [r7, #8]
 8021b4e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021b50:	1dbb      	adds	r3, r7, #6
 8021b52:	8819      	ldrh	r1, [r3, #0]
 8021b54:	697a      	ldr	r2, [r7, #20]
 8021b56:	2384      	movs	r3, #132	@ 0x84
 8021b58:	009b      	lsls	r3, r3, #2
 8021b5a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021b5c:	2300      	movs	r3, #0
}
 8021b5e:	0018      	movs	r0, r3
 8021b60:	46bd      	mov	sp, r7
 8021b62:	b006      	add	sp, #24
 8021b64:	bd80      	pop	{r7, pc}

08021b66 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021b66:	b580      	push	{r7, lr}
 8021b68:	b084      	sub	sp, #16
 8021b6a:	af00      	add	r7, sp, #0
 8021b6c:	6078      	str	r0, [r7, #4]
 8021b6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b70:	687a      	ldr	r2, [r7, #4]
 8021b72:	23ae      	movs	r3, #174	@ 0xae
 8021b74:	009b      	lsls	r3, r3, #2
 8021b76:	58d3      	ldr	r3, [r2, r3]
 8021b78:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8021b7a:	68fa      	ldr	r2, [r7, #12]
 8021b7c:	2381      	movs	r3, #129	@ 0x81
 8021b7e:	009b      	lsls	r3, r3, #2
 8021b80:	6839      	ldr	r1, [r7, #0]
 8021b82:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021b84:	2300      	movs	r3, #0
}
 8021b86:	0018      	movs	r0, r3
 8021b88:	46bd      	mov	sp, r7
 8021b8a:	b004      	add	sp, #16
 8021b8c:	bd80      	pop	{r7, pc}

08021b8e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021b8e:	b580      	push	{r7, lr}
 8021b90:	b084      	sub	sp, #16
 8021b92:	af00      	add	r7, sp, #0
 8021b94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b96:	687a      	ldr	r2, [r7, #4]
 8021b98:	23ae      	movs	r3, #174	@ 0xae
 8021b9a:	009b      	lsls	r3, r3, #2
 8021b9c:	58d3      	ldr	r3, [r2, r3]
 8021b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021ba0:	687a      	ldr	r2, [r7, #4]
 8021ba2:	23ae      	movs	r3, #174	@ 0xae
 8021ba4:	009b      	lsls	r3, r3, #2
 8021ba6:	58d3      	ldr	r3, [r2, r3]
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d022      	beq.n	8021bf2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021bac:	68fa      	ldr	r2, [r7, #12]
 8021bae:	2385      	movs	r3, #133	@ 0x85
 8021bb0:	009b      	lsls	r3, r3, #2
 8021bb2:	58d3      	ldr	r3, [r2, r3]
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	d11a      	bne.n	8021bee <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021bb8:	68fa      	ldr	r2, [r7, #12]
 8021bba:	2385      	movs	r3, #133	@ 0x85
 8021bbc:	009b      	lsls	r3, r3, #2
 8021bbe:	2101      	movs	r1, #1
 8021bc0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021bc2:	68fa      	ldr	r2, [r7, #12]
 8021bc4:	2384      	movs	r3, #132	@ 0x84
 8021bc6:	009b      	lsls	r3, r3, #2
 8021bc8:	58d2      	ldr	r2, [r2, r3]
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021bce:	68fa      	ldr	r2, [r7, #12]
 8021bd0:	2382      	movs	r3, #130	@ 0x82
 8021bd2:	009b      	lsls	r3, r3, #2
 8021bd4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021bd6:	68fa      	ldr	r2, [r7, #12]
 8021bd8:	2384      	movs	r3, #132	@ 0x84
 8021bda:	009b      	lsls	r3, r3, #2
 8021bdc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021bde:	b29b      	uxth	r3, r3
 8021be0:	6878      	ldr	r0, [r7, #4]
 8021be2:	000a      	movs	r2, r1
 8021be4:	2181      	movs	r1, #129	@ 0x81
 8021be6:	f001 ff18 	bl	8023a1a <USBD_LL_Transmit>

      return USBD_OK;
 8021bea:	2300      	movs	r3, #0
 8021bec:	e002      	b.n	8021bf4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021bee:	2301      	movs	r3, #1
 8021bf0:	e000      	b.n	8021bf4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021bf2:	2302      	movs	r3, #2
  }
}
 8021bf4:	0018      	movs	r0, r3
 8021bf6:	46bd      	mov	sp, r7
 8021bf8:	b004      	add	sp, #16
 8021bfa:	bd80      	pop	{r7, pc}

08021bfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021bfc:	b580      	push	{r7, lr}
 8021bfe:	b084      	sub	sp, #16
 8021c00:	af00      	add	r7, sp, #0
 8021c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c04:	687a      	ldr	r2, [r7, #4]
 8021c06:	23ae      	movs	r3, #174	@ 0xae
 8021c08:	009b      	lsls	r3, r3, #2
 8021c0a:	58d3      	ldr	r3, [r2, r3]
 8021c0c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021c0e:	687a      	ldr	r2, [r7, #4]
 8021c10:	23ae      	movs	r3, #174	@ 0xae
 8021c12:	009b      	lsls	r3, r3, #2
 8021c14:	58d3      	ldr	r3, [r2, r3]
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	d019      	beq.n	8021c4e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	7c1b      	ldrb	r3, [r3, #16]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	d10a      	bne.n	8021c38 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021c22:	68fa      	ldr	r2, [r7, #12]
 8021c24:	2381      	movs	r3, #129	@ 0x81
 8021c26:	009b      	lsls	r3, r3, #2
 8021c28:	58d2      	ldr	r2, [r2, r3]
 8021c2a:	2380      	movs	r3, #128	@ 0x80
 8021c2c:	009b      	lsls	r3, r3, #2
 8021c2e:	6878      	ldr	r0, [r7, #4]
 8021c30:	2101      	movs	r1, #1
 8021c32:	f001 ff29 	bl	8023a88 <USBD_LL_PrepareReceive>
 8021c36:	e008      	b.n	8021c4a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021c38:	68fa      	ldr	r2, [r7, #12]
 8021c3a:	2381      	movs	r3, #129	@ 0x81
 8021c3c:	009b      	lsls	r3, r3, #2
 8021c3e:	58d2      	ldr	r2, [r2, r3]
 8021c40:	6878      	ldr	r0, [r7, #4]
 8021c42:	2340      	movs	r3, #64	@ 0x40
 8021c44:	2101      	movs	r1, #1
 8021c46:	f001 ff1f 	bl	8023a88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021c4a:	2300      	movs	r3, #0
 8021c4c:	e000      	b.n	8021c50 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021c4e:	2302      	movs	r3, #2
  }
}
 8021c50:	0018      	movs	r0, r3
 8021c52:	46bd      	mov	sp, r7
 8021c54:	b004      	add	sp, #16
 8021c56:	bd80      	pop	{r7, pc}

08021c58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021c58:	b580      	push	{r7, lr}
 8021c5a:	b084      	sub	sp, #16
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	60f8      	str	r0, [r7, #12]
 8021c60:	60b9      	str	r1, [r7, #8]
 8021c62:	1dfb      	adds	r3, r7, #7
 8021c64:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021c66:	68fb      	ldr	r3, [r7, #12]
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	d101      	bne.n	8021c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021c6c:	2302      	movs	r3, #2
 8021c6e:	e020      	b.n	8021cb2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021c70:	68fa      	ldr	r2, [r7, #12]
 8021c72:	23ad      	movs	r3, #173	@ 0xad
 8021c74:	009b      	lsls	r3, r3, #2
 8021c76:	58d3      	ldr	r3, [r2, r3]
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d004      	beq.n	8021c86 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021c7c:	68fa      	ldr	r2, [r7, #12]
 8021c7e:	23ad      	movs	r3, #173	@ 0xad
 8021c80:	009b      	lsls	r3, r3, #2
 8021c82:	2100      	movs	r1, #0
 8021c84:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021c86:	68bb      	ldr	r3, [r7, #8]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d004      	beq.n	8021c96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021c8c:	68fa      	ldr	r2, [r7, #12]
 8021c8e:	23ac      	movs	r3, #172	@ 0xac
 8021c90:	009b      	lsls	r3, r3, #2
 8021c92:	68b9      	ldr	r1, [r7, #8]
 8021c94:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021c96:	68fa      	ldr	r2, [r7, #12]
 8021c98:	23a7      	movs	r3, #167	@ 0xa7
 8021c9a:	009b      	lsls	r3, r3, #2
 8021c9c:	2101      	movs	r1, #1
 8021c9e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	1dfa      	adds	r2, r7, #7
 8021ca4:	7812      	ldrb	r2, [r2, #0]
 8021ca6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	0018      	movs	r0, r3
 8021cac:	f001 fd18 	bl	80236e0 <USBD_LL_Init>

  return USBD_OK;
 8021cb0:	2300      	movs	r3, #0
}
 8021cb2:	0018      	movs	r0, r3
 8021cb4:	46bd      	mov	sp, r7
 8021cb6:	b004      	add	sp, #16
 8021cb8:	bd80      	pop	{r7, pc}

08021cba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021cba:	b580      	push	{r7, lr}
 8021cbc:	b084      	sub	sp, #16
 8021cbe:	af00      	add	r7, sp, #0
 8021cc0:	6078      	str	r0, [r7, #4]
 8021cc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021cc4:	200f      	movs	r0, #15
 8021cc6:	183b      	adds	r3, r7, r0
 8021cc8:	2200      	movs	r2, #0
 8021cca:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021ccc:	683b      	ldr	r3, [r7, #0]
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d008      	beq.n	8021ce4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021cd2:	687a      	ldr	r2, [r7, #4]
 8021cd4:	23ad      	movs	r3, #173	@ 0xad
 8021cd6:	009b      	lsls	r3, r3, #2
 8021cd8:	6839      	ldr	r1, [r7, #0]
 8021cda:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021cdc:	183b      	adds	r3, r7, r0
 8021cde:	2200      	movs	r2, #0
 8021ce0:	701a      	strb	r2, [r3, #0]
 8021ce2:	e003      	b.n	8021cec <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021ce4:	230f      	movs	r3, #15
 8021ce6:	18fb      	adds	r3, r7, r3
 8021ce8:	2202      	movs	r2, #2
 8021cea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021cec:	230f      	movs	r3, #15
 8021cee:	18fb      	adds	r3, r7, r3
 8021cf0:	781b      	ldrb	r3, [r3, #0]
}
 8021cf2:	0018      	movs	r0, r3
 8021cf4:	46bd      	mov	sp, r7
 8021cf6:	b004      	add	sp, #16
 8021cf8:	bd80      	pop	{r7, pc}

08021cfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021cfa:	b580      	push	{r7, lr}
 8021cfc:	b082      	sub	sp, #8
 8021cfe:	af00      	add	r7, sp, #0
 8021d00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	0018      	movs	r0, r3
 8021d06:	f001 fd4f 	bl	80237a8 <USBD_LL_Start>

  return USBD_OK;
 8021d0a:	2300      	movs	r3, #0
}
 8021d0c:	0018      	movs	r0, r3
 8021d0e:	46bd      	mov	sp, r7
 8021d10:	b002      	add	sp, #8
 8021d12:	bd80      	pop	{r7, pc}

08021d14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021d14:	b580      	push	{r7, lr}
 8021d16:	b082      	sub	sp, #8
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021d1c:	2300      	movs	r3, #0
}
 8021d1e:	0018      	movs	r0, r3
 8021d20:	46bd      	mov	sp, r7
 8021d22:	b002      	add	sp, #8
 8021d24:	bd80      	pop	{r7, pc}

08021d26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021d26:	b590      	push	{r4, r7, lr}
 8021d28:	b085      	sub	sp, #20
 8021d2a:	af00      	add	r7, sp, #0
 8021d2c:	6078      	str	r0, [r7, #4]
 8021d2e:	000a      	movs	r2, r1
 8021d30:	1cfb      	adds	r3, r7, #3
 8021d32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021d34:	240f      	movs	r4, #15
 8021d36:	193b      	adds	r3, r7, r4
 8021d38:	2202      	movs	r2, #2
 8021d3a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021d3c:	687a      	ldr	r2, [r7, #4]
 8021d3e:	23ad      	movs	r3, #173	@ 0xad
 8021d40:	009b      	lsls	r3, r3, #2
 8021d42:	58d3      	ldr	r3, [r2, r3]
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	d00e      	beq.n	8021d66 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021d48:	687a      	ldr	r2, [r7, #4]
 8021d4a:	23ad      	movs	r3, #173	@ 0xad
 8021d4c:	009b      	lsls	r3, r3, #2
 8021d4e:	58d3      	ldr	r3, [r2, r3]
 8021d50:	681b      	ldr	r3, [r3, #0]
 8021d52:	1cfa      	adds	r2, r7, #3
 8021d54:	7811      	ldrb	r1, [r2, #0]
 8021d56:	687a      	ldr	r2, [r7, #4]
 8021d58:	0010      	movs	r0, r2
 8021d5a:	4798      	blx	r3
 8021d5c:	1e03      	subs	r3, r0, #0
 8021d5e:	d102      	bne.n	8021d66 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021d60:	193b      	adds	r3, r7, r4
 8021d62:	2200      	movs	r2, #0
 8021d64:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021d66:	230f      	movs	r3, #15
 8021d68:	18fb      	adds	r3, r7, r3
 8021d6a:	781b      	ldrb	r3, [r3, #0]
}
 8021d6c:	0018      	movs	r0, r3
 8021d6e:	46bd      	mov	sp, r7
 8021d70:	b005      	add	sp, #20
 8021d72:	bd90      	pop	{r4, r7, pc}

08021d74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b082      	sub	sp, #8
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	6078      	str	r0, [r7, #4]
 8021d7c:	000a      	movs	r2, r1
 8021d7e:	1cfb      	adds	r3, r7, #3
 8021d80:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021d82:	687a      	ldr	r2, [r7, #4]
 8021d84:	23ad      	movs	r3, #173	@ 0xad
 8021d86:	009b      	lsls	r3, r3, #2
 8021d88:	58d3      	ldr	r3, [r2, r3]
 8021d8a:	685b      	ldr	r3, [r3, #4]
 8021d8c:	1cfa      	adds	r2, r7, #3
 8021d8e:	7811      	ldrb	r1, [r2, #0]
 8021d90:	687a      	ldr	r2, [r7, #4]
 8021d92:	0010      	movs	r0, r2
 8021d94:	4798      	blx	r3

  return USBD_OK;
 8021d96:	2300      	movs	r3, #0
}
 8021d98:	0018      	movs	r0, r3
 8021d9a:	46bd      	mov	sp, r7
 8021d9c:	b002      	add	sp, #8
 8021d9e:	bd80      	pop	{r7, pc}

08021da0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021da0:	b580      	push	{r7, lr}
 8021da2:	b082      	sub	sp, #8
 8021da4:	af00      	add	r7, sp, #0
 8021da6:	6078      	str	r0, [r7, #4]
 8021da8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	22aa      	movs	r2, #170	@ 0xaa
 8021dae:	0092      	lsls	r2, r2, #2
 8021db0:	4694      	mov	ip, r2
 8021db2:	4463      	add	r3, ip
 8021db4:	683a      	ldr	r2, [r7, #0]
 8021db6:	0011      	movs	r1, r2
 8021db8:	0018      	movs	r0, r3
 8021dba:	f001 f810 	bl	8022dde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021dbe:	687a      	ldr	r2, [r7, #4]
 8021dc0:	23a5      	movs	r3, #165	@ 0xa5
 8021dc2:	009b      	lsls	r3, r3, #2
 8021dc4:	2101      	movs	r1, #1
 8021dc6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	4a23      	ldr	r2, [pc, #140]	@ (8021e58 <USBD_LL_SetupStage+0xb8>)
 8021dcc:	5a9b      	ldrh	r3, [r3, r2]
 8021dce:	0019      	movs	r1, r3
 8021dd0:	687a      	ldr	r2, [r7, #4]
 8021dd2:	23a6      	movs	r3, #166	@ 0xa6
 8021dd4:	009b      	lsls	r3, r3, #2
 8021dd6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021dd8:	687a      	ldr	r2, [r7, #4]
 8021dda:	23aa      	movs	r3, #170	@ 0xaa
 8021ddc:	009b      	lsls	r3, r3, #2
 8021dde:	5cd3      	ldrb	r3, [r2, r3]
 8021de0:	001a      	movs	r2, r3
 8021de2:	231f      	movs	r3, #31
 8021de4:	4013      	ands	r3, r2
 8021de6:	2b02      	cmp	r3, #2
 8021de8:	d019      	beq.n	8021e1e <USBD_LL_SetupStage+0x7e>
 8021dea:	d822      	bhi.n	8021e32 <USBD_LL_SetupStage+0x92>
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	d002      	beq.n	8021df6 <USBD_LL_SetupStage+0x56>
 8021df0:	2b01      	cmp	r3, #1
 8021df2:	d00a      	beq.n	8021e0a <USBD_LL_SetupStage+0x6a>
 8021df4:	e01d      	b.n	8021e32 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	22aa      	movs	r2, #170	@ 0xaa
 8021dfa:	0092      	lsls	r2, r2, #2
 8021dfc:	189a      	adds	r2, r3, r2
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	0011      	movs	r1, r2
 8021e02:	0018      	movs	r0, r3
 8021e04:	f000 fa10 	bl	8022228 <USBD_StdDevReq>
      break;
 8021e08:	e020      	b.n	8021e4c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	22aa      	movs	r2, #170	@ 0xaa
 8021e0e:	0092      	lsls	r2, r2, #2
 8021e10:	189a      	adds	r2, r3, r2
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	0011      	movs	r1, r2
 8021e16:	0018      	movs	r0, r3
 8021e18:	f000 fa78 	bl	802230c <USBD_StdItfReq>
      break;
 8021e1c:	e016      	b.n	8021e4c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	22aa      	movs	r2, #170	@ 0xaa
 8021e22:	0092      	lsls	r2, r2, #2
 8021e24:	189a      	adds	r2, r3, r2
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	0011      	movs	r1, r2
 8021e2a:	0018      	movs	r0, r3
 8021e2c:	f000 fac5 	bl	80223ba <USBD_StdEPReq>
      break;
 8021e30:	e00c      	b.n	8021e4c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021e32:	687a      	ldr	r2, [r7, #4]
 8021e34:	23aa      	movs	r3, #170	@ 0xaa
 8021e36:	009b      	lsls	r3, r3, #2
 8021e38:	5cd3      	ldrb	r3, [r2, r3]
 8021e3a:	227f      	movs	r2, #127	@ 0x7f
 8021e3c:	4393      	bics	r3, r2
 8021e3e:	b2da      	uxtb	r2, r3
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	0011      	movs	r1, r2
 8021e44:	0018      	movs	r0, r3
 8021e46:	f001 fd36 	bl	80238b6 <USBD_LL_StallEP>
      break;
 8021e4a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021e4c:	2300      	movs	r3, #0
}
 8021e4e:	0018      	movs	r0, r3
 8021e50:	46bd      	mov	sp, r7
 8021e52:	b002      	add	sp, #8
 8021e54:	bd80      	pop	{r7, pc}
 8021e56:	46c0      	nop			@ (mov r8, r8)
 8021e58:	000002ae 	.word	0x000002ae

08021e5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021e5c:	b580      	push	{r7, lr}
 8021e5e:	b086      	sub	sp, #24
 8021e60:	af00      	add	r7, sp, #0
 8021e62:	60f8      	str	r0, [r7, #12]
 8021e64:	607a      	str	r2, [r7, #4]
 8021e66:	200b      	movs	r0, #11
 8021e68:	183b      	adds	r3, r7, r0
 8021e6a:	1c0a      	adds	r2, r1, #0
 8021e6c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021e6e:	183b      	adds	r3, r7, r0
 8021e70:	781b      	ldrb	r3, [r3, #0]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d154      	bne.n	8021f20 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021e76:	68fb      	ldr	r3, [r7, #12]
 8021e78:	3355      	adds	r3, #85	@ 0x55
 8021e7a:	33ff      	adds	r3, #255	@ 0xff
 8021e7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021e7e:	68fa      	ldr	r2, [r7, #12]
 8021e80:	23a5      	movs	r3, #165	@ 0xa5
 8021e82:	009b      	lsls	r3, r3, #2
 8021e84:	58d3      	ldr	r3, [r2, r3]
 8021e86:	2b03      	cmp	r3, #3
 8021e88:	d139      	bne.n	8021efe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021e8a:	697b      	ldr	r3, [r7, #20]
 8021e8c:	68da      	ldr	r2, [r3, #12]
 8021e8e:	697b      	ldr	r3, [r7, #20]
 8021e90:	691b      	ldr	r3, [r3, #16]
 8021e92:	429a      	cmp	r2, r3
 8021e94:	d919      	bls.n	8021eca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021e96:	697b      	ldr	r3, [r7, #20]
 8021e98:	68da      	ldr	r2, [r3, #12]
 8021e9a:	697b      	ldr	r3, [r7, #20]
 8021e9c:	691b      	ldr	r3, [r3, #16]
 8021e9e:	1ad2      	subs	r2, r2, r3
 8021ea0:	697b      	ldr	r3, [r7, #20]
 8021ea2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021ea4:	697b      	ldr	r3, [r7, #20]
 8021ea6:	68da      	ldr	r2, [r3, #12]
 8021ea8:	697b      	ldr	r3, [r7, #20]
 8021eaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021eac:	429a      	cmp	r2, r3
 8021eae:	d203      	bcs.n	8021eb8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021eb0:	697b      	ldr	r3, [r7, #20]
 8021eb2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021eb4:	b29b      	uxth	r3, r3
 8021eb6:	e002      	b.n	8021ebe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021eb8:	697b      	ldr	r3, [r7, #20]
 8021eba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021ebc:	b29b      	uxth	r3, r3
 8021ebe:	6879      	ldr	r1, [r7, #4]
 8021ec0:	68f8      	ldr	r0, [r7, #12]
 8021ec2:	001a      	movs	r2, r3
 8021ec4:	f001 f898 	bl	8022ff8 <USBD_CtlContinueRx>
 8021ec8:	e045      	b.n	8021f56 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021eca:	68fa      	ldr	r2, [r7, #12]
 8021ecc:	23ad      	movs	r3, #173	@ 0xad
 8021ece:	009b      	lsls	r3, r3, #2
 8021ed0:	58d3      	ldr	r3, [r2, r3]
 8021ed2:	691b      	ldr	r3, [r3, #16]
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d00d      	beq.n	8021ef4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021ed8:	68fa      	ldr	r2, [r7, #12]
 8021eda:	23a7      	movs	r3, #167	@ 0xa7
 8021edc:	009b      	lsls	r3, r3, #2
 8021ede:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021ee0:	2b03      	cmp	r3, #3
 8021ee2:	d107      	bne.n	8021ef4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021ee4:	68fa      	ldr	r2, [r7, #12]
 8021ee6:	23ad      	movs	r3, #173	@ 0xad
 8021ee8:	009b      	lsls	r3, r3, #2
 8021eea:	58d3      	ldr	r3, [r2, r3]
 8021eec:	691b      	ldr	r3, [r3, #16]
 8021eee:	68fa      	ldr	r2, [r7, #12]
 8021ef0:	0010      	movs	r0, r2
 8021ef2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021ef4:	68fb      	ldr	r3, [r7, #12]
 8021ef6:	0018      	movs	r0, r3
 8021ef8:	f001 f891 	bl	802301e <USBD_CtlSendStatus>
 8021efc:	e02b      	b.n	8021f56 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021efe:	68fa      	ldr	r2, [r7, #12]
 8021f00:	23a5      	movs	r3, #165	@ 0xa5
 8021f02:	009b      	lsls	r3, r3, #2
 8021f04:	58d3      	ldr	r3, [r2, r3]
 8021f06:	2b05      	cmp	r3, #5
 8021f08:	d125      	bne.n	8021f56 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021f0a:	68fa      	ldr	r2, [r7, #12]
 8021f0c:	23a5      	movs	r3, #165	@ 0xa5
 8021f0e:	009b      	lsls	r3, r3, #2
 8021f10:	2100      	movs	r1, #0
 8021f12:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021f14:	68fb      	ldr	r3, [r7, #12]
 8021f16:	2100      	movs	r1, #0
 8021f18:	0018      	movs	r0, r3
 8021f1a:	f001 fccc 	bl	80238b6 <USBD_LL_StallEP>
 8021f1e:	e01a      	b.n	8021f56 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021f20:	68fa      	ldr	r2, [r7, #12]
 8021f22:	23ad      	movs	r3, #173	@ 0xad
 8021f24:	009b      	lsls	r3, r3, #2
 8021f26:	58d3      	ldr	r3, [r2, r3]
 8021f28:	699b      	ldr	r3, [r3, #24]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d011      	beq.n	8021f52 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021f2e:	68fa      	ldr	r2, [r7, #12]
 8021f30:	23a7      	movs	r3, #167	@ 0xa7
 8021f32:	009b      	lsls	r3, r3, #2
 8021f34:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021f36:	2b03      	cmp	r3, #3
 8021f38:	d10b      	bne.n	8021f52 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021f3a:	68fa      	ldr	r2, [r7, #12]
 8021f3c:	23ad      	movs	r3, #173	@ 0xad
 8021f3e:	009b      	lsls	r3, r3, #2
 8021f40:	58d3      	ldr	r3, [r2, r3]
 8021f42:	699b      	ldr	r3, [r3, #24]
 8021f44:	220b      	movs	r2, #11
 8021f46:	18ba      	adds	r2, r7, r2
 8021f48:	7811      	ldrb	r1, [r2, #0]
 8021f4a:	68fa      	ldr	r2, [r7, #12]
 8021f4c:	0010      	movs	r0, r2
 8021f4e:	4798      	blx	r3
 8021f50:	e001      	b.n	8021f56 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021f52:	2302      	movs	r3, #2
 8021f54:	e000      	b.n	8021f58 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021f56:	2300      	movs	r3, #0
}
 8021f58:	0018      	movs	r0, r3
 8021f5a:	46bd      	mov	sp, r7
 8021f5c:	b006      	add	sp, #24
 8021f5e:	bd80      	pop	{r7, pc}

08021f60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021f60:	b580      	push	{r7, lr}
 8021f62:	b086      	sub	sp, #24
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	60f8      	str	r0, [r7, #12]
 8021f68:	607a      	str	r2, [r7, #4]
 8021f6a:	200b      	movs	r0, #11
 8021f6c:	183b      	adds	r3, r7, r0
 8021f6e:	1c0a      	adds	r2, r1, #0
 8021f70:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021f72:	183b      	adds	r3, r7, r0
 8021f74:	781b      	ldrb	r3, [r3, #0]
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d000      	beq.n	8021f7c <USBD_LL_DataInStage+0x1c>
 8021f7a:	e08e      	b.n	802209a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021f7c:	68fb      	ldr	r3, [r7, #12]
 8021f7e:	3314      	adds	r3, #20
 8021f80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021f82:	68fa      	ldr	r2, [r7, #12]
 8021f84:	23a5      	movs	r3, #165	@ 0xa5
 8021f86:	009b      	lsls	r3, r3, #2
 8021f88:	58d3      	ldr	r3, [r2, r3]
 8021f8a:	2b02      	cmp	r3, #2
 8021f8c:	d164      	bne.n	8022058 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021f8e:	697b      	ldr	r3, [r7, #20]
 8021f90:	68da      	ldr	r2, [r3, #12]
 8021f92:	697b      	ldr	r3, [r7, #20]
 8021f94:	691b      	ldr	r3, [r3, #16]
 8021f96:	429a      	cmp	r2, r3
 8021f98:	d915      	bls.n	8021fc6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021f9a:	697b      	ldr	r3, [r7, #20]
 8021f9c:	68da      	ldr	r2, [r3, #12]
 8021f9e:	697b      	ldr	r3, [r7, #20]
 8021fa0:	691b      	ldr	r3, [r3, #16]
 8021fa2:	1ad2      	subs	r2, r2, r3
 8021fa4:	697b      	ldr	r3, [r7, #20]
 8021fa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021fa8:	697b      	ldr	r3, [r7, #20]
 8021faa:	68db      	ldr	r3, [r3, #12]
 8021fac:	b29a      	uxth	r2, r3
 8021fae:	6879      	ldr	r1, [r7, #4]
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	0018      	movs	r0, r3
 8021fb4:	f000 ffe9 	bl	8022f8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021fb8:	68f8      	ldr	r0, [r7, #12]
 8021fba:	2300      	movs	r3, #0
 8021fbc:	2200      	movs	r2, #0
 8021fbe:	2100      	movs	r1, #0
 8021fc0:	f001 fd62 	bl	8023a88 <USBD_LL_PrepareReceive>
 8021fc4:	e059      	b.n	802207a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021fc6:	697b      	ldr	r3, [r7, #20]
 8021fc8:	689a      	ldr	r2, [r3, #8]
 8021fca:	697b      	ldr	r3, [r7, #20]
 8021fcc:	691b      	ldr	r3, [r3, #16]
 8021fce:	0019      	movs	r1, r3
 8021fd0:	0010      	movs	r0, r2
 8021fd2:	f7de f96d 	bl	80002b0 <__aeabi_uidivmod>
 8021fd6:	1e0b      	subs	r3, r1, #0
 8021fd8:	d11f      	bne.n	802201a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021fda:	697b      	ldr	r3, [r7, #20]
 8021fdc:	689a      	ldr	r2, [r3, #8]
 8021fde:	697b      	ldr	r3, [r7, #20]
 8021fe0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021fe2:	429a      	cmp	r2, r3
 8021fe4:	d319      	bcc.n	802201a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021fe6:	697b      	ldr	r3, [r7, #20]
 8021fe8:	689a      	ldr	r2, [r3, #8]
 8021fea:	68f9      	ldr	r1, [r7, #12]
 8021fec:	23a6      	movs	r3, #166	@ 0xa6
 8021fee:	009b      	lsls	r3, r3, #2
 8021ff0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021ff2:	429a      	cmp	r2, r3
 8021ff4:	d211      	bcs.n	802201a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021ff6:	68fb      	ldr	r3, [r7, #12]
 8021ff8:	2200      	movs	r2, #0
 8021ffa:	2100      	movs	r1, #0
 8021ffc:	0018      	movs	r0, r3
 8021ffe:	f000 ffc4 	bl	8022f8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8022002:	68fa      	ldr	r2, [r7, #12]
 8022004:	23a6      	movs	r3, #166	@ 0xa6
 8022006:	009b      	lsls	r3, r3, #2
 8022008:	2100      	movs	r1, #0
 802200a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802200c:	68f8      	ldr	r0, [r7, #12]
 802200e:	2300      	movs	r3, #0
 8022010:	2200      	movs	r2, #0
 8022012:	2100      	movs	r1, #0
 8022014:	f001 fd38 	bl	8023a88 <USBD_LL_PrepareReceive>
 8022018:	e02f      	b.n	802207a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802201a:	68fa      	ldr	r2, [r7, #12]
 802201c:	23ad      	movs	r3, #173	@ 0xad
 802201e:	009b      	lsls	r3, r3, #2
 8022020:	58d3      	ldr	r3, [r2, r3]
 8022022:	68db      	ldr	r3, [r3, #12]
 8022024:	2b00      	cmp	r3, #0
 8022026:	d00d      	beq.n	8022044 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022028:	68fa      	ldr	r2, [r7, #12]
 802202a:	23a7      	movs	r3, #167	@ 0xa7
 802202c:	009b      	lsls	r3, r3, #2
 802202e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8022030:	2b03      	cmp	r3, #3
 8022032:	d107      	bne.n	8022044 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8022034:	68fa      	ldr	r2, [r7, #12]
 8022036:	23ad      	movs	r3, #173	@ 0xad
 8022038:	009b      	lsls	r3, r3, #2
 802203a:	58d3      	ldr	r3, [r2, r3]
 802203c:	68db      	ldr	r3, [r3, #12]
 802203e:	68fa      	ldr	r2, [r7, #12]
 8022040:	0010      	movs	r0, r2
 8022042:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8022044:	68fb      	ldr	r3, [r7, #12]
 8022046:	2180      	movs	r1, #128	@ 0x80
 8022048:	0018      	movs	r0, r3
 802204a:	f001 fc34 	bl	80238b6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 802204e:	68fb      	ldr	r3, [r7, #12]
 8022050:	0018      	movs	r0, r3
 8022052:	f000 fff8 	bl	8023046 <USBD_CtlReceiveStatus>
 8022056:	e010      	b.n	802207a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8022058:	68fa      	ldr	r2, [r7, #12]
 802205a:	23a5      	movs	r3, #165	@ 0xa5
 802205c:	009b      	lsls	r3, r3, #2
 802205e:	58d3      	ldr	r3, [r2, r3]
 8022060:	2b04      	cmp	r3, #4
 8022062:	d005      	beq.n	8022070 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8022064:	68fa      	ldr	r2, [r7, #12]
 8022066:	23a5      	movs	r3, #165	@ 0xa5
 8022068:	009b      	lsls	r3, r3, #2
 802206a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 802206c:	2b00      	cmp	r3, #0
 802206e:	d104      	bne.n	802207a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	2180      	movs	r1, #128	@ 0x80
 8022074:	0018      	movs	r0, r3
 8022076:	f001 fc1e 	bl	80238b6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 802207a:	68fa      	ldr	r2, [r7, #12]
 802207c:	23a8      	movs	r3, #168	@ 0xa8
 802207e:	009b      	lsls	r3, r3, #2
 8022080:	5cd3      	ldrb	r3, [r2, r3]
 8022082:	2b01      	cmp	r3, #1
 8022084:	d124      	bne.n	80220d0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8022086:	68fb      	ldr	r3, [r7, #12]
 8022088:	0018      	movs	r0, r3
 802208a:	f7ff fe43 	bl	8021d14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802208e:	68fa      	ldr	r2, [r7, #12]
 8022090:	23a8      	movs	r3, #168	@ 0xa8
 8022092:	009b      	lsls	r3, r3, #2
 8022094:	2100      	movs	r1, #0
 8022096:	54d1      	strb	r1, [r2, r3]
 8022098:	e01a      	b.n	80220d0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 802209a:	68fa      	ldr	r2, [r7, #12]
 802209c:	23ad      	movs	r3, #173	@ 0xad
 802209e:	009b      	lsls	r3, r3, #2
 80220a0:	58d3      	ldr	r3, [r2, r3]
 80220a2:	695b      	ldr	r3, [r3, #20]
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	d011      	beq.n	80220cc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80220a8:	68fa      	ldr	r2, [r7, #12]
 80220aa:	23a7      	movs	r3, #167	@ 0xa7
 80220ac:	009b      	lsls	r3, r3, #2
 80220ae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80220b0:	2b03      	cmp	r3, #3
 80220b2:	d10b      	bne.n	80220cc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80220b4:	68fa      	ldr	r2, [r7, #12]
 80220b6:	23ad      	movs	r3, #173	@ 0xad
 80220b8:	009b      	lsls	r3, r3, #2
 80220ba:	58d3      	ldr	r3, [r2, r3]
 80220bc:	695b      	ldr	r3, [r3, #20]
 80220be:	220b      	movs	r2, #11
 80220c0:	18ba      	adds	r2, r7, r2
 80220c2:	7811      	ldrb	r1, [r2, #0]
 80220c4:	68fa      	ldr	r2, [r7, #12]
 80220c6:	0010      	movs	r0, r2
 80220c8:	4798      	blx	r3
 80220ca:	e001      	b.n	80220d0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80220cc:	2302      	movs	r3, #2
 80220ce:	e000      	b.n	80220d2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80220d0:	2300      	movs	r3, #0
}
 80220d2:	0018      	movs	r0, r3
 80220d4:	46bd      	mov	sp, r7
 80220d6:	b006      	add	sp, #24
 80220d8:	bd80      	pop	{r7, pc}

080220da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80220da:	b580      	push	{r7, lr}
 80220dc:	b082      	sub	sp, #8
 80220de:	af00      	add	r7, sp, #0
 80220e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80220e2:	6878      	ldr	r0, [r7, #4]
 80220e4:	2340      	movs	r3, #64	@ 0x40
 80220e6:	2200      	movs	r2, #0
 80220e8:	2100      	movs	r1, #0
 80220ea:	f001 fb82 	bl	80237f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80220ee:	687a      	ldr	r2, [r7, #4]
 80220f0:	23ac      	movs	r3, #172	@ 0xac
 80220f2:	005b      	lsls	r3, r3, #1
 80220f4:	2101      	movs	r1, #1
 80220f6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80220f8:	687a      	ldr	r2, [r7, #4]
 80220fa:	23b2      	movs	r3, #178	@ 0xb2
 80220fc:	005b      	lsls	r3, r3, #1
 80220fe:	2140      	movs	r1, #64	@ 0x40
 8022100:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8022102:	6878      	ldr	r0, [r7, #4]
 8022104:	2340      	movs	r3, #64	@ 0x40
 8022106:	2200      	movs	r2, #0
 8022108:	2180      	movs	r1, #128	@ 0x80
 802210a:	f001 fb72 	bl	80237f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	2201      	movs	r2, #1
 8022112:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	2240      	movs	r2, #64	@ 0x40
 8022118:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802211a:	687a      	ldr	r2, [r7, #4]
 802211c:	23a7      	movs	r3, #167	@ 0xa7
 802211e:	009b      	lsls	r3, r3, #2
 8022120:	2101      	movs	r1, #1
 8022122:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8022124:	687a      	ldr	r2, [r7, #4]
 8022126:	23a5      	movs	r3, #165	@ 0xa5
 8022128:	009b      	lsls	r3, r3, #2
 802212a:	2100      	movs	r1, #0
 802212c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	2200      	movs	r2, #0
 8022132:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8022134:	687a      	ldr	r2, [r7, #4]
 8022136:	23a9      	movs	r3, #169	@ 0xa9
 8022138:	009b      	lsls	r3, r3, #2
 802213a:	2100      	movs	r1, #0
 802213c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 802213e:	687a      	ldr	r2, [r7, #4]
 8022140:	23ae      	movs	r3, #174	@ 0xae
 8022142:	009b      	lsls	r3, r3, #2
 8022144:	58d3      	ldr	r3, [r2, r3]
 8022146:	2b00      	cmp	r3, #0
 8022148:	d00a      	beq.n	8022160 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802214a:	687a      	ldr	r2, [r7, #4]
 802214c:	23ad      	movs	r3, #173	@ 0xad
 802214e:	009b      	lsls	r3, r3, #2
 8022150:	58d3      	ldr	r3, [r2, r3]
 8022152:	685a      	ldr	r2, [r3, #4]
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	685b      	ldr	r3, [r3, #4]
 8022158:	b2d9      	uxtb	r1, r3
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	0018      	movs	r0, r3
 802215e:	4790      	blx	r2
  }

  return USBD_OK;
 8022160:	2300      	movs	r3, #0
}
 8022162:	0018      	movs	r0, r3
 8022164:	46bd      	mov	sp, r7
 8022166:	b002      	add	sp, #8
 8022168:	bd80      	pop	{r7, pc}

0802216a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802216a:	b580      	push	{r7, lr}
 802216c:	b082      	sub	sp, #8
 802216e:	af00      	add	r7, sp, #0
 8022170:	6078      	str	r0, [r7, #4]
 8022172:	000a      	movs	r2, r1
 8022174:	1cfb      	adds	r3, r7, #3
 8022176:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	1cfa      	adds	r2, r7, #3
 802217c:	7812      	ldrb	r2, [r2, #0]
 802217e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022180:	2300      	movs	r3, #0
}
 8022182:	0018      	movs	r0, r3
 8022184:	46bd      	mov	sp, r7
 8022186:	b002      	add	sp, #8
 8022188:	bd80      	pop	{r7, pc}
	...

0802218c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802218c:	b580      	push	{r7, lr}
 802218e:	b082      	sub	sp, #8
 8022190:	af00      	add	r7, sp, #0
 8022192:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8022194:	687a      	ldr	r2, [r7, #4]
 8022196:	23a7      	movs	r3, #167	@ 0xa7
 8022198:	009b      	lsls	r3, r3, #2
 802219a:	5cd1      	ldrb	r1, [r2, r3]
 802219c:	687b      	ldr	r3, [r7, #4]
 802219e:	4a06      	ldr	r2, [pc, #24]	@ (80221b8 <USBD_LL_Suspend+0x2c>)
 80221a0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80221a2:	687a      	ldr	r2, [r7, #4]
 80221a4:	23a7      	movs	r3, #167	@ 0xa7
 80221a6:	009b      	lsls	r3, r3, #2
 80221a8:	2104      	movs	r1, #4
 80221aa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80221ac:	2300      	movs	r3, #0
}
 80221ae:	0018      	movs	r0, r3
 80221b0:	46bd      	mov	sp, r7
 80221b2:	b002      	add	sp, #8
 80221b4:	bd80      	pop	{r7, pc}
 80221b6:	46c0      	nop			@ (mov r8, r8)
 80221b8:	0000029d 	.word	0x0000029d

080221bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80221bc:	b580      	push	{r7, lr}
 80221be:	b082      	sub	sp, #8
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80221c4:	687a      	ldr	r2, [r7, #4]
 80221c6:	23a7      	movs	r3, #167	@ 0xa7
 80221c8:	009b      	lsls	r3, r3, #2
 80221ca:	5cd3      	ldrb	r3, [r2, r3]
 80221cc:	2b04      	cmp	r3, #4
 80221ce:	d106      	bne.n	80221de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	4a05      	ldr	r2, [pc, #20]	@ (80221e8 <USBD_LL_Resume+0x2c>)
 80221d4:	5c99      	ldrb	r1, [r3, r2]
 80221d6:	687a      	ldr	r2, [r7, #4]
 80221d8:	23a7      	movs	r3, #167	@ 0xa7
 80221da:	009b      	lsls	r3, r3, #2
 80221dc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80221de:	2300      	movs	r3, #0
}
 80221e0:	0018      	movs	r0, r3
 80221e2:	46bd      	mov	sp, r7
 80221e4:	b002      	add	sp, #8
 80221e6:	bd80      	pop	{r7, pc}
 80221e8:	0000029d 	.word	0x0000029d

080221ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80221ec:	b580      	push	{r7, lr}
 80221ee:	b082      	sub	sp, #8
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80221f4:	687a      	ldr	r2, [r7, #4]
 80221f6:	23a7      	movs	r3, #167	@ 0xa7
 80221f8:	009b      	lsls	r3, r3, #2
 80221fa:	5cd3      	ldrb	r3, [r2, r3]
 80221fc:	2b03      	cmp	r3, #3
 80221fe:	d10e      	bne.n	802221e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8022200:	687a      	ldr	r2, [r7, #4]
 8022202:	23ad      	movs	r3, #173	@ 0xad
 8022204:	009b      	lsls	r3, r3, #2
 8022206:	58d3      	ldr	r3, [r2, r3]
 8022208:	69db      	ldr	r3, [r3, #28]
 802220a:	2b00      	cmp	r3, #0
 802220c:	d007      	beq.n	802221e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 802220e:	687a      	ldr	r2, [r7, #4]
 8022210:	23ad      	movs	r3, #173	@ 0xad
 8022212:	009b      	lsls	r3, r3, #2
 8022214:	58d3      	ldr	r3, [r2, r3]
 8022216:	69db      	ldr	r3, [r3, #28]
 8022218:	687a      	ldr	r2, [r7, #4]
 802221a:	0010      	movs	r0, r2
 802221c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802221e:	2300      	movs	r3, #0
}
 8022220:	0018      	movs	r0, r3
 8022222:	46bd      	mov	sp, r7
 8022224:	b002      	add	sp, #8
 8022226:	bd80      	pop	{r7, pc}

08022228 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8022228:	b580      	push	{r7, lr}
 802222a:	b084      	sub	sp, #16
 802222c:	af00      	add	r7, sp, #0
 802222e:	6078      	str	r0, [r7, #4]
 8022230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022232:	230f      	movs	r3, #15
 8022234:	18fb      	adds	r3, r7, r3
 8022236:	2200      	movs	r2, #0
 8022238:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802223a:	683b      	ldr	r3, [r7, #0]
 802223c:	781b      	ldrb	r3, [r3, #0]
 802223e:	001a      	movs	r2, r3
 8022240:	2360      	movs	r3, #96	@ 0x60
 8022242:	4013      	ands	r3, r2
 8022244:	2b40      	cmp	r3, #64	@ 0x40
 8022246:	d004      	beq.n	8022252 <USBD_StdDevReq+0x2a>
 8022248:	d84f      	bhi.n	80222ea <USBD_StdDevReq+0xc2>
 802224a:	2b00      	cmp	r3, #0
 802224c:	d00b      	beq.n	8022266 <USBD_StdDevReq+0x3e>
 802224e:	2b20      	cmp	r3, #32
 8022250:	d14b      	bne.n	80222ea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8022252:	687a      	ldr	r2, [r7, #4]
 8022254:	23ad      	movs	r3, #173	@ 0xad
 8022256:	009b      	lsls	r3, r3, #2
 8022258:	58d3      	ldr	r3, [r2, r3]
 802225a:	689b      	ldr	r3, [r3, #8]
 802225c:	6839      	ldr	r1, [r7, #0]
 802225e:	687a      	ldr	r2, [r7, #4]
 8022260:	0010      	movs	r0, r2
 8022262:	4798      	blx	r3
      break;
 8022264:	e048      	b.n	80222f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8022266:	683b      	ldr	r3, [r7, #0]
 8022268:	785b      	ldrb	r3, [r3, #1]
 802226a:	2b09      	cmp	r3, #9
 802226c:	d835      	bhi.n	80222da <USBD_StdDevReq+0xb2>
 802226e:	009a      	lsls	r2, r3, #2
 8022270:	4b25      	ldr	r3, [pc, #148]	@ (8022308 <USBD_StdDevReq+0xe0>)
 8022272:	18d3      	adds	r3, r2, r3
 8022274:	681b      	ldr	r3, [r3, #0]
 8022276:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8022278:	683a      	ldr	r2, [r7, #0]
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	0011      	movs	r1, r2
 802227e:	0018      	movs	r0, r3
 8022280:	f000 fa52 	bl	8022728 <USBD_GetDescriptor>
          break;
 8022284:	e030      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8022286:	683a      	ldr	r2, [r7, #0]
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	0011      	movs	r1, r2
 802228c:	0018      	movs	r0, r3
 802228e:	f000 fbfd 	bl	8022a8c <USBD_SetAddress>
          break;
 8022292:	e029      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8022294:	683a      	ldr	r2, [r7, #0]
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	0011      	movs	r1, r2
 802229a:	0018      	movs	r0, r3
 802229c:	f000 fc4a 	bl	8022b34 <USBD_SetConfig>
          break;
 80222a0:	e022      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80222a2:	683a      	ldr	r2, [r7, #0]
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	0011      	movs	r1, r2
 80222a8:	0018      	movs	r0, r3
 80222aa:	f000 fce7 	bl	8022c7c <USBD_GetConfig>
          break;
 80222ae:	e01b      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80222b0:	683a      	ldr	r2, [r7, #0]
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	0011      	movs	r1, r2
 80222b6:	0018      	movs	r0, r3
 80222b8:	f000 fd1b 	bl	8022cf2 <USBD_GetStatus>
          break;
 80222bc:	e014      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80222be:	683a      	ldr	r2, [r7, #0]
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	0011      	movs	r1, r2
 80222c4:	0018      	movs	r0, r3
 80222c6:	f000 fd4e 	bl	8022d66 <USBD_SetFeature>
          break;
 80222ca:	e00d      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80222cc:	683a      	ldr	r2, [r7, #0]
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	0011      	movs	r1, r2
 80222d2:	0018      	movs	r0, r3
 80222d4:	f000 fd5d 	bl	8022d92 <USBD_ClrFeature>
          break;
 80222d8:	e006      	b.n	80222e8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80222da:	683a      	ldr	r2, [r7, #0]
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	0011      	movs	r1, r2
 80222e0:	0018      	movs	r0, r3
 80222e2:	f000 fdb4 	bl	8022e4e <USBD_CtlError>
          break;
 80222e6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80222e8:	e006      	b.n	80222f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80222ea:	683a      	ldr	r2, [r7, #0]
 80222ec:	687b      	ldr	r3, [r7, #4]
 80222ee:	0011      	movs	r1, r2
 80222f0:	0018      	movs	r0, r3
 80222f2:	f000 fdac 	bl	8022e4e <USBD_CtlError>
      break;
 80222f6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80222f8:	230f      	movs	r3, #15
 80222fa:	18fb      	adds	r3, r7, r3
 80222fc:	781b      	ldrb	r3, [r3, #0]
}
 80222fe:	0018      	movs	r0, r3
 8022300:	46bd      	mov	sp, r7
 8022302:	b004      	add	sp, #16
 8022304:	bd80      	pop	{r7, pc}
 8022306:	46c0      	nop			@ (mov r8, r8)
 8022308:	0802e6e4 	.word	0x0802e6e4

0802230c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 802230c:	b5b0      	push	{r4, r5, r7, lr}
 802230e:	b084      	sub	sp, #16
 8022310:	af00      	add	r7, sp, #0
 8022312:	6078      	str	r0, [r7, #4]
 8022314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022316:	230f      	movs	r3, #15
 8022318:	18fb      	adds	r3, r7, r3
 802231a:	2200      	movs	r2, #0
 802231c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802231e:	683b      	ldr	r3, [r7, #0]
 8022320:	781b      	ldrb	r3, [r3, #0]
 8022322:	001a      	movs	r2, r3
 8022324:	2360      	movs	r3, #96	@ 0x60
 8022326:	4013      	ands	r3, r2
 8022328:	2b40      	cmp	r3, #64	@ 0x40
 802232a:	d004      	beq.n	8022336 <USBD_StdItfReq+0x2a>
 802232c:	d839      	bhi.n	80223a2 <USBD_StdItfReq+0x96>
 802232e:	2b00      	cmp	r3, #0
 8022330:	d001      	beq.n	8022336 <USBD_StdItfReq+0x2a>
 8022332:	2b20      	cmp	r3, #32
 8022334:	d135      	bne.n	80223a2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8022336:	687a      	ldr	r2, [r7, #4]
 8022338:	23a7      	movs	r3, #167	@ 0xa7
 802233a:	009b      	lsls	r3, r3, #2
 802233c:	5cd3      	ldrb	r3, [r2, r3]
 802233e:	3b01      	subs	r3, #1
 8022340:	2b02      	cmp	r3, #2
 8022342:	d825      	bhi.n	8022390 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8022344:	683b      	ldr	r3, [r7, #0]
 8022346:	889b      	ldrh	r3, [r3, #4]
 8022348:	b2db      	uxtb	r3, r3
 802234a:	2b01      	cmp	r3, #1
 802234c:	d819      	bhi.n	8022382 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802234e:	687a      	ldr	r2, [r7, #4]
 8022350:	23ad      	movs	r3, #173	@ 0xad
 8022352:	009b      	lsls	r3, r3, #2
 8022354:	58d3      	ldr	r3, [r2, r3]
 8022356:	689b      	ldr	r3, [r3, #8]
 8022358:	250f      	movs	r5, #15
 802235a:	197c      	adds	r4, r7, r5
 802235c:	6839      	ldr	r1, [r7, #0]
 802235e:	687a      	ldr	r2, [r7, #4]
 8022360:	0010      	movs	r0, r2
 8022362:	4798      	blx	r3
 8022364:	0003      	movs	r3, r0
 8022366:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8022368:	683b      	ldr	r3, [r7, #0]
 802236a:	88db      	ldrh	r3, [r3, #6]
 802236c:	2b00      	cmp	r3, #0
 802236e:	d116      	bne.n	802239e <USBD_StdItfReq+0x92>
 8022370:	197b      	adds	r3, r7, r5
 8022372:	781b      	ldrb	r3, [r3, #0]
 8022374:	2b00      	cmp	r3, #0
 8022376:	d112      	bne.n	802239e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	0018      	movs	r0, r3
 802237c:	f000 fe4f 	bl	802301e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022380:	e00d      	b.n	802239e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8022382:	683a      	ldr	r2, [r7, #0]
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	0011      	movs	r1, r2
 8022388:	0018      	movs	r0, r3
 802238a:	f000 fd60 	bl	8022e4e <USBD_CtlError>
          break;
 802238e:	e006      	b.n	802239e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022390:	683a      	ldr	r2, [r7, #0]
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	0011      	movs	r1, r2
 8022396:	0018      	movs	r0, r3
 8022398:	f000 fd59 	bl	8022e4e <USBD_CtlError>
          break;
 802239c:	e000      	b.n	80223a0 <USBD_StdItfReq+0x94>
          break;
 802239e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80223a0:	e006      	b.n	80223b0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80223a2:	683a      	ldr	r2, [r7, #0]
 80223a4:	687b      	ldr	r3, [r7, #4]
 80223a6:	0011      	movs	r1, r2
 80223a8:	0018      	movs	r0, r3
 80223aa:	f000 fd50 	bl	8022e4e <USBD_CtlError>
      break;
 80223ae:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80223b0:	2300      	movs	r3, #0
}
 80223b2:	0018      	movs	r0, r3
 80223b4:	46bd      	mov	sp, r7
 80223b6:	b004      	add	sp, #16
 80223b8:	bdb0      	pop	{r4, r5, r7, pc}

080223ba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80223ba:	b5b0      	push	{r4, r5, r7, lr}
 80223bc:	b084      	sub	sp, #16
 80223be:	af00      	add	r7, sp, #0
 80223c0:	6078      	str	r0, [r7, #4]
 80223c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80223c4:	230f      	movs	r3, #15
 80223c6:	18fb      	adds	r3, r7, r3
 80223c8:	2200      	movs	r2, #0
 80223ca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80223cc:	683b      	ldr	r3, [r7, #0]
 80223ce:	889a      	ldrh	r2, [r3, #4]
 80223d0:	230e      	movs	r3, #14
 80223d2:	18fb      	adds	r3, r7, r3
 80223d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80223d6:	683b      	ldr	r3, [r7, #0]
 80223d8:	781b      	ldrb	r3, [r3, #0]
 80223da:	001a      	movs	r2, r3
 80223dc:	2360      	movs	r3, #96	@ 0x60
 80223de:	4013      	ands	r3, r2
 80223e0:	2b40      	cmp	r3, #64	@ 0x40
 80223e2:	d006      	beq.n	80223f2 <USBD_StdEPReq+0x38>
 80223e4:	d900      	bls.n	80223e8 <USBD_StdEPReq+0x2e>
 80223e6:	e190      	b.n	802270a <USBD_StdEPReq+0x350>
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	d00c      	beq.n	8022406 <USBD_StdEPReq+0x4c>
 80223ec:	2b20      	cmp	r3, #32
 80223ee:	d000      	beq.n	80223f2 <USBD_StdEPReq+0x38>
 80223f0:	e18b      	b.n	802270a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80223f2:	687a      	ldr	r2, [r7, #4]
 80223f4:	23ad      	movs	r3, #173	@ 0xad
 80223f6:	009b      	lsls	r3, r3, #2
 80223f8:	58d3      	ldr	r3, [r2, r3]
 80223fa:	689b      	ldr	r3, [r3, #8]
 80223fc:	6839      	ldr	r1, [r7, #0]
 80223fe:	687a      	ldr	r2, [r7, #4]
 8022400:	0010      	movs	r0, r2
 8022402:	4798      	blx	r3
      break;
 8022404:	e188      	b.n	8022718 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8022406:	683b      	ldr	r3, [r7, #0]
 8022408:	781b      	ldrb	r3, [r3, #0]
 802240a:	001a      	movs	r2, r3
 802240c:	2360      	movs	r3, #96	@ 0x60
 802240e:	4013      	ands	r3, r2
 8022410:	2b20      	cmp	r3, #32
 8022412:	d10f      	bne.n	8022434 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8022414:	687a      	ldr	r2, [r7, #4]
 8022416:	23ad      	movs	r3, #173	@ 0xad
 8022418:	009b      	lsls	r3, r3, #2
 802241a:	58d3      	ldr	r3, [r2, r3]
 802241c:	689b      	ldr	r3, [r3, #8]
 802241e:	250f      	movs	r5, #15
 8022420:	197c      	adds	r4, r7, r5
 8022422:	6839      	ldr	r1, [r7, #0]
 8022424:	687a      	ldr	r2, [r7, #4]
 8022426:	0010      	movs	r0, r2
 8022428:	4798      	blx	r3
 802242a:	0003      	movs	r3, r0
 802242c:	7023      	strb	r3, [r4, #0]

        return ret;
 802242e:	197b      	adds	r3, r7, r5
 8022430:	781b      	ldrb	r3, [r3, #0]
 8022432:	e174      	b.n	802271e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8022434:	683b      	ldr	r3, [r7, #0]
 8022436:	785b      	ldrb	r3, [r3, #1]
 8022438:	2b03      	cmp	r3, #3
 802243a:	d007      	beq.n	802244c <USBD_StdEPReq+0x92>
 802243c:	dd00      	ble.n	8022440 <USBD_StdEPReq+0x86>
 802243e:	e15c      	b.n	80226fa <USBD_StdEPReq+0x340>
 8022440:	2b00      	cmp	r3, #0
 8022442:	d100      	bne.n	8022446 <USBD_StdEPReq+0x8c>
 8022444:	e092      	b.n	802256c <USBD_StdEPReq+0x1b2>
 8022446:	2b01      	cmp	r3, #1
 8022448:	d04b      	beq.n	80224e2 <USBD_StdEPReq+0x128>
 802244a:	e156      	b.n	80226fa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802244c:	687a      	ldr	r2, [r7, #4]
 802244e:	23a7      	movs	r3, #167	@ 0xa7
 8022450:	009b      	lsls	r3, r3, #2
 8022452:	5cd3      	ldrb	r3, [r2, r3]
 8022454:	2b02      	cmp	r3, #2
 8022456:	d002      	beq.n	802245e <USBD_StdEPReq+0xa4>
 8022458:	2b03      	cmp	r3, #3
 802245a:	d01d      	beq.n	8022498 <USBD_StdEPReq+0xde>
 802245c:	e039      	b.n	80224d2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802245e:	220e      	movs	r2, #14
 8022460:	18bb      	adds	r3, r7, r2
 8022462:	781b      	ldrb	r3, [r3, #0]
 8022464:	2b00      	cmp	r3, #0
 8022466:	d010      	beq.n	802248a <USBD_StdEPReq+0xd0>
 8022468:	18bb      	adds	r3, r7, r2
 802246a:	781b      	ldrb	r3, [r3, #0]
 802246c:	2b80      	cmp	r3, #128	@ 0x80
 802246e:	d00c      	beq.n	802248a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022470:	18bb      	adds	r3, r7, r2
 8022472:	781a      	ldrb	r2, [r3, #0]
 8022474:	687b      	ldr	r3, [r7, #4]
 8022476:	0011      	movs	r1, r2
 8022478:	0018      	movs	r0, r3
 802247a:	f001 fa1c 	bl	80238b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	2180      	movs	r1, #128	@ 0x80
 8022482:	0018      	movs	r0, r3
 8022484:	f001 fa17 	bl	80238b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022488:	e02a      	b.n	80224e0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 802248a:	683a      	ldr	r2, [r7, #0]
 802248c:	687b      	ldr	r3, [r7, #4]
 802248e:	0011      	movs	r1, r2
 8022490:	0018      	movs	r0, r3
 8022492:	f000 fcdc 	bl	8022e4e <USBD_CtlError>
              break;
 8022496:	e023      	b.n	80224e0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022498:	683b      	ldr	r3, [r7, #0]
 802249a:	885b      	ldrh	r3, [r3, #2]
 802249c:	2b00      	cmp	r3, #0
 802249e:	d113      	bne.n	80224c8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80224a0:	220e      	movs	r2, #14
 80224a2:	18bb      	adds	r3, r7, r2
 80224a4:	781b      	ldrb	r3, [r3, #0]
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d00e      	beq.n	80224c8 <USBD_StdEPReq+0x10e>
 80224aa:	18bb      	adds	r3, r7, r2
 80224ac:	781b      	ldrb	r3, [r3, #0]
 80224ae:	2b80      	cmp	r3, #128	@ 0x80
 80224b0:	d00a      	beq.n	80224c8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80224b2:	683b      	ldr	r3, [r7, #0]
 80224b4:	88db      	ldrh	r3, [r3, #6]
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d106      	bne.n	80224c8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80224ba:	18bb      	adds	r3, r7, r2
 80224bc:	781a      	ldrb	r2, [r3, #0]
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	0011      	movs	r1, r2
 80224c2:	0018      	movs	r0, r3
 80224c4:	f001 f9f7 	bl	80238b6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	0018      	movs	r0, r3
 80224cc:	f000 fda7 	bl	802301e <USBD_CtlSendStatus>

              break;
 80224d0:	e006      	b.n	80224e0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80224d2:	683a      	ldr	r2, [r7, #0]
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	0011      	movs	r1, r2
 80224d8:	0018      	movs	r0, r3
 80224da:	f000 fcb8 	bl	8022e4e <USBD_CtlError>
              break;
 80224de:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80224e0:	e112      	b.n	8022708 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80224e2:	687a      	ldr	r2, [r7, #4]
 80224e4:	23a7      	movs	r3, #167	@ 0xa7
 80224e6:	009b      	lsls	r3, r3, #2
 80224e8:	5cd3      	ldrb	r3, [r2, r3]
 80224ea:	2b02      	cmp	r3, #2
 80224ec:	d002      	beq.n	80224f4 <USBD_StdEPReq+0x13a>
 80224ee:	2b03      	cmp	r3, #3
 80224f0:	d01d      	beq.n	802252e <USBD_StdEPReq+0x174>
 80224f2:	e032      	b.n	802255a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80224f4:	220e      	movs	r2, #14
 80224f6:	18bb      	adds	r3, r7, r2
 80224f8:	781b      	ldrb	r3, [r3, #0]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d010      	beq.n	8022520 <USBD_StdEPReq+0x166>
 80224fe:	18bb      	adds	r3, r7, r2
 8022500:	781b      	ldrb	r3, [r3, #0]
 8022502:	2b80      	cmp	r3, #128	@ 0x80
 8022504:	d00c      	beq.n	8022520 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022506:	18bb      	adds	r3, r7, r2
 8022508:	781a      	ldrb	r2, [r3, #0]
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	0011      	movs	r1, r2
 802250e:	0018      	movs	r0, r3
 8022510:	f001 f9d1 	bl	80238b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	2180      	movs	r1, #128	@ 0x80
 8022518:	0018      	movs	r0, r3
 802251a:	f001 f9cc 	bl	80238b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802251e:	e024      	b.n	802256a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8022520:	683a      	ldr	r2, [r7, #0]
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	0011      	movs	r1, r2
 8022526:	0018      	movs	r0, r3
 8022528:	f000 fc91 	bl	8022e4e <USBD_CtlError>
              break;
 802252c:	e01d      	b.n	802256a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802252e:	683b      	ldr	r3, [r7, #0]
 8022530:	885b      	ldrh	r3, [r3, #2]
 8022532:	2b00      	cmp	r3, #0
 8022534:	d118      	bne.n	8022568 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8022536:	210e      	movs	r1, #14
 8022538:	187b      	adds	r3, r7, r1
 802253a:	781b      	ldrb	r3, [r3, #0]
 802253c:	227f      	movs	r2, #127	@ 0x7f
 802253e:	4013      	ands	r3, r2
 8022540:	d006      	beq.n	8022550 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8022542:	187b      	adds	r3, r7, r1
 8022544:	781a      	ldrb	r2, [r3, #0]
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	0011      	movs	r1, r2
 802254a:	0018      	movs	r0, r3
 802254c:	f001 f9de 	bl	802390c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	0018      	movs	r0, r3
 8022554:	f000 fd63 	bl	802301e <USBD_CtlSendStatus>
              }
              break;
 8022558:	e006      	b.n	8022568 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 802255a:	683a      	ldr	r2, [r7, #0]
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	0011      	movs	r1, r2
 8022560:	0018      	movs	r0, r3
 8022562:	f000 fc74 	bl	8022e4e <USBD_CtlError>
              break;
 8022566:	e000      	b.n	802256a <USBD_StdEPReq+0x1b0>
              break;
 8022568:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 802256a:	e0cd      	b.n	8022708 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802256c:	687a      	ldr	r2, [r7, #4]
 802256e:	23a7      	movs	r3, #167	@ 0xa7
 8022570:	009b      	lsls	r3, r3, #2
 8022572:	5cd3      	ldrb	r3, [r2, r3]
 8022574:	2b02      	cmp	r3, #2
 8022576:	d002      	beq.n	802257e <USBD_StdEPReq+0x1c4>
 8022578:	2b03      	cmp	r3, #3
 802257a:	d03c      	beq.n	80225f6 <USBD_StdEPReq+0x23c>
 802257c:	e0b5      	b.n	80226ea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802257e:	220e      	movs	r2, #14
 8022580:	18bb      	adds	r3, r7, r2
 8022582:	781b      	ldrb	r3, [r3, #0]
 8022584:	2b00      	cmp	r3, #0
 8022586:	d00a      	beq.n	802259e <USBD_StdEPReq+0x1e4>
 8022588:	18bb      	adds	r3, r7, r2
 802258a:	781b      	ldrb	r3, [r3, #0]
 802258c:	2b80      	cmp	r3, #128	@ 0x80
 802258e:	d006      	beq.n	802259e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022590:	683a      	ldr	r2, [r7, #0]
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	0011      	movs	r1, r2
 8022596:	0018      	movs	r0, r3
 8022598:	f000 fc59 	bl	8022e4e <USBD_CtlError>
                break;
 802259c:	e0ac      	b.n	80226f8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802259e:	220e      	movs	r2, #14
 80225a0:	18bb      	adds	r3, r7, r2
 80225a2:	781b      	ldrb	r3, [r3, #0]
 80225a4:	b25b      	sxtb	r3, r3
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	da0c      	bge.n	80225c4 <USBD_StdEPReq+0x20a>
 80225aa:	18bb      	adds	r3, r7, r2
 80225ac:	781b      	ldrb	r3, [r3, #0]
 80225ae:	227f      	movs	r2, #127	@ 0x7f
 80225b0:	401a      	ands	r2, r3
 80225b2:	0013      	movs	r3, r2
 80225b4:	009b      	lsls	r3, r3, #2
 80225b6:	189b      	adds	r3, r3, r2
 80225b8:	009b      	lsls	r3, r3, #2
 80225ba:	3310      	adds	r3, #16
 80225bc:	687a      	ldr	r2, [r7, #4]
 80225be:	18d3      	adds	r3, r2, r3
 80225c0:	3304      	adds	r3, #4
 80225c2:	e00d      	b.n	80225e0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80225c4:	230e      	movs	r3, #14
 80225c6:	18fb      	adds	r3, r7, r3
 80225c8:	781b      	ldrb	r3, [r3, #0]
 80225ca:	227f      	movs	r2, #127	@ 0x7f
 80225cc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80225ce:	0013      	movs	r3, r2
 80225d0:	009b      	lsls	r3, r3, #2
 80225d2:	189b      	adds	r3, r3, r2
 80225d4:	009b      	lsls	r3, r3, #2
 80225d6:	3351      	adds	r3, #81	@ 0x51
 80225d8:	33ff      	adds	r3, #255	@ 0xff
 80225da:	687a      	ldr	r2, [r7, #4]
 80225dc:	18d3      	adds	r3, r2, r3
 80225de:	3304      	adds	r3, #4
 80225e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80225e2:	68bb      	ldr	r3, [r7, #8]
 80225e4:	2200      	movs	r2, #0
 80225e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80225e8:	68b9      	ldr	r1, [r7, #8]
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	2202      	movs	r2, #2
 80225ee:	0018      	movs	r0, r3
 80225f0:	f000 fcab 	bl	8022f4a <USBD_CtlSendData>
              break;
 80225f4:	e080      	b.n	80226f8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80225f6:	220e      	movs	r2, #14
 80225f8:	18bb      	adds	r3, r7, r2
 80225fa:	781b      	ldrb	r3, [r3, #0]
 80225fc:	b25b      	sxtb	r3, r3
 80225fe:	2b00      	cmp	r3, #0
 8022600:	da14      	bge.n	802262c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8022602:	18bb      	adds	r3, r7, r2
 8022604:	781b      	ldrb	r3, [r3, #0]
 8022606:	220f      	movs	r2, #15
 8022608:	401a      	ands	r2, r3
 802260a:	6879      	ldr	r1, [r7, #4]
 802260c:	0013      	movs	r3, r2
 802260e:	009b      	lsls	r3, r3, #2
 8022610:	189b      	adds	r3, r3, r2
 8022612:	009b      	lsls	r3, r3, #2
 8022614:	18cb      	adds	r3, r1, r3
 8022616:	3318      	adds	r3, #24
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	2b00      	cmp	r3, #0
 802261c:	d11e      	bne.n	802265c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802261e:	683a      	ldr	r2, [r7, #0]
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	0011      	movs	r1, r2
 8022624:	0018      	movs	r0, r3
 8022626:	f000 fc12 	bl	8022e4e <USBD_CtlError>
                  break;
 802262a:	e065      	b.n	80226f8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802262c:	230e      	movs	r3, #14
 802262e:	18fb      	adds	r3, r7, r3
 8022630:	781b      	ldrb	r3, [r3, #0]
 8022632:	220f      	movs	r2, #15
 8022634:	401a      	ands	r2, r3
 8022636:	6878      	ldr	r0, [r7, #4]
 8022638:	23ac      	movs	r3, #172	@ 0xac
 802263a:	0059      	lsls	r1, r3, #1
 802263c:	0013      	movs	r3, r2
 802263e:	009b      	lsls	r3, r3, #2
 8022640:	189b      	adds	r3, r3, r2
 8022642:	009b      	lsls	r3, r3, #2
 8022644:	18c3      	adds	r3, r0, r3
 8022646:	185b      	adds	r3, r3, r1
 8022648:	681b      	ldr	r3, [r3, #0]
 802264a:	2b00      	cmp	r3, #0
 802264c:	d106      	bne.n	802265c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802264e:	683a      	ldr	r2, [r7, #0]
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	0011      	movs	r1, r2
 8022654:	0018      	movs	r0, r3
 8022656:	f000 fbfa 	bl	8022e4e <USBD_CtlError>
                  break;
 802265a:	e04d      	b.n	80226f8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802265c:	220e      	movs	r2, #14
 802265e:	18bb      	adds	r3, r7, r2
 8022660:	781b      	ldrb	r3, [r3, #0]
 8022662:	b25b      	sxtb	r3, r3
 8022664:	2b00      	cmp	r3, #0
 8022666:	da0c      	bge.n	8022682 <USBD_StdEPReq+0x2c8>
 8022668:	18bb      	adds	r3, r7, r2
 802266a:	781b      	ldrb	r3, [r3, #0]
 802266c:	227f      	movs	r2, #127	@ 0x7f
 802266e:	401a      	ands	r2, r3
 8022670:	0013      	movs	r3, r2
 8022672:	009b      	lsls	r3, r3, #2
 8022674:	189b      	adds	r3, r3, r2
 8022676:	009b      	lsls	r3, r3, #2
 8022678:	3310      	adds	r3, #16
 802267a:	687a      	ldr	r2, [r7, #4]
 802267c:	18d3      	adds	r3, r2, r3
 802267e:	3304      	adds	r3, #4
 8022680:	e00d      	b.n	802269e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022682:	230e      	movs	r3, #14
 8022684:	18fb      	adds	r3, r7, r3
 8022686:	781b      	ldrb	r3, [r3, #0]
 8022688:	227f      	movs	r2, #127	@ 0x7f
 802268a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802268c:	0013      	movs	r3, r2
 802268e:	009b      	lsls	r3, r3, #2
 8022690:	189b      	adds	r3, r3, r2
 8022692:	009b      	lsls	r3, r3, #2
 8022694:	3351      	adds	r3, #81	@ 0x51
 8022696:	33ff      	adds	r3, #255	@ 0xff
 8022698:	687a      	ldr	r2, [r7, #4]
 802269a:	18d3      	adds	r3, r2, r3
 802269c:	3304      	adds	r3, #4
 802269e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80226a0:	220e      	movs	r2, #14
 80226a2:	18bb      	adds	r3, r7, r2
 80226a4:	781b      	ldrb	r3, [r3, #0]
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d003      	beq.n	80226b2 <USBD_StdEPReq+0x2f8>
 80226aa:	18bb      	adds	r3, r7, r2
 80226ac:	781b      	ldrb	r3, [r3, #0]
 80226ae:	2b80      	cmp	r3, #128	@ 0x80
 80226b0:	d103      	bne.n	80226ba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80226b2:	68bb      	ldr	r3, [r7, #8]
 80226b4:	2200      	movs	r2, #0
 80226b6:	601a      	str	r2, [r3, #0]
 80226b8:	e010      	b.n	80226dc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80226ba:	230e      	movs	r3, #14
 80226bc:	18fb      	adds	r3, r7, r3
 80226be:	781a      	ldrb	r2, [r3, #0]
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	0011      	movs	r1, r2
 80226c4:	0018      	movs	r0, r3
 80226c6:	f001 f94c 	bl	8023962 <USBD_LL_IsStallEP>
 80226ca:	1e03      	subs	r3, r0, #0
 80226cc:	d003      	beq.n	80226d6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80226ce:	68bb      	ldr	r3, [r7, #8]
 80226d0:	2201      	movs	r2, #1
 80226d2:	601a      	str	r2, [r3, #0]
 80226d4:	e002      	b.n	80226dc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80226d6:	68bb      	ldr	r3, [r7, #8]
 80226d8:	2200      	movs	r2, #0
 80226da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80226dc:	68b9      	ldr	r1, [r7, #8]
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	2202      	movs	r2, #2
 80226e2:	0018      	movs	r0, r3
 80226e4:	f000 fc31 	bl	8022f4a <USBD_CtlSendData>
              break;
 80226e8:	e006      	b.n	80226f8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80226ea:	683a      	ldr	r2, [r7, #0]
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	0011      	movs	r1, r2
 80226f0:	0018      	movs	r0, r3
 80226f2:	f000 fbac 	bl	8022e4e <USBD_CtlError>
              break;
 80226f6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80226f8:	e006      	b.n	8022708 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80226fa:	683a      	ldr	r2, [r7, #0]
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	0011      	movs	r1, r2
 8022700:	0018      	movs	r0, r3
 8022702:	f000 fba4 	bl	8022e4e <USBD_CtlError>
          break;
 8022706:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022708:	e006      	b.n	8022718 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 802270a:	683a      	ldr	r2, [r7, #0]
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	0011      	movs	r1, r2
 8022710:	0018      	movs	r0, r3
 8022712:	f000 fb9c 	bl	8022e4e <USBD_CtlError>
      break;
 8022716:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022718:	230f      	movs	r3, #15
 802271a:	18fb      	adds	r3, r7, r3
 802271c:	781b      	ldrb	r3, [r3, #0]
}
 802271e:	0018      	movs	r0, r3
 8022720:	46bd      	mov	sp, r7
 8022722:	b004      	add	sp, #16
 8022724:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022728 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8022728:	b580      	push	{r7, lr}
 802272a:	b084      	sub	sp, #16
 802272c:	af00      	add	r7, sp, #0
 802272e:	6078      	str	r0, [r7, #4]
 8022730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8022732:	2308      	movs	r3, #8
 8022734:	18fb      	adds	r3, r7, r3
 8022736:	2200      	movs	r2, #0
 8022738:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 802273a:	2300      	movs	r3, #0
 802273c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802273e:	230b      	movs	r3, #11
 8022740:	18fb      	adds	r3, r7, r3
 8022742:	2200      	movs	r2, #0
 8022744:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8022746:	683b      	ldr	r3, [r7, #0]
 8022748:	885b      	ldrh	r3, [r3, #2]
 802274a:	0a1b      	lsrs	r3, r3, #8
 802274c:	b29b      	uxth	r3, r3
 802274e:	2b07      	cmp	r3, #7
 8022750:	d900      	bls.n	8022754 <USBD_GetDescriptor+0x2c>
 8022752:	e159      	b.n	8022a08 <USBD_GetDescriptor+0x2e0>
 8022754:	009a      	lsls	r2, r3, #2
 8022756:	4bcb      	ldr	r3, [pc, #812]	@ (8022a84 <USBD_GetDescriptor+0x35c>)
 8022758:	18d3      	adds	r3, r2, r3
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802275e:	687a      	ldr	r2, [r7, #4]
 8022760:	23ac      	movs	r3, #172	@ 0xac
 8022762:	009b      	lsls	r3, r3, #2
 8022764:	58d3      	ldr	r3, [r2, r3]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	687a      	ldr	r2, [r7, #4]
 802276a:	7c12      	ldrb	r2, [r2, #16]
 802276c:	2108      	movs	r1, #8
 802276e:	1879      	adds	r1, r7, r1
 8022770:	0010      	movs	r0, r2
 8022772:	4798      	blx	r3
 8022774:	0003      	movs	r3, r0
 8022776:	60fb      	str	r3, [r7, #12]
      break;
 8022778:	e153      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	7c1b      	ldrb	r3, [r3, #16]
 802277e:	2b00      	cmp	r3, #0
 8022780:	d10f      	bne.n	80227a2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8022782:	687a      	ldr	r2, [r7, #4]
 8022784:	23ad      	movs	r3, #173	@ 0xad
 8022786:	009b      	lsls	r3, r3, #2
 8022788:	58d3      	ldr	r3, [r2, r3]
 802278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802278c:	2208      	movs	r2, #8
 802278e:	18ba      	adds	r2, r7, r2
 8022790:	0010      	movs	r0, r2
 8022792:	4798      	blx	r3
 8022794:	0003      	movs	r3, r0
 8022796:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022798:	68fb      	ldr	r3, [r7, #12]
 802279a:	3301      	adds	r3, #1
 802279c:	2202      	movs	r2, #2
 802279e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80227a0:	e13f      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80227a2:	687a      	ldr	r2, [r7, #4]
 80227a4:	23ad      	movs	r3, #173	@ 0xad
 80227a6:	009b      	lsls	r3, r3, #2
 80227a8:	58d3      	ldr	r3, [r2, r3]
 80227aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227ac:	2208      	movs	r2, #8
 80227ae:	18ba      	adds	r2, r7, r2
 80227b0:	0010      	movs	r0, r2
 80227b2:	4798      	blx	r3
 80227b4:	0003      	movs	r3, r0
 80227b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	3301      	adds	r3, #1
 80227bc:	2202      	movs	r2, #2
 80227be:	701a      	strb	r2, [r3, #0]
      break;
 80227c0:	e12f      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80227c2:	683b      	ldr	r3, [r7, #0]
 80227c4:	885b      	ldrh	r3, [r3, #2]
 80227c6:	b2db      	uxtb	r3, r3
 80227c8:	2b05      	cmp	r3, #5
 80227ca:	d900      	bls.n	80227ce <USBD_GetDescriptor+0xa6>
 80227cc:	e0d0      	b.n	8022970 <USBD_GetDescriptor+0x248>
 80227ce:	009a      	lsls	r2, r3, #2
 80227d0:	4bad      	ldr	r3, [pc, #692]	@ (8022a88 <USBD_GetDescriptor+0x360>)
 80227d2:	18d3      	adds	r3, r2, r3
 80227d4:	681b      	ldr	r3, [r3, #0]
 80227d6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80227d8:	687a      	ldr	r2, [r7, #4]
 80227da:	23ac      	movs	r3, #172	@ 0xac
 80227dc:	009b      	lsls	r3, r3, #2
 80227de:	58d3      	ldr	r3, [r2, r3]
 80227e0:	685b      	ldr	r3, [r3, #4]
 80227e2:	2b00      	cmp	r3, #0
 80227e4:	d00d      	beq.n	8022802 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80227e6:	687a      	ldr	r2, [r7, #4]
 80227e8:	23ac      	movs	r3, #172	@ 0xac
 80227ea:	009b      	lsls	r3, r3, #2
 80227ec:	58d3      	ldr	r3, [r2, r3]
 80227ee:	685b      	ldr	r3, [r3, #4]
 80227f0:	687a      	ldr	r2, [r7, #4]
 80227f2:	7c12      	ldrb	r2, [r2, #16]
 80227f4:	2108      	movs	r1, #8
 80227f6:	1879      	adds	r1, r7, r1
 80227f8:	0010      	movs	r0, r2
 80227fa:	4798      	blx	r3
 80227fc:	0003      	movs	r3, r0
 80227fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022800:	e0c3      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022802:	683a      	ldr	r2, [r7, #0]
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	0011      	movs	r1, r2
 8022808:	0018      	movs	r0, r3
 802280a:	f000 fb20 	bl	8022e4e <USBD_CtlError>
            err++;
 802280e:	210b      	movs	r1, #11
 8022810:	187b      	adds	r3, r7, r1
 8022812:	781a      	ldrb	r2, [r3, #0]
 8022814:	187b      	adds	r3, r7, r1
 8022816:	3201      	adds	r2, #1
 8022818:	701a      	strb	r2, [r3, #0]
          break;
 802281a:	e0b6      	b.n	802298a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802281c:	687a      	ldr	r2, [r7, #4]
 802281e:	23ac      	movs	r3, #172	@ 0xac
 8022820:	009b      	lsls	r3, r3, #2
 8022822:	58d3      	ldr	r3, [r2, r3]
 8022824:	689b      	ldr	r3, [r3, #8]
 8022826:	2b00      	cmp	r3, #0
 8022828:	d00d      	beq.n	8022846 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802282a:	687a      	ldr	r2, [r7, #4]
 802282c:	23ac      	movs	r3, #172	@ 0xac
 802282e:	009b      	lsls	r3, r3, #2
 8022830:	58d3      	ldr	r3, [r2, r3]
 8022832:	689b      	ldr	r3, [r3, #8]
 8022834:	687a      	ldr	r2, [r7, #4]
 8022836:	7c12      	ldrb	r2, [r2, #16]
 8022838:	2108      	movs	r1, #8
 802283a:	1879      	adds	r1, r7, r1
 802283c:	0010      	movs	r0, r2
 802283e:	4798      	blx	r3
 8022840:	0003      	movs	r3, r0
 8022842:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022844:	e0a1      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022846:	683a      	ldr	r2, [r7, #0]
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	0011      	movs	r1, r2
 802284c:	0018      	movs	r0, r3
 802284e:	f000 fafe 	bl	8022e4e <USBD_CtlError>
            err++;
 8022852:	210b      	movs	r1, #11
 8022854:	187b      	adds	r3, r7, r1
 8022856:	781a      	ldrb	r2, [r3, #0]
 8022858:	187b      	adds	r3, r7, r1
 802285a:	3201      	adds	r2, #1
 802285c:	701a      	strb	r2, [r3, #0]
          break;
 802285e:	e094      	b.n	802298a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8022860:	687a      	ldr	r2, [r7, #4]
 8022862:	23ac      	movs	r3, #172	@ 0xac
 8022864:	009b      	lsls	r3, r3, #2
 8022866:	58d3      	ldr	r3, [r2, r3]
 8022868:	68db      	ldr	r3, [r3, #12]
 802286a:	2b00      	cmp	r3, #0
 802286c:	d00d      	beq.n	802288a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802286e:	687a      	ldr	r2, [r7, #4]
 8022870:	23ac      	movs	r3, #172	@ 0xac
 8022872:	009b      	lsls	r3, r3, #2
 8022874:	58d3      	ldr	r3, [r2, r3]
 8022876:	68db      	ldr	r3, [r3, #12]
 8022878:	687a      	ldr	r2, [r7, #4]
 802287a:	7c12      	ldrb	r2, [r2, #16]
 802287c:	2108      	movs	r1, #8
 802287e:	1879      	adds	r1, r7, r1
 8022880:	0010      	movs	r0, r2
 8022882:	4798      	blx	r3
 8022884:	0003      	movs	r3, r0
 8022886:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022888:	e07f      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802288a:	683a      	ldr	r2, [r7, #0]
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	0011      	movs	r1, r2
 8022890:	0018      	movs	r0, r3
 8022892:	f000 fadc 	bl	8022e4e <USBD_CtlError>
            err++;
 8022896:	210b      	movs	r1, #11
 8022898:	187b      	adds	r3, r7, r1
 802289a:	781a      	ldrb	r2, [r3, #0]
 802289c:	187b      	adds	r3, r7, r1
 802289e:	3201      	adds	r2, #1
 80228a0:	701a      	strb	r2, [r3, #0]
          break;
 80228a2:	e072      	b.n	802298a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80228a4:	687a      	ldr	r2, [r7, #4]
 80228a6:	23ac      	movs	r3, #172	@ 0xac
 80228a8:	009b      	lsls	r3, r3, #2
 80228aa:	58d3      	ldr	r3, [r2, r3]
 80228ac:	691b      	ldr	r3, [r3, #16]
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d00d      	beq.n	80228ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80228b2:	687a      	ldr	r2, [r7, #4]
 80228b4:	23ac      	movs	r3, #172	@ 0xac
 80228b6:	009b      	lsls	r3, r3, #2
 80228b8:	58d3      	ldr	r3, [r2, r3]
 80228ba:	691b      	ldr	r3, [r3, #16]
 80228bc:	687a      	ldr	r2, [r7, #4]
 80228be:	7c12      	ldrb	r2, [r2, #16]
 80228c0:	2108      	movs	r1, #8
 80228c2:	1879      	adds	r1, r7, r1
 80228c4:	0010      	movs	r0, r2
 80228c6:	4798      	blx	r3
 80228c8:	0003      	movs	r3, r0
 80228ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80228cc:	e05d      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80228ce:	683a      	ldr	r2, [r7, #0]
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	0011      	movs	r1, r2
 80228d4:	0018      	movs	r0, r3
 80228d6:	f000 faba 	bl	8022e4e <USBD_CtlError>
            err++;
 80228da:	210b      	movs	r1, #11
 80228dc:	187b      	adds	r3, r7, r1
 80228de:	781a      	ldrb	r2, [r3, #0]
 80228e0:	187b      	adds	r3, r7, r1
 80228e2:	3201      	adds	r2, #1
 80228e4:	701a      	strb	r2, [r3, #0]
          break;
 80228e6:	e050      	b.n	802298a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80228e8:	687a      	ldr	r2, [r7, #4]
 80228ea:	23ac      	movs	r3, #172	@ 0xac
 80228ec:	009b      	lsls	r3, r3, #2
 80228ee:	58d3      	ldr	r3, [r2, r3]
 80228f0:	695b      	ldr	r3, [r3, #20]
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d00d      	beq.n	8022912 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80228f6:	687a      	ldr	r2, [r7, #4]
 80228f8:	23ac      	movs	r3, #172	@ 0xac
 80228fa:	009b      	lsls	r3, r3, #2
 80228fc:	58d3      	ldr	r3, [r2, r3]
 80228fe:	695b      	ldr	r3, [r3, #20]
 8022900:	687a      	ldr	r2, [r7, #4]
 8022902:	7c12      	ldrb	r2, [r2, #16]
 8022904:	2108      	movs	r1, #8
 8022906:	1879      	adds	r1, r7, r1
 8022908:	0010      	movs	r0, r2
 802290a:	4798      	blx	r3
 802290c:	0003      	movs	r3, r0
 802290e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022910:	e03b      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022912:	683a      	ldr	r2, [r7, #0]
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	0011      	movs	r1, r2
 8022918:	0018      	movs	r0, r3
 802291a:	f000 fa98 	bl	8022e4e <USBD_CtlError>
            err++;
 802291e:	210b      	movs	r1, #11
 8022920:	187b      	adds	r3, r7, r1
 8022922:	781a      	ldrb	r2, [r3, #0]
 8022924:	187b      	adds	r3, r7, r1
 8022926:	3201      	adds	r2, #1
 8022928:	701a      	strb	r2, [r3, #0]
          break;
 802292a:	e02e      	b.n	802298a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802292c:	687a      	ldr	r2, [r7, #4]
 802292e:	23ac      	movs	r3, #172	@ 0xac
 8022930:	009b      	lsls	r3, r3, #2
 8022932:	58d3      	ldr	r3, [r2, r3]
 8022934:	699b      	ldr	r3, [r3, #24]
 8022936:	2b00      	cmp	r3, #0
 8022938:	d00d      	beq.n	8022956 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802293a:	687a      	ldr	r2, [r7, #4]
 802293c:	23ac      	movs	r3, #172	@ 0xac
 802293e:	009b      	lsls	r3, r3, #2
 8022940:	58d3      	ldr	r3, [r2, r3]
 8022942:	699b      	ldr	r3, [r3, #24]
 8022944:	687a      	ldr	r2, [r7, #4]
 8022946:	7c12      	ldrb	r2, [r2, #16]
 8022948:	2108      	movs	r1, #8
 802294a:	1879      	adds	r1, r7, r1
 802294c:	0010      	movs	r0, r2
 802294e:	4798      	blx	r3
 8022950:	0003      	movs	r3, r0
 8022952:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022954:	e019      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022956:	683a      	ldr	r2, [r7, #0]
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	0011      	movs	r1, r2
 802295c:	0018      	movs	r0, r3
 802295e:	f000 fa76 	bl	8022e4e <USBD_CtlError>
            err++;
 8022962:	210b      	movs	r1, #11
 8022964:	187b      	adds	r3, r7, r1
 8022966:	781a      	ldrb	r2, [r3, #0]
 8022968:	187b      	adds	r3, r7, r1
 802296a:	3201      	adds	r2, #1
 802296c:	701a      	strb	r2, [r3, #0]
          break;
 802296e:	e00c      	b.n	802298a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022970:	683a      	ldr	r2, [r7, #0]
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	0011      	movs	r1, r2
 8022976:	0018      	movs	r0, r3
 8022978:	f000 fa69 	bl	8022e4e <USBD_CtlError>
          err++;
 802297c:	210b      	movs	r1, #11
 802297e:	187b      	adds	r3, r7, r1
 8022980:	781a      	ldrb	r2, [r3, #0]
 8022982:	187b      	adds	r3, r7, r1
 8022984:	3201      	adds	r2, #1
 8022986:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022988:	e04b      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>
 802298a:	e04a      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	7c1b      	ldrb	r3, [r3, #16]
 8022990:	2b00      	cmp	r3, #0
 8022992:	d10b      	bne.n	80229ac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022994:	687a      	ldr	r2, [r7, #4]
 8022996:	23ad      	movs	r3, #173	@ 0xad
 8022998:	009b      	lsls	r3, r3, #2
 802299a:	58d3      	ldr	r3, [r2, r3]
 802299c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802299e:	2208      	movs	r2, #8
 80229a0:	18ba      	adds	r2, r7, r2
 80229a2:	0010      	movs	r0, r2
 80229a4:	4798      	blx	r3
 80229a6:	0003      	movs	r3, r0
 80229a8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80229aa:	e03a      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80229ac:	683a      	ldr	r2, [r7, #0]
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	0011      	movs	r1, r2
 80229b2:	0018      	movs	r0, r3
 80229b4:	f000 fa4b 	bl	8022e4e <USBD_CtlError>
        err++;
 80229b8:	210b      	movs	r1, #11
 80229ba:	187b      	adds	r3, r7, r1
 80229bc:	781a      	ldrb	r2, [r3, #0]
 80229be:	187b      	adds	r3, r7, r1
 80229c0:	3201      	adds	r2, #1
 80229c2:	701a      	strb	r2, [r3, #0]
      break;
 80229c4:	e02d      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	7c1b      	ldrb	r3, [r3, #16]
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d10f      	bne.n	80229ee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80229ce:	687a      	ldr	r2, [r7, #4]
 80229d0:	23ad      	movs	r3, #173	@ 0xad
 80229d2:	009b      	lsls	r3, r3, #2
 80229d4:	58d3      	ldr	r3, [r2, r3]
 80229d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229d8:	2208      	movs	r2, #8
 80229da:	18ba      	adds	r2, r7, r2
 80229dc:	0010      	movs	r0, r2
 80229de:	4798      	blx	r3
 80229e0:	0003      	movs	r3, r0
 80229e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	3301      	adds	r3, #1
 80229e8:	2207      	movs	r2, #7
 80229ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80229ec:	e019      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80229ee:	683a      	ldr	r2, [r7, #0]
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	0011      	movs	r1, r2
 80229f4:	0018      	movs	r0, r3
 80229f6:	f000 fa2a 	bl	8022e4e <USBD_CtlError>
        err++;
 80229fa:	210b      	movs	r1, #11
 80229fc:	187b      	adds	r3, r7, r1
 80229fe:	781a      	ldrb	r2, [r3, #0]
 8022a00:	187b      	adds	r3, r7, r1
 8022a02:	3201      	adds	r2, #1
 8022a04:	701a      	strb	r2, [r3, #0]
      break;
 8022a06:	e00c      	b.n	8022a22 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022a08:	683a      	ldr	r2, [r7, #0]
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	0011      	movs	r1, r2
 8022a0e:	0018      	movs	r0, r3
 8022a10:	f000 fa1d 	bl	8022e4e <USBD_CtlError>
      err++;
 8022a14:	210b      	movs	r1, #11
 8022a16:	187b      	adds	r3, r7, r1
 8022a18:	781a      	ldrb	r2, [r3, #0]
 8022a1a:	187b      	adds	r3, r7, r1
 8022a1c:	3201      	adds	r2, #1
 8022a1e:	701a      	strb	r2, [r3, #0]
      break;
 8022a20:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022a22:	230b      	movs	r3, #11
 8022a24:	18fb      	adds	r3, r7, r3
 8022a26:	781b      	ldrb	r3, [r3, #0]
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	d127      	bne.n	8022a7c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8022a2c:	2108      	movs	r1, #8
 8022a2e:	187b      	adds	r3, r7, r1
 8022a30:	881b      	ldrh	r3, [r3, #0]
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d019      	beq.n	8022a6a <USBD_GetDescriptor+0x342>
 8022a36:	683b      	ldr	r3, [r7, #0]
 8022a38:	88db      	ldrh	r3, [r3, #6]
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	d015      	beq.n	8022a6a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8022a3e:	683b      	ldr	r3, [r7, #0]
 8022a40:	88da      	ldrh	r2, [r3, #6]
 8022a42:	187b      	adds	r3, r7, r1
 8022a44:	881b      	ldrh	r3, [r3, #0]
 8022a46:	1c18      	adds	r0, r3, #0
 8022a48:	1c11      	adds	r1, r2, #0
 8022a4a:	b28a      	uxth	r2, r1
 8022a4c:	b283      	uxth	r3, r0
 8022a4e:	429a      	cmp	r2, r3
 8022a50:	d900      	bls.n	8022a54 <USBD_GetDescriptor+0x32c>
 8022a52:	1c01      	adds	r1, r0, #0
 8022a54:	b28a      	uxth	r2, r1
 8022a56:	2108      	movs	r1, #8
 8022a58:	187b      	adds	r3, r7, r1
 8022a5a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8022a5c:	187b      	adds	r3, r7, r1
 8022a5e:	881a      	ldrh	r2, [r3, #0]
 8022a60:	68f9      	ldr	r1, [r7, #12]
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	0018      	movs	r0, r3
 8022a66:	f000 fa70 	bl	8022f4a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022a6a:	683b      	ldr	r3, [r7, #0]
 8022a6c:	88db      	ldrh	r3, [r3, #6]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d105      	bne.n	8022a7e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	0018      	movs	r0, r3
 8022a76:	f000 fad2 	bl	802301e <USBD_CtlSendStatus>
 8022a7a:	e000      	b.n	8022a7e <USBD_GetDescriptor+0x356>
    return;
 8022a7c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022a7e:	46bd      	mov	sp, r7
 8022a80:	b004      	add	sp, #16
 8022a82:	bd80      	pop	{r7, pc}
 8022a84:	0802e70c 	.word	0x0802e70c
 8022a88:	0802e72c 	.word	0x0802e72c

08022a8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022a8c:	b590      	push	{r4, r7, lr}
 8022a8e:	b085      	sub	sp, #20
 8022a90:	af00      	add	r7, sp, #0
 8022a92:	6078      	str	r0, [r7, #4]
 8022a94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022a96:	683b      	ldr	r3, [r7, #0]
 8022a98:	889b      	ldrh	r3, [r3, #4]
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	d13d      	bne.n	8022b1a <USBD_SetAddress+0x8e>
 8022a9e:	683b      	ldr	r3, [r7, #0]
 8022aa0:	88db      	ldrh	r3, [r3, #6]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d139      	bne.n	8022b1a <USBD_SetAddress+0x8e>
 8022aa6:	683b      	ldr	r3, [r7, #0]
 8022aa8:	885b      	ldrh	r3, [r3, #2]
 8022aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8022aac:	d835      	bhi.n	8022b1a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022aae:	683b      	ldr	r3, [r7, #0]
 8022ab0:	885b      	ldrh	r3, [r3, #2]
 8022ab2:	b2da      	uxtb	r2, r3
 8022ab4:	230f      	movs	r3, #15
 8022ab6:	18fb      	adds	r3, r7, r3
 8022ab8:	217f      	movs	r1, #127	@ 0x7f
 8022aba:	400a      	ands	r2, r1
 8022abc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022abe:	687a      	ldr	r2, [r7, #4]
 8022ac0:	23a7      	movs	r3, #167	@ 0xa7
 8022ac2:	009b      	lsls	r3, r3, #2
 8022ac4:	5cd3      	ldrb	r3, [r2, r3]
 8022ac6:	2b03      	cmp	r3, #3
 8022ac8:	d106      	bne.n	8022ad8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8022aca:	683a      	ldr	r2, [r7, #0]
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	0011      	movs	r1, r2
 8022ad0:	0018      	movs	r0, r3
 8022ad2:	f000 f9bc 	bl	8022e4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022ad6:	e027      	b.n	8022b28 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	240f      	movs	r4, #15
 8022adc:	193a      	adds	r2, r7, r4
 8022ade:	4914      	ldr	r1, [pc, #80]	@ (8022b30 <USBD_SetAddress+0xa4>)
 8022ae0:	7812      	ldrb	r2, [r2, #0]
 8022ae2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022ae4:	193b      	adds	r3, r7, r4
 8022ae6:	781a      	ldrb	r2, [r3, #0]
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	0011      	movs	r1, r2
 8022aec:	0018      	movs	r0, r3
 8022aee:	f000 ff69 	bl	80239c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	0018      	movs	r0, r3
 8022af6:	f000 fa92 	bl	802301e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022afa:	193b      	adds	r3, r7, r4
 8022afc:	781b      	ldrb	r3, [r3, #0]
 8022afe:	2b00      	cmp	r3, #0
 8022b00:	d005      	beq.n	8022b0e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022b02:	687a      	ldr	r2, [r7, #4]
 8022b04:	23a7      	movs	r3, #167	@ 0xa7
 8022b06:	009b      	lsls	r3, r3, #2
 8022b08:	2102      	movs	r1, #2
 8022b0a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022b0c:	e00c      	b.n	8022b28 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022b0e:	687a      	ldr	r2, [r7, #4]
 8022b10:	23a7      	movs	r3, #167	@ 0xa7
 8022b12:	009b      	lsls	r3, r3, #2
 8022b14:	2101      	movs	r1, #1
 8022b16:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022b18:	e006      	b.n	8022b28 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022b1a:	683a      	ldr	r2, [r7, #0]
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	0011      	movs	r1, r2
 8022b20:	0018      	movs	r0, r3
 8022b22:	f000 f994 	bl	8022e4e <USBD_CtlError>
  }
}
 8022b26:	46c0      	nop			@ (mov r8, r8)
 8022b28:	46c0      	nop			@ (mov r8, r8)
 8022b2a:	46bd      	mov	sp, r7
 8022b2c:	b005      	add	sp, #20
 8022b2e:	bd90      	pop	{r4, r7, pc}
 8022b30:	0000029e 	.word	0x0000029e

08022b34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b34:	b580      	push	{r7, lr}
 8022b36:	b082      	sub	sp, #8
 8022b38:	af00      	add	r7, sp, #0
 8022b3a:	6078      	str	r0, [r7, #4]
 8022b3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022b3e:	683b      	ldr	r3, [r7, #0]
 8022b40:	885b      	ldrh	r3, [r3, #2]
 8022b42:	b2da      	uxtb	r2, r3
 8022b44:	4b4c      	ldr	r3, [pc, #304]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022b46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022b48:	4b4b      	ldr	r3, [pc, #300]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022b4a:	781b      	ldrb	r3, [r3, #0]
 8022b4c:	2b01      	cmp	r3, #1
 8022b4e:	d906      	bls.n	8022b5e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022b50:	683a      	ldr	r2, [r7, #0]
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	0011      	movs	r1, r2
 8022b56:	0018      	movs	r0, r3
 8022b58:	f000 f979 	bl	8022e4e <USBD_CtlError>
 8022b5c:	e088      	b.n	8022c70 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8022b5e:	687a      	ldr	r2, [r7, #4]
 8022b60:	23a7      	movs	r3, #167	@ 0xa7
 8022b62:	009b      	lsls	r3, r3, #2
 8022b64:	5cd3      	ldrb	r3, [r2, r3]
 8022b66:	2b02      	cmp	r3, #2
 8022b68:	d002      	beq.n	8022b70 <USBD_SetConfig+0x3c>
 8022b6a:	2b03      	cmp	r3, #3
 8022b6c:	d029      	beq.n	8022bc2 <USBD_SetConfig+0x8e>
 8022b6e:	e071      	b.n	8022c54 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022b70:	4b41      	ldr	r3, [pc, #260]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022b72:	781b      	ldrb	r3, [r3, #0]
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	d01f      	beq.n	8022bb8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022b78:	4b3f      	ldr	r3, [pc, #252]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022b7a:	781b      	ldrb	r3, [r3, #0]
 8022b7c:	001a      	movs	r2, r3
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022b82:	687a      	ldr	r2, [r7, #4]
 8022b84:	23a7      	movs	r3, #167	@ 0xa7
 8022b86:	009b      	lsls	r3, r3, #2
 8022b88:	2103      	movs	r1, #3
 8022b8a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022b8e:	781a      	ldrb	r2, [r3, #0]
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	0011      	movs	r1, r2
 8022b94:	0018      	movs	r0, r3
 8022b96:	f7ff f8c6 	bl	8021d26 <USBD_SetClassConfig>
 8022b9a:	0003      	movs	r3, r0
 8022b9c:	2b02      	cmp	r3, #2
 8022b9e:	d106      	bne.n	8022bae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022ba0:	683a      	ldr	r2, [r7, #0]
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	0011      	movs	r1, r2
 8022ba6:	0018      	movs	r0, r3
 8022ba8:	f000 f951 	bl	8022e4e <USBD_CtlError>
            return;
 8022bac:	e060      	b.n	8022c70 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	0018      	movs	r0, r3
 8022bb2:	f000 fa34 	bl	802301e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022bb6:	e05b      	b.n	8022c70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	0018      	movs	r0, r3
 8022bbc:	f000 fa2f 	bl	802301e <USBD_CtlSendStatus>
        break;
 8022bc0:	e056      	b.n	8022c70 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022bc4:	781b      	ldrb	r3, [r3, #0]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d115      	bne.n	8022bf6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022bca:	687a      	ldr	r2, [r7, #4]
 8022bcc:	23a7      	movs	r3, #167	@ 0xa7
 8022bce:	009b      	lsls	r3, r3, #2
 8022bd0:	2102      	movs	r1, #2
 8022bd2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022bd4:	4b28      	ldr	r3, [pc, #160]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022bd6:	781b      	ldrb	r3, [r3, #0]
 8022bd8:	001a      	movs	r2, r3
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022bde:	4b26      	ldr	r3, [pc, #152]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022be0:	781a      	ldrb	r2, [r3, #0]
 8022be2:	687b      	ldr	r3, [r7, #4]
 8022be4:	0011      	movs	r1, r2
 8022be6:	0018      	movs	r0, r3
 8022be8:	f7ff f8c4 	bl	8021d74 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	0018      	movs	r0, r3
 8022bf0:	f000 fa15 	bl	802301e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022bf4:	e03c      	b.n	8022c70 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022bf6:	4b20      	ldr	r3, [pc, #128]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022bf8:	781b      	ldrb	r3, [r3, #0]
 8022bfa:	001a      	movs	r2, r3
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	685b      	ldr	r3, [r3, #4]
 8022c00:	429a      	cmp	r2, r3
 8022c02:	d022      	beq.n	8022c4a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022c04:	687b      	ldr	r3, [r7, #4]
 8022c06:	685b      	ldr	r3, [r3, #4]
 8022c08:	b2da      	uxtb	r2, r3
 8022c0a:	687b      	ldr	r3, [r7, #4]
 8022c0c:	0011      	movs	r1, r2
 8022c0e:	0018      	movs	r0, r3
 8022c10:	f7ff f8b0 	bl	8021d74 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022c14:	4b18      	ldr	r3, [pc, #96]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022c16:	781b      	ldrb	r3, [r3, #0]
 8022c18:	001a      	movs	r2, r3
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022c1e:	4b16      	ldr	r3, [pc, #88]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022c20:	781a      	ldrb	r2, [r3, #0]
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	0011      	movs	r1, r2
 8022c26:	0018      	movs	r0, r3
 8022c28:	f7ff f87d 	bl	8021d26 <USBD_SetClassConfig>
 8022c2c:	0003      	movs	r3, r0
 8022c2e:	2b02      	cmp	r3, #2
 8022c30:	d106      	bne.n	8022c40 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022c32:	683a      	ldr	r2, [r7, #0]
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	0011      	movs	r1, r2
 8022c38:	0018      	movs	r0, r3
 8022c3a:	f000 f908 	bl	8022e4e <USBD_CtlError>
            return;
 8022c3e:	e017      	b.n	8022c70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	0018      	movs	r0, r3
 8022c44:	f000 f9eb 	bl	802301e <USBD_CtlSendStatus>
        break;
 8022c48:	e012      	b.n	8022c70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	0018      	movs	r0, r3
 8022c4e:	f000 f9e6 	bl	802301e <USBD_CtlSendStatus>
        break;
 8022c52:	e00d      	b.n	8022c70 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022c54:	683a      	ldr	r2, [r7, #0]
 8022c56:	687b      	ldr	r3, [r7, #4]
 8022c58:	0011      	movs	r1, r2
 8022c5a:	0018      	movs	r0, r3
 8022c5c:	f000 f8f7 	bl	8022e4e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022c60:	4b05      	ldr	r3, [pc, #20]	@ (8022c78 <USBD_SetConfig+0x144>)
 8022c62:	781a      	ldrb	r2, [r3, #0]
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	0011      	movs	r1, r2
 8022c68:	0018      	movs	r0, r3
 8022c6a:	f7ff f883 	bl	8021d74 <USBD_ClrClassConfig>
        break;
 8022c6e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022c70:	46bd      	mov	sp, r7
 8022c72:	b002      	add	sp, #8
 8022c74:	bd80      	pop	{r7, pc}
 8022c76:	46c0      	nop			@ (mov r8, r8)
 8022c78:	20002530 	.word	0x20002530

08022c7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022c7c:	b580      	push	{r7, lr}
 8022c7e:	b082      	sub	sp, #8
 8022c80:	af00      	add	r7, sp, #0
 8022c82:	6078      	str	r0, [r7, #4]
 8022c84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022c86:	683b      	ldr	r3, [r7, #0]
 8022c88:	88db      	ldrh	r3, [r3, #6]
 8022c8a:	2b01      	cmp	r3, #1
 8022c8c:	d006      	beq.n	8022c9c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022c8e:	683a      	ldr	r2, [r7, #0]
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	0011      	movs	r1, r2
 8022c94:	0018      	movs	r0, r3
 8022c96:	f000 f8da 	bl	8022e4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022c9a:	e026      	b.n	8022cea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022c9c:	687a      	ldr	r2, [r7, #4]
 8022c9e:	23a7      	movs	r3, #167	@ 0xa7
 8022ca0:	009b      	lsls	r3, r3, #2
 8022ca2:	5cd3      	ldrb	r3, [r2, r3]
 8022ca4:	2b02      	cmp	r3, #2
 8022ca6:	dc02      	bgt.n	8022cae <USBD_GetConfig+0x32>
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	dc03      	bgt.n	8022cb4 <USBD_GetConfig+0x38>
 8022cac:	e016      	b.n	8022cdc <USBD_GetConfig+0x60>
 8022cae:	2b03      	cmp	r3, #3
 8022cb0:	d00c      	beq.n	8022ccc <USBD_GetConfig+0x50>
 8022cb2:	e013      	b.n	8022cdc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	2200      	movs	r2, #0
 8022cb8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	3308      	adds	r3, #8
 8022cbe:	0019      	movs	r1, r3
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	2201      	movs	r2, #1
 8022cc4:	0018      	movs	r0, r3
 8022cc6:	f000 f940 	bl	8022f4a <USBD_CtlSendData>
        break;
 8022cca:	e00e      	b.n	8022cea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	1d19      	adds	r1, r3, #4
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	2201      	movs	r2, #1
 8022cd4:	0018      	movs	r0, r3
 8022cd6:	f000 f938 	bl	8022f4a <USBD_CtlSendData>
        break;
 8022cda:	e006      	b.n	8022cea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022cdc:	683a      	ldr	r2, [r7, #0]
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	0011      	movs	r1, r2
 8022ce2:	0018      	movs	r0, r3
 8022ce4:	f000 f8b3 	bl	8022e4e <USBD_CtlError>
        break;
 8022ce8:	46c0      	nop			@ (mov r8, r8)
}
 8022cea:	46c0      	nop			@ (mov r8, r8)
 8022cec:	46bd      	mov	sp, r7
 8022cee:	b002      	add	sp, #8
 8022cf0:	bd80      	pop	{r7, pc}

08022cf2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022cf2:	b580      	push	{r7, lr}
 8022cf4:	b082      	sub	sp, #8
 8022cf6:	af00      	add	r7, sp, #0
 8022cf8:	6078      	str	r0, [r7, #4]
 8022cfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022cfc:	687a      	ldr	r2, [r7, #4]
 8022cfe:	23a7      	movs	r3, #167	@ 0xa7
 8022d00:	009b      	lsls	r3, r3, #2
 8022d02:	5cd3      	ldrb	r3, [r2, r3]
 8022d04:	3b01      	subs	r3, #1
 8022d06:	2b02      	cmp	r3, #2
 8022d08:	d822      	bhi.n	8022d50 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022d0a:	683b      	ldr	r3, [r7, #0]
 8022d0c:	88db      	ldrh	r3, [r3, #6]
 8022d0e:	2b02      	cmp	r3, #2
 8022d10:	d006      	beq.n	8022d20 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022d12:	683a      	ldr	r2, [r7, #0]
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	0011      	movs	r1, r2
 8022d18:	0018      	movs	r0, r3
 8022d1a:	f000 f898 	bl	8022e4e <USBD_CtlError>
        break;
 8022d1e:	e01e      	b.n	8022d5e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	2201      	movs	r2, #1
 8022d24:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022d26:	687a      	ldr	r2, [r7, #4]
 8022d28:	23a9      	movs	r3, #169	@ 0xa9
 8022d2a:	009b      	lsls	r3, r3, #2
 8022d2c:	58d3      	ldr	r3, [r2, r3]
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	d005      	beq.n	8022d3e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	68db      	ldr	r3, [r3, #12]
 8022d36:	2202      	movs	r2, #2
 8022d38:	431a      	orrs	r2, r3
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	330c      	adds	r3, #12
 8022d42:	0019      	movs	r1, r3
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	2202      	movs	r2, #2
 8022d48:	0018      	movs	r0, r3
 8022d4a:	f000 f8fe 	bl	8022f4a <USBD_CtlSendData>
      break;
 8022d4e:	e006      	b.n	8022d5e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022d50:	683a      	ldr	r2, [r7, #0]
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	0011      	movs	r1, r2
 8022d56:	0018      	movs	r0, r3
 8022d58:	f000 f879 	bl	8022e4e <USBD_CtlError>
      break;
 8022d5c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022d5e:	46c0      	nop			@ (mov r8, r8)
 8022d60:	46bd      	mov	sp, r7
 8022d62:	b002      	add	sp, #8
 8022d64:	bd80      	pop	{r7, pc}

08022d66 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022d66:	b580      	push	{r7, lr}
 8022d68:	b082      	sub	sp, #8
 8022d6a:	af00      	add	r7, sp, #0
 8022d6c:	6078      	str	r0, [r7, #4]
 8022d6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022d70:	683b      	ldr	r3, [r7, #0]
 8022d72:	885b      	ldrh	r3, [r3, #2]
 8022d74:	2b01      	cmp	r3, #1
 8022d76:	d108      	bne.n	8022d8a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022d78:	687a      	ldr	r2, [r7, #4]
 8022d7a:	23a9      	movs	r3, #169	@ 0xa9
 8022d7c:	009b      	lsls	r3, r3, #2
 8022d7e:	2101      	movs	r1, #1
 8022d80:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022d82:	687b      	ldr	r3, [r7, #4]
 8022d84:	0018      	movs	r0, r3
 8022d86:	f000 f94a 	bl	802301e <USBD_CtlSendStatus>
  }
}
 8022d8a:	46c0      	nop			@ (mov r8, r8)
 8022d8c:	46bd      	mov	sp, r7
 8022d8e:	b002      	add	sp, #8
 8022d90:	bd80      	pop	{r7, pc}

08022d92 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022d92:	b580      	push	{r7, lr}
 8022d94:	b082      	sub	sp, #8
 8022d96:	af00      	add	r7, sp, #0
 8022d98:	6078      	str	r0, [r7, #4]
 8022d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022d9c:	687a      	ldr	r2, [r7, #4]
 8022d9e:	23a7      	movs	r3, #167	@ 0xa7
 8022da0:	009b      	lsls	r3, r3, #2
 8022da2:	5cd3      	ldrb	r3, [r2, r3]
 8022da4:	3b01      	subs	r3, #1
 8022da6:	2b02      	cmp	r3, #2
 8022da8:	d80d      	bhi.n	8022dc6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022daa:	683b      	ldr	r3, [r7, #0]
 8022dac:	885b      	ldrh	r3, [r3, #2]
 8022dae:	2b01      	cmp	r3, #1
 8022db0:	d110      	bne.n	8022dd4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022db2:	687a      	ldr	r2, [r7, #4]
 8022db4:	23a9      	movs	r3, #169	@ 0xa9
 8022db6:	009b      	lsls	r3, r3, #2
 8022db8:	2100      	movs	r1, #0
 8022dba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022dbc:	687b      	ldr	r3, [r7, #4]
 8022dbe:	0018      	movs	r0, r3
 8022dc0:	f000 f92d 	bl	802301e <USBD_CtlSendStatus>
      }
      break;
 8022dc4:	e006      	b.n	8022dd4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022dc6:	683a      	ldr	r2, [r7, #0]
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	0011      	movs	r1, r2
 8022dcc:	0018      	movs	r0, r3
 8022dce:	f000 f83e 	bl	8022e4e <USBD_CtlError>
      break;
 8022dd2:	e000      	b.n	8022dd6 <USBD_ClrFeature+0x44>
      break;
 8022dd4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022dd6:	46c0      	nop			@ (mov r8, r8)
 8022dd8:	46bd      	mov	sp, r7
 8022dda:	b002      	add	sp, #8
 8022ddc:	bd80      	pop	{r7, pc}

08022dde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022dde:	b580      	push	{r7, lr}
 8022de0:	b082      	sub	sp, #8
 8022de2:	af00      	add	r7, sp, #0
 8022de4:	6078      	str	r0, [r7, #4]
 8022de6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022de8:	683b      	ldr	r3, [r7, #0]
 8022dea:	781a      	ldrb	r2, [r3, #0]
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022df0:	683b      	ldr	r3, [r7, #0]
 8022df2:	785a      	ldrb	r2, [r3, #1]
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022df8:	683b      	ldr	r3, [r7, #0]
 8022dfa:	3302      	adds	r3, #2
 8022dfc:	781b      	ldrb	r3, [r3, #0]
 8022dfe:	001a      	movs	r2, r3
 8022e00:	683b      	ldr	r3, [r7, #0]
 8022e02:	3303      	adds	r3, #3
 8022e04:	781b      	ldrb	r3, [r3, #0]
 8022e06:	021b      	lsls	r3, r3, #8
 8022e08:	b29b      	uxth	r3, r3
 8022e0a:	18d3      	adds	r3, r2, r3
 8022e0c:	b29a      	uxth	r2, r3
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022e12:	683b      	ldr	r3, [r7, #0]
 8022e14:	3304      	adds	r3, #4
 8022e16:	781b      	ldrb	r3, [r3, #0]
 8022e18:	001a      	movs	r2, r3
 8022e1a:	683b      	ldr	r3, [r7, #0]
 8022e1c:	3305      	adds	r3, #5
 8022e1e:	781b      	ldrb	r3, [r3, #0]
 8022e20:	021b      	lsls	r3, r3, #8
 8022e22:	b29b      	uxth	r3, r3
 8022e24:	18d3      	adds	r3, r2, r3
 8022e26:	b29a      	uxth	r2, r3
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022e2c:	683b      	ldr	r3, [r7, #0]
 8022e2e:	3306      	adds	r3, #6
 8022e30:	781b      	ldrb	r3, [r3, #0]
 8022e32:	001a      	movs	r2, r3
 8022e34:	683b      	ldr	r3, [r7, #0]
 8022e36:	3307      	adds	r3, #7
 8022e38:	781b      	ldrb	r3, [r3, #0]
 8022e3a:	021b      	lsls	r3, r3, #8
 8022e3c:	b29b      	uxth	r3, r3
 8022e3e:	18d3      	adds	r3, r2, r3
 8022e40:	b29a      	uxth	r2, r3
 8022e42:	687b      	ldr	r3, [r7, #4]
 8022e44:	80da      	strh	r2, [r3, #6]

}
 8022e46:	46c0      	nop			@ (mov r8, r8)
 8022e48:	46bd      	mov	sp, r7
 8022e4a:	b002      	add	sp, #8
 8022e4c:	bd80      	pop	{r7, pc}

08022e4e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022e4e:	b580      	push	{r7, lr}
 8022e50:	b082      	sub	sp, #8
 8022e52:	af00      	add	r7, sp, #0
 8022e54:	6078      	str	r0, [r7, #4]
 8022e56:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	2180      	movs	r1, #128	@ 0x80
 8022e5c:	0018      	movs	r0, r3
 8022e5e:	f000 fd2a 	bl	80238b6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	2100      	movs	r1, #0
 8022e66:	0018      	movs	r0, r3
 8022e68:	f000 fd25 	bl	80238b6 <USBD_LL_StallEP>
}
 8022e6c:	46c0      	nop			@ (mov r8, r8)
 8022e6e:	46bd      	mov	sp, r7
 8022e70:	b002      	add	sp, #8
 8022e72:	bd80      	pop	{r7, pc}

08022e74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022e74:	b590      	push	{r4, r7, lr}
 8022e76:	b087      	sub	sp, #28
 8022e78:	af00      	add	r7, sp, #0
 8022e7a:	60f8      	str	r0, [r7, #12]
 8022e7c:	60b9      	str	r1, [r7, #8]
 8022e7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022e80:	2417      	movs	r4, #23
 8022e82:	193b      	adds	r3, r7, r4
 8022e84:	2200      	movs	r2, #0
 8022e86:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022e88:	68fb      	ldr	r3, [r7, #12]
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d03c      	beq.n	8022f08 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022e8e:	68fb      	ldr	r3, [r7, #12]
 8022e90:	0018      	movs	r0, r3
 8022e92:	f000 f83d 	bl	8022f10 <USBD_GetLen>
 8022e96:	0003      	movs	r3, r0
 8022e98:	3301      	adds	r3, #1
 8022e9a:	b29b      	uxth	r3, r3
 8022e9c:	18db      	adds	r3, r3, r3
 8022e9e:	b29a      	uxth	r2, r3
 8022ea0:	687b      	ldr	r3, [r7, #4]
 8022ea2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022ea4:	193b      	adds	r3, r7, r4
 8022ea6:	781b      	ldrb	r3, [r3, #0]
 8022ea8:	193a      	adds	r2, r7, r4
 8022eaa:	1c59      	adds	r1, r3, #1
 8022eac:	7011      	strb	r1, [r2, #0]
 8022eae:	001a      	movs	r2, r3
 8022eb0:	68bb      	ldr	r3, [r7, #8]
 8022eb2:	189b      	adds	r3, r3, r2
 8022eb4:	687a      	ldr	r2, [r7, #4]
 8022eb6:	7812      	ldrb	r2, [r2, #0]
 8022eb8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022eba:	193b      	adds	r3, r7, r4
 8022ebc:	781b      	ldrb	r3, [r3, #0]
 8022ebe:	193a      	adds	r2, r7, r4
 8022ec0:	1c59      	adds	r1, r3, #1
 8022ec2:	7011      	strb	r1, [r2, #0]
 8022ec4:	001a      	movs	r2, r3
 8022ec6:	68bb      	ldr	r3, [r7, #8]
 8022ec8:	189b      	adds	r3, r3, r2
 8022eca:	2203      	movs	r2, #3
 8022ecc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022ece:	e017      	b.n	8022f00 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022ed0:	68fb      	ldr	r3, [r7, #12]
 8022ed2:	1c5a      	adds	r2, r3, #1
 8022ed4:	60fa      	str	r2, [r7, #12]
 8022ed6:	2417      	movs	r4, #23
 8022ed8:	193a      	adds	r2, r7, r4
 8022eda:	7812      	ldrb	r2, [r2, #0]
 8022edc:	1939      	adds	r1, r7, r4
 8022ede:	1c50      	adds	r0, r2, #1
 8022ee0:	7008      	strb	r0, [r1, #0]
 8022ee2:	0011      	movs	r1, r2
 8022ee4:	68ba      	ldr	r2, [r7, #8]
 8022ee6:	1852      	adds	r2, r2, r1
 8022ee8:	781b      	ldrb	r3, [r3, #0]
 8022eea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022eec:	193b      	adds	r3, r7, r4
 8022eee:	781b      	ldrb	r3, [r3, #0]
 8022ef0:	193a      	adds	r2, r7, r4
 8022ef2:	1c59      	adds	r1, r3, #1
 8022ef4:	7011      	strb	r1, [r2, #0]
 8022ef6:	001a      	movs	r2, r3
 8022ef8:	68bb      	ldr	r3, [r7, #8]
 8022efa:	189b      	adds	r3, r3, r2
 8022efc:	2200      	movs	r2, #0
 8022efe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	781b      	ldrb	r3, [r3, #0]
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	d1e3      	bne.n	8022ed0 <USBD_GetString+0x5c>
    }
  }
}
 8022f08:	46c0      	nop			@ (mov r8, r8)
 8022f0a:	46bd      	mov	sp, r7
 8022f0c:	b007      	add	sp, #28
 8022f0e:	bd90      	pop	{r4, r7, pc}

08022f10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022f10:	b580      	push	{r7, lr}
 8022f12:	b084      	sub	sp, #16
 8022f14:	af00      	add	r7, sp, #0
 8022f16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022f18:	230f      	movs	r3, #15
 8022f1a:	18fb      	adds	r3, r7, r3
 8022f1c:	2200      	movs	r2, #0
 8022f1e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022f20:	e008      	b.n	8022f34 <USBD_GetLen+0x24>
  {
    len++;
 8022f22:	210f      	movs	r1, #15
 8022f24:	187b      	adds	r3, r7, r1
 8022f26:	781a      	ldrb	r2, [r3, #0]
 8022f28:	187b      	adds	r3, r7, r1
 8022f2a:	3201      	adds	r2, #1
 8022f2c:	701a      	strb	r2, [r3, #0]
    buf++;
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	3301      	adds	r3, #1
 8022f32:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	781b      	ldrb	r3, [r3, #0]
 8022f38:	2b00      	cmp	r3, #0
 8022f3a:	d1f2      	bne.n	8022f22 <USBD_GetLen+0x12>
  }

  return len;
 8022f3c:	230f      	movs	r3, #15
 8022f3e:	18fb      	adds	r3, r7, r3
 8022f40:	781b      	ldrb	r3, [r3, #0]
}
 8022f42:	0018      	movs	r0, r3
 8022f44:	46bd      	mov	sp, r7
 8022f46:	b004      	add	sp, #16
 8022f48:	bd80      	pop	{r7, pc}

08022f4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022f4a:	b580      	push	{r7, lr}
 8022f4c:	b084      	sub	sp, #16
 8022f4e:	af00      	add	r7, sp, #0
 8022f50:	60f8      	str	r0, [r7, #12]
 8022f52:	60b9      	str	r1, [r7, #8]
 8022f54:	1dbb      	adds	r3, r7, #6
 8022f56:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022f58:	68fa      	ldr	r2, [r7, #12]
 8022f5a:	23a5      	movs	r3, #165	@ 0xa5
 8022f5c:	009b      	lsls	r3, r3, #2
 8022f5e:	2102      	movs	r1, #2
 8022f60:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022f62:	1dbb      	adds	r3, r7, #6
 8022f64:	881a      	ldrh	r2, [r3, #0]
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022f6a:	1dbb      	adds	r3, r7, #6
 8022f6c:	881a      	ldrh	r2, [r3, #0]
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022f72:	1dbb      	adds	r3, r7, #6
 8022f74:	881b      	ldrh	r3, [r3, #0]
 8022f76:	68ba      	ldr	r2, [r7, #8]
 8022f78:	68f8      	ldr	r0, [r7, #12]
 8022f7a:	2100      	movs	r1, #0
 8022f7c:	f000 fd4d 	bl	8023a1a <USBD_LL_Transmit>

  return USBD_OK;
 8022f80:	2300      	movs	r3, #0
}
 8022f82:	0018      	movs	r0, r3
 8022f84:	46bd      	mov	sp, r7
 8022f86:	b004      	add	sp, #16
 8022f88:	bd80      	pop	{r7, pc}

08022f8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022f8a:	b580      	push	{r7, lr}
 8022f8c:	b084      	sub	sp, #16
 8022f8e:	af00      	add	r7, sp, #0
 8022f90:	60f8      	str	r0, [r7, #12]
 8022f92:	60b9      	str	r1, [r7, #8]
 8022f94:	1dbb      	adds	r3, r7, #6
 8022f96:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022f98:	1dbb      	adds	r3, r7, #6
 8022f9a:	881b      	ldrh	r3, [r3, #0]
 8022f9c:	68ba      	ldr	r2, [r7, #8]
 8022f9e:	68f8      	ldr	r0, [r7, #12]
 8022fa0:	2100      	movs	r1, #0
 8022fa2:	f000 fd3a 	bl	8023a1a <USBD_LL_Transmit>

  return USBD_OK;
 8022fa6:	2300      	movs	r3, #0
}
 8022fa8:	0018      	movs	r0, r3
 8022faa:	46bd      	mov	sp, r7
 8022fac:	b004      	add	sp, #16
 8022fae:	bd80      	pop	{r7, pc}

08022fb0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022fb0:	b580      	push	{r7, lr}
 8022fb2:	b084      	sub	sp, #16
 8022fb4:	af00      	add	r7, sp, #0
 8022fb6:	60f8      	str	r0, [r7, #12]
 8022fb8:	60b9      	str	r1, [r7, #8]
 8022fba:	1dbb      	adds	r3, r7, #6
 8022fbc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022fbe:	68fa      	ldr	r2, [r7, #12]
 8022fc0:	23a5      	movs	r3, #165	@ 0xa5
 8022fc2:	009b      	lsls	r3, r3, #2
 8022fc4:	2103      	movs	r1, #3
 8022fc6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022fc8:	1dbb      	adds	r3, r7, #6
 8022fca:	8819      	ldrh	r1, [r3, #0]
 8022fcc:	68fa      	ldr	r2, [r7, #12]
 8022fce:	23ae      	movs	r3, #174	@ 0xae
 8022fd0:	005b      	lsls	r3, r3, #1
 8022fd2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022fd4:	1dbb      	adds	r3, r7, #6
 8022fd6:	8819      	ldrh	r1, [r3, #0]
 8022fd8:	68fa      	ldr	r2, [r7, #12]
 8022fda:	23b0      	movs	r3, #176	@ 0xb0
 8022fdc:	005b      	lsls	r3, r3, #1
 8022fde:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022fe0:	1dbb      	adds	r3, r7, #6
 8022fe2:	881b      	ldrh	r3, [r3, #0]
 8022fe4:	68ba      	ldr	r2, [r7, #8]
 8022fe6:	68f8      	ldr	r0, [r7, #12]
 8022fe8:	2100      	movs	r1, #0
 8022fea:	f000 fd4d 	bl	8023a88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022fee:	2300      	movs	r3, #0
}
 8022ff0:	0018      	movs	r0, r3
 8022ff2:	46bd      	mov	sp, r7
 8022ff4:	b004      	add	sp, #16
 8022ff6:	bd80      	pop	{r7, pc}

08022ff8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022ff8:	b580      	push	{r7, lr}
 8022ffa:	b084      	sub	sp, #16
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	60f8      	str	r0, [r7, #12]
 8023000:	60b9      	str	r1, [r7, #8]
 8023002:	1dbb      	adds	r3, r7, #6
 8023004:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8023006:	1dbb      	adds	r3, r7, #6
 8023008:	881b      	ldrh	r3, [r3, #0]
 802300a:	68ba      	ldr	r2, [r7, #8]
 802300c:	68f8      	ldr	r0, [r7, #12]
 802300e:	2100      	movs	r1, #0
 8023010:	f000 fd3a 	bl	8023a88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023014:	2300      	movs	r3, #0
}
 8023016:	0018      	movs	r0, r3
 8023018:	46bd      	mov	sp, r7
 802301a:	b004      	add	sp, #16
 802301c:	bd80      	pop	{r7, pc}

0802301e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802301e:	b580      	push	{r7, lr}
 8023020:	b082      	sub	sp, #8
 8023022:	af00      	add	r7, sp, #0
 8023024:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8023026:	687a      	ldr	r2, [r7, #4]
 8023028:	23a5      	movs	r3, #165	@ 0xa5
 802302a:	009b      	lsls	r3, r3, #2
 802302c:	2104      	movs	r1, #4
 802302e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8023030:	6878      	ldr	r0, [r7, #4]
 8023032:	2300      	movs	r3, #0
 8023034:	2200      	movs	r2, #0
 8023036:	2100      	movs	r1, #0
 8023038:	f000 fcef 	bl	8023a1a <USBD_LL_Transmit>

  return USBD_OK;
 802303c:	2300      	movs	r3, #0
}
 802303e:	0018      	movs	r0, r3
 8023040:	46bd      	mov	sp, r7
 8023042:	b002      	add	sp, #8
 8023044:	bd80      	pop	{r7, pc}

08023046 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8023046:	b580      	push	{r7, lr}
 8023048:	b082      	sub	sp, #8
 802304a:	af00      	add	r7, sp, #0
 802304c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802304e:	687a      	ldr	r2, [r7, #4]
 8023050:	23a5      	movs	r3, #165	@ 0xa5
 8023052:	009b      	lsls	r3, r3, #2
 8023054:	2105      	movs	r1, #5
 8023056:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8023058:	6878      	ldr	r0, [r7, #4]
 802305a:	2300      	movs	r3, #0
 802305c:	2200      	movs	r2, #0
 802305e:	2100      	movs	r1, #0
 8023060:	f000 fd12 	bl	8023a88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023064:	2300      	movs	r3, #0
}
 8023066:	0018      	movs	r0, r3
 8023068:	46bd      	mov	sp, r7
 802306a:	b002      	add	sp, #8
 802306c:	bd80      	pop	{r7, pc}
	...

08023070 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023070:	b580      	push	{r7, lr}
 8023072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8023074:	4914      	ldr	r1, [pc, #80]	@ (80230c8 <MX_USB_DEVICE_Init+0x58>)
 8023076:	4b15      	ldr	r3, [pc, #84]	@ (80230cc <MX_USB_DEVICE_Init+0x5c>)
 8023078:	2200      	movs	r2, #0
 802307a:	0018      	movs	r0, r3
 802307c:	f7fe fdec 	bl	8021c58 <USBD_Init>
 8023080:	1e03      	subs	r3, r0, #0
 8023082:	d001      	beq.n	8023088 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8023084:	f7ea f97e 	bl	800d384 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023088:	4a11      	ldr	r2, [pc, #68]	@ (80230d0 <MX_USB_DEVICE_Init+0x60>)
 802308a:	4b10      	ldr	r3, [pc, #64]	@ (80230cc <MX_USB_DEVICE_Init+0x5c>)
 802308c:	0011      	movs	r1, r2
 802308e:	0018      	movs	r0, r3
 8023090:	f7fe fe13 	bl	8021cba <USBD_RegisterClass>
 8023094:	1e03      	subs	r3, r0, #0
 8023096:	d001      	beq.n	802309c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8023098:	f7ea f974 	bl	800d384 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802309c:	4a0d      	ldr	r2, [pc, #52]	@ (80230d4 <MX_USB_DEVICE_Init+0x64>)
 802309e:	4b0b      	ldr	r3, [pc, #44]	@ (80230cc <MX_USB_DEVICE_Init+0x5c>)
 80230a0:	0011      	movs	r1, r2
 80230a2:	0018      	movs	r0, r3
 80230a4:	f7fe fd28 	bl	8021af8 <USBD_CDC_RegisterInterface>
 80230a8:	1e03      	subs	r3, r0, #0
 80230aa:	d001      	beq.n	80230b0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80230ac:	f7ea f96a 	bl	800d384 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80230b0:	4b06      	ldr	r3, [pc, #24]	@ (80230cc <MX_USB_DEVICE_Init+0x5c>)
 80230b2:	0018      	movs	r0, r3
 80230b4:	f7fe fe21 	bl	8021cfa <USBD_Start>
 80230b8:	1e03      	subs	r3, r0, #0
 80230ba:	d001      	beq.n	80230c0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80230bc:	f7ea f962 	bl	800d384 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80230c0:	46c0      	nop			@ (mov r8, r8)
 80230c2:	46bd      	mov	sp, r7
 80230c4:	bd80      	pop	{r7, pc}
 80230c6:	46c0      	nop			@ (mov r8, r8)
 80230c8:	20000224 	.word	0x20000224
 80230cc:	20002534 	.word	0x20002534
 80230d0:	20000110 	.word	0x20000110
 80230d4:	20000214 	.word	0x20000214

080230d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80230d8:	b580      	push	{r7, lr}
 80230da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80230dc:	4907      	ldr	r1, [pc, #28]	@ (80230fc <CDC_Init_FS+0x24>)
 80230de:	4b08      	ldr	r3, [pc, #32]	@ (8023100 <CDC_Init_FS+0x28>)
 80230e0:	2200      	movs	r2, #0
 80230e2:	0018      	movs	r0, r3
 80230e4:	f7fe fd23 	bl	8021b2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80230e8:	4a06      	ldr	r2, [pc, #24]	@ (8023104 <CDC_Init_FS+0x2c>)
 80230ea:	4b05      	ldr	r3, [pc, #20]	@ (8023100 <CDC_Init_FS+0x28>)
 80230ec:	0011      	movs	r1, r2
 80230ee:	0018      	movs	r0, r3
 80230f0:	f7fe fd39 	bl	8021b66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80230f4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80230f6:	0018      	movs	r0, r3
 80230f8:	46bd      	mov	sp, r7
 80230fa:	bd80      	pop	{r7, pc}
 80230fc:	20002cb8 	.word	0x20002cb8
 8023100:	20002534 	.word	0x20002534
 8023104:	200028b8 	.word	0x200028b8

08023108 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8023108:	b580      	push	{r7, lr}
 802310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802310c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802310e:	0018      	movs	r0, r3
 8023110:	46bd      	mov	sp, r7
 8023112:	bd80      	pop	{r7, pc}

08023114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	b084      	sub	sp, #16
 8023118:	af00      	add	r7, sp, #0
 802311a:	6039      	str	r1, [r7, #0]
 802311c:	0011      	movs	r1, r2
 802311e:	1dfb      	adds	r3, r7, #7
 8023120:	1c02      	adds	r2, r0, #0
 8023122:	701a      	strb	r2, [r3, #0]
 8023124:	1d3b      	adds	r3, r7, #4
 8023126:	1c0a      	adds	r2, r1, #0
 8023128:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802312a:	1dfb      	adds	r3, r7, #7
 802312c:	781b      	ldrb	r3, [r3, #0]
 802312e:	2b23      	cmp	r3, #35	@ 0x23
 8023130:	d810      	bhi.n	8023154 <CDC_Control_FS+0x40>
 8023132:	009a      	lsls	r2, r3, #2
 8023134:	4b0a      	ldr	r3, [pc, #40]	@ (8023160 <CDC_Control_FS+0x4c>)
 8023136:	18d3      	adds	r3, r2, r3
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 802313c:	683b      	ldr	r3, [r7, #0]
 802313e:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8023140:	68fb      	ldr	r3, [r7, #12]
 8023142:	885b      	ldrh	r3, [r3, #2]
 8023144:	001a      	movs	r2, r3
 8023146:	2301      	movs	r3, #1
 8023148:	4013      	ands	r3, r2
 802314a:	d001      	beq.n	8023150 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 802314c:	2302      	movs	r3, #2
 802314e:	e003      	b.n	8023158 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8023150:	2300      	movs	r3, #0
 8023152:	e001      	b.n	8023158 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8023154:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8023156:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8023158:	0018      	movs	r0, r3
 802315a:	46bd      	mov	sp, r7
 802315c:	b004      	add	sp, #16
 802315e:	bd80      	pop	{r7, pc}
 8023160:	0802e744 	.word	0x0802e744

08023164 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8023164:	b580      	push	{r7, lr}
 8023166:	b082      	sub	sp, #8
 8023168:	af00      	add	r7, sp, #0
 802316a:	6078      	str	r0, [r7, #4]
 802316c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 802316e:	4b12      	ldr	r3, [pc, #72]	@ (80231b8 <CDC_Receive_FS+0x54>)
 8023170:	781b      	ldrb	r3, [r3, #0]
 8023172:	2b00      	cmp	r3, #0
 8023174:	d013      	beq.n	802319e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8023176:	683b      	ldr	r3, [r7, #0]
 8023178:	681b      	ldr	r3, [r3, #0]
 802317a:	b29a      	uxth	r2, r3
 802317c:	2301      	movs	r3, #1
 802317e:	425b      	negs	r3, r3
 8023180:	6879      	ldr	r1, [r7, #4]
 8023182:	480e      	ldr	r0, [pc, #56]	@ (80231bc <CDC_Receive_FS+0x58>)
 8023184:	f7fa f942 	bl	801d40c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023188:	687a      	ldr	r2, [r7, #4]
 802318a:	4b0d      	ldr	r3, [pc, #52]	@ (80231c0 <CDC_Receive_FS+0x5c>)
 802318c:	0011      	movs	r1, r2
 802318e:	0018      	movs	r0, r3
 8023190:	f7fe fce9 	bl	8021b66 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023194:	4b0a      	ldr	r3, [pc, #40]	@ (80231c0 <CDC_Receive_FS+0x5c>)
 8023196:	0018      	movs	r0, r3
 8023198:	f7fe fd30 	bl	8021bfc <USBD_CDC_ReceivePacket>
 802319c:	e006      	b.n	80231ac <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 802319e:	683b      	ldr	r3, [r7, #0]
 80231a0:	681a      	ldr	r2, [r3, #0]
 80231a2:	4b08      	ldr	r3, [pc, #32]	@ (80231c4 <CDC_Receive_FS+0x60>)
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	18d2      	adds	r2, r2, r3
 80231a8:	4b06      	ldr	r3, [pc, #24]	@ (80231c4 <CDC_Receive_FS+0x60>)
 80231aa:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80231ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80231ae:	0018      	movs	r0, r3
 80231b0:	46bd      	mov	sp, r7
 80231b2:	b002      	add	sp, #8
 80231b4:	bd80      	pop	{r7, pc}
 80231b6:	46c0      	nop			@ (mov r8, r8)
 80231b8:	200027f8 	.word	0x200027f8
 80231bc:	200027fc 	.word	0x200027fc
 80231c0:	20002534 	.word	0x20002534
 80231c4:	200028b4 	.word	0x200028b4

080231c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80231c8:	b5b0      	push	{r4, r5, r7, lr}
 80231ca:	b084      	sub	sp, #16
 80231cc:	af00      	add	r7, sp, #0
 80231ce:	6078      	str	r0, [r7, #4]
 80231d0:	000a      	movs	r2, r1
 80231d2:	1cbb      	adds	r3, r7, #2
 80231d4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80231d6:	230f      	movs	r3, #15
 80231d8:	18fb      	adds	r3, r7, r3
 80231da:	2200      	movs	r2, #0
 80231dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80231de:	4a11      	ldr	r2, [pc, #68]	@ (8023224 <CDC_Transmit_FS+0x5c>)
 80231e0:	23ae      	movs	r3, #174	@ 0xae
 80231e2:	009b      	lsls	r3, r3, #2
 80231e4:	58d3      	ldr	r3, [r2, r3]
 80231e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80231e8:	68ba      	ldr	r2, [r7, #8]
 80231ea:	2385      	movs	r3, #133	@ 0x85
 80231ec:	009b      	lsls	r3, r3, #2
 80231ee:	58d3      	ldr	r3, [r2, r3]
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d001      	beq.n	80231f8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80231f4:	2301      	movs	r3, #1
 80231f6:	e010      	b.n	802321a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80231f8:	1cbb      	adds	r3, r7, #2
 80231fa:	881a      	ldrh	r2, [r3, #0]
 80231fc:	6879      	ldr	r1, [r7, #4]
 80231fe:	4b09      	ldr	r3, [pc, #36]	@ (8023224 <CDC_Transmit_FS+0x5c>)
 8023200:	0018      	movs	r0, r3
 8023202:	f7fe fc94 	bl	8021b2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8023206:	250f      	movs	r5, #15
 8023208:	197c      	adds	r4, r7, r5
 802320a:	4b06      	ldr	r3, [pc, #24]	@ (8023224 <CDC_Transmit_FS+0x5c>)
 802320c:	0018      	movs	r0, r3
 802320e:	f7fe fcbe 	bl	8021b8e <USBD_CDC_TransmitPacket>
 8023212:	0003      	movs	r3, r0
 8023214:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8023216:	197b      	adds	r3, r7, r5
 8023218:	781b      	ldrb	r3, [r3, #0]
}
 802321a:	0018      	movs	r0, r3
 802321c:	46bd      	mov	sp, r7
 802321e:	b004      	add	sp, #16
 8023220:	bdb0      	pop	{r4, r5, r7, pc}
 8023222:	46c0      	nop			@ (mov r8, r8)
 8023224:	20002534 	.word	0x20002534

08023228 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8023228:	b580      	push	{r7, lr}
 802322a:	af00      	add	r7, sp, #0
  ESPProg = true;
 802322c:	4b02      	ldr	r3, [pc, #8]	@ (8023238 <EnableESPProg+0x10>)
 802322e:	2201      	movs	r2, #1
 8023230:	701a      	strb	r2, [r3, #0]
}
 8023232:	46c0      	nop			@ (mov r8, r8)
 8023234:	46bd      	mov	sp, r7
 8023236:	bd80      	pop	{r7, pc}
 8023238:	200027f8 	.word	0x200027f8

0802323c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 802323c:	b580      	push	{r7, lr}
 802323e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8023240:	4b01      	ldr	r3, [pc, #4]	@ (8023248 <GetUsbRxPointer+0xc>)
}
 8023242:	0018      	movs	r0, r3
 8023244:	46bd      	mov	sp, r7
 8023246:	bd80      	pop	{r7, pc}
 8023248:	200028b8 	.word	0x200028b8

0802324c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 802324c:	b580      	push	{r7, lr}
 802324e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8023250:	4b07      	ldr	r3, [pc, #28]	@ (8023270 <ResetUsbRxDataSize+0x24>)
 8023252:	2200      	movs	r2, #0
 8023254:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8023256:	4a07      	ldr	r2, [pc, #28]	@ (8023274 <ResetUsbRxDataSize+0x28>)
 8023258:	4b07      	ldr	r3, [pc, #28]	@ (8023278 <ResetUsbRxDataSize+0x2c>)
 802325a:	0011      	movs	r1, r2
 802325c:	0018      	movs	r0, r3
 802325e:	f7fe fc82 	bl	8021b66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023262:	4b05      	ldr	r3, [pc, #20]	@ (8023278 <ResetUsbRxDataSize+0x2c>)
 8023264:	0018      	movs	r0, r3
 8023266:	f7fe fcc9 	bl	8021bfc <USBD_CDC_ReceivePacket>
}
 802326a:	46c0      	nop			@ (mov r8, r8)
 802326c:	46bd      	mov	sp, r7
 802326e:	bd80      	pop	{r7, pc}
 8023270:	200028b4 	.word	0x200028b4
 8023274:	200028b8 	.word	0x200028b8
 8023278:	20002534 	.word	0x20002534

0802327c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 802327c:	b580      	push	{r7, lr}
 802327e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023280:	4b02      	ldr	r3, [pc, #8]	@ (802328c <GetUsbRxDataSize+0x10>)
 8023282:	681b      	ldr	r3, [r3, #0]
}
 8023284:	0018      	movs	r0, r3
 8023286:	46bd      	mov	sp, r7
 8023288:	bd80      	pop	{r7, pc}
 802328a:	46c0      	nop			@ (mov r8, r8)
 802328c:	200028b4 	.word	0x200028b4

08023290 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023290:	b580      	push	{r7, lr}
 8023292:	b082      	sub	sp, #8
 8023294:	af00      	add	r7, sp, #0
 8023296:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8023298:	687a      	ldr	r2, [r7, #4]
 802329a:	4b07      	ldr	r3, [pc, #28]	@ (80232b8 <GetUsbRxNextChunk+0x28>)
 802329c:	18d2      	adds	r2, r2, r3
 802329e:	4b07      	ldr	r3, [pc, #28]	@ (80232bc <GetUsbRxNextChunk+0x2c>)
 80232a0:	0011      	movs	r1, r2
 80232a2:	0018      	movs	r0, r3
 80232a4:	f7fe fc5f 	bl	8021b66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80232a8:	4b04      	ldr	r3, [pc, #16]	@ (80232bc <GetUsbRxNextChunk+0x2c>)
 80232aa:	0018      	movs	r0, r3
 80232ac:	f7fe fca6 	bl	8021bfc <USBD_CDC_ReceivePacket>
}
 80232b0:	46c0      	nop			@ (mov r8, r8)
 80232b2:	46bd      	mov	sp, r7
 80232b4:	b002      	add	sp, #8
 80232b6:	bd80      	pop	{r7, pc}
 80232b8:	200028b8 	.word	0x200028b8
 80232bc:	20002534 	.word	0x20002534

080232c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80232c0:	b580      	push	{r7, lr}
 80232c2:	b082      	sub	sp, #8
 80232c4:	af00      	add	r7, sp, #0
 80232c6:	0002      	movs	r2, r0
 80232c8:	6039      	str	r1, [r7, #0]
 80232ca:	1dfb      	adds	r3, r7, #7
 80232cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80232ce:	683b      	ldr	r3, [r7, #0]
 80232d0:	2212      	movs	r2, #18
 80232d2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80232d4:	4b02      	ldr	r3, [pc, #8]	@ (80232e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80232d6:	0018      	movs	r0, r3
 80232d8:	46bd      	mov	sp, r7
 80232da:	b002      	add	sp, #8
 80232dc:	bd80      	pop	{r7, pc}
 80232de:	46c0      	nop			@ (mov r8, r8)
 80232e0:	20000240 	.word	0x20000240

080232e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80232e4:	b580      	push	{r7, lr}
 80232e6:	b082      	sub	sp, #8
 80232e8:	af00      	add	r7, sp, #0
 80232ea:	0002      	movs	r2, r0
 80232ec:	6039      	str	r1, [r7, #0]
 80232ee:	1dfb      	adds	r3, r7, #7
 80232f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80232f2:	683b      	ldr	r3, [r7, #0]
 80232f4:	2204      	movs	r2, #4
 80232f6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80232f8:	4b02      	ldr	r3, [pc, #8]	@ (8023304 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80232fa:	0018      	movs	r0, r3
 80232fc:	46bd      	mov	sp, r7
 80232fe:	b002      	add	sp, #8
 8023300:	bd80      	pop	{r7, pc}
 8023302:	46c0      	nop			@ (mov r8, r8)
 8023304:	20000254 	.word	0x20000254

08023308 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023308:	b580      	push	{r7, lr}
 802330a:	b082      	sub	sp, #8
 802330c:	af00      	add	r7, sp, #0
 802330e:	0002      	movs	r2, r0
 8023310:	6039      	str	r1, [r7, #0]
 8023312:	1dfb      	adds	r3, r7, #7
 8023314:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8023316:	1dfb      	adds	r3, r7, #7
 8023318:	781b      	ldrb	r3, [r3, #0]
 802331a:	2b00      	cmp	r3, #0
 802331c:	d106      	bne.n	802332c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802331e:	683a      	ldr	r2, [r7, #0]
 8023320:	4908      	ldr	r1, [pc, #32]	@ (8023344 <USBD_FS_ProductStrDescriptor+0x3c>)
 8023322:	4b09      	ldr	r3, [pc, #36]	@ (8023348 <USBD_FS_ProductStrDescriptor+0x40>)
 8023324:	0018      	movs	r0, r3
 8023326:	f7ff fda5 	bl	8022e74 <USBD_GetString>
 802332a:	e005      	b.n	8023338 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802332c:	683a      	ldr	r2, [r7, #0]
 802332e:	4905      	ldr	r1, [pc, #20]	@ (8023344 <USBD_FS_ProductStrDescriptor+0x3c>)
 8023330:	4b05      	ldr	r3, [pc, #20]	@ (8023348 <USBD_FS_ProductStrDescriptor+0x40>)
 8023332:	0018      	movs	r0, r3
 8023334:	f7ff fd9e 	bl	8022e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023338:	4b02      	ldr	r3, [pc, #8]	@ (8023344 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 802333a:	0018      	movs	r0, r3
 802333c:	46bd      	mov	sp, r7
 802333e:	b002      	add	sp, #8
 8023340:	bd80      	pop	{r7, pc}
 8023342:	46c0      	nop			@ (mov r8, r8)
 8023344:	200030b8 	.word	0x200030b8
 8023348:	0802dde4 	.word	0x0802dde4

0802334c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802334c:	b580      	push	{r7, lr}
 802334e:	b082      	sub	sp, #8
 8023350:	af00      	add	r7, sp, #0
 8023352:	0002      	movs	r2, r0
 8023354:	6039      	str	r1, [r7, #0]
 8023356:	1dfb      	adds	r3, r7, #7
 8023358:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802335a:	683a      	ldr	r2, [r7, #0]
 802335c:	4904      	ldr	r1, [pc, #16]	@ (8023370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802335e:	4b05      	ldr	r3, [pc, #20]	@ (8023374 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8023360:	0018      	movs	r0, r3
 8023362:	f7ff fd87 	bl	8022e74 <USBD_GetString>
  return USBD_StrDesc;
 8023366:	4b02      	ldr	r3, [pc, #8]	@ (8023370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8023368:	0018      	movs	r0, r3
 802336a:	46bd      	mov	sp, r7
 802336c:	b002      	add	sp, #8
 802336e:	bd80      	pop	{r7, pc}
 8023370:	200030b8 	.word	0x200030b8
 8023374:	0802ddfc 	.word	0x0802ddfc

08023378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023378:	b580      	push	{r7, lr}
 802337a:	b082      	sub	sp, #8
 802337c:	af00      	add	r7, sp, #0
 802337e:	0002      	movs	r2, r0
 8023380:	6039      	str	r1, [r7, #0]
 8023382:	1dfb      	adds	r3, r7, #7
 8023384:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8023386:	683b      	ldr	r3, [r7, #0]
 8023388:	221a      	movs	r2, #26
 802338a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802338c:	f000 f84c 	bl	8023428 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023390:	4b02      	ldr	r3, [pc, #8]	@ (802339c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8023392:	0018      	movs	r0, r3
 8023394:	46bd      	mov	sp, r7
 8023396:	b002      	add	sp, #8
 8023398:	bd80      	pop	{r7, pc}
 802339a:	46c0      	nop			@ (mov r8, r8)
 802339c:	20000258 	.word	0x20000258

080233a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b082      	sub	sp, #8
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	0002      	movs	r2, r0
 80233a8:	6039      	str	r1, [r7, #0]
 80233aa:	1dfb      	adds	r3, r7, #7
 80233ac:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80233ae:	1dfb      	adds	r3, r7, #7
 80233b0:	781b      	ldrb	r3, [r3, #0]
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d106      	bne.n	80233c4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80233b6:	683a      	ldr	r2, [r7, #0]
 80233b8:	4908      	ldr	r1, [pc, #32]	@ (80233dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80233ba:	4b09      	ldr	r3, [pc, #36]	@ (80233e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80233bc:	0018      	movs	r0, r3
 80233be:	f7ff fd59 	bl	8022e74 <USBD_GetString>
 80233c2:	e005      	b.n	80233d0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80233c4:	683a      	ldr	r2, [r7, #0]
 80233c6:	4905      	ldr	r1, [pc, #20]	@ (80233dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80233c8:	4b05      	ldr	r3, [pc, #20]	@ (80233e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80233ca:	0018      	movs	r0, r3
 80233cc:	f7ff fd52 	bl	8022e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80233d0:	4b02      	ldr	r3, [pc, #8]	@ (80233dc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80233d2:	0018      	movs	r0, r3
 80233d4:	46bd      	mov	sp, r7
 80233d6:	b002      	add	sp, #8
 80233d8:	bd80      	pop	{r7, pc}
 80233da:	46c0      	nop			@ (mov r8, r8)
 80233dc:	200030b8 	.word	0x200030b8
 80233e0:	0802de10 	.word	0x0802de10

080233e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233e4:	b580      	push	{r7, lr}
 80233e6:	b082      	sub	sp, #8
 80233e8:	af00      	add	r7, sp, #0
 80233ea:	0002      	movs	r2, r0
 80233ec:	6039      	str	r1, [r7, #0]
 80233ee:	1dfb      	adds	r3, r7, #7
 80233f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80233f2:	1dfb      	adds	r3, r7, #7
 80233f4:	781b      	ldrb	r3, [r3, #0]
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	d106      	bne.n	8023408 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80233fa:	683a      	ldr	r2, [r7, #0]
 80233fc:	4908      	ldr	r1, [pc, #32]	@ (8023420 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80233fe:	4b09      	ldr	r3, [pc, #36]	@ (8023424 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023400:	0018      	movs	r0, r3
 8023402:	f7ff fd37 	bl	8022e74 <USBD_GetString>
 8023406:	e005      	b.n	8023414 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023408:	683a      	ldr	r2, [r7, #0]
 802340a:	4905      	ldr	r1, [pc, #20]	@ (8023420 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 802340c:	4b05      	ldr	r3, [pc, #20]	@ (8023424 <USBD_FS_InterfaceStrDescriptor+0x40>)
 802340e:	0018      	movs	r0, r3
 8023410:	f7ff fd30 	bl	8022e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023414:	4b02      	ldr	r3, [pc, #8]	@ (8023420 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8023416:	0018      	movs	r0, r3
 8023418:	46bd      	mov	sp, r7
 802341a:	b002      	add	sp, #8
 802341c:	bd80      	pop	{r7, pc}
 802341e:	46c0      	nop			@ (mov r8, r8)
 8023420:	200030b8 	.word	0x200030b8
 8023424:	0802de1c 	.word	0x0802de1c

08023428 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023428:	b580      	push	{r7, lr}
 802342a:	b084      	sub	sp, #16
 802342c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802342e:	4b10      	ldr	r3, [pc, #64]	@ (8023470 <Get_SerialNum+0x48>)
 8023430:	681b      	ldr	r3, [r3, #0]
 8023432:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023434:	4b0f      	ldr	r3, [pc, #60]	@ (8023474 <Get_SerialNum+0x4c>)
 8023436:	681b      	ldr	r3, [r3, #0]
 8023438:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802343a:	4b0f      	ldr	r3, [pc, #60]	@ (8023478 <Get_SerialNum+0x50>)
 802343c:	681b      	ldr	r3, [r3, #0]
 802343e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8023440:	68fa      	ldr	r2, [r7, #12]
 8023442:	687b      	ldr	r3, [r7, #4]
 8023444:	18d3      	adds	r3, r2, r3
 8023446:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8023448:	68fb      	ldr	r3, [r7, #12]
 802344a:	2b00      	cmp	r3, #0
 802344c:	d00b      	beq.n	8023466 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802344e:	490b      	ldr	r1, [pc, #44]	@ (802347c <Get_SerialNum+0x54>)
 8023450:	68fb      	ldr	r3, [r7, #12]
 8023452:	2208      	movs	r2, #8
 8023454:	0018      	movs	r0, r3
 8023456:	f000 f815 	bl	8023484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802345a:	4909      	ldr	r1, [pc, #36]	@ (8023480 <Get_SerialNum+0x58>)
 802345c:	68bb      	ldr	r3, [r7, #8]
 802345e:	2204      	movs	r2, #4
 8023460:	0018      	movs	r0, r3
 8023462:	f000 f80f 	bl	8023484 <IntToUnicode>
  }
}
 8023466:	46c0      	nop			@ (mov r8, r8)
 8023468:	46bd      	mov	sp, r7
 802346a:	b004      	add	sp, #16
 802346c:	bd80      	pop	{r7, pc}
 802346e:	46c0      	nop			@ (mov r8, r8)
 8023470:	1ff80050 	.word	0x1ff80050
 8023474:	1ff80054 	.word	0x1ff80054
 8023478:	1ff80058 	.word	0x1ff80058
 802347c:	2000025a 	.word	0x2000025a
 8023480:	2000026a 	.word	0x2000026a

08023484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8023484:	b580      	push	{r7, lr}
 8023486:	b086      	sub	sp, #24
 8023488:	af00      	add	r7, sp, #0
 802348a:	60f8      	str	r0, [r7, #12]
 802348c:	60b9      	str	r1, [r7, #8]
 802348e:	1dfb      	adds	r3, r7, #7
 8023490:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8023492:	2117      	movs	r1, #23
 8023494:	187b      	adds	r3, r7, r1
 8023496:	2200      	movs	r2, #0
 8023498:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802349a:	187b      	adds	r3, r7, r1
 802349c:	2200      	movs	r2, #0
 802349e:	701a      	strb	r2, [r3, #0]
 80234a0:	e02f      	b.n	8023502 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80234a2:	68fb      	ldr	r3, [r7, #12]
 80234a4:	0f1b      	lsrs	r3, r3, #28
 80234a6:	2b09      	cmp	r3, #9
 80234a8:	d80d      	bhi.n	80234c6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80234aa:	68fb      	ldr	r3, [r7, #12]
 80234ac:	0f1b      	lsrs	r3, r3, #28
 80234ae:	b2da      	uxtb	r2, r3
 80234b0:	2317      	movs	r3, #23
 80234b2:	18fb      	adds	r3, r7, r3
 80234b4:	781b      	ldrb	r3, [r3, #0]
 80234b6:	005b      	lsls	r3, r3, #1
 80234b8:	0019      	movs	r1, r3
 80234ba:	68bb      	ldr	r3, [r7, #8]
 80234bc:	185b      	adds	r3, r3, r1
 80234be:	3230      	adds	r2, #48	@ 0x30
 80234c0:	b2d2      	uxtb	r2, r2
 80234c2:	701a      	strb	r2, [r3, #0]
 80234c4:	e00c      	b.n	80234e0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80234c6:	68fb      	ldr	r3, [r7, #12]
 80234c8:	0f1b      	lsrs	r3, r3, #28
 80234ca:	b2da      	uxtb	r2, r3
 80234cc:	2317      	movs	r3, #23
 80234ce:	18fb      	adds	r3, r7, r3
 80234d0:	781b      	ldrb	r3, [r3, #0]
 80234d2:	005b      	lsls	r3, r3, #1
 80234d4:	0019      	movs	r1, r3
 80234d6:	68bb      	ldr	r3, [r7, #8]
 80234d8:	185b      	adds	r3, r3, r1
 80234da:	3237      	adds	r2, #55	@ 0x37
 80234dc:	b2d2      	uxtb	r2, r2
 80234de:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80234e0:	68fb      	ldr	r3, [r7, #12]
 80234e2:	011b      	lsls	r3, r3, #4
 80234e4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80234e6:	2117      	movs	r1, #23
 80234e8:	187b      	adds	r3, r7, r1
 80234ea:	781b      	ldrb	r3, [r3, #0]
 80234ec:	005b      	lsls	r3, r3, #1
 80234ee:	3301      	adds	r3, #1
 80234f0:	68ba      	ldr	r2, [r7, #8]
 80234f2:	18d3      	adds	r3, r2, r3
 80234f4:	2200      	movs	r2, #0
 80234f6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80234f8:	187b      	adds	r3, r7, r1
 80234fa:	781a      	ldrb	r2, [r3, #0]
 80234fc:	187b      	adds	r3, r7, r1
 80234fe:	3201      	adds	r2, #1
 8023500:	701a      	strb	r2, [r3, #0]
 8023502:	2317      	movs	r3, #23
 8023504:	18fa      	adds	r2, r7, r3
 8023506:	1dfb      	adds	r3, r7, #7
 8023508:	7812      	ldrb	r2, [r2, #0]
 802350a:	781b      	ldrb	r3, [r3, #0]
 802350c:	429a      	cmp	r2, r3
 802350e:	d3c8      	bcc.n	80234a2 <IntToUnicode+0x1e>
  }
}
 8023510:	46c0      	nop			@ (mov r8, r8)
 8023512:	46c0      	nop			@ (mov r8, r8)
 8023514:	46bd      	mov	sp, r7
 8023516:	b006      	add	sp, #24
 8023518:	bd80      	pop	{r7, pc}
	...

0802351c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802351c:	b580      	push	{r7, lr}
 802351e:	b082      	sub	sp, #8
 8023520:	af00      	add	r7, sp, #0
 8023522:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	4a0a      	ldr	r2, [pc, #40]	@ (8023554 <HAL_PCD_MspInit+0x38>)
 802352a:	4293      	cmp	r3, r2
 802352c:	d10e      	bne.n	802354c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 802352e:	4b0a      	ldr	r3, [pc, #40]	@ (8023558 <HAL_PCD_MspInit+0x3c>)
 8023530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8023532:	4b09      	ldr	r3, [pc, #36]	@ (8023558 <HAL_PCD_MspInit+0x3c>)
 8023534:	2180      	movs	r1, #128	@ 0x80
 8023536:	0409      	lsls	r1, r1, #16
 8023538:	430a      	orrs	r2, r1
 802353a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 802353c:	2200      	movs	r2, #0
 802353e:	2100      	movs	r1, #0
 8023540:	201f      	movs	r0, #31
 8023542:	f7f1 fe31 	bl	80151a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8023546:	201f      	movs	r0, #31
 8023548:	f7f1 fe43 	bl	80151d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 802354c:	46c0      	nop			@ (mov r8, r8)
 802354e:	46bd      	mov	sp, r7
 8023550:	b002      	add	sp, #8
 8023552:	bd80      	pop	{r7, pc}
 8023554:	40005c00 	.word	0x40005c00
 8023558:	40021000 	.word	0x40021000

0802355c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802355c:	b580      	push	{r7, lr}
 802355e:	b082      	sub	sp, #8
 8023560:	af00      	add	r7, sp, #0
 8023562:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023564:	687a      	ldr	r2, [r7, #4]
 8023566:	23bc      	movs	r3, #188	@ 0xbc
 8023568:	009b      	lsls	r3, r3, #2
 802356a:	58d2      	ldr	r2, [r2, r3]
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	21ac      	movs	r1, #172	@ 0xac
 8023570:	0089      	lsls	r1, r1, #2
 8023572:	468c      	mov	ip, r1
 8023574:	4463      	add	r3, ip
 8023576:	0019      	movs	r1, r3
 8023578:	0010      	movs	r0, r2
 802357a:	f7fe fc11 	bl	8021da0 <USBD_LL_SetupStage>
}
 802357e:	46c0      	nop			@ (mov r8, r8)
 8023580:	46bd      	mov	sp, r7
 8023582:	b002      	add	sp, #8
 8023584:	bd80      	pop	{r7, pc}

08023586 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023586:	b590      	push	{r4, r7, lr}
 8023588:	b083      	sub	sp, #12
 802358a:	af00      	add	r7, sp, #0
 802358c:	6078      	str	r0, [r7, #4]
 802358e:	000a      	movs	r2, r1
 8023590:	1cfb      	adds	r3, r7, #3
 8023592:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023594:	687a      	ldr	r2, [r7, #4]
 8023596:	23bc      	movs	r3, #188	@ 0xbc
 8023598:	009b      	lsls	r3, r3, #2
 802359a:	58d4      	ldr	r4, [r2, r3]
 802359c:	1cfb      	adds	r3, r7, #3
 802359e:	781a      	ldrb	r2, [r3, #0]
 80235a0:	6878      	ldr	r0, [r7, #4]
 80235a2:	23be      	movs	r3, #190	@ 0xbe
 80235a4:	0059      	lsls	r1, r3, #1
 80235a6:	0013      	movs	r3, r2
 80235a8:	009b      	lsls	r3, r3, #2
 80235aa:	189b      	adds	r3, r3, r2
 80235ac:	00db      	lsls	r3, r3, #3
 80235ae:	18c3      	adds	r3, r0, r3
 80235b0:	185b      	adds	r3, r3, r1
 80235b2:	681a      	ldr	r2, [r3, #0]
 80235b4:	1cfb      	adds	r3, r7, #3
 80235b6:	781b      	ldrb	r3, [r3, #0]
 80235b8:	0019      	movs	r1, r3
 80235ba:	0020      	movs	r0, r4
 80235bc:	f7fe fc4e 	bl	8021e5c <USBD_LL_DataOutStage>
}
 80235c0:	46c0      	nop			@ (mov r8, r8)
 80235c2:	46bd      	mov	sp, r7
 80235c4:	b003      	add	sp, #12
 80235c6:	bd90      	pop	{r4, r7, pc}

080235c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80235c8:	b580      	push	{r7, lr}
 80235ca:	b082      	sub	sp, #8
 80235cc:	af00      	add	r7, sp, #0
 80235ce:	6078      	str	r0, [r7, #4]
 80235d0:	000a      	movs	r2, r1
 80235d2:	1cfb      	adds	r3, r7, #3
 80235d4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80235d6:	687a      	ldr	r2, [r7, #4]
 80235d8:	23bc      	movs	r3, #188	@ 0xbc
 80235da:	009b      	lsls	r3, r3, #2
 80235dc:	58d0      	ldr	r0, [r2, r3]
 80235de:	1cfb      	adds	r3, r7, #3
 80235e0:	781a      	ldrb	r2, [r3, #0]
 80235e2:	6879      	ldr	r1, [r7, #4]
 80235e4:	0013      	movs	r3, r2
 80235e6:	009b      	lsls	r3, r3, #2
 80235e8:	189b      	adds	r3, r3, r2
 80235ea:	00db      	lsls	r3, r3, #3
 80235ec:	18cb      	adds	r3, r1, r3
 80235ee:	333c      	adds	r3, #60	@ 0x3c
 80235f0:	681a      	ldr	r2, [r3, #0]
 80235f2:	1cfb      	adds	r3, r7, #3
 80235f4:	781b      	ldrb	r3, [r3, #0]
 80235f6:	0019      	movs	r1, r3
 80235f8:	f7fe fcb2 	bl	8021f60 <USBD_LL_DataInStage>
}
 80235fc:	46c0      	nop			@ (mov r8, r8)
 80235fe:	46bd      	mov	sp, r7
 8023600:	b002      	add	sp, #8
 8023602:	bd80      	pop	{r7, pc}

08023604 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023604:	b580      	push	{r7, lr}
 8023606:	b082      	sub	sp, #8
 8023608:	af00      	add	r7, sp, #0
 802360a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802360c:	687a      	ldr	r2, [r7, #4]
 802360e:	23bc      	movs	r3, #188	@ 0xbc
 8023610:	009b      	lsls	r3, r3, #2
 8023612:	58d3      	ldr	r3, [r2, r3]
 8023614:	0018      	movs	r0, r3
 8023616:	f7fe fde9 	bl	80221ec <USBD_LL_SOF>
}
 802361a:	46c0      	nop			@ (mov r8, r8)
 802361c:	46bd      	mov	sp, r7
 802361e:	b002      	add	sp, #8
 8023620:	bd80      	pop	{r7, pc}

08023622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023622:	b580      	push	{r7, lr}
 8023624:	b084      	sub	sp, #16
 8023626:	af00      	add	r7, sp, #0
 8023628:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802362a:	230f      	movs	r3, #15
 802362c:	18fb      	adds	r3, r7, r3
 802362e:	2201      	movs	r2, #1
 8023630:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	689b      	ldr	r3, [r3, #8]
 8023636:	2b02      	cmp	r3, #2
 8023638:	d001      	beq.n	802363e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 802363a:	f7e9 fea3 	bl	800d384 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802363e:	687a      	ldr	r2, [r7, #4]
 8023640:	23bc      	movs	r3, #188	@ 0xbc
 8023642:	009b      	lsls	r3, r3, #2
 8023644:	58d2      	ldr	r2, [r2, r3]
 8023646:	230f      	movs	r3, #15
 8023648:	18fb      	adds	r3, r7, r3
 802364a:	781b      	ldrb	r3, [r3, #0]
 802364c:	0019      	movs	r1, r3
 802364e:	0010      	movs	r0, r2
 8023650:	f7fe fd8b 	bl	802216a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023654:	687a      	ldr	r2, [r7, #4]
 8023656:	23bc      	movs	r3, #188	@ 0xbc
 8023658:	009b      	lsls	r3, r3, #2
 802365a:	58d3      	ldr	r3, [r2, r3]
 802365c:	0018      	movs	r0, r3
 802365e:	f7fe fd3c 	bl	80220da <USBD_LL_Reset>
}
 8023662:	46c0      	nop			@ (mov r8, r8)
 8023664:	46bd      	mov	sp, r7
 8023666:	b004      	add	sp, #16
 8023668:	bd80      	pop	{r7, pc}
	...

0802366c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802366c:	b580      	push	{r7, lr}
 802366e:	b082      	sub	sp, #8
 8023670:	af00      	add	r7, sp, #0
 8023672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023674:	687a      	ldr	r2, [r7, #4]
 8023676:	23bc      	movs	r3, #188	@ 0xbc
 8023678:	009b      	lsls	r3, r3, #2
 802367a:	58d3      	ldr	r3, [r2, r3]
 802367c:	0018      	movs	r0, r3
 802367e:	f7fe fd85 	bl	802218c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	699b      	ldr	r3, [r3, #24]
 8023686:	2b00      	cmp	r3, #0
 8023688:	d005      	beq.n	8023696 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802368a:	4b05      	ldr	r3, [pc, #20]	@ (80236a0 <HAL_PCD_SuspendCallback+0x34>)
 802368c:	691a      	ldr	r2, [r3, #16]
 802368e:	4b04      	ldr	r3, [pc, #16]	@ (80236a0 <HAL_PCD_SuspendCallback+0x34>)
 8023690:	2106      	movs	r1, #6
 8023692:	430a      	orrs	r2, r1
 8023694:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8023696:	46c0      	nop			@ (mov r8, r8)
 8023698:	46bd      	mov	sp, r7
 802369a:	b002      	add	sp, #8
 802369c:	bd80      	pop	{r7, pc}
 802369e:	46c0      	nop			@ (mov r8, r8)
 80236a0:	e000ed00 	.word	0xe000ed00

080236a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80236a4:	b580      	push	{r7, lr}
 80236a6:	b082      	sub	sp, #8
 80236a8:	af00      	add	r7, sp, #0
 80236aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80236ac:	687b      	ldr	r3, [r7, #4]
 80236ae:	699b      	ldr	r3, [r3, #24]
 80236b0:	2b00      	cmp	r3, #0
 80236b2:	d007      	beq.n	80236c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80236b4:	4b09      	ldr	r3, [pc, #36]	@ (80236dc <HAL_PCD_ResumeCallback+0x38>)
 80236b6:	691a      	ldr	r2, [r3, #16]
 80236b8:	4b08      	ldr	r3, [pc, #32]	@ (80236dc <HAL_PCD_ResumeCallback+0x38>)
 80236ba:	2106      	movs	r1, #6
 80236bc:	438a      	bics	r2, r1
 80236be:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80236c0:	f000 fa44 	bl	8023b4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80236c4:	687a      	ldr	r2, [r7, #4]
 80236c6:	23bc      	movs	r3, #188	@ 0xbc
 80236c8:	009b      	lsls	r3, r3, #2
 80236ca:	58d3      	ldr	r3, [r2, r3]
 80236cc:	0018      	movs	r0, r3
 80236ce:	f7fe fd75 	bl	80221bc <USBD_LL_Resume>
}
 80236d2:	46c0      	nop			@ (mov r8, r8)
 80236d4:	46bd      	mov	sp, r7
 80236d6:	b002      	add	sp, #8
 80236d8:	bd80      	pop	{r7, pc}
 80236da:	46c0      	nop			@ (mov r8, r8)
 80236dc:	e000ed00 	.word	0xe000ed00

080236e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b082      	sub	sp, #8
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80236e8:	4a2d      	ldr	r2, [pc, #180]	@ (80237a0 <USBD_LL_Init+0xc0>)
 80236ea:	23bc      	movs	r3, #188	@ 0xbc
 80236ec:	009b      	lsls	r3, r3, #2
 80236ee:	6879      	ldr	r1, [r7, #4]
 80236f0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80236f2:	687a      	ldr	r2, [r7, #4]
 80236f4:	23b0      	movs	r3, #176	@ 0xb0
 80236f6:	009b      	lsls	r3, r3, #2
 80236f8:	4929      	ldr	r1, [pc, #164]	@ (80237a0 <USBD_LL_Init+0xc0>)
 80236fa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80236fc:	4b28      	ldr	r3, [pc, #160]	@ (80237a0 <USBD_LL_Init+0xc0>)
 80236fe:	4a29      	ldr	r2, [pc, #164]	@ (80237a4 <USBD_LL_Init+0xc4>)
 8023700:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8023702:	4b27      	ldr	r3, [pc, #156]	@ (80237a0 <USBD_LL_Init+0xc0>)
 8023704:	2208      	movs	r2, #8
 8023706:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8023708:	4b25      	ldr	r3, [pc, #148]	@ (80237a0 <USBD_LL_Init+0xc0>)
 802370a:	2202      	movs	r2, #2
 802370c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802370e:	4b24      	ldr	r3, [pc, #144]	@ (80237a0 <USBD_LL_Init+0xc0>)
 8023710:	2202      	movs	r2, #2
 8023712:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8023714:	4b22      	ldr	r3, [pc, #136]	@ (80237a0 <USBD_LL_Init+0xc0>)
 8023716:	2200      	movs	r2, #0
 8023718:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 802371a:	4b21      	ldr	r3, [pc, #132]	@ (80237a0 <USBD_LL_Init+0xc0>)
 802371c:	2200      	movs	r2, #0
 802371e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8023720:	4b1f      	ldr	r3, [pc, #124]	@ (80237a0 <USBD_LL_Init+0xc0>)
 8023722:	2200      	movs	r2, #0
 8023724:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8023726:	4b1e      	ldr	r3, [pc, #120]	@ (80237a0 <USBD_LL_Init+0xc0>)
 8023728:	0018      	movs	r0, r3
 802372a:	f7f5 fe89 	bl	8019440 <HAL_PCD_Init>
 802372e:	1e03      	subs	r3, r0, #0
 8023730:	d001      	beq.n	8023736 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8023732:	f7e9 fe27 	bl	800d384 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8023736:	687a      	ldr	r2, [r7, #4]
 8023738:	23b0      	movs	r3, #176	@ 0xb0
 802373a:	009b      	lsls	r3, r3, #2
 802373c:	58d0      	ldr	r0, [r2, r3]
 802373e:	2318      	movs	r3, #24
 8023740:	2200      	movs	r2, #0
 8023742:	2100      	movs	r1, #0
 8023744:	f7f7 fc4a 	bl	801afdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8023748:	687a      	ldr	r2, [r7, #4]
 802374a:	23b0      	movs	r3, #176	@ 0xb0
 802374c:	009b      	lsls	r3, r3, #2
 802374e:	58d0      	ldr	r0, [r2, r3]
 8023750:	2358      	movs	r3, #88	@ 0x58
 8023752:	2200      	movs	r2, #0
 8023754:	2180      	movs	r1, #128	@ 0x80
 8023756:	f7f7 fc41 	bl	801afdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802375a:	687a      	ldr	r2, [r7, #4]
 802375c:	23b0      	movs	r3, #176	@ 0xb0
 802375e:	009b      	lsls	r3, r3, #2
 8023760:	58d0      	ldr	r0, [r2, r3]
 8023762:	23c0      	movs	r3, #192	@ 0xc0
 8023764:	2200      	movs	r2, #0
 8023766:	2181      	movs	r1, #129	@ 0x81
 8023768:	f7f7 fc38 	bl	801afdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802376c:	687a      	ldr	r2, [r7, #4]
 802376e:	23b0      	movs	r3, #176	@ 0xb0
 8023770:	009b      	lsls	r3, r3, #2
 8023772:	58d0      	ldr	r0, [r2, r3]
 8023774:	2388      	movs	r3, #136	@ 0x88
 8023776:	005b      	lsls	r3, r3, #1
 8023778:	2200      	movs	r2, #0
 802377a:	2101      	movs	r1, #1
 802377c:	f7f7 fc2e 	bl	801afdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023780:	687a      	ldr	r2, [r7, #4]
 8023782:	23b0      	movs	r3, #176	@ 0xb0
 8023784:	009b      	lsls	r3, r3, #2
 8023786:	58d0      	ldr	r0, [r2, r3]
 8023788:	2380      	movs	r3, #128	@ 0x80
 802378a:	005b      	lsls	r3, r3, #1
 802378c:	2200      	movs	r2, #0
 802378e:	2182      	movs	r1, #130	@ 0x82
 8023790:	f7f7 fc24 	bl	801afdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8023794:	2300      	movs	r3, #0
}
 8023796:	0018      	movs	r0, r3
 8023798:	46bd      	mov	sp, r7
 802379a:	b002      	add	sp, #8
 802379c:	bd80      	pop	{r7, pc}
 802379e:	46c0      	nop			@ (mov r8, r8)
 80237a0:	200032b8 	.word	0x200032b8
 80237a4:	40005c00 	.word	0x40005c00

080237a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80237a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237aa:	b085      	sub	sp, #20
 80237ac:	af00      	add	r7, sp, #0
 80237ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80237b0:	210f      	movs	r1, #15
 80237b2:	187b      	adds	r3, r7, r1
 80237b4:	2200      	movs	r2, #0
 80237b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80237b8:	260e      	movs	r6, #14
 80237ba:	19bb      	adds	r3, r7, r6
 80237bc:	2200      	movs	r2, #0
 80237be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80237c0:	687a      	ldr	r2, [r7, #4]
 80237c2:	23b0      	movs	r3, #176	@ 0xb0
 80237c4:	009b      	lsls	r3, r3, #2
 80237c6:	58d3      	ldr	r3, [r2, r3]
 80237c8:	000d      	movs	r5, r1
 80237ca:	187c      	adds	r4, r7, r1
 80237cc:	0018      	movs	r0, r3
 80237ce:	f7f5 ff37 	bl	8019640 <HAL_PCD_Start>
 80237d2:	0003      	movs	r3, r0
 80237d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80237d6:	19bc      	adds	r4, r7, r6
 80237d8:	197b      	adds	r3, r7, r5
 80237da:	781b      	ldrb	r3, [r3, #0]
 80237dc:	0018      	movs	r0, r3
 80237de:	f000 f9bc 	bl	8023b5a <USBD_Get_USB_Status>
 80237e2:	0003      	movs	r3, r0
 80237e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80237e6:	19bb      	adds	r3, r7, r6
 80237e8:	781b      	ldrb	r3, [r3, #0]
}
 80237ea:	0018      	movs	r0, r3
 80237ec:	46bd      	mov	sp, r7
 80237ee:	b005      	add	sp, #20
 80237f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080237f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80237f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237f4:	b085      	sub	sp, #20
 80237f6:	af00      	add	r7, sp, #0
 80237f8:	6078      	str	r0, [r7, #4]
 80237fa:	000c      	movs	r4, r1
 80237fc:	0010      	movs	r0, r2
 80237fe:	0019      	movs	r1, r3
 8023800:	1cfb      	adds	r3, r7, #3
 8023802:	1c22      	adds	r2, r4, #0
 8023804:	701a      	strb	r2, [r3, #0]
 8023806:	1cbb      	adds	r3, r7, #2
 8023808:	1c02      	adds	r2, r0, #0
 802380a:	701a      	strb	r2, [r3, #0]
 802380c:	003b      	movs	r3, r7
 802380e:	1c0a      	adds	r2, r1, #0
 8023810:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023812:	260f      	movs	r6, #15
 8023814:	19bb      	adds	r3, r7, r6
 8023816:	2200      	movs	r2, #0
 8023818:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802381a:	250e      	movs	r5, #14
 802381c:	197b      	adds	r3, r7, r5
 802381e:	2200      	movs	r2, #0
 8023820:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023822:	687a      	ldr	r2, [r7, #4]
 8023824:	23b0      	movs	r3, #176	@ 0xb0
 8023826:	009b      	lsls	r3, r3, #2
 8023828:	58d0      	ldr	r0, [r2, r3]
 802382a:	19bc      	adds	r4, r7, r6
 802382c:	1cbb      	adds	r3, r7, #2
 802382e:	781d      	ldrb	r5, [r3, #0]
 8023830:	003b      	movs	r3, r7
 8023832:	881a      	ldrh	r2, [r3, #0]
 8023834:	1cfb      	adds	r3, r7, #3
 8023836:	7819      	ldrb	r1, [r3, #0]
 8023838:	002b      	movs	r3, r5
 802383a:	f7f6 f896 	bl	801996a <HAL_PCD_EP_Open>
 802383e:	0003      	movs	r3, r0
 8023840:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023842:	250e      	movs	r5, #14
 8023844:	197c      	adds	r4, r7, r5
 8023846:	19bb      	adds	r3, r7, r6
 8023848:	781b      	ldrb	r3, [r3, #0]
 802384a:	0018      	movs	r0, r3
 802384c:	f000 f985 	bl	8023b5a <USBD_Get_USB_Status>
 8023850:	0003      	movs	r3, r0
 8023852:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023854:	197b      	adds	r3, r7, r5
 8023856:	781b      	ldrb	r3, [r3, #0]
}
 8023858:	0018      	movs	r0, r3
 802385a:	46bd      	mov	sp, r7
 802385c:	b005      	add	sp, #20
 802385e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023860 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023862:	b085      	sub	sp, #20
 8023864:	af00      	add	r7, sp, #0
 8023866:	6078      	str	r0, [r7, #4]
 8023868:	000a      	movs	r2, r1
 802386a:	1cfb      	adds	r3, r7, #3
 802386c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802386e:	210f      	movs	r1, #15
 8023870:	187b      	adds	r3, r7, r1
 8023872:	2200      	movs	r2, #0
 8023874:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023876:	260e      	movs	r6, #14
 8023878:	19bb      	adds	r3, r7, r6
 802387a:	2200      	movs	r2, #0
 802387c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802387e:	687a      	ldr	r2, [r7, #4]
 8023880:	23b0      	movs	r3, #176	@ 0xb0
 8023882:	009b      	lsls	r3, r3, #2
 8023884:	58d2      	ldr	r2, [r2, r3]
 8023886:	000d      	movs	r5, r1
 8023888:	187c      	adds	r4, r7, r1
 802388a:	1cfb      	adds	r3, r7, #3
 802388c:	781b      	ldrb	r3, [r3, #0]
 802388e:	0019      	movs	r1, r3
 8023890:	0010      	movs	r0, r2
 8023892:	f7f6 f8d9 	bl	8019a48 <HAL_PCD_EP_Close>
 8023896:	0003      	movs	r3, r0
 8023898:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802389a:	19bc      	adds	r4, r7, r6
 802389c:	197b      	adds	r3, r7, r5
 802389e:	781b      	ldrb	r3, [r3, #0]
 80238a0:	0018      	movs	r0, r3
 80238a2:	f000 f95a 	bl	8023b5a <USBD_Get_USB_Status>
 80238a6:	0003      	movs	r3, r0
 80238a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238aa:	19bb      	adds	r3, r7, r6
 80238ac:	781b      	ldrb	r3, [r3, #0]
}
 80238ae:	0018      	movs	r0, r3
 80238b0:	46bd      	mov	sp, r7
 80238b2:	b005      	add	sp, #20
 80238b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80238b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238b8:	b085      	sub	sp, #20
 80238ba:	af00      	add	r7, sp, #0
 80238bc:	6078      	str	r0, [r7, #4]
 80238be:	000a      	movs	r2, r1
 80238c0:	1cfb      	adds	r3, r7, #3
 80238c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238c4:	210f      	movs	r1, #15
 80238c6:	187b      	adds	r3, r7, r1
 80238c8:	2200      	movs	r2, #0
 80238ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238cc:	260e      	movs	r6, #14
 80238ce:	19bb      	adds	r3, r7, r6
 80238d0:	2200      	movs	r2, #0
 80238d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80238d4:	687a      	ldr	r2, [r7, #4]
 80238d6:	23b0      	movs	r3, #176	@ 0xb0
 80238d8:	009b      	lsls	r3, r3, #2
 80238da:	58d2      	ldr	r2, [r2, r3]
 80238dc:	000d      	movs	r5, r1
 80238de:	187c      	adds	r4, r7, r1
 80238e0:	1cfb      	adds	r3, r7, #3
 80238e2:	781b      	ldrb	r3, [r3, #0]
 80238e4:	0019      	movs	r1, r3
 80238e6:	0010      	movs	r0, r2
 80238e8:	f7f6 f98b 	bl	8019c02 <HAL_PCD_EP_SetStall>
 80238ec:	0003      	movs	r3, r0
 80238ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80238f0:	19bc      	adds	r4, r7, r6
 80238f2:	197b      	adds	r3, r7, r5
 80238f4:	781b      	ldrb	r3, [r3, #0]
 80238f6:	0018      	movs	r0, r3
 80238f8:	f000 f92f 	bl	8023b5a <USBD_Get_USB_Status>
 80238fc:	0003      	movs	r3, r0
 80238fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023900:	19bb      	adds	r3, r7, r6
 8023902:	781b      	ldrb	r3, [r3, #0]
}
 8023904:	0018      	movs	r0, r3
 8023906:	46bd      	mov	sp, r7
 8023908:	b005      	add	sp, #20
 802390a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802390c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802390e:	b085      	sub	sp, #20
 8023910:	af00      	add	r7, sp, #0
 8023912:	6078      	str	r0, [r7, #4]
 8023914:	000a      	movs	r2, r1
 8023916:	1cfb      	adds	r3, r7, #3
 8023918:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802391a:	210f      	movs	r1, #15
 802391c:	187b      	adds	r3, r7, r1
 802391e:	2200      	movs	r2, #0
 8023920:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023922:	260e      	movs	r6, #14
 8023924:	19bb      	adds	r3, r7, r6
 8023926:	2200      	movs	r2, #0
 8023928:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802392a:	687a      	ldr	r2, [r7, #4]
 802392c:	23b0      	movs	r3, #176	@ 0xb0
 802392e:	009b      	lsls	r3, r3, #2
 8023930:	58d2      	ldr	r2, [r2, r3]
 8023932:	000d      	movs	r5, r1
 8023934:	187c      	adds	r4, r7, r1
 8023936:	1cfb      	adds	r3, r7, #3
 8023938:	781b      	ldrb	r3, [r3, #0]
 802393a:	0019      	movs	r1, r3
 802393c:	0010      	movs	r0, r2
 802393e:	f7f6 f9bc 	bl	8019cba <HAL_PCD_EP_ClrStall>
 8023942:	0003      	movs	r3, r0
 8023944:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023946:	19bc      	adds	r4, r7, r6
 8023948:	197b      	adds	r3, r7, r5
 802394a:	781b      	ldrb	r3, [r3, #0]
 802394c:	0018      	movs	r0, r3
 802394e:	f000 f904 	bl	8023b5a <USBD_Get_USB_Status>
 8023952:	0003      	movs	r3, r0
 8023954:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023956:	19bb      	adds	r3, r7, r6
 8023958:	781b      	ldrb	r3, [r3, #0]
}
 802395a:	0018      	movs	r0, r3
 802395c:	46bd      	mov	sp, r7
 802395e:	b005      	add	sp, #20
 8023960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023962 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023962:	b580      	push	{r7, lr}
 8023964:	b084      	sub	sp, #16
 8023966:	af00      	add	r7, sp, #0
 8023968:	6078      	str	r0, [r7, #4]
 802396a:	000a      	movs	r2, r1
 802396c:	1cfb      	adds	r3, r7, #3
 802396e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023970:	687a      	ldr	r2, [r7, #4]
 8023972:	23b0      	movs	r3, #176	@ 0xb0
 8023974:	009b      	lsls	r3, r3, #2
 8023976:	58d3      	ldr	r3, [r2, r3]
 8023978:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802397a:	1cfb      	adds	r3, r7, #3
 802397c:	781b      	ldrb	r3, [r3, #0]
 802397e:	b25b      	sxtb	r3, r3
 8023980:	2b00      	cmp	r3, #0
 8023982:	da0d      	bge.n	80239a0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023984:	1cfb      	adds	r3, r7, #3
 8023986:	781b      	ldrb	r3, [r3, #0]
 8023988:	227f      	movs	r2, #127	@ 0x7f
 802398a:	4013      	ands	r3, r2
 802398c:	68f9      	ldr	r1, [r7, #12]
 802398e:	1c5a      	adds	r2, r3, #1
 8023990:	0013      	movs	r3, r2
 8023992:	009b      	lsls	r3, r3, #2
 8023994:	189b      	adds	r3, r3, r2
 8023996:	00db      	lsls	r3, r3, #3
 8023998:	18cb      	adds	r3, r1, r3
 802399a:	3302      	adds	r3, #2
 802399c:	781b      	ldrb	r3, [r3, #0]
 802399e:	e00d      	b.n	80239bc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80239a0:	1cfb      	adds	r3, r7, #3
 80239a2:	781b      	ldrb	r3, [r3, #0]
 80239a4:	227f      	movs	r2, #127	@ 0x7f
 80239a6:	401a      	ands	r2, r3
 80239a8:	68f8      	ldr	r0, [r7, #12]
 80239aa:	23b5      	movs	r3, #181	@ 0xb5
 80239ac:	0059      	lsls	r1, r3, #1
 80239ae:	0013      	movs	r3, r2
 80239b0:	009b      	lsls	r3, r3, #2
 80239b2:	189b      	adds	r3, r3, r2
 80239b4:	00db      	lsls	r3, r3, #3
 80239b6:	18c3      	adds	r3, r0, r3
 80239b8:	185b      	adds	r3, r3, r1
 80239ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80239bc:	0018      	movs	r0, r3
 80239be:	46bd      	mov	sp, r7
 80239c0:	b004      	add	sp, #16
 80239c2:	bd80      	pop	{r7, pc}

080239c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80239c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239c6:	b085      	sub	sp, #20
 80239c8:	af00      	add	r7, sp, #0
 80239ca:	6078      	str	r0, [r7, #4]
 80239cc:	000a      	movs	r2, r1
 80239ce:	1cfb      	adds	r3, r7, #3
 80239d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80239d2:	210f      	movs	r1, #15
 80239d4:	187b      	adds	r3, r7, r1
 80239d6:	2200      	movs	r2, #0
 80239d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239da:	260e      	movs	r6, #14
 80239dc:	19bb      	adds	r3, r7, r6
 80239de:	2200      	movs	r2, #0
 80239e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80239e2:	687a      	ldr	r2, [r7, #4]
 80239e4:	23b0      	movs	r3, #176	@ 0xb0
 80239e6:	009b      	lsls	r3, r3, #2
 80239e8:	58d2      	ldr	r2, [r2, r3]
 80239ea:	000d      	movs	r5, r1
 80239ec:	187c      	adds	r4, r7, r1
 80239ee:	1cfb      	adds	r3, r7, #3
 80239f0:	781b      	ldrb	r3, [r3, #0]
 80239f2:	0019      	movs	r1, r3
 80239f4:	0010      	movs	r0, r2
 80239f6:	f7f5 ff8d 	bl	8019914 <HAL_PCD_SetAddress>
 80239fa:	0003      	movs	r3, r0
 80239fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80239fe:	19bc      	adds	r4, r7, r6
 8023a00:	197b      	adds	r3, r7, r5
 8023a02:	781b      	ldrb	r3, [r3, #0]
 8023a04:	0018      	movs	r0, r3
 8023a06:	f000 f8a8 	bl	8023b5a <USBD_Get_USB_Status>
 8023a0a:	0003      	movs	r3, r0
 8023a0c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a0e:	19bb      	adds	r3, r7, r6
 8023a10:	781b      	ldrb	r3, [r3, #0]
}
 8023a12:	0018      	movs	r0, r3
 8023a14:	46bd      	mov	sp, r7
 8023a16:	b005      	add	sp, #20
 8023a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a1c:	b087      	sub	sp, #28
 8023a1e:	af00      	add	r7, sp, #0
 8023a20:	60f8      	str	r0, [r7, #12]
 8023a22:	0008      	movs	r0, r1
 8023a24:	607a      	str	r2, [r7, #4]
 8023a26:	0019      	movs	r1, r3
 8023a28:	230b      	movs	r3, #11
 8023a2a:	18fb      	adds	r3, r7, r3
 8023a2c:	1c02      	adds	r2, r0, #0
 8023a2e:	701a      	strb	r2, [r3, #0]
 8023a30:	2408      	movs	r4, #8
 8023a32:	193b      	adds	r3, r7, r4
 8023a34:	1c0a      	adds	r2, r1, #0
 8023a36:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023a38:	2117      	movs	r1, #23
 8023a3a:	187b      	adds	r3, r7, r1
 8023a3c:	2200      	movs	r2, #0
 8023a3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023a40:	2516      	movs	r5, #22
 8023a42:	197b      	adds	r3, r7, r5
 8023a44:	2200      	movs	r2, #0
 8023a46:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023a48:	68fa      	ldr	r2, [r7, #12]
 8023a4a:	23b0      	movs	r3, #176	@ 0xb0
 8023a4c:	009b      	lsls	r3, r3, #2
 8023a4e:	58d0      	ldr	r0, [r2, r3]
 8023a50:	193b      	adds	r3, r7, r4
 8023a52:	881d      	ldrh	r5, [r3, #0]
 8023a54:	000e      	movs	r6, r1
 8023a56:	187c      	adds	r4, r7, r1
 8023a58:	687a      	ldr	r2, [r7, #4]
 8023a5a:	230b      	movs	r3, #11
 8023a5c:	18fb      	adds	r3, r7, r3
 8023a5e:	7819      	ldrb	r1, [r3, #0]
 8023a60:	002b      	movs	r3, r5
 8023a62:	f7f6 f892 	bl	8019b8a <HAL_PCD_EP_Transmit>
 8023a66:	0003      	movs	r3, r0
 8023a68:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023a6a:	2516      	movs	r5, #22
 8023a6c:	197c      	adds	r4, r7, r5
 8023a6e:	19bb      	adds	r3, r7, r6
 8023a70:	781b      	ldrb	r3, [r3, #0]
 8023a72:	0018      	movs	r0, r3
 8023a74:	f000 f871 	bl	8023b5a <USBD_Get_USB_Status>
 8023a78:	0003      	movs	r3, r0
 8023a7a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a7c:	197b      	adds	r3, r7, r5
 8023a7e:	781b      	ldrb	r3, [r3, #0]
}
 8023a80:	0018      	movs	r0, r3
 8023a82:	46bd      	mov	sp, r7
 8023a84:	b007      	add	sp, #28
 8023a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a8a:	b087      	sub	sp, #28
 8023a8c:	af00      	add	r7, sp, #0
 8023a8e:	60f8      	str	r0, [r7, #12]
 8023a90:	0008      	movs	r0, r1
 8023a92:	607a      	str	r2, [r7, #4]
 8023a94:	0019      	movs	r1, r3
 8023a96:	230b      	movs	r3, #11
 8023a98:	18fb      	adds	r3, r7, r3
 8023a9a:	1c02      	adds	r2, r0, #0
 8023a9c:	701a      	strb	r2, [r3, #0]
 8023a9e:	2408      	movs	r4, #8
 8023aa0:	193b      	adds	r3, r7, r4
 8023aa2:	1c0a      	adds	r2, r1, #0
 8023aa4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023aa6:	2117      	movs	r1, #23
 8023aa8:	187b      	adds	r3, r7, r1
 8023aaa:	2200      	movs	r2, #0
 8023aac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023aae:	2516      	movs	r5, #22
 8023ab0:	197b      	adds	r3, r7, r5
 8023ab2:	2200      	movs	r2, #0
 8023ab4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023ab6:	68fa      	ldr	r2, [r7, #12]
 8023ab8:	23b0      	movs	r3, #176	@ 0xb0
 8023aba:	009b      	lsls	r3, r3, #2
 8023abc:	58d0      	ldr	r0, [r2, r3]
 8023abe:	193b      	adds	r3, r7, r4
 8023ac0:	881d      	ldrh	r5, [r3, #0]
 8023ac2:	000e      	movs	r6, r1
 8023ac4:	187c      	adds	r4, r7, r1
 8023ac6:	687a      	ldr	r2, [r7, #4]
 8023ac8:	230b      	movs	r3, #11
 8023aca:	18fb      	adds	r3, r7, r3
 8023acc:	7819      	ldrb	r1, [r3, #0]
 8023ace:	002b      	movs	r3, r5
 8023ad0:	f7f6 f80b 	bl	8019aea <HAL_PCD_EP_Receive>
 8023ad4:	0003      	movs	r3, r0
 8023ad6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023ad8:	2516      	movs	r5, #22
 8023ada:	197c      	adds	r4, r7, r5
 8023adc:	19bb      	adds	r3, r7, r6
 8023ade:	781b      	ldrb	r3, [r3, #0]
 8023ae0:	0018      	movs	r0, r3
 8023ae2:	f000 f83a 	bl	8023b5a <USBD_Get_USB_Status>
 8023ae6:	0003      	movs	r3, r0
 8023ae8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023aea:	197b      	adds	r3, r7, r5
 8023aec:	781b      	ldrb	r3, [r3, #0]
}
 8023aee:	0018      	movs	r0, r3
 8023af0:	46bd      	mov	sp, r7
 8023af2:	b007      	add	sp, #28
 8023af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023af6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023af6:	b580      	push	{r7, lr}
 8023af8:	b082      	sub	sp, #8
 8023afa:	af00      	add	r7, sp, #0
 8023afc:	6078      	str	r0, [r7, #4]
 8023afe:	000a      	movs	r2, r1
 8023b00:	1cfb      	adds	r3, r7, #3
 8023b02:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023b04:	687a      	ldr	r2, [r7, #4]
 8023b06:	23b0      	movs	r3, #176	@ 0xb0
 8023b08:	009b      	lsls	r3, r3, #2
 8023b0a:	58d2      	ldr	r2, [r2, r3]
 8023b0c:	1cfb      	adds	r3, r7, #3
 8023b0e:	781b      	ldrb	r3, [r3, #0]
 8023b10:	0019      	movs	r1, r3
 8023b12:	0010      	movs	r0, r2
 8023b14:	f7f6 f820 	bl	8019b58 <HAL_PCD_EP_GetRxCount>
 8023b18:	0003      	movs	r3, r0
}
 8023b1a:	0018      	movs	r0, r3
 8023b1c:	46bd      	mov	sp, r7
 8023b1e:	b002      	add	sp, #8
 8023b20:	bd80      	pop	{r7, pc}
	...

08023b24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023b24:	b580      	push	{r7, lr}
 8023b26:	b082      	sub	sp, #8
 8023b28:	af00      	add	r7, sp, #0
 8023b2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023b2c:	4b02      	ldr	r3, [pc, #8]	@ (8023b38 <USBD_static_malloc+0x14>)
}
 8023b2e:	0018      	movs	r0, r3
 8023b30:	46bd      	mov	sp, r7
 8023b32:	b002      	add	sp, #8
 8023b34:	bd80      	pop	{r7, pc}
 8023b36:	46c0      	nop			@ (mov r8, r8)
 8023b38:	200035ac 	.word	0x200035ac

08023b3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023b3c:	b580      	push	{r7, lr}
 8023b3e:	b082      	sub	sp, #8
 8023b40:	af00      	add	r7, sp, #0
 8023b42:	6078      	str	r0, [r7, #4]

}
 8023b44:	46c0      	nop			@ (mov r8, r8)
 8023b46:	46bd      	mov	sp, r7
 8023b48:	b002      	add	sp, #8
 8023b4a:	bd80      	pop	{r7, pc}

08023b4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023b4c:	b580      	push	{r7, lr}
 8023b4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023b50:	f7e9 faac 	bl	800d0ac <SystemClock_Config>
}
 8023b54:	46c0      	nop			@ (mov r8, r8)
 8023b56:	46bd      	mov	sp, r7
 8023b58:	bd80      	pop	{r7, pc}

08023b5a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023b5a:	b580      	push	{r7, lr}
 8023b5c:	b084      	sub	sp, #16
 8023b5e:	af00      	add	r7, sp, #0
 8023b60:	0002      	movs	r2, r0
 8023b62:	1dfb      	adds	r3, r7, #7
 8023b64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023b66:	230f      	movs	r3, #15
 8023b68:	18fb      	adds	r3, r7, r3
 8023b6a:	2200      	movs	r2, #0
 8023b6c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023b6e:	1dfb      	adds	r3, r7, #7
 8023b70:	781b      	ldrb	r3, [r3, #0]
 8023b72:	2b03      	cmp	r3, #3
 8023b74:	d017      	beq.n	8023ba6 <USBD_Get_USB_Status+0x4c>
 8023b76:	dc1b      	bgt.n	8023bb0 <USBD_Get_USB_Status+0x56>
 8023b78:	2b02      	cmp	r3, #2
 8023b7a:	d00f      	beq.n	8023b9c <USBD_Get_USB_Status+0x42>
 8023b7c:	dc18      	bgt.n	8023bb0 <USBD_Get_USB_Status+0x56>
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	d002      	beq.n	8023b88 <USBD_Get_USB_Status+0x2e>
 8023b82:	2b01      	cmp	r3, #1
 8023b84:	d005      	beq.n	8023b92 <USBD_Get_USB_Status+0x38>
 8023b86:	e013      	b.n	8023bb0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023b88:	230f      	movs	r3, #15
 8023b8a:	18fb      	adds	r3, r7, r3
 8023b8c:	2200      	movs	r2, #0
 8023b8e:	701a      	strb	r2, [r3, #0]
    break;
 8023b90:	e013      	b.n	8023bba <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023b92:	230f      	movs	r3, #15
 8023b94:	18fb      	adds	r3, r7, r3
 8023b96:	2202      	movs	r2, #2
 8023b98:	701a      	strb	r2, [r3, #0]
    break;
 8023b9a:	e00e      	b.n	8023bba <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023b9c:	230f      	movs	r3, #15
 8023b9e:	18fb      	adds	r3, r7, r3
 8023ba0:	2201      	movs	r2, #1
 8023ba2:	701a      	strb	r2, [r3, #0]
    break;
 8023ba4:	e009      	b.n	8023bba <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023ba6:	230f      	movs	r3, #15
 8023ba8:	18fb      	adds	r3, r7, r3
 8023baa:	2202      	movs	r2, #2
 8023bac:	701a      	strb	r2, [r3, #0]
    break;
 8023bae:	e004      	b.n	8023bba <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023bb0:	230f      	movs	r3, #15
 8023bb2:	18fb      	adds	r3, r7, r3
 8023bb4:	2202      	movs	r2, #2
 8023bb6:	701a      	strb	r2, [r3, #0]
    break;
 8023bb8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023bba:	230f      	movs	r3, #15
 8023bbc:	18fb      	adds	r3, r7, r3
 8023bbe:	781b      	ldrb	r3, [r3, #0]
}
 8023bc0:	0018      	movs	r0, r3
 8023bc2:	46bd      	mov	sp, r7
 8023bc4:	b004      	add	sp, #16
 8023bc6:	bd80      	pop	{r7, pc}

08023bc8 <arm_cfft_radix4by2_q31>:
 8023bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bca:	465f      	mov	r7, fp
 8023bcc:	4656      	mov	r6, sl
 8023bce:	464d      	mov	r5, r9
 8023bd0:	4644      	mov	r4, r8
 8023bd2:	000b      	movs	r3, r1
 8023bd4:	b4f0      	push	{r4, r5, r6, r7}
 8023bd6:	085b      	lsrs	r3, r3, #1
 8023bd8:	b08f      	sub	sp, #60	@ 0x3c
 8023bda:	910a      	str	r1, [sp, #40]	@ 0x28
 8023bdc:	0007      	movs	r7, r0
 8023bde:	9009      	str	r0, [sp, #36]	@ 0x24
 8023be0:	0011      	movs	r1, r2
 8023be2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d100      	bne.n	8023bec <arm_cfft_radix4by2_q31+0x24>
 8023bea:	e0a0      	b.n	8023d2e <arm_cfft_radix4by2_q31+0x166>
 8023bec:	0002      	movs	r2, r0
 8023bee:	00db      	lsls	r3, r3, #3
 8023bf0:	3204      	adds	r2, #4
 8023bf2:	4691      	mov	r9, r2
 8023bf4:	4698      	mov	r8, r3
 8023bf6:	000a      	movs	r2, r1
 8023bf8:	464e      	mov	r6, r9
 8023bfa:	4442      	add	r2, r8
 8023bfc:	4699      	mov	r9, r3
 8023bfe:	4688      	mov	r8, r1
 8023c00:	9208      	str	r2, [sp, #32]
 8023c02:	900d      	str	r0, [sp, #52]	@ 0x34
 8023c04:	4643      	mov	r3, r8
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	469b      	mov	fp, r3
 8023c0a:	4643      	mov	r3, r8
 8023c0c:	685b      	ldr	r3, [r3, #4]
 8023c0e:	469a      	mov	sl, r3
 8023c10:	683b      	ldr	r3, [r7, #0]
 8023c12:	109c      	asrs	r4, r3, #2
 8023c14:	464b      	mov	r3, r9
 8023c16:	58fb      	ldr	r3, [r7, r3]
 8023c18:	109a      	asrs	r2, r3, #2
 8023c1a:	18a3      	adds	r3, r4, r2
 8023c1c:	603b      	str	r3, [r7, #0]
 8023c1e:	6833      	ldr	r3, [r6, #0]
 8023c20:	1aa4      	subs	r4, r4, r2
 8023c22:	109d      	asrs	r5, r3, #2
 8023c24:	464b      	mov	r3, r9
 8023c26:	58f3      	ldr	r3, [r6, r3]
 8023c28:	17e2      	asrs	r2, r4, #31
 8023c2a:	109b      	asrs	r3, r3, #2
 8023c2c:	18e9      	adds	r1, r5, r3
 8023c2e:	6031      	str	r1, [r6, #0]
 8023c30:	0011      	movs	r1, r2
 8023c32:	465a      	mov	r2, fp
 8023c34:	17d2      	asrs	r2, r2, #31
 8023c36:	0010      	movs	r0, r2
 8023c38:	4652      	mov	r2, sl
 8023c3a:	1aed      	subs	r5, r5, r3
 8023c3c:	17eb      	asrs	r3, r5, #31
 8023c3e:	17d2      	asrs	r2, r2, #31
 8023c40:	9307      	str	r3, [sp, #28]
 8023c42:	9204      	str	r2, [sp, #16]
 8023c44:	0003      	movs	r3, r0
 8023c46:	465a      	mov	r2, fp
 8023c48:	9006      	str	r0, [sp, #24]
 8023c4a:	0020      	movs	r0, r4
 8023c4c:	9105      	str	r1, [sp, #20]
 8023c4e:	f7dc fcb7 	bl	80005c0 <__aeabi_lmul>
 8023c52:	2280      	movs	r2, #128	@ 0x80
 8023c54:	2300      	movs	r3, #0
 8023c56:	0612      	lsls	r2, r2, #24
 8023c58:	1880      	adds	r0, r0, r2
 8023c5a:	4159      	adcs	r1, r3
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	9101      	str	r1, [sp, #4]
 8023c60:	9300      	str	r3, [sp, #0]
 8023c62:	4652      	mov	r2, sl
 8023c64:	9b04      	ldr	r3, [sp, #16]
 8023c66:	0028      	movs	r0, r5
 8023c68:	17e9      	asrs	r1, r5, #31
 8023c6a:	f7dc fca9 	bl	80005c0 <__aeabi_lmul>
 8023c6e:	9a00      	ldr	r2, [sp, #0]
 8023c70:	9b01      	ldr	r3, [sp, #4]
 8023c72:	1880      	adds	r0, r0, r2
 8023c74:	4159      	adcs	r1, r3
 8023c76:	2280      	movs	r2, #128	@ 0x80
 8023c78:	2300      	movs	r3, #0
 8023c7a:	0612      	lsls	r2, r2, #24
 8023c7c:	1880      	adds	r0, r0, r2
 8023c7e:	4159      	adcs	r1, r3
 8023c80:	464a      	mov	r2, r9
 8023c82:	004b      	lsls	r3, r1, #1
 8023c84:	50bb      	str	r3, [r7, r2]
 8023c86:	4658      	mov	r0, fp
 8023c88:	002a      	movs	r2, r5
 8023c8a:	9b07      	ldr	r3, [sp, #28]
 8023c8c:	9906      	ldr	r1, [sp, #24]
 8023c8e:	f7dc fc97 	bl	80005c0 <__aeabi_lmul>
 8023c92:	2280      	movs	r2, #128	@ 0x80
 8023c94:	2300      	movs	r3, #0
 8023c96:	0612      	lsls	r2, r2, #24
 8023c98:	1880      	adds	r0, r0, r2
 8023c9a:	4159      	adcs	r1, r3
 8023c9c:	2000      	movs	r0, #0
 8023c9e:	9103      	str	r1, [sp, #12]
 8023ca0:	9002      	str	r0, [sp, #8]
 8023ca2:	4652      	mov	r2, sl
 8023ca4:	9b04      	ldr	r3, [sp, #16]
 8023ca6:	0020      	movs	r0, r4
 8023ca8:	9905      	ldr	r1, [sp, #20]
 8023caa:	f7dc fc89 	bl	80005c0 <__aeabi_lmul>
 8023cae:	9a02      	ldr	r2, [sp, #8]
 8023cb0:	9b03      	ldr	r3, [sp, #12]
 8023cb2:	1a12      	subs	r2, r2, r0
 8023cb4:	418b      	sbcs	r3, r1
 8023cb6:	2080      	movs	r0, #128	@ 0x80
 8023cb8:	2100      	movs	r1, #0
 8023cba:	0600      	lsls	r0, r0, #24
 8023cbc:	1812      	adds	r2, r2, r0
 8023cbe:	414b      	adcs	r3, r1
 8023cc0:	464a      	mov	r2, r9
 8023cc2:	005b      	lsls	r3, r3, #1
 8023cc4:	50b3      	str	r3, [r6, r2]
 8023cc6:	2308      	movs	r3, #8
 8023cc8:	469c      	mov	ip, r3
 8023cca:	9b08      	ldr	r3, [sp, #32]
 8023ccc:	44e0      	add	r8, ip
 8023cce:	3708      	adds	r7, #8
 8023cd0:	3608      	adds	r6, #8
 8023cd2:	4598      	cmp	r8, r3
 8023cd4:	d196      	bne.n	8023c04 <arm_cfft_radix4by2_q31+0x3c>
 8023cd6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023cd8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023cda:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023cdc:	2302      	movs	r3, #2
 8023cde:	003a      	movs	r2, r7
 8023ce0:	0029      	movs	r1, r5
 8023ce2:	0020      	movs	r0, r4
 8023ce4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023ce6:	f000 f957 	bl	8023f98 <arm_radix4_butterfly_q31>
 8023cea:	46a4      	mov	ip, r4
 8023cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023cee:	2302      	movs	r3, #2
 8023cf0:	0088      	lsls	r0, r1, #2
 8023cf2:	4460      	add	r0, ip
 8023cf4:	003a      	movs	r2, r7
 8023cf6:	0029      	movs	r1, r5
 8023cf8:	f000 f94e 	bl	8023f98 <arm_radix4_butterfly_q31>
 8023cfc:	46a4      	mov	ip, r4
 8023cfe:	0128      	lsls	r0, r5, #4
 8023d00:	4460      	add	r0, ip
 8023d02:	6833      	ldr	r3, [r6, #0]
 8023d04:	005b      	lsls	r3, r3, #1
 8023d06:	6033      	str	r3, [r6, #0]
 8023d08:	6873      	ldr	r3, [r6, #4]
 8023d0a:	005b      	lsls	r3, r3, #1
 8023d0c:	6073      	str	r3, [r6, #4]
 8023d0e:	68b3      	ldr	r3, [r6, #8]
 8023d10:	005b      	lsls	r3, r3, #1
 8023d12:	60b3      	str	r3, [r6, #8]
 8023d14:	68f3      	ldr	r3, [r6, #12]
 8023d16:	005b      	lsls	r3, r3, #1
 8023d18:	60f3      	str	r3, [r6, #12]
 8023d1a:	3610      	adds	r6, #16
 8023d1c:	42b0      	cmp	r0, r6
 8023d1e:	d1f0      	bne.n	8023d02 <arm_cfft_radix4by2_q31+0x13a>
 8023d20:	b00f      	add	sp, #60	@ 0x3c
 8023d22:	bc3c      	pop	{r2, r3, r4, r5}
 8023d24:	4690      	mov	r8, r2
 8023d26:	4699      	mov	r9, r3
 8023d28:	46a2      	mov	sl, r4
 8023d2a:	46ab      	mov	fp, r5
 8023d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d2e:	2302      	movs	r3, #2
 8023d30:	2100      	movs	r1, #0
 8023d32:	0015      	movs	r5, r2
 8023d34:	f000 f930 	bl	8023f98 <arm_radix4_butterfly_q31>
 8023d38:	46bc      	mov	ip, r7
 8023d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023d3c:	002a      	movs	r2, r5
 8023d3e:	0098      	lsls	r0, r3, #2
 8023d40:	4460      	add	r0, ip
 8023d42:	2302      	movs	r3, #2
 8023d44:	2100      	movs	r1, #0
 8023d46:	f000 f927 	bl	8023f98 <arm_radix4_butterfly_q31>
 8023d4a:	e7e9      	b.n	8023d20 <arm_cfft_radix4by2_q31+0x158>

08023d4c <arm_cfft_radix4by2_inverse_q31>:
 8023d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d4e:	465f      	mov	r7, fp
 8023d50:	4656      	mov	r6, sl
 8023d52:	464d      	mov	r5, r9
 8023d54:	4644      	mov	r4, r8
 8023d56:	000b      	movs	r3, r1
 8023d58:	b4f0      	push	{r4, r5, r6, r7}
 8023d5a:	085b      	lsrs	r3, r3, #1
 8023d5c:	b08f      	sub	sp, #60	@ 0x3c
 8023d5e:	910a      	str	r1, [sp, #40]	@ 0x28
 8023d60:	0007      	movs	r7, r0
 8023d62:	9009      	str	r0, [sp, #36]	@ 0x24
 8023d64:	0011      	movs	r1, r2
 8023d66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023d68:	930c      	str	r3, [sp, #48]	@ 0x30
 8023d6a:	2b00      	cmp	r3, #0
 8023d6c:	d100      	bne.n	8023d70 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023d6e:	e0a0      	b.n	8023eb2 <arm_cfft_radix4by2_inverse_q31+0x166>
 8023d70:	0002      	movs	r2, r0
 8023d72:	00db      	lsls	r3, r3, #3
 8023d74:	3204      	adds	r2, #4
 8023d76:	4691      	mov	r9, r2
 8023d78:	4698      	mov	r8, r3
 8023d7a:	000a      	movs	r2, r1
 8023d7c:	464e      	mov	r6, r9
 8023d7e:	4442      	add	r2, r8
 8023d80:	4699      	mov	r9, r3
 8023d82:	4688      	mov	r8, r1
 8023d84:	9208      	str	r2, [sp, #32]
 8023d86:	900d      	str	r0, [sp, #52]	@ 0x34
 8023d88:	4643      	mov	r3, r8
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	469b      	mov	fp, r3
 8023d8e:	4643      	mov	r3, r8
 8023d90:	685b      	ldr	r3, [r3, #4]
 8023d92:	469a      	mov	sl, r3
 8023d94:	683b      	ldr	r3, [r7, #0]
 8023d96:	109c      	asrs	r4, r3, #2
 8023d98:	464b      	mov	r3, r9
 8023d9a:	58fb      	ldr	r3, [r7, r3]
 8023d9c:	109a      	asrs	r2, r3, #2
 8023d9e:	18a3      	adds	r3, r4, r2
 8023da0:	603b      	str	r3, [r7, #0]
 8023da2:	6833      	ldr	r3, [r6, #0]
 8023da4:	1aa4      	subs	r4, r4, r2
 8023da6:	109d      	asrs	r5, r3, #2
 8023da8:	464b      	mov	r3, r9
 8023daa:	58f3      	ldr	r3, [r6, r3]
 8023dac:	17e2      	asrs	r2, r4, #31
 8023dae:	109b      	asrs	r3, r3, #2
 8023db0:	18e9      	adds	r1, r5, r3
 8023db2:	6031      	str	r1, [r6, #0]
 8023db4:	0011      	movs	r1, r2
 8023db6:	465a      	mov	r2, fp
 8023db8:	17d2      	asrs	r2, r2, #31
 8023dba:	0010      	movs	r0, r2
 8023dbc:	4652      	mov	r2, sl
 8023dbe:	1aed      	subs	r5, r5, r3
 8023dc0:	17eb      	asrs	r3, r5, #31
 8023dc2:	17d2      	asrs	r2, r2, #31
 8023dc4:	9307      	str	r3, [sp, #28]
 8023dc6:	9204      	str	r2, [sp, #16]
 8023dc8:	0003      	movs	r3, r0
 8023dca:	465a      	mov	r2, fp
 8023dcc:	9006      	str	r0, [sp, #24]
 8023dce:	0020      	movs	r0, r4
 8023dd0:	9105      	str	r1, [sp, #20]
 8023dd2:	f7dc fbf5 	bl	80005c0 <__aeabi_lmul>
 8023dd6:	2280      	movs	r2, #128	@ 0x80
 8023dd8:	2300      	movs	r3, #0
 8023dda:	0612      	lsls	r2, r2, #24
 8023ddc:	1880      	adds	r0, r0, r2
 8023dde:	4159      	adcs	r1, r3
 8023de0:	2300      	movs	r3, #0
 8023de2:	9101      	str	r1, [sp, #4]
 8023de4:	9300      	str	r3, [sp, #0]
 8023de6:	4652      	mov	r2, sl
 8023de8:	9b04      	ldr	r3, [sp, #16]
 8023dea:	0028      	movs	r0, r5
 8023dec:	17e9      	asrs	r1, r5, #31
 8023dee:	f7dc fbe7 	bl	80005c0 <__aeabi_lmul>
 8023df2:	9a00      	ldr	r2, [sp, #0]
 8023df4:	9b01      	ldr	r3, [sp, #4]
 8023df6:	1a12      	subs	r2, r2, r0
 8023df8:	418b      	sbcs	r3, r1
 8023dfa:	2080      	movs	r0, #128	@ 0x80
 8023dfc:	2100      	movs	r1, #0
 8023dfe:	0600      	lsls	r0, r0, #24
 8023e00:	1812      	adds	r2, r2, r0
 8023e02:	414b      	adcs	r3, r1
 8023e04:	464a      	mov	r2, r9
 8023e06:	005b      	lsls	r3, r3, #1
 8023e08:	50bb      	str	r3, [r7, r2]
 8023e0a:	4658      	mov	r0, fp
 8023e0c:	002a      	movs	r2, r5
 8023e0e:	9b07      	ldr	r3, [sp, #28]
 8023e10:	9906      	ldr	r1, [sp, #24]
 8023e12:	f7dc fbd5 	bl	80005c0 <__aeabi_lmul>
 8023e16:	2280      	movs	r2, #128	@ 0x80
 8023e18:	2300      	movs	r3, #0
 8023e1a:	0612      	lsls	r2, r2, #24
 8023e1c:	1880      	adds	r0, r0, r2
 8023e1e:	4159      	adcs	r1, r3
 8023e20:	2000      	movs	r0, #0
 8023e22:	9103      	str	r1, [sp, #12]
 8023e24:	9002      	str	r0, [sp, #8]
 8023e26:	4652      	mov	r2, sl
 8023e28:	9b04      	ldr	r3, [sp, #16]
 8023e2a:	0020      	movs	r0, r4
 8023e2c:	9905      	ldr	r1, [sp, #20]
 8023e2e:	f7dc fbc7 	bl	80005c0 <__aeabi_lmul>
 8023e32:	9b02      	ldr	r3, [sp, #8]
 8023e34:	9c03      	ldr	r4, [sp, #12]
 8023e36:	18c0      	adds	r0, r0, r3
 8023e38:	4161      	adcs	r1, r4
 8023e3a:	2380      	movs	r3, #128	@ 0x80
 8023e3c:	2400      	movs	r4, #0
 8023e3e:	061b      	lsls	r3, r3, #24
 8023e40:	18c0      	adds	r0, r0, r3
 8023e42:	4161      	adcs	r1, r4
 8023e44:	464a      	mov	r2, r9
 8023e46:	004b      	lsls	r3, r1, #1
 8023e48:	50b3      	str	r3, [r6, r2]
 8023e4a:	2308      	movs	r3, #8
 8023e4c:	469c      	mov	ip, r3
 8023e4e:	9b08      	ldr	r3, [sp, #32]
 8023e50:	44e0      	add	r8, ip
 8023e52:	3708      	adds	r7, #8
 8023e54:	3608      	adds	r6, #8
 8023e56:	4598      	cmp	r8, r3
 8023e58:	d196      	bne.n	8023d88 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023e5a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023e5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023e5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023e60:	2302      	movs	r3, #2
 8023e62:	003a      	movs	r2, r7
 8023e64:	0029      	movs	r1, r5
 8023e66:	0020      	movs	r0, r4
 8023e68:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023e6a:	f000 fb3b 	bl	80244e4 <arm_radix4_butterfly_inverse_q31>
 8023e6e:	46a4      	mov	ip, r4
 8023e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023e72:	2302      	movs	r3, #2
 8023e74:	0088      	lsls	r0, r1, #2
 8023e76:	4460      	add	r0, ip
 8023e78:	003a      	movs	r2, r7
 8023e7a:	0029      	movs	r1, r5
 8023e7c:	f000 fb32 	bl	80244e4 <arm_radix4_butterfly_inverse_q31>
 8023e80:	46a4      	mov	ip, r4
 8023e82:	0128      	lsls	r0, r5, #4
 8023e84:	4460      	add	r0, ip
 8023e86:	6833      	ldr	r3, [r6, #0]
 8023e88:	005b      	lsls	r3, r3, #1
 8023e8a:	6033      	str	r3, [r6, #0]
 8023e8c:	6873      	ldr	r3, [r6, #4]
 8023e8e:	005b      	lsls	r3, r3, #1
 8023e90:	6073      	str	r3, [r6, #4]
 8023e92:	68b3      	ldr	r3, [r6, #8]
 8023e94:	005b      	lsls	r3, r3, #1
 8023e96:	60b3      	str	r3, [r6, #8]
 8023e98:	68f3      	ldr	r3, [r6, #12]
 8023e9a:	005b      	lsls	r3, r3, #1
 8023e9c:	60f3      	str	r3, [r6, #12]
 8023e9e:	3610      	adds	r6, #16
 8023ea0:	42b0      	cmp	r0, r6
 8023ea2:	d1f0      	bne.n	8023e86 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023ea4:	b00f      	add	sp, #60	@ 0x3c
 8023ea6:	bc3c      	pop	{r2, r3, r4, r5}
 8023ea8:	4690      	mov	r8, r2
 8023eaa:	4699      	mov	r9, r3
 8023eac:	46a2      	mov	sl, r4
 8023eae:	46ab      	mov	fp, r5
 8023eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023eb2:	2302      	movs	r3, #2
 8023eb4:	2100      	movs	r1, #0
 8023eb6:	0015      	movs	r5, r2
 8023eb8:	f000 fb14 	bl	80244e4 <arm_radix4_butterfly_inverse_q31>
 8023ebc:	46bc      	mov	ip, r7
 8023ebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ec0:	002a      	movs	r2, r5
 8023ec2:	0098      	lsls	r0, r3, #2
 8023ec4:	4460      	add	r0, ip
 8023ec6:	2302      	movs	r3, #2
 8023ec8:	2100      	movs	r1, #0
 8023eca:	f000 fb0b 	bl	80244e4 <arm_radix4_butterfly_inverse_q31>
 8023ece:	e7e9      	b.n	8023ea4 <arm_cfft_radix4by2_inverse_q31+0x158>

08023ed0 <arm_cfft_q31>:
 8023ed0:	b570      	push	{r4, r5, r6, lr}
 8023ed2:	001e      	movs	r6, r3
 8023ed4:	2380      	movs	r3, #128	@ 0x80
 8023ed6:	000d      	movs	r5, r1
 8023ed8:	0004      	movs	r4, r0
 8023eda:	8801      	ldrh	r1, [r0, #0]
 8023edc:	005b      	lsls	r3, r3, #1
 8023ede:	2a01      	cmp	r2, #1
 8023ee0:	d028      	beq.n	8023f34 <arm_cfft_q31+0x64>
 8023ee2:	4299      	cmp	r1, r3
 8023ee4:	d020      	beq.n	8023f28 <arm_cfft_q31+0x58>
 8023ee6:	d812      	bhi.n	8023f0e <arm_cfft_q31+0x3e>
 8023ee8:	2920      	cmp	r1, #32
 8023eea:	d004      	beq.n	8023ef6 <arm_cfft_q31+0x26>
 8023eec:	d949      	bls.n	8023f82 <arm_cfft_q31+0xb2>
 8023eee:	2940      	cmp	r1, #64	@ 0x40
 8023ef0:	d01a      	beq.n	8023f28 <arm_cfft_q31+0x58>
 8023ef2:	2980      	cmp	r1, #128	@ 0x80
 8023ef4:	d103      	bne.n	8023efe <arm_cfft_q31+0x2e>
 8023ef6:	6862      	ldr	r2, [r4, #4]
 8023ef8:	0028      	movs	r0, r5
 8023efa:	f7ff fe65 	bl	8023bc8 <arm_cfft_radix4by2_q31>
 8023efe:	2e00      	cmp	r6, #0
 8023f00:	d004      	beq.n	8023f0c <arm_cfft_q31+0x3c>
 8023f02:	68a2      	ldr	r2, [r4, #8]
 8023f04:	89a1      	ldrh	r1, [r4, #12]
 8023f06:	0028      	movs	r0, r5
 8023f08:	f7dc f8fe 	bl	8000108 <arm_bitreversal_32>
 8023f0c:	bd70      	pop	{r4, r5, r6, pc}
 8023f0e:	2380      	movs	r3, #128	@ 0x80
 8023f10:	00db      	lsls	r3, r3, #3
 8023f12:	4299      	cmp	r1, r3
 8023f14:	d008      	beq.n	8023f28 <arm_cfft_q31+0x58>
 8023f16:	d92f      	bls.n	8023f78 <arm_cfft_q31+0xa8>
 8023f18:	2380      	movs	r3, #128	@ 0x80
 8023f1a:	011b      	lsls	r3, r3, #4
 8023f1c:	4299      	cmp	r1, r3
 8023f1e:	d0ea      	beq.n	8023ef6 <arm_cfft_q31+0x26>
 8023f20:	2380      	movs	r3, #128	@ 0x80
 8023f22:	015b      	lsls	r3, r3, #5
 8023f24:	4299      	cmp	r1, r3
 8023f26:	d1ea      	bne.n	8023efe <arm_cfft_q31+0x2e>
 8023f28:	2301      	movs	r3, #1
 8023f2a:	6862      	ldr	r2, [r4, #4]
 8023f2c:	0028      	movs	r0, r5
 8023f2e:	f000 f833 	bl	8023f98 <arm_radix4_butterfly_q31>
 8023f32:	e7e4      	b.n	8023efe <arm_cfft_q31+0x2e>
 8023f34:	4299      	cmp	r1, r3
 8023f36:	d019      	beq.n	8023f6c <arm_cfft_q31+0x9c>
 8023f38:	d80b      	bhi.n	8023f52 <arm_cfft_q31+0x82>
 8023f3a:	2920      	cmp	r1, #32
 8023f3c:	d004      	beq.n	8023f48 <arm_cfft_q31+0x78>
 8023f3e:	d928      	bls.n	8023f92 <arm_cfft_q31+0xc2>
 8023f40:	2940      	cmp	r1, #64	@ 0x40
 8023f42:	d013      	beq.n	8023f6c <arm_cfft_q31+0x9c>
 8023f44:	2980      	cmp	r1, #128	@ 0x80
 8023f46:	d1da      	bne.n	8023efe <arm_cfft_q31+0x2e>
 8023f48:	6862      	ldr	r2, [r4, #4]
 8023f4a:	0028      	movs	r0, r5
 8023f4c:	f7ff fefe 	bl	8023d4c <arm_cfft_radix4by2_inverse_q31>
 8023f50:	e7d5      	b.n	8023efe <arm_cfft_q31+0x2e>
 8023f52:	2380      	movs	r3, #128	@ 0x80
 8023f54:	00db      	lsls	r3, r3, #3
 8023f56:	4299      	cmp	r1, r3
 8023f58:	d008      	beq.n	8023f6c <arm_cfft_q31+0x9c>
 8023f5a:	d915      	bls.n	8023f88 <arm_cfft_q31+0xb8>
 8023f5c:	2380      	movs	r3, #128	@ 0x80
 8023f5e:	011b      	lsls	r3, r3, #4
 8023f60:	4299      	cmp	r1, r3
 8023f62:	d0f1      	beq.n	8023f48 <arm_cfft_q31+0x78>
 8023f64:	2380      	movs	r3, #128	@ 0x80
 8023f66:	015b      	lsls	r3, r3, #5
 8023f68:	4299      	cmp	r1, r3
 8023f6a:	d1c8      	bne.n	8023efe <arm_cfft_q31+0x2e>
 8023f6c:	2301      	movs	r3, #1
 8023f6e:	6862      	ldr	r2, [r4, #4]
 8023f70:	0028      	movs	r0, r5
 8023f72:	f000 fab7 	bl	80244e4 <arm_radix4_butterfly_inverse_q31>
 8023f76:	e7c2      	b.n	8023efe <arm_cfft_q31+0x2e>
 8023f78:	2380      	movs	r3, #128	@ 0x80
 8023f7a:	009b      	lsls	r3, r3, #2
 8023f7c:	4299      	cmp	r1, r3
 8023f7e:	d0ba      	beq.n	8023ef6 <arm_cfft_q31+0x26>
 8023f80:	e7bd      	b.n	8023efe <arm_cfft_q31+0x2e>
 8023f82:	2910      	cmp	r1, #16
 8023f84:	d1bb      	bne.n	8023efe <arm_cfft_q31+0x2e>
 8023f86:	e7cf      	b.n	8023f28 <arm_cfft_q31+0x58>
 8023f88:	2380      	movs	r3, #128	@ 0x80
 8023f8a:	009b      	lsls	r3, r3, #2
 8023f8c:	4299      	cmp	r1, r3
 8023f8e:	d0db      	beq.n	8023f48 <arm_cfft_q31+0x78>
 8023f90:	e7b5      	b.n	8023efe <arm_cfft_q31+0x2e>
 8023f92:	2910      	cmp	r1, #16
 8023f94:	d1b3      	bne.n	8023efe <arm_cfft_q31+0x2e>
 8023f96:	e7e9      	b.n	8023f6c <arm_cfft_q31+0x9c>

08023f98 <arm_radix4_butterfly_q31>:
 8023f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f9a:	464d      	mov	r5, r9
 8023f9c:	4644      	mov	r4, r8
 8023f9e:	465f      	mov	r7, fp
 8023fa0:	4656      	mov	r6, sl
 8023fa2:	469c      	mov	ip, r3
 8023fa4:	b4f0      	push	{r4, r5, r6, r7}
 8023fa6:	b0a7      	sub	sp, #156	@ 0x9c
 8023fa8:	9114      	str	r1, [sp, #80]	@ 0x50
 8023faa:	0889      	lsrs	r1, r1, #2
 8023fac:	9310      	str	r3, [sp, #64]	@ 0x40
 8023fae:	00cb      	lsls	r3, r1, #3
 8023fb0:	0015      	movs	r5, r2
 8023fb2:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023fb4:	18c2      	adds	r2, r0, r3
 8023fb6:	000c      	movs	r4, r1
 8023fb8:	469a      	mov	sl, r3
 8023fba:	9124      	str	r1, [sp, #144]	@ 0x90
 8023fbc:	18d1      	adds	r1, r2, r3
 8023fbe:	4663      	mov	r3, ip
 8023fc0:	468b      	mov	fp, r1
 8023fc2:	0119      	lsls	r1, r3, #4
 8023fc4:	910d      	str	r1, [sp, #52]	@ 0x34
 8023fc6:	00d9      	lsls	r1, r3, #3
 8023fc8:	005b      	lsls	r3, r3, #1
 8023fca:	4463      	add	r3, ip
 8023fcc:	910e      	str	r1, [sp, #56]	@ 0x38
 8023fce:	00d9      	lsls	r1, r3, #3
 8023fd0:	465b      	mov	r3, fp
 8023fd2:	44da      	add	sl, fp
 8023fd4:	4690      	mov	r8, r2
 8023fd6:	4683      	mov	fp, r0
 8023fd8:	4699      	mov	r9, r3
 8023fda:	9022      	str	r0, [sp, #136]	@ 0x88
 8023fdc:	9025      	str	r0, [sp, #148]	@ 0x94
 8023fde:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023fe0:	9502      	str	r5, [sp, #8]
 8023fe2:	9500      	str	r5, [sp, #0]
 8023fe4:	9501      	str	r5, [sp, #4]
 8023fe6:	9407      	str	r4, [sp, #28]
 8023fe8:	465b      	mov	r3, fp
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	4642      	mov	r2, r8
 8023fee:	111c      	asrs	r4, r3, #4
 8023ff0:	464b      	mov	r3, r9
 8023ff2:	4658      	mov	r0, fp
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	6812      	ldr	r2, [r2, #0]
 8023ff8:	111b      	asrs	r3, r3, #4
 8023ffa:	18e7      	adds	r7, r4, r3
 8023ffc:	1ae3      	subs	r3, r4, r3
 8023ffe:	1114      	asrs	r4, r2, #4
 8024000:	4652      	mov	r2, sl
 8024002:	6840      	ldr	r0, [r0, #4]
 8024004:	6812      	ldr	r2, [r2, #0]
 8024006:	1105      	asrs	r5, r0, #4
 8024008:	4648      	mov	r0, r9
 802400a:	9303      	str	r3, [sp, #12]
 802400c:	1113      	asrs	r3, r2, #4
 802400e:	18e2      	adds	r2, r4, r3
 8024010:	465c      	mov	r4, fp
 8024012:	6840      	ldr	r0, [r0, #4]
 8024014:	1103      	asrs	r3, r0, #4
 8024016:	18ee      	adds	r6, r5, r3
 8024018:	1ae8      	subs	r0, r5, r3
 802401a:	18bb      	adds	r3, r7, r2
 802401c:	6023      	str	r3, [r4, #0]
 802401e:	4644      	mov	r4, r8
 8024020:	6864      	ldr	r4, [r4, #4]
 8024022:	9004      	str	r0, [sp, #16]
 8024024:	1125      	asrs	r5, r4, #4
 8024026:	4654      	mov	r4, sl
 8024028:	6864      	ldr	r4, [r4, #4]
 802402a:	1123      	asrs	r3, r4, #4
 802402c:	465c      	mov	r4, fp
 802402e:	18eb      	adds	r3, r5, r3
 8024030:	18f1      	adds	r1, r6, r3
 8024032:	6061      	str	r1, [r4, #4]
 8024034:	4655      	mov	r5, sl
 8024036:	4644      	mov	r4, r8
 8024038:	686d      	ldr	r5, [r5, #4]
 802403a:	6864      	ldr	r4, [r4, #4]
 802403c:	1129      	asrs	r1, r5, #4
 802403e:	1124      	asrs	r4, r4, #4
 8024040:	1a64      	subs	r4, r4, r1
 8024042:	4641      	mov	r1, r8
 8024044:	6809      	ldr	r1, [r1, #0]
 8024046:	9405      	str	r4, [sp, #20]
 8024048:	1108      	asrs	r0, r1, #4
 802404a:	4651      	mov	r1, sl
 802404c:	6809      	ldr	r1, [r1, #0]
 802404e:	1abc      	subs	r4, r7, r2
 8024050:	1109      	asrs	r1, r1, #4
 8024052:	1a41      	subs	r1, r0, r1
 8024054:	17e2      	asrs	r2, r4, #31
 8024056:	9106      	str	r1, [sp, #24]
 8024058:	0011      	movs	r1, r2
 802405a:	9a01      	ldr	r2, [sp, #4]
 802405c:	9108      	str	r1, [sp, #32]
 802405e:	6817      	ldr	r7, [r2, #0]
 8024060:	17fd      	asrs	r5, r7, #31
 8024062:	0028      	movs	r0, r5
 8024064:	1af5      	subs	r5, r6, r3
 8024066:	17ee      	asrs	r6, r5, #31
 8024068:	960a      	str	r6, [sp, #40]	@ 0x28
 802406a:	6856      	ldr	r6, [r2, #4]
 802406c:	9009      	str	r0, [sp, #36]	@ 0x24
 802406e:	17f3      	asrs	r3, r6, #31
 8024070:	003a      	movs	r2, r7
 8024072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024074:	0003      	movs	r3, r0
 8024076:	0020      	movs	r0, r4
 8024078:	f7dc faa2 	bl	80005c0 <__aeabi_lmul>
 802407c:	0032      	movs	r2, r6
 802407e:	17f3      	asrs	r3, r6, #31
 8024080:	910c      	str	r1, [sp, #48]	@ 0x30
 8024082:	0028      	movs	r0, r5
 8024084:	17e9      	asrs	r1, r5, #31
 8024086:	f7dc fa9b 	bl	80005c0 <__aeabi_lmul>
 802408a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802408c:	002a      	movs	r2, r5
 802408e:	4684      	mov	ip, r0
 8024090:	4640      	mov	r0, r8
 8024092:	4461      	add	r1, ip
 8024094:	0049      	lsls	r1, r1, #1
 8024096:	6001      	str	r1, [r0, #0]
 8024098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802409a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802409c:	0038      	movs	r0, r7
 802409e:	f7dc fa8f 	bl	80005c0 <__aeabi_lmul>
 80240a2:	0032      	movs	r2, r6
 80240a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80240a6:	000d      	movs	r5, r1
 80240a8:	0020      	movs	r0, r4
 80240aa:	9908      	ldr	r1, [sp, #32]
 80240ac:	f7dc fa88 	bl	80005c0 <__aeabi_lmul>
 80240b0:	4646      	mov	r6, r8
 80240b2:	1a6d      	subs	r5, r5, r1
 80240b4:	006d      	lsls	r5, r5, #1
 80240b6:	6075      	str	r5, [r6, #4]
 80240b8:	9903      	ldr	r1, [sp, #12]
 80240ba:	9d05      	ldr	r5, [sp, #20]
 80240bc:	000c      	movs	r4, r1
 80240be:	46ac      	mov	ip, r5
 80240c0:	4464      	add	r4, ip
 80240c2:	17e6      	asrs	r6, r4, #31
 80240c4:	0031      	movs	r1, r6
 80240c6:	9b00      	ldr	r3, [sp, #0]
 80240c8:	9804      	ldr	r0, [sp, #16]
 80240ca:	681e      	ldr	r6, [r3, #0]
 80240cc:	17f7      	asrs	r7, r6, #31
 80240ce:	9709      	str	r7, [sp, #36]	@ 0x24
 80240d0:	9f06      	ldr	r7, [sp, #24]
 80240d2:	0032      	movs	r2, r6
 80240d4:	1bc7      	subs	r7, r0, r7
 80240d6:	17fd      	asrs	r5, r7, #31
 80240d8:	950a      	str	r5, [sp, #40]	@ 0x28
 80240da:	685d      	ldr	r5, [r3, #4]
 80240dc:	17f3      	asrs	r3, r6, #31
 80240de:	17e8      	asrs	r0, r5, #31
 80240e0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80240e2:	0020      	movs	r0, r4
 80240e4:	9108      	str	r1, [sp, #32]
 80240e6:	f7dc fa6b 	bl	80005c0 <__aeabi_lmul>
 80240ea:	002a      	movs	r2, r5
 80240ec:	17eb      	asrs	r3, r5, #31
 80240ee:	910c      	str	r1, [sp, #48]	@ 0x30
 80240f0:	0038      	movs	r0, r7
 80240f2:	17f9      	asrs	r1, r7, #31
 80240f4:	f7dc fa64 	bl	80005c0 <__aeabi_lmul>
 80240f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80240fa:	003a      	movs	r2, r7
 80240fc:	4684      	mov	ip, r0
 80240fe:	4648      	mov	r0, r9
 8024100:	4461      	add	r1, ip
 8024102:	0049      	lsls	r1, r1, #1
 8024104:	6001      	str	r1, [r0, #0]
 8024106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024108:	0030      	movs	r0, r6
 802410a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802410c:	f7dc fa58 	bl	80005c0 <__aeabi_lmul>
 8024110:	002a      	movs	r2, r5
 8024112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024114:	000e      	movs	r6, r1
 8024116:	0020      	movs	r0, r4
 8024118:	9908      	ldr	r1, [sp, #32]
 802411a:	f7dc fa51 	bl	80005c0 <__aeabi_lmul>
 802411e:	464c      	mov	r4, r9
 8024120:	9d05      	ldr	r5, [sp, #20]
 8024122:	1a76      	subs	r6, r6, r1
 8024124:	9903      	ldr	r1, [sp, #12]
 8024126:	0076      	lsls	r6, r6, #1
 8024128:	6066      	str	r6, [r4, #4]
 802412a:	1b4c      	subs	r4, r1, r5
 802412c:	9e06      	ldr	r6, [sp, #24]
 802412e:	17e1      	asrs	r1, r4, #31
 8024130:	9103      	str	r1, [sp, #12]
 8024132:	9902      	ldr	r1, [sp, #8]
 8024134:	46b4      	mov	ip, r6
 8024136:	680f      	ldr	r7, [r1, #0]
 8024138:	9804      	ldr	r0, [sp, #16]
 802413a:	17fd      	asrs	r5, r7, #31
 802413c:	002b      	movs	r3, r5
 802413e:	684e      	ldr	r6, [r1, #4]
 8024140:	4460      	add	r0, ip
 8024142:	0005      	movs	r5, r0
 8024144:	17c0      	asrs	r0, r0, #31
 8024146:	9005      	str	r0, [sp, #20]
 8024148:	17f0      	asrs	r0, r6, #31
 802414a:	9006      	str	r0, [sp, #24]
 802414c:	003a      	movs	r2, r7
 802414e:	0020      	movs	r0, r4
 8024150:	17e1      	asrs	r1, r4, #31
 8024152:	9304      	str	r3, [sp, #16]
 8024154:	f7dc fa34 	bl	80005c0 <__aeabi_lmul>
 8024158:	0032      	movs	r2, r6
 802415a:	9108      	str	r1, [sp, #32]
 802415c:	17f3      	asrs	r3, r6, #31
 802415e:	0028      	movs	r0, r5
 8024160:	17e9      	asrs	r1, r5, #31
 8024162:	f7dc fa2d 	bl	80005c0 <__aeabi_lmul>
 8024166:	9808      	ldr	r0, [sp, #32]
 8024168:	002a      	movs	r2, r5
 802416a:	4684      	mov	ip, r0
 802416c:	4650      	mov	r0, sl
 802416e:	4461      	add	r1, ip
 8024170:	0049      	lsls	r1, r1, #1
 8024172:	6001      	str	r1, [r0, #0]
 8024174:	9b05      	ldr	r3, [sp, #20]
 8024176:	9904      	ldr	r1, [sp, #16]
 8024178:	0038      	movs	r0, r7
 802417a:	f7dc fa21 	bl	80005c0 <__aeabi_lmul>
 802417e:	0020      	movs	r0, r4
 8024180:	2408      	movs	r4, #8
 8024182:	000d      	movs	r5, r1
 8024184:	0032      	movs	r2, r6
 8024186:	9b06      	ldr	r3, [sp, #24]
 8024188:	9903      	ldr	r1, [sp, #12]
 802418a:	f7dc fa19 	bl	80005c0 <__aeabi_lmul>
 802418e:	46a4      	mov	ip, r4
 8024190:	4650      	mov	r0, sl
 8024192:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024194:	44e3      	add	fp, ip
 8024196:	44e0      	add	r8, ip
 8024198:	44e1      	add	r9, ip
 802419a:	44e2      	add	sl, ip
 802419c:	46a4      	mov	ip, r4
 802419e:	1a6d      	subs	r5, r5, r1
 80241a0:	006d      	lsls	r5, r5, #1
 80241a2:	9a01      	ldr	r2, [sp, #4]
 80241a4:	6045      	str	r5, [r0, #4]
 80241a6:	9807      	ldr	r0, [sp, #28]
 80241a8:	4462      	add	r2, ip
 80241aa:	3801      	subs	r0, #1
 80241ac:	9201      	str	r2, [sp, #4]
 80241ae:	9007      	str	r0, [sp, #28]
 80241b0:	9b00      	ldr	r3, [sp, #0]
 80241b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241b4:	9902      	ldr	r1, [sp, #8]
 80241b6:	4694      	mov	ip, r2
 80241b8:	4463      	add	r3, ip
 80241ba:	9300      	str	r3, [sp, #0]
 80241bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241be:	469c      	mov	ip, r3
 80241c0:	4461      	add	r1, ip
 80241c2:	9102      	str	r1, [sp, #8]
 80241c4:	2800      	cmp	r0, #0
 80241c6:	d000      	beq.n	80241ca <arm_radix4_butterfly_q31+0x232>
 80241c8:	e70e      	b.n	8023fe8 <arm_radix4_butterfly_q31+0x50>
 80241ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241cc:	009b      	lsls	r3, r3, #2
 80241ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 80241d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80241d2:	9320      	str	r3, [sp, #128]	@ 0x80
 80241d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80241d6:	2b04      	cmp	r3, #4
 80241d8:	d800      	bhi.n	80241dc <arm_radix4_butterfly_q31+0x244>
 80241da:	e180      	b.n	80244de <arm_radix4_butterfly_q31+0x546>
 80241dc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80241de:	0893      	lsrs	r3, r2, #2
 80241e0:	1e59      	subs	r1, r3, #1
 80241e2:	9321      	str	r3, [sp, #132]	@ 0x84
 80241e4:	00db      	lsls	r3, r3, #3
 80241e6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80241e8:	00d3      	lsls	r3, r2, #3
 80241ea:	9300      	str	r3, [sp, #0]
 80241ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80241ee:	911a      	str	r1, [sp, #104]	@ 0x68
 80241f0:	00da      	lsls	r2, r3, #3
 80241f2:	921e      	str	r2, [sp, #120]	@ 0x78
 80241f4:	011a      	lsls	r2, r3, #4
 80241f6:	921d      	str	r2, [sp, #116]	@ 0x74
 80241f8:	001a      	movs	r2, r3
 80241fa:	4694      	mov	ip, r2
 80241fc:	005b      	lsls	r3, r3, #1
 80241fe:	4463      	add	r3, ip
 8024200:	00db      	lsls	r3, r3, #3
 8024202:	931c      	str	r3, [sp, #112]	@ 0x70
 8024204:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024206:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024208:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802420a:	9318      	str	r3, [sp, #96]	@ 0x60
 802420c:	9319      	str	r3, [sp, #100]	@ 0x64
 802420e:	9316      	str	r3, [sp, #88]	@ 0x58
 8024210:	2300      	movs	r3, #0
 8024212:	9315      	str	r3, [sp, #84]	@ 0x54
 8024214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024216:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024218:	681a      	ldr	r2, [r3, #0]
 802421a:	685b      	ldr	r3, [r3, #4]
 802421c:	9205      	str	r2, [sp, #20]
 802421e:	9306      	str	r3, [sp, #24]
 8024220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024222:	468c      	mov	ip, r1
 8024224:	681a      	ldr	r2, [r3, #0]
 8024226:	685b      	ldr	r3, [r3, #4]
 8024228:	9207      	str	r2, [sp, #28]
 802422a:	9308      	str	r3, [sp, #32]
 802422c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802422e:	681a      	ldr	r2, [r3, #0]
 8024230:	685b      	ldr	r3, [r3, #4]
 8024232:	9209      	str	r2, [sp, #36]	@ 0x24
 8024234:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024236:	930a      	str	r3, [sp, #40]	@ 0x28
 8024238:	0013      	movs	r3, r2
 802423a:	4463      	add	r3, ip
 802423c:	4698      	mov	r8, r3
 802423e:	0013      	movs	r3, r2
 8024240:	4442      	add	r2, r8
 8024242:	4691      	mov	r9, r2
 8024244:	001a      	movs	r2, r3
 8024246:	444a      	add	r2, r9
 8024248:	4692      	mov	sl, r2
 802424a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802424c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802424e:	4293      	cmp	r3, r2
 8024250:	d800      	bhi.n	8024254 <arm_radix4_butterfly_q31+0x2bc>
 8024252:	e0dd      	b.n	8024410 <arm_radix4_butterfly_q31+0x478>
 8024254:	4694      	mov	ip, r2
 8024256:	468b      	mov	fp, r1
 8024258:	4644      	mov	r4, r8
 802425a:	4655      	mov	r5, sl
 802425c:	9b07      	ldr	r3, [sp, #28]
 802425e:	17db      	asrs	r3, r3, #31
 8024260:	930c      	str	r3, [sp, #48]	@ 0x30
 8024262:	9b08      	ldr	r3, [sp, #32]
 8024264:	17db      	asrs	r3, r3, #31
 8024266:	930d      	str	r3, [sp, #52]	@ 0x34
 8024268:	9b05      	ldr	r3, [sp, #20]
 802426a:	17db      	asrs	r3, r3, #31
 802426c:	930e      	str	r3, [sp, #56]	@ 0x38
 802426e:	9b06      	ldr	r3, [sp, #24]
 8024270:	17db      	asrs	r3, r3, #31
 8024272:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024276:	17db      	asrs	r3, r3, #31
 8024278:	9310      	str	r3, [sp, #64]	@ 0x40
 802427a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802427c:	17db      	asrs	r3, r3, #31
 802427e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024280:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024282:	4463      	add	r3, ip
 8024284:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024286:	465b      	mov	r3, fp
 8024288:	4659      	mov	r1, fp
 802428a:	681a      	ldr	r2, [r3, #0]
 802428c:	464b      	mov	r3, r9
 802428e:	684f      	ldr	r7, [r1, #4]
 8024290:	4649      	mov	r1, r9
 8024292:	681b      	ldr	r3, [r3, #0]
 8024294:	18d6      	adds	r6, r2, r3
 8024296:	1ad3      	subs	r3, r2, r3
 8024298:	9301      	str	r3, [sp, #4]
 802429a:	684b      	ldr	r3, [r1, #4]
 802429c:	18f8      	adds	r0, r7, r3
 802429e:	1af9      	subs	r1, r7, r3
 80242a0:	6827      	ldr	r7, [r4, #0]
 80242a2:	9102      	str	r1, [sp, #8]
 80242a4:	003a      	movs	r2, r7
 80242a6:	682f      	ldr	r7, [r5, #0]
 80242a8:	46bc      	mov	ip, r7
 80242aa:	465f      	mov	r7, fp
 80242ac:	4462      	add	r2, ip
 80242ae:	18b3      	adds	r3, r6, r2
 80242b0:	109b      	asrs	r3, r3, #2
 80242b2:	603b      	str	r3, [r7, #0]
 80242b4:	6867      	ldr	r7, [r4, #4]
 80242b6:	1ab6      	subs	r6, r6, r2
 80242b8:	46b8      	mov	r8, r7
 80242ba:	686f      	ldr	r7, [r5, #4]
 80242bc:	17f2      	asrs	r2, r6, #31
 80242be:	46bc      	mov	ip, r7
 80242c0:	44e0      	add	r8, ip
 80242c2:	4643      	mov	r3, r8
 80242c4:	465f      	mov	r7, fp
 80242c6:	18c1      	adds	r1, r0, r3
 80242c8:	1089      	asrs	r1, r1, #2
 80242ca:	6079      	str	r1, [r7, #4]
 80242cc:	9900      	ldr	r1, [sp, #0]
 80242ce:	4690      	mov	r8, r2
 80242d0:	468c      	mov	ip, r1
 80242d2:	6867      	ldr	r7, [r4, #4]
 80242d4:	6869      	ldr	r1, [r5, #4]
 80242d6:	44e3      	add	fp, ip
 80242d8:	1a7f      	subs	r7, r7, r1
 80242da:	9703      	str	r7, [sp, #12]
 80242dc:	6829      	ldr	r1, [r5, #0]
 80242de:	6827      	ldr	r7, [r4, #0]
 80242e0:	1a7f      	subs	r7, r7, r1
 80242e2:	9704      	str	r7, [sp, #16]
 80242e4:	1ac7      	subs	r7, r0, r3
 80242e6:	17fa      	asrs	r2, r7, #31
 80242e8:	4692      	mov	sl, r2
 80242ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242ec:	9a07      	ldr	r2, [sp, #28]
 80242ee:	0030      	movs	r0, r6
 80242f0:	4641      	mov	r1, r8
 80242f2:	f7dc f965 	bl	80005c0 <__aeabi_lmul>
 80242f6:	9a08      	ldr	r2, [sp, #32]
 80242f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242fa:	9112      	str	r1, [sp, #72]	@ 0x48
 80242fc:	0038      	movs	r0, r7
 80242fe:	4651      	mov	r1, sl
 8024300:	f7dc f95e 	bl	80005c0 <__aeabi_lmul>
 8024304:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024306:	9a07      	ldr	r2, [sp, #28]
 8024308:	4684      	mov	ip, r0
 802430a:	4461      	add	r1, ip
 802430c:	1049      	asrs	r1, r1, #1
 802430e:	6021      	str	r1, [r4, #0]
 8024310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024312:	0038      	movs	r0, r7
 8024314:	4651      	mov	r1, sl
 8024316:	f7dc f953 	bl	80005c0 <__aeabi_lmul>
 802431a:	9a08      	ldr	r2, [sp, #32]
 802431c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802431e:	000f      	movs	r7, r1
 8024320:	0030      	movs	r0, r6
 8024322:	4641      	mov	r1, r8
 8024324:	f7dc f94c 	bl	80005c0 <__aeabi_lmul>
 8024328:	9b00      	ldr	r3, [sp, #0]
 802432a:	9a01      	ldr	r2, [sp, #4]
 802432c:	469c      	mov	ip, r3
 802432e:	9803      	ldr	r0, [sp, #12]
 8024330:	1a7f      	subs	r7, r7, r1
 8024332:	107f      	asrs	r7, r7, #1
 8024334:	6067      	str	r7, [r4, #4]
 8024336:	0016      	movs	r6, r2
 8024338:	4464      	add	r4, ip
 802433a:	4684      	mov	ip, r0
 802433c:	4466      	add	r6, ip
 802433e:	17f2      	asrs	r2, r6, #31
 8024340:	4690      	mov	r8, r2
 8024342:	9902      	ldr	r1, [sp, #8]
 8024344:	9f04      	ldr	r7, [sp, #16]
 8024346:	0030      	movs	r0, r6
 8024348:	1bcf      	subs	r7, r1, r7
 802434a:	17fa      	asrs	r2, r7, #31
 802434c:	4692      	mov	sl, r2
 802434e:	4641      	mov	r1, r8
 8024350:	9a05      	ldr	r2, [sp, #20]
 8024352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024354:	f7dc f934 	bl	80005c0 <__aeabi_lmul>
 8024358:	9a06      	ldr	r2, [sp, #24]
 802435a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802435c:	9112      	str	r1, [sp, #72]	@ 0x48
 802435e:	0038      	movs	r0, r7
 8024360:	4651      	mov	r1, sl
 8024362:	f7dc f92d 	bl	80005c0 <__aeabi_lmul>
 8024366:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024368:	9a05      	ldr	r2, [sp, #20]
 802436a:	4684      	mov	ip, r0
 802436c:	4648      	mov	r0, r9
 802436e:	4461      	add	r1, ip
 8024370:	1049      	asrs	r1, r1, #1
 8024372:	6001      	str	r1, [r0, #0]
 8024374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024376:	0038      	movs	r0, r7
 8024378:	4651      	mov	r1, sl
 802437a:	f7dc f921 	bl	80005c0 <__aeabi_lmul>
 802437e:	9a06      	ldr	r2, [sp, #24]
 8024380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024382:	000f      	movs	r7, r1
 8024384:	0030      	movs	r0, r6
 8024386:	4641      	mov	r1, r8
 8024388:	f7dc f91a 	bl	80005c0 <__aeabi_lmul>
 802438c:	464e      	mov	r6, r9
 802438e:	9a00      	ldr	r2, [sp, #0]
 8024390:	9b01      	ldr	r3, [sp, #4]
 8024392:	4694      	mov	ip, r2
 8024394:	9803      	ldr	r0, [sp, #12]
 8024396:	1a7f      	subs	r7, r7, r1
 8024398:	107f      	asrs	r7, r7, #1
 802439a:	6077      	str	r7, [r6, #4]
 802439c:	1a1e      	subs	r6, r3, r0
 802439e:	9b04      	ldr	r3, [sp, #16]
 80243a0:	44e1      	add	r9, ip
 80243a2:	469c      	mov	ip, r3
 80243a4:	17f0      	asrs	r0, r6, #31
 80243a6:	4680      	mov	r8, r0
 80243a8:	9902      	ldr	r1, [sp, #8]
 80243aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80243ac:	4461      	add	r1, ip
 80243ae:	17cb      	asrs	r3, r1, #31
 80243b0:	000f      	movs	r7, r1
 80243b2:	469a      	mov	sl, r3
 80243b4:	0030      	movs	r0, r6
 80243b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80243b8:	4641      	mov	r1, r8
 80243ba:	f7dc f901 	bl	80005c0 <__aeabi_lmul>
 80243be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243c2:	9101      	str	r1, [sp, #4]
 80243c4:	0038      	movs	r0, r7
 80243c6:	4651      	mov	r1, sl
 80243c8:	f7dc f8fa 	bl	80005c0 <__aeabi_lmul>
 80243cc:	9801      	ldr	r0, [sp, #4]
 80243ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80243d0:	4684      	mov	ip, r0
 80243d2:	4461      	add	r1, ip
 80243d4:	1049      	asrs	r1, r1, #1
 80243d6:	6029      	str	r1, [r5, #0]
 80243d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80243da:	0038      	movs	r0, r7
 80243dc:	4651      	mov	r1, sl
 80243de:	f7dc f8ef 	bl	80005c0 <__aeabi_lmul>
 80243e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243e4:	000f      	movs	r7, r1
 80243e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243e8:	0030      	movs	r0, r6
 80243ea:	4641      	mov	r1, r8
 80243ec:	f7dc f8e8 	bl	80005c0 <__aeabi_lmul>
 80243f0:	1a7f      	subs	r7, r7, r1
 80243f2:	107f      	asrs	r7, r7, #1
 80243f4:	606f      	str	r7, [r5, #4]
 80243f6:	9a00      	ldr	r2, [sp, #0]
 80243f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80243fa:	4694      	mov	ip, r2
 80243fc:	4465      	add	r5, ip
 80243fe:	468c      	mov	ip, r1
 8024400:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024402:	0013      	movs	r3, r2
 8024404:	4462      	add	r2, ip
 8024406:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024408:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802440a:	429a      	cmp	r2, r3
 802440c:	d900      	bls.n	8024410 <arm_radix4_butterfly_q31+0x478>
 802440e:	e73a      	b.n	8024286 <arm_radix4_butterfly_q31+0x2ee>
 8024410:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024412:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024414:	468c      	mov	ip, r1
 8024416:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024418:	4462      	add	r2, ip
 802441a:	468c      	mov	ip, r1
 802441c:	9216      	str	r2, [sp, #88]	@ 0x58
 802441e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024420:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024422:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024424:	4462      	add	r2, ip
 8024426:	468c      	mov	ip, r1
 8024428:	9219      	str	r2, [sp, #100]	@ 0x64
 802442a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802442c:	3301      	adds	r3, #1
 802442e:	4462      	add	r2, ip
 8024430:	9218      	str	r2, [sp, #96]	@ 0x60
 8024432:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024434:	9315      	str	r3, [sp, #84]	@ 0x54
 8024436:	3208      	adds	r2, #8
 8024438:	9217      	str	r2, [sp, #92]	@ 0x5c
 802443a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802443c:	4293      	cmp	r3, r2
 802443e:	d800      	bhi.n	8024442 <arm_radix4_butterfly_q31+0x4aa>
 8024440:	e6e8      	b.n	8024214 <arm_radix4_butterfly_q31+0x27c>
 8024442:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024444:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024446:	009b      	lsls	r3, r3, #2
 8024448:	931f      	str	r3, [sp, #124]	@ 0x7c
 802444a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802444c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802444e:	089b      	lsrs	r3, r3, #2
 8024450:	9320      	str	r3, [sp, #128]	@ 0x80
 8024452:	2b04      	cmp	r3, #4
 8024454:	d900      	bls.n	8024458 <arm_radix4_butterfly_q31+0x4c0>
 8024456:	e6c1      	b.n	80241dc <arm_radix4_butterfly_q31+0x244>
 8024458:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802445a:	469a      	mov	sl, r3
 802445c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802445e:	691c      	ldr	r4, [r3, #16]
 8024460:	685a      	ldr	r2, [r3, #4]
 8024462:	46a1      	mov	r9, r4
 8024464:	4690      	mov	r8, r2
 8024466:	6819      	ldr	r1, [r3, #0]
 8024468:	689a      	ldr	r2, [r3, #8]
 802446a:	699f      	ldr	r7, [r3, #24]
 802446c:	188d      	adds	r5, r1, r2
 802446e:	444d      	add	r5, r9
 8024470:	19ed      	adds	r5, r5, r7
 8024472:	69de      	ldr	r6, [r3, #28]
 8024474:	601d      	str	r5, [r3, #0]
 8024476:	4645      	mov	r5, r8
 8024478:	46b4      	mov	ip, r6
 802447a:	68d8      	ldr	r0, [r3, #12]
 802447c:	695c      	ldr	r4, [r3, #20]
 802447e:	182d      	adds	r5, r5, r0
 8024480:	192d      	adds	r5, r5, r4
 8024482:	4465      	add	r5, ip
 8024484:	605d      	str	r5, [r3, #4]
 8024486:	1a8d      	subs	r5, r1, r2
 8024488:	444d      	add	r5, r9
 802448a:	1bed      	subs	r5, r5, r7
 802448c:	609d      	str	r5, [r3, #8]
 802448e:	4645      	mov	r5, r8
 8024490:	1a2d      	subs	r5, r5, r0
 8024492:	192d      	adds	r5, r5, r4
 8024494:	1bad      	subs	r5, r5, r6
 8024496:	464e      	mov	r6, r9
 8024498:	60dd      	str	r5, [r3, #12]
 802449a:	180d      	adds	r5, r1, r0
 802449c:	1bad      	subs	r5, r5, r6
 802449e:	4666      	mov	r6, ip
 80244a0:	1bad      	subs	r5, r5, r6
 80244a2:	611d      	str	r5, [r3, #16]
 80244a4:	4645      	mov	r5, r8
 80244a6:	1aad      	subs	r5, r5, r2
 80244a8:	4442      	add	r2, r8
 80244aa:	1b12      	subs	r2, r2, r4
 80244ac:	1bd2      	subs	r2, r2, r7
 80244ae:	1a08      	subs	r0, r1, r0
 80244b0:	61da      	str	r2, [r3, #28]
 80244b2:	4649      	mov	r1, r9
 80244b4:	2201      	movs	r2, #1
 80244b6:	1a41      	subs	r1, r0, r1
 80244b8:	4252      	negs	r2, r2
 80244ba:	4461      	add	r1, ip
 80244bc:	4694      	mov	ip, r2
 80244be:	44e2      	add	sl, ip
 80244c0:	4652      	mov	r2, sl
 80244c2:	1b2d      	subs	r5, r5, r4
 80244c4:	19ed      	adds	r5, r5, r7
 80244c6:	615d      	str	r5, [r3, #20]
 80244c8:	6199      	str	r1, [r3, #24]
 80244ca:	3320      	adds	r3, #32
 80244cc:	2a00      	cmp	r2, #0
 80244ce:	d1c6      	bne.n	802445e <arm_radix4_butterfly_q31+0x4c6>
 80244d0:	b027      	add	sp, #156	@ 0x9c
 80244d2:	bc3c      	pop	{r2, r3, r4, r5}
 80244d4:	4690      	mov	r8, r2
 80244d6:	4699      	mov	r9, r3
 80244d8:	46a2      	mov	sl, r4
 80244da:	46ab      	mov	fp, r5
 80244dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80244de:	469a      	mov	sl, r3
 80244e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80244e2:	e7bc      	b.n	802445e <arm_radix4_butterfly_q31+0x4c6>

080244e4 <arm_radix4_butterfly_inverse_q31>:
 80244e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244e6:	464d      	mov	r5, r9
 80244e8:	4644      	mov	r4, r8
 80244ea:	465f      	mov	r7, fp
 80244ec:	4656      	mov	r6, sl
 80244ee:	b4f0      	push	{r4, r5, r6, r7}
 80244f0:	b0a7      	sub	sp, #156	@ 0x9c
 80244f2:	469c      	mov	ip, r3
 80244f4:	9114      	str	r1, [sp, #80]	@ 0x50
 80244f6:	0889      	lsrs	r1, r1, #2
 80244f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80244fa:	00cb      	lsls	r3, r1, #3
 80244fc:	0015      	movs	r5, r2
 80244fe:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024500:	18c2      	adds	r2, r0, r3
 8024502:	000c      	movs	r4, r1
 8024504:	9124      	str	r1, [sp, #144]	@ 0x90
 8024506:	18d1      	adds	r1, r2, r3
 8024508:	468b      	mov	fp, r1
 802450a:	469a      	mov	sl, r3
 802450c:	4663      	mov	r3, ip
 802450e:	44da      	add	sl, fp
 8024510:	46d0      	mov	r8, sl
 8024512:	4681      	mov	r9, r0
 8024514:	4692      	mov	sl, r2
 8024516:	0119      	lsls	r1, r3, #4
 8024518:	910d      	str	r1, [sp, #52]	@ 0x34
 802451a:	00d9      	lsls	r1, r3, #3
 802451c:	005b      	lsls	r3, r3, #1
 802451e:	4463      	add	r3, ip
 8024520:	910e      	str	r1, [sp, #56]	@ 0x38
 8024522:	00d9      	lsls	r1, r3, #3
 8024524:	9022      	str	r0, [sp, #136]	@ 0x88
 8024526:	9025      	str	r0, [sp, #148]	@ 0x94
 8024528:	910f      	str	r1, [sp, #60]	@ 0x3c
 802452a:	9502      	str	r5, [sp, #8]
 802452c:	9500      	str	r5, [sp, #0]
 802452e:	9501      	str	r5, [sp, #4]
 8024530:	9409      	str	r4, [sp, #36]	@ 0x24
 8024532:	464b      	mov	r3, r9
 8024534:	681b      	ldr	r3, [r3, #0]
 8024536:	4652      	mov	r2, sl
 8024538:	111c      	asrs	r4, r3, #4
 802453a:	465b      	mov	r3, fp
 802453c:	4648      	mov	r0, r9
 802453e:	681b      	ldr	r3, [r3, #0]
 8024540:	6812      	ldr	r2, [r2, #0]
 8024542:	6840      	ldr	r0, [r0, #4]
 8024544:	111b      	asrs	r3, r3, #4
 8024546:	18e7      	adds	r7, r4, r3
 8024548:	1ae3      	subs	r3, r4, r3
 802454a:	1114      	asrs	r4, r2, #4
 802454c:	4642      	mov	r2, r8
 802454e:	1105      	asrs	r5, r0, #4
 8024550:	4658      	mov	r0, fp
 8024552:	6812      	ldr	r2, [r2, #0]
 8024554:	6840      	ldr	r0, [r0, #4]
 8024556:	9303      	str	r3, [sp, #12]
 8024558:	1113      	asrs	r3, r2, #4
 802455a:	18e2      	adds	r2, r4, r3
 802455c:	1103      	asrs	r3, r0, #4
 802455e:	18ee      	adds	r6, r5, r3
 8024560:	1ae8      	subs	r0, r5, r3
 8024562:	464d      	mov	r5, r9
 8024564:	18bb      	adds	r3, r7, r2
 8024566:	602b      	str	r3, [r5, #0]
 8024568:	4641      	mov	r1, r8
 802456a:	4655      	mov	r5, sl
 802456c:	6849      	ldr	r1, [r1, #4]
 802456e:	686d      	ldr	r5, [r5, #4]
 8024570:	110b      	asrs	r3, r1, #4
 8024572:	112d      	asrs	r5, r5, #4
 8024574:	18eb      	adds	r3, r5, r3
 8024576:	464d      	mov	r5, r9
 8024578:	18f1      	adds	r1, r6, r3
 802457a:	6069      	str	r1, [r5, #4]
 802457c:	4655      	mov	r5, sl
 802457e:	686d      	ldr	r5, [r5, #4]
 8024580:	9004      	str	r0, [sp, #16]
 8024582:	112c      	asrs	r4, r5, #4
 8024584:	4645      	mov	r5, r8
 8024586:	686d      	ldr	r5, [r5, #4]
 8024588:	1129      	asrs	r1, r5, #4
 802458a:	1a65      	subs	r5, r4, r1
 802458c:	4651      	mov	r1, sl
 802458e:	6809      	ldr	r1, [r1, #0]
 8024590:	1abc      	subs	r4, r7, r2
 8024592:	1108      	asrs	r0, r1, #4
 8024594:	4641      	mov	r1, r8
 8024596:	17e2      	asrs	r2, r4, #31
 8024598:	6809      	ldr	r1, [r1, #0]
 802459a:	9207      	str	r2, [sp, #28]
 802459c:	9a01      	ldr	r2, [sp, #4]
 802459e:	1109      	asrs	r1, r1, #4
 80245a0:	6817      	ldr	r7, [r2, #0]
 80245a2:	1a41      	subs	r1, r0, r1
 80245a4:	9106      	str	r1, [sp, #24]
 80245a6:	0039      	movs	r1, r7
 80245a8:	17ff      	asrs	r7, r7, #31
 80245aa:	0038      	movs	r0, r7
 80245ac:	9505      	str	r5, [sp, #20]
 80245ae:	1af5      	subs	r5, r6, r3
 80245b0:	17ef      	asrs	r7, r5, #31
 80245b2:	970b      	str	r7, [sp, #44]	@ 0x2c
 80245b4:	6857      	ldr	r7, [r2, #4]
 80245b6:	0003      	movs	r3, r0
 80245b8:	17fe      	asrs	r6, r7, #31
 80245ba:	000a      	movs	r2, r1
 80245bc:	9108      	str	r1, [sp, #32]
 80245be:	900a      	str	r0, [sp, #40]	@ 0x28
 80245c0:	17e1      	asrs	r1, r4, #31
 80245c2:	0020      	movs	r0, r4
 80245c4:	960c      	str	r6, [sp, #48]	@ 0x30
 80245c6:	f7db fffb 	bl	80005c0 <__aeabi_lmul>
 80245ca:	003a      	movs	r2, r7
 80245cc:	17fb      	asrs	r3, r7, #31
 80245ce:	000e      	movs	r6, r1
 80245d0:	0028      	movs	r0, r5
 80245d2:	17e9      	asrs	r1, r5, #31
 80245d4:	f7db fff4 	bl	80005c0 <__aeabi_lmul>
 80245d8:	4653      	mov	r3, sl
 80245da:	1a76      	subs	r6, r6, r1
 80245dc:	0076      	lsls	r6, r6, #1
 80245de:	601e      	str	r6, [r3, #0]
 80245e0:	002a      	movs	r2, r5
 80245e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80245e4:	9808      	ldr	r0, [sp, #32]
 80245e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80245e8:	f7db ffea 	bl	80005c0 <__aeabi_lmul>
 80245ec:	003a      	movs	r2, r7
 80245ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245f0:	000d      	movs	r5, r1
 80245f2:	0020      	movs	r0, r4
 80245f4:	9907      	ldr	r1, [sp, #28]
 80245f6:	f7db ffe3 	bl	80005c0 <__aeabi_lmul>
 80245fa:	4657      	mov	r7, sl
 80245fc:	186d      	adds	r5, r5, r1
 80245fe:	006d      	lsls	r5, r5, #1
 8024600:	607d      	str	r5, [r7, #4]
 8024602:	9b03      	ldr	r3, [sp, #12]
 8024604:	9e06      	ldr	r6, [sp, #24]
 8024606:	9d05      	ldr	r5, [sp, #20]
 8024608:	46b4      	mov	ip, r6
 802460a:	1b5d      	subs	r5, r3, r5
 802460c:	9b00      	ldr	r3, [sp, #0]
 802460e:	17ef      	asrs	r7, r5, #31
 8024610:	0039      	movs	r1, r7
 8024612:	681f      	ldr	r7, [r3, #0]
 8024614:	17fc      	asrs	r4, r7, #31
 8024616:	0020      	movs	r0, r4
 8024618:	9c04      	ldr	r4, [sp, #16]
 802461a:	4464      	add	r4, ip
 802461c:	17e6      	asrs	r6, r4, #31
 802461e:	9407      	str	r4, [sp, #28]
 8024620:	9608      	str	r6, [sp, #32]
 8024622:	685e      	ldr	r6, [r3, #4]
 8024624:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024626:	17f2      	asrs	r2, r6, #31
 8024628:	0003      	movs	r3, r0
 802462a:	920c      	str	r2, [sp, #48]	@ 0x30
 802462c:	0028      	movs	r0, r5
 802462e:	003a      	movs	r2, r7
 8024630:	910a      	str	r1, [sp, #40]	@ 0x28
 8024632:	f7db ffc5 	bl	80005c0 <__aeabi_lmul>
 8024636:	0032      	movs	r2, r6
 8024638:	17f3      	asrs	r3, r6, #31
 802463a:	9807      	ldr	r0, [sp, #28]
 802463c:	000c      	movs	r4, r1
 802463e:	9908      	ldr	r1, [sp, #32]
 8024640:	f7db ffbe 	bl	80005c0 <__aeabi_lmul>
 8024644:	4658      	mov	r0, fp
 8024646:	1a64      	subs	r4, r4, r1
 8024648:	0064      	lsls	r4, r4, #1
 802464a:	9a07      	ldr	r2, [sp, #28]
 802464c:	6004      	str	r4, [r0, #0]
 802464e:	9b08      	ldr	r3, [sp, #32]
 8024650:	0038      	movs	r0, r7
 8024652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024654:	f7db ffb4 	bl	80005c0 <__aeabi_lmul>
 8024658:	0032      	movs	r2, r6
 802465a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802465c:	000c      	movs	r4, r1
 802465e:	0028      	movs	r0, r5
 8024660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024662:	f7db ffad 	bl	80005c0 <__aeabi_lmul>
 8024666:	9d05      	ldr	r5, [sp, #20]
 8024668:	465f      	mov	r7, fp
 802466a:	46ac      	mov	ip, r5
 802466c:	1864      	adds	r4, r4, r1
 802466e:	9903      	ldr	r1, [sp, #12]
 8024670:	0064      	lsls	r4, r4, #1
 8024672:	4461      	add	r1, ip
 8024674:	607c      	str	r4, [r7, #4]
 8024676:	000c      	movs	r4, r1
 8024678:	17c9      	asrs	r1, r1, #31
 802467a:	9105      	str	r1, [sp, #20]
 802467c:	9902      	ldr	r1, [sp, #8]
 802467e:	9804      	ldr	r0, [sp, #16]
 8024680:	680d      	ldr	r5, [r1, #0]
 8024682:	9e06      	ldr	r6, [sp, #24]
 8024684:	002b      	movs	r3, r5
 8024686:	17ed      	asrs	r5, r5, #31
 8024688:	684f      	ldr	r7, [r1, #4]
 802468a:	9503      	str	r5, [sp, #12]
 802468c:	1b85      	subs	r5, r0, r6
 802468e:	17e8      	asrs	r0, r5, #31
 8024690:	001a      	movs	r2, r3
 8024692:	9006      	str	r0, [sp, #24]
 8024694:	17fe      	asrs	r6, r7, #31
 8024696:	9304      	str	r3, [sp, #16]
 8024698:	0020      	movs	r0, r4
 802469a:	9b03      	ldr	r3, [sp, #12]
 802469c:	17e1      	asrs	r1, r4, #31
 802469e:	9607      	str	r6, [sp, #28]
 80246a0:	f7db ff8e 	bl	80005c0 <__aeabi_lmul>
 80246a4:	003a      	movs	r2, r7
 80246a6:	000e      	movs	r6, r1
 80246a8:	17fb      	asrs	r3, r7, #31
 80246aa:	0028      	movs	r0, r5
 80246ac:	17e9      	asrs	r1, r5, #31
 80246ae:	f7db ff87 	bl	80005c0 <__aeabi_lmul>
 80246b2:	4640      	mov	r0, r8
 80246b4:	1a76      	subs	r6, r6, r1
 80246b6:	0076      	lsls	r6, r6, #1
 80246b8:	002a      	movs	r2, r5
 80246ba:	9b06      	ldr	r3, [sp, #24]
 80246bc:	6006      	str	r6, [r0, #0]
 80246be:	9903      	ldr	r1, [sp, #12]
 80246c0:	9804      	ldr	r0, [sp, #16]
 80246c2:	f7db ff7d 	bl	80005c0 <__aeabi_lmul>
 80246c6:	0020      	movs	r0, r4
 80246c8:	2408      	movs	r4, #8
 80246ca:	9b07      	ldr	r3, [sp, #28]
 80246cc:	000d      	movs	r5, r1
 80246ce:	003a      	movs	r2, r7
 80246d0:	9905      	ldr	r1, [sp, #20]
 80246d2:	f7db ff75 	bl	80005c0 <__aeabi_lmul>
 80246d6:	4640      	mov	r0, r8
 80246d8:	46a4      	mov	ip, r4
 80246da:	186d      	adds	r5, r5, r1
 80246dc:	006d      	lsls	r5, r5, #1
 80246de:	6045      	str	r5, [r0, #4]
 80246e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246e2:	44e1      	add	r9, ip
 80246e4:	3801      	subs	r0, #1
 80246e6:	9009      	str	r0, [sp, #36]	@ 0x24
 80246e8:	9a01      	ldr	r2, [sp, #4]
 80246ea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80246ec:	44e2      	add	sl, ip
 80246ee:	44e3      	add	fp, ip
 80246f0:	44e0      	add	r8, ip
 80246f2:	46a4      	mov	ip, r4
 80246f4:	4462      	add	r2, ip
 80246f6:	9201      	str	r2, [sp, #4]
 80246f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80246fa:	9b00      	ldr	r3, [sp, #0]
 80246fc:	4694      	mov	ip, r2
 80246fe:	4463      	add	r3, ip
 8024700:	9300      	str	r3, [sp, #0]
 8024702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024704:	9902      	ldr	r1, [sp, #8]
 8024706:	469c      	mov	ip, r3
 8024708:	4461      	add	r1, ip
 802470a:	9102      	str	r1, [sp, #8]
 802470c:	2800      	cmp	r0, #0
 802470e:	d000      	beq.n	8024712 <arm_radix4_butterfly_inverse_q31+0x22e>
 8024710:	e70f      	b.n	8024532 <arm_radix4_butterfly_inverse_q31+0x4e>
 8024712:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024714:	009b      	lsls	r3, r3, #2
 8024716:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024718:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802471a:	9320      	str	r3, [sp, #128]	@ 0x80
 802471c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802471e:	2b04      	cmp	r3, #4
 8024720:	d800      	bhi.n	8024724 <arm_radix4_butterfly_inverse_q31+0x240>
 8024722:	e17c      	b.n	8024a1e <arm_radix4_butterfly_inverse_q31+0x53a>
 8024724:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024726:	0893      	lsrs	r3, r2, #2
 8024728:	1e59      	subs	r1, r3, #1
 802472a:	9321      	str	r3, [sp, #132]	@ 0x84
 802472c:	00db      	lsls	r3, r3, #3
 802472e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024730:	00d3      	lsls	r3, r2, #3
 8024732:	9300      	str	r3, [sp, #0]
 8024734:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024736:	911a      	str	r1, [sp, #104]	@ 0x68
 8024738:	00da      	lsls	r2, r3, #3
 802473a:	921e      	str	r2, [sp, #120]	@ 0x78
 802473c:	011a      	lsls	r2, r3, #4
 802473e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024740:	001a      	movs	r2, r3
 8024742:	4694      	mov	ip, r2
 8024744:	005b      	lsls	r3, r3, #1
 8024746:	4463      	add	r3, ip
 8024748:	00db      	lsls	r3, r3, #3
 802474a:	931c      	str	r3, [sp, #112]	@ 0x70
 802474c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802474e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024750:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024752:	9318      	str	r3, [sp, #96]	@ 0x60
 8024754:	9319      	str	r3, [sp, #100]	@ 0x64
 8024756:	9316      	str	r3, [sp, #88]	@ 0x58
 8024758:	2300      	movs	r3, #0
 802475a:	9315      	str	r3, [sp, #84]	@ 0x54
 802475c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802475e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024760:	681a      	ldr	r2, [r3, #0]
 8024762:	685b      	ldr	r3, [r3, #4]
 8024764:	9205      	str	r2, [sp, #20]
 8024766:	9306      	str	r3, [sp, #24]
 8024768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802476a:	468c      	mov	ip, r1
 802476c:	681a      	ldr	r2, [r3, #0]
 802476e:	685b      	ldr	r3, [r3, #4]
 8024770:	9207      	str	r2, [sp, #28]
 8024772:	9308      	str	r3, [sp, #32]
 8024774:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024776:	681a      	ldr	r2, [r3, #0]
 8024778:	685b      	ldr	r3, [r3, #4]
 802477a:	9209      	str	r2, [sp, #36]	@ 0x24
 802477c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802477e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024780:	0013      	movs	r3, r2
 8024782:	4463      	add	r3, ip
 8024784:	4698      	mov	r8, r3
 8024786:	0013      	movs	r3, r2
 8024788:	4442      	add	r2, r8
 802478a:	4691      	mov	r9, r2
 802478c:	001a      	movs	r2, r3
 802478e:	444a      	add	r2, r9
 8024790:	4692      	mov	sl, r2
 8024792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024794:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024796:	4293      	cmp	r3, r2
 8024798:	d800      	bhi.n	802479c <arm_radix4_butterfly_inverse_q31+0x2b8>
 802479a:	e0d9      	b.n	8024950 <arm_radix4_butterfly_inverse_q31+0x46c>
 802479c:	4694      	mov	ip, r2
 802479e:	4644      	mov	r4, r8
 80247a0:	4655      	mov	r5, sl
 80247a2:	4688      	mov	r8, r1
 80247a4:	9b07      	ldr	r3, [sp, #28]
 80247a6:	17db      	asrs	r3, r3, #31
 80247a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80247aa:	9b08      	ldr	r3, [sp, #32]
 80247ac:	17db      	asrs	r3, r3, #31
 80247ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80247b0:	9b05      	ldr	r3, [sp, #20]
 80247b2:	17db      	asrs	r3, r3, #31
 80247b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80247b6:	9b06      	ldr	r3, [sp, #24]
 80247b8:	17db      	asrs	r3, r3, #31
 80247ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80247bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247be:	17db      	asrs	r3, r3, #31
 80247c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80247c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80247c4:	17db      	asrs	r3, r3, #31
 80247c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80247c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80247ca:	4463      	add	r3, ip
 80247cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80247ce:	4643      	mov	r3, r8
 80247d0:	4641      	mov	r1, r8
 80247d2:	681a      	ldr	r2, [r3, #0]
 80247d4:	464b      	mov	r3, r9
 80247d6:	684f      	ldr	r7, [r1, #4]
 80247d8:	4649      	mov	r1, r9
 80247da:	681b      	ldr	r3, [r3, #0]
 80247dc:	18d6      	adds	r6, r2, r3
 80247de:	1ad3      	subs	r3, r2, r3
 80247e0:	9301      	str	r3, [sp, #4]
 80247e2:	684b      	ldr	r3, [r1, #4]
 80247e4:	1af9      	subs	r1, r7, r3
 80247e6:	9102      	str	r1, [sp, #8]
 80247e8:	6829      	ldr	r1, [r5, #0]
 80247ea:	18f8      	adds	r0, r7, r3
 80247ec:	468c      	mov	ip, r1
 80247ee:	6827      	ldr	r7, [r4, #0]
 80247f0:	4467      	add	r7, ip
 80247f2:	003a      	movs	r2, r7
 80247f4:	19f3      	adds	r3, r6, r7
 80247f6:	4647      	mov	r7, r8
 80247f8:	109b      	asrs	r3, r3, #2
 80247fa:	603b      	str	r3, [r7, #0]
 80247fc:	6869      	ldr	r1, [r5, #4]
 80247fe:	6867      	ldr	r7, [r4, #4]
 8024800:	468c      	mov	ip, r1
 8024802:	4467      	add	r7, ip
 8024804:	003b      	movs	r3, r7
 8024806:	19c1      	adds	r1, r0, r7
 8024808:	4647      	mov	r7, r8
 802480a:	1ab6      	subs	r6, r6, r2
 802480c:	1089      	asrs	r1, r1, #2
 802480e:	6079      	str	r1, [r7, #4]
 8024810:	17f2      	asrs	r2, r6, #31
 8024812:	9900      	ldr	r1, [sp, #0]
 8024814:	4692      	mov	sl, r2
 8024816:	468c      	mov	ip, r1
 8024818:	6867      	ldr	r7, [r4, #4]
 802481a:	6869      	ldr	r1, [r5, #4]
 802481c:	44e0      	add	r8, ip
 802481e:	1a7f      	subs	r7, r7, r1
 8024820:	9703      	str	r7, [sp, #12]
 8024822:	6821      	ldr	r1, [r4, #0]
 8024824:	682f      	ldr	r7, [r5, #0]
 8024826:	1bc9      	subs	r1, r1, r7
 8024828:	1ac7      	subs	r7, r0, r3
 802482a:	17fa      	asrs	r2, r7, #31
 802482c:	4693      	mov	fp, r2
 802482e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024830:	9a07      	ldr	r2, [sp, #28]
 8024832:	9104      	str	r1, [sp, #16]
 8024834:	0030      	movs	r0, r6
 8024836:	4651      	mov	r1, sl
 8024838:	f7db fec2 	bl	80005c0 <__aeabi_lmul>
 802483c:	9a08      	ldr	r2, [sp, #32]
 802483e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024840:	9112      	str	r1, [sp, #72]	@ 0x48
 8024842:	0038      	movs	r0, r7
 8024844:	4659      	mov	r1, fp
 8024846:	f7db febb 	bl	80005c0 <__aeabi_lmul>
 802484a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802484c:	9a07      	ldr	r2, [sp, #28]
 802484e:	1a41      	subs	r1, r0, r1
 8024850:	1049      	asrs	r1, r1, #1
 8024852:	6021      	str	r1, [r4, #0]
 8024854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024856:	0038      	movs	r0, r7
 8024858:	4659      	mov	r1, fp
 802485a:	f7db feb1 	bl	80005c0 <__aeabi_lmul>
 802485e:	9a08      	ldr	r2, [sp, #32]
 8024860:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024862:	000f      	movs	r7, r1
 8024864:	0030      	movs	r0, r6
 8024866:	4651      	mov	r1, sl
 8024868:	f7db feaa 	bl	80005c0 <__aeabi_lmul>
 802486c:	9b00      	ldr	r3, [sp, #0]
 802486e:	187f      	adds	r7, r7, r1
 8024870:	469c      	mov	ip, r3
 8024872:	107f      	asrs	r7, r7, #1
 8024874:	6067      	str	r7, [r4, #4]
 8024876:	9a01      	ldr	r2, [sp, #4]
 8024878:	9f03      	ldr	r7, [sp, #12]
 802487a:	9802      	ldr	r0, [sp, #8]
 802487c:	1bd7      	subs	r7, r2, r7
 802487e:	17fe      	asrs	r6, r7, #31
 8024880:	0031      	movs	r1, r6
 8024882:	9e04      	ldr	r6, [sp, #16]
 8024884:	4682      	mov	sl, r0
 8024886:	4464      	add	r4, ip
 8024888:	46b4      	mov	ip, r6
 802488a:	44e2      	add	sl, ip
 802488c:	4652      	mov	r2, sl
 802488e:	17d2      	asrs	r2, r2, #31
 8024890:	4693      	mov	fp, r2
 8024892:	0038      	movs	r0, r7
 8024894:	9a05      	ldr	r2, [sp, #20]
 8024896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024898:	9112      	str	r1, [sp, #72]	@ 0x48
 802489a:	f7db fe91 	bl	80005c0 <__aeabi_lmul>
 802489e:	9a06      	ldr	r2, [sp, #24]
 80248a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80248a2:	000e      	movs	r6, r1
 80248a4:	4650      	mov	r0, sl
 80248a6:	4659      	mov	r1, fp
 80248a8:	f7db fe8a 	bl	80005c0 <__aeabi_lmul>
 80248ac:	4648      	mov	r0, r9
 80248ae:	1a76      	subs	r6, r6, r1
 80248b0:	1076      	asrs	r6, r6, #1
 80248b2:	6006      	str	r6, [r0, #0]
 80248b4:	9a05      	ldr	r2, [sp, #20]
 80248b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80248b8:	4650      	mov	r0, sl
 80248ba:	4659      	mov	r1, fp
 80248bc:	f7db fe80 	bl	80005c0 <__aeabi_lmul>
 80248c0:	9a06      	ldr	r2, [sp, #24]
 80248c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80248c4:	000e      	movs	r6, r1
 80248c6:	0038      	movs	r0, r7
 80248c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80248ca:	f7db fe79 	bl	80005c0 <__aeabi_lmul>
 80248ce:	9a00      	ldr	r2, [sp, #0]
 80248d0:	9f03      	ldr	r7, [sp, #12]
 80248d2:	4694      	mov	ip, r2
 80248d4:	1876      	adds	r6, r6, r1
 80248d6:	4649      	mov	r1, r9
 80248d8:	44e1      	add	r9, ip
 80248da:	46bc      	mov	ip, r7
 80248dc:	9b01      	ldr	r3, [sp, #4]
 80248de:	1076      	asrs	r6, r6, #1
 80248e0:	4463      	add	r3, ip
 80248e2:	17df      	asrs	r7, r3, #31
 80248e4:	604e      	str	r6, [r1, #4]
 80248e6:	46ba      	mov	sl, r7
 80248e8:	001e      	movs	r6, r3
 80248ea:	9802      	ldr	r0, [sp, #8]
 80248ec:	9b04      	ldr	r3, [sp, #16]
 80248ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80248f0:	1ac7      	subs	r7, r0, r3
 80248f2:	17fb      	asrs	r3, r7, #31
 80248f4:	469b      	mov	fp, r3
 80248f6:	0030      	movs	r0, r6
 80248f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248fa:	4651      	mov	r1, sl
 80248fc:	f7db fe60 	bl	80005c0 <__aeabi_lmul>
 8024900:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024902:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024904:	9101      	str	r1, [sp, #4]
 8024906:	0038      	movs	r0, r7
 8024908:	4659      	mov	r1, fp
 802490a:	f7db fe59 	bl	80005c0 <__aeabi_lmul>
 802490e:	9801      	ldr	r0, [sp, #4]
 8024910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024912:	1a41      	subs	r1, r0, r1
 8024914:	1049      	asrs	r1, r1, #1
 8024916:	6029      	str	r1, [r5, #0]
 8024918:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802491a:	0038      	movs	r0, r7
 802491c:	4659      	mov	r1, fp
 802491e:	f7db fe4f 	bl	80005c0 <__aeabi_lmul>
 8024922:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024924:	000f      	movs	r7, r1
 8024926:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024928:	0030      	movs	r0, r6
 802492a:	4651      	mov	r1, sl
 802492c:	f7db fe48 	bl	80005c0 <__aeabi_lmul>
 8024930:	187f      	adds	r7, r7, r1
 8024932:	107f      	asrs	r7, r7, #1
 8024934:	606f      	str	r7, [r5, #4]
 8024936:	9a00      	ldr	r2, [sp, #0]
 8024938:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802493a:	4694      	mov	ip, r2
 802493c:	4465      	add	r5, ip
 802493e:	468c      	mov	ip, r1
 8024940:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024942:	0013      	movs	r3, r2
 8024944:	4462      	add	r2, ip
 8024946:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024948:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802494a:	429a      	cmp	r2, r3
 802494c:	d900      	bls.n	8024950 <arm_radix4_butterfly_inverse_q31+0x46c>
 802494e:	e73e      	b.n	80247ce <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024950:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024952:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024954:	468c      	mov	ip, r1
 8024956:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024958:	4462      	add	r2, ip
 802495a:	468c      	mov	ip, r1
 802495c:	9216      	str	r2, [sp, #88]	@ 0x58
 802495e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024960:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024962:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024964:	4462      	add	r2, ip
 8024966:	468c      	mov	ip, r1
 8024968:	9219      	str	r2, [sp, #100]	@ 0x64
 802496a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802496c:	3301      	adds	r3, #1
 802496e:	4462      	add	r2, ip
 8024970:	9218      	str	r2, [sp, #96]	@ 0x60
 8024972:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024974:	9315      	str	r3, [sp, #84]	@ 0x54
 8024976:	3208      	adds	r2, #8
 8024978:	9217      	str	r2, [sp, #92]	@ 0x5c
 802497a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802497c:	4293      	cmp	r3, r2
 802497e:	d800      	bhi.n	8024982 <arm_radix4_butterfly_inverse_q31+0x49e>
 8024980:	e6ec      	b.n	802475c <arm_radix4_butterfly_inverse_q31+0x278>
 8024982:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024984:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024986:	009b      	lsls	r3, r3, #2
 8024988:	931f      	str	r3, [sp, #124]	@ 0x7c
 802498a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802498c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802498e:	089b      	lsrs	r3, r3, #2
 8024990:	9320      	str	r3, [sp, #128]	@ 0x80
 8024992:	2b04      	cmp	r3, #4
 8024994:	d900      	bls.n	8024998 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8024996:	e6c5      	b.n	8024724 <arm_radix4_butterfly_inverse_q31+0x240>
 8024998:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802499a:	469a      	mov	sl, r3
 802499c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802499e:	681a      	ldr	r2, [r3, #0]
 80249a0:	6918      	ldr	r0, [r3, #16]
 80249a2:	4691      	mov	r9, r2
 80249a4:	464c      	mov	r4, r9
 80249a6:	4680      	mov	r8, r0
 80249a8:	69de      	ldr	r6, [r3, #28]
 80249aa:	689d      	ldr	r5, [r3, #8]
 80249ac:	46b4      	mov	ip, r6
 80249ae:	6998      	ldr	r0, [r3, #24]
 80249b0:	1964      	adds	r4, r4, r5
 80249b2:	6859      	ldr	r1, [r3, #4]
 80249b4:	68da      	ldr	r2, [r3, #12]
 80249b6:	4444      	add	r4, r8
 80249b8:	695f      	ldr	r7, [r3, #20]
 80249ba:	1824      	adds	r4, r4, r0
 80249bc:	601c      	str	r4, [r3, #0]
 80249be:	188c      	adds	r4, r1, r2
 80249c0:	19e4      	adds	r4, r4, r7
 80249c2:	4464      	add	r4, ip
 80249c4:	605c      	str	r4, [r3, #4]
 80249c6:	464c      	mov	r4, r9
 80249c8:	1b64      	subs	r4, r4, r5
 80249ca:	4444      	add	r4, r8
 80249cc:	1a24      	subs	r4, r4, r0
 80249ce:	609c      	str	r4, [r3, #8]
 80249d0:	1a8c      	subs	r4, r1, r2
 80249d2:	19e4      	adds	r4, r4, r7
 80249d4:	1ba4      	subs	r4, r4, r6
 80249d6:	60dc      	str	r4, [r3, #12]
 80249d8:	464c      	mov	r4, r9
 80249da:	4646      	mov	r6, r8
 80249dc:	1aa4      	subs	r4, r4, r2
 80249de:	1ba4      	subs	r4, r4, r6
 80249e0:	4464      	add	r4, ip
 80249e2:	611c      	str	r4, [r3, #16]
 80249e4:	194c      	adds	r4, r1, r5
 80249e6:	1be4      	subs	r4, r4, r7
 80249e8:	1a24      	subs	r4, r4, r0
 80249ea:	615c      	str	r4, [r3, #20]
 80249ec:	4644      	mov	r4, r8
 80249ee:	4666      	mov	r6, ip
 80249f0:	444a      	add	r2, r9
 80249f2:	1b12      	subs	r2, r2, r4
 80249f4:	1b92      	subs	r2, r2, r6
 80249f6:	619a      	str	r2, [r3, #24]
 80249f8:	1b4a      	subs	r2, r1, r5
 80249fa:	1bd1      	subs	r1, r2, r7
 80249fc:	2201      	movs	r2, #1
 80249fe:	4252      	negs	r2, r2
 8024a00:	4694      	mov	ip, r2
 8024a02:	44e2      	add	sl, ip
 8024a04:	4652      	mov	r2, sl
 8024a06:	1809      	adds	r1, r1, r0
 8024a08:	61d9      	str	r1, [r3, #28]
 8024a0a:	3320      	adds	r3, #32
 8024a0c:	2a00      	cmp	r2, #0
 8024a0e:	d1c6      	bne.n	802499e <arm_radix4_butterfly_inverse_q31+0x4ba>
 8024a10:	b027      	add	sp, #156	@ 0x9c
 8024a12:	bc3c      	pop	{r2, r3, r4, r5}
 8024a14:	4690      	mov	r8, r2
 8024a16:	4699      	mov	r9, r3
 8024a18:	46a2      	mov	sl, r4
 8024a1a:	46ab      	mov	fp, r5
 8024a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a1e:	469a      	mov	sl, r3
 8024a20:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024a22:	e7bc      	b.n	802499e <arm_radix4_butterfly_inverse_q31+0x4ba>

08024a24 <arm_cmplx_mag_squared_q31>:
 8024a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a26:	464f      	mov	r7, r9
 8024a28:	4646      	mov	r6, r8
 8024a2a:	0004      	movs	r4, r0
 8024a2c:	b4c0      	push	{r6, r7}
 8024a2e:	0016      	movs	r6, r2
 8024a30:	000f      	movs	r7, r1
 8024a32:	2a00      	cmp	r2, #0
 8024a34:	d018      	beq.n	8024a68 <arm_cmplx_mag_squared_q31+0x44>
 8024a36:	6823      	ldr	r3, [r4, #0]
 8024a38:	6822      	ldr	r2, [r4, #0]
 8024a3a:	17d9      	asrs	r1, r3, #31
 8024a3c:	6863      	ldr	r3, [r4, #4]
 8024a3e:	0010      	movs	r0, r2
 8024a40:	4698      	mov	r8, r3
 8024a42:	17db      	asrs	r3, r3, #31
 8024a44:	4699      	mov	r9, r3
 8024a46:	000b      	movs	r3, r1
 8024a48:	f7db fdba 	bl	80005c0 <__aeabi_lmul>
 8024a4c:	4642      	mov	r2, r8
 8024a4e:	104d      	asrs	r5, r1, #1
 8024a50:	464b      	mov	r3, r9
 8024a52:	4640      	mov	r0, r8
 8024a54:	4649      	mov	r1, r9
 8024a56:	f7db fdb3 	bl	80005c0 <__aeabi_lmul>
 8024a5a:	1049      	asrs	r1, r1, #1
 8024a5c:	1869      	adds	r1, r5, r1
 8024a5e:	3e01      	subs	r6, #1
 8024a60:	c702      	stmia	r7!, {r1}
 8024a62:	3408      	adds	r4, #8
 8024a64:	2e00      	cmp	r6, #0
 8024a66:	d1e6      	bne.n	8024a36 <arm_cmplx_mag_squared_q31+0x12>
 8024a68:	bc0c      	pop	{r2, r3}
 8024a6a:	4690      	mov	r8, r2
 8024a6c:	4699      	mov	r9, r3
 8024a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024a70 <arm_mult_q31>:
 8024a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a72:	4646      	mov	r6, r8
 8024a74:	464f      	mov	r7, r9
 8024a76:	4690      	mov	r8, r2
 8024a78:	b4c0      	push	{r6, r7}
 8024a7a:	001d      	movs	r5, r3
 8024a7c:	0006      	movs	r6, r0
 8024a7e:	000f      	movs	r7, r1
 8024a80:	2400      	movs	r4, #0
 8024a82:	2b00      	cmp	r3, #0
 8024a84:	d020      	beq.n	8024ac8 <arm_mult_q31+0x58>
 8024a86:	4b12      	ldr	r3, [pc, #72]	@ (8024ad0 <arm_mult_q31+0x60>)
 8024a88:	4699      	mov	r9, r3
 8024a8a:	e007      	b.n	8024a9c <arm_mult_q31+0x2c>
 8024a8c:	464b      	mov	r3, r9
 8024a8e:	4059      	eors	r1, r3
 8024a90:	4643      	mov	r3, r8
 8024a92:	3d01      	subs	r5, #1
 8024a94:	5119      	str	r1, [r3, r4]
 8024a96:	3404      	adds	r4, #4
 8024a98:	2d00      	cmp	r5, #0
 8024a9a:	d015      	beq.n	8024ac8 <arm_mult_q31+0x58>
 8024a9c:	5933      	ldr	r3, [r6, r4]
 8024a9e:	593a      	ldr	r2, [r7, r4]
 8024aa0:	17d9      	asrs	r1, r3, #31
 8024aa2:	593b      	ldr	r3, [r7, r4]
 8024aa4:	5930      	ldr	r0, [r6, r4]
 8024aa6:	17db      	asrs	r3, r3, #31
 8024aa8:	f7db fd8a 	bl	80005c0 <__aeabi_lmul>
 8024aac:	004b      	lsls	r3, r1, #1
 8024aae:	0fc0      	lsrs	r0, r0, #31
 8024ab0:	4318      	orrs	r0, r3
 8024ab2:	17c9      	asrs	r1, r1, #31
 8024ab4:	17c3      	asrs	r3, r0, #31
 8024ab6:	428b      	cmp	r3, r1
 8024ab8:	d1e8      	bne.n	8024a8c <arm_mult_q31+0x1c>
 8024aba:	0001      	movs	r1, r0
 8024abc:	4643      	mov	r3, r8
 8024abe:	3d01      	subs	r5, #1
 8024ac0:	5119      	str	r1, [r3, r4]
 8024ac2:	3404      	adds	r4, #4
 8024ac4:	2d00      	cmp	r5, #0
 8024ac6:	d1e9      	bne.n	8024a9c <arm_mult_q31+0x2c>
 8024ac8:	bc0c      	pop	{r2, r3}
 8024aca:	4690      	mov	r8, r2
 8024acc:	4699      	mov	r9, r3
 8024ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ad0:	7fffffff 	.word	0x7fffffff

08024ad4 <arm_add_q31>:
 8024ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ad6:	465f      	mov	r7, fp
 8024ad8:	4656      	mov	r6, sl
 8024ada:	464d      	mov	r5, r9
 8024adc:	4644      	mov	r4, r8
 8024ade:	b4f0      	push	{r4, r5, r6, r7}
 8024ae0:	4693      	mov	fp, r2
 8024ae2:	b083      	sub	sp, #12
 8024ae4:	4681      	mov	r9, r0
 8024ae6:	468a      	mov	sl, r1
 8024ae8:	4698      	mov	r8, r3
 8024aea:	2200      	movs	r2, #0
 8024aec:	2b00      	cmp	r3, #0
 8024aee:	d020      	beq.n	8024b32 <arm_add_q31+0x5e>
 8024af0:	4649      	mov	r1, r9
 8024af2:	4653      	mov	r3, sl
 8024af4:	588e      	ldr	r6, [r1, r2]
 8024af6:	589b      	ldr	r3, [r3, r2]
 8024af8:	17f7      	asrs	r7, r6, #31
 8024afa:	001c      	movs	r4, r3
 8024afc:	0030      	movs	r0, r6
 8024afe:	0039      	movs	r1, r7
 8024b00:	17dd      	asrs	r5, r3, #31
 8024b02:	46b4      	mov	ip, r6
 8024b04:	1900      	adds	r0, r0, r4
 8024b06:	4169      	adcs	r1, r5
 8024b08:	4463      	add	r3, ip
 8024b0a:	9000      	str	r0, [sp, #0]
 8024b0c:	9101      	str	r1, [sp, #4]
 8024b0e:	17d9      	asrs	r1, r3, #31
 8024b10:	468c      	mov	ip, r1
 8024b12:	9901      	ldr	r1, [sp, #4]
 8024b14:	458c      	cmp	ip, r1
 8024b16:	d002      	beq.n	8024b1e <arm_add_q31+0x4a>
 8024b18:	17cb      	asrs	r3, r1, #31
 8024b1a:	4909      	ldr	r1, [pc, #36]	@ (8024b40 <arm_add_q31+0x6c>)
 8024b1c:	404b      	eors	r3, r1
 8024b1e:	4659      	mov	r1, fp
 8024b20:	508b      	str	r3, [r1, r2]
 8024b22:	2301      	movs	r3, #1
 8024b24:	425b      	negs	r3, r3
 8024b26:	469c      	mov	ip, r3
 8024b28:	44e0      	add	r8, ip
 8024b2a:	4643      	mov	r3, r8
 8024b2c:	3204      	adds	r2, #4
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	d1de      	bne.n	8024af0 <arm_add_q31+0x1c>
 8024b32:	b003      	add	sp, #12
 8024b34:	bc3c      	pop	{r2, r3, r4, r5}
 8024b36:	4690      	mov	r8, r2
 8024b38:	4699      	mov	r9, r3
 8024b3a:	46a2      	mov	sl, r4
 8024b3c:	46ab      	mov	fp, r5
 8024b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b40:	7fffffff 	.word	0x7fffffff

08024b44 <atof>:
 8024b44:	b510      	push	{r4, lr}
 8024b46:	2100      	movs	r1, #0
 8024b48:	f000 fe1e 	bl	8025788 <strtod>
 8024b4c:	bd10      	pop	{r4, pc}

08024b4e <atoi>:
 8024b4e:	b510      	push	{r4, lr}
 8024b50:	220a      	movs	r2, #10
 8024b52:	2100      	movs	r1, #0
 8024b54:	f000 feb0 	bl	80258b8 <strtol>
 8024b58:	bd10      	pop	{r4, pc}
	...

08024b5c <sulp>:
 8024b5c:	b570      	push	{r4, r5, r6, lr}
 8024b5e:	0016      	movs	r6, r2
 8024b60:	000d      	movs	r5, r1
 8024b62:	f003 fced 	bl	8028540 <__ulp>
 8024b66:	2e00      	cmp	r6, #0
 8024b68:	d00d      	beq.n	8024b86 <sulp+0x2a>
 8024b6a:	236b      	movs	r3, #107	@ 0x6b
 8024b6c:	006a      	lsls	r2, r5, #1
 8024b6e:	0d52      	lsrs	r2, r2, #21
 8024b70:	1a9b      	subs	r3, r3, r2
 8024b72:	2b00      	cmp	r3, #0
 8024b74:	dd07      	ble.n	8024b86 <sulp+0x2a>
 8024b76:	2400      	movs	r4, #0
 8024b78:	4a03      	ldr	r2, [pc, #12]	@ (8024b88 <sulp+0x2c>)
 8024b7a:	051b      	lsls	r3, r3, #20
 8024b7c:	189d      	adds	r5, r3, r2
 8024b7e:	002b      	movs	r3, r5
 8024b80:	0022      	movs	r2, r4
 8024b82:	f7dd fee7 	bl	8002954 <__aeabi_dmul>
 8024b86:	bd70      	pop	{r4, r5, r6, pc}
 8024b88:	3ff00000 	.word	0x3ff00000

08024b8c <_strtod_l>:
 8024b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b8e:	b0a3      	sub	sp, #140	@ 0x8c
 8024b90:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024b92:	2200      	movs	r2, #0
 8024b94:	2600      	movs	r6, #0
 8024b96:	2700      	movs	r7, #0
 8024b98:	9005      	str	r0, [sp, #20]
 8024b9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8024b9c:	921e      	str	r2, [sp, #120]	@ 0x78
 8024b9e:	911d      	str	r1, [sp, #116]	@ 0x74
 8024ba0:	780a      	ldrb	r2, [r1, #0]
 8024ba2:	2a2b      	cmp	r2, #43	@ 0x2b
 8024ba4:	d053      	beq.n	8024c4e <_strtod_l+0xc2>
 8024ba6:	d83f      	bhi.n	8024c28 <_strtod_l+0x9c>
 8024ba8:	2a0d      	cmp	r2, #13
 8024baa:	d839      	bhi.n	8024c20 <_strtod_l+0x94>
 8024bac:	2a08      	cmp	r2, #8
 8024bae:	d839      	bhi.n	8024c24 <_strtod_l+0x98>
 8024bb0:	2a00      	cmp	r2, #0
 8024bb2:	d042      	beq.n	8024c3a <_strtod_l+0xae>
 8024bb4:	2200      	movs	r2, #0
 8024bb6:	9212      	str	r2, [sp, #72]	@ 0x48
 8024bb8:	2100      	movs	r1, #0
 8024bba:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024bbc:	910c      	str	r1, [sp, #48]	@ 0x30
 8024bbe:	782a      	ldrb	r2, [r5, #0]
 8024bc0:	2a30      	cmp	r2, #48	@ 0x30
 8024bc2:	d000      	beq.n	8024bc6 <_strtod_l+0x3a>
 8024bc4:	e083      	b.n	8024cce <_strtod_l+0x142>
 8024bc6:	786a      	ldrb	r2, [r5, #1]
 8024bc8:	3120      	adds	r1, #32
 8024bca:	438a      	bics	r2, r1
 8024bcc:	2a58      	cmp	r2, #88	@ 0x58
 8024bce:	d000      	beq.n	8024bd2 <_strtod_l+0x46>
 8024bd0:	e073      	b.n	8024cba <_strtod_l+0x12e>
 8024bd2:	9302      	str	r3, [sp, #8]
 8024bd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024bd6:	4a9b      	ldr	r2, [pc, #620]	@ (8024e44 <_strtod_l+0x2b8>)
 8024bd8:	9301      	str	r3, [sp, #4]
 8024bda:	ab1e      	add	r3, sp, #120	@ 0x78
 8024bdc:	9300      	str	r3, [sp, #0]
 8024bde:	9805      	ldr	r0, [sp, #20]
 8024be0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024be2:	a91d      	add	r1, sp, #116	@ 0x74
 8024be4:	f002 fd64 	bl	80276b0 <__gethex>
 8024be8:	230f      	movs	r3, #15
 8024bea:	0002      	movs	r2, r0
 8024bec:	401a      	ands	r2, r3
 8024bee:	0004      	movs	r4, r0
 8024bf0:	9206      	str	r2, [sp, #24]
 8024bf2:	4218      	tst	r0, r3
 8024bf4:	d005      	beq.n	8024c02 <_strtod_l+0x76>
 8024bf6:	2a06      	cmp	r2, #6
 8024bf8:	d12b      	bne.n	8024c52 <_strtod_l+0xc6>
 8024bfa:	2300      	movs	r3, #0
 8024bfc:	3501      	adds	r5, #1
 8024bfe:	951d      	str	r5, [sp, #116]	@ 0x74
 8024c00:	9312      	str	r3, [sp, #72]	@ 0x48
 8024c02:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	d002      	beq.n	8024c0e <_strtod_l+0x82>
 8024c08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024c0c:	6013      	str	r3, [r2, #0]
 8024c0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	d019      	beq.n	8024c48 <_strtod_l+0xbc>
 8024c14:	2380      	movs	r3, #128	@ 0x80
 8024c16:	0030      	movs	r0, r6
 8024c18:	061b      	lsls	r3, r3, #24
 8024c1a:	18f9      	adds	r1, r7, r3
 8024c1c:	b023      	add	sp, #140	@ 0x8c
 8024c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c20:	2a20      	cmp	r2, #32
 8024c22:	d1c7      	bne.n	8024bb4 <_strtod_l+0x28>
 8024c24:	3101      	adds	r1, #1
 8024c26:	e7ba      	b.n	8024b9e <_strtod_l+0x12>
 8024c28:	2a2d      	cmp	r2, #45	@ 0x2d
 8024c2a:	d1c3      	bne.n	8024bb4 <_strtod_l+0x28>
 8024c2c:	3a2c      	subs	r2, #44	@ 0x2c
 8024c2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8024c30:	1c4a      	adds	r2, r1, #1
 8024c32:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c34:	784a      	ldrb	r2, [r1, #1]
 8024c36:	2a00      	cmp	r2, #0
 8024c38:	d1be      	bne.n	8024bb8 <_strtod_l+0x2c>
 8024c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c3c:	931d      	str	r3, [sp, #116]	@ 0x74
 8024c3e:	2300      	movs	r3, #0
 8024c40:	9312      	str	r3, [sp, #72]	@ 0x48
 8024c42:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	d1df      	bne.n	8024c08 <_strtod_l+0x7c>
 8024c48:	0030      	movs	r0, r6
 8024c4a:	0039      	movs	r1, r7
 8024c4c:	e7e6      	b.n	8024c1c <_strtod_l+0x90>
 8024c4e:	2200      	movs	r2, #0
 8024c50:	e7ed      	b.n	8024c2e <_strtod_l+0xa2>
 8024c52:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024c54:	2a00      	cmp	r2, #0
 8024c56:	d007      	beq.n	8024c68 <_strtod_l+0xdc>
 8024c58:	2135      	movs	r1, #53	@ 0x35
 8024c5a:	a820      	add	r0, sp, #128	@ 0x80
 8024c5c:	f003 fd66 	bl	802872c <__copybits>
 8024c60:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024c62:	9805      	ldr	r0, [sp, #20]
 8024c64:	f003 f928 	bl	8027eb8 <_Bfree>
 8024c68:	9806      	ldr	r0, [sp, #24]
 8024c6a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c6c:	3801      	subs	r0, #1
 8024c6e:	2804      	cmp	r0, #4
 8024c70:	d806      	bhi.n	8024c80 <_strtod_l+0xf4>
 8024c72:	f7db fa83 	bl	800017c <__gnu_thumb1_case_uqi>
 8024c76:	0312      	.short	0x0312
 8024c78:	1e1c      	.short	0x1e1c
 8024c7a:	12          	.byte	0x12
 8024c7b:	00          	.byte	0x00
 8024c7c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024c7e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024c80:	05e4      	lsls	r4, r4, #23
 8024c82:	d502      	bpl.n	8024c8a <_strtod_l+0xfe>
 8024c84:	2380      	movs	r3, #128	@ 0x80
 8024c86:	061b      	lsls	r3, r3, #24
 8024c88:	431f      	orrs	r7, r3
 8024c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8024e48 <_strtod_l+0x2bc>)
 8024c8c:	423b      	tst	r3, r7
 8024c8e:	d1b8      	bne.n	8024c02 <_strtod_l+0x76>
 8024c90:	f001 fd9e 	bl	80267d0 <__errno>
 8024c94:	2322      	movs	r3, #34	@ 0x22
 8024c96:	6003      	str	r3, [r0, #0]
 8024c98:	e7b3      	b.n	8024c02 <_strtod_l+0x76>
 8024c9a:	496c      	ldr	r1, [pc, #432]	@ (8024e4c <_strtod_l+0x2c0>)
 8024c9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024c9e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024ca0:	400a      	ands	r2, r1
 8024ca2:	496b      	ldr	r1, [pc, #428]	@ (8024e50 <_strtod_l+0x2c4>)
 8024ca4:	185b      	adds	r3, r3, r1
 8024ca6:	051b      	lsls	r3, r3, #20
 8024ca8:	431a      	orrs	r2, r3
 8024caa:	0017      	movs	r7, r2
 8024cac:	e7e8      	b.n	8024c80 <_strtod_l+0xf4>
 8024cae:	4f66      	ldr	r7, [pc, #408]	@ (8024e48 <_strtod_l+0x2bc>)
 8024cb0:	e7e6      	b.n	8024c80 <_strtod_l+0xf4>
 8024cb2:	2601      	movs	r6, #1
 8024cb4:	4f67      	ldr	r7, [pc, #412]	@ (8024e54 <_strtod_l+0x2c8>)
 8024cb6:	4276      	negs	r6, r6
 8024cb8:	e7e2      	b.n	8024c80 <_strtod_l+0xf4>
 8024cba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cbc:	1c5a      	adds	r2, r3, #1
 8024cbe:	921d      	str	r2, [sp, #116]	@ 0x74
 8024cc0:	785b      	ldrb	r3, [r3, #1]
 8024cc2:	2b30      	cmp	r3, #48	@ 0x30
 8024cc4:	d0f9      	beq.n	8024cba <_strtod_l+0x12e>
 8024cc6:	2b00      	cmp	r3, #0
 8024cc8:	d09b      	beq.n	8024c02 <_strtod_l+0x76>
 8024cca:	2301      	movs	r3, #1
 8024ccc:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cd0:	220a      	movs	r2, #10
 8024cd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024cd4:	2300      	movs	r3, #0
 8024cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8024cd8:	930d      	str	r3, [sp, #52]	@ 0x34
 8024cda:	9308      	str	r3, [sp, #32]
 8024cdc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024cde:	7804      	ldrb	r4, [r0, #0]
 8024ce0:	0023      	movs	r3, r4
 8024ce2:	3b30      	subs	r3, #48	@ 0x30
 8024ce4:	b2d9      	uxtb	r1, r3
 8024ce6:	2909      	cmp	r1, #9
 8024ce8:	d927      	bls.n	8024d3a <_strtod_l+0x1ae>
 8024cea:	2201      	movs	r2, #1
 8024cec:	495a      	ldr	r1, [pc, #360]	@ (8024e58 <_strtod_l+0x2cc>)
 8024cee:	f001 fce1 	bl	80266b4 <strncmp>
 8024cf2:	2800      	cmp	r0, #0
 8024cf4:	d033      	beq.n	8024d5e <_strtod_l+0x1d2>
 8024cf6:	2000      	movs	r0, #0
 8024cf8:	0023      	movs	r3, r4
 8024cfa:	4684      	mov	ip, r0
 8024cfc:	9a08      	ldr	r2, [sp, #32]
 8024cfe:	900e      	str	r0, [sp, #56]	@ 0x38
 8024d00:	9206      	str	r2, [sp, #24]
 8024d02:	2220      	movs	r2, #32
 8024d04:	0019      	movs	r1, r3
 8024d06:	4391      	bics	r1, r2
 8024d08:	000a      	movs	r2, r1
 8024d0a:	2100      	movs	r1, #0
 8024d0c:	9107      	str	r1, [sp, #28]
 8024d0e:	2a45      	cmp	r2, #69	@ 0x45
 8024d10:	d000      	beq.n	8024d14 <_strtod_l+0x188>
 8024d12:	e0cb      	b.n	8024eac <_strtod_l+0x320>
 8024d14:	9b06      	ldr	r3, [sp, #24]
 8024d16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d18:	4303      	orrs	r3, r0
 8024d1a:	4313      	orrs	r3, r2
 8024d1c:	428b      	cmp	r3, r1
 8024d1e:	d08c      	beq.n	8024c3a <_strtod_l+0xae>
 8024d20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d24:	3301      	adds	r3, #1
 8024d26:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d2a:	785b      	ldrb	r3, [r3, #1]
 8024d2c:	2b2b      	cmp	r3, #43	@ 0x2b
 8024d2e:	d07b      	beq.n	8024e28 <_strtod_l+0x29c>
 8024d30:	000c      	movs	r4, r1
 8024d32:	2b2d      	cmp	r3, #45	@ 0x2d
 8024d34:	d17e      	bne.n	8024e34 <_strtod_l+0x2a8>
 8024d36:	2401      	movs	r4, #1
 8024d38:	e077      	b.n	8024e2a <_strtod_l+0x29e>
 8024d3a:	9908      	ldr	r1, [sp, #32]
 8024d3c:	2908      	cmp	r1, #8
 8024d3e:	dc09      	bgt.n	8024d54 <_strtod_l+0x1c8>
 8024d40:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024d42:	4351      	muls	r1, r2
 8024d44:	185b      	adds	r3, r3, r1
 8024d46:	930d      	str	r3, [sp, #52]	@ 0x34
 8024d48:	9b08      	ldr	r3, [sp, #32]
 8024d4a:	3001      	adds	r0, #1
 8024d4c:	3301      	adds	r3, #1
 8024d4e:	9308      	str	r3, [sp, #32]
 8024d50:	901d      	str	r0, [sp, #116]	@ 0x74
 8024d52:	e7c3      	b.n	8024cdc <_strtod_l+0x150>
 8024d54:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024d56:	4355      	muls	r5, r2
 8024d58:	195b      	adds	r3, r3, r5
 8024d5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8024d5c:	e7f4      	b.n	8024d48 <_strtod_l+0x1bc>
 8024d5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d60:	1c5a      	adds	r2, r3, #1
 8024d62:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d64:	9a08      	ldr	r2, [sp, #32]
 8024d66:	785b      	ldrb	r3, [r3, #1]
 8024d68:	2a00      	cmp	r2, #0
 8024d6a:	d03e      	beq.n	8024dea <_strtod_l+0x25e>
 8024d6c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024d6e:	9206      	str	r2, [sp, #24]
 8024d70:	001a      	movs	r2, r3
 8024d72:	3a30      	subs	r2, #48	@ 0x30
 8024d74:	2a09      	cmp	r2, #9
 8024d76:	d912      	bls.n	8024d9e <_strtod_l+0x212>
 8024d78:	2201      	movs	r2, #1
 8024d7a:	4694      	mov	ip, r2
 8024d7c:	e7c1      	b.n	8024d02 <_strtod_l+0x176>
 8024d7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d80:	3001      	adds	r0, #1
 8024d82:	1c5a      	adds	r2, r3, #1
 8024d84:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d86:	785b      	ldrb	r3, [r3, #1]
 8024d88:	2b30      	cmp	r3, #48	@ 0x30
 8024d8a:	d0f8      	beq.n	8024d7e <_strtod_l+0x1f2>
 8024d8c:	001a      	movs	r2, r3
 8024d8e:	3a31      	subs	r2, #49	@ 0x31
 8024d90:	2a08      	cmp	r2, #8
 8024d92:	d844      	bhi.n	8024e1e <_strtod_l+0x292>
 8024d94:	900e      	str	r0, [sp, #56]	@ 0x38
 8024d96:	2000      	movs	r0, #0
 8024d98:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024d9a:	9006      	str	r0, [sp, #24]
 8024d9c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024d9e:	001c      	movs	r4, r3
 8024da0:	1c42      	adds	r2, r0, #1
 8024da2:	3c30      	subs	r4, #48	@ 0x30
 8024da4:	2b30      	cmp	r3, #48	@ 0x30
 8024da6:	d01a      	beq.n	8024dde <_strtod_l+0x252>
 8024da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024daa:	9906      	ldr	r1, [sp, #24]
 8024dac:	189b      	adds	r3, r3, r2
 8024dae:	930e      	str	r3, [sp, #56]	@ 0x38
 8024db0:	230a      	movs	r3, #10
 8024db2:	469c      	mov	ip, r3
 8024db4:	9d06      	ldr	r5, [sp, #24]
 8024db6:	1c4b      	adds	r3, r1, #1
 8024db8:	1b5d      	subs	r5, r3, r5
 8024dba:	42aa      	cmp	r2, r5
 8024dbc:	dc17      	bgt.n	8024dee <_strtod_l+0x262>
 8024dbe:	43c3      	mvns	r3, r0
 8024dc0:	9a06      	ldr	r2, [sp, #24]
 8024dc2:	17db      	asrs	r3, r3, #31
 8024dc4:	4003      	ands	r3, r0
 8024dc6:	18d1      	adds	r1, r2, r3
 8024dc8:	3201      	adds	r2, #1
 8024dca:	18d3      	adds	r3, r2, r3
 8024dcc:	9306      	str	r3, [sp, #24]
 8024dce:	2908      	cmp	r1, #8
 8024dd0:	dc1c      	bgt.n	8024e0c <_strtod_l+0x280>
 8024dd2:	230a      	movs	r3, #10
 8024dd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024dd6:	4353      	muls	r3, r2
 8024dd8:	2200      	movs	r2, #0
 8024dda:	18e3      	adds	r3, r4, r3
 8024ddc:	930d      	str	r3, [sp, #52]	@ 0x34
 8024dde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024de0:	0010      	movs	r0, r2
 8024de2:	1c59      	adds	r1, r3, #1
 8024de4:	911d      	str	r1, [sp, #116]	@ 0x74
 8024de6:	785b      	ldrb	r3, [r3, #1]
 8024de8:	e7c2      	b.n	8024d70 <_strtod_l+0x1e4>
 8024dea:	9808      	ldr	r0, [sp, #32]
 8024dec:	e7cc      	b.n	8024d88 <_strtod_l+0x1fc>
 8024dee:	2908      	cmp	r1, #8
 8024df0:	dc05      	bgt.n	8024dfe <_strtod_l+0x272>
 8024df2:	4665      	mov	r5, ip
 8024df4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024df6:	4369      	muls	r1, r5
 8024df8:	910d      	str	r1, [sp, #52]	@ 0x34
 8024dfa:	0019      	movs	r1, r3
 8024dfc:	e7da      	b.n	8024db4 <_strtod_l+0x228>
 8024dfe:	2b10      	cmp	r3, #16
 8024e00:	dcfb      	bgt.n	8024dfa <_strtod_l+0x26e>
 8024e02:	4661      	mov	r1, ip
 8024e04:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024e06:	434d      	muls	r5, r1
 8024e08:	9510      	str	r5, [sp, #64]	@ 0x40
 8024e0a:	e7f6      	b.n	8024dfa <_strtod_l+0x26e>
 8024e0c:	2200      	movs	r2, #0
 8024e0e:	290f      	cmp	r1, #15
 8024e10:	dce5      	bgt.n	8024dde <_strtod_l+0x252>
 8024e12:	230a      	movs	r3, #10
 8024e14:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024e16:	435d      	muls	r5, r3
 8024e18:	1963      	adds	r3, r4, r5
 8024e1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e1c:	e7df      	b.n	8024dde <_strtod_l+0x252>
 8024e1e:	2200      	movs	r2, #0
 8024e20:	920e      	str	r2, [sp, #56]	@ 0x38
 8024e22:	9206      	str	r2, [sp, #24]
 8024e24:	3201      	adds	r2, #1
 8024e26:	e7a8      	b.n	8024d7a <_strtod_l+0x1ee>
 8024e28:	2400      	movs	r4, #0
 8024e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e2c:	3302      	adds	r3, #2
 8024e2e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e32:	789b      	ldrb	r3, [r3, #2]
 8024e34:	001a      	movs	r2, r3
 8024e36:	3a30      	subs	r2, #48	@ 0x30
 8024e38:	2a09      	cmp	r2, #9
 8024e3a:	d913      	bls.n	8024e64 <_strtod_l+0x2d8>
 8024e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024e3e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e40:	2200      	movs	r2, #0
 8024e42:	e032      	b.n	8024eaa <_strtod_l+0x31e>
 8024e44:	0802edac 	.word	0x0802edac
 8024e48:	7ff00000 	.word	0x7ff00000
 8024e4c:	ffefffff 	.word	0xffefffff
 8024e50:	00000433 	.word	0x00000433
 8024e54:	7fffffff 	.word	0x7fffffff
 8024e58:	0802ebc4 	.word	0x0802ebc4
 8024e5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e5e:	1c5a      	adds	r2, r3, #1
 8024e60:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e62:	785b      	ldrb	r3, [r3, #1]
 8024e64:	2b30      	cmp	r3, #48	@ 0x30
 8024e66:	d0f9      	beq.n	8024e5c <_strtod_l+0x2d0>
 8024e68:	2200      	movs	r2, #0
 8024e6a:	9207      	str	r2, [sp, #28]
 8024e6c:	001a      	movs	r2, r3
 8024e6e:	3a31      	subs	r2, #49	@ 0x31
 8024e70:	2a08      	cmp	r2, #8
 8024e72:	d81b      	bhi.n	8024eac <_strtod_l+0x320>
 8024e74:	3b30      	subs	r3, #48	@ 0x30
 8024e76:	001a      	movs	r2, r3
 8024e78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e7a:	9307      	str	r3, [sp, #28]
 8024e7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e7e:	1c59      	adds	r1, r3, #1
 8024e80:	911d      	str	r1, [sp, #116]	@ 0x74
 8024e82:	785b      	ldrb	r3, [r3, #1]
 8024e84:	001d      	movs	r5, r3
 8024e86:	3d30      	subs	r5, #48	@ 0x30
 8024e88:	2d09      	cmp	r5, #9
 8024e8a:	d93a      	bls.n	8024f02 <_strtod_l+0x376>
 8024e8c:	9d07      	ldr	r5, [sp, #28]
 8024e8e:	1b49      	subs	r1, r1, r5
 8024e90:	000d      	movs	r5, r1
 8024e92:	49b3      	ldr	r1, [pc, #716]	@ (8025160 <_strtod_l+0x5d4>)
 8024e94:	9107      	str	r1, [sp, #28]
 8024e96:	2d08      	cmp	r5, #8
 8024e98:	dc03      	bgt.n	8024ea2 <_strtod_l+0x316>
 8024e9a:	9207      	str	r2, [sp, #28]
 8024e9c:	428a      	cmp	r2, r1
 8024e9e:	dd00      	ble.n	8024ea2 <_strtod_l+0x316>
 8024ea0:	9107      	str	r1, [sp, #28]
 8024ea2:	2c00      	cmp	r4, #0
 8024ea4:	d002      	beq.n	8024eac <_strtod_l+0x320>
 8024ea6:	9a07      	ldr	r2, [sp, #28]
 8024ea8:	4252      	negs	r2, r2
 8024eaa:	9207      	str	r2, [sp, #28]
 8024eac:	9a06      	ldr	r2, [sp, #24]
 8024eae:	2a00      	cmp	r2, #0
 8024eb0:	d14b      	bne.n	8024f4a <_strtod_l+0x3be>
 8024eb2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024eb4:	4310      	orrs	r0, r2
 8024eb6:	d000      	beq.n	8024eba <_strtod_l+0x32e>
 8024eb8:	e6a3      	b.n	8024c02 <_strtod_l+0x76>
 8024eba:	4662      	mov	r2, ip
 8024ebc:	2a00      	cmp	r2, #0
 8024ebe:	d000      	beq.n	8024ec2 <_strtod_l+0x336>
 8024ec0:	e6bb      	b.n	8024c3a <_strtod_l+0xae>
 8024ec2:	2b69      	cmp	r3, #105	@ 0x69
 8024ec4:	d025      	beq.n	8024f12 <_strtod_l+0x386>
 8024ec6:	dc21      	bgt.n	8024f0c <_strtod_l+0x380>
 8024ec8:	2b49      	cmp	r3, #73	@ 0x49
 8024eca:	d022      	beq.n	8024f12 <_strtod_l+0x386>
 8024ecc:	2b4e      	cmp	r3, #78	@ 0x4e
 8024ece:	d000      	beq.n	8024ed2 <_strtod_l+0x346>
 8024ed0:	e6b3      	b.n	8024c3a <_strtod_l+0xae>
 8024ed2:	49a4      	ldr	r1, [pc, #656]	@ (8025164 <_strtod_l+0x5d8>)
 8024ed4:	a81d      	add	r0, sp, #116	@ 0x74
 8024ed6:	f002 fe21 	bl	8027b1c <__match>
 8024eda:	2800      	cmp	r0, #0
 8024edc:	d100      	bne.n	8024ee0 <_strtod_l+0x354>
 8024ede:	e6ac      	b.n	8024c3a <_strtod_l+0xae>
 8024ee0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ee2:	781b      	ldrb	r3, [r3, #0]
 8024ee4:	2b28      	cmp	r3, #40	@ 0x28
 8024ee6:	d12a      	bne.n	8024f3e <_strtod_l+0x3b2>
 8024ee8:	499f      	ldr	r1, [pc, #636]	@ (8025168 <_strtod_l+0x5dc>)
 8024eea:	aa20      	add	r2, sp, #128	@ 0x80
 8024eec:	a81d      	add	r0, sp, #116	@ 0x74
 8024eee:	f002 fe29 	bl	8027b44 <__hexnan>
 8024ef2:	2805      	cmp	r0, #5
 8024ef4:	d123      	bne.n	8024f3e <_strtod_l+0x3b2>
 8024ef6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024ef8:	4a9c      	ldr	r2, [pc, #624]	@ (802516c <_strtod_l+0x5e0>)
 8024efa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024efc:	431a      	orrs	r2, r3
 8024efe:	0017      	movs	r7, r2
 8024f00:	e67f      	b.n	8024c02 <_strtod_l+0x76>
 8024f02:	210a      	movs	r1, #10
 8024f04:	434a      	muls	r2, r1
 8024f06:	18d2      	adds	r2, r2, r3
 8024f08:	3a30      	subs	r2, #48	@ 0x30
 8024f0a:	e7b7      	b.n	8024e7c <_strtod_l+0x2f0>
 8024f0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8024f0e:	d0e0      	beq.n	8024ed2 <_strtod_l+0x346>
 8024f10:	e693      	b.n	8024c3a <_strtod_l+0xae>
 8024f12:	4997      	ldr	r1, [pc, #604]	@ (8025170 <_strtod_l+0x5e4>)
 8024f14:	a81d      	add	r0, sp, #116	@ 0x74
 8024f16:	f002 fe01 	bl	8027b1c <__match>
 8024f1a:	2800      	cmp	r0, #0
 8024f1c:	d100      	bne.n	8024f20 <_strtod_l+0x394>
 8024f1e:	e68c      	b.n	8024c3a <_strtod_l+0xae>
 8024f20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f22:	4994      	ldr	r1, [pc, #592]	@ (8025174 <_strtod_l+0x5e8>)
 8024f24:	3b01      	subs	r3, #1
 8024f26:	a81d      	add	r0, sp, #116	@ 0x74
 8024f28:	931d      	str	r3, [sp, #116]	@ 0x74
 8024f2a:	f002 fdf7 	bl	8027b1c <__match>
 8024f2e:	2800      	cmp	r0, #0
 8024f30:	d102      	bne.n	8024f38 <_strtod_l+0x3ac>
 8024f32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f34:	3301      	adds	r3, #1
 8024f36:	931d      	str	r3, [sp, #116]	@ 0x74
 8024f38:	2600      	movs	r6, #0
 8024f3a:	4f8c      	ldr	r7, [pc, #560]	@ (802516c <_strtod_l+0x5e0>)
 8024f3c:	e661      	b.n	8024c02 <_strtod_l+0x76>
 8024f3e:	488e      	ldr	r0, [pc, #568]	@ (8025178 <_strtod_l+0x5ec>)
 8024f40:	f001 fc88 	bl	8026854 <nan>
 8024f44:	0006      	movs	r6, r0
 8024f46:	000f      	movs	r7, r1
 8024f48:	e65b      	b.n	8024c02 <_strtod_l+0x76>
 8024f4a:	9b07      	ldr	r3, [sp, #28]
 8024f4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024f4e:	1a9b      	subs	r3, r3, r2
 8024f50:	930c      	str	r3, [sp, #48]	@ 0x30
 8024f52:	9b08      	ldr	r3, [sp, #32]
 8024f54:	2b00      	cmp	r3, #0
 8024f56:	d101      	bne.n	8024f5c <_strtod_l+0x3d0>
 8024f58:	9b06      	ldr	r3, [sp, #24]
 8024f5a:	9308      	str	r3, [sp, #32]
 8024f5c:	9c06      	ldr	r4, [sp, #24]
 8024f5e:	2c10      	cmp	r4, #16
 8024f60:	dd00      	ble.n	8024f64 <_strtod_l+0x3d8>
 8024f62:	2410      	movs	r4, #16
 8024f64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024f66:	f7de fc71 	bl	800384c <__aeabi_ui2d>
 8024f6a:	9b06      	ldr	r3, [sp, #24]
 8024f6c:	0006      	movs	r6, r0
 8024f6e:	000f      	movs	r7, r1
 8024f70:	2b09      	cmp	r3, #9
 8024f72:	dc13      	bgt.n	8024f9c <_strtod_l+0x410>
 8024f74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d100      	bne.n	8024f7c <_strtod_l+0x3f0>
 8024f7a:	e642      	b.n	8024c02 <_strtod_l+0x76>
 8024f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f7e:	2b00      	cmp	r3, #0
 8024f80:	dc00      	bgt.n	8024f84 <_strtod_l+0x3f8>
 8024f82:	e07e      	b.n	8025082 <_strtod_l+0x4f6>
 8024f84:	2b16      	cmp	r3, #22
 8024f86:	dc63      	bgt.n	8025050 <_strtod_l+0x4c4>
 8024f88:	497c      	ldr	r1, [pc, #496]	@ (802517c <_strtod_l+0x5f0>)
 8024f8a:	00db      	lsls	r3, r3, #3
 8024f8c:	18c9      	adds	r1, r1, r3
 8024f8e:	0032      	movs	r2, r6
 8024f90:	6808      	ldr	r0, [r1, #0]
 8024f92:	6849      	ldr	r1, [r1, #4]
 8024f94:	003b      	movs	r3, r7
 8024f96:	f7dd fcdd 	bl	8002954 <__aeabi_dmul>
 8024f9a:	e7d3      	b.n	8024f44 <_strtod_l+0x3b8>
 8024f9c:	0022      	movs	r2, r4
 8024f9e:	4b77      	ldr	r3, [pc, #476]	@ (802517c <_strtod_l+0x5f0>)
 8024fa0:	3a09      	subs	r2, #9
 8024fa2:	00d2      	lsls	r2, r2, #3
 8024fa4:	189b      	adds	r3, r3, r2
 8024fa6:	681a      	ldr	r2, [r3, #0]
 8024fa8:	685b      	ldr	r3, [r3, #4]
 8024faa:	f7dd fcd3 	bl	8002954 <__aeabi_dmul>
 8024fae:	0006      	movs	r6, r0
 8024fb0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024fb2:	000f      	movs	r7, r1
 8024fb4:	f7de fc4a 	bl	800384c <__aeabi_ui2d>
 8024fb8:	000b      	movs	r3, r1
 8024fba:	0002      	movs	r2, r0
 8024fbc:	0039      	movs	r1, r7
 8024fbe:	0030      	movs	r0, r6
 8024fc0:	f7dc fcc8 	bl	8001954 <__aeabi_dadd>
 8024fc4:	9b06      	ldr	r3, [sp, #24]
 8024fc6:	0006      	movs	r6, r0
 8024fc8:	000f      	movs	r7, r1
 8024fca:	2b0f      	cmp	r3, #15
 8024fcc:	ddd2      	ble.n	8024f74 <_strtod_l+0x3e8>
 8024fce:	9b06      	ldr	r3, [sp, #24]
 8024fd0:	1b1c      	subs	r4, r3, r4
 8024fd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fd4:	18e4      	adds	r4, r4, r3
 8024fd6:	2c00      	cmp	r4, #0
 8024fd8:	dc00      	bgt.n	8024fdc <_strtod_l+0x450>
 8024fda:	e09b      	b.n	8025114 <_strtod_l+0x588>
 8024fdc:	220f      	movs	r2, #15
 8024fde:	0023      	movs	r3, r4
 8024fe0:	4013      	ands	r3, r2
 8024fe2:	4214      	tst	r4, r2
 8024fe4:	d00a      	beq.n	8024ffc <_strtod_l+0x470>
 8024fe6:	4965      	ldr	r1, [pc, #404]	@ (802517c <_strtod_l+0x5f0>)
 8024fe8:	00db      	lsls	r3, r3, #3
 8024fea:	18c9      	adds	r1, r1, r3
 8024fec:	0032      	movs	r2, r6
 8024fee:	6808      	ldr	r0, [r1, #0]
 8024ff0:	6849      	ldr	r1, [r1, #4]
 8024ff2:	003b      	movs	r3, r7
 8024ff4:	f7dd fcae 	bl	8002954 <__aeabi_dmul>
 8024ff8:	0006      	movs	r6, r0
 8024ffa:	000f      	movs	r7, r1
 8024ffc:	230f      	movs	r3, #15
 8024ffe:	439c      	bics	r4, r3
 8025000:	d073      	beq.n	80250ea <_strtod_l+0x55e>
 8025002:	3326      	adds	r3, #38	@ 0x26
 8025004:	33ff      	adds	r3, #255	@ 0xff
 8025006:	429c      	cmp	r4, r3
 8025008:	dd4b      	ble.n	80250a2 <_strtod_l+0x516>
 802500a:	2300      	movs	r3, #0
 802500c:	9306      	str	r3, [sp, #24]
 802500e:	9307      	str	r3, [sp, #28]
 8025010:	930d      	str	r3, [sp, #52]	@ 0x34
 8025012:	9308      	str	r3, [sp, #32]
 8025014:	2322      	movs	r3, #34	@ 0x22
 8025016:	2600      	movs	r6, #0
 8025018:	9a05      	ldr	r2, [sp, #20]
 802501a:	4f54      	ldr	r7, [pc, #336]	@ (802516c <_strtod_l+0x5e0>)
 802501c:	6013      	str	r3, [r2, #0]
 802501e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025020:	42b3      	cmp	r3, r6
 8025022:	d100      	bne.n	8025026 <_strtod_l+0x49a>
 8025024:	e5ed      	b.n	8024c02 <_strtod_l+0x76>
 8025026:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025028:	9805      	ldr	r0, [sp, #20]
 802502a:	f002 ff45 	bl	8027eb8 <_Bfree>
 802502e:	9908      	ldr	r1, [sp, #32]
 8025030:	9805      	ldr	r0, [sp, #20]
 8025032:	f002 ff41 	bl	8027eb8 <_Bfree>
 8025036:	9907      	ldr	r1, [sp, #28]
 8025038:	9805      	ldr	r0, [sp, #20]
 802503a:	f002 ff3d 	bl	8027eb8 <_Bfree>
 802503e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025040:	9805      	ldr	r0, [sp, #20]
 8025042:	f002 ff39 	bl	8027eb8 <_Bfree>
 8025046:	9906      	ldr	r1, [sp, #24]
 8025048:	9805      	ldr	r0, [sp, #20]
 802504a:	f002 ff35 	bl	8027eb8 <_Bfree>
 802504e:	e5d8      	b.n	8024c02 <_strtod_l+0x76>
 8025050:	2325      	movs	r3, #37	@ 0x25
 8025052:	9a06      	ldr	r2, [sp, #24]
 8025054:	1a9b      	subs	r3, r3, r2
 8025056:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025058:	4293      	cmp	r3, r2
 802505a:	dbb8      	blt.n	8024fce <_strtod_l+0x442>
 802505c:	240f      	movs	r4, #15
 802505e:	9b06      	ldr	r3, [sp, #24]
 8025060:	4d46      	ldr	r5, [pc, #280]	@ (802517c <_strtod_l+0x5f0>)
 8025062:	1ae4      	subs	r4, r4, r3
 8025064:	00e1      	lsls	r1, r4, #3
 8025066:	1869      	adds	r1, r5, r1
 8025068:	0032      	movs	r2, r6
 802506a:	6808      	ldr	r0, [r1, #0]
 802506c:	6849      	ldr	r1, [r1, #4]
 802506e:	003b      	movs	r3, r7
 8025070:	f7dd fc70 	bl	8002954 <__aeabi_dmul>
 8025074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025076:	1b1c      	subs	r4, r3, r4
 8025078:	00e4      	lsls	r4, r4, #3
 802507a:	192d      	adds	r5, r5, r4
 802507c:	682a      	ldr	r2, [r5, #0]
 802507e:	686b      	ldr	r3, [r5, #4]
 8025080:	e789      	b.n	8024f96 <_strtod_l+0x40a>
 8025082:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025084:	3316      	adds	r3, #22
 8025086:	dba2      	blt.n	8024fce <_strtod_l+0x442>
 8025088:	9907      	ldr	r1, [sp, #28]
 802508a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802508c:	4b3b      	ldr	r3, [pc, #236]	@ (802517c <_strtod_l+0x5f0>)
 802508e:	1a52      	subs	r2, r2, r1
 8025090:	00d2      	lsls	r2, r2, #3
 8025092:	189b      	adds	r3, r3, r2
 8025094:	0030      	movs	r0, r6
 8025096:	681a      	ldr	r2, [r3, #0]
 8025098:	685b      	ldr	r3, [r3, #4]
 802509a:	0039      	movs	r1, r7
 802509c:	f7dd f820 	bl	80020e0 <__aeabi_ddiv>
 80250a0:	e750      	b.n	8024f44 <_strtod_l+0x3b8>
 80250a2:	2300      	movs	r3, #0
 80250a4:	0030      	movs	r0, r6
 80250a6:	0039      	movs	r1, r7
 80250a8:	4d35      	ldr	r5, [pc, #212]	@ (8025180 <_strtod_l+0x5f4>)
 80250aa:	1124      	asrs	r4, r4, #4
 80250ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80250ae:	2c01      	cmp	r4, #1
 80250b0:	dc1e      	bgt.n	80250f0 <_strtod_l+0x564>
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	d001      	beq.n	80250ba <_strtod_l+0x52e>
 80250b6:	0006      	movs	r6, r0
 80250b8:	000f      	movs	r7, r1
 80250ba:	4b32      	ldr	r3, [pc, #200]	@ (8025184 <_strtod_l+0x5f8>)
 80250bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80250be:	18ff      	adds	r7, r7, r3
 80250c0:	4b2f      	ldr	r3, [pc, #188]	@ (8025180 <_strtod_l+0x5f4>)
 80250c2:	00d5      	lsls	r5, r2, #3
 80250c4:	195d      	adds	r5, r3, r5
 80250c6:	0032      	movs	r2, r6
 80250c8:	6828      	ldr	r0, [r5, #0]
 80250ca:	6869      	ldr	r1, [r5, #4]
 80250cc:	003b      	movs	r3, r7
 80250ce:	f7dd fc41 	bl	8002954 <__aeabi_dmul>
 80250d2:	4b26      	ldr	r3, [pc, #152]	@ (802516c <_strtod_l+0x5e0>)
 80250d4:	4a2c      	ldr	r2, [pc, #176]	@ (8025188 <_strtod_l+0x5fc>)
 80250d6:	0006      	movs	r6, r0
 80250d8:	400b      	ands	r3, r1
 80250da:	4293      	cmp	r3, r2
 80250dc:	d895      	bhi.n	802500a <_strtod_l+0x47e>
 80250de:	4a2b      	ldr	r2, [pc, #172]	@ (802518c <_strtod_l+0x600>)
 80250e0:	4293      	cmp	r3, r2
 80250e2:	d913      	bls.n	802510c <_strtod_l+0x580>
 80250e4:	2601      	movs	r6, #1
 80250e6:	4f2a      	ldr	r7, [pc, #168]	@ (8025190 <_strtod_l+0x604>)
 80250e8:	4276      	negs	r6, r6
 80250ea:	2300      	movs	r3, #0
 80250ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80250ee:	e086      	b.n	80251fe <_strtod_l+0x672>
 80250f0:	2201      	movs	r2, #1
 80250f2:	4214      	tst	r4, r2
 80250f4:	d004      	beq.n	8025100 <_strtod_l+0x574>
 80250f6:	682a      	ldr	r2, [r5, #0]
 80250f8:	686b      	ldr	r3, [r5, #4]
 80250fa:	f7dd fc2b 	bl	8002954 <__aeabi_dmul>
 80250fe:	2301      	movs	r3, #1
 8025100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025102:	1064      	asrs	r4, r4, #1
 8025104:	3201      	adds	r2, #1
 8025106:	9209      	str	r2, [sp, #36]	@ 0x24
 8025108:	3508      	adds	r5, #8
 802510a:	e7d0      	b.n	80250ae <_strtod_l+0x522>
 802510c:	23d4      	movs	r3, #212	@ 0xd4
 802510e:	049b      	lsls	r3, r3, #18
 8025110:	18cf      	adds	r7, r1, r3
 8025112:	e7ea      	b.n	80250ea <_strtod_l+0x55e>
 8025114:	2c00      	cmp	r4, #0
 8025116:	d0e8      	beq.n	80250ea <_strtod_l+0x55e>
 8025118:	4264      	negs	r4, r4
 802511a:	230f      	movs	r3, #15
 802511c:	0022      	movs	r2, r4
 802511e:	401a      	ands	r2, r3
 8025120:	421c      	tst	r4, r3
 8025122:	d00a      	beq.n	802513a <_strtod_l+0x5ae>
 8025124:	4b15      	ldr	r3, [pc, #84]	@ (802517c <_strtod_l+0x5f0>)
 8025126:	00d2      	lsls	r2, r2, #3
 8025128:	189b      	adds	r3, r3, r2
 802512a:	0030      	movs	r0, r6
 802512c:	681a      	ldr	r2, [r3, #0]
 802512e:	685b      	ldr	r3, [r3, #4]
 8025130:	0039      	movs	r1, r7
 8025132:	f7dc ffd5 	bl	80020e0 <__aeabi_ddiv>
 8025136:	0006      	movs	r6, r0
 8025138:	000f      	movs	r7, r1
 802513a:	1124      	asrs	r4, r4, #4
 802513c:	d0d5      	beq.n	80250ea <_strtod_l+0x55e>
 802513e:	2c1f      	cmp	r4, #31
 8025140:	dd28      	ble.n	8025194 <_strtod_l+0x608>
 8025142:	2300      	movs	r3, #0
 8025144:	9306      	str	r3, [sp, #24]
 8025146:	9307      	str	r3, [sp, #28]
 8025148:	930d      	str	r3, [sp, #52]	@ 0x34
 802514a:	9308      	str	r3, [sp, #32]
 802514c:	2322      	movs	r3, #34	@ 0x22
 802514e:	9a05      	ldr	r2, [sp, #20]
 8025150:	2600      	movs	r6, #0
 8025152:	6013      	str	r3, [r2, #0]
 8025154:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025156:	2700      	movs	r7, #0
 8025158:	2b00      	cmp	r3, #0
 802515a:	d000      	beq.n	802515e <_strtod_l+0x5d2>
 802515c:	e763      	b.n	8025026 <_strtod_l+0x49a>
 802515e:	e550      	b.n	8024c02 <_strtod_l+0x76>
 8025160:	00004e1f 	.word	0x00004e1f
 8025164:	0802ebd3 	.word	0x0802ebd3
 8025168:	0802ed98 	.word	0x0802ed98
 802516c:	7ff00000 	.word	0x7ff00000
 8025170:	0802ebcb 	.word	0x0802ebcb
 8025174:	0802ec05 	.word	0x0802ec05
 8025178:	0802ed94 	.word	0x0802ed94
 802517c:	0802ef20 	.word	0x0802ef20
 8025180:	0802eef8 	.word	0x0802eef8
 8025184:	fcb00000 	.word	0xfcb00000
 8025188:	7ca00000 	.word	0x7ca00000
 802518c:	7c900000 	.word	0x7c900000
 8025190:	7fefffff 	.word	0x7fefffff
 8025194:	2310      	movs	r3, #16
 8025196:	0022      	movs	r2, r4
 8025198:	401a      	ands	r2, r3
 802519a:	9209      	str	r2, [sp, #36]	@ 0x24
 802519c:	421c      	tst	r4, r3
 802519e:	d001      	beq.n	80251a4 <_strtod_l+0x618>
 80251a0:	335a      	adds	r3, #90	@ 0x5a
 80251a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80251a4:	0030      	movs	r0, r6
 80251a6:	0039      	movs	r1, r7
 80251a8:	2300      	movs	r3, #0
 80251aa:	4dc0      	ldr	r5, [pc, #768]	@ (80254ac <_strtod_l+0x920>)
 80251ac:	2201      	movs	r2, #1
 80251ae:	4214      	tst	r4, r2
 80251b0:	d004      	beq.n	80251bc <_strtod_l+0x630>
 80251b2:	682a      	ldr	r2, [r5, #0]
 80251b4:	686b      	ldr	r3, [r5, #4]
 80251b6:	f7dd fbcd 	bl	8002954 <__aeabi_dmul>
 80251ba:	2301      	movs	r3, #1
 80251bc:	1064      	asrs	r4, r4, #1
 80251be:	3508      	adds	r5, #8
 80251c0:	2c00      	cmp	r4, #0
 80251c2:	d1f3      	bne.n	80251ac <_strtod_l+0x620>
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	d001      	beq.n	80251cc <_strtod_l+0x640>
 80251c8:	0006      	movs	r6, r0
 80251ca:	000f      	movs	r7, r1
 80251cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251ce:	2b00      	cmp	r3, #0
 80251d0:	d00d      	beq.n	80251ee <_strtod_l+0x662>
 80251d2:	236b      	movs	r3, #107	@ 0x6b
 80251d4:	007a      	lsls	r2, r7, #1
 80251d6:	0d52      	lsrs	r2, r2, #21
 80251d8:	0039      	movs	r1, r7
 80251da:	1a9b      	subs	r3, r3, r2
 80251dc:	2b00      	cmp	r3, #0
 80251de:	dd06      	ble.n	80251ee <_strtod_l+0x662>
 80251e0:	2b1f      	cmp	r3, #31
 80251e2:	dd5c      	ble.n	802529e <_strtod_l+0x712>
 80251e4:	2600      	movs	r6, #0
 80251e6:	2b34      	cmp	r3, #52	@ 0x34
 80251e8:	dd52      	ble.n	8025290 <_strtod_l+0x704>
 80251ea:	27dc      	movs	r7, #220	@ 0xdc
 80251ec:	04bf      	lsls	r7, r7, #18
 80251ee:	2200      	movs	r2, #0
 80251f0:	2300      	movs	r3, #0
 80251f2:	0030      	movs	r0, r6
 80251f4:	0039      	movs	r1, r7
 80251f6:	f7db f95b 	bl	80004b0 <__aeabi_dcmpeq>
 80251fa:	2800      	cmp	r0, #0
 80251fc:	d1a1      	bne.n	8025142 <_strtod_l+0x5b6>
 80251fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025200:	9a08      	ldr	r2, [sp, #32]
 8025202:	9300      	str	r3, [sp, #0]
 8025204:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025206:	9b06      	ldr	r3, [sp, #24]
 8025208:	9805      	ldr	r0, [sp, #20]
 802520a:	f002 febd 	bl	8027f88 <__s2b>
 802520e:	900d      	str	r0, [sp, #52]	@ 0x34
 8025210:	2800      	cmp	r0, #0
 8025212:	d100      	bne.n	8025216 <_strtod_l+0x68a>
 8025214:	e6f9      	b.n	802500a <_strtod_l+0x47e>
 8025216:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025218:	9907      	ldr	r1, [sp, #28]
 802521a:	43db      	mvns	r3, r3
 802521c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802521e:	17db      	asrs	r3, r3, #31
 8025220:	1a52      	subs	r2, r2, r1
 8025222:	9214      	str	r2, [sp, #80]	@ 0x50
 8025224:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025226:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8025228:	17d2      	asrs	r2, r2, #31
 802522a:	4011      	ands	r1, r2
 802522c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802522e:	9114      	str	r1, [sp, #80]	@ 0x50
 8025230:	401a      	ands	r2, r3
 8025232:	2300      	movs	r3, #0
 8025234:	921a      	str	r2, [sp, #104]	@ 0x68
 8025236:	9306      	str	r3, [sp, #24]
 8025238:	9307      	str	r3, [sp, #28]
 802523a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802523c:	9805      	ldr	r0, [sp, #20]
 802523e:	6859      	ldr	r1, [r3, #4]
 8025240:	f002 fdf6 	bl	8027e30 <_Balloc>
 8025244:	9008      	str	r0, [sp, #32]
 8025246:	2800      	cmp	r0, #0
 8025248:	d100      	bne.n	802524c <_strtod_l+0x6c0>
 802524a:	e6e3      	b.n	8025014 <_strtod_l+0x488>
 802524c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802524e:	300c      	adds	r0, #12
 8025250:	0019      	movs	r1, r3
 8025252:	691a      	ldr	r2, [r3, #16]
 8025254:	310c      	adds	r1, #12
 8025256:	3202      	adds	r2, #2
 8025258:	0092      	lsls	r2, r2, #2
 802525a:	f001 faf1 	bl	8026840 <memcpy>
 802525e:	ab20      	add	r3, sp, #128	@ 0x80
 8025260:	9301      	str	r3, [sp, #4]
 8025262:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025264:	9300      	str	r3, [sp, #0]
 8025266:	0032      	movs	r2, r6
 8025268:	003b      	movs	r3, r7
 802526a:	9805      	ldr	r0, [sp, #20]
 802526c:	9610      	str	r6, [sp, #64]	@ 0x40
 802526e:	9711      	str	r7, [sp, #68]	@ 0x44
 8025270:	f003 f9d2 	bl	8028618 <__d2b>
 8025274:	901e      	str	r0, [sp, #120]	@ 0x78
 8025276:	2800      	cmp	r0, #0
 8025278:	d100      	bne.n	802527c <_strtod_l+0x6f0>
 802527a:	e6cb      	b.n	8025014 <_strtod_l+0x488>
 802527c:	2101      	movs	r1, #1
 802527e:	9805      	ldr	r0, [sp, #20]
 8025280:	f002 ff1e 	bl	80280c0 <__i2b>
 8025284:	9007      	str	r0, [sp, #28]
 8025286:	2800      	cmp	r0, #0
 8025288:	d10e      	bne.n	80252a8 <_strtod_l+0x71c>
 802528a:	2300      	movs	r3, #0
 802528c:	9307      	str	r3, [sp, #28]
 802528e:	e6c1      	b.n	8025014 <_strtod_l+0x488>
 8025290:	234b      	movs	r3, #75	@ 0x4b
 8025292:	1a9a      	subs	r2, r3, r2
 8025294:	3b4c      	subs	r3, #76	@ 0x4c
 8025296:	4093      	lsls	r3, r2
 8025298:	4019      	ands	r1, r3
 802529a:	000f      	movs	r7, r1
 802529c:	e7a7      	b.n	80251ee <_strtod_l+0x662>
 802529e:	2201      	movs	r2, #1
 80252a0:	4252      	negs	r2, r2
 80252a2:	409a      	lsls	r2, r3
 80252a4:	4016      	ands	r6, r2
 80252a6:	e7a2      	b.n	80251ee <_strtod_l+0x662>
 80252a8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80252aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80252ac:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80252ae:	1ad4      	subs	r4, r2, r3
 80252b0:	2b00      	cmp	r3, #0
 80252b2:	db01      	blt.n	80252b8 <_strtod_l+0x72c>
 80252b4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80252b6:	195d      	adds	r5, r3, r5
 80252b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80252ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80252bc:	1a5b      	subs	r3, r3, r1
 80252be:	2136      	movs	r1, #54	@ 0x36
 80252c0:	189b      	adds	r3, r3, r2
 80252c2:	1a8a      	subs	r2, r1, r2
 80252c4:	497a      	ldr	r1, [pc, #488]	@ (80254b0 <_strtod_l+0x924>)
 80252c6:	2001      	movs	r0, #1
 80252c8:	468c      	mov	ip, r1
 80252ca:	2100      	movs	r1, #0
 80252cc:	3b01      	subs	r3, #1
 80252ce:	9115      	str	r1, [sp, #84]	@ 0x54
 80252d0:	9016      	str	r0, [sp, #88]	@ 0x58
 80252d2:	4563      	cmp	r3, ip
 80252d4:	da06      	bge.n	80252e4 <_strtod_l+0x758>
 80252d6:	4661      	mov	r1, ip
 80252d8:	1ac9      	subs	r1, r1, r3
 80252da:	1a52      	subs	r2, r2, r1
 80252dc:	291f      	cmp	r1, #31
 80252de:	dc3f      	bgt.n	8025360 <_strtod_l+0x7d4>
 80252e0:	4088      	lsls	r0, r1
 80252e2:	9016      	str	r0, [sp, #88]	@ 0x58
 80252e4:	18ab      	adds	r3, r5, r2
 80252e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80252e8:	18a4      	adds	r4, r4, r2
 80252ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80252ee:	191c      	adds	r4, r3, r4
 80252f0:	002b      	movs	r3, r5
 80252f2:	4295      	cmp	r5, r2
 80252f4:	dd00      	ble.n	80252f8 <_strtod_l+0x76c>
 80252f6:	0013      	movs	r3, r2
 80252f8:	42a3      	cmp	r3, r4
 80252fa:	dd00      	ble.n	80252fe <_strtod_l+0x772>
 80252fc:	0023      	movs	r3, r4
 80252fe:	2b00      	cmp	r3, #0
 8025300:	dd04      	ble.n	802530c <_strtod_l+0x780>
 8025302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025304:	1ae4      	subs	r4, r4, r3
 8025306:	1ad2      	subs	r2, r2, r3
 8025308:	920e      	str	r2, [sp, #56]	@ 0x38
 802530a:	1aed      	subs	r5, r5, r3
 802530c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802530e:	2b00      	cmp	r3, #0
 8025310:	dd16      	ble.n	8025340 <_strtod_l+0x7b4>
 8025312:	001a      	movs	r2, r3
 8025314:	9907      	ldr	r1, [sp, #28]
 8025316:	9805      	ldr	r0, [sp, #20]
 8025318:	f002 ff94 	bl	8028244 <__pow5mult>
 802531c:	9007      	str	r0, [sp, #28]
 802531e:	2800      	cmp	r0, #0
 8025320:	d0b3      	beq.n	802528a <_strtod_l+0x6fe>
 8025322:	0001      	movs	r1, r0
 8025324:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025326:	9805      	ldr	r0, [sp, #20]
 8025328:	f002 fee2 	bl	80280f0 <__multiply>
 802532c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802532e:	2800      	cmp	r0, #0
 8025330:	d100      	bne.n	8025334 <_strtod_l+0x7a8>
 8025332:	e66f      	b.n	8025014 <_strtod_l+0x488>
 8025334:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025336:	9805      	ldr	r0, [sp, #20]
 8025338:	f002 fdbe 	bl	8027eb8 <_Bfree>
 802533c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802533e:	931e      	str	r3, [sp, #120]	@ 0x78
 8025340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025342:	2b00      	cmp	r3, #0
 8025344:	dc12      	bgt.n	802536c <_strtod_l+0x7e0>
 8025346:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025348:	2b00      	cmp	r3, #0
 802534a:	dd18      	ble.n	802537e <_strtod_l+0x7f2>
 802534c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802534e:	9908      	ldr	r1, [sp, #32]
 8025350:	9805      	ldr	r0, [sp, #20]
 8025352:	f002 ff77 	bl	8028244 <__pow5mult>
 8025356:	9008      	str	r0, [sp, #32]
 8025358:	2800      	cmp	r0, #0
 802535a:	d110      	bne.n	802537e <_strtod_l+0x7f2>
 802535c:	2300      	movs	r3, #0
 802535e:	e658      	b.n	8025012 <_strtod_l+0x486>
 8025360:	4954      	ldr	r1, [pc, #336]	@ (80254b4 <_strtod_l+0x928>)
 8025362:	1acb      	subs	r3, r1, r3
 8025364:	0001      	movs	r1, r0
 8025366:	4099      	lsls	r1, r3
 8025368:	9115      	str	r1, [sp, #84]	@ 0x54
 802536a:	e7ba      	b.n	80252e2 <_strtod_l+0x756>
 802536c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802536e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025370:	9805      	ldr	r0, [sp, #20]
 8025372:	f002 ffc3 	bl	80282fc <__lshift>
 8025376:	901e      	str	r0, [sp, #120]	@ 0x78
 8025378:	2800      	cmp	r0, #0
 802537a:	d1e4      	bne.n	8025346 <_strtod_l+0x7ba>
 802537c:	e64a      	b.n	8025014 <_strtod_l+0x488>
 802537e:	2c00      	cmp	r4, #0
 8025380:	dd07      	ble.n	8025392 <_strtod_l+0x806>
 8025382:	0022      	movs	r2, r4
 8025384:	9908      	ldr	r1, [sp, #32]
 8025386:	9805      	ldr	r0, [sp, #20]
 8025388:	f002 ffb8 	bl	80282fc <__lshift>
 802538c:	9008      	str	r0, [sp, #32]
 802538e:	2800      	cmp	r0, #0
 8025390:	d0e4      	beq.n	802535c <_strtod_l+0x7d0>
 8025392:	2d00      	cmp	r5, #0
 8025394:	dd08      	ble.n	80253a8 <_strtod_l+0x81c>
 8025396:	002a      	movs	r2, r5
 8025398:	9907      	ldr	r1, [sp, #28]
 802539a:	9805      	ldr	r0, [sp, #20]
 802539c:	f002 ffae 	bl	80282fc <__lshift>
 80253a0:	9007      	str	r0, [sp, #28]
 80253a2:	2800      	cmp	r0, #0
 80253a4:	d100      	bne.n	80253a8 <_strtod_l+0x81c>
 80253a6:	e635      	b.n	8025014 <_strtod_l+0x488>
 80253a8:	9a08      	ldr	r2, [sp, #32]
 80253aa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80253ac:	9805      	ldr	r0, [sp, #20]
 80253ae:	f003 f82d 	bl	802840c <__mdiff>
 80253b2:	9006      	str	r0, [sp, #24]
 80253b4:	2800      	cmp	r0, #0
 80253b6:	d100      	bne.n	80253ba <_strtod_l+0x82e>
 80253b8:	e62c      	b.n	8025014 <_strtod_l+0x488>
 80253ba:	68c3      	ldr	r3, [r0, #12]
 80253bc:	9907      	ldr	r1, [sp, #28]
 80253be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80253c0:	2300      	movs	r3, #0
 80253c2:	60c3      	str	r3, [r0, #12]
 80253c4:	f003 f806 	bl	80283d4 <__mcmp>
 80253c8:	2800      	cmp	r0, #0
 80253ca:	da3b      	bge.n	8025444 <_strtod_l+0x8b8>
 80253cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80253ce:	4333      	orrs	r3, r6
 80253d0:	d167      	bne.n	80254a2 <_strtod_l+0x916>
 80253d2:	033b      	lsls	r3, r7, #12
 80253d4:	d165      	bne.n	80254a2 <_strtod_l+0x916>
 80253d6:	22d6      	movs	r2, #214	@ 0xd6
 80253d8:	4b37      	ldr	r3, [pc, #220]	@ (80254b8 <_strtod_l+0x92c>)
 80253da:	04d2      	lsls	r2, r2, #19
 80253dc:	403b      	ands	r3, r7
 80253de:	4293      	cmp	r3, r2
 80253e0:	d95f      	bls.n	80254a2 <_strtod_l+0x916>
 80253e2:	9b06      	ldr	r3, [sp, #24]
 80253e4:	695b      	ldr	r3, [r3, #20]
 80253e6:	2b00      	cmp	r3, #0
 80253e8:	d103      	bne.n	80253f2 <_strtod_l+0x866>
 80253ea:	9b06      	ldr	r3, [sp, #24]
 80253ec:	691b      	ldr	r3, [r3, #16]
 80253ee:	2b01      	cmp	r3, #1
 80253f0:	dd57      	ble.n	80254a2 <_strtod_l+0x916>
 80253f2:	9906      	ldr	r1, [sp, #24]
 80253f4:	2201      	movs	r2, #1
 80253f6:	9805      	ldr	r0, [sp, #20]
 80253f8:	f002 ff80 	bl	80282fc <__lshift>
 80253fc:	9907      	ldr	r1, [sp, #28]
 80253fe:	9006      	str	r0, [sp, #24]
 8025400:	f002 ffe8 	bl	80283d4 <__mcmp>
 8025404:	2800      	cmp	r0, #0
 8025406:	dd4c      	ble.n	80254a2 <_strtod_l+0x916>
 8025408:	4b2b      	ldr	r3, [pc, #172]	@ (80254b8 <_strtod_l+0x92c>)
 802540a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802540c:	403b      	ands	r3, r7
 802540e:	2a00      	cmp	r2, #0
 8025410:	d074      	beq.n	80254fc <_strtod_l+0x970>
 8025412:	22d6      	movs	r2, #214	@ 0xd6
 8025414:	04d2      	lsls	r2, r2, #19
 8025416:	4293      	cmp	r3, r2
 8025418:	d870      	bhi.n	80254fc <_strtod_l+0x970>
 802541a:	22dc      	movs	r2, #220	@ 0xdc
 802541c:	0492      	lsls	r2, r2, #18
 802541e:	4293      	cmp	r3, r2
 8025420:	d800      	bhi.n	8025424 <_strtod_l+0x898>
 8025422:	e693      	b.n	802514c <_strtod_l+0x5c0>
 8025424:	0030      	movs	r0, r6
 8025426:	0039      	movs	r1, r7
 8025428:	4b24      	ldr	r3, [pc, #144]	@ (80254bc <_strtod_l+0x930>)
 802542a:	2200      	movs	r2, #0
 802542c:	f7dd fa92 	bl	8002954 <__aeabi_dmul>
 8025430:	4b21      	ldr	r3, [pc, #132]	@ (80254b8 <_strtod_l+0x92c>)
 8025432:	0006      	movs	r6, r0
 8025434:	000f      	movs	r7, r1
 8025436:	420b      	tst	r3, r1
 8025438:	d000      	beq.n	802543c <_strtod_l+0x8b0>
 802543a:	e5f4      	b.n	8025026 <_strtod_l+0x49a>
 802543c:	2322      	movs	r3, #34	@ 0x22
 802543e:	9a05      	ldr	r2, [sp, #20]
 8025440:	6013      	str	r3, [r2, #0]
 8025442:	e5f0      	b.n	8025026 <_strtod_l+0x49a>
 8025444:	970e      	str	r7, [sp, #56]	@ 0x38
 8025446:	2800      	cmp	r0, #0
 8025448:	d175      	bne.n	8025536 <_strtod_l+0x9aa>
 802544a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802544c:	033b      	lsls	r3, r7, #12
 802544e:	0b1b      	lsrs	r3, r3, #12
 8025450:	2a00      	cmp	r2, #0
 8025452:	d039      	beq.n	80254c8 <_strtod_l+0x93c>
 8025454:	4a1a      	ldr	r2, [pc, #104]	@ (80254c0 <_strtod_l+0x934>)
 8025456:	4293      	cmp	r3, r2
 8025458:	d138      	bne.n	80254cc <_strtod_l+0x940>
 802545a:	2101      	movs	r1, #1
 802545c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802545e:	4249      	negs	r1, r1
 8025460:	0032      	movs	r2, r6
 8025462:	0008      	movs	r0, r1
 8025464:	2b00      	cmp	r3, #0
 8025466:	d00b      	beq.n	8025480 <_strtod_l+0x8f4>
 8025468:	24d4      	movs	r4, #212	@ 0xd4
 802546a:	4b13      	ldr	r3, [pc, #76]	@ (80254b8 <_strtod_l+0x92c>)
 802546c:	0008      	movs	r0, r1
 802546e:	403b      	ands	r3, r7
 8025470:	04e4      	lsls	r4, r4, #19
 8025472:	42a3      	cmp	r3, r4
 8025474:	d804      	bhi.n	8025480 <_strtod_l+0x8f4>
 8025476:	306c      	adds	r0, #108	@ 0x6c
 8025478:	0d1b      	lsrs	r3, r3, #20
 802547a:	1ac3      	subs	r3, r0, r3
 802547c:	4099      	lsls	r1, r3
 802547e:	0008      	movs	r0, r1
 8025480:	4282      	cmp	r2, r0
 8025482:	d123      	bne.n	80254cc <_strtod_l+0x940>
 8025484:	4b0f      	ldr	r3, [pc, #60]	@ (80254c4 <_strtod_l+0x938>)
 8025486:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025488:	4299      	cmp	r1, r3
 802548a:	d102      	bne.n	8025492 <_strtod_l+0x906>
 802548c:	3201      	adds	r2, #1
 802548e:	d100      	bne.n	8025492 <_strtod_l+0x906>
 8025490:	e5c0      	b.n	8025014 <_strtod_l+0x488>
 8025492:	4b09      	ldr	r3, [pc, #36]	@ (80254b8 <_strtod_l+0x92c>)
 8025494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025496:	2600      	movs	r6, #0
 8025498:	401a      	ands	r2, r3
 802549a:	0013      	movs	r3, r2
 802549c:	2280      	movs	r2, #128	@ 0x80
 802549e:	0352      	lsls	r2, r2, #13
 80254a0:	189f      	adds	r7, r3, r2
 80254a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254a4:	2b00      	cmp	r3, #0
 80254a6:	d1bd      	bne.n	8025424 <_strtod_l+0x898>
 80254a8:	e5bd      	b.n	8025026 <_strtod_l+0x49a>
 80254aa:	46c0      	nop			@ (mov r8, r8)
 80254ac:	0802edc0 	.word	0x0802edc0
 80254b0:	fffffc02 	.word	0xfffffc02
 80254b4:	fffffbe2 	.word	0xfffffbe2
 80254b8:	7ff00000 	.word	0x7ff00000
 80254bc:	39500000 	.word	0x39500000
 80254c0:	000fffff 	.word	0x000fffff
 80254c4:	7fefffff 	.word	0x7fefffff
 80254c8:	4333      	orrs	r3, r6
 80254ca:	d09d      	beq.n	8025408 <_strtod_l+0x87c>
 80254cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80254ce:	2b00      	cmp	r3, #0
 80254d0:	d01c      	beq.n	802550c <_strtod_l+0x980>
 80254d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80254d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80254d6:	4213      	tst	r3, r2
 80254d8:	d0e3      	beq.n	80254a2 <_strtod_l+0x916>
 80254da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254dc:	0030      	movs	r0, r6
 80254de:	0039      	movs	r1, r7
 80254e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80254e2:	2b00      	cmp	r3, #0
 80254e4:	d016      	beq.n	8025514 <_strtod_l+0x988>
 80254e6:	f7ff fb39 	bl	8024b5c <sulp>
 80254ea:	0002      	movs	r2, r0
 80254ec:	000b      	movs	r3, r1
 80254ee:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80254f0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80254f2:	f7dc fa2f 	bl	8001954 <__aeabi_dadd>
 80254f6:	0006      	movs	r6, r0
 80254f8:	000f      	movs	r7, r1
 80254fa:	e7d2      	b.n	80254a2 <_strtod_l+0x916>
 80254fc:	2601      	movs	r6, #1
 80254fe:	4a92      	ldr	r2, [pc, #584]	@ (8025748 <_strtod_l+0xbbc>)
 8025500:	4276      	negs	r6, r6
 8025502:	189b      	adds	r3, r3, r2
 8025504:	4a91      	ldr	r2, [pc, #580]	@ (802574c <_strtod_l+0xbc0>)
 8025506:	431a      	orrs	r2, r3
 8025508:	0017      	movs	r7, r2
 802550a:	e7ca      	b.n	80254a2 <_strtod_l+0x916>
 802550c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802550e:	4233      	tst	r3, r6
 8025510:	d0c7      	beq.n	80254a2 <_strtod_l+0x916>
 8025512:	e7e2      	b.n	80254da <_strtod_l+0x94e>
 8025514:	f7ff fb22 	bl	8024b5c <sulp>
 8025518:	0002      	movs	r2, r0
 802551a:	000b      	movs	r3, r1
 802551c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802551e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025520:	f7dd fcfe 	bl	8002f20 <__aeabi_dsub>
 8025524:	2200      	movs	r2, #0
 8025526:	2300      	movs	r3, #0
 8025528:	0006      	movs	r6, r0
 802552a:	000f      	movs	r7, r1
 802552c:	f7da ffc0 	bl	80004b0 <__aeabi_dcmpeq>
 8025530:	2800      	cmp	r0, #0
 8025532:	d0b6      	beq.n	80254a2 <_strtod_l+0x916>
 8025534:	e60a      	b.n	802514c <_strtod_l+0x5c0>
 8025536:	9907      	ldr	r1, [sp, #28]
 8025538:	9806      	ldr	r0, [sp, #24]
 802553a:	f003 f8cd 	bl	80286d8 <__ratio>
 802553e:	2380      	movs	r3, #128	@ 0x80
 8025540:	2200      	movs	r2, #0
 8025542:	05db      	lsls	r3, r3, #23
 8025544:	0004      	movs	r4, r0
 8025546:	000d      	movs	r5, r1
 8025548:	f7da ffc2 	bl	80004d0 <__aeabi_dcmple>
 802554c:	2800      	cmp	r0, #0
 802554e:	d06c      	beq.n	802562a <_strtod_l+0xa9e>
 8025550:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025552:	2b00      	cmp	r3, #0
 8025554:	d177      	bne.n	8025646 <_strtod_l+0xaba>
 8025556:	2e00      	cmp	r6, #0
 8025558:	d157      	bne.n	802560a <_strtod_l+0xa7e>
 802555a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802555c:	031b      	lsls	r3, r3, #12
 802555e:	d15a      	bne.n	8025616 <_strtod_l+0xa8a>
 8025560:	2200      	movs	r2, #0
 8025562:	0020      	movs	r0, r4
 8025564:	0029      	movs	r1, r5
 8025566:	4b7a      	ldr	r3, [pc, #488]	@ (8025750 <_strtod_l+0xbc4>)
 8025568:	f7da ffa8 	bl	80004bc <__aeabi_dcmplt>
 802556c:	2800      	cmp	r0, #0
 802556e:	d159      	bne.n	8025624 <_strtod_l+0xa98>
 8025570:	0020      	movs	r0, r4
 8025572:	0029      	movs	r1, r5
 8025574:	2200      	movs	r2, #0
 8025576:	4b77      	ldr	r3, [pc, #476]	@ (8025754 <_strtod_l+0xbc8>)
 8025578:	f7dd f9ec 	bl	8002954 <__aeabi_dmul>
 802557c:	0004      	movs	r4, r0
 802557e:	000d      	movs	r5, r1
 8025580:	2380      	movs	r3, #128	@ 0x80
 8025582:	061b      	lsls	r3, r3, #24
 8025584:	18eb      	adds	r3, r5, r3
 8025586:	940a      	str	r4, [sp, #40]	@ 0x28
 8025588:	930b      	str	r3, [sp, #44]	@ 0x2c
 802558a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802558c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802558e:	9216      	str	r2, [sp, #88]	@ 0x58
 8025590:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025592:	4a71      	ldr	r2, [pc, #452]	@ (8025758 <_strtod_l+0xbcc>)
 8025594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025596:	4013      	ands	r3, r2
 8025598:	9315      	str	r3, [sp, #84]	@ 0x54
 802559a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802559c:	4b6f      	ldr	r3, [pc, #444]	@ (802575c <_strtod_l+0xbd0>)
 802559e:	429a      	cmp	r2, r3
 80255a0:	d000      	beq.n	80255a4 <_strtod_l+0xa18>
 80255a2:	e087      	b.n	80256b4 <_strtod_l+0xb28>
 80255a4:	4a6e      	ldr	r2, [pc, #440]	@ (8025760 <_strtod_l+0xbd4>)
 80255a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255a8:	4694      	mov	ip, r2
 80255aa:	4463      	add	r3, ip
 80255ac:	001f      	movs	r7, r3
 80255ae:	0030      	movs	r0, r6
 80255b0:	0019      	movs	r1, r3
 80255b2:	f002 ffc5 	bl	8028540 <__ulp>
 80255b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80255b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80255ba:	f7dd f9cb 	bl	8002954 <__aeabi_dmul>
 80255be:	0032      	movs	r2, r6
 80255c0:	003b      	movs	r3, r7
 80255c2:	f7dc f9c7 	bl	8001954 <__aeabi_dadd>
 80255c6:	4a64      	ldr	r2, [pc, #400]	@ (8025758 <_strtod_l+0xbcc>)
 80255c8:	4b66      	ldr	r3, [pc, #408]	@ (8025764 <_strtod_l+0xbd8>)
 80255ca:	0006      	movs	r6, r0
 80255cc:	400a      	ands	r2, r1
 80255ce:	429a      	cmp	r2, r3
 80255d0:	d940      	bls.n	8025654 <_strtod_l+0xac8>
 80255d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80255d4:	4a64      	ldr	r2, [pc, #400]	@ (8025768 <_strtod_l+0xbdc>)
 80255d6:	4293      	cmp	r3, r2
 80255d8:	d103      	bne.n	80255e2 <_strtod_l+0xa56>
 80255da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80255dc:	3301      	adds	r3, #1
 80255de:	d100      	bne.n	80255e2 <_strtod_l+0xa56>
 80255e0:	e518      	b.n	8025014 <_strtod_l+0x488>
 80255e2:	2601      	movs	r6, #1
 80255e4:	4f60      	ldr	r7, [pc, #384]	@ (8025768 <_strtod_l+0xbdc>)
 80255e6:	4276      	negs	r6, r6
 80255e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80255ea:	9805      	ldr	r0, [sp, #20]
 80255ec:	f002 fc64 	bl	8027eb8 <_Bfree>
 80255f0:	9908      	ldr	r1, [sp, #32]
 80255f2:	9805      	ldr	r0, [sp, #20]
 80255f4:	f002 fc60 	bl	8027eb8 <_Bfree>
 80255f8:	9907      	ldr	r1, [sp, #28]
 80255fa:	9805      	ldr	r0, [sp, #20]
 80255fc:	f002 fc5c 	bl	8027eb8 <_Bfree>
 8025600:	9906      	ldr	r1, [sp, #24]
 8025602:	9805      	ldr	r0, [sp, #20]
 8025604:	f002 fc58 	bl	8027eb8 <_Bfree>
 8025608:	e617      	b.n	802523a <_strtod_l+0x6ae>
 802560a:	2e01      	cmp	r6, #1
 802560c:	d103      	bne.n	8025616 <_strtod_l+0xa8a>
 802560e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025610:	2b00      	cmp	r3, #0
 8025612:	d100      	bne.n	8025616 <_strtod_l+0xa8a>
 8025614:	e59a      	b.n	802514c <_strtod_l+0x5c0>
 8025616:	2300      	movs	r3, #0
 8025618:	4c54      	ldr	r4, [pc, #336]	@ (802576c <_strtod_l+0xbe0>)
 802561a:	4d4d      	ldr	r5, [pc, #308]	@ (8025750 <_strtod_l+0xbc4>)
 802561c:	930a      	str	r3, [sp, #40]	@ 0x28
 802561e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025620:	2400      	movs	r4, #0
 8025622:	e7b2      	b.n	802558a <_strtod_l+0x9fe>
 8025624:	2400      	movs	r4, #0
 8025626:	4d4b      	ldr	r5, [pc, #300]	@ (8025754 <_strtod_l+0xbc8>)
 8025628:	e7aa      	b.n	8025580 <_strtod_l+0x9f4>
 802562a:	0020      	movs	r0, r4
 802562c:	0029      	movs	r1, r5
 802562e:	4b49      	ldr	r3, [pc, #292]	@ (8025754 <_strtod_l+0xbc8>)
 8025630:	2200      	movs	r2, #0
 8025632:	f7dd f98f 	bl	8002954 <__aeabi_dmul>
 8025636:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025638:	0004      	movs	r4, r0
 802563a:	000d      	movs	r5, r1
 802563c:	2b00      	cmp	r3, #0
 802563e:	d09f      	beq.n	8025580 <_strtod_l+0x9f4>
 8025640:	940a      	str	r4, [sp, #40]	@ 0x28
 8025642:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025644:	e7a1      	b.n	802558a <_strtod_l+0x9fe>
 8025646:	2300      	movs	r3, #0
 8025648:	4c41      	ldr	r4, [pc, #260]	@ (8025750 <_strtod_l+0xbc4>)
 802564a:	0025      	movs	r5, r4
 802564c:	930a      	str	r3, [sp, #40]	@ 0x28
 802564e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025650:	001c      	movs	r4, r3
 8025652:	e79a      	b.n	802558a <_strtod_l+0x9fe>
 8025654:	23d4      	movs	r3, #212	@ 0xd4
 8025656:	049b      	lsls	r3, r3, #18
 8025658:	18cf      	adds	r7, r1, r3
 802565a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802565c:	9710      	str	r7, [sp, #64]	@ 0x40
 802565e:	2b00      	cmp	r3, #0
 8025660:	d1c2      	bne.n	80255e8 <_strtod_l+0xa5c>
 8025662:	4b3d      	ldr	r3, [pc, #244]	@ (8025758 <_strtod_l+0xbcc>)
 8025664:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025666:	403b      	ands	r3, r7
 8025668:	429a      	cmp	r2, r3
 802566a:	d1bd      	bne.n	80255e8 <_strtod_l+0xa5c>
 802566c:	0020      	movs	r0, r4
 802566e:	0029      	movs	r1, r5
 8025670:	f7db f80a 	bl	8000688 <__aeabi_d2lz>
 8025674:	f7db f842 	bl	80006fc <__aeabi_l2d>
 8025678:	0002      	movs	r2, r0
 802567a:	000b      	movs	r3, r1
 802567c:	0020      	movs	r0, r4
 802567e:	0029      	movs	r1, r5
 8025680:	f7dd fc4e 	bl	8002f20 <__aeabi_dsub>
 8025684:	033c      	lsls	r4, r7, #12
 8025686:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025688:	0b24      	lsrs	r4, r4, #12
 802568a:	4334      	orrs	r4, r6
 802568c:	900e      	str	r0, [sp, #56]	@ 0x38
 802568e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025690:	4a37      	ldr	r2, [pc, #220]	@ (8025770 <_strtod_l+0xbe4>)
 8025692:	431c      	orrs	r4, r3
 8025694:	d052      	beq.n	802573c <_strtod_l+0xbb0>
 8025696:	4b37      	ldr	r3, [pc, #220]	@ (8025774 <_strtod_l+0xbe8>)
 8025698:	f7da ff10 	bl	80004bc <__aeabi_dcmplt>
 802569c:	2800      	cmp	r0, #0
 802569e:	d000      	beq.n	80256a2 <_strtod_l+0xb16>
 80256a0:	e4c1      	b.n	8025026 <_strtod_l+0x49a>
 80256a2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80256a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80256a6:	4a34      	ldr	r2, [pc, #208]	@ (8025778 <_strtod_l+0xbec>)
 80256a8:	4b2a      	ldr	r3, [pc, #168]	@ (8025754 <_strtod_l+0xbc8>)
 80256aa:	f7da ff1b 	bl	80004e4 <__aeabi_dcmpgt>
 80256ae:	2800      	cmp	r0, #0
 80256b0:	d09a      	beq.n	80255e8 <_strtod_l+0xa5c>
 80256b2:	e4b8      	b.n	8025026 <_strtod_l+0x49a>
 80256b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256b6:	2b00      	cmp	r3, #0
 80256b8:	d02a      	beq.n	8025710 <_strtod_l+0xb84>
 80256ba:	23d4      	movs	r3, #212	@ 0xd4
 80256bc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80256be:	04db      	lsls	r3, r3, #19
 80256c0:	429a      	cmp	r2, r3
 80256c2:	d825      	bhi.n	8025710 <_strtod_l+0xb84>
 80256c4:	0020      	movs	r0, r4
 80256c6:	0029      	movs	r1, r5
 80256c8:	4a2c      	ldr	r2, [pc, #176]	@ (802577c <_strtod_l+0xbf0>)
 80256ca:	4b2d      	ldr	r3, [pc, #180]	@ (8025780 <_strtod_l+0xbf4>)
 80256cc:	f7da ff00 	bl	80004d0 <__aeabi_dcmple>
 80256d0:	2800      	cmp	r0, #0
 80256d2:	d016      	beq.n	8025702 <_strtod_l+0xb76>
 80256d4:	0020      	movs	r0, r4
 80256d6:	0029      	movs	r1, r5
 80256d8:	f7da ffb8 	bl	800064c <__aeabi_d2uiz>
 80256dc:	2800      	cmp	r0, #0
 80256de:	d100      	bne.n	80256e2 <_strtod_l+0xb56>
 80256e0:	3001      	adds	r0, #1
 80256e2:	f7de f8b3 	bl	800384c <__aeabi_ui2d>
 80256e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80256e8:	0004      	movs	r4, r0
 80256ea:	000d      	movs	r5, r1
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	d122      	bne.n	8025736 <_strtod_l+0xbaa>
 80256f0:	2380      	movs	r3, #128	@ 0x80
 80256f2:	061b      	lsls	r3, r3, #24
 80256f4:	18cb      	adds	r3, r1, r3
 80256f6:	9018      	str	r0, [sp, #96]	@ 0x60
 80256f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80256fa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80256fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80256fe:	9216      	str	r2, [sp, #88]	@ 0x58
 8025700:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025702:	22d6      	movs	r2, #214	@ 0xd6
 8025704:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025706:	04d2      	lsls	r2, r2, #19
 8025708:	189b      	adds	r3, r3, r2
 802570a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802570c:	1a9b      	subs	r3, r3, r2
 802570e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025710:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025712:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025714:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8025716:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025718:	f002 ff12 	bl	8028540 <__ulp>
 802571c:	0002      	movs	r2, r0
 802571e:	000b      	movs	r3, r1
 8025720:	0030      	movs	r0, r6
 8025722:	0039      	movs	r1, r7
 8025724:	f7dd f916 	bl	8002954 <__aeabi_dmul>
 8025728:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802572a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802572c:	f7dc f912 	bl	8001954 <__aeabi_dadd>
 8025730:	0006      	movs	r6, r0
 8025732:	000f      	movs	r7, r1
 8025734:	e791      	b.n	802565a <_strtod_l+0xace>
 8025736:	9418      	str	r4, [sp, #96]	@ 0x60
 8025738:	9519      	str	r5, [sp, #100]	@ 0x64
 802573a:	e7de      	b.n	80256fa <_strtod_l+0xb6e>
 802573c:	4b11      	ldr	r3, [pc, #68]	@ (8025784 <_strtod_l+0xbf8>)
 802573e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025740:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8025742:	f7da febb 	bl	80004bc <__aeabi_dcmplt>
 8025746:	e7b2      	b.n	80256ae <_strtod_l+0xb22>
 8025748:	fff00000 	.word	0xfff00000
 802574c:	000fffff 	.word	0x000fffff
 8025750:	3ff00000 	.word	0x3ff00000
 8025754:	3fe00000 	.word	0x3fe00000
 8025758:	7ff00000 	.word	0x7ff00000
 802575c:	7fe00000 	.word	0x7fe00000
 8025760:	fcb00000 	.word	0xfcb00000
 8025764:	7c9fffff 	.word	0x7c9fffff
 8025768:	7fefffff 	.word	0x7fefffff
 802576c:	bff00000 	.word	0xbff00000
 8025770:	94a03595 	.word	0x94a03595
 8025774:	3fdfffff 	.word	0x3fdfffff
 8025778:	35afe535 	.word	0x35afe535
 802577c:	ffc00000 	.word	0xffc00000
 8025780:	41dfffff 	.word	0x41dfffff
 8025784:	3fcfffff 	.word	0x3fcfffff

08025788 <strtod>:
 8025788:	b510      	push	{r4, lr}
 802578a:	4c04      	ldr	r4, [pc, #16]	@ (802579c <strtod+0x14>)
 802578c:	000a      	movs	r2, r1
 802578e:	0001      	movs	r1, r0
 8025790:	4b03      	ldr	r3, [pc, #12]	@ (80257a0 <strtod+0x18>)
 8025792:	6820      	ldr	r0, [r4, #0]
 8025794:	f7ff f9fa 	bl	8024b8c <_strtod_l>
 8025798:	bd10      	pop	{r4, pc}
 802579a:	46c0      	nop			@ (mov r8, r8)
 802579c:	200003ec 	.word	0x200003ec
 80257a0:	20000280 	.word	0x20000280

080257a4 <_strtol_l.isra.0>:
 80257a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257a6:	b085      	sub	sp, #20
 80257a8:	0017      	movs	r7, r2
 80257aa:	001e      	movs	r6, r3
 80257ac:	9003      	str	r0, [sp, #12]
 80257ae:	9101      	str	r1, [sp, #4]
 80257b0:	2b24      	cmp	r3, #36	@ 0x24
 80257b2:	d823      	bhi.n	80257fc <_strtol_l.isra.0+0x58>
 80257b4:	000c      	movs	r4, r1
 80257b6:	2b01      	cmp	r3, #1
 80257b8:	d020      	beq.n	80257fc <_strtol_l.isra.0+0x58>
 80257ba:	4b3d      	ldr	r3, [pc, #244]	@ (80258b0 <_strtol_l.isra.0+0x10c>)
 80257bc:	2208      	movs	r2, #8
 80257be:	469c      	mov	ip, r3
 80257c0:	0023      	movs	r3, r4
 80257c2:	4661      	mov	r1, ip
 80257c4:	781d      	ldrb	r5, [r3, #0]
 80257c6:	3401      	adds	r4, #1
 80257c8:	5d48      	ldrb	r0, [r1, r5]
 80257ca:	0001      	movs	r1, r0
 80257cc:	4011      	ands	r1, r2
 80257ce:	4210      	tst	r0, r2
 80257d0:	d1f6      	bne.n	80257c0 <_strtol_l.isra.0+0x1c>
 80257d2:	2d2d      	cmp	r5, #45	@ 0x2d
 80257d4:	d119      	bne.n	802580a <_strtol_l.isra.0+0x66>
 80257d6:	7825      	ldrb	r5, [r4, #0]
 80257d8:	1c9c      	adds	r4, r3, #2
 80257da:	2301      	movs	r3, #1
 80257dc:	9300      	str	r3, [sp, #0]
 80257de:	2210      	movs	r2, #16
 80257e0:	0033      	movs	r3, r6
 80257e2:	4393      	bics	r3, r2
 80257e4:	d11d      	bne.n	8025822 <_strtol_l.isra.0+0x7e>
 80257e6:	2d30      	cmp	r5, #48	@ 0x30
 80257e8:	d115      	bne.n	8025816 <_strtol_l.isra.0+0x72>
 80257ea:	2120      	movs	r1, #32
 80257ec:	7823      	ldrb	r3, [r4, #0]
 80257ee:	438b      	bics	r3, r1
 80257f0:	2b58      	cmp	r3, #88	@ 0x58
 80257f2:	d110      	bne.n	8025816 <_strtol_l.isra.0+0x72>
 80257f4:	7865      	ldrb	r5, [r4, #1]
 80257f6:	3402      	adds	r4, #2
 80257f8:	2610      	movs	r6, #16
 80257fa:	e012      	b.n	8025822 <_strtol_l.isra.0+0x7e>
 80257fc:	f000 ffe8 	bl	80267d0 <__errno>
 8025800:	2316      	movs	r3, #22
 8025802:	6003      	str	r3, [r0, #0]
 8025804:	2000      	movs	r0, #0
 8025806:	b005      	add	sp, #20
 8025808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802580a:	9100      	str	r1, [sp, #0]
 802580c:	2d2b      	cmp	r5, #43	@ 0x2b
 802580e:	d1e6      	bne.n	80257de <_strtol_l.isra.0+0x3a>
 8025810:	7825      	ldrb	r5, [r4, #0]
 8025812:	1c9c      	adds	r4, r3, #2
 8025814:	e7e3      	b.n	80257de <_strtol_l.isra.0+0x3a>
 8025816:	2e00      	cmp	r6, #0
 8025818:	d1ee      	bne.n	80257f8 <_strtol_l.isra.0+0x54>
 802581a:	360a      	adds	r6, #10
 802581c:	2d30      	cmp	r5, #48	@ 0x30
 802581e:	d100      	bne.n	8025822 <_strtol_l.isra.0+0x7e>
 8025820:	3e02      	subs	r6, #2
 8025822:	4a24      	ldr	r2, [pc, #144]	@ (80258b4 <_strtol_l.isra.0+0x110>)
 8025824:	9b00      	ldr	r3, [sp, #0]
 8025826:	4694      	mov	ip, r2
 8025828:	4463      	add	r3, ip
 802582a:	0031      	movs	r1, r6
 802582c:	0018      	movs	r0, r3
 802582e:	9302      	str	r3, [sp, #8]
 8025830:	f7da fd3e 	bl	80002b0 <__aeabi_uidivmod>
 8025834:	2200      	movs	r2, #0
 8025836:	4684      	mov	ip, r0
 8025838:	0010      	movs	r0, r2
 802583a:	002b      	movs	r3, r5
 802583c:	3b30      	subs	r3, #48	@ 0x30
 802583e:	2b09      	cmp	r3, #9
 8025840:	d811      	bhi.n	8025866 <_strtol_l.isra.0+0xc2>
 8025842:	001d      	movs	r5, r3
 8025844:	42ae      	cmp	r6, r5
 8025846:	dd1d      	ble.n	8025884 <_strtol_l.isra.0+0xe0>
 8025848:	1c53      	adds	r3, r2, #1
 802584a:	d009      	beq.n	8025860 <_strtol_l.isra.0+0xbc>
 802584c:	2201      	movs	r2, #1
 802584e:	4252      	negs	r2, r2
 8025850:	4584      	cmp	ip, r0
 8025852:	d305      	bcc.n	8025860 <_strtol_l.isra.0+0xbc>
 8025854:	d101      	bne.n	802585a <_strtol_l.isra.0+0xb6>
 8025856:	42a9      	cmp	r1, r5
 8025858:	db11      	blt.n	802587e <_strtol_l.isra.0+0xda>
 802585a:	2201      	movs	r2, #1
 802585c:	4370      	muls	r0, r6
 802585e:	1828      	adds	r0, r5, r0
 8025860:	7825      	ldrb	r5, [r4, #0]
 8025862:	3401      	adds	r4, #1
 8025864:	e7e9      	b.n	802583a <_strtol_l.isra.0+0x96>
 8025866:	002b      	movs	r3, r5
 8025868:	3b41      	subs	r3, #65	@ 0x41
 802586a:	2b19      	cmp	r3, #25
 802586c:	d801      	bhi.n	8025872 <_strtol_l.isra.0+0xce>
 802586e:	3d37      	subs	r5, #55	@ 0x37
 8025870:	e7e8      	b.n	8025844 <_strtol_l.isra.0+0xa0>
 8025872:	002b      	movs	r3, r5
 8025874:	3b61      	subs	r3, #97	@ 0x61
 8025876:	2b19      	cmp	r3, #25
 8025878:	d804      	bhi.n	8025884 <_strtol_l.isra.0+0xe0>
 802587a:	3d57      	subs	r5, #87	@ 0x57
 802587c:	e7e2      	b.n	8025844 <_strtol_l.isra.0+0xa0>
 802587e:	2201      	movs	r2, #1
 8025880:	4252      	negs	r2, r2
 8025882:	e7ed      	b.n	8025860 <_strtol_l.isra.0+0xbc>
 8025884:	1c53      	adds	r3, r2, #1
 8025886:	d108      	bne.n	802589a <_strtol_l.isra.0+0xf6>
 8025888:	2322      	movs	r3, #34	@ 0x22
 802588a:	9a03      	ldr	r2, [sp, #12]
 802588c:	9802      	ldr	r0, [sp, #8]
 802588e:	6013      	str	r3, [r2, #0]
 8025890:	2f00      	cmp	r7, #0
 8025892:	d0b8      	beq.n	8025806 <_strtol_l.isra.0+0x62>
 8025894:	1e63      	subs	r3, r4, #1
 8025896:	9301      	str	r3, [sp, #4]
 8025898:	e007      	b.n	80258aa <_strtol_l.isra.0+0x106>
 802589a:	9b00      	ldr	r3, [sp, #0]
 802589c:	2b00      	cmp	r3, #0
 802589e:	d000      	beq.n	80258a2 <_strtol_l.isra.0+0xfe>
 80258a0:	4240      	negs	r0, r0
 80258a2:	2f00      	cmp	r7, #0
 80258a4:	d0af      	beq.n	8025806 <_strtol_l.isra.0+0x62>
 80258a6:	2a00      	cmp	r2, #0
 80258a8:	d1f4      	bne.n	8025894 <_strtol_l.isra.0+0xf0>
 80258aa:	9b01      	ldr	r3, [sp, #4]
 80258ac:	603b      	str	r3, [r7, #0]
 80258ae:	e7aa      	b.n	8025806 <_strtol_l.isra.0+0x62>
 80258b0:	0802ede9 	.word	0x0802ede9
 80258b4:	7fffffff 	.word	0x7fffffff

080258b8 <strtol>:
 80258b8:	b510      	push	{r4, lr}
 80258ba:	4c04      	ldr	r4, [pc, #16]	@ (80258cc <strtol+0x14>)
 80258bc:	0013      	movs	r3, r2
 80258be:	000a      	movs	r2, r1
 80258c0:	0001      	movs	r1, r0
 80258c2:	6820      	ldr	r0, [r4, #0]
 80258c4:	f7ff ff6e 	bl	80257a4 <_strtol_l.isra.0>
 80258c8:	bd10      	pop	{r4, pc}
 80258ca:	46c0      	nop			@ (mov r8, r8)
 80258cc:	200003ec 	.word	0x200003ec

080258d0 <__cvt>:
 80258d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258d2:	001f      	movs	r7, r3
 80258d4:	2300      	movs	r3, #0
 80258d6:	0016      	movs	r6, r2
 80258d8:	b08b      	sub	sp, #44	@ 0x2c
 80258da:	429f      	cmp	r7, r3
 80258dc:	da04      	bge.n	80258e8 <__cvt+0x18>
 80258de:	2180      	movs	r1, #128	@ 0x80
 80258e0:	0609      	lsls	r1, r1, #24
 80258e2:	187b      	adds	r3, r7, r1
 80258e4:	001f      	movs	r7, r3
 80258e6:	232d      	movs	r3, #45	@ 0x2d
 80258e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80258ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80258ec:	7013      	strb	r3, [r2, #0]
 80258ee:	2320      	movs	r3, #32
 80258f0:	2203      	movs	r2, #3
 80258f2:	439d      	bics	r5, r3
 80258f4:	2d46      	cmp	r5, #70	@ 0x46
 80258f6:	d007      	beq.n	8025908 <__cvt+0x38>
 80258f8:	002b      	movs	r3, r5
 80258fa:	3b45      	subs	r3, #69	@ 0x45
 80258fc:	4259      	negs	r1, r3
 80258fe:	414b      	adcs	r3, r1
 8025900:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025902:	3a01      	subs	r2, #1
 8025904:	18cb      	adds	r3, r1, r3
 8025906:	9310      	str	r3, [sp, #64]	@ 0x40
 8025908:	ab09      	add	r3, sp, #36	@ 0x24
 802590a:	9304      	str	r3, [sp, #16]
 802590c:	ab08      	add	r3, sp, #32
 802590e:	9303      	str	r3, [sp, #12]
 8025910:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025912:	9200      	str	r2, [sp, #0]
 8025914:	9302      	str	r3, [sp, #8]
 8025916:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025918:	0032      	movs	r2, r6
 802591a:	9301      	str	r3, [sp, #4]
 802591c:	003b      	movs	r3, r7
 802591e:	f001 f825 	bl	802696c <_dtoa_r>
 8025922:	0004      	movs	r4, r0
 8025924:	2d47      	cmp	r5, #71	@ 0x47
 8025926:	d11b      	bne.n	8025960 <__cvt+0x90>
 8025928:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802592a:	07db      	lsls	r3, r3, #31
 802592c:	d511      	bpl.n	8025952 <__cvt+0x82>
 802592e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025930:	18c3      	adds	r3, r0, r3
 8025932:	9307      	str	r3, [sp, #28]
 8025934:	2200      	movs	r2, #0
 8025936:	2300      	movs	r3, #0
 8025938:	0030      	movs	r0, r6
 802593a:	0039      	movs	r1, r7
 802593c:	f7da fdb8 	bl	80004b0 <__aeabi_dcmpeq>
 8025940:	2800      	cmp	r0, #0
 8025942:	d001      	beq.n	8025948 <__cvt+0x78>
 8025944:	9b07      	ldr	r3, [sp, #28]
 8025946:	9309      	str	r3, [sp, #36]	@ 0x24
 8025948:	2230      	movs	r2, #48	@ 0x30
 802594a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802594c:	9907      	ldr	r1, [sp, #28]
 802594e:	428b      	cmp	r3, r1
 8025950:	d320      	bcc.n	8025994 <__cvt+0xc4>
 8025952:	0020      	movs	r0, r4
 8025954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025956:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025958:	1b1b      	subs	r3, r3, r4
 802595a:	6013      	str	r3, [r2, #0]
 802595c:	b00b      	add	sp, #44	@ 0x2c
 802595e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025962:	18c3      	adds	r3, r0, r3
 8025964:	9307      	str	r3, [sp, #28]
 8025966:	2d46      	cmp	r5, #70	@ 0x46
 8025968:	d1e4      	bne.n	8025934 <__cvt+0x64>
 802596a:	7803      	ldrb	r3, [r0, #0]
 802596c:	2b30      	cmp	r3, #48	@ 0x30
 802596e:	d10c      	bne.n	802598a <__cvt+0xba>
 8025970:	2200      	movs	r2, #0
 8025972:	2300      	movs	r3, #0
 8025974:	0030      	movs	r0, r6
 8025976:	0039      	movs	r1, r7
 8025978:	f7da fd9a 	bl	80004b0 <__aeabi_dcmpeq>
 802597c:	2800      	cmp	r0, #0
 802597e:	d104      	bne.n	802598a <__cvt+0xba>
 8025980:	2301      	movs	r3, #1
 8025982:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025984:	1a9b      	subs	r3, r3, r2
 8025986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025988:	6013      	str	r3, [r2, #0]
 802598a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802598c:	9a07      	ldr	r2, [sp, #28]
 802598e:	681b      	ldr	r3, [r3, #0]
 8025990:	18d3      	adds	r3, r2, r3
 8025992:	e7ce      	b.n	8025932 <__cvt+0x62>
 8025994:	1c59      	adds	r1, r3, #1
 8025996:	9109      	str	r1, [sp, #36]	@ 0x24
 8025998:	701a      	strb	r2, [r3, #0]
 802599a:	e7d6      	b.n	802594a <__cvt+0x7a>

0802599c <__exponent>:
 802599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802599e:	232b      	movs	r3, #43	@ 0x2b
 80259a0:	b085      	sub	sp, #20
 80259a2:	0005      	movs	r5, r0
 80259a4:	1e0c      	subs	r4, r1, #0
 80259a6:	7002      	strb	r2, [r0, #0]
 80259a8:	da01      	bge.n	80259ae <__exponent+0x12>
 80259aa:	424c      	negs	r4, r1
 80259ac:	3302      	adds	r3, #2
 80259ae:	706b      	strb	r3, [r5, #1]
 80259b0:	2c09      	cmp	r4, #9
 80259b2:	dd2c      	ble.n	8025a0e <__exponent+0x72>
 80259b4:	ab02      	add	r3, sp, #8
 80259b6:	1dde      	adds	r6, r3, #7
 80259b8:	0020      	movs	r0, r4
 80259ba:	210a      	movs	r1, #10
 80259bc:	f7da fd62 	bl	8000484 <__aeabi_idivmod>
 80259c0:	0037      	movs	r7, r6
 80259c2:	3130      	adds	r1, #48	@ 0x30
 80259c4:	3e01      	subs	r6, #1
 80259c6:	0020      	movs	r0, r4
 80259c8:	7031      	strb	r1, [r6, #0]
 80259ca:	210a      	movs	r1, #10
 80259cc:	9401      	str	r4, [sp, #4]
 80259ce:	f7da fc73 	bl	80002b8 <__divsi3>
 80259d2:	9b01      	ldr	r3, [sp, #4]
 80259d4:	0004      	movs	r4, r0
 80259d6:	2b63      	cmp	r3, #99	@ 0x63
 80259d8:	dcee      	bgt.n	80259b8 <__exponent+0x1c>
 80259da:	1eba      	subs	r2, r7, #2
 80259dc:	1ca8      	adds	r0, r5, #2
 80259de:	0001      	movs	r1, r0
 80259e0:	0013      	movs	r3, r2
 80259e2:	3430      	adds	r4, #48	@ 0x30
 80259e4:	7014      	strb	r4, [r2, #0]
 80259e6:	ac02      	add	r4, sp, #8
 80259e8:	3407      	adds	r4, #7
 80259ea:	429c      	cmp	r4, r3
 80259ec:	d80a      	bhi.n	8025a04 <__exponent+0x68>
 80259ee:	2300      	movs	r3, #0
 80259f0:	4294      	cmp	r4, r2
 80259f2:	d303      	bcc.n	80259fc <__exponent+0x60>
 80259f4:	3309      	adds	r3, #9
 80259f6:	aa02      	add	r2, sp, #8
 80259f8:	189b      	adds	r3, r3, r2
 80259fa:	1bdb      	subs	r3, r3, r7
 80259fc:	18c0      	adds	r0, r0, r3
 80259fe:	1b40      	subs	r0, r0, r5
 8025a00:	b005      	add	sp, #20
 8025a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a04:	781c      	ldrb	r4, [r3, #0]
 8025a06:	3301      	adds	r3, #1
 8025a08:	700c      	strb	r4, [r1, #0]
 8025a0a:	3101      	adds	r1, #1
 8025a0c:	e7eb      	b.n	80259e6 <__exponent+0x4a>
 8025a0e:	2330      	movs	r3, #48	@ 0x30
 8025a10:	18e4      	adds	r4, r4, r3
 8025a12:	70ab      	strb	r3, [r5, #2]
 8025a14:	1d28      	adds	r0, r5, #4
 8025a16:	70ec      	strb	r4, [r5, #3]
 8025a18:	e7f1      	b.n	80259fe <__exponent+0x62>
	...

08025a1c <_printf_float>:
 8025a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a1e:	b097      	sub	sp, #92	@ 0x5c
 8025a20:	000d      	movs	r5, r1
 8025a22:	920a      	str	r2, [sp, #40]	@ 0x28
 8025a24:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025a28:	9009      	str	r0, [sp, #36]	@ 0x24
 8025a2a:	f000 fe7f 	bl	802672c <_localeconv_r>
 8025a2e:	6803      	ldr	r3, [r0, #0]
 8025a30:	0018      	movs	r0, r3
 8025a32:	930d      	str	r3, [sp, #52]	@ 0x34
 8025a34:	f7da fb9a 	bl	800016c <strlen>
 8025a38:	2300      	movs	r3, #0
 8025a3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025a3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8025a3e:	7e2b      	ldrb	r3, [r5, #24]
 8025a40:	2207      	movs	r2, #7
 8025a42:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a44:	682b      	ldr	r3, [r5, #0]
 8025a46:	930e      	str	r3, [sp, #56]	@ 0x38
 8025a48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025a4a:	6823      	ldr	r3, [r4, #0]
 8025a4c:	05c9      	lsls	r1, r1, #23
 8025a4e:	d545      	bpl.n	8025adc <_printf_float+0xc0>
 8025a50:	189b      	adds	r3, r3, r2
 8025a52:	4393      	bics	r3, r2
 8025a54:	001a      	movs	r2, r3
 8025a56:	3208      	adds	r2, #8
 8025a58:	6022      	str	r2, [r4, #0]
 8025a5a:	2201      	movs	r2, #1
 8025a5c:	681e      	ldr	r6, [r3, #0]
 8025a5e:	685f      	ldr	r7, [r3, #4]
 8025a60:	007b      	lsls	r3, r7, #1
 8025a62:	085b      	lsrs	r3, r3, #1
 8025a64:	9311      	str	r3, [sp, #68]	@ 0x44
 8025a66:	9610      	str	r6, [sp, #64]	@ 0x40
 8025a68:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025a6a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025a6c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025a6e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025a70:	4ba7      	ldr	r3, [pc, #668]	@ (8025d10 <_printf_float+0x2f4>)
 8025a72:	4252      	negs	r2, r2
 8025a74:	f7dd fe5e 	bl	8003734 <__aeabi_dcmpun>
 8025a78:	2800      	cmp	r0, #0
 8025a7a:	d131      	bne.n	8025ae0 <_printf_float+0xc4>
 8025a7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025a7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025a80:	2201      	movs	r2, #1
 8025a82:	4ba3      	ldr	r3, [pc, #652]	@ (8025d10 <_printf_float+0x2f4>)
 8025a84:	4252      	negs	r2, r2
 8025a86:	f7da fd23 	bl	80004d0 <__aeabi_dcmple>
 8025a8a:	2800      	cmp	r0, #0
 8025a8c:	d128      	bne.n	8025ae0 <_printf_float+0xc4>
 8025a8e:	2200      	movs	r2, #0
 8025a90:	2300      	movs	r3, #0
 8025a92:	0030      	movs	r0, r6
 8025a94:	0039      	movs	r1, r7
 8025a96:	f7da fd11 	bl	80004bc <__aeabi_dcmplt>
 8025a9a:	2800      	cmp	r0, #0
 8025a9c:	d003      	beq.n	8025aa6 <_printf_float+0x8a>
 8025a9e:	002b      	movs	r3, r5
 8025aa0:	222d      	movs	r2, #45	@ 0x2d
 8025aa2:	3343      	adds	r3, #67	@ 0x43
 8025aa4:	701a      	strb	r2, [r3, #0]
 8025aa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025aa8:	4f9a      	ldr	r7, [pc, #616]	@ (8025d14 <_printf_float+0x2f8>)
 8025aaa:	2b47      	cmp	r3, #71	@ 0x47
 8025aac:	d800      	bhi.n	8025ab0 <_printf_float+0x94>
 8025aae:	4f9a      	ldr	r7, [pc, #616]	@ (8025d18 <_printf_float+0x2fc>)
 8025ab0:	2303      	movs	r3, #3
 8025ab2:	2400      	movs	r4, #0
 8025ab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ab6:	612b      	str	r3, [r5, #16]
 8025ab8:	3301      	adds	r3, #1
 8025aba:	439a      	bics	r2, r3
 8025abc:	602a      	str	r2, [r5, #0]
 8025abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ac0:	0029      	movs	r1, r5
 8025ac2:	9300      	str	r3, [sp, #0]
 8025ac4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ac8:	aa15      	add	r2, sp, #84	@ 0x54
 8025aca:	f000 f9e5 	bl	8025e98 <_printf_common>
 8025ace:	3001      	adds	r0, #1
 8025ad0:	d000      	beq.n	8025ad4 <_printf_float+0xb8>
 8025ad2:	e09e      	b.n	8025c12 <_printf_float+0x1f6>
 8025ad4:	2001      	movs	r0, #1
 8025ad6:	4240      	negs	r0, r0
 8025ad8:	b017      	add	sp, #92	@ 0x5c
 8025ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025adc:	3307      	adds	r3, #7
 8025ade:	e7b8      	b.n	8025a52 <_printf_float+0x36>
 8025ae0:	0032      	movs	r2, r6
 8025ae2:	003b      	movs	r3, r7
 8025ae4:	0030      	movs	r0, r6
 8025ae6:	0039      	movs	r1, r7
 8025ae8:	f7dd fe24 	bl	8003734 <__aeabi_dcmpun>
 8025aec:	2800      	cmp	r0, #0
 8025aee:	d00b      	beq.n	8025b08 <_printf_float+0xec>
 8025af0:	2f00      	cmp	r7, #0
 8025af2:	da03      	bge.n	8025afc <_printf_float+0xe0>
 8025af4:	002b      	movs	r3, r5
 8025af6:	222d      	movs	r2, #45	@ 0x2d
 8025af8:	3343      	adds	r3, #67	@ 0x43
 8025afa:	701a      	strb	r2, [r3, #0]
 8025afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025afe:	4f87      	ldr	r7, [pc, #540]	@ (8025d1c <_printf_float+0x300>)
 8025b00:	2b47      	cmp	r3, #71	@ 0x47
 8025b02:	d8d5      	bhi.n	8025ab0 <_printf_float+0x94>
 8025b04:	4f86      	ldr	r7, [pc, #536]	@ (8025d20 <_printf_float+0x304>)
 8025b06:	e7d3      	b.n	8025ab0 <_printf_float+0x94>
 8025b08:	2220      	movs	r2, #32
 8025b0a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025b0c:	686b      	ldr	r3, [r5, #4]
 8025b0e:	4394      	bics	r4, r2
 8025b10:	1c5a      	adds	r2, r3, #1
 8025b12:	d146      	bne.n	8025ba2 <_printf_float+0x186>
 8025b14:	3307      	adds	r3, #7
 8025b16:	606b      	str	r3, [r5, #4]
 8025b18:	2380      	movs	r3, #128	@ 0x80
 8025b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025b1c:	00db      	lsls	r3, r3, #3
 8025b1e:	4313      	orrs	r3, r2
 8025b20:	2200      	movs	r2, #0
 8025b22:	602b      	str	r3, [r5, #0]
 8025b24:	9206      	str	r2, [sp, #24]
 8025b26:	aa14      	add	r2, sp, #80	@ 0x50
 8025b28:	9205      	str	r2, [sp, #20]
 8025b2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b2c:	a90a      	add	r1, sp, #40	@ 0x28
 8025b2e:	9204      	str	r2, [sp, #16]
 8025b30:	aa13      	add	r2, sp, #76	@ 0x4c
 8025b32:	9203      	str	r2, [sp, #12]
 8025b34:	2223      	movs	r2, #35	@ 0x23
 8025b36:	1852      	adds	r2, r2, r1
 8025b38:	9202      	str	r2, [sp, #8]
 8025b3a:	9301      	str	r3, [sp, #4]
 8025b3c:	686b      	ldr	r3, [r5, #4]
 8025b3e:	0032      	movs	r2, r6
 8025b40:	9300      	str	r3, [sp, #0]
 8025b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b44:	003b      	movs	r3, r7
 8025b46:	f7ff fec3 	bl	80258d0 <__cvt>
 8025b4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025b4c:	0007      	movs	r7, r0
 8025b4e:	2c47      	cmp	r4, #71	@ 0x47
 8025b50:	d12d      	bne.n	8025bae <_printf_float+0x192>
 8025b52:	1cd3      	adds	r3, r2, #3
 8025b54:	db02      	blt.n	8025b5c <_printf_float+0x140>
 8025b56:	686b      	ldr	r3, [r5, #4]
 8025b58:	429a      	cmp	r2, r3
 8025b5a:	dd47      	ble.n	8025bec <_printf_float+0x1d0>
 8025b5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b5e:	3b02      	subs	r3, #2
 8025b60:	b2db      	uxtb	r3, r3
 8025b62:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b64:	0028      	movs	r0, r5
 8025b66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025b68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b6a:	3901      	subs	r1, #1
 8025b6c:	3050      	adds	r0, #80	@ 0x50
 8025b6e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025b70:	f7ff ff14 	bl	802599c <__exponent>
 8025b74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025b76:	0004      	movs	r4, r0
 8025b78:	1813      	adds	r3, r2, r0
 8025b7a:	612b      	str	r3, [r5, #16]
 8025b7c:	2a01      	cmp	r2, #1
 8025b7e:	dc02      	bgt.n	8025b86 <_printf_float+0x16a>
 8025b80:	682a      	ldr	r2, [r5, #0]
 8025b82:	07d2      	lsls	r2, r2, #31
 8025b84:	d501      	bpl.n	8025b8a <_printf_float+0x16e>
 8025b86:	3301      	adds	r3, #1
 8025b88:	612b      	str	r3, [r5, #16]
 8025b8a:	2323      	movs	r3, #35	@ 0x23
 8025b8c:	aa0a      	add	r2, sp, #40	@ 0x28
 8025b8e:	189b      	adds	r3, r3, r2
 8025b90:	781b      	ldrb	r3, [r3, #0]
 8025b92:	2b00      	cmp	r3, #0
 8025b94:	d100      	bne.n	8025b98 <_printf_float+0x17c>
 8025b96:	e792      	b.n	8025abe <_printf_float+0xa2>
 8025b98:	002b      	movs	r3, r5
 8025b9a:	222d      	movs	r2, #45	@ 0x2d
 8025b9c:	3343      	adds	r3, #67	@ 0x43
 8025b9e:	701a      	strb	r2, [r3, #0]
 8025ba0:	e78d      	b.n	8025abe <_printf_float+0xa2>
 8025ba2:	2c47      	cmp	r4, #71	@ 0x47
 8025ba4:	d1b8      	bne.n	8025b18 <_printf_float+0xfc>
 8025ba6:	2b00      	cmp	r3, #0
 8025ba8:	d1b6      	bne.n	8025b18 <_printf_float+0xfc>
 8025baa:	3301      	adds	r3, #1
 8025bac:	e7b3      	b.n	8025b16 <_printf_float+0xfa>
 8025bae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bb0:	2b65      	cmp	r3, #101	@ 0x65
 8025bb2:	d9d7      	bls.n	8025b64 <_printf_float+0x148>
 8025bb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bb6:	2b66      	cmp	r3, #102	@ 0x66
 8025bb8:	d11a      	bne.n	8025bf0 <_printf_float+0x1d4>
 8025bba:	686b      	ldr	r3, [r5, #4]
 8025bbc:	2a00      	cmp	r2, #0
 8025bbe:	dd09      	ble.n	8025bd4 <_printf_float+0x1b8>
 8025bc0:	612a      	str	r2, [r5, #16]
 8025bc2:	2b00      	cmp	r3, #0
 8025bc4:	d102      	bne.n	8025bcc <_printf_float+0x1b0>
 8025bc6:	6829      	ldr	r1, [r5, #0]
 8025bc8:	07c9      	lsls	r1, r1, #31
 8025bca:	d50b      	bpl.n	8025be4 <_printf_float+0x1c8>
 8025bcc:	3301      	adds	r3, #1
 8025bce:	189b      	adds	r3, r3, r2
 8025bd0:	612b      	str	r3, [r5, #16]
 8025bd2:	e007      	b.n	8025be4 <_printf_float+0x1c8>
 8025bd4:	2b00      	cmp	r3, #0
 8025bd6:	d103      	bne.n	8025be0 <_printf_float+0x1c4>
 8025bd8:	2201      	movs	r2, #1
 8025bda:	6829      	ldr	r1, [r5, #0]
 8025bdc:	4211      	tst	r1, r2
 8025bde:	d000      	beq.n	8025be2 <_printf_float+0x1c6>
 8025be0:	1c9a      	adds	r2, r3, #2
 8025be2:	612a      	str	r2, [r5, #16]
 8025be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025be6:	2400      	movs	r4, #0
 8025be8:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025bea:	e7ce      	b.n	8025b8a <_printf_float+0x16e>
 8025bec:	2367      	movs	r3, #103	@ 0x67
 8025bee:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bf0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025bf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025bf4:	4299      	cmp	r1, r3
 8025bf6:	db06      	blt.n	8025c06 <_printf_float+0x1ea>
 8025bf8:	682b      	ldr	r3, [r5, #0]
 8025bfa:	6129      	str	r1, [r5, #16]
 8025bfc:	07db      	lsls	r3, r3, #31
 8025bfe:	d5f1      	bpl.n	8025be4 <_printf_float+0x1c8>
 8025c00:	3101      	adds	r1, #1
 8025c02:	6129      	str	r1, [r5, #16]
 8025c04:	e7ee      	b.n	8025be4 <_printf_float+0x1c8>
 8025c06:	2201      	movs	r2, #1
 8025c08:	2900      	cmp	r1, #0
 8025c0a:	dce0      	bgt.n	8025bce <_printf_float+0x1b2>
 8025c0c:	1892      	adds	r2, r2, r2
 8025c0e:	1a52      	subs	r2, r2, r1
 8025c10:	e7dd      	b.n	8025bce <_printf_float+0x1b2>
 8025c12:	682a      	ldr	r2, [r5, #0]
 8025c14:	0553      	lsls	r3, r2, #21
 8025c16:	d408      	bmi.n	8025c2a <_printf_float+0x20e>
 8025c18:	692b      	ldr	r3, [r5, #16]
 8025c1a:	003a      	movs	r2, r7
 8025c1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c22:	47a0      	blx	r4
 8025c24:	3001      	adds	r0, #1
 8025c26:	d129      	bne.n	8025c7c <_printf_float+0x260>
 8025c28:	e754      	b.n	8025ad4 <_printf_float+0xb8>
 8025c2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c2c:	2b65      	cmp	r3, #101	@ 0x65
 8025c2e:	d800      	bhi.n	8025c32 <_printf_float+0x216>
 8025c30:	e0db      	b.n	8025dea <_printf_float+0x3ce>
 8025c32:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025c34:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025c36:	2200      	movs	r2, #0
 8025c38:	2300      	movs	r3, #0
 8025c3a:	f7da fc39 	bl	80004b0 <__aeabi_dcmpeq>
 8025c3e:	2800      	cmp	r0, #0
 8025c40:	d033      	beq.n	8025caa <_printf_float+0x28e>
 8025c42:	2301      	movs	r3, #1
 8025c44:	4a37      	ldr	r2, [pc, #220]	@ (8025d24 <_printf_float+0x308>)
 8025c46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c4c:	47a0      	blx	r4
 8025c4e:	3001      	adds	r0, #1
 8025c50:	d100      	bne.n	8025c54 <_printf_float+0x238>
 8025c52:	e73f      	b.n	8025ad4 <_printf_float+0xb8>
 8025c54:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025c56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025c58:	42b3      	cmp	r3, r6
 8025c5a:	db02      	blt.n	8025c62 <_printf_float+0x246>
 8025c5c:	682b      	ldr	r3, [r5, #0]
 8025c5e:	07db      	lsls	r3, r3, #31
 8025c60:	d50c      	bpl.n	8025c7c <_printf_float+0x260>
 8025c62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c6c:	47a0      	blx	r4
 8025c6e:	2400      	movs	r4, #0
 8025c70:	3001      	adds	r0, #1
 8025c72:	d100      	bne.n	8025c76 <_printf_float+0x25a>
 8025c74:	e72e      	b.n	8025ad4 <_printf_float+0xb8>
 8025c76:	1e73      	subs	r3, r6, #1
 8025c78:	42a3      	cmp	r3, r4
 8025c7a:	dc0a      	bgt.n	8025c92 <_printf_float+0x276>
 8025c7c:	682b      	ldr	r3, [r5, #0]
 8025c7e:	079b      	lsls	r3, r3, #30
 8025c80:	d500      	bpl.n	8025c84 <_printf_float+0x268>
 8025c82:	e106      	b.n	8025e92 <_printf_float+0x476>
 8025c84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025c86:	68e8      	ldr	r0, [r5, #12]
 8025c88:	4298      	cmp	r0, r3
 8025c8a:	db00      	blt.n	8025c8e <_printf_float+0x272>
 8025c8c:	e724      	b.n	8025ad8 <_printf_float+0xbc>
 8025c8e:	0018      	movs	r0, r3
 8025c90:	e722      	b.n	8025ad8 <_printf_float+0xbc>
 8025c92:	002a      	movs	r2, r5
 8025c94:	2301      	movs	r3, #1
 8025c96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c9a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c9c:	321a      	adds	r2, #26
 8025c9e:	47b8      	blx	r7
 8025ca0:	3001      	adds	r0, #1
 8025ca2:	d100      	bne.n	8025ca6 <_printf_float+0x28a>
 8025ca4:	e716      	b.n	8025ad4 <_printf_float+0xb8>
 8025ca6:	3401      	adds	r4, #1
 8025ca8:	e7e5      	b.n	8025c76 <_printf_float+0x25a>
 8025caa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	dc3b      	bgt.n	8025d28 <_printf_float+0x30c>
 8025cb0:	2301      	movs	r3, #1
 8025cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8025d24 <_printf_float+0x308>)
 8025cb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cb8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cba:	47a0      	blx	r4
 8025cbc:	3001      	adds	r0, #1
 8025cbe:	d100      	bne.n	8025cc2 <_printf_float+0x2a6>
 8025cc0:	e708      	b.n	8025ad4 <_printf_float+0xb8>
 8025cc2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025cc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025cc6:	4333      	orrs	r3, r6
 8025cc8:	d102      	bne.n	8025cd0 <_printf_float+0x2b4>
 8025cca:	682b      	ldr	r3, [r5, #0]
 8025ccc:	07db      	lsls	r3, r3, #31
 8025cce:	d5d5      	bpl.n	8025c7c <_printf_float+0x260>
 8025cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025cd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025cd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cd8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cda:	47a0      	blx	r4
 8025cdc:	2300      	movs	r3, #0
 8025cde:	3001      	adds	r0, #1
 8025ce0:	d100      	bne.n	8025ce4 <_printf_float+0x2c8>
 8025ce2:	e6f7      	b.n	8025ad4 <_printf_float+0xb8>
 8025ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ce6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ce8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025cea:	425b      	negs	r3, r3
 8025cec:	4293      	cmp	r3, r2
 8025cee:	dc01      	bgt.n	8025cf4 <_printf_float+0x2d8>
 8025cf0:	0033      	movs	r3, r6
 8025cf2:	e792      	b.n	8025c1a <_printf_float+0x1fe>
 8025cf4:	002a      	movs	r2, r5
 8025cf6:	2301      	movs	r3, #1
 8025cf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cfc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cfe:	321a      	adds	r2, #26
 8025d00:	47a0      	blx	r4
 8025d02:	3001      	adds	r0, #1
 8025d04:	d100      	bne.n	8025d08 <_printf_float+0x2ec>
 8025d06:	e6e5      	b.n	8025ad4 <_printf_float+0xb8>
 8025d08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d0a:	3301      	adds	r3, #1
 8025d0c:	e7ea      	b.n	8025ce4 <_printf_float+0x2c8>
 8025d0e:	46c0      	nop			@ (mov r8, r8)
 8025d10:	7fefffff 	.word	0x7fefffff
 8025d14:	0802ebca 	.word	0x0802ebca
 8025d18:	0802ebc6 	.word	0x0802ebc6
 8025d1c:	0802ebd2 	.word	0x0802ebd2
 8025d20:	0802ebce 	.word	0x0802ebce
 8025d24:	0802ebd6 	.word	0x0802ebd6
 8025d28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025d2a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025d2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d2e:	429e      	cmp	r6, r3
 8025d30:	dd00      	ble.n	8025d34 <_printf_float+0x318>
 8025d32:	001e      	movs	r6, r3
 8025d34:	2e00      	cmp	r6, #0
 8025d36:	dc31      	bgt.n	8025d9c <_printf_float+0x380>
 8025d38:	43f3      	mvns	r3, r6
 8025d3a:	2400      	movs	r4, #0
 8025d3c:	17db      	asrs	r3, r3, #31
 8025d3e:	4033      	ands	r3, r6
 8025d40:	930e      	str	r3, [sp, #56]	@ 0x38
 8025d42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d46:	1af3      	subs	r3, r6, r3
 8025d48:	42a3      	cmp	r3, r4
 8025d4a:	dc30      	bgt.n	8025dae <_printf_float+0x392>
 8025d4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025d50:	429a      	cmp	r2, r3
 8025d52:	dc38      	bgt.n	8025dc6 <_printf_float+0x3aa>
 8025d54:	682b      	ldr	r3, [r5, #0]
 8025d56:	07db      	lsls	r3, r3, #31
 8025d58:	d435      	bmi.n	8025dc6 <_printf_float+0x3aa>
 8025d5a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025d60:	1b9b      	subs	r3, r3, r6
 8025d62:	1b14      	subs	r4, r2, r4
 8025d64:	429c      	cmp	r4, r3
 8025d66:	dd00      	ble.n	8025d6a <_printf_float+0x34e>
 8025d68:	001c      	movs	r4, r3
 8025d6a:	2c00      	cmp	r4, #0
 8025d6c:	dc34      	bgt.n	8025dd8 <_printf_float+0x3bc>
 8025d6e:	43e3      	mvns	r3, r4
 8025d70:	2600      	movs	r6, #0
 8025d72:	17db      	asrs	r3, r3, #31
 8025d74:	401c      	ands	r4, r3
 8025d76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025d7a:	1ad3      	subs	r3, r2, r3
 8025d7c:	1b1b      	subs	r3, r3, r4
 8025d7e:	42b3      	cmp	r3, r6
 8025d80:	dc00      	bgt.n	8025d84 <_printf_float+0x368>
 8025d82:	e77b      	b.n	8025c7c <_printf_float+0x260>
 8025d84:	002a      	movs	r2, r5
 8025d86:	2301      	movs	r3, #1
 8025d88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025d8e:	321a      	adds	r2, #26
 8025d90:	47b8      	blx	r7
 8025d92:	3001      	adds	r0, #1
 8025d94:	d100      	bne.n	8025d98 <_printf_float+0x37c>
 8025d96:	e69d      	b.n	8025ad4 <_printf_float+0xb8>
 8025d98:	3601      	adds	r6, #1
 8025d9a:	e7ec      	b.n	8025d76 <_printf_float+0x35a>
 8025d9c:	0033      	movs	r3, r6
 8025d9e:	003a      	movs	r2, r7
 8025da0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025da4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025da6:	47a0      	blx	r4
 8025da8:	3001      	adds	r0, #1
 8025daa:	d1c5      	bne.n	8025d38 <_printf_float+0x31c>
 8025dac:	e692      	b.n	8025ad4 <_printf_float+0xb8>
 8025dae:	002a      	movs	r2, r5
 8025db0:	2301      	movs	r3, #1
 8025db2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025db4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025db6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025db8:	321a      	adds	r2, #26
 8025dba:	47b0      	blx	r6
 8025dbc:	3001      	adds	r0, #1
 8025dbe:	d100      	bne.n	8025dc2 <_printf_float+0x3a6>
 8025dc0:	e688      	b.n	8025ad4 <_printf_float+0xb8>
 8025dc2:	3401      	adds	r4, #1
 8025dc4:	e7bd      	b.n	8025d42 <_printf_float+0x326>
 8025dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025dc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dd0:	47a0      	blx	r4
 8025dd2:	3001      	adds	r0, #1
 8025dd4:	d1c1      	bne.n	8025d5a <_printf_float+0x33e>
 8025dd6:	e67d      	b.n	8025ad4 <_printf_float+0xb8>
 8025dd8:	19ba      	adds	r2, r7, r6
 8025dda:	0023      	movs	r3, r4
 8025ddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025de0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025de2:	47b0      	blx	r6
 8025de4:	3001      	adds	r0, #1
 8025de6:	d1c2      	bne.n	8025d6e <_printf_float+0x352>
 8025de8:	e674      	b.n	8025ad4 <_printf_float+0xb8>
 8025dea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025dec:	930c      	str	r3, [sp, #48]	@ 0x30
 8025dee:	2b01      	cmp	r3, #1
 8025df0:	dc02      	bgt.n	8025df8 <_printf_float+0x3dc>
 8025df2:	2301      	movs	r3, #1
 8025df4:	421a      	tst	r2, r3
 8025df6:	d039      	beq.n	8025e6c <_printf_float+0x450>
 8025df8:	2301      	movs	r3, #1
 8025dfa:	003a      	movs	r2, r7
 8025dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e02:	47b0      	blx	r6
 8025e04:	3001      	adds	r0, #1
 8025e06:	d100      	bne.n	8025e0a <_printf_float+0x3ee>
 8025e08:	e664      	b.n	8025ad4 <_printf_float+0xb8>
 8025e0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025e0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e12:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e14:	47b0      	blx	r6
 8025e16:	3001      	adds	r0, #1
 8025e18:	d100      	bne.n	8025e1c <_printf_float+0x400>
 8025e1a:	e65b      	b.n	8025ad4 <_printf_float+0xb8>
 8025e1c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025e1e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025e20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e22:	2200      	movs	r2, #0
 8025e24:	3b01      	subs	r3, #1
 8025e26:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e28:	2300      	movs	r3, #0
 8025e2a:	f7da fb41 	bl	80004b0 <__aeabi_dcmpeq>
 8025e2e:	2800      	cmp	r0, #0
 8025e30:	d11a      	bne.n	8025e68 <_printf_float+0x44c>
 8025e32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e34:	1c7a      	adds	r2, r7, #1
 8025e36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e3c:	47b0      	blx	r6
 8025e3e:	3001      	adds	r0, #1
 8025e40:	d10e      	bne.n	8025e60 <_printf_float+0x444>
 8025e42:	e647      	b.n	8025ad4 <_printf_float+0xb8>
 8025e44:	002a      	movs	r2, r5
 8025e46:	2301      	movs	r3, #1
 8025e48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e4e:	321a      	adds	r2, #26
 8025e50:	47b8      	blx	r7
 8025e52:	3001      	adds	r0, #1
 8025e54:	d100      	bne.n	8025e58 <_printf_float+0x43c>
 8025e56:	e63d      	b.n	8025ad4 <_printf_float+0xb8>
 8025e58:	3601      	adds	r6, #1
 8025e5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e5c:	429e      	cmp	r6, r3
 8025e5e:	dbf1      	blt.n	8025e44 <_printf_float+0x428>
 8025e60:	002a      	movs	r2, r5
 8025e62:	0023      	movs	r3, r4
 8025e64:	3250      	adds	r2, #80	@ 0x50
 8025e66:	e6d9      	b.n	8025c1c <_printf_float+0x200>
 8025e68:	2600      	movs	r6, #0
 8025e6a:	e7f6      	b.n	8025e5a <_printf_float+0x43e>
 8025e6c:	003a      	movs	r2, r7
 8025e6e:	e7e2      	b.n	8025e36 <_printf_float+0x41a>
 8025e70:	002a      	movs	r2, r5
 8025e72:	2301      	movs	r3, #1
 8025e74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e7a:	3219      	adds	r2, #25
 8025e7c:	47b0      	blx	r6
 8025e7e:	3001      	adds	r0, #1
 8025e80:	d100      	bne.n	8025e84 <_printf_float+0x468>
 8025e82:	e627      	b.n	8025ad4 <_printf_float+0xb8>
 8025e84:	3401      	adds	r4, #1
 8025e86:	68eb      	ldr	r3, [r5, #12]
 8025e88:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025e8a:	1a9b      	subs	r3, r3, r2
 8025e8c:	42a3      	cmp	r3, r4
 8025e8e:	dcef      	bgt.n	8025e70 <_printf_float+0x454>
 8025e90:	e6f8      	b.n	8025c84 <_printf_float+0x268>
 8025e92:	2400      	movs	r4, #0
 8025e94:	e7f7      	b.n	8025e86 <_printf_float+0x46a>
 8025e96:	46c0      	nop			@ (mov r8, r8)

08025e98 <_printf_common>:
 8025e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025e9a:	0016      	movs	r6, r2
 8025e9c:	9301      	str	r3, [sp, #4]
 8025e9e:	688a      	ldr	r2, [r1, #8]
 8025ea0:	690b      	ldr	r3, [r1, #16]
 8025ea2:	000c      	movs	r4, r1
 8025ea4:	9000      	str	r0, [sp, #0]
 8025ea6:	4293      	cmp	r3, r2
 8025ea8:	da00      	bge.n	8025eac <_printf_common+0x14>
 8025eaa:	0013      	movs	r3, r2
 8025eac:	0022      	movs	r2, r4
 8025eae:	6033      	str	r3, [r6, #0]
 8025eb0:	3243      	adds	r2, #67	@ 0x43
 8025eb2:	7812      	ldrb	r2, [r2, #0]
 8025eb4:	2a00      	cmp	r2, #0
 8025eb6:	d001      	beq.n	8025ebc <_printf_common+0x24>
 8025eb8:	3301      	adds	r3, #1
 8025eba:	6033      	str	r3, [r6, #0]
 8025ebc:	6823      	ldr	r3, [r4, #0]
 8025ebe:	069b      	lsls	r3, r3, #26
 8025ec0:	d502      	bpl.n	8025ec8 <_printf_common+0x30>
 8025ec2:	6833      	ldr	r3, [r6, #0]
 8025ec4:	3302      	adds	r3, #2
 8025ec6:	6033      	str	r3, [r6, #0]
 8025ec8:	6822      	ldr	r2, [r4, #0]
 8025eca:	2306      	movs	r3, #6
 8025ecc:	0015      	movs	r5, r2
 8025ece:	401d      	ands	r5, r3
 8025ed0:	421a      	tst	r2, r3
 8025ed2:	d027      	beq.n	8025f24 <_printf_common+0x8c>
 8025ed4:	0023      	movs	r3, r4
 8025ed6:	3343      	adds	r3, #67	@ 0x43
 8025ed8:	781b      	ldrb	r3, [r3, #0]
 8025eda:	1e5a      	subs	r2, r3, #1
 8025edc:	4193      	sbcs	r3, r2
 8025ede:	6822      	ldr	r2, [r4, #0]
 8025ee0:	0692      	lsls	r2, r2, #26
 8025ee2:	d430      	bmi.n	8025f46 <_printf_common+0xae>
 8025ee4:	0022      	movs	r2, r4
 8025ee6:	9901      	ldr	r1, [sp, #4]
 8025ee8:	9800      	ldr	r0, [sp, #0]
 8025eea:	9d08      	ldr	r5, [sp, #32]
 8025eec:	3243      	adds	r2, #67	@ 0x43
 8025eee:	47a8      	blx	r5
 8025ef0:	3001      	adds	r0, #1
 8025ef2:	d025      	beq.n	8025f40 <_printf_common+0xa8>
 8025ef4:	2206      	movs	r2, #6
 8025ef6:	6823      	ldr	r3, [r4, #0]
 8025ef8:	2500      	movs	r5, #0
 8025efa:	4013      	ands	r3, r2
 8025efc:	2b04      	cmp	r3, #4
 8025efe:	d105      	bne.n	8025f0c <_printf_common+0x74>
 8025f00:	6833      	ldr	r3, [r6, #0]
 8025f02:	68e5      	ldr	r5, [r4, #12]
 8025f04:	1aed      	subs	r5, r5, r3
 8025f06:	43eb      	mvns	r3, r5
 8025f08:	17db      	asrs	r3, r3, #31
 8025f0a:	401d      	ands	r5, r3
 8025f0c:	68a3      	ldr	r3, [r4, #8]
 8025f0e:	6922      	ldr	r2, [r4, #16]
 8025f10:	4293      	cmp	r3, r2
 8025f12:	dd01      	ble.n	8025f18 <_printf_common+0x80>
 8025f14:	1a9b      	subs	r3, r3, r2
 8025f16:	18ed      	adds	r5, r5, r3
 8025f18:	2600      	movs	r6, #0
 8025f1a:	42b5      	cmp	r5, r6
 8025f1c:	d120      	bne.n	8025f60 <_printf_common+0xc8>
 8025f1e:	2000      	movs	r0, #0
 8025f20:	e010      	b.n	8025f44 <_printf_common+0xac>
 8025f22:	3501      	adds	r5, #1
 8025f24:	68e3      	ldr	r3, [r4, #12]
 8025f26:	6832      	ldr	r2, [r6, #0]
 8025f28:	1a9b      	subs	r3, r3, r2
 8025f2a:	42ab      	cmp	r3, r5
 8025f2c:	ddd2      	ble.n	8025ed4 <_printf_common+0x3c>
 8025f2e:	0022      	movs	r2, r4
 8025f30:	2301      	movs	r3, #1
 8025f32:	9901      	ldr	r1, [sp, #4]
 8025f34:	9800      	ldr	r0, [sp, #0]
 8025f36:	9f08      	ldr	r7, [sp, #32]
 8025f38:	3219      	adds	r2, #25
 8025f3a:	47b8      	blx	r7
 8025f3c:	3001      	adds	r0, #1
 8025f3e:	d1f0      	bne.n	8025f22 <_printf_common+0x8a>
 8025f40:	2001      	movs	r0, #1
 8025f42:	4240      	negs	r0, r0
 8025f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025f46:	2030      	movs	r0, #48	@ 0x30
 8025f48:	18e1      	adds	r1, r4, r3
 8025f4a:	3143      	adds	r1, #67	@ 0x43
 8025f4c:	7008      	strb	r0, [r1, #0]
 8025f4e:	0021      	movs	r1, r4
 8025f50:	1c5a      	adds	r2, r3, #1
 8025f52:	3145      	adds	r1, #69	@ 0x45
 8025f54:	7809      	ldrb	r1, [r1, #0]
 8025f56:	18a2      	adds	r2, r4, r2
 8025f58:	3243      	adds	r2, #67	@ 0x43
 8025f5a:	3302      	adds	r3, #2
 8025f5c:	7011      	strb	r1, [r2, #0]
 8025f5e:	e7c1      	b.n	8025ee4 <_printf_common+0x4c>
 8025f60:	0022      	movs	r2, r4
 8025f62:	2301      	movs	r3, #1
 8025f64:	9901      	ldr	r1, [sp, #4]
 8025f66:	9800      	ldr	r0, [sp, #0]
 8025f68:	9f08      	ldr	r7, [sp, #32]
 8025f6a:	321a      	adds	r2, #26
 8025f6c:	47b8      	blx	r7
 8025f6e:	3001      	adds	r0, #1
 8025f70:	d0e6      	beq.n	8025f40 <_printf_common+0xa8>
 8025f72:	3601      	adds	r6, #1
 8025f74:	e7d1      	b.n	8025f1a <_printf_common+0x82>
	...

08025f78 <_printf_i>:
 8025f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f7a:	b08b      	sub	sp, #44	@ 0x2c
 8025f7c:	9206      	str	r2, [sp, #24]
 8025f7e:	000a      	movs	r2, r1
 8025f80:	3243      	adds	r2, #67	@ 0x43
 8025f82:	9307      	str	r3, [sp, #28]
 8025f84:	9005      	str	r0, [sp, #20]
 8025f86:	9203      	str	r2, [sp, #12]
 8025f88:	7e0a      	ldrb	r2, [r1, #24]
 8025f8a:	000c      	movs	r4, r1
 8025f8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025f8e:	2a78      	cmp	r2, #120	@ 0x78
 8025f90:	d809      	bhi.n	8025fa6 <_printf_i+0x2e>
 8025f92:	2a62      	cmp	r2, #98	@ 0x62
 8025f94:	d80b      	bhi.n	8025fae <_printf_i+0x36>
 8025f96:	2a00      	cmp	r2, #0
 8025f98:	d100      	bne.n	8025f9c <_printf_i+0x24>
 8025f9a:	e0ba      	b.n	8026112 <_printf_i+0x19a>
 8025f9c:	497a      	ldr	r1, [pc, #488]	@ (8026188 <_printf_i+0x210>)
 8025f9e:	9104      	str	r1, [sp, #16]
 8025fa0:	2a58      	cmp	r2, #88	@ 0x58
 8025fa2:	d100      	bne.n	8025fa6 <_printf_i+0x2e>
 8025fa4:	e08e      	b.n	80260c4 <_printf_i+0x14c>
 8025fa6:	0025      	movs	r5, r4
 8025fa8:	3542      	adds	r5, #66	@ 0x42
 8025faa:	702a      	strb	r2, [r5, #0]
 8025fac:	e022      	b.n	8025ff4 <_printf_i+0x7c>
 8025fae:	0010      	movs	r0, r2
 8025fb0:	3863      	subs	r0, #99	@ 0x63
 8025fb2:	2815      	cmp	r0, #21
 8025fb4:	d8f7      	bhi.n	8025fa6 <_printf_i+0x2e>
 8025fb6:	f7da f8eb 	bl	8000190 <__gnu_thumb1_case_shi>
 8025fba:	0016      	.short	0x0016
 8025fbc:	fff6001f 	.word	0xfff6001f
 8025fc0:	fff6fff6 	.word	0xfff6fff6
 8025fc4:	001ffff6 	.word	0x001ffff6
 8025fc8:	fff6fff6 	.word	0xfff6fff6
 8025fcc:	fff6fff6 	.word	0xfff6fff6
 8025fd0:	0036009f 	.word	0x0036009f
 8025fd4:	fff6007e 	.word	0xfff6007e
 8025fd8:	00b0fff6 	.word	0x00b0fff6
 8025fdc:	0036fff6 	.word	0x0036fff6
 8025fe0:	fff6fff6 	.word	0xfff6fff6
 8025fe4:	0082      	.short	0x0082
 8025fe6:	0025      	movs	r5, r4
 8025fe8:	681a      	ldr	r2, [r3, #0]
 8025fea:	3542      	adds	r5, #66	@ 0x42
 8025fec:	1d11      	adds	r1, r2, #4
 8025fee:	6019      	str	r1, [r3, #0]
 8025ff0:	6813      	ldr	r3, [r2, #0]
 8025ff2:	702b      	strb	r3, [r5, #0]
 8025ff4:	2301      	movs	r3, #1
 8025ff6:	e09e      	b.n	8026136 <_printf_i+0x1be>
 8025ff8:	6818      	ldr	r0, [r3, #0]
 8025ffa:	6809      	ldr	r1, [r1, #0]
 8025ffc:	1d02      	adds	r2, r0, #4
 8025ffe:	060d      	lsls	r5, r1, #24
 8026000:	d50b      	bpl.n	802601a <_printf_i+0xa2>
 8026002:	6806      	ldr	r6, [r0, #0]
 8026004:	601a      	str	r2, [r3, #0]
 8026006:	2e00      	cmp	r6, #0
 8026008:	da03      	bge.n	8026012 <_printf_i+0x9a>
 802600a:	232d      	movs	r3, #45	@ 0x2d
 802600c:	9a03      	ldr	r2, [sp, #12]
 802600e:	4276      	negs	r6, r6
 8026010:	7013      	strb	r3, [r2, #0]
 8026012:	4b5d      	ldr	r3, [pc, #372]	@ (8026188 <_printf_i+0x210>)
 8026014:	270a      	movs	r7, #10
 8026016:	9304      	str	r3, [sp, #16]
 8026018:	e018      	b.n	802604c <_printf_i+0xd4>
 802601a:	6806      	ldr	r6, [r0, #0]
 802601c:	601a      	str	r2, [r3, #0]
 802601e:	0649      	lsls	r1, r1, #25
 8026020:	d5f1      	bpl.n	8026006 <_printf_i+0x8e>
 8026022:	b236      	sxth	r6, r6
 8026024:	e7ef      	b.n	8026006 <_printf_i+0x8e>
 8026026:	6808      	ldr	r0, [r1, #0]
 8026028:	6819      	ldr	r1, [r3, #0]
 802602a:	c940      	ldmia	r1!, {r6}
 802602c:	0605      	lsls	r5, r0, #24
 802602e:	d402      	bmi.n	8026036 <_printf_i+0xbe>
 8026030:	0640      	lsls	r0, r0, #25
 8026032:	d500      	bpl.n	8026036 <_printf_i+0xbe>
 8026034:	b2b6      	uxth	r6, r6
 8026036:	6019      	str	r1, [r3, #0]
 8026038:	4b53      	ldr	r3, [pc, #332]	@ (8026188 <_printf_i+0x210>)
 802603a:	270a      	movs	r7, #10
 802603c:	9304      	str	r3, [sp, #16]
 802603e:	2a6f      	cmp	r2, #111	@ 0x6f
 8026040:	d100      	bne.n	8026044 <_printf_i+0xcc>
 8026042:	3f02      	subs	r7, #2
 8026044:	0023      	movs	r3, r4
 8026046:	2200      	movs	r2, #0
 8026048:	3343      	adds	r3, #67	@ 0x43
 802604a:	701a      	strb	r2, [r3, #0]
 802604c:	6863      	ldr	r3, [r4, #4]
 802604e:	60a3      	str	r3, [r4, #8]
 8026050:	2b00      	cmp	r3, #0
 8026052:	db06      	blt.n	8026062 <_printf_i+0xea>
 8026054:	2104      	movs	r1, #4
 8026056:	6822      	ldr	r2, [r4, #0]
 8026058:	9d03      	ldr	r5, [sp, #12]
 802605a:	438a      	bics	r2, r1
 802605c:	6022      	str	r2, [r4, #0]
 802605e:	4333      	orrs	r3, r6
 8026060:	d00c      	beq.n	802607c <_printf_i+0x104>
 8026062:	9d03      	ldr	r5, [sp, #12]
 8026064:	0030      	movs	r0, r6
 8026066:	0039      	movs	r1, r7
 8026068:	f7da f922 	bl	80002b0 <__aeabi_uidivmod>
 802606c:	9b04      	ldr	r3, [sp, #16]
 802606e:	3d01      	subs	r5, #1
 8026070:	5c5b      	ldrb	r3, [r3, r1]
 8026072:	702b      	strb	r3, [r5, #0]
 8026074:	0033      	movs	r3, r6
 8026076:	0006      	movs	r6, r0
 8026078:	429f      	cmp	r7, r3
 802607a:	d9f3      	bls.n	8026064 <_printf_i+0xec>
 802607c:	2f08      	cmp	r7, #8
 802607e:	d109      	bne.n	8026094 <_printf_i+0x11c>
 8026080:	6823      	ldr	r3, [r4, #0]
 8026082:	07db      	lsls	r3, r3, #31
 8026084:	d506      	bpl.n	8026094 <_printf_i+0x11c>
 8026086:	6862      	ldr	r2, [r4, #4]
 8026088:	6923      	ldr	r3, [r4, #16]
 802608a:	429a      	cmp	r2, r3
 802608c:	dc02      	bgt.n	8026094 <_printf_i+0x11c>
 802608e:	2330      	movs	r3, #48	@ 0x30
 8026090:	3d01      	subs	r5, #1
 8026092:	702b      	strb	r3, [r5, #0]
 8026094:	9b03      	ldr	r3, [sp, #12]
 8026096:	1b5b      	subs	r3, r3, r5
 8026098:	6123      	str	r3, [r4, #16]
 802609a:	9b07      	ldr	r3, [sp, #28]
 802609c:	0021      	movs	r1, r4
 802609e:	9300      	str	r3, [sp, #0]
 80260a0:	9805      	ldr	r0, [sp, #20]
 80260a2:	9b06      	ldr	r3, [sp, #24]
 80260a4:	aa09      	add	r2, sp, #36	@ 0x24
 80260a6:	f7ff fef7 	bl	8025e98 <_printf_common>
 80260aa:	3001      	adds	r0, #1
 80260ac:	d148      	bne.n	8026140 <_printf_i+0x1c8>
 80260ae:	2001      	movs	r0, #1
 80260b0:	4240      	negs	r0, r0
 80260b2:	b00b      	add	sp, #44	@ 0x2c
 80260b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260b6:	2220      	movs	r2, #32
 80260b8:	6809      	ldr	r1, [r1, #0]
 80260ba:	430a      	orrs	r2, r1
 80260bc:	6022      	str	r2, [r4, #0]
 80260be:	2278      	movs	r2, #120	@ 0x78
 80260c0:	4932      	ldr	r1, [pc, #200]	@ (802618c <_printf_i+0x214>)
 80260c2:	9104      	str	r1, [sp, #16]
 80260c4:	0021      	movs	r1, r4
 80260c6:	3145      	adds	r1, #69	@ 0x45
 80260c8:	700a      	strb	r2, [r1, #0]
 80260ca:	6819      	ldr	r1, [r3, #0]
 80260cc:	6822      	ldr	r2, [r4, #0]
 80260ce:	c940      	ldmia	r1!, {r6}
 80260d0:	0610      	lsls	r0, r2, #24
 80260d2:	d402      	bmi.n	80260da <_printf_i+0x162>
 80260d4:	0650      	lsls	r0, r2, #25
 80260d6:	d500      	bpl.n	80260da <_printf_i+0x162>
 80260d8:	b2b6      	uxth	r6, r6
 80260da:	6019      	str	r1, [r3, #0]
 80260dc:	07d3      	lsls	r3, r2, #31
 80260de:	d502      	bpl.n	80260e6 <_printf_i+0x16e>
 80260e0:	2320      	movs	r3, #32
 80260e2:	4313      	orrs	r3, r2
 80260e4:	6023      	str	r3, [r4, #0]
 80260e6:	2e00      	cmp	r6, #0
 80260e8:	d001      	beq.n	80260ee <_printf_i+0x176>
 80260ea:	2710      	movs	r7, #16
 80260ec:	e7aa      	b.n	8026044 <_printf_i+0xcc>
 80260ee:	2220      	movs	r2, #32
 80260f0:	6823      	ldr	r3, [r4, #0]
 80260f2:	4393      	bics	r3, r2
 80260f4:	6023      	str	r3, [r4, #0]
 80260f6:	e7f8      	b.n	80260ea <_printf_i+0x172>
 80260f8:	681a      	ldr	r2, [r3, #0]
 80260fa:	680d      	ldr	r5, [r1, #0]
 80260fc:	1d10      	adds	r0, r2, #4
 80260fe:	6949      	ldr	r1, [r1, #20]
 8026100:	6018      	str	r0, [r3, #0]
 8026102:	6813      	ldr	r3, [r2, #0]
 8026104:	062e      	lsls	r6, r5, #24
 8026106:	d501      	bpl.n	802610c <_printf_i+0x194>
 8026108:	6019      	str	r1, [r3, #0]
 802610a:	e002      	b.n	8026112 <_printf_i+0x19a>
 802610c:	066d      	lsls	r5, r5, #25
 802610e:	d5fb      	bpl.n	8026108 <_printf_i+0x190>
 8026110:	8019      	strh	r1, [r3, #0]
 8026112:	2300      	movs	r3, #0
 8026114:	9d03      	ldr	r5, [sp, #12]
 8026116:	6123      	str	r3, [r4, #16]
 8026118:	e7bf      	b.n	802609a <_printf_i+0x122>
 802611a:	681a      	ldr	r2, [r3, #0]
 802611c:	1d11      	adds	r1, r2, #4
 802611e:	6019      	str	r1, [r3, #0]
 8026120:	6815      	ldr	r5, [r2, #0]
 8026122:	2100      	movs	r1, #0
 8026124:	0028      	movs	r0, r5
 8026126:	6862      	ldr	r2, [r4, #4]
 8026128:	f000 fb7f 	bl	802682a <memchr>
 802612c:	2800      	cmp	r0, #0
 802612e:	d001      	beq.n	8026134 <_printf_i+0x1bc>
 8026130:	1b40      	subs	r0, r0, r5
 8026132:	6060      	str	r0, [r4, #4]
 8026134:	6863      	ldr	r3, [r4, #4]
 8026136:	6123      	str	r3, [r4, #16]
 8026138:	2300      	movs	r3, #0
 802613a:	9a03      	ldr	r2, [sp, #12]
 802613c:	7013      	strb	r3, [r2, #0]
 802613e:	e7ac      	b.n	802609a <_printf_i+0x122>
 8026140:	002a      	movs	r2, r5
 8026142:	6923      	ldr	r3, [r4, #16]
 8026144:	9906      	ldr	r1, [sp, #24]
 8026146:	9805      	ldr	r0, [sp, #20]
 8026148:	9d07      	ldr	r5, [sp, #28]
 802614a:	47a8      	blx	r5
 802614c:	3001      	adds	r0, #1
 802614e:	d0ae      	beq.n	80260ae <_printf_i+0x136>
 8026150:	6823      	ldr	r3, [r4, #0]
 8026152:	079b      	lsls	r3, r3, #30
 8026154:	d415      	bmi.n	8026182 <_printf_i+0x20a>
 8026156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026158:	68e0      	ldr	r0, [r4, #12]
 802615a:	4298      	cmp	r0, r3
 802615c:	daa9      	bge.n	80260b2 <_printf_i+0x13a>
 802615e:	0018      	movs	r0, r3
 8026160:	e7a7      	b.n	80260b2 <_printf_i+0x13a>
 8026162:	0022      	movs	r2, r4
 8026164:	2301      	movs	r3, #1
 8026166:	9906      	ldr	r1, [sp, #24]
 8026168:	9805      	ldr	r0, [sp, #20]
 802616a:	9e07      	ldr	r6, [sp, #28]
 802616c:	3219      	adds	r2, #25
 802616e:	47b0      	blx	r6
 8026170:	3001      	adds	r0, #1
 8026172:	d09c      	beq.n	80260ae <_printf_i+0x136>
 8026174:	3501      	adds	r5, #1
 8026176:	68e3      	ldr	r3, [r4, #12]
 8026178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802617a:	1a9b      	subs	r3, r3, r2
 802617c:	42ab      	cmp	r3, r5
 802617e:	dcf0      	bgt.n	8026162 <_printf_i+0x1ea>
 8026180:	e7e9      	b.n	8026156 <_printf_i+0x1de>
 8026182:	2500      	movs	r5, #0
 8026184:	e7f7      	b.n	8026176 <_printf_i+0x1fe>
 8026186:	46c0      	nop			@ (mov r8, r8)
 8026188:	0802ebd8 	.word	0x0802ebd8
 802618c:	0802ebe9 	.word	0x0802ebe9

08026190 <std>:
 8026190:	2300      	movs	r3, #0
 8026192:	b510      	push	{r4, lr}
 8026194:	0004      	movs	r4, r0
 8026196:	6003      	str	r3, [r0, #0]
 8026198:	6043      	str	r3, [r0, #4]
 802619a:	6083      	str	r3, [r0, #8]
 802619c:	8181      	strh	r1, [r0, #12]
 802619e:	6643      	str	r3, [r0, #100]	@ 0x64
 80261a0:	81c2      	strh	r2, [r0, #14]
 80261a2:	6103      	str	r3, [r0, #16]
 80261a4:	6143      	str	r3, [r0, #20]
 80261a6:	6183      	str	r3, [r0, #24]
 80261a8:	0019      	movs	r1, r3
 80261aa:	2208      	movs	r2, #8
 80261ac:	305c      	adds	r0, #92	@ 0x5c
 80261ae:	f000 fa6b 	bl	8026688 <memset>
 80261b2:	4b0b      	ldr	r3, [pc, #44]	@ (80261e0 <std+0x50>)
 80261b4:	6224      	str	r4, [r4, #32]
 80261b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80261b8:	4b0a      	ldr	r3, [pc, #40]	@ (80261e4 <std+0x54>)
 80261ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80261bc:	4b0a      	ldr	r3, [pc, #40]	@ (80261e8 <std+0x58>)
 80261be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80261c0:	4b0a      	ldr	r3, [pc, #40]	@ (80261ec <std+0x5c>)
 80261c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80261c4:	4b0a      	ldr	r3, [pc, #40]	@ (80261f0 <std+0x60>)
 80261c6:	429c      	cmp	r4, r3
 80261c8:	d005      	beq.n	80261d6 <std+0x46>
 80261ca:	4b0a      	ldr	r3, [pc, #40]	@ (80261f4 <std+0x64>)
 80261cc:	429c      	cmp	r4, r3
 80261ce:	d002      	beq.n	80261d6 <std+0x46>
 80261d0:	4b09      	ldr	r3, [pc, #36]	@ (80261f8 <std+0x68>)
 80261d2:	429c      	cmp	r4, r3
 80261d4:	d103      	bne.n	80261de <std+0x4e>
 80261d6:	0020      	movs	r0, r4
 80261d8:	3058      	adds	r0, #88	@ 0x58
 80261da:	f000 fb23 	bl	8026824 <__retarget_lock_init_recursive>
 80261de:	bd10      	pop	{r4, pc}
 80261e0:	0802643d 	.word	0x0802643d
 80261e4:	08026465 	.word	0x08026465
 80261e8:	0802649d 	.word	0x0802649d
 80261ec:	080264c9 	.word	0x080264c9
 80261f0:	200037cc 	.word	0x200037cc
 80261f4:	20003834 	.word	0x20003834
 80261f8:	2000389c 	.word	0x2000389c

080261fc <stdio_exit_handler>:
 80261fc:	b510      	push	{r4, lr}
 80261fe:	4a03      	ldr	r2, [pc, #12]	@ (802620c <stdio_exit_handler+0x10>)
 8026200:	4903      	ldr	r1, [pc, #12]	@ (8026210 <stdio_exit_handler+0x14>)
 8026202:	4804      	ldr	r0, [pc, #16]	@ (8026214 <stdio_exit_handler+0x18>)
 8026204:	f000 f86c 	bl	80262e0 <_fwalk_sglue>
 8026208:	bd10      	pop	{r4, pc}
 802620a:	46c0      	nop			@ (mov r8, r8)
 802620c:	20000274 	.word	0x20000274
 8026210:	08028e21 	.word	0x08028e21
 8026214:	200003f0 	.word	0x200003f0

08026218 <cleanup_stdio>:
 8026218:	6841      	ldr	r1, [r0, #4]
 802621a:	4b0b      	ldr	r3, [pc, #44]	@ (8026248 <cleanup_stdio+0x30>)
 802621c:	b510      	push	{r4, lr}
 802621e:	0004      	movs	r4, r0
 8026220:	4299      	cmp	r1, r3
 8026222:	d001      	beq.n	8026228 <cleanup_stdio+0x10>
 8026224:	f002 fdfc 	bl	8028e20 <_fflush_r>
 8026228:	68a1      	ldr	r1, [r4, #8]
 802622a:	4b08      	ldr	r3, [pc, #32]	@ (802624c <cleanup_stdio+0x34>)
 802622c:	4299      	cmp	r1, r3
 802622e:	d002      	beq.n	8026236 <cleanup_stdio+0x1e>
 8026230:	0020      	movs	r0, r4
 8026232:	f002 fdf5 	bl	8028e20 <_fflush_r>
 8026236:	68e1      	ldr	r1, [r4, #12]
 8026238:	4b05      	ldr	r3, [pc, #20]	@ (8026250 <cleanup_stdio+0x38>)
 802623a:	4299      	cmp	r1, r3
 802623c:	d002      	beq.n	8026244 <cleanup_stdio+0x2c>
 802623e:	0020      	movs	r0, r4
 8026240:	f002 fdee 	bl	8028e20 <_fflush_r>
 8026244:	bd10      	pop	{r4, pc}
 8026246:	46c0      	nop			@ (mov r8, r8)
 8026248:	200037cc 	.word	0x200037cc
 802624c:	20003834 	.word	0x20003834
 8026250:	2000389c 	.word	0x2000389c

08026254 <global_stdio_init.part.0>:
 8026254:	b510      	push	{r4, lr}
 8026256:	4b09      	ldr	r3, [pc, #36]	@ (802627c <global_stdio_init.part.0+0x28>)
 8026258:	4a09      	ldr	r2, [pc, #36]	@ (8026280 <global_stdio_init.part.0+0x2c>)
 802625a:	2104      	movs	r1, #4
 802625c:	601a      	str	r2, [r3, #0]
 802625e:	4809      	ldr	r0, [pc, #36]	@ (8026284 <global_stdio_init.part.0+0x30>)
 8026260:	2200      	movs	r2, #0
 8026262:	f7ff ff95 	bl	8026190 <std>
 8026266:	2201      	movs	r2, #1
 8026268:	2109      	movs	r1, #9
 802626a:	4807      	ldr	r0, [pc, #28]	@ (8026288 <global_stdio_init.part.0+0x34>)
 802626c:	f7ff ff90 	bl	8026190 <std>
 8026270:	2202      	movs	r2, #2
 8026272:	2112      	movs	r1, #18
 8026274:	4805      	ldr	r0, [pc, #20]	@ (802628c <global_stdio_init.part.0+0x38>)
 8026276:	f7ff ff8b 	bl	8026190 <std>
 802627a:	bd10      	pop	{r4, pc}
 802627c:	20003904 	.word	0x20003904
 8026280:	080261fd 	.word	0x080261fd
 8026284:	200037cc 	.word	0x200037cc
 8026288:	20003834 	.word	0x20003834
 802628c:	2000389c 	.word	0x2000389c

08026290 <__sfp_lock_acquire>:
 8026290:	b510      	push	{r4, lr}
 8026292:	4802      	ldr	r0, [pc, #8]	@ (802629c <__sfp_lock_acquire+0xc>)
 8026294:	f000 fac7 	bl	8026826 <__retarget_lock_acquire_recursive>
 8026298:	bd10      	pop	{r4, pc}
 802629a:	46c0      	nop			@ (mov r8, r8)
 802629c:	2000390d 	.word	0x2000390d

080262a0 <__sfp_lock_release>:
 80262a0:	b510      	push	{r4, lr}
 80262a2:	4802      	ldr	r0, [pc, #8]	@ (80262ac <__sfp_lock_release+0xc>)
 80262a4:	f000 fac0 	bl	8026828 <__retarget_lock_release_recursive>
 80262a8:	bd10      	pop	{r4, pc}
 80262aa:	46c0      	nop			@ (mov r8, r8)
 80262ac:	2000390d 	.word	0x2000390d

080262b0 <__sinit>:
 80262b0:	b510      	push	{r4, lr}
 80262b2:	0004      	movs	r4, r0
 80262b4:	f7ff ffec 	bl	8026290 <__sfp_lock_acquire>
 80262b8:	6a23      	ldr	r3, [r4, #32]
 80262ba:	2b00      	cmp	r3, #0
 80262bc:	d002      	beq.n	80262c4 <__sinit+0x14>
 80262be:	f7ff ffef 	bl	80262a0 <__sfp_lock_release>
 80262c2:	bd10      	pop	{r4, pc}
 80262c4:	4b04      	ldr	r3, [pc, #16]	@ (80262d8 <__sinit+0x28>)
 80262c6:	6223      	str	r3, [r4, #32]
 80262c8:	4b04      	ldr	r3, [pc, #16]	@ (80262dc <__sinit+0x2c>)
 80262ca:	681b      	ldr	r3, [r3, #0]
 80262cc:	2b00      	cmp	r3, #0
 80262ce:	d1f6      	bne.n	80262be <__sinit+0xe>
 80262d0:	f7ff ffc0 	bl	8026254 <global_stdio_init.part.0>
 80262d4:	e7f3      	b.n	80262be <__sinit+0xe>
 80262d6:	46c0      	nop			@ (mov r8, r8)
 80262d8:	08026219 	.word	0x08026219
 80262dc:	20003904 	.word	0x20003904

080262e0 <_fwalk_sglue>:
 80262e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80262e2:	0014      	movs	r4, r2
 80262e4:	2600      	movs	r6, #0
 80262e6:	9000      	str	r0, [sp, #0]
 80262e8:	9101      	str	r1, [sp, #4]
 80262ea:	68a5      	ldr	r5, [r4, #8]
 80262ec:	6867      	ldr	r7, [r4, #4]
 80262ee:	3f01      	subs	r7, #1
 80262f0:	d504      	bpl.n	80262fc <_fwalk_sglue+0x1c>
 80262f2:	6824      	ldr	r4, [r4, #0]
 80262f4:	2c00      	cmp	r4, #0
 80262f6:	d1f8      	bne.n	80262ea <_fwalk_sglue+0xa>
 80262f8:	0030      	movs	r0, r6
 80262fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80262fc:	89ab      	ldrh	r3, [r5, #12]
 80262fe:	2b01      	cmp	r3, #1
 8026300:	d908      	bls.n	8026314 <_fwalk_sglue+0x34>
 8026302:	220e      	movs	r2, #14
 8026304:	5eab      	ldrsh	r3, [r5, r2]
 8026306:	3301      	adds	r3, #1
 8026308:	d004      	beq.n	8026314 <_fwalk_sglue+0x34>
 802630a:	0029      	movs	r1, r5
 802630c:	9800      	ldr	r0, [sp, #0]
 802630e:	9b01      	ldr	r3, [sp, #4]
 8026310:	4798      	blx	r3
 8026312:	4306      	orrs	r6, r0
 8026314:	3568      	adds	r5, #104	@ 0x68
 8026316:	e7ea      	b.n	80262ee <_fwalk_sglue+0xe>

08026318 <iprintf>:
 8026318:	b40f      	push	{r0, r1, r2, r3}
 802631a:	b507      	push	{r0, r1, r2, lr}
 802631c:	4905      	ldr	r1, [pc, #20]	@ (8026334 <iprintf+0x1c>)
 802631e:	ab04      	add	r3, sp, #16
 8026320:	6808      	ldr	r0, [r1, #0]
 8026322:	cb04      	ldmia	r3!, {r2}
 8026324:	6881      	ldr	r1, [r0, #8]
 8026326:	9301      	str	r3, [sp, #4]
 8026328:	f002 fbd8 	bl	8028adc <_vfiprintf_r>
 802632c:	b003      	add	sp, #12
 802632e:	bc08      	pop	{r3}
 8026330:	b004      	add	sp, #16
 8026332:	4718      	bx	r3
 8026334:	200003ec 	.word	0x200003ec

08026338 <_puts_r>:
 8026338:	6a03      	ldr	r3, [r0, #32]
 802633a:	b570      	push	{r4, r5, r6, lr}
 802633c:	0005      	movs	r5, r0
 802633e:	000e      	movs	r6, r1
 8026340:	6884      	ldr	r4, [r0, #8]
 8026342:	2b00      	cmp	r3, #0
 8026344:	d101      	bne.n	802634a <_puts_r+0x12>
 8026346:	f7ff ffb3 	bl	80262b0 <__sinit>
 802634a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802634c:	07db      	lsls	r3, r3, #31
 802634e:	d405      	bmi.n	802635c <_puts_r+0x24>
 8026350:	89a3      	ldrh	r3, [r4, #12]
 8026352:	059b      	lsls	r3, r3, #22
 8026354:	d402      	bmi.n	802635c <_puts_r+0x24>
 8026356:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026358:	f000 fa65 	bl	8026826 <__retarget_lock_acquire_recursive>
 802635c:	89a3      	ldrh	r3, [r4, #12]
 802635e:	071b      	lsls	r3, r3, #28
 8026360:	d502      	bpl.n	8026368 <_puts_r+0x30>
 8026362:	6923      	ldr	r3, [r4, #16]
 8026364:	2b00      	cmp	r3, #0
 8026366:	d11f      	bne.n	80263a8 <_puts_r+0x70>
 8026368:	0021      	movs	r1, r4
 802636a:	0028      	movs	r0, r5
 802636c:	f000 f92e 	bl	80265cc <__swsetup_r>
 8026370:	2800      	cmp	r0, #0
 8026372:	d019      	beq.n	80263a8 <_puts_r+0x70>
 8026374:	2501      	movs	r5, #1
 8026376:	426d      	negs	r5, r5
 8026378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802637a:	07db      	lsls	r3, r3, #31
 802637c:	d405      	bmi.n	802638a <_puts_r+0x52>
 802637e:	89a3      	ldrh	r3, [r4, #12]
 8026380:	059b      	lsls	r3, r3, #22
 8026382:	d402      	bmi.n	802638a <_puts_r+0x52>
 8026384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026386:	f000 fa4f 	bl	8026828 <__retarget_lock_release_recursive>
 802638a:	0028      	movs	r0, r5
 802638c:	bd70      	pop	{r4, r5, r6, pc}
 802638e:	3601      	adds	r6, #1
 8026390:	60a3      	str	r3, [r4, #8]
 8026392:	2b00      	cmp	r3, #0
 8026394:	da04      	bge.n	80263a0 <_puts_r+0x68>
 8026396:	69a2      	ldr	r2, [r4, #24]
 8026398:	429a      	cmp	r2, r3
 802639a:	dc16      	bgt.n	80263ca <_puts_r+0x92>
 802639c:	290a      	cmp	r1, #10
 802639e:	d014      	beq.n	80263ca <_puts_r+0x92>
 80263a0:	6823      	ldr	r3, [r4, #0]
 80263a2:	1c5a      	adds	r2, r3, #1
 80263a4:	6022      	str	r2, [r4, #0]
 80263a6:	7019      	strb	r1, [r3, #0]
 80263a8:	68a3      	ldr	r3, [r4, #8]
 80263aa:	7831      	ldrb	r1, [r6, #0]
 80263ac:	3b01      	subs	r3, #1
 80263ae:	2900      	cmp	r1, #0
 80263b0:	d1ed      	bne.n	802638e <_puts_r+0x56>
 80263b2:	60a3      	str	r3, [r4, #8]
 80263b4:	2b00      	cmp	r3, #0
 80263b6:	da0f      	bge.n	80263d8 <_puts_r+0xa0>
 80263b8:	0022      	movs	r2, r4
 80263ba:	0028      	movs	r0, r5
 80263bc:	310a      	adds	r1, #10
 80263be:	f000 f8c3 	bl	8026548 <__swbuf_r>
 80263c2:	3001      	adds	r0, #1
 80263c4:	d0d6      	beq.n	8026374 <_puts_r+0x3c>
 80263c6:	250a      	movs	r5, #10
 80263c8:	e7d6      	b.n	8026378 <_puts_r+0x40>
 80263ca:	0022      	movs	r2, r4
 80263cc:	0028      	movs	r0, r5
 80263ce:	f000 f8bb 	bl	8026548 <__swbuf_r>
 80263d2:	3001      	adds	r0, #1
 80263d4:	d1e8      	bne.n	80263a8 <_puts_r+0x70>
 80263d6:	e7cd      	b.n	8026374 <_puts_r+0x3c>
 80263d8:	6823      	ldr	r3, [r4, #0]
 80263da:	1c5a      	adds	r2, r3, #1
 80263dc:	6022      	str	r2, [r4, #0]
 80263de:	220a      	movs	r2, #10
 80263e0:	701a      	strb	r2, [r3, #0]
 80263e2:	e7f0      	b.n	80263c6 <_puts_r+0x8e>

080263e4 <puts>:
 80263e4:	b510      	push	{r4, lr}
 80263e6:	4b03      	ldr	r3, [pc, #12]	@ (80263f4 <puts+0x10>)
 80263e8:	0001      	movs	r1, r0
 80263ea:	6818      	ldr	r0, [r3, #0]
 80263ec:	f7ff ffa4 	bl	8026338 <_puts_r>
 80263f0:	bd10      	pop	{r4, pc}
 80263f2:	46c0      	nop			@ (mov r8, r8)
 80263f4:	200003ec 	.word	0x200003ec

080263f8 <siprintf>:
 80263f8:	b40e      	push	{r1, r2, r3}
 80263fa:	b510      	push	{r4, lr}
 80263fc:	2400      	movs	r4, #0
 80263fe:	490c      	ldr	r1, [pc, #48]	@ (8026430 <siprintf+0x38>)
 8026400:	b09d      	sub	sp, #116	@ 0x74
 8026402:	ab1f      	add	r3, sp, #124	@ 0x7c
 8026404:	9002      	str	r0, [sp, #8]
 8026406:	9006      	str	r0, [sp, #24]
 8026408:	9107      	str	r1, [sp, #28]
 802640a:	9104      	str	r1, [sp, #16]
 802640c:	4809      	ldr	r0, [pc, #36]	@ (8026434 <siprintf+0x3c>)
 802640e:	490a      	ldr	r1, [pc, #40]	@ (8026438 <siprintf+0x40>)
 8026410:	cb04      	ldmia	r3!, {r2}
 8026412:	9105      	str	r1, [sp, #20]
 8026414:	6800      	ldr	r0, [r0, #0]
 8026416:	a902      	add	r1, sp, #8
 8026418:	9301      	str	r3, [sp, #4]
 802641a:	941b      	str	r4, [sp, #108]	@ 0x6c
 802641c:	f002 fa38 	bl	8028890 <_svfiprintf_r>
 8026420:	9b02      	ldr	r3, [sp, #8]
 8026422:	701c      	strb	r4, [r3, #0]
 8026424:	b01d      	add	sp, #116	@ 0x74
 8026426:	bc10      	pop	{r4}
 8026428:	bc08      	pop	{r3}
 802642a:	b003      	add	sp, #12
 802642c:	4718      	bx	r3
 802642e:	46c0      	nop			@ (mov r8, r8)
 8026430:	7fffffff 	.word	0x7fffffff
 8026434:	200003ec 	.word	0x200003ec
 8026438:	ffff0208 	.word	0xffff0208

0802643c <__sread>:
 802643c:	b570      	push	{r4, r5, r6, lr}
 802643e:	000c      	movs	r4, r1
 8026440:	250e      	movs	r5, #14
 8026442:	5f49      	ldrsh	r1, [r1, r5]
 8026444:	f000 f99c 	bl	8026780 <_read_r>
 8026448:	2800      	cmp	r0, #0
 802644a:	db03      	blt.n	8026454 <__sread+0x18>
 802644c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802644e:	181b      	adds	r3, r3, r0
 8026450:	6563      	str	r3, [r4, #84]	@ 0x54
 8026452:	bd70      	pop	{r4, r5, r6, pc}
 8026454:	89a3      	ldrh	r3, [r4, #12]
 8026456:	4a02      	ldr	r2, [pc, #8]	@ (8026460 <__sread+0x24>)
 8026458:	4013      	ands	r3, r2
 802645a:	81a3      	strh	r3, [r4, #12]
 802645c:	e7f9      	b.n	8026452 <__sread+0x16>
 802645e:	46c0      	nop			@ (mov r8, r8)
 8026460:	ffffefff 	.word	0xffffefff

08026464 <__swrite>:
 8026464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026466:	001f      	movs	r7, r3
 8026468:	898b      	ldrh	r3, [r1, #12]
 802646a:	0005      	movs	r5, r0
 802646c:	000c      	movs	r4, r1
 802646e:	0016      	movs	r6, r2
 8026470:	05db      	lsls	r3, r3, #23
 8026472:	d505      	bpl.n	8026480 <__swrite+0x1c>
 8026474:	230e      	movs	r3, #14
 8026476:	5ec9      	ldrsh	r1, [r1, r3]
 8026478:	2200      	movs	r2, #0
 802647a:	2302      	movs	r3, #2
 802647c:	f000 f96c 	bl	8026758 <_lseek_r>
 8026480:	89a3      	ldrh	r3, [r4, #12]
 8026482:	4a05      	ldr	r2, [pc, #20]	@ (8026498 <__swrite+0x34>)
 8026484:	0028      	movs	r0, r5
 8026486:	4013      	ands	r3, r2
 8026488:	81a3      	strh	r3, [r4, #12]
 802648a:	0032      	movs	r2, r6
 802648c:	230e      	movs	r3, #14
 802648e:	5ee1      	ldrsh	r1, [r4, r3]
 8026490:	003b      	movs	r3, r7
 8026492:	f000 f989 	bl	80267a8 <_write_r>
 8026496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026498:	ffffefff 	.word	0xffffefff

0802649c <__sseek>:
 802649c:	b570      	push	{r4, r5, r6, lr}
 802649e:	000c      	movs	r4, r1
 80264a0:	250e      	movs	r5, #14
 80264a2:	5f49      	ldrsh	r1, [r1, r5]
 80264a4:	f000 f958 	bl	8026758 <_lseek_r>
 80264a8:	89a3      	ldrh	r3, [r4, #12]
 80264aa:	1c42      	adds	r2, r0, #1
 80264ac:	d103      	bne.n	80264b6 <__sseek+0x1a>
 80264ae:	4a05      	ldr	r2, [pc, #20]	@ (80264c4 <__sseek+0x28>)
 80264b0:	4013      	ands	r3, r2
 80264b2:	81a3      	strh	r3, [r4, #12]
 80264b4:	bd70      	pop	{r4, r5, r6, pc}
 80264b6:	2280      	movs	r2, #128	@ 0x80
 80264b8:	0152      	lsls	r2, r2, #5
 80264ba:	4313      	orrs	r3, r2
 80264bc:	81a3      	strh	r3, [r4, #12]
 80264be:	6560      	str	r0, [r4, #84]	@ 0x54
 80264c0:	e7f8      	b.n	80264b4 <__sseek+0x18>
 80264c2:	46c0      	nop			@ (mov r8, r8)
 80264c4:	ffffefff 	.word	0xffffefff

080264c8 <__sclose>:
 80264c8:	b510      	push	{r4, lr}
 80264ca:	230e      	movs	r3, #14
 80264cc:	5ec9      	ldrsh	r1, [r1, r3]
 80264ce:	f000 f931 	bl	8026734 <_close_r>
 80264d2:	bd10      	pop	{r4, pc}

080264d4 <_vsniprintf_r>:
 80264d4:	b530      	push	{r4, r5, lr}
 80264d6:	0005      	movs	r5, r0
 80264d8:	0014      	movs	r4, r2
 80264da:	0008      	movs	r0, r1
 80264dc:	001a      	movs	r2, r3
 80264de:	b09b      	sub	sp, #108	@ 0x6c
 80264e0:	2c00      	cmp	r4, #0
 80264e2:	da05      	bge.n	80264f0 <_vsniprintf_r+0x1c>
 80264e4:	238b      	movs	r3, #139	@ 0x8b
 80264e6:	2001      	movs	r0, #1
 80264e8:	602b      	str	r3, [r5, #0]
 80264ea:	4240      	negs	r0, r0
 80264ec:	b01b      	add	sp, #108	@ 0x6c
 80264ee:	bd30      	pop	{r4, r5, pc}
 80264f0:	2382      	movs	r3, #130	@ 0x82
 80264f2:	4669      	mov	r1, sp
 80264f4:	009b      	lsls	r3, r3, #2
 80264f6:	818b      	strh	r3, [r1, #12]
 80264f8:	2100      	movs	r1, #0
 80264fa:	9000      	str	r0, [sp, #0]
 80264fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80264fe:	9004      	str	r0, [sp, #16]
 8026500:	428c      	cmp	r4, r1
 8026502:	d000      	beq.n	8026506 <_vsniprintf_r+0x32>
 8026504:	1e61      	subs	r1, r4, #1
 8026506:	2301      	movs	r3, #1
 8026508:	9102      	str	r1, [sp, #8]
 802650a:	9105      	str	r1, [sp, #20]
 802650c:	4669      	mov	r1, sp
 802650e:	425b      	negs	r3, r3
 8026510:	81cb      	strh	r3, [r1, #14]
 8026512:	0028      	movs	r0, r5
 8026514:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026516:	f002 f9bb 	bl	8028890 <_svfiprintf_r>
 802651a:	1c43      	adds	r3, r0, #1
 802651c:	da01      	bge.n	8026522 <_vsniprintf_r+0x4e>
 802651e:	238b      	movs	r3, #139	@ 0x8b
 8026520:	602b      	str	r3, [r5, #0]
 8026522:	2c00      	cmp	r4, #0
 8026524:	d0e2      	beq.n	80264ec <_vsniprintf_r+0x18>
 8026526:	2200      	movs	r2, #0
 8026528:	9b00      	ldr	r3, [sp, #0]
 802652a:	701a      	strb	r2, [r3, #0]
 802652c:	e7de      	b.n	80264ec <_vsniprintf_r+0x18>
	...

08026530 <vsniprintf>:
 8026530:	b513      	push	{r0, r1, r4, lr}
 8026532:	4c04      	ldr	r4, [pc, #16]	@ (8026544 <vsniprintf+0x14>)
 8026534:	9300      	str	r3, [sp, #0]
 8026536:	0013      	movs	r3, r2
 8026538:	000a      	movs	r2, r1
 802653a:	0001      	movs	r1, r0
 802653c:	6820      	ldr	r0, [r4, #0]
 802653e:	f7ff ffc9 	bl	80264d4 <_vsniprintf_r>
 8026542:	bd16      	pop	{r1, r2, r4, pc}
 8026544:	200003ec 	.word	0x200003ec

08026548 <__swbuf_r>:
 8026548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802654a:	0006      	movs	r6, r0
 802654c:	000d      	movs	r5, r1
 802654e:	0014      	movs	r4, r2
 8026550:	2800      	cmp	r0, #0
 8026552:	d004      	beq.n	802655e <__swbuf_r+0x16>
 8026554:	6a03      	ldr	r3, [r0, #32]
 8026556:	2b00      	cmp	r3, #0
 8026558:	d101      	bne.n	802655e <__swbuf_r+0x16>
 802655a:	f7ff fea9 	bl	80262b0 <__sinit>
 802655e:	69a3      	ldr	r3, [r4, #24]
 8026560:	60a3      	str	r3, [r4, #8]
 8026562:	89a3      	ldrh	r3, [r4, #12]
 8026564:	071b      	lsls	r3, r3, #28
 8026566:	d502      	bpl.n	802656e <__swbuf_r+0x26>
 8026568:	6923      	ldr	r3, [r4, #16]
 802656a:	2b00      	cmp	r3, #0
 802656c:	d109      	bne.n	8026582 <__swbuf_r+0x3a>
 802656e:	0021      	movs	r1, r4
 8026570:	0030      	movs	r0, r6
 8026572:	f000 f82b 	bl	80265cc <__swsetup_r>
 8026576:	2800      	cmp	r0, #0
 8026578:	d003      	beq.n	8026582 <__swbuf_r+0x3a>
 802657a:	2501      	movs	r5, #1
 802657c:	426d      	negs	r5, r5
 802657e:	0028      	movs	r0, r5
 8026580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026582:	6923      	ldr	r3, [r4, #16]
 8026584:	6820      	ldr	r0, [r4, #0]
 8026586:	b2ef      	uxtb	r7, r5
 8026588:	1ac0      	subs	r0, r0, r3
 802658a:	6963      	ldr	r3, [r4, #20]
 802658c:	b2ed      	uxtb	r5, r5
 802658e:	4283      	cmp	r3, r0
 8026590:	dc05      	bgt.n	802659e <__swbuf_r+0x56>
 8026592:	0021      	movs	r1, r4
 8026594:	0030      	movs	r0, r6
 8026596:	f002 fc43 	bl	8028e20 <_fflush_r>
 802659a:	2800      	cmp	r0, #0
 802659c:	d1ed      	bne.n	802657a <__swbuf_r+0x32>
 802659e:	68a3      	ldr	r3, [r4, #8]
 80265a0:	3001      	adds	r0, #1
 80265a2:	3b01      	subs	r3, #1
 80265a4:	60a3      	str	r3, [r4, #8]
 80265a6:	6823      	ldr	r3, [r4, #0]
 80265a8:	1c5a      	adds	r2, r3, #1
 80265aa:	6022      	str	r2, [r4, #0]
 80265ac:	701f      	strb	r7, [r3, #0]
 80265ae:	6963      	ldr	r3, [r4, #20]
 80265b0:	4283      	cmp	r3, r0
 80265b2:	d004      	beq.n	80265be <__swbuf_r+0x76>
 80265b4:	89a3      	ldrh	r3, [r4, #12]
 80265b6:	07db      	lsls	r3, r3, #31
 80265b8:	d5e1      	bpl.n	802657e <__swbuf_r+0x36>
 80265ba:	2d0a      	cmp	r5, #10
 80265bc:	d1df      	bne.n	802657e <__swbuf_r+0x36>
 80265be:	0021      	movs	r1, r4
 80265c0:	0030      	movs	r0, r6
 80265c2:	f002 fc2d 	bl	8028e20 <_fflush_r>
 80265c6:	2800      	cmp	r0, #0
 80265c8:	d0d9      	beq.n	802657e <__swbuf_r+0x36>
 80265ca:	e7d6      	b.n	802657a <__swbuf_r+0x32>

080265cc <__swsetup_r>:
 80265cc:	4b2d      	ldr	r3, [pc, #180]	@ (8026684 <__swsetup_r+0xb8>)
 80265ce:	b570      	push	{r4, r5, r6, lr}
 80265d0:	0005      	movs	r5, r0
 80265d2:	6818      	ldr	r0, [r3, #0]
 80265d4:	000c      	movs	r4, r1
 80265d6:	2800      	cmp	r0, #0
 80265d8:	d004      	beq.n	80265e4 <__swsetup_r+0x18>
 80265da:	6a03      	ldr	r3, [r0, #32]
 80265dc:	2b00      	cmp	r3, #0
 80265de:	d101      	bne.n	80265e4 <__swsetup_r+0x18>
 80265e0:	f7ff fe66 	bl	80262b0 <__sinit>
 80265e4:	220c      	movs	r2, #12
 80265e6:	5ea3      	ldrsh	r3, [r4, r2]
 80265e8:	071a      	lsls	r2, r3, #28
 80265ea:	d423      	bmi.n	8026634 <__swsetup_r+0x68>
 80265ec:	06da      	lsls	r2, r3, #27
 80265ee:	d407      	bmi.n	8026600 <__swsetup_r+0x34>
 80265f0:	2209      	movs	r2, #9
 80265f2:	602a      	str	r2, [r5, #0]
 80265f4:	2240      	movs	r2, #64	@ 0x40
 80265f6:	2001      	movs	r0, #1
 80265f8:	4313      	orrs	r3, r2
 80265fa:	81a3      	strh	r3, [r4, #12]
 80265fc:	4240      	negs	r0, r0
 80265fe:	e03a      	b.n	8026676 <__swsetup_r+0xaa>
 8026600:	075b      	lsls	r3, r3, #29
 8026602:	d513      	bpl.n	802662c <__swsetup_r+0x60>
 8026604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026606:	2900      	cmp	r1, #0
 8026608:	d008      	beq.n	802661c <__swsetup_r+0x50>
 802660a:	0023      	movs	r3, r4
 802660c:	3344      	adds	r3, #68	@ 0x44
 802660e:	4299      	cmp	r1, r3
 8026610:	d002      	beq.n	8026618 <__swsetup_r+0x4c>
 8026612:	0028      	movs	r0, r5
 8026614:	f000 ff9a 	bl	802754c <_free_r>
 8026618:	2300      	movs	r3, #0
 802661a:	6363      	str	r3, [r4, #52]	@ 0x34
 802661c:	2224      	movs	r2, #36	@ 0x24
 802661e:	89a3      	ldrh	r3, [r4, #12]
 8026620:	4393      	bics	r3, r2
 8026622:	81a3      	strh	r3, [r4, #12]
 8026624:	2300      	movs	r3, #0
 8026626:	6063      	str	r3, [r4, #4]
 8026628:	6923      	ldr	r3, [r4, #16]
 802662a:	6023      	str	r3, [r4, #0]
 802662c:	2308      	movs	r3, #8
 802662e:	89a2      	ldrh	r2, [r4, #12]
 8026630:	4313      	orrs	r3, r2
 8026632:	81a3      	strh	r3, [r4, #12]
 8026634:	6923      	ldr	r3, [r4, #16]
 8026636:	2b00      	cmp	r3, #0
 8026638:	d10b      	bne.n	8026652 <__swsetup_r+0x86>
 802663a:	21a0      	movs	r1, #160	@ 0xa0
 802663c:	2280      	movs	r2, #128	@ 0x80
 802663e:	89a3      	ldrh	r3, [r4, #12]
 8026640:	0089      	lsls	r1, r1, #2
 8026642:	0092      	lsls	r2, r2, #2
 8026644:	400b      	ands	r3, r1
 8026646:	4293      	cmp	r3, r2
 8026648:	d003      	beq.n	8026652 <__swsetup_r+0x86>
 802664a:	0021      	movs	r1, r4
 802664c:	0028      	movs	r0, r5
 802664e:	f002 fc3d 	bl	8028ecc <__smakebuf_r>
 8026652:	220c      	movs	r2, #12
 8026654:	5ea3      	ldrsh	r3, [r4, r2]
 8026656:	2101      	movs	r1, #1
 8026658:	001a      	movs	r2, r3
 802665a:	400a      	ands	r2, r1
 802665c:	420b      	tst	r3, r1
 802665e:	d00b      	beq.n	8026678 <__swsetup_r+0xac>
 8026660:	2200      	movs	r2, #0
 8026662:	60a2      	str	r2, [r4, #8]
 8026664:	6962      	ldr	r2, [r4, #20]
 8026666:	4252      	negs	r2, r2
 8026668:	61a2      	str	r2, [r4, #24]
 802666a:	2000      	movs	r0, #0
 802666c:	6922      	ldr	r2, [r4, #16]
 802666e:	4282      	cmp	r2, r0
 8026670:	d101      	bne.n	8026676 <__swsetup_r+0xaa>
 8026672:	061a      	lsls	r2, r3, #24
 8026674:	d4be      	bmi.n	80265f4 <__swsetup_r+0x28>
 8026676:	bd70      	pop	{r4, r5, r6, pc}
 8026678:	0799      	lsls	r1, r3, #30
 802667a:	d400      	bmi.n	802667e <__swsetup_r+0xb2>
 802667c:	6962      	ldr	r2, [r4, #20]
 802667e:	60a2      	str	r2, [r4, #8]
 8026680:	e7f3      	b.n	802666a <__swsetup_r+0x9e>
 8026682:	46c0      	nop			@ (mov r8, r8)
 8026684:	200003ec 	.word	0x200003ec

08026688 <memset>:
 8026688:	0003      	movs	r3, r0
 802668a:	1882      	adds	r2, r0, r2
 802668c:	4293      	cmp	r3, r2
 802668e:	d100      	bne.n	8026692 <memset+0xa>
 8026690:	4770      	bx	lr
 8026692:	7019      	strb	r1, [r3, #0]
 8026694:	3301      	adds	r3, #1
 8026696:	e7f9      	b.n	802668c <memset+0x4>

08026698 <strchr>:
 8026698:	b2c9      	uxtb	r1, r1
 802669a:	7803      	ldrb	r3, [r0, #0]
 802669c:	2b00      	cmp	r3, #0
 802669e:	d004      	beq.n	80266aa <strchr+0x12>
 80266a0:	428b      	cmp	r3, r1
 80266a2:	d100      	bne.n	80266a6 <strchr+0xe>
 80266a4:	4770      	bx	lr
 80266a6:	3001      	adds	r0, #1
 80266a8:	e7f7      	b.n	802669a <strchr+0x2>
 80266aa:	424b      	negs	r3, r1
 80266ac:	4159      	adcs	r1, r3
 80266ae:	4249      	negs	r1, r1
 80266b0:	4008      	ands	r0, r1
 80266b2:	e7f7      	b.n	80266a4 <strchr+0xc>

080266b4 <strncmp>:
 80266b4:	b530      	push	{r4, r5, lr}
 80266b6:	0005      	movs	r5, r0
 80266b8:	1e10      	subs	r0, r2, #0
 80266ba:	d00b      	beq.n	80266d4 <strncmp+0x20>
 80266bc:	2400      	movs	r4, #0
 80266be:	3a01      	subs	r2, #1
 80266c0:	5d2b      	ldrb	r3, [r5, r4]
 80266c2:	5d08      	ldrb	r0, [r1, r4]
 80266c4:	4283      	cmp	r3, r0
 80266c6:	d104      	bne.n	80266d2 <strncmp+0x1e>
 80266c8:	4294      	cmp	r4, r2
 80266ca:	d002      	beq.n	80266d2 <strncmp+0x1e>
 80266cc:	3401      	adds	r4, #1
 80266ce:	2b00      	cmp	r3, #0
 80266d0:	d1f6      	bne.n	80266c0 <strncmp+0xc>
 80266d2:	1a18      	subs	r0, r3, r0
 80266d4:	bd30      	pop	{r4, r5, pc}

080266d6 <strncpy>:
 80266d6:	0003      	movs	r3, r0
 80266d8:	b530      	push	{r4, r5, lr}
 80266da:	001d      	movs	r5, r3
 80266dc:	2a00      	cmp	r2, #0
 80266de:	d006      	beq.n	80266ee <strncpy+0x18>
 80266e0:	780c      	ldrb	r4, [r1, #0]
 80266e2:	3a01      	subs	r2, #1
 80266e4:	3301      	adds	r3, #1
 80266e6:	702c      	strb	r4, [r5, #0]
 80266e8:	3101      	adds	r1, #1
 80266ea:	2c00      	cmp	r4, #0
 80266ec:	d1f5      	bne.n	80266da <strncpy+0x4>
 80266ee:	2100      	movs	r1, #0
 80266f0:	189a      	adds	r2, r3, r2
 80266f2:	4293      	cmp	r3, r2
 80266f4:	d100      	bne.n	80266f8 <strncpy+0x22>
 80266f6:	bd30      	pop	{r4, r5, pc}
 80266f8:	7019      	strb	r1, [r3, #0]
 80266fa:	3301      	adds	r3, #1
 80266fc:	e7f9      	b.n	80266f2 <strncpy+0x1c>

080266fe <strstr>:
 80266fe:	780a      	ldrb	r2, [r1, #0]
 8026700:	b530      	push	{r4, r5, lr}
 8026702:	2a00      	cmp	r2, #0
 8026704:	d10c      	bne.n	8026720 <strstr+0x22>
 8026706:	bd30      	pop	{r4, r5, pc}
 8026708:	429a      	cmp	r2, r3
 802670a:	d108      	bne.n	802671e <strstr+0x20>
 802670c:	2301      	movs	r3, #1
 802670e:	5ccc      	ldrb	r4, [r1, r3]
 8026710:	2c00      	cmp	r4, #0
 8026712:	d0f8      	beq.n	8026706 <strstr+0x8>
 8026714:	5cc5      	ldrb	r5, [r0, r3]
 8026716:	42a5      	cmp	r5, r4
 8026718:	d101      	bne.n	802671e <strstr+0x20>
 802671a:	3301      	adds	r3, #1
 802671c:	e7f7      	b.n	802670e <strstr+0x10>
 802671e:	3001      	adds	r0, #1
 8026720:	7803      	ldrb	r3, [r0, #0]
 8026722:	2b00      	cmp	r3, #0
 8026724:	d1f0      	bne.n	8026708 <strstr+0xa>
 8026726:	0018      	movs	r0, r3
 8026728:	e7ed      	b.n	8026706 <strstr+0x8>
	...

0802672c <_localeconv_r>:
 802672c:	4800      	ldr	r0, [pc, #0]	@ (8026730 <_localeconv_r+0x4>)
 802672e:	4770      	bx	lr
 8026730:	20000370 	.word	0x20000370

08026734 <_close_r>:
 8026734:	2300      	movs	r3, #0
 8026736:	b570      	push	{r4, r5, r6, lr}
 8026738:	4d06      	ldr	r5, [pc, #24]	@ (8026754 <_close_r+0x20>)
 802673a:	0004      	movs	r4, r0
 802673c:	0008      	movs	r0, r1
 802673e:	602b      	str	r3, [r5, #0]
 8026740:	f7ec feb0 	bl	80134a4 <_close>
 8026744:	1c43      	adds	r3, r0, #1
 8026746:	d103      	bne.n	8026750 <_close_r+0x1c>
 8026748:	682b      	ldr	r3, [r5, #0]
 802674a:	2b00      	cmp	r3, #0
 802674c:	d000      	beq.n	8026750 <_close_r+0x1c>
 802674e:	6023      	str	r3, [r4, #0]
 8026750:	bd70      	pop	{r4, r5, r6, pc}
 8026752:	46c0      	nop			@ (mov r8, r8)
 8026754:	20003908 	.word	0x20003908

08026758 <_lseek_r>:
 8026758:	b570      	push	{r4, r5, r6, lr}
 802675a:	0004      	movs	r4, r0
 802675c:	0008      	movs	r0, r1
 802675e:	0011      	movs	r1, r2
 8026760:	001a      	movs	r2, r3
 8026762:	2300      	movs	r3, #0
 8026764:	4d05      	ldr	r5, [pc, #20]	@ (802677c <_lseek_r+0x24>)
 8026766:	602b      	str	r3, [r5, #0]
 8026768:	f7ec febd 	bl	80134e6 <_lseek>
 802676c:	1c43      	adds	r3, r0, #1
 802676e:	d103      	bne.n	8026778 <_lseek_r+0x20>
 8026770:	682b      	ldr	r3, [r5, #0]
 8026772:	2b00      	cmp	r3, #0
 8026774:	d000      	beq.n	8026778 <_lseek_r+0x20>
 8026776:	6023      	str	r3, [r4, #0]
 8026778:	bd70      	pop	{r4, r5, r6, pc}
 802677a:	46c0      	nop			@ (mov r8, r8)
 802677c:	20003908 	.word	0x20003908

08026780 <_read_r>:
 8026780:	b570      	push	{r4, r5, r6, lr}
 8026782:	0004      	movs	r4, r0
 8026784:	0008      	movs	r0, r1
 8026786:	0011      	movs	r1, r2
 8026788:	001a      	movs	r2, r3
 802678a:	2300      	movs	r3, #0
 802678c:	4d05      	ldr	r5, [pc, #20]	@ (80267a4 <_read_r+0x24>)
 802678e:	602b      	str	r3, [r5, #0]
 8026790:	f7ec fe6b 	bl	801346a <_read>
 8026794:	1c43      	adds	r3, r0, #1
 8026796:	d103      	bne.n	80267a0 <_read_r+0x20>
 8026798:	682b      	ldr	r3, [r5, #0]
 802679a:	2b00      	cmp	r3, #0
 802679c:	d000      	beq.n	80267a0 <_read_r+0x20>
 802679e:	6023      	str	r3, [r4, #0]
 80267a0:	bd70      	pop	{r4, r5, r6, pc}
 80267a2:	46c0      	nop			@ (mov r8, r8)
 80267a4:	20003908 	.word	0x20003908

080267a8 <_write_r>:
 80267a8:	b570      	push	{r4, r5, r6, lr}
 80267aa:	0004      	movs	r4, r0
 80267ac:	0008      	movs	r0, r1
 80267ae:	0011      	movs	r1, r2
 80267b0:	001a      	movs	r2, r3
 80267b2:	2300      	movs	r3, #0
 80267b4:	4d05      	ldr	r5, [pc, #20]	@ (80267cc <_write_r+0x24>)
 80267b6:	602b      	str	r3, [r5, #0]
 80267b8:	f7ed fb5c 	bl	8013e74 <_write>
 80267bc:	1c43      	adds	r3, r0, #1
 80267be:	d103      	bne.n	80267c8 <_write_r+0x20>
 80267c0:	682b      	ldr	r3, [r5, #0]
 80267c2:	2b00      	cmp	r3, #0
 80267c4:	d000      	beq.n	80267c8 <_write_r+0x20>
 80267c6:	6023      	str	r3, [r4, #0]
 80267c8:	bd70      	pop	{r4, r5, r6, pc}
 80267ca:	46c0      	nop			@ (mov r8, r8)
 80267cc:	20003908 	.word	0x20003908

080267d0 <__errno>:
 80267d0:	4b01      	ldr	r3, [pc, #4]	@ (80267d8 <__errno+0x8>)
 80267d2:	6818      	ldr	r0, [r3, #0]
 80267d4:	4770      	bx	lr
 80267d6:	46c0      	nop			@ (mov r8, r8)
 80267d8:	200003ec 	.word	0x200003ec

080267dc <__libc_init_array>:
 80267dc:	b570      	push	{r4, r5, r6, lr}
 80267de:	2600      	movs	r6, #0
 80267e0:	4c0c      	ldr	r4, [pc, #48]	@ (8026814 <__libc_init_array+0x38>)
 80267e2:	4d0d      	ldr	r5, [pc, #52]	@ (8026818 <__libc_init_array+0x3c>)
 80267e4:	1b64      	subs	r4, r4, r5
 80267e6:	10a4      	asrs	r4, r4, #2
 80267e8:	42a6      	cmp	r6, r4
 80267ea:	d109      	bne.n	8026800 <__libc_init_array+0x24>
 80267ec:	2600      	movs	r6, #0
 80267ee:	f003 ffcb 	bl	802a788 <_init>
 80267f2:	4c0a      	ldr	r4, [pc, #40]	@ (802681c <__libc_init_array+0x40>)
 80267f4:	4d0a      	ldr	r5, [pc, #40]	@ (8026820 <__libc_init_array+0x44>)
 80267f6:	1b64      	subs	r4, r4, r5
 80267f8:	10a4      	asrs	r4, r4, #2
 80267fa:	42a6      	cmp	r6, r4
 80267fc:	d105      	bne.n	802680a <__libc_init_array+0x2e>
 80267fe:	bd70      	pop	{r4, r5, r6, pc}
 8026800:	00b3      	lsls	r3, r6, #2
 8026802:	58eb      	ldr	r3, [r5, r3]
 8026804:	4798      	blx	r3
 8026806:	3601      	adds	r6, #1
 8026808:	e7ee      	b.n	80267e8 <__libc_init_array+0xc>
 802680a:	00b3      	lsls	r3, r6, #2
 802680c:	58eb      	ldr	r3, [r5, r3]
 802680e:	4798      	blx	r3
 8026810:	3601      	adds	r6, #1
 8026812:	e7f2      	b.n	80267fa <__libc_init_array+0x1e>
 8026814:	0802f050 	.word	0x0802f050
 8026818:	0802f050 	.word	0x0802f050
 802681c:	0802f054 	.word	0x0802f054
 8026820:	0802f050 	.word	0x0802f050

08026824 <__retarget_lock_init_recursive>:
 8026824:	4770      	bx	lr

08026826 <__retarget_lock_acquire_recursive>:
 8026826:	4770      	bx	lr

08026828 <__retarget_lock_release_recursive>:
 8026828:	4770      	bx	lr

0802682a <memchr>:
 802682a:	b2c9      	uxtb	r1, r1
 802682c:	1882      	adds	r2, r0, r2
 802682e:	4290      	cmp	r0, r2
 8026830:	d101      	bne.n	8026836 <memchr+0xc>
 8026832:	2000      	movs	r0, #0
 8026834:	4770      	bx	lr
 8026836:	7803      	ldrb	r3, [r0, #0]
 8026838:	428b      	cmp	r3, r1
 802683a:	d0fb      	beq.n	8026834 <memchr+0xa>
 802683c:	3001      	adds	r0, #1
 802683e:	e7f6      	b.n	802682e <memchr+0x4>

08026840 <memcpy>:
 8026840:	2300      	movs	r3, #0
 8026842:	b510      	push	{r4, lr}
 8026844:	429a      	cmp	r2, r3
 8026846:	d100      	bne.n	802684a <memcpy+0xa>
 8026848:	bd10      	pop	{r4, pc}
 802684a:	5ccc      	ldrb	r4, [r1, r3]
 802684c:	54c4      	strb	r4, [r0, r3]
 802684e:	3301      	adds	r3, #1
 8026850:	e7f8      	b.n	8026844 <memcpy+0x4>
	...

08026854 <nan>:
 8026854:	2000      	movs	r0, #0
 8026856:	4901      	ldr	r1, [pc, #4]	@ (802685c <nan+0x8>)
 8026858:	4770      	bx	lr
 802685a:	46c0      	nop			@ (mov r8, r8)
 802685c:	7ff80000 	.word	0x7ff80000

08026860 <quorem>:
 8026860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026862:	6903      	ldr	r3, [r0, #16]
 8026864:	690c      	ldr	r4, [r1, #16]
 8026866:	b089      	sub	sp, #36	@ 0x24
 8026868:	9003      	str	r0, [sp, #12]
 802686a:	9106      	str	r1, [sp, #24]
 802686c:	2000      	movs	r0, #0
 802686e:	42a3      	cmp	r3, r4
 8026870:	db63      	blt.n	802693a <quorem+0xda>
 8026872:	000b      	movs	r3, r1
 8026874:	3c01      	subs	r4, #1
 8026876:	3314      	adds	r3, #20
 8026878:	00a5      	lsls	r5, r4, #2
 802687a:	9304      	str	r3, [sp, #16]
 802687c:	195b      	adds	r3, r3, r5
 802687e:	9305      	str	r3, [sp, #20]
 8026880:	9b03      	ldr	r3, [sp, #12]
 8026882:	3314      	adds	r3, #20
 8026884:	9301      	str	r3, [sp, #4]
 8026886:	195d      	adds	r5, r3, r5
 8026888:	9b05      	ldr	r3, [sp, #20]
 802688a:	682f      	ldr	r7, [r5, #0]
 802688c:	681e      	ldr	r6, [r3, #0]
 802688e:	0038      	movs	r0, r7
 8026890:	3601      	adds	r6, #1
 8026892:	0031      	movs	r1, r6
 8026894:	f7d9 fc86 	bl	80001a4 <__udivsi3>
 8026898:	9002      	str	r0, [sp, #8]
 802689a:	42b7      	cmp	r7, r6
 802689c:	d327      	bcc.n	80268ee <quorem+0x8e>
 802689e:	9b04      	ldr	r3, [sp, #16]
 80268a0:	2700      	movs	r7, #0
 80268a2:	469c      	mov	ip, r3
 80268a4:	9e01      	ldr	r6, [sp, #4]
 80268a6:	9707      	str	r7, [sp, #28]
 80268a8:	4662      	mov	r2, ip
 80268aa:	ca08      	ldmia	r2!, {r3}
 80268ac:	6830      	ldr	r0, [r6, #0]
 80268ae:	4694      	mov	ip, r2
 80268b0:	9a02      	ldr	r2, [sp, #8]
 80268b2:	b299      	uxth	r1, r3
 80268b4:	4351      	muls	r1, r2
 80268b6:	0c1b      	lsrs	r3, r3, #16
 80268b8:	4353      	muls	r3, r2
 80268ba:	19c9      	adds	r1, r1, r7
 80268bc:	0c0a      	lsrs	r2, r1, #16
 80268be:	189b      	adds	r3, r3, r2
 80268c0:	b289      	uxth	r1, r1
 80268c2:	b282      	uxth	r2, r0
 80268c4:	1a52      	subs	r2, r2, r1
 80268c6:	9907      	ldr	r1, [sp, #28]
 80268c8:	0c1f      	lsrs	r7, r3, #16
 80268ca:	1852      	adds	r2, r2, r1
 80268cc:	0c00      	lsrs	r0, r0, #16
 80268ce:	b29b      	uxth	r3, r3
 80268d0:	1411      	asrs	r1, r2, #16
 80268d2:	1ac3      	subs	r3, r0, r3
 80268d4:	185b      	adds	r3, r3, r1
 80268d6:	1419      	asrs	r1, r3, #16
 80268d8:	b292      	uxth	r2, r2
 80268da:	041b      	lsls	r3, r3, #16
 80268dc:	431a      	orrs	r2, r3
 80268de:	9b05      	ldr	r3, [sp, #20]
 80268e0:	9107      	str	r1, [sp, #28]
 80268e2:	c604      	stmia	r6!, {r2}
 80268e4:	4563      	cmp	r3, ip
 80268e6:	d2df      	bcs.n	80268a8 <quorem+0x48>
 80268e8:	682b      	ldr	r3, [r5, #0]
 80268ea:	2b00      	cmp	r3, #0
 80268ec:	d02b      	beq.n	8026946 <quorem+0xe6>
 80268ee:	9906      	ldr	r1, [sp, #24]
 80268f0:	9803      	ldr	r0, [sp, #12]
 80268f2:	f001 fd6f 	bl	80283d4 <__mcmp>
 80268f6:	2800      	cmp	r0, #0
 80268f8:	db1e      	blt.n	8026938 <quorem+0xd8>
 80268fa:	2600      	movs	r6, #0
 80268fc:	9d01      	ldr	r5, [sp, #4]
 80268fe:	9904      	ldr	r1, [sp, #16]
 8026900:	c901      	ldmia	r1!, {r0}
 8026902:	682b      	ldr	r3, [r5, #0]
 8026904:	b287      	uxth	r7, r0
 8026906:	b29a      	uxth	r2, r3
 8026908:	1bd2      	subs	r2, r2, r7
 802690a:	1992      	adds	r2, r2, r6
 802690c:	0c00      	lsrs	r0, r0, #16
 802690e:	0c1b      	lsrs	r3, r3, #16
 8026910:	1a1b      	subs	r3, r3, r0
 8026912:	1410      	asrs	r0, r2, #16
 8026914:	181b      	adds	r3, r3, r0
 8026916:	141e      	asrs	r6, r3, #16
 8026918:	b292      	uxth	r2, r2
 802691a:	041b      	lsls	r3, r3, #16
 802691c:	431a      	orrs	r2, r3
 802691e:	9b05      	ldr	r3, [sp, #20]
 8026920:	c504      	stmia	r5!, {r2}
 8026922:	428b      	cmp	r3, r1
 8026924:	d2ec      	bcs.n	8026900 <quorem+0xa0>
 8026926:	9a01      	ldr	r2, [sp, #4]
 8026928:	00a3      	lsls	r3, r4, #2
 802692a:	18d3      	adds	r3, r2, r3
 802692c:	681a      	ldr	r2, [r3, #0]
 802692e:	2a00      	cmp	r2, #0
 8026930:	d014      	beq.n	802695c <quorem+0xfc>
 8026932:	9b02      	ldr	r3, [sp, #8]
 8026934:	3301      	adds	r3, #1
 8026936:	9302      	str	r3, [sp, #8]
 8026938:	9802      	ldr	r0, [sp, #8]
 802693a:	b009      	add	sp, #36	@ 0x24
 802693c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802693e:	682b      	ldr	r3, [r5, #0]
 8026940:	2b00      	cmp	r3, #0
 8026942:	d104      	bne.n	802694e <quorem+0xee>
 8026944:	3c01      	subs	r4, #1
 8026946:	9b01      	ldr	r3, [sp, #4]
 8026948:	3d04      	subs	r5, #4
 802694a:	42ab      	cmp	r3, r5
 802694c:	d3f7      	bcc.n	802693e <quorem+0xde>
 802694e:	9b03      	ldr	r3, [sp, #12]
 8026950:	611c      	str	r4, [r3, #16]
 8026952:	e7cc      	b.n	80268ee <quorem+0x8e>
 8026954:	681a      	ldr	r2, [r3, #0]
 8026956:	2a00      	cmp	r2, #0
 8026958:	d104      	bne.n	8026964 <quorem+0x104>
 802695a:	3c01      	subs	r4, #1
 802695c:	9a01      	ldr	r2, [sp, #4]
 802695e:	3b04      	subs	r3, #4
 8026960:	429a      	cmp	r2, r3
 8026962:	d3f7      	bcc.n	8026954 <quorem+0xf4>
 8026964:	9b03      	ldr	r3, [sp, #12]
 8026966:	611c      	str	r4, [r3, #16]
 8026968:	e7e3      	b.n	8026932 <quorem+0xd2>
	...

0802696c <_dtoa_r>:
 802696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802696e:	0014      	movs	r4, r2
 8026970:	001d      	movs	r5, r3
 8026972:	69c6      	ldr	r6, [r0, #28]
 8026974:	b09d      	sub	sp, #116	@ 0x74
 8026976:	940a      	str	r4, [sp, #40]	@ 0x28
 8026978:	950b      	str	r5, [sp, #44]	@ 0x2c
 802697a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 802697c:	9003      	str	r0, [sp, #12]
 802697e:	2e00      	cmp	r6, #0
 8026980:	d10f      	bne.n	80269a2 <_dtoa_r+0x36>
 8026982:	2010      	movs	r0, #16
 8026984:	f001 f986 	bl	8027c94 <malloc>
 8026988:	9b03      	ldr	r3, [sp, #12]
 802698a:	1e02      	subs	r2, r0, #0
 802698c:	61d8      	str	r0, [r3, #28]
 802698e:	d104      	bne.n	802699a <_dtoa_r+0x2e>
 8026990:	21ef      	movs	r1, #239	@ 0xef
 8026992:	4bc7      	ldr	r3, [pc, #796]	@ (8026cb0 <_dtoa_r+0x344>)
 8026994:	48c7      	ldr	r0, [pc, #796]	@ (8026cb4 <_dtoa_r+0x348>)
 8026996:	f002 fb23 	bl	8028fe0 <__assert_func>
 802699a:	6046      	str	r6, [r0, #4]
 802699c:	6086      	str	r6, [r0, #8]
 802699e:	6006      	str	r6, [r0, #0]
 80269a0:	60c6      	str	r6, [r0, #12]
 80269a2:	9b03      	ldr	r3, [sp, #12]
 80269a4:	69db      	ldr	r3, [r3, #28]
 80269a6:	6819      	ldr	r1, [r3, #0]
 80269a8:	2900      	cmp	r1, #0
 80269aa:	d00b      	beq.n	80269c4 <_dtoa_r+0x58>
 80269ac:	685a      	ldr	r2, [r3, #4]
 80269ae:	2301      	movs	r3, #1
 80269b0:	4093      	lsls	r3, r2
 80269b2:	604a      	str	r2, [r1, #4]
 80269b4:	608b      	str	r3, [r1, #8]
 80269b6:	9803      	ldr	r0, [sp, #12]
 80269b8:	f001 fa7e 	bl	8027eb8 <_Bfree>
 80269bc:	2200      	movs	r2, #0
 80269be:	9b03      	ldr	r3, [sp, #12]
 80269c0:	69db      	ldr	r3, [r3, #28]
 80269c2:	601a      	str	r2, [r3, #0]
 80269c4:	2d00      	cmp	r5, #0
 80269c6:	da1e      	bge.n	8026a06 <_dtoa_r+0x9a>
 80269c8:	2301      	movs	r3, #1
 80269ca:	603b      	str	r3, [r7, #0]
 80269cc:	006b      	lsls	r3, r5, #1
 80269ce:	085b      	lsrs	r3, r3, #1
 80269d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80269d2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80269d4:	4bb8      	ldr	r3, [pc, #736]	@ (8026cb8 <_dtoa_r+0x34c>)
 80269d6:	4ab8      	ldr	r2, [pc, #736]	@ (8026cb8 <_dtoa_r+0x34c>)
 80269d8:	403b      	ands	r3, r7
 80269da:	4293      	cmp	r3, r2
 80269dc:	d116      	bne.n	8026a0c <_dtoa_r+0xa0>
 80269de:	4bb7      	ldr	r3, [pc, #732]	@ (8026cbc <_dtoa_r+0x350>)
 80269e0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80269e2:	6013      	str	r3, [r2, #0]
 80269e4:	033b      	lsls	r3, r7, #12
 80269e6:	0b1b      	lsrs	r3, r3, #12
 80269e8:	4323      	orrs	r3, r4
 80269ea:	d101      	bne.n	80269f0 <_dtoa_r+0x84>
 80269ec:	f000 fd80 	bl	80274f0 <_dtoa_r+0xb84>
 80269f0:	4bb3      	ldr	r3, [pc, #716]	@ (8026cc0 <_dtoa_r+0x354>)
 80269f2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80269f4:	9308      	str	r3, [sp, #32]
 80269f6:	2a00      	cmp	r2, #0
 80269f8:	d002      	beq.n	8026a00 <_dtoa_r+0x94>
 80269fa:	4bb2      	ldr	r3, [pc, #712]	@ (8026cc4 <_dtoa_r+0x358>)
 80269fc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80269fe:	6013      	str	r3, [r2, #0]
 8026a00:	9808      	ldr	r0, [sp, #32]
 8026a02:	b01d      	add	sp, #116	@ 0x74
 8026a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a06:	2300      	movs	r3, #0
 8026a08:	603b      	str	r3, [r7, #0]
 8026a0a:	e7e2      	b.n	80269d2 <_dtoa_r+0x66>
 8026a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a10:	9212      	str	r2, [sp, #72]	@ 0x48
 8026a12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026a14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026a16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026a18:	2200      	movs	r2, #0
 8026a1a:	2300      	movs	r3, #0
 8026a1c:	f7d9 fd48 	bl	80004b0 <__aeabi_dcmpeq>
 8026a20:	1e06      	subs	r6, r0, #0
 8026a22:	d00b      	beq.n	8026a3c <_dtoa_r+0xd0>
 8026a24:	2301      	movs	r3, #1
 8026a26:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026a28:	6013      	str	r3, [r2, #0]
 8026a2a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	d002      	beq.n	8026a36 <_dtoa_r+0xca>
 8026a30:	4ba5      	ldr	r3, [pc, #660]	@ (8026cc8 <_dtoa_r+0x35c>)
 8026a32:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026a34:	6013      	str	r3, [r2, #0]
 8026a36:	4ba5      	ldr	r3, [pc, #660]	@ (8026ccc <_dtoa_r+0x360>)
 8026a38:	9308      	str	r3, [sp, #32]
 8026a3a:	e7e1      	b.n	8026a00 <_dtoa_r+0x94>
 8026a3c:	ab1a      	add	r3, sp, #104	@ 0x68
 8026a3e:	9301      	str	r3, [sp, #4]
 8026a40:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026a42:	9300      	str	r3, [sp, #0]
 8026a44:	9803      	ldr	r0, [sp, #12]
 8026a46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026a48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a4a:	f001 fde5 	bl	8028618 <__d2b>
 8026a4e:	007a      	lsls	r2, r7, #1
 8026a50:	9005      	str	r0, [sp, #20]
 8026a52:	0d52      	lsrs	r2, r2, #21
 8026a54:	d100      	bne.n	8026a58 <_dtoa_r+0xec>
 8026a56:	e07b      	b.n	8026b50 <_dtoa_r+0x1e4>
 8026a58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a5a:	9618      	str	r6, [sp, #96]	@ 0x60
 8026a5c:	0319      	lsls	r1, r3, #12
 8026a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8026cd0 <_dtoa_r+0x364>)
 8026a60:	0b09      	lsrs	r1, r1, #12
 8026a62:	430b      	orrs	r3, r1
 8026a64:	499b      	ldr	r1, [pc, #620]	@ (8026cd4 <_dtoa_r+0x368>)
 8026a66:	1857      	adds	r7, r2, r1
 8026a68:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026a6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026a6c:	0019      	movs	r1, r3
 8026a6e:	2200      	movs	r2, #0
 8026a70:	4b99      	ldr	r3, [pc, #612]	@ (8026cd8 <_dtoa_r+0x36c>)
 8026a72:	f7dc fa55 	bl	8002f20 <__aeabi_dsub>
 8026a76:	4a99      	ldr	r2, [pc, #612]	@ (8026cdc <_dtoa_r+0x370>)
 8026a78:	4b99      	ldr	r3, [pc, #612]	@ (8026ce0 <_dtoa_r+0x374>)
 8026a7a:	f7db ff6b 	bl	8002954 <__aeabi_dmul>
 8026a7e:	4a99      	ldr	r2, [pc, #612]	@ (8026ce4 <_dtoa_r+0x378>)
 8026a80:	4b99      	ldr	r3, [pc, #612]	@ (8026ce8 <_dtoa_r+0x37c>)
 8026a82:	f7da ff67 	bl	8001954 <__aeabi_dadd>
 8026a86:	0004      	movs	r4, r0
 8026a88:	0038      	movs	r0, r7
 8026a8a:	000d      	movs	r5, r1
 8026a8c:	f7dc feb0 	bl	80037f0 <__aeabi_i2d>
 8026a90:	4a96      	ldr	r2, [pc, #600]	@ (8026cec <_dtoa_r+0x380>)
 8026a92:	4b97      	ldr	r3, [pc, #604]	@ (8026cf0 <_dtoa_r+0x384>)
 8026a94:	f7db ff5e 	bl	8002954 <__aeabi_dmul>
 8026a98:	0002      	movs	r2, r0
 8026a9a:	000b      	movs	r3, r1
 8026a9c:	0020      	movs	r0, r4
 8026a9e:	0029      	movs	r1, r5
 8026aa0:	f7da ff58 	bl	8001954 <__aeabi_dadd>
 8026aa4:	0004      	movs	r4, r0
 8026aa6:	000d      	movs	r5, r1
 8026aa8:	f7dc fe66 	bl	8003778 <__aeabi_d2iz>
 8026aac:	2200      	movs	r2, #0
 8026aae:	9004      	str	r0, [sp, #16]
 8026ab0:	2300      	movs	r3, #0
 8026ab2:	0020      	movs	r0, r4
 8026ab4:	0029      	movs	r1, r5
 8026ab6:	f7d9 fd01 	bl	80004bc <__aeabi_dcmplt>
 8026aba:	2800      	cmp	r0, #0
 8026abc:	d00b      	beq.n	8026ad6 <_dtoa_r+0x16a>
 8026abe:	9804      	ldr	r0, [sp, #16]
 8026ac0:	f7dc fe96 	bl	80037f0 <__aeabi_i2d>
 8026ac4:	002b      	movs	r3, r5
 8026ac6:	0022      	movs	r2, r4
 8026ac8:	f7d9 fcf2 	bl	80004b0 <__aeabi_dcmpeq>
 8026acc:	4243      	negs	r3, r0
 8026ace:	4158      	adcs	r0, r3
 8026ad0:	9b04      	ldr	r3, [sp, #16]
 8026ad2:	1a1b      	subs	r3, r3, r0
 8026ad4:	9304      	str	r3, [sp, #16]
 8026ad6:	2301      	movs	r3, #1
 8026ad8:	9315      	str	r3, [sp, #84]	@ 0x54
 8026ada:	9b04      	ldr	r3, [sp, #16]
 8026adc:	2b16      	cmp	r3, #22
 8026ade:	d810      	bhi.n	8026b02 <_dtoa_r+0x196>
 8026ae0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026ae2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026ae4:	9a04      	ldr	r2, [sp, #16]
 8026ae6:	4b83      	ldr	r3, [pc, #524]	@ (8026cf4 <_dtoa_r+0x388>)
 8026ae8:	00d2      	lsls	r2, r2, #3
 8026aea:	189b      	adds	r3, r3, r2
 8026aec:	681a      	ldr	r2, [r3, #0]
 8026aee:	685b      	ldr	r3, [r3, #4]
 8026af0:	f7d9 fce4 	bl	80004bc <__aeabi_dcmplt>
 8026af4:	2800      	cmp	r0, #0
 8026af6:	d047      	beq.n	8026b88 <_dtoa_r+0x21c>
 8026af8:	9b04      	ldr	r3, [sp, #16]
 8026afa:	3b01      	subs	r3, #1
 8026afc:	9304      	str	r3, [sp, #16]
 8026afe:	2300      	movs	r3, #0
 8026b00:	9315      	str	r3, [sp, #84]	@ 0x54
 8026b02:	2200      	movs	r2, #0
 8026b04:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026b06:	9206      	str	r2, [sp, #24]
 8026b08:	1bdb      	subs	r3, r3, r7
 8026b0a:	1e5a      	subs	r2, r3, #1
 8026b0c:	d53e      	bpl.n	8026b8c <_dtoa_r+0x220>
 8026b0e:	2201      	movs	r2, #1
 8026b10:	1ad3      	subs	r3, r2, r3
 8026b12:	9306      	str	r3, [sp, #24]
 8026b14:	2300      	movs	r3, #0
 8026b16:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b18:	9b04      	ldr	r3, [sp, #16]
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	db38      	blt.n	8026b90 <_dtoa_r+0x224>
 8026b1e:	9a04      	ldr	r2, [sp, #16]
 8026b20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026b22:	4694      	mov	ip, r2
 8026b24:	4463      	add	r3, ip
 8026b26:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b28:	2300      	movs	r3, #0
 8026b2a:	9214      	str	r2, [sp, #80]	@ 0x50
 8026b2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026b2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026b30:	2401      	movs	r4, #1
 8026b32:	2b09      	cmp	r3, #9
 8026b34:	d862      	bhi.n	8026bfc <_dtoa_r+0x290>
 8026b36:	2b05      	cmp	r3, #5
 8026b38:	dd02      	ble.n	8026b40 <_dtoa_r+0x1d4>
 8026b3a:	2400      	movs	r4, #0
 8026b3c:	3b04      	subs	r3, #4
 8026b3e:	9322      	str	r3, [sp, #136]	@ 0x88
 8026b40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026b42:	1e98      	subs	r0, r3, #2
 8026b44:	2803      	cmp	r0, #3
 8026b46:	d863      	bhi.n	8026c10 <_dtoa_r+0x2a4>
 8026b48:	f7d9 fb18 	bl	800017c <__gnu_thumb1_case_uqi>
 8026b4c:	2b385654 	.word	0x2b385654
 8026b50:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026b52:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026b54:	18f6      	adds	r6, r6, r3
 8026b56:	4b68      	ldr	r3, [pc, #416]	@ (8026cf8 <_dtoa_r+0x38c>)
 8026b58:	18f2      	adds	r2, r6, r3
 8026b5a:	2a20      	cmp	r2, #32
 8026b5c:	dd0f      	ble.n	8026b7e <_dtoa_r+0x212>
 8026b5e:	2340      	movs	r3, #64	@ 0x40
 8026b60:	1a9b      	subs	r3, r3, r2
 8026b62:	409f      	lsls	r7, r3
 8026b64:	4b65      	ldr	r3, [pc, #404]	@ (8026cfc <_dtoa_r+0x390>)
 8026b66:	0038      	movs	r0, r7
 8026b68:	18f3      	adds	r3, r6, r3
 8026b6a:	40dc      	lsrs	r4, r3
 8026b6c:	4320      	orrs	r0, r4
 8026b6e:	f7dc fe6d 	bl	800384c <__aeabi_ui2d>
 8026b72:	2201      	movs	r2, #1
 8026b74:	4b62      	ldr	r3, [pc, #392]	@ (8026d00 <_dtoa_r+0x394>)
 8026b76:	1e77      	subs	r7, r6, #1
 8026b78:	18cb      	adds	r3, r1, r3
 8026b7a:	9218      	str	r2, [sp, #96]	@ 0x60
 8026b7c:	e776      	b.n	8026a6c <_dtoa_r+0x100>
 8026b7e:	2320      	movs	r3, #32
 8026b80:	0020      	movs	r0, r4
 8026b82:	1a9b      	subs	r3, r3, r2
 8026b84:	4098      	lsls	r0, r3
 8026b86:	e7f2      	b.n	8026b6e <_dtoa_r+0x202>
 8026b88:	9015      	str	r0, [sp, #84]	@ 0x54
 8026b8a:	e7ba      	b.n	8026b02 <_dtoa_r+0x196>
 8026b8c:	920d      	str	r2, [sp, #52]	@ 0x34
 8026b8e:	e7c3      	b.n	8026b18 <_dtoa_r+0x1ac>
 8026b90:	9b06      	ldr	r3, [sp, #24]
 8026b92:	9a04      	ldr	r2, [sp, #16]
 8026b94:	1a9b      	subs	r3, r3, r2
 8026b96:	9306      	str	r3, [sp, #24]
 8026b98:	4253      	negs	r3, r2
 8026b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026b9c:	2300      	movs	r3, #0
 8026b9e:	9314      	str	r3, [sp, #80]	@ 0x50
 8026ba0:	e7c5      	b.n	8026b2e <_dtoa_r+0x1c2>
 8026ba2:	2301      	movs	r3, #1
 8026ba4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026ba6:	9310      	str	r3, [sp, #64]	@ 0x40
 8026ba8:	4694      	mov	ip, r2
 8026baa:	9b04      	ldr	r3, [sp, #16]
 8026bac:	4463      	add	r3, ip
 8026bae:	930e      	str	r3, [sp, #56]	@ 0x38
 8026bb0:	3301      	adds	r3, #1
 8026bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	dc08      	bgt.n	8026bca <_dtoa_r+0x25e>
 8026bb8:	2301      	movs	r3, #1
 8026bba:	e006      	b.n	8026bca <_dtoa_r+0x25e>
 8026bbc:	2301      	movs	r3, #1
 8026bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8026bc0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	dd28      	ble.n	8026c18 <_dtoa_r+0x2ac>
 8026bc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8026bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bca:	9a03      	ldr	r2, [sp, #12]
 8026bcc:	2100      	movs	r1, #0
 8026bce:	69d0      	ldr	r0, [r2, #28]
 8026bd0:	2204      	movs	r2, #4
 8026bd2:	0015      	movs	r5, r2
 8026bd4:	3514      	adds	r5, #20
 8026bd6:	429d      	cmp	r5, r3
 8026bd8:	d923      	bls.n	8026c22 <_dtoa_r+0x2b6>
 8026bda:	6041      	str	r1, [r0, #4]
 8026bdc:	9803      	ldr	r0, [sp, #12]
 8026bde:	f001 f927 	bl	8027e30 <_Balloc>
 8026be2:	9008      	str	r0, [sp, #32]
 8026be4:	2800      	cmp	r0, #0
 8026be6:	d11f      	bne.n	8026c28 <_dtoa_r+0x2bc>
 8026be8:	21b0      	movs	r1, #176	@ 0xb0
 8026bea:	4b46      	ldr	r3, [pc, #280]	@ (8026d04 <_dtoa_r+0x398>)
 8026bec:	4831      	ldr	r0, [pc, #196]	@ (8026cb4 <_dtoa_r+0x348>)
 8026bee:	9a08      	ldr	r2, [sp, #32]
 8026bf0:	31ff      	adds	r1, #255	@ 0xff
 8026bf2:	e6d0      	b.n	8026996 <_dtoa_r+0x2a>
 8026bf4:	2300      	movs	r3, #0
 8026bf6:	e7e2      	b.n	8026bbe <_dtoa_r+0x252>
 8026bf8:	2300      	movs	r3, #0
 8026bfa:	e7d3      	b.n	8026ba4 <_dtoa_r+0x238>
 8026bfc:	2300      	movs	r3, #0
 8026bfe:	9410      	str	r4, [sp, #64]	@ 0x40
 8026c00:	9322      	str	r3, [sp, #136]	@ 0x88
 8026c02:	3b01      	subs	r3, #1
 8026c04:	2200      	movs	r2, #0
 8026c06:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c0a:	3313      	adds	r3, #19
 8026c0c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026c0e:	e7dc      	b.n	8026bca <_dtoa_r+0x25e>
 8026c10:	2301      	movs	r3, #1
 8026c12:	9310      	str	r3, [sp, #64]	@ 0x40
 8026c14:	3b02      	subs	r3, #2
 8026c16:	e7f5      	b.n	8026c04 <_dtoa_r+0x298>
 8026c18:	2301      	movs	r3, #1
 8026c1a:	001a      	movs	r2, r3
 8026c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c20:	e7f4      	b.n	8026c0c <_dtoa_r+0x2a0>
 8026c22:	3101      	adds	r1, #1
 8026c24:	0052      	lsls	r2, r2, #1
 8026c26:	e7d4      	b.n	8026bd2 <_dtoa_r+0x266>
 8026c28:	9b03      	ldr	r3, [sp, #12]
 8026c2a:	9a08      	ldr	r2, [sp, #32]
 8026c2c:	69db      	ldr	r3, [r3, #28]
 8026c2e:	601a      	str	r2, [r3, #0]
 8026c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c32:	2b0e      	cmp	r3, #14
 8026c34:	d900      	bls.n	8026c38 <_dtoa_r+0x2cc>
 8026c36:	e0d6      	b.n	8026de6 <_dtoa_r+0x47a>
 8026c38:	2c00      	cmp	r4, #0
 8026c3a:	d100      	bne.n	8026c3e <_dtoa_r+0x2d2>
 8026c3c:	e0d3      	b.n	8026de6 <_dtoa_r+0x47a>
 8026c3e:	9b04      	ldr	r3, [sp, #16]
 8026c40:	2b00      	cmp	r3, #0
 8026c42:	dd63      	ble.n	8026d0c <_dtoa_r+0x3a0>
 8026c44:	210f      	movs	r1, #15
 8026c46:	9a04      	ldr	r2, [sp, #16]
 8026c48:	4b2a      	ldr	r3, [pc, #168]	@ (8026cf4 <_dtoa_r+0x388>)
 8026c4a:	400a      	ands	r2, r1
 8026c4c:	00d2      	lsls	r2, r2, #3
 8026c4e:	189b      	adds	r3, r3, r2
 8026c50:	681e      	ldr	r6, [r3, #0]
 8026c52:	685f      	ldr	r7, [r3, #4]
 8026c54:	9b04      	ldr	r3, [sp, #16]
 8026c56:	2402      	movs	r4, #2
 8026c58:	111d      	asrs	r5, r3, #4
 8026c5a:	05db      	lsls	r3, r3, #23
 8026c5c:	d50a      	bpl.n	8026c74 <_dtoa_r+0x308>
 8026c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8026d08 <_dtoa_r+0x39c>)
 8026c60:	400d      	ands	r5, r1
 8026c62:	6a1a      	ldr	r2, [r3, #32]
 8026c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026c66:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026c68:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026c6a:	f7db fa39 	bl	80020e0 <__aeabi_ddiv>
 8026c6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026c70:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026c72:	3401      	adds	r4, #1
 8026c74:	4b24      	ldr	r3, [pc, #144]	@ (8026d08 <_dtoa_r+0x39c>)
 8026c76:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c78:	2d00      	cmp	r5, #0
 8026c7a:	d108      	bne.n	8026c8e <_dtoa_r+0x322>
 8026c7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026c7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026c80:	0032      	movs	r2, r6
 8026c82:	003b      	movs	r3, r7
 8026c84:	f7db fa2c 	bl	80020e0 <__aeabi_ddiv>
 8026c88:	900a      	str	r0, [sp, #40]	@ 0x28
 8026c8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026c8c:	e059      	b.n	8026d42 <_dtoa_r+0x3d6>
 8026c8e:	2301      	movs	r3, #1
 8026c90:	421d      	tst	r5, r3
 8026c92:	d009      	beq.n	8026ca8 <_dtoa_r+0x33c>
 8026c94:	18e4      	adds	r4, r4, r3
 8026c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026c98:	0030      	movs	r0, r6
 8026c9a:	681a      	ldr	r2, [r3, #0]
 8026c9c:	685b      	ldr	r3, [r3, #4]
 8026c9e:	0039      	movs	r1, r7
 8026ca0:	f7db fe58 	bl	8002954 <__aeabi_dmul>
 8026ca4:	0006      	movs	r6, r0
 8026ca6:	000f      	movs	r7, r1
 8026ca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026caa:	106d      	asrs	r5, r5, #1
 8026cac:	3308      	adds	r3, #8
 8026cae:	e7e2      	b.n	8026c76 <_dtoa_r+0x30a>
 8026cb0:	0802ec0f 	.word	0x0802ec0f
 8026cb4:	0802ec26 	.word	0x0802ec26
 8026cb8:	7ff00000 	.word	0x7ff00000
 8026cbc:	0000270f 	.word	0x0000270f
 8026cc0:	0802ec0b 	.word	0x0802ec0b
 8026cc4:	0802ec0e 	.word	0x0802ec0e
 8026cc8:	0802ebd7 	.word	0x0802ebd7
 8026ccc:	0802ebd6 	.word	0x0802ebd6
 8026cd0:	3ff00000 	.word	0x3ff00000
 8026cd4:	fffffc01 	.word	0xfffffc01
 8026cd8:	3ff80000 	.word	0x3ff80000
 8026cdc:	636f4361 	.word	0x636f4361
 8026ce0:	3fd287a7 	.word	0x3fd287a7
 8026ce4:	8b60c8b3 	.word	0x8b60c8b3
 8026ce8:	3fc68a28 	.word	0x3fc68a28
 8026cec:	509f79fb 	.word	0x509f79fb
 8026cf0:	3fd34413 	.word	0x3fd34413
 8026cf4:	0802ef20 	.word	0x0802ef20
 8026cf8:	00000432 	.word	0x00000432
 8026cfc:	00000412 	.word	0x00000412
 8026d00:	fe100000 	.word	0xfe100000
 8026d04:	0802ec7e 	.word	0x0802ec7e
 8026d08:	0802eef8 	.word	0x0802eef8
 8026d0c:	9b04      	ldr	r3, [sp, #16]
 8026d0e:	2402      	movs	r4, #2
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	d016      	beq.n	8026d42 <_dtoa_r+0x3d6>
 8026d14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026d16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026d18:	220f      	movs	r2, #15
 8026d1a:	425d      	negs	r5, r3
 8026d1c:	402a      	ands	r2, r5
 8026d1e:	4bd5      	ldr	r3, [pc, #852]	@ (8027074 <_dtoa_r+0x708>)
 8026d20:	00d2      	lsls	r2, r2, #3
 8026d22:	189b      	adds	r3, r3, r2
 8026d24:	681a      	ldr	r2, [r3, #0]
 8026d26:	685b      	ldr	r3, [r3, #4]
 8026d28:	f7db fe14 	bl	8002954 <__aeabi_dmul>
 8026d2c:	2701      	movs	r7, #1
 8026d2e:	2300      	movs	r3, #0
 8026d30:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d32:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d34:	4ed0      	ldr	r6, [pc, #832]	@ (8027078 <_dtoa_r+0x70c>)
 8026d36:	112d      	asrs	r5, r5, #4
 8026d38:	2d00      	cmp	r5, #0
 8026d3a:	d000      	beq.n	8026d3e <_dtoa_r+0x3d2>
 8026d3c:	e095      	b.n	8026e6a <_dtoa_r+0x4fe>
 8026d3e:	2b00      	cmp	r3, #0
 8026d40:	d1a2      	bne.n	8026c88 <_dtoa_r+0x31c>
 8026d42:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026d44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026d46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026d48:	2b00      	cmp	r3, #0
 8026d4a:	d100      	bne.n	8026d4e <_dtoa_r+0x3e2>
 8026d4c:	e098      	b.n	8026e80 <_dtoa_r+0x514>
 8026d4e:	2200      	movs	r2, #0
 8026d50:	0030      	movs	r0, r6
 8026d52:	0039      	movs	r1, r7
 8026d54:	4bc9      	ldr	r3, [pc, #804]	@ (802707c <_dtoa_r+0x710>)
 8026d56:	f7d9 fbb1 	bl	80004bc <__aeabi_dcmplt>
 8026d5a:	2800      	cmp	r0, #0
 8026d5c:	d100      	bne.n	8026d60 <_dtoa_r+0x3f4>
 8026d5e:	e08f      	b.n	8026e80 <_dtoa_r+0x514>
 8026d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d62:	2b00      	cmp	r3, #0
 8026d64:	d100      	bne.n	8026d68 <_dtoa_r+0x3fc>
 8026d66:	e08b      	b.n	8026e80 <_dtoa_r+0x514>
 8026d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026d6a:	2b00      	cmp	r3, #0
 8026d6c:	dd37      	ble.n	8026dde <_dtoa_r+0x472>
 8026d6e:	9b04      	ldr	r3, [sp, #16]
 8026d70:	2200      	movs	r2, #0
 8026d72:	3b01      	subs	r3, #1
 8026d74:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d76:	0030      	movs	r0, r6
 8026d78:	4bc1      	ldr	r3, [pc, #772]	@ (8027080 <_dtoa_r+0x714>)
 8026d7a:	0039      	movs	r1, r7
 8026d7c:	f7db fdea 	bl	8002954 <__aeabi_dmul>
 8026d80:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d82:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026d86:	3401      	adds	r4, #1
 8026d88:	0020      	movs	r0, r4
 8026d8a:	9311      	str	r3, [sp, #68]	@ 0x44
 8026d8c:	f7dc fd30 	bl	80037f0 <__aeabi_i2d>
 8026d90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026d92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d94:	f7db fdde 	bl	8002954 <__aeabi_dmul>
 8026d98:	4bba      	ldr	r3, [pc, #744]	@ (8027084 <_dtoa_r+0x718>)
 8026d9a:	2200      	movs	r2, #0
 8026d9c:	f7da fdda 	bl	8001954 <__aeabi_dadd>
 8026da0:	4bb9      	ldr	r3, [pc, #740]	@ (8027088 <_dtoa_r+0x71c>)
 8026da2:	0006      	movs	r6, r0
 8026da4:	18cf      	adds	r7, r1, r3
 8026da6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	d16d      	bne.n	8026e88 <_dtoa_r+0x51c>
 8026dac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026db0:	2200      	movs	r2, #0
 8026db2:	4bb6      	ldr	r3, [pc, #728]	@ (802708c <_dtoa_r+0x720>)
 8026db4:	f7dc f8b4 	bl	8002f20 <__aeabi_dsub>
 8026db8:	0032      	movs	r2, r6
 8026dba:	003b      	movs	r3, r7
 8026dbc:	0004      	movs	r4, r0
 8026dbe:	000d      	movs	r5, r1
 8026dc0:	f7d9 fb90 	bl	80004e4 <__aeabi_dcmpgt>
 8026dc4:	2800      	cmp	r0, #0
 8026dc6:	d000      	beq.n	8026dca <_dtoa_r+0x45e>
 8026dc8:	e2b6      	b.n	8027338 <_dtoa_r+0x9cc>
 8026dca:	2180      	movs	r1, #128	@ 0x80
 8026dcc:	0609      	lsls	r1, r1, #24
 8026dce:	187b      	adds	r3, r7, r1
 8026dd0:	0032      	movs	r2, r6
 8026dd2:	0020      	movs	r0, r4
 8026dd4:	0029      	movs	r1, r5
 8026dd6:	f7d9 fb71 	bl	80004bc <__aeabi_dcmplt>
 8026dda:	2800      	cmp	r0, #0
 8026ddc:	d128      	bne.n	8026e30 <_dtoa_r+0x4c4>
 8026dde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026de0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8026de4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026de6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	da00      	bge.n	8026dee <_dtoa_r+0x482>
 8026dec:	e174      	b.n	80270d8 <_dtoa_r+0x76c>
 8026dee:	9a04      	ldr	r2, [sp, #16]
 8026df0:	2a0e      	cmp	r2, #14
 8026df2:	dd00      	ble.n	8026df6 <_dtoa_r+0x48a>
 8026df4:	e170      	b.n	80270d8 <_dtoa_r+0x76c>
 8026df6:	4b9f      	ldr	r3, [pc, #636]	@ (8027074 <_dtoa_r+0x708>)
 8026df8:	00d2      	lsls	r2, r2, #3
 8026dfa:	189b      	adds	r3, r3, r2
 8026dfc:	685c      	ldr	r4, [r3, #4]
 8026dfe:	681b      	ldr	r3, [r3, #0]
 8026e00:	9306      	str	r3, [sp, #24]
 8026e02:	9407      	str	r4, [sp, #28]
 8026e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026e06:	2b00      	cmp	r3, #0
 8026e08:	db00      	blt.n	8026e0c <_dtoa_r+0x4a0>
 8026e0a:	e0e7      	b.n	8026fdc <_dtoa_r+0x670>
 8026e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e0e:	2b00      	cmp	r3, #0
 8026e10:	dd00      	ble.n	8026e14 <_dtoa_r+0x4a8>
 8026e12:	e0e3      	b.n	8026fdc <_dtoa_r+0x670>
 8026e14:	d10c      	bne.n	8026e30 <_dtoa_r+0x4c4>
 8026e16:	9806      	ldr	r0, [sp, #24]
 8026e18:	9907      	ldr	r1, [sp, #28]
 8026e1a:	2200      	movs	r2, #0
 8026e1c:	4b9b      	ldr	r3, [pc, #620]	@ (802708c <_dtoa_r+0x720>)
 8026e1e:	f7db fd99 	bl	8002954 <__aeabi_dmul>
 8026e22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e26:	f7d9 fb67 	bl	80004f8 <__aeabi_dcmpge>
 8026e2a:	2800      	cmp	r0, #0
 8026e2c:	d100      	bne.n	8026e30 <_dtoa_r+0x4c4>
 8026e2e:	e286      	b.n	802733e <_dtoa_r+0x9d2>
 8026e30:	2600      	movs	r6, #0
 8026e32:	0037      	movs	r7, r6
 8026e34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026e36:	9c08      	ldr	r4, [sp, #32]
 8026e38:	43db      	mvns	r3, r3
 8026e3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e3c:	9704      	str	r7, [sp, #16]
 8026e3e:	2700      	movs	r7, #0
 8026e40:	0031      	movs	r1, r6
 8026e42:	9803      	ldr	r0, [sp, #12]
 8026e44:	f001 f838 	bl	8027eb8 <_Bfree>
 8026e48:	9b04      	ldr	r3, [sp, #16]
 8026e4a:	2b00      	cmp	r3, #0
 8026e4c:	d100      	bne.n	8026e50 <_dtoa_r+0x4e4>
 8026e4e:	e0bb      	b.n	8026fc8 <_dtoa_r+0x65c>
 8026e50:	2f00      	cmp	r7, #0
 8026e52:	d005      	beq.n	8026e60 <_dtoa_r+0x4f4>
 8026e54:	429f      	cmp	r7, r3
 8026e56:	d003      	beq.n	8026e60 <_dtoa_r+0x4f4>
 8026e58:	0039      	movs	r1, r7
 8026e5a:	9803      	ldr	r0, [sp, #12]
 8026e5c:	f001 f82c 	bl	8027eb8 <_Bfree>
 8026e60:	9904      	ldr	r1, [sp, #16]
 8026e62:	9803      	ldr	r0, [sp, #12]
 8026e64:	f001 f828 	bl	8027eb8 <_Bfree>
 8026e68:	e0ae      	b.n	8026fc8 <_dtoa_r+0x65c>
 8026e6a:	423d      	tst	r5, r7
 8026e6c:	d005      	beq.n	8026e7a <_dtoa_r+0x50e>
 8026e6e:	6832      	ldr	r2, [r6, #0]
 8026e70:	6873      	ldr	r3, [r6, #4]
 8026e72:	f7db fd6f 	bl	8002954 <__aeabi_dmul>
 8026e76:	003b      	movs	r3, r7
 8026e78:	3401      	adds	r4, #1
 8026e7a:	106d      	asrs	r5, r5, #1
 8026e7c:	3608      	adds	r6, #8
 8026e7e:	e75b      	b.n	8026d38 <_dtoa_r+0x3cc>
 8026e80:	9b04      	ldr	r3, [sp, #16]
 8026e82:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e86:	e77f      	b.n	8026d88 <_dtoa_r+0x41c>
 8026e88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8027074 <_dtoa_r+0x708>)
 8026e8c:	3a01      	subs	r2, #1
 8026e8e:	00d2      	lsls	r2, r2, #3
 8026e90:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026e92:	189b      	adds	r3, r3, r2
 8026e94:	681a      	ldr	r2, [r3, #0]
 8026e96:	685b      	ldr	r3, [r3, #4]
 8026e98:	2900      	cmp	r1, #0
 8026e9a:	d04c      	beq.n	8026f36 <_dtoa_r+0x5ca>
 8026e9c:	2000      	movs	r0, #0
 8026e9e:	497c      	ldr	r1, [pc, #496]	@ (8027090 <_dtoa_r+0x724>)
 8026ea0:	f7db f91e 	bl	80020e0 <__aeabi_ddiv>
 8026ea4:	0032      	movs	r2, r6
 8026ea6:	003b      	movs	r3, r7
 8026ea8:	f7dc f83a 	bl	8002f20 <__aeabi_dsub>
 8026eac:	9a08      	ldr	r2, [sp, #32]
 8026eae:	0006      	movs	r6, r0
 8026eb0:	4694      	mov	ip, r2
 8026eb2:	000f      	movs	r7, r1
 8026eb4:	9b08      	ldr	r3, [sp, #32]
 8026eb6:	9316      	str	r3, [sp, #88]	@ 0x58
 8026eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026eba:	4463      	add	r3, ip
 8026ebc:	9311      	str	r3, [sp, #68]	@ 0x44
 8026ebe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026ec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026ec2:	f7dc fc59 	bl	8003778 <__aeabi_d2iz>
 8026ec6:	0005      	movs	r5, r0
 8026ec8:	f7dc fc92 	bl	80037f0 <__aeabi_i2d>
 8026ecc:	0002      	movs	r2, r0
 8026ece:	000b      	movs	r3, r1
 8026ed0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026ed2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026ed4:	f7dc f824 	bl	8002f20 <__aeabi_dsub>
 8026ed8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026eda:	3530      	adds	r5, #48	@ 0x30
 8026edc:	1c5c      	adds	r4, r3, #1
 8026ede:	701d      	strb	r5, [r3, #0]
 8026ee0:	0032      	movs	r2, r6
 8026ee2:	003b      	movs	r3, r7
 8026ee4:	900a      	str	r0, [sp, #40]	@ 0x28
 8026ee6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026ee8:	f7d9 fae8 	bl	80004bc <__aeabi_dcmplt>
 8026eec:	2800      	cmp	r0, #0
 8026eee:	d16b      	bne.n	8026fc8 <_dtoa_r+0x65c>
 8026ef0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026ef4:	2000      	movs	r0, #0
 8026ef6:	4961      	ldr	r1, [pc, #388]	@ (802707c <_dtoa_r+0x710>)
 8026ef8:	f7dc f812 	bl	8002f20 <__aeabi_dsub>
 8026efc:	0032      	movs	r2, r6
 8026efe:	003b      	movs	r3, r7
 8026f00:	f7d9 fadc 	bl	80004bc <__aeabi_dcmplt>
 8026f04:	2800      	cmp	r0, #0
 8026f06:	d000      	beq.n	8026f0a <_dtoa_r+0x59e>
 8026f08:	e0c6      	b.n	8027098 <_dtoa_r+0x72c>
 8026f0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f0c:	42a3      	cmp	r3, r4
 8026f0e:	d100      	bne.n	8026f12 <_dtoa_r+0x5a6>
 8026f10:	e765      	b.n	8026dde <_dtoa_r+0x472>
 8026f12:	2200      	movs	r2, #0
 8026f14:	0030      	movs	r0, r6
 8026f16:	0039      	movs	r1, r7
 8026f18:	4b59      	ldr	r3, [pc, #356]	@ (8027080 <_dtoa_r+0x714>)
 8026f1a:	f7db fd1b 	bl	8002954 <__aeabi_dmul>
 8026f1e:	2200      	movs	r2, #0
 8026f20:	0006      	movs	r6, r0
 8026f22:	000f      	movs	r7, r1
 8026f24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f28:	4b55      	ldr	r3, [pc, #340]	@ (8027080 <_dtoa_r+0x714>)
 8026f2a:	f7db fd13 	bl	8002954 <__aeabi_dmul>
 8026f2e:	9416      	str	r4, [sp, #88]	@ 0x58
 8026f30:	900a      	str	r0, [sp, #40]	@ 0x28
 8026f32:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026f34:	e7c3      	b.n	8026ebe <_dtoa_r+0x552>
 8026f36:	0030      	movs	r0, r6
 8026f38:	0039      	movs	r1, r7
 8026f3a:	f7db fd0b 	bl	8002954 <__aeabi_dmul>
 8026f3e:	9d08      	ldr	r5, [sp, #32]
 8026f40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026f42:	002b      	movs	r3, r5
 8026f44:	4694      	mov	ip, r2
 8026f46:	9016      	str	r0, [sp, #88]	@ 0x58
 8026f48:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026f4a:	4463      	add	r3, ip
 8026f4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8026f4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f52:	f7dc fc11 	bl	8003778 <__aeabi_d2iz>
 8026f56:	0004      	movs	r4, r0
 8026f58:	f7dc fc4a 	bl	80037f0 <__aeabi_i2d>
 8026f5c:	000b      	movs	r3, r1
 8026f5e:	0002      	movs	r2, r0
 8026f60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f64:	f7db ffdc 	bl	8002f20 <__aeabi_dsub>
 8026f68:	3430      	adds	r4, #48	@ 0x30
 8026f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026f6c:	702c      	strb	r4, [r5, #0]
 8026f6e:	3501      	adds	r5, #1
 8026f70:	0006      	movs	r6, r0
 8026f72:	000f      	movs	r7, r1
 8026f74:	42ab      	cmp	r3, r5
 8026f76:	d12a      	bne.n	8026fce <_dtoa_r+0x662>
 8026f78:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026f7a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026f7c:	9b08      	ldr	r3, [sp, #32]
 8026f7e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026f80:	469c      	mov	ip, r3
 8026f82:	2200      	movs	r2, #0
 8026f84:	4b42      	ldr	r3, [pc, #264]	@ (8027090 <_dtoa_r+0x724>)
 8026f86:	4464      	add	r4, ip
 8026f88:	f7da fce4 	bl	8001954 <__aeabi_dadd>
 8026f8c:	0002      	movs	r2, r0
 8026f8e:	000b      	movs	r3, r1
 8026f90:	0030      	movs	r0, r6
 8026f92:	0039      	movs	r1, r7
 8026f94:	f7d9 faa6 	bl	80004e4 <__aeabi_dcmpgt>
 8026f98:	2800      	cmp	r0, #0
 8026f9a:	d000      	beq.n	8026f9e <_dtoa_r+0x632>
 8026f9c:	e07c      	b.n	8027098 <_dtoa_r+0x72c>
 8026f9e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026fa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026fa2:	2000      	movs	r0, #0
 8026fa4:	493a      	ldr	r1, [pc, #232]	@ (8027090 <_dtoa_r+0x724>)
 8026fa6:	f7db ffbb 	bl	8002f20 <__aeabi_dsub>
 8026faa:	0002      	movs	r2, r0
 8026fac:	000b      	movs	r3, r1
 8026fae:	0030      	movs	r0, r6
 8026fb0:	0039      	movs	r1, r7
 8026fb2:	f7d9 fa83 	bl	80004bc <__aeabi_dcmplt>
 8026fb6:	2800      	cmp	r0, #0
 8026fb8:	d100      	bne.n	8026fbc <_dtoa_r+0x650>
 8026fba:	e710      	b.n	8026dde <_dtoa_r+0x472>
 8026fbc:	0023      	movs	r3, r4
 8026fbe:	3c01      	subs	r4, #1
 8026fc0:	7822      	ldrb	r2, [r4, #0]
 8026fc2:	2a30      	cmp	r2, #48	@ 0x30
 8026fc4:	d0fa      	beq.n	8026fbc <_dtoa_r+0x650>
 8026fc6:	001c      	movs	r4, r3
 8026fc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026fca:	9304      	str	r3, [sp, #16]
 8026fcc:	e042      	b.n	8027054 <_dtoa_r+0x6e8>
 8026fce:	2200      	movs	r2, #0
 8026fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8027080 <_dtoa_r+0x714>)
 8026fd2:	f7db fcbf 	bl	8002954 <__aeabi_dmul>
 8026fd6:	900a      	str	r0, [sp, #40]	@ 0x28
 8026fd8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026fda:	e7b8      	b.n	8026f4e <_dtoa_r+0x5e2>
 8026fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026fde:	9d08      	ldr	r5, [sp, #32]
 8026fe0:	3b01      	subs	r3, #1
 8026fe2:	195b      	adds	r3, r3, r5
 8026fe4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026fe6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8026fea:	9a06      	ldr	r2, [sp, #24]
 8026fec:	9b07      	ldr	r3, [sp, #28]
 8026fee:	0030      	movs	r0, r6
 8026ff0:	0039      	movs	r1, r7
 8026ff2:	f7db f875 	bl	80020e0 <__aeabi_ddiv>
 8026ff6:	f7dc fbbf 	bl	8003778 <__aeabi_d2iz>
 8026ffa:	9009      	str	r0, [sp, #36]	@ 0x24
 8026ffc:	f7dc fbf8 	bl	80037f0 <__aeabi_i2d>
 8027000:	9a06      	ldr	r2, [sp, #24]
 8027002:	9b07      	ldr	r3, [sp, #28]
 8027004:	f7db fca6 	bl	8002954 <__aeabi_dmul>
 8027008:	0002      	movs	r2, r0
 802700a:	000b      	movs	r3, r1
 802700c:	0030      	movs	r0, r6
 802700e:	0039      	movs	r1, r7
 8027010:	f7db ff86 	bl	8002f20 <__aeabi_dsub>
 8027014:	002b      	movs	r3, r5
 8027016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027018:	3501      	adds	r5, #1
 802701a:	3230      	adds	r2, #48	@ 0x30
 802701c:	701a      	strb	r2, [r3, #0]
 802701e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027020:	002c      	movs	r4, r5
 8027022:	429a      	cmp	r2, r3
 8027024:	d14b      	bne.n	80270be <_dtoa_r+0x752>
 8027026:	0002      	movs	r2, r0
 8027028:	000b      	movs	r3, r1
 802702a:	f7da fc93 	bl	8001954 <__aeabi_dadd>
 802702e:	9a06      	ldr	r2, [sp, #24]
 8027030:	9b07      	ldr	r3, [sp, #28]
 8027032:	0006      	movs	r6, r0
 8027034:	000f      	movs	r7, r1
 8027036:	f7d9 fa55 	bl	80004e4 <__aeabi_dcmpgt>
 802703a:	2800      	cmp	r0, #0
 802703c:	d12a      	bne.n	8027094 <_dtoa_r+0x728>
 802703e:	9a06      	ldr	r2, [sp, #24]
 8027040:	9b07      	ldr	r3, [sp, #28]
 8027042:	0030      	movs	r0, r6
 8027044:	0039      	movs	r1, r7
 8027046:	f7d9 fa33 	bl	80004b0 <__aeabi_dcmpeq>
 802704a:	2800      	cmp	r0, #0
 802704c:	d002      	beq.n	8027054 <_dtoa_r+0x6e8>
 802704e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027050:	07dd      	lsls	r5, r3, #31
 8027052:	d41f      	bmi.n	8027094 <_dtoa_r+0x728>
 8027054:	9905      	ldr	r1, [sp, #20]
 8027056:	9803      	ldr	r0, [sp, #12]
 8027058:	f000 ff2e 	bl	8027eb8 <_Bfree>
 802705c:	2300      	movs	r3, #0
 802705e:	7023      	strb	r3, [r4, #0]
 8027060:	9b04      	ldr	r3, [sp, #16]
 8027062:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8027064:	3301      	adds	r3, #1
 8027066:	6013      	str	r3, [r2, #0]
 8027068:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802706a:	2b00      	cmp	r3, #0
 802706c:	d100      	bne.n	8027070 <_dtoa_r+0x704>
 802706e:	e4c7      	b.n	8026a00 <_dtoa_r+0x94>
 8027070:	601c      	str	r4, [r3, #0]
 8027072:	e4c5      	b.n	8026a00 <_dtoa_r+0x94>
 8027074:	0802ef20 	.word	0x0802ef20
 8027078:	0802eef8 	.word	0x0802eef8
 802707c:	3ff00000 	.word	0x3ff00000
 8027080:	40240000 	.word	0x40240000
 8027084:	401c0000 	.word	0x401c0000
 8027088:	fcc00000 	.word	0xfcc00000
 802708c:	40140000 	.word	0x40140000
 8027090:	3fe00000 	.word	0x3fe00000
 8027094:	9b04      	ldr	r3, [sp, #16]
 8027096:	930c      	str	r3, [sp, #48]	@ 0x30
 8027098:	0023      	movs	r3, r4
 802709a:	001c      	movs	r4, r3
 802709c:	3b01      	subs	r3, #1
 802709e:	781a      	ldrb	r2, [r3, #0]
 80270a0:	2a39      	cmp	r2, #57	@ 0x39
 80270a2:	d108      	bne.n	80270b6 <_dtoa_r+0x74a>
 80270a4:	9a08      	ldr	r2, [sp, #32]
 80270a6:	429a      	cmp	r2, r3
 80270a8:	d1f7      	bne.n	802709a <_dtoa_r+0x72e>
 80270aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80270ac:	9908      	ldr	r1, [sp, #32]
 80270ae:	3201      	adds	r2, #1
 80270b0:	920c      	str	r2, [sp, #48]	@ 0x30
 80270b2:	2230      	movs	r2, #48	@ 0x30
 80270b4:	700a      	strb	r2, [r1, #0]
 80270b6:	781a      	ldrb	r2, [r3, #0]
 80270b8:	3201      	adds	r2, #1
 80270ba:	701a      	strb	r2, [r3, #0]
 80270bc:	e784      	b.n	8026fc8 <_dtoa_r+0x65c>
 80270be:	2200      	movs	r2, #0
 80270c0:	4bc6      	ldr	r3, [pc, #792]	@ (80273dc <_dtoa_r+0xa70>)
 80270c2:	f7db fc47 	bl	8002954 <__aeabi_dmul>
 80270c6:	2200      	movs	r2, #0
 80270c8:	2300      	movs	r3, #0
 80270ca:	0006      	movs	r6, r0
 80270cc:	000f      	movs	r7, r1
 80270ce:	f7d9 f9ef 	bl	80004b0 <__aeabi_dcmpeq>
 80270d2:	2800      	cmp	r0, #0
 80270d4:	d089      	beq.n	8026fea <_dtoa_r+0x67e>
 80270d6:	e7bd      	b.n	8027054 <_dtoa_r+0x6e8>
 80270d8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80270da:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80270dc:	9c06      	ldr	r4, [sp, #24]
 80270de:	2f00      	cmp	r7, #0
 80270e0:	d014      	beq.n	802710c <_dtoa_r+0x7a0>
 80270e2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80270e4:	2a01      	cmp	r2, #1
 80270e6:	dd00      	ble.n	80270ea <_dtoa_r+0x77e>
 80270e8:	e0e4      	b.n	80272b4 <_dtoa_r+0x948>
 80270ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80270ec:	2a00      	cmp	r2, #0
 80270ee:	d100      	bne.n	80270f2 <_dtoa_r+0x786>
 80270f0:	e0da      	b.n	80272a8 <_dtoa_r+0x93c>
 80270f2:	4abb      	ldr	r2, [pc, #748]	@ (80273e0 <_dtoa_r+0xa74>)
 80270f4:	189b      	adds	r3, r3, r2
 80270f6:	9a06      	ldr	r2, [sp, #24]
 80270f8:	2101      	movs	r1, #1
 80270fa:	18d2      	adds	r2, r2, r3
 80270fc:	9206      	str	r2, [sp, #24]
 80270fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027100:	9803      	ldr	r0, [sp, #12]
 8027102:	18d3      	adds	r3, r2, r3
 8027104:	930d      	str	r3, [sp, #52]	@ 0x34
 8027106:	f000 ffdb 	bl	80280c0 <__i2b>
 802710a:	0007      	movs	r7, r0
 802710c:	2c00      	cmp	r4, #0
 802710e:	d00e      	beq.n	802712e <_dtoa_r+0x7c2>
 8027110:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027112:	2b00      	cmp	r3, #0
 8027114:	dd0b      	ble.n	802712e <_dtoa_r+0x7c2>
 8027116:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027118:	0023      	movs	r3, r4
 802711a:	4294      	cmp	r4, r2
 802711c:	dd00      	ble.n	8027120 <_dtoa_r+0x7b4>
 802711e:	0013      	movs	r3, r2
 8027120:	9a06      	ldr	r2, [sp, #24]
 8027122:	1ae4      	subs	r4, r4, r3
 8027124:	1ad2      	subs	r2, r2, r3
 8027126:	9206      	str	r2, [sp, #24]
 8027128:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802712a:	1ad3      	subs	r3, r2, r3
 802712c:	930d      	str	r3, [sp, #52]	@ 0x34
 802712e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027130:	2b00      	cmp	r3, #0
 8027132:	d021      	beq.n	8027178 <_dtoa_r+0x80c>
 8027134:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027136:	2b00      	cmp	r3, #0
 8027138:	d100      	bne.n	802713c <_dtoa_r+0x7d0>
 802713a:	e0d3      	b.n	80272e4 <_dtoa_r+0x978>
 802713c:	9e05      	ldr	r6, [sp, #20]
 802713e:	2d00      	cmp	r5, #0
 8027140:	d014      	beq.n	802716c <_dtoa_r+0x800>
 8027142:	0039      	movs	r1, r7
 8027144:	002a      	movs	r2, r5
 8027146:	9803      	ldr	r0, [sp, #12]
 8027148:	f001 f87c 	bl	8028244 <__pow5mult>
 802714c:	9a05      	ldr	r2, [sp, #20]
 802714e:	0001      	movs	r1, r0
 8027150:	0007      	movs	r7, r0
 8027152:	9803      	ldr	r0, [sp, #12]
 8027154:	f000 ffcc 	bl	80280f0 <__multiply>
 8027158:	0006      	movs	r6, r0
 802715a:	9905      	ldr	r1, [sp, #20]
 802715c:	9803      	ldr	r0, [sp, #12]
 802715e:	f000 feab 	bl	8027eb8 <_Bfree>
 8027162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027164:	9605      	str	r6, [sp, #20]
 8027166:	1b5b      	subs	r3, r3, r5
 8027168:	930f      	str	r3, [sp, #60]	@ 0x3c
 802716a:	d005      	beq.n	8027178 <_dtoa_r+0x80c>
 802716c:	0031      	movs	r1, r6
 802716e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027170:	9803      	ldr	r0, [sp, #12]
 8027172:	f001 f867 	bl	8028244 <__pow5mult>
 8027176:	9005      	str	r0, [sp, #20]
 8027178:	2101      	movs	r1, #1
 802717a:	9803      	ldr	r0, [sp, #12]
 802717c:	f000 ffa0 	bl	80280c0 <__i2b>
 8027180:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027182:	0006      	movs	r6, r0
 8027184:	2b00      	cmp	r3, #0
 8027186:	d100      	bne.n	802718a <_dtoa_r+0x81e>
 8027188:	e1bc      	b.n	8027504 <_dtoa_r+0xb98>
 802718a:	001a      	movs	r2, r3
 802718c:	0001      	movs	r1, r0
 802718e:	9803      	ldr	r0, [sp, #12]
 8027190:	f001 f858 	bl	8028244 <__pow5mult>
 8027194:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027196:	0006      	movs	r6, r0
 8027198:	2500      	movs	r5, #0
 802719a:	2b01      	cmp	r3, #1
 802719c:	dc16      	bgt.n	80271cc <_dtoa_r+0x860>
 802719e:	2500      	movs	r5, #0
 80271a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80271a2:	42ab      	cmp	r3, r5
 80271a4:	d10e      	bne.n	80271c4 <_dtoa_r+0x858>
 80271a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80271a8:	031b      	lsls	r3, r3, #12
 80271aa:	42ab      	cmp	r3, r5
 80271ac:	d10a      	bne.n	80271c4 <_dtoa_r+0x858>
 80271ae:	4b8d      	ldr	r3, [pc, #564]	@ (80273e4 <_dtoa_r+0xa78>)
 80271b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80271b2:	4213      	tst	r3, r2
 80271b4:	d006      	beq.n	80271c4 <_dtoa_r+0x858>
 80271b6:	9b06      	ldr	r3, [sp, #24]
 80271b8:	3501      	adds	r5, #1
 80271ba:	3301      	adds	r3, #1
 80271bc:	9306      	str	r3, [sp, #24]
 80271be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271c0:	3301      	adds	r3, #1
 80271c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80271c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80271c6:	2001      	movs	r0, #1
 80271c8:	2b00      	cmp	r3, #0
 80271ca:	d008      	beq.n	80271de <_dtoa_r+0x872>
 80271cc:	6933      	ldr	r3, [r6, #16]
 80271ce:	3303      	adds	r3, #3
 80271d0:	009b      	lsls	r3, r3, #2
 80271d2:	18f3      	adds	r3, r6, r3
 80271d4:	6858      	ldr	r0, [r3, #4]
 80271d6:	f000 ff23 	bl	8028020 <__hi0bits>
 80271da:	2320      	movs	r3, #32
 80271dc:	1a18      	subs	r0, r3, r0
 80271de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271e0:	1818      	adds	r0, r3, r0
 80271e2:	0002      	movs	r2, r0
 80271e4:	231f      	movs	r3, #31
 80271e6:	401a      	ands	r2, r3
 80271e8:	4218      	tst	r0, r3
 80271ea:	d100      	bne.n	80271ee <_dtoa_r+0x882>
 80271ec:	e081      	b.n	80272f2 <_dtoa_r+0x986>
 80271ee:	3301      	adds	r3, #1
 80271f0:	1a9b      	subs	r3, r3, r2
 80271f2:	2b04      	cmp	r3, #4
 80271f4:	dd79      	ble.n	80272ea <_dtoa_r+0x97e>
 80271f6:	231c      	movs	r3, #28
 80271f8:	1a9b      	subs	r3, r3, r2
 80271fa:	9a06      	ldr	r2, [sp, #24]
 80271fc:	18e4      	adds	r4, r4, r3
 80271fe:	18d2      	adds	r2, r2, r3
 8027200:	9206      	str	r2, [sp, #24]
 8027202:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027204:	18d3      	adds	r3, r2, r3
 8027206:	930d      	str	r3, [sp, #52]	@ 0x34
 8027208:	9b06      	ldr	r3, [sp, #24]
 802720a:	2b00      	cmp	r3, #0
 802720c:	dd05      	ble.n	802721a <_dtoa_r+0x8ae>
 802720e:	001a      	movs	r2, r3
 8027210:	9905      	ldr	r1, [sp, #20]
 8027212:	9803      	ldr	r0, [sp, #12]
 8027214:	f001 f872 	bl	80282fc <__lshift>
 8027218:	9005      	str	r0, [sp, #20]
 802721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802721c:	2b00      	cmp	r3, #0
 802721e:	dd05      	ble.n	802722c <_dtoa_r+0x8c0>
 8027220:	0031      	movs	r1, r6
 8027222:	001a      	movs	r2, r3
 8027224:	9803      	ldr	r0, [sp, #12]
 8027226:	f001 f869 	bl	80282fc <__lshift>
 802722a:	0006      	movs	r6, r0
 802722c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802722e:	2b00      	cmp	r3, #0
 8027230:	d061      	beq.n	80272f6 <_dtoa_r+0x98a>
 8027232:	0031      	movs	r1, r6
 8027234:	9805      	ldr	r0, [sp, #20]
 8027236:	f001 f8cd 	bl	80283d4 <__mcmp>
 802723a:	2800      	cmp	r0, #0
 802723c:	da5b      	bge.n	80272f6 <_dtoa_r+0x98a>
 802723e:	9b04      	ldr	r3, [sp, #16]
 8027240:	220a      	movs	r2, #10
 8027242:	3b01      	subs	r3, #1
 8027244:	930c      	str	r3, [sp, #48]	@ 0x30
 8027246:	9905      	ldr	r1, [sp, #20]
 8027248:	2300      	movs	r3, #0
 802724a:	9803      	ldr	r0, [sp, #12]
 802724c:	f000 fe58 	bl	8027f00 <__multadd>
 8027250:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027252:	9005      	str	r0, [sp, #20]
 8027254:	2b00      	cmp	r3, #0
 8027256:	d100      	bne.n	802725a <_dtoa_r+0x8ee>
 8027258:	e15b      	b.n	8027512 <_dtoa_r+0xba6>
 802725a:	2300      	movs	r3, #0
 802725c:	0039      	movs	r1, r7
 802725e:	220a      	movs	r2, #10
 8027260:	9803      	ldr	r0, [sp, #12]
 8027262:	f000 fe4d 	bl	8027f00 <__multadd>
 8027266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027268:	0007      	movs	r7, r0
 802726a:	2b00      	cmp	r3, #0
 802726c:	dc4d      	bgt.n	802730a <_dtoa_r+0x99e>
 802726e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027270:	2b02      	cmp	r3, #2
 8027272:	dd46      	ble.n	8027302 <_dtoa_r+0x996>
 8027274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027276:	2b00      	cmp	r3, #0
 8027278:	d000      	beq.n	802727c <_dtoa_r+0x910>
 802727a:	e5db      	b.n	8026e34 <_dtoa_r+0x4c8>
 802727c:	0031      	movs	r1, r6
 802727e:	2205      	movs	r2, #5
 8027280:	9803      	ldr	r0, [sp, #12]
 8027282:	f000 fe3d 	bl	8027f00 <__multadd>
 8027286:	0006      	movs	r6, r0
 8027288:	0001      	movs	r1, r0
 802728a:	9805      	ldr	r0, [sp, #20]
 802728c:	f001 f8a2 	bl	80283d4 <__mcmp>
 8027290:	2800      	cmp	r0, #0
 8027292:	dc00      	bgt.n	8027296 <_dtoa_r+0x92a>
 8027294:	e5ce      	b.n	8026e34 <_dtoa_r+0x4c8>
 8027296:	9b08      	ldr	r3, [sp, #32]
 8027298:	9a08      	ldr	r2, [sp, #32]
 802729a:	1c5c      	adds	r4, r3, #1
 802729c:	2331      	movs	r3, #49	@ 0x31
 802729e:	7013      	strb	r3, [r2, #0]
 80272a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80272a2:	3301      	adds	r3, #1
 80272a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80272a6:	e5c9      	b.n	8026e3c <_dtoa_r+0x4d0>
 80272a8:	2336      	movs	r3, #54	@ 0x36
 80272aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80272ac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80272ae:	1a9b      	subs	r3, r3, r2
 80272b0:	9c06      	ldr	r4, [sp, #24]
 80272b2:	e720      	b.n	80270f6 <_dtoa_r+0x78a>
 80272b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272b6:	1e5d      	subs	r5, r3, #1
 80272b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272ba:	42ab      	cmp	r3, r5
 80272bc:	db08      	blt.n	80272d0 <_dtoa_r+0x964>
 80272be:	1b5d      	subs	r5, r3, r5
 80272c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272c2:	2b00      	cmp	r3, #0
 80272c4:	daf4      	bge.n	80272b0 <_dtoa_r+0x944>
 80272c6:	9b06      	ldr	r3, [sp, #24]
 80272c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80272ca:	1a9c      	subs	r4, r3, r2
 80272cc:	2300      	movs	r3, #0
 80272ce:	e712      	b.n	80270f6 <_dtoa_r+0x78a>
 80272d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272d2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80272d4:	1aeb      	subs	r3, r5, r3
 80272d6:	18d3      	adds	r3, r2, r3
 80272d8:	9314      	str	r3, [sp, #80]	@ 0x50
 80272da:	950f      	str	r5, [sp, #60]	@ 0x3c
 80272dc:	9c06      	ldr	r4, [sp, #24]
 80272de:	2500      	movs	r5, #0
 80272e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272e2:	e708      	b.n	80270f6 <_dtoa_r+0x78a>
 80272e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80272e6:	9905      	ldr	r1, [sp, #20]
 80272e8:	e742      	b.n	8027170 <_dtoa_r+0x804>
 80272ea:	2b04      	cmp	r3, #4
 80272ec:	d08c      	beq.n	8027208 <_dtoa_r+0x89c>
 80272ee:	331c      	adds	r3, #28
 80272f0:	e783      	b.n	80271fa <_dtoa_r+0x88e>
 80272f2:	0013      	movs	r3, r2
 80272f4:	e7fb      	b.n	80272ee <_dtoa_r+0x982>
 80272f6:	9b04      	ldr	r3, [sp, #16]
 80272f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80272fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80272fe:	2b00      	cmp	r3, #0
 8027300:	ddb5      	ble.n	802726e <_dtoa_r+0x902>
 8027302:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027304:	2b00      	cmp	r3, #0
 8027306:	d100      	bne.n	802730a <_dtoa_r+0x99e>
 8027308:	e107      	b.n	802751a <_dtoa_r+0xbae>
 802730a:	2c00      	cmp	r4, #0
 802730c:	dd05      	ble.n	802731a <_dtoa_r+0x9ae>
 802730e:	0039      	movs	r1, r7
 8027310:	0022      	movs	r2, r4
 8027312:	9803      	ldr	r0, [sp, #12]
 8027314:	f000 fff2 	bl	80282fc <__lshift>
 8027318:	0007      	movs	r7, r0
 802731a:	9704      	str	r7, [sp, #16]
 802731c:	2d00      	cmp	r5, #0
 802731e:	d020      	beq.n	8027362 <_dtoa_r+0x9f6>
 8027320:	6879      	ldr	r1, [r7, #4]
 8027322:	9803      	ldr	r0, [sp, #12]
 8027324:	f000 fd84 	bl	8027e30 <_Balloc>
 8027328:	1e04      	subs	r4, r0, #0
 802732a:	d10c      	bne.n	8027346 <_dtoa_r+0x9da>
 802732c:	0022      	movs	r2, r4
 802732e:	4b2e      	ldr	r3, [pc, #184]	@ (80273e8 <_dtoa_r+0xa7c>)
 8027330:	482e      	ldr	r0, [pc, #184]	@ (80273ec <_dtoa_r+0xa80>)
 8027332:	492f      	ldr	r1, [pc, #188]	@ (80273f0 <_dtoa_r+0xa84>)
 8027334:	f7ff fb2f 	bl	8026996 <_dtoa_r+0x2a>
 8027338:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802733a:	0037      	movs	r7, r6
 802733c:	e7ab      	b.n	8027296 <_dtoa_r+0x92a>
 802733e:	9b04      	ldr	r3, [sp, #16]
 8027340:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8027342:	930c      	str	r3, [sp, #48]	@ 0x30
 8027344:	e7f9      	b.n	802733a <_dtoa_r+0x9ce>
 8027346:	0039      	movs	r1, r7
 8027348:	693a      	ldr	r2, [r7, #16]
 802734a:	310c      	adds	r1, #12
 802734c:	3202      	adds	r2, #2
 802734e:	0092      	lsls	r2, r2, #2
 8027350:	300c      	adds	r0, #12
 8027352:	f7ff fa75 	bl	8026840 <memcpy>
 8027356:	2201      	movs	r2, #1
 8027358:	0021      	movs	r1, r4
 802735a:	9803      	ldr	r0, [sp, #12]
 802735c:	f000 ffce 	bl	80282fc <__lshift>
 8027360:	9004      	str	r0, [sp, #16]
 8027362:	9b08      	ldr	r3, [sp, #32]
 8027364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027366:	9306      	str	r3, [sp, #24]
 8027368:	3b01      	subs	r3, #1
 802736a:	189b      	adds	r3, r3, r2
 802736c:	2201      	movs	r2, #1
 802736e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027372:	4013      	ands	r3, r2
 8027374:	930e      	str	r3, [sp, #56]	@ 0x38
 8027376:	0031      	movs	r1, r6
 8027378:	9805      	ldr	r0, [sp, #20]
 802737a:	f7ff fa71 	bl	8026860 <quorem>
 802737e:	0039      	movs	r1, r7
 8027380:	0005      	movs	r5, r0
 8027382:	900a      	str	r0, [sp, #40]	@ 0x28
 8027384:	9805      	ldr	r0, [sp, #20]
 8027386:	f001 f825 	bl	80283d4 <__mcmp>
 802738a:	9a04      	ldr	r2, [sp, #16]
 802738c:	900d      	str	r0, [sp, #52]	@ 0x34
 802738e:	0031      	movs	r1, r6
 8027390:	9803      	ldr	r0, [sp, #12]
 8027392:	f001 f83b 	bl	802840c <__mdiff>
 8027396:	2201      	movs	r2, #1
 8027398:	68c3      	ldr	r3, [r0, #12]
 802739a:	0004      	movs	r4, r0
 802739c:	3530      	adds	r5, #48	@ 0x30
 802739e:	9209      	str	r2, [sp, #36]	@ 0x24
 80273a0:	2b00      	cmp	r3, #0
 80273a2:	d104      	bne.n	80273ae <_dtoa_r+0xa42>
 80273a4:	0001      	movs	r1, r0
 80273a6:	9805      	ldr	r0, [sp, #20]
 80273a8:	f001 f814 	bl	80283d4 <__mcmp>
 80273ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80273ae:	0021      	movs	r1, r4
 80273b0:	9803      	ldr	r0, [sp, #12]
 80273b2:	f000 fd81 	bl	8027eb8 <_Bfree>
 80273b6:	9b06      	ldr	r3, [sp, #24]
 80273b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80273ba:	1c5c      	adds	r4, r3, #1
 80273bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273be:	4313      	orrs	r3, r2
 80273c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80273c2:	4313      	orrs	r3, r2
 80273c4:	d116      	bne.n	80273f4 <_dtoa_r+0xa88>
 80273c6:	2d39      	cmp	r5, #57	@ 0x39
 80273c8:	d02f      	beq.n	802742a <_dtoa_r+0xabe>
 80273ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	dd01      	ble.n	80273d4 <_dtoa_r+0xa68>
 80273d0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80273d2:	3531      	adds	r5, #49	@ 0x31
 80273d4:	9b06      	ldr	r3, [sp, #24]
 80273d6:	701d      	strb	r5, [r3, #0]
 80273d8:	e532      	b.n	8026e40 <_dtoa_r+0x4d4>
 80273da:	46c0      	nop			@ (mov r8, r8)
 80273dc:	40240000 	.word	0x40240000
 80273e0:	00000433 	.word	0x00000433
 80273e4:	7ff00000 	.word	0x7ff00000
 80273e8:	0802ec7e 	.word	0x0802ec7e
 80273ec:	0802ec26 	.word	0x0802ec26
 80273f0:	000002ef 	.word	0x000002ef
 80273f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80273f6:	2b00      	cmp	r3, #0
 80273f8:	db04      	blt.n	8027404 <_dtoa_r+0xa98>
 80273fa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80273fc:	4313      	orrs	r3, r2
 80273fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027400:	4313      	orrs	r3, r2
 8027402:	d11e      	bne.n	8027442 <_dtoa_r+0xad6>
 8027404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027406:	2b00      	cmp	r3, #0
 8027408:	dde4      	ble.n	80273d4 <_dtoa_r+0xa68>
 802740a:	9905      	ldr	r1, [sp, #20]
 802740c:	2201      	movs	r2, #1
 802740e:	9803      	ldr	r0, [sp, #12]
 8027410:	f000 ff74 	bl	80282fc <__lshift>
 8027414:	0031      	movs	r1, r6
 8027416:	9005      	str	r0, [sp, #20]
 8027418:	f000 ffdc 	bl	80283d4 <__mcmp>
 802741c:	2800      	cmp	r0, #0
 802741e:	dc02      	bgt.n	8027426 <_dtoa_r+0xaba>
 8027420:	d1d8      	bne.n	80273d4 <_dtoa_r+0xa68>
 8027422:	07eb      	lsls	r3, r5, #31
 8027424:	d5d6      	bpl.n	80273d4 <_dtoa_r+0xa68>
 8027426:	2d39      	cmp	r5, #57	@ 0x39
 8027428:	d1d2      	bne.n	80273d0 <_dtoa_r+0xa64>
 802742a:	2339      	movs	r3, #57	@ 0x39
 802742c:	9a06      	ldr	r2, [sp, #24]
 802742e:	7013      	strb	r3, [r2, #0]
 8027430:	0023      	movs	r3, r4
 8027432:	001c      	movs	r4, r3
 8027434:	3b01      	subs	r3, #1
 8027436:	781a      	ldrb	r2, [r3, #0]
 8027438:	2a39      	cmp	r2, #57	@ 0x39
 802743a:	d050      	beq.n	80274de <_dtoa_r+0xb72>
 802743c:	3201      	adds	r2, #1
 802743e:	701a      	strb	r2, [r3, #0]
 8027440:	e4fe      	b.n	8026e40 <_dtoa_r+0x4d4>
 8027442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027444:	2b00      	cmp	r3, #0
 8027446:	dd03      	ble.n	8027450 <_dtoa_r+0xae4>
 8027448:	2d39      	cmp	r5, #57	@ 0x39
 802744a:	d0ee      	beq.n	802742a <_dtoa_r+0xabe>
 802744c:	3501      	adds	r5, #1
 802744e:	e7c1      	b.n	80273d4 <_dtoa_r+0xa68>
 8027450:	9b06      	ldr	r3, [sp, #24]
 8027452:	9a06      	ldr	r2, [sp, #24]
 8027454:	701d      	strb	r5, [r3, #0]
 8027456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027458:	4293      	cmp	r3, r2
 802745a:	d02b      	beq.n	80274b4 <_dtoa_r+0xb48>
 802745c:	2300      	movs	r3, #0
 802745e:	220a      	movs	r2, #10
 8027460:	9905      	ldr	r1, [sp, #20]
 8027462:	9803      	ldr	r0, [sp, #12]
 8027464:	f000 fd4c 	bl	8027f00 <__multadd>
 8027468:	9b04      	ldr	r3, [sp, #16]
 802746a:	9005      	str	r0, [sp, #20]
 802746c:	429f      	cmp	r7, r3
 802746e:	d109      	bne.n	8027484 <_dtoa_r+0xb18>
 8027470:	0039      	movs	r1, r7
 8027472:	2300      	movs	r3, #0
 8027474:	220a      	movs	r2, #10
 8027476:	9803      	ldr	r0, [sp, #12]
 8027478:	f000 fd42 	bl	8027f00 <__multadd>
 802747c:	0007      	movs	r7, r0
 802747e:	9004      	str	r0, [sp, #16]
 8027480:	9406      	str	r4, [sp, #24]
 8027482:	e778      	b.n	8027376 <_dtoa_r+0xa0a>
 8027484:	0039      	movs	r1, r7
 8027486:	2300      	movs	r3, #0
 8027488:	220a      	movs	r2, #10
 802748a:	9803      	ldr	r0, [sp, #12]
 802748c:	f000 fd38 	bl	8027f00 <__multadd>
 8027490:	2300      	movs	r3, #0
 8027492:	0007      	movs	r7, r0
 8027494:	220a      	movs	r2, #10
 8027496:	9904      	ldr	r1, [sp, #16]
 8027498:	9803      	ldr	r0, [sp, #12]
 802749a:	f000 fd31 	bl	8027f00 <__multadd>
 802749e:	9004      	str	r0, [sp, #16]
 80274a0:	e7ee      	b.n	8027480 <_dtoa_r+0xb14>
 80274a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80274a4:	2401      	movs	r4, #1
 80274a6:	2b00      	cmp	r3, #0
 80274a8:	dd00      	ble.n	80274ac <_dtoa_r+0xb40>
 80274aa:	001c      	movs	r4, r3
 80274ac:	9704      	str	r7, [sp, #16]
 80274ae:	2700      	movs	r7, #0
 80274b0:	9b08      	ldr	r3, [sp, #32]
 80274b2:	191c      	adds	r4, r3, r4
 80274b4:	9905      	ldr	r1, [sp, #20]
 80274b6:	2201      	movs	r2, #1
 80274b8:	9803      	ldr	r0, [sp, #12]
 80274ba:	f000 ff1f 	bl	80282fc <__lshift>
 80274be:	0031      	movs	r1, r6
 80274c0:	9005      	str	r0, [sp, #20]
 80274c2:	f000 ff87 	bl	80283d4 <__mcmp>
 80274c6:	2800      	cmp	r0, #0
 80274c8:	dcb2      	bgt.n	8027430 <_dtoa_r+0xac4>
 80274ca:	d101      	bne.n	80274d0 <_dtoa_r+0xb64>
 80274cc:	07ed      	lsls	r5, r5, #31
 80274ce:	d4af      	bmi.n	8027430 <_dtoa_r+0xac4>
 80274d0:	0023      	movs	r3, r4
 80274d2:	001c      	movs	r4, r3
 80274d4:	3b01      	subs	r3, #1
 80274d6:	781a      	ldrb	r2, [r3, #0]
 80274d8:	2a30      	cmp	r2, #48	@ 0x30
 80274da:	d0fa      	beq.n	80274d2 <_dtoa_r+0xb66>
 80274dc:	e4b0      	b.n	8026e40 <_dtoa_r+0x4d4>
 80274de:	9a08      	ldr	r2, [sp, #32]
 80274e0:	429a      	cmp	r2, r3
 80274e2:	d1a6      	bne.n	8027432 <_dtoa_r+0xac6>
 80274e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80274e6:	3301      	adds	r3, #1
 80274e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80274ea:	2331      	movs	r3, #49	@ 0x31
 80274ec:	7013      	strb	r3, [r2, #0]
 80274ee:	e4a7      	b.n	8026e40 <_dtoa_r+0x4d4>
 80274f0:	4b14      	ldr	r3, [pc, #80]	@ (8027544 <_dtoa_r+0xbd8>)
 80274f2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80274f4:	9308      	str	r3, [sp, #32]
 80274f6:	4b14      	ldr	r3, [pc, #80]	@ (8027548 <_dtoa_r+0xbdc>)
 80274f8:	2a00      	cmp	r2, #0
 80274fa:	d001      	beq.n	8027500 <_dtoa_r+0xb94>
 80274fc:	f7ff fa7e 	bl	80269fc <_dtoa_r+0x90>
 8027500:	f7ff fa7e 	bl	8026a00 <_dtoa_r+0x94>
 8027504:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027506:	2b01      	cmp	r3, #1
 8027508:	dc00      	bgt.n	802750c <_dtoa_r+0xba0>
 802750a:	e648      	b.n	802719e <_dtoa_r+0x832>
 802750c:	2001      	movs	r0, #1
 802750e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027510:	e665      	b.n	80271de <_dtoa_r+0x872>
 8027512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027514:	2b00      	cmp	r3, #0
 8027516:	dc00      	bgt.n	802751a <_dtoa_r+0xbae>
 8027518:	e6a9      	b.n	802726e <_dtoa_r+0x902>
 802751a:	2400      	movs	r4, #0
 802751c:	0031      	movs	r1, r6
 802751e:	9805      	ldr	r0, [sp, #20]
 8027520:	f7ff f99e 	bl	8026860 <quorem>
 8027524:	9b08      	ldr	r3, [sp, #32]
 8027526:	3030      	adds	r0, #48	@ 0x30
 8027528:	5518      	strb	r0, [r3, r4]
 802752a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802752c:	3401      	adds	r4, #1
 802752e:	0005      	movs	r5, r0
 8027530:	42a3      	cmp	r3, r4
 8027532:	ddb6      	ble.n	80274a2 <_dtoa_r+0xb36>
 8027534:	2300      	movs	r3, #0
 8027536:	220a      	movs	r2, #10
 8027538:	9905      	ldr	r1, [sp, #20]
 802753a:	9803      	ldr	r0, [sp, #12]
 802753c:	f000 fce0 	bl	8027f00 <__multadd>
 8027540:	9005      	str	r0, [sp, #20]
 8027542:	e7eb      	b.n	802751c <_dtoa_r+0xbb0>
 8027544:	0802ec02 	.word	0x0802ec02
 8027548:	0802ec0a 	.word	0x0802ec0a

0802754c <_free_r>:
 802754c:	b570      	push	{r4, r5, r6, lr}
 802754e:	0005      	movs	r5, r0
 8027550:	1e0c      	subs	r4, r1, #0
 8027552:	d010      	beq.n	8027576 <_free_r+0x2a>
 8027554:	3c04      	subs	r4, #4
 8027556:	6823      	ldr	r3, [r4, #0]
 8027558:	2b00      	cmp	r3, #0
 802755a:	da00      	bge.n	802755e <_free_r+0x12>
 802755c:	18e4      	adds	r4, r4, r3
 802755e:	0028      	movs	r0, r5
 8027560:	f000 fc56 	bl	8027e10 <__malloc_lock>
 8027564:	4a1d      	ldr	r2, [pc, #116]	@ (80275dc <_free_r+0x90>)
 8027566:	6813      	ldr	r3, [r2, #0]
 8027568:	2b00      	cmp	r3, #0
 802756a:	d105      	bne.n	8027578 <_free_r+0x2c>
 802756c:	6063      	str	r3, [r4, #4]
 802756e:	6014      	str	r4, [r2, #0]
 8027570:	0028      	movs	r0, r5
 8027572:	f000 fc55 	bl	8027e20 <__malloc_unlock>
 8027576:	bd70      	pop	{r4, r5, r6, pc}
 8027578:	42a3      	cmp	r3, r4
 802757a:	d908      	bls.n	802758e <_free_r+0x42>
 802757c:	6820      	ldr	r0, [r4, #0]
 802757e:	1821      	adds	r1, r4, r0
 8027580:	428b      	cmp	r3, r1
 8027582:	d1f3      	bne.n	802756c <_free_r+0x20>
 8027584:	6819      	ldr	r1, [r3, #0]
 8027586:	685b      	ldr	r3, [r3, #4]
 8027588:	1809      	adds	r1, r1, r0
 802758a:	6021      	str	r1, [r4, #0]
 802758c:	e7ee      	b.n	802756c <_free_r+0x20>
 802758e:	001a      	movs	r2, r3
 8027590:	685b      	ldr	r3, [r3, #4]
 8027592:	2b00      	cmp	r3, #0
 8027594:	d001      	beq.n	802759a <_free_r+0x4e>
 8027596:	42a3      	cmp	r3, r4
 8027598:	d9f9      	bls.n	802758e <_free_r+0x42>
 802759a:	6811      	ldr	r1, [r2, #0]
 802759c:	1850      	adds	r0, r2, r1
 802759e:	42a0      	cmp	r0, r4
 80275a0:	d10b      	bne.n	80275ba <_free_r+0x6e>
 80275a2:	6820      	ldr	r0, [r4, #0]
 80275a4:	1809      	adds	r1, r1, r0
 80275a6:	1850      	adds	r0, r2, r1
 80275a8:	6011      	str	r1, [r2, #0]
 80275aa:	4283      	cmp	r3, r0
 80275ac:	d1e0      	bne.n	8027570 <_free_r+0x24>
 80275ae:	6818      	ldr	r0, [r3, #0]
 80275b0:	685b      	ldr	r3, [r3, #4]
 80275b2:	1841      	adds	r1, r0, r1
 80275b4:	6011      	str	r1, [r2, #0]
 80275b6:	6053      	str	r3, [r2, #4]
 80275b8:	e7da      	b.n	8027570 <_free_r+0x24>
 80275ba:	42a0      	cmp	r0, r4
 80275bc:	d902      	bls.n	80275c4 <_free_r+0x78>
 80275be:	230c      	movs	r3, #12
 80275c0:	602b      	str	r3, [r5, #0]
 80275c2:	e7d5      	b.n	8027570 <_free_r+0x24>
 80275c4:	6820      	ldr	r0, [r4, #0]
 80275c6:	1821      	adds	r1, r4, r0
 80275c8:	428b      	cmp	r3, r1
 80275ca:	d103      	bne.n	80275d4 <_free_r+0x88>
 80275cc:	6819      	ldr	r1, [r3, #0]
 80275ce:	685b      	ldr	r3, [r3, #4]
 80275d0:	1809      	adds	r1, r1, r0
 80275d2:	6021      	str	r1, [r4, #0]
 80275d4:	6063      	str	r3, [r4, #4]
 80275d6:	6054      	str	r4, [r2, #4]
 80275d8:	e7ca      	b.n	8027570 <_free_r+0x24>
 80275da:	46c0      	nop			@ (mov r8, r8)
 80275dc:	20003914 	.word	0x20003914

080275e0 <rshift>:
 80275e0:	0002      	movs	r2, r0
 80275e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80275e4:	6904      	ldr	r4, [r0, #16]
 80275e6:	b085      	sub	sp, #20
 80275e8:	3214      	adds	r2, #20
 80275ea:	114b      	asrs	r3, r1, #5
 80275ec:	0016      	movs	r6, r2
 80275ee:	9302      	str	r3, [sp, #8]
 80275f0:	429c      	cmp	r4, r3
 80275f2:	dd31      	ble.n	8027658 <rshift+0x78>
 80275f4:	261f      	movs	r6, #31
 80275f6:	000f      	movs	r7, r1
 80275f8:	009b      	lsls	r3, r3, #2
 80275fa:	00a5      	lsls	r5, r4, #2
 80275fc:	18d3      	adds	r3, r2, r3
 80275fe:	4037      	ands	r7, r6
 8027600:	1955      	adds	r5, r2, r5
 8027602:	9300      	str	r3, [sp, #0]
 8027604:	9701      	str	r7, [sp, #4]
 8027606:	4231      	tst	r1, r6
 8027608:	d10d      	bne.n	8027626 <rshift+0x46>
 802760a:	0016      	movs	r6, r2
 802760c:	0019      	movs	r1, r3
 802760e:	428d      	cmp	r5, r1
 8027610:	d836      	bhi.n	8027680 <rshift+0xa0>
 8027612:	9b00      	ldr	r3, [sp, #0]
 8027614:	2600      	movs	r6, #0
 8027616:	3b03      	subs	r3, #3
 8027618:	429d      	cmp	r5, r3
 802761a:	d302      	bcc.n	8027622 <rshift+0x42>
 802761c:	9b02      	ldr	r3, [sp, #8]
 802761e:	1ae4      	subs	r4, r4, r3
 8027620:	00a6      	lsls	r6, r4, #2
 8027622:	1996      	adds	r6, r2, r6
 8027624:	e018      	b.n	8027658 <rshift+0x78>
 8027626:	2120      	movs	r1, #32
 8027628:	9e01      	ldr	r6, [sp, #4]
 802762a:	9f01      	ldr	r7, [sp, #4]
 802762c:	1b89      	subs	r1, r1, r6
 802762e:	9e00      	ldr	r6, [sp, #0]
 8027630:	9103      	str	r1, [sp, #12]
 8027632:	ce02      	ldmia	r6!, {r1}
 8027634:	4694      	mov	ip, r2
 8027636:	40f9      	lsrs	r1, r7
 8027638:	42b5      	cmp	r5, r6
 802763a:	d816      	bhi.n	802766a <rshift+0x8a>
 802763c:	9b00      	ldr	r3, [sp, #0]
 802763e:	2600      	movs	r6, #0
 8027640:	3301      	adds	r3, #1
 8027642:	429d      	cmp	r5, r3
 8027644:	d303      	bcc.n	802764e <rshift+0x6e>
 8027646:	9b02      	ldr	r3, [sp, #8]
 8027648:	1ae4      	subs	r4, r4, r3
 802764a:	00a6      	lsls	r6, r4, #2
 802764c:	3e04      	subs	r6, #4
 802764e:	1996      	adds	r6, r2, r6
 8027650:	6031      	str	r1, [r6, #0]
 8027652:	2900      	cmp	r1, #0
 8027654:	d000      	beq.n	8027658 <rshift+0x78>
 8027656:	3604      	adds	r6, #4
 8027658:	1ab1      	subs	r1, r6, r2
 802765a:	1089      	asrs	r1, r1, #2
 802765c:	6101      	str	r1, [r0, #16]
 802765e:	4296      	cmp	r6, r2
 8027660:	d101      	bne.n	8027666 <rshift+0x86>
 8027662:	2300      	movs	r3, #0
 8027664:	6143      	str	r3, [r0, #20]
 8027666:	b005      	add	sp, #20
 8027668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802766a:	6837      	ldr	r7, [r6, #0]
 802766c:	9b03      	ldr	r3, [sp, #12]
 802766e:	409f      	lsls	r7, r3
 8027670:	430f      	orrs	r7, r1
 8027672:	4661      	mov	r1, ip
 8027674:	c180      	stmia	r1!, {r7}
 8027676:	468c      	mov	ip, r1
 8027678:	9b01      	ldr	r3, [sp, #4]
 802767a:	ce02      	ldmia	r6!, {r1}
 802767c:	40d9      	lsrs	r1, r3
 802767e:	e7db      	b.n	8027638 <rshift+0x58>
 8027680:	c980      	ldmia	r1!, {r7}
 8027682:	c680      	stmia	r6!, {r7}
 8027684:	e7c3      	b.n	802760e <rshift+0x2e>

08027686 <__hexdig_fun>:
 8027686:	0002      	movs	r2, r0
 8027688:	3a30      	subs	r2, #48	@ 0x30
 802768a:	0003      	movs	r3, r0
 802768c:	2a09      	cmp	r2, #9
 802768e:	d802      	bhi.n	8027696 <__hexdig_fun+0x10>
 8027690:	3b20      	subs	r3, #32
 8027692:	b2d8      	uxtb	r0, r3
 8027694:	4770      	bx	lr
 8027696:	0002      	movs	r2, r0
 8027698:	3a61      	subs	r2, #97	@ 0x61
 802769a:	2a05      	cmp	r2, #5
 802769c:	d801      	bhi.n	80276a2 <__hexdig_fun+0x1c>
 802769e:	3b47      	subs	r3, #71	@ 0x47
 80276a0:	e7f7      	b.n	8027692 <__hexdig_fun+0xc>
 80276a2:	001a      	movs	r2, r3
 80276a4:	3a41      	subs	r2, #65	@ 0x41
 80276a6:	2000      	movs	r0, #0
 80276a8:	2a05      	cmp	r2, #5
 80276aa:	d8f3      	bhi.n	8027694 <__hexdig_fun+0xe>
 80276ac:	3b27      	subs	r3, #39	@ 0x27
 80276ae:	e7f0      	b.n	8027692 <__hexdig_fun+0xc>

080276b0 <__gethex>:
 80276b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276b2:	b089      	sub	sp, #36	@ 0x24
 80276b4:	9307      	str	r3, [sp, #28]
 80276b6:	680b      	ldr	r3, [r1, #0]
 80276b8:	9201      	str	r2, [sp, #4]
 80276ba:	9003      	str	r0, [sp, #12]
 80276bc:	9106      	str	r1, [sp, #24]
 80276be:	1c9a      	adds	r2, r3, #2
 80276c0:	0011      	movs	r1, r2
 80276c2:	3201      	adds	r2, #1
 80276c4:	1e50      	subs	r0, r2, #1
 80276c6:	7800      	ldrb	r0, [r0, #0]
 80276c8:	2830      	cmp	r0, #48	@ 0x30
 80276ca:	d0f9      	beq.n	80276c0 <__gethex+0x10>
 80276cc:	1acb      	subs	r3, r1, r3
 80276ce:	3b02      	subs	r3, #2
 80276d0:	9305      	str	r3, [sp, #20]
 80276d2:	9100      	str	r1, [sp, #0]
 80276d4:	f7ff ffd7 	bl	8027686 <__hexdig_fun>
 80276d8:	2300      	movs	r3, #0
 80276da:	001d      	movs	r5, r3
 80276dc:	9302      	str	r3, [sp, #8]
 80276de:	4298      	cmp	r0, r3
 80276e0:	d11e      	bne.n	8027720 <__gethex+0x70>
 80276e2:	2201      	movs	r2, #1
 80276e4:	49a6      	ldr	r1, [pc, #664]	@ (8027980 <__gethex+0x2d0>)
 80276e6:	9800      	ldr	r0, [sp, #0]
 80276e8:	f7fe ffe4 	bl	80266b4 <strncmp>
 80276ec:	0007      	movs	r7, r0
 80276ee:	42a8      	cmp	r0, r5
 80276f0:	d000      	beq.n	80276f4 <__gethex+0x44>
 80276f2:	e06a      	b.n	80277ca <__gethex+0x11a>
 80276f4:	9b00      	ldr	r3, [sp, #0]
 80276f6:	7858      	ldrb	r0, [r3, #1]
 80276f8:	1c5c      	adds	r4, r3, #1
 80276fa:	f7ff ffc4 	bl	8027686 <__hexdig_fun>
 80276fe:	2301      	movs	r3, #1
 8027700:	9302      	str	r3, [sp, #8]
 8027702:	42a8      	cmp	r0, r5
 8027704:	d02f      	beq.n	8027766 <__gethex+0xb6>
 8027706:	9400      	str	r4, [sp, #0]
 8027708:	9b00      	ldr	r3, [sp, #0]
 802770a:	7818      	ldrb	r0, [r3, #0]
 802770c:	2830      	cmp	r0, #48	@ 0x30
 802770e:	d009      	beq.n	8027724 <__gethex+0x74>
 8027710:	f7ff ffb9 	bl	8027686 <__hexdig_fun>
 8027714:	4242      	negs	r2, r0
 8027716:	4142      	adcs	r2, r0
 8027718:	2301      	movs	r3, #1
 802771a:	0025      	movs	r5, r4
 802771c:	9202      	str	r2, [sp, #8]
 802771e:	9305      	str	r3, [sp, #20]
 8027720:	9c00      	ldr	r4, [sp, #0]
 8027722:	e004      	b.n	802772e <__gethex+0x7e>
 8027724:	9b00      	ldr	r3, [sp, #0]
 8027726:	3301      	adds	r3, #1
 8027728:	9300      	str	r3, [sp, #0]
 802772a:	e7ed      	b.n	8027708 <__gethex+0x58>
 802772c:	3401      	adds	r4, #1
 802772e:	7820      	ldrb	r0, [r4, #0]
 8027730:	f7ff ffa9 	bl	8027686 <__hexdig_fun>
 8027734:	1e07      	subs	r7, r0, #0
 8027736:	d1f9      	bne.n	802772c <__gethex+0x7c>
 8027738:	2201      	movs	r2, #1
 802773a:	0020      	movs	r0, r4
 802773c:	4990      	ldr	r1, [pc, #576]	@ (8027980 <__gethex+0x2d0>)
 802773e:	f7fe ffb9 	bl	80266b4 <strncmp>
 8027742:	2800      	cmp	r0, #0
 8027744:	d10d      	bne.n	8027762 <__gethex+0xb2>
 8027746:	2d00      	cmp	r5, #0
 8027748:	d106      	bne.n	8027758 <__gethex+0xa8>
 802774a:	3401      	adds	r4, #1
 802774c:	0025      	movs	r5, r4
 802774e:	7820      	ldrb	r0, [r4, #0]
 8027750:	f7ff ff99 	bl	8027686 <__hexdig_fun>
 8027754:	2800      	cmp	r0, #0
 8027756:	d102      	bne.n	802775e <__gethex+0xae>
 8027758:	1b2d      	subs	r5, r5, r4
 802775a:	00af      	lsls	r7, r5, #2
 802775c:	e003      	b.n	8027766 <__gethex+0xb6>
 802775e:	3401      	adds	r4, #1
 8027760:	e7f5      	b.n	802774e <__gethex+0x9e>
 8027762:	2d00      	cmp	r5, #0
 8027764:	d1f8      	bne.n	8027758 <__gethex+0xa8>
 8027766:	2220      	movs	r2, #32
 8027768:	7823      	ldrb	r3, [r4, #0]
 802776a:	0026      	movs	r6, r4
 802776c:	4393      	bics	r3, r2
 802776e:	2b50      	cmp	r3, #80	@ 0x50
 8027770:	d11d      	bne.n	80277ae <__gethex+0xfe>
 8027772:	7863      	ldrb	r3, [r4, #1]
 8027774:	2b2b      	cmp	r3, #43	@ 0x2b
 8027776:	d02d      	beq.n	80277d4 <__gethex+0x124>
 8027778:	2b2d      	cmp	r3, #45	@ 0x2d
 802777a:	d02f      	beq.n	80277dc <__gethex+0x12c>
 802777c:	2300      	movs	r3, #0
 802777e:	1c66      	adds	r6, r4, #1
 8027780:	9304      	str	r3, [sp, #16]
 8027782:	7830      	ldrb	r0, [r6, #0]
 8027784:	f7ff ff7f 	bl	8027686 <__hexdig_fun>
 8027788:	1e43      	subs	r3, r0, #1
 802778a:	b2db      	uxtb	r3, r3
 802778c:	0005      	movs	r5, r0
 802778e:	2b18      	cmp	r3, #24
 8027790:	d82a      	bhi.n	80277e8 <__gethex+0x138>
 8027792:	7870      	ldrb	r0, [r6, #1]
 8027794:	f7ff ff77 	bl	8027686 <__hexdig_fun>
 8027798:	1e43      	subs	r3, r0, #1
 802779a:	b2db      	uxtb	r3, r3
 802779c:	3601      	adds	r6, #1
 802779e:	3d10      	subs	r5, #16
 80277a0:	2b18      	cmp	r3, #24
 80277a2:	d91d      	bls.n	80277e0 <__gethex+0x130>
 80277a4:	9b04      	ldr	r3, [sp, #16]
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	d000      	beq.n	80277ac <__gethex+0xfc>
 80277aa:	426d      	negs	r5, r5
 80277ac:	197f      	adds	r7, r7, r5
 80277ae:	9b06      	ldr	r3, [sp, #24]
 80277b0:	601e      	str	r6, [r3, #0]
 80277b2:	9b02      	ldr	r3, [sp, #8]
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d019      	beq.n	80277ec <__gethex+0x13c>
 80277b8:	9b05      	ldr	r3, [sp, #20]
 80277ba:	2606      	movs	r6, #6
 80277bc:	425a      	negs	r2, r3
 80277be:	4153      	adcs	r3, r2
 80277c0:	425b      	negs	r3, r3
 80277c2:	401e      	ands	r6, r3
 80277c4:	0030      	movs	r0, r6
 80277c6:	b009      	add	sp, #36	@ 0x24
 80277c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277ca:	2301      	movs	r3, #1
 80277cc:	2700      	movs	r7, #0
 80277ce:	9c00      	ldr	r4, [sp, #0]
 80277d0:	9302      	str	r3, [sp, #8]
 80277d2:	e7c8      	b.n	8027766 <__gethex+0xb6>
 80277d4:	2300      	movs	r3, #0
 80277d6:	9304      	str	r3, [sp, #16]
 80277d8:	1ca6      	adds	r6, r4, #2
 80277da:	e7d2      	b.n	8027782 <__gethex+0xd2>
 80277dc:	2301      	movs	r3, #1
 80277de:	e7fa      	b.n	80277d6 <__gethex+0x126>
 80277e0:	230a      	movs	r3, #10
 80277e2:	435d      	muls	r5, r3
 80277e4:	182d      	adds	r5, r5, r0
 80277e6:	e7d4      	b.n	8027792 <__gethex+0xe2>
 80277e8:	0026      	movs	r6, r4
 80277ea:	e7e0      	b.n	80277ae <__gethex+0xfe>
 80277ec:	9b00      	ldr	r3, [sp, #0]
 80277ee:	9902      	ldr	r1, [sp, #8]
 80277f0:	1ae3      	subs	r3, r4, r3
 80277f2:	3b01      	subs	r3, #1
 80277f4:	2b07      	cmp	r3, #7
 80277f6:	dc0a      	bgt.n	802780e <__gethex+0x15e>
 80277f8:	9803      	ldr	r0, [sp, #12]
 80277fa:	f000 fb19 	bl	8027e30 <_Balloc>
 80277fe:	1e05      	subs	r5, r0, #0
 8027800:	d108      	bne.n	8027814 <__gethex+0x164>
 8027802:	002a      	movs	r2, r5
 8027804:	21e4      	movs	r1, #228	@ 0xe4
 8027806:	4b5f      	ldr	r3, [pc, #380]	@ (8027984 <__gethex+0x2d4>)
 8027808:	485f      	ldr	r0, [pc, #380]	@ (8027988 <__gethex+0x2d8>)
 802780a:	f001 fbe9 	bl	8028fe0 <__assert_func>
 802780e:	3101      	adds	r1, #1
 8027810:	105b      	asrs	r3, r3, #1
 8027812:	e7ef      	b.n	80277f4 <__gethex+0x144>
 8027814:	0003      	movs	r3, r0
 8027816:	3314      	adds	r3, #20
 8027818:	9302      	str	r3, [sp, #8]
 802781a:	9305      	str	r3, [sp, #20]
 802781c:	2300      	movs	r3, #0
 802781e:	001e      	movs	r6, r3
 8027820:	9304      	str	r3, [sp, #16]
 8027822:	9b00      	ldr	r3, [sp, #0]
 8027824:	42a3      	cmp	r3, r4
 8027826:	d338      	bcc.n	802789a <__gethex+0x1ea>
 8027828:	9c05      	ldr	r4, [sp, #20]
 802782a:	9b02      	ldr	r3, [sp, #8]
 802782c:	c440      	stmia	r4!, {r6}
 802782e:	1ae4      	subs	r4, r4, r3
 8027830:	10a4      	asrs	r4, r4, #2
 8027832:	0030      	movs	r0, r6
 8027834:	612c      	str	r4, [r5, #16]
 8027836:	f000 fbf3 	bl	8028020 <__hi0bits>
 802783a:	9b01      	ldr	r3, [sp, #4]
 802783c:	0164      	lsls	r4, r4, #5
 802783e:	681b      	ldr	r3, [r3, #0]
 8027840:	1a26      	subs	r6, r4, r0
 8027842:	9300      	str	r3, [sp, #0]
 8027844:	429e      	cmp	r6, r3
 8027846:	dd52      	ble.n	80278ee <__gethex+0x23e>
 8027848:	1af6      	subs	r6, r6, r3
 802784a:	0031      	movs	r1, r6
 802784c:	0028      	movs	r0, r5
 802784e:	f000 ff8e 	bl	802876e <__any_on>
 8027852:	1e04      	subs	r4, r0, #0
 8027854:	d00f      	beq.n	8027876 <__gethex+0x1c6>
 8027856:	2401      	movs	r4, #1
 8027858:	211f      	movs	r1, #31
 802785a:	0020      	movs	r0, r4
 802785c:	1e73      	subs	r3, r6, #1
 802785e:	4019      	ands	r1, r3
 8027860:	4088      	lsls	r0, r1
 8027862:	0001      	movs	r1, r0
 8027864:	115a      	asrs	r2, r3, #5
 8027866:	9802      	ldr	r0, [sp, #8]
 8027868:	0092      	lsls	r2, r2, #2
 802786a:	5812      	ldr	r2, [r2, r0]
 802786c:	420a      	tst	r2, r1
 802786e:	d002      	beq.n	8027876 <__gethex+0x1c6>
 8027870:	42a3      	cmp	r3, r4
 8027872:	dc34      	bgt.n	80278de <__gethex+0x22e>
 8027874:	2402      	movs	r4, #2
 8027876:	0031      	movs	r1, r6
 8027878:	0028      	movs	r0, r5
 802787a:	f7ff feb1 	bl	80275e0 <rshift>
 802787e:	19bf      	adds	r7, r7, r6
 8027880:	9b01      	ldr	r3, [sp, #4]
 8027882:	689b      	ldr	r3, [r3, #8]
 8027884:	42bb      	cmp	r3, r7
 8027886:	da42      	bge.n	802790e <__gethex+0x25e>
 8027888:	0029      	movs	r1, r5
 802788a:	9803      	ldr	r0, [sp, #12]
 802788c:	f000 fb14 	bl	8027eb8 <_Bfree>
 8027890:	2300      	movs	r3, #0
 8027892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027894:	26a3      	movs	r6, #163	@ 0xa3
 8027896:	6013      	str	r3, [r2, #0]
 8027898:	e794      	b.n	80277c4 <__gethex+0x114>
 802789a:	3c01      	subs	r4, #1
 802789c:	7823      	ldrb	r3, [r4, #0]
 802789e:	2b2e      	cmp	r3, #46	@ 0x2e
 80278a0:	d012      	beq.n	80278c8 <__gethex+0x218>
 80278a2:	9b04      	ldr	r3, [sp, #16]
 80278a4:	2b20      	cmp	r3, #32
 80278a6:	d104      	bne.n	80278b2 <__gethex+0x202>
 80278a8:	9b05      	ldr	r3, [sp, #20]
 80278aa:	c340      	stmia	r3!, {r6}
 80278ac:	2600      	movs	r6, #0
 80278ae:	9305      	str	r3, [sp, #20]
 80278b0:	9604      	str	r6, [sp, #16]
 80278b2:	7820      	ldrb	r0, [r4, #0]
 80278b4:	f7ff fee7 	bl	8027686 <__hexdig_fun>
 80278b8:	230f      	movs	r3, #15
 80278ba:	4018      	ands	r0, r3
 80278bc:	9b04      	ldr	r3, [sp, #16]
 80278be:	4098      	lsls	r0, r3
 80278c0:	3304      	adds	r3, #4
 80278c2:	4306      	orrs	r6, r0
 80278c4:	9304      	str	r3, [sp, #16]
 80278c6:	e7ac      	b.n	8027822 <__gethex+0x172>
 80278c8:	9b00      	ldr	r3, [sp, #0]
 80278ca:	42a3      	cmp	r3, r4
 80278cc:	d8e9      	bhi.n	80278a2 <__gethex+0x1f2>
 80278ce:	2201      	movs	r2, #1
 80278d0:	0020      	movs	r0, r4
 80278d2:	492b      	ldr	r1, [pc, #172]	@ (8027980 <__gethex+0x2d0>)
 80278d4:	f7fe feee 	bl	80266b4 <strncmp>
 80278d8:	2800      	cmp	r0, #0
 80278da:	d1e2      	bne.n	80278a2 <__gethex+0x1f2>
 80278dc:	e7a1      	b.n	8027822 <__gethex+0x172>
 80278de:	0028      	movs	r0, r5
 80278e0:	1eb1      	subs	r1, r6, #2
 80278e2:	f000 ff44 	bl	802876e <__any_on>
 80278e6:	2800      	cmp	r0, #0
 80278e8:	d0c4      	beq.n	8027874 <__gethex+0x1c4>
 80278ea:	2403      	movs	r4, #3
 80278ec:	e7c3      	b.n	8027876 <__gethex+0x1c6>
 80278ee:	9b00      	ldr	r3, [sp, #0]
 80278f0:	2400      	movs	r4, #0
 80278f2:	429e      	cmp	r6, r3
 80278f4:	dac4      	bge.n	8027880 <__gethex+0x1d0>
 80278f6:	1b9e      	subs	r6, r3, r6
 80278f8:	0029      	movs	r1, r5
 80278fa:	0032      	movs	r2, r6
 80278fc:	9803      	ldr	r0, [sp, #12]
 80278fe:	f000 fcfd 	bl	80282fc <__lshift>
 8027902:	0003      	movs	r3, r0
 8027904:	3314      	adds	r3, #20
 8027906:	0005      	movs	r5, r0
 8027908:	1bbf      	subs	r7, r7, r6
 802790a:	9302      	str	r3, [sp, #8]
 802790c:	e7b8      	b.n	8027880 <__gethex+0x1d0>
 802790e:	9b01      	ldr	r3, [sp, #4]
 8027910:	685e      	ldr	r6, [r3, #4]
 8027912:	42be      	cmp	r6, r7
 8027914:	dd6f      	ble.n	80279f6 <__gethex+0x346>
 8027916:	9b00      	ldr	r3, [sp, #0]
 8027918:	1bf6      	subs	r6, r6, r7
 802791a:	42b3      	cmp	r3, r6
 802791c:	dc36      	bgt.n	802798c <__gethex+0x2dc>
 802791e:	9b01      	ldr	r3, [sp, #4]
 8027920:	68db      	ldr	r3, [r3, #12]
 8027922:	2b02      	cmp	r3, #2
 8027924:	d024      	beq.n	8027970 <__gethex+0x2c0>
 8027926:	2b03      	cmp	r3, #3
 8027928:	d026      	beq.n	8027978 <__gethex+0x2c8>
 802792a:	2b01      	cmp	r3, #1
 802792c:	d117      	bne.n	802795e <__gethex+0x2ae>
 802792e:	9b00      	ldr	r3, [sp, #0]
 8027930:	42b3      	cmp	r3, r6
 8027932:	d114      	bne.n	802795e <__gethex+0x2ae>
 8027934:	2b01      	cmp	r3, #1
 8027936:	d10b      	bne.n	8027950 <__gethex+0x2a0>
 8027938:	9b01      	ldr	r3, [sp, #4]
 802793a:	9a07      	ldr	r2, [sp, #28]
 802793c:	685b      	ldr	r3, [r3, #4]
 802793e:	2662      	movs	r6, #98	@ 0x62
 8027940:	6013      	str	r3, [r2, #0]
 8027942:	2301      	movs	r3, #1
 8027944:	9a02      	ldr	r2, [sp, #8]
 8027946:	612b      	str	r3, [r5, #16]
 8027948:	6013      	str	r3, [r2, #0]
 802794a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802794c:	601d      	str	r5, [r3, #0]
 802794e:	e739      	b.n	80277c4 <__gethex+0x114>
 8027950:	9900      	ldr	r1, [sp, #0]
 8027952:	0028      	movs	r0, r5
 8027954:	3901      	subs	r1, #1
 8027956:	f000 ff0a 	bl	802876e <__any_on>
 802795a:	2800      	cmp	r0, #0
 802795c:	d1ec      	bne.n	8027938 <__gethex+0x288>
 802795e:	0029      	movs	r1, r5
 8027960:	9803      	ldr	r0, [sp, #12]
 8027962:	f000 faa9 	bl	8027eb8 <_Bfree>
 8027966:	2300      	movs	r3, #0
 8027968:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802796a:	2650      	movs	r6, #80	@ 0x50
 802796c:	6013      	str	r3, [r2, #0]
 802796e:	e729      	b.n	80277c4 <__gethex+0x114>
 8027970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027972:	2b00      	cmp	r3, #0
 8027974:	d1f3      	bne.n	802795e <__gethex+0x2ae>
 8027976:	e7df      	b.n	8027938 <__gethex+0x288>
 8027978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802797a:	2b00      	cmp	r3, #0
 802797c:	d1dc      	bne.n	8027938 <__gethex+0x288>
 802797e:	e7ee      	b.n	802795e <__gethex+0x2ae>
 8027980:	0802ebc4 	.word	0x0802ebc4
 8027984:	0802ec7e 	.word	0x0802ec7e
 8027988:	0802ec8f 	.word	0x0802ec8f
 802798c:	1e77      	subs	r7, r6, #1
 802798e:	2c00      	cmp	r4, #0
 8027990:	d12f      	bne.n	80279f2 <__gethex+0x342>
 8027992:	2f00      	cmp	r7, #0
 8027994:	d004      	beq.n	80279a0 <__gethex+0x2f0>
 8027996:	0039      	movs	r1, r7
 8027998:	0028      	movs	r0, r5
 802799a:	f000 fee8 	bl	802876e <__any_on>
 802799e:	0004      	movs	r4, r0
 80279a0:	231f      	movs	r3, #31
 80279a2:	117a      	asrs	r2, r7, #5
 80279a4:	401f      	ands	r7, r3
 80279a6:	3b1e      	subs	r3, #30
 80279a8:	40bb      	lsls	r3, r7
 80279aa:	9902      	ldr	r1, [sp, #8]
 80279ac:	0092      	lsls	r2, r2, #2
 80279ae:	5852      	ldr	r2, [r2, r1]
 80279b0:	421a      	tst	r2, r3
 80279b2:	d001      	beq.n	80279b8 <__gethex+0x308>
 80279b4:	2302      	movs	r3, #2
 80279b6:	431c      	orrs	r4, r3
 80279b8:	9b00      	ldr	r3, [sp, #0]
 80279ba:	0031      	movs	r1, r6
 80279bc:	1b9b      	subs	r3, r3, r6
 80279be:	2602      	movs	r6, #2
 80279c0:	0028      	movs	r0, r5
 80279c2:	9300      	str	r3, [sp, #0]
 80279c4:	f7ff fe0c 	bl	80275e0 <rshift>
 80279c8:	9b01      	ldr	r3, [sp, #4]
 80279ca:	685f      	ldr	r7, [r3, #4]
 80279cc:	2c00      	cmp	r4, #0
 80279ce:	d03f      	beq.n	8027a50 <__gethex+0x3a0>
 80279d0:	9b01      	ldr	r3, [sp, #4]
 80279d2:	68db      	ldr	r3, [r3, #12]
 80279d4:	2b02      	cmp	r3, #2
 80279d6:	d010      	beq.n	80279fa <__gethex+0x34a>
 80279d8:	2b03      	cmp	r3, #3
 80279da:	d012      	beq.n	8027a02 <__gethex+0x352>
 80279dc:	2b01      	cmp	r3, #1
 80279de:	d106      	bne.n	80279ee <__gethex+0x33e>
 80279e0:	07a2      	lsls	r2, r4, #30
 80279e2:	d504      	bpl.n	80279ee <__gethex+0x33e>
 80279e4:	9a02      	ldr	r2, [sp, #8]
 80279e6:	6812      	ldr	r2, [r2, #0]
 80279e8:	4314      	orrs	r4, r2
 80279ea:	421c      	tst	r4, r3
 80279ec:	d10c      	bne.n	8027a08 <__gethex+0x358>
 80279ee:	2310      	movs	r3, #16
 80279f0:	e02d      	b.n	8027a4e <__gethex+0x39e>
 80279f2:	2401      	movs	r4, #1
 80279f4:	e7d4      	b.n	80279a0 <__gethex+0x2f0>
 80279f6:	2601      	movs	r6, #1
 80279f8:	e7e8      	b.n	80279cc <__gethex+0x31c>
 80279fa:	2301      	movs	r3, #1
 80279fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80279fe:	1a9b      	subs	r3, r3, r2
 8027a00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d0f2      	beq.n	80279ee <__gethex+0x33e>
 8027a08:	692b      	ldr	r3, [r5, #16]
 8027a0a:	2000      	movs	r0, #0
 8027a0c:	9302      	str	r3, [sp, #8]
 8027a0e:	009b      	lsls	r3, r3, #2
 8027a10:	9304      	str	r3, [sp, #16]
 8027a12:	002b      	movs	r3, r5
 8027a14:	9a04      	ldr	r2, [sp, #16]
 8027a16:	3314      	adds	r3, #20
 8027a18:	1899      	adds	r1, r3, r2
 8027a1a:	681a      	ldr	r2, [r3, #0]
 8027a1c:	1c54      	adds	r4, r2, #1
 8027a1e:	d01c      	beq.n	8027a5a <__gethex+0x3aa>
 8027a20:	3201      	adds	r2, #1
 8027a22:	601a      	str	r2, [r3, #0]
 8027a24:	002b      	movs	r3, r5
 8027a26:	3314      	adds	r3, #20
 8027a28:	2e02      	cmp	r6, #2
 8027a2a:	d13f      	bne.n	8027aac <__gethex+0x3fc>
 8027a2c:	9a01      	ldr	r2, [sp, #4]
 8027a2e:	9900      	ldr	r1, [sp, #0]
 8027a30:	6812      	ldr	r2, [r2, #0]
 8027a32:	3a01      	subs	r2, #1
 8027a34:	428a      	cmp	r2, r1
 8027a36:	d109      	bne.n	8027a4c <__gethex+0x39c>
 8027a38:	000a      	movs	r2, r1
 8027a3a:	201f      	movs	r0, #31
 8027a3c:	4010      	ands	r0, r2
 8027a3e:	2201      	movs	r2, #1
 8027a40:	4082      	lsls	r2, r0
 8027a42:	1149      	asrs	r1, r1, #5
 8027a44:	0089      	lsls	r1, r1, #2
 8027a46:	58cb      	ldr	r3, [r1, r3]
 8027a48:	4213      	tst	r3, r2
 8027a4a:	d13d      	bne.n	8027ac8 <__gethex+0x418>
 8027a4c:	2320      	movs	r3, #32
 8027a4e:	431e      	orrs	r6, r3
 8027a50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027a52:	601d      	str	r5, [r3, #0]
 8027a54:	9b07      	ldr	r3, [sp, #28]
 8027a56:	601f      	str	r7, [r3, #0]
 8027a58:	e6b4      	b.n	80277c4 <__gethex+0x114>
 8027a5a:	c301      	stmia	r3!, {r0}
 8027a5c:	4299      	cmp	r1, r3
 8027a5e:	d8dc      	bhi.n	8027a1a <__gethex+0x36a>
 8027a60:	68ab      	ldr	r3, [r5, #8]
 8027a62:	9a02      	ldr	r2, [sp, #8]
 8027a64:	429a      	cmp	r2, r3
 8027a66:	db18      	blt.n	8027a9a <__gethex+0x3ea>
 8027a68:	6869      	ldr	r1, [r5, #4]
 8027a6a:	9803      	ldr	r0, [sp, #12]
 8027a6c:	3101      	adds	r1, #1
 8027a6e:	f000 f9df 	bl	8027e30 <_Balloc>
 8027a72:	1e04      	subs	r4, r0, #0
 8027a74:	d104      	bne.n	8027a80 <__gethex+0x3d0>
 8027a76:	0022      	movs	r2, r4
 8027a78:	2184      	movs	r1, #132	@ 0x84
 8027a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8027af0 <__gethex+0x440>)
 8027a7c:	481d      	ldr	r0, [pc, #116]	@ (8027af4 <__gethex+0x444>)
 8027a7e:	e6c4      	b.n	802780a <__gethex+0x15a>
 8027a80:	0029      	movs	r1, r5
 8027a82:	692a      	ldr	r2, [r5, #16]
 8027a84:	310c      	adds	r1, #12
 8027a86:	3202      	adds	r2, #2
 8027a88:	0092      	lsls	r2, r2, #2
 8027a8a:	300c      	adds	r0, #12
 8027a8c:	f7fe fed8 	bl	8026840 <memcpy>
 8027a90:	0029      	movs	r1, r5
 8027a92:	9803      	ldr	r0, [sp, #12]
 8027a94:	f000 fa10 	bl	8027eb8 <_Bfree>
 8027a98:	0025      	movs	r5, r4
 8027a9a:	692b      	ldr	r3, [r5, #16]
 8027a9c:	1c5a      	adds	r2, r3, #1
 8027a9e:	612a      	str	r2, [r5, #16]
 8027aa0:	2201      	movs	r2, #1
 8027aa2:	3304      	adds	r3, #4
 8027aa4:	009b      	lsls	r3, r3, #2
 8027aa6:	18eb      	adds	r3, r5, r3
 8027aa8:	605a      	str	r2, [r3, #4]
 8027aaa:	e7bb      	b.n	8027a24 <__gethex+0x374>
 8027aac:	692a      	ldr	r2, [r5, #16]
 8027aae:	9902      	ldr	r1, [sp, #8]
 8027ab0:	428a      	cmp	r2, r1
 8027ab2:	dd0b      	ble.n	8027acc <__gethex+0x41c>
 8027ab4:	2101      	movs	r1, #1
 8027ab6:	0028      	movs	r0, r5
 8027ab8:	f7ff fd92 	bl	80275e0 <rshift>
 8027abc:	9b01      	ldr	r3, [sp, #4]
 8027abe:	3701      	adds	r7, #1
 8027ac0:	689b      	ldr	r3, [r3, #8]
 8027ac2:	42bb      	cmp	r3, r7
 8027ac4:	da00      	bge.n	8027ac8 <__gethex+0x418>
 8027ac6:	e6df      	b.n	8027888 <__gethex+0x1d8>
 8027ac8:	2601      	movs	r6, #1
 8027aca:	e7bf      	b.n	8027a4c <__gethex+0x39c>
 8027acc:	221f      	movs	r2, #31
 8027ace:	9c00      	ldr	r4, [sp, #0]
 8027ad0:	9900      	ldr	r1, [sp, #0]
 8027ad2:	4014      	ands	r4, r2
 8027ad4:	4211      	tst	r1, r2
 8027ad6:	d0f7      	beq.n	8027ac8 <__gethex+0x418>
 8027ad8:	9a04      	ldr	r2, [sp, #16]
 8027ada:	189b      	adds	r3, r3, r2
 8027adc:	3b04      	subs	r3, #4
 8027ade:	6818      	ldr	r0, [r3, #0]
 8027ae0:	f000 fa9e 	bl	8028020 <__hi0bits>
 8027ae4:	2320      	movs	r3, #32
 8027ae6:	1b1b      	subs	r3, r3, r4
 8027ae8:	4298      	cmp	r0, r3
 8027aea:	dbe3      	blt.n	8027ab4 <__gethex+0x404>
 8027aec:	e7ec      	b.n	8027ac8 <__gethex+0x418>
 8027aee:	46c0      	nop			@ (mov r8, r8)
 8027af0:	0802ec7e 	.word	0x0802ec7e
 8027af4:	0802ec8f 	.word	0x0802ec8f

08027af8 <L_shift>:
 8027af8:	2308      	movs	r3, #8
 8027afa:	b570      	push	{r4, r5, r6, lr}
 8027afc:	2520      	movs	r5, #32
 8027afe:	1a9a      	subs	r2, r3, r2
 8027b00:	0092      	lsls	r2, r2, #2
 8027b02:	1aad      	subs	r5, r5, r2
 8027b04:	6843      	ldr	r3, [r0, #4]
 8027b06:	6804      	ldr	r4, [r0, #0]
 8027b08:	001e      	movs	r6, r3
 8027b0a:	40ae      	lsls	r6, r5
 8027b0c:	40d3      	lsrs	r3, r2
 8027b0e:	4334      	orrs	r4, r6
 8027b10:	6004      	str	r4, [r0, #0]
 8027b12:	6043      	str	r3, [r0, #4]
 8027b14:	3004      	adds	r0, #4
 8027b16:	4288      	cmp	r0, r1
 8027b18:	d3f4      	bcc.n	8027b04 <L_shift+0xc>
 8027b1a:	bd70      	pop	{r4, r5, r6, pc}

08027b1c <__match>:
 8027b1c:	b530      	push	{r4, r5, lr}
 8027b1e:	6803      	ldr	r3, [r0, #0]
 8027b20:	780c      	ldrb	r4, [r1, #0]
 8027b22:	3301      	adds	r3, #1
 8027b24:	2c00      	cmp	r4, #0
 8027b26:	d102      	bne.n	8027b2e <__match+0x12>
 8027b28:	6003      	str	r3, [r0, #0]
 8027b2a:	2001      	movs	r0, #1
 8027b2c:	bd30      	pop	{r4, r5, pc}
 8027b2e:	781a      	ldrb	r2, [r3, #0]
 8027b30:	0015      	movs	r5, r2
 8027b32:	3d41      	subs	r5, #65	@ 0x41
 8027b34:	2d19      	cmp	r5, #25
 8027b36:	d800      	bhi.n	8027b3a <__match+0x1e>
 8027b38:	3220      	adds	r2, #32
 8027b3a:	3101      	adds	r1, #1
 8027b3c:	42a2      	cmp	r2, r4
 8027b3e:	d0ef      	beq.n	8027b20 <__match+0x4>
 8027b40:	2000      	movs	r0, #0
 8027b42:	e7f3      	b.n	8027b2c <__match+0x10>

08027b44 <__hexnan>:
 8027b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b46:	680b      	ldr	r3, [r1, #0]
 8027b48:	b08b      	sub	sp, #44	@ 0x2c
 8027b4a:	9201      	str	r2, [sp, #4]
 8027b4c:	9901      	ldr	r1, [sp, #4]
 8027b4e:	115a      	asrs	r2, r3, #5
 8027b50:	0092      	lsls	r2, r2, #2
 8027b52:	188a      	adds	r2, r1, r2
 8027b54:	9202      	str	r2, [sp, #8]
 8027b56:	0019      	movs	r1, r3
 8027b58:	221f      	movs	r2, #31
 8027b5a:	4011      	ands	r1, r2
 8027b5c:	9008      	str	r0, [sp, #32]
 8027b5e:	9106      	str	r1, [sp, #24]
 8027b60:	4213      	tst	r3, r2
 8027b62:	d002      	beq.n	8027b6a <__hexnan+0x26>
 8027b64:	9b02      	ldr	r3, [sp, #8]
 8027b66:	3304      	adds	r3, #4
 8027b68:	9302      	str	r3, [sp, #8]
 8027b6a:	9b02      	ldr	r3, [sp, #8]
 8027b6c:	2500      	movs	r5, #0
 8027b6e:	1f1f      	subs	r7, r3, #4
 8027b70:	003e      	movs	r6, r7
 8027b72:	003c      	movs	r4, r7
 8027b74:	9b08      	ldr	r3, [sp, #32]
 8027b76:	603d      	str	r5, [r7, #0]
 8027b78:	681b      	ldr	r3, [r3, #0]
 8027b7a:	9507      	str	r5, [sp, #28]
 8027b7c:	9305      	str	r3, [sp, #20]
 8027b7e:	9503      	str	r5, [sp, #12]
 8027b80:	9b05      	ldr	r3, [sp, #20]
 8027b82:	3301      	adds	r3, #1
 8027b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b86:	9b05      	ldr	r3, [sp, #20]
 8027b88:	785b      	ldrb	r3, [r3, #1]
 8027b8a:	9304      	str	r3, [sp, #16]
 8027b8c:	2b00      	cmp	r3, #0
 8027b8e:	d028      	beq.n	8027be2 <__hexnan+0x9e>
 8027b90:	9804      	ldr	r0, [sp, #16]
 8027b92:	f7ff fd78 	bl	8027686 <__hexdig_fun>
 8027b96:	2800      	cmp	r0, #0
 8027b98:	d155      	bne.n	8027c46 <__hexnan+0x102>
 8027b9a:	9b04      	ldr	r3, [sp, #16]
 8027b9c:	2b20      	cmp	r3, #32
 8027b9e:	d819      	bhi.n	8027bd4 <__hexnan+0x90>
 8027ba0:	9b03      	ldr	r3, [sp, #12]
 8027ba2:	9a07      	ldr	r2, [sp, #28]
 8027ba4:	4293      	cmp	r3, r2
 8027ba6:	dd12      	ble.n	8027bce <__hexnan+0x8a>
 8027ba8:	42b4      	cmp	r4, r6
 8027baa:	d206      	bcs.n	8027bba <__hexnan+0x76>
 8027bac:	2d07      	cmp	r5, #7
 8027bae:	dc04      	bgt.n	8027bba <__hexnan+0x76>
 8027bb0:	002a      	movs	r2, r5
 8027bb2:	0031      	movs	r1, r6
 8027bb4:	0020      	movs	r0, r4
 8027bb6:	f7ff ff9f 	bl	8027af8 <L_shift>
 8027bba:	9b01      	ldr	r3, [sp, #4]
 8027bbc:	2508      	movs	r5, #8
 8027bbe:	429c      	cmp	r4, r3
 8027bc0:	d905      	bls.n	8027bce <__hexnan+0x8a>
 8027bc2:	1f26      	subs	r6, r4, #4
 8027bc4:	2500      	movs	r5, #0
 8027bc6:	0034      	movs	r4, r6
 8027bc8:	9b03      	ldr	r3, [sp, #12]
 8027bca:	6035      	str	r5, [r6, #0]
 8027bcc:	9307      	str	r3, [sp, #28]
 8027bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027bd0:	9305      	str	r3, [sp, #20]
 8027bd2:	e7d5      	b.n	8027b80 <__hexnan+0x3c>
 8027bd4:	9b04      	ldr	r3, [sp, #16]
 8027bd6:	2b29      	cmp	r3, #41	@ 0x29
 8027bd8:	d15a      	bne.n	8027c90 <__hexnan+0x14c>
 8027bda:	9b05      	ldr	r3, [sp, #20]
 8027bdc:	9a08      	ldr	r2, [sp, #32]
 8027bde:	3302      	adds	r3, #2
 8027be0:	6013      	str	r3, [r2, #0]
 8027be2:	9b03      	ldr	r3, [sp, #12]
 8027be4:	2b00      	cmp	r3, #0
 8027be6:	d053      	beq.n	8027c90 <__hexnan+0x14c>
 8027be8:	42b4      	cmp	r4, r6
 8027bea:	d206      	bcs.n	8027bfa <__hexnan+0xb6>
 8027bec:	2d07      	cmp	r5, #7
 8027bee:	dc04      	bgt.n	8027bfa <__hexnan+0xb6>
 8027bf0:	002a      	movs	r2, r5
 8027bf2:	0031      	movs	r1, r6
 8027bf4:	0020      	movs	r0, r4
 8027bf6:	f7ff ff7f 	bl	8027af8 <L_shift>
 8027bfa:	9b01      	ldr	r3, [sp, #4]
 8027bfc:	429c      	cmp	r4, r3
 8027bfe:	d936      	bls.n	8027c6e <__hexnan+0x12a>
 8027c00:	001a      	movs	r2, r3
 8027c02:	0023      	movs	r3, r4
 8027c04:	cb02      	ldmia	r3!, {r1}
 8027c06:	c202      	stmia	r2!, {r1}
 8027c08:	429f      	cmp	r7, r3
 8027c0a:	d2fb      	bcs.n	8027c04 <__hexnan+0xc0>
 8027c0c:	9b02      	ldr	r3, [sp, #8]
 8027c0e:	1c62      	adds	r2, r4, #1
 8027c10:	1ed9      	subs	r1, r3, #3
 8027c12:	2304      	movs	r3, #4
 8027c14:	4291      	cmp	r1, r2
 8027c16:	d305      	bcc.n	8027c24 <__hexnan+0xe0>
 8027c18:	9b02      	ldr	r3, [sp, #8]
 8027c1a:	3b04      	subs	r3, #4
 8027c1c:	1b1b      	subs	r3, r3, r4
 8027c1e:	089b      	lsrs	r3, r3, #2
 8027c20:	3301      	adds	r3, #1
 8027c22:	009b      	lsls	r3, r3, #2
 8027c24:	9a01      	ldr	r2, [sp, #4]
 8027c26:	18d3      	adds	r3, r2, r3
 8027c28:	2200      	movs	r2, #0
 8027c2a:	c304      	stmia	r3!, {r2}
 8027c2c:	429f      	cmp	r7, r3
 8027c2e:	d2fc      	bcs.n	8027c2a <__hexnan+0xe6>
 8027c30:	683b      	ldr	r3, [r7, #0]
 8027c32:	2b00      	cmp	r3, #0
 8027c34:	d104      	bne.n	8027c40 <__hexnan+0xfc>
 8027c36:	9b01      	ldr	r3, [sp, #4]
 8027c38:	429f      	cmp	r7, r3
 8027c3a:	d127      	bne.n	8027c8c <__hexnan+0x148>
 8027c3c:	2301      	movs	r3, #1
 8027c3e:	603b      	str	r3, [r7, #0]
 8027c40:	2005      	movs	r0, #5
 8027c42:	b00b      	add	sp, #44	@ 0x2c
 8027c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027c46:	9b03      	ldr	r3, [sp, #12]
 8027c48:	3501      	adds	r5, #1
 8027c4a:	3301      	adds	r3, #1
 8027c4c:	9303      	str	r3, [sp, #12]
 8027c4e:	2d08      	cmp	r5, #8
 8027c50:	dd06      	ble.n	8027c60 <__hexnan+0x11c>
 8027c52:	9b01      	ldr	r3, [sp, #4]
 8027c54:	429c      	cmp	r4, r3
 8027c56:	d9ba      	bls.n	8027bce <__hexnan+0x8a>
 8027c58:	2300      	movs	r3, #0
 8027c5a:	2501      	movs	r5, #1
 8027c5c:	3c04      	subs	r4, #4
 8027c5e:	6023      	str	r3, [r4, #0]
 8027c60:	220f      	movs	r2, #15
 8027c62:	6823      	ldr	r3, [r4, #0]
 8027c64:	4010      	ands	r0, r2
 8027c66:	011b      	lsls	r3, r3, #4
 8027c68:	4303      	orrs	r3, r0
 8027c6a:	6023      	str	r3, [r4, #0]
 8027c6c:	e7af      	b.n	8027bce <__hexnan+0x8a>
 8027c6e:	9b06      	ldr	r3, [sp, #24]
 8027c70:	2b00      	cmp	r3, #0
 8027c72:	d0dd      	beq.n	8027c30 <__hexnan+0xec>
 8027c74:	2320      	movs	r3, #32
 8027c76:	9a06      	ldr	r2, [sp, #24]
 8027c78:	9902      	ldr	r1, [sp, #8]
 8027c7a:	1a9b      	subs	r3, r3, r2
 8027c7c:	2201      	movs	r2, #1
 8027c7e:	4252      	negs	r2, r2
 8027c80:	40da      	lsrs	r2, r3
 8027c82:	3904      	subs	r1, #4
 8027c84:	680b      	ldr	r3, [r1, #0]
 8027c86:	4013      	ands	r3, r2
 8027c88:	600b      	str	r3, [r1, #0]
 8027c8a:	e7d1      	b.n	8027c30 <__hexnan+0xec>
 8027c8c:	3f04      	subs	r7, #4
 8027c8e:	e7cf      	b.n	8027c30 <__hexnan+0xec>
 8027c90:	2004      	movs	r0, #4
 8027c92:	e7d6      	b.n	8027c42 <__hexnan+0xfe>

08027c94 <malloc>:
 8027c94:	b510      	push	{r4, lr}
 8027c96:	4b03      	ldr	r3, [pc, #12]	@ (8027ca4 <malloc+0x10>)
 8027c98:	0001      	movs	r1, r0
 8027c9a:	6818      	ldr	r0, [r3, #0]
 8027c9c:	f000 f826 	bl	8027cec <_malloc_r>
 8027ca0:	bd10      	pop	{r4, pc}
 8027ca2:	46c0      	nop			@ (mov r8, r8)
 8027ca4:	200003ec 	.word	0x200003ec

08027ca8 <sbrk_aligned>:
 8027ca8:	b570      	push	{r4, r5, r6, lr}
 8027caa:	4e0f      	ldr	r6, [pc, #60]	@ (8027ce8 <sbrk_aligned+0x40>)
 8027cac:	000d      	movs	r5, r1
 8027cae:	6831      	ldr	r1, [r6, #0]
 8027cb0:	0004      	movs	r4, r0
 8027cb2:	2900      	cmp	r1, #0
 8027cb4:	d102      	bne.n	8027cbc <sbrk_aligned+0x14>
 8027cb6:	f001 f981 	bl	8028fbc <_sbrk_r>
 8027cba:	6030      	str	r0, [r6, #0]
 8027cbc:	0029      	movs	r1, r5
 8027cbe:	0020      	movs	r0, r4
 8027cc0:	f001 f97c 	bl	8028fbc <_sbrk_r>
 8027cc4:	1c43      	adds	r3, r0, #1
 8027cc6:	d103      	bne.n	8027cd0 <sbrk_aligned+0x28>
 8027cc8:	2501      	movs	r5, #1
 8027cca:	426d      	negs	r5, r5
 8027ccc:	0028      	movs	r0, r5
 8027cce:	bd70      	pop	{r4, r5, r6, pc}
 8027cd0:	2303      	movs	r3, #3
 8027cd2:	1cc5      	adds	r5, r0, #3
 8027cd4:	439d      	bics	r5, r3
 8027cd6:	42a8      	cmp	r0, r5
 8027cd8:	d0f8      	beq.n	8027ccc <sbrk_aligned+0x24>
 8027cda:	1a29      	subs	r1, r5, r0
 8027cdc:	0020      	movs	r0, r4
 8027cde:	f001 f96d 	bl	8028fbc <_sbrk_r>
 8027ce2:	3001      	adds	r0, #1
 8027ce4:	d1f2      	bne.n	8027ccc <sbrk_aligned+0x24>
 8027ce6:	e7ef      	b.n	8027cc8 <sbrk_aligned+0x20>
 8027ce8:	20003910 	.word	0x20003910

08027cec <_malloc_r>:
 8027cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027cee:	2203      	movs	r2, #3
 8027cf0:	1ccb      	adds	r3, r1, #3
 8027cf2:	4393      	bics	r3, r2
 8027cf4:	3308      	adds	r3, #8
 8027cf6:	0005      	movs	r5, r0
 8027cf8:	001f      	movs	r7, r3
 8027cfa:	2b0c      	cmp	r3, #12
 8027cfc:	d234      	bcs.n	8027d68 <_malloc_r+0x7c>
 8027cfe:	270c      	movs	r7, #12
 8027d00:	42b9      	cmp	r1, r7
 8027d02:	d833      	bhi.n	8027d6c <_malloc_r+0x80>
 8027d04:	0028      	movs	r0, r5
 8027d06:	f000 f883 	bl	8027e10 <__malloc_lock>
 8027d0a:	4e37      	ldr	r6, [pc, #220]	@ (8027de8 <_malloc_r+0xfc>)
 8027d0c:	6833      	ldr	r3, [r6, #0]
 8027d0e:	001c      	movs	r4, r3
 8027d10:	2c00      	cmp	r4, #0
 8027d12:	d12f      	bne.n	8027d74 <_malloc_r+0x88>
 8027d14:	0039      	movs	r1, r7
 8027d16:	0028      	movs	r0, r5
 8027d18:	f7ff ffc6 	bl	8027ca8 <sbrk_aligned>
 8027d1c:	0004      	movs	r4, r0
 8027d1e:	1c43      	adds	r3, r0, #1
 8027d20:	d15f      	bne.n	8027de2 <_malloc_r+0xf6>
 8027d22:	6834      	ldr	r4, [r6, #0]
 8027d24:	9400      	str	r4, [sp, #0]
 8027d26:	9b00      	ldr	r3, [sp, #0]
 8027d28:	2b00      	cmp	r3, #0
 8027d2a:	d14a      	bne.n	8027dc2 <_malloc_r+0xd6>
 8027d2c:	2c00      	cmp	r4, #0
 8027d2e:	d052      	beq.n	8027dd6 <_malloc_r+0xea>
 8027d30:	6823      	ldr	r3, [r4, #0]
 8027d32:	0028      	movs	r0, r5
 8027d34:	18e3      	adds	r3, r4, r3
 8027d36:	9900      	ldr	r1, [sp, #0]
 8027d38:	9301      	str	r3, [sp, #4]
 8027d3a:	f001 f93f 	bl	8028fbc <_sbrk_r>
 8027d3e:	9b01      	ldr	r3, [sp, #4]
 8027d40:	4283      	cmp	r3, r0
 8027d42:	d148      	bne.n	8027dd6 <_malloc_r+0xea>
 8027d44:	6823      	ldr	r3, [r4, #0]
 8027d46:	0028      	movs	r0, r5
 8027d48:	1aff      	subs	r7, r7, r3
 8027d4a:	0039      	movs	r1, r7
 8027d4c:	f7ff ffac 	bl	8027ca8 <sbrk_aligned>
 8027d50:	3001      	adds	r0, #1
 8027d52:	d040      	beq.n	8027dd6 <_malloc_r+0xea>
 8027d54:	6823      	ldr	r3, [r4, #0]
 8027d56:	19db      	adds	r3, r3, r7
 8027d58:	6023      	str	r3, [r4, #0]
 8027d5a:	6833      	ldr	r3, [r6, #0]
 8027d5c:	685a      	ldr	r2, [r3, #4]
 8027d5e:	2a00      	cmp	r2, #0
 8027d60:	d133      	bne.n	8027dca <_malloc_r+0xde>
 8027d62:	9b00      	ldr	r3, [sp, #0]
 8027d64:	6033      	str	r3, [r6, #0]
 8027d66:	e019      	b.n	8027d9c <_malloc_r+0xb0>
 8027d68:	2b00      	cmp	r3, #0
 8027d6a:	dac9      	bge.n	8027d00 <_malloc_r+0x14>
 8027d6c:	230c      	movs	r3, #12
 8027d6e:	602b      	str	r3, [r5, #0]
 8027d70:	2000      	movs	r0, #0
 8027d72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027d74:	6821      	ldr	r1, [r4, #0]
 8027d76:	1bc9      	subs	r1, r1, r7
 8027d78:	d420      	bmi.n	8027dbc <_malloc_r+0xd0>
 8027d7a:	290b      	cmp	r1, #11
 8027d7c:	d90a      	bls.n	8027d94 <_malloc_r+0xa8>
 8027d7e:	19e2      	adds	r2, r4, r7
 8027d80:	6027      	str	r7, [r4, #0]
 8027d82:	42a3      	cmp	r3, r4
 8027d84:	d104      	bne.n	8027d90 <_malloc_r+0xa4>
 8027d86:	6032      	str	r2, [r6, #0]
 8027d88:	6863      	ldr	r3, [r4, #4]
 8027d8a:	6011      	str	r1, [r2, #0]
 8027d8c:	6053      	str	r3, [r2, #4]
 8027d8e:	e005      	b.n	8027d9c <_malloc_r+0xb0>
 8027d90:	605a      	str	r2, [r3, #4]
 8027d92:	e7f9      	b.n	8027d88 <_malloc_r+0x9c>
 8027d94:	6862      	ldr	r2, [r4, #4]
 8027d96:	42a3      	cmp	r3, r4
 8027d98:	d10e      	bne.n	8027db8 <_malloc_r+0xcc>
 8027d9a:	6032      	str	r2, [r6, #0]
 8027d9c:	0028      	movs	r0, r5
 8027d9e:	f000 f83f 	bl	8027e20 <__malloc_unlock>
 8027da2:	0020      	movs	r0, r4
 8027da4:	2207      	movs	r2, #7
 8027da6:	300b      	adds	r0, #11
 8027da8:	1d23      	adds	r3, r4, #4
 8027daa:	4390      	bics	r0, r2
 8027dac:	1ac2      	subs	r2, r0, r3
 8027dae:	4298      	cmp	r0, r3
 8027db0:	d0df      	beq.n	8027d72 <_malloc_r+0x86>
 8027db2:	1a1b      	subs	r3, r3, r0
 8027db4:	50a3      	str	r3, [r4, r2]
 8027db6:	e7dc      	b.n	8027d72 <_malloc_r+0x86>
 8027db8:	605a      	str	r2, [r3, #4]
 8027dba:	e7ef      	b.n	8027d9c <_malloc_r+0xb0>
 8027dbc:	0023      	movs	r3, r4
 8027dbe:	6864      	ldr	r4, [r4, #4]
 8027dc0:	e7a6      	b.n	8027d10 <_malloc_r+0x24>
 8027dc2:	9c00      	ldr	r4, [sp, #0]
 8027dc4:	6863      	ldr	r3, [r4, #4]
 8027dc6:	9300      	str	r3, [sp, #0]
 8027dc8:	e7ad      	b.n	8027d26 <_malloc_r+0x3a>
 8027dca:	001a      	movs	r2, r3
 8027dcc:	685b      	ldr	r3, [r3, #4]
 8027dce:	42a3      	cmp	r3, r4
 8027dd0:	d1fb      	bne.n	8027dca <_malloc_r+0xde>
 8027dd2:	2300      	movs	r3, #0
 8027dd4:	e7da      	b.n	8027d8c <_malloc_r+0xa0>
 8027dd6:	230c      	movs	r3, #12
 8027dd8:	0028      	movs	r0, r5
 8027dda:	602b      	str	r3, [r5, #0]
 8027ddc:	f000 f820 	bl	8027e20 <__malloc_unlock>
 8027de0:	e7c6      	b.n	8027d70 <_malloc_r+0x84>
 8027de2:	6007      	str	r7, [r0, #0]
 8027de4:	e7da      	b.n	8027d9c <_malloc_r+0xb0>
 8027de6:	46c0      	nop			@ (mov r8, r8)
 8027de8:	20003914 	.word	0x20003914

08027dec <__ascii_mbtowc>:
 8027dec:	b082      	sub	sp, #8
 8027dee:	2900      	cmp	r1, #0
 8027df0:	d100      	bne.n	8027df4 <__ascii_mbtowc+0x8>
 8027df2:	a901      	add	r1, sp, #4
 8027df4:	1e10      	subs	r0, r2, #0
 8027df6:	d006      	beq.n	8027e06 <__ascii_mbtowc+0x1a>
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d006      	beq.n	8027e0a <__ascii_mbtowc+0x1e>
 8027dfc:	7813      	ldrb	r3, [r2, #0]
 8027dfe:	600b      	str	r3, [r1, #0]
 8027e00:	7810      	ldrb	r0, [r2, #0]
 8027e02:	1e43      	subs	r3, r0, #1
 8027e04:	4198      	sbcs	r0, r3
 8027e06:	b002      	add	sp, #8
 8027e08:	4770      	bx	lr
 8027e0a:	2002      	movs	r0, #2
 8027e0c:	4240      	negs	r0, r0
 8027e0e:	e7fa      	b.n	8027e06 <__ascii_mbtowc+0x1a>

08027e10 <__malloc_lock>:
 8027e10:	b510      	push	{r4, lr}
 8027e12:	4802      	ldr	r0, [pc, #8]	@ (8027e1c <__malloc_lock+0xc>)
 8027e14:	f7fe fd07 	bl	8026826 <__retarget_lock_acquire_recursive>
 8027e18:	bd10      	pop	{r4, pc}
 8027e1a:	46c0      	nop			@ (mov r8, r8)
 8027e1c:	2000390c 	.word	0x2000390c

08027e20 <__malloc_unlock>:
 8027e20:	b510      	push	{r4, lr}
 8027e22:	4802      	ldr	r0, [pc, #8]	@ (8027e2c <__malloc_unlock+0xc>)
 8027e24:	f7fe fd00 	bl	8026828 <__retarget_lock_release_recursive>
 8027e28:	bd10      	pop	{r4, pc}
 8027e2a:	46c0      	nop			@ (mov r8, r8)
 8027e2c:	2000390c 	.word	0x2000390c

08027e30 <_Balloc>:
 8027e30:	b570      	push	{r4, r5, r6, lr}
 8027e32:	69c5      	ldr	r5, [r0, #28]
 8027e34:	0006      	movs	r6, r0
 8027e36:	000c      	movs	r4, r1
 8027e38:	2d00      	cmp	r5, #0
 8027e3a:	d10e      	bne.n	8027e5a <_Balloc+0x2a>
 8027e3c:	2010      	movs	r0, #16
 8027e3e:	f7ff ff29 	bl	8027c94 <malloc>
 8027e42:	1e02      	subs	r2, r0, #0
 8027e44:	61f0      	str	r0, [r6, #28]
 8027e46:	d104      	bne.n	8027e52 <_Balloc+0x22>
 8027e48:	216b      	movs	r1, #107	@ 0x6b
 8027e4a:	4b19      	ldr	r3, [pc, #100]	@ (8027eb0 <_Balloc+0x80>)
 8027e4c:	4819      	ldr	r0, [pc, #100]	@ (8027eb4 <_Balloc+0x84>)
 8027e4e:	f001 f8c7 	bl	8028fe0 <__assert_func>
 8027e52:	6045      	str	r5, [r0, #4]
 8027e54:	6085      	str	r5, [r0, #8]
 8027e56:	6005      	str	r5, [r0, #0]
 8027e58:	60c5      	str	r5, [r0, #12]
 8027e5a:	69f5      	ldr	r5, [r6, #28]
 8027e5c:	68eb      	ldr	r3, [r5, #12]
 8027e5e:	2b00      	cmp	r3, #0
 8027e60:	d013      	beq.n	8027e8a <_Balloc+0x5a>
 8027e62:	69f3      	ldr	r3, [r6, #28]
 8027e64:	00a2      	lsls	r2, r4, #2
 8027e66:	68db      	ldr	r3, [r3, #12]
 8027e68:	189b      	adds	r3, r3, r2
 8027e6a:	6818      	ldr	r0, [r3, #0]
 8027e6c:	2800      	cmp	r0, #0
 8027e6e:	d118      	bne.n	8027ea2 <_Balloc+0x72>
 8027e70:	2101      	movs	r1, #1
 8027e72:	000d      	movs	r5, r1
 8027e74:	40a5      	lsls	r5, r4
 8027e76:	1d6a      	adds	r2, r5, #5
 8027e78:	0030      	movs	r0, r6
 8027e7a:	0092      	lsls	r2, r2, #2
 8027e7c:	f001 f8ce 	bl	802901c <_calloc_r>
 8027e80:	2800      	cmp	r0, #0
 8027e82:	d00c      	beq.n	8027e9e <_Balloc+0x6e>
 8027e84:	6044      	str	r4, [r0, #4]
 8027e86:	6085      	str	r5, [r0, #8]
 8027e88:	e00d      	b.n	8027ea6 <_Balloc+0x76>
 8027e8a:	2221      	movs	r2, #33	@ 0x21
 8027e8c:	2104      	movs	r1, #4
 8027e8e:	0030      	movs	r0, r6
 8027e90:	f001 f8c4 	bl	802901c <_calloc_r>
 8027e94:	69f3      	ldr	r3, [r6, #28]
 8027e96:	60e8      	str	r0, [r5, #12]
 8027e98:	68db      	ldr	r3, [r3, #12]
 8027e9a:	2b00      	cmp	r3, #0
 8027e9c:	d1e1      	bne.n	8027e62 <_Balloc+0x32>
 8027e9e:	2000      	movs	r0, #0
 8027ea0:	bd70      	pop	{r4, r5, r6, pc}
 8027ea2:	6802      	ldr	r2, [r0, #0]
 8027ea4:	601a      	str	r2, [r3, #0]
 8027ea6:	2300      	movs	r3, #0
 8027ea8:	6103      	str	r3, [r0, #16]
 8027eaa:	60c3      	str	r3, [r0, #12]
 8027eac:	e7f8      	b.n	8027ea0 <_Balloc+0x70>
 8027eae:	46c0      	nop			@ (mov r8, r8)
 8027eb0:	0802ec0f 	.word	0x0802ec0f
 8027eb4:	0802ecef 	.word	0x0802ecef

08027eb8 <_Bfree>:
 8027eb8:	b570      	push	{r4, r5, r6, lr}
 8027eba:	69c6      	ldr	r6, [r0, #28]
 8027ebc:	0005      	movs	r5, r0
 8027ebe:	000c      	movs	r4, r1
 8027ec0:	2e00      	cmp	r6, #0
 8027ec2:	d10e      	bne.n	8027ee2 <_Bfree+0x2a>
 8027ec4:	2010      	movs	r0, #16
 8027ec6:	f7ff fee5 	bl	8027c94 <malloc>
 8027eca:	1e02      	subs	r2, r0, #0
 8027ecc:	61e8      	str	r0, [r5, #28]
 8027ece:	d104      	bne.n	8027eda <_Bfree+0x22>
 8027ed0:	218f      	movs	r1, #143	@ 0x8f
 8027ed2:	4b09      	ldr	r3, [pc, #36]	@ (8027ef8 <_Bfree+0x40>)
 8027ed4:	4809      	ldr	r0, [pc, #36]	@ (8027efc <_Bfree+0x44>)
 8027ed6:	f001 f883 	bl	8028fe0 <__assert_func>
 8027eda:	6046      	str	r6, [r0, #4]
 8027edc:	6086      	str	r6, [r0, #8]
 8027ede:	6006      	str	r6, [r0, #0]
 8027ee0:	60c6      	str	r6, [r0, #12]
 8027ee2:	2c00      	cmp	r4, #0
 8027ee4:	d007      	beq.n	8027ef6 <_Bfree+0x3e>
 8027ee6:	69eb      	ldr	r3, [r5, #28]
 8027ee8:	6862      	ldr	r2, [r4, #4]
 8027eea:	68db      	ldr	r3, [r3, #12]
 8027eec:	0092      	lsls	r2, r2, #2
 8027eee:	189b      	adds	r3, r3, r2
 8027ef0:	681a      	ldr	r2, [r3, #0]
 8027ef2:	6022      	str	r2, [r4, #0]
 8027ef4:	601c      	str	r4, [r3, #0]
 8027ef6:	bd70      	pop	{r4, r5, r6, pc}
 8027ef8:	0802ec0f 	.word	0x0802ec0f
 8027efc:	0802ecef 	.word	0x0802ecef

08027f00 <__multadd>:
 8027f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027f02:	000f      	movs	r7, r1
 8027f04:	9001      	str	r0, [sp, #4]
 8027f06:	000c      	movs	r4, r1
 8027f08:	001e      	movs	r6, r3
 8027f0a:	2000      	movs	r0, #0
 8027f0c:	690d      	ldr	r5, [r1, #16]
 8027f0e:	3714      	adds	r7, #20
 8027f10:	683b      	ldr	r3, [r7, #0]
 8027f12:	3001      	adds	r0, #1
 8027f14:	b299      	uxth	r1, r3
 8027f16:	4351      	muls	r1, r2
 8027f18:	0c1b      	lsrs	r3, r3, #16
 8027f1a:	4353      	muls	r3, r2
 8027f1c:	1989      	adds	r1, r1, r6
 8027f1e:	0c0e      	lsrs	r6, r1, #16
 8027f20:	199b      	adds	r3, r3, r6
 8027f22:	0c1e      	lsrs	r6, r3, #16
 8027f24:	b289      	uxth	r1, r1
 8027f26:	041b      	lsls	r3, r3, #16
 8027f28:	185b      	adds	r3, r3, r1
 8027f2a:	c708      	stmia	r7!, {r3}
 8027f2c:	4285      	cmp	r5, r0
 8027f2e:	dcef      	bgt.n	8027f10 <__multadd+0x10>
 8027f30:	2e00      	cmp	r6, #0
 8027f32:	d022      	beq.n	8027f7a <__multadd+0x7a>
 8027f34:	68a3      	ldr	r3, [r4, #8]
 8027f36:	42ab      	cmp	r3, r5
 8027f38:	dc19      	bgt.n	8027f6e <__multadd+0x6e>
 8027f3a:	6861      	ldr	r1, [r4, #4]
 8027f3c:	9801      	ldr	r0, [sp, #4]
 8027f3e:	3101      	adds	r1, #1
 8027f40:	f7ff ff76 	bl	8027e30 <_Balloc>
 8027f44:	1e07      	subs	r7, r0, #0
 8027f46:	d105      	bne.n	8027f54 <__multadd+0x54>
 8027f48:	003a      	movs	r2, r7
 8027f4a:	21ba      	movs	r1, #186	@ 0xba
 8027f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8027f80 <__multadd+0x80>)
 8027f4e:	480d      	ldr	r0, [pc, #52]	@ (8027f84 <__multadd+0x84>)
 8027f50:	f001 f846 	bl	8028fe0 <__assert_func>
 8027f54:	0021      	movs	r1, r4
 8027f56:	6922      	ldr	r2, [r4, #16]
 8027f58:	310c      	adds	r1, #12
 8027f5a:	3202      	adds	r2, #2
 8027f5c:	0092      	lsls	r2, r2, #2
 8027f5e:	300c      	adds	r0, #12
 8027f60:	f7fe fc6e 	bl	8026840 <memcpy>
 8027f64:	0021      	movs	r1, r4
 8027f66:	9801      	ldr	r0, [sp, #4]
 8027f68:	f7ff ffa6 	bl	8027eb8 <_Bfree>
 8027f6c:	003c      	movs	r4, r7
 8027f6e:	1d2b      	adds	r3, r5, #4
 8027f70:	009b      	lsls	r3, r3, #2
 8027f72:	18e3      	adds	r3, r4, r3
 8027f74:	3501      	adds	r5, #1
 8027f76:	605e      	str	r6, [r3, #4]
 8027f78:	6125      	str	r5, [r4, #16]
 8027f7a:	0020      	movs	r0, r4
 8027f7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027f7e:	46c0      	nop			@ (mov r8, r8)
 8027f80:	0802ec7e 	.word	0x0802ec7e
 8027f84:	0802ecef 	.word	0x0802ecef

08027f88 <__s2b>:
 8027f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027f8a:	0007      	movs	r7, r0
 8027f8c:	0018      	movs	r0, r3
 8027f8e:	000c      	movs	r4, r1
 8027f90:	3008      	adds	r0, #8
 8027f92:	2109      	movs	r1, #9
 8027f94:	9301      	str	r3, [sp, #4]
 8027f96:	0015      	movs	r5, r2
 8027f98:	f7d8 f98e 	bl	80002b8 <__divsi3>
 8027f9c:	2301      	movs	r3, #1
 8027f9e:	2100      	movs	r1, #0
 8027fa0:	4283      	cmp	r3, r0
 8027fa2:	db0a      	blt.n	8027fba <__s2b+0x32>
 8027fa4:	0038      	movs	r0, r7
 8027fa6:	f7ff ff43 	bl	8027e30 <_Balloc>
 8027faa:	1e01      	subs	r1, r0, #0
 8027fac:	d108      	bne.n	8027fc0 <__s2b+0x38>
 8027fae:	000a      	movs	r2, r1
 8027fb0:	4b19      	ldr	r3, [pc, #100]	@ (8028018 <__s2b+0x90>)
 8027fb2:	481a      	ldr	r0, [pc, #104]	@ (802801c <__s2b+0x94>)
 8027fb4:	31d3      	adds	r1, #211	@ 0xd3
 8027fb6:	f001 f813 	bl	8028fe0 <__assert_func>
 8027fba:	005b      	lsls	r3, r3, #1
 8027fbc:	3101      	adds	r1, #1
 8027fbe:	e7ef      	b.n	8027fa0 <__s2b+0x18>
 8027fc0:	9b08      	ldr	r3, [sp, #32]
 8027fc2:	6143      	str	r3, [r0, #20]
 8027fc4:	2301      	movs	r3, #1
 8027fc6:	6103      	str	r3, [r0, #16]
 8027fc8:	2d09      	cmp	r5, #9
 8027fca:	dd18      	ble.n	8027ffe <__s2b+0x76>
 8027fcc:	0023      	movs	r3, r4
 8027fce:	3309      	adds	r3, #9
 8027fd0:	001e      	movs	r6, r3
 8027fd2:	9300      	str	r3, [sp, #0]
 8027fd4:	1964      	adds	r4, r4, r5
 8027fd6:	7833      	ldrb	r3, [r6, #0]
 8027fd8:	220a      	movs	r2, #10
 8027fda:	0038      	movs	r0, r7
 8027fdc:	3b30      	subs	r3, #48	@ 0x30
 8027fde:	f7ff ff8f 	bl	8027f00 <__multadd>
 8027fe2:	3601      	adds	r6, #1
 8027fe4:	0001      	movs	r1, r0
 8027fe6:	42a6      	cmp	r6, r4
 8027fe8:	d1f5      	bne.n	8027fd6 <__s2b+0x4e>
 8027fea:	002c      	movs	r4, r5
 8027fec:	9b00      	ldr	r3, [sp, #0]
 8027fee:	3c08      	subs	r4, #8
 8027ff0:	191c      	adds	r4, r3, r4
 8027ff2:	002e      	movs	r6, r5
 8027ff4:	9b01      	ldr	r3, [sp, #4]
 8027ff6:	429e      	cmp	r6, r3
 8027ff8:	db04      	blt.n	8028004 <__s2b+0x7c>
 8027ffa:	0008      	movs	r0, r1
 8027ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027ffe:	2509      	movs	r5, #9
 8028000:	340a      	adds	r4, #10
 8028002:	e7f6      	b.n	8027ff2 <__s2b+0x6a>
 8028004:	1b63      	subs	r3, r4, r5
 8028006:	5d9b      	ldrb	r3, [r3, r6]
 8028008:	220a      	movs	r2, #10
 802800a:	0038      	movs	r0, r7
 802800c:	3b30      	subs	r3, #48	@ 0x30
 802800e:	f7ff ff77 	bl	8027f00 <__multadd>
 8028012:	3601      	adds	r6, #1
 8028014:	0001      	movs	r1, r0
 8028016:	e7ed      	b.n	8027ff4 <__s2b+0x6c>
 8028018:	0802ec7e 	.word	0x0802ec7e
 802801c:	0802ecef 	.word	0x0802ecef

08028020 <__hi0bits>:
 8028020:	2280      	movs	r2, #128	@ 0x80
 8028022:	0003      	movs	r3, r0
 8028024:	0252      	lsls	r2, r2, #9
 8028026:	2000      	movs	r0, #0
 8028028:	4293      	cmp	r3, r2
 802802a:	d201      	bcs.n	8028030 <__hi0bits+0x10>
 802802c:	041b      	lsls	r3, r3, #16
 802802e:	3010      	adds	r0, #16
 8028030:	2280      	movs	r2, #128	@ 0x80
 8028032:	0452      	lsls	r2, r2, #17
 8028034:	4293      	cmp	r3, r2
 8028036:	d201      	bcs.n	802803c <__hi0bits+0x1c>
 8028038:	3008      	adds	r0, #8
 802803a:	021b      	lsls	r3, r3, #8
 802803c:	2280      	movs	r2, #128	@ 0x80
 802803e:	0552      	lsls	r2, r2, #21
 8028040:	4293      	cmp	r3, r2
 8028042:	d201      	bcs.n	8028048 <__hi0bits+0x28>
 8028044:	3004      	adds	r0, #4
 8028046:	011b      	lsls	r3, r3, #4
 8028048:	2280      	movs	r2, #128	@ 0x80
 802804a:	05d2      	lsls	r2, r2, #23
 802804c:	4293      	cmp	r3, r2
 802804e:	d201      	bcs.n	8028054 <__hi0bits+0x34>
 8028050:	3002      	adds	r0, #2
 8028052:	009b      	lsls	r3, r3, #2
 8028054:	2b00      	cmp	r3, #0
 8028056:	db03      	blt.n	8028060 <__hi0bits+0x40>
 8028058:	3001      	adds	r0, #1
 802805a:	4213      	tst	r3, r2
 802805c:	d100      	bne.n	8028060 <__hi0bits+0x40>
 802805e:	2020      	movs	r0, #32
 8028060:	4770      	bx	lr

08028062 <__lo0bits>:
 8028062:	6803      	ldr	r3, [r0, #0]
 8028064:	0001      	movs	r1, r0
 8028066:	2207      	movs	r2, #7
 8028068:	0018      	movs	r0, r3
 802806a:	4010      	ands	r0, r2
 802806c:	4213      	tst	r3, r2
 802806e:	d00d      	beq.n	802808c <__lo0bits+0x2a>
 8028070:	3a06      	subs	r2, #6
 8028072:	2000      	movs	r0, #0
 8028074:	4213      	tst	r3, r2
 8028076:	d105      	bne.n	8028084 <__lo0bits+0x22>
 8028078:	3002      	adds	r0, #2
 802807a:	4203      	tst	r3, r0
 802807c:	d003      	beq.n	8028086 <__lo0bits+0x24>
 802807e:	40d3      	lsrs	r3, r2
 8028080:	0010      	movs	r0, r2
 8028082:	600b      	str	r3, [r1, #0]
 8028084:	4770      	bx	lr
 8028086:	089b      	lsrs	r3, r3, #2
 8028088:	600b      	str	r3, [r1, #0]
 802808a:	e7fb      	b.n	8028084 <__lo0bits+0x22>
 802808c:	b29a      	uxth	r2, r3
 802808e:	2a00      	cmp	r2, #0
 8028090:	d101      	bne.n	8028096 <__lo0bits+0x34>
 8028092:	2010      	movs	r0, #16
 8028094:	0c1b      	lsrs	r3, r3, #16
 8028096:	b2da      	uxtb	r2, r3
 8028098:	2a00      	cmp	r2, #0
 802809a:	d101      	bne.n	80280a0 <__lo0bits+0x3e>
 802809c:	3008      	adds	r0, #8
 802809e:	0a1b      	lsrs	r3, r3, #8
 80280a0:	071a      	lsls	r2, r3, #28
 80280a2:	d101      	bne.n	80280a8 <__lo0bits+0x46>
 80280a4:	3004      	adds	r0, #4
 80280a6:	091b      	lsrs	r3, r3, #4
 80280a8:	079a      	lsls	r2, r3, #30
 80280aa:	d101      	bne.n	80280b0 <__lo0bits+0x4e>
 80280ac:	3002      	adds	r0, #2
 80280ae:	089b      	lsrs	r3, r3, #2
 80280b0:	07da      	lsls	r2, r3, #31
 80280b2:	d4e9      	bmi.n	8028088 <__lo0bits+0x26>
 80280b4:	3001      	adds	r0, #1
 80280b6:	085b      	lsrs	r3, r3, #1
 80280b8:	d1e6      	bne.n	8028088 <__lo0bits+0x26>
 80280ba:	2020      	movs	r0, #32
 80280bc:	e7e2      	b.n	8028084 <__lo0bits+0x22>
	...

080280c0 <__i2b>:
 80280c0:	b510      	push	{r4, lr}
 80280c2:	000c      	movs	r4, r1
 80280c4:	2101      	movs	r1, #1
 80280c6:	f7ff feb3 	bl	8027e30 <_Balloc>
 80280ca:	2800      	cmp	r0, #0
 80280cc:	d107      	bne.n	80280de <__i2b+0x1e>
 80280ce:	2146      	movs	r1, #70	@ 0x46
 80280d0:	4c05      	ldr	r4, [pc, #20]	@ (80280e8 <__i2b+0x28>)
 80280d2:	0002      	movs	r2, r0
 80280d4:	4b05      	ldr	r3, [pc, #20]	@ (80280ec <__i2b+0x2c>)
 80280d6:	0020      	movs	r0, r4
 80280d8:	31ff      	adds	r1, #255	@ 0xff
 80280da:	f000 ff81 	bl	8028fe0 <__assert_func>
 80280de:	2301      	movs	r3, #1
 80280e0:	6144      	str	r4, [r0, #20]
 80280e2:	6103      	str	r3, [r0, #16]
 80280e4:	bd10      	pop	{r4, pc}
 80280e6:	46c0      	nop			@ (mov r8, r8)
 80280e8:	0802ecef 	.word	0x0802ecef
 80280ec:	0802ec7e 	.word	0x0802ec7e

080280f0 <__multiply>:
 80280f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80280f2:	0014      	movs	r4, r2
 80280f4:	690a      	ldr	r2, [r1, #16]
 80280f6:	6923      	ldr	r3, [r4, #16]
 80280f8:	000d      	movs	r5, r1
 80280fa:	b089      	sub	sp, #36	@ 0x24
 80280fc:	429a      	cmp	r2, r3
 80280fe:	db02      	blt.n	8028106 <__multiply+0x16>
 8028100:	0023      	movs	r3, r4
 8028102:	000c      	movs	r4, r1
 8028104:	001d      	movs	r5, r3
 8028106:	6927      	ldr	r7, [r4, #16]
 8028108:	692e      	ldr	r6, [r5, #16]
 802810a:	6861      	ldr	r1, [r4, #4]
 802810c:	19bb      	adds	r3, r7, r6
 802810e:	9300      	str	r3, [sp, #0]
 8028110:	68a3      	ldr	r3, [r4, #8]
 8028112:	19ba      	adds	r2, r7, r6
 8028114:	4293      	cmp	r3, r2
 8028116:	da00      	bge.n	802811a <__multiply+0x2a>
 8028118:	3101      	adds	r1, #1
 802811a:	f7ff fe89 	bl	8027e30 <_Balloc>
 802811e:	4684      	mov	ip, r0
 8028120:	2800      	cmp	r0, #0
 8028122:	d106      	bne.n	8028132 <__multiply+0x42>
 8028124:	21b1      	movs	r1, #177	@ 0xb1
 8028126:	4662      	mov	r2, ip
 8028128:	4b44      	ldr	r3, [pc, #272]	@ (802823c <__multiply+0x14c>)
 802812a:	4845      	ldr	r0, [pc, #276]	@ (8028240 <__multiply+0x150>)
 802812c:	0049      	lsls	r1, r1, #1
 802812e:	f000 ff57 	bl	8028fe0 <__assert_func>
 8028132:	0002      	movs	r2, r0
 8028134:	19bb      	adds	r3, r7, r6
 8028136:	3214      	adds	r2, #20
 8028138:	009b      	lsls	r3, r3, #2
 802813a:	18d3      	adds	r3, r2, r3
 802813c:	9301      	str	r3, [sp, #4]
 802813e:	2100      	movs	r1, #0
 8028140:	0013      	movs	r3, r2
 8028142:	9801      	ldr	r0, [sp, #4]
 8028144:	4283      	cmp	r3, r0
 8028146:	d328      	bcc.n	802819a <__multiply+0xaa>
 8028148:	0023      	movs	r3, r4
 802814a:	00bf      	lsls	r7, r7, #2
 802814c:	3314      	adds	r3, #20
 802814e:	9304      	str	r3, [sp, #16]
 8028150:	3514      	adds	r5, #20
 8028152:	19db      	adds	r3, r3, r7
 8028154:	00b6      	lsls	r6, r6, #2
 8028156:	9302      	str	r3, [sp, #8]
 8028158:	19ab      	adds	r3, r5, r6
 802815a:	9307      	str	r3, [sp, #28]
 802815c:	2304      	movs	r3, #4
 802815e:	9305      	str	r3, [sp, #20]
 8028160:	0023      	movs	r3, r4
 8028162:	9902      	ldr	r1, [sp, #8]
 8028164:	3315      	adds	r3, #21
 8028166:	4299      	cmp	r1, r3
 8028168:	d305      	bcc.n	8028176 <__multiply+0x86>
 802816a:	1b0c      	subs	r4, r1, r4
 802816c:	3c15      	subs	r4, #21
 802816e:	08a4      	lsrs	r4, r4, #2
 8028170:	3401      	adds	r4, #1
 8028172:	00a3      	lsls	r3, r4, #2
 8028174:	9305      	str	r3, [sp, #20]
 8028176:	9b07      	ldr	r3, [sp, #28]
 8028178:	429d      	cmp	r5, r3
 802817a:	d310      	bcc.n	802819e <__multiply+0xae>
 802817c:	9b00      	ldr	r3, [sp, #0]
 802817e:	2b00      	cmp	r3, #0
 8028180:	dd05      	ble.n	802818e <__multiply+0x9e>
 8028182:	9b01      	ldr	r3, [sp, #4]
 8028184:	3b04      	subs	r3, #4
 8028186:	9301      	str	r3, [sp, #4]
 8028188:	681b      	ldr	r3, [r3, #0]
 802818a:	2b00      	cmp	r3, #0
 802818c:	d052      	beq.n	8028234 <__multiply+0x144>
 802818e:	4663      	mov	r3, ip
 8028190:	4660      	mov	r0, ip
 8028192:	9a00      	ldr	r2, [sp, #0]
 8028194:	611a      	str	r2, [r3, #16]
 8028196:	b009      	add	sp, #36	@ 0x24
 8028198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802819a:	c302      	stmia	r3!, {r1}
 802819c:	e7d1      	b.n	8028142 <__multiply+0x52>
 802819e:	682c      	ldr	r4, [r5, #0]
 80281a0:	b2a4      	uxth	r4, r4
 80281a2:	2c00      	cmp	r4, #0
 80281a4:	d01f      	beq.n	80281e6 <__multiply+0xf6>
 80281a6:	2300      	movs	r3, #0
 80281a8:	0017      	movs	r7, r2
 80281aa:	9e04      	ldr	r6, [sp, #16]
 80281ac:	9303      	str	r3, [sp, #12]
 80281ae:	ce08      	ldmia	r6!, {r3}
 80281b0:	6839      	ldr	r1, [r7, #0]
 80281b2:	9306      	str	r3, [sp, #24]
 80281b4:	466b      	mov	r3, sp
 80281b6:	8b1b      	ldrh	r3, [r3, #24]
 80281b8:	b288      	uxth	r0, r1
 80281ba:	4363      	muls	r3, r4
 80281bc:	181b      	adds	r3, r3, r0
 80281be:	9803      	ldr	r0, [sp, #12]
 80281c0:	0c09      	lsrs	r1, r1, #16
 80281c2:	181b      	adds	r3, r3, r0
 80281c4:	9806      	ldr	r0, [sp, #24]
 80281c6:	0c00      	lsrs	r0, r0, #16
 80281c8:	4360      	muls	r0, r4
 80281ca:	1840      	adds	r0, r0, r1
 80281cc:	0c19      	lsrs	r1, r3, #16
 80281ce:	1841      	adds	r1, r0, r1
 80281d0:	0c08      	lsrs	r0, r1, #16
 80281d2:	b29b      	uxth	r3, r3
 80281d4:	0409      	lsls	r1, r1, #16
 80281d6:	4319      	orrs	r1, r3
 80281d8:	9b02      	ldr	r3, [sp, #8]
 80281da:	9003      	str	r0, [sp, #12]
 80281dc:	c702      	stmia	r7!, {r1}
 80281de:	42b3      	cmp	r3, r6
 80281e0:	d8e5      	bhi.n	80281ae <__multiply+0xbe>
 80281e2:	9b05      	ldr	r3, [sp, #20]
 80281e4:	50d0      	str	r0, [r2, r3]
 80281e6:	682c      	ldr	r4, [r5, #0]
 80281e8:	0c24      	lsrs	r4, r4, #16
 80281ea:	d020      	beq.n	802822e <__multiply+0x13e>
 80281ec:	2100      	movs	r1, #0
 80281ee:	0010      	movs	r0, r2
 80281f0:	6813      	ldr	r3, [r2, #0]
 80281f2:	9e04      	ldr	r6, [sp, #16]
 80281f4:	9103      	str	r1, [sp, #12]
 80281f6:	6831      	ldr	r1, [r6, #0]
 80281f8:	6807      	ldr	r7, [r0, #0]
 80281fa:	b289      	uxth	r1, r1
 80281fc:	4361      	muls	r1, r4
 80281fe:	0c3f      	lsrs	r7, r7, #16
 8028200:	19c9      	adds	r1, r1, r7
 8028202:	9f03      	ldr	r7, [sp, #12]
 8028204:	b29b      	uxth	r3, r3
 8028206:	19c9      	adds	r1, r1, r7
 8028208:	040f      	lsls	r7, r1, #16
 802820a:	431f      	orrs	r7, r3
 802820c:	6007      	str	r7, [r0, #0]
 802820e:	ce80      	ldmia	r6!, {r7}
 8028210:	6843      	ldr	r3, [r0, #4]
 8028212:	0c3f      	lsrs	r7, r7, #16
 8028214:	4367      	muls	r7, r4
 8028216:	b29b      	uxth	r3, r3
 8028218:	0c09      	lsrs	r1, r1, #16
 802821a:	18fb      	adds	r3, r7, r3
 802821c:	185b      	adds	r3, r3, r1
 802821e:	0c19      	lsrs	r1, r3, #16
 8028220:	9103      	str	r1, [sp, #12]
 8028222:	9902      	ldr	r1, [sp, #8]
 8028224:	3004      	adds	r0, #4
 8028226:	42b1      	cmp	r1, r6
 8028228:	d8e5      	bhi.n	80281f6 <__multiply+0x106>
 802822a:	9905      	ldr	r1, [sp, #20]
 802822c:	5053      	str	r3, [r2, r1]
 802822e:	3504      	adds	r5, #4
 8028230:	3204      	adds	r2, #4
 8028232:	e7a0      	b.n	8028176 <__multiply+0x86>
 8028234:	9b00      	ldr	r3, [sp, #0]
 8028236:	3b01      	subs	r3, #1
 8028238:	9300      	str	r3, [sp, #0]
 802823a:	e79f      	b.n	802817c <__multiply+0x8c>
 802823c:	0802ec7e 	.word	0x0802ec7e
 8028240:	0802ecef 	.word	0x0802ecef

08028244 <__pow5mult>:
 8028244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028246:	2303      	movs	r3, #3
 8028248:	0015      	movs	r5, r2
 802824a:	0007      	movs	r7, r0
 802824c:	000e      	movs	r6, r1
 802824e:	401a      	ands	r2, r3
 8028250:	421d      	tst	r5, r3
 8028252:	d008      	beq.n	8028266 <__pow5mult+0x22>
 8028254:	4925      	ldr	r1, [pc, #148]	@ (80282ec <__pow5mult+0xa8>)
 8028256:	3a01      	subs	r2, #1
 8028258:	0092      	lsls	r2, r2, #2
 802825a:	5852      	ldr	r2, [r2, r1]
 802825c:	2300      	movs	r3, #0
 802825e:	0031      	movs	r1, r6
 8028260:	f7ff fe4e 	bl	8027f00 <__multadd>
 8028264:	0006      	movs	r6, r0
 8028266:	10ad      	asrs	r5, r5, #2
 8028268:	d03d      	beq.n	80282e6 <__pow5mult+0xa2>
 802826a:	69fc      	ldr	r4, [r7, #28]
 802826c:	2c00      	cmp	r4, #0
 802826e:	d10f      	bne.n	8028290 <__pow5mult+0x4c>
 8028270:	2010      	movs	r0, #16
 8028272:	f7ff fd0f 	bl	8027c94 <malloc>
 8028276:	1e02      	subs	r2, r0, #0
 8028278:	61f8      	str	r0, [r7, #28]
 802827a:	d105      	bne.n	8028288 <__pow5mult+0x44>
 802827c:	21b4      	movs	r1, #180	@ 0xb4
 802827e:	4b1c      	ldr	r3, [pc, #112]	@ (80282f0 <__pow5mult+0xac>)
 8028280:	481c      	ldr	r0, [pc, #112]	@ (80282f4 <__pow5mult+0xb0>)
 8028282:	31ff      	adds	r1, #255	@ 0xff
 8028284:	f000 feac 	bl	8028fe0 <__assert_func>
 8028288:	6044      	str	r4, [r0, #4]
 802828a:	6084      	str	r4, [r0, #8]
 802828c:	6004      	str	r4, [r0, #0]
 802828e:	60c4      	str	r4, [r0, #12]
 8028290:	69fb      	ldr	r3, [r7, #28]
 8028292:	689c      	ldr	r4, [r3, #8]
 8028294:	9301      	str	r3, [sp, #4]
 8028296:	2c00      	cmp	r4, #0
 8028298:	d108      	bne.n	80282ac <__pow5mult+0x68>
 802829a:	0038      	movs	r0, r7
 802829c:	4916      	ldr	r1, [pc, #88]	@ (80282f8 <__pow5mult+0xb4>)
 802829e:	f7ff ff0f 	bl	80280c0 <__i2b>
 80282a2:	9b01      	ldr	r3, [sp, #4]
 80282a4:	0004      	movs	r4, r0
 80282a6:	6098      	str	r0, [r3, #8]
 80282a8:	2300      	movs	r3, #0
 80282aa:	6003      	str	r3, [r0, #0]
 80282ac:	2301      	movs	r3, #1
 80282ae:	421d      	tst	r5, r3
 80282b0:	d00a      	beq.n	80282c8 <__pow5mult+0x84>
 80282b2:	0031      	movs	r1, r6
 80282b4:	0022      	movs	r2, r4
 80282b6:	0038      	movs	r0, r7
 80282b8:	f7ff ff1a 	bl	80280f0 <__multiply>
 80282bc:	0031      	movs	r1, r6
 80282be:	9001      	str	r0, [sp, #4]
 80282c0:	0038      	movs	r0, r7
 80282c2:	f7ff fdf9 	bl	8027eb8 <_Bfree>
 80282c6:	9e01      	ldr	r6, [sp, #4]
 80282c8:	106d      	asrs	r5, r5, #1
 80282ca:	d00c      	beq.n	80282e6 <__pow5mult+0xa2>
 80282cc:	6820      	ldr	r0, [r4, #0]
 80282ce:	2800      	cmp	r0, #0
 80282d0:	d107      	bne.n	80282e2 <__pow5mult+0x9e>
 80282d2:	0022      	movs	r2, r4
 80282d4:	0021      	movs	r1, r4
 80282d6:	0038      	movs	r0, r7
 80282d8:	f7ff ff0a 	bl	80280f0 <__multiply>
 80282dc:	2300      	movs	r3, #0
 80282de:	6020      	str	r0, [r4, #0]
 80282e0:	6003      	str	r3, [r0, #0]
 80282e2:	0004      	movs	r4, r0
 80282e4:	e7e2      	b.n	80282ac <__pow5mult+0x68>
 80282e6:	0030      	movs	r0, r6
 80282e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80282ea:	46c0      	nop			@ (mov r8, r8)
 80282ec:	0802eeec 	.word	0x0802eeec
 80282f0:	0802ec0f 	.word	0x0802ec0f
 80282f4:	0802ecef 	.word	0x0802ecef
 80282f8:	00000271 	.word	0x00000271

080282fc <__lshift>:
 80282fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80282fe:	000c      	movs	r4, r1
 8028300:	0016      	movs	r6, r2
 8028302:	6923      	ldr	r3, [r4, #16]
 8028304:	1157      	asrs	r7, r2, #5
 8028306:	b085      	sub	sp, #20
 8028308:	18fb      	adds	r3, r7, r3
 802830a:	9301      	str	r3, [sp, #4]
 802830c:	3301      	adds	r3, #1
 802830e:	9300      	str	r3, [sp, #0]
 8028310:	6849      	ldr	r1, [r1, #4]
 8028312:	68a3      	ldr	r3, [r4, #8]
 8028314:	9002      	str	r0, [sp, #8]
 8028316:	9a00      	ldr	r2, [sp, #0]
 8028318:	4293      	cmp	r3, r2
 802831a:	db10      	blt.n	802833e <__lshift+0x42>
 802831c:	9802      	ldr	r0, [sp, #8]
 802831e:	f7ff fd87 	bl	8027e30 <_Balloc>
 8028322:	2300      	movs	r3, #0
 8028324:	0001      	movs	r1, r0
 8028326:	0005      	movs	r5, r0
 8028328:	001a      	movs	r2, r3
 802832a:	3114      	adds	r1, #20
 802832c:	4298      	cmp	r0, r3
 802832e:	d10c      	bne.n	802834a <__lshift+0x4e>
 8028330:	21ef      	movs	r1, #239	@ 0xef
 8028332:	002a      	movs	r2, r5
 8028334:	4b25      	ldr	r3, [pc, #148]	@ (80283cc <__lshift+0xd0>)
 8028336:	4826      	ldr	r0, [pc, #152]	@ (80283d0 <__lshift+0xd4>)
 8028338:	0049      	lsls	r1, r1, #1
 802833a:	f000 fe51 	bl	8028fe0 <__assert_func>
 802833e:	3101      	adds	r1, #1
 8028340:	005b      	lsls	r3, r3, #1
 8028342:	e7e8      	b.n	8028316 <__lshift+0x1a>
 8028344:	0098      	lsls	r0, r3, #2
 8028346:	500a      	str	r2, [r1, r0]
 8028348:	3301      	adds	r3, #1
 802834a:	42bb      	cmp	r3, r7
 802834c:	dbfa      	blt.n	8028344 <__lshift+0x48>
 802834e:	43fb      	mvns	r3, r7
 8028350:	17db      	asrs	r3, r3, #31
 8028352:	401f      	ands	r7, r3
 8028354:	00bf      	lsls	r7, r7, #2
 8028356:	0023      	movs	r3, r4
 8028358:	201f      	movs	r0, #31
 802835a:	19c9      	adds	r1, r1, r7
 802835c:	0037      	movs	r7, r6
 802835e:	6922      	ldr	r2, [r4, #16]
 8028360:	3314      	adds	r3, #20
 8028362:	0092      	lsls	r2, r2, #2
 8028364:	189a      	adds	r2, r3, r2
 8028366:	4007      	ands	r7, r0
 8028368:	4206      	tst	r6, r0
 802836a:	d029      	beq.n	80283c0 <__lshift+0xc4>
 802836c:	3001      	adds	r0, #1
 802836e:	1bc0      	subs	r0, r0, r7
 8028370:	9003      	str	r0, [sp, #12]
 8028372:	468c      	mov	ip, r1
 8028374:	2000      	movs	r0, #0
 8028376:	681e      	ldr	r6, [r3, #0]
 8028378:	40be      	lsls	r6, r7
 802837a:	4306      	orrs	r6, r0
 802837c:	4660      	mov	r0, ip
 802837e:	c040      	stmia	r0!, {r6}
 8028380:	4684      	mov	ip, r0
 8028382:	9e03      	ldr	r6, [sp, #12]
 8028384:	cb01      	ldmia	r3!, {r0}
 8028386:	40f0      	lsrs	r0, r6
 8028388:	429a      	cmp	r2, r3
 802838a:	d8f4      	bhi.n	8028376 <__lshift+0x7a>
 802838c:	0026      	movs	r6, r4
 802838e:	3615      	adds	r6, #21
 8028390:	2304      	movs	r3, #4
 8028392:	42b2      	cmp	r2, r6
 8028394:	d304      	bcc.n	80283a0 <__lshift+0xa4>
 8028396:	1b13      	subs	r3, r2, r4
 8028398:	3b15      	subs	r3, #21
 802839a:	089b      	lsrs	r3, r3, #2
 802839c:	3301      	adds	r3, #1
 802839e:	009b      	lsls	r3, r3, #2
 80283a0:	50c8      	str	r0, [r1, r3]
 80283a2:	2800      	cmp	r0, #0
 80283a4:	d002      	beq.n	80283ac <__lshift+0xb0>
 80283a6:	9b01      	ldr	r3, [sp, #4]
 80283a8:	3302      	adds	r3, #2
 80283aa:	9300      	str	r3, [sp, #0]
 80283ac:	9b00      	ldr	r3, [sp, #0]
 80283ae:	9802      	ldr	r0, [sp, #8]
 80283b0:	3b01      	subs	r3, #1
 80283b2:	0021      	movs	r1, r4
 80283b4:	612b      	str	r3, [r5, #16]
 80283b6:	f7ff fd7f 	bl	8027eb8 <_Bfree>
 80283ba:	0028      	movs	r0, r5
 80283bc:	b005      	add	sp, #20
 80283be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80283c0:	cb01      	ldmia	r3!, {r0}
 80283c2:	c101      	stmia	r1!, {r0}
 80283c4:	429a      	cmp	r2, r3
 80283c6:	d8fb      	bhi.n	80283c0 <__lshift+0xc4>
 80283c8:	e7f0      	b.n	80283ac <__lshift+0xb0>
 80283ca:	46c0      	nop			@ (mov r8, r8)
 80283cc:	0802ec7e 	.word	0x0802ec7e
 80283d0:	0802ecef 	.word	0x0802ecef

080283d4 <__mcmp>:
 80283d4:	b530      	push	{r4, r5, lr}
 80283d6:	690b      	ldr	r3, [r1, #16]
 80283d8:	6904      	ldr	r4, [r0, #16]
 80283da:	0002      	movs	r2, r0
 80283dc:	1ae0      	subs	r0, r4, r3
 80283de:	429c      	cmp	r4, r3
 80283e0:	d10f      	bne.n	8028402 <__mcmp+0x2e>
 80283e2:	3214      	adds	r2, #20
 80283e4:	009b      	lsls	r3, r3, #2
 80283e6:	3114      	adds	r1, #20
 80283e8:	0014      	movs	r4, r2
 80283ea:	18c9      	adds	r1, r1, r3
 80283ec:	18d2      	adds	r2, r2, r3
 80283ee:	3a04      	subs	r2, #4
 80283f0:	3904      	subs	r1, #4
 80283f2:	6815      	ldr	r5, [r2, #0]
 80283f4:	680b      	ldr	r3, [r1, #0]
 80283f6:	429d      	cmp	r5, r3
 80283f8:	d004      	beq.n	8028404 <__mcmp+0x30>
 80283fa:	2001      	movs	r0, #1
 80283fc:	429d      	cmp	r5, r3
 80283fe:	d200      	bcs.n	8028402 <__mcmp+0x2e>
 8028400:	3802      	subs	r0, #2
 8028402:	bd30      	pop	{r4, r5, pc}
 8028404:	4294      	cmp	r4, r2
 8028406:	d3f2      	bcc.n	80283ee <__mcmp+0x1a>
 8028408:	e7fb      	b.n	8028402 <__mcmp+0x2e>
	...

0802840c <__mdiff>:
 802840c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802840e:	000c      	movs	r4, r1
 8028410:	b087      	sub	sp, #28
 8028412:	9000      	str	r0, [sp, #0]
 8028414:	0011      	movs	r1, r2
 8028416:	0020      	movs	r0, r4
 8028418:	0017      	movs	r7, r2
 802841a:	f7ff ffdb 	bl	80283d4 <__mcmp>
 802841e:	1e05      	subs	r5, r0, #0
 8028420:	d110      	bne.n	8028444 <__mdiff+0x38>
 8028422:	0001      	movs	r1, r0
 8028424:	9800      	ldr	r0, [sp, #0]
 8028426:	f7ff fd03 	bl	8027e30 <_Balloc>
 802842a:	1e02      	subs	r2, r0, #0
 802842c:	d104      	bne.n	8028438 <__mdiff+0x2c>
 802842e:	4b40      	ldr	r3, [pc, #256]	@ (8028530 <__mdiff+0x124>)
 8028430:	4840      	ldr	r0, [pc, #256]	@ (8028534 <__mdiff+0x128>)
 8028432:	4941      	ldr	r1, [pc, #260]	@ (8028538 <__mdiff+0x12c>)
 8028434:	f000 fdd4 	bl	8028fe0 <__assert_func>
 8028438:	2301      	movs	r3, #1
 802843a:	6145      	str	r5, [r0, #20]
 802843c:	6103      	str	r3, [r0, #16]
 802843e:	0010      	movs	r0, r2
 8028440:	b007      	add	sp, #28
 8028442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028444:	2600      	movs	r6, #0
 8028446:	42b0      	cmp	r0, r6
 8028448:	da03      	bge.n	8028452 <__mdiff+0x46>
 802844a:	0023      	movs	r3, r4
 802844c:	003c      	movs	r4, r7
 802844e:	001f      	movs	r7, r3
 8028450:	3601      	adds	r6, #1
 8028452:	6861      	ldr	r1, [r4, #4]
 8028454:	9800      	ldr	r0, [sp, #0]
 8028456:	f7ff fceb 	bl	8027e30 <_Balloc>
 802845a:	1e02      	subs	r2, r0, #0
 802845c:	d103      	bne.n	8028466 <__mdiff+0x5a>
 802845e:	4b34      	ldr	r3, [pc, #208]	@ (8028530 <__mdiff+0x124>)
 8028460:	4834      	ldr	r0, [pc, #208]	@ (8028534 <__mdiff+0x128>)
 8028462:	4936      	ldr	r1, [pc, #216]	@ (802853c <__mdiff+0x130>)
 8028464:	e7e6      	b.n	8028434 <__mdiff+0x28>
 8028466:	6923      	ldr	r3, [r4, #16]
 8028468:	3414      	adds	r4, #20
 802846a:	9300      	str	r3, [sp, #0]
 802846c:	009b      	lsls	r3, r3, #2
 802846e:	18e3      	adds	r3, r4, r3
 8028470:	0021      	movs	r1, r4
 8028472:	9401      	str	r4, [sp, #4]
 8028474:	003c      	movs	r4, r7
 8028476:	9302      	str	r3, [sp, #8]
 8028478:	693b      	ldr	r3, [r7, #16]
 802847a:	3414      	adds	r4, #20
 802847c:	009b      	lsls	r3, r3, #2
 802847e:	18e3      	adds	r3, r4, r3
 8028480:	9303      	str	r3, [sp, #12]
 8028482:	0003      	movs	r3, r0
 8028484:	60c6      	str	r6, [r0, #12]
 8028486:	468c      	mov	ip, r1
 8028488:	2000      	movs	r0, #0
 802848a:	3314      	adds	r3, #20
 802848c:	9304      	str	r3, [sp, #16]
 802848e:	9305      	str	r3, [sp, #20]
 8028490:	4663      	mov	r3, ip
 8028492:	cb20      	ldmia	r3!, {r5}
 8028494:	b2a9      	uxth	r1, r5
 8028496:	000e      	movs	r6, r1
 8028498:	469c      	mov	ip, r3
 802849a:	cc08      	ldmia	r4!, {r3}
 802849c:	0c2d      	lsrs	r5, r5, #16
 802849e:	b299      	uxth	r1, r3
 80284a0:	1a71      	subs	r1, r6, r1
 80284a2:	1809      	adds	r1, r1, r0
 80284a4:	0c1b      	lsrs	r3, r3, #16
 80284a6:	1408      	asrs	r0, r1, #16
 80284a8:	1aeb      	subs	r3, r5, r3
 80284aa:	181b      	adds	r3, r3, r0
 80284ac:	1418      	asrs	r0, r3, #16
 80284ae:	b289      	uxth	r1, r1
 80284b0:	041b      	lsls	r3, r3, #16
 80284b2:	4319      	orrs	r1, r3
 80284b4:	9b05      	ldr	r3, [sp, #20]
 80284b6:	c302      	stmia	r3!, {r1}
 80284b8:	9305      	str	r3, [sp, #20]
 80284ba:	9b03      	ldr	r3, [sp, #12]
 80284bc:	42a3      	cmp	r3, r4
 80284be:	d8e7      	bhi.n	8028490 <__mdiff+0x84>
 80284c0:	0039      	movs	r1, r7
 80284c2:	9c03      	ldr	r4, [sp, #12]
 80284c4:	3115      	adds	r1, #21
 80284c6:	2304      	movs	r3, #4
 80284c8:	428c      	cmp	r4, r1
 80284ca:	d304      	bcc.n	80284d6 <__mdiff+0xca>
 80284cc:	1be3      	subs	r3, r4, r7
 80284ce:	3b15      	subs	r3, #21
 80284d0:	089b      	lsrs	r3, r3, #2
 80284d2:	3301      	adds	r3, #1
 80284d4:	009b      	lsls	r3, r3, #2
 80284d6:	9901      	ldr	r1, [sp, #4]
 80284d8:	18cd      	adds	r5, r1, r3
 80284da:	9904      	ldr	r1, [sp, #16]
 80284dc:	002e      	movs	r6, r5
 80284de:	18cb      	adds	r3, r1, r3
 80284e0:	001f      	movs	r7, r3
 80284e2:	9902      	ldr	r1, [sp, #8]
 80284e4:	428e      	cmp	r6, r1
 80284e6:	d311      	bcc.n	802850c <__mdiff+0x100>
 80284e8:	9c02      	ldr	r4, [sp, #8]
 80284ea:	1ee9      	subs	r1, r5, #3
 80284ec:	2000      	movs	r0, #0
 80284ee:	428c      	cmp	r4, r1
 80284f0:	d304      	bcc.n	80284fc <__mdiff+0xf0>
 80284f2:	0021      	movs	r1, r4
 80284f4:	3103      	adds	r1, #3
 80284f6:	1b49      	subs	r1, r1, r5
 80284f8:	0889      	lsrs	r1, r1, #2
 80284fa:	0088      	lsls	r0, r1, #2
 80284fc:	181b      	adds	r3, r3, r0
 80284fe:	3b04      	subs	r3, #4
 8028500:	6819      	ldr	r1, [r3, #0]
 8028502:	2900      	cmp	r1, #0
 8028504:	d010      	beq.n	8028528 <__mdiff+0x11c>
 8028506:	9b00      	ldr	r3, [sp, #0]
 8028508:	6113      	str	r3, [r2, #16]
 802850a:	e798      	b.n	802843e <__mdiff+0x32>
 802850c:	4684      	mov	ip, r0
 802850e:	ce02      	ldmia	r6!, {r1}
 8028510:	b288      	uxth	r0, r1
 8028512:	4460      	add	r0, ip
 8028514:	1400      	asrs	r0, r0, #16
 8028516:	0c0c      	lsrs	r4, r1, #16
 8028518:	1904      	adds	r4, r0, r4
 802851a:	4461      	add	r1, ip
 802851c:	1420      	asrs	r0, r4, #16
 802851e:	b289      	uxth	r1, r1
 8028520:	0424      	lsls	r4, r4, #16
 8028522:	4321      	orrs	r1, r4
 8028524:	c702      	stmia	r7!, {r1}
 8028526:	e7dc      	b.n	80284e2 <__mdiff+0xd6>
 8028528:	9900      	ldr	r1, [sp, #0]
 802852a:	3901      	subs	r1, #1
 802852c:	9100      	str	r1, [sp, #0]
 802852e:	e7e6      	b.n	80284fe <__mdiff+0xf2>
 8028530:	0802ec7e 	.word	0x0802ec7e
 8028534:	0802ecef 	.word	0x0802ecef
 8028538:	00000237 	.word	0x00000237
 802853c:	00000245 	.word	0x00000245

08028540 <__ulp>:
 8028540:	b510      	push	{r4, lr}
 8028542:	2400      	movs	r4, #0
 8028544:	4b0c      	ldr	r3, [pc, #48]	@ (8028578 <__ulp+0x38>)
 8028546:	4a0d      	ldr	r2, [pc, #52]	@ (802857c <__ulp+0x3c>)
 8028548:	400b      	ands	r3, r1
 802854a:	189b      	adds	r3, r3, r2
 802854c:	42a3      	cmp	r3, r4
 802854e:	dc06      	bgt.n	802855e <__ulp+0x1e>
 8028550:	425b      	negs	r3, r3
 8028552:	151a      	asrs	r2, r3, #20
 8028554:	2a13      	cmp	r2, #19
 8028556:	dc05      	bgt.n	8028564 <__ulp+0x24>
 8028558:	2380      	movs	r3, #128	@ 0x80
 802855a:	031b      	lsls	r3, r3, #12
 802855c:	4113      	asrs	r3, r2
 802855e:	0019      	movs	r1, r3
 8028560:	0020      	movs	r0, r4
 8028562:	bd10      	pop	{r4, pc}
 8028564:	3a14      	subs	r2, #20
 8028566:	2401      	movs	r4, #1
 8028568:	2a1e      	cmp	r2, #30
 802856a:	dc02      	bgt.n	8028572 <__ulp+0x32>
 802856c:	2480      	movs	r4, #128	@ 0x80
 802856e:	0624      	lsls	r4, r4, #24
 8028570:	40d4      	lsrs	r4, r2
 8028572:	2300      	movs	r3, #0
 8028574:	e7f3      	b.n	802855e <__ulp+0x1e>
 8028576:	46c0      	nop			@ (mov r8, r8)
 8028578:	7ff00000 	.word	0x7ff00000
 802857c:	fcc00000 	.word	0xfcc00000

08028580 <__b2d>:
 8028580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028582:	0006      	movs	r6, r0
 8028584:	6903      	ldr	r3, [r0, #16]
 8028586:	3614      	adds	r6, #20
 8028588:	009b      	lsls	r3, r3, #2
 802858a:	18f3      	adds	r3, r6, r3
 802858c:	1f1d      	subs	r5, r3, #4
 802858e:	682c      	ldr	r4, [r5, #0]
 8028590:	000f      	movs	r7, r1
 8028592:	0020      	movs	r0, r4
 8028594:	9301      	str	r3, [sp, #4]
 8028596:	f7ff fd43 	bl	8028020 <__hi0bits>
 802859a:	2220      	movs	r2, #32
 802859c:	1a12      	subs	r2, r2, r0
 802859e:	603a      	str	r2, [r7, #0]
 80285a0:	0003      	movs	r3, r0
 80285a2:	4a1c      	ldr	r2, [pc, #112]	@ (8028614 <__b2d+0x94>)
 80285a4:	280a      	cmp	r0, #10
 80285a6:	dc15      	bgt.n	80285d4 <__b2d+0x54>
 80285a8:	210b      	movs	r1, #11
 80285aa:	0027      	movs	r7, r4
 80285ac:	1a09      	subs	r1, r1, r0
 80285ae:	40cf      	lsrs	r7, r1
 80285b0:	433a      	orrs	r2, r7
 80285b2:	468c      	mov	ip, r1
 80285b4:	0011      	movs	r1, r2
 80285b6:	2200      	movs	r2, #0
 80285b8:	42ae      	cmp	r6, r5
 80285ba:	d202      	bcs.n	80285c2 <__b2d+0x42>
 80285bc:	9a01      	ldr	r2, [sp, #4]
 80285be:	3a08      	subs	r2, #8
 80285c0:	6812      	ldr	r2, [r2, #0]
 80285c2:	3315      	adds	r3, #21
 80285c4:	409c      	lsls	r4, r3
 80285c6:	4663      	mov	r3, ip
 80285c8:	0027      	movs	r7, r4
 80285ca:	40da      	lsrs	r2, r3
 80285cc:	4317      	orrs	r7, r2
 80285ce:	0038      	movs	r0, r7
 80285d0:	b003      	add	sp, #12
 80285d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285d4:	2700      	movs	r7, #0
 80285d6:	42ae      	cmp	r6, r5
 80285d8:	d202      	bcs.n	80285e0 <__b2d+0x60>
 80285da:	9d01      	ldr	r5, [sp, #4]
 80285dc:	3d08      	subs	r5, #8
 80285de:	682f      	ldr	r7, [r5, #0]
 80285e0:	210b      	movs	r1, #11
 80285e2:	4249      	negs	r1, r1
 80285e4:	468c      	mov	ip, r1
 80285e6:	449c      	add	ip, r3
 80285e8:	2b0b      	cmp	r3, #11
 80285ea:	d010      	beq.n	802860e <__b2d+0x8e>
 80285ec:	4661      	mov	r1, ip
 80285ee:	2320      	movs	r3, #32
 80285f0:	408c      	lsls	r4, r1
 80285f2:	1a5b      	subs	r3, r3, r1
 80285f4:	0039      	movs	r1, r7
 80285f6:	40d9      	lsrs	r1, r3
 80285f8:	430c      	orrs	r4, r1
 80285fa:	4322      	orrs	r2, r4
 80285fc:	0011      	movs	r1, r2
 80285fe:	2200      	movs	r2, #0
 8028600:	42b5      	cmp	r5, r6
 8028602:	d901      	bls.n	8028608 <__b2d+0x88>
 8028604:	3d04      	subs	r5, #4
 8028606:	682a      	ldr	r2, [r5, #0]
 8028608:	4664      	mov	r4, ip
 802860a:	40a7      	lsls	r7, r4
 802860c:	e7dd      	b.n	80285ca <__b2d+0x4a>
 802860e:	4322      	orrs	r2, r4
 8028610:	0011      	movs	r1, r2
 8028612:	e7dc      	b.n	80285ce <__b2d+0x4e>
 8028614:	3ff00000 	.word	0x3ff00000

08028618 <__d2b>:
 8028618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802861a:	2101      	movs	r1, #1
 802861c:	0016      	movs	r6, r2
 802861e:	001f      	movs	r7, r3
 8028620:	f7ff fc06 	bl	8027e30 <_Balloc>
 8028624:	1e04      	subs	r4, r0, #0
 8028626:	d105      	bne.n	8028634 <__d2b+0x1c>
 8028628:	0022      	movs	r2, r4
 802862a:	4b25      	ldr	r3, [pc, #148]	@ (80286c0 <__d2b+0xa8>)
 802862c:	4825      	ldr	r0, [pc, #148]	@ (80286c4 <__d2b+0xac>)
 802862e:	4926      	ldr	r1, [pc, #152]	@ (80286c8 <__d2b+0xb0>)
 8028630:	f000 fcd6 	bl	8028fe0 <__assert_func>
 8028634:	033b      	lsls	r3, r7, #12
 8028636:	007d      	lsls	r5, r7, #1
 8028638:	0b1b      	lsrs	r3, r3, #12
 802863a:	0d6d      	lsrs	r5, r5, #21
 802863c:	d002      	beq.n	8028644 <__d2b+0x2c>
 802863e:	2280      	movs	r2, #128	@ 0x80
 8028640:	0352      	lsls	r2, r2, #13
 8028642:	4313      	orrs	r3, r2
 8028644:	9301      	str	r3, [sp, #4]
 8028646:	2e00      	cmp	r6, #0
 8028648:	d025      	beq.n	8028696 <__d2b+0x7e>
 802864a:	4668      	mov	r0, sp
 802864c:	9600      	str	r6, [sp, #0]
 802864e:	f7ff fd08 	bl	8028062 <__lo0bits>
 8028652:	9b01      	ldr	r3, [sp, #4]
 8028654:	9900      	ldr	r1, [sp, #0]
 8028656:	2800      	cmp	r0, #0
 8028658:	d01b      	beq.n	8028692 <__d2b+0x7a>
 802865a:	2220      	movs	r2, #32
 802865c:	001e      	movs	r6, r3
 802865e:	1a12      	subs	r2, r2, r0
 8028660:	4096      	lsls	r6, r2
 8028662:	0032      	movs	r2, r6
 8028664:	40c3      	lsrs	r3, r0
 8028666:	430a      	orrs	r2, r1
 8028668:	6162      	str	r2, [r4, #20]
 802866a:	9301      	str	r3, [sp, #4]
 802866c:	9e01      	ldr	r6, [sp, #4]
 802866e:	61a6      	str	r6, [r4, #24]
 8028670:	1e73      	subs	r3, r6, #1
 8028672:	419e      	sbcs	r6, r3
 8028674:	3601      	adds	r6, #1
 8028676:	6126      	str	r6, [r4, #16]
 8028678:	2d00      	cmp	r5, #0
 802867a:	d014      	beq.n	80286a6 <__d2b+0x8e>
 802867c:	2635      	movs	r6, #53	@ 0x35
 802867e:	4b13      	ldr	r3, [pc, #76]	@ (80286cc <__d2b+0xb4>)
 8028680:	18ed      	adds	r5, r5, r3
 8028682:	9b08      	ldr	r3, [sp, #32]
 8028684:	182d      	adds	r5, r5, r0
 8028686:	601d      	str	r5, [r3, #0]
 8028688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802868a:	1a36      	subs	r6, r6, r0
 802868c:	601e      	str	r6, [r3, #0]
 802868e:	0020      	movs	r0, r4
 8028690:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028692:	6161      	str	r1, [r4, #20]
 8028694:	e7ea      	b.n	802866c <__d2b+0x54>
 8028696:	a801      	add	r0, sp, #4
 8028698:	f7ff fce3 	bl	8028062 <__lo0bits>
 802869c:	9b01      	ldr	r3, [sp, #4]
 802869e:	2601      	movs	r6, #1
 80286a0:	6163      	str	r3, [r4, #20]
 80286a2:	3020      	adds	r0, #32
 80286a4:	e7e7      	b.n	8028676 <__d2b+0x5e>
 80286a6:	4b0a      	ldr	r3, [pc, #40]	@ (80286d0 <__d2b+0xb8>)
 80286a8:	18c0      	adds	r0, r0, r3
 80286aa:	9b08      	ldr	r3, [sp, #32]
 80286ac:	6018      	str	r0, [r3, #0]
 80286ae:	4b09      	ldr	r3, [pc, #36]	@ (80286d4 <__d2b+0xbc>)
 80286b0:	18f3      	adds	r3, r6, r3
 80286b2:	009b      	lsls	r3, r3, #2
 80286b4:	18e3      	adds	r3, r4, r3
 80286b6:	6958      	ldr	r0, [r3, #20]
 80286b8:	f7ff fcb2 	bl	8028020 <__hi0bits>
 80286bc:	0176      	lsls	r6, r6, #5
 80286be:	e7e3      	b.n	8028688 <__d2b+0x70>
 80286c0:	0802ec7e 	.word	0x0802ec7e
 80286c4:	0802ecef 	.word	0x0802ecef
 80286c8:	0000030f 	.word	0x0000030f
 80286cc:	fffffbcd 	.word	0xfffffbcd
 80286d0:	fffffbce 	.word	0xfffffbce
 80286d4:	3fffffff 	.word	0x3fffffff

080286d8 <__ratio>:
 80286d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80286da:	b087      	sub	sp, #28
 80286dc:	000f      	movs	r7, r1
 80286de:	a904      	add	r1, sp, #16
 80286e0:	0006      	movs	r6, r0
 80286e2:	f7ff ff4d 	bl	8028580 <__b2d>
 80286e6:	9000      	str	r0, [sp, #0]
 80286e8:	9101      	str	r1, [sp, #4]
 80286ea:	9b00      	ldr	r3, [sp, #0]
 80286ec:	9c01      	ldr	r4, [sp, #4]
 80286ee:	0038      	movs	r0, r7
 80286f0:	a905      	add	r1, sp, #20
 80286f2:	9302      	str	r3, [sp, #8]
 80286f4:	9403      	str	r4, [sp, #12]
 80286f6:	f7ff ff43 	bl	8028580 <__b2d>
 80286fa:	000d      	movs	r5, r1
 80286fc:	0002      	movs	r2, r0
 80286fe:	000b      	movs	r3, r1
 8028700:	6930      	ldr	r0, [r6, #16]
 8028702:	6939      	ldr	r1, [r7, #16]
 8028704:	9e04      	ldr	r6, [sp, #16]
 8028706:	1a40      	subs	r0, r0, r1
 8028708:	9905      	ldr	r1, [sp, #20]
 802870a:	0140      	lsls	r0, r0, #5
 802870c:	1a71      	subs	r1, r6, r1
 802870e:	1841      	adds	r1, r0, r1
 8028710:	0508      	lsls	r0, r1, #20
 8028712:	2900      	cmp	r1, #0
 8028714:	dd08      	ble.n	8028728 <__ratio+0x50>
 8028716:	9901      	ldr	r1, [sp, #4]
 8028718:	1841      	adds	r1, r0, r1
 802871a:	9103      	str	r1, [sp, #12]
 802871c:	9802      	ldr	r0, [sp, #8]
 802871e:	9903      	ldr	r1, [sp, #12]
 8028720:	f7d9 fcde 	bl	80020e0 <__aeabi_ddiv>
 8028724:	b007      	add	sp, #28
 8028726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028728:	1a2b      	subs	r3, r5, r0
 802872a:	e7f7      	b.n	802871c <__ratio+0x44>

0802872c <__copybits>:
 802872c:	b570      	push	{r4, r5, r6, lr}
 802872e:	0014      	movs	r4, r2
 8028730:	0005      	movs	r5, r0
 8028732:	3901      	subs	r1, #1
 8028734:	6913      	ldr	r3, [r2, #16]
 8028736:	1149      	asrs	r1, r1, #5
 8028738:	3101      	adds	r1, #1
 802873a:	0089      	lsls	r1, r1, #2
 802873c:	3414      	adds	r4, #20
 802873e:	009b      	lsls	r3, r3, #2
 8028740:	1841      	adds	r1, r0, r1
 8028742:	18e3      	adds	r3, r4, r3
 8028744:	42a3      	cmp	r3, r4
 8028746:	d80d      	bhi.n	8028764 <__copybits+0x38>
 8028748:	0014      	movs	r4, r2
 802874a:	3411      	adds	r4, #17
 802874c:	2500      	movs	r5, #0
 802874e:	42a3      	cmp	r3, r4
 8028750:	d303      	bcc.n	802875a <__copybits+0x2e>
 8028752:	1a9b      	subs	r3, r3, r2
 8028754:	3b11      	subs	r3, #17
 8028756:	089b      	lsrs	r3, r3, #2
 8028758:	009d      	lsls	r5, r3, #2
 802875a:	2300      	movs	r3, #0
 802875c:	1940      	adds	r0, r0, r5
 802875e:	4281      	cmp	r1, r0
 8028760:	d803      	bhi.n	802876a <__copybits+0x3e>
 8028762:	bd70      	pop	{r4, r5, r6, pc}
 8028764:	cc40      	ldmia	r4!, {r6}
 8028766:	c540      	stmia	r5!, {r6}
 8028768:	e7ec      	b.n	8028744 <__copybits+0x18>
 802876a:	c008      	stmia	r0!, {r3}
 802876c:	e7f7      	b.n	802875e <__copybits+0x32>

0802876e <__any_on>:
 802876e:	0002      	movs	r2, r0
 8028770:	6900      	ldr	r0, [r0, #16]
 8028772:	b510      	push	{r4, lr}
 8028774:	3214      	adds	r2, #20
 8028776:	114b      	asrs	r3, r1, #5
 8028778:	4298      	cmp	r0, r3
 802877a:	db13      	blt.n	80287a4 <__any_on+0x36>
 802877c:	dd0c      	ble.n	8028798 <__any_on+0x2a>
 802877e:	241f      	movs	r4, #31
 8028780:	0008      	movs	r0, r1
 8028782:	4020      	ands	r0, r4
 8028784:	4221      	tst	r1, r4
 8028786:	d007      	beq.n	8028798 <__any_on+0x2a>
 8028788:	0099      	lsls	r1, r3, #2
 802878a:	588c      	ldr	r4, [r1, r2]
 802878c:	0021      	movs	r1, r4
 802878e:	40c1      	lsrs	r1, r0
 8028790:	4081      	lsls	r1, r0
 8028792:	2001      	movs	r0, #1
 8028794:	428c      	cmp	r4, r1
 8028796:	d104      	bne.n	80287a2 <__any_on+0x34>
 8028798:	009b      	lsls	r3, r3, #2
 802879a:	18d3      	adds	r3, r2, r3
 802879c:	4293      	cmp	r3, r2
 802879e:	d803      	bhi.n	80287a8 <__any_on+0x3a>
 80287a0:	2000      	movs	r0, #0
 80287a2:	bd10      	pop	{r4, pc}
 80287a4:	0003      	movs	r3, r0
 80287a6:	e7f7      	b.n	8028798 <__any_on+0x2a>
 80287a8:	3b04      	subs	r3, #4
 80287aa:	6819      	ldr	r1, [r3, #0]
 80287ac:	2900      	cmp	r1, #0
 80287ae:	d0f5      	beq.n	802879c <__any_on+0x2e>
 80287b0:	2001      	movs	r0, #1
 80287b2:	e7f6      	b.n	80287a2 <__any_on+0x34>

080287b4 <__ascii_wctomb>:
 80287b4:	0003      	movs	r3, r0
 80287b6:	1e08      	subs	r0, r1, #0
 80287b8:	d005      	beq.n	80287c6 <__ascii_wctomb+0x12>
 80287ba:	2aff      	cmp	r2, #255	@ 0xff
 80287bc:	d904      	bls.n	80287c8 <__ascii_wctomb+0x14>
 80287be:	228a      	movs	r2, #138	@ 0x8a
 80287c0:	2001      	movs	r0, #1
 80287c2:	601a      	str	r2, [r3, #0]
 80287c4:	4240      	negs	r0, r0
 80287c6:	4770      	bx	lr
 80287c8:	2001      	movs	r0, #1
 80287ca:	700a      	strb	r2, [r1, #0]
 80287cc:	e7fb      	b.n	80287c6 <__ascii_wctomb+0x12>
	...

080287d0 <__ssputs_r>:
 80287d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80287d2:	688e      	ldr	r6, [r1, #8]
 80287d4:	b085      	sub	sp, #20
 80287d6:	001f      	movs	r7, r3
 80287d8:	000c      	movs	r4, r1
 80287da:	680b      	ldr	r3, [r1, #0]
 80287dc:	9002      	str	r0, [sp, #8]
 80287de:	9203      	str	r2, [sp, #12]
 80287e0:	42be      	cmp	r6, r7
 80287e2:	d830      	bhi.n	8028846 <__ssputs_r+0x76>
 80287e4:	210c      	movs	r1, #12
 80287e6:	5e62      	ldrsh	r2, [r4, r1]
 80287e8:	2190      	movs	r1, #144	@ 0x90
 80287ea:	00c9      	lsls	r1, r1, #3
 80287ec:	420a      	tst	r2, r1
 80287ee:	d028      	beq.n	8028842 <__ssputs_r+0x72>
 80287f0:	2003      	movs	r0, #3
 80287f2:	6921      	ldr	r1, [r4, #16]
 80287f4:	1a5b      	subs	r3, r3, r1
 80287f6:	9301      	str	r3, [sp, #4]
 80287f8:	6963      	ldr	r3, [r4, #20]
 80287fa:	4343      	muls	r3, r0
 80287fc:	9801      	ldr	r0, [sp, #4]
 80287fe:	0fdd      	lsrs	r5, r3, #31
 8028800:	18ed      	adds	r5, r5, r3
 8028802:	1c7b      	adds	r3, r7, #1
 8028804:	181b      	adds	r3, r3, r0
 8028806:	106d      	asrs	r5, r5, #1
 8028808:	42ab      	cmp	r3, r5
 802880a:	d900      	bls.n	802880e <__ssputs_r+0x3e>
 802880c:	001d      	movs	r5, r3
 802880e:	0552      	lsls	r2, r2, #21
 8028810:	d528      	bpl.n	8028864 <__ssputs_r+0x94>
 8028812:	0029      	movs	r1, r5
 8028814:	9802      	ldr	r0, [sp, #8]
 8028816:	f7ff fa69 	bl	8027cec <_malloc_r>
 802881a:	1e06      	subs	r6, r0, #0
 802881c:	d02c      	beq.n	8028878 <__ssputs_r+0xa8>
 802881e:	9a01      	ldr	r2, [sp, #4]
 8028820:	6921      	ldr	r1, [r4, #16]
 8028822:	f7fe f80d 	bl	8026840 <memcpy>
 8028826:	89a2      	ldrh	r2, [r4, #12]
 8028828:	4b18      	ldr	r3, [pc, #96]	@ (802888c <__ssputs_r+0xbc>)
 802882a:	401a      	ands	r2, r3
 802882c:	2380      	movs	r3, #128	@ 0x80
 802882e:	4313      	orrs	r3, r2
 8028830:	81a3      	strh	r3, [r4, #12]
 8028832:	9b01      	ldr	r3, [sp, #4]
 8028834:	6126      	str	r6, [r4, #16]
 8028836:	18f6      	adds	r6, r6, r3
 8028838:	6026      	str	r6, [r4, #0]
 802883a:	003e      	movs	r6, r7
 802883c:	6165      	str	r5, [r4, #20]
 802883e:	1aed      	subs	r5, r5, r3
 8028840:	60a5      	str	r5, [r4, #8]
 8028842:	42be      	cmp	r6, r7
 8028844:	d900      	bls.n	8028848 <__ssputs_r+0x78>
 8028846:	003e      	movs	r6, r7
 8028848:	0032      	movs	r2, r6
 802884a:	9903      	ldr	r1, [sp, #12]
 802884c:	6820      	ldr	r0, [r4, #0]
 802884e:	f000 fb7e 	bl	8028f4e <memmove>
 8028852:	2000      	movs	r0, #0
 8028854:	68a3      	ldr	r3, [r4, #8]
 8028856:	1b9b      	subs	r3, r3, r6
 8028858:	60a3      	str	r3, [r4, #8]
 802885a:	6823      	ldr	r3, [r4, #0]
 802885c:	199b      	adds	r3, r3, r6
 802885e:	6023      	str	r3, [r4, #0]
 8028860:	b005      	add	sp, #20
 8028862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028864:	002a      	movs	r2, r5
 8028866:	9802      	ldr	r0, [sp, #8]
 8028868:	f000 fc05 	bl	8029076 <_realloc_r>
 802886c:	1e06      	subs	r6, r0, #0
 802886e:	d1e0      	bne.n	8028832 <__ssputs_r+0x62>
 8028870:	6921      	ldr	r1, [r4, #16]
 8028872:	9802      	ldr	r0, [sp, #8]
 8028874:	f7fe fe6a 	bl	802754c <_free_r>
 8028878:	230c      	movs	r3, #12
 802887a:	2001      	movs	r0, #1
 802887c:	9a02      	ldr	r2, [sp, #8]
 802887e:	4240      	negs	r0, r0
 8028880:	6013      	str	r3, [r2, #0]
 8028882:	89a2      	ldrh	r2, [r4, #12]
 8028884:	3334      	adds	r3, #52	@ 0x34
 8028886:	4313      	orrs	r3, r2
 8028888:	81a3      	strh	r3, [r4, #12]
 802888a:	e7e9      	b.n	8028860 <__ssputs_r+0x90>
 802888c:	fffffb7f 	.word	0xfffffb7f

08028890 <_svfiprintf_r>:
 8028890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028892:	b0a1      	sub	sp, #132	@ 0x84
 8028894:	9003      	str	r0, [sp, #12]
 8028896:	001d      	movs	r5, r3
 8028898:	898b      	ldrh	r3, [r1, #12]
 802889a:	000f      	movs	r7, r1
 802889c:	0016      	movs	r6, r2
 802889e:	061b      	lsls	r3, r3, #24
 80288a0:	d511      	bpl.n	80288c6 <_svfiprintf_r+0x36>
 80288a2:	690b      	ldr	r3, [r1, #16]
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	d10e      	bne.n	80288c6 <_svfiprintf_r+0x36>
 80288a8:	2140      	movs	r1, #64	@ 0x40
 80288aa:	f7ff fa1f 	bl	8027cec <_malloc_r>
 80288ae:	6038      	str	r0, [r7, #0]
 80288b0:	6138      	str	r0, [r7, #16]
 80288b2:	2800      	cmp	r0, #0
 80288b4:	d105      	bne.n	80288c2 <_svfiprintf_r+0x32>
 80288b6:	230c      	movs	r3, #12
 80288b8:	9a03      	ldr	r2, [sp, #12]
 80288ba:	6013      	str	r3, [r2, #0]
 80288bc:	2001      	movs	r0, #1
 80288be:	4240      	negs	r0, r0
 80288c0:	e0cf      	b.n	8028a62 <_svfiprintf_r+0x1d2>
 80288c2:	2340      	movs	r3, #64	@ 0x40
 80288c4:	617b      	str	r3, [r7, #20]
 80288c6:	2300      	movs	r3, #0
 80288c8:	ac08      	add	r4, sp, #32
 80288ca:	6163      	str	r3, [r4, #20]
 80288cc:	3320      	adds	r3, #32
 80288ce:	7663      	strb	r3, [r4, #25]
 80288d0:	3310      	adds	r3, #16
 80288d2:	76a3      	strb	r3, [r4, #26]
 80288d4:	9507      	str	r5, [sp, #28]
 80288d6:	0035      	movs	r5, r6
 80288d8:	782b      	ldrb	r3, [r5, #0]
 80288da:	2b00      	cmp	r3, #0
 80288dc:	d001      	beq.n	80288e2 <_svfiprintf_r+0x52>
 80288de:	2b25      	cmp	r3, #37	@ 0x25
 80288e0:	d148      	bne.n	8028974 <_svfiprintf_r+0xe4>
 80288e2:	1bab      	subs	r3, r5, r6
 80288e4:	9305      	str	r3, [sp, #20]
 80288e6:	42b5      	cmp	r5, r6
 80288e8:	d00b      	beq.n	8028902 <_svfiprintf_r+0x72>
 80288ea:	0032      	movs	r2, r6
 80288ec:	0039      	movs	r1, r7
 80288ee:	9803      	ldr	r0, [sp, #12]
 80288f0:	f7ff ff6e 	bl	80287d0 <__ssputs_r>
 80288f4:	3001      	adds	r0, #1
 80288f6:	d100      	bne.n	80288fa <_svfiprintf_r+0x6a>
 80288f8:	e0ae      	b.n	8028a58 <_svfiprintf_r+0x1c8>
 80288fa:	6963      	ldr	r3, [r4, #20]
 80288fc:	9a05      	ldr	r2, [sp, #20]
 80288fe:	189b      	adds	r3, r3, r2
 8028900:	6163      	str	r3, [r4, #20]
 8028902:	782b      	ldrb	r3, [r5, #0]
 8028904:	2b00      	cmp	r3, #0
 8028906:	d100      	bne.n	802890a <_svfiprintf_r+0x7a>
 8028908:	e0a6      	b.n	8028a58 <_svfiprintf_r+0x1c8>
 802890a:	2201      	movs	r2, #1
 802890c:	2300      	movs	r3, #0
 802890e:	4252      	negs	r2, r2
 8028910:	6062      	str	r2, [r4, #4]
 8028912:	a904      	add	r1, sp, #16
 8028914:	3254      	adds	r2, #84	@ 0x54
 8028916:	1852      	adds	r2, r2, r1
 8028918:	1c6e      	adds	r6, r5, #1
 802891a:	6023      	str	r3, [r4, #0]
 802891c:	60e3      	str	r3, [r4, #12]
 802891e:	60a3      	str	r3, [r4, #8]
 8028920:	7013      	strb	r3, [r2, #0]
 8028922:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028924:	4b54      	ldr	r3, [pc, #336]	@ (8028a78 <_svfiprintf_r+0x1e8>)
 8028926:	2205      	movs	r2, #5
 8028928:	0018      	movs	r0, r3
 802892a:	7831      	ldrb	r1, [r6, #0]
 802892c:	9305      	str	r3, [sp, #20]
 802892e:	f7fd ff7c 	bl	802682a <memchr>
 8028932:	1c75      	adds	r5, r6, #1
 8028934:	2800      	cmp	r0, #0
 8028936:	d11f      	bne.n	8028978 <_svfiprintf_r+0xe8>
 8028938:	6822      	ldr	r2, [r4, #0]
 802893a:	06d3      	lsls	r3, r2, #27
 802893c:	d504      	bpl.n	8028948 <_svfiprintf_r+0xb8>
 802893e:	2353      	movs	r3, #83	@ 0x53
 8028940:	a904      	add	r1, sp, #16
 8028942:	185b      	adds	r3, r3, r1
 8028944:	2120      	movs	r1, #32
 8028946:	7019      	strb	r1, [r3, #0]
 8028948:	0713      	lsls	r3, r2, #28
 802894a:	d504      	bpl.n	8028956 <_svfiprintf_r+0xc6>
 802894c:	2353      	movs	r3, #83	@ 0x53
 802894e:	a904      	add	r1, sp, #16
 8028950:	185b      	adds	r3, r3, r1
 8028952:	212b      	movs	r1, #43	@ 0x2b
 8028954:	7019      	strb	r1, [r3, #0]
 8028956:	7833      	ldrb	r3, [r6, #0]
 8028958:	2b2a      	cmp	r3, #42	@ 0x2a
 802895a:	d016      	beq.n	802898a <_svfiprintf_r+0xfa>
 802895c:	0035      	movs	r5, r6
 802895e:	2100      	movs	r1, #0
 8028960:	200a      	movs	r0, #10
 8028962:	68e3      	ldr	r3, [r4, #12]
 8028964:	782a      	ldrb	r2, [r5, #0]
 8028966:	1c6e      	adds	r6, r5, #1
 8028968:	3a30      	subs	r2, #48	@ 0x30
 802896a:	2a09      	cmp	r2, #9
 802896c:	d950      	bls.n	8028a10 <_svfiprintf_r+0x180>
 802896e:	2900      	cmp	r1, #0
 8028970:	d111      	bne.n	8028996 <_svfiprintf_r+0x106>
 8028972:	e017      	b.n	80289a4 <_svfiprintf_r+0x114>
 8028974:	3501      	adds	r5, #1
 8028976:	e7af      	b.n	80288d8 <_svfiprintf_r+0x48>
 8028978:	9b05      	ldr	r3, [sp, #20]
 802897a:	6822      	ldr	r2, [r4, #0]
 802897c:	1ac0      	subs	r0, r0, r3
 802897e:	2301      	movs	r3, #1
 8028980:	4083      	lsls	r3, r0
 8028982:	4313      	orrs	r3, r2
 8028984:	002e      	movs	r6, r5
 8028986:	6023      	str	r3, [r4, #0]
 8028988:	e7cc      	b.n	8028924 <_svfiprintf_r+0x94>
 802898a:	9b07      	ldr	r3, [sp, #28]
 802898c:	1d19      	adds	r1, r3, #4
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	9107      	str	r1, [sp, #28]
 8028992:	2b00      	cmp	r3, #0
 8028994:	db01      	blt.n	802899a <_svfiprintf_r+0x10a>
 8028996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028998:	e004      	b.n	80289a4 <_svfiprintf_r+0x114>
 802899a:	425b      	negs	r3, r3
 802899c:	60e3      	str	r3, [r4, #12]
 802899e:	2302      	movs	r3, #2
 80289a0:	4313      	orrs	r3, r2
 80289a2:	6023      	str	r3, [r4, #0]
 80289a4:	782b      	ldrb	r3, [r5, #0]
 80289a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80289a8:	d10c      	bne.n	80289c4 <_svfiprintf_r+0x134>
 80289aa:	786b      	ldrb	r3, [r5, #1]
 80289ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80289ae:	d134      	bne.n	8028a1a <_svfiprintf_r+0x18a>
 80289b0:	9b07      	ldr	r3, [sp, #28]
 80289b2:	3502      	adds	r5, #2
 80289b4:	1d1a      	adds	r2, r3, #4
 80289b6:	681b      	ldr	r3, [r3, #0]
 80289b8:	9207      	str	r2, [sp, #28]
 80289ba:	2b00      	cmp	r3, #0
 80289bc:	da01      	bge.n	80289c2 <_svfiprintf_r+0x132>
 80289be:	2301      	movs	r3, #1
 80289c0:	425b      	negs	r3, r3
 80289c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80289c4:	4e2d      	ldr	r6, [pc, #180]	@ (8028a7c <_svfiprintf_r+0x1ec>)
 80289c6:	2203      	movs	r2, #3
 80289c8:	0030      	movs	r0, r6
 80289ca:	7829      	ldrb	r1, [r5, #0]
 80289cc:	f7fd ff2d 	bl	802682a <memchr>
 80289d0:	2800      	cmp	r0, #0
 80289d2:	d006      	beq.n	80289e2 <_svfiprintf_r+0x152>
 80289d4:	2340      	movs	r3, #64	@ 0x40
 80289d6:	1b80      	subs	r0, r0, r6
 80289d8:	4083      	lsls	r3, r0
 80289da:	6822      	ldr	r2, [r4, #0]
 80289dc:	3501      	adds	r5, #1
 80289de:	4313      	orrs	r3, r2
 80289e0:	6023      	str	r3, [r4, #0]
 80289e2:	7829      	ldrb	r1, [r5, #0]
 80289e4:	2206      	movs	r2, #6
 80289e6:	4826      	ldr	r0, [pc, #152]	@ (8028a80 <_svfiprintf_r+0x1f0>)
 80289e8:	1c6e      	adds	r6, r5, #1
 80289ea:	7621      	strb	r1, [r4, #24]
 80289ec:	f7fd ff1d 	bl	802682a <memchr>
 80289f0:	2800      	cmp	r0, #0
 80289f2:	d038      	beq.n	8028a66 <_svfiprintf_r+0x1d6>
 80289f4:	4b23      	ldr	r3, [pc, #140]	@ (8028a84 <_svfiprintf_r+0x1f4>)
 80289f6:	2b00      	cmp	r3, #0
 80289f8:	d122      	bne.n	8028a40 <_svfiprintf_r+0x1b0>
 80289fa:	2207      	movs	r2, #7
 80289fc:	9b07      	ldr	r3, [sp, #28]
 80289fe:	3307      	adds	r3, #7
 8028a00:	4393      	bics	r3, r2
 8028a02:	3308      	adds	r3, #8
 8028a04:	9307      	str	r3, [sp, #28]
 8028a06:	6963      	ldr	r3, [r4, #20]
 8028a08:	9a04      	ldr	r2, [sp, #16]
 8028a0a:	189b      	adds	r3, r3, r2
 8028a0c:	6163      	str	r3, [r4, #20]
 8028a0e:	e762      	b.n	80288d6 <_svfiprintf_r+0x46>
 8028a10:	4343      	muls	r3, r0
 8028a12:	0035      	movs	r5, r6
 8028a14:	2101      	movs	r1, #1
 8028a16:	189b      	adds	r3, r3, r2
 8028a18:	e7a4      	b.n	8028964 <_svfiprintf_r+0xd4>
 8028a1a:	2300      	movs	r3, #0
 8028a1c:	200a      	movs	r0, #10
 8028a1e:	0019      	movs	r1, r3
 8028a20:	3501      	adds	r5, #1
 8028a22:	6063      	str	r3, [r4, #4]
 8028a24:	782a      	ldrb	r2, [r5, #0]
 8028a26:	1c6e      	adds	r6, r5, #1
 8028a28:	3a30      	subs	r2, #48	@ 0x30
 8028a2a:	2a09      	cmp	r2, #9
 8028a2c:	d903      	bls.n	8028a36 <_svfiprintf_r+0x1a6>
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	d0c8      	beq.n	80289c4 <_svfiprintf_r+0x134>
 8028a32:	9109      	str	r1, [sp, #36]	@ 0x24
 8028a34:	e7c6      	b.n	80289c4 <_svfiprintf_r+0x134>
 8028a36:	4341      	muls	r1, r0
 8028a38:	0035      	movs	r5, r6
 8028a3a:	2301      	movs	r3, #1
 8028a3c:	1889      	adds	r1, r1, r2
 8028a3e:	e7f1      	b.n	8028a24 <_svfiprintf_r+0x194>
 8028a40:	aa07      	add	r2, sp, #28
 8028a42:	9200      	str	r2, [sp, #0]
 8028a44:	0021      	movs	r1, r4
 8028a46:	003a      	movs	r2, r7
 8028a48:	4b0f      	ldr	r3, [pc, #60]	@ (8028a88 <_svfiprintf_r+0x1f8>)
 8028a4a:	9803      	ldr	r0, [sp, #12]
 8028a4c:	f7fc ffe6 	bl	8025a1c <_printf_float>
 8028a50:	9004      	str	r0, [sp, #16]
 8028a52:	9b04      	ldr	r3, [sp, #16]
 8028a54:	3301      	adds	r3, #1
 8028a56:	d1d6      	bne.n	8028a06 <_svfiprintf_r+0x176>
 8028a58:	89bb      	ldrh	r3, [r7, #12]
 8028a5a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028a5c:	065b      	lsls	r3, r3, #25
 8028a5e:	d500      	bpl.n	8028a62 <_svfiprintf_r+0x1d2>
 8028a60:	e72c      	b.n	80288bc <_svfiprintf_r+0x2c>
 8028a62:	b021      	add	sp, #132	@ 0x84
 8028a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028a66:	aa07      	add	r2, sp, #28
 8028a68:	9200      	str	r2, [sp, #0]
 8028a6a:	0021      	movs	r1, r4
 8028a6c:	003a      	movs	r2, r7
 8028a6e:	4b06      	ldr	r3, [pc, #24]	@ (8028a88 <_svfiprintf_r+0x1f8>)
 8028a70:	9803      	ldr	r0, [sp, #12]
 8028a72:	f7fd fa81 	bl	8025f78 <_printf_i>
 8028a76:	e7eb      	b.n	8028a50 <_svfiprintf_r+0x1c0>
 8028a78:	0802ed48 	.word	0x0802ed48
 8028a7c:	0802ed4e 	.word	0x0802ed4e
 8028a80:	0802ed52 	.word	0x0802ed52
 8028a84:	08025a1d 	.word	0x08025a1d
 8028a88:	080287d1 	.word	0x080287d1

08028a8c <__sfputc_r>:
 8028a8c:	6893      	ldr	r3, [r2, #8]
 8028a8e:	b510      	push	{r4, lr}
 8028a90:	3b01      	subs	r3, #1
 8028a92:	6093      	str	r3, [r2, #8]
 8028a94:	2b00      	cmp	r3, #0
 8028a96:	da04      	bge.n	8028aa2 <__sfputc_r+0x16>
 8028a98:	6994      	ldr	r4, [r2, #24]
 8028a9a:	42a3      	cmp	r3, r4
 8028a9c:	db07      	blt.n	8028aae <__sfputc_r+0x22>
 8028a9e:	290a      	cmp	r1, #10
 8028aa0:	d005      	beq.n	8028aae <__sfputc_r+0x22>
 8028aa2:	6813      	ldr	r3, [r2, #0]
 8028aa4:	1c58      	adds	r0, r3, #1
 8028aa6:	6010      	str	r0, [r2, #0]
 8028aa8:	7019      	strb	r1, [r3, #0]
 8028aaa:	0008      	movs	r0, r1
 8028aac:	bd10      	pop	{r4, pc}
 8028aae:	f7fd fd4b 	bl	8026548 <__swbuf_r>
 8028ab2:	0001      	movs	r1, r0
 8028ab4:	e7f9      	b.n	8028aaa <__sfputc_r+0x1e>

08028ab6 <__sfputs_r>:
 8028ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028ab8:	0006      	movs	r6, r0
 8028aba:	000f      	movs	r7, r1
 8028abc:	0014      	movs	r4, r2
 8028abe:	18d5      	adds	r5, r2, r3
 8028ac0:	42ac      	cmp	r4, r5
 8028ac2:	d101      	bne.n	8028ac8 <__sfputs_r+0x12>
 8028ac4:	2000      	movs	r0, #0
 8028ac6:	e007      	b.n	8028ad8 <__sfputs_r+0x22>
 8028ac8:	7821      	ldrb	r1, [r4, #0]
 8028aca:	003a      	movs	r2, r7
 8028acc:	0030      	movs	r0, r6
 8028ace:	f7ff ffdd 	bl	8028a8c <__sfputc_r>
 8028ad2:	3401      	adds	r4, #1
 8028ad4:	1c43      	adds	r3, r0, #1
 8028ad6:	d1f3      	bne.n	8028ac0 <__sfputs_r+0xa>
 8028ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028adc <_vfiprintf_r>:
 8028adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ade:	b0a1      	sub	sp, #132	@ 0x84
 8028ae0:	000f      	movs	r7, r1
 8028ae2:	0015      	movs	r5, r2
 8028ae4:	001e      	movs	r6, r3
 8028ae6:	9003      	str	r0, [sp, #12]
 8028ae8:	2800      	cmp	r0, #0
 8028aea:	d004      	beq.n	8028af6 <_vfiprintf_r+0x1a>
 8028aec:	6a03      	ldr	r3, [r0, #32]
 8028aee:	2b00      	cmp	r3, #0
 8028af0:	d101      	bne.n	8028af6 <_vfiprintf_r+0x1a>
 8028af2:	f7fd fbdd 	bl	80262b0 <__sinit>
 8028af6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028af8:	07db      	lsls	r3, r3, #31
 8028afa:	d405      	bmi.n	8028b08 <_vfiprintf_r+0x2c>
 8028afc:	89bb      	ldrh	r3, [r7, #12]
 8028afe:	059b      	lsls	r3, r3, #22
 8028b00:	d402      	bmi.n	8028b08 <_vfiprintf_r+0x2c>
 8028b02:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b04:	f7fd fe8f 	bl	8026826 <__retarget_lock_acquire_recursive>
 8028b08:	89bb      	ldrh	r3, [r7, #12]
 8028b0a:	071b      	lsls	r3, r3, #28
 8028b0c:	d502      	bpl.n	8028b14 <_vfiprintf_r+0x38>
 8028b0e:	693b      	ldr	r3, [r7, #16]
 8028b10:	2b00      	cmp	r3, #0
 8028b12:	d113      	bne.n	8028b3c <_vfiprintf_r+0x60>
 8028b14:	0039      	movs	r1, r7
 8028b16:	9803      	ldr	r0, [sp, #12]
 8028b18:	f7fd fd58 	bl	80265cc <__swsetup_r>
 8028b1c:	2800      	cmp	r0, #0
 8028b1e:	d00d      	beq.n	8028b3c <_vfiprintf_r+0x60>
 8028b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028b22:	07db      	lsls	r3, r3, #31
 8028b24:	d503      	bpl.n	8028b2e <_vfiprintf_r+0x52>
 8028b26:	2001      	movs	r0, #1
 8028b28:	4240      	negs	r0, r0
 8028b2a:	b021      	add	sp, #132	@ 0x84
 8028b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b2e:	89bb      	ldrh	r3, [r7, #12]
 8028b30:	059b      	lsls	r3, r3, #22
 8028b32:	d4f8      	bmi.n	8028b26 <_vfiprintf_r+0x4a>
 8028b34:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b36:	f7fd fe77 	bl	8026828 <__retarget_lock_release_recursive>
 8028b3a:	e7f4      	b.n	8028b26 <_vfiprintf_r+0x4a>
 8028b3c:	2300      	movs	r3, #0
 8028b3e:	ac08      	add	r4, sp, #32
 8028b40:	6163      	str	r3, [r4, #20]
 8028b42:	3320      	adds	r3, #32
 8028b44:	7663      	strb	r3, [r4, #25]
 8028b46:	3310      	adds	r3, #16
 8028b48:	76a3      	strb	r3, [r4, #26]
 8028b4a:	9607      	str	r6, [sp, #28]
 8028b4c:	002e      	movs	r6, r5
 8028b4e:	7833      	ldrb	r3, [r6, #0]
 8028b50:	2b00      	cmp	r3, #0
 8028b52:	d001      	beq.n	8028b58 <_vfiprintf_r+0x7c>
 8028b54:	2b25      	cmp	r3, #37	@ 0x25
 8028b56:	d148      	bne.n	8028bea <_vfiprintf_r+0x10e>
 8028b58:	1b73      	subs	r3, r6, r5
 8028b5a:	9305      	str	r3, [sp, #20]
 8028b5c:	42ae      	cmp	r6, r5
 8028b5e:	d00b      	beq.n	8028b78 <_vfiprintf_r+0x9c>
 8028b60:	002a      	movs	r2, r5
 8028b62:	0039      	movs	r1, r7
 8028b64:	9803      	ldr	r0, [sp, #12]
 8028b66:	f7ff ffa6 	bl	8028ab6 <__sfputs_r>
 8028b6a:	3001      	adds	r0, #1
 8028b6c:	d100      	bne.n	8028b70 <_vfiprintf_r+0x94>
 8028b6e:	e0ae      	b.n	8028cce <_vfiprintf_r+0x1f2>
 8028b70:	6963      	ldr	r3, [r4, #20]
 8028b72:	9a05      	ldr	r2, [sp, #20]
 8028b74:	189b      	adds	r3, r3, r2
 8028b76:	6163      	str	r3, [r4, #20]
 8028b78:	7833      	ldrb	r3, [r6, #0]
 8028b7a:	2b00      	cmp	r3, #0
 8028b7c:	d100      	bne.n	8028b80 <_vfiprintf_r+0xa4>
 8028b7e:	e0a6      	b.n	8028cce <_vfiprintf_r+0x1f2>
 8028b80:	2201      	movs	r2, #1
 8028b82:	2300      	movs	r3, #0
 8028b84:	4252      	negs	r2, r2
 8028b86:	6062      	str	r2, [r4, #4]
 8028b88:	a904      	add	r1, sp, #16
 8028b8a:	3254      	adds	r2, #84	@ 0x54
 8028b8c:	1852      	adds	r2, r2, r1
 8028b8e:	1c75      	adds	r5, r6, #1
 8028b90:	6023      	str	r3, [r4, #0]
 8028b92:	60e3      	str	r3, [r4, #12]
 8028b94:	60a3      	str	r3, [r4, #8]
 8028b96:	7013      	strb	r3, [r2, #0]
 8028b98:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028b9a:	4b59      	ldr	r3, [pc, #356]	@ (8028d00 <_vfiprintf_r+0x224>)
 8028b9c:	2205      	movs	r2, #5
 8028b9e:	0018      	movs	r0, r3
 8028ba0:	7829      	ldrb	r1, [r5, #0]
 8028ba2:	9305      	str	r3, [sp, #20]
 8028ba4:	f7fd fe41 	bl	802682a <memchr>
 8028ba8:	1c6e      	adds	r6, r5, #1
 8028baa:	2800      	cmp	r0, #0
 8028bac:	d11f      	bne.n	8028bee <_vfiprintf_r+0x112>
 8028bae:	6822      	ldr	r2, [r4, #0]
 8028bb0:	06d3      	lsls	r3, r2, #27
 8028bb2:	d504      	bpl.n	8028bbe <_vfiprintf_r+0xe2>
 8028bb4:	2353      	movs	r3, #83	@ 0x53
 8028bb6:	a904      	add	r1, sp, #16
 8028bb8:	185b      	adds	r3, r3, r1
 8028bba:	2120      	movs	r1, #32
 8028bbc:	7019      	strb	r1, [r3, #0]
 8028bbe:	0713      	lsls	r3, r2, #28
 8028bc0:	d504      	bpl.n	8028bcc <_vfiprintf_r+0xf0>
 8028bc2:	2353      	movs	r3, #83	@ 0x53
 8028bc4:	a904      	add	r1, sp, #16
 8028bc6:	185b      	adds	r3, r3, r1
 8028bc8:	212b      	movs	r1, #43	@ 0x2b
 8028bca:	7019      	strb	r1, [r3, #0]
 8028bcc:	782b      	ldrb	r3, [r5, #0]
 8028bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8028bd0:	d016      	beq.n	8028c00 <_vfiprintf_r+0x124>
 8028bd2:	002e      	movs	r6, r5
 8028bd4:	2100      	movs	r1, #0
 8028bd6:	200a      	movs	r0, #10
 8028bd8:	68e3      	ldr	r3, [r4, #12]
 8028bda:	7832      	ldrb	r2, [r6, #0]
 8028bdc:	1c75      	adds	r5, r6, #1
 8028bde:	3a30      	subs	r2, #48	@ 0x30
 8028be0:	2a09      	cmp	r2, #9
 8028be2:	d950      	bls.n	8028c86 <_vfiprintf_r+0x1aa>
 8028be4:	2900      	cmp	r1, #0
 8028be6:	d111      	bne.n	8028c0c <_vfiprintf_r+0x130>
 8028be8:	e017      	b.n	8028c1a <_vfiprintf_r+0x13e>
 8028bea:	3601      	adds	r6, #1
 8028bec:	e7af      	b.n	8028b4e <_vfiprintf_r+0x72>
 8028bee:	9b05      	ldr	r3, [sp, #20]
 8028bf0:	6822      	ldr	r2, [r4, #0]
 8028bf2:	1ac0      	subs	r0, r0, r3
 8028bf4:	2301      	movs	r3, #1
 8028bf6:	4083      	lsls	r3, r0
 8028bf8:	4313      	orrs	r3, r2
 8028bfa:	0035      	movs	r5, r6
 8028bfc:	6023      	str	r3, [r4, #0]
 8028bfe:	e7cc      	b.n	8028b9a <_vfiprintf_r+0xbe>
 8028c00:	9b07      	ldr	r3, [sp, #28]
 8028c02:	1d19      	adds	r1, r3, #4
 8028c04:	681b      	ldr	r3, [r3, #0]
 8028c06:	9107      	str	r1, [sp, #28]
 8028c08:	2b00      	cmp	r3, #0
 8028c0a:	db01      	blt.n	8028c10 <_vfiprintf_r+0x134>
 8028c0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028c0e:	e004      	b.n	8028c1a <_vfiprintf_r+0x13e>
 8028c10:	425b      	negs	r3, r3
 8028c12:	60e3      	str	r3, [r4, #12]
 8028c14:	2302      	movs	r3, #2
 8028c16:	4313      	orrs	r3, r2
 8028c18:	6023      	str	r3, [r4, #0]
 8028c1a:	7833      	ldrb	r3, [r6, #0]
 8028c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8028c1e:	d10c      	bne.n	8028c3a <_vfiprintf_r+0x15e>
 8028c20:	7873      	ldrb	r3, [r6, #1]
 8028c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8028c24:	d134      	bne.n	8028c90 <_vfiprintf_r+0x1b4>
 8028c26:	9b07      	ldr	r3, [sp, #28]
 8028c28:	3602      	adds	r6, #2
 8028c2a:	1d1a      	adds	r2, r3, #4
 8028c2c:	681b      	ldr	r3, [r3, #0]
 8028c2e:	9207      	str	r2, [sp, #28]
 8028c30:	2b00      	cmp	r3, #0
 8028c32:	da01      	bge.n	8028c38 <_vfiprintf_r+0x15c>
 8028c34:	2301      	movs	r3, #1
 8028c36:	425b      	negs	r3, r3
 8028c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c3a:	4d32      	ldr	r5, [pc, #200]	@ (8028d04 <_vfiprintf_r+0x228>)
 8028c3c:	2203      	movs	r2, #3
 8028c3e:	0028      	movs	r0, r5
 8028c40:	7831      	ldrb	r1, [r6, #0]
 8028c42:	f7fd fdf2 	bl	802682a <memchr>
 8028c46:	2800      	cmp	r0, #0
 8028c48:	d006      	beq.n	8028c58 <_vfiprintf_r+0x17c>
 8028c4a:	2340      	movs	r3, #64	@ 0x40
 8028c4c:	1b40      	subs	r0, r0, r5
 8028c4e:	4083      	lsls	r3, r0
 8028c50:	6822      	ldr	r2, [r4, #0]
 8028c52:	3601      	adds	r6, #1
 8028c54:	4313      	orrs	r3, r2
 8028c56:	6023      	str	r3, [r4, #0]
 8028c58:	7831      	ldrb	r1, [r6, #0]
 8028c5a:	2206      	movs	r2, #6
 8028c5c:	482a      	ldr	r0, [pc, #168]	@ (8028d08 <_vfiprintf_r+0x22c>)
 8028c5e:	1c75      	adds	r5, r6, #1
 8028c60:	7621      	strb	r1, [r4, #24]
 8028c62:	f7fd fde2 	bl	802682a <memchr>
 8028c66:	2800      	cmp	r0, #0
 8028c68:	d040      	beq.n	8028cec <_vfiprintf_r+0x210>
 8028c6a:	4b28      	ldr	r3, [pc, #160]	@ (8028d0c <_vfiprintf_r+0x230>)
 8028c6c:	2b00      	cmp	r3, #0
 8028c6e:	d122      	bne.n	8028cb6 <_vfiprintf_r+0x1da>
 8028c70:	2207      	movs	r2, #7
 8028c72:	9b07      	ldr	r3, [sp, #28]
 8028c74:	3307      	adds	r3, #7
 8028c76:	4393      	bics	r3, r2
 8028c78:	3308      	adds	r3, #8
 8028c7a:	9307      	str	r3, [sp, #28]
 8028c7c:	6963      	ldr	r3, [r4, #20]
 8028c7e:	9a04      	ldr	r2, [sp, #16]
 8028c80:	189b      	adds	r3, r3, r2
 8028c82:	6163      	str	r3, [r4, #20]
 8028c84:	e762      	b.n	8028b4c <_vfiprintf_r+0x70>
 8028c86:	4343      	muls	r3, r0
 8028c88:	002e      	movs	r6, r5
 8028c8a:	2101      	movs	r1, #1
 8028c8c:	189b      	adds	r3, r3, r2
 8028c8e:	e7a4      	b.n	8028bda <_vfiprintf_r+0xfe>
 8028c90:	2300      	movs	r3, #0
 8028c92:	200a      	movs	r0, #10
 8028c94:	0019      	movs	r1, r3
 8028c96:	3601      	adds	r6, #1
 8028c98:	6063      	str	r3, [r4, #4]
 8028c9a:	7832      	ldrb	r2, [r6, #0]
 8028c9c:	1c75      	adds	r5, r6, #1
 8028c9e:	3a30      	subs	r2, #48	@ 0x30
 8028ca0:	2a09      	cmp	r2, #9
 8028ca2:	d903      	bls.n	8028cac <_vfiprintf_r+0x1d0>
 8028ca4:	2b00      	cmp	r3, #0
 8028ca6:	d0c8      	beq.n	8028c3a <_vfiprintf_r+0x15e>
 8028ca8:	9109      	str	r1, [sp, #36]	@ 0x24
 8028caa:	e7c6      	b.n	8028c3a <_vfiprintf_r+0x15e>
 8028cac:	4341      	muls	r1, r0
 8028cae:	002e      	movs	r6, r5
 8028cb0:	2301      	movs	r3, #1
 8028cb2:	1889      	adds	r1, r1, r2
 8028cb4:	e7f1      	b.n	8028c9a <_vfiprintf_r+0x1be>
 8028cb6:	aa07      	add	r2, sp, #28
 8028cb8:	9200      	str	r2, [sp, #0]
 8028cba:	0021      	movs	r1, r4
 8028cbc:	003a      	movs	r2, r7
 8028cbe:	4b14      	ldr	r3, [pc, #80]	@ (8028d10 <_vfiprintf_r+0x234>)
 8028cc0:	9803      	ldr	r0, [sp, #12]
 8028cc2:	f7fc feab 	bl	8025a1c <_printf_float>
 8028cc6:	9004      	str	r0, [sp, #16]
 8028cc8:	9b04      	ldr	r3, [sp, #16]
 8028cca:	3301      	adds	r3, #1
 8028ccc:	d1d6      	bne.n	8028c7c <_vfiprintf_r+0x1a0>
 8028cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028cd0:	07db      	lsls	r3, r3, #31
 8028cd2:	d405      	bmi.n	8028ce0 <_vfiprintf_r+0x204>
 8028cd4:	89bb      	ldrh	r3, [r7, #12]
 8028cd6:	059b      	lsls	r3, r3, #22
 8028cd8:	d402      	bmi.n	8028ce0 <_vfiprintf_r+0x204>
 8028cda:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028cdc:	f7fd fda4 	bl	8026828 <__retarget_lock_release_recursive>
 8028ce0:	89bb      	ldrh	r3, [r7, #12]
 8028ce2:	065b      	lsls	r3, r3, #25
 8028ce4:	d500      	bpl.n	8028ce8 <_vfiprintf_r+0x20c>
 8028ce6:	e71e      	b.n	8028b26 <_vfiprintf_r+0x4a>
 8028ce8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028cea:	e71e      	b.n	8028b2a <_vfiprintf_r+0x4e>
 8028cec:	aa07      	add	r2, sp, #28
 8028cee:	9200      	str	r2, [sp, #0]
 8028cf0:	0021      	movs	r1, r4
 8028cf2:	003a      	movs	r2, r7
 8028cf4:	4b06      	ldr	r3, [pc, #24]	@ (8028d10 <_vfiprintf_r+0x234>)
 8028cf6:	9803      	ldr	r0, [sp, #12]
 8028cf8:	f7fd f93e 	bl	8025f78 <_printf_i>
 8028cfc:	e7e3      	b.n	8028cc6 <_vfiprintf_r+0x1ea>
 8028cfe:	46c0      	nop			@ (mov r8, r8)
 8028d00:	0802ed48 	.word	0x0802ed48
 8028d04:	0802ed4e 	.word	0x0802ed4e
 8028d08:	0802ed52 	.word	0x0802ed52
 8028d0c:	08025a1d 	.word	0x08025a1d
 8028d10:	08028ab7 	.word	0x08028ab7

08028d14 <__sflush_r>:
 8028d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028d16:	220c      	movs	r2, #12
 8028d18:	5e8b      	ldrsh	r3, [r1, r2]
 8028d1a:	0005      	movs	r5, r0
 8028d1c:	000c      	movs	r4, r1
 8028d1e:	071a      	lsls	r2, r3, #28
 8028d20:	d456      	bmi.n	8028dd0 <__sflush_r+0xbc>
 8028d22:	684a      	ldr	r2, [r1, #4]
 8028d24:	2a00      	cmp	r2, #0
 8028d26:	dc02      	bgt.n	8028d2e <__sflush_r+0x1a>
 8028d28:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028d2a:	2a00      	cmp	r2, #0
 8028d2c:	dd4e      	ble.n	8028dcc <__sflush_r+0xb8>
 8028d2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028d30:	2f00      	cmp	r7, #0
 8028d32:	d04b      	beq.n	8028dcc <__sflush_r+0xb8>
 8028d34:	2200      	movs	r2, #0
 8028d36:	2080      	movs	r0, #128	@ 0x80
 8028d38:	682e      	ldr	r6, [r5, #0]
 8028d3a:	602a      	str	r2, [r5, #0]
 8028d3c:	001a      	movs	r2, r3
 8028d3e:	0140      	lsls	r0, r0, #5
 8028d40:	6a21      	ldr	r1, [r4, #32]
 8028d42:	4002      	ands	r2, r0
 8028d44:	4203      	tst	r3, r0
 8028d46:	d033      	beq.n	8028db0 <__sflush_r+0x9c>
 8028d48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028d4a:	89a3      	ldrh	r3, [r4, #12]
 8028d4c:	075b      	lsls	r3, r3, #29
 8028d4e:	d506      	bpl.n	8028d5e <__sflush_r+0x4a>
 8028d50:	6863      	ldr	r3, [r4, #4]
 8028d52:	1ad2      	subs	r2, r2, r3
 8028d54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028d56:	2b00      	cmp	r3, #0
 8028d58:	d001      	beq.n	8028d5e <__sflush_r+0x4a>
 8028d5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028d5c:	1ad2      	subs	r2, r2, r3
 8028d5e:	2300      	movs	r3, #0
 8028d60:	0028      	movs	r0, r5
 8028d62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028d64:	6a21      	ldr	r1, [r4, #32]
 8028d66:	47b8      	blx	r7
 8028d68:	89a2      	ldrh	r2, [r4, #12]
 8028d6a:	1c43      	adds	r3, r0, #1
 8028d6c:	d106      	bne.n	8028d7c <__sflush_r+0x68>
 8028d6e:	6829      	ldr	r1, [r5, #0]
 8028d70:	291d      	cmp	r1, #29
 8028d72:	d846      	bhi.n	8028e02 <__sflush_r+0xee>
 8028d74:	4b29      	ldr	r3, [pc, #164]	@ (8028e1c <__sflush_r+0x108>)
 8028d76:	40cb      	lsrs	r3, r1
 8028d78:	07db      	lsls	r3, r3, #31
 8028d7a:	d542      	bpl.n	8028e02 <__sflush_r+0xee>
 8028d7c:	2300      	movs	r3, #0
 8028d7e:	6063      	str	r3, [r4, #4]
 8028d80:	6923      	ldr	r3, [r4, #16]
 8028d82:	6023      	str	r3, [r4, #0]
 8028d84:	04d2      	lsls	r2, r2, #19
 8028d86:	d505      	bpl.n	8028d94 <__sflush_r+0x80>
 8028d88:	1c43      	adds	r3, r0, #1
 8028d8a:	d102      	bne.n	8028d92 <__sflush_r+0x7e>
 8028d8c:	682b      	ldr	r3, [r5, #0]
 8028d8e:	2b00      	cmp	r3, #0
 8028d90:	d100      	bne.n	8028d94 <__sflush_r+0x80>
 8028d92:	6560      	str	r0, [r4, #84]	@ 0x54
 8028d94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028d96:	602e      	str	r6, [r5, #0]
 8028d98:	2900      	cmp	r1, #0
 8028d9a:	d017      	beq.n	8028dcc <__sflush_r+0xb8>
 8028d9c:	0023      	movs	r3, r4
 8028d9e:	3344      	adds	r3, #68	@ 0x44
 8028da0:	4299      	cmp	r1, r3
 8028da2:	d002      	beq.n	8028daa <__sflush_r+0x96>
 8028da4:	0028      	movs	r0, r5
 8028da6:	f7fe fbd1 	bl	802754c <_free_r>
 8028daa:	2300      	movs	r3, #0
 8028dac:	6363      	str	r3, [r4, #52]	@ 0x34
 8028dae:	e00d      	b.n	8028dcc <__sflush_r+0xb8>
 8028db0:	2301      	movs	r3, #1
 8028db2:	0028      	movs	r0, r5
 8028db4:	47b8      	blx	r7
 8028db6:	0002      	movs	r2, r0
 8028db8:	1c43      	adds	r3, r0, #1
 8028dba:	d1c6      	bne.n	8028d4a <__sflush_r+0x36>
 8028dbc:	682b      	ldr	r3, [r5, #0]
 8028dbe:	2b00      	cmp	r3, #0
 8028dc0:	d0c3      	beq.n	8028d4a <__sflush_r+0x36>
 8028dc2:	2b1d      	cmp	r3, #29
 8028dc4:	d001      	beq.n	8028dca <__sflush_r+0xb6>
 8028dc6:	2b16      	cmp	r3, #22
 8028dc8:	d11a      	bne.n	8028e00 <__sflush_r+0xec>
 8028dca:	602e      	str	r6, [r5, #0]
 8028dcc:	2000      	movs	r0, #0
 8028dce:	e01e      	b.n	8028e0e <__sflush_r+0xfa>
 8028dd0:	690e      	ldr	r6, [r1, #16]
 8028dd2:	2e00      	cmp	r6, #0
 8028dd4:	d0fa      	beq.n	8028dcc <__sflush_r+0xb8>
 8028dd6:	680f      	ldr	r7, [r1, #0]
 8028dd8:	600e      	str	r6, [r1, #0]
 8028dda:	1bba      	subs	r2, r7, r6
 8028ddc:	9201      	str	r2, [sp, #4]
 8028dde:	2200      	movs	r2, #0
 8028de0:	079b      	lsls	r3, r3, #30
 8028de2:	d100      	bne.n	8028de6 <__sflush_r+0xd2>
 8028de4:	694a      	ldr	r2, [r1, #20]
 8028de6:	60a2      	str	r2, [r4, #8]
 8028de8:	9b01      	ldr	r3, [sp, #4]
 8028dea:	2b00      	cmp	r3, #0
 8028dec:	ddee      	ble.n	8028dcc <__sflush_r+0xb8>
 8028dee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028df0:	0032      	movs	r2, r6
 8028df2:	001f      	movs	r7, r3
 8028df4:	0028      	movs	r0, r5
 8028df6:	9b01      	ldr	r3, [sp, #4]
 8028df8:	6a21      	ldr	r1, [r4, #32]
 8028dfa:	47b8      	blx	r7
 8028dfc:	2800      	cmp	r0, #0
 8028dfe:	dc07      	bgt.n	8028e10 <__sflush_r+0xfc>
 8028e00:	89a2      	ldrh	r2, [r4, #12]
 8028e02:	2340      	movs	r3, #64	@ 0x40
 8028e04:	2001      	movs	r0, #1
 8028e06:	4313      	orrs	r3, r2
 8028e08:	b21b      	sxth	r3, r3
 8028e0a:	81a3      	strh	r3, [r4, #12]
 8028e0c:	4240      	negs	r0, r0
 8028e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028e10:	9b01      	ldr	r3, [sp, #4]
 8028e12:	1836      	adds	r6, r6, r0
 8028e14:	1a1b      	subs	r3, r3, r0
 8028e16:	9301      	str	r3, [sp, #4]
 8028e18:	e7e6      	b.n	8028de8 <__sflush_r+0xd4>
 8028e1a:	46c0      	nop			@ (mov r8, r8)
 8028e1c:	20400001 	.word	0x20400001

08028e20 <_fflush_r>:
 8028e20:	690b      	ldr	r3, [r1, #16]
 8028e22:	b570      	push	{r4, r5, r6, lr}
 8028e24:	0005      	movs	r5, r0
 8028e26:	000c      	movs	r4, r1
 8028e28:	2b00      	cmp	r3, #0
 8028e2a:	d102      	bne.n	8028e32 <_fflush_r+0x12>
 8028e2c:	2500      	movs	r5, #0
 8028e2e:	0028      	movs	r0, r5
 8028e30:	bd70      	pop	{r4, r5, r6, pc}
 8028e32:	2800      	cmp	r0, #0
 8028e34:	d004      	beq.n	8028e40 <_fflush_r+0x20>
 8028e36:	6a03      	ldr	r3, [r0, #32]
 8028e38:	2b00      	cmp	r3, #0
 8028e3a:	d101      	bne.n	8028e40 <_fflush_r+0x20>
 8028e3c:	f7fd fa38 	bl	80262b0 <__sinit>
 8028e40:	220c      	movs	r2, #12
 8028e42:	5ea3      	ldrsh	r3, [r4, r2]
 8028e44:	2b00      	cmp	r3, #0
 8028e46:	d0f1      	beq.n	8028e2c <_fflush_r+0xc>
 8028e48:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028e4a:	07d2      	lsls	r2, r2, #31
 8028e4c:	d404      	bmi.n	8028e58 <_fflush_r+0x38>
 8028e4e:	059b      	lsls	r3, r3, #22
 8028e50:	d402      	bmi.n	8028e58 <_fflush_r+0x38>
 8028e52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028e54:	f7fd fce7 	bl	8026826 <__retarget_lock_acquire_recursive>
 8028e58:	0028      	movs	r0, r5
 8028e5a:	0021      	movs	r1, r4
 8028e5c:	f7ff ff5a 	bl	8028d14 <__sflush_r>
 8028e60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028e62:	0005      	movs	r5, r0
 8028e64:	07db      	lsls	r3, r3, #31
 8028e66:	d4e2      	bmi.n	8028e2e <_fflush_r+0xe>
 8028e68:	89a3      	ldrh	r3, [r4, #12]
 8028e6a:	059b      	lsls	r3, r3, #22
 8028e6c:	d4df      	bmi.n	8028e2e <_fflush_r+0xe>
 8028e6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028e70:	f7fd fcda 	bl	8026828 <__retarget_lock_release_recursive>
 8028e74:	e7db      	b.n	8028e2e <_fflush_r+0xe>
	...

08028e78 <__swhatbuf_r>:
 8028e78:	b570      	push	{r4, r5, r6, lr}
 8028e7a:	000e      	movs	r6, r1
 8028e7c:	001d      	movs	r5, r3
 8028e7e:	230e      	movs	r3, #14
 8028e80:	5ec9      	ldrsh	r1, [r1, r3]
 8028e82:	0014      	movs	r4, r2
 8028e84:	b096      	sub	sp, #88	@ 0x58
 8028e86:	2900      	cmp	r1, #0
 8028e88:	da0c      	bge.n	8028ea4 <__swhatbuf_r+0x2c>
 8028e8a:	89b2      	ldrh	r2, [r6, #12]
 8028e8c:	2380      	movs	r3, #128	@ 0x80
 8028e8e:	0011      	movs	r1, r2
 8028e90:	4019      	ands	r1, r3
 8028e92:	421a      	tst	r2, r3
 8028e94:	d114      	bne.n	8028ec0 <__swhatbuf_r+0x48>
 8028e96:	2380      	movs	r3, #128	@ 0x80
 8028e98:	00db      	lsls	r3, r3, #3
 8028e9a:	2000      	movs	r0, #0
 8028e9c:	6029      	str	r1, [r5, #0]
 8028e9e:	6023      	str	r3, [r4, #0]
 8028ea0:	b016      	add	sp, #88	@ 0x58
 8028ea2:	bd70      	pop	{r4, r5, r6, pc}
 8028ea4:	466a      	mov	r2, sp
 8028ea6:	f000 f865 	bl	8028f74 <_fstat_r>
 8028eaa:	2800      	cmp	r0, #0
 8028eac:	dbed      	blt.n	8028e8a <__swhatbuf_r+0x12>
 8028eae:	23f0      	movs	r3, #240	@ 0xf0
 8028eb0:	9901      	ldr	r1, [sp, #4]
 8028eb2:	021b      	lsls	r3, r3, #8
 8028eb4:	4019      	ands	r1, r3
 8028eb6:	4b04      	ldr	r3, [pc, #16]	@ (8028ec8 <__swhatbuf_r+0x50>)
 8028eb8:	18c9      	adds	r1, r1, r3
 8028eba:	424b      	negs	r3, r1
 8028ebc:	4159      	adcs	r1, r3
 8028ebe:	e7ea      	b.n	8028e96 <__swhatbuf_r+0x1e>
 8028ec0:	2100      	movs	r1, #0
 8028ec2:	2340      	movs	r3, #64	@ 0x40
 8028ec4:	e7e9      	b.n	8028e9a <__swhatbuf_r+0x22>
 8028ec6:	46c0      	nop			@ (mov r8, r8)
 8028ec8:	ffffe000 	.word	0xffffe000

08028ecc <__smakebuf_r>:
 8028ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ece:	2602      	movs	r6, #2
 8028ed0:	898b      	ldrh	r3, [r1, #12]
 8028ed2:	0005      	movs	r5, r0
 8028ed4:	000c      	movs	r4, r1
 8028ed6:	b085      	sub	sp, #20
 8028ed8:	4233      	tst	r3, r6
 8028eda:	d007      	beq.n	8028eec <__smakebuf_r+0x20>
 8028edc:	0023      	movs	r3, r4
 8028ede:	3347      	adds	r3, #71	@ 0x47
 8028ee0:	6023      	str	r3, [r4, #0]
 8028ee2:	6123      	str	r3, [r4, #16]
 8028ee4:	2301      	movs	r3, #1
 8028ee6:	6163      	str	r3, [r4, #20]
 8028ee8:	b005      	add	sp, #20
 8028eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028eec:	ab03      	add	r3, sp, #12
 8028eee:	aa02      	add	r2, sp, #8
 8028ef0:	f7ff ffc2 	bl	8028e78 <__swhatbuf_r>
 8028ef4:	9f02      	ldr	r7, [sp, #8]
 8028ef6:	9001      	str	r0, [sp, #4]
 8028ef8:	0039      	movs	r1, r7
 8028efa:	0028      	movs	r0, r5
 8028efc:	f7fe fef6 	bl	8027cec <_malloc_r>
 8028f00:	2800      	cmp	r0, #0
 8028f02:	d108      	bne.n	8028f16 <__smakebuf_r+0x4a>
 8028f04:	220c      	movs	r2, #12
 8028f06:	5ea3      	ldrsh	r3, [r4, r2]
 8028f08:	059a      	lsls	r2, r3, #22
 8028f0a:	d4ed      	bmi.n	8028ee8 <__smakebuf_r+0x1c>
 8028f0c:	2203      	movs	r2, #3
 8028f0e:	4393      	bics	r3, r2
 8028f10:	431e      	orrs	r6, r3
 8028f12:	81a6      	strh	r6, [r4, #12]
 8028f14:	e7e2      	b.n	8028edc <__smakebuf_r+0x10>
 8028f16:	2380      	movs	r3, #128	@ 0x80
 8028f18:	89a2      	ldrh	r2, [r4, #12]
 8028f1a:	6020      	str	r0, [r4, #0]
 8028f1c:	4313      	orrs	r3, r2
 8028f1e:	81a3      	strh	r3, [r4, #12]
 8028f20:	9b03      	ldr	r3, [sp, #12]
 8028f22:	6120      	str	r0, [r4, #16]
 8028f24:	6167      	str	r7, [r4, #20]
 8028f26:	2b00      	cmp	r3, #0
 8028f28:	d00c      	beq.n	8028f44 <__smakebuf_r+0x78>
 8028f2a:	0028      	movs	r0, r5
 8028f2c:	230e      	movs	r3, #14
 8028f2e:	5ee1      	ldrsh	r1, [r4, r3]
 8028f30:	f000 f832 	bl	8028f98 <_isatty_r>
 8028f34:	2800      	cmp	r0, #0
 8028f36:	d005      	beq.n	8028f44 <__smakebuf_r+0x78>
 8028f38:	2303      	movs	r3, #3
 8028f3a:	89a2      	ldrh	r2, [r4, #12]
 8028f3c:	439a      	bics	r2, r3
 8028f3e:	3b02      	subs	r3, #2
 8028f40:	4313      	orrs	r3, r2
 8028f42:	81a3      	strh	r3, [r4, #12]
 8028f44:	89a3      	ldrh	r3, [r4, #12]
 8028f46:	9a01      	ldr	r2, [sp, #4]
 8028f48:	4313      	orrs	r3, r2
 8028f4a:	81a3      	strh	r3, [r4, #12]
 8028f4c:	e7cc      	b.n	8028ee8 <__smakebuf_r+0x1c>

08028f4e <memmove>:
 8028f4e:	b510      	push	{r4, lr}
 8028f50:	4288      	cmp	r0, r1
 8028f52:	d902      	bls.n	8028f5a <memmove+0xc>
 8028f54:	188b      	adds	r3, r1, r2
 8028f56:	4298      	cmp	r0, r3
 8028f58:	d308      	bcc.n	8028f6c <memmove+0x1e>
 8028f5a:	2300      	movs	r3, #0
 8028f5c:	429a      	cmp	r2, r3
 8028f5e:	d007      	beq.n	8028f70 <memmove+0x22>
 8028f60:	5ccc      	ldrb	r4, [r1, r3]
 8028f62:	54c4      	strb	r4, [r0, r3]
 8028f64:	3301      	adds	r3, #1
 8028f66:	e7f9      	b.n	8028f5c <memmove+0xe>
 8028f68:	5c8b      	ldrb	r3, [r1, r2]
 8028f6a:	5483      	strb	r3, [r0, r2]
 8028f6c:	3a01      	subs	r2, #1
 8028f6e:	d2fb      	bcs.n	8028f68 <memmove+0x1a>
 8028f70:	bd10      	pop	{r4, pc}
	...

08028f74 <_fstat_r>:
 8028f74:	2300      	movs	r3, #0
 8028f76:	b570      	push	{r4, r5, r6, lr}
 8028f78:	4d06      	ldr	r5, [pc, #24]	@ (8028f94 <_fstat_r+0x20>)
 8028f7a:	0004      	movs	r4, r0
 8028f7c:	0008      	movs	r0, r1
 8028f7e:	0011      	movs	r1, r2
 8028f80:	602b      	str	r3, [r5, #0]
 8028f82:	f7ea fa99 	bl	80134b8 <_fstat>
 8028f86:	1c43      	adds	r3, r0, #1
 8028f88:	d103      	bne.n	8028f92 <_fstat_r+0x1e>
 8028f8a:	682b      	ldr	r3, [r5, #0]
 8028f8c:	2b00      	cmp	r3, #0
 8028f8e:	d000      	beq.n	8028f92 <_fstat_r+0x1e>
 8028f90:	6023      	str	r3, [r4, #0]
 8028f92:	bd70      	pop	{r4, r5, r6, pc}
 8028f94:	20003908 	.word	0x20003908

08028f98 <_isatty_r>:
 8028f98:	2300      	movs	r3, #0
 8028f9a:	b570      	push	{r4, r5, r6, lr}
 8028f9c:	4d06      	ldr	r5, [pc, #24]	@ (8028fb8 <_isatty_r+0x20>)
 8028f9e:	0004      	movs	r4, r0
 8028fa0:	0008      	movs	r0, r1
 8028fa2:	602b      	str	r3, [r5, #0]
 8028fa4:	f7ea fa96 	bl	80134d4 <_isatty>
 8028fa8:	1c43      	adds	r3, r0, #1
 8028faa:	d103      	bne.n	8028fb4 <_isatty_r+0x1c>
 8028fac:	682b      	ldr	r3, [r5, #0]
 8028fae:	2b00      	cmp	r3, #0
 8028fb0:	d000      	beq.n	8028fb4 <_isatty_r+0x1c>
 8028fb2:	6023      	str	r3, [r4, #0]
 8028fb4:	bd70      	pop	{r4, r5, r6, pc}
 8028fb6:	46c0      	nop			@ (mov r8, r8)
 8028fb8:	20003908 	.word	0x20003908

08028fbc <_sbrk_r>:
 8028fbc:	2300      	movs	r3, #0
 8028fbe:	b570      	push	{r4, r5, r6, lr}
 8028fc0:	4d06      	ldr	r5, [pc, #24]	@ (8028fdc <_sbrk_r+0x20>)
 8028fc2:	0004      	movs	r4, r0
 8028fc4:	0008      	movs	r0, r1
 8028fc6:	602b      	str	r3, [r5, #0]
 8028fc8:	f7ea fa98 	bl	80134fc <_sbrk>
 8028fcc:	1c43      	adds	r3, r0, #1
 8028fce:	d103      	bne.n	8028fd8 <_sbrk_r+0x1c>
 8028fd0:	682b      	ldr	r3, [r5, #0]
 8028fd2:	2b00      	cmp	r3, #0
 8028fd4:	d000      	beq.n	8028fd8 <_sbrk_r+0x1c>
 8028fd6:	6023      	str	r3, [r4, #0]
 8028fd8:	bd70      	pop	{r4, r5, r6, pc}
 8028fda:	46c0      	nop			@ (mov r8, r8)
 8028fdc:	20003908 	.word	0x20003908

08028fe0 <__assert_func>:
 8028fe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028fe2:	0014      	movs	r4, r2
 8028fe4:	001a      	movs	r2, r3
 8028fe6:	4b09      	ldr	r3, [pc, #36]	@ (802900c <__assert_func+0x2c>)
 8028fe8:	0005      	movs	r5, r0
 8028fea:	681b      	ldr	r3, [r3, #0]
 8028fec:	000e      	movs	r6, r1
 8028fee:	68d8      	ldr	r0, [r3, #12]
 8028ff0:	4b07      	ldr	r3, [pc, #28]	@ (8029010 <__assert_func+0x30>)
 8028ff2:	2c00      	cmp	r4, #0
 8028ff4:	d101      	bne.n	8028ffa <__assert_func+0x1a>
 8028ff6:	4b07      	ldr	r3, [pc, #28]	@ (8029014 <__assert_func+0x34>)
 8028ff8:	001c      	movs	r4, r3
 8028ffa:	4907      	ldr	r1, [pc, #28]	@ (8029018 <__assert_func+0x38>)
 8028ffc:	9301      	str	r3, [sp, #4]
 8028ffe:	9402      	str	r4, [sp, #8]
 8029000:	002b      	movs	r3, r5
 8029002:	9600      	str	r6, [sp, #0]
 8029004:	f000 f868 	bl	80290d8 <fiprintf>
 8029008:	f000 f876 	bl	80290f8 <abort>
 802900c:	200003ec 	.word	0x200003ec
 8029010:	0802ed59 	.word	0x0802ed59
 8029014:	0802ed94 	.word	0x0802ed94
 8029018:	0802ed66 	.word	0x0802ed66

0802901c <_calloc_r>:
 802901c:	b570      	push	{r4, r5, r6, lr}
 802901e:	0c0b      	lsrs	r3, r1, #16
 8029020:	0c15      	lsrs	r5, r2, #16
 8029022:	2b00      	cmp	r3, #0
 8029024:	d11e      	bne.n	8029064 <_calloc_r+0x48>
 8029026:	2d00      	cmp	r5, #0
 8029028:	d10c      	bne.n	8029044 <_calloc_r+0x28>
 802902a:	b289      	uxth	r1, r1
 802902c:	b294      	uxth	r4, r2
 802902e:	434c      	muls	r4, r1
 8029030:	0021      	movs	r1, r4
 8029032:	f7fe fe5b 	bl	8027cec <_malloc_r>
 8029036:	1e05      	subs	r5, r0, #0
 8029038:	d01b      	beq.n	8029072 <_calloc_r+0x56>
 802903a:	0022      	movs	r2, r4
 802903c:	2100      	movs	r1, #0
 802903e:	f7fd fb23 	bl	8026688 <memset>
 8029042:	e016      	b.n	8029072 <_calloc_r+0x56>
 8029044:	1c2b      	adds	r3, r5, #0
 8029046:	1c0c      	adds	r4, r1, #0
 8029048:	b289      	uxth	r1, r1
 802904a:	b292      	uxth	r2, r2
 802904c:	434a      	muls	r2, r1
 802904e:	b29b      	uxth	r3, r3
 8029050:	b2a1      	uxth	r1, r4
 8029052:	4359      	muls	r1, r3
 8029054:	0c14      	lsrs	r4, r2, #16
 8029056:	190c      	adds	r4, r1, r4
 8029058:	0c23      	lsrs	r3, r4, #16
 802905a:	d107      	bne.n	802906c <_calloc_r+0x50>
 802905c:	0424      	lsls	r4, r4, #16
 802905e:	b292      	uxth	r2, r2
 8029060:	4314      	orrs	r4, r2
 8029062:	e7e5      	b.n	8029030 <_calloc_r+0x14>
 8029064:	2d00      	cmp	r5, #0
 8029066:	d101      	bne.n	802906c <_calloc_r+0x50>
 8029068:	1c14      	adds	r4, r2, #0
 802906a:	e7ed      	b.n	8029048 <_calloc_r+0x2c>
 802906c:	230c      	movs	r3, #12
 802906e:	2500      	movs	r5, #0
 8029070:	6003      	str	r3, [r0, #0]
 8029072:	0028      	movs	r0, r5
 8029074:	bd70      	pop	{r4, r5, r6, pc}

08029076 <_realloc_r>:
 8029076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029078:	0006      	movs	r6, r0
 802907a:	000c      	movs	r4, r1
 802907c:	0015      	movs	r5, r2
 802907e:	2900      	cmp	r1, #0
 8029080:	d105      	bne.n	802908e <_realloc_r+0x18>
 8029082:	0011      	movs	r1, r2
 8029084:	f7fe fe32 	bl	8027cec <_malloc_r>
 8029088:	0004      	movs	r4, r0
 802908a:	0020      	movs	r0, r4
 802908c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802908e:	2a00      	cmp	r2, #0
 8029090:	d103      	bne.n	802909a <_realloc_r+0x24>
 8029092:	f7fe fa5b 	bl	802754c <_free_r>
 8029096:	002c      	movs	r4, r5
 8029098:	e7f7      	b.n	802908a <_realloc_r+0x14>
 802909a:	f000 f834 	bl	8029106 <_malloc_usable_size_r>
 802909e:	0007      	movs	r7, r0
 80290a0:	4285      	cmp	r5, r0
 80290a2:	d802      	bhi.n	80290aa <_realloc_r+0x34>
 80290a4:	0843      	lsrs	r3, r0, #1
 80290a6:	42ab      	cmp	r3, r5
 80290a8:	d3ef      	bcc.n	802908a <_realloc_r+0x14>
 80290aa:	0029      	movs	r1, r5
 80290ac:	0030      	movs	r0, r6
 80290ae:	f7fe fe1d 	bl	8027cec <_malloc_r>
 80290b2:	9001      	str	r0, [sp, #4]
 80290b4:	2800      	cmp	r0, #0
 80290b6:	d101      	bne.n	80290bc <_realloc_r+0x46>
 80290b8:	9c01      	ldr	r4, [sp, #4]
 80290ba:	e7e6      	b.n	802908a <_realloc_r+0x14>
 80290bc:	002a      	movs	r2, r5
 80290be:	42bd      	cmp	r5, r7
 80290c0:	d900      	bls.n	80290c4 <_realloc_r+0x4e>
 80290c2:	003a      	movs	r2, r7
 80290c4:	0021      	movs	r1, r4
 80290c6:	9801      	ldr	r0, [sp, #4]
 80290c8:	f7fd fbba 	bl	8026840 <memcpy>
 80290cc:	0021      	movs	r1, r4
 80290ce:	0030      	movs	r0, r6
 80290d0:	f7fe fa3c 	bl	802754c <_free_r>
 80290d4:	e7f0      	b.n	80290b8 <_realloc_r+0x42>
	...

080290d8 <fiprintf>:
 80290d8:	b40e      	push	{r1, r2, r3}
 80290da:	b517      	push	{r0, r1, r2, r4, lr}
 80290dc:	4c05      	ldr	r4, [pc, #20]	@ (80290f4 <fiprintf+0x1c>)
 80290de:	ab05      	add	r3, sp, #20
 80290e0:	cb04      	ldmia	r3!, {r2}
 80290e2:	0001      	movs	r1, r0
 80290e4:	6820      	ldr	r0, [r4, #0]
 80290e6:	9301      	str	r3, [sp, #4]
 80290e8:	f7ff fcf8 	bl	8028adc <_vfiprintf_r>
 80290ec:	bc1e      	pop	{r1, r2, r3, r4}
 80290ee:	bc08      	pop	{r3}
 80290f0:	b003      	add	sp, #12
 80290f2:	4718      	bx	r3
 80290f4:	200003ec 	.word	0x200003ec

080290f8 <abort>:
 80290f8:	2006      	movs	r0, #6
 80290fa:	b510      	push	{r4, lr}
 80290fc:	f000 f834 	bl	8029168 <raise>
 8029100:	2001      	movs	r0, #1
 8029102:	f7ea f9a5 	bl	8013450 <_exit>

08029106 <_malloc_usable_size_r>:
 8029106:	1f0b      	subs	r3, r1, #4
 8029108:	681b      	ldr	r3, [r3, #0]
 802910a:	1f18      	subs	r0, r3, #4
 802910c:	2b00      	cmp	r3, #0
 802910e:	da01      	bge.n	8029114 <_malloc_usable_size_r+0xe>
 8029110:	580b      	ldr	r3, [r1, r0]
 8029112:	18c0      	adds	r0, r0, r3
 8029114:	4770      	bx	lr

08029116 <_raise_r>:
 8029116:	b570      	push	{r4, r5, r6, lr}
 8029118:	0004      	movs	r4, r0
 802911a:	000d      	movs	r5, r1
 802911c:	291f      	cmp	r1, #31
 802911e:	d904      	bls.n	802912a <_raise_r+0x14>
 8029120:	2316      	movs	r3, #22
 8029122:	6003      	str	r3, [r0, #0]
 8029124:	2001      	movs	r0, #1
 8029126:	4240      	negs	r0, r0
 8029128:	bd70      	pop	{r4, r5, r6, pc}
 802912a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 802912c:	2b00      	cmp	r3, #0
 802912e:	d004      	beq.n	802913a <_raise_r+0x24>
 8029130:	008a      	lsls	r2, r1, #2
 8029132:	189b      	adds	r3, r3, r2
 8029134:	681a      	ldr	r2, [r3, #0]
 8029136:	2a00      	cmp	r2, #0
 8029138:	d108      	bne.n	802914c <_raise_r+0x36>
 802913a:	0020      	movs	r0, r4
 802913c:	f000 f830 	bl	80291a0 <_getpid_r>
 8029140:	002a      	movs	r2, r5
 8029142:	0001      	movs	r1, r0
 8029144:	0020      	movs	r0, r4
 8029146:	f000 f819 	bl	802917c <_kill_r>
 802914a:	e7ed      	b.n	8029128 <_raise_r+0x12>
 802914c:	2a01      	cmp	r2, #1
 802914e:	d009      	beq.n	8029164 <_raise_r+0x4e>
 8029150:	1c51      	adds	r1, r2, #1
 8029152:	d103      	bne.n	802915c <_raise_r+0x46>
 8029154:	2316      	movs	r3, #22
 8029156:	6003      	str	r3, [r0, #0]
 8029158:	2001      	movs	r0, #1
 802915a:	e7e5      	b.n	8029128 <_raise_r+0x12>
 802915c:	2100      	movs	r1, #0
 802915e:	0028      	movs	r0, r5
 8029160:	6019      	str	r1, [r3, #0]
 8029162:	4790      	blx	r2
 8029164:	2000      	movs	r0, #0
 8029166:	e7df      	b.n	8029128 <_raise_r+0x12>

08029168 <raise>:
 8029168:	b510      	push	{r4, lr}
 802916a:	4b03      	ldr	r3, [pc, #12]	@ (8029178 <raise+0x10>)
 802916c:	0001      	movs	r1, r0
 802916e:	6818      	ldr	r0, [r3, #0]
 8029170:	f7ff ffd1 	bl	8029116 <_raise_r>
 8029174:	bd10      	pop	{r4, pc}
 8029176:	46c0      	nop			@ (mov r8, r8)
 8029178:	200003ec 	.word	0x200003ec

0802917c <_kill_r>:
 802917c:	2300      	movs	r3, #0
 802917e:	b570      	push	{r4, r5, r6, lr}
 8029180:	4d06      	ldr	r5, [pc, #24]	@ (802919c <_kill_r+0x20>)
 8029182:	0004      	movs	r4, r0
 8029184:	0008      	movs	r0, r1
 8029186:	0011      	movs	r1, r2
 8029188:	602b      	str	r3, [r5, #0]
 802918a:	f7ea f951 	bl	8013430 <_kill>
 802918e:	1c43      	adds	r3, r0, #1
 8029190:	d103      	bne.n	802919a <_kill_r+0x1e>
 8029192:	682b      	ldr	r3, [r5, #0]
 8029194:	2b00      	cmp	r3, #0
 8029196:	d000      	beq.n	802919a <_kill_r+0x1e>
 8029198:	6023      	str	r3, [r4, #0]
 802919a:	bd70      	pop	{r4, r5, r6, pc}
 802919c:	20003908 	.word	0x20003908

080291a0 <_getpid_r>:
 80291a0:	b510      	push	{r4, lr}
 80291a2:	f7ea f93f 	bl	8013424 <_getpid>
 80291a6:	bd10      	pop	{r4, pc}

080291a8 <log>:
 80291a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291aa:	0004      	movs	r4, r0
 80291ac:	000d      	movs	r5, r1
 80291ae:	f000 f98d 	bl	80294cc <__ieee754_log>
 80291b2:	0022      	movs	r2, r4
 80291b4:	0006      	movs	r6, r0
 80291b6:	000f      	movs	r7, r1
 80291b8:	002b      	movs	r3, r5
 80291ba:	0020      	movs	r0, r4
 80291bc:	0029      	movs	r1, r5
 80291be:	f7da fab9 	bl	8003734 <__aeabi_dcmpun>
 80291c2:	2800      	cmp	r0, #0
 80291c4:	d115      	bne.n	80291f2 <log+0x4a>
 80291c6:	2200      	movs	r2, #0
 80291c8:	2300      	movs	r3, #0
 80291ca:	0020      	movs	r0, r4
 80291cc:	0029      	movs	r1, r5
 80291ce:	f7d7 f989 	bl	80004e4 <__aeabi_dcmpgt>
 80291d2:	2800      	cmp	r0, #0
 80291d4:	d10d      	bne.n	80291f2 <log+0x4a>
 80291d6:	2200      	movs	r2, #0
 80291d8:	2300      	movs	r3, #0
 80291da:	0020      	movs	r0, r4
 80291dc:	0029      	movs	r1, r5
 80291de:	f7d7 f967 	bl	80004b0 <__aeabi_dcmpeq>
 80291e2:	2800      	cmp	r0, #0
 80291e4:	d008      	beq.n	80291f8 <log+0x50>
 80291e6:	f7fd faf3 	bl	80267d0 <__errno>
 80291ea:	2322      	movs	r3, #34	@ 0x22
 80291ec:	2600      	movs	r6, #0
 80291ee:	4f07      	ldr	r7, [pc, #28]	@ (802920c <log+0x64>)
 80291f0:	6003      	str	r3, [r0, #0]
 80291f2:	0030      	movs	r0, r6
 80291f4:	0039      	movs	r1, r7
 80291f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80291f8:	f7fd faea 	bl	80267d0 <__errno>
 80291fc:	2321      	movs	r3, #33	@ 0x21
 80291fe:	6003      	str	r3, [r0, #0]
 8029200:	4803      	ldr	r0, [pc, #12]	@ (8029210 <log+0x68>)
 8029202:	f7fd fb27 	bl	8026854 <nan>
 8029206:	0006      	movs	r6, r0
 8029208:	000f      	movs	r7, r1
 802920a:	e7f2      	b.n	80291f2 <log+0x4a>
 802920c:	fff00000 	.word	0xfff00000
 8029210:	0802ed94 	.word	0x0802ed94

08029214 <pow>:
 8029214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029216:	0014      	movs	r4, r2
 8029218:	001d      	movs	r5, r3
 802921a:	9000      	str	r0, [sp, #0]
 802921c:	9101      	str	r1, [sp, #4]
 802921e:	f000 fb07 	bl	8029830 <__ieee754_pow>
 8029222:	0022      	movs	r2, r4
 8029224:	0006      	movs	r6, r0
 8029226:	000f      	movs	r7, r1
 8029228:	002b      	movs	r3, r5
 802922a:	0020      	movs	r0, r4
 802922c:	0029      	movs	r1, r5
 802922e:	f7da fa81 	bl	8003734 <__aeabi_dcmpun>
 8029232:	2800      	cmp	r0, #0
 8029234:	d13f      	bne.n	80292b6 <pow+0xa2>
 8029236:	9800      	ldr	r0, [sp, #0]
 8029238:	9901      	ldr	r1, [sp, #4]
 802923a:	2200      	movs	r2, #0
 802923c:	2300      	movs	r3, #0
 802923e:	f7d7 f937 	bl	80004b0 <__aeabi_dcmpeq>
 8029242:	2800      	cmp	r0, #0
 8029244:	d019      	beq.n	802927a <pow+0x66>
 8029246:	2200      	movs	r2, #0
 8029248:	2300      	movs	r3, #0
 802924a:	0020      	movs	r0, r4
 802924c:	0029      	movs	r1, r5
 802924e:	f7d7 f92f 	bl	80004b0 <__aeabi_dcmpeq>
 8029252:	2800      	cmp	r0, #0
 8029254:	d146      	bne.n	80292e4 <pow+0xd0>
 8029256:	0020      	movs	r0, r4
 8029258:	0029      	movs	r1, r5
 802925a:	f000 f88d 	bl	8029378 <finite>
 802925e:	2800      	cmp	r0, #0
 8029260:	d029      	beq.n	80292b6 <pow+0xa2>
 8029262:	2200      	movs	r2, #0
 8029264:	2300      	movs	r3, #0
 8029266:	0020      	movs	r0, r4
 8029268:	0029      	movs	r1, r5
 802926a:	f7d7 f927 	bl	80004bc <__aeabi_dcmplt>
 802926e:	2800      	cmp	r0, #0
 8029270:	d021      	beq.n	80292b6 <pow+0xa2>
 8029272:	f7fd faad 	bl	80267d0 <__errno>
 8029276:	2322      	movs	r3, #34	@ 0x22
 8029278:	e01c      	b.n	80292b4 <pow+0xa0>
 802927a:	0030      	movs	r0, r6
 802927c:	0039      	movs	r1, r7
 802927e:	f000 f87b 	bl	8029378 <finite>
 8029282:	2800      	cmp	r0, #0
 8029284:	d11b      	bne.n	80292be <pow+0xaa>
 8029286:	9800      	ldr	r0, [sp, #0]
 8029288:	9901      	ldr	r1, [sp, #4]
 802928a:	f000 f875 	bl	8029378 <finite>
 802928e:	2800      	cmp	r0, #0
 8029290:	d015      	beq.n	80292be <pow+0xaa>
 8029292:	0020      	movs	r0, r4
 8029294:	0029      	movs	r1, r5
 8029296:	f000 f86f 	bl	8029378 <finite>
 802929a:	2800      	cmp	r0, #0
 802929c:	d00f      	beq.n	80292be <pow+0xaa>
 802929e:	0032      	movs	r2, r6
 80292a0:	003b      	movs	r3, r7
 80292a2:	0030      	movs	r0, r6
 80292a4:	0039      	movs	r1, r7
 80292a6:	f7da fa45 	bl	8003734 <__aeabi_dcmpun>
 80292aa:	2800      	cmp	r0, #0
 80292ac:	d0e1      	beq.n	8029272 <pow+0x5e>
 80292ae:	f7fd fa8f 	bl	80267d0 <__errno>
 80292b2:	2321      	movs	r3, #33	@ 0x21
 80292b4:	6003      	str	r3, [r0, #0]
 80292b6:	0030      	movs	r0, r6
 80292b8:	0039      	movs	r1, r7
 80292ba:	b003      	add	sp, #12
 80292bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292be:	2200      	movs	r2, #0
 80292c0:	2300      	movs	r3, #0
 80292c2:	0030      	movs	r0, r6
 80292c4:	0039      	movs	r1, r7
 80292c6:	f7d7 f8f3 	bl	80004b0 <__aeabi_dcmpeq>
 80292ca:	2800      	cmp	r0, #0
 80292cc:	d0f3      	beq.n	80292b6 <pow+0xa2>
 80292ce:	9800      	ldr	r0, [sp, #0]
 80292d0:	9901      	ldr	r1, [sp, #4]
 80292d2:	f000 f851 	bl	8029378 <finite>
 80292d6:	2800      	cmp	r0, #0
 80292d8:	d0ed      	beq.n	80292b6 <pow+0xa2>
 80292da:	0020      	movs	r0, r4
 80292dc:	0029      	movs	r1, r5
 80292de:	f000 f84b 	bl	8029378 <finite>
 80292e2:	e7c4      	b.n	802926e <pow+0x5a>
 80292e4:	2600      	movs	r6, #0
 80292e6:	4f01      	ldr	r7, [pc, #4]	@ (80292ec <pow+0xd8>)
 80292e8:	e7e5      	b.n	80292b6 <pow+0xa2>
 80292ea:	46c0      	nop			@ (mov r8, r8)
 80292ec:	3ff00000 	.word	0x3ff00000

080292f0 <expf>:
 80292f0:	b570      	push	{r4, r5, r6, lr}
 80292f2:	1c04      	adds	r4, r0, #0
 80292f4:	f000 ffb8 	bl	802a268 <__ieee754_expf>
 80292f8:	1c05      	adds	r5, r0, #0
 80292fa:	1c20      	adds	r0, r4, #0
 80292fc:	f000 f844 	bl	8029388 <finitef>
 8029300:	2800      	cmp	r0, #0
 8029302:	d00b      	beq.n	802931c <expf+0x2c>
 8029304:	490c      	ldr	r1, [pc, #48]	@ (8029338 <expf+0x48>)
 8029306:	1c20      	adds	r0, r4, #0
 8029308:	f7d7 f926 	bl	8000558 <__aeabi_fcmpgt>
 802930c:	2800      	cmp	r0, #0
 802930e:	d007      	beq.n	8029320 <expf+0x30>
 8029310:	f7fd fa5e 	bl	80267d0 <__errno>
 8029314:	25ff      	movs	r5, #255	@ 0xff
 8029316:	2322      	movs	r3, #34	@ 0x22
 8029318:	05ed      	lsls	r5, r5, #23
 802931a:	6003      	str	r3, [r0, #0]
 802931c:	1c28      	adds	r0, r5, #0
 802931e:	bd70      	pop	{r4, r5, r6, pc}
 8029320:	4906      	ldr	r1, [pc, #24]	@ (802933c <expf+0x4c>)
 8029322:	1c20      	adds	r0, r4, #0
 8029324:	f7d7 f904 	bl	8000530 <__aeabi_fcmplt>
 8029328:	2800      	cmp	r0, #0
 802932a:	d0f7      	beq.n	802931c <expf+0x2c>
 802932c:	f7fd fa50 	bl	80267d0 <__errno>
 8029330:	2322      	movs	r3, #34	@ 0x22
 8029332:	2500      	movs	r5, #0
 8029334:	6003      	str	r3, [r0, #0]
 8029336:	e7f1      	b.n	802931c <expf+0x2c>
 8029338:	42b17217 	.word	0x42b17217
 802933c:	c2cff1b5 	.word	0xc2cff1b5

08029340 <sqrtf>:
 8029340:	b570      	push	{r4, r5, r6, lr}
 8029342:	1c05      	adds	r5, r0, #0
 8029344:	f000 f82a 	bl	802939c <__ieee754_sqrtf>
 8029348:	1c29      	adds	r1, r5, #0
 802934a:	1c04      	adds	r4, r0, #0
 802934c:	1c28      	adds	r0, r5, #0
 802934e:	f7d8 fa35 	bl	80017bc <__aeabi_fcmpun>
 8029352:	2800      	cmp	r0, #0
 8029354:	d10e      	bne.n	8029374 <sqrtf+0x34>
 8029356:	2100      	movs	r1, #0
 8029358:	1c28      	adds	r0, r5, #0
 802935a:	f7d7 f8e9 	bl	8000530 <__aeabi_fcmplt>
 802935e:	2800      	cmp	r0, #0
 8029360:	d008      	beq.n	8029374 <sqrtf+0x34>
 8029362:	f7fd fa35 	bl	80267d0 <__errno>
 8029366:	2321      	movs	r3, #33	@ 0x21
 8029368:	2100      	movs	r1, #0
 802936a:	6003      	str	r3, [r0, #0]
 802936c:	1c08      	adds	r0, r1, #0
 802936e:	f7d7 fc99 	bl	8000ca4 <__aeabi_fdiv>
 8029372:	1c04      	adds	r4, r0, #0
 8029374:	1c20      	adds	r0, r4, #0
 8029376:	bd70      	pop	{r4, r5, r6, pc}

08029378 <finite>:
 8029378:	4b02      	ldr	r3, [pc, #8]	@ (8029384 <finite+0xc>)
 802937a:	0048      	lsls	r0, r1, #1
 802937c:	0840      	lsrs	r0, r0, #1
 802937e:	18c0      	adds	r0, r0, r3
 8029380:	0fc0      	lsrs	r0, r0, #31
 8029382:	4770      	bx	lr
 8029384:	80100000 	.word	0x80100000

08029388 <finitef>:
 8029388:	22ff      	movs	r2, #255	@ 0xff
 802938a:	0043      	lsls	r3, r0, #1
 802938c:	085b      	lsrs	r3, r3, #1
 802938e:	2001      	movs	r0, #1
 8029390:	05d2      	lsls	r2, r2, #23
 8029392:	4293      	cmp	r3, r2
 8029394:	db00      	blt.n	8029398 <finitef+0x10>
 8029396:	2000      	movs	r0, #0
 8029398:	4770      	bx	lr
	...

0802939c <__ieee754_sqrtf>:
 802939c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802939e:	21ff      	movs	r1, #255	@ 0xff
 80293a0:	0042      	lsls	r2, r0, #1
 80293a2:	0003      	movs	r3, r0
 80293a4:	1c04      	adds	r4, r0, #0
 80293a6:	0852      	lsrs	r2, r2, #1
 80293a8:	05c9      	lsls	r1, r1, #23
 80293aa:	428a      	cmp	r2, r1
 80293ac:	d309      	bcc.n	80293c2 <__ieee754_sqrtf+0x26>
 80293ae:	1c01      	adds	r1, r0, #0
 80293b0:	f7d7 fe46 	bl	8001040 <__aeabi_fmul>
 80293b4:	1c01      	adds	r1, r0, #0
 80293b6:	1c20      	adds	r0, r4, #0
 80293b8:	f7d7 fa82 	bl	80008c0 <__aeabi_fadd>
 80293bc:	1c04      	adds	r4, r0, #0
 80293be:	1c20      	adds	r0, r4, #0
 80293c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80293c2:	2a00      	cmp	r2, #0
 80293c4:	d0fb      	beq.n	80293be <__ieee754_sqrtf+0x22>
 80293c6:	2800      	cmp	r0, #0
 80293c8:	da06      	bge.n	80293d8 <__ieee754_sqrtf+0x3c>
 80293ca:	1c01      	adds	r1, r0, #0
 80293cc:	f7d7 ff92 	bl	80012f4 <__aeabi_fsub>
 80293d0:	1c01      	adds	r1, r0, #0
 80293d2:	f7d7 fc67 	bl	8000ca4 <__aeabi_fdiv>
 80293d6:	e7f1      	b.n	80293bc <__ieee754_sqrtf+0x20>
 80293d8:	0002      	movs	r2, r0
 80293da:	400a      	ands	r2, r1
 80293dc:	4208      	tst	r0, r1
 80293de:	d040      	beq.n	8029462 <__ieee754_sqrtf+0xc6>
 80293e0:	15c1      	asrs	r1, r0, #23
 80293e2:	2280      	movs	r2, #128	@ 0x80
 80293e4:	000f      	movs	r7, r1
 80293e6:	025b      	lsls	r3, r3, #9
 80293e8:	0a5b      	lsrs	r3, r3, #9
 80293ea:	0412      	lsls	r2, r2, #16
 80293ec:	3f7f      	subs	r7, #127	@ 0x7f
 80293ee:	4313      	orrs	r3, r2
 80293f0:	07c9      	lsls	r1, r1, #31
 80293f2:	d400      	bmi.n	80293f6 <__ieee754_sqrtf+0x5a>
 80293f4:	005b      	lsls	r3, r3, #1
 80293f6:	2400      	movs	r4, #0
 80293f8:	2180      	movs	r1, #128	@ 0x80
 80293fa:	2019      	movs	r0, #25
 80293fc:	0026      	movs	r6, r4
 80293fe:	107f      	asrs	r7, r7, #1
 8029400:	005b      	lsls	r3, r3, #1
 8029402:	0449      	lsls	r1, r1, #17
 8029404:	1875      	adds	r5, r6, r1
 8029406:	001a      	movs	r2, r3
 8029408:	429d      	cmp	r5, r3
 802940a:	dc02      	bgt.n	8029412 <__ieee754_sqrtf+0x76>
 802940c:	186e      	adds	r6, r5, r1
 802940e:	1b5a      	subs	r2, r3, r5
 8029410:	1864      	adds	r4, r4, r1
 8029412:	3801      	subs	r0, #1
 8029414:	0053      	lsls	r3, r2, #1
 8029416:	0849      	lsrs	r1, r1, #1
 8029418:	2800      	cmp	r0, #0
 802941a:	d1f3      	bne.n	8029404 <__ieee754_sqrtf+0x68>
 802941c:	2a00      	cmp	r2, #0
 802941e:	d019      	beq.n	8029454 <__ieee754_sqrtf+0xb8>
 8029420:	4d16      	ldr	r5, [pc, #88]	@ (802947c <__ieee754_sqrtf+0xe0>)
 8029422:	4e17      	ldr	r6, [pc, #92]	@ (8029480 <__ieee754_sqrtf+0xe4>)
 8029424:	6828      	ldr	r0, [r5, #0]
 8029426:	6831      	ldr	r1, [r6, #0]
 8029428:	682b      	ldr	r3, [r5, #0]
 802942a:	9301      	str	r3, [sp, #4]
 802942c:	f7d7 ff62 	bl	80012f4 <__aeabi_fsub>
 8029430:	1c01      	adds	r1, r0, #0
 8029432:	9801      	ldr	r0, [sp, #4]
 8029434:	f7d7 f886 	bl	8000544 <__aeabi_fcmple>
 8029438:	2800      	cmp	r0, #0
 802943a:	d00b      	beq.n	8029454 <__ieee754_sqrtf+0xb8>
 802943c:	6828      	ldr	r0, [r5, #0]
 802943e:	6831      	ldr	r1, [r6, #0]
 8029440:	f7d7 fa3e 	bl	80008c0 <__aeabi_fadd>
 8029444:	682d      	ldr	r5, [r5, #0]
 8029446:	1c01      	adds	r1, r0, #0
 8029448:	1c28      	adds	r0, r5, #0
 802944a:	f7d7 f871 	bl	8000530 <__aeabi_fcmplt>
 802944e:	2800      	cmp	r0, #0
 8029450:	d010      	beq.n	8029474 <__ieee754_sqrtf+0xd8>
 8029452:	3402      	adds	r4, #2
 8029454:	23fc      	movs	r3, #252	@ 0xfc
 8029456:	1064      	asrs	r4, r4, #1
 8029458:	059b      	lsls	r3, r3, #22
 802945a:	18e3      	adds	r3, r4, r3
 802945c:	05fc      	lsls	r4, r7, #23
 802945e:	18e4      	adds	r4, r4, r3
 8029460:	e7ad      	b.n	80293be <__ieee754_sqrtf+0x22>
 8029462:	2080      	movs	r0, #128	@ 0x80
 8029464:	0400      	lsls	r0, r0, #16
 8029466:	005b      	lsls	r3, r3, #1
 8029468:	0011      	movs	r1, r2
 802946a:	3201      	adds	r2, #1
 802946c:	4203      	tst	r3, r0
 802946e:	d0fa      	beq.n	8029466 <__ieee754_sqrtf+0xca>
 8029470:	4249      	negs	r1, r1
 8029472:	e7b6      	b.n	80293e2 <__ieee754_sqrtf+0x46>
 8029474:	2301      	movs	r3, #1
 8029476:	3401      	adds	r4, #1
 8029478:	439c      	bics	r4, r3
 802947a:	e7eb      	b.n	8029454 <__ieee754_sqrtf+0xb8>
 802947c:	0802efec 	.word	0x0802efec
 8029480:	0802efe8 	.word	0x0802efe8

08029484 <roundf>:
 8029484:	0dc3      	lsrs	r3, r0, #23
 8029486:	b2db      	uxtb	r3, r3
 8029488:	3b7f      	subs	r3, #127	@ 0x7f
 802948a:	0002      	movs	r2, r0
 802948c:	b510      	push	{r4, lr}
 802948e:	2b16      	cmp	r3, #22
 8029490:	dc13      	bgt.n	80294ba <roundf+0x36>
 8029492:	2b00      	cmp	r3, #0
 8029494:	da07      	bge.n	80294a6 <roundf+0x22>
 8029496:	0fc2      	lsrs	r2, r0, #31
 8029498:	07d0      	lsls	r0, r2, #31
 802949a:	3301      	adds	r3, #1
 802949c:	d102      	bne.n	80294a4 <roundf+0x20>
 802949e:	23fe      	movs	r3, #254	@ 0xfe
 80294a0:	059b      	lsls	r3, r3, #22
 80294a2:	4318      	orrs	r0, r3
 80294a4:	bd10      	pop	{r4, pc}
 80294a6:	4908      	ldr	r1, [pc, #32]	@ (80294c8 <roundf+0x44>)
 80294a8:	4119      	asrs	r1, r3
 80294aa:	4208      	tst	r0, r1
 80294ac:	d0fa      	beq.n	80294a4 <roundf+0x20>
 80294ae:	2080      	movs	r0, #128	@ 0x80
 80294b0:	03c0      	lsls	r0, r0, #15
 80294b2:	4118      	asrs	r0, r3
 80294b4:	1880      	adds	r0, r0, r2
 80294b6:	4388      	bics	r0, r1
 80294b8:	e7f4      	b.n	80294a4 <roundf+0x20>
 80294ba:	2b80      	cmp	r3, #128	@ 0x80
 80294bc:	d1f2      	bne.n	80294a4 <roundf+0x20>
 80294be:	1c01      	adds	r1, r0, #0
 80294c0:	f7d7 f9fe 	bl	80008c0 <__aeabi_fadd>
 80294c4:	e7ee      	b.n	80294a4 <roundf+0x20>
 80294c6:	46c0      	nop			@ (mov r8, r8)
 80294c8:	007fffff 	.word	0x007fffff

080294cc <__ieee754_log>:
 80294cc:	2380      	movs	r3, #128	@ 0x80
 80294ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80294d0:	035b      	lsls	r3, r3, #13
 80294d2:	000e      	movs	r6, r1
 80294d4:	b08d      	sub	sp, #52	@ 0x34
 80294d6:	4299      	cmp	r1, r3
 80294d8:	da23      	bge.n	8029522 <__ieee754_log+0x56>
 80294da:	004b      	lsls	r3, r1, #1
 80294dc:	085b      	lsrs	r3, r3, #1
 80294de:	4303      	orrs	r3, r0
 80294e0:	d107      	bne.n	80294f2 <__ieee754_log+0x26>
 80294e2:	2200      	movs	r2, #0
 80294e4:	2300      	movs	r3, #0
 80294e6:	2000      	movs	r0, #0
 80294e8:	49b4      	ldr	r1, [pc, #720]	@ (80297bc <__ieee754_log+0x2f0>)
 80294ea:	f7d8 fdf9 	bl	80020e0 <__aeabi_ddiv>
 80294ee:	b00d      	add	sp, #52	@ 0x34
 80294f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80294f2:	2900      	cmp	r1, #0
 80294f4:	da06      	bge.n	8029504 <__ieee754_log+0x38>
 80294f6:	0002      	movs	r2, r0
 80294f8:	000b      	movs	r3, r1
 80294fa:	f7d9 fd11 	bl	8002f20 <__aeabi_dsub>
 80294fe:	2200      	movs	r2, #0
 8029500:	2300      	movs	r3, #0
 8029502:	e7f2      	b.n	80294ea <__ieee754_log+0x1e>
 8029504:	4bae      	ldr	r3, [pc, #696]	@ (80297c0 <__ieee754_log+0x2f4>)
 8029506:	2200      	movs	r2, #0
 8029508:	f7d9 fa24 	bl	8002954 <__aeabi_dmul>
 802950c:	2336      	movs	r3, #54	@ 0x36
 802950e:	000e      	movs	r6, r1
 8029510:	425b      	negs	r3, r3
 8029512:	4aac      	ldr	r2, [pc, #688]	@ (80297c4 <__ieee754_log+0x2f8>)
 8029514:	4296      	cmp	r6, r2
 8029516:	dd06      	ble.n	8029526 <__ieee754_log+0x5a>
 8029518:	0002      	movs	r2, r0
 802951a:	000b      	movs	r3, r1
 802951c:	f7d8 fa1a 	bl	8001954 <__aeabi_dadd>
 8029520:	e7e5      	b.n	80294ee <__ieee754_log+0x22>
 8029522:	2300      	movs	r3, #0
 8029524:	e7f5      	b.n	8029512 <__ieee754_log+0x46>
 8029526:	4ca8      	ldr	r4, [pc, #672]	@ (80297c8 <__ieee754_log+0x2fc>)
 8029528:	1532      	asrs	r2, r6, #20
 802952a:	1912      	adds	r2, r2, r4
 802952c:	0336      	lsls	r6, r6, #12
 802952e:	4ca7      	ldr	r4, [pc, #668]	@ (80297cc <__ieee754_log+0x300>)
 8029530:	18d2      	adds	r2, r2, r3
 8029532:	0b33      	lsrs	r3, r6, #12
 8029534:	9302      	str	r3, [sp, #8]
 8029536:	191b      	adds	r3, r3, r4
 8029538:	2480      	movs	r4, #128	@ 0x80
 802953a:	0364      	lsls	r4, r4, #13
 802953c:	4023      	ands	r3, r4
 802953e:	4ca4      	ldr	r4, [pc, #656]	@ (80297d0 <__ieee754_log+0x304>)
 8029540:	9d02      	ldr	r5, [sp, #8]
 8029542:	405c      	eors	r4, r3
 8029544:	151b      	asrs	r3, r3, #20
 8029546:	189b      	adds	r3, r3, r2
 8029548:	4325      	orrs	r5, r4
 802954a:	2200      	movs	r2, #0
 802954c:	9300      	str	r3, [sp, #0]
 802954e:	0029      	movs	r1, r5
 8029550:	4b9f      	ldr	r3, [pc, #636]	@ (80297d0 <__ieee754_log+0x304>)
 8029552:	f7d9 fce5 	bl	8002f20 <__aeabi_dsub>
 8029556:	9b02      	ldr	r3, [sp, #8]
 8029558:	0006      	movs	r6, r0
 802955a:	3302      	adds	r3, #2
 802955c:	031b      	lsls	r3, r3, #12
 802955e:	000f      	movs	r7, r1
 8029560:	2200      	movs	r2, #0
 8029562:	0b1b      	lsrs	r3, r3, #12
 8029564:	2b02      	cmp	r3, #2
 8029566:	dc64      	bgt.n	8029632 <__ieee754_log+0x166>
 8029568:	2300      	movs	r3, #0
 802956a:	f7d6 ffa1 	bl	80004b0 <__aeabi_dcmpeq>
 802956e:	2800      	cmp	r0, #0
 8029570:	d019      	beq.n	80295a6 <__ieee754_log+0xda>
 8029572:	9b00      	ldr	r3, [sp, #0]
 8029574:	2b00      	cmp	r3, #0
 8029576:	d100      	bne.n	802957a <__ieee754_log+0xae>
 8029578:	e11c      	b.n	80297b4 <__ieee754_log+0x2e8>
 802957a:	0018      	movs	r0, r3
 802957c:	f7da f938 	bl	80037f0 <__aeabi_i2d>
 8029580:	4a94      	ldr	r2, [pc, #592]	@ (80297d4 <__ieee754_log+0x308>)
 8029582:	4b95      	ldr	r3, [pc, #596]	@ (80297d8 <__ieee754_log+0x30c>)
 8029584:	0004      	movs	r4, r0
 8029586:	000d      	movs	r5, r1
 8029588:	f7d9 f9e4 	bl	8002954 <__aeabi_dmul>
 802958c:	4a93      	ldr	r2, [pc, #588]	@ (80297dc <__ieee754_log+0x310>)
 802958e:	0006      	movs	r6, r0
 8029590:	000f      	movs	r7, r1
 8029592:	4b93      	ldr	r3, [pc, #588]	@ (80297e0 <__ieee754_log+0x314>)
 8029594:	0020      	movs	r0, r4
 8029596:	0029      	movs	r1, r5
 8029598:	f7d9 f9dc 	bl	8002954 <__aeabi_dmul>
 802959c:	0002      	movs	r2, r0
 802959e:	000b      	movs	r3, r1
 80295a0:	0030      	movs	r0, r6
 80295a2:	0039      	movs	r1, r7
 80295a4:	e7ba      	b.n	802951c <__ieee754_log+0x50>
 80295a6:	4a8f      	ldr	r2, [pc, #572]	@ (80297e4 <__ieee754_log+0x318>)
 80295a8:	4b8f      	ldr	r3, [pc, #572]	@ (80297e8 <__ieee754_log+0x31c>)
 80295aa:	0030      	movs	r0, r6
 80295ac:	0039      	movs	r1, r7
 80295ae:	f7d9 f9d1 	bl	8002954 <__aeabi_dmul>
 80295b2:	0002      	movs	r2, r0
 80295b4:	000b      	movs	r3, r1
 80295b6:	2000      	movs	r0, #0
 80295b8:	498c      	ldr	r1, [pc, #560]	@ (80297ec <__ieee754_log+0x320>)
 80295ba:	f7d9 fcb1 	bl	8002f20 <__aeabi_dsub>
 80295be:	0032      	movs	r2, r6
 80295c0:	0004      	movs	r4, r0
 80295c2:	000d      	movs	r5, r1
 80295c4:	003b      	movs	r3, r7
 80295c6:	0030      	movs	r0, r6
 80295c8:	0039      	movs	r1, r7
 80295ca:	f7d9 f9c3 	bl	8002954 <__aeabi_dmul>
 80295ce:	000b      	movs	r3, r1
 80295d0:	0002      	movs	r2, r0
 80295d2:	0029      	movs	r1, r5
 80295d4:	0020      	movs	r0, r4
 80295d6:	f7d9 f9bd 	bl	8002954 <__aeabi_dmul>
 80295da:	9b00      	ldr	r3, [sp, #0]
 80295dc:	9002      	str	r0, [sp, #8]
 80295de:	9103      	str	r1, [sp, #12]
 80295e0:	2b00      	cmp	r3, #0
 80295e2:	d106      	bne.n	80295f2 <__ieee754_log+0x126>
 80295e4:	0002      	movs	r2, r0
 80295e6:	000b      	movs	r3, r1
 80295e8:	0030      	movs	r0, r6
 80295ea:	0039      	movs	r1, r7
 80295ec:	f7d9 fc98 	bl	8002f20 <__aeabi_dsub>
 80295f0:	e77d      	b.n	80294ee <__ieee754_log+0x22>
 80295f2:	9800      	ldr	r0, [sp, #0]
 80295f4:	f7da f8fc 	bl	80037f0 <__aeabi_i2d>
 80295f8:	4a76      	ldr	r2, [pc, #472]	@ (80297d4 <__ieee754_log+0x308>)
 80295fa:	4b77      	ldr	r3, [pc, #476]	@ (80297d8 <__ieee754_log+0x30c>)
 80295fc:	0004      	movs	r4, r0
 80295fe:	000d      	movs	r5, r1
 8029600:	f7d9 f9a8 	bl	8002954 <__aeabi_dmul>
 8029604:	4a75      	ldr	r2, [pc, #468]	@ (80297dc <__ieee754_log+0x310>)
 8029606:	9000      	str	r0, [sp, #0]
 8029608:	9101      	str	r1, [sp, #4]
 802960a:	4b75      	ldr	r3, [pc, #468]	@ (80297e0 <__ieee754_log+0x314>)
 802960c:	0020      	movs	r0, r4
 802960e:	0029      	movs	r1, r5
 8029610:	f7d9 f9a0 	bl	8002954 <__aeabi_dmul>
 8029614:	0002      	movs	r2, r0
 8029616:	000b      	movs	r3, r1
 8029618:	9802      	ldr	r0, [sp, #8]
 802961a:	9903      	ldr	r1, [sp, #12]
 802961c:	f7d9 fc80 	bl	8002f20 <__aeabi_dsub>
 8029620:	0032      	movs	r2, r6
 8029622:	003b      	movs	r3, r7
 8029624:	f7d9 fc7c 	bl	8002f20 <__aeabi_dsub>
 8029628:	0002      	movs	r2, r0
 802962a:	000b      	movs	r3, r1
 802962c:	9800      	ldr	r0, [sp, #0]
 802962e:	9901      	ldr	r1, [sp, #4]
 8029630:	e7dc      	b.n	80295ec <__ieee754_log+0x120>
 8029632:	2380      	movs	r3, #128	@ 0x80
 8029634:	05db      	lsls	r3, r3, #23
 8029636:	f7d8 f98d 	bl	8001954 <__aeabi_dadd>
 802963a:	0002      	movs	r2, r0
 802963c:	000b      	movs	r3, r1
 802963e:	0030      	movs	r0, r6
 8029640:	0039      	movs	r1, r7
 8029642:	f7d8 fd4d 	bl	80020e0 <__aeabi_ddiv>
 8029646:	9004      	str	r0, [sp, #16]
 8029648:	9105      	str	r1, [sp, #20]
 802964a:	9800      	ldr	r0, [sp, #0]
 802964c:	f7da f8d0 	bl	80037f0 <__aeabi_i2d>
 8029650:	9a04      	ldr	r2, [sp, #16]
 8029652:	9b05      	ldr	r3, [sp, #20]
 8029654:	9006      	str	r0, [sp, #24]
 8029656:	9107      	str	r1, [sp, #28]
 8029658:	0010      	movs	r0, r2
 802965a:	0019      	movs	r1, r3
 802965c:	f7d9 f97a 	bl	8002954 <__aeabi_dmul>
 8029660:	4a63      	ldr	r2, [pc, #396]	@ (80297f0 <__ieee754_log+0x324>)
 8029662:	9b02      	ldr	r3, [sp, #8]
 8029664:	4694      	mov	ip, r2
 8029666:	4463      	add	r3, ip
 8029668:	0002      	movs	r2, r0
 802966a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802966c:	000b      	movs	r3, r1
 802966e:	9008      	str	r0, [sp, #32]
 8029670:	9109      	str	r1, [sp, #36]	@ 0x24
 8029672:	f7d9 f96f 	bl	8002954 <__aeabi_dmul>
 8029676:	0004      	movs	r4, r0
 8029678:	000d      	movs	r5, r1
 802967a:	4a5e      	ldr	r2, [pc, #376]	@ (80297f4 <__ieee754_log+0x328>)
 802967c:	4b5e      	ldr	r3, [pc, #376]	@ (80297f8 <__ieee754_log+0x32c>)
 802967e:	f7d9 f969 	bl	8002954 <__aeabi_dmul>
 8029682:	4a5e      	ldr	r2, [pc, #376]	@ (80297fc <__ieee754_log+0x330>)
 8029684:	4b5e      	ldr	r3, [pc, #376]	@ (8029800 <__ieee754_log+0x334>)
 8029686:	f7d8 f965 	bl	8001954 <__aeabi_dadd>
 802968a:	0022      	movs	r2, r4
 802968c:	002b      	movs	r3, r5
 802968e:	f7d9 f961 	bl	8002954 <__aeabi_dmul>
 8029692:	4a5c      	ldr	r2, [pc, #368]	@ (8029804 <__ieee754_log+0x338>)
 8029694:	4b5c      	ldr	r3, [pc, #368]	@ (8029808 <__ieee754_log+0x33c>)
 8029696:	f7d8 f95d 	bl	8001954 <__aeabi_dadd>
 802969a:	0022      	movs	r2, r4
 802969c:	002b      	movs	r3, r5
 802969e:	f7d9 f959 	bl	8002954 <__aeabi_dmul>
 80296a2:	4a5a      	ldr	r2, [pc, #360]	@ (802980c <__ieee754_log+0x340>)
 80296a4:	4b5a      	ldr	r3, [pc, #360]	@ (8029810 <__ieee754_log+0x344>)
 80296a6:	f7d8 f955 	bl	8001954 <__aeabi_dadd>
 80296aa:	9a08      	ldr	r2, [sp, #32]
 80296ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80296ae:	f7d9 f951 	bl	8002954 <__aeabi_dmul>
 80296b2:	4a58      	ldr	r2, [pc, #352]	@ (8029814 <__ieee754_log+0x348>)
 80296b4:	9008      	str	r0, [sp, #32]
 80296b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80296b8:	4b57      	ldr	r3, [pc, #348]	@ (8029818 <__ieee754_log+0x34c>)
 80296ba:	0020      	movs	r0, r4
 80296bc:	0029      	movs	r1, r5
 80296be:	f7d9 f949 	bl	8002954 <__aeabi_dmul>
 80296c2:	4a56      	ldr	r2, [pc, #344]	@ (802981c <__ieee754_log+0x350>)
 80296c4:	4b56      	ldr	r3, [pc, #344]	@ (8029820 <__ieee754_log+0x354>)
 80296c6:	f7d8 f945 	bl	8001954 <__aeabi_dadd>
 80296ca:	0022      	movs	r2, r4
 80296cc:	002b      	movs	r3, r5
 80296ce:	f7d9 f941 	bl	8002954 <__aeabi_dmul>
 80296d2:	4a54      	ldr	r2, [pc, #336]	@ (8029824 <__ieee754_log+0x358>)
 80296d4:	4b54      	ldr	r3, [pc, #336]	@ (8029828 <__ieee754_log+0x35c>)
 80296d6:	f7d8 f93d 	bl	8001954 <__aeabi_dadd>
 80296da:	0022      	movs	r2, r4
 80296dc:	002b      	movs	r3, r5
 80296de:	f7d9 f939 	bl	8002954 <__aeabi_dmul>
 80296e2:	0002      	movs	r2, r0
 80296e4:	000b      	movs	r3, r1
 80296e6:	9808      	ldr	r0, [sp, #32]
 80296e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80296ea:	f7d8 f933 	bl	8001954 <__aeabi_dadd>
 80296ee:	9a02      	ldr	r2, [sp, #8]
 80296f0:	4b4e      	ldr	r3, [pc, #312]	@ (802982c <__ieee754_log+0x360>)
 80296f2:	0004      	movs	r4, r0
 80296f4:	1a9b      	subs	r3, r3, r2
 80296f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80296f8:	000d      	movs	r5, r1
 80296fa:	4313      	orrs	r3, r2
 80296fc:	2b00      	cmp	r3, #0
 80296fe:	dd34      	ble.n	802976a <__ieee754_log+0x29e>
 8029700:	2200      	movs	r2, #0
 8029702:	4b3a      	ldr	r3, [pc, #232]	@ (80297ec <__ieee754_log+0x320>)
 8029704:	0030      	movs	r0, r6
 8029706:	0039      	movs	r1, r7
 8029708:	f7d9 f924 	bl	8002954 <__aeabi_dmul>
 802970c:	0032      	movs	r2, r6
 802970e:	003b      	movs	r3, r7
 8029710:	f7d9 f920 	bl	8002954 <__aeabi_dmul>
 8029714:	0002      	movs	r2, r0
 8029716:	000b      	movs	r3, r1
 8029718:	9002      	str	r0, [sp, #8]
 802971a:	9103      	str	r1, [sp, #12]
 802971c:	0020      	movs	r0, r4
 802971e:	0029      	movs	r1, r5
 8029720:	f7d8 f918 	bl	8001954 <__aeabi_dadd>
 8029724:	9a04      	ldr	r2, [sp, #16]
 8029726:	9b05      	ldr	r3, [sp, #20]
 8029728:	f7d9 f914 	bl	8002954 <__aeabi_dmul>
 802972c:	9b00      	ldr	r3, [sp, #0]
 802972e:	0004      	movs	r4, r0
 8029730:	000d      	movs	r5, r1
 8029732:	2b00      	cmp	r3, #0
 8029734:	d106      	bne.n	8029744 <__ieee754_log+0x278>
 8029736:	0002      	movs	r2, r0
 8029738:	000b      	movs	r3, r1
 802973a:	9802      	ldr	r0, [sp, #8]
 802973c:	9903      	ldr	r1, [sp, #12]
 802973e:	f7d9 fbef 	bl	8002f20 <__aeabi_dsub>
 8029742:	e74f      	b.n	80295e4 <__ieee754_log+0x118>
 8029744:	4a23      	ldr	r2, [pc, #140]	@ (80297d4 <__ieee754_log+0x308>)
 8029746:	4b24      	ldr	r3, [pc, #144]	@ (80297d8 <__ieee754_log+0x30c>)
 8029748:	9806      	ldr	r0, [sp, #24]
 802974a:	9907      	ldr	r1, [sp, #28]
 802974c:	f7d9 f902 	bl	8002954 <__aeabi_dmul>
 8029750:	4a22      	ldr	r2, [pc, #136]	@ (80297dc <__ieee754_log+0x310>)
 8029752:	9000      	str	r0, [sp, #0]
 8029754:	9101      	str	r1, [sp, #4]
 8029756:	9806      	ldr	r0, [sp, #24]
 8029758:	9907      	ldr	r1, [sp, #28]
 802975a:	4b21      	ldr	r3, [pc, #132]	@ (80297e0 <__ieee754_log+0x314>)
 802975c:	f7d9 f8fa 	bl	8002954 <__aeabi_dmul>
 8029760:	0022      	movs	r2, r4
 8029762:	002b      	movs	r3, r5
 8029764:	f7d8 f8f6 	bl	8001954 <__aeabi_dadd>
 8029768:	e754      	b.n	8029614 <__ieee754_log+0x148>
 802976a:	0002      	movs	r2, r0
 802976c:	000b      	movs	r3, r1
 802976e:	0030      	movs	r0, r6
 8029770:	0039      	movs	r1, r7
 8029772:	f7d9 fbd5 	bl	8002f20 <__aeabi_dsub>
 8029776:	9a04      	ldr	r2, [sp, #16]
 8029778:	9b05      	ldr	r3, [sp, #20]
 802977a:	f7d9 f8eb 	bl	8002954 <__aeabi_dmul>
 802977e:	9b00      	ldr	r3, [sp, #0]
 8029780:	0004      	movs	r4, r0
 8029782:	000d      	movs	r5, r1
 8029784:	2b00      	cmp	r3, #0
 8029786:	d102      	bne.n	802978e <__ieee754_log+0x2c2>
 8029788:	0002      	movs	r2, r0
 802978a:	000b      	movs	r3, r1
 802978c:	e72c      	b.n	80295e8 <__ieee754_log+0x11c>
 802978e:	4a11      	ldr	r2, [pc, #68]	@ (80297d4 <__ieee754_log+0x308>)
 8029790:	4b11      	ldr	r3, [pc, #68]	@ (80297d8 <__ieee754_log+0x30c>)
 8029792:	9806      	ldr	r0, [sp, #24]
 8029794:	9907      	ldr	r1, [sp, #28]
 8029796:	f7d9 f8dd 	bl	8002954 <__aeabi_dmul>
 802979a:	4a10      	ldr	r2, [pc, #64]	@ (80297dc <__ieee754_log+0x310>)
 802979c:	9000      	str	r0, [sp, #0]
 802979e:	9101      	str	r1, [sp, #4]
 80297a0:	9806      	ldr	r0, [sp, #24]
 80297a2:	9907      	ldr	r1, [sp, #28]
 80297a4:	4b0e      	ldr	r3, [pc, #56]	@ (80297e0 <__ieee754_log+0x314>)
 80297a6:	f7d9 f8d5 	bl	8002954 <__aeabi_dmul>
 80297aa:	0002      	movs	r2, r0
 80297ac:	000b      	movs	r3, r1
 80297ae:	0020      	movs	r0, r4
 80297b0:	0029      	movs	r1, r5
 80297b2:	e733      	b.n	802961c <__ieee754_log+0x150>
 80297b4:	2000      	movs	r0, #0
 80297b6:	2100      	movs	r1, #0
 80297b8:	e699      	b.n	80294ee <__ieee754_log+0x22>
 80297ba:	46c0      	nop			@ (mov r8, r8)
 80297bc:	c3500000 	.word	0xc3500000
 80297c0:	43500000 	.word	0x43500000
 80297c4:	7fefffff 	.word	0x7fefffff
 80297c8:	fffffc01 	.word	0xfffffc01
 80297cc:	00095f64 	.word	0x00095f64
 80297d0:	3ff00000 	.word	0x3ff00000
 80297d4:	fee00000 	.word	0xfee00000
 80297d8:	3fe62e42 	.word	0x3fe62e42
 80297dc:	35793c76 	.word	0x35793c76
 80297e0:	3dea39ef 	.word	0x3dea39ef
 80297e4:	55555555 	.word	0x55555555
 80297e8:	3fd55555 	.word	0x3fd55555
 80297ec:	3fe00000 	.word	0x3fe00000
 80297f0:	fff9eb86 	.word	0xfff9eb86
 80297f4:	df3e5244 	.word	0xdf3e5244
 80297f8:	3fc2f112 	.word	0x3fc2f112
 80297fc:	96cb03de 	.word	0x96cb03de
 8029800:	3fc74664 	.word	0x3fc74664
 8029804:	94229359 	.word	0x94229359
 8029808:	3fd24924 	.word	0x3fd24924
 802980c:	55555593 	.word	0x55555593
 8029810:	3fe55555 	.word	0x3fe55555
 8029814:	d078c69f 	.word	0xd078c69f
 8029818:	3fc39a09 	.word	0x3fc39a09
 802981c:	1d8e78af 	.word	0x1d8e78af
 8029820:	3fcc71c5 	.word	0x3fcc71c5
 8029824:	9997fa04 	.word	0x9997fa04
 8029828:	3fd99999 	.word	0x3fd99999
 802982c:	0006b851 	.word	0x0006b851

08029830 <__ieee754_pow>:
 8029830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029832:	b095      	sub	sp, #84	@ 0x54
 8029834:	9204      	str	r2, [sp, #16]
 8029836:	9305      	str	r3, [sp, #20]
 8029838:	9b04      	ldr	r3, [sp, #16]
 802983a:	9f05      	ldr	r7, [sp, #20]
 802983c:	001a      	movs	r2, r3
 802983e:	007d      	lsls	r5, r7, #1
 8029840:	086d      	lsrs	r5, r5, #1
 8029842:	9002      	str	r0, [sp, #8]
 8029844:	9103      	str	r1, [sp, #12]
 8029846:	432a      	orrs	r2, r5
 8029848:	d11a      	bne.n	8029880 <__ieee754_pow+0x50>
 802984a:	2180      	movs	r1, #128	@ 0x80
 802984c:	9a02      	ldr	r2, [sp, #8]
 802984e:	9803      	ldr	r0, [sp, #12]
 8029850:	0309      	lsls	r1, r1, #12
 8029852:	4048      	eors	r0, r1
 8029854:	0003      	movs	r3, r0
 8029856:	1892      	adds	r2, r2, r2
 8029858:	415b      	adcs	r3, r3
 802985a:	4996      	ldr	r1, [pc, #600]	@ (8029ab4 <__ieee754_pow+0x284>)
 802985c:	428b      	cmp	r3, r1
 802985e:	d806      	bhi.n	802986e <__ieee754_pow+0x3e>
 8029860:	d001      	beq.n	8029866 <__ieee754_pow+0x36>
 8029862:	f000 fcce 	bl	802a202 <__ieee754_pow+0x9d2>
 8029866:	2a00      	cmp	r2, #0
 8029868:	d101      	bne.n	802986e <__ieee754_pow+0x3e>
 802986a:	f000 fcca 	bl	802a202 <__ieee754_pow+0x9d2>
 802986e:	9a04      	ldr	r2, [sp, #16]
 8029870:	9b05      	ldr	r3, [sp, #20]
 8029872:	9802      	ldr	r0, [sp, #8]
 8029874:	9903      	ldr	r1, [sp, #12]
 8029876:	f7d8 f86d 	bl	8001954 <__aeabi_dadd>
 802987a:	9000      	str	r0, [sp, #0]
 802987c:	9101      	str	r1, [sp, #4]
 802987e:	e08e      	b.n	802999e <__ieee754_pow+0x16e>
 8029880:	9a03      	ldr	r2, [sp, #12]
 8029882:	9206      	str	r2, [sp, #24]
 8029884:	9a02      	ldr	r2, [sp, #8]
 8029886:	920a      	str	r2, [sp, #40]	@ 0x28
 8029888:	9a03      	ldr	r2, [sp, #12]
 802988a:	0054      	lsls	r4, r2, #1
 802988c:	4a8a      	ldr	r2, [pc, #552]	@ (8029ab8 <__ieee754_pow+0x288>)
 802988e:	0864      	lsrs	r4, r4, #1
 8029890:	4294      	cmp	r4, r2
 8029892:	d80e      	bhi.n	80298b2 <__ieee754_pow+0x82>
 8029894:	d105      	bne.n	80298a2 <__ieee754_pow+0x72>
 8029896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029898:	2a00      	cmp	r2, #0
 802989a:	d1e8      	bne.n	802986e <__ieee754_pow+0x3e>
 802989c:	42a5      	cmp	r5, r4
 802989e:	d8e6      	bhi.n	802986e <__ieee754_pow+0x3e>
 80298a0:	e002      	b.n	80298a8 <__ieee754_pow+0x78>
 80298a2:	4a85      	ldr	r2, [pc, #532]	@ (8029ab8 <__ieee754_pow+0x288>)
 80298a4:	4295      	cmp	r5, r2
 80298a6:	d804      	bhi.n	80298b2 <__ieee754_pow+0x82>
 80298a8:	4a83      	ldr	r2, [pc, #524]	@ (8029ab8 <__ieee754_pow+0x288>)
 80298aa:	4295      	cmp	r5, r2
 80298ac:	d10c      	bne.n	80298c8 <__ieee754_pow+0x98>
 80298ae:	2b00      	cmp	r3, #0
 80298b0:	d00a      	beq.n	80298c8 <__ieee754_pow+0x98>
 80298b2:	4a82      	ldr	r2, [pc, #520]	@ (8029abc <__ieee754_pow+0x28c>)
 80298b4:	9b03      	ldr	r3, [sp, #12]
 80298b6:	189b      	adds	r3, r3, r2
 80298b8:	9a02      	ldr	r2, [sp, #8]
 80298ba:	4313      	orrs	r3, r2
 80298bc:	d1d7      	bne.n	802986e <__ieee754_pow+0x3e>
 80298be:	2180      	movs	r1, #128	@ 0x80
 80298c0:	9a04      	ldr	r2, [sp, #16]
 80298c2:	9805      	ldr	r0, [sp, #20]
 80298c4:	0309      	lsls	r1, r1, #12
 80298c6:	e7c4      	b.n	8029852 <__ieee754_pow+0x22>
 80298c8:	2600      	movs	r6, #0
 80298ca:	9a06      	ldr	r2, [sp, #24]
 80298cc:	9408      	str	r4, [sp, #32]
 80298ce:	42b2      	cmp	r2, r6
 80298d0:	da42      	bge.n	8029958 <__ieee754_pow+0x128>
 80298d2:	4a7b      	ldr	r2, [pc, #492]	@ (8029ac0 <__ieee754_pow+0x290>)
 80298d4:	4295      	cmp	r5, r2
 80298d6:	d83e      	bhi.n	8029956 <__ieee754_pow+0x126>
 80298d8:	4a7a      	ldr	r2, [pc, #488]	@ (8029ac4 <__ieee754_pow+0x294>)
 80298da:	4295      	cmp	r5, r2
 80298dc:	d910      	bls.n	8029900 <__ieee754_pow+0xd0>
 80298de:	497a      	ldr	r1, [pc, #488]	@ (8029ac8 <__ieee754_pow+0x298>)
 80298e0:	152a      	asrs	r2, r5, #20
 80298e2:	1852      	adds	r2, r2, r1
 80298e4:	2a14      	cmp	r2, #20
 80298e6:	dd18      	ble.n	802991a <__ieee754_pow+0xea>
 80298e8:	2134      	movs	r1, #52	@ 0x34
 80298ea:	1a89      	subs	r1, r1, r2
 80298ec:	9a04      	ldr	r2, [sp, #16]
 80298ee:	40ca      	lsrs	r2, r1
 80298f0:	0010      	movs	r0, r2
 80298f2:	4088      	lsls	r0, r1
 80298f4:	4298      	cmp	r0, r3
 80298f6:	d103      	bne.n	8029900 <__ieee754_pow+0xd0>
 80298f8:	2101      	movs	r1, #1
 80298fa:	3602      	adds	r6, #2
 80298fc:	400a      	ands	r2, r1
 80298fe:	1ab6      	subs	r6, r6, r2
 8029900:	2b00      	cmp	r3, #0
 8029902:	d15b      	bne.n	80299bc <__ieee754_pow+0x18c>
 8029904:	2380      	movs	r3, #128	@ 0x80
 8029906:	05db      	lsls	r3, r3, #23
 8029908:	429f      	cmp	r7, r3
 802990a:	d14c      	bne.n	80299a6 <__ieee754_pow+0x176>
 802990c:	9a02      	ldr	r2, [sp, #8]
 802990e:	9b03      	ldr	r3, [sp, #12]
 8029910:	0010      	movs	r0, r2
 8029912:	0019      	movs	r1, r3
 8029914:	f7d9 f81e 	bl	8002954 <__aeabi_dmul>
 8029918:	e7af      	b.n	802987a <__ieee754_pow+0x4a>
 802991a:	2b00      	cmp	r3, #0
 802991c:	d14e      	bne.n	80299bc <__ieee754_pow+0x18c>
 802991e:	3314      	adds	r3, #20
 8029920:	1a9a      	subs	r2, r3, r2
 8029922:	002b      	movs	r3, r5
 8029924:	4113      	asrs	r3, r2
 8029926:	0019      	movs	r1, r3
 8029928:	4091      	lsls	r1, r2
 802992a:	42a9      	cmp	r1, r5
 802992c:	d103      	bne.n	8029936 <__ieee754_pow+0x106>
 802992e:	2201      	movs	r2, #1
 8029930:	2602      	movs	r6, #2
 8029932:	4013      	ands	r3, r2
 8029934:	1af6      	subs	r6, r6, r3
 8029936:	4b65      	ldr	r3, [pc, #404]	@ (8029acc <__ieee754_pow+0x29c>)
 8029938:	429d      	cmp	r5, r3
 802993a:	d1e3      	bne.n	8029904 <__ieee754_pow+0xd4>
 802993c:	9b02      	ldr	r3, [sp, #8]
 802993e:	9c03      	ldr	r4, [sp, #12]
 8029940:	9300      	str	r3, [sp, #0]
 8029942:	9401      	str	r4, [sp, #4]
 8029944:	2f00      	cmp	r7, #0
 8029946:	da2a      	bge.n	802999e <__ieee754_pow+0x16e>
 8029948:	001a      	movs	r2, r3
 802994a:	2000      	movs	r0, #0
 802994c:	0023      	movs	r3, r4
 802994e:	495f      	ldr	r1, [pc, #380]	@ (8029acc <__ieee754_pow+0x29c>)
 8029950:	f7d8 fbc6 	bl	80020e0 <__aeabi_ddiv>
 8029954:	e791      	b.n	802987a <__ieee754_pow+0x4a>
 8029956:	2602      	movs	r6, #2
 8029958:	2b00      	cmp	r3, #0
 802995a:	d12f      	bne.n	80299bc <__ieee754_pow+0x18c>
 802995c:	4b56      	ldr	r3, [pc, #344]	@ (8029ab8 <__ieee754_pow+0x288>)
 802995e:	429d      	cmp	r5, r3
 8029960:	d1e9      	bne.n	8029936 <__ieee754_pow+0x106>
 8029962:	4b56      	ldr	r3, [pc, #344]	@ (8029abc <__ieee754_pow+0x28c>)
 8029964:	9a02      	ldr	r2, [sp, #8]
 8029966:	18e3      	adds	r3, r4, r3
 8029968:	4313      	orrs	r3, r2
 802996a:	d101      	bne.n	8029970 <__ieee754_pow+0x140>
 802996c:	f000 fc49 	bl	802a202 <__ieee754_pow+0x9d2>
 8029970:	4b54      	ldr	r3, [pc, #336]	@ (8029ac4 <__ieee754_pow+0x294>)
 8029972:	429c      	cmp	r4, r3
 8029974:	d909      	bls.n	802998a <__ieee754_pow+0x15a>
 8029976:	9b04      	ldr	r3, [sp, #16]
 8029978:	9c05      	ldr	r4, [sp, #20]
 802997a:	9300      	str	r3, [sp, #0]
 802997c:	9401      	str	r4, [sp, #4]
 802997e:	2f00      	cmp	r7, #0
 8029980:	da0d      	bge.n	802999e <__ieee754_pow+0x16e>
 8029982:	2300      	movs	r3, #0
 8029984:	2400      	movs	r4, #0
 8029986:	f000 fc3e 	bl	802a206 <__ieee754_pow+0x9d6>
 802998a:	2f00      	cmp	r7, #0
 802998c:	daf9      	bge.n	8029982 <__ieee754_pow+0x152>
 802998e:	2280      	movs	r2, #128	@ 0x80
 8029990:	0612      	lsls	r2, r2, #24
 8029992:	4694      	mov	ip, r2
 8029994:	9b04      	ldr	r3, [sp, #16]
 8029996:	9300      	str	r3, [sp, #0]
 8029998:	9b05      	ldr	r3, [sp, #20]
 802999a:	4463      	add	r3, ip
 802999c:	9301      	str	r3, [sp, #4]
 802999e:	9800      	ldr	r0, [sp, #0]
 80299a0:	9901      	ldr	r1, [sp, #4]
 80299a2:	b015      	add	sp, #84	@ 0x54
 80299a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80299a6:	4b4a      	ldr	r3, [pc, #296]	@ (8029ad0 <__ieee754_pow+0x2a0>)
 80299a8:	429f      	cmp	r7, r3
 80299aa:	d107      	bne.n	80299bc <__ieee754_pow+0x18c>
 80299ac:	9b06      	ldr	r3, [sp, #24]
 80299ae:	2b00      	cmp	r3, #0
 80299b0:	db04      	blt.n	80299bc <__ieee754_pow+0x18c>
 80299b2:	9802      	ldr	r0, [sp, #8]
 80299b4:	9903      	ldr	r1, [sp, #12]
 80299b6:	f000 fe03 	bl	802a5c0 <__ieee754_sqrt>
 80299ba:	e75e      	b.n	802987a <__ieee754_pow+0x4a>
 80299bc:	9802      	ldr	r0, [sp, #8]
 80299be:	9903      	ldr	r1, [sp, #12]
 80299c0:	f000 fc4e 	bl	802a260 <fabs>
 80299c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80299c6:	9000      	str	r0, [sp, #0]
 80299c8:	9101      	str	r1, [sp, #4]
 80299ca:	2b00      	cmp	r3, #0
 80299cc:	d12c      	bne.n	8029a28 <__ieee754_pow+0x1f8>
 80299ce:	9b03      	ldr	r3, [sp, #12]
 80299d0:	4a3e      	ldr	r2, [pc, #248]	@ (8029acc <__ieee754_pow+0x29c>)
 80299d2:	009b      	lsls	r3, r3, #2
 80299d4:	089b      	lsrs	r3, r3, #2
 80299d6:	4293      	cmp	r3, r2
 80299d8:	d001      	beq.n	80299de <__ieee754_pow+0x1ae>
 80299da:	2c00      	cmp	r4, #0
 80299dc:	d124      	bne.n	8029a28 <__ieee754_pow+0x1f8>
 80299de:	2f00      	cmp	r7, #0
 80299e0:	da07      	bge.n	80299f2 <__ieee754_pow+0x1c2>
 80299e2:	9a00      	ldr	r2, [sp, #0]
 80299e4:	9b01      	ldr	r3, [sp, #4]
 80299e6:	2000      	movs	r0, #0
 80299e8:	4938      	ldr	r1, [pc, #224]	@ (8029acc <__ieee754_pow+0x29c>)
 80299ea:	f7d8 fb79 	bl	80020e0 <__aeabi_ddiv>
 80299ee:	9000      	str	r0, [sp, #0]
 80299f0:	9101      	str	r1, [sp, #4]
 80299f2:	9b06      	ldr	r3, [sp, #24]
 80299f4:	2b00      	cmp	r3, #0
 80299f6:	dad2      	bge.n	802999e <__ieee754_pow+0x16e>
 80299f8:	4b30      	ldr	r3, [pc, #192]	@ (8029abc <__ieee754_pow+0x28c>)
 80299fa:	18e4      	adds	r4, r4, r3
 80299fc:	4334      	orrs	r4, r6
 80299fe:	d108      	bne.n	8029a12 <__ieee754_pow+0x1e2>
 8029a00:	9a00      	ldr	r2, [sp, #0]
 8029a02:	9b01      	ldr	r3, [sp, #4]
 8029a04:	0010      	movs	r0, r2
 8029a06:	0019      	movs	r1, r3
 8029a08:	f7d9 fa8a 	bl	8002f20 <__aeabi_dsub>
 8029a0c:	0002      	movs	r2, r0
 8029a0e:	000b      	movs	r3, r1
 8029a10:	e79e      	b.n	8029950 <__ieee754_pow+0x120>
 8029a12:	2e01      	cmp	r6, #1
 8029a14:	d1c3      	bne.n	802999e <__ieee754_pow+0x16e>
 8029a16:	9800      	ldr	r0, [sp, #0]
 8029a18:	2180      	movs	r1, #128	@ 0x80
 8029a1a:	0002      	movs	r2, r0
 8029a1c:	9801      	ldr	r0, [sp, #4]
 8029a1e:	0609      	lsls	r1, r1, #24
 8029a20:	1843      	adds	r3, r0, r1
 8029a22:	9200      	str	r2, [sp, #0]
 8029a24:	9301      	str	r3, [sp, #4]
 8029a26:	e7ba      	b.n	802999e <__ieee754_pow+0x16e>
 8029a28:	9b03      	ldr	r3, [sp, #12]
 8029a2a:	0fdb      	lsrs	r3, r3, #31
 8029a2c:	3b01      	subs	r3, #1
 8029a2e:	001a      	movs	r2, r3
 8029a30:	4332      	orrs	r2, r6
 8029a32:	d102      	bne.n	8029a3a <__ieee754_pow+0x20a>
 8029a34:	9a02      	ldr	r2, [sp, #8]
 8029a36:	9b03      	ldr	r3, [sp, #12]
 8029a38:	e7e4      	b.n	8029a04 <__ieee754_pow+0x1d4>
 8029a3a:	3e01      	subs	r6, #1
 8029a3c:	2200      	movs	r2, #0
 8029a3e:	431e      	orrs	r6, r3
 8029a40:	d013      	beq.n	8029a6a <__ieee754_pow+0x23a>
 8029a42:	4b22      	ldr	r3, [pc, #136]	@ (8029acc <__ieee754_pow+0x29c>)
 8029a44:	9206      	str	r2, [sp, #24]
 8029a46:	9307      	str	r3, [sp, #28]
 8029a48:	2384      	movs	r3, #132	@ 0x84
 8029a4a:	05db      	lsls	r3, r3, #23
 8029a4c:	429d      	cmp	r5, r3
 8029a4e:	d800      	bhi.n	8029a52 <__ieee754_pow+0x222>
 8029a50:	e0fa      	b.n	8029c48 <__ieee754_pow+0x418>
 8029a52:	4b20      	ldr	r3, [pc, #128]	@ (8029ad4 <__ieee754_pow+0x2a4>)
 8029a54:	429d      	cmp	r5, r3
 8029a56:	d910      	bls.n	8029a7a <__ieee754_pow+0x24a>
 8029a58:	4b1a      	ldr	r3, [pc, #104]	@ (8029ac4 <__ieee754_pow+0x294>)
 8029a5a:	429c      	cmp	r4, r3
 8029a5c:	d807      	bhi.n	8029a6e <__ieee754_pow+0x23e>
 8029a5e:	2f00      	cmp	r7, #0
 8029a60:	da07      	bge.n	8029a72 <__ieee754_pow+0x242>
 8029a62:	2000      	movs	r0, #0
 8029a64:	f000 fd82 	bl	802a56c <__math_oflow>
 8029a68:	e707      	b.n	802987a <__ieee754_pow+0x4a>
 8029a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8029ad8 <__ieee754_pow+0x2a8>)
 8029a6c:	e7ea      	b.n	8029a44 <__ieee754_pow+0x214>
 8029a6e:	2f00      	cmp	r7, #0
 8029a70:	dcf7      	bgt.n	8029a62 <__ieee754_pow+0x232>
 8029a72:	2000      	movs	r0, #0
 8029a74:	f000 fd73 	bl	802a55e <__math_uflow>
 8029a78:	e6ff      	b.n	802987a <__ieee754_pow+0x4a>
 8029a7a:	4b18      	ldr	r3, [pc, #96]	@ (8029adc <__ieee754_pow+0x2ac>)
 8029a7c:	429c      	cmp	r4, r3
 8029a7e:	d80a      	bhi.n	8029a96 <__ieee754_pow+0x266>
 8029a80:	9806      	ldr	r0, [sp, #24]
 8029a82:	9907      	ldr	r1, [sp, #28]
 8029a84:	2300      	movs	r3, #0
 8029a86:	2200      	movs	r2, #0
 8029a88:	f7d6 fd18 	bl	80004bc <__aeabi_dcmplt>
 8029a8c:	1e43      	subs	r3, r0, #1
 8029a8e:	4198      	sbcs	r0, r3
 8029a90:	2f00      	cmp	r7, #0
 8029a92:	daef      	bge.n	8029a74 <__ieee754_pow+0x244>
 8029a94:	e7e6      	b.n	8029a64 <__ieee754_pow+0x234>
 8029a96:	4b0d      	ldr	r3, [pc, #52]	@ (8029acc <__ieee754_pow+0x29c>)
 8029a98:	2200      	movs	r2, #0
 8029a9a:	429c      	cmp	r4, r3
 8029a9c:	d920      	bls.n	8029ae0 <__ieee754_pow+0x2b0>
 8029a9e:	9806      	ldr	r0, [sp, #24]
 8029aa0:	9907      	ldr	r1, [sp, #28]
 8029aa2:	2300      	movs	r3, #0
 8029aa4:	f7d6 fd0a 	bl	80004bc <__aeabi_dcmplt>
 8029aa8:	1e43      	subs	r3, r0, #1
 8029aaa:	4198      	sbcs	r0, r3
 8029aac:	2f00      	cmp	r7, #0
 8029aae:	dcd9      	bgt.n	8029a64 <__ieee754_pow+0x234>
 8029ab0:	e7e0      	b.n	8029a74 <__ieee754_pow+0x244>
 8029ab2:	46c0      	nop			@ (mov r8, r8)
 8029ab4:	fff00000 	.word	0xfff00000
 8029ab8:	7ff00000 	.word	0x7ff00000
 8029abc:	c0100000 	.word	0xc0100000
 8029ac0:	433fffff 	.word	0x433fffff
 8029ac4:	3fefffff 	.word	0x3fefffff
 8029ac8:	fffffc01 	.word	0xfffffc01
 8029acc:	3ff00000 	.word	0x3ff00000
 8029ad0:	3fe00000 	.word	0x3fe00000
 8029ad4:	43f00000 	.word	0x43f00000
 8029ad8:	bff00000 	.word	0xbff00000
 8029adc:	3feffffe 	.word	0x3feffffe
 8029ae0:	9800      	ldr	r0, [sp, #0]
 8029ae2:	9901      	ldr	r1, [sp, #4]
 8029ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8029c1c <__ieee754_pow+0x3ec>)
 8029ae6:	f7d9 fa1b 	bl	8002f20 <__aeabi_dsub>
 8029aea:	22c0      	movs	r2, #192	@ 0xc0
 8029aec:	4b4c      	ldr	r3, [pc, #304]	@ (8029c20 <__ieee754_pow+0x3f0>)
 8029aee:	05d2      	lsls	r2, r2, #23
 8029af0:	0006      	movs	r6, r0
 8029af2:	000f      	movs	r7, r1
 8029af4:	f7d8 ff2e 	bl	8002954 <__aeabi_dmul>
 8029af8:	4a4a      	ldr	r2, [pc, #296]	@ (8029c24 <__ieee754_pow+0x3f4>)
 8029afa:	9002      	str	r0, [sp, #8]
 8029afc:	9103      	str	r1, [sp, #12]
 8029afe:	4b4a      	ldr	r3, [pc, #296]	@ (8029c28 <__ieee754_pow+0x3f8>)
 8029b00:	0030      	movs	r0, r6
 8029b02:	0039      	movs	r1, r7
 8029b04:	f7d8 ff26 	bl	8002954 <__aeabi_dmul>
 8029b08:	2200      	movs	r2, #0
 8029b0a:	9000      	str	r0, [sp, #0]
 8029b0c:	9101      	str	r1, [sp, #4]
 8029b0e:	4b47      	ldr	r3, [pc, #284]	@ (8029c2c <__ieee754_pow+0x3fc>)
 8029b10:	0030      	movs	r0, r6
 8029b12:	0039      	movs	r1, r7
 8029b14:	f7d8 ff1e 	bl	8002954 <__aeabi_dmul>
 8029b18:	0002      	movs	r2, r0
 8029b1a:	000b      	movs	r3, r1
 8029b1c:	4844      	ldr	r0, [pc, #272]	@ (8029c30 <__ieee754_pow+0x400>)
 8029b1e:	4945      	ldr	r1, [pc, #276]	@ (8029c34 <__ieee754_pow+0x404>)
 8029b20:	f7d9 f9fe 	bl	8002f20 <__aeabi_dsub>
 8029b24:	0032      	movs	r2, r6
 8029b26:	003b      	movs	r3, r7
 8029b28:	f7d8 ff14 	bl	8002954 <__aeabi_dmul>
 8029b2c:	0002      	movs	r2, r0
 8029b2e:	000b      	movs	r3, r1
 8029b30:	2000      	movs	r0, #0
 8029b32:	4941      	ldr	r1, [pc, #260]	@ (8029c38 <__ieee754_pow+0x408>)
 8029b34:	f7d9 f9f4 	bl	8002f20 <__aeabi_dsub>
 8029b38:	0032      	movs	r2, r6
 8029b3a:	0004      	movs	r4, r0
 8029b3c:	000d      	movs	r5, r1
 8029b3e:	003b      	movs	r3, r7
 8029b40:	0030      	movs	r0, r6
 8029b42:	0039      	movs	r1, r7
 8029b44:	f7d8 ff06 	bl	8002954 <__aeabi_dmul>
 8029b48:	0002      	movs	r2, r0
 8029b4a:	000b      	movs	r3, r1
 8029b4c:	0020      	movs	r0, r4
 8029b4e:	0029      	movs	r1, r5
 8029b50:	f7d8 ff00 	bl	8002954 <__aeabi_dmul>
 8029b54:	4a39      	ldr	r2, [pc, #228]	@ (8029c3c <__ieee754_pow+0x40c>)
 8029b56:	4b32      	ldr	r3, [pc, #200]	@ (8029c20 <__ieee754_pow+0x3f0>)
 8029b58:	f7d8 fefc 	bl	8002954 <__aeabi_dmul>
 8029b5c:	0002      	movs	r2, r0
 8029b5e:	000b      	movs	r3, r1
 8029b60:	9800      	ldr	r0, [sp, #0]
 8029b62:	9901      	ldr	r1, [sp, #4]
 8029b64:	f7d9 f9dc 	bl	8002f20 <__aeabi_dsub>
 8029b68:	0002      	movs	r2, r0
 8029b6a:	000b      	movs	r3, r1
 8029b6c:	0004      	movs	r4, r0
 8029b6e:	000d      	movs	r5, r1
 8029b70:	9802      	ldr	r0, [sp, #8]
 8029b72:	9903      	ldr	r1, [sp, #12]
 8029b74:	f7d7 feee 	bl	8001954 <__aeabi_dadd>
 8029b78:	9a02      	ldr	r2, [sp, #8]
 8029b7a:	9b03      	ldr	r3, [sp, #12]
 8029b7c:	2000      	movs	r0, #0
 8029b7e:	9000      	str	r0, [sp, #0]
 8029b80:	9101      	str	r1, [sp, #4]
 8029b82:	f7d9 f9cd 	bl	8002f20 <__aeabi_dsub>
 8029b86:	0002      	movs	r2, r0
 8029b88:	000b      	movs	r3, r1
 8029b8a:	0020      	movs	r0, r4
 8029b8c:	0029      	movs	r1, r5
 8029b8e:	f7d9 f9c7 	bl	8002f20 <__aeabi_dsub>
 8029b92:	9c04      	ldr	r4, [sp, #16]
 8029b94:	9d05      	ldr	r5, [sp, #20]
 8029b96:	2400      	movs	r4, #0
 8029b98:	0006      	movs	r6, r0
 8029b9a:	000f      	movs	r7, r1
 8029b9c:	9804      	ldr	r0, [sp, #16]
 8029b9e:	9905      	ldr	r1, [sp, #20]
 8029ba0:	0022      	movs	r2, r4
 8029ba2:	002b      	movs	r3, r5
 8029ba4:	9402      	str	r4, [sp, #8]
 8029ba6:	9503      	str	r5, [sp, #12]
 8029ba8:	f7d9 f9ba 	bl	8002f20 <__aeabi_dsub>
 8029bac:	9a00      	ldr	r2, [sp, #0]
 8029bae:	9b01      	ldr	r3, [sp, #4]
 8029bb0:	f7d8 fed0 	bl	8002954 <__aeabi_dmul>
 8029bb4:	9a04      	ldr	r2, [sp, #16]
 8029bb6:	9b05      	ldr	r3, [sp, #20]
 8029bb8:	9008      	str	r0, [sp, #32]
 8029bba:	9109      	str	r1, [sp, #36]	@ 0x24
 8029bbc:	0030      	movs	r0, r6
 8029bbe:	0039      	movs	r1, r7
 8029bc0:	f7d8 fec8 	bl	8002954 <__aeabi_dmul>
 8029bc4:	0002      	movs	r2, r0
 8029bc6:	000b      	movs	r3, r1
 8029bc8:	9808      	ldr	r0, [sp, #32]
 8029bca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029bcc:	f7d7 fec2 	bl	8001954 <__aeabi_dadd>
 8029bd0:	0022      	movs	r2, r4
 8029bd2:	002b      	movs	r3, r5
 8029bd4:	9004      	str	r0, [sp, #16]
 8029bd6:	9105      	str	r1, [sp, #20]
 8029bd8:	9800      	ldr	r0, [sp, #0]
 8029bda:	9901      	ldr	r1, [sp, #4]
 8029bdc:	f7d8 feba 	bl	8002954 <__aeabi_dmul>
 8029be0:	000b      	movs	r3, r1
 8029be2:	0002      	movs	r2, r0
 8029be4:	9000      	str	r0, [sp, #0]
 8029be6:	9101      	str	r1, [sp, #4]
 8029be8:	9804      	ldr	r0, [sp, #16]
 8029bea:	9905      	ldr	r1, [sp, #20]
 8029bec:	f7d7 feb2 	bl	8001954 <__aeabi_dadd>
 8029bf0:	4b13      	ldr	r3, [pc, #76]	@ (8029c40 <__ieee754_pow+0x410>)
 8029bf2:	0006      	movs	r6, r0
 8029bf4:	000f      	movs	r7, r1
 8029bf6:	9108      	str	r1, [sp, #32]
 8029bf8:	4299      	cmp	r1, r3
 8029bfa:	dc00      	bgt.n	8029bfe <__ieee754_pow+0x3ce>
 8029bfc:	e1c0      	b.n	8029f80 <__ieee754_pow+0x750>
 8029bfe:	4b11      	ldr	r3, [pc, #68]	@ (8029c44 <__ieee754_pow+0x414>)
 8029c00:	18cb      	adds	r3, r1, r3
 8029c02:	4303      	orrs	r3, r0
 8029c04:	42a3      	cmp	r3, r4
 8029c06:	d100      	bne.n	8029c0a <__ieee754_pow+0x3da>
 8029c08:	e1a1      	b.n	8029f4e <__ieee754_pow+0x71e>
 8029c0a:	9806      	ldr	r0, [sp, #24]
 8029c0c:	9907      	ldr	r1, [sp, #28]
 8029c0e:	2300      	movs	r3, #0
 8029c10:	2200      	movs	r2, #0
 8029c12:	f7d6 fc53 	bl	80004bc <__aeabi_dcmplt>
 8029c16:	1e43      	subs	r3, r0, #1
 8029c18:	4198      	sbcs	r0, r3
 8029c1a:	e723      	b.n	8029a64 <__ieee754_pow+0x234>
 8029c1c:	3ff00000 	.word	0x3ff00000
 8029c20:	3ff71547 	.word	0x3ff71547
 8029c24:	f85ddf44 	.word	0xf85ddf44
 8029c28:	3e54ae0b 	.word	0x3e54ae0b
 8029c2c:	3fd00000 	.word	0x3fd00000
 8029c30:	55555555 	.word	0x55555555
 8029c34:	3fd55555 	.word	0x3fd55555
 8029c38:	3fe00000 	.word	0x3fe00000
 8029c3c:	652b82fe 	.word	0x652b82fe
 8029c40:	408fffff 	.word	0x408fffff
 8029c44:	bf700000 	.word	0xbf700000
 8029c48:	4bdc      	ldr	r3, [pc, #880]	@ (8029fbc <__ieee754_pow+0x78c>)
 8029c4a:	9903      	ldr	r1, [sp, #12]
 8029c4c:	2200      	movs	r2, #0
 8029c4e:	420b      	tst	r3, r1
 8029c50:	d10b      	bne.n	8029c6a <__ieee754_pow+0x43a>
 8029c52:	9800      	ldr	r0, [sp, #0]
 8029c54:	9901      	ldr	r1, [sp, #4]
 8029c56:	2200      	movs	r2, #0
 8029c58:	4bd9      	ldr	r3, [pc, #868]	@ (8029fc0 <__ieee754_pow+0x790>)
 8029c5a:	f7d8 fe7b 	bl	8002954 <__aeabi_dmul>
 8029c5e:	2235      	movs	r2, #53	@ 0x35
 8029c60:	9000      	str	r0, [sp, #0]
 8029c62:	9101      	str	r1, [sp, #4]
 8029c64:	9b01      	ldr	r3, [sp, #4]
 8029c66:	4252      	negs	r2, r2
 8029c68:	9308      	str	r3, [sp, #32]
 8029c6a:	9b08      	ldr	r3, [sp, #32]
 8029c6c:	49d5      	ldr	r1, [pc, #852]	@ (8029fc4 <__ieee754_pow+0x794>)
 8029c6e:	151b      	asrs	r3, r3, #20
 8029c70:	185b      	adds	r3, r3, r1
 8029c72:	189b      	adds	r3, r3, r2
 8029c74:	930e      	str	r3, [sp, #56]	@ 0x38
 8029c76:	9b08      	ldr	r3, [sp, #32]
 8029c78:	4dd3      	ldr	r5, [pc, #844]	@ (8029fc8 <__ieee754_pow+0x798>)
 8029c7a:	031b      	lsls	r3, r3, #12
 8029c7c:	4ad3      	ldr	r2, [pc, #844]	@ (8029fcc <__ieee754_pow+0x79c>)
 8029c7e:	0b1b      	lsrs	r3, r3, #12
 8029c80:	2600      	movs	r6, #0
 8029c82:	431d      	orrs	r5, r3
 8029c84:	4293      	cmp	r3, r2
 8029c86:	dd09      	ble.n	8029c9c <__ieee754_pow+0x46c>
 8029c88:	4ad1      	ldr	r2, [pc, #836]	@ (8029fd0 <__ieee754_pow+0x7a0>)
 8029c8a:	3601      	adds	r6, #1
 8029c8c:	4293      	cmp	r3, r2
 8029c8e:	dd05      	ble.n	8029c9c <__ieee754_pow+0x46c>
 8029c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c92:	199b      	adds	r3, r3, r6
 8029c94:	2600      	movs	r6, #0
 8029c96:	930e      	str	r3, [sp, #56]	@ 0x38
 8029c98:	4bce      	ldr	r3, [pc, #824]	@ (8029fd4 <__ieee754_pow+0x7a4>)
 8029c9a:	18ed      	adds	r5, r5, r3
 8029c9c:	9800      	ldr	r0, [sp, #0]
 8029c9e:	9901      	ldr	r1, [sp, #4]
 8029ca0:	0029      	movs	r1, r5
 8029ca2:	4bcd      	ldr	r3, [pc, #820]	@ (8029fd8 <__ieee754_pow+0x7a8>)
 8029ca4:	00f2      	lsls	r2, r6, #3
 8029ca6:	189b      	adds	r3, r3, r2
 8029ca8:	685c      	ldr	r4, [r3, #4]
 8029caa:	681b      	ldr	r3, [r3, #0]
 8029cac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8029cb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029cb2:	001a      	movs	r2, r3
 8029cb4:	0023      	movs	r3, r4
 8029cb6:	900c      	str	r0, [sp, #48]	@ 0x30
 8029cb8:	910d      	str	r1, [sp, #52]	@ 0x34
 8029cba:	f7d9 f931 	bl	8002f20 <__aeabi_dsub>
 8029cbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029cc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029cc2:	9010      	str	r0, [sp, #64]	@ 0x40
 8029cc4:	9111      	str	r1, [sp, #68]	@ 0x44
 8029cc6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029cc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029cca:	f7d7 fe43 	bl	8001954 <__aeabi_dadd>
 8029cce:	0002      	movs	r2, r0
 8029cd0:	000b      	movs	r3, r1
 8029cd2:	2000      	movs	r0, #0
 8029cd4:	49bc      	ldr	r1, [pc, #752]	@ (8029fc8 <__ieee754_pow+0x798>)
 8029cd6:	f7d8 fa03 	bl	80020e0 <__aeabi_ddiv>
 8029cda:	0002      	movs	r2, r0
 8029cdc:	000b      	movs	r3, r1
 8029cde:	9012      	str	r0, [sp, #72]	@ 0x48
 8029ce0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029ce2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029ce4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029ce6:	f7d8 fe35 	bl	8002954 <__aeabi_dmul>
 8029cea:	9008      	str	r0, [sp, #32]
 8029cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8029cee:	9b08      	ldr	r3, [sp, #32]
 8029cf0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029cf2:	2180      	movs	r1, #128	@ 0x80
 8029cf4:	9302      	str	r3, [sp, #8]
 8029cf6:	9403      	str	r4, [sp, #12]
 8029cf8:	2080      	movs	r0, #128	@ 0x80
 8029cfa:	2300      	movs	r3, #0
 8029cfc:	2200      	movs	r2, #0
 8029cfe:	106d      	asrs	r5, r5, #1
 8029d00:	0589      	lsls	r1, r1, #22
 8029d02:	9302      	str	r3, [sp, #8]
 8029d04:	4329      	orrs	r1, r5
 8029d06:	0300      	lsls	r0, r0, #12
 8029d08:	9b02      	ldr	r3, [sp, #8]
 8029d0a:	9c03      	ldr	r4, [sp, #12]
 8029d0c:	1809      	adds	r1, r1, r0
 8029d0e:	9300      	str	r3, [sp, #0]
 8029d10:	9401      	str	r4, [sp, #4]
 8029d12:	04b6      	lsls	r6, r6, #18
 8029d14:	198b      	adds	r3, r1, r6
 8029d16:	9800      	ldr	r0, [sp, #0]
 8029d18:	9901      	ldr	r1, [sp, #4]
 8029d1a:	0014      	movs	r4, r2
 8029d1c:	001d      	movs	r5, r3
 8029d1e:	f7d8 fe19 	bl	8002954 <__aeabi_dmul>
 8029d22:	0002      	movs	r2, r0
 8029d24:	000b      	movs	r3, r1
 8029d26:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029d28:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029d2a:	f7d9 f8f9 	bl	8002f20 <__aeabi_dsub>
 8029d2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d32:	0006      	movs	r6, r0
 8029d34:	000f      	movs	r7, r1
 8029d36:	0020      	movs	r0, r4
 8029d38:	0029      	movs	r1, r5
 8029d3a:	f7d9 f8f1 	bl	8002f20 <__aeabi_dsub>
 8029d3e:	0002      	movs	r2, r0
 8029d40:	000b      	movs	r3, r1
 8029d42:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029d44:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029d46:	f7d9 f8eb 	bl	8002f20 <__aeabi_dsub>
 8029d4a:	9a00      	ldr	r2, [sp, #0]
 8029d4c:	9b01      	ldr	r3, [sp, #4]
 8029d4e:	f7d8 fe01 	bl	8002954 <__aeabi_dmul>
 8029d52:	0002      	movs	r2, r0
 8029d54:	000b      	movs	r3, r1
 8029d56:	0030      	movs	r0, r6
 8029d58:	0039      	movs	r1, r7
 8029d5a:	f7d9 f8e1 	bl	8002f20 <__aeabi_dsub>
 8029d5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029d60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029d62:	f7d8 fdf7 	bl	8002954 <__aeabi_dmul>
 8029d66:	9a08      	ldr	r2, [sp, #32]
 8029d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d6a:	900a      	str	r0, [sp, #40]	@ 0x28
 8029d6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029d6e:	0010      	movs	r0, r2
 8029d70:	0019      	movs	r1, r3
 8029d72:	f7d8 fdef 	bl	8002954 <__aeabi_dmul>
 8029d76:	0006      	movs	r6, r0
 8029d78:	000f      	movs	r7, r1
 8029d7a:	4a98      	ldr	r2, [pc, #608]	@ (8029fdc <__ieee754_pow+0x7ac>)
 8029d7c:	4b98      	ldr	r3, [pc, #608]	@ (8029fe0 <__ieee754_pow+0x7b0>)
 8029d7e:	f7d8 fde9 	bl	8002954 <__aeabi_dmul>
 8029d82:	4a98      	ldr	r2, [pc, #608]	@ (8029fe4 <__ieee754_pow+0x7b4>)
 8029d84:	4b98      	ldr	r3, [pc, #608]	@ (8029fe8 <__ieee754_pow+0x7b8>)
 8029d86:	f7d7 fde5 	bl	8001954 <__aeabi_dadd>
 8029d8a:	0032      	movs	r2, r6
 8029d8c:	003b      	movs	r3, r7
 8029d8e:	f7d8 fde1 	bl	8002954 <__aeabi_dmul>
 8029d92:	4a96      	ldr	r2, [pc, #600]	@ (8029fec <__ieee754_pow+0x7bc>)
 8029d94:	4b96      	ldr	r3, [pc, #600]	@ (8029ff0 <__ieee754_pow+0x7c0>)
 8029d96:	f7d7 fddd 	bl	8001954 <__aeabi_dadd>
 8029d9a:	0032      	movs	r2, r6
 8029d9c:	003b      	movs	r3, r7
 8029d9e:	f7d8 fdd9 	bl	8002954 <__aeabi_dmul>
 8029da2:	4a94      	ldr	r2, [pc, #592]	@ (8029ff4 <__ieee754_pow+0x7c4>)
 8029da4:	4b94      	ldr	r3, [pc, #592]	@ (8029ff8 <__ieee754_pow+0x7c8>)
 8029da6:	f7d7 fdd5 	bl	8001954 <__aeabi_dadd>
 8029daa:	0032      	movs	r2, r6
 8029dac:	003b      	movs	r3, r7
 8029dae:	f7d8 fdd1 	bl	8002954 <__aeabi_dmul>
 8029db2:	4a92      	ldr	r2, [pc, #584]	@ (8029ffc <__ieee754_pow+0x7cc>)
 8029db4:	4b92      	ldr	r3, [pc, #584]	@ (802a000 <__ieee754_pow+0x7d0>)
 8029db6:	f7d7 fdcd 	bl	8001954 <__aeabi_dadd>
 8029dba:	0032      	movs	r2, r6
 8029dbc:	003b      	movs	r3, r7
 8029dbe:	f7d8 fdc9 	bl	8002954 <__aeabi_dmul>
 8029dc2:	4a90      	ldr	r2, [pc, #576]	@ (802a004 <__ieee754_pow+0x7d4>)
 8029dc4:	4b90      	ldr	r3, [pc, #576]	@ (802a008 <__ieee754_pow+0x7d8>)
 8029dc6:	f7d7 fdc5 	bl	8001954 <__aeabi_dadd>
 8029dca:	0032      	movs	r2, r6
 8029dcc:	0004      	movs	r4, r0
 8029dce:	000d      	movs	r5, r1
 8029dd0:	003b      	movs	r3, r7
 8029dd2:	0030      	movs	r0, r6
 8029dd4:	0039      	movs	r1, r7
 8029dd6:	f7d8 fdbd 	bl	8002954 <__aeabi_dmul>
 8029dda:	0002      	movs	r2, r0
 8029ddc:	000b      	movs	r3, r1
 8029dde:	0020      	movs	r0, r4
 8029de0:	0029      	movs	r1, r5
 8029de2:	f7d8 fdb7 	bl	8002954 <__aeabi_dmul>
 8029de6:	9a00      	ldr	r2, [sp, #0]
 8029de8:	9b01      	ldr	r3, [sp, #4]
 8029dea:	0004      	movs	r4, r0
 8029dec:	000d      	movs	r5, r1
 8029dee:	9808      	ldr	r0, [sp, #32]
 8029df0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029df2:	f7d7 fdaf 	bl	8001954 <__aeabi_dadd>
 8029df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029df8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029dfa:	f7d8 fdab 	bl	8002954 <__aeabi_dmul>
 8029dfe:	0022      	movs	r2, r4
 8029e00:	002b      	movs	r3, r5
 8029e02:	f7d7 fda7 	bl	8001954 <__aeabi_dadd>
 8029e06:	9a00      	ldr	r2, [sp, #0]
 8029e08:	9b01      	ldr	r3, [sp, #4]
 8029e0a:	900c      	str	r0, [sp, #48]	@ 0x30
 8029e0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8029e0e:	0010      	movs	r0, r2
 8029e10:	0019      	movs	r1, r3
 8029e12:	f7d8 fd9f 	bl	8002954 <__aeabi_dmul>
 8029e16:	2200      	movs	r2, #0
 8029e18:	4b7c      	ldr	r3, [pc, #496]	@ (802a00c <__ieee754_pow+0x7dc>)
 8029e1a:	0004      	movs	r4, r0
 8029e1c:	000d      	movs	r5, r1
 8029e1e:	f7d7 fd99 	bl	8001954 <__aeabi_dadd>
 8029e22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e26:	f7d7 fd95 	bl	8001954 <__aeabi_dadd>
 8029e2a:	2000      	movs	r0, #0
 8029e2c:	000f      	movs	r7, r1
 8029e2e:	0006      	movs	r6, r0
 8029e30:	0002      	movs	r2, r0
 8029e32:	000b      	movs	r3, r1
 8029e34:	9800      	ldr	r0, [sp, #0]
 8029e36:	9901      	ldr	r1, [sp, #4]
 8029e38:	f7d8 fd8c 	bl	8002954 <__aeabi_dmul>
 8029e3c:	2200      	movs	r2, #0
 8029e3e:	9000      	str	r0, [sp, #0]
 8029e40:	9101      	str	r1, [sp, #4]
 8029e42:	4b72      	ldr	r3, [pc, #456]	@ (802a00c <__ieee754_pow+0x7dc>)
 8029e44:	0030      	movs	r0, r6
 8029e46:	0039      	movs	r1, r7
 8029e48:	f7d9 f86a 	bl	8002f20 <__aeabi_dsub>
 8029e4c:	0022      	movs	r2, r4
 8029e4e:	002b      	movs	r3, r5
 8029e50:	f7d9 f866 	bl	8002f20 <__aeabi_dsub>
 8029e54:	0002      	movs	r2, r0
 8029e56:	000b      	movs	r3, r1
 8029e58:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029e5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029e5c:	f7d9 f860 	bl	8002f20 <__aeabi_dsub>
 8029e60:	9a08      	ldr	r2, [sp, #32]
 8029e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029e64:	f7d8 fd76 	bl	8002954 <__aeabi_dmul>
 8029e68:	0032      	movs	r2, r6
 8029e6a:	0004      	movs	r4, r0
 8029e6c:	000d      	movs	r5, r1
 8029e6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029e70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029e72:	003b      	movs	r3, r7
 8029e74:	f7d8 fd6e 	bl	8002954 <__aeabi_dmul>
 8029e78:	0002      	movs	r2, r0
 8029e7a:	000b      	movs	r3, r1
 8029e7c:	0020      	movs	r0, r4
 8029e7e:	0029      	movs	r1, r5
 8029e80:	f7d7 fd68 	bl	8001954 <__aeabi_dadd>
 8029e84:	0004      	movs	r4, r0
 8029e86:	000d      	movs	r5, r1
 8029e88:	0002      	movs	r2, r0
 8029e8a:	000b      	movs	r3, r1
 8029e8c:	9800      	ldr	r0, [sp, #0]
 8029e8e:	9901      	ldr	r1, [sp, #4]
 8029e90:	f7d7 fd60 	bl	8001954 <__aeabi_dadd>
 8029e94:	22e0      	movs	r2, #224	@ 0xe0
 8029e96:	2000      	movs	r0, #0
 8029e98:	4b5d      	ldr	r3, [pc, #372]	@ (802a010 <__ieee754_pow+0x7e0>)
 8029e9a:	0612      	lsls	r2, r2, #24
 8029e9c:	0006      	movs	r6, r0
 8029e9e:	000f      	movs	r7, r1
 8029ea0:	f7d8 fd58 	bl	8002954 <__aeabi_dmul>
 8029ea4:	9008      	str	r0, [sp, #32]
 8029ea6:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ea8:	9a00      	ldr	r2, [sp, #0]
 8029eaa:	9b01      	ldr	r3, [sp, #4]
 8029eac:	0030      	movs	r0, r6
 8029eae:	0039      	movs	r1, r7
 8029eb0:	f7d9 f836 	bl	8002f20 <__aeabi_dsub>
 8029eb4:	0002      	movs	r2, r0
 8029eb6:	000b      	movs	r3, r1
 8029eb8:	0020      	movs	r0, r4
 8029eba:	0029      	movs	r1, r5
 8029ebc:	f7d9 f830 	bl	8002f20 <__aeabi_dsub>
 8029ec0:	4a54      	ldr	r2, [pc, #336]	@ (802a014 <__ieee754_pow+0x7e4>)
 8029ec2:	4b53      	ldr	r3, [pc, #332]	@ (802a010 <__ieee754_pow+0x7e0>)
 8029ec4:	f7d8 fd46 	bl	8002954 <__aeabi_dmul>
 8029ec8:	4a53      	ldr	r2, [pc, #332]	@ (802a018 <__ieee754_pow+0x7e8>)
 8029eca:	0004      	movs	r4, r0
 8029ecc:	000d      	movs	r5, r1
 8029ece:	0030      	movs	r0, r6
 8029ed0:	0039      	movs	r1, r7
 8029ed2:	4b52      	ldr	r3, [pc, #328]	@ (802a01c <__ieee754_pow+0x7ec>)
 8029ed4:	f7d8 fd3e 	bl	8002954 <__aeabi_dmul>
 8029ed8:	0002      	movs	r2, r0
 8029eda:	000b      	movs	r3, r1
 8029edc:	0020      	movs	r0, r4
 8029ede:	0029      	movs	r1, r5
 8029ee0:	f7d7 fd38 	bl	8001954 <__aeabi_dadd>
 8029ee4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029ee6:	4b4e      	ldr	r3, [pc, #312]	@ (802a020 <__ieee754_pow+0x7f0>)
 8029ee8:	189b      	adds	r3, r3, r2
 8029eea:	681a      	ldr	r2, [r3, #0]
 8029eec:	685b      	ldr	r3, [r3, #4]
 8029eee:	f7d7 fd31 	bl	8001954 <__aeabi_dadd>
 8029ef2:	900a      	str	r0, [sp, #40]	@ 0x28
 8029ef4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029ef6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029ef8:	f7d9 fc7a 	bl	80037f0 <__aeabi_i2d>
 8029efc:	0004      	movs	r4, r0
 8029efe:	000d      	movs	r5, r1
 8029f00:	9808      	ldr	r0, [sp, #32]
 8029f02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029f04:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029f06:	4b47      	ldr	r3, [pc, #284]	@ (802a024 <__ieee754_pow+0x7f4>)
 8029f08:	189b      	adds	r3, r3, r2
 8029f0a:	681e      	ldr	r6, [r3, #0]
 8029f0c:	685f      	ldr	r7, [r3, #4]
 8029f0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029f12:	f7d7 fd1f 	bl	8001954 <__aeabi_dadd>
 8029f16:	0032      	movs	r2, r6
 8029f18:	003b      	movs	r3, r7
 8029f1a:	f7d7 fd1b 	bl	8001954 <__aeabi_dadd>
 8029f1e:	0022      	movs	r2, r4
 8029f20:	002b      	movs	r3, r5
 8029f22:	f7d7 fd17 	bl	8001954 <__aeabi_dadd>
 8029f26:	2000      	movs	r0, #0
 8029f28:	0022      	movs	r2, r4
 8029f2a:	002b      	movs	r3, r5
 8029f2c:	9000      	str	r0, [sp, #0]
 8029f2e:	9101      	str	r1, [sp, #4]
 8029f30:	f7d8 fff6 	bl	8002f20 <__aeabi_dsub>
 8029f34:	0032      	movs	r2, r6
 8029f36:	003b      	movs	r3, r7
 8029f38:	f7d8 fff2 	bl	8002f20 <__aeabi_dsub>
 8029f3c:	9a08      	ldr	r2, [sp, #32]
 8029f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f40:	f7d8 ffee 	bl	8002f20 <__aeabi_dsub>
 8029f44:	0002      	movs	r2, r0
 8029f46:	000b      	movs	r3, r1
 8029f48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029f4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029f4c:	e61f      	b.n	8029b8e <__ieee754_pow+0x35e>
 8029f4e:	4a36      	ldr	r2, [pc, #216]	@ (802a028 <__ieee754_pow+0x7f8>)
 8029f50:	4b36      	ldr	r3, [pc, #216]	@ (802a02c <__ieee754_pow+0x7fc>)
 8029f52:	9804      	ldr	r0, [sp, #16]
 8029f54:	9905      	ldr	r1, [sp, #20]
 8029f56:	f7d7 fcfd 	bl	8001954 <__aeabi_dadd>
 8029f5a:	9a00      	ldr	r2, [sp, #0]
 8029f5c:	9b01      	ldr	r3, [sp, #4]
 8029f5e:	0004      	movs	r4, r0
 8029f60:	000d      	movs	r5, r1
 8029f62:	0030      	movs	r0, r6
 8029f64:	0039      	movs	r1, r7
 8029f66:	f7d8 ffdb 	bl	8002f20 <__aeabi_dsub>
 8029f6a:	0002      	movs	r2, r0
 8029f6c:	000b      	movs	r3, r1
 8029f6e:	0020      	movs	r0, r4
 8029f70:	0029      	movs	r1, r5
 8029f72:	f7d6 fab7 	bl	80004e4 <__aeabi_dcmpgt>
 8029f76:	2800      	cmp	r0, #0
 8029f78:	d000      	beq.n	8029f7c <__ieee754_pow+0x74c>
 8029f7a:	e646      	b.n	8029c0a <__ieee754_pow+0x3da>
 8029f7c:	4b2c      	ldr	r3, [pc, #176]	@ (802a030 <__ieee754_pow+0x800>)
 8029f7e:	e063      	b.n	802a048 <__ieee754_pow+0x818>
 8029f80:	4a2c      	ldr	r2, [pc, #176]	@ (802a034 <__ieee754_pow+0x804>)
 8029f82:	004b      	lsls	r3, r1, #1
 8029f84:	085b      	lsrs	r3, r3, #1
 8029f86:	4293      	cmp	r3, r2
 8029f88:	d95a      	bls.n	802a040 <__ieee754_pow+0x810>
 8029f8a:	4b2b      	ldr	r3, [pc, #172]	@ (802a038 <__ieee754_pow+0x808>)
 8029f8c:	18cb      	adds	r3, r1, r3
 8029f8e:	4303      	orrs	r3, r0
 8029f90:	d008      	beq.n	8029fa4 <__ieee754_pow+0x774>
 8029f92:	9806      	ldr	r0, [sp, #24]
 8029f94:	9907      	ldr	r1, [sp, #28]
 8029f96:	2300      	movs	r3, #0
 8029f98:	2200      	movs	r2, #0
 8029f9a:	f7d6 fa8f 	bl	80004bc <__aeabi_dcmplt>
 8029f9e:	1e43      	subs	r3, r0, #1
 8029fa0:	4198      	sbcs	r0, r3
 8029fa2:	e567      	b.n	8029a74 <__ieee754_pow+0x244>
 8029fa4:	9a00      	ldr	r2, [sp, #0]
 8029fa6:	9b01      	ldr	r3, [sp, #4]
 8029fa8:	f7d8 ffba 	bl	8002f20 <__aeabi_dsub>
 8029fac:	9a04      	ldr	r2, [sp, #16]
 8029fae:	9b05      	ldr	r3, [sp, #20]
 8029fb0:	f7d6 faa2 	bl	80004f8 <__aeabi_dcmpge>
 8029fb4:	2800      	cmp	r0, #0
 8029fb6:	d1ec      	bne.n	8029f92 <__ieee754_pow+0x762>
 8029fb8:	4b20      	ldr	r3, [pc, #128]	@ (802a03c <__ieee754_pow+0x80c>)
 8029fba:	e045      	b.n	802a048 <__ieee754_pow+0x818>
 8029fbc:	7ff00000 	.word	0x7ff00000
 8029fc0:	43400000 	.word	0x43400000
 8029fc4:	fffffc01 	.word	0xfffffc01
 8029fc8:	3ff00000 	.word	0x3ff00000
 8029fcc:	0003988e 	.word	0x0003988e
 8029fd0:	000bb679 	.word	0x000bb679
 8029fd4:	fff00000 	.word	0xfff00000
 8029fd8:	0802f010 	.word	0x0802f010
 8029fdc:	4a454eef 	.word	0x4a454eef
 8029fe0:	3fca7e28 	.word	0x3fca7e28
 8029fe4:	93c9db65 	.word	0x93c9db65
 8029fe8:	3fcd864a 	.word	0x3fcd864a
 8029fec:	a91d4101 	.word	0xa91d4101
 8029ff0:	3fd17460 	.word	0x3fd17460
 8029ff4:	518f264d 	.word	0x518f264d
 8029ff8:	3fd55555 	.word	0x3fd55555
 8029ffc:	db6fabff 	.word	0xdb6fabff
 802a000:	3fdb6db6 	.word	0x3fdb6db6
 802a004:	33333303 	.word	0x33333303
 802a008:	3fe33333 	.word	0x3fe33333
 802a00c:	40080000 	.word	0x40080000
 802a010:	3feec709 	.word	0x3feec709
 802a014:	dc3a03fd 	.word	0xdc3a03fd
 802a018:	145b01f5 	.word	0x145b01f5
 802a01c:	be3e2fe0 	.word	0xbe3e2fe0
 802a020:	0802eff0 	.word	0x0802eff0
 802a024:	0802f000 	.word	0x0802f000
 802a028:	652b82fe 	.word	0x652b82fe
 802a02c:	3c971547 	.word	0x3c971547
 802a030:	40900000 	.word	0x40900000
 802a034:	4090cbff 	.word	0x4090cbff
 802a038:	3f6f3400 	.word	0x3f6f3400
 802a03c:	4090cc00 	.word	0x4090cc00
 802a040:	4a73      	ldr	r2, [pc, #460]	@ (802a210 <__ieee754_pow+0x9e0>)
 802a042:	9402      	str	r4, [sp, #8]
 802a044:	4293      	cmp	r3, r2
 802a046:	d925      	bls.n	802a094 <__ieee754_pow+0x864>
 802a048:	4a72      	ldr	r2, [pc, #456]	@ (802a214 <__ieee754_pow+0x9e4>)
 802a04a:	151b      	asrs	r3, r3, #20
 802a04c:	189b      	adds	r3, r3, r2
 802a04e:	2280      	movs	r2, #128	@ 0x80
 802a050:	0352      	lsls	r2, r2, #13
 802a052:	0011      	movs	r1, r2
 802a054:	4119      	asrs	r1, r3
 802a056:	19cb      	adds	r3, r1, r7
 802a058:	005c      	lsls	r4, r3, #1
 802a05a:	496f      	ldr	r1, [pc, #444]	@ (802a218 <__ieee754_pow+0x9e8>)
 802a05c:	4d6f      	ldr	r5, [pc, #444]	@ (802a21c <__ieee754_pow+0x9ec>)
 802a05e:	0d64      	lsrs	r4, r4, #21
 802a060:	1864      	adds	r4, r4, r1
 802a062:	4125      	asrs	r5, r4
 802a064:	401d      	ands	r5, r3
 802a066:	031b      	lsls	r3, r3, #12
 802a068:	0b1b      	lsrs	r3, r3, #12
 802a06a:	4313      	orrs	r3, r2
 802a06c:	2214      	movs	r2, #20
 802a06e:	1b12      	subs	r2, r2, r4
 802a070:	4113      	asrs	r3, r2
 802a072:	9302      	str	r3, [sp, #8]
 802a074:	9b08      	ldr	r3, [sp, #32]
 802a076:	2000      	movs	r0, #0
 802a078:	0029      	movs	r1, r5
 802a07a:	2b00      	cmp	r3, #0
 802a07c:	da02      	bge.n	802a084 <__ieee754_pow+0x854>
 802a07e:	9b02      	ldr	r3, [sp, #8]
 802a080:	425b      	negs	r3, r3
 802a082:	9302      	str	r3, [sp, #8]
 802a084:	0002      	movs	r2, r0
 802a086:	000b      	movs	r3, r1
 802a088:	9800      	ldr	r0, [sp, #0]
 802a08a:	9901      	ldr	r1, [sp, #4]
 802a08c:	f7d8 ff48 	bl	8002f20 <__aeabi_dsub>
 802a090:	9000      	str	r0, [sp, #0]
 802a092:	9101      	str	r1, [sp, #4]
 802a094:	9a04      	ldr	r2, [sp, #16]
 802a096:	9b05      	ldr	r3, [sp, #20]
 802a098:	9800      	ldr	r0, [sp, #0]
 802a09a:	9901      	ldr	r1, [sp, #4]
 802a09c:	f7d7 fc5a 	bl	8001954 <__aeabi_dadd>
 802a0a0:	2000      	movs	r0, #0
 802a0a2:	2200      	movs	r2, #0
 802a0a4:	4b5e      	ldr	r3, [pc, #376]	@ (802a220 <__ieee754_pow+0x9f0>)
 802a0a6:	0006      	movs	r6, r0
 802a0a8:	000f      	movs	r7, r1
 802a0aa:	f7d8 fc53 	bl	8002954 <__aeabi_dmul>
 802a0ae:	9a00      	ldr	r2, [sp, #0]
 802a0b0:	9b01      	ldr	r3, [sp, #4]
 802a0b2:	9008      	str	r0, [sp, #32]
 802a0b4:	9109      	str	r1, [sp, #36]	@ 0x24
 802a0b6:	0030      	movs	r0, r6
 802a0b8:	0039      	movs	r1, r7
 802a0ba:	f7d8 ff31 	bl	8002f20 <__aeabi_dsub>
 802a0be:	0002      	movs	r2, r0
 802a0c0:	000b      	movs	r3, r1
 802a0c2:	9804      	ldr	r0, [sp, #16]
 802a0c4:	9905      	ldr	r1, [sp, #20]
 802a0c6:	f7d8 ff2b 	bl	8002f20 <__aeabi_dsub>
 802a0ca:	4a56      	ldr	r2, [pc, #344]	@ (802a224 <__ieee754_pow+0x9f4>)
 802a0cc:	4b56      	ldr	r3, [pc, #344]	@ (802a228 <__ieee754_pow+0x9f8>)
 802a0ce:	f7d8 fc41 	bl	8002954 <__aeabi_dmul>
 802a0d2:	4a56      	ldr	r2, [pc, #344]	@ (802a22c <__ieee754_pow+0x9fc>)
 802a0d4:	0004      	movs	r4, r0
 802a0d6:	000d      	movs	r5, r1
 802a0d8:	0030      	movs	r0, r6
 802a0da:	0039      	movs	r1, r7
 802a0dc:	4b54      	ldr	r3, [pc, #336]	@ (802a230 <__ieee754_pow+0xa00>)
 802a0de:	f7d8 fc39 	bl	8002954 <__aeabi_dmul>
 802a0e2:	0002      	movs	r2, r0
 802a0e4:	000b      	movs	r3, r1
 802a0e6:	0020      	movs	r0, r4
 802a0e8:	0029      	movs	r1, r5
 802a0ea:	f7d7 fc33 	bl	8001954 <__aeabi_dadd>
 802a0ee:	0004      	movs	r4, r0
 802a0f0:	000d      	movs	r5, r1
 802a0f2:	0002      	movs	r2, r0
 802a0f4:	000b      	movs	r3, r1
 802a0f6:	9808      	ldr	r0, [sp, #32]
 802a0f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a0fa:	f7d7 fc2b 	bl	8001954 <__aeabi_dadd>
 802a0fe:	9a08      	ldr	r2, [sp, #32]
 802a100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a102:	0006      	movs	r6, r0
 802a104:	000f      	movs	r7, r1
 802a106:	f7d8 ff0b 	bl	8002f20 <__aeabi_dsub>
 802a10a:	0002      	movs	r2, r0
 802a10c:	000b      	movs	r3, r1
 802a10e:	0020      	movs	r0, r4
 802a110:	0029      	movs	r1, r5
 802a112:	f7d8 ff05 	bl	8002f20 <__aeabi_dsub>
 802a116:	0032      	movs	r2, r6
 802a118:	9000      	str	r0, [sp, #0]
 802a11a:	9101      	str	r1, [sp, #4]
 802a11c:	003b      	movs	r3, r7
 802a11e:	0030      	movs	r0, r6
 802a120:	0039      	movs	r1, r7
 802a122:	f7d8 fc17 	bl	8002954 <__aeabi_dmul>
 802a126:	0004      	movs	r4, r0
 802a128:	000d      	movs	r5, r1
 802a12a:	4a42      	ldr	r2, [pc, #264]	@ (802a234 <__ieee754_pow+0xa04>)
 802a12c:	4b42      	ldr	r3, [pc, #264]	@ (802a238 <__ieee754_pow+0xa08>)
 802a12e:	f7d8 fc11 	bl	8002954 <__aeabi_dmul>
 802a132:	4a42      	ldr	r2, [pc, #264]	@ (802a23c <__ieee754_pow+0xa0c>)
 802a134:	4b42      	ldr	r3, [pc, #264]	@ (802a240 <__ieee754_pow+0xa10>)
 802a136:	f7d8 fef3 	bl	8002f20 <__aeabi_dsub>
 802a13a:	0022      	movs	r2, r4
 802a13c:	002b      	movs	r3, r5
 802a13e:	f7d8 fc09 	bl	8002954 <__aeabi_dmul>
 802a142:	4a40      	ldr	r2, [pc, #256]	@ (802a244 <__ieee754_pow+0xa14>)
 802a144:	4b40      	ldr	r3, [pc, #256]	@ (802a248 <__ieee754_pow+0xa18>)
 802a146:	f7d7 fc05 	bl	8001954 <__aeabi_dadd>
 802a14a:	0022      	movs	r2, r4
 802a14c:	002b      	movs	r3, r5
 802a14e:	f7d8 fc01 	bl	8002954 <__aeabi_dmul>
 802a152:	4a3e      	ldr	r2, [pc, #248]	@ (802a24c <__ieee754_pow+0xa1c>)
 802a154:	4b3e      	ldr	r3, [pc, #248]	@ (802a250 <__ieee754_pow+0xa20>)
 802a156:	f7d8 fee3 	bl	8002f20 <__aeabi_dsub>
 802a15a:	0022      	movs	r2, r4
 802a15c:	002b      	movs	r3, r5
 802a15e:	f7d8 fbf9 	bl	8002954 <__aeabi_dmul>
 802a162:	4a3c      	ldr	r2, [pc, #240]	@ (802a254 <__ieee754_pow+0xa24>)
 802a164:	4b3c      	ldr	r3, [pc, #240]	@ (802a258 <__ieee754_pow+0xa28>)
 802a166:	f7d7 fbf5 	bl	8001954 <__aeabi_dadd>
 802a16a:	0022      	movs	r2, r4
 802a16c:	002b      	movs	r3, r5
 802a16e:	f7d8 fbf1 	bl	8002954 <__aeabi_dmul>
 802a172:	0002      	movs	r2, r0
 802a174:	000b      	movs	r3, r1
 802a176:	0030      	movs	r0, r6
 802a178:	0039      	movs	r1, r7
 802a17a:	f7d8 fed1 	bl	8002f20 <__aeabi_dsub>
 802a17e:	0004      	movs	r4, r0
 802a180:	000d      	movs	r5, r1
 802a182:	0002      	movs	r2, r0
 802a184:	000b      	movs	r3, r1
 802a186:	0030      	movs	r0, r6
 802a188:	0039      	movs	r1, r7
 802a18a:	f7d8 fbe3 	bl	8002954 <__aeabi_dmul>
 802a18e:	2380      	movs	r3, #128	@ 0x80
 802a190:	9004      	str	r0, [sp, #16]
 802a192:	9105      	str	r1, [sp, #20]
 802a194:	2200      	movs	r2, #0
 802a196:	0020      	movs	r0, r4
 802a198:	0029      	movs	r1, r5
 802a19a:	05db      	lsls	r3, r3, #23
 802a19c:	f7d8 fec0 	bl	8002f20 <__aeabi_dsub>
 802a1a0:	0002      	movs	r2, r0
 802a1a2:	000b      	movs	r3, r1
 802a1a4:	9804      	ldr	r0, [sp, #16]
 802a1a6:	9905      	ldr	r1, [sp, #20]
 802a1a8:	f7d7 ff9a 	bl	80020e0 <__aeabi_ddiv>
 802a1ac:	9a00      	ldr	r2, [sp, #0]
 802a1ae:	9b01      	ldr	r3, [sp, #4]
 802a1b0:	0004      	movs	r4, r0
 802a1b2:	000d      	movs	r5, r1
 802a1b4:	0030      	movs	r0, r6
 802a1b6:	0039      	movs	r1, r7
 802a1b8:	f7d8 fbcc 	bl	8002954 <__aeabi_dmul>
 802a1bc:	9a00      	ldr	r2, [sp, #0]
 802a1be:	9b01      	ldr	r3, [sp, #4]
 802a1c0:	f7d7 fbc8 	bl	8001954 <__aeabi_dadd>
 802a1c4:	0002      	movs	r2, r0
 802a1c6:	000b      	movs	r3, r1
 802a1c8:	0020      	movs	r0, r4
 802a1ca:	0029      	movs	r1, r5
 802a1cc:	f7d8 fea8 	bl	8002f20 <__aeabi_dsub>
 802a1d0:	0032      	movs	r2, r6
 802a1d2:	003b      	movs	r3, r7
 802a1d4:	f7d8 fea4 	bl	8002f20 <__aeabi_dsub>
 802a1d8:	0002      	movs	r2, r0
 802a1da:	000b      	movs	r3, r1
 802a1dc:	2000      	movs	r0, #0
 802a1de:	491f      	ldr	r1, [pc, #124]	@ (802a25c <__ieee754_pow+0xa2c>)
 802a1e0:	f7d8 fe9e 	bl	8002f20 <__aeabi_dsub>
 802a1e4:	9b02      	ldr	r3, [sp, #8]
 802a1e6:	051b      	lsls	r3, r3, #20
 802a1e8:	185b      	adds	r3, r3, r1
 802a1ea:	151a      	asrs	r2, r3, #20
 802a1ec:	2a00      	cmp	r2, #0
 802a1ee:	dc06      	bgt.n	802a1fe <__ieee754_pow+0x9ce>
 802a1f0:	9a02      	ldr	r2, [sp, #8]
 802a1f2:	f000 f929 	bl	802a448 <scalbn>
 802a1f6:	9a06      	ldr	r2, [sp, #24]
 802a1f8:	9b07      	ldr	r3, [sp, #28]
 802a1fa:	f7ff fb8b 	bl	8029914 <__ieee754_pow+0xe4>
 802a1fe:	0019      	movs	r1, r3
 802a200:	e7f9      	b.n	802a1f6 <__ieee754_pow+0x9c6>
 802a202:	2300      	movs	r3, #0
 802a204:	4c15      	ldr	r4, [pc, #84]	@ (802a25c <__ieee754_pow+0xa2c>)
 802a206:	9300      	str	r3, [sp, #0]
 802a208:	9401      	str	r4, [sp, #4]
 802a20a:	f7ff fbc8 	bl	802999e <__ieee754_pow+0x16e>
 802a20e:	46c0      	nop			@ (mov r8, r8)
 802a210:	3fe00000 	.word	0x3fe00000
 802a214:	fffffc02 	.word	0xfffffc02
 802a218:	fffffc01 	.word	0xfffffc01
 802a21c:	fff00000 	.word	0xfff00000
 802a220:	3fe62e43 	.word	0x3fe62e43
 802a224:	fefa39ef 	.word	0xfefa39ef
 802a228:	3fe62e42 	.word	0x3fe62e42
 802a22c:	0ca86c39 	.word	0x0ca86c39
 802a230:	be205c61 	.word	0xbe205c61
 802a234:	72bea4d0 	.word	0x72bea4d0
 802a238:	3e663769 	.word	0x3e663769
 802a23c:	c5d26bf1 	.word	0xc5d26bf1
 802a240:	3ebbbd41 	.word	0x3ebbbd41
 802a244:	af25de2c 	.word	0xaf25de2c
 802a248:	3f11566a 	.word	0x3f11566a
 802a24c:	16bebd93 	.word	0x16bebd93
 802a250:	3f66c16c 	.word	0x3f66c16c
 802a254:	5555553e 	.word	0x5555553e
 802a258:	3fc55555 	.word	0x3fc55555
 802a25c:	3ff00000 	.word	0x3ff00000

0802a260 <fabs>:
 802a260:	0049      	lsls	r1, r1, #1
 802a262:	084b      	lsrs	r3, r1, #1
 802a264:	0019      	movs	r1, r3
 802a266:	4770      	bx	lr

0802a268 <__ieee754_expf>:
 802a268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a26a:	21ff      	movs	r1, #255	@ 0xff
 802a26c:	0043      	lsls	r3, r0, #1
 802a26e:	1c04      	adds	r4, r0, #0
 802a270:	085b      	lsrs	r3, r3, #1
 802a272:	05c9      	lsls	r1, r1, #23
 802a274:	428b      	cmp	r3, r1
 802a276:	d904      	bls.n	802a282 <__ieee754_expf+0x1a>
 802a278:	1c01      	adds	r1, r0, #0
 802a27a:	1c20      	adds	r0, r4, #0
 802a27c:	f7d6 fb20 	bl	80008c0 <__aeabi_fadd>
 802a280:	e00d      	b.n	802a29e <__ieee754_expf+0x36>
 802a282:	0fc6      	lsrs	r6, r0, #31
 802a284:	428b      	cmp	r3, r1
 802a286:	d104      	bne.n	802a292 <__ieee754_expf+0x2a>
 802a288:	2e00      	cmp	r6, #0
 802a28a:	d000      	beq.n	802a28e <__ieee754_expf+0x26>
 802a28c:	e0ba      	b.n	802a404 <__ieee754_expf+0x19c>
 802a28e:	1c20      	adds	r0, r4, #0
 802a290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a292:	495d      	ldr	r1, [pc, #372]	@ (802a408 <__ieee754_expf+0x1a0>)
 802a294:	4288      	cmp	r0, r1
 802a296:	dd04      	ble.n	802a2a2 <__ieee754_expf+0x3a>
 802a298:	2000      	movs	r0, #0
 802a29a:	f000 f98a 	bl	802a5b2 <__math_oflowf>
 802a29e:	1c04      	adds	r4, r0, #0
 802a2a0:	e7f5      	b.n	802a28e <__ieee754_expf+0x26>
 802a2a2:	2800      	cmp	r0, #0
 802a2a4:	da06      	bge.n	802a2b4 <__ieee754_expf+0x4c>
 802a2a6:	4a59      	ldr	r2, [pc, #356]	@ (802a40c <__ieee754_expf+0x1a4>)
 802a2a8:	4293      	cmp	r3, r2
 802a2aa:	d903      	bls.n	802a2b4 <__ieee754_expf+0x4c>
 802a2ac:	2000      	movs	r0, #0
 802a2ae:	f000 f97a 	bl	802a5a6 <__math_uflowf>
 802a2b2:	e7f4      	b.n	802a29e <__ieee754_expf+0x36>
 802a2b4:	4a56      	ldr	r2, [pc, #344]	@ (802a410 <__ieee754_expf+0x1a8>)
 802a2b6:	4293      	cmp	r3, r2
 802a2b8:	d96e      	bls.n	802a398 <__ieee754_expf+0x130>
 802a2ba:	4a56      	ldr	r2, [pc, #344]	@ (802a414 <__ieee754_expf+0x1ac>)
 802a2bc:	00b5      	lsls	r5, r6, #2
 802a2be:	4293      	cmp	r3, r2
 802a2c0:	d84e      	bhi.n	802a360 <__ieee754_expf+0xf8>
 802a2c2:	4b55      	ldr	r3, [pc, #340]	@ (802a418 <__ieee754_expf+0x1b0>)
 802a2c4:	1c20      	adds	r0, r4, #0
 802a2c6:	5959      	ldr	r1, [r3, r5]
 802a2c8:	f7d7 f814 	bl	80012f4 <__aeabi_fsub>
 802a2cc:	4b53      	ldr	r3, [pc, #332]	@ (802a41c <__ieee754_expf+0x1b4>)
 802a2ce:	1c07      	adds	r7, r0, #0
 802a2d0:	595b      	ldr	r3, [r3, r5]
 802a2d2:	2501      	movs	r5, #1
 802a2d4:	4075      	eors	r5, r6
 802a2d6:	9300      	str	r3, [sp, #0]
 802a2d8:	1bad      	subs	r5, r5, r6
 802a2da:	9900      	ldr	r1, [sp, #0]
 802a2dc:	1c38      	adds	r0, r7, #0
 802a2de:	f7d7 f809 	bl	80012f4 <__aeabi_fsub>
 802a2e2:	1c04      	adds	r4, r0, #0
 802a2e4:	1c21      	adds	r1, r4, #0
 802a2e6:	1c20      	adds	r0, r4, #0
 802a2e8:	f7d6 feaa 	bl	8001040 <__aeabi_fmul>
 802a2ec:	494c      	ldr	r1, [pc, #304]	@ (802a420 <__ieee754_expf+0x1b8>)
 802a2ee:	1c06      	adds	r6, r0, #0
 802a2f0:	f7d6 fea6 	bl	8001040 <__aeabi_fmul>
 802a2f4:	494b      	ldr	r1, [pc, #300]	@ (802a424 <__ieee754_expf+0x1bc>)
 802a2f6:	f7d6 fffd 	bl	80012f4 <__aeabi_fsub>
 802a2fa:	1c31      	adds	r1, r6, #0
 802a2fc:	f7d6 fea0 	bl	8001040 <__aeabi_fmul>
 802a300:	4949      	ldr	r1, [pc, #292]	@ (802a428 <__ieee754_expf+0x1c0>)
 802a302:	f7d6 fadd 	bl	80008c0 <__aeabi_fadd>
 802a306:	1c31      	adds	r1, r6, #0
 802a308:	f7d6 fe9a 	bl	8001040 <__aeabi_fmul>
 802a30c:	4947      	ldr	r1, [pc, #284]	@ (802a42c <__ieee754_expf+0x1c4>)
 802a30e:	f7d6 fff1 	bl	80012f4 <__aeabi_fsub>
 802a312:	1c31      	adds	r1, r6, #0
 802a314:	f7d6 fe94 	bl	8001040 <__aeabi_fmul>
 802a318:	4945      	ldr	r1, [pc, #276]	@ (802a430 <__ieee754_expf+0x1c8>)
 802a31a:	f7d6 fad1 	bl	80008c0 <__aeabi_fadd>
 802a31e:	1c31      	adds	r1, r6, #0
 802a320:	f7d6 fe8e 	bl	8001040 <__aeabi_fmul>
 802a324:	1c01      	adds	r1, r0, #0
 802a326:	1c20      	adds	r0, r4, #0
 802a328:	f7d6 ffe4 	bl	80012f4 <__aeabi_fsub>
 802a32c:	1c01      	adds	r1, r0, #0
 802a32e:	1c06      	adds	r6, r0, #0
 802a330:	1c20      	adds	r0, r4, #0
 802a332:	f7d6 fe85 	bl	8001040 <__aeabi_fmul>
 802a336:	9001      	str	r0, [sp, #4]
 802a338:	2d00      	cmp	r5, #0
 802a33a:	d140      	bne.n	802a3be <__ieee754_expf+0x156>
 802a33c:	2180      	movs	r1, #128	@ 0x80
 802a33e:	1c30      	adds	r0, r6, #0
 802a340:	05c9      	lsls	r1, r1, #23
 802a342:	f7d6 ffd7 	bl	80012f4 <__aeabi_fsub>
 802a346:	1c01      	adds	r1, r0, #0
 802a348:	9801      	ldr	r0, [sp, #4]
 802a34a:	f7d6 fcab 	bl	8000ca4 <__aeabi_fdiv>
 802a34e:	1c21      	adds	r1, r4, #0
 802a350:	f7d6 ffd0 	bl	80012f4 <__aeabi_fsub>
 802a354:	1c01      	adds	r1, r0, #0
 802a356:	20fe      	movs	r0, #254	@ 0xfe
 802a358:	0580      	lsls	r0, r0, #22
 802a35a:	f7d6 ffcb 	bl	80012f4 <__aeabi_fsub>
 802a35e:	e79e      	b.n	802a29e <__ieee754_expf+0x36>
 802a360:	4934      	ldr	r1, [pc, #208]	@ (802a434 <__ieee754_expf+0x1cc>)
 802a362:	1c20      	adds	r0, r4, #0
 802a364:	f7d6 fe6c 	bl	8001040 <__aeabi_fmul>
 802a368:	4b33      	ldr	r3, [pc, #204]	@ (802a438 <__ieee754_expf+0x1d0>)
 802a36a:	5959      	ldr	r1, [r3, r5]
 802a36c:	f7d6 faa8 	bl	80008c0 <__aeabi_fadd>
 802a370:	f7d7 fa3a 	bl	80017e8 <__aeabi_f2iz>
 802a374:	0005      	movs	r5, r0
 802a376:	f7d7 fa57 	bl	8001828 <__aeabi_i2f>
 802a37a:	4930      	ldr	r1, [pc, #192]	@ (802a43c <__ieee754_expf+0x1d4>)
 802a37c:	1c06      	adds	r6, r0, #0
 802a37e:	f7d6 fe5f 	bl	8001040 <__aeabi_fmul>
 802a382:	1c01      	adds	r1, r0, #0
 802a384:	1c20      	adds	r0, r4, #0
 802a386:	f7d6 ffb5 	bl	80012f4 <__aeabi_fsub>
 802a38a:	492d      	ldr	r1, [pc, #180]	@ (802a440 <__ieee754_expf+0x1d8>)
 802a38c:	1c07      	adds	r7, r0, #0
 802a38e:	1c30      	adds	r0, r6, #0
 802a390:	f7d6 fe56 	bl	8001040 <__aeabi_fmul>
 802a394:	9000      	str	r0, [sp, #0]
 802a396:	e7a0      	b.n	802a2da <__ieee754_expf+0x72>
 802a398:	22d0      	movs	r2, #208	@ 0xd0
 802a39a:	0592      	lsls	r2, r2, #22
 802a39c:	4293      	cmp	r3, r2
 802a39e:	d20c      	bcs.n	802a3ba <__ieee754_expf+0x152>
 802a3a0:	4928      	ldr	r1, [pc, #160]	@ (802a444 <__ieee754_expf+0x1dc>)
 802a3a2:	1c20      	adds	r0, r4, #0
 802a3a4:	f7d6 fa8c 	bl	80008c0 <__aeabi_fadd>
 802a3a8:	21fe      	movs	r1, #254	@ 0xfe
 802a3aa:	0589      	lsls	r1, r1, #22
 802a3ac:	f7d6 f8d4 	bl	8000558 <__aeabi_fcmpgt>
 802a3b0:	1e05      	subs	r5, r0, #0
 802a3b2:	d097      	beq.n	802a2e4 <__ieee754_expf+0x7c>
 802a3b4:	21fe      	movs	r1, #254	@ 0xfe
 802a3b6:	0589      	lsls	r1, r1, #22
 802a3b8:	e75f      	b.n	802a27a <__ieee754_expf+0x12>
 802a3ba:	2500      	movs	r5, #0
 802a3bc:	e792      	b.n	802a2e4 <__ieee754_expf+0x7c>
 802a3be:	2080      	movs	r0, #128	@ 0x80
 802a3c0:	1c31      	adds	r1, r6, #0
 802a3c2:	05c0      	lsls	r0, r0, #23
 802a3c4:	f7d6 ff96 	bl	80012f4 <__aeabi_fsub>
 802a3c8:	1c01      	adds	r1, r0, #0
 802a3ca:	9801      	ldr	r0, [sp, #4]
 802a3cc:	f7d6 fc6a 	bl	8000ca4 <__aeabi_fdiv>
 802a3d0:	1c01      	adds	r1, r0, #0
 802a3d2:	9800      	ldr	r0, [sp, #0]
 802a3d4:	f7d6 ff8e 	bl	80012f4 <__aeabi_fsub>
 802a3d8:	1c39      	adds	r1, r7, #0
 802a3da:	f7d6 ff8b 	bl	80012f4 <__aeabi_fsub>
 802a3de:	1c01      	adds	r1, r0, #0
 802a3e0:	20fe      	movs	r0, #254	@ 0xfe
 802a3e2:	0580      	lsls	r0, r0, #22
 802a3e4:	f7d6 ff86 	bl	80012f4 <__aeabi_fsub>
 802a3e8:	002b      	movs	r3, r5
 802a3ea:	337d      	adds	r3, #125	@ 0x7d
 802a3ec:	db02      	blt.n	802a3f4 <__ieee754_expf+0x18c>
 802a3ee:	05ec      	lsls	r4, r5, #23
 802a3f0:	1824      	adds	r4, r4, r0
 802a3f2:	e74c      	b.n	802a28e <__ieee754_expf+0x26>
 802a3f4:	21d8      	movs	r1, #216	@ 0xd8
 802a3f6:	3564      	adds	r5, #100	@ 0x64
 802a3f8:	05ed      	lsls	r5, r5, #23
 802a3fa:	1828      	adds	r0, r5, r0
 802a3fc:	0509      	lsls	r1, r1, #20
 802a3fe:	f7d6 fe1f 	bl	8001040 <__aeabi_fmul>
 802a402:	e74c      	b.n	802a29e <__ieee754_expf+0x36>
 802a404:	2400      	movs	r4, #0
 802a406:	e742      	b.n	802a28e <__ieee754_expf+0x26>
 802a408:	42b17217 	.word	0x42b17217
 802a40c:	42cff1b5 	.word	0x42cff1b5
 802a410:	3eb17218 	.word	0x3eb17218
 802a414:	3f851591 	.word	0x3f851591
 802a418:	0802f028 	.word	0x0802f028
 802a41c:	0802f020 	.word	0x0802f020
 802a420:	3331bb4c 	.word	0x3331bb4c
 802a424:	35ddea0e 	.word	0x35ddea0e
 802a428:	388ab355 	.word	0x388ab355
 802a42c:	3b360b61 	.word	0x3b360b61
 802a430:	3e2aaaab 	.word	0x3e2aaaab
 802a434:	3fb8aa3b 	.word	0x3fb8aa3b
 802a438:	0802f030 	.word	0x0802f030
 802a43c:	3f317180 	.word	0x3f317180
 802a440:	3717f7d1 	.word	0x3717f7d1
 802a444:	7149f2ca 	.word	0x7149f2ca

0802a448 <scalbn>:
 802a448:	004b      	lsls	r3, r1, #1
 802a44a:	b570      	push	{r4, r5, r6, lr}
 802a44c:	0d5b      	lsrs	r3, r3, #21
 802a44e:	0014      	movs	r4, r2
 802a450:	000d      	movs	r5, r1
 802a452:	2b00      	cmp	r3, #0
 802a454:	d10f      	bne.n	802a476 <scalbn+0x2e>
 802a456:	004b      	lsls	r3, r1, #1
 802a458:	085b      	lsrs	r3, r3, #1
 802a45a:	4303      	orrs	r3, r0
 802a45c:	d012      	beq.n	802a484 <scalbn+0x3c>
 802a45e:	4b23      	ldr	r3, [pc, #140]	@ (802a4ec <scalbn+0xa4>)
 802a460:	2200      	movs	r2, #0
 802a462:	f7d8 fa77 	bl	8002954 <__aeabi_dmul>
 802a466:	4b22      	ldr	r3, [pc, #136]	@ (802a4f0 <scalbn+0xa8>)
 802a468:	429c      	cmp	r4, r3
 802a46a:	da0c      	bge.n	802a486 <scalbn+0x3e>
 802a46c:	4a21      	ldr	r2, [pc, #132]	@ (802a4f4 <scalbn+0xac>)
 802a46e:	4b22      	ldr	r3, [pc, #136]	@ (802a4f8 <scalbn+0xb0>)
 802a470:	f7d8 fa70 	bl	8002954 <__aeabi_dmul>
 802a474:	e006      	b.n	802a484 <scalbn+0x3c>
 802a476:	4a21      	ldr	r2, [pc, #132]	@ (802a4fc <scalbn+0xb4>)
 802a478:	4293      	cmp	r3, r2
 802a47a:	d108      	bne.n	802a48e <scalbn+0x46>
 802a47c:	0002      	movs	r2, r0
 802a47e:	000b      	movs	r3, r1
 802a480:	f7d7 fa68 	bl	8001954 <__aeabi_dadd>
 802a484:	bd70      	pop	{r4, r5, r6, pc}
 802a486:	000d      	movs	r5, r1
 802a488:	004b      	lsls	r3, r1, #1
 802a48a:	0d5b      	lsrs	r3, r3, #21
 802a48c:	3b36      	subs	r3, #54	@ 0x36
 802a48e:	4a1c      	ldr	r2, [pc, #112]	@ (802a500 <scalbn+0xb8>)
 802a490:	4294      	cmp	r4, r2
 802a492:	dd0a      	ble.n	802a4aa <scalbn+0x62>
 802a494:	4c1b      	ldr	r4, [pc, #108]	@ (802a504 <scalbn+0xbc>)
 802a496:	4d1c      	ldr	r5, [pc, #112]	@ (802a508 <scalbn+0xc0>)
 802a498:	2900      	cmp	r1, #0
 802a49a:	da01      	bge.n	802a4a0 <scalbn+0x58>
 802a49c:	4c19      	ldr	r4, [pc, #100]	@ (802a504 <scalbn+0xbc>)
 802a49e:	4d1b      	ldr	r5, [pc, #108]	@ (802a50c <scalbn+0xc4>)
 802a4a0:	4a18      	ldr	r2, [pc, #96]	@ (802a504 <scalbn+0xbc>)
 802a4a2:	4b19      	ldr	r3, [pc, #100]	@ (802a508 <scalbn+0xc0>)
 802a4a4:	0020      	movs	r0, r4
 802a4a6:	0029      	movs	r1, r5
 802a4a8:	e7e2      	b.n	802a470 <scalbn+0x28>
 802a4aa:	18e2      	adds	r2, r4, r3
 802a4ac:	4b18      	ldr	r3, [pc, #96]	@ (802a510 <scalbn+0xc8>)
 802a4ae:	429a      	cmp	r2, r3
 802a4b0:	dcf0      	bgt.n	802a494 <scalbn+0x4c>
 802a4b2:	2a00      	cmp	r2, #0
 802a4b4:	dd05      	ble.n	802a4c2 <scalbn+0x7a>
 802a4b6:	4b17      	ldr	r3, [pc, #92]	@ (802a514 <scalbn+0xcc>)
 802a4b8:	0512      	lsls	r2, r2, #20
 802a4ba:	402b      	ands	r3, r5
 802a4bc:	4313      	orrs	r3, r2
 802a4be:	0019      	movs	r1, r3
 802a4c0:	e7e0      	b.n	802a484 <scalbn+0x3c>
 802a4c2:	0013      	movs	r3, r2
 802a4c4:	3335      	adds	r3, #53	@ 0x35
 802a4c6:	da08      	bge.n	802a4da <scalbn+0x92>
 802a4c8:	4c0a      	ldr	r4, [pc, #40]	@ (802a4f4 <scalbn+0xac>)
 802a4ca:	4d0b      	ldr	r5, [pc, #44]	@ (802a4f8 <scalbn+0xb0>)
 802a4cc:	2900      	cmp	r1, #0
 802a4ce:	da01      	bge.n	802a4d4 <scalbn+0x8c>
 802a4d0:	4c08      	ldr	r4, [pc, #32]	@ (802a4f4 <scalbn+0xac>)
 802a4d2:	4d11      	ldr	r5, [pc, #68]	@ (802a518 <scalbn+0xd0>)
 802a4d4:	4a07      	ldr	r2, [pc, #28]	@ (802a4f4 <scalbn+0xac>)
 802a4d6:	4b08      	ldr	r3, [pc, #32]	@ (802a4f8 <scalbn+0xb0>)
 802a4d8:	e7e4      	b.n	802a4a4 <scalbn+0x5c>
 802a4da:	4b0e      	ldr	r3, [pc, #56]	@ (802a514 <scalbn+0xcc>)
 802a4dc:	3236      	adds	r2, #54	@ 0x36
 802a4de:	401d      	ands	r5, r3
 802a4e0:	0512      	lsls	r2, r2, #20
 802a4e2:	432a      	orrs	r2, r5
 802a4e4:	0011      	movs	r1, r2
 802a4e6:	4b0d      	ldr	r3, [pc, #52]	@ (802a51c <scalbn+0xd4>)
 802a4e8:	2200      	movs	r2, #0
 802a4ea:	e7c1      	b.n	802a470 <scalbn+0x28>
 802a4ec:	43500000 	.word	0x43500000
 802a4f0:	ffff3cb0 	.word	0xffff3cb0
 802a4f4:	c2f8f359 	.word	0xc2f8f359
 802a4f8:	01a56e1f 	.word	0x01a56e1f
 802a4fc:	000007ff 	.word	0x000007ff
 802a500:	0000c350 	.word	0x0000c350
 802a504:	8800759c 	.word	0x8800759c
 802a508:	7e37e43c 	.word	0x7e37e43c
 802a50c:	fe37e43c 	.word	0xfe37e43c
 802a510:	000007fe 	.word	0x000007fe
 802a514:	800fffff 	.word	0x800fffff
 802a518:	81a56e1f 	.word	0x81a56e1f
 802a51c:	3c900000 	.word	0x3c900000

0802a520 <with_errno>:
 802a520:	b570      	push	{r4, r5, r6, lr}
 802a522:	000d      	movs	r5, r1
 802a524:	0016      	movs	r6, r2
 802a526:	0004      	movs	r4, r0
 802a528:	f7fc f952 	bl	80267d0 <__errno>
 802a52c:	0029      	movs	r1, r5
 802a52e:	6006      	str	r6, [r0, #0]
 802a530:	0020      	movs	r0, r4
 802a532:	bd70      	pop	{r4, r5, r6, pc}

0802a534 <xflow>:
 802a534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a536:	0014      	movs	r4, r2
 802a538:	001d      	movs	r5, r3
 802a53a:	2800      	cmp	r0, #0
 802a53c:	d002      	beq.n	802a544 <xflow+0x10>
 802a53e:	2180      	movs	r1, #128	@ 0x80
 802a540:	0609      	lsls	r1, r1, #24
 802a542:	185b      	adds	r3, r3, r1
 802a544:	9200      	str	r2, [sp, #0]
 802a546:	9301      	str	r3, [sp, #4]
 802a548:	9a00      	ldr	r2, [sp, #0]
 802a54a:	9b01      	ldr	r3, [sp, #4]
 802a54c:	0020      	movs	r0, r4
 802a54e:	0029      	movs	r1, r5
 802a550:	f7d8 fa00 	bl	8002954 <__aeabi_dmul>
 802a554:	2222      	movs	r2, #34	@ 0x22
 802a556:	f7ff ffe3 	bl	802a520 <with_errno>
 802a55a:	b003      	add	sp, #12
 802a55c:	bd30      	pop	{r4, r5, pc}

0802a55e <__math_uflow>:
 802a55e:	2380      	movs	r3, #128	@ 0x80
 802a560:	b510      	push	{r4, lr}
 802a562:	2200      	movs	r2, #0
 802a564:	055b      	lsls	r3, r3, #21
 802a566:	f7ff ffe5 	bl	802a534 <xflow>
 802a56a:	bd10      	pop	{r4, pc}

0802a56c <__math_oflow>:
 802a56c:	23e0      	movs	r3, #224	@ 0xe0
 802a56e:	b510      	push	{r4, lr}
 802a570:	2200      	movs	r2, #0
 802a572:	05db      	lsls	r3, r3, #23
 802a574:	f7ff ffde 	bl	802a534 <xflow>
 802a578:	bd10      	pop	{r4, pc}

0802a57a <with_errnof>:
 802a57a:	b570      	push	{r4, r5, r6, lr}
 802a57c:	000d      	movs	r5, r1
 802a57e:	1c04      	adds	r4, r0, #0
 802a580:	f7fc f926 	bl	80267d0 <__errno>
 802a584:	6005      	str	r5, [r0, #0]
 802a586:	1c20      	adds	r0, r4, #0
 802a588:	bd70      	pop	{r4, r5, r6, pc}

0802a58a <xflowf>:
 802a58a:	b510      	push	{r4, lr}
 802a58c:	1c0b      	adds	r3, r1, #0
 802a58e:	2800      	cmp	r0, #0
 802a590:	d002      	beq.n	802a598 <xflowf+0xe>
 802a592:	2380      	movs	r3, #128	@ 0x80
 802a594:	061b      	lsls	r3, r3, #24
 802a596:	18cb      	adds	r3, r1, r3
 802a598:	1c18      	adds	r0, r3, #0
 802a59a:	f7d6 fd51 	bl	8001040 <__aeabi_fmul>
 802a59e:	2122      	movs	r1, #34	@ 0x22
 802a5a0:	f7ff ffeb 	bl	802a57a <with_errnof>
 802a5a4:	bd10      	pop	{r4, pc}

0802a5a6 <__math_uflowf>:
 802a5a6:	2180      	movs	r1, #128	@ 0x80
 802a5a8:	b510      	push	{r4, lr}
 802a5aa:	0549      	lsls	r1, r1, #21
 802a5ac:	f7ff ffed 	bl	802a58a <xflowf>
 802a5b0:	bd10      	pop	{r4, pc}

0802a5b2 <__math_oflowf>:
 802a5b2:	21e0      	movs	r1, #224	@ 0xe0
 802a5b4:	b510      	push	{r4, lr}
 802a5b6:	05c9      	lsls	r1, r1, #23
 802a5b8:	f7ff ffe7 	bl	802a58a <xflowf>
 802a5bc:	bd10      	pop	{r4, pc}
	...

0802a5c0 <__ieee754_sqrt>:
 802a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a5c2:	000a      	movs	r2, r1
 802a5c4:	000d      	movs	r5, r1
 802a5c6:	496b      	ldr	r1, [pc, #428]	@ (802a774 <__ieee754_sqrt+0x1b4>)
 802a5c8:	0004      	movs	r4, r0
 802a5ca:	0003      	movs	r3, r0
 802a5cc:	0008      	movs	r0, r1
 802a5ce:	b087      	sub	sp, #28
 802a5d0:	4028      	ands	r0, r5
 802a5d2:	4288      	cmp	r0, r1
 802a5d4:	d111      	bne.n	802a5fa <__ieee754_sqrt+0x3a>
 802a5d6:	0022      	movs	r2, r4
 802a5d8:	002b      	movs	r3, r5
 802a5da:	0020      	movs	r0, r4
 802a5dc:	0029      	movs	r1, r5
 802a5de:	f7d8 f9b9 	bl	8002954 <__aeabi_dmul>
 802a5e2:	0002      	movs	r2, r0
 802a5e4:	000b      	movs	r3, r1
 802a5e6:	0020      	movs	r0, r4
 802a5e8:	0029      	movs	r1, r5
 802a5ea:	f7d7 f9b3 	bl	8001954 <__aeabi_dadd>
 802a5ee:	0004      	movs	r4, r0
 802a5f0:	000d      	movs	r5, r1
 802a5f2:	0020      	movs	r0, r4
 802a5f4:	0029      	movs	r1, r5
 802a5f6:	b007      	add	sp, #28
 802a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a5fa:	2d00      	cmp	r5, #0
 802a5fc:	dc11      	bgt.n	802a622 <__ieee754_sqrt+0x62>
 802a5fe:	0069      	lsls	r1, r5, #1
 802a600:	0849      	lsrs	r1, r1, #1
 802a602:	4321      	orrs	r1, r4
 802a604:	d0f5      	beq.n	802a5f2 <__ieee754_sqrt+0x32>
 802a606:	2000      	movs	r0, #0
 802a608:	4285      	cmp	r5, r0
 802a60a:	d010      	beq.n	802a62e <__ieee754_sqrt+0x6e>
 802a60c:	0022      	movs	r2, r4
 802a60e:	002b      	movs	r3, r5
 802a610:	0020      	movs	r0, r4
 802a612:	0029      	movs	r1, r5
 802a614:	f7d8 fc84 	bl	8002f20 <__aeabi_dsub>
 802a618:	0002      	movs	r2, r0
 802a61a:	000b      	movs	r3, r1
 802a61c:	f7d7 fd60 	bl	80020e0 <__aeabi_ddiv>
 802a620:	e7e5      	b.n	802a5ee <__ieee754_sqrt+0x2e>
 802a622:	1528      	asrs	r0, r5, #20
 802a624:	d115      	bne.n	802a652 <__ieee754_sqrt+0x92>
 802a626:	2480      	movs	r4, #128	@ 0x80
 802a628:	2100      	movs	r1, #0
 802a62a:	0364      	lsls	r4, r4, #13
 802a62c:	e007      	b.n	802a63e <__ieee754_sqrt+0x7e>
 802a62e:	0ada      	lsrs	r2, r3, #11
 802a630:	3815      	subs	r0, #21
 802a632:	055b      	lsls	r3, r3, #21
 802a634:	2a00      	cmp	r2, #0
 802a636:	d0fa      	beq.n	802a62e <__ieee754_sqrt+0x6e>
 802a638:	e7f5      	b.n	802a626 <__ieee754_sqrt+0x66>
 802a63a:	0052      	lsls	r2, r2, #1
 802a63c:	3101      	adds	r1, #1
 802a63e:	4222      	tst	r2, r4
 802a640:	d0fb      	beq.n	802a63a <__ieee754_sqrt+0x7a>
 802a642:	1e4c      	subs	r4, r1, #1
 802a644:	1b00      	subs	r0, r0, r4
 802a646:	2420      	movs	r4, #32
 802a648:	001d      	movs	r5, r3
 802a64a:	1a64      	subs	r4, r4, r1
 802a64c:	40e5      	lsrs	r5, r4
 802a64e:	408b      	lsls	r3, r1
 802a650:	432a      	orrs	r2, r5
 802a652:	4949      	ldr	r1, [pc, #292]	@ (802a778 <__ieee754_sqrt+0x1b8>)
 802a654:	0312      	lsls	r2, r2, #12
 802a656:	1844      	adds	r4, r0, r1
 802a658:	2180      	movs	r1, #128	@ 0x80
 802a65a:	0b12      	lsrs	r2, r2, #12
 802a65c:	0349      	lsls	r1, r1, #13
 802a65e:	4311      	orrs	r1, r2
 802a660:	07c0      	lsls	r0, r0, #31
 802a662:	d403      	bmi.n	802a66c <__ieee754_sqrt+0xac>
 802a664:	0fda      	lsrs	r2, r3, #31
 802a666:	0049      	lsls	r1, r1, #1
 802a668:	1851      	adds	r1, r2, r1
 802a66a:	005b      	lsls	r3, r3, #1
 802a66c:	2500      	movs	r5, #0
 802a66e:	1062      	asrs	r2, r4, #1
 802a670:	0049      	lsls	r1, r1, #1
 802a672:	2480      	movs	r4, #128	@ 0x80
 802a674:	9205      	str	r2, [sp, #20]
 802a676:	0fda      	lsrs	r2, r3, #31
 802a678:	1852      	adds	r2, r2, r1
 802a67a:	2016      	movs	r0, #22
 802a67c:	0029      	movs	r1, r5
 802a67e:	005b      	lsls	r3, r3, #1
 802a680:	03a4      	lsls	r4, r4, #14
 802a682:	190e      	adds	r6, r1, r4
 802a684:	4296      	cmp	r6, r2
 802a686:	dc02      	bgt.n	802a68e <__ieee754_sqrt+0xce>
 802a688:	1931      	adds	r1, r6, r4
 802a68a:	1b92      	subs	r2, r2, r6
 802a68c:	192d      	adds	r5, r5, r4
 802a68e:	0fde      	lsrs	r6, r3, #31
 802a690:	0052      	lsls	r2, r2, #1
 802a692:	3801      	subs	r0, #1
 802a694:	1992      	adds	r2, r2, r6
 802a696:	005b      	lsls	r3, r3, #1
 802a698:	0864      	lsrs	r4, r4, #1
 802a69a:	2800      	cmp	r0, #0
 802a69c:	d1f1      	bne.n	802a682 <__ieee754_sqrt+0xc2>
 802a69e:	2620      	movs	r6, #32
 802a6a0:	2780      	movs	r7, #128	@ 0x80
 802a6a2:	0004      	movs	r4, r0
 802a6a4:	9604      	str	r6, [sp, #16]
 802a6a6:	063f      	lsls	r7, r7, #24
 802a6a8:	183e      	adds	r6, r7, r0
 802a6aa:	46b4      	mov	ip, r6
 802a6ac:	428a      	cmp	r2, r1
 802a6ae:	dc02      	bgt.n	802a6b6 <__ieee754_sqrt+0xf6>
 802a6b0:	d114      	bne.n	802a6dc <__ieee754_sqrt+0x11c>
 802a6b2:	429e      	cmp	r6, r3
 802a6b4:	d812      	bhi.n	802a6dc <__ieee754_sqrt+0x11c>
 802a6b6:	4660      	mov	r0, ip
 802a6b8:	4666      	mov	r6, ip
 802a6ba:	19c0      	adds	r0, r0, r7
 802a6bc:	9100      	str	r1, [sp, #0]
 802a6be:	2e00      	cmp	r6, #0
 802a6c0:	da03      	bge.n	802a6ca <__ieee754_sqrt+0x10a>
 802a6c2:	43c6      	mvns	r6, r0
 802a6c4:	0ff6      	lsrs	r6, r6, #31
 802a6c6:	198e      	adds	r6, r1, r6
 802a6c8:	9600      	str	r6, [sp, #0]
 802a6ca:	1a52      	subs	r2, r2, r1
 802a6cc:	4563      	cmp	r3, ip
 802a6ce:	4189      	sbcs	r1, r1
 802a6d0:	4249      	negs	r1, r1
 802a6d2:	1a52      	subs	r2, r2, r1
 802a6d4:	4661      	mov	r1, ip
 802a6d6:	1a5b      	subs	r3, r3, r1
 802a6d8:	9900      	ldr	r1, [sp, #0]
 802a6da:	19e4      	adds	r4, r4, r7
 802a6dc:	0fde      	lsrs	r6, r3, #31
 802a6de:	0052      	lsls	r2, r2, #1
 802a6e0:	1992      	adds	r2, r2, r6
 802a6e2:	9e04      	ldr	r6, [sp, #16]
 802a6e4:	005b      	lsls	r3, r3, #1
 802a6e6:	3e01      	subs	r6, #1
 802a6e8:	087f      	lsrs	r7, r7, #1
 802a6ea:	9604      	str	r6, [sp, #16]
 802a6ec:	2e00      	cmp	r6, #0
 802a6ee:	d1db      	bne.n	802a6a8 <__ieee754_sqrt+0xe8>
 802a6f0:	431a      	orrs	r2, r3
 802a6f2:	d01f      	beq.n	802a734 <__ieee754_sqrt+0x174>
 802a6f4:	4e21      	ldr	r6, [pc, #132]	@ (802a77c <__ieee754_sqrt+0x1bc>)
 802a6f6:	4f22      	ldr	r7, [pc, #136]	@ (802a780 <__ieee754_sqrt+0x1c0>)
 802a6f8:	6830      	ldr	r0, [r6, #0]
 802a6fa:	6871      	ldr	r1, [r6, #4]
 802a6fc:	683a      	ldr	r2, [r7, #0]
 802a6fe:	687b      	ldr	r3, [r7, #4]
 802a700:	9200      	str	r2, [sp, #0]
 802a702:	9301      	str	r3, [sp, #4]
 802a704:	6832      	ldr	r2, [r6, #0]
 802a706:	6873      	ldr	r3, [r6, #4]
 802a708:	9202      	str	r2, [sp, #8]
 802a70a:	9303      	str	r3, [sp, #12]
 802a70c:	9a00      	ldr	r2, [sp, #0]
 802a70e:	9b01      	ldr	r3, [sp, #4]
 802a710:	f7d8 fc06 	bl	8002f20 <__aeabi_dsub>
 802a714:	0002      	movs	r2, r0
 802a716:	000b      	movs	r3, r1
 802a718:	9802      	ldr	r0, [sp, #8]
 802a71a:	9903      	ldr	r1, [sp, #12]
 802a71c:	f7d5 fed8 	bl	80004d0 <__aeabi_dcmple>
 802a720:	2800      	cmp	r0, #0
 802a722:	d007      	beq.n	802a734 <__ieee754_sqrt+0x174>
 802a724:	6830      	ldr	r0, [r6, #0]
 802a726:	6871      	ldr	r1, [r6, #4]
 802a728:	683a      	ldr	r2, [r7, #0]
 802a72a:	687b      	ldr	r3, [r7, #4]
 802a72c:	1c67      	adds	r7, r4, #1
 802a72e:	d10c      	bne.n	802a74a <__ieee754_sqrt+0x18a>
 802a730:	9c04      	ldr	r4, [sp, #16]
 802a732:	3501      	adds	r5, #1
 802a734:	4a13      	ldr	r2, [pc, #76]	@ (802a784 <__ieee754_sqrt+0x1c4>)
 802a736:	106b      	asrs	r3, r5, #1
 802a738:	189b      	adds	r3, r3, r2
 802a73a:	9a05      	ldr	r2, [sp, #20]
 802a73c:	07ed      	lsls	r5, r5, #31
 802a73e:	0864      	lsrs	r4, r4, #1
 802a740:	0512      	lsls	r2, r2, #20
 802a742:	4325      	orrs	r5, r4
 802a744:	0028      	movs	r0, r5
 802a746:	18d1      	adds	r1, r2, r3
 802a748:	e751      	b.n	802a5ee <__ieee754_sqrt+0x2e>
 802a74a:	f7d7 f903 	bl	8001954 <__aeabi_dadd>
 802a74e:	6877      	ldr	r7, [r6, #4]
 802a750:	6836      	ldr	r6, [r6, #0]
 802a752:	0002      	movs	r2, r0
 802a754:	000b      	movs	r3, r1
 802a756:	0030      	movs	r0, r6
 802a758:	0039      	movs	r1, r7
 802a75a:	f7d5 feaf 	bl	80004bc <__aeabi_dcmplt>
 802a75e:	2800      	cmp	r0, #0
 802a760:	d004      	beq.n	802a76c <__ieee754_sqrt+0x1ac>
 802a762:	3402      	adds	r4, #2
 802a764:	4263      	negs	r3, r4
 802a766:	4163      	adcs	r3, r4
 802a768:	18ed      	adds	r5, r5, r3
 802a76a:	e7e3      	b.n	802a734 <__ieee754_sqrt+0x174>
 802a76c:	2301      	movs	r3, #1
 802a76e:	3401      	adds	r4, #1
 802a770:	439c      	bics	r4, r3
 802a772:	e7df      	b.n	802a734 <__ieee754_sqrt+0x174>
 802a774:	7ff00000 	.word	0x7ff00000
 802a778:	fffffc01 	.word	0xfffffc01
 802a77c:	0802f040 	.word	0x0802f040
 802a780:	0802f038 	.word	0x0802f038
 802a784:	3fe00000 	.word	0x3fe00000

0802a788 <_init>:
 802a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a78a:	46c0      	nop			@ (mov r8, r8)
 802a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a78e:	bc08      	pop	{r3}
 802a790:	469e      	mov	lr, r3
 802a792:	4770      	bx	lr

0802a794 <_fini>:
 802a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a796:	46c0      	nop			@ (mov r8, r8)
 802a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a79a:	bc08      	pop	{r3}
 802a79c:	469e      	mov	lr, r3
 802a79e:	4770      	bx	lr
